modules/contrib/sparql_entity_storage/sparql_entity_storage.api.php
modules/contrib/sparql_entity_storage/sparql_entity_storage.install
modules/contrib/sparql_entity_storage/sparql_entity_storage.module
modules/contrib/sparql_entity_storage/src/Annotation/SparqlEntityIdGenerator.php
modules/contrib/sparql_entity_storage/src/Controller/SparqlGraphToggle.php
modules/contrib/sparql_entity_storage/src/Driver/Database/sparql/Connection.php
modules/contrib/sparql_entity_storage/src/Driver/Database/sparql/ConnectionInterface.php
modules/contrib/sparql_entity_storage/src/Driver/Database/sparql/StatementStub.php
modules/contrib/sparql_entity_storage/src/Encoder/SparqlEncoder.php
modules/contrib/sparql_entity_storage/src/Entity/Query/Sparql/Query.php
modules/contrib/sparql_entity_storage/src/Entity/Query/Sparql/QueryFactory.php
modules/contrib/sparql_entity_storage/src/Entity/Query/Sparql/SparqlArg.php
modules/contrib/sparql_entity_storage/src/Entity/Query/Sparql/SparqlCondition.php
modules/contrib/sparql_entity_storage/src/Entity/Query/Sparql/SparqlConditionInterface.php
modules/contrib/sparql_entity_storage/src/Entity/Query/Sparql/SparqlQueryInterface.php
modules/contrib/sparql_entity_storage/src/Entity/SparqlGraph.php
modules/contrib/sparql_entity_storage/src/Entity/SparqlMapping.php
modules/contrib/sparql_entity_storage/src/Event/ActiveGraphEvent.php
modules/contrib/sparql_entity_storage/src/Event/DefaultGraphsEvent.php
modules/contrib/sparql_entity_storage/src/Event/InboundValueEvent.php
modules/contrib/sparql_entity_storage/src/Event/OutboundValueEvent.php
modules/contrib/sparql_entity_storage/src/Event/SparqlEntityStorageEvents.php
modules/contrib/sparql_entity_storage/src/Event/ValueEventBase.php
modules/contrib/sparql_entity_storage/src/EventSubscriber/DateTimeTrait.php
modules/contrib/sparql_entity_storage/src/EventSubscriber/InboundValueDateTimeSubscriber.php
modules/contrib/sparql_entity_storage/src/EventSubscriber/InboundValueTranslatableLiteralSubscriber.php
modules/contrib/sparql_entity_storage/src/EventSubscriber/OutboundValueDateTimeSubscriber.php
modules/contrib/sparql_entity_storage/src/EventSubscriber/SparqlContentTypesSubscriber.php
modules/contrib/sparql_entity_storage/src/Exception/DuplicatedIdException.php
modules/contrib/sparql_entity_storage/src/Exception/NonExistingFieldPropertyException.php
modules/contrib/sparql_entity_storage/src/Exception/SparqlQueryException.php
modules/contrib/sparql_entity_storage/src/Exception/UnmappedFieldException.php
modules/contrib/sparql_entity_storage/src/Form/SparqlEntityStorageFieldStorageConfigEditForm.php
modules/contrib/sparql_entity_storage/src/Form/SparqlGraphForm.php
modules/contrib/sparql_entity_storage/src/Normalizer/NormalizerBase.php
modules/contrib/sparql_entity_storage/src/Normalizer/SparqlEntityNormalizer.php
modules/contrib/sparql_entity_storage/src/ParamConverter/SparqlEntityStorageConverter.php
modules/contrib/sparql_entity_storage/src/Plugin/sparql_entity_storage/Id/DefaultSparqlEntityStorageEntityIdGenerator.php
modules/contrib/sparql_entity_storage/src/RouteProcessor/SparqlEntityStorageRouteProcessor.php
modules/contrib/sparql_entity_storage/src/SparqlEncoderCompilerPass.php
modules/contrib/sparql_entity_storage/src/SparqlEncoderInterface.php
modules/contrib/sparql_entity_storage/src/SparqlEntityStorage.php
modules/contrib/sparql_entity_storage/src/SparqlEntityStorageEntityIdPluginBase.php
modules/contrib/sparql_entity_storage/src/SparqlEntityStorageEntityIdPluginInterface.php
modules/contrib/sparql_entity_storage/src/SparqlEntityStorageEntityIdPluginManager.php
modules/contrib/sparql_entity_storage/src/SparqlEntityStorageFieldHandler.php
modules/contrib/sparql_entity_storage/src/SparqlEntityStorageFieldHandlerInterface.php
modules/contrib/sparql_entity_storage/src/SparqlEntityStorageGraphHandler.php
modules/contrib/sparql_entity_storage/src/SparqlEntityStorageGraphHandlerInterface.php
modules/contrib/sparql_entity_storage/src/SparqlEntityStorageInterface.php
modules/contrib/sparql_entity_storage/src/SparqlEntityStorageServiceProvider.php
modules/contrib/sparql_entity_storage/src/SparqlGraphAccessControlHandler.php
modules/contrib/sparql_entity_storage/src/SparqlGraphInterface.php
modules/contrib/sparql_entity_storage/src/SparqlGraphListBuilder.php
modules/contrib/sparql_entity_storage/src/SparqlGraphStoreTrait.php
modules/contrib/sparql_entity_storage/src/SparqlMappingInterface.php
modules/contrib/sparql_entity_storage/src/SparqlSerializer.php
modules/contrib/sparql_entity_storage/src/SparqlSerializerInterface.php
modules/contrib/sparql_entity_storage/src/UriEncoder.php
modules/contrib/sparql_entity_storage/tests/modules/sparql_graph_test/src/DefaultGraphsSubscriber.php
modules/contrib/sparql_entity_storage/tests/modules/sparql_serialization_test/src/Entity/SimpleSparqlTest.php
modules/contrib/sparql_entity_storage/tests/modules/sparql_serialization_test/src/Entity/SimpleSparqlTypeTest.php
modules/contrib/sparql_entity_storage/tests/modules/sparql_test/src/Entity/SparqlTest.php
modules/contrib/sparql_entity_storage/tests/modules/sparql_test/src/Entity/SparqlTypeTest.php
modules/contrib/sparql_entity_storage/tests/modules/sparql_test/src/Entity/SparqlWithoutBundlesTest.php
modules/contrib/sparql_entity_storage/tests/src/Kernel/DatabaseLogTest.php
modules/contrib/sparql_entity_storage/tests/src/Kernel/DateTimeFieldsTest.php
modules/contrib/sparql_entity_storage/tests/src/Kernel/EncodingTest.php
modules/contrib/sparql_entity_storage/tests/src/Kernel/EntityCreationTest.php
modules/contrib/sparql_entity_storage/tests/src/Kernel/EntityLanguageTest.php
modules/contrib/sparql_entity_storage/tests/src/Kernel/MultiColumnFieldTest.php
modules/contrib/sparql_entity_storage/tests/src/Kernel/SparqlEntityInsertTest.php
modules/contrib/sparql_entity_storage/tests/src/Kernel/SparqlEntityQueryTest.php
modules/contrib/sparql_entity_storage/tests/src/Kernel/SparqlGraphTest.php
modules/contrib/sparql_entity_storage/tests/src/Kernel/SparqlKernelTestBase.php
modules/contrib/sparql_entity_storage/tests/src/Kernel/SparqlSerializerTest.php
modules/contrib/sparql_entity_storage/tests/src/Traits/SparqlConnectionTrait.php

43 files with changes
=====================

1) modules/contrib/sparql_entity_storage/tests/src/Kernel/SparqlSerializerTest.php:66

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function tearDown() {
+  public function tearDown(): void {
     SimpleSparqlTest::load('http://example.com/apple')->delete();
     parent::tearDown();
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/sparql_entity_storage/tests/src/Kernel/SparqlGraphTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\sparql_entity_storage\Kernel;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\sparql_entity_storage\SparqlEntityStorage;
+use Drupal\sparql_test\Entity\SparqlTest;
+use Drupal\sparql_entity_storage\Entity\Query\Sparql\SparqlQueryInterface;
 use Drupal\sparql_entity_storage\Entity\SparqlGraph;
 use Drupal\sparql_entity_storage\Entity\SparqlMapping;

@@ @@
    * Tests graphs.
    */
   public function testSparqlGraphs(): void {
-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $manager */
+    /** @var EntityTypeManagerInterface $manager */
     $manager = $this->container->get('entity_type.manager');
-    /** @var \Drupal\sparql_entity_storage\SparqlEntityStorage $storage */
+    /** @var SparqlEntityStorage $storage */
     $storage = $manager->getStorage('sparql_test');

     // Create a 2nd graph.
@@ @@
     $this->createGraph('foo', 10);

     $id = 'http://example.com/apple';
-    /** @var \Drupal\sparql_test\Entity\SparqlTest $apple */
+    /** @var SparqlTest $apple */
     $apple = $storage->create([
       'id' => $id,
       'type' => 'fruit',
@@ @@
   /**
    * Returns the entity query.
    *
-   * @return \Drupal\sparql_entity_storage\Entity\Query\Sparql\SparqlQueryInterface
+   * @return SparqlQueryInterface
    *   The SPARQL entity query.
    */
   protected function getQuery() {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/sparql_entity_storage/tests/src/Kernel/SparqlEntityQueryTest.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * Dummy reference entities.
    *
-   * @var \Drupal\sparql_test\Entity\SparqlTest[]|null
+   * @var SparqlTest[]|null
    */
   protected ?array $entities;

@@ @@
    * @param string $operator
    *   (optional) The logic operator ('AND' or 'OR'). Defaults to 'AND'.
    *
-   * @return \Drupal\sparql_entity_storage\Entity\Query\Sparql\SparqlQueryInterface
+   * @return SparqlQueryInterface
    *   The SPARQL entity query.
    */
   protected function getQuery(string $operator = 'AND'): SparqlQueryInterface {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/sparql_entity_storage/tests/src/Kernel/SparqlEntityInsertTest.php:132

    ---------- begin diff ----------
@@ @@
    * Since SPARQL does not support deltas yet, this method will sort the values
    * so that they can be comparable.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity object.
    * @param string $field_name
    *   The field name.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/sparql_entity_storage/tests/src/Kernel/EntityLanguageTest.php:26

    ---------- begin diff ----------
@@ @@
       ConfigurableLanguage::createFromLangcode($langcode)->save();
     }

-    /** @var \Drupal\sparql_test\Entity\SparqlTest $entity */
+    /** @var SparqlTest $entity */
     $entity = SparqlTest::create([
       'id' => 'http://example.com/apple',
       'type' => 'fruit',
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/sparql_entity_storage/tests/src/Kernel/EntityCreationTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\sparql_entity_storage\Kernel;

+use Drupal\sparql_entity_storage\Driver\Database\sparql\ConnectionInterface;
 use Drupal\sparql_entity_storage\Entity\SparqlGraph;
 use Drupal\sparql_entity_storage\Exception\DuplicatedIdException;
 use Drupal\sparql_test\Entity\SparqlTest;
@@ @@
    * Tests entity without bundles creation.
    */
   public function testEntityTypeWithoutBundles(): void {
-    /** @var \Drupal\sparql_entity_storage\Driver\Database\sparql\ConnectionInterface $sparql */
+    /** @var ConnectionInterface $sparql */
     $sparql = \Drupal::service('sparql.endpoint');

     SparqlWithoutBundlesTest::create([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/sparql_entity_storage/tests/modules/sparql_graph_test/src/DefaultGraphsSubscriber.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * Reacts to default graph list building event.
    *
-   * @param \Drupal\sparql_entity_storage\Event\DefaultGraphsEvent $event
+   * @param DefaultGraphsEvent $event
    *   The event.
    */
   public function limitGraphs(DefaultGraphsEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/sparql_entity_storage/src/SparqlSerializerInterface.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Exports a single entity to a serialised string.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to export.
    * @param string $format
    *   The serialisation format. Defaults to 'turtle'.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/sparql_entity_storage/src/SparqlSerializer.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * Instantiates a new serializer instance.
    *
-   * @param \Drupal\sparql_entity_storage\Driver\Database\sparql\ConnectionInterface $sparqlEndpoint
+   * @param ConnectionInterface $sparqlEndpoint
    *   The SPARQL connection object.
-   * @param \Drupal\sparql_entity_storage\SparqlEntityStorageGraphHandlerInterface $graph_handler
+   * @param SparqlEntityStorageGraphHandlerInterface $graph_handler
    *   The SPARQL graph handler service.
    */
   public function __construct(ConnectionInterface $sparqlEndpoint, SparqlEntityStorageGraphHandlerInterface $graph_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/sparql_entity_storage/src/SparqlMappingInterface.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the referred entity type.
    *
-   * @return \Drupal\Core\Entity\ContentEntityTypeInterface|null
+   * @return ContentEntityTypeInterface|null
    *   The target entity type.
    */
   public function getTargetEntityType(): ?ContentEntityTypeInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/sparql_entity_storage/src/SparqlGraphStoreTrait.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Creates a new Graph Store object using the SPARQL connection.
    *
-   * @return \EasyRdf\GraphStore
+   * @return GraphStore
    *   The new graph store object.
    */
   public static function createGraphStore(): GraphStore {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


12) modules/contrib/sparql_entity_storage/src/SparqlGraphListBuilder.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new entity list builder instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Access\AccessManagerInterface $access_manager
+   * @param AccessManagerInterface $access_manager
    *   The access manager service.
-   * @param \Drupal\Core\Entity\EntityTypeRepositoryInterface $entity_type_repository
+   * @param EntityTypeRepositoryInterface $entity_type_repository
    *   The entity type repository service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, AccessManagerInterface $access_manager, EntityTypeRepositoryInterface $entity_type_repository) {
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $sparql_graph) {
-    /** @var \Drupal\sparql_entity_storage\SparqlGraphInterface $sparql_graph */
+    /** @var SparqlGraphInterface $sparql_graph */
     $row['label'] = $sparql_graph->label();
     $row['description'] = ['#markup' => $sparql_graph->getDescription()];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/sparql_entity_storage/src/SparqlEntityStorageInterface.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sparql_entity_storage;

+use Drupal\sparql_entity_storage\Exception\SparqlQueryException;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\ContentEntityStorageInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * Returns the graph handler object.
    *
-   * @return \Drupal\sparql_entity_storage\SparqlEntityStorageGraphHandlerInterface
+   * @return SparqlEntityStorageGraphHandlerInterface
    *   The graph handler service.
    */
   public function getGraphHandler(): SparqlEntityStorageGraphHandlerInterface;
@@ @@
    * @return bool
    *   TRUE if this entity ID already exists, FALSE otherwise.
    *
-   * @throws \Drupal\sparql_entity_storage\Exception\SparqlQueryException
+   * @throws SparqlQueryException
    *   If the SPARQL query fails.
    * @throws \Exception
    *   The query fails with no reason.
@@ @@
   /**
    * Checks if an entity has a specific graph.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    * @param string $graph_id
    *   The graph to be checked ('draft', etc).
@@ @@
   /**
    * Deletes the version of the entities stored in a given graph.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface[] $entities
+   * @param ContentEntityInterface[] $entities
    *   An array of entity objects to delete.
    * @param string $graph_id
    *   The ID of the graph from where to delete the entity.
@@ @@
    * @param string[]|null $graph_ids
    *   An ordered list of candidate graph IDs.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   An entity object. NULL if no matching entity is found.
    */
   public function load($id, ?array $graph_ids = NULL): ?ContentEntityInterface;
@@ @@
    * @param string[]|null $graph_ids
    *   An ordered list of candidate graph IDs.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   An array of entity objects indexed by their IDs. Returns an empty array
    *   if no matching entities are found.
    */
@@ @@
    * @param string[]|null $graph_ids
    *   An ordered list of candidate graph IDs.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The unchanged entity, or NULL if the entity cannot be loaded.
    */
   public function loadUnchanged($id, ?array $graph_ids = NULL): ?ContentEntityInterface;
@@ @@
    * @param string[]|null $graph_ids
    *   An ordered list of candidate graph IDs.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   An array of entity objects indexed by their ids.
    */
   public function loadByProperties(array $values = [], ?array $graph_ids = NULL): array;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/sparql_entity_storage/src/SparqlEntityStorageGraphHandler.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sparql_entity_storage;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ @@
   /**
    * Constructs a SPARQL graph handler object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EventDispatcherInterface $event_dispatcher, EntityTypeBundleInfoInterface $entity_type_bundle_info) {
@@ @@
   public function getEntityTypeDefaultGraphIds(string $entity_type_id): array {
     if (!isset($this->cache['default_graphs'][$entity_type_id])) {
       $entity_graph_ids = $this->getEntityTypeGraphIds($entity_type_id);
-      /** @var \Drupal\sparql_entity_storage\Event\DefaultGraphsEvent $event */
+      /** @var DefaultGraphsEvent $event */
       $event = $this->eventDispatcher->dispatch(
         new DefaultGraphsEvent($entity_type_id, $entity_graph_ids),
         SparqlEntityStorageEvents::DEFAULT_GRAPHS
@@ @@
   /**
    * Returns the SPARQL graph config entity storage service.
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @return ConfigEntityStorageInterface
    *   The SPARQL graph config entity storage service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   If the entity type is not found.
    */
   protected function getSparqlGraphStorage(): ConfigEntityStorageInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/sparql_entity_storage/src/SparqlEntityStorageFieldHandlerInterface.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sparql_entity_storage;

+use Drupal\sparql_entity_storage\Exception\UnmappedFieldException;
+use Drupal\Component\Render\MarkupInterface;
 /**
  * Provides a contract for the SPARQL entity field handler service.
  */
@@ @@
    * @return string[]
    *   An array of predicates.
    *
-   * @throws \Drupal\sparql_entity_storage\Exception\UnmappedFieldException
+   * @throws UnmappedFieldException
    *    Thrown when a unmapped field is requested.
    */
   public function getFieldPredicates(string $entity_type_id, string $field_name, ?string $column_name = NULL, ?string $bundle = NULL): array;
@@ @@
   /**
    * Returns an array of available data types.
    *
-   * @return \Drupal\Component\Render\MarkupInterface[]
+   * @return MarkupInterface[]
    *   An array of data types.
    */
   public static function getSupportedDataTypes(): array;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


16) modules/contrib/sparql_entity_storage/src/SparqlEntityStorageFieldHandler.php:120

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a QueryFactory object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, EventDispatcherInterface $event_dispatcher, EntityTypeBundleInfoInterface $entity_type_bundle_info) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


17) modules/contrib/sparql_entity_storage/src/SparqlEntityStorageEntityIdPluginManager.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Cached plugin instances.
    *
-   * @var \Drupal\sparql_entity_storage\SparqlEntityStorageEntityIdPluginInterface[][]
+   * @var SparqlEntityStorageEntityIdPluginInterface[][]
    */
   protected array $instances = [];

@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Initializes the proper plugin given an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    *
-   * @return \Drupal\sparql_entity_storage\SparqlEntityStorageEntityIdPluginInterface
+   * @return SparqlEntityStorageEntityIdPluginInterface
    *   The plugin.
    */
   public function getPlugin(ContentEntityInterface $entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/sparql_entity_storage/src/SparqlEntityStorageEntityIdPluginInterface.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * Sets the entity for which the ID is being generated.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    *
    * @return $this
@@ @@
   /**
    * Gets the entity for which the ID is being generated.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The entity.
    */
   public function getEntity();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


19) modules/contrib/sparql_entity_storage/src/SparqlEntityStorageEntityIdPluginBase.php:33

    ---------- begin diff ----------
@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/sparql_entity_storage/src/SparqlEntityStorage.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sparql_entity_storage;

+use Drupal\sparql_entity_storage\Exception\SparqlQueryException;
+use Drupal\Core\Entity\ContentEntityBase;
+use Drupal\sparql_entity_storage\Entity\Query\Sparql\SparqlQueryInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Cache\MemoryCache\MemoryCacheInterface;
@@ @@
   /**
    * Initialize the storage backend.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type this storage is about.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend to be used.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface $memory_cache
+   * @param MemoryCacheInterface $memory_cache
    *   The memory cache backend.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\sparql_entity_storage\Driver\Database\sparql\ConnectionInterface $sparql
+   * @param ConnectionInterface $sparql
    *   The connection object.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\sparql_entity_storage\SparqlEntityStorageGraphHandlerInterface $sparql_graph_handler
+   * @param SparqlEntityStorageGraphHandlerInterface $sparql_graph_handler
    *   The sPARQL graph helper service.
-   * @param \Drupal\sparql_entity_storage\SparqlEntityStorageFieldHandlerInterface $sparql_field_handler
+   * @param SparqlEntityStorageFieldHandlerInterface $sparql_field_handler
    *   The SPARQL field mapping service.
-   * @param \Drupal\sparql_entity_storage\SparqlEntityStorageEntityIdPluginManager $entity_id_plugin_manager
+   * @param SparqlEntityStorageEntityIdPluginManager $entity_id_plugin_manager
    *   The entity ID generator plugin manager.
    */
   public function __construct(
@@ @@
    * @param string $graph_uri
    *   The URI of the graph.
    *
-   * @return \EasyRdf\Graph
+   * @return Graph
    *   The EasyRdf graph object.
    */
   protected static function getGraph($graph_uri): Graph {
@@ @@
    * {@inheritdoc}
    */
   public function create(array $values = []): ContentEntityInterface {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = parent::create($values);
     // Ensure the default graph if no explicit graph has been set.
     if ($entity->get('graph')->isEmpty()) {
@@ @@
    * @param array $graph_ids
    *   A list of graph IDs.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface[]
+   * @return ContentEntityInterface[]
    *   Array of entities from the storage.
    *
-   * @throws \Drupal\sparql_entity_storage\Exception\SparqlQueryException
+   * @throws SparqlQueryException
    *   If the SPARQL query fails.
    * @throws \Exception
    *   The query fails with no specific reason.
@@ @@
    *   The entity values indexed by the field mapping ID or NULL in there are no
    *   results.
    *
-   * @throws \Drupal\sparql_entity_storage\Exception\SparqlQueryException
+   * @throws SparqlQueryException
    *   If the SPARQL query fails.
    * @throws \Exception
    *   The query fails with no specific reason.
@@ @@
    * If the graph parameter can be used to restrict the available graphs to load
    * from.
    *
-   * @param \EasyRdf\Sparql\Result|\EasyRdf\Graph $results
+   * @param Result|Graph $results
    *   A set of query results indexed per graph and entity id.
    * @param string[] $graph_ids
    *   Graph IDs.
@@ @@
    *      ];
    * @code
    *
-   * @param \EasyRdf\Sparql\Result $results
+   * @param Result $results
    *   A set of query results indexed per graph and entity id.
    *
    * @return array
@@ @@
     // methods in order to be able to pass an additional list of graphs
     // parameter to ::loadUnchanged() method.
     // START forking from ContentEntityStorageBase::doPreSave().
-    /** @var \Drupal\Core\Entity\ContentEntityBase $entity */
+    /** @var ContentEntityBase $entity */
     $entity->updateOriginalValues();
     if ($entity->getEntityType()->isRevisionable() && !$entity->isNew() && empty($entity->getLoadedRevisionId())) {
       $entity->updateLoadedRevisionId();
@@ @@
   public function loadByProperties(array $values = [], ?array $graph_ids = NULL): array {
     $this->checkGraphs($graph_ids);

-    /** @var \Drupal\sparql_entity_storage\Entity\Query\Sparql\SparqlQueryInterface $query */
+    /** @var SparqlQueryInterface $query */
     $query = $this->getQuery()
       ->graphs($graph_ids)
       ->accessCheck(FALSE);
@@ @@
     }

     $entities_by_graph = [];
-    /** @var \Drupal\Core\Entity\EntityInterface $keyed_entity */
+    /** @var EntityInterface $keyed_entity */
     foreach ($keyed_entities as $keyed_entity) {
       // Determine all possible graphs for the entity.
       $graphs_by_bundle = $this->getGraphHandler()->getEntityTypeGraphUris($this->getEntityTypeId());
@@ @@
   protected function doDelete($entities) {
     $entities_by_graph = [];
     /** @var string $id */
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     foreach ($entities as $id => $entity) {
       $graph_uri = $this->getGraphHandler()->getBundleGraphUri($entity->getEntityTypeId(), $entity->bundle(), (string) $entity->get('graph')->target_id);
       $entities_by_graph[$graph_uri][$id] = $entity;
@@ @@
    *
    * Only t_literal fields should be translatable.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to convert to an array of values.
    *
    * @return array
@@ @@
    * Implementations are able to change, delete or add items to the graph before
    * this is saved to SPARQL backend.
    *
-   * @param \EasyRdf\Graph $graph
+   * @param Graph $graph
    *   The graph to be altered.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity being saved.
    */
   protected function alterGraph(Graph &$graph, EntityInterface $entity): void {}
@@ @@
   /**
    * Insert a graph of triples.
    *
-   * @param \EasyRdf\Graph $graph
+   * @param Graph $graph
    *   The graph to insert.
    * @param string $graph_uri
    *   Graph to save to.
    *
-   * @return \EasyRdf\Sparql\Result
+   * @return Result
    *   Response.
    *
-   * @throws \Drupal\sparql_entity_storage\Exception\SparqlQueryException
+   * @throws SparqlQueryException
    *   If the SPARQL query fails.
    * @throws \Exception
    *   The query fails with no specific reason.
@@ @@
    * @param string $graph_uri
    *   The graph uri.
    *
-   * @throws \Drupal\sparql_entity_storage\Exception\SparqlQueryException
+   * @throws SparqlQueryException
    *   If the SPARQL query fails.
    * @throws \Exception
    *   The query fails with no specific reason.
@@ @@
   /**
    * Keep track of the originating graph of an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    */
   protected function trackOriginalGraph(EntityInterface $entity): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/sparql_entity_storage/src/SparqlEncoderInterface.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sparql_entity_storage;

+use EasyRdf\Serialiser;
 use Symfony\Component\Serializer\Encoder\EncoderInterface;

 /**
@@ @@
   /**
    * Builds a list of supported formats.
    *
-   * @return \EasyRdf\Serialiser[]
+   * @return Serialiser[]
    *   List of supported formats.
    */
   public static function getSupportedFormats(): array;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


22) modules/contrib/sparql_entity_storage/src/RouteProcessor/SparqlEntityStorageRouteProcessor.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new class instance.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
    */
   public function __construct(RouteMatchInterface $route_match) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


23) modules/contrib/sparql_entity_storage/src/Plugin/sparql_entity_storage/Id/DefaultSparqlEntityStorageEntityIdGenerator.php:32

    ---------- begin diff ----------
@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid
+   * @param UuidInterface $uuid
    *   The UUID service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, UuidInterface $uuid) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/sparql_entity_storage/src/ParamConverter/SparqlEntityStorageConverter.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sparql_entity_storage\ParamConverter;

+use Drupal\sparql_entity_storage\SparqlEntityStorageInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * Constructs a new param converter service instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityRepositoryInterface $entity_repository, EventDispatcherInterface $event_dispatcher) {
@@ @@
       $value = UriEncoder::decodeUrl($value);
     }
     $entity_type_id = $this->getEntityTypeFromDefaults($definition, $name, $defaults);
-    /** @var \Drupal\sparql_entity_storage\SparqlEntityStorageInterface $storage */
+    /** @var SparqlEntityStorageInterface $storage */
     $storage = $this->entityTypeManager->getStorage($entity_type_id);
     $event = new ActiveGraphEvent($name, $value, $entity_type_id, $definition, $defaults);
     // Determine the graph by dispatching an event.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/sparql_entity_storage/src/Normalizer/SparqlEntityNormalizer.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs an RdfEntityNormalizer object.
    *
-   * @param \Drupal\sparql_entity_storage\SparqlSerializer $rdf_serializer
+   * @param SparqlSerializer $rdf_serializer
    *   RDF Serializer service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(SparqlSerializer $rdf_serializer, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/sparql_entity_storage/src/Form/SparqlGraphForm.php:22

    ---------- begin diff ----------
@@ @@
   public function form(array $form, FormStateInterface $form_state): array {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\sparql_entity_storage\SparqlGraphInterface $graph */
+    /** @var SparqlGraphInterface $graph */
     $graph = $this->getEntity();

     $form['name'] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/sparql_entity_storage/src/EventSubscriber/SparqlContentTypesSubscriber.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sparql_entity_storage\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
+use EasyRdf\Format;
 use Drupal\sparql_entity_storage\Encoder\SparqlEncoder;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * Register content type formats on the request object.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The Event to process.
    */
-  public function onKernelRequest(GetResponseEvent $event) {
-    /** @var \EasyRdf\Format $format */
+  public function onKernelRequest(RequestEvent $event) {
+    /** @var Format $format */
     foreach (SparqlEncoder::getSupportedFormats() as $format) {
       $mime = array_keys($format->getMimeTypes());
       $event->getRequest()->setFormat($format->getName(), $mime);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


28) modules/contrib/sparql_entity_storage/src/EventSubscriber/OutboundValueDateTimeSubscriber.php:30

    ---------- begin diff ----------
@@ @@
    * Converts field properties with a "timestamp" data type that have been
    * mapped to date formats (xsd:date or xsd:dateTime).
    *
-   * @param \Drupal\sparql_entity_storage\Event\OutboundValueEvent $event
+   * @param OutboundValueEvent $event
    *   The outbound value event.
    */
   public function massageOutboundValue(OutboundValueEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


29) modules/contrib/sparql_entity_storage/src/EventSubscriber/InboundValueTranslatableLiteralSubscriber.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new event subscriber.
    *
-   * @param \Drupal\Core\TypedData\TypedDataManagerInterface $typed_data_manager
+   * @param TypedDataManagerInterface $typed_data_manager
    *   The typed-data manager.
    */
   public function __construct(TypedDataManagerInterface $typed_data_manager) {
@@ @@
   /**
    * Massages inbound translatable literal value value.
    *
-   * @param \Drupal\sparql_entity_storage\Event\InboundValueEvent $event
+   * @param InboundValueEvent $event
    *   The inbound value event.
    */
   public function castTranslatableLiteralValue(InboundValueEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


30) modules/contrib/sparql_entity_storage/src/EventSubscriber/InboundValueDateTimeSubscriber.php:30

    ---------- begin diff ----------
@@ @@
    * Converts field properties with a "timestamp" data type that have been
    * mapped to date formats (xsd:date or xsd:dateTime).
    *
-   * @param \Drupal\sparql_entity_storage\Event\InboundValueEvent $event
+   * @param InboundValueEvent $event
    *   The inbound value event.
    */
   public function massageInboundValue(InboundValueEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


31) modules/contrib/sparql_entity_storage/src/Entity/SparqlMapping.php:275

    ---------- begin diff ----------
@@ @@
   public function calculateDependencies() {
     parent::calculateDependencies();

-    /** @var \Drupal\sparql_entity_storage\SparqlGraphInterface $graph */
+    /** @var SparqlGraphInterface $graph */
     foreach (SparqlGraph::loadMultiple(array_keys($this->getGraphs())) as $graph) {
       // Add dependency to each graph.
       $this->addDependency($graph->getConfigDependencyKey(), $graph->getConfigDependencyName());
@@ @@
   public function onDependencyRemoval(array $dependencies) {
     $changed = parent::onDependencyRemoval($dependencies);

-    /** @var \Drupal\sparql_entity_storage\SparqlGraphInterface $graph */
+    /** @var SparqlGraphInterface $graph */
     foreach ($dependencies['config'] as $graph) {
       if ($graph->getEntityTypeId() === 'sparql_graph') {
         // Normally we shouldn't be notified about 'default' graph deletion
@@ @@
     parent::postDelete($storage, $entities);
     \Drupal::service('sparql.graph_handler')->clearCache();
     \Drupal::service('sparql.field_handler')->clearCache();
-    /** @var \Drupal\sparql_entity_storage\SparqlMappingInterface $sparql_mapping */
+    /** @var SparqlMappingInterface $sparql_mapping */
     if ($sparql_mapping = reset($entities)) {
       \Drupal::entityTypeManager()->getStorage($sparql_mapping->getTargetEntityTypeId())->resetCache();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/sparql_entity_storage/src/Entity/Query/Sparql/SparqlQueryInterface.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the entity type.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface
+   * @return EntityTypeInterface
    *   The entity type object.
    */
   public function getEntityType(): EntityTypeInterface;
@@ @@
   /**
    * Returns the entity type storage.
    *
-   * @return \Drupal\sparql_entity_storage\SparqlEntityStorageInterface
+   * @return SparqlEntityStorageInterface
    *   The entity type storage.
    */
   public function getEntityStorage(): SparqlEntityStorageInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


33) modules/contrib/sparql_entity_storage/src/Entity/Query/Sparql/SparqlConditionInterface.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sparql_entity_storage\Entity\Query\Sparql;

+use Drupal\sparql_entity_storage\Exception\UnmappedFieldException;
 use Drupal\Core\Entity\Query\ConditionInterface;

 /**
@@ @@
    * @param string|null $column
    *   (optional) The field column. If empty, the main property will be used.
    *
-   * @throws \Drupal\sparql_entity_storage\Exception\UnmappedFieldException
+   * @throws UnmappedFieldException
    *   If the field is unmapped.
    */
   public function addFieldMappingRequirement(string $entity_type_id, string $field, ?string $column = NULL): void;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


34) modules/contrib/sparql_entity_storage/src/Entity/Query/Sparql/SparqlCondition.php:167

    ---------- begin diff ----------
@@ @@
    *
    * @param string $conjunction
    *   The operator to use to combine conditions: 'AND' or 'OR'.
-   * @param \Drupal\sparql_entity_storage\Entity\Query\Sparql\SparqlQueryInterface $query
+   * @param SparqlQueryInterface $query
    *   The entity query this condition belongs to.
    * @param array $namespaces
    *   List of potential namespaces of the classes belonging to this condition.
-   * @param \Drupal\sparql_entity_storage\SparqlEntityStorageFieldHandlerInterface $sparql_field_handler
+   * @param SparqlEntityStorageFieldHandlerInterface $sparql_field_handler
    *   The SPARQL field mapping handler service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
    */
   public function __construct($conjunction, SparqlQueryInterface $query, array $namespaces, SparqlEntityStorageFieldHandlerInterface $sparql_field_handler, LanguageManagerInterface $language_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/sparql_entity_storage/src/Entity/Query/Sparql/QueryFactory.php:59

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new query factory service instance.
    *
-   * @param \Drupal\sparql_entity_storage\Driver\Database\sparql\ConnectionInterface $connection
+   * @param ConnectionInterface $connection
    *   The connection object.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\sparql_entity_storage\SparqlEntityStorageGraphHandlerInterface $sparql_graph_handler
+   * @param SparqlEntityStorageGraphHandlerInterface $sparql_graph_handler
    *   The SPARQL graph helper service.
-   * @param \Drupal\sparql_entity_storage\SparqlEntityStorageFieldHandlerInterface $sparql_field_handler
+   * @param SparqlEntityStorageFieldHandlerInterface $sparql_field_handler
    *   The SPARQL field mapping service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
    */
   public function __construct(ConnectionInterface $connection, EntityTypeManagerInterface $entity_type_manager, SparqlEntityStorageGraphHandlerInterface $sparql_graph_handler, SparqlEntityStorageFieldHandlerInterface $sparql_field_handler, ModuleHandlerInterface $module_handler, LanguageManagerInterface $language_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


36) modules/contrib/sparql_entity_storage/src/Entity/Query/Sparql/Query.php:94

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a query object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
    * @param string $conjunction
    *   - AND: all of the conditions on the query need to match.
    *   - OR: at least one of the conditions on the query need to match.
-   * @param \Drupal\sparql_entity_storage\Driver\Database\sparql\ConnectionInterface $connection
+   * @param ConnectionInterface $connection
    *   The database connection to run the query against.
    * @param array $namespaces
    *   List of potential namespaces of the classes belonging to this query.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service object.
-   * @param \Drupal\sparql_entity_storage\SparqlEntityStorageGraphHandlerInterface $sparql_graph_handler
+   * @param SparqlEntityStorageGraphHandlerInterface $sparql_graph_handler
    *   The SPARQL graph handler service.
-   * @param \Drupal\sparql_entity_storage\SparqlEntityStorageFieldHandlerInterface $sparql_field_handler
+   * @param SparqlEntityStorageFieldHandlerInterface $sparql_field_handler
    *   The SPARQL field mapping handler service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
    */
   public function __construct(EntityTypeInterface $entity_type, $conjunction, ConnectionInterface $connection, array $namespaces, EntityTypeManagerInterface $entity_type_manager, SparqlEntityStorageGraphHandlerInterface $sparql_graph_handler, SparqlEntityStorageFieldHandlerInterface $sparql_field_handler, ModuleHandlerInterface $module_handler, LanguageManagerInterface $language_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/sparql_entity_storage/src/Encoder/SparqlEncoder.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sparql_entity_storage\Encoder;

+use EasyRdf\Serialiser;
 use Drupal\sparql_entity_storage\SparqlEncoderInterface;
 use EasyRdf\Format;

@@ @@
   /**
    * Memory cache for supported formats.
    *
-   * @var \EasyRdf\Serialiser[]
+   * @var Serialiser[]
    */
   protected static array $supportedFormats;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


38) modules/contrib/sparql_entity_storage/src/Driver/Database/sparql/StatementStub.php:64

    ---------- begin diff ----------
@@ @@
   /**
    * Sets the database connection.
    *
-   * @param \Drupal\sparql_entity_storage\Driver\Database\sparql\ConnectionInterface $connection
+   * @param ConnectionInterface $connection
    *   The SPARQL connection.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


39) modules/contrib/sparql_entity_storage/src/Driver/Database/sparql/ConnectionInterface.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the SPARQL client object.
    *
-   * @return \EasyRdf\Sparql\Client
+   * @return Client
    *   The SPARQL client instantiated with the default connection info.
    */
   public function getSparqlClient(): Client;
@@ @@
    * @param array $options
    *   An associative array of options to control how the query is run.
    *
-   * @return \EasyRdf\Sparql\Result
+   * @return Result
    *   The query result.
    *
    * @throws \InvalidArgumentException
@@ @@
    * @param array $options
    *   An associative array of options to control how the query is run.
    *
-   * @return \EasyRdf\Graph
+   * @return Graph
    *   The set of triples.
    *
    * @throws \InvalidArgumentException
@@ @@
    * @param array $options
    *   An associative array of options to control how the query is run.
    *
-   * @return \EasyRdf\Sparql\Result
+   * @return Result
    *   The result object.
    *
    * @throws \InvalidArgumentException
@@ @@
   /**
    * Associates a logging object with this connection.
    *
-   * @param \Drupal\Core\Database\Log $logger
+   * @param Log $logger
    *   The logging object we want to use.
    */
   public function setLogger(Log $logger): void;
@@ @@
   /**
    * Gets the current logging object for this connection.
    *
-   * @return \Drupal\Core\Database\Log|null
+   * @return Log|null
    *   The current logging object for this connection. If there isn't one,
    *   NULL is returned.
    */
@@ @@
    * @param array $connection_options
    *   The connection options as defined in settings.php.
    *
-   * @return \EasyRdf\Sparql\Client
+   * @return Client
    *   The EasyRdf client instance.
    */
   public static function open(array &$connection_options = []): Client;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


40) modules/contrib/sparql_entity_storage/src/Driver/Database/sparql/Connection.php:62

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new connection instance.
    *
-   * @param \EasyRdf\Sparql\Client $easy_rdf_client
+   * @param Client $easy_rdf_client
    *   Object of \EasyRdf\Sparql\Client which is a database connection.
    * @param array $connection_options
    *   An associative array of connection options. See the "Database settings"
@@ @@
    * @param array $options
    *   An associative array of options to control how the query is run.
    *
-   * @return \EasyRdf\Sparql\Result|\EasyRdf\Graph
+   * @return Result|Graph
    *   The query result.
    *
    * @throws \InvalidArgumentException
    *   If $args value is passed but arguments replacement is not yet
    *   supported. To be removed in #55.
-   * @throws \Drupal\sparql_entity_storage\Exception\SparqlQueryException
+   * @throws SparqlQueryException
    *   Exception during query execution, e.g. timeout.
    *
    * @see https://github.com/ec-europa/sparql_entity_storage/issues/1
@@ @@
    * requirement. We use a statement stub that only stores the connection and
    * the query to be used when logging the event.
    *
-   * @return \Drupal\sparql_entity_storage\Driver\Database\sparql\StatementStub
+   * @return StatementStub
    *   A faked statement object.
    *
    * @see \Drupal\Core\Database\Database::startLog()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


41) modules/contrib/sparql_entity_storage/src/Controller/SparqlGraphToggle.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sparql_entity_storage\Controller;

+use Symfony\Component\HttpFoundation\RedirectResponse;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
   /**
    * Checks if the current user is able to toggle the SPARQL graph status.
    *
-   * @param \Drupal\sparql_entity_storage\SparqlGraphInterface $sparql_graph
+   * @param SparqlGraphInterface $sparql_graph
    *   The $sparql_graph entity.
    * @param string $toggle_operation
    *   The operation: 'enable', 'disable'.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   The access result object.
    */
   public function access(SparqlGraphInterface $sparql_graph, string $toggle_operation): AccessResultInterface {
@@ @@
   /**
    * Toggles the SPARQL graph status.
    *
-   * @param \Drupal\sparql_entity_storage\SparqlGraphInterface $sparql_graph
+   * @param SparqlGraphInterface $sparql_graph
    *   The $sparql_graph entity.
    * @param string $toggle_operation
    *   The operation: 'enable', 'disable'.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   A redirect response.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   In case of failures on entity save.
    */
   public function toggle(SparqlGraphInterface $sparql_graph, string $toggle_operation) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


42) modules/contrib/sparql_entity_storage/sparql_entity_storage.module:5

    ---------- begin diff ----------
@@ @@
  */

 declare(strict_types = 1);
+use Drupal\sparql_entity_storage\SparqlEntityStorageEntityIdPluginManager;
+use Drupal\sparql_entity_storage\SparqlMappingInterface;
+use Drupal\sparql_entity_storage\Driver\Database\sparql\ConnectionInterface;

 use Drupal\Core\Config\Entity\ConfigEntityBundleBase;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
@@ @@
   }

   $form_obj = $form_state->getFormObject();
-  /** @var \Drupal\field\Entity\FieldStorageConfig $entity */
+  /** @var FieldStorageConfig $entity */
   $entity = $form_obj->getEntity();
   $schema = $entity->getSchema();
   $form['sparql_mapping'] = [
@@ @@
  *
  * @param array $form
  *   Form definition.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   Form state.
  */
 function sparql_entity_storage_field_storage_form_validate(array &$form, FormStateInterface $form_state) {
@@ @@
 /**
  * Retrieve nested third party settings from object.
  *
- * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $object
+ * @param ConfigEntityInterface $object
  *   The object may be either a bundle entity or a field storage config entity.
  * @param string $property
  *   The property for which to retrieve the mapping.
@@ @@
   if (!$form_object instanceof BundleEntityFormBase) {
     return;
   }
-  /** @var \Drupal\Core\Config\Entity\ConfigEntityBundleBase $bundle_entity */
+  /** @var ConfigEntityBundleBase $bundle_entity */
   $bundle_entity = $form_object->getEntity();
   if (!$bundle_entity instanceof ConfigEntityBundleBase) {
     return;
@@ @@
   $entity_type_id = $bundle_entity->getEntityType()->getBundleOf();
   $form_state->set('entity_type_id', $entity_type_id);

-  /** @var \Drupal\sparql_entity_storage\SparqlEntityStorageInterface $storage */
+  /** @var SparqlEntityStorageInterface $storage */
   $storage = \Drupal::entityTypeManager()->getStorage($entity_type_id);
   if (!$storage instanceof SparqlEntityStorageInterface) {
     return;
@@ @@
     '#default_value' => $mapping ? $mapping->getRdfType() : NULL,
   ];

-  /** @var \Drupal\sparql_entity_storage\SparqlEntityStorageEntityIdPluginManager $id_plugin_manager */
+  /** @var SparqlEntityStorageEntityIdPluginManager $id_plugin_manager */
   $id_plugin_manager = \Drupal::service('plugin.manager.sparql_entity_id');
   $plugins = array_map(function (array $definition) {
     return $definition['name'];
@@ @@
     '#description' => t('This entity type uses a SPARQL backend. Please map the bundle base fields to their corresponding RDF properties.'),
   ];

-  /** @var \Drupal\Core\Field\BaseFieldDefinition $base_field */
+  /** @var BaseFieldDefinition $base_field */
   foreach ($base_fields as $field_name => $base_field) {
     // The entity id doesn't need a mapping as it's the subject of the triple.
     if ($field_name === $id_key) {
@@ @@
  *
  * @param array $form
  *   The form API form render array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state object.
  *
  * @throws \Exception
@@ @@
  */
 function sparql_entity_storage_type_mapping_submit(array &$form, FormStateInterface $form_state): void {
   $values = $form_state->getValue('sparql_entity_storage');
-  /** @var \Drupal\sparql_entity_storage\SparqlMappingInterface $mapping */
+  /** @var SparqlMappingInterface $mapping */
   $mapping = $form_state->get('sparql_mapping');
   if (!$mapping) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $bundle_entity */
+    /** @var ConfigEntityInterface $bundle_entity */
     $bundle_entity = $form_state->getFormObject()->getEntity();
     $mapping = SparqlMapping::create([
       'entity_type_id' => $bundle_entity->getEntityType()->getBundleOf(),
@@ @@
     ],
   ];

-  /** @var \Drupal\sparql_entity_storage\Driver\Database\sparql\ConnectionInterface $connection */
+  /** @var ConnectionInterface $connection */
   $connection = Database::getConnection('default', 'sparql_default');
   $client = Http::getDefaultHttpClient();
   $client->resetParameters(TRUE);
@@ @@
     CLEAR GRAPH <{$uri}>
 QUERY;

-  /** @var \Drupal\sparql_entity_storage\Driver\Database\sparql\ConnectionInterface $connection */
+  /** @var ConnectionInterface $connection */
   $connection = Database::getConnection('default', 'sparql_default');
   $requirements = [
     'sparql_virtuoso_query' => [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


43) modules/contrib/sparql_entity_storage/sparql_entity_storage.api.php:6

    ---------- begin diff ----------
@@ @@

 declare(strict_types = 1);

+use Drupal\field\Entity\FieldStorageConfig;
+
 /**
  * Alters the field configuration for fields of entities with SPARQL storage.
  *
- * @param \Drupal\field\Entity\FieldStorageConfig $storage
+ * @param FieldStorageConfig $storage
  *   The field configuration storage entity.
  * @param array &$values
  *   An associative array of field values. This array include any additional
  *   data a field formatter includes.
  */
-function hook_sparql_apply_default_fields_alter(\Drupal\field\Entity\FieldStorageConfig $storage, array &$values) {
+function hook_sparql_apply_default_fields_alter(FieldStorageConfig $storage, array &$values) {
   if ($storage->getType() == 'text_long') {
     // Handle multiple values in a field.
     foreach ($values as &$value) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 43 files have been changed by Rector                                      

