modules/contrib/lingo24/lingo24.api.php
modules/contrib/lingo24/lingo24.drush.inc
modules/contrib/lingo24/lingo24.install
modules/contrib/lingo24/lingo24.module
modules/contrib/lingo24/src/Annotation/FormatPlugin.php
modules/contrib/lingo24/src/Commands/Lingo24Commands.php
modules/contrib/lingo24/src/Controller/LingoController.php
modules/contrib/lingo24/src/Format/FormatInterface.php
modules/contrib/lingo24/src/Format/FormatManager.php
modules/contrib/lingo24/src/LingoTranslatorUi.php
modules/contrib/lingo24/src/Plugin/lingo24/Format/Xliff.php
modules/contrib/lingo24/src/Plugin/tmgmt/Translator/LingoTranslator.php
modules/contrib/lingo24/src/RecursiveDOMIterator.php

9 files with changes
====================

1) modules/contrib/lingo24/src/Plugin/tmgmt/Translator/LingoTranslator.php:48

    ---------- begin diff ----------
@@ @@
       $translator = $job->getTranslator();
       $lingo24Docs = self::oauthClient($translator);
       // Save the file.
-      $file = file_save_data($export->export($job), $path, FileSystemInterface::EXISTS_REPLACE);
+      $file = \Drupal::service('file.repository')->writeData($export->export($job), $path, FileSystemInterface::EXISTS_REPLACE);
       // Prepare and submit translation file to Lingo24.
       if (!empty($job->getSetting('lingo_source_country')) && !empty($job->getSetting('lingo_source_region')) && !empty($job->getSetting('lingo_target_country')) && !empty($job->getSetting('lingo_target_region'))) {
         $source_locale = $lingo24Docs->getLocale($job->getSetting('lingo_source_country') . '_' . $job->getSetting('lingo_source_region'));
@@ @@
    * @param mixed $translator
    *   Container of Translator settings.
    *
-   * @return \Lingo24\API\Docs
+   * @return Docs
    *   Lingo24 Client.
    */
   public static function oauthClient($translator) {
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/lingo24/src/Plugin/lingo24/Format/Xliff.php:65

    ---------- begin diff ----------
@@ @@
   /**
    * Contains a reference to the currently being exported job.
    *
-   * @var \Drupal\tmgmt\JobInterface
+   * @var JobInterface
    */
   protected $job;

@@ @@
   /**
    * Adds a job item to the xml export.
    *
-   * @param Drupal\tmgmt\JobItemInterface $item
+   * @param JobItemInterface $item
    *   The job item entity.
    */
   protected function addItem(JobItemInterface $item) {
@@ @@
    *   The unique identifier for this data element.
    * @param mixed $element
    *   Array with the properties #text and optionally #label.
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   Translation job.
    */
   protected function addTransUnit($key, $element, JobInterface $job) {
@@ @@
    *
    * @param string $translation
    *   Job data array.
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   Translation job.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/lingo24/src/LingoTranslatorUi.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lingo24;

+use Drupal\tmgmt\TranslatorInterface;
+use Lingo24\API\Docs;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\EntityFormInterface;
 use Drupal\Core\File\FileSystemInterface;
@@ @@
       // Not an entity form, nothing to alter.
       return;
     }
-    /** @var \Drupal\tmgmt\TranslatorInterface $translator */
+    /** @var TranslatorInterface $translator */
     $translator = $formObject->getEntity();

     // Any visible, writeable wrapper can potentially be used for the files
@@ @@
             $path = $job->getSetting('scheme') . '://lingo24/' . $name . '.xlf';
             $dirname = dirname($path);
             if (\Drupal::service('file_system')->prepareDirectory($dirname, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS)) {
-              $file = file_save_data($lingo24Docs->getFileContent($file->getId()), $path, FileSystemInterface::EXISTS_REPLACE);
+              $file = \Drupal::service('file.repository')->writeData($lingo24Docs->getFileContent($file->getId()), $path, FileSystemInterface::EXISTS_REPLACE);
               $plugin = \Drupal::service('plugin.manager.lingo24.format')->createInstance('xlf');
               try {
                 $job->addTranslatedData($plugin->import($path));
@@ @@
       // Not an entity form, nothing to alter.
       return;
     }
-    /** @var \Drupal\tmgmt\TranslatorInterface $translator */
+    /** @var TranslatorInterface $translator */
     $translator = $formObject->getEntity();

     if (empty($translator->getSetting('lingo_client_id'))) {
@@ @@
     // Check if the authorization code exist and request one if doesn't.
     if (empty(\Drupal::state()->get('lingo_auth_Code'))) {
       if ($translator->getSetting('lingo_environment') == 'demo') {
-        $uri = \Lingo24\API\Docs::$AUTH_URL_DEMO . '?response_type=code';
+        $uri = Docs::$AUTH_URL_DEMO . '?response_type=code';
       }
       else {
-        $uri = \Lingo24\API\Docs::$AUTH_URL_LIVE . '?response_type=code';
+        $uri = Docs::$AUTH_URL_LIVE . '?response_type=code';
       }
       $uri .= '&client_id=' . $translator->getSetting('lingo_client_id');
       $uri .= '&redirect_uri=' . \Drupal::state()->get('lingo_redirect_uri');
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/lingo24/src/Format/FormatManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lingo24\Format;

+use Drupal\tmgmt\SourcePluginUiInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Plugin\DefaultPluginManager;
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ @@
    * @param string $plugin
    *   Name of the source plugin.
    *
-   * @return \Drupal\tmgmt\SourcePluginUiInterface
+   * @return SourcePluginUiInterface
    *   Instance a source plugin UI instance.
    */
   public function createUIInstance($plugin) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/lingo24/src/Format/FormatInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lingo24\Format;

+use Drupal\tmgmt\Entity\Job;
 use Drupal\tmgmt\JobInterface;

 /**
@@ @@
   /**
    * Return the file content for the job data.
    *
-   * @param Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   The translation job object to be exported.
    * @param array $conditions
    *   (optional) An array containing list of conditions.
@@ @@
    * @param bool $is_file
    *   (optional) Whether $imported_file is the path to a file or not.
    *
-   * @return Drupal\tmgmt\Entity\Job
+   * @return Job
    *   Returns the corresponding translation job entity if the import file is
    *   valid, FALSE otherwise.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/lingo24/src/Controller/LingoController.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The messenger interface.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The state API.
    *
-   * @var Drupal\Core\State\State
+   * @var State
    */
   protected $state;

@@ @@
   /**
    * The config interface.
    *
-   * @var Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;

@@ @@
   /**
    * The request.
    *
-   * @var Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * The logger factory.
    *
-   * @var Drupal\Core\Logger\LoggerChannelFactory
+   * @var LoggerChannelFactory
    */
   protected $logger;

@@ @@
   /**
    * Constructor.
    *
-   * @param Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger interface.
-   * @param Drupal\Core\State\State $state
+   * @param State $state
    *   The state interface.
-   * @param Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The config interface.
-   * @param Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
-   * @param Drupal\Core\Logger\LoggerChannelFactory $logger
+   * @param LoggerChannelFactory $logger
    *   The logger factory.
    */
   public function __construct(MessengerInterface $messenger, State $state, ConfigFactoryInterface $config, Request $request, LoggerChannelFactory $logger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/lingo24/src/Commands/Lingo24Commands.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The File System.
    *
-   * @var Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The Format Plugin.
    *
-   * @var Drupal\lingo24\Format\FormatManager
+   * @var FormatManager
    */
   protected $format;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The File System.
-   * @param Drupal\lingo24\Format\FormatManager $format
+   * @param FormatManager $format
    *   The Format Plugin.
    */
   public function __construct(FileSystemInterface $file_system, FormatManager $format) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/lingo24/src/Annotation/FormatPlugin.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lingo24\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the format.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    * @ingroup plugin_translatable
    */
   public $label;
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


9) modules/contrib/lingo24/lingo24.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\file\FileUsage\FileUsageInterface;
 use Drupal\Core\Entity\EntityFormInterface;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
 function lingo24_theme() {
   return array(
     'lingo24_html_template' => array(
-      'path' => drupal_get_path('module', 'lingo24') . '/templates',
+      'path' => \Drupal::service('extension.list.module')->getPath('lingo24') . '/templates',
       'template' => 'lingo24_html_template',
       'variables' => array('tjid' => NULL, 'source_language' => NULL, 'target_language' => NULL, 'items' => NULL),
     ),
@@ @@
     // Not an entity form, nothing to alter.
     return;
   }
-  /** @var \Drupal\tmgmt\JobInterface $job */
+  /** @var JobInterface $job */
   $job = $formObject->getEntity();
   $supported_formats = array_keys(Drupal::service('plugin.manager.lingo24.format')->getDefinitions());
   if ($file = file_save_upload('file', array('file_validate_extensions' => array(implode(' ', $supported_formats))), FALSE, 0)) {
@@ @@
   $fids = $result->fetchCol();
   if (!empty($fids)) {
     // Remove file usage record.
-    /** @var \Drupal\file\FileUsage\FileUsageInterface $file_usage */
+    /** @var FileUsageInterface $file_usage */
     $file_usage = \Drupal::service('file.usage');
     foreach (File::loadMultiple($fids) as $file) {
       $file_usage->delete($file, 'lingo24', 'tmgmt_job', $job->id());
@@ @@
     ->condition('uri', $uri)
     ->execute();
   if ($fids) {
-    $files = \Drupal\file\Entity\File::loadMultiple($fids);
+    $files = File::loadMultiple($fids);
     foreach ($files as $item) {
       // Since some database servers sometimes use a case-insensitive comparison
       // by default, double check that the filename is an exact match.
@@ @@
           $path = $job->getSetting('scheme') . '://lingo24/' . $name . '.xlf';
           $dirname = dirname($path);
           if (\Drupal::service('file_system')->prepareDirectory($dirname, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS)) {
-            $file = file_save_data($lingo24Docs->getFileContent($file->getId()), $path, FileSystemInterface::EXISTS_REPLACE);
+            $file = \Drupal::service('file.repository')->writeData($lingo24Docs->getFileContent($file->getId()), $path, FileSystemInterface::EXISTS_REPLACE);
             $plugin = \Drupal::service('plugin.manager.lingo24.format')->createInstance('xlf');
             try {
               $job->addTranslatedData($plugin->import($path));
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileSaveDataRector
 * ArgumentRemoverRector


 [OK] 9 files have been changed by Rector                                       

