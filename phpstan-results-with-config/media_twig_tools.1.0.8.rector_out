modules/contrib/media_twig_tools/media_twig_tools.module
modules/contrib/media_twig_tools/src/Config/MediaTwigToolsConfig.php
modules/contrib/media_twig_tools/src/Config/MediaTwigToolsConfigInterface.php
modules/contrib/media_twig_tools/src/EventSubscribers/ImageBuilderEventSubscriber.php
modules/contrib/media_twig_tools/src/Form/SettingsForm.php
modules/contrib/media_twig_tools/src/Generators/ImageGenerator.php
modules/contrib/media_twig_tools/src/Services/ImageBuilder.php
modules/contrib/media_twig_tools/src/Services/MediaTwigTools.php
modules/contrib/media_twig_tools/tests/src/Unit/ImageBuilderTest.php

8 files with changes
====================

1) modules/contrib/media_twig_tools/tests/src/Unit/ImageBuilderTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\media_twig_tools\Unit;

+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\file\Entity\File;
 use Drupal\image\Entity\ImageStyle;
@@ @@
   /**
    * ImageBuilder.
    *
-   * @var \Drupal\media_twig_tools\Services\ImageBuilder
+   * @var ImageBuilder
    */
   protected $imageBuilders;

@@ @@
   /**
    * Input File.
    *
-   * @var \Drupal\file\Entity\File|\PHPUnit\Framework\MockObject\MockObject
+   * @var File|MockObject
    */
   protected $file;

@@ @@
    *
    * @param array $data
    *   Input data.
-   * @param \Drupal\Core\Entity\EntityInterface $file
+   * @param EntityInterface $file
    *   The file.
    */
   protected function testData(array $data, EntityInterface $file) {
@@ @@
   /**
    * Return the config mock.
    *
-   * @return \Drupal\media_twig_tools\Config\MediaTwigToolsConfig|\PHPUnit\Framework\MockObject\MockObject
+   * @return MediaTwigToolsConfig|MockObject
    *   The mock.
    */
   protected function mockConfig() {
-    $conf = $this->getMockBuilder(MediaTwigToolsConfig::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $conf = $this->createMock(MediaTwigToolsConfig::class);

     $conf->expects($this->any())
       ->method('getDirname')
@@ @@
       ->will($this->returnValue('landscape'));

     // Init the image style storage mock.
-    $imageStyleStorage = $this->getMockBuilder(ImageStyleStorage::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $imageStyleStorage = $this->createMock(ImageStyleStorage::class);
     $imageStyleStorage->expects($this->any())
       ->method('load')
       ->willReturnCallback(function ($id) {
-        $imageStyleMock = $this->getMockBuilder(ImageStyle::class)
-          ->disableOriginalConstructor()
-          ->getMock();
+        $imageStyleMock = $this->createMock(ImageStyle::class);
         $imageStyleMock->expects($this->any())
           ->method('id')
           ->will($this->returnValue($id));
@@ @@
   /**
    * Mock file.
    *
-   * @return \Drupal\file\Entity\File|\PHPUnit\Framework\MockObject\MockObject
+   * @return File|MockObject
    *   The file mock.
    */
   protected function mockFile() {
     // Define file.
-    $file = $this->getMockBuilder(File::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $file = $this->createMock(File::class);
     $file->expects($this->any())
       ->method('id')
       ->will($this->returnValue(1));
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/media_twig_tools/src/Services/MediaTwigTools.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_twig_tools\Services;

+use Drupal\Core\TypedData\Exception\MissingDataException;
+use Drupal\file\Entity\File;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Field\EntityReferenceFieldItemList;
 use Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem;
@@ @@
   /**
    * Entity TYpe manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * LanguageManager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * ImageBuilder.
    *
-   * @var \Drupal\media_twig_tools\Services\ImageBuilder
+   * @var ImageBuilder
    */
   protected $imageBuilder;

@@ @@
   /**
    * The configuration.
    *
-   * @var \Drupal\media_twig_tools\Config\MediaTwigToolsConfig
+   * @var MediaTwigToolsConfig
    */
   protected MediaTwigToolsConfig $conf;

@@ @@
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected FileSystemInterface $fileSystem;

@@ @@
   /**
    * TwigUtils constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language Manager.
-   * @param \Drupal\media_twig_tools\Services\ImageBuilder $imageBuilder
+   * @param ImageBuilder $imageBuilder
    *   The image builder.
-   * @param \Drupal\media_twig_tools\Config\MediaTwigToolsConfig $conf
+   * @param MediaTwigToolsConfig $conf
    *   The configuration.
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param FileSystemInterface $fileSystem
    *   THe file system.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, LanguageManagerInterface $languageManager, ImageBuilder $imageBuilder, MediaTwigToolsConfig $conf, FileSystemInterface $fileSystem) {
@@ @@
   /**
    * Return the build array of the image formatter according to options.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media.
    * @param array $options
    *   The options.
@@ @@
    * @return array|false
    *   The build array.
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    */
   protected function getImageBuildArrayFromMedia(MediaInterface $media, array $options) {
     // Récupération du fichier.
-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     $file = $media->get($options[static::OPTION_FIELD_NAME])
       ->referencedEntities()[0];
     if (is_null($file)) {
@@ @@
    *
    * @param array $imageFormatterBuild
    *   The image formatter build array.
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file.
    * @param array $options
    *   The options.
@@ @@
    */
   protected function initImageFormatterStyleData(array &$imageFormatterBuild, FileInterface $file, array $options) {
     // Récupération de l'url stylée.
-    /** @var \Drupal\image\ImageStyleInterface $style */
+    /** @var ImageStyleInterface $style */
     if ($style = $options[static::OPTION_STYLE]) {
       $styledImageUri = $style->buildUri($file->getFileUri());
       $imageFormatterBuild['#image_style'] = $style->id();
@@ @@
    *
    * @param array $imageFormatterBuild
    *   The image formatter build array.
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media.
    * @param array $options
    *   The options.
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    */
   protected function initImageMeta(array &$imageFormatterBuild, MediaInterface $media, array $options) {
     $imageData = $media->get($options[static::OPTION_FIELD_NAME])
@@ @@
    *
    * @param array $imageFormatterBuild
    *   The image formatter build array.
-   * @param \Drupal\media\Entity\Media $media
+   * @param Media $media
    *   The media.
    * @param array $options
    *   The options.
@@ @@
    *
    * @param array $imageFormatterBuild
    *   THe build array.
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   THe media.
    * @param array $options
    *   The options.
@@ @@
         ->load($style);
     }
     $url = NULL;
-    /** @var \Drupal\file\Entity\File $file */
+    /** @var File $file */
     if ($file = $this->conf->getFileStorage()->load($fileId)) {
       if ($style) {
-        $url = file_create_url($style->buildUri($file->getFileUri()));
+        $url = \Drupal::service('file_url_generator')->generateAbsoluteString($style->buildUri($file->getFileUri()));
       }
       else {
-        $url = file_create_url($file->getFileUri());
+        $url = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
       }
     }

     if ($relative) {
-      $url = file_url_transform_relative($url);
+      $url = \Drupal::service('file_url_generator')->transformRelative($url);
     }

     return $url;
@@ @@
   /**
    * Return the file id from media.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media.
    * @param array $options
    *   The options.
@@ @@
   /**
    * Return picture data.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media.
    * @param array $options
    *   The options.
@@ @@
   /**
    * Return the a sourrce from settings.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media.
    * @param string $mediaQuery
    *   The media query for the source.
@@ @@
   /**
    * Return src set from source settings.
    *
-   * @param \Drupal\media\Entity\Media $media
+   * @param Media $media
    *   The media.
    * @param array $settings
    *   The src settings.
@@ @@
   /**
    * Return the list of built files from the media.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media.
    *
    * @return string[]
@@ @@
   /**
    * Clear built files.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   Media.
    */
   public function clearBuiltFilesFromMedia(MediaInterface $media) {
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/media_twig_tools/src/Services/ImageBuilder.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * Conf.
    *
-   * @var \Drupal\media_twig_tools\Config\MediaTwigToolsConfigInterface
+   * @var MediaTwigToolsConfigInterface
    */
   protected $mediaTwigToolsConfig;

@@ @@
   /**
    * ImageBuilder constructor.
    *
-   * @param \Drupal\media_twig_tools\Config\MediaTwigToolsConfigInterface $mediaTwigToolsConfig
+   * @param MediaTwigToolsConfigInterface $mediaTwigToolsConfig
    *   The config.
    */
   public function __construct(MediaTwigToolsConfigInterface $mediaTwigToolsConfig) {
@@ @@
    * @param string $path
    *   The image path.
    *
-   * @return \Drupal\media_twig_tools\Generators\ImageGenerator
+   * @return ImageGenerator
    *   The Image Generator.
    *
    * @throws \Exception
@@ @@
     $rules = $this->getRulesData($srcSettings);

     // Get style.
-    /** @var \Drupal\image\ImageStyleInterface $style */
+    /** @var ImageStyleInterface $style */
     $style = isset($rules[MediaTwigTools::OPTION_STYLE]) ? $rules[MediaTwigTools::OPTION_STYLE] : NULL;
     if (!$style) {
       if (isset($srcSetSettings[MediaTwigTools::OPTION_STYLE])) {
@@ @@
   /**
    * Scale and crop image.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   THe file.
    * @param int $width
    *   THe width.
@@ @@
   /**
    * Return ruled url.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file.
    * @param array $rules
    *   THe rules.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/media_twig_tools/src/Generators/ImageGenerator.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The ImageBuilder service.
    *
-   * @var \Drupal\media_twig_tools\Services\ImageBuilder
+   * @var ImageBuilder
    */
   protected $imageBuilder;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/media_twig_tools/src/Form/SettingsForm.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Conf.
    *
-   * @var \Drupal\media_twig_tools\Config\MediaTwigToolsConfig
+   * @var MediaTwigToolsConfig
    */
   protected $conf;

@@ @@
   /**
    * SettingsForm constructor.
    *
-   * @param \Drupal\media_twig_tools\Config\MediaTwigToolsConfig $conf
+   * @param MediaTwigToolsConfig $conf
    *   The media twig tools config.
    */
   public function __construct(MediaTwigToolsConfig $conf) {
@@ @@
    */
   public static function create(ContainerInterface $container) {
     return new static(
-      $container->get(MediaTwigToolsConfig::SERVICE_NAME),
+      $this->conf,
     );
   }

@@ @@
   /**
    * Init settings.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The formstate.
    * @param bool $open
    *   The part should be open by default.
@@ @@
   /**
    * Init the clear images form part.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
   /**
    * Save settings action.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   protected function saveSettings(FormStateInterface $form_state) {
@@ @@
   /**
    * Clear images action.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The formstate.
    */
   protected function clearImages(FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * ContainerGetToConstructorInjectionRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/media_twig_tools/src/EventSubscribers/ImageBuilderEventSubscriber.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * ImageBuilder.
    *
-   * @var \Drupal\media_twig_tools\Services\ImageBuilder
+   * @var ImageBuilder
    */
   protected $imageBuilder;

@@ @@
   /**
    * ImageBuilderEventSubscriber constructor.
    *
-   * @param \Drupal\media_twig_tools\Services\ImageBuilder $imageBuilder
+   * @param ImageBuilder $imageBuilder
    *   The ImageBuilder service.
    */
   public function __construct(ImageBuilder $imageBuilder) {
@@ @@
   /**
    * On Kernel response.
    *
-   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $responseEvent
+   * @param ResponseEvent $responseEvent
    *   The response event.
    */
   public function onResponse(ResponseEvent $responseEvent) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/media_twig_tools/src/Config/MediaTwigToolsConfigInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_twig_tools\Config;

+use Drupal\Core\Entity\EntityStorageInterface;
 /**
  * Configuration for MediaTwigTools settings.
  *
@@ @@
   /**
    * REturn the file storage.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   The file storage.
    */
   public function getFileStorage();
@@ @@
   /**
    * Return the image style storage.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   The image style storage.
    */
   public function getImageStyleStorage();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/media_twig_tools/src/Config/MediaTwigToolsConfig.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_twig_tools\Config;

+use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * Config.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $conf;

@@ @@
   /**
    * The file System.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * File storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected EntityStorageInterface $fileStorage;

@@ @@
   /**
    * Image style storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected EntityStorageInterface $imageStyleStorage;

@@ @@
   /**
    * REturn the file storage.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   The file storage.
    */
   public function getFileStorage(): EntityStorageInterface {
@@ @@
   /**
    * Return the image style storage.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   The image style storage.
    */
   public function getImageStyleStorage(): EntityStorageInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 8 files have been changed by Rector                                       

