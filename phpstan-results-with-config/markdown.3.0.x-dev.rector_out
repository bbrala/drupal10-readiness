modules/contrib/markdown/markdown.api.php
modules/contrib/markdown/markdown.install
modules/contrib/markdown/markdown.module
modules/contrib/markdown/markdown.post_update.php
modules/contrib/markdown/src/Annotation/AnnotationObject.php
modules/contrib/markdown/src/Annotation/ComposerPackage.php
modules/contrib/markdown/src/Annotation/Identifier.php
modules/contrib/markdown/src/Annotation/InstallableLibrary.php
modules/contrib/markdown/src/Annotation/InstallablePlugin.php
modules/contrib/markdown/src/Annotation/InstallablePluginTrait.php
modules/contrib/markdown/src/Annotation/InstallableRequirement.php
modules/contrib/markdown/src/Annotation/MarkdownAllowedHtml.php
modules/contrib/markdown/src/Annotation/MarkdownExtension.php
modules/contrib/markdown/src/Annotation/MarkdownParser.php
modules/contrib/markdown/src/Annotation/PeclExtension.php
modules/contrib/markdown/src/BcSupport/BcAliasedInterface.php
modules/contrib/markdown/src/BcSupport/ConfigurableInterface.php
modules/contrib/markdown/src/BcSupport/DependentPluginDefinitionInterface.php
modules/contrib/markdown/src/BcSupport/DiscoveryException.php
modules/contrib/markdown/src/BcSupport/FormStateDecoratorBase.php
modules/contrib/markdown/src/BcSupport/FormStateValuesTrait.php
modules/contrib/markdown/src/BcSupport/ObjectWithPluginCollectionInterface.php
modules/contrib/markdown/src/BcSupport/PluginDependencyTrait.php
modules/contrib/markdown/src/BcSupport/SubformState.php
modules/contrib/markdown/src/BcSupport/SubformStateInterface.php
modules/contrib/markdown/src/Commands/MarkdownCommands.php
modules/contrib/markdown/src/Config/MarkdownConfig.php
modules/contrib/markdown/src/Exception/InstallablePluginExceptionInterface.php
modules/contrib/markdown/src/Exception/MarkdownException.php
modules/contrib/markdown/src/Exception/MarkdownExceptionInterface.php
modules/contrib/markdown/src/Exception/MarkdownFileNotExistsException.php
modules/contrib/markdown/src/Exception/MarkdownUnexpectedValueException.php
modules/contrib/markdown/src/Exception/MarkdownUrlNotExistsException.php
modules/contrib/markdown/src/Exception/MissingVersionException.php
modules/contrib/markdown/src/Form/OverviewForm.php
modules/contrib/markdown/src/Form/ParserConfigurationForm.php
modules/contrib/markdown/src/Form/ParserOperationForm.php
modules/contrib/markdown/src/Form/SubformState.php
modules/contrib/markdown/src/Form/SubformStateInterface.php
modules/contrib/markdown/src/Markdown.php
modules/contrib/markdown/src/MarkdownInterface.php
modules/contrib/markdown/src/ParamConverter/MarkdownParamConverter.php
modules/contrib/markdown/src/Plugin/Filter/FilterMarkdown.php
modules/contrib/markdown/src/Plugin/Filter/FilterMarkdownInterface.php
modules/contrib/markdown/src/Plugin/Markdown/AllowedHtml/FilterAlign.php
modules/contrib/markdown/src/Plugin/Markdown/AllowedHtml/FilterCaption.php
modules/contrib/markdown/src/Plugin/Markdown/AllowedHtml/MediaEmbed.php
modules/contrib/markdown/src/Plugin/Markdown/AllowedHtmlInterface.php
modules/contrib/markdown/src/Plugin/Markdown/AnnotatedPluginBase.php
modules/contrib/markdown/src/Plugin/Markdown/AnnotatedPluginInterface.php
modules/contrib/markdown/src/Plugin/Markdown/BaseExtensibleParser.php
modules/contrib/markdown/src/Plugin/Markdown/BaseExtension.php
modules/contrib/markdown/src/Plugin/Markdown/BaseParser.php
modules/contrib/markdown/src/Plugin/Markdown/CommonMark/BaseExtension.php
modules/contrib/markdown/src/Plugin/Markdown/CommonMark/CommonMark.php
modules/contrib/markdown/src/Plugin/Markdown/CommonMark/CommonMarkGfm.php
modules/contrib/markdown/src/Plugin/Markdown/CommonMark/Extension/AttributesExtension.php
modules/contrib/markdown/src/Plugin/Markdown/CommonMark/Extension/AutolinkExtension.php
modules/contrib/markdown/src/Plugin/Markdown/CommonMark/Extension/DisallowedRawHtmlExtension.php
modules/contrib/markdown/src/Plugin/Markdown/CommonMark/Extension/ExternalLinkExtension.php
modules/contrib/markdown/src/Plugin/Markdown/CommonMark/Extension/ExternalLinkRenderer.php
modules/contrib/markdown/src/Plugin/Markdown/CommonMark/Extension/FootnoteExtension.php
modules/contrib/markdown/src/Plugin/Markdown/CommonMark/Extension/HeadingPermalinkExtension.php
modules/contrib/markdown/src/Plugin/Markdown/CommonMark/Extension/MentionExtension.php
modules/contrib/markdown/src/Plugin/Markdown/CommonMark/Extension/SmartPunctuationExtension.php
modules/contrib/markdown/src/Plugin/Markdown/CommonMark/Extension/StrikethroughExtension.php
modules/contrib/markdown/src/Plugin/Markdown/CommonMark/Extension/TableExtension.php
modules/contrib/markdown/src/Plugin/Markdown/CommonMark/Extension/TableOfContentsExtension.php
modules/contrib/markdown/src/Plugin/Markdown/CommonMark/Extension/TaskListExtension.php
modules/contrib/markdown/src/Plugin/Markdown/CommonMark/ExtensionInterface.php
modules/contrib/markdown/src/Plugin/Markdown/CommonMark/RendererInterface.php
modules/contrib/markdown/src/Plugin/Markdown/EnabledPluginInterface.php
modules/contrib/markdown/src/Plugin/Markdown/ExtensibleParserInterface.php
modules/contrib/markdown/src/Plugin/Markdown/ExtensionInterface.php
modules/contrib/markdown/src/Plugin/Markdown/InstallablePluginBase.php
modules/contrib/markdown/src/Plugin/Markdown/InstallablePluginInterface.php
modules/contrib/markdown/src/Plugin/Markdown/MissingExtension.php
modules/contrib/markdown/src/Plugin/Markdown/MissingParser.php
modules/contrib/markdown/src/Plugin/Markdown/Parsedown/Parsedown.php
modules/contrib/markdown/src/Plugin/Markdown/Parsedown/ParsedownExtra.php
modules/contrib/markdown/src/Plugin/Markdown/ParserInterface.php
modules/contrib/markdown/src/Plugin/Markdown/Pecl/Cmark.php
modules/contrib/markdown/src/Plugin/Markdown/PhpMarkdown/PhpMarkdown.php
modules/contrib/markdown/src/Plugin/Markdown/PhpMarkdown/PhpMarkdownExtra.php
modules/contrib/markdown/src/Plugin/Markdown/PluginBase.php
modules/contrib/markdown/src/Plugin/Markdown/PluginInterface.php
modules/contrib/markdown/src/Plugin/Markdown/RenderStrategyInterface.php
modules/contrib/markdown/src/Plugin/Markdown/SettingsInterface.php
modules/contrib/markdown/src/Plugin/Validation/Constraint/Exists.php
modules/contrib/markdown/src/Plugin/Validation/Constraint/ExistsValidator.php
modules/contrib/markdown/src/Plugin/Validation/Constraint/Installed.php
modules/contrib/markdown/src/Plugin/Validation/Constraint/Version.php
modules/contrib/markdown/src/Plugin/Validation/Constraint/VersionValidator.php
modules/contrib/markdown/src/Plugin/migrate/process/MarkdownSettingsGenerator.php
modules/contrib/markdown/src/PluginManager/AllowedHtmlManager.php
modules/contrib/markdown/src/PluginManager/EnableAwarePluginManagerInterface.php
modules/contrib/markdown/src/PluginManager/ExtensionCollection.php
modules/contrib/markdown/src/PluginManager/ExtensionManager.php
modules/contrib/markdown/src/PluginManager/ExtensionManagerInterface.php
modules/contrib/markdown/src/PluginManager/InstallablePluginManager.php
modules/contrib/markdown/src/PluginManager/InstallablePluginManagerInterface.php
modules/contrib/markdown/src/PluginManager/ParserManager.php
modules/contrib/markdown/src/PluginManager/ParserManagerInterface.php
modules/contrib/markdown/src/Render/ParsedMarkdown.php
modules/contrib/markdown/src/Render/ParsedMarkdownInterface.php
modules/contrib/markdown/src/Traits/EnableAwarePluginManagerTrait.php
modules/contrib/markdown/src/Traits/EnabledPluginTrait.php
modules/contrib/markdown/src/Traits/FeatureDetectionTrait.php
modules/contrib/markdown/src/Traits/FilterAwareTrait.php
modules/contrib/markdown/src/Traits/FilterFormatAwareTrait.php
modules/contrib/markdown/src/Traits/FormTrait.php
modules/contrib/markdown/src/Traits/HttpClientTrait.php
modules/contrib/markdown/src/Traits/MarkdownTrait.php
modules/contrib/markdown/src/Traits/MoreInfoTrait.php
modules/contrib/markdown/src/Traits/NormalizeTrait.php
modules/contrib/markdown/src/Traits/ParserAllowedHtmlTrait.php
modules/contrib/markdown/src/Traits/ParserAwareTrait.php
modules/contrib/markdown/src/Traits/RendererTrait.php
modules/contrib/markdown/src/Traits/SettingsTrait.php
modules/contrib/markdown/src/Twig/Extension.php
modules/contrib/markdown/src/Twig/Node.php
modules/contrib/markdown/src/Twig/TokenParser.php
modules/contrib/markdown/src/Util/Composer.php
modules/contrib/markdown/src/Util/Error.php
modules/contrib/markdown/src/Util/FilterAwareInterface.php
modules/contrib/markdown/src/Util/FilterFormatAwareInterface.php
modules/contrib/markdown/src/Util/FilterHtml.php
modules/contrib/markdown/src/Util/KeyValuePipeConverter.php
modules/contrib/markdown/src/Util/ParserAwareInterface.php
modules/contrib/markdown/src/Util/Semver.php
modules/contrib/markdown/src/Util/SortArray.php
modules/contrib/markdown/tests/src/Kernel/MarkdownKernelTestBase.php
modules/contrib/markdown/tests/src/Kernel/Plugin/Markdown/MissingParserTest.php

84 files with changes
=====================

1) modules/contrib/markdown/tests/src/Kernel/Plugin/Markdown/MissingParserTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\markdown\Kernel\Plugin\Markdown;

+use Drupal\markdown\Plugin\Markdown\MissingParser;
+use Drupal\Core\Render\RendererInterface;
 use Drupal\Tests\markdown\Kernel\MarkdownKernelTestBase;

 /**
@@ @@
   /**
    * An instance of the missing markdown parser.
    *
-   * @var \Drupal\markdown\Plugin\Markdown\MissingParser
+   * @var MissingParser
    */
   protected $parser;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->parser = $this->container->get('plugin.manager.markdown.parser')
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/markdown/tests/src/Kernel/MarkdownKernelTestBase.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installConfig(['filter', 'markdown']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/markdown/src/Util/Semver.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * A version parser.
    *
-   * @var \Composer\Semver\VersionParser
+   * @var VersionParser
    */
   protected static $versionParser;

@@ @@
   /**
    * Retrieves a version parser.
    *
-   * @return \Composer\Semver\VersionParser
+   * @return VersionParser
    *   A version parser.
    */
   public static function versionParser() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/markdown/src/Util/ParserAwareInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Retrieves a Filter instance, if set.
    *
-   * @return \Drupal\markdown\Plugin\Markdown\ParserInterface|null
+   * @return ParserInterface|null
    *   A Markdown Parser instance or NULL if not set.
    */
   public function getParser();
@@ @@
   /**
    * Sets the Filter plugin.
    *
-   * @param \Drupal\markdown\Plugin\Markdown\ParserInterface $parser
+   * @param ParserInterface $parser
    *   A Markdown Parser instance.
    *
    * @return static
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/markdown/src/Util/FilterHtml.php:44

    ---------- begin diff ----------
@@ @@
   /**
    * Create a new instance from a Markdown Parser instance.
    *
-   * @param \Drupal\markdown\Plugin\Markdown\ParserInterface $parser
+   * @param ParserInterface $parser
    *   A Markdown Parser instance.
    *
    * @return static
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/markdown/src/Util/FilterFormatAwareInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Retrieves a FilterFormat entity, if set.
    *
-   * @return \Drupal\filter\Entity\FilterFormat|null
+   * @return FilterFormat|null
    *   A FilterFormat entity or NULL if not set.
    */
   public function getFilterFormat();
@@ @@
   /**
    * Sets the FilterFormat entity.
    *
-   * @param \Drupal\filter\Entity\FilterFormat $format
+   * @param FilterFormat $format
    *   A FilterFormat entity.
    *
    * @return static
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/markdown/src/Util/FilterAwareInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Retrieves a Filter instance, if set.
    *
-   * @return \Drupal\filter\Plugin\FilterInterface|null
+   * @return FilterInterface|null
    *   A Markdown Filter instance or NULL if not set.
    */
   public function getFilter();
@@ @@
   /**
    * Sets the Filter plugin.
    *
-   * @param \Drupal\filter\Plugin\FilterInterface $filter
+   * @param FilterInterface $filter
    *   A Filter instance.
    *
    * @return static
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/markdown/src/Util/Composer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Util;

+use Composer\Autoload\ClassLoader;
 use Drupal\Component\Serialization\Json;
 use Drupal\Component\Utility\Crypt;
 use Drupal\Component\Utility\DiffArray;
@@ @@
    * @see https://www.drupal.org/project/markdown/issues/3200476
    */
   public static function getInstalledJson($name, array $comparisonJson = []) {
-    /** @var \Composer\Autoload\ClassLoader $autoloader */
+    /** @var ClassLoader $autoloader */
     $autoloader = \Drupal::service('class_loader');
     if ($name && ($file = $autoloader->findFile('Composer\\Semver\\Semver'))) {
       if (($file = realpath(dirname($file) . "/../../installed.json")) && ($contents = file_get_contents($file)) && ($installedJson = Json::decode($contents))) {
@@ @@
    * @see https://www.drupal.org/project/markdown/issues/3200476
    */
   public static function getJsonFromClass($className, &$name = NULL, &$file = NULL) {
-    /** @var \Composer\Autoload\ClassLoader $autoloader */
+    /** @var ClassLoader $autoloader */
     $autoloader = \Drupal::service('class_loader');
     if ($file = $autoloader->findFile(ltrim(str_replace('\\\\', '\\', $className), '\\'))) {
       $directory = realpath(dirname($file));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/markdown/src/Twig/TokenParser.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * An instance of a markdown processor to use.
    *
-   * @var \Drupal\markdown\MarkdownInterface
+   * @var MarkdownInterface
    */
   protected $markdown;

@@ @@
   /**
    * Return the markdown instance being used.
    *
-   * @return \Drupal\markdown\MarkdownInterface
+   * @return MarkdownInterface
    *   The Markdown instance.
    */
   public function getMarkdown() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/markdown/src/Twig/Extension.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * An instance of a markdown processor to use.
    *
-   * @var \Drupal\markdown\MarkdownInterface
+   * @var MarkdownInterface
    */
   protected $markdown;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/markdown/src/Traits/SettingsTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Traits;

+use Drupal\markdown\Form\SubformStateInterface;
+use Drupal\markdown\Annotation\InstallablePlugin;
 use Drupal\Component\Utility\DiffArray;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
    * @param array $element
    *   The array element to construct. Note: this will be filled in with
    *   defaults if they're not provided.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    * @param callable $valueTransformer
    *   Optional. Callback used to transform the setting value.
@@ @@
    *   `$form += $this->createSettingsElement(...)`.
    */
   protected function createSettingElement($name, array $element, FormStateInterface $form_state, callable $valueTransformer = NULL) {
-    /** @var \Drupal\markdown\Form\SubformStateInterface $form_state */
+    /** @var SubformStateInterface $form_state */
     $settingName = $name;
     $parts = explode('.', $name);
     $name = array_pop($parts);
@@ @@
    * {@inheritdoc}
    */
   public static function defaultSettings($pluginDefinition) {
-    /** @var \Drupal\markdown\Annotation\InstallablePlugin $pluginDefinition */
+    /** @var InstallablePlugin $pluginDefinition */
     return [];
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


12) modules/contrib/markdown/src/Traits/RendererTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Traits;

+use Drupal\Core\Render\RendererInterface;
 /**
  * Trait for utilizing the Renderer service.
  *
@@ @@
   /**
    * The Renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected static $renderer;

@@ @@
   /**
    * Retrieves the Renderer service.
    *
-   * @return \Drupal\Core\Render\RendererInterface
+   * @return RendererInterface
    *   The Renderer service.
    */
   protected function renderer() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


13) modules/contrib/markdown/src/Traits/ParserAwareTrait.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * A Markdown Parser instance.
    *
-   * @var \Drupal\markdown\Plugin\Markdown\ParserInterface
+   * @var ParserInterface
    */
   protected $parser;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/markdown/src/Traits/NormalizeTrait.php:72

    ---------- begin diff ----------
@@ @@
    * @return array
    *   The normalized array.
    *
-   * @throws \Drupal\markdown\Exception\MarkdownUnexpectedValueException
+   * @throws MarkdownUnexpectedValueException
    *   When a callback provided isn't callable.
    */
   public static function normalizeCallables(&$iterable, array $parents = []) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


15) modules/contrib/markdown/src/Traits/MoreInfoTrait.php:20

    ---------- begin diff ----------
@@ @@
    *
    * @param mixed $existing
    *   The existing content to append to.
-   * @param string|\Drupal\Core\Url $url
+   * @param string|Url $url
    *   The URL to use.
    * @param string $label
    *   Optional. The "More Info" label to use for the link.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   The new joined content.
    */
   protected function moreInfo($existing, $url, $label = 'More Info') {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


16) modules/contrib/markdown/src/Traits/MarkdownTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Traits;

+use Drupal\markdown\MarkdownInterface;
 /**
  * Trait for adding the Markdown service to classes.
  */
@@ @@
   /**
    * The Markdown service.
    *
-   * @var \Drupal\markdown\MarkdownInterface
+   * @var MarkdownInterface
    */
   protected static $markdown;

@@ @@
   /**
    * Retrieves the Markdown service.
    *
-   * @return \Drupal\markdown\MarkdownInterface
+   * @return MarkdownInterface
    *   The Markdown service.
    */
   protected static function markdown() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


17) modules/contrib/markdown/src/Traits/HttpClientTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Traits;

+use GuzzleHttp\Client;
+use Drupal\Core\Http\ClientFactory;
+use function GuzzleHttp\default_user_agent;
 /**
  * Trait to assist with creating an HTTP client using module info as user-agent.
  *
@@ @@
   /**
    * The HTTP client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected static $httpClient;

@@ @@
    * @param string $type
    *   The type of Drupal extension, e.g. module or theme.
    *
-   * @return \GuzzleHttp\Client
+   * @return Client
    *   An HTTP client.
    */
   protected static function httpClient($name = 'markdown', $type = 'module') {
@@ @@
       }
       $extension .= " (+https://www.drupal.org/project/$name)";

-      /** @var \Drupal\Core\Http\ClientFactory $httpClientFactory */
+      /** @var ClientFactory $httpClientFactory */
       $httpClientFactory = \Drupal::service('http_client_factory');
       static::$httpClient = $httpClientFactory->fromOptions([
         'headers' => [
-          'User-Agent' => $extension . ' Drupal/' . \Drupal::VERSION . ' (+https://www.drupal.org/) ' . \GuzzleHttp\default_user_agent(),
+          'User-Agent' => $extension . ' Drupal/' . \Drupal::VERSION . ' (+https://www.drupal.org/) ' . default_user_agent(),
         ],
       ]);
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


18) modules/contrib/markdown/src/Traits/FormTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Traits;

+use Drupal\markdown\Form\SubformStateInterface;
+use Drupal\Core\Render\RendererInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Component\Render\MarkupInterface;
 use Drupal\Component\Serialization\Json;
@@ @@
    *   The name.
    * @param mixed $defaultValue
    *   The default value.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function resetToDefault(array &$element, $name, $defaultValue, FormStateInterface $form_state) {
-    /** @var \Drupal\markdown\Form\SubformStateInterface $form_state */
+    /** @var SubformStateInterface $form_state */
     $selector = static::getElementSelector($name, $form_state->createParents());

     $reset = FormTrait::createElement([
@@ @@
       ],
     ]);

-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = \Drupal::service('renderer');

     $element['#attached']['library'][] = 'markdown/reset';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


19) modules/contrib/markdown/src/Traits/FilterFormatAwareTrait.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * A FilterFormat entity.
    *
-   * @var \Drupal\filter\Entity\FilterFormat
+   * @var FilterFormat
    */
   protected $filterFormat;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


20) modules/contrib/markdown/src/Traits/FilterAwareTrait.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * A Filter plugin.
    *
-   * @var \Drupal\filter\Plugin\FilterInterface
+   * @var FilterInterface
    */
   protected $filter;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


21) modules/contrib/markdown/src/Render/ParsedMarkdownInterface.php:24

    ---------- begin diff ----------
@@ @@
    *   The raw markdown.
    * @param string $html
    *   The parsed HTML from $markdown.
-   * @param \Drupal\Core\Language\LanguageInterface|null $language
+   * @param LanguageInterface|null $language
    *   The language of the parsed markdown, if known.
    *
    * @return static
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


22) modules/contrib/markdown/src/Render/ParsedMarkdown.php:51

    ---------- begin diff ----------
@@ @@
   /**
    * The language of the parsed markdown, if known.
    *
-   * @var \Drupal\Core\Language\LanguageInterface|null
+   * @var LanguageInterface|null
    */
   protected $language;

@@ @@
    *   The raw markdown.
    * @param string $html
    *   The parsed HTML from $markdown.
-   * @param \Drupal\Core\Language\LanguageInterface|null $language
+   * @param LanguageInterface|null $language
    *   Optional. The language of the parsed markdown, if known.
    */
   public function __construct($markdown = '', $html = '', LanguageInterface $language = NULL) {
@@ @@

     // Handle relative time.
     if (is_string($expire)) {
-      $expire = strtotime($expire, $from_time ?: REQUEST_TIME);
+      $expire = strtotime($expire, $from_time ?: \Drupal::time()->getRequestTime());
     }

     return $expire;
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


23) modules/contrib/markdown/src/PluginManager/ParserManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\PluginManager;

+use Drupal\markdown\Plugin\Markdown\ParserInterface;
+use Drupal\markdown\Annotation\MarkdownParser;
 /**
  * Interface for the Markdown Parser Plugin Manager.
  *
- * @method \Drupal\markdown\Plugin\Markdown\ParserInterface[] all(array $configuration = [], $includeFallback = FALSE) : array
- * @method \Drupal\markdown\Plugin\Markdown\ParserInterface createInstance($plugin_id, array $configuration = [])
- * @method \Drupal\markdown\Plugin\Markdown\ParserInterface[] enabled(array $configuration = []) : array
- * @method \Drupal\markdown\Annotation\MarkdownParser getDefinition($plugin_id, $exception_on_invalid = TRUE)
- * @method \Drupal\markdown\Annotation\MarkdownParser|void getDefinitionByClassName($className)
- * @method \Drupal\markdown\Annotation\MarkdownParser[] getDefinitions($includeFallback = TRUE)
+ * @method ParserInterface[] all(array $configuration = [], $includeFallback = false) : array
+ * @method ParserInterface createInstance($plugin_id, array $configuration = [])
+ * @method ParserInterface[] enabled(array $configuration = []) : array
+ * @method MarkdownParser getDefinition($plugin_id, $exception_on_invalid = true)
+ * @method MarkdownParser|void getDefinitionByClassName($className)
+ * @method MarkdownParser[] getDefinitions($includeFallback = true)
  * @method string getFallbackPluginId($plugin_id = NULL, array $configuration = [])
- * @method \Drupal\markdown\Plugin\Markdown\ParserInterface[] installed(array $configuration = []) : array
+ * @method ParserInterface[] installed(array $configuration = []) : array
  */
 interface ParserManagerInterface extends EnableAwarePluginManagerInterface {

@@ @@
    * @param array $configuration
    *   An array of configuration relevant to the plugin instance.
    *
-   * @return \Drupal\markdown\Plugin\Markdown\ParserInterface
+   * @return ParserInterface
    *   A MarkdownParser plugin.
    */
   public function getDefaultParser(array $configuration = []);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


24) modules/contrib/markdown/src/PluginManager/ParserManager.php:16

    ---------- begin diff ----------
@@ @@
 /**
  * Markdown Parser Plugin Manager.
  *
- * @method \Drupal\markdown\Plugin\Markdown\ParserInterface[] all(array $configuration = [], $includeFallback = FALSE) : array
- * @method \Drupal\markdown\Plugin\Markdown\ParserInterface[] enabled(array $configuration = []) : array
- * @method \Drupal\markdown\Annotation\MarkdownParser getDefinition($plugin_id, $exception_on_invalid = TRUE)
- * @method \Drupal\markdown\Annotation\MarkdownParser|void getDefinitionByClassName($className)
- * @method \Drupal\markdown\Annotation\MarkdownParser[] getDefinitions($includeFallback = TRUE)
- * @method \Drupal\markdown\Plugin\Markdown\ParserInterface[] installed(array $configuration = []) : array
+ * @method ParserInterface[] all(array $configuration = [], $includeFallback = false) : array
+ * @method ParserInterface[] enabled(array $configuration = []) : array
+ * @method MarkdownParser getDefinition($plugin_id, $exception_on_invalid = true)
+ * @method MarkdownParser|void getDefinitionByClassName($className)
+ * @method MarkdownParser[] getDefinitions($includeFallback = true)
+ * @method ParserInterface[] installed(array $configuration = []) : array
  * @noinspection PhpUnnecessaryFullyQualifiedNameInspection
  */
 class ParserManager extends InstallablePluginManager implements ParserManagerInterface {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\markdown\Plugin\Markdown\ParserInterface
+   * @return ParserInterface
    *   A Parser instance.
    */
   public function createInstance($plugin_id, array $configuration = []) {
-    /** @var \Drupal\markdown\Plugin\Markdown\ParserInterface $parser */
+    /** @var ParserInterface $parser */
     $parser = parent::createInstance($plugin_id, $configuration);

     // If the parser is the fallback parser (missing), then just return it.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/markdown/src/PluginManager/InstallablePluginManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\PluginManager;

+use Drupal\markdown\Plugin\Markdown\InstallablePluginInterface;
+use Drupal\markdown\Annotation\InstallablePlugin;
 use Drupal\Component\Plugin\Discovery\CachedDiscoveryInterface;
 use Drupal\Component\Plugin\FallbackPluginManagerInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
@@ @@
    * @param bool $includeFallback
    *   Flag indicating whether to include the fallback plugin.
    *
-   * @return \Drupal\markdown\Plugin\Markdown\InstallablePluginInterface[]
+   * @return InstallablePluginInterface[]
    *   An array of installed plugins instances, keyed by plugin identifier.
    */
   public function all(array $configuration = [], $includeFallback = FALSE);
@@ @@
    * @param array $configuration
    *   An array of configuration relevant to the plugin instance.
    *
-   * @return \Drupal\markdown\Plugin\Markdown\InstallablePluginInterface
+   * @return InstallablePluginInterface
    *   A fully configured plugin instance.
    */
   public function createInstance($plugin_id, array $configuration = []);
@@ @@
    * @param string $className
    *   The class name to match.
    *
-   * @return \Drupal\markdown\Annotation\InstallablePlugin|void
+   * @return InstallablePlugin|void
    *   The first plugin definition matching the class name or NULL if not found.
    */
   public function getDefinitionByClassName($className);
@@ @@
    * @param string $libraryId
    *   The library identifier to match.
    *
-   * @return \Drupal\markdown\Annotation\InstallablePlugin|void
+   * @return InstallablePlugin|void
    *   The first plugin definition matching the first library identifier or
    *   NULL if not found.
    */
@@ @@
    * @param bool $includeFallback
    *   Flag indicating whether to include the "fallback" definition.
    *
-   * @return \Drupal\markdown\Annotation\InstallablePlugin[]
+   * @return InstallablePlugin[]
    *   An array of plugin definitions (empty array if no definitions were
    *   found). Keys are plugin IDs.
    */
@@ @@
    * @param array $configuration
    *   The configuration used to create plugin instances.
    *
-   * @return \Drupal\markdown\Plugin\Markdown\InstallablePluginInterface[]
+   * @return InstallablePluginInterface[]
    *   An array of installed plugins instances, keyed by plugin identifier.
    */
   public function installed(array $configuration = []);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


26) modules/contrib/markdown/src/PluginManager/InstallablePluginManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\PluginManager;

+use Symfony\Component\Validator\ConstraintViolationListInterface;
+use Drupal\Core\Extension\ThemeHandlerInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ @@
   /**
    * The Config Factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * A Logger service.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Allows plugin managers to further alter individual definitions.
    *
-   * @param \Drupal\markdown\Annotation\InstallablePlugin $definition
+   * @param InstallablePlugin $definition
    *   The definition being altered.
    * @param bool $runtime
    *   Flag indicating whether this is a runtime alteration.
@@ @@
   /**
    * Converts plugin definitions using the old "installed" method to libraries.
    *
-   * @param \Drupal\markdown\Annotation\InstallablePlugin $plugin
+   * @param InstallablePlugin $plugin
    *   The definition being processed.
    *
    * @deprecated in markdown:8.x-2.0 and is removed from markdown:3.0.0.
@@ @@

     // If this plugin was provided by a Drupal extension that does not exist,
     // remove the plugin definition.
-    /** @var \Drupal\markdown\Annotation\InstallablePlugin $definition */
+    /** @var InstallablePlugin $definition */
     foreach ($definitions as $plugin_id => $definition) {
       if (($provider = $definition->getProvider()) && !in_array($provider, ['core', 'component']) && !$this->providerExists($provider)) {
         unset($definitions[$plugin_id]);
@@ @@
   /**
    * Retrieves the container.
    *
-   * @return \Symfony\Component\DependencyInjection\ContainerInterface
+   * @return ContainerInterface
    *   The container.
    */
   public function getContainer() {
@@ @@
   /**
    * Retrieves the runtime definitions.
    *
-   * @return \Drupal\markdown\Annotation\InstallablePlugin[]
+   * @return InstallablePlugin[]
    *   The runtime definitions.
    *
    * @noinspection PhpDocMissingThrowsInspection
@@ @@
       static::$runtimeDefinitions[static::class] = parent::getDefinitions();

       // Validate runtime definition requirements.
-      /** @var \Drupal\markdown\Annotation\InstallablePlugin $definition */
+      /** @var InstallablePlugin $definition */
       foreach (static::$runtimeDefinitions[static::class] as $definition) {
         $definition->validate(TRUE);
       }
@@ @@
       }

       // Re-validate runtime definition requirements after alterations.
-      /** @var \Drupal\markdown\Annotation\InstallablePlugin $definition */
+      /** @var InstallablePlugin $definition */
       foreach (static::$runtimeDefinitions[static::class] as $plugin_id => $definition) {
         $definition->validate(TRUE);
       }
@@ @@
   /**
    * Processes the library definition.
    *
-   * @param \Drupal\markdown\Annotation\InstallablePlugin $definition
+   * @param InstallablePlugin $definition
    *   The plugin definition.
-   * @param \Drupal\markdown\Annotation\InstallableLibrary $library
+   * @param InstallableLibrary $library
    *   A library definition.
    * @param bool $preferred
    *   A flag indicating whether a library was explicitly set as "preferred",
    *   passed by reference.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   protected function processLibraryDefinition(InstallablePlugin $definition, InstallableLibrary $library, &$preferred = FALSE) {
     if (!$preferred && $library->preferred) {
@@ @@
         $versionRequirement->value = $version;
       }

-      /** @var \Symfony\Component\Validator\ConstraintViolationListInterface $violations */
+      /** @var ConstraintViolationListInterface $violations */
       $violations = Error::suppress(function () use ($versionRequirement) {
         return $versionRequirement->validate();
       });
@@ @@
   public function setCacheBackend(CacheBackendInterface $cache_backend, $cache_key, array $cache_tags = []) {
     $cache_tags[] = $cache_key;
     $cache_tags[] = "$cache_key:runtime";
-    /** @var \Drupal\Core\Extension\ThemeHandlerInterface $themeHandler */
+    /** @var ThemeHandlerInterface $themeHandler */
     $themeHandler = \Drupal::service('theme_handler');
     foreach (array_keys($themeHandler->listInfo()) as $theme) {
       $cache_tags[] = "$cache_key:runtime:$theme";
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/markdown/src/PluginManager/ExtensionManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\PluginManager;

+use Drupal\markdown\Plugin\Markdown\ExtensionInterface;
+use Drupal\markdown\Annotation\MarkdownExtension;
 /**
  * Interface for the Markdown Extension Plugin Manager.
  *
- * @method \Drupal\markdown\Plugin\Markdown\ExtensionInterface[] all(array $configuration = [], $includeFallback = FALSE) : array
- * @method \Drupal\markdown\Plugin\Markdown\ExtensionInterface createInstance($plugin_id, array $configuration = [])
- * @method \Drupal\markdown\Annotation\MarkdownExtension getDefinition($plugin_id, $exception_on_invalid = TRUE)
- * @method \Drupal\markdown\Annotation\MarkdownExtension|void getDefinitionByClassName($className)
- * @method \Drupal\markdown\Annotation\MarkdownExtension[] getDefinitions($includeFallback = TRUE)
- * @method \Drupal\markdown\Plugin\Markdown\ExtensionInterface[] installed(array $configuration = []) : array
+ * @method ExtensionInterface[] all(array $configuration = [], $includeFallback = false) : array
+ * @method ExtensionInterface createInstance($plugin_id, array $configuration = [])
+ * @method MarkdownExtension getDefinition($plugin_id, $exception_on_invalid = true)
+ * @method MarkdownExtension|void getDefinitionByClassName($className)
+ * @method MarkdownExtension[] getDefinitions($includeFallback = true)
+ * @method ExtensionInterface[] installed(array $configuration = []) : array
  * @noinspection PhpFullyQualifiedNameUsageInspection
  */
 interface ExtensionManagerInterface extends InstallablePluginManagerInterface {
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


28) modules/contrib/markdown/src/PluginManager/ExtensionManager.php:17

    ---------- begin diff ----------
@@ @@
 /**
  * Markdown Extension Plugin Manager.
  *
- * @method \Drupal\markdown\Plugin\Markdown\ExtensionInterface[] all(array $configuration = [], $includeFallback = FALSE) : array
- * @method \Drupal\markdown\Plugin\Markdown\ExtensionInterface createInstance($plugin_id, array $configuration = [])
- * @method \Drupal\markdown\Annotation\MarkdownExtension getDefinition($plugin_id, $exception_on_invalid = TRUE)
- * @method \Drupal\markdown\Annotation\MarkdownExtension|void getDefinitionByClassName($className)
- * @method \Drupal\markdown\Annotation\MarkdownExtension[] getDefinitions($includeFallback = TRUE)
- * @method \Drupal\markdown\Plugin\Markdown\ExtensionInterface[] installed(array $configuration = []) : array
+ * @method ExtensionInterface[] all(array $configuration = [], $includeFallback = false) : array
+ * @method ExtensionInterface createInstance($plugin_id, array $configuration = [])
+ * @method MarkdownExtension getDefinition($plugin_id, $exception_on_invalid = true)
+ * @method MarkdownExtension|void getDefinitionByClassName($className)
+ * @method MarkdownExtension[] getDefinitions($includeFallback = true)
+ * @method ExtensionInterface[] installed(array $configuration = []) : array
  * @noinspection PhpUnnecessaryFullyQualifiedNameInspection
  */
 class ExtensionManager extends InstallablePluginManager implements ExtensionManagerInterface {
@@ @@
    * {@inheritdoc}
    */
   protected function alterDefinitions(&$definitions, $runtime = FALSE) {
-    /** @var \Drupal\markdown\Annotation\MarkdownExtension[] $definitions */
-
+    /** @var MarkdownExtension[] $definitions */
     // Create dependency relationships between extensions.
     // Note: property is prefixed with an underscore to denote it as internal.
     // @see \Drupal\markdown\PluginManager\ExtensionCollection::__construct
@@ @@
   protected function createObjectRequirement(InstallablePlugin $definition, InstallableLibrary $library) {
     $objectRequirement = parent::createObjectRequirement($definition, $library);
     $id = $objectRequirement->constraints['Installed']['name'];
-    /** @var \Drupal\markdown\PluginManager\ParserManagerInterface $parserManager */
+    /** @var ParserManagerInterface $parserManager */
     $parserManager = \Drupal::service('plugin.manager.markdown.parser');
     $parser = $parserManager->getDefinitionByLibraryId($id);
     foreach ($library->requirements as $requirement) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/markdown/src/PluginManager/ExtensionCollection.php:8

    ---------- begin diff ----------
@@ @@
 /**
  * Collection of extension plugins based on relevant parser.
  *
- * @property \Drupal\markdown\PluginManager\ExtensionManager $manager
+ * @property ExtensionManager $manager
  */
 class ExtensionCollection extends DefaultLazyPluginCollection {

@@ @@
   /**
    * The Markdown Parser instance this extension collection belongs to.
    *
-   * @var \Drupal\markdown\Plugin\Markdown\ExtensibleParserInterface
+   * @var ExtensibleParserInterface
    */
   protected $parser;

@@ @@
   /**
    * ExtensionCollection constructor.
    *
-   * @param \Drupal\markdown\PluginManager\ExtensionManagerInterface $manager
+   * @param ExtensionManagerInterface $manager
    *   The Markdown Extension Plugin Manager service.
-   * @param \Drupal\markdown\Plugin\Markdown\ExtensibleParserInterface $parser
+   * @param ExtensibleParserInterface $parser
    *   A markdown parser instance.
    */
   public function __construct(ExtensionManagerInterface $manager, ExtensibleParserInterface $parser) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/markdown/src/PluginManager/EnableAwarePluginManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\PluginManager;

+use Drupal\markdown\Plugin\Markdown\EnabledPluginInterface;
 /**
  * Interface for plugin managers that are "enable" aware.
  *
- * @method \Drupal\markdown\Plugin\Markdown\EnabledPluginInterface[] all(array $configuration = [], $includeFallback = FALSE) : array
- * @method \Drupal\markdown\Plugin\Markdown\EnabledPluginInterface createInstance($plugin_id, array $configuration = [])
- * @method \Drupal\markdown\Plugin\Markdown\EnabledPluginInterface[] installed(array $configuration = []) : array
+ * @method EnabledPluginInterface[] all(array $configuration = [], $includeFallback = false) : array
+ * @method EnabledPluginInterface createInstance($plugin_id, array $configuration = [])
+ * @method EnabledPluginInterface[] installed(array $configuration = []) : array
  *
  * @todo Move upstream to https://www.drupal.org/project/installable_plugins.
  */
@@ @@
    * @param array $configuration
    *   The configuration used to create plugin instances.
    *
-   * @return \Drupal\markdown\Plugin\Markdown\EnabledPluginInterface[]
+   * @return EnabledPluginInterface[]
    *   An array of enabled plugins instances, keyed by plugin identifier.
    */
   public function enabled(array $configuration = []);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


31) modules/contrib/markdown/src/PluginManager/AllowedHtmlManager.php:25

    ---------- begin diff ----------
@@ @@
 /**
  * Markdown Allowed HTML Plugin Manager.
  *
- * @method \Drupal\markdown\Plugin\Markdown\AllowedHtmlInterface createInstance($plugin_id, array $configuration = [])
- * @method \Drupal\markdown\Annotation\MarkdownAllowedHtml getDefinition($plugin_id, $exception_on_invalid = TRUE)
- * @method \Drupal\markdown\Annotation\MarkdownAllowedHtml|void getDefinitionByClassName($className)
- * @method \Drupal\markdown\Annotation\MarkdownAllowedHtml[] getDefinitions($includeFallback = TRUE)
+ * @method AllowedHtmlInterface createInstance($plugin_id, array $configuration = [])
+ * @method MarkdownAllowedHtml getDefinition($plugin_id, $exception_on_invalid = true)
+ * @method MarkdownAllowedHtml|void getDefinitionByClassName($className)
+ * @method MarkdownAllowedHtml[] getDefinitions($includeFallback = true)
  * @noinspection PhpUnnecessaryFullyQualifiedNameInspection
  */
 class AllowedHtmlManager extends InstallablePluginManager {
@@ @@
   /**
    * The Markdown Extension Plugin Manager service.
    *
-   * @var \Drupal\markdown\PluginManager\ExtensionManagerInterface
+   * @var ExtensionManagerInterface
    */
   protected $extensionManager;

@@ @@
   /**
    * The Filter Plugin Manager service.
    *
-   * @var \Drupal\filter\FilterPluginManager
+   * @var FilterPluginManager
    */
   protected $filterManager;

@@ @@
   /**
    * The Markdown Parser Plugin Manager service.
    *
-   * @var \Drupal\markdown\PluginManager\ParserManagerInterface
+   * @var ParserManagerInterface
    */
   protected $parserManager;

@@ @@
   /**
    * The Theme Handler service.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface|string
+   * @var ThemeHandlerInterface|string
    */
   protected $themeHandler;

@@ @@
   /**
    * The Theme Manager service.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;

@@ @@
    *
    * Note: this is primarily for use when actually parsing markdown.
    *
-   * @param \Drupal\markdown\Plugin\Markdown\ParserInterface $parser
+   * @param ParserInterface $parser
    *   A markdown parser.
-   * @param \Drupal\Core\Theme\ActiveTheme $activeTheme
+   * @param ActiveTheme $activeTheme
    *   Optional. The active them. This is used as an indicator when in
    *   "render mode".
    * @param array $definitions
    *   Optional. Specific plugin definitions.
    *
-   * @return \Drupal\markdown\Plugin\Markdown\AllowedHtmlInterface[]
+   * @return AllowedHtmlInterface[]
    *   Plugins that apply to the $parser.
    */
   public function appliesTo(ParserInterface $parser, ActiveTheme $activeTheme = NULL, array $definitions = NULL) {
@@ @@
   /**
    * Retrieves definitions supported by parser extensions.
    *
-   * @param \Drupal\markdown\Plugin\Markdown\ParserInterface $parser
+   * @param ParserInterface $parser
    *   A parser.
    * @param array $definitions
    *   Optional. Specific definitions to filter, if not provided then all
    *   plugins with an "extension" type will be filtered.
-   * @param \Drupal\Core\Theme\ActiveTheme $activeTheme
+   * @param ActiveTheme $activeTheme
    *   Optional. The active them. This is used as an indicator when in
    *   "render mode".
    *
@@ @@
   /**
    * Retrieves definitions required by filters.
    *
-   * @param \Drupal\filter\Entity\FilterFormat $filterFormat
+   * @param FilterFormat $filterFormat
    *   A filter format.
    * @param array $definitions
    *   Optional. Specific definitions to filter, if not provided then all
    *   plugins with a "filter" type will be filtered.
-   * @param \Drupal\Core\Theme\ActiveTheme $activeTheme
+   * @param ActiveTheme $activeTheme
    *   Optional. The active them. This is used as an indicator when in
    *   "render mode".
    *
@@ @@
     if (!$filterFormat) {
       return [];
     }
-    /** @var \Drupal\markdown\Annotation\MarkdownAllowedHtml[] $definitions */
+    /** @var MarkdownAllowedHtml[] $definitions */
     $definitions = isset($definitions) ? $definitions : $this->getType('filter', $definitions);
     $filters = $filterFormat->filters();
     foreach ($definitions as $plugin_id => $definition) {
@@ @@
   /**
    * Retrieves the definition provided by the parser.
    *
-   * @param \Drupal\markdown\Plugin\Markdown\ParserInterface $parser
+   * @param ParserInterface $parser
    *   A parser.
    * @param array $definitions
    *   Optional. Specific definitions to filter, if not provided then all
    *   plugins with an "extension" type will be filtered.
-   * @param \Drupal\Core\Theme\ActiveTheme $activeTheme
+   * @param ActiveTheme $activeTheme
    *   Optional. The active them. This is used as an indicator when in
    *   "render mode".
    *
@@ @@
    * @param array $definitions
    *   Optional. Specific definitions to filter, if not provided then all
    *   plugins with a "theme" type will be filtered.
-   * @param \Drupal\Core\Theme\ActiveTheme $activeTheme
+   * @param ActiveTheme $activeTheme
    *   Optional. The active them. This is used as an indicator when in
    *   "render mode".
    *
@@ @@
       return;
     }

-    /** @var \Drupal\markdown\Annotation\MarkdownAllowedHtml $definition */
+    /** @var MarkdownAllowedHtml $definition */
     switch ($definition->type) {
       case 'extension':
         if (($extensionRequirement = current($definition->getRequirementsByType('extension'))) && ($extensionDefinition = $this->extensionManager->getDefinition($extensionRequirement->getTypeId()))) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/markdown/src/Plugin/Validation/Constraint/VersionValidator.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Semver version parser.
    *
-   * @var \Composer\Semver\VersionParser
+   * @var VersionParser
    */
   private static $versionParser;

@@ @@
    * {@inheritdoc}
    */
   public function validate($version, Constraint $constraint) {
-    /** @var \Drupal\markdown\Plugin\Validation\Constraint\Version $constraint */
+    /** @var Version $constraint */
     $semverConstraints = $constraint->value;

     $named = isset($constraint->name);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/markdown/src/Plugin/Markdown/SettingsInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Plugin\Markdown;

+use Drupal\markdown\Annotation\InstallablePlugin;
 /**
  * Interface for installable plugins that implement settings.
  *
@@ @@
   /**
    * Provides the default settings for the plugin.
    *
-   * @param \Drupal\markdown\Annotation\InstallablePlugin $pluginDefinition
+   * @param InstallablePlugin $pluginDefinition
    *   The plugin definition.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


34) modules/contrib/markdown/src/Plugin/Markdown/PluginInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Plugin\Markdown;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\Core\Url;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * Retrieves the config instance for this plugin.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig
+   * @return ImmutableConfig
    *   An immutable config instance for this plugin's configuration.
    */
   public function config();
@@ @@
   /**
    * Retrieves the description of the plugin, if set.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The description.
    */
   public function getDescription();
@@ @@
   /**
    * Displays the human-readable label of the plugin.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The label.
    */
   public function getLabel();
@@ @@
   /**
    * Retrieves the URL of the plugin, if set.
    *
-   * @return \Drupal\Core\Url|null
+   * @return Url|null
    *   A Url object or NULL if not set.
    */
   public function getUrl();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


35) modules/contrib/markdown/src/Plugin/Markdown/PhpMarkdown/PhpMarkdownExtra.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Plugin\Markdown\PhpMarkdown;

+use Drupal\markdown\Annotation\InstallablePlugin;
+use Drupal\markdown\Form\SubformStateInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Theme\ActiveTheme;
 use Drupal\markdown\Plugin\Markdown\AllowedHtmlInterface;
@@ @@
    * {@inheritdoc}
    */
   public static function defaultSettings($pluginDefinition) {
-    /** @var \Drupal\markdown\Annotation\InstallablePlugin $pluginDefinition */
+    /** @var InstallablePlugin $pluginDefinition */
     return [
       'code_attr_on_pre' => FALSE,
       'code_class_prefix' => '',
@@ @@
    * {@inheritdoc}
    */
   public function buildConfigurationForm(array $element, FormStateInterface $form_state) {
-    /** @var \Drupal\markdown\Form\SubformStateInterface $form_state */
+    /** @var SubformStateInterface $form_state */
     $element = parent::buildConfigurationForm($element, $form_state);

     $element += $this->createSettingElement('code_attr_on_pre', [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/markdown/src/Plugin/Markdown/PhpMarkdown/PhpMarkdown.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Plugin\Markdown\PhpMarkdown;

+use Drupal\markdown\Annotation\InstallablePlugin;
+use Drupal\markdown\Form\SubformStateInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\markdown\Plugin\Markdown\AllowedHtmlInterface;
@@ @@
    * {@inheritdoc}
    */
   public static function defaultSettings($pluginDefinition) {
-    /** @var \Drupal\markdown\Annotation\InstallablePlugin $pluginDefinition */
+    /** @var InstallablePlugin $pluginDefinition */
     return [
       'empty_element_suffix' => ' />',
       'enhanced_ordered_list' => FALSE,
@@ @@
    * {@inheritdoc}
    */
   public function buildConfigurationForm(array $element, FormStateInterface $form_state) {
-    /** @var \Drupal\markdown\Form\SubformStateInterface $form_state */
+    /** @var SubformStateInterface $form_state */
     $element = parent::buildConfigurationForm($element, $form_state);

     $element += $this->createSettingElement('enhanced_ordered_list', [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/markdown/src/Plugin/Markdown/Pecl/Cmark.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Plugin\Markdown\Pecl;

+use function CommonMark\Parse;
+use function CommonMark\Render\HTML;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\markdown\Plugin\Markdown\AllowedHtmlInterface;
 use Drupal\markdown\Plugin\Markdown\BaseParser;
@@ @@
     try {
       if (is_string($markdown)) {
         // NOTE: these are functions, not classes.
-        $node = \CommonMark\Parse($markdown);
-        return \CommonMark\Render\HTML($node);
+        $node = Parse($markdown);
+        return HTML($node);
       }
     }
     catch (\Exception $e) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/markdown/src/Plugin/Markdown/ParserInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Plugin\Markdown;

+use Drupal\markdown\Annotation\MarkdownParser;
+use Drupal\markdown\Render\ParsedMarkdownInterface;
 use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
 use Drupal\Core\Language\LanguageInterface;

@@ @@
 /**
  * Interface for defining markdown parsers.
  *
- * @method \Drupal\markdown\Annotation\MarkdownParser getPluginDefinition()
+ * @method MarkdownParser getPluginDefinition()
  */
 interface ParserInterface extends EnabledPluginInterface, RefinableCacheableDependencyInterface, RenderStrategyInterface, SettingsInterface {

@@ @@
    *
    * @param string $markdown
    *   The markdown string to parse.
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   Optional. The language of the markdown to be parsed.
    *
-   * @return \Drupal\markdown\Render\ParsedMarkdownInterface
+   * @return ParsedMarkdownInterface
    *   A safe ParsedMarkdown object.
    *
    * @see \Drupal\markdown\Render\ParsedMarkdownInterface
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


39) modules/contrib/markdown/src/Plugin/Markdown/Parsedown/Parsedown.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Plugin\Markdown\Parsedown;

+use Drupal\markdown\Annotation\InstallablePlugin;
+use Drupal\markdown\Form\SubformStateInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Theme\ActiveTheme;
@@ @@
    * {@inheritdoc}
    */
   public static function defaultSettings($pluginDefinition) {
-    /** @var \Drupal\markdown\Annotation\InstallablePlugin $pluginDefinition */
+    /** @var InstallablePlugin $pluginDefinition */
     return [
       'breaks_enabled' => FALSE,
       'markup_escaped' => FALSE,
@@ @@
    * {@inheritdoc}
    */
   public function buildConfigurationForm(array $element, FormStateInterface $form_state) {
-    /** @var \Drupal\markdown\Form\SubformStateInterface $form_state */
+    /** @var SubformStateInterface $form_state */
     $element = parent::buildConfigurationForm($element, $form_state);

     $element += $this->createSettingElement('breaks_enabled', [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/markdown/src/Plugin/Markdown/MissingParser.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Plugin\Markdown;

+use Drupal\markdown\Annotation\InstallablePlugin;
 use Drupal\Core\Cache\RefinableCacheableDependencyTrait;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Theme\ActiveTheme;
@@ @@
  *   requirementViolations = { @Translation("Missing Parser") },
  * )
  *
- * @property \Drupal\markdown\Annotation\InstallablePlugin $pluginDefinition
- * @method \Drupal\markdown\Annotation\InstallablePlugin getPluginDefinition()
+ * @property InstallablePlugin $pluginDefinition
+ * @method InstallablePlugin getPluginDefinition()
  */
 class MissingParser extends InstallablePluginBase implements AllowedHtmlInterface, ParserInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


41) modules/contrib/markdown/src/Plugin/Markdown/MissingExtension.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Plugin\Markdown;

+use Drupal\markdown\Annotation\InstallablePlugin;
 use Drupal\markdown\Traits\EnabledPluginTrait;
 use Drupal\markdown\Traits\ParserAwareTrait;

@@ @@
  *   requirementViolations = { @Translation("Missing Extension") },
  * )
  *
- * @property \Drupal\markdown\Annotation\InstallablePlugin $pluginDefinition
- * @method \Drupal\markdown\Annotation\InstallablePlugin getPluginDefinition()
+ * @property InstallablePlugin $pluginDefinition
+ * @method InstallablePlugin getPluginDefinition()
  */
 class MissingExtension extends InstallablePluginBase implements ExtensionInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


42) modules/contrib/markdown/src/Plugin/Markdown/InstallablePluginInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Plugin\Markdown;

+use Drupal\markdown\Annotation\InstallablePlugin;
+use Drupal\Component\Render\MarkupInterface;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\Core\GeneratedLink;
+use Drupal\Core\Url;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\markdown\Annotation\InstallableLibrary;

@@ @@
 /**
  * Interface for installable plugins.
  *
- * @method \Drupal\markdown\Annotation\InstallablePlugin getPluginDefinition()
+ * @method InstallablePlugin getPluginDefinition()
  *
  * @todo Move upstream to https://www.drupal.org/project/installable_plugins.
  */
@@ @@
   /**
    * Builds a display for a library.
    *
-   * @param \Drupal\markdown\Annotation\InstallableLibrary $library
+   * @param InstallableLibrary $library
    *   The library to build.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    */
   public function buildLibrary(InstallableLibrary $library = NULL);

@@ @@
    * @param bool $all
    *   Flag indicating whether to build status for all potential libraries.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    */
   public function buildStatus($all = FALSE);

@@ @@
   /**
    * Retrieves the config instance for this plugin.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig
+   * @return ImmutableConfig
    *   An immutable config instance for this plugin's configuration.
    */
   public function config();
@@ @@
   /**
    * Retrieves the deprecation message, if any.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup|void
+   * @return TranslatableMarkup|void
    *   The deprecated message, if set.
    */
   public function getDeprecated();
@@ @@
   /**
    * Retrieves the experimental message.
    *
-   * @return bool|\Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return bool|TranslatableMarkup
    *   TRUE if plugin is experimental or a TranslatableMarkup object if plugin
    *   is experimental, but has an additional message; FALSE otherwise.
    */
@@ @@
   /**
    * Retrieves the installed library used by the plugin.
    *
-   * @return \Drupal\markdown\Annotation\InstallableLibrary|void
+   * @return InstallableLibrary|void
    *   The installed library, if any.
    */
   public function getInstalledLibrary();
@@ @@
    * @param bool $version
    *   Flag indicating whether to show the version with the label.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The label.
    */
   public function getLabel($version = TRUE);
@@ @@
   /**
    * Retrieves the plugin as a link using its label and URL.
    *
-   * @param string|\Drupal\Component\Render\MarkupInterface $label
+   * @param string|MarkupInterface $label
    *   Optional. A specific label to use for the link. If not specified, it
    *   will default to the label or plugin identifier if present.
    * @param array $options
@@ @@
    *   Flag indicating whether to fallback to the original label or plugin
    *   identifier if no link could be generated.
    *
-   * @return \Drupal\Core\GeneratedLink|mixed|void
+   * @return GeneratedLink|mixed|void
    *   The link if one was generated or the label if $fallback was provided.
    */
   public function getLink($label = NULL, array $options = [], $fallback = TRUE);
@@ @@
   /**
    * Retrieves the preferred library of the plugin.
    *
-   * @return \Drupal\markdown\Annotation\InstallableLibrary|void
+   * @return InstallableLibrary|void
    *   The preferred library, if any.
    */
   public function getPreferredLibrary();
@@ @@
    * @param array $options
    *   Optional. An array of \Drupal\Core\Url options.
    *
-   * @return \Drupal\Core\Url|void
+   * @return Url|void
    *   A Url object of the plugin's URL or NULL if no URL was provided.
    *
    * @see \Drupal\Core\Url::fromUri
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


43) modules/contrib/markdown/src/Plugin/Markdown/InstallablePluginBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Plugin\Markdown;

+use Drupal\markdown\Annotation\InstallablePlugin;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Component\Utility\UrlHelper;
@@ @@
 /**
  * Base class for installable plugins.
  *
- * @property \Drupal\markdown\Annotation\InstallablePlugin $pluginDefinition
- * @method \Drupal\markdown\Annotation\InstallablePlugin getPluginDefinition()
+ * @property InstallablePlugin $pluginDefinition
+ * @method InstallablePlugin getPluginDefinition()
  *
  * @todo Move upstream to https://www.drupal.org/project/installable_plugins.
  */
@@ @@
   /**
    * The config for this plugin.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * Retrieves available installs.
    *
-   * @return \Drupal\markdown\Plugin\Markdown\InstallablePluginInterface[]
+   * @return InstallablePluginInterface[]
    */
   public function getAvailableInstalls() {
     $availableInstalls = [];
@@ @@
   /**
    * Retrieves the container.
    *
-   * @return \Symfony\Component\DependencyInjection\ContainerInterface
+   * @return ContainerInterface
    *   The container.
    */
   public function getContainer() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


44) modules/contrib/markdown/src/Plugin/Markdown/ExtensionInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Plugin\Markdown;

+use Drupal\markdown\Annotation\MarkdownExtension;
 use Drupal\markdown\Util\ParserAwareInterface;

 /**
  * Interface for extensions.
  *
- * @method \Drupal\markdown\Annotation\MarkdownExtension getPluginDefinition()
+ * @method MarkdownExtension getPluginDefinition()
  */
 interface ExtensionInterface extends EnabledPluginInterface, ParserAwareInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


45) modules/contrib/markdown/src/Plugin/Markdown/ExtensibleParserInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Plugin\Markdown;

+use Drupal\markdown\PluginManager\ExtensionCollection;
 use Drupal\markdown\BcSupport\ObjectWithPluginCollectionInterface;

 /**
@@ @@
    * @param string $extensionId
    *   The identifier of the extension plugin instance to return.
    *
-   * @return \Drupal\markdown\Plugin\Markdown\ExtensionInterface|null
+   * @return ExtensionInterface|null
    *   A markdown extension instance or NULL if it doesn't exist.
    */
   public function extension($extensionId);
@@ @@
   /**
    * Returns the ordered collection of extension plugin instances.
    *
-   * @return \Drupal\markdown\PluginManager\ExtensionCollection|\Drupal\markdown\Plugin\Markdown\ExtensionInterface[]
+   * @return ExtensionCollection|ExtensionInterface[]
    *   The extension plugin collection.
    */
   public function extensions();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


46) modules/contrib/markdown/src/Plugin/Markdown/CommonMark/Extension/TableOfContentsExtension.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Plugin\Markdown\CommonMark\Extension;

+use Drupal\markdown\Annotation\InstallablePlugin;
+use Drupal\markdown\Form\SubformStateInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\PluginFormInterface;
 use Drupal\markdown\Plugin\Markdown\CommonMark\BaseExtension;
@@ @@
    * {@inheritdoc}
    */
   public static function defaultSettings($pluginDefinition) {
-    /** @var \Drupal\markdown\Annotation\InstallablePlugin $pluginDefinition */
-
+    /** @var InstallablePlugin $pluginDefinition */
     $settings = [
       'html_class' => 'table-of-contents',
       'max_heading_level' => 6,
@@ @@
    * {@inheritdoc}
    */
   public function buildConfigurationForm(array $element, FormStateInterface $form_state) {
-    /** @var \Drupal\markdown\Form\SubformStateInterface $form_state */
-
+    /** @var SubformStateInterface $form_state */
     $element += $this->createSettingElement('html_class', [
       '#type' => 'textfield',
       '#title' => $this->t('HTML Class'),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


47) modules/contrib/markdown/src/Plugin/Markdown/CommonMark/Extension/SmartPunctuationExtension.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Plugin\Markdown\CommonMark\Extension;

+use Drupal\markdown\Annotation\InstallablePlugin;
+use Drupal\markdown\Form\SubformStateInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\PluginFormInterface;
 use Drupal\markdown\Plugin\Markdown\CommonMark\BaseExtension;
@@ @@
    * {@inheritdoc}
    */
   public static function defaultSettings($pluginDefinition) {
-    /** @var \Drupal\markdown\Annotation\InstallablePlugin $pluginDefinition */
-
+    /** @var InstallablePlugin $pluginDefinition */
     // Older versions of the deprecated extension didn't have settings.
     if (!static::featureExists('settings')) {
       return [];
@@ @@
    * {@inheritdoc}
    */
   public function buildConfigurationForm(array $element, FormStateInterface $form_state) {
-    /** @var \Drupal\markdown\Form\SubformStateInterface $form_state */
-
+    /** @var SubformStateInterface $form_state */
     // Immediately return if extension doesn't support settings.
     if (!static::featureExists('settings')) {
       return $element;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


48) modules/contrib/markdown/src/Plugin/Markdown/CommonMark/Extension/MentionExtension.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Plugin\Markdown\CommonMark\Extension;

+use Drupal\markdown\Form\SubformStateInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\PluginFormInterface;
 use Drupal\markdown\Plugin\Markdown\CommonMark\BaseExtension;
@@ @@
    * {@inheritdoc}
    */
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\markdown\Form\SubformStateInterface $form_state */
+    /** @var SubformStateInterface $form_state */
     $parentForm = &$form_state->getParentForm();
     $parentForm['enabled']['#disabled'] = TRUE;
     return $form;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


49) modules/contrib/markdown/src/Plugin/Markdown/CommonMark/Extension/HeadingPermalinkExtension.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Plugin\Markdown\CommonMark\Extension;

+use Drupal\markdown\Annotation\InstallablePlugin;
+use League\CommonMark\Extension\HeadingPermalink\HeadingPermalinkRenderer;
+use Drupal\markdown\Form\SubformStateInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\PluginFormInterface;
 use Drupal\Core\Theme\ActiveTheme;
@@ @@
    * {@inheritdoc}
    */
   public static function defaultSettings($pluginDefinition) {
-    /** @var \Drupal\markdown\Annotation\InstallablePlugin $pluginDefinition */
-
+    /** @var InstallablePlugin $pluginDefinition */
     $innerContents = '';
     if (defined('\\League\\CommonMark\\Extension\\HeadingPermalink\\HeadingPermalinkRenderer::DEFAULT_INNER_CONTENTS')) {
       /* @noinspection PhpFullyQualifiedNameUsageInspection */
-      $innerContents = \League\CommonMark\Extension\HeadingPermalink\HeadingPermalinkRenderer::DEFAULT_INNER_CONTENTS; // phpcs:ignore
+      $innerContents = HeadingPermalinkRenderer::DEFAULT_INNER_CONTENTS; // phpcs:ignore
     }

     return [
@@ @@
    * {@inheritdoc}
    */
   public function buildConfigurationForm(array $element, FormStateInterface $form_state) {
-    /** @var \Drupal\markdown\Form\SubformStateInterface $form_state */
-
+    /** @var SubformStateInterface $form_state */
     $element += $this->createSettingElement('html_class', [
       '#type' => 'textfield',
       '#title' => $this->t('HTML Class'),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


50) modules/contrib/markdown/src/Plugin/Markdown/CommonMark/Extension/FootnoteExtension.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Plugin\Markdown\CommonMark\Extension;

+use Drupal\markdown\Annotation\InstallablePlugin;
+use Drupal\markdown\Form\SubformStateInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\PluginFormInterface;
 use Drupal\Core\Theme\ActiveTheme;
@@ @@
    * {@inheritdoc}
    */
   public static function defaultSettings($pluginDefinition) {
-    /** @var \Drupal\markdown\Annotation\InstallablePlugin $pluginDefinition */
-
+    /** @var InstallablePlugin $pluginDefinition */
     // Immediately return if not using the newer bundled extension.
     if ($pluginDefinition->object === 'RZ\\CommonMark\\Ext\\Footnote\\FootnoteExtension') {
       return [];
@@ @@
    * {@inheritdoc}
    */
   public function buildConfigurationForm(array $element, FormStateInterface $form_state) {
-    /** @var \Drupal\markdown\Form\SubformStateInterface $form_state */
-
+    /** @var SubformStateInterface $form_state */
     // Add a note about core's aggressive XSS and how it affects footnotes.
     // @todo Remove note about core XSS bug/workaround.
     // @see https://www.drupal.org/project/markdown/issues/3136378
@@ @@
    * {@inheritdoc}
    */
   public function validateConfigurationForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\markdown\Form\SubformStateInterface $form_state */
+    /** @var SubformStateInterface $form_state */
     foreach (['footnote_id_prefix', 'ref_id_prefix'] as $name) {
       if (strpos($form_state->getValue($name), ':') !== FALSE) {
         $form_state->setError($form[$name], $this->moreInfo($this->t('Due to a core bug, the use of colons (:) in "@title" is not possible.', [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


51) modules/contrib/markdown/src/Plugin/Markdown/CommonMark/CommonMark.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Plugin\Markdown\CommonMark;

+use Drupal\markdown\Annotation\InstallablePlugin;
+use Drupal\markdown\Form\SubformStateInterface;
 use Composer\Semver\Semver;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Utility\NestedArray;
@@ @@
    * {@inheritdoc}
    */
   public static function defaultSettings($pluginDefinition) {
-    /** @var \Drupal\markdown\Annotation\InstallablePlugin $pluginDefinition */
-
+    /** @var InstallablePlugin $pluginDefinition */
     // CommonMark didn't have configuration until 0.6.0.
     if (!$pluginDefinition->version || Semver::satisfies($pluginDefinition->version, '<0.6.0')) {
       return [];
@@ @@
    * {@inheritdoc}
    */
   public function buildConfigurationForm(array $element, FormStateInterface $form_state) {
-    /** @var \Drupal\markdown\Form\SubformStateInterface $form_state */
+    /** @var SubformStateInterface $form_state */
     $element = parent::buildConfigurationForm($element, $form_state);

     $element += $this->createSettingElement('allow_unsafe_links', [
@@ @@

       $extensions = $this->extensions();
       foreach ($extensions as $extension) {
-        /** @var \Drupal\markdown\Plugin\Markdown\CommonMark\ExtensionInterface $extension */
-
+        /** @var ExtensionInterface $extension */
         // Skip disabled extensions.
         if (!$extension->isEnabled()) {
           continue;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


52) modules/contrib/markdown/src/Plugin/Markdown/CommonMark/BaseExtension.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Plugin\Markdown\CommonMark;

+use Drupal\markdown\Annotation\MarkdownExtension;
 use Drupal\markdown\Plugin\Markdown\BaseExtension as MarkdownBaseExtension;
 use Drupal\markdown\Plugin\Markdown\ExtensibleParserInterface;
 use Drupal\markdown\Traits\ParserAwareTrait;
@@ @@
 /**
  * Base CommonMark Extension.
  *
- * @property \Drupal\markdown\Annotation\MarkdownExtension $pluginDefinition
- * @method \Drupal\markdown\Annotation\MarkdownExtension getPluginDefinition()
+ * @property MarkdownExtension $pluginDefinition
+ * @method MarkdownExtension getPluginDefinition()
  * @method \League\CommonMark\Extension\ExtensionInterface getObject($args = NULL, $_ = NULL)
  */
 abstract class BaseExtension extends MarkdownBaseExtension implements ExtensionInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


53) modules/contrib/markdown/src/Plugin/Markdown/BaseParser.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Plugin\Markdown;

+use Drupal\markdown\Annotation\MarkdownParser;
+use Drupal\Component\Render\MarkupInterface;
+use Drupal\markdown\Form\SubformStateInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Cache\RefinableCacheableDependencyTrait;
@@ @@
 /**
  * Base class form Markdown Parser instances.
  *
- * @property \Drupal\markdown\Annotation\MarkdownParser $pluginDefinition
- * @method \Drupal\markdown\Annotation\MarkdownParser getPluginDefinition()
+ * @property MarkdownParser $pluginDefinition
+ * @method MarkdownParser getPluginDefinition()
  */
 abstract class BaseParser extends InstallablePluginBase implements FilterAwareInterface, ParserInterface, PluginFormInterface {

@@ @@
    *
    * @param array $settings
    *   The parser settings to validate.
-   * @param \Symfony\Component\Validator\Context\ExecutionContextInterface $context
+   * @param ExecutionContextInterface $context
    *   The validation execution context.
    */
   public static function validateSettings(array $settings, ExecutionContextInterface $context) {
@@ @@
    *
    * @param string $markdown
    *   The markdown string to convert.
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   Optional. The language of the text that is being converted.
    *
    * @return string
@@ @@
   /**
    * A description explaining why a setting is disabled due to render strategy.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   The rendered description.
    */
   protected function renderStrategyDisabledSetting(FormStateInterface $form_state) {
-    /** @var \Drupal\markdown\Form\SubformStateInterface $form_state */
+    /** @var SubformStateInterface $form_state */
     $markdownParents = $form_state->get('markdownSubformParents');
     $parents = array_merge($markdownParents, ['render_strategy', 'type']);
     $selector = ':input[name="' . array_shift($parents) . '[' . implode('][', $parents) . ']"]';

-    /** @var \Drupal\markdown\Form\SubformStateInterface $form_state */
+    /** @var SubformStateInterface $form_state */
     return new FormattableMarkup('@disabled@warning', [
       '@disabled' => $form_state->conditionalElement([
         '#type' => 'container',
@@ @@
   /**
    * Adds a conditional state for a setting element based on render strategy.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    * @param array $element
    *   The element to modify, passed by reference.
@@ @@
    *   The conditions for which to trigger the state(s).
    */
   protected function renderStrategyDisabledSettingState(FormStateInterface $form_state, array &$element, $state = 'disabled', array $conditions = ['!value' => self::NONE]) {
-    /** @var \Drupal\markdown\Form\SubformStateInterface $form_state */
+    /** @var SubformStateInterface $form_state */
     $markdownParents = $form_state->get('markdownSubformParents');
     $parents = array_merge($markdownParents, ['render_strategy', 'type']);
     $selector = ':input[name="' . array_shift($parents) . '[' . implode('][', $parents) . ']"]';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


54) modules/contrib/markdown/src/Plugin/Markdown/BaseExtension.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Plugin\Markdown;

+use Drupal\markdown\Annotation\MarkdownExtension;
 use Drupal\Core\Config\Schema\Mapping;
 use Drupal\markdown\PluginManager\ExtensionManager;
 use Drupal\markdown\Traits\EnabledPluginTrait;
@@ @@
 /**
  * Base class for markdown extensions.
  *
- * @property \Drupal\markdown\Annotation\MarkdownExtension $pluginDefinition
- * @method \Drupal\markdown\Annotation\MarkdownExtension getPluginDefinition()
+ * @property MarkdownExtension $pluginDefinition
+ * @method MarkdownExtension getPluginDefinition()
  */
 abstract class BaseExtension extends InstallablePluginBase implements ExtensionInterface {

@@ @@
    *
    * @param array $settings
    *   The extension settings to validate.
-   * @param \Symfony\Component\Validator\Context\ExecutionContextInterface $context
+   * @param ExecutionContextInterface $context
    *   The validation execution context.
    */
   public static function validateSettings(array $settings, ExecutionContextInterface $context) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


55) modules/contrib/markdown/src/Plugin/Markdown/BaseExtensibleParser.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Plugin\Markdown;

+use Drupal\markdown\Annotation\MarkdownParser;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\markdown\PluginManager\ExtensionCollection;
 use Drupal\markdown\Util\SortArray;
@@ @@
 /**
  * Base class for extensible markdown parsers.
  *
- * @property \Drupal\markdown\Annotation\MarkdownParser $pluginDefinition
- * @method \Drupal\markdown\Annotation\MarkdownParser getPluginDefinition()
+ * @property MarkdownParser $pluginDefinition
+ * @method MarkdownParser getPluginDefinition()
  */
 abstract class BaseExtensibleParser extends BaseParser implements ExtensibleParserInterface {

@@ @@
   /**
    * A collection of MarkdownExtension plugins specific to the parser.
    *
-   * @var \Drupal\markdown\PluginManager\ExtensionCollection
+   * @var ExtensionCollection
    */
   protected $extensionCollection;

@@ @@
     // Normalize extensions and their settings.
     $extensions = [];
     $extensionCollection = $this->extensions();
-    /** @var \Drupal\markdown\Plugin\Markdown\ExtensionInterface $extension */
+    /** @var ExtensionInterface $extension */
     foreach ($extensionCollection as $extensionId => $extension) {
       // Only include extensions that have configuration overrides.
       if ($overrides = $extension->getConfigurationOverrides()) {
@@ @@
   /**
    * Indicates whether an extension is "required" by another extension.
    *
-   * @param \Drupal\markdown\Plugin\Markdown\ExtensionInterface $extension
+   * @param ExtensionInterface $extension
    *   The extension to check.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


56) modules/contrib/markdown/src/Plugin/Markdown/AnnotatedPluginInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Plugin\Markdown;

+use Drupal\markdown\Annotation\AnnotationObject;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\markdown\BcSupport\ConfigurableInterface;
@@ @@
 /**
  * Interface for annotated plugins.
  *
- * @method \Drupal\markdown\Annotation\AnnotationObject getPluginDefinition()
+ * @method AnnotationObject getPluginDefinition()
  *
  * @todo Move upstream to https://www.drupal.org/project/installable_plugins.
  */
@@ @@
   /**
    * Retrieves the description of the plugin, if set.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The description.
    */
   public function getDescription();
@@ @@
   /**
    * Displays the human-readable label of the plugin.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The label.
    */
   public function getLabel();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


57) modules/contrib/markdown/src/Plugin/Markdown/AnnotatedPluginBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Plugin\Markdown;

+use Drupal\markdown\Annotation\AnnotationObject;
 use Drupal\Component\Utility\DiffArray;
 use Drupal\Core\Plugin\PluginBase as CoreBasePlugin;
 use Symfony\Component\DependencyInjection\ContainerAwareTrait;
@@ @@
 /**
  * Base class for annotated plugins.
  *
- * @property \Drupal\markdown\Annotation\AnnotationObject $pluginDefinition
- * @method \Drupal\markdown\Annotation\AnnotationObject getPluginDefinition()
+ * @property AnnotationObject $pluginDefinition
+ * @method AnnotationObject getPluginDefinition()
  *
  * @todo Move upstream to https://www.drupal.org/project/installable_plugins.
  */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


58) modules/contrib/markdown/src/Plugin/Markdown/AllowedHtmlInterface.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Retrieves the allowed HTML tags.
    *
-   * @param \Drupal\markdown\Plugin\Markdown\ParserInterface $parser
+   * @param ParserInterface $parser
    *   The parser associated with this plugin.
-   * @param \Drupal\Core\Theme\ActiveTheme $activeTheme
+   * @param ActiveTheme $activeTheme
    *   Optional. The active them. This is used as an indicator when in
    *   "render mode".
    *
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


59) modules/contrib/markdown/src/Plugin/Filter/FilterMarkdownInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Plugin\Filter;

+use Drupal\markdown\Plugin\Markdown\ParserInterface;
 use Drupal\filter\Plugin\FilterInterface;
 use Drupal\markdown\Util\FilterFormatAwareInterface;

@@ @@
   /**
    * Retrieves the MarkdownParser plugin for this filter.
    *
-   * @return \Drupal\markdown\Plugin\Markdown\ParserInterface
+   * @return ParserInterface
    *   The MarkdownParser plugin.
    */
   public function getParser();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


60) modules/contrib/markdown/src/Plugin/Filter/FilterMarkdown.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Plugin\Filter;

+use Drupal\filter\FilterFormatInterface;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Component\Utility\NestedArray;
@@ @@
   /**
    * The Element Info Manager service.
    *
-   * @var \Drupal\Core\Render\ElementInfoManagerInterface
+   * @var ElementInfoManagerInterface
    */
   protected $elementInfo;

@@ @@
   /**
    * The Markdown Parser Plugin Manager service.
    *
-   * @var \Drupal\markdown\PluginManager\ParserManagerInterface
+   * @var ParserManagerInterface
    */
   protected $parserManager;

@@ @@
           $filterFormat = $currentFilterFormat;
         }
         else {
-          /** @var \Drupal\filter\Entity\FilterFormat $filterFormat */
+          /** @var FilterFormat $filterFormat */
           $filterFormat = FilterFormat::load($configuration['filterFormat']);
         }
         $this->setFilterFormat($filterFormat);
@@ @@
    *
    * @param array $element
    *   The element being processed.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    * @param array $complete_form
    *   The complete form, passed by reference.
@@ @@
    *
    * @param array $element
    *   The render array element being processed, passed by reference.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    * @param array $complete_form
    *   The complete form, passed by reference.
@@ @@
       return $element;
     }

-    /** @var \Drupal\filter\FilterFormatInterface $format */
+    /** @var FilterFormatInterface $format */
     $format = $formats[$element['#format']];
     try {
       if (($markdown = $format->filters('markdown')) && $markdown->status) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


61) modules/contrib/markdown/src/ParamConverter/MarkdownParamConverter.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The Config Factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The Markdown Allowed HTML Plugin Manager service.
    *
-   * @var \Drupal\markdown\PluginManager\AllowedHtmlManager
+   * @var AllowedHtmlManager
    */
   protected $allowedHtmlManager;

@@ @@
   /**
    * The Markdown Extension Plugin Manager service.
    *
-   * @var \Drupal\markdown\PluginManager\ExtensionManagerInterface
+   * @var ExtensionManagerInterface
    */
   protected $extensionManager;

@@ @@
   /**
    * The Markdown Parser Plugin Manager service.
    *
-   * @var \Drupal\markdown\PluginManager\ParserManagerInterface
+   * @var ParserManagerInterface
    */
   protected $parserManager;

@@ @@
   /**
    * MarkdownParamConverter constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The Config Factory service.
-   * @param \Drupal\markdown\PluginManager\ParserManagerInterface $parserManager
+   * @param ParserManagerInterface $parserManager
    *   The Markdown Parser Plugin Manager service.
-   * @param \Drupal\markdown\PluginManager\ExtensionManagerInterface $extensionManager
+   * @param ExtensionManagerInterface $extensionManager
    *   The Markdown Extension Plugin Manager service.
-   * @param \Drupal\markdown\PluginManager\AllowedHtmlManager $allowedHtmlManager
+   * @param AllowedHtmlManager $allowedHtmlManager
    *   The Markdown Allowed HTML Plugin Manager service.
    */
   public function __construct(ConfigFactoryInterface $configFactory, ParserManagerInterface $parserManager, ExtensionManagerInterface $extensionManager, AllowedHtmlManager $allowedHtmlManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


62) modules/contrib/markdown/src/MarkdownInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown;

+use Drupal\markdown\Exception\MarkdownFileNotExistsException;
+use Drupal\markdown\Exception\MarkdownUrlNotExistsException;
+use Drupal\markdown\Plugin\Markdown\ParserInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\markdown\Render\ParsedMarkdownInterface;
@@ @@
    * @param string $id
    *   Optional. A unique identifier for caching the parsed markdown. If not
    *   set, one will be generated automatically based on the provided $filename.
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   Optional. The language of the markdown that is being parsed.
    *
-   * @return \Drupal\markdown\Render\ParsedMarkdownInterface
+   * @return ParsedMarkdownInterface
    *   A ParsedMarkdown object.
    *
-   * @throws \Drupal\markdown\Exception\MarkdownFileNotExistsException
+   * @throws MarkdownFileNotExistsException
    */
   public function loadFile($filename, $id = NULL, LanguageInterface $language = NULL);

@@ @@
    * @param string $id
    *   Optional. A unique identifier for caching the parsed markdown. If not
    *   set, one will be generated automatically based on the provided $path.
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   Optional. The language of the markdown that is being parsed.
    *
-   * @return \Drupal\markdown\Render\ParsedMarkdownInterface
+   * @return ParsedMarkdownInterface
    *   A ParsedMarkdown object.
    *
-   * @throws \Drupal\markdown\Exception\MarkdownFileNotExistsException
+   * @throws MarkdownFileNotExistsException
    *
    * @deprecated in markdown:8.x-2.0 and is removed from markdown:3.0.0.
    *   Use \Drupal\markdown\MarkdownInterface::loadFile instead.
@@ @@
    * @param string $id
    *   Optional. A unique identifier for caching the parsed markdown. If not
    *   set, one will be generated automatically based on the provided $url.
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   Optional. The language of the markdown that is being parsed.
    *
-   * @return \Drupal\markdown\Render\ParsedMarkdownInterface
+   * @return ParsedMarkdownInterface
    *   A ParsedMarkdown object.
    *
-   * @throws \Drupal\markdown\Exception\MarkdownUrlNotExistsException
+   * @throws MarkdownUrlNotExistsException
    */
   public function loadUrl($url, $id = NULL, LanguageInterface $language = NULL);

@@ @@
    *
    * @param string $markdown
    *   The markdown string to parse.
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   Optional. The language of the markdown that is being parsed.
    *
-   * @return \Drupal\markdown\Render\ParsedMarkdownInterface
+   * @return ParsedMarkdownInterface
    *   A ParsedMarkdown object.
    */
   public function parse($markdown, LanguageInterface $language = NULL);
@@ @@
    * @param array $configuration
    *   An array of configuration relevant to the plugin instance.
    *
-   * @return \Drupal\markdown\Plugin\Markdown\ParserInterface
+   * @return ParserInterface
    *   A MarkdownParser plugin.
    */
   public function getParser($parserId = NULL, array $configuration = []);
@@ @@
    *
    * @param string $id
    *   The identifier to use when saving the parsed markdown object.
-   * @param \Drupal\markdown\Render\ParsedMarkdownInterface $parsed
+   * @param ParsedMarkdownInterface $parsed
    *   The parsed markdown object to save.
    *
-   * @return \Drupal\markdown\Render\ParsedMarkdownInterface
+   * @return ParsedMarkdownInterface
    *   The passed parsed markdown.
    */
   public function save($id, ParsedMarkdownInterface $parsed);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


63) modules/contrib/markdown/src/Markdown.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * The cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * The Config Factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The File System service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The HTTP Client service.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
   /**
    * The MarkdownParser Plugin Manager.
    *
-   * @var \Drupal\markdown\PluginManager\ParserManagerInterface
+   * @var ParserManagerInterface
    */
   protected $parserManager;

@@ @@
   /**
    * Markdown constructor.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The Config Factory service.
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param FileSystemInterface $fileSystem
    *   The File System service.
-   * @param \GuzzleHttp\ClientInterface $httpClient
+   * @param ClientInterface $httpClient
    *   The HTTP Client service.
-   * @param \Drupal\markdown\PluginManager\ParserManagerInterface $parserManager
+   * @param ParserManagerInterface $parserManager
    *   The Markdown Parser Plugin Manager service.
    */
   public function __construct(CacheBackendInterface $cache, ConfigFactoryInterface $configFactory, FileSystemInterface $fileSystem, ClientInterface $httpClient, ParserManagerInterface $parserManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


64) modules/contrib/markdown/src/Form/SubformStateInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Form;

+use Drupal\Component\Render\MarkupInterface;
 use Drupal\markdown\BcSupport\SubformStateInterface as CoreSubformStateInterface;

 /**
@@ @@
    * @param array $conditions
    *   The conditions for the $state.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   The rendered $element.
    */
   public function conditionalElement(array $element, $state, $name, array $conditions);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


65) modules/contrib/markdown/src/Form/ParserOperationForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Form;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Symfony\Component\HttpFoundation\Response;
 use Drupal\Core\Config\Config;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The markdown parser.
    *
-   * @var \Drupal\markdown\Plugin\Markdown\ParserInterface
+   * @var ParserInterface
    */
   protected $parser;

@@ @@
   /**
    * Creates a URL with the appropriate CSRF token for a parser operation.
    *
-   * @param \Drupal\markdown\Plugin\Markdown\ParserInterface $parser
+   * @param ParserInterface $parser
    *   The parser to perform an operation on.
    * @param string $operation
    *   The operation to perform.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   A parser operation Url object.
    */
   public static function createOperationUrl(ParserInterface $parser, $operation) {
@@ @@
   /**
    * Retrieves the success message to show after the operation has finished.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The success message.
    */
   public function getSuccessMessage() {
@@ @@
   /**
    * Initializes the operation.
    *
-   * @param \Drupal\markdown\Plugin\Markdown\ParserInterface $parser
+   * @param ParserInterface $parser
    *   The parser being operated on.
    * @param string $operation
    *   The operation to perform.
@@ @@
   /**
    * Controller for the "markdown.parser.operation" route.
    *
-   * @param \Drupal\markdown\Plugin\Markdown\ParserInterface $parser
+   * @param ParserInterface $parser
    *   The parser being operated on.
    * @param string $operation
    *   The operation to perform.
    *
-   * @return array|\Symfony\Component\HttpFoundation\Response|void
+   * @return array|Response|void
    *   A render array or response object.
    */
   public function executeOperation(ParserInterface $parser, $operation) {
@@ @@
   /**
    * Retrieves an editable Config object for the parser.
    *
-   * @return \Drupal\Core\Config\Config
+   * @return Config
    *   The Parser Config object.
    */
   protected function getParserConfig() {
@@ @@
   /**
    * Magic method for the "default" operation.
    *
-   * @param \Drupal\Core\Config\Config $config
+   * @param Config $config
    *   The editable parser Config object.
    *
    * @see \Drupal\markdown\Form\ParserOperationForm::initializeOperation
@@ @@
   /**
    * Magic method for the "disable" operation.
    *
-   * @param \Drupal\Core\Config\Config $config
+   * @param Config $config
    *   The editable parser Config object.
    *
    * @see \Drupal\markdown\Form\ParserOperationForm::initializeOperation
@@ @@
   /**
    * Magic method for the "enable" operation.
    *
-   * @param \Drupal\Core\Config\Config $config
+   * @param Config $config
    *   The editable parser Config object.
    *
    * @see \Drupal\markdown\Form\ParserOperationForm::initializeOperation
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


66) modules/contrib/markdown/src/Form/ParserConfigurationForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Form;

+use Drupal\Core\Config\Config;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\NestedArray;
@@ @@
   /**
    * The Cache Tags Invalidator service.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;

@@ @@
   /**
    * The Element Info Plugin Manager service.
    *
-   * @var \Drupal\Core\Render\ElementInfoManagerInterface
+   * @var ElementInfoManagerInterface
    */
   protected $elementInfo;

@@ @@
   /**
    * The Markdown Parser Plugin Manager service.
    *
-   * @var \Drupal\markdown\PluginManager\ParserManagerInterface
+   * @var ParserManagerInterface
    */
   protected $parserManager;

@@ @@
   /**
    * ParserConfigurationForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The Config Factory service.
-   * @param \Drupal\Core\Config\TypedConfigManagerInterface $typedConfigManager
+   * @param TypedConfigManagerInterface $typedConfigManager
    *   The Typed Config Manager service.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cacheTagsInvalidator
+   * @param CacheTagsInvalidatorInterface $cacheTagsInvalidator
    *   The Cache Tags Invalidator service.
-   * @param \Drupal\Core\Render\ElementInfoManagerInterface $elementInfo
+   * @param ElementInfoManagerInterface $elementInfo
    *   The Element Info Plugin Manager service.
-   * @param \Drupal\markdown\PluginManager\ParserManagerInterface $parserManager
+   * @param ParserManagerInterface $parserManager
    *   The Markdown Parser Plugin Manager service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The Drupal messenger service.
    */
   public function __construct(ConfigFactoryInterface $configFactory, TypedConfigManagerInterface $typedConfigManager, CacheTagsInvalidatorInterface $cacheTagsInvalidator, ElementInfoManagerInterface $elementInfo, ParserManagerInterface $parserManager, MessengerInterface $messenger) {
@@ @@
    *
    * @param array $element
    *   The element being processed.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    * @param array $complete_form
    *   The complete form, passed by reference.
@@ @@
    * @return array
    *   The processed element.
    *
-   * @throws \Drupal\Core\Form\EnforcedResponseException
+   * @throws EnforcedResponseException
    *   When an invalid parser or no parser is provided.
    */
   public function processSubform(array &$element, FormStateInterface $form_state, array &$complete_form) {
@@ @@
    *
    * @param array $element
    *   An element in a render array.
-   * @param \Drupal\markdown\Form\SubformStateInterface $form_state
+   * @param SubformStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
   /**
    * Builds the settings for a specific parser.
    *
-   * @param \Drupal\markdown\Plugin\Markdown\ParserInterface $parser
+   * @param ParserInterface $parser
    *   The parser.
    * @param array $element
    *   An element in a render array.
-   * @param \Drupal\markdown\Form\SubformStateInterface $form_state
+   * @param SubformStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
   /**
    * Builds the extension settings for a specific parser.
    *
-   * @param \Drupal\markdown\Plugin\Markdown\ParserInterface $parser
+   * @param ParserInterface $parser
    *   The parser.
    * @param array $element
    *   An element in a render array.
-   * @param \Drupal\markdown\Form\SubformStateInterface $form_state
+   * @param SubformStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
   /**
    * Builds the render strategy for a specific parser.
    *
-   * @param \Drupal\markdown\Plugin\Markdown\ParserInterface $parser
+   * @param ParserInterface $parser
    *   The parser.
    * @param array $element
    *   An element in a render array.
-   * @param \Drupal\markdown\Form\SubformStateInterface $form_state
+   * @param SubformStateInterface $form_state
    *   The form state.
    * @param bool $siteWide
    *   Flag indicating whether the parser is the site-wide parser.
@@ @@
    * @param array $values
    *   An array of values.
    *
-   * @return \Drupal\Core\Config\Config
+   * @return Config
    *   A Config object.
    */
   public function getConfigFromValues($name, array $values) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitSubform(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function validateSubform(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


67) modules/contrib/markdown/src/Form/OverviewForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The Cache Tags Invalidator service.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;

@@ @@
   /**
    * The Markdown Extension Plugin Manager service.
    *
-   * @var \Drupal\markdown\PluginManager\ExtensionManagerInterface
+   * @var ExtensionManagerInterface
    */
   protected $extensionManager;

@@ @@
   /**
    * The Markdown service.
    *
-   * @var \Drupal\markdown\MarkdownInterface
+   * @var MarkdownInterface
    */
   protected $markdown;

@@ @@
   /**
    * The Markdown Parser Plugin Manager service.
    *
-   * @var \Drupal\markdown\PluginManager\ParserManagerInterface
+   * @var ParserManagerInterface
    */
   protected $parserManager;

@@ @@
   /**
    * OverviewForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The Config Factory service.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cacheTagsInvalidator
+   * @param CacheTagsInvalidatorInterface $cacheTagsInvalidator
    *   The Cache Tags Invalidator service.
-   * @param \Drupal\markdown\MarkdownInterface $markdown
+   * @param MarkdownInterface $markdown
    *   The Markdown service.
-   * @param \Drupal\markdown\PluginManager\ParserManagerInterface $parserManager
+   * @param ParserManagerInterface $parserManager
    *   The Markdown Parser Plugin Manager service.
-   * @param \Drupal\markdown\PluginManager\ExtensionManagerInterface $extensionManager
+   * @param ExtensionManagerInterface $extensionManager
    *   The Markdown Extension Plugin Manager service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, CacheTagsInvalidatorInterface $cacheTagsInvalidator, MarkdownInterface $markdown, ParserManagerInterface $parserManager, ExtensionManagerInterface $extensionManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


68) modules/contrib/markdown/src/Config/MarkdownConfig.php:60

    ---------- begin diff ----------
@@ @@
    *   The config name where the data is stored.
    * @param array $data
    *   Optional. Initial data to use.
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   Optional. The service container this instance should use.
    *
    * @return static
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


69) modules/contrib/markdown/src/Commands/MarkdownCommands.php:84

    ---------- begin diff ----------
@@ @@
   /**
    * The File System service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * MarkdownCommands constructor.
    *
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param FileSystemInterface $fileSystem
    *   The File System service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A Logger.
    */
   public function __construct(FileSystemInterface $fileSystem, LoggerInterface $logger) {
@@ @@
    *   The temporary directory path.
    */
   protected function createTempDir() {
-    $tempDir = 'temporary://markdown_' . REQUEST_TIME . Crypt::randomBytesBase64(10);
+    $tempDir = 'temporary://markdown_' . \Drupal::time()->getRequestTime() . Crypt::randomBytesBase64(10);
     if (!is_dir($tempDir) && $this->fileSystem->prepareDirectory($tempDir, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS)) {
       $tempDir = $this->fileSystem->realpath($tempDir);
       static::$tempDirs[] = $tempDir;
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


70) modules/contrib/markdown/src/BcSupport/SubformStateInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\BcSupport;

+use Drupal\Core\Form\FormStateInterface;
 if (!interface_exists('\Drupal\Core\Form\SubformStateInterface')) {
   /* @noinspection PhpIgnoredClassAliasDeclaration */
   class_alias('\Drupal\Core\Form\FormStateInterface', '\Drupal\Core\Form\SubformStateInterface');
@@ @@
   /**
    * Gets the complete form state.
    *
-   * @return \Drupal\Core\Form\FormStateInterface
+   * @return FormStateInterface
    *   The complete form state.
    */
   public function getCompleteFormState();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


71) modules/contrib/markdown/src/BcSupport/SubformState.php:37

    ---------- begin diff ----------
@@ @@
    *   The subform for which to create a form state.
    * @param mixed[] $parent_form
    *   The subform's parent form.
-   * @param \Drupal\Core\Form\FormStateInterface $parent_form_state
+   * @param FormStateInterface $parent_form_state
    *   The parent form state.
    */
   protected function __construct(array &$subform, array &$parent_form, FormStateInterface $parent_form_state) {
@@ @@
    *   The subform for which to create a form state.
    * @param mixed[] $parent_form
    *   The subform's parent form.
-   * @param \Drupal\Core\Form\FormStateInterface $parent_form_state
+   * @param FormStateInterface $parent_form_state
    *   The parent form state.
    *
    * @return static
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


72) modules/contrib/markdown/src/BcSupport/PluginDependencyTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\BcSupport;

+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\Core\Extension\ThemeHandlerInterface;
 use Drupal\Component\Plugin\Definition\PluginDefinitionInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
@@ @@
    * method, if it implements
    * \Drupal\Component\Plugin\DependentPluginInterface.
    *
-   * @param \Drupal\Component\Plugin\PluginInspectionInterface $instance
+   * @param PluginInspectionInterface $instance
    *   The plugin instance.
    *
    * @return array
@@ @@
    * method, if it implements
    * \Drupal\Component\Plugin\DependentPluginInterface.
    *
-   * @param \Drupal\Component\Plugin\PluginInspectionInterface $instance
+   * @param PluginInspectionInterface $instance
    *   The plugin instance.
    */
   protected function calculatePluginDependencies(PluginInspectionInterface $instance) {
@@ @@
   /**
    * Wraps the module handler.
    *
-   * @return \Drupal\Core\Extension\ModuleHandlerInterface
+   * @return ModuleHandlerInterface
    *   The module handler.
    */
   protected function moduleHandler() {
@@ @@
   /**
    * Wraps the theme handler.
    *
-   * @return \Drupal\Core\Extension\ThemeHandlerInterface
+   * @return ThemeHandlerInterface
    *   The theme handler.
    */
   protected function themeHandler() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


73) modules/contrib/markdown/src/BcSupport/ObjectWithPluginCollectionInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\BcSupport;

+use Drupal\Component\Plugin\LazyPluginCollection;
 if (!interface_exists('\Drupal\Core\Plugin\ObjectWithPluginCollectionInterface')) {
   /* @noinspection PhpIgnoredClassAliasDeclaration */
   class_alias('\Drupal\markdown\BcSupport\BcAliasedInterface', '\Drupal\Core\Plugin\ObjectWithPluginCollectionInterface');
@@ @@
   /**
    * Gets the plugin collections used by this object.
    *
-   * @return \Drupal\Component\Plugin\LazyPluginCollection[]
+   * @return LazyPluginCollection[]
    *   An array of plugin collections, keyed by the property name they use to
    *   store their configuration.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


74) modules/contrib/markdown/src/BcSupport/FormStateDecoratorBase.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The decorated form state.
    *
-   * @var \Drupal\Core\Form\FormStateInterface
+   * @var FormStateInterface
    */
   protected $decoratedFormState;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


75) modules/contrib/markdown/src/Annotation/InstallableRequirement.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Annotation;

+use Drupal\filter\FilterPluginManager;
+use Symfony\Component\Validator\ConstraintViolationListInterface;
+use Symfony\Component\Validator\Constraint;
+use Symfony\Component\Validator\ConstraintValidatorInterface;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\TypedData\DataDefinition;
 use Drupal\Core\TypedData\ListDataDefinition;
@@ @@
  * @Annotation
  * @Target("ANNOTATION")
  *
- * @property \Drupal\markdown\Annotation\Identifier $id
+ * @property Identifier $id
  *   Optional. Note: if this contains a colon (:), it will be treated as a
  *   type based identifier, where everything prior to the colon is
  *   considered the type and everything following the colon is considered
@@ @@
           break;

         case 'filter':
-          /** @var \Drupal\filter\FilterPluginManager $filterManager */
+          /** @var FilterPluginManager $filterManager */
           if (($filterManager = $container->get('plugin.manager.filter')) && $filterManager->hasDefinition($id)) {
             if (!isset($this->name)) {
               $this->name = t('Filter "@id"', ['@id' => $id]);
@@ @@
   /**
    * Validates the requirement.
    *
-   * @return \Symfony\Component\Validator\ConstraintViolationListInterface
+   * @return ConstraintViolationListInterface
    *   A list of constraint violations. If the list is empty, validation
    *   succeeded.
    */
@@ @@
           $context = new ExecutionContext($typed->getTypedDataManager()->getValidator(), $value, new DrupalTranslator());
           foreach ($this->constraints as $name => $options) {
             if ($name === $pluginId) {
-              /** @var \Symfony\Component\Validator\Constraint $constraint */
+              /** @var Constraint $constraint */
               $constraint = new $class($options);
               if (($validatorClass = $constraint->validatedBy()) && class_exists($validatorClass)) {
-                /** @var \Symfony\Component\Validator\ConstraintValidatorInterface $constraintValidator */
+                /** @var ConstraintValidatorInterface $constraintValidator */
                 $constraintValidator = new $validatorClass();
                 $constraintValidator->initialize($context);
                 $constraintValidator->validate($value, $constraint);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


76) modules/contrib/markdown/src/Annotation/InstallablePluginTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Annotation;

+use Drupal\Core\Annotation\Translation;
+use Drupal\Component\Render\MarkupInterface;
+use Drupal\Core\GeneratedLink;
+use Symfony\Component\Validator\ConstraintViolationListInterface;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Link;
 use Drupal\Core\Url;
@@ @@
   /**
    * Indicates the plugin has been deprecated by providing a message.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $deprecated;

@@ @@
   /**
    * Indicates the plugin is experimental by providing a message.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $experimental;

@@ @@
   /**
    * An array of requirements for the plugin.
    *
-   * @var \Drupal\markdown\Annotation\InstallableRequirement[]|\Drupal\markdown\Annotation\InstallableLibrary[]
+   * @var InstallableRequirement[]|InstallableLibrary[]
    */
   public $requirements = [];

@@ @@
    * automatically based on any provided $requirements set above. Instead of
    * using this property directly, use $requirements.
    *
-   * @var \Drupal\markdown\Annotation\InstallableRequirement[]
+   * @var InstallableRequirement[]
    *
    * @internal
    */
@@ @@
   /**
    * Retrieves the plugin as a link using its label and URL.
    *
-   * @param string|\Drupal\Component\Render\MarkupInterface $label
+   * @param string|MarkupInterface $label
    *   Optional. A specific label to use for the link. If not specified, it
    *   will default to the label or plugin identifier if present.
    * @param array $options
@@ @@
    *   Flag indicating whether to fallback to the original label or plugin
    *   identifier if no link could be generated.
    *
-   * @return \Drupal\Core\GeneratedLink|mixed|void
+   * @return GeneratedLink|mixed|void
    *   The link if one was generated or the label if $fallback was provided.
    */
   public function getLink($label = NULL, array $options = [], $fallback = TRUE) {
@@ @@
    * @param array $options
    *   An array of options to pass to the Url object constructor.
    *
-   * @return \Drupal\Core\Url|void
+   * @return Url|void
    *   A Url object or NULL if no URL is set.
    */
   public function getUrl(array $options = []) {
@@ @@
         $requirement = $requirement->createObjectRequirement($this);
       }

-      /** @var \Symfony\Component\Validator\ConstraintViolationListInterface $violations */
+      /** @var ConstraintViolationListInterface $violations */
       $violations = Error::suppress(function () use ($requirement) {
         return $requirement->validate();
       });
@@ @@
     // Validate runtime requirements.
     if ($runtime) {
       foreach ($library->runtimeRequirements as $requirement) {
-        /** @var \Symfony\Component\Validator\ConstraintViolationListInterface $violations */
+        /** @var ConstraintViolationListInterface $violations */
         $violations = Error::suppress(function () use ($requirement) {
           return $requirement->validate();
         });
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


77) modules/contrib/markdown/src/Annotation/InstallablePlugin.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * An array of available installable libraries this plugin supports.
    *
-   * @var \Drupal\markdown\Annotation\InstallableLibrary[]
+   * @var InstallableLibrary[]
    */
   public $libraries = [];

@@ @@
   /**
    * Retrieves the installed library.
    *
-   * @return \Drupal\markdown\Annotation\InstallableLibrary|void
+   * @return InstallableLibrary|void
    *   The installed library.
    */
   public function getInstalledLibrary() {
@@ @@
   /**
    * Retrieves the preferred library.
    *
-   * @return \Drupal\markdown\Annotation\InstallableLibrary|void
+   * @return InstallableLibrary|void
    *   The preferred library.
    */
   public function getPreferredLibrary() {
@@ @@
    * @param string $id
    *   Optional. A specific identifier to limit by.
    *
-   * @return \Drupal\markdown\Annotation\InstallableRequirement[]
+   * @return InstallableRequirement[]
    *   An array of requirements matching the type.
    */
   public function getRequirementsByType($type, $id = NULL) {
@@ @@
    * @param mixed $value
    *   Optional. A specific value to limit by.
    *
-   * @return \Drupal\markdown\Annotation\InstallableRequirement[]
+   * @return InstallableRequirement[]
    *   An array of requirements matching the type.
    */
   public function getRequirementsByConstraint($name, $value = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


78) modules/contrib/markdown/src/Annotation/InstallableLibrary.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Annotation;

+use Drupal\Core\Url;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\Component\Render\MarkupInterface;
+use Drupal\Core\GeneratedLink;
 use Drupal\Component\Serialization\Json;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Cache\CacheableResponse;
@@ @@
   /**
    * A specific version URL, if known.
    *
-   * @var \Drupal\Core\Url[]
+   * @var Url[]
    */
   protected $versionUrls = [];

@@ @@
   /**
    * The last exception thrown when attempting to initiate a request.
    *
-   * @var \GuzzleHttp\Exception\GuzzleException
+   * @var GuzzleException
    */
   protected $requestException;

@@ @@
    *   Flag indicating whether to use longer explanations as indicated by
    *   the individual property values.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The human readable status.
    */
   public function getStatus($long = FALSE) {
@@ @@
    * @param string $version
    *   A specific version to retrieve a URL for. If not specified, it will
    *   default to the currently installed version.
-   * @param string|\Drupal\Component\Render\MarkupInterface $label
+   * @param string|MarkupInterface $label
    *   The label to use for the link. If not specified, it will default to
    *   the versionExtra or version value.
    * @param array $options
    *   Optional. Options to pass to the creation of the URL object.
    *
-   * @return \Drupal\Core\GeneratedLink|void
+   * @return GeneratedLink|void
    *   The link to the version.
    */
   public function getVersionLink($version = NULL, $label = NULL, array $options = []) {
@@ @@
    * @param array $options
    *   Optional. Options to pass to the creation of the URL object.
    *
-   * @return \Drupal\Core\Url|false
+   * @return Url|false
    *   A specific version URL, if set; FALSE otherwise.
    */
   public function getVersionUrl($version = NULL, array $options = []) {
@@ @@
    * @param string $url
    *   The URL being requested.
    *
-   * @return \Drupal\Core\Cache\CacheableResponse
+   * @return CacheableResponse
    *   A cacheable response.
    */
   protected function request($url) {
@@ @@
       // Cache response in the database. The TTL value defaults to one day,
       // but allow it to be overrideable via settings.
       $ttl = Settings::get('installable_library_request_ttl', 86400);
-      $cache->set($cid, $cacheableResponse, REQUEST_TIME + $ttl);
+      $cache->set($cid, $cacheableResponse, \Drupal::time()->getRequestTime() + $ttl);
     }
     catch (GuzzleException $exception) {
       \Drupal::logger('markdown')->warning('%type: @message in %function (line %line of %file).<pre><code>@backtrace_string</code></pre>', Error::decodeException($exception));
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


79) modules/contrib/markdown/src/Annotation/Identifier.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The converter.
    *
-   * @var \Symfony\Component\Serializer\NameConverter\CamelCaseToSnakeCaseNameConverter
+   * @var CamelCaseToSnakeCaseNameConverter
    */
   protected static $converter;

@@ @@
   /**
    * Retrieves the converter.
    *
-   * @return \Symfony\Component\Serializer\NameConverter\CamelCaseToSnakeCaseNameConverter
+   * @return CamelCaseToSnakeCaseNameConverter
    */
   protected static function converter() {
     if (!static::$converter) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


80) modules/contrib/markdown/src/Annotation/AnnotationObject.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\markdown\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\AnnotationBase;
 use Drupal\Component\Annotation\AnnotationInterface;
 use Drupal\Component\Plugin\Definition\PluginDefinitionInterface;
@@ @@
    * @var array
    */
   private $_triggeredDeprecations = []; // phpcs:ignore
-
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $description;

@@ @@
   /**
    * A human-readable label.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


81) modules/contrib/markdown/markdown.post_update.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Config\ConfigFactoryInterface;
 /**
  * @file
  * Markdown post updates.
@@ @@
 /**
  * Normalizes markdown configuration.
  *
- * @param \Drupal\Core\Config\Config $config
+ * @param Config $config
  *   The Config object to be normalized.
  * @param array $defaultData
  *   Optional. An array of default data to merge with any active config.
@@ @@
         $config->save();
       }

-      /** @var \Drupal\Core\Config\ConfigFactoryInterface $configFactory */
+      /** @var ConfigFactoryInterface $configFactory */
       $configFactory = \Drupal::service('config.factory');

       // Reload config for the specific parser.
@@ @@
  *   Optional. A specific normalizer callback that will be invoked on each
  *   config. If not specified, it will default to _markdown_normalize_config().
  *
- * @return \Drupal\Core\Config\Config[]
+ * @return Config[]
  *   An array of config objects, keyed by config name.
  */
 function _markdown_update_config($save = TRUE, array $defaultData = NULL, callable $normalizer = NULL) {
@@ @@
     $defaultData = \Drupal::config('markdown.settings')->get('parser') ?: [];
   }

-  /** @var \Drupal\Core\Config\ConfigFactoryInterface $configFactory */
+  /** @var ConfigFactoryInterface $configFactory */
   $configFactory = \Drupal::service('config.factory');

   $configNames = ['markdown.settings'];
@@ @@
     };
   }

-  /** @var \Drupal\filter\Entity\FilterFormat $format */
+  /** @var FilterFormat $format */
   foreach (FilterFormat::loadMultiple() as $format) {
     $configNames[] = $format->getConfigDependencyName();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


82) modules/contrib/markdown/markdown.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\filter\Entity\FilterFormat;
+use Drupal\filter\FilterPluginManager;
+use Drupal\markdown\PluginManager\ParserManagerInterface;
+use Drupal\markdown\Plugin\Markdown\InstallablePluginInterface;
+use Drupal\markdown\Annotation\InstallableLibrary;
 /**
  * @file
  * Markdown module.
@@ @@
 function markdown_filter_format_load($entities) {
   // Because core doesn't provide any association between filter formats and
   // their filters, it must be done here manually when filter format has loaded.
-  /** @var \Drupal\filter\Entity\FilterFormat $format */
+  /** @var FilterFormat $format */
   foreach ($entities as $format) {
     // Store the current filter format in static cache to prevent recursion.
     // @see \Drupal\markdown\Plugin\Filter\FilterMarkdown::setConfiguration()
@@ @@

   static $compatibleFilters;
   if (!isset($compatibleFilters)) {
-    /** @var \Drupal\filter\FilterPluginManager $filterManager */
+    /** @var FilterPluginManager $filterManager */
     $filterManager = \Drupal::service('plugin.manager.filter');
     $compatibleFilters = array_fill_keys(array_keys($filterManager->getDefinitions()), TRUE);
     \Drupal::moduleHandler()->alter('markdown_compatible_filters', $compatibleFilters);
@@ @@
   }

   // Save the first found parser as the default global parser.
-  /** @var \Drupal\markdown\PluginManager\ParserManagerInterface $parserManager */
+  /** @var ParserManagerInterface $parserManager */
   $parserManager = \Drupal::service('plugin.manager.markdown.parser');
   if ($parserId = current(array_keys($parserManager->installedDefinitions()))) {
     \Drupal::configFactory()->getEditable('markdown.settings')->set('default_parser', $parserId)->save();
@@ @@
  * Implements hook_preprocess_HOOK().
  */
 function markdown_preprocess_installable_library(&$variables) {
-  /** @var \Drupal\markdown\Plugin\Markdown\InstallablePluginInterface $plugin */
+  /** @var InstallablePluginInterface $plugin */
   $plugin = $variables['plugin'];
   $variables['installedLibrary'] = $plugin->getInstalledLibrary();
   $variables['preferredLibrary'] = $preferredLibrary = $plugin->getPreferredLibrary();

-  /** @var \Drupal\markdown\Annotation\InstallableLibrary|null $library */
+  /** @var InstallableLibrary|null $library */
   $library = $variables['library'] ?? NULL;
   $lib = $library ?: $preferredLibrary;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


83) modules/contrib/markdown/markdown.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Render\RendererInterface;
+use Composer\Autoload\ClassLoader;
 /**
  * @file
  * Install, update and uninstall functions for the markdown module.
@@ @@

   $requirements = [];

-  /** @var \Drupal\Core\Render\RendererInterface $renderer */
+  /** @var RendererInterface $renderer */
   $renderer = \Drupal::service('renderer');

   // Load the Markdown Parser Plugin Manager service, if it exists.
@@ @@
   // the service to be manually constructed to discover installed parsers.
   else {
     $src = __DIR__ . '/src';
-    /** @var \Composer\Autoload\ClassLoader $classLoader */
+    /** @var ClassLoader $classLoader */
     $classLoader = \Drupal::service('class_loader');
     $classLoader->addPsr4('Drupal\\markdown\\', [$src]);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


84) modules/contrib/markdown/markdown.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\markdown\Plugin\Markdown\PhpMarkdown\PhpMarkdownExtra;
+use Drupal\Component\Utility\Crypt;
 /**
  * @file
  * Hooks and alters provided by the Markdown module.
@@ @@
 function hook_markdown_html_alter(&$html, array $context) {
   // Ignore non PHP Markdown Extra parsers.
   $parser = $context['parser'];
-  if (!($parser instanceof \Drupal\markdown\Plugin\Markdown\PhpMarkdown\PhpMarkdownExtra)) {
+  if (!($parser instanceof PhpMarkdownExtra)) {
     return;
   }

@@ @@
   if ($phpMarkdown->omit_footnotes && $phpMarkdown->footnotes_assembled) {
     // Create a hash based on the contents of the HTML output.
     // This can be used as the lookup identifier to load the footnotes later.
-    $hash = \Drupal\Component\Utility\Crypt::hashBase64($html);
+    $hash = Crypt::hashBase64($html);
     \Drupal::keyValue('my_module.markdown.footnotes')->set($hash, $phpMarkdown->footnotes_assembled);
   }
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/markdown/src/Plugin/Markdown/CommonMark/Extension/Extern
         alLinkRenderer.php" file, due to:                                      
         "Analyze error: "Class                                                 
         League\CommonMark\Inline\Renderer\InlineRendererInterface not found.". 
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/markdown/src/Plugin/Markdown/CommonMark/Extension/Extern
         alLinkExtension.php" file, due to:                                     
         "Analyze error: "Class                                                 
         League\CommonMark\Inline\Renderer\InlineRendererInterface not found.". 
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

