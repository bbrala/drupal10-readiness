modules/contrib/file_image_formatter/file_image_formatter.module
modules/contrib/file_image_formatter/src/Plugin/Field/FieldFormatter/FileImageFormatter.php
modules/contrib/file_image_formatter/tests/src/Unit/Plugin/Field/FieldFormatter/FileImageFormatterTest.php

2 files with changes
====================

1) modules/contrib/file_image_formatter/tests/src/Unit/Plugin/Field/FieldFormatter/FileImageFormatterTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\file_image_formatter\Unit\Plugin\Field\FieldFormatter;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Language\LanguageInterface;
@@ @@
  */
 class FileImageFormatterTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {

     $fileType = $this->prophesize('\Drupal\Core\Entity\EntityTypeInterface');
     $fileType->getHandlerClass('access')->willReturn(NULL);
@@ @@
       $account->reveal(),
       $image_style_storage->reveal());

-    $referenceItem = $this->getMockBuilder('\Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $referenceItem = $this->createMock('\Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem');
     $referenceItem->expects($this->any())
       ->method('__get')
       ->will($this->returnValueMap([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/file_image_formatter/src/Plugin/Field/FieldFormatter/FileImageFormatter.php:59

    ---------- begin diff ----------
@@ @@
    */
   public function viewElements(FieldItemListInterface $items, $langcode) {
     $elements = [];
-    /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $items */
+    /** @var EntityReferenceFieldItemListInterface $items */
     $files = $this->getEntitiesToView($items, $langcode);

     if (empty($files)) {
@@ @@
         $cache_contexts = [];
         if (isset($link_file)) {
           $image_uri = $file->getFileUri();
-          $url = Url::fromUri(file_create_url($image_uri));
+          $url = \Drupal::service('file_url_generator')->generate($image_uri);
           $cache_contexts[] = 'url.site';
         }
         $cache_tags = Cache::mergeTags($base_cache_tags, $file->getCacheTags());
@@ @@
   /**
    * Detect that a file item matches an image mimetype.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file item to check.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * FromUriRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 2 files have been changed by Rector                                       

