diff --git a/file_download_statistics.module b/file_download_statistics.module
index 189d500..e116678 100644
--- a/file_download_statistics.module
+++ b/file_download_statistics.module
@@ -16,7 +16,7 @@ use Drupal\Core\Form\FormStateInterface;
  * Implements hook_help().
  *
  * @param $route_name
- * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+ * @param RouteMatchInterface $route_match
  *
  * @return string
  */
@@ -76,7 +76,7 @@ function file_download_statistics_preprocess_file_link(array &$variables) {
     // Add the prefix.
     $file_uri = $file->getFileUri();
     $file_uri = str_replace('private://', 'private://download-counter/', $file_uri);
-    $url = file_create_url($file_uri);
+    $url = \Drupal::service('file_url_generator')->generateAbsoluteString($file_uri);
     $mime_type = $file->getMimeType();
     $options['attributes']['type'] = $mime_type . '; length=' . $file->getSize();
     // Use the description as the link text if available.
@@ -102,7 +102,7 @@ function file_download_statistics_preprocess_file_link(array &$variables) {
  */
 function file_download_statistics_get($id) {
   if ($id > 0) {
-    /** @var \Drupal\file_download_statistics\FileDownloadStatisticsCountResult $statistics */
+    /** @var FileDownloadStatisticsCountResult $statistics */
     $statistics = \Drupal::service('file_download_statistics.storage')->fetchDownload($id);
 
     // For backwards compatibility, return FALSE if an invalid node ID was
diff --git a/src/Controller/FileDownloadStatisticsFileController.php b/src/Controller/FileDownloadStatisticsFileController.php
index cdb4f35..d770fe1 100644
--- a/src/Controller/FileDownloadStatisticsFileController.php
+++ b/src/Controller/FileDownloadStatisticsFileController.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\file_download_statistics\Controller;
 
+use Drupal\Core\Logger\LoggerChannelFactory;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\file\FileInterface;
 use Drupal\system\FileDownloadController;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -23,41 +26,41 @@ class FileDownloadStatisticsFileController extends FileDownloadController {
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The logger factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactory
+   * @var LoggerChannelFactory
    */
   protected $loggerFactory;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The storage for download statistics.
    *
-   * @var \Drupal\file_download_statistics\FileDownloadStatisticsStorageInterface
+   * @var FileDownloadStatisticsStorageInterface
    */
   protected $statisticsStorage;
 
   /**
    * Constructs a FileDownloadStatisticsFileController object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   ConfigFactory.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   LoggerChannelFactory.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\file_download_statistics\FileDownloadStatisticsStorageInterface $statistics_storage
+   * @param FileDownloadStatisticsStorageInterface $statistics_storage
    *   The storage for statistics.
    */
   public function __construct(ConfigFactoryInterface $config_factory, LoggerChannelFactoryInterface $logger_factory, AccountInterface $current_user, FileDownloadStatisticsStorageInterface $statistics_storage) {
@@ -90,19 +93,19 @@ class FileDownloadStatisticsFileController extends FileDownloadController {
    * file exists but no modules responded an AccessDeniedHttpException will be
    * thrown. If the file does not exist a NotFoundHttpException will be thrown.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    * @param string $scheme
    *   The file scheme, defaults to 'private'.
    *
-   * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
+   * @return BinaryFileResponse
    *   The transferred file as response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
+   * @throws NotFoundHttpException
    *   Thrown when the requested file does not exist.
-   * @throws \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException
+   * @throws AccessDeniedHttpException
    *   Thrown when the user does not have access to the file.
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *
    * @see hook_file_download()
    */
@@ -172,12 +175,12 @@ class FileDownloadStatisticsFileController extends FileDownloadController {
    * @return mixed
    *   Either \Drupal\file\FileInterface or NULL.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function getFileByUri($uri) {
     // Get the file record based on the URI. If not in the database just return.
-    /** @var \Drupal\file\FileInterface[] $files */
+    /** @var FileInterface[] $files */
     $files = \Drupal::entityTypeManager()
       ->getStorage('file')
       ->loadByProperties(['uri' => $uri]);
diff --git a/src/FileDownloadStatisticsDatabaseStorage.php b/src/FileDownloadStatisticsDatabaseStorage.php
index 6eb3452..1711296 100644
--- a/src/FileDownloadStatisticsDatabaseStorage.php
+++ b/src/FileDownloadStatisticsDatabaseStorage.php
@@ -15,42 +15,41 @@ class FileDownloadStatisticsDatabaseStorage implements FileDownloadStatisticsSto
   /**
    * The database connection used.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
-
   protected $connection;
 
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * Constructs the statistics storage.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection for the node view storage.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The current RequestStack.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(Connection $connection, StateInterface $state, RequestStack $request_stack, AccountInterface $current_user) {
diff --git a/src/FileDownloadStatisticsSettingsForm.php b/src/FileDownloadStatisticsSettingsForm.php
index 73d0eca..66f41c8 100644
--- a/src/FileDownloadStatisticsSettingsForm.php
+++ b/src/FileDownloadStatisticsSettingsForm.php
@@ -17,25 +17,25 @@ class FileDownloadStatisticsSettingsForm extends ConfigFormBase {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The storage for download statistics.
    *
-   * @var \Drupal\file_download_statistics\FileDownloadStatisticsStorageInterface
+   * @var FileDownloadStatisticsStorageInterface
    */
   protected $statisticsStorage;
 
   /**
    * Constructs \Drupal\file_download_statistics\FileDownloadStatisticsSettingsForm.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\file_download_statistics\FileDownloadStatisticsStorageInterface $statistics_storage
+   * @param FileDownloadStatisticsStorageInterface $statistics_storage
    *   The storage for statistics.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler, FileDownloadStatisticsStorageInterface $statistics_storage) {
diff --git a/src/FileDownloadStatisticsStorageInterface.php b/src/FileDownloadStatisticsStorageInterface.php
index 042a5db..ec88ef2 100644
--- a/src/FileDownloadStatisticsStorageInterface.php
+++ b/src/FileDownloadStatisticsStorageInterface.php
@@ -29,7 +29,7 @@ interface FileDownloadStatisticsStorageInterface {
    * @param array $ids
    *   An array of IDs of files to fetch the downloads for.
    *
-   * @return \Drupal\file_download_statistics\FileDownloadStatisticsCountResult[]
+   * @return FileDownloadStatisticsCountResult[]
    *   An array of value objects representing the number of times each file
    *   has been downloaded. The array is keyed by entity ID. If an ID does not
    *   exist, it will not be present in the array.
@@ -42,7 +42,7 @@ interface FileDownloadStatisticsStorageInterface {
    * @param int $id
    *   The ID of the entity to fetch the downloads for.
    *
-   * @return \Drupal\file_download_statistics\FileDownloadStatisticsCountResult|false
+   * @return FileDownloadStatisticsCountResult|false
    *   If the file exists, a value object representing the number of times if
    *   has been downloaded. If it does not exist, FALSE is returned.
    */
diff --git a/src/Plugin/Block/FileDownloadStatisticsPopularBlock.php b/src/Plugin/Block/FileDownloadStatisticsPopularBlock.php
index 65ded3c..ba1e293 100644
--- a/src/Plugin/Block/FileDownloadStatisticsPopularBlock.php
+++ b/src/Plugin/Block/FileDownloadStatisticsPopularBlock.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\file_download_statistics\Plugin\Block;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Url;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Block\BlockBase;
@@ -27,28 +29,28 @@ class FileDownloadStatisticsPopularBlock extends BlockBase implements ContainerF
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * The storage for statistics.
    *
-   * @var \Drupal\file_download_statistics\FileDownloadStatisticsStorageInterface
+   * @var FileDownloadStatisticsStorageInterface
    */
   protected $statisticsStorage;
 
   /**
    * The Renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -61,13 +63,13 @@ class FileDownloadStatisticsPopularBlock extends BlockBase implements ContainerF
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\file_download_statistics\FileDownloadStatisticsStorageInterface $statistics_storage
+   * @param FileDownloadStatisticsStorageInterface $statistics_storage
    *   The storage for statistics.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The Renderer.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityRepositoryInterface $entity_repository, FileDownloadStatisticsStorageInterface $statistics_storage, RendererInterface $renderer) {
@@ -196,8 +198,8 @@ class FileDownloadStatisticsPopularBlock extends BlockBase implements ContainerF
    * @return array
    *   A render array for the list.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function filenameList(array $fids, $title) {
     $files = $this->entityTypeManager->getStorage('file')->loadMultiple($fids);
@@ -207,7 +209,7 @@ class FileDownloadStatisticsPopularBlock extends BlockBase implements ContainerF
       $item = [
         '#type' => 'link',
         '#title' => $file->getFilename(),
-        '#url' => Url::fromUri(file_create_url($file->getFileUri())),
+        '#url' => \Drupal::service('file_url_generator')->generate($file->getFileUri()),
       ];
       $this->renderer->addCacheableDependency($item, $file);
       $items[] = $item;
diff --git a/src/Plugin/Field/FieldFormatter/FileDownloadStatisticsFileUriFormatter.php b/src/Plugin/Field/FieldFormatter/FileDownloadStatisticsFileUriFormatter.php
index 8a6607f..c37f683 100644
--- a/src/Plugin/Field/FieldFormatter/FileDownloadStatisticsFileUriFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/FileDownloadStatisticsFileUriFormatter.php
@@ -34,7 +34,7 @@ class FileDownloadStatisticsFileUriFormatter extends FileUriFormatter {
       // @todo Wrap in file_url_transform_relative(). This is currently
       // impossible. See BaseFieldFileFormatterBase::viewElements(). Fix in
       // https://www.drupal.org/node/2646744.
-      $value = file_create_url($value);
+      $value = \Drupal::service('file_url_generator')->generateAbsoluteString($value);
     }
     return $value;
   }
diff --git a/src/Routing/FileDownloadAlterRouteSubscriber.php b/src/Routing/FileDownloadAlterRouteSubscriber.php
index fdbe899..8d6dc12 100644
--- a/src/Routing/FileDownloadAlterRouteSubscriber.php
+++ b/src/Routing/FileDownloadAlterRouteSubscriber.php
@@ -15,14 +15,14 @@ class FileDownloadAlterRouteSubscriber extends RouteSubscriberBase {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Constructs a new FileDownloadAlterRouteSubscriber.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
diff --git a/src/Tests/DownloadStatisticsTestBase.php b/src/Tests/DownloadStatisticsTestBase.php
index af47697..98ab981 100644
--- a/src/Tests/DownloadStatisticsTestBase.php
+++ b/src/Tests/DownloadStatisticsTestBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\file_download_statistics\Tests;
 
+use Drupal\user\UserInterface;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -19,16 +21,16 @@ abstract class DownloadStatisticsTestBase extends BrowserTestBase {
   /**
    * User with permissions to ban IP's.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $blockingUser;
 
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
-  protected function setUp() {
+  protected function setUp(): void {
 
     parent::setUp();
     // Create Basic page node type.
diff --git a/src/Tests/Views/IntegrationTest.php b/src/Tests/Views/IntegrationTest.php
index 7d3a2c2..3816dc6 100644
--- a/src/Tests/Views/IntegrationTest.php
+++ b/src/Tests/Views/IntegrationTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\file_download_statistics\Tests\Views;
 
+use Drupal\user\UserInterface;
+use Drupal\node\Entity\Node;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Tests\views\Functional\ViewTestBase;
 use Drupal\views\Tests\ViewTestData;
 
@@ -24,21 +27,21 @@ class IntegrationTest extends ViewTestBase {
   /**
    * Stores the user object that accesses the page.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $webUser;
 
   /**
    * Stores the user object that cannot see download statistics.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $deniedUser;
 
   /**
    * Stores the node object which is used by the test.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $node;
 
@@ -51,10 +54,9 @@ class IntegrationTest extends ViewTestBase {
 
   /**
    * {@inheritdoc}
-
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp();
 
     ViewTestData::createTestViews(get_class($this), ['statistics_test_views']);
@@ -80,7 +82,7 @@ class IntegrationTest extends ViewTestBase {
     // Manually calling statistics.php, simulating ajax behavior.
     // @see \Drupal\file_download_statistics\Tests\StatisticsLoggingTest::testLogging().
     global $base_url;
-    $stats_path = $base_url . '/' . drupal_get_path('module', 'statistics') . '/statistics.php';
+    $stats_path = $base_url . '/' . \Drupal::service('extension.list.module')->getPath('statistics') . '/statistics.php';
     $client = \Drupal::httpClient();
     $client->post($stats_path, ['form_params' => ['nid' => $this->node->id()]]);
     $this->drupalGet('test_statistics_integration');
@@ -98,7 +100,7 @@ class IntegrationTest extends ViewTestBase {
     $this->drupalLogout();
     $this->drupalLogin($this->deniedUser);
     $this->drupalGet('test_statistics_integration');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     foreach ($expected as $field => $value) {
       $xpath = "//div[contains(@class, views-field-$field)]/span[@class = 'field-content']";
diff --git a/tests/src/Functional/FileDownloadStatisticsAdminTest.php b/tests/src/Functional/FileDownloadStatisticsAdminTest.php
index 55fd365..2d9b196 100644
--- a/tests/src/Functional/FileDownloadStatisticsAdminTest.php
+++ b/tests/src/Functional/FileDownloadStatisticsAdminTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\file_download_statistics\Functional;
 
+use Drupal\user\UserInterface;
+use Drupal\node\NodeInterface;
+use GuzzleHttp\Client;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\Traits\Core\CronRunTrait;
 
@@ -24,25 +27,25 @@ class FileDownloadStatisticsAdminTest extends BrowserTestBase {
   /**
    * A user that has permission to administer download statistics.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $privilegedUser;
 
   /**
    * A page node for which to check download statistics.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $testNode;
 
   /**
    * The Guzzle HTTP client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $client;
 
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create Basic page node type.
@@ -69,19 +72,23 @@ class FileDownloadStatisticsAdminTest extends BrowserTestBase {
     $nid = $this->testNode->id();
     $post = ['nid' => $nid];
     global $base_url;
-    $stats_path = $base_url . '/' . drupal_get_path('module', 'statistics') . '/statistics.php';
+    $stats_path = $base_url . '/' . \Drupal::service('extension.list.module')->getPath('statistics') . '/statistics.php';
     $this->client->post($stats_path, ['form_params' => $post]);
 
-    $result = db_select('file_download_statistics', 'n')
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    $result = \Drupal::database()->select('file_download_statistics', 'n')
       ->fields('n', ['nid'])
       ->condition('n.nid', $this->testNode->id())
       ->execute()
       ->fetchAssoc();
-    $this->assertEqual($result['nid'], $this->testNode->id(), 'Verifying that the node counter is incremented.');
+    $this->assertEquals($result['nid'], $this->testNode->id(), 'Verifying that the node counter is incremented.');
 
     $this->testNode->delete();
 
-    $result = db_select('file_download_statistics', 'n')
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    $result = \Drupal::database()->select('file_download_statistics', 'n')
       ->fields('n', ['nid'])
       ->condition('n.nid', $this->testNode->id())
       ->execute()
@@ -101,11 +108,14 @@ class FileDownloadStatisticsAdminTest extends BrowserTestBase {
     $nid = $this->testNode->id();
     $post = ['nid' => $nid];
     global $base_url;
-    $stats_path = $base_url . '/' . drupal_get_path('module', 'statistics') . '/statistics.php';
+    $stats_path = $base_url . '/' . \Drupal::service('extension.list.module')->getPath('statistics') . '/statistics.php';
     $this->client->post($stats_path, ['form_params' => $post]);
     $this->drupalGet('node/' . $this->testNode->id());
     $this->client->post($stats_path, ['form_params' => $post]);
-    $this->assertText('1 view', 'Node is viewed once.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('1 view');
 
     // file_download_statistics_cron() will subtract
     // file_download_statistics.settings:accesslog.max_lifetime config from
@@ -115,9 +125,14 @@ class FileDownloadStatisticsAdminTest extends BrowserTestBase {
     $this->cronRun();
 
     $this->drupalGet('admin/reports/pages');
-    $this->assertNoText('node/' . $this->testNode->id(), 'No hit URL found.');
-
-    $result = db_select('file_download_statistics', 'ds')
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('node/' . $this->testNode->id());
+
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    $result = \Drupal::database()->select('file_download_statistics', 'ds')
       ->fields('ds', ['daycount'])
       ->condition('nid', $this->testNode->id(), '=')
       ->execute()
diff --git a/tests/src/Functional/FileDownloadStatisticsAttachedTest.php b/tests/src/Functional/FileDownloadStatisticsAttachedTest.php
index ff205e9..991fe3c 100644
--- a/tests/src/Functional/FileDownloadStatisticsAttachedTest.php
+++ b/tests/src/Functional/FileDownloadStatisticsAttachedTest.php
@@ -22,7 +22,7 @@ class FileDownloadStatisticsAttachedTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->drupalCreateContentType(['type' => 'page']);
@@ -51,7 +51,7 @@ class FileDownloadStatisticsAttachedTest extends BrowserTestBase {
     $node->save();
     $this->drupalGet('node/' . $node->id());
 
-    $this->assertRaw('core/modules/statistics/statistics.js', 'Statistics library is available');
+    $this->assertSession()->responseContains('core/modules/statistics/statistics.js');
   }
 
 }
diff --git a/tests/src/Functional/FileDownloadStatisticsLoggingTest.php b/tests/src/Functional/FileDownloadStatisticsLoggingTest.php
index 0ed9696..51c9b9f 100644
--- a/tests/src/Functional/FileDownloadStatisticsLoggingTest.php
+++ b/tests/src/Functional/FileDownloadStatisticsLoggingTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\file_download_statistics\Functional;
 
+use Drupal\user\UserInterface;
+use GuzzleHttp\Client;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\node\Entity\Node;
 
@@ -25,7 +27,7 @@ class FileDownloadStatisticsLoggingTest extends BrowserTestBase {
   /**
    * User with permissions to create and edit pages.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $authUser;
 
@@ -39,11 +41,11 @@ class FileDownloadStatisticsLoggingTest extends BrowserTestBase {
   /**
    * The Guzzle HTTP client.
    *
-   * @var \GuzzleHttp\Client;
+   * @var Client ;
    */
   protected $client;
 
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create Basic page node type.
@@ -72,8 +74,10 @@ class FileDownloadStatisticsLoggingTest extends BrowserTestBase {
       'label' => $this->randomMachineName(16),
       'direction' => 'ltr',
     ];
-    $this->drupalPostForm('admin/config/regional/language/add', $this->language, t('Add custom language'));
-    $this->drupalPostForm('admin/config/regional/language/detection', ['language_interface[enabled][language-url]' => 1], t('Save settings'));
+    $this->drupalGet('admin/config/regional/language/add');
+    $this->submitForm($this->language, t('Add custom language'));
+    $this->drupalGet('admin/config/regional/language/detection');
+    $this->submitForm(['language_interface[enabled][language-url]' => 1], t('Save settings'));
     $this->drupalLogout();
 
     // Clear the logs.
@@ -86,7 +90,7 @@ class FileDownloadStatisticsLoggingTest extends BrowserTestBase {
    */
   public function testLogging() {
     $path = 'node/' . $this->node->id();
-    $module_path = drupal_get_path('module', 'statistics');
+    $module_path = \Drupal::service('extension.list.module')->getPath('statistics');
     $stats_path = base_path() . $module_path . '/statistics.php';
     $lib_path = base_path() . $module_path . '/statistics.js';
     $expected_library = '/<script src=".*?' . preg_quote($lib_path, '/.') . '.*?">/is';
@@ -94,33 +98,33 @@ class FileDownloadStatisticsLoggingTest extends BrowserTestBase {
     // Verify that logging scripts are not found on a non-node page.
     $this->drupalGet('node');
     $settings = $this->getDrupalSettings();
-    $this->assertNoPattern($expected_library, 'Statistics library JS not found on node page.');
+    $this->assertSession()->responseNotMatches($expected_library, 'Statistics library JS not found on node page.');
     $this->assertFalse(isset($settings['statistics']), 'Statistics settings not found on node page.');
 
     // Verify that logging scripts are not found on a non-existent node page.
     $this->drupalGet('node/9999');
     $settings = $this->getDrupalSettings();
-    $this->assertNoPattern($expected_library, 'Statistics library JS not found on non-existent node page.');
+    $this->assertSession()->responseNotMatches($expected_library, 'Statistics library JS not found on non-existent node page.');
     $this->assertFalse(isset($settings['statistics']), 'Statistics settings not found on node page.');
 
     // Verify that logging scripts are found on a valid node page.
     $this->drupalGet($path);
     $settings = $this->getDrupalSettings();
-    $this->assertPattern($expected_library, 'Found statistics library JS on node page.');
-    $this->assertIdentical($this->node->id(), $settings['statistics']['data']['nid'], 'Found statistics settings on node page.');
+    $this->assertSession()->responseMatches($expected_library, 'Found statistics library JS on node page.');
+    $this->assertSame($this->node->id(), $settings['statistics']['data']['nid'], 'Found statistics settings on node page.');
 
     // Verify the same when loading the site in a non-default language.
     $this->drupalGet($this->language['langcode'] . '/' . $path);
     $settings = $this->getDrupalSettings();
-    $this->assertPattern($expected_library, 'Found statistics library JS on a valid node page in a non-default language.');
-    $this->assertIdentical($this->node->id(), $settings['statistics']['data']['nid'], 'Found statistics settings on valid node page in a non-default language.');
+    $this->assertSession()->responseMatches($expected_library, 'Found statistics library JS on a valid node page in a non-default language.');
+    $this->assertSame($this->node->id(), $settings['statistics']['data']['nid'], 'Found statistics settings on valid node page in a non-default language.');
 
     // Manually call statistics.php to simulate ajax data collection behavior.
     global $base_root;
     $post = ['nid' => $this->node->id()];
     $this->client->post($base_root . $stats_path, ['form_params' => $post]);
     $node_counter = statistics_get($this->node->id());
-    $this->assertIdentical($node_counter['totalcount'], '1');
+    $this->assertSame($node_counter['totalcount'], '1');
 
     // Try fetching statistics for an invalid node ID and verify it returns
     // FALSE.
@@ -131,7 +135,7 @@ class FileDownloadStatisticsLoggingTest extends BrowserTestBase {
     // This is a test specifically for the deprecated statistics_get() function
     // and so should remain unconverted until that function is removed.
     $result = statistics_get($node_id);
-    $this->assertIdentical($result, FALSE);
+    $this->assertSame($result, FALSE);
   }
 
 }
diff --git a/tests/src/Functional/FileDownloadStatisticsReportsTest.php b/tests/src/Functional/FileDownloadStatisticsReportsTest.php
index 9cf8ee6..f2cd71c 100644
--- a/tests/src/Functional/FileDownloadStatisticsReportsTest.php
+++ b/tests/src/Functional/FileDownloadStatisticsReportsTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\file_download_statistics\Functional;
 
+use Drupal\Core\Link;
 use Drupal\Core\Cache\Cache;
 use Drupal\Tests\system\Functional\Cache\AssertPageCacheContextsAndTagsTrait;
 
@@ -29,7 +30,7 @@ class FileDownloadStatisticsReportsTest extends FileDownloadStatisticsTestBase {
     $post = http_build_query(['nid' => $nid]);
     $headers = ['Content-Type' => 'application/x-www-form-urlencoded'];
     global $base_url;
-    $stats_path = $base_url . '/' . drupal_get_path('module', 'statistics') . '/statistics.php';
+    $stats_path = $base_url . '/' . \Drupal::service('extension.list.module')->getPath('statistics') . '/statistics.php';
     $client = \Drupal::httpClient();
     $client->post($stats_path, ['headers' => $headers, 'body' => $post]);
 
@@ -43,10 +44,22 @@ class FileDownloadStatisticsReportsTest extends FileDownloadStatisticsTestBase {
 
     // Get some page and check if the block is displayed.
     $this->drupalGet('user');
-    $this->assertText('Popular content', 'Found the popular content block.');
-    $this->assertText("Today's", "Found today's popular content.");
-    $this->assertText('All time', 'Found the all time popular content.');
-    $this->assertText('Last viewed', 'Found the last viewed popular content.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Popular content');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Today's");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('All time');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Last viewed');
 
     $tags = Cache::mergeTags($node->getCacheTags(), $block->getCacheTags());
     $tags = Cache::mergeTags($tags, $this->blockingUser->getCacheTags());
@@ -57,7 +70,9 @@ class FileDownloadStatisticsReportsTest extends FileDownloadStatisticsTestBase {
     $this->assertCacheContexts($contexts);
 
     // Check if the node link is displayed.
-    $this->assertRaw(\Drupal::l($node->label(), $node->urlInfo('canonical')), 'Found link to visited node.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Please confirm that `$node` is an instance of `Drupal\Core\Entity\EntityInterface`. Only the method name and not the class name was checked for this replacement, so this may be a false positive.
+    $this->assertSession()->responseContains(Link::fromTextAndUrl($node->label(), $node->toUrl('canonical')));
   }
 
 }
diff --git a/tests/src/Functional/FileDownloadStatisticsTestBase.php b/tests/src/Functional/FileDownloadStatisticsTestBase.php
index fbc33e8..1930c9e 100644
--- a/tests/src/Functional/FileDownloadStatisticsTestBase.php
+++ b/tests/src/Functional/FileDownloadStatisticsTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\file_download_statistics\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -19,11 +20,11 @@ abstract class FileDownloadStatisticsTestBase extends BrowserTestBase {
   /**
    * User with permissions to ban IP's.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $blockingUser;
 
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create Basic page node type.
diff --git a/tests/src/Functional/FileDownloadStatisticsTokenReplaceTest.php b/tests/src/Functional/FileDownloadStatisticsTokenReplaceTest.php
index face6db..0c9a434 100644
--- a/tests/src/Functional/FileDownloadStatisticsTokenReplaceTest.php
+++ b/tests/src/Functional/FileDownloadStatisticsTokenReplaceTest.php
@@ -27,7 +27,7 @@ class FileDownloadStatisticsTokenReplaceTest extends FileDownloadStatisticsTestB
     $post = http_build_query(['nid' => $nid]);
     $headers = ['Content-Type' => 'application/x-www-form-urlencoded'];
     global $base_url;
-    $stats_path = $base_url . '/' . drupal_get_path('module', 'statistics') . '/statistics.php';
+    $stats_path = $base_url . '/' . \Drupal::service('extension.list.module')->getPath('statistics') . '/statistics.php';
     $client = \Drupal::httpClient();
     $client->post($stats_path, ['headers' => $headers, 'body' => $post]);
     $statistics = statistics_get($node->id());
@@ -36,15 +36,15 @@ class FileDownloadStatisticsTokenReplaceTest extends FileDownloadStatisticsTestB
     $tests = [];
     $tests['[node:total-count]'] = 1;
     $tests['[node:day-count]'] = 1;
-    $tests['[node:last-view]'] = format_date($statistics['timestamp']);
-    $tests['[node:last-view:short]'] = format_date($statistics['timestamp'], 'short');
+    $tests['[node:last-view]'] = \Drupal::service('date.formatter')->format($statistics['timestamp']);
+    $tests['[node:last-view:short]'] = \Drupal::service('date.formatter')->format($statistics['timestamp'], 'short');
 
     // Test to make sure that we generated something for each token.
     $this->assertFalse(in_array(0, array_map('strlen', $tests)), 'No empty tokens generated.');
 
     foreach ($tests as $input => $expected) {
       $output = \Drupal::token()->replace($input, ['node' => $node], ['langcode' => $language_interface->getId()]);
-      $this->assertEqual($output, $expected, format_string('Statistics token %token replaced.', ['%token' => $input]));
+      $this->assertEquals($output, $expected, format_string('Statistics token %token replaced.', ['%token' => $input]));
     }
   }
 
