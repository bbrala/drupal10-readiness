modules/contrib/entity/entity.module
modules/contrib/entity/entity.views.inc
modules/contrib/entity/src/Access/EntityRevisionRouteAccessChecker.php
modules/contrib/entity/src/BulkFormEntityListBuilder.php
modules/contrib/entity/src/BundleEntityAccessControlHandler.php
modules/contrib/entity/src/BundleEntityDuplicator.php
modules/contrib/entity/src/BundleEntityDuplicatorInterface.php
modules/contrib/entity/src/BundleFieldDefinition.php
modules/contrib/entity/src/BundlePlugin/BundlePluginHandler.php
modules/contrib/entity/src/BundlePlugin/BundlePluginHandlerInterface.php
modules/contrib/entity/src/BundlePlugin/BundlePluginInstaller.php
modules/contrib/entity/src/BundlePlugin/BundlePluginInstallerInterface.php
modules/contrib/entity/src/BundlePlugin/BundlePluginInterface.php
modules/contrib/entity/src/BundlePlugin/BundlePluginUninstallValidator.php
modules/contrib/entity/src/Controller/EntityDuplicateController.php
modules/contrib/entity/src/Controller/RevisionControllerTrait.php
modules/contrib/entity/src/Controller/RevisionOverviewController.php
modules/contrib/entity/src/Entity/RevisionableEntityBundleInterface.php
modules/contrib/entity/src/EntityAccessControlHandler.php
modules/contrib/entity/src/EntityAccessControlHandlerBase.php
modules/contrib/entity/src/EntityPermissionProvider.php
modules/contrib/entity/src/EntityPermissionProviderBase.php
modules/contrib/entity/src/EntityPermissionProviderInterface.php
modules/contrib/entity/src/EntityPermissions.php
modules/contrib/entity/src/EntityViewBuilder.php
modules/contrib/entity/src/EntityViewsData.php
modules/contrib/entity/src/Event/EntityDuplicateEvent.php
modules/contrib/entity/src/Event/EntityEvents.php
modules/contrib/entity/src/EventSubscriber/EntityDuplicateSubscriber.php
modules/contrib/entity/src/Form/DeleteMultipleForm.php
modules/contrib/entity/src/Form/EntityDuplicateFormInterface.php
modules/contrib/entity/src/Form/EntityDuplicateFormTrait.php
modules/contrib/entity/src/Form/RevisionRevertForm.php
modules/contrib/entity/src/Form/RevisionableContentEntityForm.php
modules/contrib/entity/src/Menu/DefaultEntityLocalTaskProvider.php
modules/contrib/entity/src/Menu/EntityCollectionLocalActionProvider.php
modules/contrib/entity/src/Menu/EntityLocalActionProviderInterface.php
modules/contrib/entity/src/Menu/EntityLocalTaskProviderInterface.php
modules/contrib/entity/src/Plugin/Action/DeleteAction.php
modules/contrib/entity/src/Plugin/Action/Derivative/DeleteActionDeriver.php
modules/contrib/entity/src/Plugin/Derivative/EntityActionsDeriver.php
modules/contrib/entity/src/Plugin/Derivative/EntityTasksDeriver.php
modules/contrib/entity/src/Plugin/views/field/EntityLinkRevision.php
modules/contrib/entity/src/Plugin/views/field/EntityLinkRevisionRevert.php
modules/contrib/entity/src/QueryAccess/Condition.php
modules/contrib/entity/src/QueryAccess/ConditionGroup.php
modules/contrib/entity/src/QueryAccess/EntityQueryAlter.php
modules/contrib/entity/src/QueryAccess/EventOnlyQueryAccessHandler.php
modules/contrib/entity/src/QueryAccess/QueryAccessEvent.php
modules/contrib/entity/src/QueryAccess/QueryAccessHandler.php
modules/contrib/entity/src/QueryAccess/QueryAccessHandlerBase.php
modules/contrib/entity/src/QueryAccess/QueryAccessHandlerInterface.php
modules/contrib/entity/src/QueryAccess/UncacheableQueryAccessHandler.php
modules/contrib/entity/src/QueryAccess/ViewsQueryAlter.php
modules/contrib/entity/src/Revision/RevisionableContentEntityBase.php
modules/contrib/entity/src/Routing/AdminHtmlRouteProvider.php
modules/contrib/entity/src/Routing/DefaultHtmlRouteProvider.php
modules/contrib/entity/src/Routing/DeleteMultipleRouteProvider.php
modules/contrib/entity/src/Routing/RevisionRouteProvider.php
modules/contrib/entity/src/UncacheableEntityAccessControlHandler.php
modules/contrib/entity/src/UncacheableEntityPermissionProvider.php
modules/contrib/entity/tests/modules/entity_module_bundle_plugin_examples_test/src/Plugin/BundlePluginTest/Second.php
modules/contrib/entity/tests/modules/entity_module_bundle_plugin_test/src/Annotation/BundlePluginTest.php
modules/contrib/entity/tests/modules/entity_module_bundle_plugin_test/src/BundlePluginTestManager.php
modules/contrib/entity/tests/modules/entity_module_bundle_plugin_test/src/Entity/EntityTestBundlePlugin.php
modules/contrib/entity/tests/modules/entity_module_bundle_plugin_test/src/Plugin/BundlePluginTest/BundlePluginTestInterface.php
modules/contrib/entity/tests/modules/entity_module_bundle_plugin_test/src/Plugin/BundlePluginTest/First.php
modules/contrib/entity/tests/modules/entity_module_test/entity_module_test.module
modules/contrib/entity/tests/modules/entity_module_test/src/Entity/EnhancedEntity.php
modules/contrib/entity/tests/modules/entity_module_test/src/Entity/EnhancedEntityWithOwner.php
modules/contrib/entity/tests/modules/entity_module_test/src/EventSubscriber/QueryAccessSubscriber.php
modules/contrib/entity/tests/modules/entity_module_test/src/Form/EnhancedEntityForm.php
modules/contrib/entity/tests/src/Functional/BulkFormEntityListBuilderTest.php
modules/contrib/entity/tests/src/Functional/CollectionRouteAccessTest.php
modules/contrib/entity/tests/src/Functional/EntityDuplicateTest.php
modules/contrib/entity/tests/src/Functional/Menu/EntityLocalActionTest.php
modules/contrib/entity/tests/src/Functional/Menu/EntityLocalTaskTest.php
modules/contrib/entity/tests/src/Functional/RevisionRouteAccessTest.php
modules/contrib/entity/tests/src/Kernel/BundleEntityDuplicatorTest.php
modules/contrib/entity/tests/src/Kernel/BundlePluginTest.php
modules/contrib/entity/tests/src/Kernel/QueryAccess/ConditionGroupTest.php
modules/contrib/entity/tests/src/Kernel/QueryAccess/EventOnlyQueryAccessHandlerTest.php
modules/contrib/entity/tests/src/Kernel/QueryAccess/QueryAccessEventTest.php
modules/contrib/entity/tests/src/Kernel/QueryAccess/QueryAccessHandlerTest.php
modules/contrib/entity/tests/src/Kernel/QueryAccess/QueryAccessTest.php
modules/contrib/entity/tests/src/Kernel/QueryAccess/UncacheableQueryAccessHandlerTest.php
modules/contrib/entity/tests/src/Kernel/QueryAccess/UncacheableQueryAccessTest.php
modules/contrib/entity/tests/src/Kernel/RevisionBasicUITest.php
modules/contrib/entity/tests/src/Unit/BundleEntityAccessControlHandlerTest.php
modules/contrib/entity/tests/src/Unit/EntityAccessControlHandlerTest.php
modules/contrib/entity/tests/src/Unit/EntityPermissionProviderTest.php
modules/contrib/entity/tests/src/Unit/QueryAccess/ConditionTest.php
modules/contrib/entity/tests/src/Unit/UncacheableEntityAccessControlHandlerTest.php
modules/contrib/entity/tests/src/Unit/UncacheableEntityPermissionProviderTest.php

66 files with changes
=====================

1) modules/contrib/entity/tests/src/Unit/UncacheableEntityPermissionProviderTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\entity\EntityPermissionProviderInterface;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ @@
  */
 class UncacheableEntityPermissionProviderTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The entity permission provider.
    *
-   * @var \Drupal\entity\EntityPermissionProviderInterface
+   * @var EntityPermissionProviderInterface
    */
   protected $permissionProvider;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/entity/tests/src/Unit/UncacheableEntityAccessControlHandlerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\Context\CacheContextsManager;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
@@ @@
  */
 class UncacheableEntityAccessControlHandlerTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ @@
   /**
    * Builds a mock entity.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    * @param string $owner_id
    *   The owner ID.
@@ @@
    * @param bool $published
    *   Whether the entity is published.
    *
-   * @return \Prophecy\Prophecy\ObjectProphecy
+   * @return ObjectProphecy
    *   The entity mock.
    */
   protected function buildMockEntity(EntityTypeInterface $entity_type, $owner_id = NULL, $bundle = NULL, $published = NULL) {
@@ @@
    * @param string $permission
    *   The permission to grant.
    *
-   * @return \Prophecy\Prophecy\ObjectProphecy
+   * @return ObjectProphecy
    *   The user mock.
    */
   protected function buildMockUser($uid, $permission) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/entity/tests/src/Unit/EntityPermissionProviderTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\entity\EntityPermissionProviderInterface;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ @@
  */
 class EntityPermissionProviderTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The entity permission provider.
    *
-   * @var \Drupal\entity\EntityPermissionProviderInterface
+   * @var EntityPermissionProviderInterface
    */
   protected $permissionProvider;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/entity/tests/src/Unit/EntityAccessControlHandlerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\Context\CacheContextsManager;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
@@ @@
  */
 class EntityAccessControlHandlerTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ @@
   /**
    * Builds a mock entity.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    * @param string $owner_id
    *   The owner ID.
@@ @@
    * @param bool $published
    *   Whether the entity is published.
    *
-   * @return \Prophecy\Prophecy\ObjectProphecy
+   * @return ObjectProphecy
    *   The entity mock.
    */
   protected function buildMockEntity(EntityTypeInterface $entity_type, $owner_id = NULL, $bundle = NULL, $published = NULL) {
@@ @@
    * @param string $permission
    *   The permission to grant.
    *
-   * @return \Prophecy\Prophecy\ObjectProphecy
+   * @return ObjectProphecy
    *   The user mock.
    */
   protected function buildMockUser($uid, $permission) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/entity/tests/src/Unit/BundleEntityAccessControlHandlerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Core\Cache\Context\CacheContextsManager;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
@@ @@
  */
 class BundleEntityAccessControlHandlerTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ @@
    * @param string $permission
    *   The permission to grant.
    *
-   * @return \Prophecy\Prophecy\ObjectProphecy
+   * @return ObjectProphecy
    *   The user mock.
    */
   protected function buildMockUser($uid, $permission) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/entity/tests/src/Kernel/RevisionBasicUITest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity\Kernel;

+use Symfony\Component\HttpKernel\HttpKernelInterface;
 use Drupal\entity_module_test\Entity\EnhancedEntity;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\user\Entity\Role;
@@ @@
     $revision->isDefaultRevision(FALSE);
     $revision->save();

-    /** @var \Symfony\Component\HttpKernel\HttpKernelInterface $http_kernel */
+    /** @var HttpKernelInterface $http_kernel */
     $http_kernel = $this->container->get('http_kernel');
     $request = Request::create($revision->toUrl('version-history')->toString());
     $response = $http_kernel->handle($request);
@@ @@
     $revision->isDefaultRevision(FALSE);
     $revision->save();

-    /** @var \Symfony\Component\HttpKernel\HttpKernelInterface $http_kernel */
+    /** @var HttpKernelInterface $http_kernel */
     $http_kernel = $this->container->get('http_kernel');
     $request = Request::create($revision->toUrl('revision')->toString());
     $response = $http_kernel->handle($request);
@@ @@
     $user->save();
     $this->container->get('account_switcher')->switchTo($user);

-    /** @var \Symfony\Component\HttpKernel\HttpKernelInterface $http_kernel */
+    /** @var HttpKernelInterface $http_kernel */
     $http_kernel = $this->container->get('http_kernel');
     $request = Request::create($entity->toUrl('revision-revert-form')->toString());
     $response = $http_kernel->handle($request);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/entity/tests/src/Kernel/QueryAccess/UncacheableQueryAccessTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity\Kernel\QueryAccess;

+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\entity_module_test\Entity\EnhancedEntityWithOwner;
 use Drupal\KernelTests\Core\Entity\EntityKernelTestBase;
 use Drupal\views\Tests\ViewResultAssertionTrait;
@@ @@
   /**
    * The test entities.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface[]
+   * @var ContentEntityInterface[]
    */
   protected $entities;

@@ @@
   /**
    * The entity_test_enhanced storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/entity/tests/src/Kernel/QueryAccess/UncacheableQueryAccessHandlerTest.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The query access handler.
    *
-   * @var \Drupal\entity\QueryAccess\UncacheableQueryAccessHandler
+   * @var UncacheableQueryAccessHandler
    */
   protected $handler;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/entity/tests/src/Kernel/QueryAccess/QueryAccessTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity\Kernel\QueryAccess;

+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\entity_module_test\Entity\EnhancedEntity;
 use Drupal\KernelTests\Core\Entity\EntityKernelTestBase;
 use Drupal\views\Tests\ViewResultAssertionTrait;
@@ @@
   /**
    * The test entities.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface[]
+   * @var ContentEntityInterface[]
    */
   protected $entities;

@@ @@
   /**
    * The entity_test_enhanced storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/entity/tests/src/Kernel/QueryAccess/QueryAccessHandlerTest.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The query access handler.
    *
-   * @var \Drupal\entity\QueryAccess\QueryAccessHandler
+   * @var QueryAccessHandler
    */
   protected $handler;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/entity/tests/src/Kernel/QueryAccess/QueryAccessEventTest.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The query access handler.
    *
-   * @var \Drupal\entity\QueryAccess\QueryAccessHandler
+   * @var QueryAccessHandler
    */
   protected $handler;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/entity/tests/src/Kernel/BundlePluginTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity\Kernel;

+use Drupal\Core\Extension\ModuleInstallerInterface;
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\Entity\EntityTypeBundleInfo;
+use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\entity_module_bundle_plugin_test\Entity\EntityTestBundlePlugin;
 use Drupal\KernelTests\KernelTestBase;

@@ @@

     // Install the modules properly. Putting them into static::$modules doesn't trigger the install
     // hooks, like hook_modules_installed, so entity_modules_installed is not triggered().
-    /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
+    /** @var ModuleInstallerInterface $module_installer */
     $module_installer = $this->container->get('module_installer');
     $module_installer->install(['entity_module_bundle_plugin_test', 'entity_module_bundle_plugin_examples_test']);
   }
@@ @@
    */
   public function testPluginBundles() {
     $bundled_entity_types = entity_get_bundle_plugin_entity_types();
-    /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+    /** @var EntityTypeInterface $entity_type */
     $entity_type = $bundled_entity_types['entity_test_bundle_plugin'];
     $this->assertEquals('entity_test_bundle_plugin', $entity_type->id());
     $this->assertTrue($entity_type->hasHandlerClass('bundle_plugin'));

-    /** @var \Drupal\Core\Entity\EntityTypeBundleInfo $entity_type_bundle_info */
+    /** @var EntityTypeBundleInfo $entity_type_bundle_info */
     $entity_type_bundle_info = $this->container->get('entity_type.bundle.info');
     $bundle_info = $entity_type_bundle_info->getBundleInfo('entity_test_bundle_plugin');
     $this->assertEquals(2, count($bundle_info));
@@ @@
     $this->assertEquals('First', $bundle_info['first']['label']);
     $this->assertEquals('Some description', $bundle_info['first']['description']);

-    /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager */
+    /** @var EntityFieldManagerInterface $entity_field_manager */
     $entity_field_manager = $this->container->get('entity_field.manager');
     $field_storage_definitions = $entity_field_manager->getFieldStorageDefinitions('entity_test_bundle_plugin');
     $this->assertArrayHasKey('first_mail', $field_storage_definitions);
@@ @@
    * Tests the uninstallation for a bundle provided by a module.
    */
   public function testBundlePluginModuleUninstallation() {
-    /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
+    /** @var ModuleInstallerInterface $module_installer */
     $module_installer = $this->container->get('module_installer');

     // One should be possible to uninstall without any actual content.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/entity/tests/src/Kernel/BundleEntityDuplicatorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity\Kernel;

+use Drupal\Core\Config\Entity\ConfigEntityInterface;
+use Drupal\entity\BundleEntityDuplicator;
+use Drupal\Core\Entity\Display\EntityDisplayInterface;
 use Drupal\entity_test\Entity\EntityTestBundle;
 use Drupal\entity_test\Entity\EntityTestWithBundle;
 use Drupal\field\Entity\FieldConfig;
@@ @@
   /**
    * A test bundle entity.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityInterface
+   * @var ConfigEntityInterface
    */
   protected $bundleEntity;

@@ @@
   /**
    * The bundle entity duplicator.
    *
-   * @var \Drupal\entity\BundleEntityDuplicator
+   * @var BundleEntityDuplicator
    */
   protected $duplicator;

@@ @@
    * @throws \InvalidArgumentException
    *   Thrown when an invalid display context is provided.
    *
-   * @return \Drupal\Core\Entity\Display\EntityDisplayInterface
+   * @return EntityDisplayInterface
    *   The entity display.
    */
   protected function getDisplay($entity_type, $bundle, $display_context) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/entity/tests/src/Functional/RevisionRouteAccessTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity\Functional;

+use Drupal\Core\Session\AccountInterface;
 use Drupal\entity_module_test\Entity\EnhancedEntity;
 use Drupal\Tests\block\Traits\BlockCreationTrait;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/entity/tests/src/Functional/EntityDuplicateTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity\Functional;

+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\entity_module_test\Entity\EnhancedEntity;
 use Drupal\Tests\block\Traits\BlockCreationTrait;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;

@@ @@
   /**
    * The entity_test_enhanced storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/entity/tests/src/Functional/BulkFormEntityListBuilderTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity\Functional;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\entity_module_test\Entity\EnhancedEntityWithOwner;
 use Drupal\Tests\block\Traits\BlockCreationTrait;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   /**
    * The entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/entity/tests/modules/entity_module_test/src/EventSubscriber/QueryAccessSubscriber.php:26

    ---------- begin diff ----------
@@ @@
    * subscriber would probably extend the conditions based on the third party
    * settings it set on the entity type(s).
    *
-   * @param \Drupal\entity\QueryAccess\QueryAccessEvent $event
+   * @param QueryAccessEvent $event
    *   The event.
    */
   public function onGenericQueryAccess(QueryAccessEvent $event) {
@@ @@
    * ignore the account and extend the conditions to cover additional factors,
    * such as a custom entity field.
    *
-   * @param \Drupal\entity\QueryAccess\QueryAccessEvent $event
+   * @param QueryAccessEvent $event
    *   The event.
    */
   public function onQueryAccess(QueryAccessEvent $event) {
@@ @@
    * access subscriber is added to entity types that do not specify a query
    * access handler; in this case: node.
    *
-   * @param \Drupal\entity\QueryAccess\QueryAccessEvent $event
+   * @param QueryAccessEvent $event
    *   The event.
    */
   public function onEventOnlyQueryAccess(QueryAccessEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


18) modules/contrib/entity/tests/modules/entity_module_bundle_plugin_test/src/BundlePluginTestManager.php:19

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache backend.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/entity/tests/modules/entity_module_bundle_plugin_test/src/Annotation/BundlePluginTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_module_bundle_plugin_test\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label;
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


20) modules/contrib/entity/src/UncacheableEntityPermissionProvider.php:44

    ---------- begin diff ----------
@@ @@
   /**
    * Builds permissions for the entity_type granularity.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
    * @return array
@@ @@
   /**
    * Builds permissions for the bundle granularity.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/entity/src/UncacheableEntityAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity;

+use Drupal\user\EntityOwnerInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkEntityOwnerPermissions(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\user\EntityOwnerInterface $entity */
+    /** @var EntityOwnerInterface $entity */
     if ($operation === 'view' && $entity instanceof EntityPublishedInterface && !$entity->isPublished()) {
       if ($account->id() != $entity->getOwnerId()) {
         // There's no permission for viewing other user's unpublished entity.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/entity/src/Routing/RevisionRouteProvider.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the entity revision view route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionViewRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the entity revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the entity revision version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionHistoryRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


23) modules/contrib/entity/src/Routing/DeleteMultipleRouteProvider.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the delete multiple form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function deleteMultipleFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


24) modules/contrib/entity/src/Routing/DefaultHtmlRouteProvider.php:41

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the duplicate-form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getDuplicateFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/entity/src/QueryAccess/ViewsQueryAlter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity\QueryAccess;

+use Drupal\Core\Field\FieldStorageDefinitionInterface;
+use Drupal\Core\Database\Query\ConditionInterface;
+use Drupal\Views\Plugin\views\join\JoinPluginBase;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * Constructs a new ViewsQueryAlter object.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
    */
   public function __construct(Connection $connection, EntityFieldManagerInterface $entity_field_manager, EntityTypeManagerInterface $entity_type_manager, RendererInterface $renderer, RequestStack $request_stack) {
@@ @@
   /**
    * Alters the given views query.
    *
-   * @param \Drupal\views\Plugin\views\query\Sql $query
+   * @param Sql $query
    *   The views query.
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The view.
    */
   public function alter(Sql $query, ViewExecutable $view) {
@@ @@
       return;
     }

-    /** @var \Drupal\entity\QueryAccess\QueryAccessHandlerInterface $query_access */
+    /** @var QueryAccessHandlerInterface $query_access */
     $query_access = $this->entityTypeManager->getHandler($entity_type_id, 'query_access');
     $conditions = $query_access->getConditions('view');
     if ($conditions->isAlwaysFalse()) {
@@ @@
       // Store the data table, in case mapConditions() needs to join it in.
       $base_table['data_table'] = $entity_type->getDataTable();
       $field_storage_definitions = $this->entityFieldManager->getFieldStorageDefinitions($entity_type_id);
-      /** @var \Drupal\Core\Entity\Sql\DefaultTableMapping $table_mapping */
+      /** @var DefaultTableMapping $table_mapping */
       $table_mapping = $storage->getTableMapping();
       $sql_conditions = $this->mapConditions($conditions, $query, $base_table, $field_storage_definitions, $table_mapping);
       $query->addWhere(0, $sql_conditions);
@@ @@
   /**
    * Maps an entity type's access conditions to views SQL conditions.
    *
-   * @param \Drupal\entity\QueryAccess\ConditionGroup $conditions
+   * @param ConditionGroup $conditions
    *   The access conditions.
-   * @param \Drupal\views\Plugin\views\query\Sql $query
+   * @param Sql $query
    *   The views query.
    * @param array $base_table
    *   The base table information.
-   * @param \Drupal\Core\Field\FieldStorageDefinitionInterface[] $field_storage_definitions
+   * @param FieldStorageDefinitionInterface[] $field_storage_definitions
    *   The field storage definitions.
-   * @param \Drupal\Core\Entity\Sql\DefaultTableMapping $table_mapping
+   * @param DefaultTableMapping $table_mapping
    *   The table mapping.
    *
-   * @return \Drupal\Core\Database\Query\ConditionInterface
+   * @return ConditionInterface
    *   The SQL conditions.
    */
   protected function mapConditions(ConditionGroup $conditions, Sql $query, array $base_table, array $field_storage_definitions, DefaultTableMapping $table_mapping) {
@@ @@
               'left_table' => $base_table['alias'],
               'left_field' => 'id',
             ];
-            /** @var \Drupal\Views\Plugin\views\join\JoinPluginBase $join */
+            /** @var JoinPluginBase $join */
             $join = Views::pluginManager('join')->createInstance('standard', $configuration);
             $alias = $query->addRelationship($base_table['data_table'], $join, $data_table);
           }
@@ @@
   /**
    * Applies the cacheablity metadata to the current request.
    *
-   * @param \Drupal\Core\Cache\CacheableMetadata $cacheable_metadata
+   * @param CacheableMetadata $cacheable_metadata
    *   The cacheability metadata.
    */
   protected function applyCacheability(CacheableMetadata $cacheable_metadata) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


26) modules/contrib/entity/src/QueryAccess/QueryAccessHandlerInterface.php:29

    ---------- begin diff ----------
@@ @@
    * @param string $operation
    *   The access operation. Usually one of "view", "update", "duplicate",
    *   or "delete".
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user for which to restrict access, or NULL
    *   to assume the current user. Defaults to NULL.
    *
-   * @return \Drupal\entity\QueryAccess\ConditionGroup
+   * @return ConditionGroup
    *   The conditions.
    */
   public function getConditions($operation, AccountInterface $account = NULL);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


27) modules/contrib/entity/src/QueryAccess/QueryAccessHandlerBase.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface
+   * @var EntityTypeInterface
    */
   protected $entityType;

@@ @@
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInfo;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Constructs a new QueryAccessHandlerBase object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info
+   * @param EntityTypeBundleInfoInterface $bundle_info
    *   The entity type bundle info.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityTypeBundleInfoInterface $bundle_info, EventDispatcherInterface $event_dispatcher, AccountInterface $current_user) {
@@ @@
    * @param string $operation
    *   The access operation. Usually one of "view", "update", "duplicate",
    *   or "delete".
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user for which to restrict access.
    *
-   * @return \Drupal\entity\QueryAccess\ConditionGroup
+   * @return ConditionGroup
    *   The conditions.
    */
   public function buildConditions($operation, AccountInterface $account) {
@@ @@
    * @param string $operation
    *   The access operation. Usually one of "view", "update", "duplicate",
    *   or "delete".
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user for which to restrict access.
    *
-   * @return \Drupal\entity\QueryAccess\ConditionGroup|null
+   * @return ConditionGroup|null
    *   The conditions, or NULL if the user doesn't have access to any entity.
    */
   protected function buildEntityOwnerConditions($operation, AccountInterface $account) {
@@ @@
    * @param string $operation
    *   The access operation. Usually one of "view", "update", "duplicate",
    *   or "delete".
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user for which to restrict access.
    *
-   * @return \Drupal\entity\QueryAccess\ConditionGroup|null
+   * @return ConditionGroup|null
    *   The conditions, or NULL if the user doesn't have access to any entity.
    */
   protected function buildEntityConditions($operation, AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


28) modules/contrib/entity/src/QueryAccess/QueryAccessEvent.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The conditions.
    *
-   * @var \Drupal\entity\QueryAccess\ConditionGroup
+   * @var ConditionGroup
    */
   protected $conditions;

@@ @@
   /**
    * The user for which to restrict access.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;

@@ @@
   /**
    * Constructs a new QueryAccessEvent.
    *
-   * @param \Drupal\entity\QueryAccess\ConditionGroup $conditions
+   * @param ConditionGroup $conditions
    *   The conditions.
    * @param string $operation
    *   The operation. Usually one of "view", "update", "duplicate", or "delete".
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user for which to restrict access.
    * @param string $entity_type_id
    *   The ID of entity type the query is for.
@@ @@
    * empty (count is 0), the user has full access, and the query doesn't
    * need to be restricted.
    *
-   * @return \Drupal\entity\QueryAccess\ConditionGroup
+   * @return ConditionGroup
    *   The conditions.
    */
   public function getConditions() {
@@ @@
   /**
    * Gets the user for which to restrict access.
    *
-   * @return \Drupal\Core\Session\AccountInterface
+   * @return AccountInterface
    *   The user.
    */
   public function getAccount() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/entity/src/QueryAccess/EventOnlyQueryAccessHandler.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface
+   * @var EntityTypeInterface
    */
   protected $entityType;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Constructs a new EventOnlyQueryAccessHandler object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(EntityTypeInterface $entity_type, EventDispatcherInterface $event_dispatcher, AccountInterface $current_user) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


30) modules/contrib/entity/src/QueryAccess/EntityQueryAlter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity\QueryAccess;

+use Drupal\Core\Database\Query\ConditionInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Database\Query\SelectInterface;
@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * Constructs a new EntityQueryAlter object.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
    */
   public function __construct(EntityFieldManagerInterface $entity_field_manager, EntityTypeManagerInterface $entity_type_manager, RendererInterface $renderer, RequestStack $request_stack) {
@@ @@
   /**
    * Alters the select query for the given entity type.
    *
-   * @param \Drupal\Core\Database\Query\SelectInterface $query
+   * @param SelectInterface $query
    *   The select query.
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    */
   public function alter(SelectInterface $query, EntityTypeInterface $entity_type) {
@@ @@
       return;
     }

-    /** @var \Drupal\entity\QueryAccess\QueryAccessHandlerInterface $query_access */
+    /** @var QueryAccessHandlerInterface $query_access */
     $query_access = $this->entityTypeManager->getHandler($entity_type_id, 'query_access');
     $conditions = $query_access->getConditions($query->getMetaData('op') ?: 'view');
     if ($conditions->isAlwaysFalse()) {
@@ @@
   /**
    * Maps an entity type's access conditions to SQL conditions.
    *
-   * @param \Drupal\entity\QueryAccess\ConditionGroup $conditions
+   * @param ConditionGroup $conditions
    *   The access conditions.
-   * @param \Drupal\Core\Database\Query\SelectInterface $query
+   * @param SelectInterface $query
    *   The SQL query.
    * @param bool $nested_inside_or
    *   Whether the access conditions are nested inside an OR condition.
    *
-   * @return \Drupal\Core\Database\Query\ConditionInterface
+   * @return ConditionInterface
    *   The SQL conditions.
    */
   protected function mapConditions(ConditionGroup $conditions, SelectInterface $query, $nested_inside_or = FALSE) {
@@ @@
   /**
    * Applies the cacheablity metadata to the current request.
    *
-   * @param \Drupal\Core\Cache\CacheableMetadata $cacheable_metadata
+   * @param CacheableMetadata $cacheable_metadata
    *   The cacheability metadata.
    */
   protected function applyCacheability(CacheableMetadata $cacheable_metadata) {
@@ @@
    *
    * An empty cacheable metadata object has no context, tags, and is permanent.
    *
-   * @param \Drupal\Core\Cache\CacheableMetadata $cacheable_metadata
+   * @param CacheableMetadata $cacheable_metadata
    *   The cacheable metadata.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


31) modules/contrib/entity/src/QueryAccess/ConditionGroup.php:46

    ---------- begin diff ----------
@@ @@
   /**
    * The conditions.
    *
-   * @var \Drupal\entity\QueryAccess\Condition[]|\Drupal\entity\QueryAccess\ConditionGroup[]
+   * @var Condition[]|\Drupal\entity\QueryAccess\ConditionGroup[]
    */
   protected $conditions = [];

@@ @@
   /**
    * Gets all conditions and nested condition groups.
    *
-   * @return \Drupal\entity\QueryAccess\Condition[]|\Drupal\entity\QueryAccess\ConditionGroup[]
+   * @return Condition[]|\Drupal\entity\QueryAccess\ConditionGroup[]
    *   The conditions, where each one is either a Condition or a nested
    *   ConditionGroup. Returned by reference, to allow callers to replace
    *   or remove conditions.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


32) modules/contrib/entity/src/Plugin/Derivative/EntityTasksDeriver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity\Plugin\Derivative;

+use Drupal\entity\Menu\EntityLocalTaskProviderInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs an entity local tasks deriver.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
         $handlers = $entity_type->getHandlerClasses();
         if (isset($handlers['local_task_provider'])) {
           foreach ($handlers['local_task_provider'] as $class) {
-            /** @var \Drupal\entity\Menu\EntityLocalTaskProviderInterface $handler */
+            /** @var EntityLocalTaskProviderInterface $handler */
             $handler = $this->entityTypeManager->createHandlerInstance($class, $entity_type);
             $this->derivatives += $handler->buildLocalTasks($entity_type);
           }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/entity/src/Plugin/Derivative/EntityActionsDeriver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity\Plugin\Derivative;

+use Drupal\entity\Menu\EntityLocalActionProviderInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs an entity local actions deriver.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
         $handlers = $entity_type->getHandlerClasses();
         if (isset($handlers['local_action_provider'])) {
           foreach ($handlers['local_action_provider'] as $class) {
-            /** @var \Drupal\entity\Menu\EntityLocalActionProviderInterface $handler */
+            /** @var EntityLocalActionProviderInterface $handler */
             $handler = $this->entityTypeManager->createHandlerInstance($class, $entity_type);
             $this->derivatives += $handler->buildLocalActions($entity_type);
           }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/entity/src/Plugin/Action/Derivative/DeleteActionDeriver.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new DeleteActionDeriver object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
    * The list consists of all content entity types with a delete-multiple-form
    * link template.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface[]
+   * @return EntityTypeInterface[]
    *   The participating entity types, keyed by entity type id.
    */
   protected function getParticipatingEntityTypes() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/entity/src/Menu/EntityLocalTaskProviderInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Builds local tasks for the given entity type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
    * @return array[]
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


36) modules/contrib/entity/src/Menu/EntityLocalActionProviderInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Builds local actions for the given entity type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
    * @return array[]
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


37) modules/contrib/entity/src/Menu/EntityCollectionLocalActionProvider.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new EntityCollectionLocalActionProvider object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation.
    */
   public function __construct(EntityTypeInterface $entity_type, TranslationInterface $string_translation) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


38) modules/contrib/entity/src/Menu/DefaultEntityLocalTaskProvider.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a DefaultEntityLocalTaskProvider object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation.
    */
   public function __construct(EntityTypeInterface $entity_type, TranslationInterface $string_translation) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


39) modules/contrib/entity/src/Form/RevisionableContentEntityForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity\Form;

+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Entity\RevisionLogInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Entity\RevisionableEntityBundleInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The entity being used by this form.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface|\Drupal\Core\Entity\RevisionLogInterface
+   * @var ContentEntityInterface|RevisionLogInterface
    */
   protected $entity;

@@ @@
   /**
    * Gets the bundle entity of the current entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The bundle entity, or NULL if there is none.
    */
   protected function getBundleEntity() {
@@ @@

     if ($insert) {
       $logger->notice('@type: added %info.', $context);
-      drupal_set_message($this->t('@type %info has been created.', $t_args));
+      $this->messenger()->addStatus($this->t('@type %info has been created.', $t_args));
     }
     else {
       $logger->notice('@type: updated %info.', $context);
-      drupal_set_message($this->t('@type %info has been updated.', $t_args));
+      $this->messenger()->addStatus($this->t('@type %info has been updated.', $t_args));
     }

     if ($this->entity->id()) {
@@ @@
     else {
       // In the unlikely case something went wrong on save, the entity will be
       // rebuilt and entity form redisplayed.
-      drupal_set_message($this->t('The entity could not be saved.'), 'error');
+      $this->messenger()->addError($this->t('The entity could not be saved.'));
       $form_state->setRebuild();
     }
   }
    ----------- end diff -----------

Applied rules:
 * DrupalSetMessageRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/entity/src/Form/RevisionRevertForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity\Form;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Entity\RevisionableInterface;
@@ @@
   /**
    * The entity revision.
    *
-   * @var \Drupal\Core\Entity\EntityInterface|\Drupal\Core\Entity\RevisionableInterface|\Drupal\Core\Entity\RevisionLogInterface
+   * @var EntityInterface|RevisionableInterface|RevisionLogInterface
    */
   protected $revision;

@@ @@
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The entity bundle information.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInformation;

@@ @@
   /**
    * Creates a new RevisionRevertForm instance.
    *
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_information
+   * @param EntityTypeBundleInfoInterface $bundle_information
    *   The bundle information.
    */
   public function __construct(DateFormatterInterface $date_formatter, EntityTypeBundleInfoInterface $bundle_information) {
@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\Core\Entity\RevisionableInterface $revision
+   * @param RevisionableInterface $revision
    *   The revision to be reverted.
    *
-   * @return \Drupal\Core\Entity\RevisionableInterface
+   * @return RevisionableInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevision(RevisionableInterface $revision) {
@@ @@
   /**
    * Returns a bundle label.
    *
-   * @param \Drupal\Core\Entity\RevisionableInterface $revision
+   * @param RevisionableInterface $revision
    *   The entity revision.
    *
    * @return string
    */
   protected function getBundleLabel(RevisionableInterface $revision) {
-    /** @var \Drupal\Core\Entity\EntityInterface|\Drupal\Core\Entity\RevisionableInterface $revision */
+    /** @var EntityInterface|RevisionableInterface $revision */
     $bundle_info = $this->bundleInformation->getBundleInfo($revision->getEntityTypeId());
     return $bundle_info[$revision->bundle()]['label'];
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


41) modules/contrib/entity/src/Form/EntityDuplicateFormTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity\Form;

+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\entity\Event\EntityDuplicateEvent;
 use Drupal\entity\Event\EntityEvents;
@@ @@
   /**
    * The source entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $sourceEntity;

@@ @@
   /**
    * Invokes entity duplicate hooks after the entity has been duplicated.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The saved entity.
    * @param string $operation
    *   The form operation.
@@ @@
       // An event is used instead of a hook to prevent a conflict with core
       // once hook_entity_duplicate() is introduced there.
       $event = new EntityDuplicateEvent($entity, $this->sourceEntity);
-      /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+      /** @var EventDispatcherInterface $event_dispatcher */
       $event_dispatcher = \Drupal::service('event_dispatcher');
       $event_dispatcher->dispatch($event, EntityEvents::ENTITY_DUPLICATE);
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


42) modules/contrib/entity/src/Form/EntityDuplicateFormInterface.php:14

    ---------- begin diff ----------
@@ @@
    *
    * This is the entity that was duplicated to populate the form entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The source entity.
    */
   public function getSourceEntity();
@@ @@
   /**
    * Sets the source entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $source_entity
+   * @param EntityInterface $source_entity
    *   The source entity.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


43) modules/contrib/entity/src/EventSubscriber/EntityDuplicateSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity\EventSubscriber;

+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\entity\BundleEntityDuplicatorInterface;
 use Drupal\entity\Event\EntityDuplicateEvent;
 use Drupal\entity\Event\EntityEvents;
@@ @@
   /**
    * The bundle entity duplicator.
    *
-   * @var \Drupal\entity\BundleEntityDuplicatorInterface
+   * @var BundleEntityDuplicatorInterface
    */
   protected $bundleEntityDuplicator;

@@ @@
   /**
    * Constructs a new EntityDuplicateSubscriber object.
    *
-   * @param \Drupal\entity\BundleEntityDuplicatorInterface $bundle_entity_duplicator
+   * @param BundleEntityDuplicatorInterface $bundle_entity_duplicator
    *   The bundle entity duplicator.
    */
   public function __construct(BundleEntityDuplicatorInterface $bundle_entity_duplicator) {
@@ @@
   /**
    * Duplicates bundle fields and displays.
    *
-   * @param \Drupal\entity\Event\EntityDuplicateEvent $event
+   * @param EntityDuplicateEvent $event
    *   The entity duplicate event.
    */
   public function onEntityDuplicate(EntityDuplicateEvent $event) {
     $entity = $event->getEntity();
     if ($entity->getEntityType()->getBundleOf()) {
-      /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $source_entity */
+      /** @var ConfigEntityInterface $source_entity */
       $source_entity = $event->getSourceEntity();
       $this->bundleEntityDuplicator->duplicateFields($source_entity, $entity->id());
       $this->bundleEntityDuplicator->duplicateDisplays($source_entity, $entity->id());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


44) modules/contrib/entity/src/Event/EntityDuplicateEvent.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;

@@ @@
   /**
    * The source entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $sourceEntity;

@@ @@
   /**
    * Constructs a new EntityDuplicateEvent object.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
-   * @param \Drupal\Core\Entity\EntityInterface $source_entity
+   * @param EntityInterface $source_entity
    *   The source entity.
    */
   public function __construct(EntityInterface $entity, EntityInterface $source_entity) {
@@ @@
   /**
    * Gets the entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The entity.
    */
   public function getEntity() {
@@ @@
   /**
    * Gets the source entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The source entity.
    */
   public function getSourceEntity() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


45) modules/contrib/entity/src/EntityViewsData.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity;

+use Drupal\Core\Entity\Sql\DefaultTableMapping;
+use Drupal\Core\Entity\EntityFieldManagerInterface;
+use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\ContentEntityType;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\Sql\TableMappingInterface;
@@ @@
   /**
    * The table mapping.
    *
-   * @var \Drupal\Core\Entity\Sql\DefaultTableMapping
+   * @var DefaultTableMapping
    */
   protected $tableMapping;

@@ @@
    *
    * @param array $data
    *   The views data.
-   * @param \Drupal\entity\BundleFieldDefinition $bundle_field
+   * @param BundleFieldDefinition $bundle_field
    *   The bundle field.
    */
   protected function addBundleFieldData(array &$data, BundleFieldDefinition $bundle_field) {
@@ @@
    *
    * @param string $table
    *   The table name.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    * @param array $views_field
    *   The views field data.
@@ @@
    *
    * @param string $table
    *   The table name.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    * @param array $views_field
    *   The views field data.
@@ @@
    *
    * @param string $table
    *   The table name.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    * @param array $views_field
    *   The views field data.
@@ @@
    *
    * @param string $table
    *   The table name.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    * @param array $views_field
    *   The views field data.
@@ @@
    *
    * @param array $data
    *   The views data.
-   * @param \Drupal\Core\Field\BaseFieldDefinition[] $fields
+   * @param BaseFieldDefinition[] $fields
    *   The entity reference fields.
    */
   protected function addReverseRelationships(array &$data, array $fields) {
@@ @@
    *
    * @todo Remove when support for Drupal 8.7 is dropped.
    *
-   * @return \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @return EntityFieldManagerInterface
    *   The entity field manager.
    */
   protected function getEntityFieldManager() {
@@ @@
    *
    * @todo Remove when support for Drupal 8.7 is dropped.
    *
-   * @return \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @return EntityTypeBundleInfoInterface
    *   The entity type bundle info.
    */
   protected function getEntityTypeBundleInfo() {
@@ @@
    *
    * @todo Remove when support for Drupal 8.7 is dropped.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager.
    */
   protected function getEntityTypeManager() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


46) modules/contrib/entity/src/EntityPermissions.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity;

+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new EntityPermissions object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
    */
   public function buildPermissions() {
     $permissions = [];
-    /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
+    /** @var EntityTypeInterface[] $entity_types */
     foreach ($this->entityTypeManager->getDefinitions() as $entity_type) {
       if ($entity_type->hasHandlerClass('permission_provider')) {
         $permission_provider_class = $entity_type->getHandlerClass('permission_provider');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


47) modules/contrib/entity/src/EntityPermissionProviderInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Builds permissions for the given entity type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


48) modules/contrib/entity/src/EntityPermissionProviderBase.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * Constructs a new EntityPermissionProvider object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
    */
   public function __construct(EntityTypeBundleInfoInterface $entity_type_bundle_info) {
@@ @@
    *
    * @param array $permissions
    *   The array of permissions.
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
    * @return array
@@ @@
   /**
    * Builds permissions for the entity_type granularity.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
    * @return array
@@ @@
   /**
    * Builds permissions for the bundle granularity.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


49) modules/contrib/entity/src/EntityPermissionProvider.php:42

    ---------- begin diff ----------
@@ @@
   /**
    * Builds permissions for the entity_type granularity.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
    * @return array
@@ @@
   /**
    * Builds permissions for the bundle granularity.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


50) modules/contrib/entity/src/EntityAccessControlHandlerBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessControlHandler as CoreEntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
     $account = $this->prepareUser($account);
-    /** @var \Drupal\Core\Access\AccessResult $result */
+    /** @var AccessResult $result */
     $result = parent::checkAccess($entity, $operation, $account);

     if ($result->isNeutral()) {
@@ @@
   /**
    * Checks the entity operation and bundle permissions.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which to check access.
    * @param string $operation
    *   The entity operation. Usually one of 'view', 'view label', 'update',
    *   'duplicate' or 'delete'.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user for which to check access.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   protected function checkEntityPermissions(EntityInterface $entity, $operation, AccountInterface $account) {
@@ @@
   /**
    * Checks the entity operation and bundle permissions, with owners.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which to check access.
    * @param string $operation
    *   The entity operation. Usually one of 'view', 'view label', 'update',
    *   'duplicate' or 'delete'.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user for which to check access.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   protected function checkEntityOwnerPermissions(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\user\EntityOwnerInterface $entity */
+    /** @var EntityOwnerInterface $entity */
     // The "any" permission grants access regardless of the entity owner.
     $any_result = AccessResult::allowedIfHasPermissions($account, [
       "$operation any {$entity->getEntityTypeId()}",
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


51) modules/contrib/entity/src/EntityAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity;

+use Drupal\user\EntityOwnerInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkEntityOwnerPermissions(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\user\EntityOwnerInterface $entity */
+    /** @var EntityOwnerInterface $entity */
     if ($operation === 'view') {
       if ($entity instanceof EntityPublishedInterface && !$entity->isPublished()) {
         if ($account->id() != $entity->getOwnerId()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


52) modules/contrib/entity/src/Controller/RevisionOverviewController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity\Controller;

+use Drupal\user\EntityOwnerInterface;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * Creates a new RevisionOverviewController instance.
    *
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter.
    */
   public function __construct(DateFormatterInterface $date_formatter, RendererInterface $renderer) {
@@ @@
   /**
    * Generates an overview table of older revisions of an entity.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    *
    * @return array
@@ @@
    * {@inheritdoc}
    */
   protected function getRevisionDescription(ContentEntityInterface $revision, $is_default = FALSE) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface|\Drupal\user\EntityOwnerInterface|\Drupal\Core\Entity\RevisionLogInterface $revision */
+    /** @var ContentEntityInterface|EntityOwnerInterface|RevisionLogInterface $revision */
     if ($revision instanceof RevisionLogInterface) {
       // Use revision link to link to revisions that are not active.
       $date = $this->dateFormatter->format($revision->getRevisionCreationTime(), 'short');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


53) modules/contrib/entity/src/Controller/RevisionControllerTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity\Controller;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Language\LanguageManagerInterface;
+use Drupal\Core\Entity\ContentEntityStorageInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * Returns the entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    */
   abstract protected function entityTypeManager();

@@ @@
   /**
    * Returns the langauge manager.
    *
-   * @return \Drupal\Core\Language\LanguageManagerInterface
+   * @return LanguageManagerInterface
    */
   abstract public function languageManager();

@@ @@
   /**
    * Determines if the user has permission to revert revisions.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to check revert access for.
    *
    * @return bool
@@ @@
   /**
    * Determines if the user has permission to delete revisions.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to check delete revision access for.
    *
    * @return bool
@@ @@
   /**
    * Builds a link to revert an entity revision.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity_revision
+   * @param EntityInterface $entity_revision
    *   The entity to build a revert revision link for.
    *
    * @return array
@@ @@
   /**
    * Builds a link to delete an entity revision.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity_revision
+   * @param EntityInterface $entity_revision
    *   The entity to build a delete revision link for.
    *
    * @return array
@@ @@
    * E.g. Node describes its revisions using {date} by {username}. For the
    *   non-current revision, it also provides a link to view that revision.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $revision
+   * @param ContentEntityInterface $revision
    *   The entity revision.
    * @param bool $is_current
    *   TRUE if the revision is the current revision.
@@ @@
   /**
    * Loads all revision IDs of an entity sorted by revision ID descending.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    *
    * @return mixed[]
@@ @@
   /**
    * Generates an overview table of older revisions of an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   An entity object.
    *
    * @return array
@@ @@
     $langcode = $this->languageManager()
       ->getCurrentLanguage(LanguageInterface::TYPE_CONTENT)
       ->getId();
-    /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $entity_storage */
+    /** @var ContentEntityStorageInterface $entity_storage */
     $entity_storage = $this->entityTypeManager()->getStorage($entity->getEntityTypeId());
     $revision_ids = $this->revisionIds($entity);
     $entity_revisions = $entity_storage->loadMultipleRevisions($revision_ids);
@@ @@
     $rows = [];
     foreach ($entity_revisions as $revision) {
       $row = [];
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $revision */
+      /** @var ContentEntityInterface $revision */
       if (!$translatable || ($revision->hasTranslation($langcode) && $revision->getTranslation($langcode)->isRevisionTranslationAffected())) {
         $row[] = $this->getRevisionDescription($revision, $revision->isDefaultRevision());

@@ @@
   /**
    * Get the links of the operations for an entity revision.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity_revision
+   * @param EntityInterface $entity_revision
    *   The entity to build the revision links for.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


54) modules/contrib/entity/src/Controller/EntityDuplicateController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity\Controller;

+use Drupal\entity\Form\EntityDuplicateFormInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;

@@ @@
   /**
    * Constructs a new EntityDuplicateController object.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeManagerInterface $entity_type_manager, FormBuilderInterface $form_builder, TranslationInterface $string_translation) {
@@ @@
   /**
    * Builds the duplicate form.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    *
    * @return array
@@ @@
     $entity_type_id = $route_match->getRouteObject()->getDefault('entity_type_id');
     $source_entity = $route_match->getParameter($entity_type_id);
     $entity = $source_entity->createDuplicate();
-    /** @var \Drupal\entity\Form\EntityDuplicateFormInterface $form_object */
+    /** @var EntityDuplicateFormInterface $form_object */
     $form_object = $this->entityTypeManager->getFormObject($entity_type_id, 'duplicate');
     $form_object->setEntity($entity);
     $form_object->setSourceEntity($source_entity);
@@ @@
   /**
    * Provides the duplicate form title.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


55) modules/contrib/entity/src/BundlePlugin/BundlePluginUninstallValidator.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs the object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation) {
@@ @@
     $reasons = [];

     foreach (entity_get_bundle_plugin_entity_types() as $entity_type) {
-      /** @var \Drupal\entity\BundlePlugin\BundlePluginHandler $bundle_handler */
+      /** @var BundlePluginHandler $bundle_handler */
       $bundle_handler = $this->entityTypeManager->getHandler($entity_type->id(), 'bundle_plugin');
       $bundles = $bundle_handler->getBundleInfo();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


56) modules/contrib/entity/src/BundlePlugin/BundlePluginInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity\BundlePlugin;

+use Drupal\entity\BundleFieldDefinition;
 use Drupal\Component\Plugin\PluginInspectionInterface;

 /**
@@ @@
    * Field names must be unique across all bundles.
    * It is recommended to prefix them with the bundle name (plugin ID).
    *
-   * @return \Drupal\entity\BundleFieldDefinition[]
+   * @return BundleFieldDefinition[]
    *   An array of bundle field definitions, keyed by field name.
    */
   public function buildFieldDefinitions();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


57) modules/contrib/entity/src/BundlePlugin/BundlePluginInstallerInterface.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Installs the bundle plugins provided by the specified modules.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    * @param array $modules
    *   The modules.
@@ @@
   /**
    * Uninstalls the bundle plugins provided by the specified modules.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    * @param array $modules
    *   The modules.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


58) modules/contrib/entity/src/BundlePlugin/BundlePluginInstaller.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity\BundlePlugin;

+use Drupal\entity\BundleFieldDefinition;
 use Drupal\Core\Entity\EntityBundleListenerInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity bundle listener.
    *
-   * @var \Drupal\Core\Entity\EntityBundleListenerInterface
+   * @var EntityBundleListenerInterface
    */
   protected $entityBundleListener;

@@ @@
   /**
    * The field storage definition listener.
    *
-   * @var \Drupal\Core\Field\FieldStorageDefinitionListenerInterface
+   * @var FieldStorageDefinitionListenerInterface
    */
   protected $fieldStorageDefinitionListener;

@@ @@
   /**
    * The field definition listener.
    *
-   * @var \Drupal\Core\Field\FieldDefinitionListenerInterface
+   * @var FieldDefinitionListenerInterface
    */
   protected $fieldDefinitionListener;

@@ @@
   /**
    * Constructs a new BundlePluginInstaller object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityBundleListenerInterface $entity_bundle_listener
+   * @param EntityBundleListenerInterface $entity_bundle_listener
    *   The entity bundle listener.
-   * @param \Drupal\Core\Field\FieldStorageDefinitionListenerInterface $field_storage_definition_listener
+   * @param FieldStorageDefinitionListenerInterface $field_storage_definition_listener
    *   The field storage definition listener.
-   * @param \Drupal\Core\Field\FieldDefinitionListenerInterface $field_definition_listener
+   * @param FieldDefinitionListenerInterface $field_definition_listener
    *   The field definition listener.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityBundleListenerInterface $entity_bundle_listener, FieldStorageDefinitionListenerInterface $field_storage_definition_listener, FieldDefinitionListenerInterface $field_definition_listener) {
@@ @@
      * This way we can allow a module to re-use the same field within multiple
      * bundles, allowing e.g to subclass a bundle plugin.
      *
-     * @var \Drupal\entity\BundleFieldDefinition[] $field_storage_definitions
+     * @var BundleFieldDefinition[] $field_storage_definitions
      */
     $field_storage_definitions = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


59) modules/contrib/entity/src/BundlePlugin/BundlePluginHandlerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity\BundlePlugin;

+use Drupal\entity\BundleFieldDefinition;
 use Drupal\Core\Entity\EntityHandlerInterface;

 /**
@@ @@
    * @param string $bundle
    *   The bundle name.
    *
-   * @return \Drupal\entity\BundleFieldDefinition[]
+   * @return BundleFieldDefinition[]
    *   An array of bundle field definitions, keyed by field name.
    */
   public function getFieldDefinitions($bundle);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


60) modules/contrib/entity/src/BundlePlugin/BundlePluginHandler.php:10

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface
+   * @var EntityTypeInterface
    */
   protected $entityType;

@@ @@
   /**
    * The bundle plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $pluginManager;

@@ @@
   /**
    * Constructs a new BundlePluginHandler object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $plugin_manager
+   * @param PluginManagerInterface $plugin_manager
    *   The bundle plugin manager.
    */
   public function __construct(EntityTypeInterface $entity_type, PluginManagerInterface $plugin_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


61) modules/contrib/entity/src/BundleEntityDuplicatorInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Duplicates the bundle entity, its fields and displays.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $bundle_entity
+   * @param ConfigEntityInterface $bundle_entity
    *   The bundle entity.
    * @param array $values
    *   An array of values to set, keyed by property name. Needs to at least
    *   contain a new ID.
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityInterface
+   * @return ConfigEntityInterface
    *   The new bundle entity, after it has been saved.
    *
    * @throws \InvalidArgumentException
@@ @@
   /**
    * Duplicates the bundle entity's fields.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $bundle_entity
+   * @param ConfigEntityInterface $bundle_entity
    *   The bundle entity.
    * @param string $target_bundle_id
    *   The target bundle ID.
@@ @@
   /**
    * Duplicates the bundle entity's view/form displays.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $bundle_entity
+   * @param ConfigEntityInterface $bundle_entity
    *   The bundle entity.
    * @param string $target_bundle_id
    *   The target bundle ID.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


62) modules/contrib/entity/src/BundleEntityDuplicator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity;

+use Drupal\Core\Field\FieldConfigInterface;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new BundleEntityDuplicator object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
     $id_prefix = $bundle_of . '.' . $bundle_entity->id() . '.';
     $fields = $this->loadEntities('field_config', $id_prefix);
     foreach ($fields as $field) {
-      /** @var \Drupal\Core\Field\FieldConfigInterface $field */
+      /** @var FieldConfigInterface $field */
       $duplicate_field = $field->createDuplicate();
       $duplicate_field->set('id', $bundle_of . '.' . $target_bundle_id . '.' . $field->getName());
       $duplicate_field->set('bundle', $target_bundle_id);
@@ @@
     $form_displays = $this->loadEntities('entity_form_display', $id_prefix);
     $view_displays = $this->loadEntities('entity_view_display', $id_prefix);
     foreach ($form_displays as $form_display) {
-      /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+      /** @var EntityFormDisplayInterface $form_display */
       $duplicate_form_display = $form_display->createDuplicate();
       $duplicate_form_display->set('id', $bundle_of . '.' . $target_bundle_id . '.' . $form_display->getMode());
       $duplicate_form_display->set('bundle', $target_bundle_id);
@@ @@
       $duplicate_form_display->save();
     }
     foreach ($view_displays as $view_display) {
-      /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $view_display */
+      /** @var EntityViewDisplayInterface $view_display */
       $duplicate_view_display = $view_display->createDuplicate();
       $duplicate_view_display->set('id', $bundle_of . '.' . $target_bundle_id . '.' . $view_display->getMode());
       $duplicate_view_display->set('bundle', $target_bundle_id);
@@ @@
    * @param string $id_prefix
    *   The ID prefix.
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityInterface[]
+   * @return ConfigEntityInterface[]
    *   The loaded config entities.
    */
   protected function loadEntities($entity_type_id, $id_prefix) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


63) modules/contrib/entity/src/BulkFormEntityListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\system\Entity\Action;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
   /**
    * The entities being listed.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]
+   * @var EntityInterface[]
    */
   protected $entities = [];

@@ @@
    * @todo Change the typehint to ActionConfigEntityInterface when
    *   https://www.drupal.org/project/drupal/issues/3017214 is in.
    *
-   * @var \Drupal\system\Entity\Action[]
+   * @var Action[]
    */
   protected $actions;

@@ @@
   /**
    * The action storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $actionStorage;

@@ @@
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;

@@ @@
   /**
    * Constructs a new BulkFormEntityListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $action_storage
+   * @param EntityStorageInterface $action_storage
    *   The action storage.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $entity_storage, EntityStorageInterface $action_storage, FormBuilderInterface $form_builder) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


64) modules/contrib/entity/src/Access/EntityRevisionRouteAccessChecker.php:16

    ---------- begin diff ----------
@@ @@
 class EntityRevisionRouteAccessChecker implements AccessInterface {

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The currently active route match object.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * Creates a new EntityRevisionRouteAccessChecker instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The currently active route match object.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, RouteMatchInterface $route_match) {
@@ @@
   /**
    * Performs access checks.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity for which to check access.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user for which to check access.
    * @param string $operation
    *   The entity operation. Usually one of 'view', 'view label', 'update' or
@@ @@
     $entity_type_id = $entity->getEntityTypeId();
     $entity_access = $this->entityTypeManager->getAccessControlHandler($entity_type_id);

-    /** @var \Drupal\Core\Entity\EntityStorageInterface $entity_storage */
+    /** @var EntityStorageInterface $entity_storage */
     $entity_storage = $this->entityTypeManager->getStorage($entity_type_id);

     $map = [
@@ @@
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
    *
    * @return int
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


65) modules/contrib/entity/entity.views.inc:13

    ---------- begin diff ----------
@@ @@

   $data = [];
   foreach ($entity_types as $entity_type) {
-    /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+    /** @var EntityTypeInterface $entity_type */
     if ($entity_type->isRevisionable()) {
       $entity_type_id = $entity_type->id();
       $revision_table = $entity_type->getRevisionDataTable() ?: $entity_type->getRevisionTable();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


66) modules/contrib/entity/entity.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\entity\QueryAccess\QueryAccessHandlerInterface;
 /**
  * @file
  * Provides expanded entity APIs.
@@ @@
 /**
  * Gets the entity types which use bundle plugins.
  *
- * @return \Drupal\Core\Entity\EntityTypeInterface[]
+ * @return EntityTypeInterface[]
  *   The entity types.
  */
 function entity_get_bundle_plugin_entity_types() {
@@ @@
 function entity_entity_bundle_info() {
   $bundles = [];
   foreach (entity_get_bundle_plugin_entity_types() as $entity_type) {
-    /** @var \Drupal\entity\BundlePlugin\BundlePluginHandler $bundle_handler */
+    /** @var BundlePluginHandler $bundle_handler */
     $bundle_handler = \Drupal::entityTypeManager()->getHandler($entity_type->id(), 'bundle_plugin');
     $bundles[$entity_type->id()] = $bundle_handler->getBundleInfo();
   }
@@ @@
  */
 function entity_entity_field_storage_info(EntityTypeInterface $entity_type) {
   if ($entity_type->hasHandlerClass('bundle_plugin')) {
-    /** @var \Drupal\entity\BundlePlugin\BundlePluginHandler $bundle_handler */
+    /** @var BundlePluginHandler $bundle_handler */
     $bundle_handler = \Drupal::entityTypeManager()->getHandler($entity_type->id(), 'bundle_plugin');
     return $bundle_handler->getFieldStorageDefinitions();
   }
@@ @@
  */
 function entity_entity_bundle_field_info(EntityTypeInterface $entity_type, $bundle) {
   if ($entity_type->hasHandlerClass('bundle_plugin')) {
-    /** @var \Drupal\entity\BundlePlugin\BundlePluginHandler $bundle_handler */
+    /** @var BundlePluginHandler $bundle_handler */
     $bundle_handler = \Drupal::entityTypeManager()->getHandler($entity_type->id(), 'bundle_plugin');
     return $bundle_handler->getFieldDefinitions($bundle);
   }
@@ @@
   if (!$entity_type->hasHandlerClass('query_access')) {
     return [];
   }
-  /** @var \Drupal\entity\QueryAccess\QueryAccessHandlerInterface $query_access */
+  /** @var QueryAccessHandlerInterface $query_access */
   $query_access = \Drupal::entityTypeManager()->getHandler($entity_type->id(), 'query_access');
   $conditions = $query_access->getConditions('view', $account);
   if ($conditions->isAlwaysFalse()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 66 files have been changed by Rector                                      

