diff --git a/composer.json b/composer.json
index 03d15d0..e61f36f 100644
--- a/composer.json
+++ b/composer.json
@@ -22,8 +22,8 @@
     "source": "https://git.drupalcode.org/project/entity_sync"
   },
   "require": {
-    "drupal/core": "^8.8 | ^9",
-    "drupal/ultimate_cron": "^2.0@alpha"
+    "drupal/ultimate_cron": "^2.0@alpha",
+    "drupal/core": "^8.8 | ^9 || ^10"
   },
   "require-dev": {
     "symfony/yaml": "^2.0.0|^3.0.0|^4.0.0|^5.0.0",
diff --git a/entity_sync.info.yml b/entity_sync.info.yml
index a96b594..729e42b 100644
--- a/entity_sync.info.yml
+++ b/entity_sync.info.yml
@@ -2,4 +2,4 @@ name: Entity Synchronization
 description: Provides a framework for synchronizing Drupal entities to and from remote systems.
 type: module
 package: Sync
-core_version_requirement: ^8.8 || ^9
+core_version_requirement: ^8.8 || ^9 || ^10
diff --git a/src/Client/ClientFactory.php b/src/Client/ClientFactory.php
index 855b92b..de1e05c 100644
--- a/src/Client/ClientFactory.php
+++ b/src/Client/ClientFactory.php
@@ -28,7 +28,7 @@ class ClientFactory implements ContainerAwareInterface {
   /**
    * Constructs a new ClientFactory object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
@@ -41,10 +41,10 @@ class ClientFactory implements ContainerAwareInterface {
    * @param string $sync_id
    *   The ID of the sync that we will be performing operations for.
    *
-   * @return \Drupal\entity_sync\Client\ClientInterface
+   * @return ClientInterface
    *   The initialized client.
    *
-   * @throws \Drupal\entity_sync\Exception\InvalidConfigurationException
+   * @throws InvalidConfigurationException
    */
   public function get($sync_id) {
     $sync = $this->configFactory->get(
@@ -83,10 +83,10 @@ class ClientFactory implements ContainerAwareInterface {
    *   The ID of the sync that we will be performing operations for, if
    *   available.
    *
-   * @return \Drupal\entity_sync\Client\ClientInterface
+   * @return ClientInterface
    *   The initialized client.
    *
-   * @throws \Drupal\entity_sync\Exception\InvalidConfigurationException
+   * @throws InvalidConfigurationException
    *   When the client configuration is invalid.
    */
   public function getByClientConfig(array $client_config, $sync_id = NULL) {
@@ -127,10 +127,10 @@ class ClientFactory implements ContainerAwareInterface {
    *   The ID of the sync that we will be performing operations for, if
    *   available.
    *
-   * @return \Drupal\entity_sync\Client\ClientInterface
+   * @return ClientInterface
    *   The initialized client.
    *
-   * @throws \Drupal\entity_sync\Exception\InvalidConfigurationException
+   * @throws InvalidConfigurationException
    *   When the client configuration is invalid.
    */
   protected function getByService(array $client_config, $sync_id = NULL) {
@@ -171,10 +171,10 @@ class ClientFactory implements ContainerAwareInterface {
    *   The ID of the sync that we will be performing operations for, if
    *   available.
    *
-   * @return \Drupal\entity_sync\Client\ClientInterface
+   * @return ClientInterface
    *   The initialized client.
    *
-   * @throws \Drupal\entity_sync\Exception\InvalidConfigurationException
+   * @throws InvalidConfigurationException
    *   When the client configuration is invalid.
    */
   protected function getByFactory(array $client_config, $sync_id = NULL) {
diff --git a/src/Client/ProviderClientFactoryInterface.php b/src/Client/ProviderClientFactoryInterface.php
index 25188ab..6acf94b 100644
--- a/src/Client/ProviderClientFactoryInterface.php
+++ b/src/Client/ProviderClientFactoryInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_sync\Client;
 
+use Drupal\entity_sync\Exception\InvalidConfigurationException;
 /**
  * Defines the interface for client factories implemented by providers.
  *
@@ -28,10 +29,10 @@ interface ProviderClientFactoryInterface {
    *   An associative array containing parameters that the factory can used to
    *   create the client.
    *
-   * @return \Drupal\entity_sync\Client\ClientInterface
+   * @return ClientInterface
    *   The initialized client.
    *
-   * @throws \Drupal\entity_sync\Exception\InvalidConfigurationException
+   * @throws InvalidConfigurationException
    */
   public function get($sync_id, array $parameters);
 
diff --git a/src/Commands/Export.php b/src/Commands/Export.php
index 6683271..662f152 100644
--- a/src/Commands/Export.php
+++ b/src/Commands/Export.php
@@ -17,32 +17,32 @@ class Export extends DrushCommands {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The Entity Sync export entity manager.
    *
-   * @var \Drupal\entity_sync\Export\EntityManagerInterface
+   * @var EntityManagerInterface
    */
   protected $manager;
 
   /**
    * Constructs a new Export object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\entity_sync\Export\EntityManagerInterface $manager
+   * @param EntityManagerInterface $manager
    *   The Entity Sync export entity manager.
    */
   public function __construct(
diff --git a/src/Commands/Import.php b/src/Commands/Import.php
index 930fbb0..aca63f9 100644
--- a/src/Commands/Import.php
+++ b/src/Commands/Import.php
@@ -18,14 +18,14 @@ class Import extends DrushCommands {
   /**
    * The Entity Sync import entity manager.
    *
-   * @var \Drupal\entity_sync\Import\ManagerInterface
+   * @var ManagerInterface
    */
   protected $manager;
 
   /**
    * Constructs a new Import object.
    *
-   * @param \Drupal\entity_sync\Import\ManagerInterface $manager
+   * @param ManagerInterface $manager
    *   The Entity Sync import manager.
    */
   public function __construct(ManagerInterface $manager) {
diff --git a/src/Commands/State.php b/src/Commands/State.php
index 174dca0..b716e51 100644
--- a/src/Commands/State.php
+++ b/src/Commands/State.php
@@ -18,14 +18,14 @@ class State extends DrushCommands {
   /**
    * The Entity Sync state manager.
    *
-   * @var \Drupal\entity_sync\StateManagerInterface
+   * @var StateManagerInterface
    */
   protected $stateManager;
 
   /**
    * Constructs a new State object.
    *
-   * @param \Drupal\entity_sync\StateManagerInterface $state_manager
+   * @param StateManagerInterface $state_manager
    *   The Entity Sync state manager.
    */
   public function __construct(StateManagerInterface $state_manager) {
diff --git a/src/Config/Manager.php b/src/Config/Manager.php
index 78bd4cd..8846fb5 100644
--- a/src/Config/Manager.php
+++ b/src/Config/Manager.php
@@ -18,14 +18,14 @@ class Manager implements ManagerInterface {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Constructs a new Manager instance.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
diff --git a/src/Config/ManagerInterface.php b/src/Config/ManagerInterface.php
index dc416d8..273e07b 100644
--- a/src/Config/ManagerInterface.php
+++ b/src/Config/ManagerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_sync\Config;
 
+use Drupal\Core\Config\ImmutableConfig;
 /**
  * Defines the interface for the Entity Sync configuration manager.
  *
@@ -30,7 +31,7 @@ interface ManagerInterface {
    *     - status: (bool) Return only synchronizations that have the given
    *       operation with the given status.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig[]
+   * @return ImmutableConfig[]
    *   An array containing the synchronization configurations.
    *
    * @I Support filtering synchronizations per entity bundle
diff --git a/src/EntityManagerBase.php b/src/EntityManagerBase.php
index 0ecd6b3..a41ac10 100644
--- a/src/EntityManagerBase.php
+++ b/src/EntityManagerBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_sync;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\entity_sync\Event\InitiateOperationEvent;
 use Drupal\entity_sync\Event\PostTerminateOperationEvent;
 use Drupal\entity_sync\Event\PreInitiateOperationEvent;
@@ -18,7 +19,7 @@ class EntityManagerBase {
   /**
    * Checks that the given operation is enabled for the given synchronization.
    *
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for the synchronization that defines the
    *   operation we are currently executing.
    * @param string $operation
@@ -54,7 +55,7 @@ class EntityManagerBase {
    *   The name of the operation that will be initiated.
    * @param array $context
    *   The context of the operation we are currently executing.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    * @param array $data
@@ -108,7 +109,7 @@ class EntityManagerBase {
    *   The name of the operation being initiated.
    * @param array $context
    *   The context of the operation we are currently executing.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    * @param array $data
@@ -140,7 +141,7 @@ class EntityManagerBase {
    *   The name of the operation being terminated.
    * @param array $context
    *   The context of the operation we are currently executing.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    * @param array $data
@@ -186,7 +187,7 @@ class EntityManagerBase {
    *   The name of the operation that terminated.
    * @param array $context
    *   The context of the operation we are currently executing.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    * @param array $data
@@ -226,12 +227,12 @@ class EntityManagerBase {
    * because currently we don't have the local entities available in the list
    * terminate event.
    *
-   * @param \Drupal\entity_sync\Event\TerminateOperationEvent $event
+   * @param TerminateOperationEvent $event
    *   The terminate event.
    * @param string $event_name
    *   The event name.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    *   The local entity or NULL if none available for the given event type.
    *
    * @I Support saving the local entity for export terminate events
diff --git a/src/Event/InitiateOperationEvent.php b/src/Event/InitiateOperationEvent.php
index 758ed7c..d1fa699 100644
--- a/src/Event/InitiateOperationEvent.php
+++ b/src/Event/InitiateOperationEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\entity_sync\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Config\ImmutableConfig;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Defines the operation initiate event.
@@ -29,7 +29,7 @@ class InitiateOperationEvent extends Event {
   /**
    * The synchronization configuration object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $sync;
 
@@ -47,7 +47,7 @@ class InitiateOperationEvent extends Event {
    *   The operation that is being executed.
    * @param array $context
    *   The context array.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    * @param array $data
@@ -88,7 +88,7 @@ class InitiateOperationEvent extends Event {
   /**
    * Gets the synchronization configuration object.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig
+   * @return ImmutableConfig
    *   The synchronization configuration object.
    */
   public function getSync() {
diff --git a/src/Event/PostTerminateOperationEvent.php b/src/Event/PostTerminateOperationEvent.php
index d22bc0a..f02639b 100644
--- a/src/Event/PostTerminateOperationEvent.php
+++ b/src/Event/PostTerminateOperationEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\entity_sync\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Config\ImmutableConfig;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Defines the operation post-terminate event.
@@ -29,7 +29,7 @@ class PostTerminateOperationEvent extends Event {
   /**
    * The synchronization configuration object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $sync;
 
@@ -47,7 +47,7 @@ class PostTerminateOperationEvent extends Event {
    *   The operation that was terminated.
    * @param array $context
    *   The context array.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    * @param array $data
@@ -88,7 +88,7 @@ class PostTerminateOperationEvent extends Event {
   /**
    * Gets the synchronization configuration object.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig
+   * @return ImmutableConfig
    *   The synchronization configuration object.
    */
   public function getSync() {
diff --git a/src/Event/PreInitiateOperationEvent.php b/src/Event/PreInitiateOperationEvent.php
index 6860f9e..e55493c 100644
--- a/src/Event/PreInitiateOperationEvent.php
+++ b/src/Event/PreInitiateOperationEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\entity_sync\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Config\ImmutableConfig;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Defines the operation pre-initiate event.
@@ -30,7 +30,7 @@ class PreInitiateOperationEvent extends Event {
   /**
    * The synchronization configuration object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $sync;
 
@@ -62,7 +62,7 @@ class PreInitiateOperationEvent extends Event {
    *   The operation that is being executed.
    * @param array $context
    *   The context array.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    * @param array $data
@@ -106,7 +106,7 @@ class PreInitiateOperationEvent extends Event {
   /**
    * Gets the synchronization configuration object.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig
+   * @return ImmutableConfig
    *   The synchronization configuration object.
    */
   public function getSync() {
diff --git a/src/Event/TerminateOperationEvent.php b/src/Event/TerminateOperationEvent.php
index b01fcf0..2ec2849 100644
--- a/src/Event/TerminateOperationEvent.php
+++ b/src/Event/TerminateOperationEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\entity_sync\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Config\ImmutableConfig;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Defines the operation terminate event.
@@ -29,7 +29,7 @@ class TerminateOperationEvent extends Event {
   /**
    * The synchronization configuration object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $sync;
 
@@ -66,7 +66,7 @@ class TerminateOperationEvent extends Event {
    *   The operation that was executed.
    * @param array $context
    *   The context array.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    * @param array $data
@@ -109,7 +109,7 @@ class TerminateOperationEvent extends Event {
   /**
    * Gets the synchronization configuration object.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig
+   * @return ImmutableConfig
    *   The synchronization configuration object.
    */
   public function getSync() {
diff --git a/src/EventSubscriber/DefaultExportFieldMapping.php b/src/EventSubscriber/DefaultExportFieldMapping.php
index 8799ae8..55b54db 100644
--- a/src/EventSubscriber/DefaultExportFieldMapping.php
+++ b/src/EventSubscriber/DefaultExportFieldMapping.php
@@ -28,7 +28,7 @@ class DefaultExportFieldMapping implements EventSubscriberInterface {
    * The default field mapping is defined in the synchronization configuration
    * object.
    *
-   * @param \Drupal\entity_sync\Export\Event\FieldMappingEvent $event
+   * @param FieldMappingEvent $event
    *   The field mapping event.
    */
   public function buildFieldMapping(FieldMappingEvent $event) {
diff --git a/src/EventSubscriber/DefaultExportLocalEntityMapping.php b/src/EventSubscriber/DefaultExportLocalEntityMapping.php
index b0b99b7..82d7d7c 100644
--- a/src/EventSubscriber/DefaultExportLocalEntityMapping.php
+++ b/src/EventSubscriber/DefaultExportLocalEntityMapping.php
@@ -29,7 +29,7 @@ class DefaultExportLocalEntityMapping implements EventSubscriberInterface {
    * The default local entity mapping is defined in the synchronization
    * configuration object.
    *
-   * @param \Drupal\entity_sync\Export\Event\LocalEntityMappingEvent $event
+   * @param LocalEntityMappingEvent $event
    *   The local entity mapping event.
    */
   public function buildEntityMapping(LocalEntityMappingEvent $event) {
diff --git a/src/EventSubscriber/DefaultImportFieldMapping.php b/src/EventSubscriber/DefaultImportFieldMapping.php
index 2203a83..5a4e959 100644
--- a/src/EventSubscriber/DefaultImportFieldMapping.php
+++ b/src/EventSubscriber/DefaultImportFieldMapping.php
@@ -28,7 +28,7 @@ class DefaultImportFieldMapping implements EventSubscriberInterface {
    * The default field mapping is defined in the synchronization configuration
    * object.
    *
-   * @param \Drupal\entity_sync\Import\Event\FieldMappingEvent $event
+   * @param FieldMappingEvent $event
    *   The field mapping event.
    */
   public function buildFieldMapping(FieldMappingEvent $event) {
diff --git a/src/EventSubscriber/DefaultImportLocalEntityMapping.php b/src/EventSubscriber/DefaultImportLocalEntityMapping.php
index 192a8d7..e689aea 100644
--- a/src/EventSubscriber/DefaultImportLocalEntityMapping.php
+++ b/src/EventSubscriber/DefaultImportLocalEntityMapping.php
@@ -29,7 +29,7 @@ class DefaultImportLocalEntityMapping implements EventSubscriberInterface {
    * The default local entity mapping is defined in the synchronization
    * configuration object.
    *
-   * @param \Drupal\entity_sync\Import\Event\LocalEntityMappingEvent $event
+   * @param LocalEntityMappingEvent $event
    *   The remote ID mapping event.
    */
   public function buildEntityMapping(LocalEntityMappingEvent $event) {
diff --git a/src/EventSubscriber/DefaultImportRemoteEntityMapping.php b/src/EventSubscriber/DefaultImportRemoteEntityMapping.php
index 18d391b..099a698 100644
--- a/src/EventSubscriber/DefaultImportRemoteEntityMapping.php
+++ b/src/EventSubscriber/DefaultImportRemoteEntityMapping.php
@@ -18,14 +18,14 @@ class DefaultImportRemoteEntityMapping implements EventSubscriberInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new DefaultImportRemoteEntityMapping object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -48,7 +48,7 @@ class DefaultImportRemoteEntityMapping implements EventSubscriberInterface {
    * The default entity mapping is defined in the synchronization configuration
    * object.
    *
-   * @param \Drupal\entity_sync\Import\Event\RemoteEntityMappingEvent $event
+   * @param RemoteEntityMappingEvent $event
    *   The entity mapping event.
    */
   public function buildEntityMapping(RemoteEntityMappingEvent $event) {
diff --git a/src/EventSubscriber/ManagedExportLocalEntityTerminate.php b/src/EventSubscriber/ManagedExportLocalEntityTerminate.php
index 6fd94a2..4c8f15d 100644
--- a/src/EventSubscriber/ManagedExportLocalEntityTerminate.php
+++ b/src/EventSubscriber/ManagedExportLocalEntityTerminate.php
@@ -17,14 +17,14 @@ class ManagedExportLocalEntityTerminate implements EventSubscriberInterface {
   /**
    * The Entity Sync import field manager.
    *
-   * @var \Drupal\entity_sync\Import\FieldManagerInterface
+   * @var FieldManagerInterface
    */
   protected $fieldManager;
 
   /**
    * Constructs a new ManagedExportLocalEntityTerminate object.
    *
-   * @param \Drupal\entity_sync\Import\FieldManagerInterface $field_manager
+   * @param FieldManagerInterface $field_manager
    *   The import field manager.
    */
   public function __construct(FieldManagerInterface $field_manager) {
@@ -53,7 +53,7 @@ class ManagedExportLocalEntityTerminate implements EventSubscriberInterface {
    * entity as a result of a local entity update in which case we may have a
    * remote ID already set.
    *
-   * @param \Drupal\entity_sync\Event\TerminateOperationEvent $event
+   * @param TerminateOperationEvent $event
    *   The terminate operation event.
    *
    * @I Do not set the sync fields if the entity was not created or updated
diff --git a/src/EventSubscriber/ManagedImportRemoteListFilters.php b/src/EventSubscriber/ManagedImportRemoteListFilters.php
index 2d6ed0b..db8d830 100644
--- a/src/EventSubscriber/ManagedImportRemoteListFilters.php
+++ b/src/EventSubscriber/ManagedImportRemoteListFilters.php
@@ -24,23 +24,23 @@ class ManagedImportRemoteListFilters implements EventSubscriberInterface {
   /**
    * The Entity Sync state manager.
    *
-   * @var \Drupal\entity_sync\StateManagerInterface
+   * @var StateManagerInterface
    */
   protected $stateManager;
 
   /**
    * The system time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * Constructs a new ManagedImportRemoteListFilters object.
    *
-   * @param \Drupal\entity_sync\StateManagerInterface $state_manager
+   * @param StateManagerInterface $state_manager
    *   The Entity Sync state manager service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The system time service.
    */
   public function __construct(
@@ -81,7 +81,7 @@ class ManagedImportRemoteListFilters implements EventSubscriberInterface {
    *   stopped i.e. datetime A + 1 day, and import maximum 1 day's worth of
    *   entities.
    *
-   * @param \Drupal\entity_sync\Import\Event\ListFiltersEvent $event
+   * @param ListFiltersEvent $event
    *   The list filters event.
    */
   public function buildFilters(ListFiltersEvent $event) {
diff --git a/src/EventSubscriber/ManagedImportRemoteListLock.php b/src/EventSubscriber/ManagedImportRemoteListLock.php
index e46681f..416bd65 100644
--- a/src/EventSubscriber/ManagedImportRemoteListLock.php
+++ b/src/EventSubscriber/ManagedImportRemoteListLock.php
@@ -21,14 +21,14 @@ class ManagedImportRemoteListLock implements EventSubscriberInterface {
   /**
    * The Entity Sync state manager.
    *
-   * @var \Drupal\entity_sync\StateManagerInterface
+   * @var StateManagerInterface
    */
   protected $stateManager;
 
   /**
    * Constructs a new ManagedImportRemoteListLock object.
    *
-   * @param \Drupal\entity_sync\StateManagerInterface $state_manager
+   * @param StateManagerInterface $state_manager
    *   The Entity Sync state manager service.
    */
   public function __construct(StateManagerInterface $state_manager) {
@@ -49,7 +49,7 @@ class ManagedImportRemoteListLock implements EventSubscriberInterface {
   /**
    * Locks the operation before it is initiated, if the operation is managed.
    *
-   * @param \Drupal\entity_sync\Event\PreInitiateOperationEvent $event
+   * @param PreInitiateOperationEvent $event
    *   The pre-initiate operation event.
    */
   public function lockOperation(PreInitiateOperationEvent $event) {
diff --git a/src/EventSubscriber/ManagedImportRemoteListTerminate.php b/src/EventSubscriber/ManagedImportRemoteListTerminate.php
index 3c4c66f..3e221b7 100644
--- a/src/EventSubscriber/ManagedImportRemoteListTerminate.php
+++ b/src/EventSubscriber/ManagedImportRemoteListTerminate.php
@@ -21,23 +21,23 @@ class ManagedImportRemoteListTerminate implements EventSubscriberInterface {
   /**
    * The Entity Sync state manager.
    *
-   * @var \Drupal\entity_sync\StateManagerInterface
+   * @var StateManagerInterface
    */
   protected $stateManager;
 
   /**
    * The system time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * Constructs a new ManagedImportRemoteListTerminate object.
    *
-   * @param \Drupal\entity_sync\StateManagerInterface $state_manager
+   * @param StateManagerInterface $state_manager
    *   The Entity Sync state manager service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The system time service.
    */
   public function __construct(
diff --git a/src/EventSubscriber/ManagedImportRemoteListUnlock.php b/src/EventSubscriber/ManagedImportRemoteListUnlock.php
index 3d5f4a5..0a0b843 100644
--- a/src/EventSubscriber/ManagedImportRemoteListUnlock.php
+++ b/src/EventSubscriber/ManagedImportRemoteListUnlock.php
@@ -21,14 +21,14 @@ class ManagedImportRemoteListUnlock implements EventSubscriberInterface {
   /**
    * The Entity Sync state manager.
    *
-   * @var \Drupal\entity_sync\StateManagerInterface
+   * @var StateManagerInterface
    */
   protected $stateManager;
 
   /**
    * Constructs a new ManagedImportRemoteListUnlock object.
    *
-   * @param \Drupal\entity_sync\StateManagerInterface $state_manager
+   * @param StateManagerInterface $state_manager
    *   The Entity Sync state manager service.
    */
   public function __construct(StateManagerInterface $state_manager) {
@@ -50,7 +50,7 @@ class ManagedImportRemoteListUnlock implements EventSubscriberInterface {
   /**
    * Unlocks the operation after it has terminated, if the operation is managed.
    *
-   * @param \Drupal\entity_sync\Event\PostTerminateOperationEvent $event
+   * @param PostTerminateOperationEvent $event
    *   The post-terminate operation event.
    */
   public function unlockOperation(PostTerminateOperationEvent $event) {
diff --git a/src/Export/EntityManager.php b/src/Export/EntityManager.php
index db6e062..05d8e76 100644
--- a/src/Export/EntityManager.php
+++ b/src/Export/EntityManager.php
@@ -25,14 +25,14 @@ class EntityManager extends EntityManagerBase implements EntityManagerInterface
   /**
    * The client factory.
    *
-   * @var \Drupal\entity_sync\Client\ClientFactory
+   * @var ClientFactory
    */
   protected $clientFactory;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -46,56 +46,56 @@ class EntityManager extends EntityManagerBase implements EntityManagerInterface
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The Entity Sync export field manager.
    *
-   * @var \Drupal\entity_sync\Export\FieldManagerInterface
+   * @var FieldManagerInterface
    */
   protected $fieldManager;
 
   /**
    * The Entity Sync state manager.
    *
-   * @var \Drupal\entity_sync\StateManagerInterface
+   * @var StateManagerInterface
    */
   protected $stateManager;
 
   /**
    * The logger service.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * Constructs a new EntityManager instance.
    *
-   * @param \Drupal\entity_sync\Client\ClientFactory $client_factory
+   * @param ClientFactory $client_factory
    *   The client factory.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    * @param \Drupal\entity_sync\Config\ManagerInterface $config_manager
    *   The Entity Sync configuration manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\entity_sync\Export\FieldManagerInterface $field_manager
+   * @param FieldManagerInterface $field_manager
    *   The Entity Sync export field manager.
-   * @param \Drupal\entity_sync\StateManagerInterface $state_manager
+   * @param StateManagerInterface $state_manager
    *   The Entity Sync export field manager.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
    */
   public function __construct(
@@ -430,10 +430,10 @@ class EntityManager extends EntityManagerBase implements EntityManagerInterface
   /**
    * Runs the actual local entity export operation.
    *
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
-   * @param \Drupal\Core\Entity\ContentEntityInterface[] $local_entities
+   * @param ContentEntityInterface[] $local_entities
    *   The local entities.
    * @param array $options
    *   An associative array of options that determine various aspects of the
@@ -481,10 +481,10 @@ class EntityManager extends EntityManagerBase implements EntityManagerInterface
   /**
    * Runs the actual local entity export operation with its pre/post events.
    *
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $local_entity
+   * @param ContentEntityInterface $local_entity
    *   The local entity.
    * @param array $options
    *   An associative array of options that determine various aspects of the
@@ -539,10 +539,10 @@ class EntityManager extends EntityManagerBase implements EntityManagerInterface
   /**
    * Runs the actual local entity export operation.
    *
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $local_entity
+   * @param ContentEntityInterface $local_entity
    *   The local entity.
    * @param array $options
    *   An associative array of options that determine various aspects of the
@@ -587,9 +587,9 @@ class EntityManager extends EntityManagerBase implements EntityManagerInterface
    * An error is logged instead; the caller may then continue with exporting the
    * next entity, if there is one.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $local_entity
+   * @param ContentEntityInterface $local_entity
    *   The local entity.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    * @param array $options
@@ -629,9 +629,9 @@ class EntityManager extends EntityManagerBase implements EntityManagerInterface
    * If an associated remote entity is identified, the remote entity will be
    * updated. A new remote entity will be created otherwise.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $local_entity
+   * @param ContentEntityInterface $local_entity
    *   The local entity.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    */
@@ -675,9 +675,9 @@ class EntityManager extends EntityManagerBase implements EntityManagerInterface
   /**
    * Export the changes from the given local entity to a new remote entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $local_entity
+   * @param ContentEntityInterface $local_entity
    *   The local entity.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    * @param array $entity_mapping
@@ -717,9 +717,9 @@ class EntityManager extends EntityManagerBase implements EntityManagerInterface
   /**
    * Export the changes from the given local entity to the remote entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $local_entity
+   * @param ContentEntityInterface $local_entity
    *   The local entity.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    * @param array $entity_mapping
@@ -777,7 +777,7 @@ class EntityManager extends EntityManagerBase implements EntityManagerInterface
    *
    * @param \Drupal\core\Entity\ContentEntityInterface $local_entity
    *   The local entity.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    *
@@ -792,7 +792,7 @@ class EntityManager extends EntityManagerBase implements EntityManagerInterface
       $local_entity,
       $sync
     );
-    $this->eventDispatcher->dispatch(Events::LOCAL_ENTITY_MAPPING, $event);
+    $this->eventDispatcher->dispatch($event, Events::LOCAL_ENTITY_MAPPING);
 
     // Return the final mapping.
     return $event->getEntityMapping();
diff --git a/src/Export/EntityManagerInterface.php b/src/Export/EntityManagerInterface.php
index a0b181a..3d54259 100644
--- a/src/Export/EntityManagerInterface.php
+++ b/src/Export/EntityManagerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_sync\Export;
 
+use Drupal\entity_sync\Exception\FieldExportException;
 use Drupal\Core\Entity\ContentEntityInterface;
 
 /**
@@ -44,7 +45,7 @@ interface EntityManagerInterface {
    *
    * @param string $sync_id
    *   The ID of the entity sync.
-   * @param \Drupal\Core\Entity\ContentEntityInterface[] $local_entities
+   * @param ContentEntityInterface[] $local_entities
    *   The local entities.
    * @param array $options
    *   An associative array of options that determine various aspects of the
@@ -92,7 +93,7 @@ interface EntityManagerInterface {
    *
    * @param string $sync_id
    *   The ID of the entity sync.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $local_entity
+   * @param ContentEntityInterface $local_entity
    *   The local entity.
    * @param array $options
    *   An associative array of options that determine various aspects of the
@@ -102,7 +103,7 @@ interface EntityManagerInterface {
    *     subscribers determine how to alter list filters and entity/field
    *     mappings.
    *
-   * @throws \Drupal\entity_sync\Exception\FieldExportException
+   * @throws FieldExportException
    *   When an error occurs while exporting a field.
    */
   public function exportLocalEntity(
@@ -118,7 +119,7 @@ interface EntityManagerInterface {
    * `export_entity` operation for the given entity type and will queue the
    * operation for each one of them.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity for which to queue the export.
    * @param array $options
    *   An associative array of options that determine various aspects of the
diff --git a/src/Export/Event/FieldMappingEvent.php b/src/Export/Event/FieldMappingEvent.php
index e1a973a..e4597b9 100644
--- a/src/Export/Event/FieldMappingEvent.php
+++ b/src/Export/Event/FieldMappingEvent.php
@@ -2,11 +2,10 @@
 
 namespace Drupal\entity_sync\Export\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Entity\EntityInterface;
 
-use Symfony\Component\EventDispatcher\Event;
-
 /**
  * Defines the export field mapping event.
  *
@@ -30,7 +29,7 @@ class FieldMappingEvent extends Event {
   /**
    * The local entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $localEntity;
 
@@ -44,19 +43,19 @@ class FieldMappingEvent extends Event {
   /**
    * The synchronization configuration object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $sync;
 
   /**
    * Constructs a new FieldMappingEvent object.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $local_entity
+   * @param EntityInterface $local_entity
    *   The local entity.
    * @param int|string|null $remote_entity_id
    *   The ID of the remote entity that will be updated, or NULL if we are
    *   creating a new one.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    */
@@ -93,7 +92,7 @@ class FieldMappingEvent extends Event {
   /**
    * Gets the local entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The local entity.
    */
   public function getLocalEntity() {
@@ -113,7 +112,7 @@ class FieldMappingEvent extends Event {
   /**
    * Gets the synchronizatio configuration object.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig
+   * @return ImmutableConfig
    *   The synchronization configuration object.
    */
   public function getSync() {
diff --git a/src/Export/Event/LocalEntityMappingEvent.php b/src/Export/Event/LocalEntityMappingEvent.php
index 5e92b91..ea0d960 100644
--- a/src/Export/Event/LocalEntityMappingEvent.php
+++ b/src/Export/Event/LocalEntityMappingEvent.php
@@ -2,11 +2,10 @@
 
 namespace Drupal\entity_sync\Export\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Entity\EntityInterface;
 
-use Symfony\Component\EventDispatcher\Event;
-
 /**
  * Defines the export local entity mapping event.
  *
@@ -42,23 +41,23 @@ class LocalEntityMappingEvent extends Event {
   /**
    * The local entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $localEntity;
 
   /**
    * The synchronization configuration object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $sync;
 
   /**
    * Constructs a new LocalEntityMappingEvent object.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $local_entity
+   * @param EntityInterface $local_entity
    *   The local entity that's being mapped.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    */
@@ -93,7 +92,7 @@ class LocalEntityMappingEvent extends Event {
   /**
    * Gets the local entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The local entity.
    */
   public function getLocalEntity() {
@@ -103,7 +102,7 @@ class LocalEntityMappingEvent extends Event {
   /**
    * Gets the synchronization configuration object.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig
+   * @return ImmutableConfig
    *   The synchronization configuration object.
    */
   public function getSync() {
diff --git a/src/Export/FieldManager.php b/src/Export/FieldManager.php
index 56c9392..ff83cd8 100644
--- a/src/Export/FieldManager.php
+++ b/src/Export/FieldManager.php
@@ -29,14 +29,14 @@ class FieldManager implements FieldManagerInterface {
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The logger service.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
@@ -45,9 +45,9 @@ class FieldManager implements FieldManagerInterface {
    *
    * @param \Drupal\entity_sync\Config\ManagerInterface $config_manager
    *   The Entity Sync configuration manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
    */
   public function __construct(
@@ -197,7 +197,7 @@ class FieldManager implements FieldManagerInterface {
    * @param int|string|null $remote_entity_id
    *   The ID of the remote entity that will be updated, or NULL if we are
    *   creating a new one.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    *
@@ -219,7 +219,7 @@ class FieldManager implements FieldManagerInterface {
       $remote_entity_id,
       $sync
     );
-    $this->eventDispatcher->dispatch(Events::FIELD_MAPPING, $event);
+    $this->eventDispatcher->dispatch($event, Events::FIELD_MAPPING);
 
     // Return the final mappings.
     return $event->getFieldMapping();
@@ -228,12 +228,12 @@ class FieldManager implements FieldManagerInterface {
   /**
    * Does the actual export of the fields for the given entities.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $local_entity
+   * @param ContentEntityInterface $local_entity
    *   The associated local entity.
    * @param int|string|null $remote_entity_id
    *   The ID of the remote entity that will be updated, or NULL if we are
    *   creating a new one.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    * @param array $field_mapping
@@ -244,7 +244,7 @@ class FieldManager implements FieldManagerInterface {
    *   An associative array containing the remote fields, keyed by the field
    *   name and containing the field value.
    *
-   * @throws \Drupal\entity_sync\Exception\FieldExportException
+   * @throws FieldExportException
    *   When an error occurs while exporting a field.
    */
   protected function doExport(
@@ -287,7 +287,7 @@ class FieldManager implements FieldManagerInterface {
   /**
    * Performs the actual export of a local field to a remote field.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $local_entity
+   * @param ContentEntityInterface $local_entity
    *   The local entity.
    * @param int|string|null $remote_entity_id
    *   The ID of the remote entity that will be updated, or NULL if we are
@@ -295,7 +295,7 @@ class FieldManager implements FieldManagerInterface {
    * @param array $field_info
    *   The field info.
    *   See \Drupal\entity_sync\Export\Event\FieldMapping::fieldMapping.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    *
@@ -392,7 +392,7 @@ class FieldManager implements FieldManagerInterface {
    * We do this so that we can recognize as an `ExportFieldException` any
    * exception that may be thrown during field export runtime.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $local_entity
+   * @param ContentEntityInterface $local_entity
    *   The associated local entity.
    * @param int|string|null $remote_entity_id
    *   The ID of the remote entity that will be updated, or NULL if we are
@@ -400,7 +400,7 @@ class FieldManager implements FieldManagerInterface {
    * @param array $field_info
    *   The field info.
    *   See \Drupal\entity_sync\Export\Event\FieldMapping::fieldMapping.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    * @param \Throwable $throwable
@@ -448,7 +448,7 @@ class FieldManager implements FieldManagerInterface {
    * This method is made available just so that we can bypass limitations of
    * mocking static methods by mocking this class.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $field_item
+   * @param FieldItemInterface $field_item
    *   The field item.
    *
    * @return string
diff --git a/src/Export/FieldManagerInterface.php b/src/Export/FieldManagerInterface.php
index 3036a9a..9413bac 100644
--- a/src/Export/FieldManagerInterface.php
+++ b/src/Export/FieldManagerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_sync\Export;
 
+use Drupal\entity_sync\Exception\FieldExportException;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Entity\ContentEntityInterface;
 
@@ -32,7 +33,7 @@ interface FieldManagerInterface {
    * @param int|string|null $remote_entity_id
    *   The ID of the remote entity that will be updated, or NULL if we are
    *   creating a new one.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the field
    *   mapping.
    * @param array $options
@@ -47,7 +48,7 @@ interface FieldManagerInterface {
    *   An associative array containing the remote fields, keyed by the field
    *   name and containing the field value.
    *
-   * @throws \Drupal\entity_sync\Exception\FieldExportException
+   * @throws FieldExportException
    *   When an error occurs while exporting a field.
    */
   public function export(
@@ -66,9 +67,9 @@ interface FieldManagerInterface {
    * - They have different value compared to the original entity.
    * - They are in the values of the `$field_names` array, if provided.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $changed_entity
+   * @param ContentEntityInterface $changed_entity
    *   The entity containing the changed field values.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $original_entity
+   * @param ContentEntityInterface $original_entity
    *   The entity containing the original field values.
    * @param array $field_mapping
    *   The array that defines the field mapping for the export operation.
@@ -95,9 +96,9 @@ interface FieldManagerInterface {
   /**
    * Gets the list of fields that are different between the given entities.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $changed_entity
+   * @param ContentEntityInterface $changed_entity
    *   The entity containing the changed field values.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $original_entity
+   * @param ContentEntityInterface $original_entity
    *   The entity containing the original field values.
    * @param string[]|null $names_filter
    *   An array containing field machine names to limit the results to. Passing
diff --git a/src/FieldTransformer/Factory/ContainerAndValidatorFactory.php b/src/FieldTransformer/Factory/ContainerAndValidatorFactory.php
index cbda2f6..e48dbbf 100644
--- a/src/FieldTransformer/Factory/ContainerAndValidatorFactory.php
+++ b/src/FieldTransformer/Factory/ContainerAndValidatorFactory.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_sync\FieldTransformer\Factory;
 
+use Symfony\Component\Validator\Validator\ValidatorInterface;
 use Drupal\Component\Plugin\Discovery\DiscoveryInterface;
 use Drupal\Component\Plugin\Factory\DefaultFactory;
 use Drupal\Core\DependencyInjection\ClassResolverInterface;
@@ -20,16 +21,16 @@ class ContainerAndValidatorFactory extends DefaultFactory {
   /**
    * The dependency injection class resolver.
    *
-   * @var \Drupal\Core\DependencyInjection\ClassResolverInterface
+   * @var ClassResolverInterface
    */
   protected $classResolver;
 
   /**
    * Constructs a Drupal\Component\Plugin\Factory\DefaultFactory object.
    *
-   * @param \Drupal\Component\Plugin\Discovery\DiscoveryInterface $discovery
+   * @param DiscoveryInterface $discovery
    *   The plugin discovery.
-   * @param \Drupal\Core\DependencyInjection\ClassResolverInterface $class_resolver
+   * @param ClassResolverInterface $class_resolver
    *   The dependency injection class resolver.
    * @param string|null $plugin_interface
    *   (optional) The interface each plugin should implement.
@@ -67,7 +68,7 @@ class ContainerAndValidatorFactory extends DefaultFactory {
   /**
    * Returns a new validator instance.
    *
-   * @return \Symfony\Component\Validator\Validator\ValidatorInterface
+   * @return ValidatorInterface
    *   The new validator instance.
    */
   protected function createValidator() {
diff --git a/src/FieldTransformer/PluginBase.php b/src/FieldTransformer/PluginBase.php
index dd01123..960384c 100644
--- a/src/FieldTransformer/PluginBase.php
+++ b/src/FieldTransformer/PluginBase.php
@@ -39,14 +39,14 @@ abstract class PluginBase extends CorePluginBase implements PluginInterface {
   /**
    * The constraint plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $constraintManager;
 
   /**
    * The constraint validator.
    *
-   * @var \Symfony\Component\Validator\Validator\ValidatorInterface
+   * @var ValidatorInterface
    */
   protected $constraintValidator;
 
@@ -59,9 +59,9 @@ abstract class PluginBase extends CorePluginBase implements PluginInterface {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\Validator\Validator\ValidatorInterface $constraint_validator
+   * @param ValidatorInterface $constraint_validator
    *   The constraint validator.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $constraint_manager
+   * @param PluginManagerInterface $constraint_manager
    *   The constraint plugin manager.
    */
   public function __construct(
@@ -158,7 +158,7 @@ abstract class PluginBase extends CorePluginBase implements PluginInterface {
    * This method is called in the constructor so that errors in the plugin's
    * configuration are caught.
    *
-   * @throws \Drupal\entity_sync\Exception\InvalidConfigurationException
+   * @throws InvalidConfigurationException
    *   When the plugin is improperly configured.
    *
    * @I Validate configuration upon import when supported by core
@@ -182,7 +182,7 @@ abstract class PluginBase extends CorePluginBase implements PluginInterface {
    * @param array $keys
    *   The required configuration property keys.
    *
-   * @throws \Drupal\entity_sync\Exception\InvalidConfigurationException
+   * @throws InvalidConfigurationException
    *   When one or more required properties are missing.
    */
   protected function validateConfigurationRequiredProperties(array $keys) {
@@ -204,7 +204,7 @@ abstract class PluginBase extends CorePluginBase implements PluginInterface {
    * that. Otherwise it uses the `set` method provided by the
    * `FieldItemListInterface` API.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $local_entity
+   * @param ContentEntityInterface $local_entity
    *   The local entity.
    * @param array $field_info
    *   The field info.
@@ -252,7 +252,7 @@ abstract class PluginBase extends CorePluginBase implements PluginInterface {
    *
    * @param object $remote_entity
    *   The remote entity.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $local_entity
+   * @param ContentEntityInterface $local_entity
    *   The local entity.
    * @param array $field_info
    *   The field info.
@@ -316,7 +316,7 @@ abstract class PluginBase extends CorePluginBase implements PluginInterface {
    *   The original value.
    * @param object $remote_entity
    *   The remote entity.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $local_entity
+   * @param ContentEntityInterface $local_entity
    *   The local entity.
    * @param array $field_info
    *   The field info.
@@ -392,7 +392,7 @@ abstract class PluginBase extends CorePluginBase implements PluginInterface {
    * @param string $group
    *   The constraint group.
    *
-   * @return \Drupal\entity_sync\FieldTransformer\PluginInterface[]
+   * @return PluginInterface[]
    *   The constraints for the given group.
    */
   protected function getConstraintsForGroup(string $group) {
@@ -423,7 +423,7 @@ abstract class PluginBase extends CorePluginBase implements PluginInterface {
    *
    * @param string $group
    *   The constraint group.
-   * @param \Symfony\Component\Validator\ConstraintViolationListInterface $errors
+   * @param ConstraintViolationListInterface $errors
    *   The constraint violation list.
    *
    * @return string
diff --git a/src/FieldTransformer/PluginInterface.php b/src/FieldTransformer/PluginInterface.php
index 5fa4f94..a697505 100644
--- a/src/FieldTransformer/PluginInterface.php
+++ b/src/FieldTransformer/PluginInterface.php
@@ -39,7 +39,7 @@ interface PluginInterface extends
    *
    * @param object $remote_entity
    *   The remote entity.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $local_entity
+   * @param ContentEntityInterface $local_entity
    *   The local entity.
    * @param array $field_info
    *   The field info.
diff --git a/src/FieldTransformer/PluginManager.php b/src/FieldTransformer/PluginManager.php
index ed9c524..785cb83 100644
--- a/src/FieldTransformer/PluginManager.php
+++ b/src/FieldTransformer/PluginManager.php
@@ -22,7 +22,7 @@ class PluginManager extends DefaultPluginManager {
   /**
    * The dependency injection class resolver.
    *
-   * @var \Drupal\Core\DependencyInjection\ClassResolverInterface
+   * @var ClassResolverInterface
    */
   protected $classResolver;
 
@@ -32,11 +32,11 @@ class PluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Drupal\Core\DependencyInjection\ClassResolverInterface $class_resolver
+   * @param ClassResolverInterface $class_resolver
    *   The dependency injection class resolver.
    */
   public function __construct(
diff --git a/src/Form/ImportListBase.php b/src/Form/ImportListBase.php
index 1f71f47..cc42449 100644
--- a/src/Form/ImportListBase.php
+++ b/src/Form/ImportListBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_sync\Form;
 
+use Drupal\Core\Queue\QueueInterface;
 use Drupal\entity_sync\StateManagerInterface;
 
 use Drupal\Core\Form\FormBase;
@@ -26,14 +27,14 @@ abstract class ImportListBase extends FormBase {
   /**
    * The Entity Sync state manager.
    *
-   * @var \Drupal\entity_sync\StateManagerInterface
+   * @var StateManagerInterface
    */
   protected $stateManager;
 
   /**
    * The queue for importing a list of entities.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;
 
@@ -52,9 +53,9 @@ abstract class ImportListBase extends FormBase {
   /**
    * Constructs a new ImportListFormBase object.
    *
-   * @param \Drupal\entity_sync\StateManagerInterface $state_manager
+   * @param StateManagerInterface $state_manager
    *   The Entity Sync state manager.
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   The queue factory.
    */
   public function __construct(
@@ -162,7 +163,7 @@ abstract class ImportListBase extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function buildUnlock(
@@ -201,7 +202,7 @@ abstract class ImportListBase extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function buildLock(
@@ -229,7 +230,7 @@ abstract class ImportListBase extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function validateUnlock(array &$form, FormStateInterface $form_state) {
@@ -257,7 +258,7 @@ abstract class ImportListBase extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function validateLock(array &$form, FormStateInterface $form_state) {
@@ -292,7 +293,7 @@ abstract class ImportListBase extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function submitImport(
@@ -321,7 +322,7 @@ abstract class ImportListBase extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function submitUnlock(
@@ -345,7 +346,7 @@ abstract class ImportListBase extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function submitLock(
diff --git a/src/Import/Event/FieldMappingEvent.php b/src/Import/Event/FieldMappingEvent.php
index f945097..fcfad09 100644
--- a/src/Import/Event/FieldMappingEvent.php
+++ b/src/Import/Event/FieldMappingEvent.php
@@ -2,11 +2,10 @@
 
 namespace Drupal\entity_sync\Import\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Entity\EntityInterface;
 
-use Symfony\Component\EventDispatcher\Event;
-
 /**
  * Defines the import field mapping event.
  *
@@ -30,7 +29,7 @@ class FieldMappingEvent extends Event {
   /**
    * The associated local entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $localEntity;
 
@@ -44,7 +43,7 @@ class FieldMappingEvent extends Event {
   /**
    * The synchronization configuration object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $sync;
 
@@ -53,9 +52,9 @@ class FieldMappingEvent extends Event {
    *
    * @param object $remote_entity
    *   The remote entity that's about to be synced.
-   * @param \Drupal\Core\Entity\EntityInterface $local_entity
+   * @param EntityInterface $local_entity
    *   The associated local entity.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    */
@@ -92,7 +91,7 @@ class FieldMappingEvent extends Event {
   /**
    * Gets the local entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The local entity.
    */
   public function getLocalEntity() {
@@ -112,7 +111,7 @@ class FieldMappingEvent extends Event {
   /**
    * Gets the synchronizatio configuration object.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig
+   * @return ImmutableConfig
    *   The synchronization configuration object.
    */
   public function getSync() {
diff --git a/src/Import/Event/ListFiltersEvent.php b/src/Import/Event/ListFiltersEvent.php
index 4863a88..862af2a 100644
--- a/src/Import/Event/ListFiltersEvent.php
+++ b/src/Import/Event/ListFiltersEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\entity_sync\Import\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Config\ImmutableConfig;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Defines the import list filters event.
@@ -30,7 +30,7 @@ class ListFiltersEvent extends Event {
   /**
    * The synchronization configuration object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $sync;
 
@@ -41,7 +41,7 @@ class ListFiltersEvent extends Event {
    *   The filters array.
    * @param array $context
    *   The context array.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    */
@@ -88,7 +88,7 @@ class ListFiltersEvent extends Event {
   /**
    * Gets the synchronization configuration object.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig
+   * @return ImmutableConfig
    *   The synchronization configuration object.
    */
   public function getSync() {
diff --git a/src/Import/Event/LocalEntityMappingEvent.php b/src/Import/Event/LocalEntityMappingEvent.php
index 75bb47c..10f693b 100644
--- a/src/Import/Event/LocalEntityMappingEvent.php
+++ b/src/Import/Event/LocalEntityMappingEvent.php
@@ -2,11 +2,10 @@
 
 namespace Drupal\entity_sync\Import\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Entity\EntityInterface;
 
-use Symfony\Component\EventDispatcher\Event;
-
 /**
  * Defines the import local entity mapping event.
  *
@@ -42,23 +41,23 @@ class LocalEntityMappingEvent extends Event {
   /**
    * The local entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $localEntity;
 
   /**
    * The synchronization configuration object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $sync;
 
   /**
    * Constructs a new LocalEntityMappingEvent object.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $local_entity
+   * @param EntityInterface $local_entity
    *   The local entity that's being mapped.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    */
@@ -93,7 +92,7 @@ class LocalEntityMappingEvent extends Event {
   /**
    * Gets the local entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The local entity.
    */
   public function getLocalEntity() {
@@ -103,7 +102,7 @@ class LocalEntityMappingEvent extends Event {
   /**
    * Gets the synchronizatio configuration object.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig
+   * @return ImmutableConfig
    *   The synchronization configuration object.
    */
   public function getSync() {
diff --git a/src/Import/Event/RemoteEntityMappingEvent.php b/src/Import/Event/RemoteEntityMappingEvent.php
index 9646958..8a83fb6 100644
--- a/src/Import/Event/RemoteEntityMappingEvent.php
+++ b/src/Import/Event/RemoteEntityMappingEvent.php
@@ -2,10 +2,9 @@
 
 namespace Drupal\entity_sync\Import\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Config\ImmutableConfig;
 
-use Symfony\Component\EventDispatcher\Event;
-
 /**
  * Defines the import remote entity mapping event.
  *
@@ -42,7 +41,7 @@ class RemoteEntityMappingEvent extends Event {
   /**
    * The synchronization configuration object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $sync;
 
@@ -51,7 +50,7 @@ class RemoteEntityMappingEvent extends Event {
    *
    * @param object $remote_entity
    *   The remote entity that's being mapped.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    */
@@ -93,7 +92,7 @@ class RemoteEntityMappingEvent extends Event {
   /**
    * Gets the synchronizatio configuration object.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig
+   * @return ImmutableConfig
    *   The synchronization configuration object.
    */
   public function getSync() {
diff --git a/src/Import/FieldManager.php b/src/Import/FieldManager.php
index 6225ad6..e628784 100644
--- a/src/Import/FieldManager.php
+++ b/src/Import/FieldManager.php
@@ -30,21 +30,21 @@ class FieldManager implements FieldManagerInterface {
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The field transformer plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $fieldTransformerManager;
 
   /**
    * The logger service.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
@@ -53,11 +53,11 @@ class FieldManager implements FieldManagerInterface {
    *
    * @param \Drupal\entity_sync\Config\ManagerInterface $config_manager
    *   The Entity Sync configuration manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $field_transformer_manager
+   * @param PluginManagerInterface $field_transformer_manager
    *   The field transformer plugin manager.
    */
   public function __construct(
@@ -240,7 +240,7 @@ class FieldManager implements FieldManagerInterface {
    *   The remote entity.
    * @param \Drupal\core\Entity\ContentEntityInterface $local_entity
    *   The local entity.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    *
@@ -262,7 +262,7 @@ class FieldManager implements FieldManagerInterface {
       $local_entity,
       $sync
     );
-    $this->eventDispatcher->dispatch(Events::FIELD_MAPPING, $event);
+    $this->eventDispatcher->dispatch($event, Events::FIELD_MAPPING);
 
     // Return the final mappings.
     return $event->getFieldMapping();
@@ -273,9 +273,9 @@ class FieldManager implements FieldManagerInterface {
    *
    * @param object $remote_entity
    *   The remote entity.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $local_entity
+   * @param ContentEntityInterface $local_entity
    *   The associated local entity.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    * @param array $field_mapping
@@ -285,7 +285,7 @@ class FieldManager implements FieldManagerInterface {
    *   An associative array containing context related to the circumstances of
    *   the operation.
    *
-   * @throws \Drupal\entity_sync\Exception\FieldImportException
+   * @throws FieldImportException
    *   When an error occurs while importing a field.
    */
   protected function doImport(
@@ -356,12 +356,12 @@ class FieldManager implements FieldManagerInterface {
    *
    * @param object $remote_entity
    *   The remote entity.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $local_entity
+   * @param ContentEntityInterface $local_entity
    *   The associated local entity.
    * @param array $field_info
    *   The field info.
    *   See \Drupal\entity_sync\Import\Event\FieldMapping::fieldMapping.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    * @param array $context
@@ -460,12 +460,12 @@ class FieldManager implements FieldManagerInterface {
    *
    * @param object $remote_entity
    *   The remote entity.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $local_entity
+   * @param ContentEntityInterface $local_entity
    *   The associated local entity.
    * @param array $field_info
    *   The field info.
    *   See \Drupal\entity_sync\Import\Event\FieldMapping::fieldMapping.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    * @param \Throwable $throwable
@@ -508,13 +508,13 @@ class FieldManager implements FieldManagerInterface {
    *
    * @param object $remote_entity
    *   The remote entity.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $local_entity
+   * @param ContentEntityInterface $local_entity
    *   The associated local entity.
    * @param string $sync_field
    *   The sync field being imported. Supported values are:
    *   - `remote_id` for the remote ID field.
    *   - `remote_changed` for the remote changed field.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    * @param \Throwable $throwable
diff --git a/src/Import/FieldManagerInterface.php b/src/Import/FieldManagerInterface.php
index d5a653f..1dfd587 100644
--- a/src/Import/FieldManagerInterface.php
+++ b/src/Import/FieldManagerInterface.php
@@ -26,7 +26,7 @@ interface FieldManagerInterface {
    *   The remote entity.
    * @param \Drupal\core\Entity\ContentEntityInterface $local_entity
    *   The local entity.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the field
    *   mapping.
    * @param array $options
@@ -49,9 +49,9 @@ interface FieldManagerInterface {
    *
    * @param object $remote_entity
    *   The remote entity.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $local_entity
+   * @param ContentEntityInterface $local_entity
    *   The associated local entity.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    * @param bool $force
@@ -71,9 +71,9 @@ interface FieldManagerInterface {
    *
    * @param object $remote_entity
    *   The remote entity.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $local_entity
+   * @param ContentEntityInterface $local_entity
    *   The associated local entity.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    */
diff --git a/src/Import/Manager.php b/src/Import/Manager.php
index 9fe3d56..dace93f 100644
--- a/src/Import/Manager.php
+++ b/src/Import/Manager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_sync\Import;
 
+use Psr\Log\LoggerInterface;
 use Drupal\entity_sync\Client\ClientFactory;
 use Drupal\entity_sync\Exception\EntityImportException;
 use Drupal\entity_sync\Import\Event\Events;
@@ -31,59 +32,59 @@ class Manager extends EntityManagerBase implements ManagerInterface {
   /**
    * The client factory.
    *
-   * @var \Drupal\entity_sync\Client\ClientFactory
+   * @var ClientFactory
    */
   protected $clientFactory;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The Entity Sync import field manager.
    *
-   * @var \Drupal\entity_sync\Import\FieldManagerInterface
+   * @var FieldManagerInterface
    */
   protected $fieldManager;
 
   /**
    * The logger service.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * Constructs a new Manager instance.
    *
-   * @param \Drupal\entity_sync\Client\ClientFactory $client_factory
+   * @param ClientFactory $client_factory
    *   The client factory.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\entity_sync\Import\FieldManagerInterface $field_manager
+   * @param FieldManagerInterface $field_manager
    *   The Entity Sync import field manager.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   The logger to pass to the client.
    *
    * @I Use \Psr\Log\LoggerInterface
@@ -353,7 +354,7 @@ class Manager extends EntityManagerBase implements ManagerInterface {
   /**
    * Runs the actual remote entity import operation.
    *
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    * @param array $filters
@@ -427,7 +428,7 @@ class Manager extends EntityManagerBase implements ManagerInterface {
   /**
    * Runs the actual remote entity import operation with its pre/post events.
    *
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    * @param object $remote_entity
@@ -484,7 +485,7 @@ class Manager extends EntityManagerBase implements ManagerInterface {
   /**
    * Runs the actual remote entity import operation.
    *
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    * @param object $remote_entity
@@ -529,10 +530,10 @@ class Manager extends EntityManagerBase implements ManagerInterface {
   /**
    * Runs the actual local entity import operation.
    *
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $local_entity
+   * @param ContentEntityInterface $local_entity
    *   The local entity.
    * @param array $options
    *   An associative array of options that determine various aspects of the
@@ -621,7 +622,7 @@ class Manager extends EntityManagerBase implements ManagerInterface {
    *
    * @param object $remote_entity
    *   The remote entity.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    * @param string $operation
@@ -659,7 +660,7 @@ class Manager extends EntityManagerBase implements ManagerInterface {
    *
    * @param object $remote_entity
    *   The remote entity.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    * @param array $options
@@ -740,7 +741,7 @@ class Manager extends EntityManagerBase implements ManagerInterface {
    *
    * @param object $remote_entity
    *   The remote entity.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    * @param array $entity_mapping
@@ -751,7 +752,7 @@ class Manager extends EntityManagerBase implements ManagerInterface {
    *   An associative array of options that determine various aspects of the
    *   import.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    *   The entity that was created, or NULL if the synchronization configuration
    *   is set to not create new entities.
    *
@@ -823,7 +824,7 @@ class Manager extends EntityManagerBase implements ManagerInterface {
    *
    * @param object $remote_entity
    *   The remote entity.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    * @param array $entity_mapping
@@ -834,7 +835,7 @@ class Manager extends EntityManagerBase implements ManagerInterface {
    *   An associative array of options that determine various aspects of the
    *   import.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The entity that was updated.
    *
    * @I Support entity update validation
@@ -890,16 +891,16 @@ class Manager extends EntityManagerBase implements ManagerInterface {
    *
    * @param object $remote_entity
    *   The remote entity.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $local_entity
+   * @param ContentEntityInterface $local_entity
    *   The associated local entity.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    * @param array $options
    *   An associative array of options that determine various aspects of the
    *   import.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The entity that was created or updated.
    */
   protected function doImportEntity(
@@ -939,7 +940,7 @@ class Manager extends EntityManagerBase implements ManagerInterface {
    *
    * @param object $remote_entity
    *   The remote entity.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    *
@@ -956,7 +957,7 @@ class Manager extends EntityManagerBase implements ManagerInterface {
     ImmutableConfig $sync
   ) {
     $event = new RemoteEntityMappingEvent($remote_entity, $sync);
-    $this->eventDispatcher->dispatch(Events::REMOTE_ENTITY_MAPPING, $event);
+    $this->eventDispatcher->dispatch($event, Events::REMOTE_ENTITY_MAPPING);
 
     // Return the final mapping.
     return $event->getEntityMapping();
@@ -975,7 +976,7 @@ class Manager extends EntityManagerBase implements ManagerInterface {
    *
    * @param \Drupal\core\Entity\ContentEntityInterface $local_entity
    *   The local entity.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    *
@@ -995,7 +996,7 @@ class Manager extends EntityManagerBase implements ManagerInterface {
       $local_entity,
       $sync
     );
-    $this->eventDispatcher->dispatch(Events::LOCAL_ENTITY_MAPPING, $event);
+    $this->eventDispatcher->dispatch($event, Events::LOCAL_ENTITY_MAPPING);
 
     // Return the final mapping.
     return $event->getEntityMapping();
@@ -1011,7 +1012,7 @@ class Manager extends EntityManagerBase implements ManagerInterface {
    *   The current filters.
    * @param array $context
    *   The context of the operation we are currently executing.
-   * @param \Drupal\Core\Config\ImmutableConfig $sync
+   * @param ImmutableConfig $sync
    *   The configuration object for synchronization that defines the operation
    *   we are currently executing.
    *
@@ -1028,7 +1029,7 @@ class Manager extends EntityManagerBase implements ManagerInterface {
       $context,
       $sync
     );
-    $this->eventDispatcher->dispatch(Events::REMOTE_LIST_FILTERS, $event);
+    $this->eventDispatcher->dispatch($event, Events::REMOTE_LIST_FILTERS);
 
     // Return the final filters.
     return $event->getFilters();
diff --git a/src/Import/ManagerInterface.php b/src/Import/ManagerInterface.php
index 6f15102..556818f 100644
--- a/src/Import/ManagerInterface.php
+++ b/src/Import/ManagerInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_sync\Import;
 
+use Drupal\entity_sync\Exception\EntityImportException;
+use Drupal\entity_sync\Exception\FieldImportException;
 use Drupal\Core\Entity\ContentEntityInterface;
 
 /**
@@ -154,9 +156,9 @@ interface ManagerInterface {
    *     of the operation. It is passed to dispatched events and can help
    *     subscribers determine how to alter entity/field mappings.
    *
-   * @throws \Drupal\entity_sync\Exception\EntityImportException
+   * @throws EntityImportException
    *   When an error occurs while importing the entity.
-   * @throws \Drupal\entity_sync\Exception\FieldImportException
+   * @throws FieldImportException
    *   When an error occurs while importing a field.
    */
   public function importRemoteEntityById(
@@ -200,9 +202,9 @@ interface ManagerInterface {
    *     of the operation. It is passed to dispatched events and can help
    *     subscribers determine how to alter entity/field mappings.
    *
-   * @throws \Drupal\entity_sync\Exception\EntityImportException
+   * @throws EntityImportException
    *   When an error occurs while importing the entity.
-   * @throws \Drupal\entity_sync\Exception\FieldImportException
+   * @throws FieldImportException
    *   When an error occurs while importing a field.
    */
   public function importRemoteEntity(
@@ -230,7 +232,7 @@ interface ManagerInterface {
    *
    * @param string $sync_id
    *   The ID of the entity sync.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $local_entity
+   * @param ContentEntityInterface $local_entity
    *   The local entity.
    * @param array $options
    *   An associative array of options that determine various aspects of the
@@ -239,7 +241,7 @@ interface ManagerInterface {
    *   mode and whether to create local entities for incoming remote entities
    *   that do not have local associations yet.
    *
-   * @throws \Drupal\entity_sync\Exception\FieldImportException
+   * @throws FieldImportException
    *   When an error occurs while importing a field.
    *
    * @I Implement import modes
diff --git a/src/Plugin/EntitySync/FieldTransformer/ConfigProperty.php b/src/Plugin/EntitySync/FieldTransformer/ConfigProperty.php
index 2b100f5..31aa3bb 100644
--- a/src/Plugin/EntitySync/FieldTransformer/ConfigProperty.php
+++ b/src/Plugin/EntitySync/FieldTransformer/ConfigProperty.php
@@ -35,11 +35,11 @@ class ConfigProperty extends PluginBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\Validator\Validator\ValidatorInterface $constraint_validator
+   * @param ValidatorInterface $constraint_validator
    *   The constraint validator.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $constraint_manager
+   * @param PluginManagerInterface $constraint_manager
    *   The constraint plugin manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function __construct(
diff --git a/src/Plugin/EntitySync/FieldTransformer/LocalEntityIdsByPropertyBase.php b/src/Plugin/EntitySync/FieldTransformer/LocalEntityIdsByPropertyBase.php
index 483425b..36e3208 100644
--- a/src/Plugin/EntitySync/FieldTransformer/LocalEntityIdsByPropertyBase.php
+++ b/src/Plugin/EntitySync/FieldTransformer/LocalEntityIdsByPropertyBase.php
@@ -35,7 +35,7 @@ abstract class LocalEntityIdsByPropertyBase extends PluginBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -44,7 +44,7 @@ abstract class LocalEntityIdsByPropertyBase extends PluginBase {
    *
    * @param object $remote_entity
    *   The remote entity.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $local_entity
+   * @param ContentEntityInterface $local_entity
    *   The local entity.
    * @param array $field_info
    *   The field info.
@@ -72,11 +72,11 @@ abstract class LocalEntityIdsByPropertyBase extends PluginBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\Validator\Validator\ValidatorInterface $constraint_validator
+   * @param ValidatorInterface $constraint_validator
    *   The constraint validator.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $constraint_manager
+   * @param PluginManagerInterface $constraint_manager
    *   The constraint plugin manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(
diff --git a/src/Plugin/QueueWorker/ExportLocalEntity.php b/src/Plugin/QueueWorker/ExportLocalEntity.php
index a4a3982..6b940be 100644
--- a/src/Plugin/QueueWorker/ExportLocalEntity.php
+++ b/src/Plugin/QueueWorker/ExportLocalEntity.php
@@ -56,21 +56,21 @@ class ExportLocalEntity extends QueueWorkerBase implements
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * This module's logger channel service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
@@ -90,13 +90,13 @@ class ExportLocalEntity extends QueueWorkerBase implements
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    * @param \Drupal\entity_sync\Export\EntityManagerInterface $manager
    *   The Entity Sync export entity manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   This module's logger channel.
    */
   public function __construct(
diff --git a/src/Plugin/QueueWorker/ImportList.php b/src/Plugin/QueueWorker/ImportList.php
index 8a42863..ba85645 100644
--- a/src/Plugin/QueueWorker/ImportList.php
+++ b/src/Plugin/QueueWorker/ImportList.php
@@ -24,7 +24,7 @@ class ImportList extends QueueWorkerBase implements
   /**
    * The Entity Sync import manager service.
    *
-   * @var \Drupal\entity_sync\Import\ManagerInterface
+   * @var ManagerInterface
    */
   protected $manager;
 
@@ -37,7 +37,7 @@ class ImportList extends QueueWorkerBase implements
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\entity_sync\Import\ManagerInterface $manager
+   * @param ManagerInterface $manager
    *   The Entity Sync import manager service.
    */
   public function __construct(
diff --git a/src/StateManager.php b/src/StateManager.php
index 924af0d..d1b2539 100644
--- a/src/StateManager.php
+++ b/src/StateManager.php
@@ -13,23 +13,23 @@ class StateManager implements StateManagerInterface {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The key value factory.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueFactoryInterface
+   * @var KeyValueFactoryInterface
    */
   protected $keyValueFactory;
 
   /**
    * Constructs a new StateManager object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\Core\KeyValueStore\KeyValueFactoryInterface $key_value_factory
+   * @param KeyValueFactoryInterface $key_value_factory
    *   The key value factory.
    */
   public function __construct(
diff --git a/src/ValidationConstraint/PluginManager.php b/src/ValidationConstraint/PluginManager.php
index 70e4c8b..36be700 100644
--- a/src/ValidationConstraint/PluginManager.php
+++ b/src/ValidationConstraint/PluginManager.php
@@ -23,9 +23,9 @@ class PluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(
diff --git a/tests/src/Unit/Config/SyncManagerTest.php b/tests/src/Unit/Config/SyncManagerTest.php
index fdcdbaa..3bffe01 100644
--- a/tests/src/Unit/Config/SyncManagerTest.php
+++ b/tests/src/Unit/Config/SyncManagerTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\entity_sync\Unit\Config;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\entity_sync\Config\Manager;
 
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -28,6 +29,7 @@ require_once __DIR__ . '/../../TestTrait/FixturesTrait.php';
  */
 class SyncManagerTest extends UnitTestCase {
 
+  use ProphecyTrait;
   use FixturesTrait;
 
   /**
diff --git a/tests/src/Unit/Export/FieldManagerGetNamesTest.php b/tests/src/Unit/Export/FieldManagerGetNamesTest.php
index c463f7a..eae53be 100644
--- a/tests/src/Unit/Export/FieldManagerGetNamesTest.php
+++ b/tests/src/Unit/Export/FieldManagerGetNamesTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\entity_sync\Unit\Export;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\entity_sync\Config\ManagerInterface as ConfigManagerInterface;
 use Drupal\entity_sync\Export\FieldManager;
 
@@ -31,6 +32,7 @@ require_once __DIR__ . '/../../TestTrait/FixturesTrait.php';
  */
 class FieldManagerGetNamesTest extends UnitTestCase {
 
+  use ProphecyTrait;
   use FixturesTrait;
 
   /**
