modules/contrib/gutenberg_fix_randomfiles/gutenberg_fix_randomfiles.install
modules/contrib/gutenberg_fix_randomfiles/gutenberg_fix_randomfiles.module
modules/contrib/gutenberg_fix_randomfiles/src/Commands/GutenbergFixRandomFilesCommands.php

2 files with changes
====================

1) modules/contrib/gutenberg_fix_randomfiles/src/Commands/GutenbergFixRandomFilesCommands.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gutenberg_fix_randomfiles\Commands;

+use Drupal\Core\File\FileSystemInterface;
+use Drupal\file_update\FileUpdateService;
+use Drupal\file\FileUsage\FileUsageInterface;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\node\NodeInterface;
 use Consolidation\OutputFormatters\StructuredData\RowsOfFields;
 use Drupal\Core\Database\Connection;
 use Drupal\file\Entity\File;
@@ @@
     $account = User::load(1);
     \Drupal::service('account_switcher')->switchTo($account);

-    /** @var \Drupal\Core\File\FileSystemInterface $file_system */
+    /** @var FileSystemInterface $file_system */
     $file_system = \Drupal::service('file_system');
     $database = \Drupal::database();
     $query = $database->select('file_managed', 'fm')
@@ @@

     $migrated_files = \Drupal::state()->get(static::STATE_KEY, []);
     $updated_files = [];
-    /** @var \Drupal\file_update\FileUpdateService $update_service */
+    /** @var FileUpdateService $update_service */
     $update_service = \Drupal::service('file_update.update_service');
     foreach ($files as $file) {
       $fid = (int) $file->fid;
@@ @@
    *
    * @command gutenberg_fix_randomfiles:list
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return RowsOfFields
    *   The list of affected files.
    *
    * @format table
@@ @@
     $affected = \Drupal::state()->get(static::STATE_KEY, []);
     $result = array_map(static function ($entry) {
       return $entry + [
-        'src_path' => file_url_transform_relative(file_create_url($entry['src'])),
-        'dest_path' => file_url_transform_relative(file_create_url($entry['dest'])),
+        'src_path' => \Drupal::service('file_url_generator')->generateString($entry['src']),
+        'dest_path' => \Drupal::service('file_url_generator')->generateString($entry['dest']),
       ];
     }, $affected);

@@ @@
    *
    * @command gutenberg_fix_randomfiles:usage
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return RowsOfFields
    *   The list of affected files.
    *
    * @format table
@@ @@
   public function listUsageReference() {
     $affected = \Drupal::state()->get(static::STATE_KEY, []);
     $result = [];
-    /** @var \Drupal\file\FileUsage\FileUsageInterface $file_usage */
+    /** @var FileUsageInterface $file_usage */
     $file_usage = \Drupal::service('file.usage');
     $entity_type_manager = \Drupal::entityTypeManager();
     foreach ($affected as $item) {
@@ @@
    *
    * @param string $src
    *   The source URI.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The Drupal database.
    * @param string $destination
    *   The real destination URI.
@@ @@
    * @return array
    *   The affected node IDs.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function updateAffectedNodes($src, Connection $database, $destination, $fid) {
-    $source_url = file_url_transform_relative(file_create_url($src));
+    $source_url = \Drupal::service('file_url_generator')->generateString($src);
     // Attempt to pick up files which were created without reference to
     // the uuid. e.g. core/file.
     // https://www.drupal.org/project/gutenberg/issues/3106598
@@ @@
       ->condition('body', $like, 'LIKE')
       ->execute();
     if ($node_ids) {
-      /** @var \Drupal\node\NodeInterface[] $nodes */
+      /** @var NodeInterface[] $nodes */
       $nodes = Node::loadMultiple($node_ids);
-      $dest = file_url_transform_relative(file_create_url($destination));
+      $dest = \Drupal::service('file_url_generator')->generateString($destination);
       foreach ($nodes as $node) {
         $this->logger()->info(
           dt(
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/gutenberg_fix_randomfiles/gutenberg_fix_randomfiles.install:22

    ---------- begin diff ----------
@@ @@
       // its own. Load it manually.
       try {
         if (!class_exists(FileUpdateService::class)) {
-          $module_path = drupal_get_path('module', 'file_update');
+          $module_path = \Drupal::service('extension.list.module')->getPath('file_update');
           require_once $module_path . '/src/FileUpdateService.php';
           require_once $module_path . '/src/Plugin/FileUpdate/FileUpdateBase.php';
           require_once $module_path . '/src/Plugin/FileUpdate/FileUpdateInterface.php';
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [OK] 2 files have been changed by Rector                                       

