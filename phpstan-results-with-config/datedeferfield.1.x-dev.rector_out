modules/contrib/datedeferfield/datedeferfield.module
modules/contrib/datedeferfield/datedeferfield.views.inc
modules/contrib/datedeferfield/src/DateComputed.php
modules/contrib/datedeferfield/src/Plugin/Field/FieldFormatter/DateDeferFieldDefaultFormatter.php
modules/contrib/datedeferfield/src/Plugin/Field/FieldFormatter/DateDeferFieldDiffFormatter.php
modules/contrib/datedeferfield/src/Plugin/Field/FieldType/DateDeferFieldItem.php
modules/contrib/datedeferfield/src/Plugin/Field/FieldType/DateDeferFieldItemList.php
modules/contrib/datedeferfield/src/Plugin/Field/FieldWidget/DateDeferFieldWidget.php
modules/contrib/datedeferfield/src/Plugin/Validation/Constraint/DateDeferDateFormatConstraint.php
modules/contrib/datedeferfield/src/Plugin/Validation/Constraint/DateDeferDateFormatConstraintValidator.php
modules/contrib/datedeferfield/src/Plugin/views/filter/DateDeferFieldAdjusted.php
modules/contrib/datedeferfield/tests/src/Functional/AdminPageTest.php

6 files with changes
====================

1) modules/contrib/datedeferfield/tests/src/Functional/AdminPageTest.php:32

    ---------- begin diff ----------
@@ @@
   public function testAdminPage() {
     $this->drupalLogin($this->rootUser);
     $this->drupalGet('admin');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // Ensure that the test is not marked as risky because of no assertions.
     // see https://gitlab.com/weitzman/drupal-test-traits/-/commit/82bf5059908f9073b3468cb7313960da72176d9a
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/datedeferfield/src/Plugin/views/filter/DateDeferFieldAdjusted.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\datedeferfield\Plugin\views\filter;

+use Drupal\views\Plugin\views\query\Sql;
 use Drupal\datetime\Plugin\views\filter\Date;

 /**
@@ @@
 class DateDeferFieldAdjusted extends Date {
   public function query() {
     parent::query(); // TODO: Change the autogenerated stub.
-
     // Dark magic.
     // @see \Drupal\views\Plugin\views\query\Sql::addWhereExpression
-    /** @var \Drupal\views\Plugin\views\query\Sql $query */
+    /** @var Sql $query */
     $query = $this->query;
     $conditions =& $query->where[$this->options['group']]['conditions'];
     $lastKey = key(array_slice($conditions, -1, 1, TRUE));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/datedeferfield/src/Plugin/Field/FieldWidget/DateDeferFieldWidget.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * The date format storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $dateStorage;

@@ @@
         '#date_time_element' => 'none',
         '#date_time_callbacks' => [],
       ] + $singleElement;
-      /** @var \Drupal\Core\Datetime\DrupalDateTime $date */
+      /** @var DrupalDateTime $date */
       if ($date = $items[$delta]->{"date_$key"}) {
         $element["value_$key"]['#default_value'] = $this->createDefaultValue($date, $element["value_$key"]['#date_timezone']);
       }
@@ @@
    * @param array $element
    *   An associative array containing the properties and children of the
    *   generic form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/datedeferfield/src/Plugin/Field/FieldFormatter/DateDeferFieldDiffFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\datedeferfield\Plugin\Field\FieldFormatter;

+use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Component\Datetime\DateTimePlus;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\FormatterBase;
@@ @@
     $elements = [];

     foreach ($items as $delta => $item) {
-      /** @var \Drupal\Core\Datetime\DrupalDateTime $date */
+      /** @var DrupalDateTime $date */
       $date = $item->{"date_$key"};
       if (isset($date)) {
         // The diff is positive if that date has passed.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/datedeferfield/src/Plugin/Field/FieldFormatter/DateDeferFieldDefaultFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\datedeferfield\Plugin\Field\FieldFormatter;

+use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Component\Datetime\DateTimePlus;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\FormatterBase;
@@ @@
       $elements[$delta]['#theme'] = 'datedeferfield_formatter';
       $elements[$delta]['#labels']['deferred'] = $this->t('Deferred');
       foreach (DateDeferFieldItem::components() as $key => $label) {
-        /** @var \Drupal\Core\Datetime\DrupalDateTime $date */
+        /** @var DrupalDateTime $date */
         $date = $item->{"date_$key"};
         $elements[$delta]['#labels'][$key] = $label;
         $elements[$delta]['#dates'][$key] = $date;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/datedeferfield/src/DateComputed.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\datedeferfield;

+use Drupal\Core\Field\FieldItemInterface;
 use Drupal\datetime\Plugin\Field\FieldType\DateTimeItem;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\TypedData\DataDefinitionInterface;
@@ @@
       return $this->date;
     }

-    /** @var \Drupal\Core\Field\FieldItemInterface $item */
+    /** @var FieldItemInterface $item */
     $item = $this->getParent();
     $value = $item->{($this->definition->getSetting('date source'))};
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 6 files have been changed by Rector                                       

