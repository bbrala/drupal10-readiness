diff --git a/modules/action_queue_states/action_queue_states.module b/modules/action_queue_states/action_queue_states.module
index 8c8ff74..6b27ce2 100644
--- a/modules/action_queue_states/action_queue_states.module
+++ b/modules/action_queue_states/action_queue_states.module
@@ -7,7 +7,7 @@ use Drupal\action_queue_states\EntityTypeInfo;
 /**
  * Declares entity operations.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity on which the linked operations will be performed.
  *
  * @return array
diff --git a/modules/action_queue_states/src/ActionQueueState.php b/modules/action_queue_states/src/ActionQueueState.php
index 591fc9a..c6565b5 100644
--- a/modules/action_queue_states/src/ActionQueueState.php
+++ b/modules/action_queue_states/src/ActionQueueState.php
@@ -12,7 +12,7 @@ class ActionQueueState implements StateInterface {
   /**
    * The vanilla state object from the Workflow module.
    *
-   * @var \Drupal\workflows\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
@@ -26,7 +26,7 @@ class ActionQueueState implements StateInterface {
   /**
    * ActionQueueState constructor.
    *
-   * @param \Drupal\workflows\StateInterface $state
+   * @param StateInterface $state
    *   The vanilla state object from the Workflow module.
    * @param bool $active
    *   (optional) TRUE if action queue items should be active in this state,
diff --git a/modules/action_queue_states/src/ActionQueueStateInformation.php b/modules/action_queue_states/src/ActionQueueStateInformation.php
index 2bd3720..b516d9b 100644
--- a/modules/action_queue_states/src/ActionQueueStateInformation.php
+++ b/modules/action_queue_states/src/ActionQueueStateInformation.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\action_queue_states;
 
+use Drupal\workflows\WorkflowTypeInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\action_queue\Entity\ActionQueueItemInterface;
@@ -16,14 +19,14 @@ class ActionQueueStateInformation {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Creates a new ActionQueueStateInformation instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -33,14 +36,14 @@ class ActionQueueStateInformation {
   /**
    * Get the current workflow.
    *
-   * @param \Drupal\action_queue\Entity\ActionQueueItemInterface $entity
+   * @param ActionQueueItemInterface $entity
    *   The action queue item entity.
    *
-   * @return \Drupal\workflows\WorkflowTypeInterface
+   * @return WorkflowTypeInterface
    *   The workflow config entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getWorkflowForEntity(ActionQueueItemInterface $entity) {
     $action = $entity->get('action')->value;
@@ -56,7 +59,7 @@ class ActionQueueStateInformation {
   /**
    * Return the current state for the action queue item.
    *
-   * @param \Drupal\action_queue\Entity\ActionQueueItemInterface $entity
+   * @param ActionQueueItemInterface $entity
    *   The action queue item.
    *
    * @return string
diff --git a/modules/action_queue_states/src/ActionQueueTransitions.php b/modules/action_queue_states/src/ActionQueueTransitions.php
index c403bfd..64e0a48 100644
--- a/modules/action_queue_states/src/ActionQueueTransitions.php
+++ b/modules/action_queue_states/src/ActionQueueTransitions.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\action_queue_states;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\workflows\TransitionInterface;
@@ -14,14 +15,14 @@ class ActionQueueTransitions {
   /**
    * Action queue state information service.
    *
-   * @var \Drupal\action_queue_states\ActionQueueStateInformation
+   * @var ActionQueueStateInformation
    */
   protected $actionQueueStateInfo;
 
   /**
    * Constructs a new ActionQueueTransitions object.
    *
-   * @param \Drupal\action_queue_states\ActionQueueStateInformation $action_queue_state_info
+   * @param ActionQueueStateInformation $action_queue_state_info
    *   The action queue state information service.
    */
   public function __construct(ActionQueueStateInformation $action_queue_state_info) {
@@ -51,12 +52,12 @@ class ActionQueueTransitions {
   /**
    * Invoke a transition on an action queue item.
    *
-   * @param \Drupal\workflows\TransitionInterface $transition
+   * @param TransitionInterface $transition
    *   The transition.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function invokeTransition(TransitionInterface $transition, EntityInterface $entity) {
     $new_state = $transition->to();
diff --git a/modules/action_queue_states/src/EntityOperations.php b/modules/action_queue_states/src/EntityOperations.php
index 90a5e61..062a35e 100644
--- a/modules/action_queue_states/src/EntityOperations.php
+++ b/modules/action_queue_states/src/EntityOperations.php
@@ -21,14 +21,14 @@ class EntityOperations implements ContainerInjectionInterface {
   /**
    * The Action Queue Transitions Service.
    *
-   * @var \Drupal\action_queue_states\ActionQueueTransitions
+   * @var ActionQueueTransitions
    */
   protected $transitions;
 
   /**
    * Constructs a new EntityOperations object.
    *
-   * @param \Drupal\action_queue_states\ActionQueueTransitions $transitions
+   * @param ActionQueueTransitions $transitions
    *   Action Queue Transitions service.
    */
   public function __construct(ActionQueueTransitions $transitions) {
@@ -47,10 +47,10 @@ class EntityOperations implements ContainerInjectionInterface {
   /**
    * Ensures that a destination is present on the given URL.
    *
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   The URL object to which the destination should be added.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The updated URL object.
    */
   protected function ensureDestination(Url $url) {
diff --git a/modules/action_queue_states/src/EntityTypeInfo.php b/modules/action_queue_states/src/EntityTypeInfo.php
index 36be013..4af2576 100644
--- a/modules/action_queue_states/src/EntityTypeInfo.php
+++ b/modules/action_queue_states/src/EntityTypeInfo.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\action_queue_states;
 
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\action_queue_states\Form\ActionQueueStateConfirmForm;
 
 /**
@@ -17,7 +18,7 @@ class EntityTypeInfo {
   /**
    * Adds action queue states configuration to action queue items..
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface[] $entity_types
+   * @param EntityTypeInterface[] $entity_types
    *   The master entity type list to alter.
    *
    * @see hook_entity_type_alter()
diff --git a/modules/action_queue_states/src/Form/ActionQueueStateConfirmForm.php b/modules/action_queue_states/src/Form/ActionQueueStateConfirmForm.php
index 46c2821..1d7a72e 100644
--- a/modules/action_queue_states/src/Form/ActionQueueStateConfirmForm.php
+++ b/modules/action_queue_states/src/Form/ActionQueueStateConfirmForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\action_queue_states\Form;
 
+use Drupal\workflows\TransitionInterface;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -20,11 +21,11 @@ class ActionQueueStateConfirmForm extends ContentEntityConfirmFormBase {
   protected $transition;
 
   /**
-   * Get the current transition.
-   *
-   * @return \Drupal\workflows\TransitionInterface;
-   *   The current transition.
-   */
+  * Get the current transition.
+  *
+   * @return TransitionInterface ;
+    The current transition.
+  */
   public function getTransition() {
     if (empty($this->transition)) {
       $transition = $this->getRouteMatch()->getParameter('transition');
diff --git a/modules/action_queue_states/src/Form/ActionQueueStatesConfigureForm.php b/modules/action_queue_states/src/Form/ActionQueueStatesConfigureForm.php
index 169fc0f..490fd73 100644
--- a/modules/action_queue_states/src/Form/ActionQueueStatesConfigureForm.php
+++ b/modules/action_queue_states/src/Form/ActionQueueStatesConfigureForm.php
@@ -21,7 +21,7 @@ class ActionQueueStatesConfigureForm extends WorkflowTypeConfigureFormBase imple
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
diff --git a/modules/action_queue_states/src/Form/ActionQueueStatesForm.php b/modules/action_queue_states/src/Form/ActionQueueStatesForm.php
index 11734fd..d4e321c 100644
--- a/modules/action_queue_states/src/Form/ActionQueueStatesForm.php
+++ b/modules/action_queue_states/src/Form/ActionQueueStatesForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\action_queue_states\Form;
 
+use Drupal\content_moderation\ContentModerationState;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\workflows\Plugin\WorkflowTypeStateFormBase;
 use Drupal\workflows\StateInterface;
@@ -17,7 +18,7 @@ class ActionQueueStatesForm extends WorkflowTypeStateFormBase {
    * {@inheritdoc}
    */
   public function buildConfigurationForm(array $form, FormStateInterface $form_state, StateInterface $state = NULL) {
-    /** @var \Drupal\content_moderation\ContentModerationState $state */
+    /** @var ContentModerationState $state */
     $state = $form_state->get('state');
     $is_required_state = isset($state) ? in_array($state->id(), $this->workflowType->getRequiredStates(), TRUE) : FALSE;
 
diff --git a/modules/action_queue_states/src/Plugin/Field/FieldFormatter/ActionQueueStateFormatter.php b/modules/action_queue_states/src/Plugin/Field/FieldFormatter/ActionQueueStateFormatter.php
index 4a1436c..308cf35 100644
--- a/modules/action_queue_states/src/Plugin/Field/FieldFormatter/ActionQueueStateFormatter.php
+++ b/modules/action_queue_states/src/Plugin/Field/FieldFormatter/ActionQueueStateFormatter.php
@@ -24,7 +24,7 @@ class ActionQueueStateFormatter extends FormatterBase {
   /**
    * The action queue state information service.
    *
-   * @var \Drupal\action_queue_states\ActionQueueStateInformation
+   * @var ActionQueueStateInformation
    */
   protected $stateInformation;
 
diff --git a/modules/action_queue_states/src/Plugin/views/filter/ActionQueueStateFilter.php b/modules/action_queue_states/src/Plugin/views/filter/ActionQueueStateFilter.php
index 40d76f1..1a0de07 100644
--- a/modules/action_queue_states/src/Plugin/views/filter/ActionQueueStateFilter.php
+++ b/modules/action_queue_states/src/Plugin/views/filter/ActionQueueStateFilter.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\action_queue_states\Plugin\views\filter;
 
+use Drupal\content_moderation\Plugin\WorkflowType\ContentModerationInterface;
+use Drupal\workflows\WorkflowInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -26,14 +28,14 @@ class ActionQueueStateFilter extends InOperator implements DependentWithRemovalP
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The storage handler of the workflow entity type.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $workflowStorage;
 
@@ -84,7 +86,7 @@ class ActionQueueStateFilter extends InOperator implements DependentWithRemovalP
 
     // Get all the workflow options.
     foreach ($this->workflowStorage->loadByProperties(['type' => 'action_queue_states']) as $workflow) {
-      /** @var \Drupal\content_moderation\Plugin\WorkflowType\ContentModerationInterface $workflow_type */
+      /** @var ContentModerationInterface $workflow_type */
       $workflow_type = $workflow->getTypePlugin();
       foreach ($workflow_type->getStates() as $state_id => $state) {
         $this->valueOptions[$workflow->label()][implode('-', [$workflow->id(), $state_id])] = $state->label();
@@ -122,7 +124,7 @@ class ActionQueueStateFilter extends InOperator implements DependentWithRemovalP
     $dependencies = parent::calculateDependencies();
 
     if ($workflow_ids = $this->getWorkflowIds()) {
-      /** @var \Drupal\workflows\WorkflowInterface $workflow */
+      /** @var WorkflowInterface $workflow */
       foreach ($this->workflowStorage->loadMultiple($workflow_ids) as $workflow) {
         $dependencies[$workflow->getConfigDependencyKey()][] = $workflow->getConfigDependencyName();
       }
diff --git a/src/ActionExecutionContextBase.php b/src/ActionExecutionContextBase.php
index 1e6bc23..09bdbfb 100644
--- a/src/ActionExecutionContextBase.php
+++ b/src/ActionExecutionContextBase.php
@@ -28,7 +28,7 @@ abstract class ActionExecutionContextBase implements ActionExecutionContextInter
   /**
    * The entity being evaluated.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;
 
@@ -61,7 +61,7 @@ abstract class ActionExecutionContextBase implements ActionExecutionContextInter
   protected $validatedConstraints = [];
 
   /**
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    * @param $key
    *   The optional context key.
diff --git a/src/ActionQueueConstraintManager.php b/src/ActionQueueConstraintManager.php
index 42fbf76..9bf2872 100644
--- a/src/ActionQueueConstraintManager.php
+++ b/src/ActionQueueConstraintManager.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\action_queue;
 
+use Drupal\action_queue\Plugin\ActionQueue\Constraint\ActionQueueConstraintInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Action\ActionInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -20,9 +22,9 @@ class ActionQueueConstraintManager extends DefaultPluginManager implements Actio
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ -55,10 +57,10 @@ class ActionQueueConstraintManager extends DefaultPluginManager implements Actio
    * @param mixed $options
    *   The constraint options.
    *
-   * @return \Drupal\action_queue\Plugin\ActionQueue\Constraint\ActionQueueConstraintInterface
+   * @return ActionQueueConstraintInterface
    *   The action constraint plugin.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function create($name, $options) {
     if (!is_array($options)) {
diff --git a/src/ActionQueueConstraintManagerInterface.php b/src/ActionQueueConstraintManagerInterface.php
index 61859d7..93e77ca 100644
--- a/src/ActionQueueConstraintManagerInterface.php
+++ b/src/ActionQueueConstraintManagerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\action_queue;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Action\ActionInterface;
 
 /**
@@ -12,13 +13,13 @@ interface ActionQueueConstraintManagerInterface {
   /**
    * Get the constraints by action plugin.
    *
-   * @param \Drupal\Core\Action\ActionInterface $action
+   * @param ActionInterface $action
    *   The action plugin.
    *
    * @return array
    *   The array of applicable constraints.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function getConstraintsByAction(ActionInterface $action);
 
diff --git a/src/ActionQueueConstraintValidator.php b/src/ActionQueueConstraintValidator.php
index f9c599d..6c6e58f 100644
--- a/src/ActionQueueConstraintValidator.php
+++ b/src/ActionQueueConstraintValidator.php
@@ -16,7 +16,7 @@ class ActionQueueConstraintValidator implements ActionQueueConstraintValidatorIn
   /**
    * An event dispatcher.
    *
-   * @var \Symfony\Contracts\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
@@ -37,7 +37,7 @@ class ActionQueueConstraintValidator implements ActionQueueConstraintValidatorIn
   /**
    * Constructor for Action Constraint Validator.
    *
-   * @param \Symfony\Contracts\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   An event dispatcher instance.
    */
   public function __construct(EventDispatcherInterface $event_dispatcher) {
@@ -93,7 +93,7 @@ class ActionQueueConstraintValidator implements ActionQueueConstraintValidatorIn
 
     // Dispatch the validate constraints event.
     $event = new ActionQueueConstraintsValidateEvent($this->isValid(), $this->context);
-    $this->eventDispatcher->dispatch(ActionQueueConstraintsValidateEvent::NAME, $event);
+    $this->eventDispatcher->dispatch($event, ActionQueueConstraintsValidateEvent::NAME);
   }
 
   /**
diff --git a/src/ActionQueueConstraintValidatorInterface.php b/src/ActionQueueConstraintValidatorInterface.php
index 952c3bd..83c4a69 100644
--- a/src/ActionQueueConstraintValidatorInterface.php
+++ b/src/ActionQueueConstraintValidatorInterface.php
@@ -14,7 +14,7 @@ interface ActionQueueConstraintValidatorInterface {
   /**
    * Initialize the validator service.
    *
-   * @param \Drupal\action_queue\ActionExecutionContextInterface $context
+   * @param ActionExecutionContextInterface $context
    *   The action execution context.
    */
   public function initialize(ActionExecutionContextInterface $context);
@@ -30,7 +30,7 @@ interface ActionQueueConstraintValidatorInterface {
   /**
    * Validates an action against all constraints assigned to it.
    *
-   * @param \Drupal\action_queue\Plugin\ActionQueue\Constraint\ActionQueueConstraintInterface[] $constraints
+   * @param ActionQueueConstraintInterface[] $constraints
    *   The constraints which should be ensured for the given value.
    */
   public function validateConstraints($constraints);
@@ -46,7 +46,7 @@ interface ActionQueueConstraintValidatorInterface {
   /**
    * Get the action execution context.
    *
-   * @return \Drupal\action_queue\ActionExecutionContextInterface
+   * @return ActionExecutionContextInterface
    *   The execution context.
    */
   public function getContext();
diff --git a/src/ActionQueueExecutionContext.php b/src/ActionQueueExecutionContext.php
index ab5462c..6b1f49f 100644
--- a/src/ActionQueueExecutionContext.php
+++ b/src/ActionQueueExecutionContext.php
@@ -16,9 +16,9 @@ use Drupal\action_queue\Entity\ActionQueueItemInterface;
 class ActionQueueExecutionContext extends ActionExecutionContextBase {
 
   /**
-   * @param \Drupal\action_queue\Entity\ActionQueueItemInterface $item
+   * @param ActionQueueItemInterface $item
    *   The action queue item entity.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    * @param $key
    *   The optional context key.
@@ -31,7 +31,7 @@ class ActionQueueExecutionContext extends ActionExecutionContextBase {
   /**
    * The action queue item.
    *
-   * @var \Drupal\action_queue\Entity\ActionQueueItemInterface
+   * @var ActionQueueItemInterface
    */
   protected $item;
 
diff --git a/src/ActionQueueItemListBuilder.php b/src/ActionQueueItemListBuilder.php
index 405c539..f12fdbf 100644
--- a/src/ActionQueueItemListBuilder.php
+++ b/src/ActionQueueItemListBuilder.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\action_queue;
 
+use Drupal\Core\Entity\Query\QueryInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 
@@ -18,14 +20,14 @@ class ActionQueueItemListBuilder extends EntityListBuilder {
    * This is used with getEntityIds() in order to control which results we want
    * to show.
    *
-   * @var \Drupal\Core\Entity\Query\QueryInterface
+   * @var QueryInterface
    */
   protected $query;
 
   /**
    * Get the entity query.
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface
+   * @return QueryInterface
    *   The query interface.
    */
   public function getQuery() {
@@ -38,7 +40,7 @@ class ActionQueueItemListBuilder extends EntityListBuilder {
   /**
    * Builds a row for an entity in the entity listing.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for this row of the list.
    *
    * @return array
@@ -86,7 +88,7 @@ class ActionQueueItemListBuilder extends EntityListBuilder {
    *
    * @param EntityInterface $entity
    *   The entity.
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The current status.
    */
   public function getStatus(EntityInterface $entity) {
diff --git a/src/ActionQueueTriggerPluginManager.php b/src/ActionQueueTriggerPluginManager.php
index 0bb2712..0404487 100644
--- a/src/ActionQueueTriggerPluginManager.php
+++ b/src/ActionQueueTriggerPluginManager.php
@@ -19,9 +19,9 @@ class ActionQueueTriggerPluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/ActionWaitQueue.php b/src/ActionWaitQueue.php
index ff7d549..48a22f9 100644
--- a/src/ActionWaitQueue.php
+++ b/src/ActionWaitQueue.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\action_queue;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Action\ActionInterface;
 use Drupal\Core\Action\ActionManager;
 use Drupal\Core\Entity\EntityInterface;
@@ -24,42 +28,42 @@ class ActionWaitQueue implements ActionWaitQueueInterface {
   /**
    * The action plugin manager service.
    *
-   * @var \Drupal\Core\Action\ActionManager
+   * @var ActionManager
    */
   protected $actionPluginManager;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * An event dispatcher.
    *
-   * @var \Symfony\Contracts\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * Action constraint plugin manager.
    *
-   * @var \Drupal\action_queue\ActionQueueConstraintManagerInterface
+   * @var ActionQueueConstraintManagerInterface
    */
   protected $actionConstraintPluginManager;
 
   /**
    * Action constraint validator service.
    *
-   * @var \Drupal\action_queue\ActionQueueConstraintValidatorInterface
+   * @var ActionQueueConstraintValidatorInterface
    */
   protected $actionConstraintValidator;
 
@@ -73,13 +77,13 @@ class ActionWaitQueue implements ActionWaitQueueInterface {
   /**
    * Constructs an ActionWaitQueue object.
    *
-   * @param \Drupal\Core\Action\ActionManager $action_plugin_manager
+   * @param ActionManager $action_plugin_manager
    *   The action plugin manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Symfony\Contracts\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   An event dispatcher instance to use for configuration events.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    * @param ActionQueueConstraintManagerInterface $action_constraint_manager
    *   The action constraint plugin manager.
@@ -152,7 +156,7 @@ class ActionWaitQueue implements ActionWaitQueueInterface {
 
     // Dispatch the AddActionToQueue event.
     $event = new AddActionToQueueEvent($plugin, $entity);
-    $this->eventDispatcher->dispatch(ActionQueueEvents::ACTION_ADDED, $event);
+    $this->eventDispatcher->dispatch($event, ActionQueueEvents::ACTION_ADDED);
   }
 
   /**
@@ -172,7 +176,7 @@ class ActionWaitQueue implements ActionWaitQueueInterface {
           $action->delete();
           // Dispatch the RemoveActionFromQueue event.
           $event = new RemoveActionFromQueueEvent($plugin, $entity);
-          $this->eventDispatcher->dispatch(ActionQueueEvents::ACTION_REMOVED, $event);
+          $this->eventDispatcher->dispatch($event, ActionQueueEvents::ACTION_REMOVED);
         }
       }
     }
@@ -181,11 +185,11 @@ class ActionWaitQueue implements ActionWaitQueueInterface {
   /**
    * TGet the action queue storage.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   The action queue storage.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getStorage() {
     return $this->entityTypeManager->getStorage('action_queue_item');
@@ -227,7 +231,7 @@ class ActionWaitQueue implements ActionWaitQueueInterface {
    * @return array
    *   The array of instantiated plugins.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function getActionIdsByTrigger($trigger) {
     $plugins = [];
@@ -269,7 +273,7 @@ class ActionWaitQueue implements ActionWaitQueueInterface {
   /**
    * Add the triggered action to the cache.
    *
-   * @param \Drupal\action_queue\Entity\ActionQueueItemInterface $item
+   * @param ActionQueueItemInterface $item
    *   The action queue item.
    */
   private function addTriggeredItem(ActionQueueItemInterface $item) {
@@ -279,7 +283,7 @@ class ActionWaitQueue implements ActionWaitQueueInterface {
   /**
    * Determine whether we've already triggered this item.
    *
-   * @param \Drupal\action_queue\Entity\ActionQueueItemInterface $item
+   * @param ActionQueueItemInterface $item
    *   The action queue item.
    *
    * @return bool
@@ -296,7 +300,7 @@ class ActionWaitQueue implements ActionWaitQueueInterface {
   /**
    * Execute an action queue item.
    *
-   * @param \Drupal\action_queue\Entity\ActionQueueItemInterface $item
+   * @param ActionQueueItemInterface $item
    *   The action queue item.
    */
   protected function executeAction(ActionQueueItemInterface $item) {
diff --git a/src/ActionWaitQueueInterface.php b/src/ActionWaitQueueInterface.php
index d51f8d5..dc9461d 100644
--- a/src/ActionWaitQueueInterface.php
+++ b/src/ActionWaitQueueInterface.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\action_queue;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Action\ActionInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\action_queue\Plugin\ActionQueueActionInterface;
@@ -16,7 +20,7 @@ interface ActionWaitQueueInterface {
   /**
    * Determine whether this action can be queued or not.
    *
-   * @param \Drupal\Core\Action\ActionInterface $plugin
+   * @param ActionInterface $plugin
    *   The action to be queued.
    *
    * @return bool
@@ -37,7 +41,7 @@ interface ActionWaitQueueInterface {
    * @param array $trigger_arguments
    *   The arguments passed to the trigger.
    *
-   * @return \Drupal\action_queue\Plugin\ActionQueueActionInterface
+   * @return ActionQueueActionInterface
    *   The action plugin
    */
   public function prepareAction($action, array $values = [], array $trigger_arguments = []);
@@ -45,36 +49,36 @@ interface ActionWaitQueueInterface {
   /**
    * Add item to event queue.
    *
-   * @param \Drupal\action_queue\Plugin\ActionQueueActionInterface $plugin
+   * @param ActionQueueActionInterface $plugin
    *   The plugin instance.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function addItem(ActionQueueActionInterface $plugin, EntityInterface $entity);
 
   /**
    * Remove any items added to the queue.
    *
-   * @param \Drupal\action_queue\Plugin\ActionQueueActionInterface $plugin
+   * @param ActionQueueActionInterface $plugin
    *   The plugin instance.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function removeItem(ActionQueueActionInterface $plugin, EntityInterface $entity);
 
   /**
    * Helper function for loading an existing items in the queue.
    *
-   * @param \Drupal\action_queue\Plugin\ActionQueueActionInterface $plugin
+   * @param ActionQueueActionInterface $plugin
    *   The action plugin.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    */
   public function loadItem(ActionQueueActionInterface $plugin, EntityInterface $entity);
@@ -82,22 +86,22 @@ interface ActionWaitQueueInterface {
   /**
    * Remove any executed actions.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function clearExecutedItems();
 
   /**
    * Fetch the action items by a certain entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The target entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The array of action queue items.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function getItemsByEntity(EntityInterface $entity);
 
@@ -106,14 +110,14 @@ interface ActionWaitQueueInterface {
    *
    * @param string $trigger
    *   The trigger plugin name.
-   * @param \Drupal\Core\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   The entities to execute on. If left empty it will execute on all the
    *   entities found in the action queue with this trigger.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function triggerActions($trigger, array $entities = []);
 
diff --git a/src/Annotation/ActionQueueConstraint.php b/src/Annotation/ActionQueueConstraint.php
index 213c14a..ca79697 100644
--- a/src/Annotation/ActionQueueConstraint.php
+++ b/src/Annotation/ActionQueueConstraint.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\action_queue\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -23,7 +24,7 @@ class ActionQueueConstraint extends Plugin {
   /**
    * The human-readable name of the action constraint plugin.
    *
-   * @var string|\Drupal\Core\Annotation\Translation
+   * @var string|Translation
    */
   public $label;
 
diff --git a/src/Controller/ActionsQueuedListingControllerBase.php b/src/Controller/ActionsQueuedListingControllerBase.php
index d6cf5a7..2f4738f 100644
--- a/src/Controller/ActionsQueuedListingControllerBase.php
+++ b/src/Controller/ActionsQueuedListingControllerBase.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\action_queue\Controller;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -14,14 +18,14 @@ class ActionsQueuedListingControllerBase extends ControllerBase {
   /**
    * The current route.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * Constructs a new EntityActionsQueuedListingController instance.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route_match service.
    */
   public function __construct(RouteMatchInterface $route_match) {
@@ -53,10 +57,10 @@ class ActionsQueuedListingControllerBase extends ControllerBase {
    * @return array
    *   The render array.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginException
+   * @throws PluginNotFoundException
+   * @throws EntityMalformedException
    */
   public function build() {
     // @todo do we need to show executed items?
diff --git a/src/Entity/ActionQueueItem.php b/src/Entity/ActionQueueItem.php
index 0924245..18df25e 100644
--- a/src/Entity/ActionQueueItem.php
+++ b/src/Entity/ActionQueueItem.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\action_queue\Entity;
 
+use Drupal\action_queue\Plugin\ActionQueueActionInterface;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityChangedTrait;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -142,7 +143,7 @@ class ActionQueueItem extends ContentEntityBase implements ActionQueueItemInterf
   /**
    * Get the action plugin.
    *
-   * @return \Drupal\action_queue\Plugin\ActionQueueActionInterface
+   * @return ActionQueueActionInterface
    *   The action plugin with hydrated values from this entity.
    */
   public function getActionPlugin() {
@@ -159,7 +160,7 @@ class ActionQueueItem extends ContentEntityBase implements ActionQueueItemInterf
    * {@inheritdoc}
    */
   public static function baseFieldDefinitions(EntityTypeInterface $entity_type) {
-    /** @var \Drupal\Core\Field\BaseFieldDefinition[] $fields */
+    /** @var BaseFieldDefinition[] $fields */
     $fields = parent::baseFieldDefinitions($entity_type);
 
     $fields['id']->setLabel(new TranslatableMarkup('ID'))
diff --git a/src/Event/ActionQueueConstraintsValidateEvent.php b/src/Event/ActionQueueConstraintsValidateEvent.php
index 8d1fa62..cd5fecf 100644
--- a/src/Event/ActionQueueConstraintsValidateEvent.php
+++ b/src/Event/ActionQueueConstraintsValidateEvent.php
@@ -3,12 +3,11 @@
 namespace Drupal\action_queue\Event;
 
 use Drupal\action_queue\ActionExecutionContextInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Event for when an action to add to the queue.
  */
-class ActionQueueConstraintsValidateEvent extends Event {
+class ActionQueueConstraintsValidateEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * Action constraints validate event.
@@ -29,12 +28,12 @@ class ActionQueueConstraintsValidateEvent extends Event {
   /**
    * The current context.
    *
-   * @var \Drupal\action_queue\ActionExecutionContextInterface
+   * @var ActionExecutionContextInterface
    */
   protected $context;
 
   /**
-   * @param \Drupal\action_queue\ActionExecutionContextInterface $context
+   * @param ActionExecutionContextInterface $context
    *   The action queue execution context.
    */
   public function __construct($valid, ActionExecutionContextInterface $context) {
@@ -55,7 +54,7 @@ class ActionQueueConstraintsValidateEvent extends Event {
   /**
    * Get the action queue execution context.
    *
-   * @return \Drupal\action_queue\ActionExecutionContextInterface
+   * @return ActionExecutionContextInterface
    */
   public function getContext() {
     return $this->context;
diff --git a/src/Event/AddActionToQueueEvent.php b/src/Event/AddActionToQueueEvent.php
index 88ffaf1..fd261cf 100644
--- a/src/Event/AddActionToQueueEvent.php
+++ b/src/Event/AddActionToQueueEvent.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\action_queue\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\action_queue\Plugin\ActionQueueActionInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Event for when an action to add to the queue.
@@ -14,23 +14,23 @@ class AddActionToQueueEvent extends Event {
   /**
    * The action plugin.
    *
-   * @var \Drupal\action_queue\Plugin\ActionQueueActionInterface
+   * @var ActionQueueActionInterface
    */
   protected $action;
 
   /**
    * The entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;
 
   /**
    * Builds a new add action to queue event.
    *
-   * @param \Drupal\action_queue\Plugin\ActionQueueActionInterface $action
+   * @param ActionQueueActionInterface $action
    *   The action plugin.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity being sent with this action.
    */
   public function __construct(ActionQueueActionInterface $action, EntityInterface $entity) {
@@ -41,7 +41,7 @@ class AddActionToQueueEvent extends Event {
   /**
    * Returns the action associated with this event.
    *
-   * @return \Drupal\action_queue\Plugin\ActionQueueActionInterface
+   * @return ActionQueueActionInterface
    *   The action.
    */
   public function getAction() {
@@ -51,7 +51,7 @@ class AddActionToQueueEvent extends Event {
   /**
    * Returns the entity associated with the Event.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The entity.
    */
   public function getEntity() {
diff --git a/src/Event/RemoveActionFromQueueEvent.php b/src/Event/RemoveActionFromQueueEvent.php
index 1c0180f..344637e 100644
--- a/src/Event/RemoveActionFromQueueEvent.php
+++ b/src/Event/RemoveActionFromQueueEvent.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\action_queue\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\action_queue\Plugin\ActionQueueActionInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Event for an action is removed from the queue.
@@ -14,23 +14,23 @@ class RemoveActionFromQueueEvent extends Event {
   /**
    * The action plugin.
    *
-   * @var \Drupal\action_queue\Plugin\ActionQueueActionInterface
+   * @var ActionQueueActionInterface
    */
   protected $action;
 
   /**
    * The entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;
 
   /**
    * Builds a new remove action from queue event.
    *
-   * @param \Drupal\action_queue\Plugin\ActionQueueActionInterface $action
+   * @param ActionQueueActionInterface $action
    *   The action plugin.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity being sent with this action.
    */
   public function __construct(ActionQueueActionInterface $action, EntityInterface $entity) {
@@ -41,7 +41,7 @@ class RemoveActionFromQueueEvent extends Event {
   /**
    * Returns the action associated with this event.
    *
-   * @return \Drupal\action_queue\Plugin\ActionQueueActionInterface
+   * @return ActionQueueActionInterface
    *   The action.
    */
   public function getAction() {
@@ -51,7 +51,7 @@ class RemoveActionFromQueueEvent extends Event {
   /**
    * Returns the entity associated with the Event.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The entity.
    */
   public function getEntity() {
diff --git a/src/Form/ActionPanelSelectionFormAlter.php b/src/Form/ActionPanelSelectionFormAlter.php
index cf8bf48..6d2bd1d 100644
--- a/src/Form/ActionPanelSelectionFormAlter.php
+++ b/src/Form/ActionPanelSelectionFormAlter.php
@@ -19,14 +19,14 @@ class ActionPanelSelectionFormAlter implements ContainerInjectionInterface {
   /**
    * The action wait queue.
    *
-   * @var \Drupal\action_queue\ActionWaitQueue
+   * @var ActionWaitQueue
    */
   protected $actionWaitQueue;
 
   /**
    * ActionPanelSelectionFormAlter constructor.
    *
-   * @param \Drupal\action_queue\ActionWaitQueue $action_wait_queue
+   * @param ActionWaitQueue $action_wait_queue
    *   The action wait queue service.
    */
   public function __construct(ActionWaitQueue $action_wait_queue) {
@@ -47,7 +47,7 @@ class ActionPanelSelectionFormAlter implements ContainerInjectionInterface {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @see hook_form_alter()
@@ -78,7 +78,7 @@ class ActionPanelSelectionFormAlter implements ContainerInjectionInterface {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function submitForm(array $form, FormStateInterface $form_state) {
diff --git a/src/Plugin/ActionQueue/Constraint/ActionQueueConstraintBase.php b/src/Plugin/ActionQueue/Constraint/ActionQueueConstraintBase.php
index ecc13d0..c962570 100644
--- a/src/Plugin/ActionQueue/Constraint/ActionQueueConstraintBase.php
+++ b/src/Plugin/ActionQueue/Constraint/ActionQueueConstraintBase.php
@@ -19,7 +19,7 @@ abstract class ActionQueueConstraintBase extends PluginBase implements ActionQue
   /**
    * The current entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;
 
@@ -88,7 +88,7 @@ abstract class ActionQueueConstraintBase extends PluginBase implements ActionQue
   /**
    * Set the current entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    */
   public function setEntity(EntityInterface $entity) {
@@ -98,7 +98,7 @@ abstract class ActionQueueConstraintBase extends PluginBase implements ActionQue
   /**
    * Return the current entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The entity.
    */
   public function getEntity() {
diff --git a/src/Plugin/ActionQueue/Trigger/ActionQueueTriggerInterface.php b/src/Plugin/ActionQueue/Trigger/ActionQueueTriggerInterface.php
index e7aa3c0..af0fb2d 100644
--- a/src/Plugin/ActionQueue/Trigger/ActionQueueTriggerInterface.php
+++ b/src/Plugin/ActionQueue/Trigger/ActionQueueTriggerInterface.php
@@ -23,7 +23,7 @@ interface ActionQueueTriggerInterface extends PluginInspectionInterface, Contain
    *   The submitted values.
    * @param array $form
    *   The current form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state interface.
    *
    * @return array
@@ -32,14 +32,13 @@ interface ActionQueueTriggerInterface extends PluginInspectionInterface, Contain
   public function prepareConfiguration($values, $form, FormStateInterface $form_state);
 
   /**
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The current entity.
    * @param array $arguments
    *   Arguments as created from prepareConfiguration().
    *
    * @return bool
    *   TRUE of trigger passes, FALSE otherwise.
-   *
    */
   public function evaluate(EntityInterface $entity, $arguments = []);
 
diff --git a/src/Plugin/ActionQueueActionBase.php b/src/Plugin/ActionQueueActionBase.php
index 7e9aed6..b8fab8c 100644
--- a/src/Plugin/ActionQueueActionBase.php
+++ b/src/Plugin/ActionQueueActionBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\action_queue\Plugin;
 
+use Drupal\action_queue\Plugin\ActionQueue\Trigger\ActionQueueTriggerInterface;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Access\AccessResult;
@@ -25,7 +26,7 @@ abstract class ActionQueueActionBase extends ActionBase implements ActionQueueAc
   /**
    * The trigger plugin.
    *
-   * @var \Drupal\action_queue\Plugin\ActionQueue\Trigger\ActionQueueTriggerInterface
+   * @var ActionQueueTriggerInterface
    */
   protected $trigger;
 
@@ -99,7 +100,7 @@ abstract class ActionQueueActionBase extends ActionBase implements ActionQueueAc
   /**
    * Get the current trigger plugin (if applicable).
    *
-   * @return \Drupal\action_queue\Plugin\ActionQueue\Trigger\ActionQueueTriggerInterface
+   * @return ActionQueueTriggerInterface
    *   The trigger plugin or FALSE if not applicable.
    */
   public function getTrigger() {
diff --git a/src/Plugin/ActionQueueActionInterface.php b/src/Plugin/ActionQueueActionInterface.php
index 4e8b88e..43d8018 100644
--- a/src/Plugin/ActionQueueActionInterface.php
+++ b/src/Plugin/ActionQueueActionInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\action_queue\Plugin;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -28,7 +29,7 @@ interface ActionQueueActionInterface extends PluginInspectionInterface, Containe
   /**
    * Message to describe the action performed when the plugin is executed.
    *
-   * @param null|\Drupal\Core\Entity\EntityInterface $entity
+   * @param null|EntityInterface $entity
    *   The entity.
    */
   public function getMessage($entity = NULL);
@@ -36,7 +37,7 @@ interface ActionQueueActionInterface extends PluginInspectionInterface, Containe
   /**
    * Executes the action.
    *
-   * @param null|\Drupal\Core\Entity\EntityInterface $entity
+   * @param null|EntityInterface $entity
    *   The entity.
    */
   public function execute($entity = NULL);
diff --git a/tests/src/Kernel/ActionQueueConstraintValidatorTest.php b/tests/src/Kernel/ActionQueueConstraintValidatorTest.php
index 9f3b7e6..e1992cc 100644
--- a/tests/src/Kernel/ActionQueueConstraintValidatorTest.php
+++ b/tests/src/Kernel/ActionQueueConstraintValidatorTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\action_queue\Kernel;
 
+use Drupal\action_queue\ActionQueueConstraintManagerInterface;
+use Drupal\action_queue\ActionQueueConstraintValidatorInterface;
 use Drupal\action_queue\ActionExecutionContext;
 
 /**
@@ -14,14 +16,14 @@ class ActionQueueConstraintValidatorTest extends ActionQueueKernelTestBase {
   /**
    * The constraint plugin manager.
    *
-   * @var \Drupal\action_queue\ActionQueueConstraintManagerInterface
+   * @var ActionQueueConstraintManagerInterface
    */
   protected $constraintManager;
 
   /**
    * The constraint validator.
    *
-   * @var \Drupal\action_queue\ActionQueueConstraintValidatorInterface
+   * @var ActionQueueConstraintValidatorInterface
    */
   protected $constraintValidator;
 
diff --git a/tests/src/Kernel/ActionQueueKernelTestBase.php b/tests/src/Kernel/ActionQueueKernelTestBase.php
index 4496fd0..1732952 100644
--- a/tests/src/Kernel/ActionQueueKernelTestBase.php
+++ b/tests/src/Kernel/ActionQueueKernelTestBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\action_queue\Kernel;
 
+use Drupal\user\UserInterface;
+use Drupal\node\NodeInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\content_moderation\Traits\ContentModerationTestTrait;
 use Drupal\Tests\user\Traits\UserCreationTrait;
@@ -28,7 +30,7 @@ abstract class ActionQueueKernelTestBase extends KernelTestBase {
   /**
    * User for testing.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $testUser;
 
@@ -93,7 +95,7 @@ abstract class ActionQueueKernelTestBase extends KernelTestBase {
    * @param array $values
    *   The node values to create the node with.
    *
-   * @return \Drupal\node\NodeInterface
+   * @return NodeInterface
    *   The created node, which has been saved.
    *
    * @throws \Exception
