modules/contrib/business_rules/business_rules.drush.inc
modules/contrib/business_rules/business_rules.install
modules/contrib/business_rules/business_rules.module
modules/contrib/business_rules/modules/br_group/src/Plugin/BusinessRulesAction/AddNodeToGroupAction.php
modules/contrib/business_rules/modules/br_group/src/Plugin/BusinessRulesAction/AddUserToGroupAction.php
modules/contrib/business_rules/modules/br_group/src/Plugin/BusinessRulesAction/AssignRoleToUserAction.php
modules/contrib/business_rules/modules/br_group/src/Plugin/BusinessRulesAction/RemoveNodeFromGroupAction.php
modules/contrib/business_rules/modules/br_group/src/Plugin/BusinessRulesAction/RemoveRoleFromUserAction.php
modules/contrib/business_rules/modules/br_group/src/Plugin/BusinessRulesAction/RemoveUserFromGroupAction.php
modules/contrib/business_rules/modules/br_group/src/Plugin/BusinessRulesCondition/GroupHasNodeCondition.php
modules/contrib/business_rules/modules/br_group/src/Plugin/BusinessRulesCondition/GroupHasUserCondition.php
modules/contrib/business_rules/modules/br_group/src/Plugin/BusinessRulesCondition/UserHasRoleGroupCondition.php
modules/contrib/business_rules/modules/br_sms/src/Plugin/BusinessRulesAction/SendSmsMessageAction.php
modules/contrib/business_rules/schedule.page.inc
modules/contrib/business_rules/src/ActionHtmlRouteProvider.php
modules/contrib/business_rules/src/ActionInterface.php
modules/contrib/business_rules/src/ActionListBuilder.php
modules/contrib/business_rules/src/Ajax/UpdateFlowchartCommand.php
modules/contrib/business_rules/src/Ajax/UpdateOptionsCommand.php
modules/contrib/business_rules/src/Annotation/BusinessRulesAction.php
modules/contrib/business_rules/src/Annotation/BusinessRulesCondition.php
modules/contrib/business_rules/src/Annotation/BusinessRulesItem.php
modules/contrib/business_rules/src/Annotation/BusinessRulesReactsOn.php
modules/contrib/business_rules/src/Annotation/BusinessRulesVariable.php
modules/contrib/business_rules/src/BusinessRuleHtmlRouteProvider.php
modules/contrib/business_rules/src/BusinessRuleInterface.php
modules/contrib/business_rules/src/BusinessRuleListBuilder.php
modules/contrib/business_rules/src/BusinessRulesBreadcrumb.php
modules/contrib/business_rules/src/BusinessRulesItemObject.php
modules/contrib/business_rules/src/ConditionHtmlRouteProvider.php
modules/contrib/business_rules/src/ConditionInterface.php
modules/contrib/business_rules/src/ConditionListBuilder.php
modules/contrib/business_rules/src/Controller/ActionSetController.php
modules/contrib/business_rules/src/Controller/AutocompleteTags.php
modules/contrib/business_rules/src/Controller/BusinessRuleController.php
modules/contrib/business_rules/src/Controller/BusinessRulesItemsController.php
modules/contrib/business_rules/src/Controller/ConditionSetController.php
modules/contrib/business_rules/src/Controller/ConditionsItemsController.php
modules/contrib/business_rules/src/Controller/LoopThroughViewResultController.php
modules/contrib/business_rules/src/Controller/ModalController.php
modules/contrib/business_rules/src/Controller/ScheduleController.php
modules/contrib/business_rules/src/Controller/ScheduleTaskController.php
modules/contrib/business_rules/src/Entity/Action.php
modules/contrib/business_rules/src/Entity/BusinessRule.php
modules/contrib/business_rules/src/Entity/BusinessRulesItemBase.php
modules/contrib/business_rules/src/Entity/Condition.php
modules/contrib/business_rules/src/Entity/Schedule.php
modules/contrib/business_rules/src/Entity/ScheduleInterface.php
modules/contrib/business_rules/src/Entity/ScheduleViewsData.php
modules/contrib/business_rules/src/Entity/Variable.php
modules/contrib/business_rules/src/EventSubscriber/BusinessRulesListener.php
modules/contrib/business_rules/src/EventSubscriber/KernelRequestListener.php
modules/contrib/business_rules/src/Events/BusinessRulesDrushEvent.php
modules/contrib/business_rules/src/Events/BusinessRulesEvent.php
modules/contrib/business_rules/src/Form/ActionDeleteForm.php
modules/contrib/business_rules/src/Form/ActionForm.php
modules/contrib/business_rules/src/Form/BusinessRuleDeleteForm.php
modules/contrib/business_rules/src/Form/BusinessRuleForm.php
modules/contrib/business_rules/src/Form/BusinessRulesSettingsForm.php
modules/contrib/business_rules/src/Form/ConditionDeleteForm.php
modules/contrib/business_rules/src/Form/ConditionForm.php
modules/contrib/business_rules/src/Form/ItemForm.php
modules/contrib/business_rules/src/Form/ScheduleDeleteForm.php
modules/contrib/business_rules/src/Form/ScheduleForm.php
modules/contrib/business_rules/src/Form/ScheduleRevisionDeleteForm.php
modules/contrib/business_rules/src/Form/ScheduleRevisionRevertForm.php
modules/contrib/business_rules/src/Form/ScheduleRevisionRevertTranslationForm.php
modules/contrib/business_rules/src/Form/ScheduleSettingsForm.php
modules/contrib/business_rules/src/Form/VariableDeleteForm.php
modules/contrib/business_rules/src/Form/VariableForm.php
modules/contrib/business_rules/src/ItemInterface.php
modules/contrib/business_rules/src/ItemListBuilder.php
modules/contrib/business_rules/src/ItemableInterface.php
modules/contrib/business_rules/src/Plugin/Block/BusinessRulesDebugBlock.php
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/ActionSet.php
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/AddRoleToUser.php
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/CalculateValue.php
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/ChangeFieldInfo.php
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/ChangeFormDisplay.php
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/DeleteEntity.php
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/DisplayErrorMessageOnForm.php
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/FetchEntityVariableAction.php
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/FillEntityVariableFields.php
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/LoopThroughFieldVariable.php
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/LoopThroughViewResult.php
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/PageRedirect.php
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/PublishContent.php
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/RemoveUserRole.php
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/SaveEntityVariableAction.php
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/ScheduleTask.php
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/SendEmail.php
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/SetFieldValue.php
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/ShowMessage.php
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/UnpublishContent.php
modules/contrib/business_rules/src/Plugin/BusinessRulesActionManager.php
modules/contrib/business_rules/src/Plugin/BusinessRulesActionPlugin.php
modules/contrib/business_rules/src/Plugin/BusinessRulesActionPluginInterface.php
modules/contrib/business_rules/src/Plugin/BusinessRulesCondition/CheckViewResultCount.php
modules/contrib/business_rules/src/Plugin/BusinessRulesCondition/CompareNumberOfResultsBetweenTwoViews.php
modules/contrib/business_rules/src/Plugin/BusinessRulesCondition/ConditionSet.php
modules/contrib/business_rules/src/Plugin/BusinessRulesCondition/DataComparison.php
modules/contrib/business_rules/src/Plugin/BusinessRulesCondition/LogicalAnd.php
modules/contrib/business_rules/src/Plugin/BusinessRulesCondition/LogicalOr.php
modules/contrib/business_rules/src/Plugin/BusinessRulesCondition/UserHasRole.php
modules/contrib/business_rules/src/Plugin/BusinessRulesCondition/UserVariableHasRole.php
modules/contrib/business_rules/src/Plugin/BusinessRulesCondition/VariableDataComparison.php
modules/contrib/business_rules/src/Plugin/BusinessRulesConditionManager.php
modules/contrib/business_rules/src/Plugin/BusinessRulesConditionPlugin.php
modules/contrib/business_rules/src/Plugin/BusinessRulesConditionPluginInterface.php
modules/contrib/business_rules/src/Plugin/BusinessRulesItemPluginBase.php
modules/contrib/business_rules/src/Plugin/BusinessRulesItemPluginInterface.php
modules/contrib/business_rules/src/Plugin/BusinessRulesReactsOn/CronRuns.php
modules/contrib/business_rules/src/Plugin/BusinessRulesReactsOn/EntityDelete.php
modules/contrib/business_rules/src/Plugin/BusinessRulesReactsOn/EntityInsert.php
modules/contrib/business_rules/src/Plugin/BusinessRulesReactsOn/EntityIsViewed.php
modules/contrib/business_rules/src/Plugin/BusinessRulesReactsOn/EntityLoaded.php
modules/contrib/business_rules/src/Plugin/BusinessRulesReactsOn/EntityPreSave.php
modules/contrib/business_rules/src/Plugin/BusinessRulesReactsOn/EntityUpdate.php
modules/contrib/business_rules/src/Plugin/BusinessRulesReactsOn/FormDisplayModeAlter.php
modules/contrib/business_rules/src/Plugin/BusinessRulesReactsOn/FormFieldAlter.php
modules/contrib/business_rules/src/Plugin/BusinessRulesReactsOn/FormValidation.php
modules/contrib/business_rules/src/Plugin/BusinessRulesReactsOn/KernelRequest.php
modules/contrib/business_rules/src/Plugin/BusinessRulesReactsOn/PageLoad.php
modules/contrib/business_rules/src/Plugin/BusinessRulesReactsOn/UserLogin.php
modules/contrib/business_rules/src/Plugin/BusinessRulesReactsOn/UserLogout.php
modules/contrib/business_rules/src/Plugin/BusinessRulesReactsOnInterface.php
modules/contrib/business_rules/src/Plugin/BusinessRulesReactsOnManager.php
modules/contrib/business_rules/src/Plugin/BusinessRulesReactsOnPlugin.php
modules/contrib/business_rules/src/Plugin/BusinessRulesVariable/CustomValueVariable.php
modules/contrib/business_rules/src/Plugin/BusinessRulesVariable/EntityEmptyVariable.php
modules/contrib/business_rules/src/Plugin/BusinessRulesVariable/EntityFieldVariable.php
modules/contrib/business_rules/src/Plugin/BusinessRulesVariable/UrlVariable.php
modules/contrib/business_rules/src/Plugin/BusinessRulesVariable/UserVariable.php
modules/contrib/business_rules/src/Plugin/BusinessRulesVariable/ViewResultVariable.php
modules/contrib/business_rules/src/Plugin/BusinessRulesVariableManager.php
modules/contrib/business_rules/src/Plugin/BusinessRulesVariablePlugin.php
modules/contrib/business_rules/src/Plugin/BusinessRulesVariablePluginInterface.php
modules/contrib/business_rules/src/Plugin/Derivative/BusinessRulesLocalTask.php
modules/contrib/business_rules/src/Plugin/EntityReferenceSelection/BusinessRulesItemSelection.php
modules/contrib/business_rules/src/Plugin/EntityReferenceSelection/BusinessRulesViewsSelection.php
modules/contrib/business_rules/src/Plugin/Mail/BusinessRulesMail.php
modules/contrib/business_rules/src/ScheduleAccessControlHandler.php
modules/contrib/business_rules/src/ScheduleHtmlRouteProvider.php
modules/contrib/business_rules/src/ScheduleListBuilder.php
modules/contrib/business_rules/src/ScheduleStorage.php
modules/contrib/business_rules/src/ScheduleStorageInterface.php
modules/contrib/business_rules/src/Util/BusinessRulesProcessor.php
modules/contrib/business_rules/src/Util/BusinessRulesUtil.php
modules/contrib/business_rules/src/Util/Flowchart/Element.php
modules/contrib/business_rules/src/Util/Flowchart/Flowchart.php
modules/contrib/business_rules/src/Util/Flowchart/Matrix.php
modules/contrib/business_rules/src/VariableHtmlRouteProvider.php
modules/contrib/business_rules/src/VariableInterface.php
modules/contrib/business_rules/src/VariableListBuilder.php
modules/contrib/business_rules/src/VariableObject.php
modules/contrib/business_rules/src/VariablesSet.php
modules/contrib/business_rules/tests/src/Functional/ModuleInstallTest.php
modules/contrib/business_rules/tests/src/FunctionalJavascript/DependentFieldsView.php
modules/contrib/business_rules/tests/src/FunctionalJavascript/ParagraphsAjaxSupport.php
modules/contrib/business_rules/tests/src/Kernel/BusinessRulesProcessorTest.php
modules/contrib/business_rules/tests/src/Unit/ConfigEntityCalculateDependencyTest.php

102 files with changes
======================

1) modules/contrib/business_rules/tests/src/Unit/ConfigEntityCalculateDependencyTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\business_rules\Unit;

+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\business_rules\BusinessRulesItemObject;
 use Drupal\business_rules\Entity\Action;
 use Drupal\business_rules\Entity\BusinessRule;
@@ @@
   /**
    * The Business rules Action plugin manager.
    *
-   * @var \Drupal\business_rules\Plugin\BusinessRulesActionManager|\PHPUnit\Framework\MockObject\MockObject
+   * @var BusinessRulesActionManager|MockObject
    */
   protected $businessRulesActionManager;

@@ @@
   /**
    * The Business rules Condition plugin manager.
    *
-   * @var \Drupal\business_rules\Plugin\BusinessRulesConditionManager|\PHPUnit\Framework\MockObject\MockObject
+   * @var BusinessRulesConditionManager|MockObject
    */
   protected $businessRulesConditionManager;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $entityStorage = $this->createMock(EntityStorageInterface::class);
     $entityTypeManager = $this->createMock(EntityTypeManagerInterface::class);
     $this->businessRulesActionManager = $this->createMock(BusinessRulesActionManager::class);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/business_rules/tests/src/Kernel/BusinessRulesProcessorTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * A mostly-empty service container, which BusinessRulesProcessor requires.
    *
-   * @var \Drupal\Core\DependencyInjection\ContainerBuilder
+   * @var ContainerBuilder
    */
   protected $sutContainer;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Set up the service container.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/business_rules/tests/src/FunctionalJavascript/ParagraphsAjaxSupport.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\business_rules\FunctionalJavascript;

+use Drupal\taxonomy\TermInterface;
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\taxonomy\Entity\Term;
@@ @@
   /**
    * A set of taxonomy terms needed by the system under test.
    *
-   * @var \Drupal\taxonomy\TermInterface[]
+   * @var TermInterface[]
    */
   protected $sutTerms;

@@ @@
   /**
    * A set of users needed by the system under test.
    *
-   * @var \Drupal\user\UserInterface[]
+   * @var UserInterface[]
    */
   protected $sutUsers;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create terms in the vocabulary.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/business_rules/tests/src/FunctionalJavascript/DependentFieldsView.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\business_rules\FunctionalJavascript;

+use Drupal\taxonomy\TermInterface;
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\taxonomy\Entity\Term;
@@ @@
   /**
    * A set of taxonomy terms needed by the system under test.
    *
-   * @var \Drupal\taxonomy\TermInterface[]
+   * @var TermInterface[]
    */
   protected $sutTerms;

@@ @@
   /**
    * A set of users needed by the system under test.
    *
-   * @var \Drupal\user\UserInterface[]
+   * @var UserInterface[]
    */
   protected $sutUsers;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create terms in the vocabulary.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/business_rules/src/VariablesSet.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Append the variable to the array.
    *
-   * @param \Drupal\business_rules\VariableObject $variable
+   * @param VariableObject $variable
    *   The variable set.
    */
   public function append(VariableObject $variable) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/business_rules/src/VariableInterface.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Evaluate the variable.
    *
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The dispatched event.
    *
-   * @return \Drupal\business_rules\VariableObject|\Drupal\business_rules\VariablesSet
+   * @return VariableObject|VariablesSet
    *   The evaluated variables.
    *
    * @throws \ReflectionException
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/business_rules/src/VariableHtmlRouteProvider.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the add-form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/business_rules/src/Util/Flowchart/Matrix.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * The root element.
    *
-   * @var \Drupal\business_rules\Util\Flowchart\Element
+   * @var Element
    */
   private $rootElement;

@@ @@
   /**
    * Get the element above in the matrix.
    *
-   * @param \Drupal\business_rules\Util\Flowchart\Element $element
+   * @param Element $element
    *   The element.
    *
-   * @return null|\Drupal\business_rules\Util\Flowchart\Element
+   * @return null|Element
    *   The element.
    */
   public function getElementAbove(Element $element) {
@@ @@
   /**
    * Get matrix element by item.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $item
+   * @param EntityInterface $item
    *   The item.
    *
-   * @return \Drupal\business_rules\Util\Flowchart\Element
+   * @return Element
    *   The Element.
    */
   public function getElementByItem(EntityInterface $item) {
@@ @@
   /**
    * Put an element inside the matrix.
    *
-   * @param \Drupal\business_rules\Util\Flowchart\Element $element
+   * @param Element $element
    *   The element.
-   * @param \Drupal\business_rules\Util\Flowchart\Element $parent
+   * @param Element $parent
    *   The parent element.
    * @param string $direction
    *   The direction: bottom|right|left|bottom-right|bottom-left.
@@ @@
   /**
    * Get the root element.
    *
-   * @return \Drupal\business_rules\Util\Flowchart\Element
+   * @return Element
    *   The root element.
    */
   public function getRootElement() {
@@ @@
   /**
    * Put an element at one position in the matrix.
    *
-   * @param \Drupal\business_rules\Util\Flowchart\Element $element
+   * @param Element $element
    *   The element.
    * @param int $x
    *   The X position.
@@ @@
   /**
    * Put the root element at the matrix.
    *
-   * @param \Drupal\business_rules\Util\Flowchart\Element $element
+   * @param Element $element
    *   The element.
    */
   public function putRootElement(Element $element) {
@@ @@
   /**
    * Shift cells that contains one element to bottom, left or right.
    *
-   * @param \Drupal\business_rules\Util\Flowchart\Element $element
+   * @param Element $element
    *   The element.
    * @param string $direction
    *   The direction: bottom|left|right.
@@ @@
   /**
    * Get all not empty cells at bottom of one element.
    *
-   * @param \Drupal\business_rules\Util\Flowchart\Element $element
+   * @param Element $element
    *   The element.
    *
    * @return array
@@ @@
   /**
    * Get all not empty cells at right of one element.
    *
-   * @param \Drupal\business_rules\Util\Flowchart\Element $element
+   * @param Element $element
    *   The element.
    *
    * @return array
@@ @@
   /**
    * Get all not empty cells at left of one element.
    *
-   * @param \Drupal\business_rules\Util\Flowchart\Element $element
+   * @param Element $element
    *   The element.
    *
    * @return array
@@ @@
   /**
    * Check if the cell at right from the element is empty.
    *
-   * @param \Drupal\business_rules\Util\Flowchart\Element $element
+   * @param Element $element
    *   The element.
    *
    * @return bool
@@ @@
   /**
    * Check if the cell at left from the element is empty.
    *
-   * @param \Drupal\business_rules\Util\Flowchart\Element $element
+   * @param Element $element
    *   The element.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/business_rules/src/Util/Flowchart/Flowchart.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The matrix.
    *
-   * @var \Drupal\business_rules\Util\Flowchart\Matrix
+   * @var Matrix
    */
   private $matrix;

@@ @@
   /**
    * Show the Business Rule workflow for one item.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $item
+   * @param EntityInterface $item
    *   The item.
    *
    * @return array
@@ @@
   /**
    * Check if item has children.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $item
+   * @param EntityInterface $item
    *   The item.
    *
    * @return bool
@@ @@
   /**
    * Mount the graph matrix.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $item
+   * @param EntityInterface $item
    *   The Business Rule item.
-   * @param null|\Drupal\business_rules\Util\Flowchart\Element $parent
+   * @param null|Element $parent
    *   The parent Element.
    * @param string $info
    *   Additional info for the method.
@@ @@

       if ($item instanceof BusinessRule) {
         $children = $item->getItems();
-        /** @var \Drupal\business_rules\BusinessRulesItemObject $child */
+        /** @var BusinessRulesItemObject $child */
         foreach ($children as $child) {
           $child = $child->loadEntity();
           if (!empty($child)) {
@@ @@
       }
       elseif ($item instanceof Condition) {
         $success_items = $item->getSuccessItems();
-        /** @var \Drupal\business_rules\BusinessRulesItemObject $success_item */
+        /** @var BusinessRulesItemObject $success_item */
         foreach ($success_items as $success_item) {
           $success_item = $success_item->loadEntity();
           $yes          = $this->t('Yes');
@@ @@
     $this->processConnections($cells);

     foreach ($cells as $cell) {
-      /** @var \Drupal\business_rules\Util\Flowchart\Element $element */
+      /** @var Element $element */
       $element = $cell['element'];
       if ($element->getParent()) {
         $graph[] = $this->getConnection($cell);
@@ @@
     }

     foreach ($cells as $cell) {
-      /** @var \Drupal\business_rules\Util\Flowchart\Element $element */
+      /** @var Element $element */
       $element = $cell['element'];
       if ($element->getParent()) {
         $graph = array_merge($graph, $this->getItemGraph($element));
@@ @@
    */
   private function processConnections(array $cells) {
     foreach ($cells as $cell) {
-      /** @var \Drupal\business_rules\Util\Flowchart\Element $element */
+      /** @var Element $element */
       $element    = $cell['element'];
       $originUUid = $this->getOriginUuid($cell);
       $element->setOriginUuid($originUUid);
@@ @@
   /**
    * Get the item meta data.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $item
+   * @param EntityInterface $item
    *   The item.
    *
    * @return array
@@ @@
     }
     else {
       $parent = $cell['element']->getParent();
-      /** @var \Drupal\business_rules\Util\Flowchart\Element $element */
+      /** @var Element $element */
       $element       = $cell['element'];
       $element_above = $this->matrix->getElementAbove($element);

@@ @@
   /**
    * Get the workflow graph definition.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $item
+   * @param EntityInterface $item
    *   The item.
    *
    * @return array|string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/business_rules/src/Util/Flowchart/Element.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The Business Rule item.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $item;

@@ @@
   /**
    * Element constructor.
    *
-   * @param \Drupal\Core\Entity\EntityInterface|null $item
+   * @param EntityInterface|null $item
    *   The entity.
    * @param \Drupal\business_rules\Util\Flowchart\Element|null $parent
    *   The parent entity.
@@ @@
   /**
    * Get the item element.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The item.
    */
   public function getItem() {
@@ @@
   /**
    * Set the item element.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $item
+   * @param EntityInterface $item
    *   The item.
    */
   public function setItem(EntityInterface $item) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/business_rules/src/Util/BusinessRulesUtil.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Util;

+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\Core\Entity\EntityFieldManagerInterface;
+use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Field\FieldTypePluginManagerInterface;
+use Drupal\business_rules\Util\Flowchart\Flowchart;
+use Psr\Log\LoggerInterface;
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\Core\Utility\Token;
+use Drupal\Core\KeyValueStore\KeyValueExpirableFactoryInterface;
+use Drupal\business_rules\Plugin\BusinessRulesVariableManager;
+use Drupal\Core\KeyValueStore\KeyValueStoreExpirableInterface;
+use Drupal\Core\Ajax\AjaxResponse;
+use Drupal\business_rules\BusinessRulesItemObject;
+use Drupal\business_rules\VariablesSet;
+use Drupal\business_rules\VariableObject;
 use Drupal\business_rules\ActionListBuilder;
 use Drupal\business_rules\BusinessRuleListBuilder;
 use Drupal\business_rules\ConditionListBuilder;
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   public $configFactory;

@@ @@
   /**
    * Drupal Container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   public $container;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   public $entityFieldManager;

@@ @@
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   public $entityTypeBundleInfo;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   public $entityTypeManager;

@@ @@
   /**
    * The field type plugin manager.
    *
-   * @var \Drupal\Core\Field\FieldTypePluginManagerInterface
+   * @var FieldTypePluginManagerInterface
    */
   public $fieldTypePluginManager;

@@ @@
   /**
    * The Business Rules Flowchart.
    *
-   * @var \Drupal\business_rules\Util\Flowchart\Flowchart
+   * @var Flowchart
    */
   public $flowchart;

@@ @@
   /**
    * The Business Rules logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   public $logger;

@@ @@
   /**
    * The ModuleHandler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   public $moduleHandler;

@@ @@
   /**
    * The currently active request object.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   public $request;

@@ @@
   /**
    * The Drupal token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   public $token;

@@ @@
   /**
    * The KeyValueExpirableFactory.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueExpirableFactoryInterface
+   * @var KeyValueExpirableFactoryInterface
    */
   protected $keyValueExpirable;

@@ @@
   /**
    * The variable manager.
    *
-   * @var \Drupal\business_rules\Plugin\BusinessRulesVariableManager
+   * @var BusinessRulesVariableManager
    */
   protected $variableManager;

@@ @@
   /**
    * BusinessRulesUtil constructor.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The services container.
    */
   public function __construct(ContainerInterface $container) {
@@ @@
   /**
    * Get an render array for add items form.
    *
-   * @param \Drupal\business_rules\ItemInterface $item
+   * @param ItemInterface $item
    *   The Business Rule Item.
    * @param array $items
    *   The array of items to render inside the table form.
@@ @@
    *   The item label.
    * @param string $label_plural
    *   The item label in plural.
-   * @param \Drupal\Core\Url $back_url
+   * @param Url $back_url
    *   The return Url.
    *
    * @return array
@@ @@
   /**
    * Return the current Url.
    *
-   * @return \Drupal\Core\Url|null
+   * @return Url|null
    *   The Url.
    */
   public function getCurrentUri() {
@@ @@
    * @param string $collection
    *   The keyvalue collection.
    *
-   * @return \Drupal\Core\KeyValueStore\KeyValueStoreExpirableInterface
+   * @return KeyValueStoreExpirableInterface
    *   The keyValueFactory.
    */
   public function getKeyValueExpirable($collection) {
@@ @@
   /**
    * Return the previous Url.
    *
-   * @return \Drupal\Core\Url|null
+   * @return Url|null
    *   The Url.
    */
   public function getPreviousUri() {
@@ @@
   /**
    * Return a details box which the available variables for use on this context.
    *
-   * @param \Drupal\business_rules\Entity\BusinessRulesItemBase $item
+   * @param BusinessRulesItemBase $item
    *   The business Rule Item.
    * @param string $plugin_type
    *   The variable plugin type id.
@@ @@
     $details             = [];

     if (is_array($variables)) {
-      /** @var \Drupal\business_rules\Entity\Variable $variable */
+      /** @var Variable $variable */
       foreach ($variables as $variable) {
         // Check targetBundle.
         if (((($variable->getTargetBundle() == $target_bundle || empty($target_bundle) || empty($variable->getTargetBundle()))
@@ @@
     $options = [];

     $variables = Variable::loadMultiple();
-    /** @var \Drupal\business_rules\Entity\Variable $variable */
+    /** @var Variable $variable */
     foreach ($variables as $variable) {
       if ((!count($variable_types) || in_array($variable->getType(), $variable_types))
         && (!count($entity_type) || in_array($variable->getTargetEntityType(), $entity_type))
@@ @@
   /**
    * Display the entity variable fields.
    *
-   * @param \Drupal\business_rules\Entity\Variable $variable
+   * @param Variable $variable
    *   The variable entity.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|array
+   * @return AjaxResponse|array
    *   The AjaxResponse or the render array.
    */
   public function getVariableFieldsModalInfo(Variable $variable) {
@@ @@
   /**
    * Remove the item references after it's deletion.
    *
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The event.
    */
   public function removeItemReferences(BusinessRulesEvent $event) {
-    /** @var \Drupal\business_rules\Entity\BusinessRulesItemBase $item */
+    /** @var BusinessRulesItemBase $item */
     $item       = $event->getSubject();
     $conditions = $this->getConditionsUsingItem($item);
     $actions    = $this->getActionsUsingItem($item);
@@ @@
     }

     // Remove item from conditions.
-    /** @var \Drupal\business_rules\Entity\Condition $condition */
+    /** @var Condition $condition */
     foreach ($conditions as $condition) {
       $success_items = $condition->getSuccessItems();
-      /** @var \Drupal\business_rules\BusinessRulesItemObject $success_item */
+      /** @var BusinessRulesItemObject $success_item */
       foreach ($success_items as $success_item) {
         if ($success_item->getId() == $item->id()) {
           $condition->removeSuccessItem($success_item);
@@ @@
       }

       $fail_items = $condition->getFailItems();
-      /** @var \Drupal\business_rules\BusinessRulesItemObject $fail_item */
+      /** @var BusinessRulesItemObject $fail_item */
       foreach ($fail_items as $fail_item) {
         if ($fail_item->getId() == $item->id()) {
           $condition->removeFailItem($fail_item);
@@ @@
     }

     // Remove item from actions.
-    /** @var \Drupal\business_rules\Entity\Action $action */
+    /** @var Action $action */
     foreach ($actions as $action) {
       $action_items = $action->getSettings('items');
       unset($action_items[$item->id()]);
@@ @@
     }

     // Remove item from business rules.
-    /** @var \Drupal\business_rules\Entity\BusinessRule $rule */
+    /** @var BusinessRule $rule */
     foreach ($rules as $rule) {
       $rule_items = $rule->getItems();
-      /** @var \Drupal\business_rules\BusinessRulesItemObject $rule_item */
+      /** @var BusinessRulesItemObject $rule_item */
       foreach ($rule_items as $rule_item) {
         if ($rule_item->getId() == $item->id()) {
           $rule->removeItem($rule_item);
@@ @@
   /**
    * Get all conditions using the item.
    *
-   * @param \Drupal\business_rules\ItemInterface $item
+   * @param ItemInterface $item
    *   The item to look for conditions using it.
    *
    * @return array
@@ @@
     $conditions = Condition::loadMultiple();
     $used_by    = [];

-    /** @var \Drupal\business_rules\Entity\Condition $condition */
+    /** @var Condition $condition */
     if ($item instanceof Variable) {
       foreach ($conditions as $condition) {
-        /** @var \Drupal\business_rules\VariablesSet $variables */
+        /** @var VariablesSet $variables */
         $variables = $condition->getVariables();
         if ($variables->count()) {
-          /** @var \Drupal\business_rules\VariableObject $variable */
+          /** @var VariableObject $variable */
           foreach ($variables->getVariables() as $variable) {
             if ($variable->getId() == $item->id()) {
               $used_by[$variable->getId()] = $condition;
@@ @@
   /**
    * Get all actions using the item.
    *
-   * @param \Drupal\business_rules\ItemInterface $item
+   * @param ItemInterface $item
    *   The item to look for actions using it.
    *
    * @return array
@@ @@
     $actions = Action::loadMultiple();
     $used_by = [];

-    /** @var \Drupal\business_rules\Entity\Action $action */
+    /** @var Action $action */
     if ($item instanceof Variable) {
       foreach ($actions as $action) {
-        /** @var \Drupal\business_rules\VariablesSet $variables */
+        /** @var VariablesSet $variables */
         $variables = $action->getVariables();
         if ($variables->count()) {
-          /** @var \Drupal\business_rules\VariableObject $variable */
+          /** @var VariableObject $variable */
           foreach ($variables->getVariables() as $variable) {
             if ($variable->getId() == $item->id()) {
               $used_by[$variable->getId()] = $action;
@@ @@
   /**
    * Get all Business Rules using the item.
    *
-   * @param \Drupal\business_rules\ItemInterface $item
+   * @param ItemInterface $item
    *   The item to look for business rules using it.
    *
    * @return array
@@ @@
     $rules   = BusinessRule::loadMultiple();
     $used_by = [];

-    /** @var \Drupal\business_rules\Entity\BusinessRule $rule */
+    /** @var BusinessRule $rule */
     foreach ($rules as $rule) {
       if (in_array($item->id(), array_keys($rule->getItems()))) {
         $used_by[] = $rule;
@@ @@
   /**
    * Return a details box which rules in where this item is being used.
    *
-   * @param \Drupal\business_rules\ItemInterface $item
+   * @param ItemInterface $item
    *   The item to get the business rules using it.
    *
    * @return array
@@ @@
     $details = [];

     if (count($used_by)) {
-      /** @var \Drupal\business_rules\Entity\BusinessRule $rule */
+      /** @var BusinessRule $rule */
       $rule = $used_by[array_keys($used_by)[0]];

       $storage = $this->entityTypeManager->getStorage('business_rule');
@@ @@
   /**
    * Return a details box which conditions using this item.
    *
-   * @param \Drupal\business_rules\ItemInterface $item
+   * @param ItemInterface $item
    *   The item to get the conditions using it.
    *
    * @return array
@@ @@
     $details = [];

     if (count($used_by)) {
-      /** @var \Drupal\business_rules\Entity\Condition $condition */
+      /** @var Condition $condition */
       $condition = $used_by[array_keys($used_by)[0]];
       $storage   = $this->entityTypeManager->getStorage('business_rules_condition');
       $list      = new ConditionListBuilder($condition->getEntityType(), $storage);
@@ @@
   /**
    * Return a details box which actions using this item.
    *
-   * @param \Drupal\business_rules\ItemInterface $item
+   * @param ItemInterface $item
    *   The item to get the actions using it.
    *
    * @return array
@@ @@
     $used_by = $this->getActionsUsingItem($item);
     $details = [];

-    /** @var \Drupal\business_rules\Entity\Condition $action */
+    /** @var Condition $action */
     if (count($used_by)) {
       $action  = $used_by[array_keys($used_by)[0]];
       $storage = $this->entityTypeManager->getStorage('business_rules_action');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


12) modules/contrib/business_rules/src/Util/BusinessRulesProcessor.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Util;

+use Drupal\business_rules\Plugin\BusinessRulesActionManager;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Symfony\Component\EventDispatcher\EventDispatcher;
+use Drupal\business_rules\Plugin\BusinessRulesVariableManager;
+use Drupal\business_rules\Plugin\BusinessRulesConditionManager;
+use Drupal\Core\Config\StorageInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Component\Uuid\Php;
+use Symfony\Contracts\EventDispatcher\Event;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\business_rules\BusinessRulesItemObject;
 use Drupal\business_rules\Entity\Action;
 use Drupal\business_rules\Entity\BusinessRule;
@@ @@
 use Drupal\dbug\Dbug;
 use Drupal\Core\Messenger\MessengerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Class BusinessRulesProcessor.
@@ @@
   /**
    * The business rule id being executed.
    *
-   * @var \Drupal\business_rules\Entity\BusinessRule
+   * @var BusinessRule
    */
   public $ruleBeingExecuted;

@@ @@
   /**
    * The action manager.
    *
-   * @var \Drupal\business_rules\Plugin\BusinessRulesActionManager
+   * @var BusinessRulesActionManager
    */
   protected $actionManager;

@@ @@
   /**
    * A configuration object with business_rules settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcher
+   * @var EventDispatcher
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The variable manager.
    *
-   * @var \Drupal\business_rules\Plugin\BusinessRulesVariableManager
+   * @var BusinessRulesVariableManager
    */
   protected $variableManager;

@@ @@
   /**
    * The condition manager.
    *
-   * @var \Drupal\business_rules\Plugin\BusinessRulesConditionManager
+   * @var BusinessRulesConditionManager
    */
   private $conditionManager;

@@ @@
   /**
    * The storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   private $storage;

@@ @@
   /**
    * The Business Rules Util.
    *
-   * @var \Drupal\business_rules\Util\BusinessRulesUtil
+   * @var BusinessRulesUtil
    */
   private $util;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Generates a UUID v4 (RFC 4122 section 4.4) using PHP code.
    *
-   * @var \Drupal\Component\Uuid\Php
+   * @var Php
    */
   protected $uuid;

@@ @@
   /**
    * BusinessRulesProcessor constructor.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   Drupal container.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(ContainerInterface $container) {
@@ @@
   /**
    * Process rules.
    *
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The event.
    */
   public function process(BusinessRulesEvent $event) {
@@ @@
     }

     // Dispatch a event before start the processing.
-    $this->eventDispatcher->dispatch('business_rules.before_process_event', $event);
+    $this->eventDispatcher->dispatch($event, 'business_rules.before_process_event');

     if (!$event->hasArgument('variables')) {
       $event->setArgument('variables', new VariablesSet());
@@ @@
     $this->saveDebugInfo();

     // Dispatch a event after processing the business rule.
-    $this->eventDispatcher->dispatch('business_rules.after_process_event', $event);
+    $this->eventDispatcher->dispatch($event, 'business_rules.after_process_event');
   }

   /**
@@ @@
    * loops when there is a business rule being executed on entity update for
    * example.
    *
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The event being processed.
    *
    * @return bool
@@ @@
   /**
    * Check if there is a Business rule configured for the given event.
    *
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The event.
    * @param string $trigger
    *   The trigger.
@@ @@
     $triggered_rules = [];

     // Dispatch a event before check the triggered rules.
-    $this->eventDispatcher->dispatch('business_rules.before_check_the_triggered_rules', $event);
+    $this->eventDispatcher->dispatch($event, 'business_rules.before_check_the_triggered_rules');

     foreach ($rules as $rule) {
       $rule = new BusinessRule($rule);
@@ @@
     }

     // Dispatch a event after check the triggered rules.
-    $this->eventDispatcher->dispatch('business_rules.after_check_the_triggered_rules', $event);
+    $this->eventDispatcher->dispatch($event, 'business_rules.after_check_the_triggered_rules');

     return $triggered_rules;
   }
@@ @@
    *
    * @param array $triggered_rules
    *   Array of triggered rules.
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The event.
    */
   public function processTriggeredRules(array $triggered_rules, BusinessRulesEvent $event) {
-    /** @var \Drupal\business_rules\Entity\BusinessRule $rule */
+    /** @var BusinessRule $rule */
     foreach ($triggered_rules as $rule) {
       $items                   = $rule->getItems();
       $this->ruleBeingExecuted = $rule;
@@ @@
       $array = (object) $array;
       $event = new Event($array);
       // Dispatch a event before save debug info block.
-      $this->eventDispatcher->dispatch('business_rules.before_save_debug_info_block', $event);
+      $this->eventDispatcher->dispatch($event, 'business_rules.before_save_debug_info_block');
       $array = (array) $array;

       $key_value->set($session_id, $array);
@@ @@
    * @param array $items
    *   Array of items to pe processed. Each item must be a instance of
    *   BusinessRulesItemObject.
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The event.
    * @param string $parent_id
    *   The Item parent Id. It can be the Business Rule or other item.
@@ @@
    */
   public function processItems(array $items, BusinessRulesEvent $event, $parent_id) {
     // Dispatch a event before process business rule items.
-    $this->eventDispatcher->dispatch('business_rules.before_process_items', $event);
+    $this->eventDispatcher->dispatch($event, 'business_rules.before_process_items');

-    /** @var \Drupal\business_rules\BusinessRulesItemObject $item */
+    /** @var BusinessRulesItemObject $item */
     foreach ($items as $item) {
       if ($item->getType() == BusinessRulesItemObject::ACTION) {
         $action = Action::load($item->getId());
@@ @@
     }

     // Dispatch a event after process business rule items.
-    $this->eventDispatcher->dispatch('business_rules.after_process_items', $event);
+    $this->eventDispatcher->dispatch($event, 'business_rules.after_process_items');
   }

   /**
@@ @@
    *   The render array.
    */
   public function getDebugRenderArray() {
-    /** @var \Drupal\business_rules\Entity\BusinessRule $rule */
-
+    /** @var BusinessRule $rule */
     $triggered_rules     = isset($this->debugArray['triggered_rules']) ? $this->debugArray['triggered_rules'] : [];
     $evaluates_variables = isset($this->debugArray['variables']) ? $this->debugArray['variables'] : [];
     $output              = [];
@@ @@
           '#collapsed'   => TRUE,
         ];

-        /** @var \Drupal\business_rules\VariableObject $evaluates_variable */
+        /** @var VariableObject $evaluates_variable */
         foreach ($evaluates_variables[$rule->id()] as $evaluates_variable) {
           $variable = Variable::load($evaluates_variable->getId());
           if ($variable instanceof Variable) {
@@ @@
   /**
    * Executes one Action.
    *
-   * @param \Drupal\business_rules\Entity\Action $action
+   * @param Action $action
    *   The action.
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The event.
    *
    * @return array
@@ @@
   public function executeAction(Action $action, BusinessRulesEvent $event) {

     // Dispatch a event before execute an action.
-    $this->eventDispatcher->dispatch('business_rules.before_execute_action', new Event($event, $action));
+    $this->eventDispatcher->dispatch(new Event($event, $action), 'business_rules.before_execute_action');

     $action_variables = $action->getVariables();
     $this->evaluateVariables($action_variables, $event);
@@ @@
     $this->debugArray['action_result'][$this->ruleBeingExecuted->id()][$action->id()] = $result;

     // Dispatch a event after execute an action.
-    $this->eventDispatcher->dispatch('business_rules.after_execute_action', new Event($event, $action));
+    $this->eventDispatcher->dispatch(new Event($event, $action), 'business_rules.after_execute_action');

     return $result;
   }
@@ @@
   /**
    * Checks if one condition is valid.
    *
-   * @param \Drupal\business_rules\Entity\Condition $condition
+   * @param Condition $condition
    *   The condition.
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The event.
    *
    * @return bool
@@ @@
   public function isConditionValid(Condition $condition, BusinessRulesEvent $event) {

     // Dispatch a event before check if condition is valid.
-    $this->eventDispatcher->dispatch('business_rules.before_check_if_condition_is_valid', new Event($event, $condition));
+    $this->eventDispatcher->dispatch(new Event($event, $condition), 'business_rules.before_check_if_condition_is_valid');

     $condition_variables = $condition->getVariables();
     $this->evaluateVariables($condition_variables, $event);
@@ @@
     $result = $condition->isReverse() ? !$result : $result;

     // Dispatch a event after check if condition is valid.
-    $this->eventDispatcher->dispatch('business_rules.after_check_if_condition_is_valid', new Event($event, $condition));
+    $this->eventDispatcher->dispatch(new Event($event, $condition), 'business_rules.after_check_if_condition_is_valid');

     return $result;

@@ @@
   protected function getDebugItems(array $items, $parent_id) {
     /** @var \Drupal\business_rules\BusinessRulesItemObject $item */
     /** @var \Drupal\business_rules\Entity\Action $executed_action */
-    /** @var \Drupal\business_rules\Entity\Condition $executed_condition */
+    /** @var Condition $executed_condition */
     $actions_executed   = isset($this->debugArray['actions'][$this->ruleBeingExecuted->id()]) ? $this->debugArray['actions'][$this->ruleBeingExecuted->id()] : [];
     $conditions_success = isset($this->debugArray['conditions'][$this->ruleBeingExecuted->id()]['success']) ? $this->debugArray['conditions'][$this->ruleBeingExecuted->id()]['success'] : [];
     $output             = [];
@@ @@
   /**
    * Evaluate all variables from a VariableSet for a given event.
    *
-   * @param \Drupal\business_rules\VariablesSet $variablesSet
+   * @param VariablesSet $variablesSet
    *   The variable set.
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The event.
    *
    * @throws \Exception
@@ @@
    */
   public function evaluateVariables(VariablesSet $variablesSet, BusinessRulesEvent $event) {
     // Dispatch a event before evaluate variables.
-    $this->eventDispatcher->dispatch('business_rules.before_evaluate_variables', new Event($event, $variablesSet));
+    $this->eventDispatcher->dispatch(new Event($event, $variablesSet), 'business_rules.before_evaluate_variables');

     /** @var \Drupal\business_rules\VariableObject $variable */
-    /** @var \Drupal\business_rules\VariablesSet $eventVariables */
+    /** @var VariablesSet $eventVariables */
     if ($variablesSet->count()) {
       foreach ($variablesSet->getVariables() as $variable) {
         $varObject = Variable::load($variable->getId());
@@ @@
     }

     // Dispatch a event after evaluate variables.
-    $this->eventDispatcher->dispatch('business_rules.after_evaluate_variables', new Event($event, $variablesSet));
+    $this->eventDispatcher->dispatch(new Event($event, $variablesSet), 'business_rules.after_evaluate_variables');
   }

   /**
    * Evaluate the variable value.
    *
-   * @param \Drupal\business_rules\Entity\Variable $variable
+   * @param Variable $variable
    *   The variable.
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The event.
    *
-   * @return \Drupal\business_rules\VariableObject|\Drupal\business_rules\VariablesSet
+   * @return VariableObject|VariablesSet
    *   The evaluated variable or a VariableSet which processed variables.
    *
    * @throws \Exception
@@ @@
     }

     /** @var \Drupal\business_rules\VariablesSet $eventVariables */
-    /** @var \Drupal\business_rules\VariableObject $item */
+    /** @var VariableObject $item */
     $eventVariables     = $event->getArgument('variables');
     $variable_variables = $variable->getVariables();

@@ @@
    *
    * @param string $reacts_on
    *   The Event Name.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The Entity.
    *
    * @return bool
    *   TRUE if the business rule exists, FALSE otherwise.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function ruleExists($reacts_on, EntityInterface $entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


13) modules/contrib/business_rules/src/ScheduleStorageInterface.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Gets a list of Schedule revision IDs for a specific Schedule.
    *
-   * @param \Drupal\business_rules\Entity\ScheduleInterface $entity
+   * @param ScheduleInterface $entity
    *   The Schedule entity.
    *
    * @return int[]
@@ @@
   /**
    * Gets a list of revision IDs having a given user as Schedule author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ @@
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\business_rules\Entity\ScheduleInterface $entity
+   * @param ScheduleInterface $entity
    *   The Schedule entity.
    *
    * @return int
@@ @@
   /**
    * Unsets the language for all Schedule with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/business_rules/src/ScheduleHtmlRouteProvider.php:47

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/business_rules/src/ScheduleAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules;

+use Drupal\business_rules\Entity\ScheduleInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\business_rules\Entity\ScheduleInterface $entity */
+    /** @var ScheduleInterface $entity */
     switch ($operation) {
       case 'view':
         return AccessResult::allowedIfHasPermission($account, 'view schedule entities');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/business_rules/src/Plugin/EntityReferenceSelection/BusinessRulesViewsSelection.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Plugin\EntityReferenceSelection;

+use Drupal\field\Entity\FieldConfig;
+use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\business_rules\Ajax\UpdateOptionsCommand;
 use Drupal\business_rules\Util\BusinessRulesUtil;
 use Drupal\Component\Utility\Html;
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The Business Rules Util.
    *
-   * @var \Drupal\business_rules\Util\BusinessRulesUtil
+   * @var BusinessRulesUtil
    */
   protected $util;

@@ @@
   /**
    * The loaded View object.
    *
-   * @var \Drupal\views\ViewExecutable
+   * @var ViewExecutable
    */
   protected $view;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\business_rules\Util\BusinessRulesUtil $util
+   * @param BusinessRulesUtil $util
    *   The BusinessRulesUtil.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler, AccountInterface $current_user, BusinessRulesUtil $util, MessengerInterface $messenger) {
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return mixed
@@ @@
           break;
         }
         $parent_field_key = array_shift($parents);
-        /** @var \Drupal\field\Entity\FieldConfig $definition */
+        /** @var FieldConfig $definition */
         $definition = $entity->getFieldDefinition($parent_field_key);
         if ($definition->getSetting('target_type') !== 'paragraph') {
           break;
@@ @@
         // Check if field is multiple or not.
         $multiple = FALSE;
         /**
-         * @var \Drupal\field\Entity\FieldStorageConfig $storage_config
+         * @var FieldStorageConfig $storage_config
          */
         $storage_config = $field_definition[$child]->getFieldStorageDefinition();
         if ($storage_config->getCardinality() === -1) {
@@ @@
         '#description' => '<p>' . $this->t('Choose the view and display that select the entities that can be referenced.<br />Only views with a display of type "Entity Reference" are eligible.') . '</p>',
       ];

-      /** @var \Drupal\field\Entity\FieldConfig $field_config */
+      /** @var FieldConfig $field_config */
       $field_config = $this->util->request->get('field_config');
       $entity_type = $field_config->getTargetEntityTypeId();
       $bundle = $field_config->getTargetBundle();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/business_rules/src/Plugin/BusinessRulesVariablePluginInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Plugin;

+use Drupal\business_rules\VariableObject;
+use Drupal\business_rules\VariablesSet;
 use Drupal\business_rules\Entity\Variable;
 use Drupal\business_rules\Events\BusinessRulesEvent;

@@ @@
   /**
    * Evaluate the variable.
    *
-   * @param \Drupal\business_rules\Entity\Variable $variable
+   * @param Variable $variable
    *   The variable to be evaluated.
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The dispatched event.
    *
-   * @return \Drupal\business_rules\VariableObject|\Drupal\business_rules\VariablesSet
+   * @return VariableObject|VariablesSet
    *   The evaluated variables.
    */
   public function evaluate(Variable $variable, BusinessRulesEvent $event);
@@ @@
    * Give a chance to each variable plugin to change the variable details row on
    * Available Variables Box.
    *
-   * @param \Drupal\business_rules\Entity\Variable $variable
+   * @param Variable $variable
    *   The variable.
    * @param array $row
    *   The row which contains the variable.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


18) modules/contrib/business_rules/src/Plugin/BusinessRulesVariableManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/business_rules/src/Plugin/BusinessRulesVariable/ViewResultVariable.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Plugin\BusinessRulesVariable;

+use Drupal\Core\Entity\EntityTypeBundleInfo;
+use Drupal\Core\Entity\EntityFieldManager;
+use Drupal\Core\Ajax\AjaxResponse;
+use Drupal\Core\Render\RendererInterface;
+use Drupal\views\ResultRow;
 use Drupal\Core\Render\Markup;
 use Drupal\Core\Render\RenderContext;
 use Drupal\business_rules\Entity\Variable;
@@ @@
   /**
    * The EntityTypeBundleInfo.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfo
+   * @var EntityTypeBundleInfo
    */
   protected $bundleInfo;

@@ @@
   /**
    * The EntityFieldManager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;

@@ @@
   /**
    * Display the view variable fields.
    *
-   * @param \Drupal\business_rules\Entity\Variable $variable
+   * @param Variable $variable
    *   The variable entity.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|array
+   * @return AjaxResponse|array
    *   The AjaxResponse or the render array.
    */
   public function variableFields(Variable $variable) {
@@ @@
     $variableObject = NULL;
     if ($view->execute()) {

-      /** @var \Drupal\Core\Render\RendererInterface $renderer */
+      /** @var RendererInterface $renderer */
       $renderer = \Drupal::service('renderer');

-      /** @var \Drupal\views\ResultRow $resultRow */
+      /** @var ResultRow $resultRow */
       $view_result = $view->result;
       $values      = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/business_rules/src/Plugin/BusinessRulesVariable/EntityFieldVariable.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Plugin\BusinessRulesVariable;

+use Drupal\field\Entity\FieldConfig;
 use Drupal\business_rules\Entity\Variable;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\business_rules\ItemInterface;
@@ @@
     try {
       $value = $entity->get($field_name)->getValue();
       // Check if value is a entity reference.
-      /** @var \Drupal\field\Entity\FieldConfig $field_definition */
+      /** @var FieldConfig $field_definition */
       $field_definition = $entity->getFieldDefinition($field_name);
       if ($field_definition->getType() == 'entity_reference') {
         $entity_references = $entity->get($field_name)->referencedEntities();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/business_rules/src/Plugin/BusinessRulesVariable/EntityEmptyVariable.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Plugin\BusinessRulesVariable;

+use Drupal\Core\Entity\EntityFieldManagerInterface;
+use Drupal\Core\Field\FieldTypePluginManagerInterface;
 use Drupal\business_rules\Entity\Variable;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\business_rules\ItemInterface;
@@ @@
   /**
    * The EntityFieldManager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The FieldTypePluginManager.
    *
-   * @var \Drupal\Core\Field\FieldTypePluginManagerInterface
+   * @var FieldTypePluginManagerInterface
    */
   protected $fieldTypePluginManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/business_rules/src/Plugin/BusinessRulesReactsOnPlugin.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Plugin;

+use Drupal\business_rules\Util\BusinessRulesProcessor;
+use Drupal\business_rules\Util\BusinessRulesUtil;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
   /**
    * The business rules processor.
    *
-   * @var \Drupal\business_rules\Util\BusinessRulesProcessor
+   * @var BusinessRulesProcessor
    */
   protected $processor;

@@ @@
   /**
    * The business rules util.
    *
-   * @var \Drupal\business_rules\Util\BusinessRulesUtil
+   * @var BusinessRulesUtil
    */
   protected $util;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/business_rules/src/Plugin/BusinessRulesReactsOnManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/business_rules/src/Plugin/BusinessRulesReactsOnInterface.php:14

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function processForm(array &$form, FormStateInterface $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


25) modules/contrib/business_rules/src/Plugin/BusinessRulesReactsOn/FormValidation.php:27

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public static function validateForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/business_rules/src/Plugin/BusinessRulesItemPluginInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Plugin;

+use Drupal\Core\Url;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\business_rules\ItemInterface;
 use Drupal\business_rules\VariablesSet;
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function buildForm(array &$form, FormStateInterface $form_state);
@@ @@
   /**
    * Get the redirect url for the item edit-form route.
    *
-   * @param \Drupal\business_rules\ItemInterface $item
+   * @param ItemInterface $item
    *   The business rule item.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The Url.
    */
   public function getEditUrl(ItemInterface $item);
@@ @@
   /**
    * Get the redirect url for the item collection route.
    *
-   * @param \Drupal\business_rules\ItemInterface $item
+   * @param ItemInterface $item
    *   The item go get the Url.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The Url.
    */
   public function getRedirectUrl(ItemInterface $item);
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
-   * @param \Drupal\business_rules\ItemInterface $item
+   * @param ItemInterface $item
    *   The configured item.
    *
    * @return array
@@ @@
    *
    * The $variables array will be filled with all used variables at index [1]
    *
-   * @param \Drupal\business_rules\ItemInterface $item
+   * @param ItemInterface $item
    *   The business rule item.
    *
-   * @return \Drupal\business_rules\VariablesSet
+   * @return VariablesSet
    *   The variableSet with all variables used on the Item.
    */
   public function getVariables(ItemInterface $item);
@@ @@
    *
    * @param array $settings
    *   The settings to be processed before save the Business Rule Item.
-   * @param \Drupal\business_rules\ItemInterface $item
+   * @param ItemInterface $item
    *   The item being processed.
    *
    * @return array
@@ @@
   /**
    * Process the tokens on the settings property for the item.
    *
-   * @param \Drupal\business_rules\ItemInterface $item
+   * @param ItemInterface $item
    *   The Business Rules item.
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The BusinessRulesEvent that triggered the processor.
    */
   public function processTokens(ItemInterface &$item, BusinessRulesEvent $event);
@@ @@
    *
    * @param mixed $content
    *   The item to be replaced by the variable value.
-   * @param \Drupal\business_rules\VariablesSet $event_variables
+   * @param VariablesSet $event_variables
    *   Array of Variables provided by the event.
    *
    * @return mixed
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function validateForm(array &$form, FormStateInterface $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


27) modules/contrib/business_rules/src/Plugin/BusinessRulesItemPluginBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Plugin;

+use Drupal\business_rules\Util\BusinessRulesProcessor;
+use Drupal\business_rules\Util\BusinessRulesUtil;
 use Drupal\business_rules\Entity\Variable;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\business_rules\ItemInterface;
@@ @@
   /**
    * The business rules processor.
    *
-   * @var \Drupal\business_rules\Util\BusinessRulesProcessor
+   * @var BusinessRulesProcessor
    */
   protected $processor;

@@ @@
   /**
    * The business rules util.
    *
-   * @var \Drupal\business_rules\Util\BusinessRulesUtil
+   * @var BusinessRulesUtil
    */
   protected $util;

@@ @@
    * {@inheritdoc}
    */
   public function processVariables($content, VariablesSet $event_variables) {
-    /** @var \Drupal\business_rules\VariableObject $variable */
+    /** @var VariableObject $variable */
     if ($event_variables->count()) {
       foreach ($event_variables->getVariables() as $variable) {
         if (is_string($variable->getValue()) || is_numeric($variable->getValue())) {
@@ @@
    *   The setting array.
    * @param array $context
    *   The context to replace the tokens.
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The Business Rules event.
    */
   private function processTokenArraySetting(array &$setting, array $context, BusinessRulesEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/business_rules/src/Plugin/BusinessRulesConditionPluginInterface.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Process the condition.
    *
-   * @param \Drupal\business_rules\ConditionInterface $condition
+   * @param ConditionInterface $condition
    *   The configured condition.
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The event that has triggered the condition.
    *
    * @return bool
@@ @@
    *
    * @param mixed $content
    *   The item to be replaced by the variable value.
-   * @param \Drupal\business_rules\VariablesSet $event_variables
+   * @param VariablesSet $event_variables
    *   Array of Variables provided by the event.
    *
    * @return mixed
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


29) modules/contrib/business_rules/src/Plugin/BusinessRulesConditionManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/business_rules/src/Plugin/BusinessRulesCondition/VariableDataComparison.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Plugin\BusinessRulesCondition;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\business_rules\ConditionInterface;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\business_rules\ItemInterface;
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Entity\EntityInterface $item */
+    /** @var EntityInterface $item */
     $item = $form_state->getFormObject()->getEntity();
     if (!$item->isNew()) {
       $textarea_fields  = ['contains', '==', 'starts_with', 'ends_with', '!='];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/business_rules/src/Plugin/BusinessRulesCondition/UserVariableHasRole.php:105

    ---------- begin diff ----------
@@ @@
     $roles            = $condition->getSettings('roles');
     $criteria         = $condition->getSettings('criteria');
     $user_variable_id = $condition->getSettings('user_variable');
-    /** @var \Drupal\business_rules\VariablesSet $event_variables */
+    /** @var VariablesSet $event_variables */
     $event_variables = $event->getArgument('variables');
-    /** @var \Drupal\user\Entity\User $user_variable */
+    /** @var User $user_variable */
     $user_variable = $event_variables->getVariable($user_variable_id)
       ->getValue();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/business_rules/src/Plugin/BusinessRulesCondition/UserHasRole.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Plugin\BusinessRulesCondition;

+use Drupal\user\Entity\User;
 use Drupal\business_rules\ConditionInterface;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\business_rules\ItemInterface;
@@ @@
   public function process(ConditionInterface $condition, BusinessRulesEvent $event) {
     $roles    = $condition->getSettings('roles');
     $criteria = $condition->getSettings('criteria');
-    /** @var \Drupal\user\Entity\User $current_user */
+    /** @var User $current_user */
     $current_user = $this->util->container->get('current_user');
     $user_roles   = array_values($current_user->getRoles());
     $result       = FALSE;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/business_rules/src/Plugin/BusinessRulesCondition/LogicalOr.php:39

    ---------- begin diff ----------
@@ @@
     $items = $condition->getSettings('items');
     $items = BusinessRulesItemObject::itemsArrayToItemsObject($items);

-    /** @var \Drupal\business_rules\BusinessRulesItemObject $item */
+    /** @var BusinessRulesItemObject $item */
     foreach ($items as $item) {
       $c = Condition::load($item->getId());
       if ($this->processor->isConditionValid($c, $event)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/business_rules/src/Plugin/BusinessRulesCondition/LogicalAnd.php:39

    ---------- begin diff ----------
@@ @@
     $items = $condition->getSettings('items');
     $items = BusinessRulesItemObject::itemsArrayToItemsObject($items);

-    /** @var \Drupal\business_rules\BusinessRulesItemObject $item */
+    /** @var BusinessRulesItemObject $item */
     foreach ($items as $item) {
       $c = Condition::load($item->getId());
       if (!$this->processor->isConditionValid($c, $event)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/business_rules/src/Plugin/BusinessRulesCondition/DataComparison.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Plugin\BusinessRulesCondition;

+use Drupal\business_rules\VariableObject;
 use Drupal\business_rules\ConditionInterface;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\business_rules\ItemInterface;
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param mixed $values_to_compare
    *   The item to be replaced by the variable value.
-   * @param \Drupal\business_rules\VariablesSet $variables
+   * @param VariablesSet $variables
    *   Array of Variables provided by the event.
    *
    * @return mixed
@@ @@
    */
   public function processInternalVariables($values_to_compare, VariablesSet $variables) {

-    /** @var \Drupal\business_rules\VariableObject $variable */
+    /** @var VariableObject $variable */
     if ($variables->count()) {

       foreach ($variables->getVariables() as $variable) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/business_rules/src/Plugin/BusinessRulesCondition/ConditionSet.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Plugin\BusinessRulesCondition;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\business_rules\BusinessRulesItemObject;
 use Drupal\business_rules\ConditionInterface;
 use Drupal\business_rules\Entity\Condition;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Return all others conditions with the same target Entity and Bundle.
    *
-   * @param \Drupal\business_rules\Entity\Condition $condition
+   * @param Condition $condition
    *   The condition.
    *
    * @return array
@@ @@
     $current_conditions = $condition->getSettings('items');
     $conditions_matched = [];
     if (count($conditions)) {
-      /** @var \Drupal\business_rules\Entity\Condition $c */
+      /** @var Condition $c */
       foreach ($conditions as $c) {
         if ($condition->id() != $c->id() && self::checkInnerCondition($condition, $c) && !in_array($c->id(), array_keys($current_conditions))) {
           // Only condition s with no actions can be added to a condition set.
@@ @@
    *
    * Important to avoid infinite condition check loops.
    *
-   * @param \Drupal\business_rules\ConditionInterface $main_condition
+   * @param ConditionInterface $main_condition
    *   The main condition.
-   * @param \Drupal\business_rules\ConditionInterface $child_condition
+   * @param ConditionInterface $child_condition
    *   The child condition.
    *
    * @return bool
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
-   * @param \Drupal\business_rules\ItemInterface $condition
+   * @param ItemInterface $condition
    *   The current condition.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/business_rules/src/Plugin/BusinessRulesActionPluginInterface.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Execute the action.
    *
-   * @param \Drupal\business_rules\ActionInterface $action
+   * @param ActionInterface $action
    *   The configured action.
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The event that has triggered the action.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


38) modules/contrib/business_rules/src/Plugin/BusinessRulesActionManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


39) modules/contrib/business_rules/src/Plugin/BusinessRulesAction/UnpublishContent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Plugin\BusinessRulesAction;

+use Drupal\Core\Entity\Query\Sql\Query;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\business_rules\ActionInterface;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\business_rules\ItemInterface;
@@ @@

     // Load entities ids to delete.
     /** @var \Drupal\Core\Entity\Query\QueryInterface $query_service */
-    /** @var \Drupal\Core\Entity\Query\Sql\Query $query */
+    /** @var Query $query */
     $query_service = \Drupal::getContainer()->get('entity.query');
     $query         = $query_service->get($entity_type);
     $query->condition('type', $bundle);
@@ @@

     // Unpublish entities.
     /** @var \Drupal\Core\Entity\EntityStorageInterface $entityManager */
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entityManager = \Drupal::entityTypeManager()->getStorage($entity_type);
     $entities      = $entityManager->loadMultiple($ids);
     $key_value     = \Drupal::keyValueExpirable('business_rules.unpublish_entity');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/business_rules/src/Plugin/BusinessRulesAction/SendEmail.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Plugin\BusinessRulesAction;

+use Drupal\Core\Mail\MailManagerInterface;
 use Drupal\business_rules\ActionInterface;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\business_rules\ItemInterface;
@@ @@
   /**
    * The mail manager.
    *
-   * @var \Drupal\Core\Mail\MailManagerInterface
+   * @var MailManagerInterface
    */
   protected $mailManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


41) modules/contrib/business_rules/src/Plugin/BusinessRulesAction/ScheduleTask.php:43

    ---------- begin diff ----------
@@ @@
   /**
    * Business Rules item.
    *
-   * @var \Drupal\business_rules\ItemInterface*/
+   * @var ItemInterface*/
   private $item;

   /**
@@ @@
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {

-    /** @var \Drupal\business_rules\ItemInterface $item */
+    /** @var ItemInterface $item */
     $item = $form_state->get('business_rules_item');

     // We only can validate the form if the item is not new.
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
-   * @param \Drupal\business_rules\ItemInterface $action
+   * @param ItemInterface $action
    *   The current action.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


42) modules/contrib/business_rules/src/Plugin/BusinessRulesAction/SaveEntityVariableAction.php:61

    ---------- begin diff ----------
@@ @@
   /**
    * Get the available empty variables for the context.
    *
-   * @param \Drupal\business_rules\Entity\Action $item
+   * @param Action $item
    *   The action.
    *
    * @return array
@@ @@
     $variables = Variable::loadMultiple();
     $output    = [];

-    /** @var \Drupal\business_rules\Entity\Variable $variable */
+    /** @var Variable $variable */
     foreach ($variables as $variable) {
       if ($item->getTargetEntityType() == $variable->getTargetEntityType() &&
         $item->getTargetBundle() == $variable->getTargetBundle() &&
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


43) modules/contrib/business_rules/src/Plugin/BusinessRulesAction/RemoveUserRole.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Plugin\BusinessRulesAction;

+use Drupal\business_rules\VariablesSet;
 use Drupal\business_rules\ActionInterface;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\business_rules\ItemInterface;
@@ @@
    * {@inheritdoc}
    */
   public function execute(ActionInterface $action, BusinessRulesEvent $event) {
-    /** @var \Drupal\business_rules\VariablesSet $event_variables */
+    /** @var VariablesSet $event_variables */
     $event_variables = $event->getArgument('variables');
     $user_container  = $action->getSettings('user_container');
     $uid             = $action->getSettings('uid');
@@ @@
     switch ($user_container) {
       case 'current':
         /** @var \Drupal\Core\Session\AccountProxyInterface $account */
-        /** @var \Drupal\user\Entity\User $user */
+        /** @var User $user */
         $account = $this->util->container->get('current_user');
         $user    = User::load($account->id());
         break;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


44) modules/contrib/business_rules/src/Plugin/BusinessRulesAction/PublishContent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Plugin\BusinessRulesAction;

+use Drupal\Core\Entity\Query\Sql\Query;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\business_rules\ActionInterface;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\business_rules\ItemInterface;
@@ @@

     // Load entities ids to Publish.
     /** @var \Drupal\Core\Entity\Query\QueryInterface $query_service */
-    /** @var \Drupal\Core\Entity\Query\Sql\Query $query */
+    /** @var Query $query */
     $query_service = \Drupal::getContainer()->get('entity.query');
     $query         = $query_service->get($entity_type);
     $query->condition('type', $bundle);
@@ @@

     // Publish entities.
     /** @var \Drupal\Core\Entity\EntityStorageInterface $entityManager */
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entityManager = \Drupal::entityTypeManager()->getStorage($entity_type);
     $entities      = $entityManager->loadMultiple($ids);
     $key_value     = \Drupal::keyValueExpirable('business_rules.publish_entity');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


45) modules/contrib/business_rules/src/Plugin/BusinessRulesAction/LoopThroughViewResult.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Plugin\BusinessRulesAction;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\business_rules\ActionInterface;
 use Drupal\business_rules\BusinessRulesItemObject;
 use Drupal\business_rules\Entity\Action;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@

     $variables = Variable::loadMultipleByType('view_result_variable');
     $options   = [];
-    /** @var \Drupal\business_rules\Entity\Variable $variable */
+    /** @var Variable $variable */
     foreach ($variables as $variable) {
       $options[$variable->id()] = $variable->label();
     }
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
-   * @param \Drupal\business_rules\ItemInterface $action
+   * @param ItemInterface $action
    *   The current action.
    *
    * @return array
@@ @@
    * {@inheritdoc}
    */
   public function execute(ActionInterface $action, BusinessRulesEvent $event) {
-    /** @var \Drupal\business_rules\VariablesSet $event_variables */
+    /** @var VariablesSet $event_variables */
     $event_variables = $event->getArgument('variables');
     $view_variable   = $event_variables->getVariable($action->getSettings('variable'));
     $action_items    = $action->getSettings('items');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


46) modules/contrib/business_rules/src/Plugin/BusinessRulesAction/LoopThroughFieldVariable.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Plugin\BusinessRulesAction;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\business_rules\ActionInterface;
 use Drupal\business_rules\BusinessRulesItemObject;
 use Drupal\business_rules\Entity\Action;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   public function getSettingsForm(array &$form, FormStateInterface $form_state, ItemInterface $item) {
     $variables = Variable::loadMultipleByType('entity_filed_variable');
     $options   = [];
-    /** @var \Drupal\business_rules\Entity\Variable $variable */
+    /** @var Variable $variable */
     foreach ($variables as $variable) {
       $options[$variable->id()] = $variable->label();
     }
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
-   * @param \Drupal\business_rules\ItemInterface $action
+   * @param ItemInterface $action
    *   The current action.
    *
    * @return array
@@ @@
    * {@inheritdoc}
    */
   public function execute(ActionInterface $action, BusinessRulesEvent $event) {
-    /** @var \Drupal\business_rules\VariablesSet $event_variables */
+    /** @var VariablesSet $event_variables */
     $event_variables = $event->getArgument('variables');
     $field_variable  = $event_variables->getVariable($action->getSettings('variable'));
     $action_items    = $action->getSettings('items');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


47) modules/contrib/business_rules/src/Plugin/BusinessRulesAction/FillEntityVariableFields.php:45

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public static function fieldValueSave(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\business_rules\Entity\Action $action */
+    /** @var Action $action */
     $field = $form_state->getValue('entity_field');
     $value = $form_state->getValue('field_value');

@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public static function formValidate(array $form, FormStateInterface $form_state) {
@@ @@
    * @param string $method
    *   The method ajax|nojs.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return AjaxResponse|RedirectResponse
    *   The AjaxResponse or RedirectResponse object.
    */
   public static function removeFieldValue($action, $field, $method) {
@@ @@
   /**
    * Get the available empty variables for the context.
    *
-   * @param \Drupal\business_rules\Entity\Action $item
+   * @param Action $item
    *   The action object.
    *
    * @return array
@@ @@
     $variables = Variable::loadMultiple();
     $output    = [];

-    /** @var \Drupal\business_rules\Entity\Variable $variable */
+    /** @var Variable $variable */
     foreach ($variables as $variable) {
       if ($item->getTargetEntityType() == $variable->getTargetEntityType() &&
         $item->getTargetBundle() == $variable->getTargetBundle() &&
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


48) modules/contrib/business_rules/src/Plugin/BusinessRulesAction/FetchEntityVariableAction.php:69

    ---------- begin diff ----------
@@ @@
   /**
    * Get the available empty variables for the context.
    *
-   * @param \Drupal\business_rules\Entity\Action $item
+   * @param Action $item
    *   The action.
    *
    * @return array
@@ @@
     $variables = Variable::loadMultiple();
     $output    = [];

-    /** @var \Drupal\business_rules\Entity\Variable $variable */
-
+    /** @var Variable $variable */
     foreach ($variables as $variable) {
       if ($item->getTargetEntityType() == $variable->getTargetEntityType() &&
         $item->getTargetBundle() == $variable->getTargetBundle() &&
@@ @@
    */
   public function execute(ActionInterface $action, BusinessRulesEvent $event) {

-    /** @var \Drupal\business_rules\VariablesSet $variables */
+    /** @var VariablesSet $variables */
     $id_variable         = $action->getSettings('empty_variable');
     $variables           = $event->getArgument('variables');
     $processed_variables = $this->fetchEntityVariable($action, $variables);
@@ @@
   public function fetchEntityVariable($action, VariablesSet $event_variables) {

     /** @var \Drupal\business_rules\VariableObject $variable */
-    /** @var \Drupal\business_rules\Entity\Action $action */
+    /** @var Action $action */
     $id_field = $action->getSettings('field');
     $bundle = $action->getTargetBundle();
     $id = $action->getSettings('value');
@@ @@
    *
    * @param string $id
    *   The entity id.
-   * @param \Drupal\business_rules\VariableObject $variable
+   * @param VariableObject $variable
    *   The VariableObject.
    * @param string $id_field
    *   The field id.
-   * @param \Drupal\business_rules\Entity\Action $action
+   * @param Action $action
    *   The Business rule Action action.
    * @param string $bundle
    *   The bundle.
@@ @@
    * @param mixed $original_variable_value
    *   The original variable value.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The entity.
    */
   private function fetchEntity($id, VariableObject $variable, $id_field, Action $action, $bundle, $original_variable_value) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


49) modules/contrib/business_rules/src/Plugin/BusinessRulesAction/DisplayErrorMessageOnForm.php:54

    ---------- begin diff ----------
@@ @@
       $message   = $this->processVariables($message, $variables);
       $message   = new FormattableMarkup($message, []);

-      /** @var \Drupal\Core\Form\FormStateInterface $form_state */
+      /** @var FormStateInterface $form_state */
       $form_state = $event->getArgument('form_state');

       $form_state->setErrorByName($field, $message);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


50) modules/contrib/business_rules/src/Plugin/BusinessRulesAction/DeleteEntity.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Plugin\BusinessRulesAction;

+use Drupal\Core\Entity\Query\QueryInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\business_rules\ActionInterface;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\business_rules\ItemInterface;
@@ @@
     $value       = $this->processVariables($value, $event->getArgument('variables'));

     // Load entities ids to delete.
-    /** @var \Drupal\Core\Entity\Query\QueryInterface $query */
+    /** @var QueryInterface $query */
     $query = \Drupal::getContainer()->get('entity_type.manager')->getStorage($entity_type)->getQuery()
       ->condition($field, $value);
     $ids = $query->execute();

     // Delete entities.
-    /** @var \Drupal\Core\Entity\EntityStorageInterface $entityManager */
+    /** @var EntityStorageInterface $entityManager */
     $entityManager = \Drupal::entityTypeManager()->getStorage($entity_type);
     $entities      = $entityManager->loadMultiple($ids);
     foreach ($entities as $key => $entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


51) modules/contrib/business_rules/src/Plugin/BusinessRulesAction/ChangeFormDisplay.php:88

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\business_rules\ItemInterface $item */
+    /** @var ItemInterface $item */
     $item = $form_state->get('business_rules_item');

     // We only can validate the form if the item is not new.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


52) modules/contrib/business_rules/src/Plugin/BusinessRulesAction/ChangeFieldInfo.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Plugin\BusinessRulesAction;

+use Drupal\Core\Field\FieldItemList;
 use Drupal\business_rules\ActionInterface;
 use Drupal\business_rules\Entity\Action;
 use Drupal\business_rules\Events\BusinessRulesEvent;
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form_state.
    */
   public static function addFieldSubmit(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\business_rules\Entity\Action $action */
+    /** @var Action $action */
     $action   = $form_state->get('action');
     $field    = $form_state->getValue('fields')['new.field'];
     $id       = $field['field'] . '__' . $field['action'];
@@ @@
    * @param string $method
    *   The method: ajax|nojs.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return AjaxResponse|RedirectResponse
    *   The response.
    */
   public static function removeField($action, $field, $method) {
@@ @@
   /**
    * Get the current fields on the variable array.
    *
-   * @param \Drupal\business_rules\ItemInterface $item
+   * @param ItemInterface $item
    *   The variable.
    * @param array $settings
    *   The current setting to add rows.
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form_state.
    */
   public static function validateAddFieldForm(array &$form, FormStateInterface $form_state) {
@@ @@

     $element = $event->getArgument('element');
     $context = $event->getArgument('context');
-    /** @var \Drupal\Core\Field\FieldItemList $items */
+    /** @var FieldItemList $items */
     $items        = $context['items'];
     $element_name = $items->getName();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


53) modules/contrib/business_rules/src/Plugin/BusinessRulesAction/CalculateValue.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Plugin\BusinessRulesAction;

+use Drupal\business_rules\VariablesSet;
 use Drupal\business_rules\ActionInterface;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\business_rules\ItemInterface;
@@ @@
    * {@inheritdoc}
    */
   public function execute(ActionInterface $action, BusinessRulesEvent $event) {
-    /** @var \Drupal\business_rules\VariablesSet $event_variables */
+    /** @var VariablesSet $event_variables */
     $event_variables = $event->getArgument('variables');
     $raw_formula     = $action->getSettings('formula');
     $formula         = $this->processVariables($raw_formula, $event_variables);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


54) modules/contrib/business_rules/src/Plugin/BusinessRulesAction/AddRoleToUser.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Plugin\BusinessRulesAction;

+use Drupal\business_rules\VariablesSet;
 use Drupal\business_rules\ActionInterface;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\business_rules\ItemInterface;
@@ @@
    * {@inheritdoc}
    */
   public function execute(ActionInterface $action, BusinessRulesEvent $event) {
-    /** @var \Drupal\business_rules\VariablesSet $event_variables */
+    /** @var VariablesSet $event_variables */
     $event_variables = $event->getArgument('variables');
     $user_container  = $action->getSettings('user_container');
     $uid             = $action->getSettings('uid');
@@ @@
     switch ($user_container) {
       case 'current':
         /** @var \Drupal\Core\Session\AccountProxyInterface $account */
-        /** @var \Drupal\user\Entity\User $user */
+        /** @var User $user */
         $account = $this->util->container->get('current_user');
         $user    = User::load($account->id());
         break;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


55) modules/contrib/business_rules/src/Plugin/BusinessRulesAction/ActionSet.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Plugin\BusinessRulesAction;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\business_rules\ActionInterface;
 use Drupal\business_rules\BusinessRulesItemObject;
 use Drupal\business_rules\Entity\Action;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Return all others actions with the same target Entity and Bundle.
    *
-   * @param \Drupal\business_rules\Entity\Action $action
+   * @param Action $action
    *   The business rules Action.
    *
    * @return array
@@ @@
    *
    * Important to avoid infinite action check loops.
    *
-   * @param \Drupal\business_rules\ActionInterface $main_action
+   * @param ActionInterface $main_action
    *   The main action.
-   * @param \Drupal\business_rules\ActionInterface $child_action
+   * @param ActionInterface $child_action
    *   The child action.
    *
    * @return bool
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
-   * @param \Drupal\business_rules\ItemInterface $action
+   * @param ItemInterface $action
    *   The current action.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


56) modules/contrib/business_rules/src/Plugin/Block/BusinessRulesDebugBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Plugin\Block;

+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\Core\KeyValueStore\KeyValueStoreExpirableInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * Business Rules configuration.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   private $config;

@@ @@
   /**
    * The keyvalue expirable.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueStoreExpirableInterface
+   * @var KeyValueStoreExpirableInterface
    */
   private $keyvalue;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


57) modules/contrib/business_rules/src/ItemInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;

 /**
@@ @@
   /**
    * Get the Item type translated. Action|Condition.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The translates item type label.
    */
   public function getBusinessRuleItemTranslatedType();
@@ @@
   /**
    * Get the variables being used by the item.
    *
-   * @return \Drupal\business_rules\VariablesSet
+   * @return VariablesSet
    *   The variables being used by the item.
    */
   public function getVariables();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


58) modules/contrib/business_rules/src/Form/VariableForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Form;

+use Drupal\business_rules\Entity\BusinessRulesItemBase;
+use Drupal\business_rules\VariableObject;
 use Drupal\business_rules\ActionListBuilder;
 use Drupal\business_rules\ConditionListBuilder;
 use Drupal\business_rules\Entity\Action;
@@ @@
    *   The render array.
    */
   public function getVariableUsedByDetailsBox($item_type) {
-    /** @var \Drupal\business_rules\Entity\BusinessRulesItemBase $item */
+    /** @var BusinessRulesItemBase $item */
     if ($item_type == 'condition') {
       $items       = Condition::loadMultiple();
       $entity_type = 'business_rules_condition';
@@ @@

     foreach ($items as $key => $item) {
       $variables = $item->getVariables();
-      /** @var \Drupal\business_rules\VariableObject $variable */
+      /** @var VariableObject $variable */
       foreach ($variables->getVariables() as $variable) {
         if ($this->entity->id() == $variable->getId()) {
           $used_by[$key] = $item;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


59) modules/contrib/business_rules/src/Form/VariableDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Form;

+use Drupal\business_rules\Util\BusinessRulesUtil;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\business_rules\Util\BusinessRulesUtil $util */
+    /** @var BusinessRulesUtil $util */
     $util                               = \Drupal::service('business_rules.util');
     $form['conditions_using_this_item'] = $util->getUsedByConditionsDetailsBox($this->entity);
     $form['actions_using_this_item']    = $util->getUsedByActionsDetailsBox($this->entity);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


60) modules/contrib/business_rules/src/Form/ScheduleSettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


61) modules/contrib/business_rules/src/Form/ScheduleRevisionRevertTranslationForm.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Constructs a new ScheduleRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Schedule storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager) {
@@ @@
   protected function prepareRevertedRevision(ScheduleInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');

-    /** @var \Drupal\business_rules\Entity\ScheduleInterface $default_revision */
+    /** @var ScheduleInterface $default_revision */
     $latest_revision = $this->ScheduleStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


62) modules/contrib/business_rules/src/Form/ScheduleRevisionRevertForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The Schedule revision.
    *
-   * @var \Drupal\business_rules\Entity\ScheduleInterface
+   * @var ScheduleInterface
    */
   protected $revision;

@@ @@
   /**
    * The Schedule storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $ScheduleStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new ScheduleRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Schedule storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter) {
@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\business_rules\Entity\ScheduleInterface $revision
+   * @param ScheduleInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\business_rules\Entity\ScheduleInterface
+   * @return ScheduleInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(ScheduleInterface $revision, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


63) modules/contrib/business_rules/src/Form/ScheduleRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Form;

+use Drupal\business_rules\Entity\ScheduleInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ @@
   /**
    * The Schedule revision.
    *
-   * @var \Drupal\business_rules\Entity\ScheduleInterface
+   * @var ScheduleInterface
    */
   protected $revision;

@@ @@
   /**
    * The Schedule storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $ScheduleStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Constructs a new ScheduleRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


64) modules/contrib/business_rules/src/Form/ScheduleForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Form;

+use Drupal\business_rules\Entity\Schedule;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\business_rules\Entity\Schedule $entity */
+    /** @var Schedule $entity */
     $entity = $this->entity;

     // Save as a new revision if requested to do so.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


65) modules/contrib/business_rules/src/Form/ItemForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Form;

+use Drupal\business_rules\Util\BusinessRulesUtil;
+use Drupal\business_rules\Plugin\BusinessRulesVariableManager;
+use Drupal\business_rules\Util\Flowchart\Flowchart;
+use Drupal\business_rules\ItemInterface;
+use Drupal\Core\Plugin\DefaultPluginManager;
+use Drupal\Core\GeneratedLink;
 use Drupal\business_rules\Entity\Action;
 use Drupal\business_rules\Entity\Condition;
 use Drupal\business_rules\Entity\Variable;
@@ @@
   /**
    * The business rules util.
    *
-   * @var \Drupal\business_rules\Util\BusinessRulesUtil
+   * @var BusinessRulesUtil
    */
   protected $util;

@@ @@
   /**
    * The variable manager.
    *
-   * @var \Drupal\business_rules\Plugin\BusinessRulesVariableManager
+   * @var BusinessRulesVariableManager
    */
   protected $variableManager;

@@ @@
   /**
    * The Business Rule flowchart.
    *
-   * @var \Drupal\business_rules\Util\Flowchart\Flowchart
+   * @var Flowchart
    */
   private $chart;

@@ @@
     $itemManager = $this->getItemManager();
     $form_state->set('business_rules_step', $this->step);

-    /** @var \Drupal\business_rules\ItemInterface $item */
+    /** @var ItemInterface $item */
     $item = $this->entity;
     $class = get_class($item);

@@ @@
   /**
    * Get the pluginManager.
    *
-   * @return \Drupal\Core\Plugin\DefaultPluginManager
+   * @return DefaultPluginManager
    *   The item PluginManager.
    */
   abstract public function getItemManager();
@@ @@

     $form = [];

-    /** @var \Drupal\business_rules\ItemInterface $item */
+    /** @var ItemInterface $item */
     $item = $this->entity;

     $show_entity       = FALSE;
@@ @@
   /**
    * Provide a link a modal window with all available tokens.
    *
-   * @return \Drupal\Core\GeneratedLink|null
+   * @return GeneratedLink|null
    *   The modal link or NULL if Token module is not installed.
    */
   protected function getTokensLink() {
@@ @@
       return $form;
     }
     else {
-      /** @var \Drupal\business_rules\ItemInterface $item */
+      /** @var ItemInterface $item */
       $item        = $this->entity;
       $itemManager = $this->getItemManager();

@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The AjaxResponse.
    */
   public function targetBundleCallback(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The AjaxResponse.
    */
   public function targetEntityTypeCallback(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


66) modules/contrib/business_rules/src/Form/ConditionForm.php:93

    ---------- begin diff ----------
@@ @@
   /**
    * Check if one condition is part of a conditions set.
    *
-   * @param \Drupal\business_rules\Entity\Condition $condition
+   * @param Condition $condition
    *   The condition.
    *
    * @return bool
@@ @@
     $conditions = array_merge($conditions, Condition::loadMultipleByType('logical_or'));

     $items = [];
-    /** @var \Drupal\business_rules\Entity\Condition $c */
+    /** @var Condition $c */
     foreach ($conditions as $c) {
       if (is_array($c->getSettings('items'))) {
         $items = array_merge($items, $c->getSettings('items'));
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    * @param string $items_type
    *   The items type: success|fail.
@@ @@
    */
   public function formItems(array $form, FormStateInterface $form_state, $items_type) {

-    /** @var \Drupal\business_rules\Entity\Condition $condition */
+    /** @var Condition $condition */
     $condition = $this->entity;

     $user_input = $form_state->getUserInput();
@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\business_rules\Entity\Condition $condition */
+    /** @var Condition $condition */
     $condition = $this->entity;
     if (!$condition->isNew()) {
       $success_items = $form_state->getValue('success');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


67) modules/contrib/business_rules/src/Form/ConditionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Form;

+use Drupal\business_rules\Util\BusinessRulesUtil;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\business_rules\Util\BusinessRulesUtil $util */
+    /** @var BusinessRulesUtil $util */
     $util                               = \Drupal::service('business_rules.util');
     $form['rules_using_this_item']      = $util->getUsedByBusinessRulesDetailsBox($this->entity);
     $form['conditions_using_this_item'] = $util->getUsedByConditionsDetailsBox($this->entity);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


68) modules/contrib/business_rules/src/Form/BusinessRuleForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Form;

+use Drupal\business_rules\Util\BusinessRulesUtil;
+use Drupal\business_rules\Plugin\BusinessRulesReactsOnManager;
+use Drupal\business_rules\Util\Flowchart\Flowchart;
+use Drupal\business_rules\BusinessRuleInterface;
 use Drupal\business_rules\BusinessRulesItemObject;
 use Drupal\business_rules\Entity\Action;
 use Drupal\business_rules\Entity\BusinessRule;
@@ @@
   /**
    * The business rules Util.
    *
-   * @var \Drupal\business_rules\Util\BusinessRulesUtil
+   * @var BusinessRulesUtil
    */
   public $util;

@@ @@
   /**
    * The reactsOnManager.
    *
-   * @var \Drupal\business_rules\Plugin\BusinessRulesReactsOnManager
+   * @var BusinessRulesReactsOnManager
    */
   protected $reactsOnManager;

@@ @@
   /**
    * The Business Rule flowchart.
    *
-   * @var \Drupal\business_rules\Util\Flowchart\Flowchart
+   * @var Flowchart
    */
   private $chart;

@@ @@
   /**
    * BusinessRuleForm constructor.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The services container.
    */
   public function __construct(ContainerInterface $container) {
@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\business_rules\Entity\BusinessRule $business_rule */
+    /** @var BusinessRule $business_rule */
     $business_rule = $this->entity;

     if ($this->step === 1 && $business_rule->isNew()) {
@@ @@

     $form = [];

-    /** @var \Drupal\business_rules\BusinessRuleInterface $rule */
+    /** @var BusinessRuleInterface $rule */
     $rule = $this->entity;

     $show_entity = FALSE;
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array
@@ @@
   public function formItems(array $form, FormStateInterface $form_state) {
     $user_input = $form_state->getUserInput();

-    /** @var \Drupal\business_rules\Entity\BusinessRule $rule */
+    /** @var BusinessRule $rule */
     $rule = $this->entity;

     $label        = $this->t('Item');
@@ @@
       return $form;
     }
     else {
-      /** @var \Drupal\business_rules\Entity\BusinessRule $business_rule */
+      /** @var BusinessRule $business_rule */
       $business_rule = $this->entity;

       $items = $form_state->getValue('items');
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The AjaxResponse.
    */
   public function targetEntityTypeCallback(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


69) modules/contrib/business_rules/src/Form/ActionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Form;

+use Drupal\business_rules\Util\BusinessRulesUtil;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\business_rules\Util\BusinessRulesUtil $util */
+    /** @var BusinessRulesUtil $util */
     $util                               = \Drupal::service('business_rules.util');
     $form['rules_using_this_item']      = $util->getUsedByBusinessRulesDetailsBox($this->entity);
     $form['conditions_using_this_item'] = $util->getUsedByConditionsDetailsBox($this->entity);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


70) modules/contrib/business_rules/src/EventSubscriber/KernelRequestListener.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\EventSubscriber;

+use Symfony\Contracts\EventDispatcher\Event;
+use Symfony\Component\EventDispatcher\EventDispatcher;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Symfony\Component\DependencyInjection\ContainerAwareInterface;
 use Symfony\Component\DependencyInjection\ContainerAwareTrait;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpKernel\KernelEvents;

@@ @@
   /**
    * Create a new event for BusinessRules plugin KernelRequest.
    *
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param Event $event
    *   The event.
    */
   public function onKernelRequest(Event $event) {
@@ @@
       'entity_unchanged' => NULL,
       'reacts_on'        => $reacts_on_definition,
     ]);
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcher $event_dispatcher */
+    /** @var EventDispatcher $event_dispatcher */
     $event_dispatcher = $this->container->get('event_dispatcher');
     $event_dispatcher->dispatch($reacts_on_definition['eventName'], $new_event);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


71) modules/contrib/business_rules/src/EventSubscriber/BusinessRulesListener.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\EventSubscriber;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\business_rules\Events\BusinessRulesDrushEvent;
 use Drupal\business_rules\Util\BusinessRulesProcessor;
@@ @@
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Symfony\Component\HttpKernel\KernelEvents;
@@ @@
   /**
    * The container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   private static $container;

@@ @@
   /**
    * The business rule processor.
    *
-   * @var \Drupal\business_rules\Util\BusinessRulesProcessor
+   * @var BusinessRulesProcessor
    */
   private $processor;

@@ @@
   /**
    * The Business Rules Util.
    *
-   * @var \Drupal\business_rules\Util\BusinessRulesUtil
+   * @var BusinessRulesUtil
    */
   private $util;

@@ @@
   /**
    * The eventDispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * A LoggerFactory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerChannelFactory;

@@ @@
   /**
    * A ModuleHandler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * BusinessRulesListener constructor.
    *
-   * @param \Drupal\business_rules\Util\BusinessRulesProcessor $processor
+   * @param BusinessRulesProcessor $processor
    *   The business rule processor service.
-   * @param \Drupal\business_rules\Util\BusinessRulesUtil $util
+   * @param BusinessRulesUtil $util
    *   The business rule util.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerChannelFactory
+   * @param LoggerChannelFactoryInterface $loggerChannelFactory
    *   The logger channel.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The logger channel.
    */
   public function __construct(BusinessRulesProcessor $processor, BusinessRulesUtil $util, EventDispatcherInterface $eventDispatcher, LoggerChannelFactoryInterface $loggerChannelFactory, ModuleHandlerInterface $moduleHandler) {
@@ @@
   /**
    * Sets the container.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface|null $container
+   * @param ContainerInterface|null $container
    *   A ContainerInterface instance or null.
    */
   public static function setContainer(ContainerInterface $container = NULL) {
@@ @@
   /**
    * Rebuilds container when dynamic rule eventsubscribers are not registered.
    *
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param Event $event
    *   The event object.
    * @param string $event_name
    *   The event name.
@@ @@
   /**
    * Process the rules.
    *
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The event to be processed.
    */
   public function process(BusinessRulesEvent $event) {
@@ @@
   /**
    * Remove the item references.
    *
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The event.
    */
   public function itemPosDelete(BusinessRulesEvent $event) {
@@ @@
   /**
    * Run the necessary commands on terminate event.
    *
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param Event $event
    *   The terminate event.
    */
   public function onTerminate(Event $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


72) modules/contrib/business_rules/src/Entity/Variable.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Entity;

+use Drupal\business_rules\Plugin\BusinessRulesVariablePluginInterface;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\business_rules\VariableInterface;

@@ @@
   public function evaluate(BusinessRulesEvent $event) {
     $variable_type = $this->itemManager->getDefinition($this->getType());
     $reflection    = new \ReflectionClass($variable_type['class']);
-    /** @var \Drupal\business_rules\Plugin\BusinessRulesVariablePluginInterface $defined_variable */
+    /** @var BusinessRulesVariablePluginInterface $defined_variable */
     $defined_variable = $reflection->newInstance($variable_type, $variable_type['id'], $variable_type);
     $variable         = Variable::load($this->id());
     $defined_variable->processTokens($variable, $event);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


73) modules/contrib/business_rules/src/Entity/ScheduleInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Entity;

+use Drupal\user\UserInterface;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
@@ @@
   /**
    * Gets the Schedule revision author.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity for the revision author.
    */
   public function getRevisionUser();
@@ @@
   /**
    * Get the Business Rule which has triggered this schedule.
    *
-   * @return \Drupal\business_rules\Entity\BusinessRule|null
+   * @return BusinessRule|null
    *   The Business Rule or null.
    */
   public function getTriggeredBy();
@@ @@
   /**
    * Set the Business Rule which has triggered this schedule.
    *
-   * @param \Drupal\business_rules\Entity\BusinessRulesItemBase $businessRuleItem
+   * @param BusinessRulesItemBase $businessRuleItem
    *   The Business Rule item.
    *
    * @return \Drupal\business_rules\Entity\ScheduleInterface
@@ @@
    * @param string $triggeredBy
    *   The triggered by Business Rule item.
    *
-   * @return \Drupal\business_rules\Entity\Schedule
+   * @return Schedule
    *   The schedule entity.
    */
   public static function loadByNameAndTriggeredBy($name, $triggeredBy);
@@ @@
   /**
    * Execute the scheduled tasks.
    *
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The cron event.
    */
   public static function executeSchedule(BusinessRulesEvent $event);
@@ @@
   /**
    * Set the event.
    *
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The event that has created the schedule.
    */
   public function setEvent(BusinessRulesEvent $event);
@@ @@
   /**
    * Get the event.
    *
-   * @return \Drupal\business_rules\Events\BusinessRulesEvent
+   * @return BusinessRulesEvent
    *   The event that has created the schedule.
    */
   public function getEvent();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


74) modules/contrib/business_rules/src/Entity/Schedule.php:417

    ---------- begin diff ----------
@@ @@
       if (count($tasks)) {
         /** @var \Drupal\business_rules\Entity\Schedule $task */
         foreach ($tasks as $task) {
-          /** @var \Drupal\business_rules\Entity\Action $action */
+          /** @var Action $action */
           $action = $task->getTriggeredBy();
           $items = $action->getSettings('items');
           $task_event = $task->getEvent();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


75) modules/contrib/business_rules/src/Entity/Condition.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Entity;

+use Drupal\business_rules\ItemInterface;
+use Drupal\business_rules\Plugin\BusinessRulesConditionPlugin;
 use Drupal\business_rules\BusinessRulesItemObject;
 use Drupal\business_rules\ConditionInterface;
 use Drupal\business_rules\Events\BusinessRulesEvent;
@@ @@
    */
   public function filterContextAvailableItems(array $items) {

-    /** @var \Drupal\business_rules\ItemInterface $value */
+    /** @var ItemInterface $value */
     $entity_type     = $this->getTargetEntityType();
     $bundle          = $this->getTargetBundle();
     $available_items = [];
@@ @@
   public function process(BusinessRulesEvent $event) {
     $condition_type = $this->itemManager->getDefinition($this->getType());
     $reflection     = new \ReflectionClass($condition_type['class']);
-    /** @var \Drupal\business_rules\Plugin\BusinessRulesConditionPlugin $defined_condition */
+    /** @var BusinessRulesConditionPlugin $defined_condition */
     $defined_condition = $reflection->newInstance($condition_type, $condition_type['id'], $condition_type);
     $condition         = Condition::load($this->id());
     $defined_condition->processTokens($condition, $event);
@@ @@
   public function calculateDependencies() {
     parent::calculateDependencies();

-    /** @var \Drupal\business_rules\BusinessRulesItemObject $item */
+    /** @var BusinessRulesItemObject $item */
     foreach (array_merge($this->getSuccessItems(), $this->getFailItems()) as $item) {
       $this->addDependency('config', $item->loadEntity()->getConfigDependencyName());
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


76) modules/contrib/business_rules/src/Entity/BusinessRulesItemBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Entity;

+use Symfony\Component\EventDispatcher\EventDispatcher;
+use Drupal\Core\Plugin\DefaultPluginManager;
+use Drupal\business_rules\Util\BusinessRulesUtil;
+use Drupal\business_rules\Plugin\BusinessRulesItemPluginBase;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\business_rules\ItemInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcher
+   * @var EventDispatcher
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Item plugin manager.
    *
-   * @var \Drupal\Core\Plugin\DefaultPluginManager
+   * @var DefaultPluginManager
    */
   protected $itemManager;

@@ @@
   /**
    * The Business Rules Util.
    *
-   * @var \Drupal\business_rules\Util\BusinessRulesUtil
+   * @var BusinessRulesUtil
    */
   protected $util;

@@ @@
   /**
    * Get the plugin manager.
    *
-   * @return \Drupal\Core\Plugin\DefaultPluginManager
+   * @return DefaultPluginManager
    *   The plugin manager to be used.
    */
   abstract public function getItemManager();
@@ @@
   public static function loadMultipleByType($type, array $ids = NULL) {
     $items = self::loadMultiple($ids);
     $result = [];
-    /** @var \Drupal\business_rules\ItemInterface $item */
+    /** @var ItemInterface $item */
     foreach ($items as $item) {
       if ($item->getType() == $type) {
         $result[] = $item;
@@ @@
   public static function loadAllTags() {
     $business_rules = self::loadMultiple();
     $tags           = [];
-    /** @var \Drupal\business_rules\Entity\BusinessRule $business_rule */
+    /** @var BusinessRule $business_rule */
     foreach ($business_rules as $business_rule) {
       if (count($business_rule->getTags())) {
         foreach ($business_rule->getTags() as $key => $value) {
@@ @@
     if (!$this->isNew()) {
       // Dispatch an event about the item deletion.
       $event = new BusinessRulesEvent($this);
-      $this->eventDispatcher->dispatch('business_rules.item_pos_delete', $event);
+      $this->eventDispatcher->dispatch($event, 'business_rules.item_pos_delete');
     }
   }

@@ @@

     $plugin_type = $this->itemManager->getDefinition($this->getType());
     $reflection = new \ReflectionClass($plugin_type['class']);
-    /** @var \Drupal\business_rules\Plugin\BusinessRulesItemPluginBase $defined_item */
+    /** @var BusinessRulesItemPluginBase $defined_item */
     $defined_item = $reflection->newInstance($plugin_type, $plugin_type['id'], $plugin_type);

     foreach ($defined_item->getVariables($this)->getVariablesIds() as $id) {
-      /** @var \Drupal\business_rules\Entity\Variable $variable */
+      /** @var Variable $variable */
       if ($variable = Variable::load($id)) {
         $this->addDependency('config', $variable->getConfigDependencyName());
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


77) modules/contrib/business_rules/src/Entity/BusinessRule.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Entity;

+use Drupal\business_rules\Plugin\BusinessRulesReactsOnManager;
+use Drupal\Core\Config\ConfigFactory;
+use Drupal\business_rules\Util\BusinessRulesUtil;
+use Drupal\business_rules\ItemInterface;
 use Drupal\business_rules\BusinessRuleInterface;
 use Drupal\business_rules\BusinessRulesItemObject;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
@@ @@
   /**
    * The reactsOnManger.
    *
-   * @var \Drupal\business_rules\Plugin\BusinessRulesReactsOnManager
+   * @var BusinessRulesReactsOnManager
    */
   protected static $reactsOnManager;

@@ @@
   /**
    * The ConfigFactory.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
   /**
    * The Business Rules Util.
    *
-   * @var \Drupal\business_rules\Util\BusinessRulesUtil
+   * @var BusinessRulesUtil
    */
   protected $util;

@@ @@
    */
   public function filterContextAvailableItems(array $items) {

-    /** @var \Drupal\business_rules\ItemInterface $value */
-
+    /** @var ItemInterface $value */
     $entity_type     = $this->getTargetEntityType();
     $bundle          = $this->getTargetBundle();
     $available_items = [];
@@ @@
   public function calculateDependencies() {
     parent::calculateDependencies();

-    /** @var \Drupal\business_rules\BusinessRulesItemObject $item */
+    /** @var BusinessRulesItemObject $item */
     foreach ($this->getItems() as $item) {
       $this->addDependency('config', $item->loadEntity()->getConfigDependencyName());
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


78) modules/contrib/business_rules/src/Entity/Action.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Entity;

+use Drupal\business_rules\Plugin\BusinessRulesActionPlugin;
 use Drupal\business_rules\ActionInterface;
 use Drupal\business_rules\BusinessRulesItemObject;
 use Drupal\business_rules\Events\BusinessRulesEvent;
@@ @@
   public function execute(BusinessRulesEvent $event) {
     $action_type = $this->itemManager->getDefinition($this->getType());
     $reflection = new \ReflectionClass($action_type['class']);
-    /** @var \Drupal\business_rules\Plugin\BusinessRulesActionPlugin $defined_action */
+    /** @var BusinessRulesActionPlugin $defined_action */
     $defined_action = $reflection->newInstance($action_type, $action_type['id'], $action_type);
     $action         = Action::load($this->id());
     $defined_action->processTokens($action, $event);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


79) modules/contrib/business_rules/src/Controller/ScheduleTaskController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Controller;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\business_rules\Util\BusinessRulesUtil;
 use Drupal\business_rules\ActionInterface;
 use Drupal\business_rules\Ajax\UpdateFlowchartCommand;
 use Drupal\business_rules\BusinessRulesItemObject;
@@ @@
   /**
    * The EntityTypeManager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * All saved items from database.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]|static[]
+   * @var EntityInterface[]|static[]
    */
   protected $items;

@@ @@
   /**
    * The item label.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @var TranslatableMarkup
    */
   protected $label;

@@ @@
   /**
    * The item label in plural.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @var TranslatableMarkup
    */
   protected $labelPlural;

@@ @@
   /**
    * Business Rules Util service.
    *
-   * @var \Drupal\business_rules\Util\BusinessRulesUtil
+   * @var BusinessRulesUtil
    */
   protected $util;

@@ @@
    * @param string $item_id
    *   The item id.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The RedirectResponse.
    */
   public function addItem($action_id, $item_type, $item_id) {
@@ @@
   /**
    * Get the bigger weight for the action items.
    *
-   * @param \Drupal\business_rules\ActionInterface $action
+   * @param ActionInterface $action
    *   The action to get the bigger item weight.
    *
    * @return int
@@ @@
    * @param string $method
    *   The method name: ajax|nojs.
    *
-   * @return array|\Drupal\Core\Ajax\AjaxResponse
+   * @return array|AjaxResponse
    *   Render array or AjaxResponse.
    */
   public function itemsTable($action_id, $item_type, $method) {
@@ @@
     ];

     $rows = [];
-    /** @var \Drupal\business_rules\Entity\Action $item */
+    /** @var Action $item */
     foreach ($this->items as $item) {
       if (!in_array($item->id(), array_keys($this->savedItems)) && $item->id() != $action->id()) {

@@ @@
    * @param string $method
    *   The method name: ajax|nojs.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return AjaxResponse|RedirectResponse
    *   The AjaxResponse or the RedirectResponse.
    */
   public function removeItem($action_id, $item_id, $method) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


80) modules/contrib/business_rules/src/Controller/ScheduleController.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * A dateFormatter object.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   private $dateFormatter;

@@ @@
    * @param string $business_rules_schedule
    *   The business_rules_schedule id.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The redirect response.
    */
   public function execute($business_rules_schedule) {
     $task = Schedule::load($business_rules_schedule);

-    /** @var \Drupal\business_rules\Entity\Action $action */
+    /** @var Action $action */
     $action    = $task->getTriggeredBy();
     $items     = $action->getSettings('items');
     $container = \Drupal::getContainer();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


81) modules/contrib/business_rules/src/Controller/ModalController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Controller;

+use Drupal\business_rules\Util\BusinessRulesUtil;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\OpenModalDialogCommand;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
   /**
    * The BusinessRulesUtil.
    *
-   * @var \Drupal\business_rules\Util\BusinessRulesUtil
+   * @var BusinessRulesUtil
    */
   protected $util;

@@ @@
    * @param string $method
    *   The method tho show the content: ajax|nojs.
    *
-   * @return array|\Drupal\Core\Ajax\AjaxResponse
+   * @return array|AjaxResponse
    *   The help content.
    */
   public function modal($collection, $key, $title, $method) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


82) modules/contrib/business_rules/src/Controller/LoopThroughViewResultController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Controller;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\business_rules\ItemInterface;
 use Drupal\business_rules\ActionInterface;
 use Drupal\business_rules\BusinessRulesItemObject;
 use Drupal\business_rules\Entity\Action;
@@ @@
   /**
    * The EntityTypeManager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * All saved items from database.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]|static[]
+   * @var EntityInterface[]|static[]
    */
   protected $items;

@@ @@
   /**
    * The item label.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @var TranslatableMarkup
    */
   protected $label;

@@ @@
   /**
    * The item label in plural.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @var TranslatableMarkup
    */
   protected $labelPlural;

@@ @@
   /**
    * Get the bigger weight for the action items.
    *
-   * @param \Drupal\business_rules\ActionInterface $action
+   * @param ActionInterface $action
    *   The action to get the bigger item weight.
    *
    * @return int
@@ @@
    * @param string $method
    *   The method name: ajax|nojs.
    *
-   * @return array|\Drupal\Core\Ajax\AjaxResponse
+   * @return array|AjaxResponse
    *   Render array or AjaxResponse.
    */
   public function itemsTable($action_id, $item_type, $method) {

     $this->init($item_type);
-    /** @var \Drupal\business_rules\ActionInterface $action */
+    /** @var ActionInterface $action */
     $action = Action::load($action_id);

     $table['#title'] = $this->t('Add @label_plural on %action', [
@@ @@
     ];

     $rows = [];
-    /** @var \Drupal\business_rules\ItemInterface $item */
+    /** @var ItemInterface $item */
     foreach ($this->items as $item) {
       if (!in_array($item->id(), array_keys($this->savedItems)) && $item->id() != $action->id()) {

@@ @@
    * @param string $method
    *   The method name: ajax|nojs.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|\Zend\Diactoros\Response\RedirectResponse
+   * @return AjaxResponse|\Zend\Diactoros\Response\RedirectResponse
    *   The AjaxResponse or the RedirectResponse.
    */
   public function removeItem($action_id, $item_type, $item_id, $method) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


83) modules/contrib/business_rules/src/Controller/ConditionsItemsController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Controller;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\business_rules\Util\Flowchart\Flowchart;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\business_rules\ConditionInterface;
 use Drupal\business_rules\Ajax\UpdateFlowchartCommand;
 use Drupal\business_rules\BusinessRulesItemObject;
 use Drupal\business_rules\Entity\Action;
@@ @@
   /**
    * The EntityTypeManager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The Business Rules Flowchart.
    *
-   * @var \Drupal\business_rules\Util\Flowchart\Flowchart
+   * @var Flowchart
    */
   protected $flowchart;

@@ @@
   /**
    * All saved items from database.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]|static[]
+   * @var EntityInterface[]|static[]
    */
   protected $items;

@@ @@
   /**
    * The item label.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @var TranslatableMarkup
    */
   protected $label;

@@ @@
   /**
    * The item label in plural.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @var TranslatableMarkup
    */
   protected $labelPlural;

@@ @@
    * @param string $method
    *   The method name: ajax|nojs.
    *
-   * @return array|\Drupal\Core\Ajax\AjaxResponse
+   * @return array|AjaxResponse
    *   Render array or AjaxResponse.
    */
   public function itemsTable($condition_id, $condition_item_type, $item_type, $method) {

     $this->init($item_type);
-    /** @var \Drupal\business_rules\ConditionInterface $condition */
+    /** @var ConditionInterface $condition */
     $condition   = Condition::load($condition_id);
     $this->items = $condition->filterContextAvailableItems($this->items);

@@ @@
    * @param string $method
    *   The method name: ajax|nojs.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|\Zend\Diactoros\Response\RedirectResponse
+   * @return AjaxResponse|\Zend\Diactoros\Response\RedirectResponse
    *   The AjaxResponse or the RedirectResponse.
    */
   public function removeItem($condition_id, $condition_item_type, $item_type, $item_id, $method) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


84) modules/contrib/business_rules/src/Controller/ConditionSetController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Controller;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\business_rules\Util\BusinessRulesUtil;
 use Drupal\business_rules\Ajax\UpdateFlowchartCommand;
 use Drupal\business_rules\BusinessRulesItemObject;
 use Drupal\business_rules\ConditionInterface;
@@ @@
   /**
    * The EntityTypeManager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * All saved items from database.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]|static[]
+   * @var EntityInterface[]|static[]
    */
   protected $items;

@@ @@
   /**
    * The item label.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @var TranslatableMarkup
    */
   protected $label;

@@ @@
   /**
    * The item label in plural.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @var TranslatableMarkup
    */
   protected $labelPlural;

@@ @@
   /**
    * Business Rules Util service.
    *
-   * @var \Drupal\business_rules\Util\BusinessRulesUtil
+   * @var BusinessRulesUtil
    */
   protected $util;

@@ @@
    * @param string $item_id
    *   The item.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The RedirectResponse.
    */
   public function addItem($condition_id, $item_id) {
@@ @@
   /**
    * Get the bigger weight for the condition items.
    *
-   * @param \Drupal\business_rules\ConditionInterface $condition
+   * @param ConditionInterface $condition
    *   The condition to get the bigger item weight.
    *
    * @return int
@@ @@
    * @param string $method
    *   The method name: ajax|nojs.
    *
-   * @return array|\Drupal\Core\Ajax\AjaxResponse
+   * @return array|AjaxResponse
    *   Render array or AjaxResponse.
    */
   public function itemsTable($condition_id, $method) {
@@ @@
     ];

     $rows = [];
-    /** @var \Drupal\business_rules\Entity\Condition $item */
+    /** @var Condition $item */
     foreach ($this->items as $item) {
       if (!in_array($item->id(), array_keys($this->savedItems)) && $item->id() != $condition->id()) {

@@ @@
   /**
    * Init properties.
    *
-   * @param \Drupal\business_rules\Entity\Condition $condition
+   * @param Condition $condition
    *   The ActionSet action.
    */
   public function init(Condition $condition) {
@@ @@
    * @param string $method
    *   The method name: ajax|nojs.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return AjaxResponse|RedirectResponse
    *   The AjaxResponse or the RedirectResponse.
    */
   public function removeItem($condition_id, $item_id, $method) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


85) modules/contrib/business_rules/src/Controller/BusinessRulesItemsController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Controller;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\business_rules\Util\Flowchart\Flowchart;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\business_rules\Util\BusinessRulesUtil;
 use Drupal\business_rules\Ajax\UpdateFlowchartCommand;
 use Drupal\business_rules\BusinessRulesItemObject;
 use Drupal\business_rules\Entity\Action;
@@ @@
   /**
    * The EntityTypeManager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The Business Rules Flowchart.
    *
-   * @var \Drupal\business_rules\Util\Flowchart\Flowchart
+   * @var Flowchart
    */
   protected $flowchart;

@@ @@
   /**
    * All saved items from database.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]|static[]
+   * @var EntityInterface[]|static[]
    */
   protected $items;

@@ @@
   /**
    * The item label.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @var TranslatableMarkup
    */
   protected $label;

@@ @@
   /**
    * The item label in plural.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @var TranslatableMarkup
    */
   protected $labelPlural;

@@ @@
   /**
    * The add new item button.
    *
-   * @var \Drupal\Core\Link
+   * @var Link
    */
   protected $newItemButton;

@@ @@
   /**
    * The Business Rules Util.
    *
-   * @var \Drupal\business_rules\Util\BusinessRulesUtil
+   * @var BusinessRulesUtil
    */
   protected $util;

@@ @@
    * @param string $item_id
    *   The item id.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The RedirectResponse.
    */
   public function addItem($business_rule, $item_type, $item_id) {
@@ @@
    */
   public function itemsTable($business_rule, $item_type, $method) {
     $this->init($item_type);
-    /** @var \Drupal\business_rules\Entity\BusinessRule $rule */
+    /** @var BusinessRule $rule */
     $rule             = BusinessRule::load($business_rule);
     $this->items      = $rule->filterContextAvailableItems($this->items);
     $this->savedItems = $rule->getItems();
@@ @@
    * @param string $method
    *   The method ajax|nojs.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return AjaxResponse|RedirectResponse
    *   The AjaxResponse or the RedirectResponse.
    */
   public function removeItem($business_rule, $item_type, $item_id, $method) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


86) modules/contrib/business_rules/src/Controller/BusinessRuleController.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Disables a BusinessRule object.
    *
-   * @param \Drupal\business_rules\Entity\BusinessRule $business_rule
+   * @param BusinessRule $business_rule
    *   The BusinessRule object to disable.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   A redirect response to the config_test listing page.
    */
   public function disable(BusinessRule $business_rule) {
@@ @@
   /**
    * Enables a BusinessRule object.
    *
-   * @param \Drupal\business_rules\Entity\BusinessRule $business_rule
+   * @param BusinessRule $business_rule
    *   The BusinessRule object to disable.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   A redirect response to the config_test listing page.
    */
   public function enable(BusinessRule $business_rule) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


87) modules/contrib/business_rules/src/Controller/AutocompleteTags.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Handler for autocomplete request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The matched values.
    */
   public function handleAutocomplete(Request $request) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


88) modules/contrib/business_rules/src/Controller/ActionSetController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Controller;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\business_rules\Util\BusinessRulesUtil;
 use Drupal\business_rules\ActionInterface;
 use Drupal\business_rules\Ajax\UpdateFlowchartCommand;
 use Drupal\business_rules\BusinessRulesItemObject;
@@ @@
   /**
    * The EntityTypeManager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * All saved items from database.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]|static[]
+   * @var EntityInterface[]|static[]
    */
   protected $items;

@@ @@
   /**
    * The item label.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @var TranslatableMarkup
    */
   protected $label;

@@ @@
   /**
    * The item label in plural.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @var TranslatableMarkup
    */
   protected $labelPlural;

@@ @@
   /**
    * Business Rules Util service.
    *
-   * @var \Drupal\business_rules\Util\BusinessRulesUtil
+   * @var BusinessRulesUtil
    */
   protected $util;

@@ @@
    * @param string $item_id
    *   The item id.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The RedirectResponse.
    */
   public function addItem($action_id, $item_id) {
@@ @@
   /**
    * Get the bigger weight for the action items.
    *
-   * @param \Drupal\business_rules\ActionInterface $action
+   * @param ActionInterface $action
    *   The action to get the bigger item weight.
    *
    * @return int
@@ @@
    * @param string $method
    *   The method name: ajax|nojs.
    *
-   * @return array|\Drupal\Core\Ajax\AjaxResponse
+   * @return array|AjaxResponse
    *   Render array or AjaxResponse.
    */
   public function itemsTable($action_id, $method) {
@@ @@
     ];

     $rows = [];
-    /** @var \Drupal\business_rules\Entity\Action $item */
+    /** @var Action $item */
     foreach ($this->items as $item) {
       if (!in_array($item->id(), array_keys($this->savedItems)) && $item->id() != $action->id()) {

@@ @@
   /**
    * Init properties.
    *
-   * @param \Drupal\business_rules\Entity\Action $action
+   * @param Action $action
    *   The ActionSet action.
    */
   public function init(Action $action) {
@@ @@
    * @param string $method
    *   The method name: ajax|nojs.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return AjaxResponse|RedirectResponse
    *   The AjaxResponse or the RedirectResponse.
    */
   public function removeItem($action_id, $item_id, $method) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


89) modules/contrib/business_rules/src/ConditionInterface.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * Remove one success item from the condition.
    *
-   * @param \Drupal\business_rules\BusinessRulesItemObject $item
+   * @param BusinessRulesItemObject $item
    *   The item to be removed.
    */
   public function removeSuccessItem(BusinessRulesItemObject $item);
@@ @@
   /**
    * Remove one fail item from the condition.
    *
-   * @param \Drupal\business_rules\BusinessRulesItemObject $item
+   * @param BusinessRulesItemObject $item
    *   The item to be removed.
    */
   public function removeFailItem(BusinessRulesItemObject $item);
@@ @@
   /**
    * Add one item for Condition success.
    *
-   * @param \Drupal\business_rules\BusinessRulesItemObject $item
+   * @param BusinessRulesItemObject $item
    *   The item to be added.
    */
   public function addSuccessItem(BusinessRulesItemObject $item);
@@ @@
   /**
    * Add one item for Condition fail.
    *
-   * @param \Drupal\business_rules\BusinessRulesItemObject $item
+   * @param BusinessRulesItemObject $item
    *   The item to be added.
    */
   public function addFailItem(BusinessRulesItemObject $item);
@@ @@
   /**
    * Process the condition.
    *
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The event that has triggered the condition.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


90) modules/contrib/business_rules/src/ConditionHtmlRouteProvider.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the add-form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


91) modules/contrib/business_rules/src/BusinessRulesItemObject.php:82

    ---------- begin diff ----------
@@ @@
   /**
    * Load the Item object. Action or Condition.
    *
-   * @return \Drupal\business_rules\ItemInterface|null
+   * @return ItemInterface|null
    *   The loaded item. Action or Condition.
    */
   public function loadEntity() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


92) modules/contrib/business_rules/src/BusinessRulesBreadcrumb.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules;

+use Drupal\Core\Breadcrumb\Breadcrumb;
 use Drupal\Core\Link;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\system\PathBasedBreadcrumbBuilder;
@@ @@
    * {@inheritdoc}
    */
   public function build(RouteMatchInterface $route_match) {
-    /** @var \Drupal\Core\Breadcrumb\Breadcrumb $breadcrumb */
+    /** @var Breadcrumb $breadcrumb */
     $breadcrumb = parent::build($route_match);
     $route_name = $route_match->getRouteName();
     $breadcrumb->addLink(Link::createFromRoute($this->t('Business Rules'), 'entity.business_rule.collection'));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


93) modules/contrib/business_rules/src/BusinessRuleListBuilder.php:34

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\business_rules\Entity\BusinessRule $entity */
+    /** @var BusinessRule $entity */
     $status = $entity->isEnabled() ? $this->t('Enabled') : $this->t('Disabled');

     $row['label']       = $entity->label();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


94) modules/contrib/business_rules/src/BusinessRuleInterface.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * Add one item on the Business Rule's items.
    *
-   * @param \Drupal\business_rules\BusinessRulesItemObject $item
+   * @param BusinessRulesItemObject $item
    *   The item to be added.
    */
   public function addItem(BusinessRulesItemObject $item);
@@ @@
   /**
    * Check if the item is on the same context as the Business Rule.
    *
-   * @param \Drupal\business_rules\BusinessRulesItemObject $itemObject
+   * @param BusinessRulesItemObject $itemObject
    *   The business rule object.
    *
    * @return bool
@@ @@
   /**
    * Remove one item from the Business rule's items.
    *
-   * @param \Drupal\business_rules\BusinessRulesItemObject $item
+   * @param BusinessRulesItemObject $item
    *   The item to be removed.
    */
   public function removeItem(BusinessRulesItemObject $item);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


95) modules/contrib/business_rules/src/BusinessRuleHtmlRouteProvider.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the add-form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


96) modules/contrib/business_rules/src/Annotation/BusinessRulesReactsOn.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * A human readable description of the Reacts On Event.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The group of the action to be organized in the list box.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


97) modules/contrib/business_rules/src/Annotation/BusinessRulesItem.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * A human readable description of the item.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The group of the item to be organized in the list box.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


98) modules/contrib/business_rules/src/ActionInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Execute the action.
    *
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The event that has triggered the action.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


99) modules/contrib/business_rules/src/ActionHtmlRouteProvider.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the add-form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


100) modules/contrib/business_rules/business_rules.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
+use Drupal\Core\Field\FieldItemList;
 /**
  * @file
  * Business Rules module.
@@ @@
       'reacts_on' => $reacts_on_definition,
       'loop_control' => $entity->getEntityTypeId() . $entity->id(),
     ]);
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $event_dispatcher->dispatch($reacts_on_definition['eventName'], $event);
   }
@@ @@
       'reacts_on' => $reacts_on_definition,
       'loop_control' => $entity->getEntityTypeId() . $entity->id(),
     ]);
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $event_dispatcher->dispatch($reacts_on_definition['eventName'], $event);
   }
@@ @@
       'reacts_on' => $reacts_on_definition,
       'loop_control' => $entity->getEntityTypeId() . $entity->id(),
     ]);
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $event_dispatcher->dispatch($reacts_on_definition['eventName'], $event);
   }
@@ @@
       'reacts_on' => $reacts_on_definition,
       'loop_control' => $entity->getEntityTypeId() . $entity->id(),
     ]);
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $event_dispatcher->dispatch($reacts_on_definition['eventName'], $event);
   }
@@ @@
   // appropriate place.
   if (isset($context['items']) && $context['items'] instanceof EntityReferenceFieldItemListInterface) {
     /**
-     * @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $items
+     * @var EntityReferenceFieldItemListInterface $items
      */
     $items = $context['items'];
     $entity = $items->getEntity();
@@ @@

   if ($entity instanceof EntityInterface) {
     // Check if the field is a dependent field.
-    /** @var \Drupal\Core\Field\FieldItemList $items */
+    /** @var FieldItemList $items */
     $items = $context['items'];
     $current_field = $items->getFieldDefinition()->getName();

@@ @@
       'loop_control' => $loop_control,
     ]);

-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $event_dispatcher->dispatch($reacts_on_definition['eventName'], $event);

@@ @@
       'reacts_on' => $reacts_on_definition,
       'loop_control' => $entity->getEntityTypeId() . $entity->id(),
     ]);
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $event_dispatcher->dispatch($reacts_on_definition['eventName'], $event);
   }
@@ @@
         'reacts_on' => $reacts_on_definition,
         'loop_control' => $entity->getEntityTypeId() . $entity->id(),
       ]);
-      /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+      /** @var EventDispatcherInterface $event_dispatcher */
       $event_dispatcher = \Drupal::service('event_dispatcher');
       $event_dispatcher->dispatch($reacts_on_definition['eventName'], $event);
     }
@@ @@
       'reacts_on' => $reacts_on_definition,
       'loop_control' => $entity->getEntityTypeId() . $entity->id(),
     ]);
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $event_dispatcher->dispatch($reacts_on_definition['eventName'], $event);
   }
@@ @@
       'reacts_on' => $reacts_on_definition,
       'loop_control' => $entity->getEntityTypeId() . $entity->id(),
     ]);
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $event_dispatcher->dispatch($reacts_on_definition['eventName'], $event);
   }
@@ @@
     'form_display' => NULL,
   ]);

-  /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+  /** @var EventDispatcherInterface $event_dispatcher */
   $event_dispatcher = \Drupal::service('event_dispatcher');
   $event_dispatcher->dispatch($reacts_on_definition['eventName'], $event);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


101) modules/contrib/business_rules/business_rules.install:8

    ---------- begin diff ----------
@@ @@
  */
 function business_rules_update_8101(&$sandbox) {
   $actions = Action::loadMultiple();
-  /** @var \Drupal\business_rules\Entity\Action $action */
+  /** @var Action $action */
   foreach ($actions as $key => $action) {
     if ($action->getType() == 'send_email') {
       $old_body = $action->getSettings('body');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


102) modules/contrib/business_rules/business_rules.drush.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Symfony\Contracts\EventDispatcher\Event;
 /**
  * @file
  * Business Rules module integration with Drush 8 and earlier.
@@ @@
  */

 use Drupal\business_rules\Events\BusinessRulesDrushEvent;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Implements hook_drush_init().
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector


 [WARNING] 11 nodes were removed                                                

 [OK] 102 files have been changed by Rector                                     

