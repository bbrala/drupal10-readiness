diff --git a/modules/trusted_redirect_entity_edit/src/Controller/EntityEditController.php b/modules/trusted_redirect_entity_edit/src/Controller/EntityEditController.php
index a9142ec..226d573 100644
--- a/modules/trusted_redirect_entity_edit/src/Controller/EntityEditController.php
+++ b/modules/trusted_redirect_entity_edit/src/Controller/EntityEditController.php
@@ -17,14 +17,14 @@ class EntityEditController implements ContainerInjectionInterface {
   /**
    * The entity edit url resolver.
    *
-   * @var \Drupal\trusted_redirect_entity_edit\Service\EntityEditUrlResolver
+   * @var EntityEditUrlResolver
    */
   protected $editUrlResolver;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\trusted_redirect_entity_edit\Service\EntityEditUrlResolver $edit_url_resolver
+   * @param EntityEditUrlResolver $edit_url_resolver
    *   The entity edit url resolver.
    */
   public function __construct(EntityEditUrlResolver $edit_url_resolver) {
@@ -43,15 +43,15 @@ class EntityEditController implements ContainerInjectionInterface {
   /**
    * Redirect to entity edit form based on uuid of that entity.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    * @param string $uuid
    *   Uuid of entity.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
+   * @throws NotFoundHttpException
    *   Return not found if entity (or route for it) cannot be found.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   A redirect to the extract edit form of identified entity.
    */
   public function resolveEntityEditUrl(Request $request, $uuid) {
diff --git a/modules/trusted_redirect_entity_edit/src/EventSubscriber/TrustedRedirectEntityEditSubscriber.php b/modules/trusted_redirect_entity_edit/src/EventSubscriber/TrustedRedirectEntityEditSubscriber.php
index 9d186a9..25029ce 100644
--- a/modules/trusted_redirect_entity_edit/src/EventSubscriber/TrustedRedirectEntityEditSubscriber.php
+++ b/modules/trusted_redirect_entity_edit/src/EventSubscriber/TrustedRedirectEntityEditSubscriber.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\trusted_redirect_entity_edit\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 
@@ -16,14 +16,14 @@ class TrustedRedirectEntityEditSubscriber implements EventSubscriberInterface {
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
    */
   public function __construct(RouteMatchInterface $route_match) {
@@ -33,10 +33,10 @@ class TrustedRedirectEntityEditSubscriber implements EventSubscriberInterface {
   /**
    * Redirect to trusted host.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The event to process.
    */
-  public function onRespondAssureEntityEditRedirect(FilterResponseEvent $event) {
+  public function onRespondAssureEntityEditRedirect(ResponseEvent $event) {
     // Apply only for entity edit url.
     if ($this->routeMatch->getRouteName() != 'trusted_redirect_entity_edit.edit.controller') {
       return;
diff --git a/modules/trusted_redirect_entity_edit/src/Service/EntityEditUrlResolver.php b/modules/trusted_redirect_entity_edit/src/Service/EntityEditUrlResolver.php
index b48d8f2..406f3d0 100644
--- a/modules/trusted_redirect_entity_edit/src/Service/EntityEditUrlResolver.php
+++ b/modules/trusted_redirect_entity_edit/src/Service/EntityEditUrlResolver.php
@@ -20,32 +20,32 @@ class EntityEditUrlResolver {
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeManagerInterface $entity_type_manager, RouteProviderInterface $route_provider) {
@@ -71,7 +71,7 @@ class EntityEditUrlResolver {
    * @param string $route_name
    *   Route name.
    *
-   * @return bool|\Symfony\Component\Routing\Route
+   * @return bool|Route
    *   Route object or false if route cannot be loaded.
    */
   protected function getRouteByName($route_name) {
@@ -106,7 +106,7 @@ class EntityEditUrlResolver {
    * @param string $entity_type
    *   Entity type to get route for.
    *
-   * @return bool|\Symfony\Component\Routing\Route
+   * @return bool|Route
    *   Entity edit route.
    */
   protected function getEntityEditRoute($entity_type) {
@@ -153,7 +153,7 @@ class EntityEditUrlResolver {
    * @param string $uuid
    *   Uuid of entity.
    *
-   * @return bool|\Drupal\Core\Entity\EntityInterface
+   * @return bool|EntityInterface
    */
   protected function loadEntityByUuid($entity_type, $uuid) {
     try {
@@ -171,7 +171,7 @@ class EntityEditUrlResolver {
    * @param string $uuid
    *   Uuid of entity.
    *
-   * @return \Drupal\Core\Url|bool
+   * @return Url|bool
    *   Entity edit url or false if not possible to obtain.
    */
   public function resolveEditUrlByUuid($uuid) {
diff --git a/src/EventSubscriber/TrustedRedirectSubscriber.php b/src/EventSubscriber/TrustedRedirectSubscriber.php
index 450cb28..b67b61a 100644
--- a/src/EventSubscriber/TrustedRedirectSubscriber.php
+++ b/src/EventSubscriber/TrustedRedirectSubscriber.php
@@ -2,13 +2,13 @@
 
 namespace Drupal\trusted_redirect\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Component\HttpFoundation\SecuredRedirectResponse;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Routing\TrustedRedirectResponse;
 use Drupal\trusted_redirect\TrustedRedirectHelpersTrait;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Symfony\Component\HttpFoundation\Request;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 
@@ -22,10 +22,10 @@ class TrustedRedirectSubscriber implements EventSubscriberInterface {
   /**
    * Redirect to trusted host.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The event to process.
    */
-  public function onRespondRedirectToTrustedHost(FilterResponseEvent $event) {
+  public function onRespondRedirectToTrustedHost(ResponseEvent $event) {
     $response = $event->getResponse();
     if ($response instanceof RedirectResponse) {
       $request = $event->getRequest();
diff --git a/src/TrustedRedirectHelpersTrait.php b/src/TrustedRedirectHelpersTrait.php
index 54a0d2e..4c687aa 100644
--- a/src/TrustedRedirectHelpersTrait.php
+++ b/src/TrustedRedirectHelpersTrait.php
@@ -20,21 +20,21 @@ trait TrustedRedirectHelpersTrait {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Sets the config factory.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
    *
    * @return $this
@@ -47,7 +47,7 @@ trait TrustedRedirectHelpersTrait {
   /**
    * Gets the config factory.
    *
-   * @return \Drupal\Core\Config\ConfigFactoryInterface
+   * @return ConfigFactoryInterface
    *   The config factory.
    */
   public function getConfigFactory() {
@@ -60,7 +60,7 @@ trait TrustedRedirectHelpersTrait {
   /**
    * Sets the module handler.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
    *
    * @return $this
@@ -73,7 +73,7 @@ trait TrustedRedirectHelpersTrait {
   /**
    * Gets the module handler.
    *
-   * @return \Drupal\Core\Extension\ModuleHandlerInterface
+   * @return ModuleHandlerInterface
    *   The module handler.
    */
   public function getModuleHandler() {
