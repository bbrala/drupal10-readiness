diff --git a/filelog.module b/filelog.module
index 9696827..333635d 100644
--- a/filelog.module
+++ b/filelog.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\File\FileSystemInterface;
 /**
  * @file
  * Contains filelog.module.
@@ -238,7 +239,7 @@ function filelog_form_system_logging_settings_alter(array &$form): void {
  */
 function filelog_logging_settings_validate(array $form,
                                            FormStateInterface $formState): void {
-  /** @var \Drupal\Core\File\FileSystemInterface $fileSystem */
+  /** @var FileSystemInterface $fileSystem */
   $fileSystem = Drupal::service('file_system');
   $streamWrapperManager = Drupal::service('stream_wrapper_manager');
   // Ignore the settings if logging is disabled.
diff --git a/filelog.tokens.inc b/filelog.tokens.inc
index 192f560..b1409cb 100644
--- a/filelog.tokens.inc
+++ b/filelog.tokens.inc
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\Core\Datetime\DateFormatterInterface;
+use Drupal\filelog\LogMessage;
 /**
  * @file
  * Builds placeholder replacement tokens for log messages.
@@ -76,7 +78,7 @@ function filelog_token_info(): array {
 function filelog_tokens($type, array $tokens, array $data, array $options, BubbleableMetadata $metadata): array {
   $token_service = Drupal::token();
 
-  /** @var \Drupal\Core\Datetime\DateFormatterInterface $date_service */
+  /** @var DateFormatterInterface $date_service */
   $date_service = Drupal::service('date.formatter');
 
   $replacements = [];
@@ -85,7 +87,7 @@ function filelog_tokens($type, array $tokens, array $data, array $options, Bubbl
     return [];
   }
 
-  /** @var \Drupal\filelog\LogMessage $message */
+  /** @var LogMessage $message */
   $message = $data['log'];
 
   foreach ($tokens as $name => $original) {
diff --git a/src/LogFileManager.php b/src/LogFileManager.php
index 7e5f0a5..16203bd 100644
--- a/src/LogFileManager.php
+++ b/src/LogFileManager.php
@@ -20,23 +20,23 @@ class LogFileManager implements LogFileManagerInterface {
   /**
    * The filelog settings.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected Config $config;
 
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected FileSystemInterface $fileSystem;
 
   /**
    * LogFileManager constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config_factory service.
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param FileSystemInterface $fileSystem
    *   The file_system service.
    */
   public function __construct(ConfigFactoryInterface $configFactory, FileSystemInterface $fileSystem) {
diff --git a/src/LogMessage.php b/src/LogMessage.php
index c2d6635..fcadd43 100644
--- a/src/LogMessage.php
+++ b/src/LogMessage.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\filelog;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Logger\RfcLogLevel;
 use Drupal\user\Entity\User;
 use Drupal\user\UserInterface;
@@ -69,7 +70,7 @@ class LogMessage {
   /**
    * User who triggered the event.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected UserInterface $user;
 
@@ -124,7 +125,7 @@ class LogMessage {
     if (!isset(static::$levels)) {
       static::$levels = RfcLogLevel::getLevels();
       foreach (static::$levels as $id => $label) {
-        /** @var \Drupal\Core\StringTranslation\TranslatableMarkup $label */
+        /** @var TranslatableMarkup $label */
         static::$levels[$id] = $label->getUntranslatedString();
       }
     }
@@ -228,7 +229,7 @@ class LogMessage {
   /**
    * Get the user who triggered the message.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user object.
    */
   public function getUser(): UserInterface {
diff --git a/src/LogRotator.php b/src/LogRotator.php
index 88ae0da..78f9a61 100644
--- a/src/LogRotator.php
+++ b/src/LogRotator.php
@@ -29,59 +29,59 @@ class LogRotator {
   /**
    * The filelog settings.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected Config $config;
 
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected StateInterface $state;
 
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected Token $token;
 
   /**
    * The datetime.time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected TimeInterface $time;
 
   /**
    * The filelog.file_manager service.
    *
-   * @var \Drupal\filelog\LogFileManagerInterface
+   * @var LogFileManagerInterface
    */
   protected LogFileManagerInterface $fileManager;
 
   /**
    * The file_system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected FileSystemInterface $fileSystem;
 
   /**
    * LogRotator constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config.factory service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The datetime.time service.
-   * @param \Drupal\filelog\LogFileManagerInterface $fileManager
+   * @param LogFileManagerInterface $fileManager
    *   The filelog service.
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param FileSystemInterface $fileSystem
    *   The file_system service.
    */
   public function __construct(ConfigFactoryInterface $configFactory,
@@ -108,7 +108,7 @@ class LogRotator {
    * @return bool
    *   Returns TRUE if the rotation was successful.
    *
-   * @throws \Drupal\filelog\FileLogException
+   * @throws FileLogException
    */
   public function run(bool $force = FALSE): bool {
     if ($force || $this->shouldRun($this->time->getRequestTime())) {
@@ -140,7 +140,7 @@ class LogRotator {
   /**
    * Rotate the log file.
    *
-   * @throws \Drupal\filelog\FileLogException
+   * @throws FileLogException
    */
   protected function rotateFile(): bool {
     $logFile = $this->fileManager->getFileName();
diff --git a/src/Logger/FileLog.php b/src/Logger/FileLog.php
index 3b8c2dd..349522e 100644
--- a/src/Logger/FileLog.php
+++ b/src/Logger/FileLog.php
@@ -32,35 +32,35 @@ class FileLog implements LoggerInterface {
   /**
    * The filelog settings.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected Config $config;
 
   /**
    * The state system, for updating the filelog.rotation timestamp.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected StateInterface $state;
 
   /**
    * The token system, for formatting the log messages.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected Token $token;
 
   /**
    * The log message parser, for formatting the log messages.
    *
-   * @var \Drupal\Core\Logger\LogMessageParserInterface
+   * @var LogMessageParserInterface
    */
   protected LogMessageParserInterface $parser;
 
   /**
    * The time system.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected TimeInterface $time;
 
@@ -81,24 +81,24 @@ class FileLog implements LoggerInterface {
   /**
    * The log-file manager, providing file-handling methods.
    *
-   * @var \Drupal\filelog\LogFileManagerInterface
+   * @var LogFileManagerInterface
    */
   protected LogFileManagerInterface $fileManager;
 
   /**
    * FileLog constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config.factory service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The datetime.time service.
-   * @param \Drupal\Core\Logger\LogMessageParserInterface $parser
+   * @param LogMessageParserInterface $parser
    *   The logger.log_message_parser service.
-   * @param \Drupal\filelog\LogFileManagerInterface $fileManager
+   * @param LogFileManagerInterface $fileManager
    *   The filelog.file_manager service.
    */
   public function __construct(ConfigFactoryInterface $configFactory,
@@ -121,7 +121,7 @@ class FileLog implements LoggerInterface {
    * @return bool
    *   Returns TRUE if the log file is available for writing.
    *
-   * @throws \Drupal\filelog\FileLogException
+   * @throws FileLogException
    */
   protected function openFile(): bool {
     if ($this->logFile) {
@@ -249,7 +249,7 @@ class FileLog implements LoggerInterface {
    * @param string $entry
    *   The value to write. This should contain no newline characters.
    *
-   * @throws \Drupal\filelog\FileLogException
+   * @throws FileLogException
    */
   protected function write(string $entry): void {
     if (!fwrite($this->logFile, $entry . "\n")) {
diff --git a/src/ProxyClass/LogFileManager.php b/src/ProxyClass/LogFileManager.php
index 8f528b9..46396ee 100644
--- a/src/ProxyClass/LogFileManager.php
+++ b/src/ProxyClass/LogFileManager.php
@@ -33,14 +33,14 @@ class LogFileManager implements LogFileManagerInterface {
   /**
    * The service container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected ContainerInterface $container;
 
   /**
    * Constructs a ProxyClass Drupal proxy object.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container.
    * @param string $drupal_proxy_original_service_id
    *   The service ID of the original service.
diff --git a/tests/src/Functional/FileLogSettingsTest.php b/tests/src/Functional/FileLogSettingsTest.php
index e062b8e..93859b5 100644
--- a/tests/src/Functional/FileLogSettingsTest.php
+++ b/tests/src/Functional/FileLogSettingsTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\filelog\Functional;
 
+use Drupal\Core\Entity\EntityStorageException;
+use Behat\Mink\Exception\ResponseTextException;
 use Drupal\Component\FileSecurity\FileSecurity;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\user\Entity\User;
@@ -28,7 +30,7 @@ class FileLogSettingsTest extends BrowserTestBase {
   /**
    * A user permitted to change site configuration.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   private User $adminUser;
 
@@ -44,7 +46,7 @@ class FileLogSettingsTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setUp(): void {
     parent::setUp();
@@ -66,7 +68,7 @@ class FileLogSettingsTest extends BrowserTestBase {
    * @param string $error
    *   If the form submission is invalid, the expected error message.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ResponseTextException
    *
    * @covers ::filelog_form_system_logging_settings_alter
    * @covers ::filelog_logging_settings_validate
diff --git a/tests/src/Unit/FileLogRotationTest.php b/tests/src/Unit/FileLogRotationTest.php
index 20a4551..7a3230e 100644
--- a/tests/src/Unit/FileLogRotationTest.php
+++ b/tests/src/Unit/FileLogRotationTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\filelog\Unit;
 
+use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\State\StateInterface;
 use Drupal\Core\Utility\Token;
@@ -29,21 +30,21 @@ class FileLogRotationTest extends FileLogTestBase {
   /**
    * A mock of the logfile service that provides the filename.
    *
-   * @var \Drupal\filelog\LogFileManagerInterface
+   * @var LogFileManagerInterface
    */
   protected LogFileManagerInterface $fileManager;
 
   /**
    * A mock of the token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected Token $token;
 
   /**
    * A mock of the datetime.time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected TimeInterface $time;
 
@@ -56,25 +57,17 @@ class FileLogRotationTest extends FileLogTestBase {
     // Force UTC time to avoid platform-specific effects.
     date_default_timezone_set('UTC');
 
-    $this->fileManager = $this
-      ->getMockBuilder(LogFileManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->fileManager = $this->createMock(LogFileManager::class);
     $this->fileManager
       ->method('getFileName')
       ->willReturn('vfs://filelog/' . LogFileManager::FILENAME);
 
-    $this->token = $this
-      ->getMockBuilder(Token::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->token = $this->createMock(Token::class);
     $this->token
       ->method('replace')
       ->willReturnCallback([static::class, 'tokenReplace']);
 
-    $this->time = $this
-      ->getMockBuilder(TimeInterface::class)
-      ->getMock();
+    $this->time = $this->createMock(TimeInterface::class);
     $this->time
       ->method('getRequestTime')
       ->willReturn(86401);
@@ -104,7 +97,7 @@ class FileLogRotationTest extends FileLogTestBase {
         'location' => $root,
       ],
     ];
-    /** @var \Drupal\Core\Config\ConfigFactoryInterface $configFactory */
+    /** @var ConfigFactoryInterface $configFactory */
     $configFactory = $this->getConfigFactoryStub($configs);
 
     $state = $this->createMock(StateInterface::class);
diff --git a/tests/src/Unit/FileLogTest.php b/tests/src/Unit/FileLogTest.php
index 0d0c992..b07d8a2 100644
--- a/tests/src/Unit/FileLogTest.php
+++ b/tests/src/Unit/FileLogTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\filelog\Unit;
 
+use Drupal\Core\Config\ConfigFactoryInterface;
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\FileSecurity\FileSecurity;
 use Drupal\Core\Logger\LogMessageParser;
@@ -24,21 +26,21 @@ class FileLogTest extends FileLogTestBase {
   /**
    * A mock of the token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected Token $token;
 
   /**
    * The logger.log_message_parser service.
    *
-   * @var \Drupal\Core\Logger\LogMessageParserInterface
+   * @var LogMessageParserInterface
    */
   protected LogMessageParserInterface $logMessageParser;
 
   /**
    * A mock of the datetime.time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected TimeInterface $time;
 
@@ -48,9 +50,7 @@ class FileLogTest extends FileLogTestBase {
   protected function setUp(): void {
     parent::setUp();
 
-    $this->token = $this->getMockBuilder(Token::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->token = $this->createMock(Token::class);
 
     $this->token->method('replace')
       ->willReturnCallback([static::class, 'tokenReplace']);
@@ -78,12 +78,12 @@ class FileLogTest extends FileLogTestBase {
    * @dataProvider providerFileLog
    */
   public function testFileLog(array $config, array $events, string $expected = ''): void {
-    /** @var \Drupal\Core\Config\ConfigFactoryInterface $configFactory */
+    /** @var ConfigFactoryInterface $configFactory */
     $configFactory = $this->getConfigFactoryStub(
       ['filelog.settings' => $config]
     );
 
-    /** @var \Drupal\Core\State\StateInterface|\PHPUnit\Framework\MockObject\MockObject $state */
+    /** @var StateInterface|MockObject $state */
     $state_data = ['filelog.rotation' => 0];
     $state = $this->createMock(StateInterface::class);
     $state->method('get')
@@ -226,7 +226,7 @@ class FileLogTest extends FileLogTestBase {
    *   The formatted text.
    */
   public static function tokenReplace(string $text, array $data): string {
-    /** @var \Drupal\filelog\LogMessage $message */
+    /** @var LogMessage $message */
     $message = $data['log'];
     return strtr(
       $text,
diff --git a/tests/src/Unit/FileLogTestBase.php b/tests/src/Unit/FileLogTestBase.php
index ad5dbe1..3d5bbad 100644
--- a/tests/src/Unit/FileLogTestBase.php
+++ b/tests/src/Unit/FileLogTestBase.php
@@ -20,14 +20,14 @@ abstract class FileLogTestBase extends UnitTestCase {
   /**
    * A mock of the file_system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected FileSystemInterface $fileSystem;
 
   /**
    * The virtual file system, for manipulating files in-memory.
    *
-   * @var \org\bovigo\vfs\vfsStreamDirectory
+   * @var vfsStreamDirectory
    */
   protected vfsStreamDirectory $virtualFileSystem;
 
@@ -37,10 +37,10 @@ abstract class FileLogTestBase extends UnitTestCase {
   protected function setUp(): void {
     parent::setUp();
     $container = new ContainerBuilder();
-    /** @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $swManager */
+    /** @var StreamWrapperManagerInterface $swManager */
     $swManager = $this->createMock(StreamWrapperManagerInterface::class);
     $settings = new Settings([]);
-    /** @var \Psr\Log\LoggerInterface $logger */
+    /** @var LoggerInterface $logger */
     $logger = $this->createMock(LoggerInterface::class);
     $this->fileSystem = new FileSystem($swManager, $settings, $logger);
     $container->set('file_system', $this->fileSystem);
diff --git a/tests/src/Unit/FileLogTokenTest.php b/tests/src/Unit/FileLogTokenTest.php
index f17b344..521fae3 100644
--- a/tests/src/Unit/FileLogTokenTest.php
+++ b/tests/src/Unit/FileLogTokenTest.php
@@ -30,28 +30,28 @@ class FileLogTokenTest extends UnitTestCase {
   /**
    * The logger.log_message_parser service.
    *
-   * @var \Drupal\Core\Logger\LogMessageParserInterface
+   * @var LogMessageParserInterface
    */
   protected LogMessageParserInterface $logMessageParser;
 
   /**
    * A mock of the token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected Token $token;
 
   /**
    * A mock of the date.formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected DateFormatterInterface $dateFormatter;
 
   /**
    * A mock of the user entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected EntityStorageInterface $userStorage;
 
@@ -67,9 +67,7 @@ class FileLogTokenTest extends UnitTestCase {
 
     $this->logMessageParser = new LogMessageParser();
 
-    $this->token = $this->getMockBuilder(Token::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->token = $this->createMock(Token::class);
 
     $this->dateFormatter = $this->createMock(DateFormatterInterface::class);
     $entityTypeManager = $this->createMock(EntityTypeManagerInterface::class);
@@ -149,9 +147,7 @@ class FileLogTokenTest extends UnitTestCase {
       $tokens[$name] = 'log:' . $name;
     }
 
-    $user = $this->getMockBuilder(User::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $user = $this->createMock(User::class);
 
     $this->userStorage->expects(static::once())
       ->method('load')
@@ -168,7 +164,7 @@ class FileLogTokenTest extends UnitTestCase {
 
     $options = [];
 
-    /** @var \Drupal\Core\Render\BubbleableMetadata $metadata */
+    /** @var BubbleableMetadata $metadata */
     $metadata = $this->createMock(BubbleableMetadata::class);
 
     // Mock the token service calls.
