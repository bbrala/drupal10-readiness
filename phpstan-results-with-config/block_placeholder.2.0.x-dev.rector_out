modules/contrib/block_placeholder/block_placeholder.module
modules/contrib/block_placeholder/src/BlockPlaceholderManager.php
modules/contrib/block_placeholder/src/BlockPlaceholderManagerInterface.php
modules/contrib/block_placeholder/src/Controller/BlockPlaceholderListBuilder.php
modules/contrib/block_placeholder/src/Entity/BlockPlaceholderInterface.php
modules/contrib/block_placeholder/src/Entity/BlockPlaceholderReference.php
modules/contrib/block_placeholder/src/Entity/Routing/BlockPlaceholderRoutingProvider.php
modules/contrib/block_placeholder/src/Form/BlockPlaceholderDeleteForm.php
modules/contrib/block_placeholder/src/Form/BlockPlaceholderForm.php
modules/contrib/block_placeholder/src/Form/BlockPlaceholderOrderForm.php
modules/contrib/block_placeholder/src/Plugin/Block/BlockPlaceholder.php
modules/contrib/block_placeholder/src/TwigExtension/BlockPlaceholderTwig.php
modules/contrib/block_placeholder/templates/block_placeholder.theme

10 files with changes
=====================

1) modules/contrib/block_placeholder/templates/block_placeholder.theme:12

    ---------- begin diff ----------
@@ @@
 function template_preprocess_block_placeholder(&$variables) {
   $element = $variables['element'];

-  /** @var \Drupal\Core\Template\Attribute $content_attributes */
+  /** @var Attribute $content_attributes */
   $content_attributes = isset($variables['content_attributes'])
     && !empty($variables['content_attributes'])
       ? $variables['content_attributes']
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/block_placeholder/src/Plugin/Block/BlockPlaceholder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\block_placeholder\Plugin\Block;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\block_content\BlockContentInterface;
 use Drupal\block_placeholder\BlockPlaceholderManagerInterface;
 use Drupal\block_placeholder\Entity\BlockPlaceholderInterface;
@@ @@
   /**
    * Get block placeholder content classes.
    *
-   * @param \Drupal\block_content\BlockContentInterface $block
+   * @param BlockContentInterface $block
    *   The block entity instance.
    *
    * @return array
@@ @@
   /**
    * Get block placeholder entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @return EntityInterface|null
+   * @throws InvalidPluginDefinitionException
    */
   protected function getBlockPlaceholderEntity() {
     if (!$this->hasBlockPlaceholder()) {
@@ @@
    * Get block placeholder options.
    *
    * @return array
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   protected function getBlockPlaceholderOptions() {
     $options = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/block_placeholder/src/Form/BlockPlaceholderOrderForm.php:79

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/block_placeholder/src/Form/BlockPlaceholderForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\block_placeholder\Form;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\block_content\Entity\BlockContentType;
 use Drupal\block_placeholder\Entity\BlockPlaceholderReference;
 use Drupal\Core\Entity\EntityForm;
@@ @@
    * Get block bundle type options.
    *
    * @return array
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   protected function getBlockBundleTypeOptions() {
     $options = [];
@@ @@
    * Get content block bundle types.
    *
    * @return array
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   protected function getBlockBundleTypes() {
     return $this->entityTypeManager
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/block_placeholder/src/Form/BlockPlaceholderDeleteForm.php:46

    ---------- begin diff ----------
@@ @@
         $this->t('Unable to delete block placeholder @label, due to the 
         following block configurations existing: @list_blocks', [
           '@label' => $entity->label(),
-          '@list_blocks' => render($list_blocks)
+          '@list_blocks' => \Drupal::service('renderer')->render($list_blocks)
         ])
       );
     }
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/block_placeholder/src/Entity/BlockPlaceholderReference.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\block_placeholder\Entity;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Core\Entity\Query\QueryInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\Annotation\ConfigEntityType;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
    * Load block placeholder blocks.
    *
    * @return EntityInterface[]
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   protected function loadBlockPlaceholderBlocks() {
     return $this->entityTypeManager()
@@ @@
   /**
    * Get entity query.
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @return QueryInterface
+   * @throws InvalidPluginDefinitionException
    */
   protected function getQuery() {
     return $this->getStorage()->getQuery();
@@ @@
   /**
    * Get entity storage.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @return EntityStorageInterface
+   * @throws InvalidPluginDefinitionException
    */
   protected function getStorage() {
     return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/block_placeholder/src/Entity/BlockPlaceholderInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\block_placeholder\Entity;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 /**
  * Define block placeholder interface.
  */
@@ @@
   /**
    * Load block content that's related to this placeholder.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @return EntityInterface
+   * @throws InvalidPluginDefinitionException
    */
   public function loadReferences(array $exclude_ids);

@@ @@
    *   An entity identifier.
    *
    * @return bool
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function entityExist($id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/block_placeholder/src/Controller/BlockPlaceholderListBuilder.php:38

    ---------- begin diff ----------
@@ @@
         '#items' => $block_types,
       ];
     }
-    $row['block_types'] = render($element_type);
+    $row['block_types'] = \Drupal::service('renderer')->render($element_type);

     return $row + parent::buildRow($entity);
   }
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/block_placeholder/src/BlockPlaceholderManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\block_placeholder;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 /**
  * Define block placeholder manager interface.
  */
@@ @@
    *
    * @param $id
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @return EntityInterface|null
+   * @throws InvalidPluginDefinitionException
    */
   public function load($id);

@@ @@
    *
    * @param array $ids
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @return EntityInterface[]
+   * @throws InvalidPluginDefinitionException
    */
   public function loadMultiple(array $ids = []);
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/block_placeholder/block_placeholder.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\block_content\Entity\BlockContent;
 use Drupal\block_placeholder\Entity\BlockPlaceholderReference;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
@@ @@
   /** @var BlockPlaceholderReference $placeholder */
   $placeholder = $element['#placeholder'];

-  /** @var \Drupal\block_content\Entity\BlockContent $block_content */
+  /** @var BlockContent $block_content */
   $block_content = isset($element['content']['#block_content'])
     ? $element['content']['#block_content']
     : NULL;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 10 files have been changed by Rector                                      

