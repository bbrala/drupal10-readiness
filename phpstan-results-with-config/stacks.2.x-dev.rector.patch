diff --git a/modules/stacks_content_feed/src/Plugin/WidgetType/ContentFeed.php b/modules/stacks_content_feed/src/Plugin/WidgetType/ContentFeed.php
index 09b53a8..7a354fc 100644
--- a/modules/stacks_content_feed/src/Plugin/WidgetType/ContentFeed.php
+++ b/modules/stacks_content_feed/src/Plugin/WidgetType/ContentFeed.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\stacks_content_feed\Plugin\WidgetType;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\node\Entity\NodeType;
 use Drupal\stacks\Plugin\WidgetTypeBase;
 use Drupal\stacks_content_feed\StacksQuery\StacksDatabaseQuery;
@@ -183,7 +184,7 @@ public function getNodeResultsActiveFilters(&$options) {
    *
    * @param $options
    * @param bool $is_ajax
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    */
   public function getNodeResults($options, $is_ajax = FALSE) {
     $use_solr = FALSE;
@@ -510,7 +511,7 @@ protected function setFiltersFrontend() {
    * Helper function for returning an ajax request. This makes it simpler to
    * debug AJAX issues. If user is logged in, displays $_POST variables.
    * @param $message
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   static public function postAjaxErrorMessage($message) {
     if (!\Drupal::currentUser()->isAnonymous()) {
diff --git a/src/Annotation/WidgetType.php b/src/Annotation/WidgetType.php
index d69ec23..49b17ad 100644
--- a/src/Annotation/WidgetType.php
+++ b/src/Annotation/WidgetType.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\stacks\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -30,7 +31,7 @@ class WidgetType extends Plugin {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label;
 
diff --git a/src/Controller/WidgetEntityAddController.php b/src/Controller/WidgetEntityAddController.php
index 1970ce7..75ad012 100644
--- a/src/Controller/WidgetEntityAddController.php
+++ b/src/Controller/WidgetEntityAddController.php
@@ -38,7 +38,7 @@ public static function create(ContainerInterface $container) {
     /**
      * Displays add links for available bundles/types for entity widget_entity .
      *
-     * @param \Symfony\Component\HttpFoundation\Request $request
+     * @param Request $request
      *   The current request object.
      *
      * @return array
@@ -67,7 +67,7 @@ public function add(Request $request) {
      *
      * @param EntityInterface $widget_entity_type
      *   The custom bundle to add.
-     * @param \Symfony\Component\HttpFoundation\Request $request
+     * @param Request $request
      *   The current request object.
      *
      * @return array
diff --git a/src/Controller/WidgetExtendEntityAddController.php b/src/Controller/WidgetExtendEntityAddController.php
index 7b0a7fe..06228cc 100644
--- a/src/Controller/WidgetExtendEntityAddController.php
+++ b/src/Controller/WidgetExtendEntityAddController.php
@@ -38,7 +38,7 @@ public static function create(ContainerInterface $container) {
   /**
    * Displays add links for available bundles/types for entity widget_extend.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request object.
    *
    * @return array
@@ -69,7 +69,7 @@ public function add(Request $request) {
    *
    * @param EntityInterface $widget_extend_type
    *   The custom bundle to add.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request object.
    *
    * @return array
diff --git a/src/Form/WidgetEntitySettingsForm.php b/src/Form/WidgetEntitySettingsForm.php
index ddbb9e6..66c728a 100644
--- a/src/Form/WidgetEntitySettingsForm.php
+++ b/src/Form/WidgetEntitySettingsForm.php
@@ -29,7 +29,7 @@ public function getFormId() {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -41,7 +41,7 @@ public function submitForm(array &$form, FormStateInterface $form_state) {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/Form/WidgetExtendEntitySettingsForm.php b/src/Form/WidgetExtendEntitySettingsForm.php
index 716b37b..2bbc544 100644
--- a/src/Form/WidgetExtendEntitySettingsForm.php
+++ b/src/Form/WidgetExtendEntitySettingsForm.php
@@ -29,7 +29,7 @@ public function getFormId() {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -41,7 +41,7 @@ public function submitForm(array &$form, FormStateInterface $form_state) {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/Form/WidgetInstanceEntitySettingsForm.php b/src/Form/WidgetInstanceEntitySettingsForm.php
index cbee04b..8e358a0 100644
--- a/src/Form/WidgetInstanceEntitySettingsForm.php
+++ b/src/Form/WidgetInstanceEntitySettingsForm.php
@@ -29,7 +29,7 @@ public function getFormId() {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -41,7 +41,7 @@ public function submitForm(array &$form, FormStateInterface $form_state) {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/Plugin/Field/FieldFormatter/TestFormatter.php b/src/Plugin/Field/FieldFormatter/TestFormatter.php
index 2b68fff..e9adc39 100644
--- a/src/Plugin/Field/FieldFormatter/TestFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/TestFormatter.php
@@ -64,7 +64,7 @@ public function viewElements(FieldItemListInterface $items, $langcode) {
   /**
    * Generate the output appropriate for one field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   One field item.
    *
    * @return string
diff --git a/src/Plugin/Field/FieldFormatter/WidgetFormatterType.php b/src/Plugin/Field/FieldFormatter/WidgetFormatterType.php
index 83e6f54..ed525e6 100644
--- a/src/Plugin/Field/FieldFormatter/WidgetFormatterType.php
+++ b/src/Plugin/Field/FieldFormatter/WidgetFormatterType.php
@@ -67,7 +67,7 @@ public function viewElements(FieldItemListInterface $items, $langcode) {
   /**
    * Generate the output appropriate for one field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   One field item.
    *
    * @return string
diff --git a/src/Plugin/Field/FieldWidget/FormWidgetType.php b/src/Plugin/Field/FieldWidget/FormWidgetType.php
index f30a81e..db490c3 100644
--- a/src/Plugin/Field/FieldWidget/FormWidgetType.php
+++ b/src/Plugin/Field/FieldWidget/FormWidgetType.php
@@ -154,11 +154,11 @@ public function formElement(FieldItemListInterface $items, $delta, array $elemen
   /**
    * Outputs the html for a widget row.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    * @param $delta
    * @param array $element
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    * @param array $required_options
    */
   public function widgetRow(FieldItemListInterface $items, $delta, array &$element, array &$form, FormStateInterface $form_state, $required_options = []) {
diff --git a/src/Plugin/WidgetTypeInterface.php b/src/Plugin/WidgetTypeInterface.php
index c3b4ddb..e182610 100644
--- a/src/Plugin/WidgetTypeInterface.php
+++ b/src/Plugin/WidgetTypeInterface.php
@@ -25,7 +25,7 @@ public function fieldExceptions();
 
   /**
    * If this widget type is using an entity, set the entity object here.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @return
    */
   public function setEntity(EntityInterface $entity);
diff --git a/src/Plugin/WidgetTypeManager.php b/src/Plugin/WidgetTypeManager.php
index 3798476..c074f09 100644
--- a/src/Plugin/WidgetTypeManager.php
+++ b/src/Plugin/WidgetTypeManager.php
@@ -20,9 +20,9 @@ class WidgetTypeManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Services/TaxonomyHelper.php b/src/Services/TaxonomyHelper.php
index 2702e8e..f63ae12 100644
--- a/src/Services/TaxonomyHelper.php
+++ b/src/Services/TaxonomyHelper.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\stacks\Services;
 
+use Drupal\Core\Entity\EntityFieldManager;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\taxonomy\Entity\Vocabulary;
 
@@ -14,13 +15,13 @@ class TaxonomyHelper {
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;
 
   /**
    * TaxonomyHelper constructor.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    */
   public function __construct(EntityFieldManagerInterface $entity_field_manager) {
     $this->entityFieldManager = $entity_field_manager;
diff --git a/src/Widget/WidgetData.php b/src/Widget/WidgetData.php
index 75b2d45..caa5501 100644
--- a/src/Widget/WidgetData.php
+++ b/src/Widget/WidgetData.php
@@ -241,7 +241,7 @@ private function fieldValue($field_type, $field, $cur_value, $delta) {
    * Takes a widget instance entity, and returns the label of the widget bundle
    * that is connected to that widget instance.
    *
-   * @param \Drupal\stacks\Entity\WidgetInstanceEntity $widget_instance
+   * @param WidgetInstanceEntity $widget_instance
    * @return string
    */
   static public function getWidgetType(WidgetInstanceEntity $widget_instance) {
diff --git a/src/Widget/WidgetFieldHandlers.php b/src/Widget/WidgetFieldHandlers.php
index 63bece2..279ffa3 100644
--- a/src/Widget/WidgetFieldHandlers.php
+++ b/src/Widget/WidgetFieldHandlers.php
@@ -126,7 +126,7 @@ private function field_image() {
     $uri = $this->field[$this->delta]->entity->getFileUri();
 
     return [
-      'url' => file_create_url($uri),
+      'url' => \Drupal::service('file_url_generator')->generateAbsoluteString($uri),
       'title' => isset($this->field[$this->delta]->title) ? $this->field[$this->delta]->title : '',
       'alt' => isset($this->field[$this->delta]->alt) ? $this->field[$this->delta]->alt : '',
       'uri' => $uri,
@@ -180,7 +180,7 @@ private function field_file() {
     $uri = $this->field[$this->delta]->entity->getFileUri();
 
     return [
-      'url' => file_create_url($uri),
+      'url' => \Drupal::service('file_url_generator')->generateAbsoluteString($uri),
       'description' => (isset($this->value['description']) ? $this->value['description'] : ''),
       'uri' => $uri,
     ];
diff --git a/src/Widget/WidgetTemplates.php b/src/Widget/WidgetTemplates.php
index fa683c0..8c2d43b 100644
--- a/src/Widget/WidgetTemplates.php
+++ b/src/Widget/WidgetTemplates.php
@@ -27,7 +27,7 @@ static public function templateDir() {
     }
 
     // Look for the /stacks directory in the active theme.
-    $directory_path = drupal_get_path('theme', $default_active_theme) . '/stacks';
+    $directory_path = \Drupal::service('extension.list.theme')->getPath($default_active_theme) . '/stacks';
 
     if (is_dir($directory_path)) {
       return $directory_path;
diff --git a/src/WidgetAdmin/Controller/WidgetAdmin.php b/src/WidgetAdmin/Controller/WidgetAdmin.php
index 8142247..aca589b 100644
--- a/src/WidgetAdmin/Controller/WidgetAdmin.php
+++ b/src/WidgetAdmin/Controller/WidgetAdmin.php
@@ -133,7 +133,7 @@ static public function ajaxFormDelete() {
 
   /**
    * Undo delete.
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   static public function ajaxFormUndoDelete() {
     $delta = (int)$_GET['delta'];
@@ -177,7 +177,7 @@ static public function ajaxFormEdit($nid = "", $id = "") {
 
   /**
    * Closes front-end editor dialog.
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   static public function ajaxModalClose($nid = "", $id = "", $field_name, $delta) {
     // Get entity
@@ -226,7 +226,7 @@ static public function ajaxModalClose($nid = "", $id = "", $field_name, $delta)
 
   /**
    * Opens front-end editor deletion modal.
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   static public function ajaxFormDeleteFromContent($nid = "", $id = "") {
     $form = new WidgetEntityDeleteFromContentForm();
@@ -260,7 +260,7 @@ static public function ajaxFormCancel() {
   }
 
   static public function dGridPreview(&$form, $form_state) {
-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = \Drupal::service('renderer');
 
     $response = new AjaxResponse();
diff --git a/src/WidgetAdmin/Form/WidgetFormAdmin.php b/src/WidgetAdmin/Form/WidgetFormAdmin.php
index 9c17540..b031840 100644
--- a/src/WidgetAdmin/Form/WidgetFormAdmin.php
+++ b/src/WidgetAdmin/Form/WidgetFormAdmin.php
@@ -3,6 +3,7 @@
 namespace Drupal\stacks\WidgetAdmin\Form;
 
 
+use Drupal\stacks\WidgetAdmin\Button\ButtonInterface;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\HtmlCommand;
 use Drupal\Core\Ajax\AlertCommand;
@@ -88,7 +89,7 @@ public function buildForm(array $form, FormStateInterface $form_state) {
 
     $buttons = $this->step->getButtons();
     foreach ($buttons as $button) {
-      /** @var \Drupal\stacks\WidgetAdmin\Button\ButtonInterface $button */
+      /** @var ButtonInterface $button */
       $form[$wrapper]['actions'][$button->getKey()] = $button->build();
 
       if ($button->ajaxify()) {
@@ -124,8 +125,8 @@ public function buildForm(array $form, FormStateInterface $form_state) {
    * Ajax callback to load new step.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @param FormStateInterface $form_state
+   * @return AjaxResponse
    */
   static public function loadStep(array &$form, FormStateInterface $form_state) {
 
@@ -244,7 +245,7 @@ public function submitForm(array &$form, FormStateInterface $form_state) {
   /**
    * Submit handler for last step of form.
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitValues(array &$form, FormStateInterface $form_state) {
     // Handle Inline Entity Form...create Widget Entity
@@ -319,7 +320,7 @@ public function submitValues(array &$form, FormStateInterface $form_state) {
   /**
    * Submit handler for last step of form with existing widgets
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitValuesExisting(array &$form, FormStateInterface $form_state) {
 
diff --git a/src/WidgetAdmin/Manager/StepManager.php b/src/WidgetAdmin/Manager/StepManager.php
index da9ad93..5a80f9e 100644
--- a/src/WidgetAdmin/Manager/StepManager.php
+++ b/src/WidgetAdmin/Manager/StepManager.php
@@ -22,7 +22,7 @@ public function __construct() {
 
   /**
    * Add a step to the steps property.
-   * @param \Drupal\stacks\WidgetAdmin\Step\StepInterface $step
+   * @param StepInterface $step
    */
   public function addStep(StepInterface $step) {
     $this->steps[$step->getStep()] = $step;
@@ -32,7 +32,7 @@ public function addStep(StepInterface $step) {
    * Fetches a step from the steps property.
    * If it doesn't exist, create step object.
    * @param $step_id
-   * @return \Drupal\stacks\WidgetAdmin\Step\StepInterface
+   * @return StepInterface
    */
   public function getStep($step_id) {
     if (isset($this->steps[$step_id])) {
@@ -100,7 +100,7 @@ public function loadStepClass($step_id) {
     }
     else {
 
-      /** @var \Drupal\stacks\WidgetAdmin\Step\StepInterface $step */
+      /** @var StepInterface $step */
       $class = StepsEnum::map($step_id);
       $step = new $class($this);
 
diff --git a/src/WidgetAdmin/Step/BaseStep.php b/src/WidgetAdmin/Step/BaseStep.php
index 3c5b660..4a7ac66 100644
--- a/src/WidgetAdmin/Step/BaseStep.php
+++ b/src/WidgetAdmin/Step/BaseStep.php
@@ -19,7 +19,7 @@ abstract class BaseStep implements StepInterface {
   /**
    * BaseStep constructor.
    *
-   * @param \Drupal\stacks\WidgetAdmin\Manager\StepManager $stepManager
+   * @param StepManager $stepManager
    */
   public function __construct(StepManager $stepManager) {
     $this->stepManager = $stepManager;
diff --git a/src/WidgetAdmin/Step/StepOne.php b/src/WidgetAdmin/Step/StepOne.php
index 32708b7..a8ed6d4 100644
--- a/src/WidgetAdmin/Step/StepOne.php
+++ b/src/WidgetAdmin/Step/StepOne.php
@@ -471,7 +471,7 @@ public function radiosTemplate($templates_by_widget_type = FALSE) {
                 'height' => 234,
                 'title' => '',
                 'alt' => '',
-                'src' => '/' . drupal_get_path('module', 'stacks') . '/images/no-preview-img.png',
+                'src' => '/' . \Drupal::service('extension.list.module')->getPath('stacks') . '/images/no-preview-img.png',
               ],
             ],
           ];
@@ -564,7 +564,7 @@ public function radiosTheme() {
                   'width' => 100,
                   'title' => $option_value,
                   'alt' => $option_value,
-                  'src' => '/' . drupal_get_path('module', 'stacks') . '/images/no-preview-img.png',
+                  'src' => '/' . \Drupal::service('extension.list.module')->getPath('stacks') . '/images/no-preview-img.png',
                 ],
               ],
             ];
diff --git a/src/WidgetEntityAccessControlHandler.php b/src/WidgetEntityAccessControlHandler.php
index c9e7242..d5f5ab0 100644
--- a/src/WidgetEntityAccessControlHandler.php
+++ b/src/WidgetEntityAccessControlHandler.php
@@ -18,7 +18,7 @@ class WidgetEntityAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\stacks\WidgetEntityInterface $entity */
+    /** @var WidgetEntityInterface $entity */
     switch ($operation) {
       case 'view':
         if (!$entity->isPublished()) {
diff --git a/src/WidgetEntityHtmlRouteProvider.php b/src/WidgetEntityHtmlRouteProvider.php
index 58425f7..fecdaaf 100644
--- a/src/WidgetEntityHtmlRouteProvider.php
+++ b/src/WidgetEntityHtmlRouteProvider.php
@@ -42,10 +42,10 @@ public function getRoutes(EntityTypeInterface $entity_type) {
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ -67,10 +67,10 @@ protected function getCollectionRoute(EntityTypeInterface $entity_type) {
   /**
    * Gets the add-form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddFormRoute(EntityTypeInterface $entity_type) {
@@ -102,10 +102,10 @@ protected function getAddFormRoute(EntityTypeInterface $entity_type) {
   /**
    * Gets the add page route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddPageRoute(EntityTypeInterface $entity_type) {
@@ -124,10 +124,10 @@ protected function getAddPageRoute(EntityTypeInterface $entity_type) {
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/WidgetEntityTypeHtmlRouteProvider.php b/src/WidgetEntityTypeHtmlRouteProvider.php
index c6841e1..1845105 100644
--- a/src/WidgetEntityTypeHtmlRouteProvider.php
+++ b/src/WidgetEntityTypeHtmlRouteProvider.php
@@ -36,10 +36,10 @@ public function getRoutes(EntityTypeInterface $entity_type) {
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ -63,10 +63,10 @@ protected function getCollectionRoute(EntityTypeInterface $entity_type) {
   /**
    * Gets the add-form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/WidgetExtendEntityAccessControlHandler.php b/src/WidgetExtendEntityAccessControlHandler.php
index 3632b91..2df0a96 100644
--- a/src/WidgetExtendEntityAccessControlHandler.php
+++ b/src/WidgetExtendEntityAccessControlHandler.php
@@ -18,7 +18,7 @@ class WidgetExtendEntityAccessControlHandler extends EntityAccessControlHandler
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\stacks\WidgetExtendEntityInterface $entity */
+    /** @var WidgetExtendEntityInterface $entity */
     switch ($operation) {
       case 'view':
         return AccessResult::allowedIfHasPermission($account, 'view published Widget Extend entities');
diff --git a/src/WidgetExtendEntityHtmlRouteProvider.php b/src/WidgetExtendEntityHtmlRouteProvider.php
index 74aa111..444cdb5 100644
--- a/src/WidgetExtendEntityHtmlRouteProvider.php
+++ b/src/WidgetExtendEntityHtmlRouteProvider.php
@@ -43,10 +43,10 @@ public function getRoutes(EntityTypeInterface $entity_type) {
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ -68,10 +68,10 @@ protected function getCollectionRoute(EntityTypeInterface $entity_type) {
   /**
    * Gets the add-form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddFormRoute(EntityTypeInterface $entity_type) {
@@ -104,10 +104,10 @@ protected function getAddFormRoute(EntityTypeInterface $entity_type) {
   /**
    * Gets the add page route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddPageRoute(EntityTypeInterface $entity_type) {
@@ -126,10 +126,10 @@ protected function getAddPageRoute(EntityTypeInterface $entity_type) {
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/WidgetExtendEntityTypeHtmlRouteProvider.php b/src/WidgetExtendEntityTypeHtmlRouteProvider.php
index 56f58be..ba9276a 100644
--- a/src/WidgetExtendEntityTypeHtmlRouteProvider.php
+++ b/src/WidgetExtendEntityTypeHtmlRouteProvider.php
@@ -35,10 +35,10 @@ public function getRoutes(EntityTypeInterface $entity_type) {
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ -62,10 +62,10 @@ protected function getCollectionRoute(EntityTypeInterface $entity_type) {
   /**
    * Gets the add-form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/WidgetInstanceEntityAccessControlHandler.php b/src/WidgetInstanceEntityAccessControlHandler.php
index 29a8f9a..256c9f9 100644
--- a/src/WidgetInstanceEntityAccessControlHandler.php
+++ b/src/WidgetInstanceEntityAccessControlHandler.php
@@ -18,7 +18,7 @@ class WidgetInstanceEntityAccessControlHandler extends EntityAccessControlHandle
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\stacks\WidgetInstanceEntityInterface $entity */
+    /** @var WidgetInstanceEntityInterface $entity */
     switch ($operation) {
       case 'view':
         return AccessResult::allowedIfHasPermission($account, 'view published widget instance entity entities');
diff --git a/src/WidgetInstanceEntityHtmlRouteProvider.php b/src/WidgetInstanceEntityHtmlRouteProvider.php
index 9b56525..9ceb021 100644
--- a/src/WidgetInstanceEntityHtmlRouteProvider.php
+++ b/src/WidgetInstanceEntityHtmlRouteProvider.php
@@ -40,10 +40,10 @@ public function getRoutes(EntityTypeInterface $entity_type) {
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ -65,10 +65,10 @@ protected function getCollectionRoute(EntityTypeInterface $entity_type) {
   /**
    * Gets the add-form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddFormRoute(EntityTypeInterface $entity_type) {
@@ -102,10 +102,10 @@ protected function getAddFormRoute(EntityTypeInterface $entity_type) {
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
diff --git a/stacks.install b/stacks.install
index 278ae55..c995de9 100644
--- a/stacks.install
+++ b/stacks.install
@@ -98,7 +98,7 @@ function stacks_update_8003(&$sandbox) {
 
   $widget_instance_entities = WidgetInstanceEntity::loadMultiple($entities_id);
 
-  /** @var \Drupal\stacks\Entity\WidgetInstanceEntity $widget_instance_entity */
+  /** @var WidgetInstanceEntity $widget_instance_entity */
   foreach ($widget_instance_entities as $widget_instance_entity) {
     $widget_instance_entity->setStatus(TRUE)->save();
 
