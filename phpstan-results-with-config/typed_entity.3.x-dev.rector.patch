diff --git a/modules/typed_entity_example/src/TypedRepositories/ArticleRepository.php b/modules/typed_entity_example/src/TypedRepositories/ArticleRepository.php
index c8a3403..260eeb6 100644
--- a/modules/typed_entity_example/src/TypedRepositories/ArticleRepository.php
+++ b/modules/typed_entity_example/src/TypedRepositories/ArticleRepository.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\typed_entity_example\TypedRepositories;
 
+use Drupal\typed_entity_example\WrappedEntities\Article;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\Query\ConditionInterface;
 use Drupal\typed_entity\TypedRepositories\TypedEntityRepositoryBase;
@@ -38,10 +40,10 @@ final class ArticleRepository extends TypedEntityRepositoryBase {
    * @param string[] $tags
    *   The tags to search for.
    *
-   * @return \Drupal\typed_entity_example\WrappedEntities\Article[]
+   * @return Article[]
    *   The wrapped entities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function findByTags(array $tags): array {
     $items = $this->findItemsByTags($tags);
@@ -57,7 +59,7 @@ final class ArticleRepository extends TypedEntityRepositoryBase {
    * @return array
    *   The result of the execution of the query.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   private function findItemsByTags(array $tags) {
     $query = $this->getQuery();
diff --git a/modules/typed_entity_example/src/WrappedEntities/Article.php b/modules/typed_entity_example/src/WrappedEntities/Article.php
index ae0a001..dcf44a7 100644
--- a/modules/typed_entity_example/src/WrappedEntities/Article.php
+++ b/modules/typed_entity_example/src/WrappedEntities/Article.php
@@ -18,25 +18,26 @@ final class Article extends WrappedEntityBase {
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   private $messenger;
 
   /**
    * Article constructor.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to wrap.
-   * @param \Drupal\typed_entity\RepositoryManager $repository_manager
+   * @param RepositoryManager $repository_manager
    *   The repository manager.
-   * @param \Drupal\Core\Entity\EntityViewBuilderInterface $entity_view_builder
+   * @param EntityViewBuilderInterface $entity_view_builder
    *   The view builder.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
-  public function __construct(EntityInterface $entity, RepositoryManager $repository_manager, EntityViewBuilderInterface $entity_view_builder, MessengerInterface $messenger) {
+  public function __construct(EntityInterface $entity, EntityInterface $entity, RepositoryManager $repository_manager, EntityViewBuilderInterface $entity_view_builder, MessengerInterface $messenger, private RepositoryManager $repositoryManager) {
     parent::__construct($entity, $repository_manager, $entity_view_builder);
     $this->messenger = $messenger;
+    parent::__construct($entity);
   }
 
   /**
@@ -45,7 +46,7 @@ final class Article extends WrappedEntityBase {
   public static function create(ContainerInterface $container, EntityInterface $entity) {
     $entity_view_builder = $container->get('entity_type.manager')
       ->getViewBuilder($entity->getEntityTypeId());
-    $repository_manager = $container->get(RepositoryManager::class);
+    $repository_manager = $this->repositoryManager;
     return new static(
       $entity,
       $repository_manager,
