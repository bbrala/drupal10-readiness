modules/contrib/o365/modules/o365_onedrive/src/Controller/OneDriveListController.php
modules/contrib/o365/modules/o365_onedrive/src/GetFilesAndFoldersService.php
modules/contrib/o365/modules/o365_onedrive/src/GetFilesAndFoldersServiceInterface.php
modules/contrib/o365/modules/o365_onedrive/src/Plugin/Block/PinnedFilesBlock.php
modules/contrib/o365/modules/o365_onedrive/src/Plugin/Block/RecentFilesBlock.php
modules/contrib/o365/modules/o365_onedrive/src/Plugin/Block/SharedFilesBlock.php
modules/contrib/o365/modules/o365_outlook_calendar/src/Plugin/Block/CalendarBlock.php
modules/contrib/o365/modules/o365_outlook_mail/src/Controller/MyMailController.php
modules/contrib/o365/modules/o365_outlook_mail/src/GetMailService.php
modules/contrib/o365/modules/o365_outlook_mail/src/GetMailServiceInterface.php
modules/contrib/o365/modules/o365_outlook_mail/src/Plugin/Block/LatestMailBlock.php
modules/contrib/o365/modules/o365_profile/o365_profile.module
modules/contrib/o365/modules/o365_profile/src/Plugin/Block/ProfileBlock.php
modules/contrib/o365/modules/o365_rest/src/Plugin/rest/resource/GetAccessTokenResource.php
modules/contrib/o365/modules/o365_sso/o365_sso.install
modules/contrib/o365/modules/o365_sso/o365_sso.module
modules/contrib/o365/modules/o365_sso/src/Controller/LoginCallbackController.php
modules/contrib/o365/modules/o365_sso/src/Controller/LoginController.php
modules/contrib/o365/modules/o365_sso/src/Controller/UserLoginController.php
modules/contrib/o365/modules/o365_sso_user/o365_sso_user.install
modules/contrib/o365/modules/o365_sso_user/src/EventSubscriber/UserLoginEventSubscriber.php
modules/contrib/o365/modules/o365_sso_user/src/Form/SettingsForm.php
modules/contrib/o365/o365.install
modules/contrib/o365/o365.module
modules/contrib/o365/src/AuthenticationService.php
modules/contrib/o365/src/AuthenticationServiceInterface.php
modules/contrib/o365/src/ConstantsService.php
modules/contrib/o365/src/Controller/O365ConnectorListBuilder.php
modules/contrib/o365/src/Entity/O365Connector.php
modules/contrib/o365/src/Form/ApiSettingsForm.php
modules/contrib/o365/src/Form/O365ConnectorDeleteForm.php
modules/contrib/o365/src/Form/O365ConnectorForm.php
modules/contrib/o365/src/Form/SettingsForm.php
modules/contrib/o365/src/GraphService.php
modules/contrib/o365/src/HelperService.php
modules/contrib/o365/src/O365ConnectorAccessControlHandler.php
modules/contrib/o365/src/O365ConnectorInterface.php
modules/contrib/o365/src/O365LoggerService.php
modules/contrib/o365/src/O365LoggerServiceInterface.php
modules/contrib/o365/src/Plugin/Oauth2Client/O365OAuth2Client.php

26 files with changes
=====================

1) modules/contrib/o365/src/O365LoggerServiceInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Log a message into the watchdog.
    *
-   * @param \Drupal\Core\StringTranslation\TranslatableMarkup $message
+   * @param TranslatableMarkup $message
    *   The translatable message.
    * @param string $severity
    *   The severity of the log message.
@@ @@
   /**
    * Log a debug message into the watchdog.
    *
-   * @param \Drupal\Core\StringTranslation\TranslatableMarkup $message
+   * @param TranslatableMarkup $message
    *   The translatable message.
    */
   public function debug(TranslatableMarkup $message);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/o365/src/O365LoggerService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365;

+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\Messenger\Messenger;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ @@
   /**
    * Drupal\Core\Logger\LoggerChannelFactoryInterface definition.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;

@@ @@
   /**
    * The logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * The drupal messenger.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;

@@ @@
   /**
    * Constructs a new O365LoggerService object.
    *
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The LoggerChannelFactoryInterface definition.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The Messenger definition.
    */
   public function __construct(LoggerChannelFactoryInterface $logger_factory, Messenger $messenger) {
@@ @@
   /**
    * Render a drupal message.
    *
-   * @param \Drupal\Core\StringTranslation\TranslatableMarkup $message
+   * @param TranslatableMarkup $message
    *   The message to print.
    * @param string $severity
    *   The severity of the message.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/o365/src/HelperService.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Datetime\DateFormatterInterface definition.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new HelperService object.
    *
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The DateFormatterInterface definition.
    */
   public function __construct(DateFormatterInterface $date_formatter) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/o365/src/GraphService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365;

+use Drupal\Core\TempStore\TempStoreException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
+use Microsoft\Graph\Http\GraphResponse;
 use Microsoft\Graph\Exception\GraphException;
 use Microsoft\Graph\Graph;

@@ @@
   /**
    * Drupal\o365\AuthenticationServiceInterface definition.
    *
-   * @var \Drupal\o365\AuthenticationServiceInterface
+   * @var AuthenticationServiceInterface
    */
   protected $authService;

@@ @@
   /**
    * The logger service.
    *
-   * @var \Drupal\o365\O365LoggerServiceInterface
+   * @var O365LoggerServiceInterface
    */
   protected $messenger;

@@ @@
   /**
    * Constructs a new GraphService object.
    *
-   * @param \Drupal\o365\AuthenticationServiceInterface $authenticationService
+   * @param AuthenticationServiceInterface $authenticationService
    *   The AuthenticationServiceInterface definition.
-   * @param \Drupal\o365\O365LoggerServiceInterface $messenger
+   * @param O365LoggerServiceInterface $messenger
    *   The O365LoggerServiceInterface definition.
    */
   public function __construct(AuthenticationServiceInterface $authenticationService, O365LoggerServiceInterface $messenger) {
@@ @@
    * @return mixed
    *   The data retrieved from the Graph API.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
    */
   public function getGraphData($endpoint, $type = 'GET', $raw = FALSE, $version = FALSE) {
     try {
@@ @@

       $graph->setAccessToken($accessToken);

-      /** @var \Microsoft\Graph\Http\GraphResponse $request */
+      /** @var GraphResponse $request */
       $request = $graph->createRequest($type, $endpoint)->execute();

       if ($raw) {
@@ @@
    * @return mixed
    *   The data retrieved from the Graph API.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
    */
   public function sendGraphData($endpoint, $data = [], $type = 'POST', $raw = FALSE, $version = FALSE) {
     try {
@@ @@

       $graph->setAccessToken($accessToken);

-      /** @var \Microsoft\Graph\Http\GraphResponse $request */
+      /** @var GraphResponse $request */
       $request = $graph->createRequest($type, $endpoint)
         ->attachBody($data)
         ->execute();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/o365/src/Form/O365ConnectorForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365\Form;

+use Drupal\o365\O365ConnectorInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Constructs an ExampleForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entityTypeManager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
@@ @@
   public function form(array $form, FormStateInterface $form_state): array {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\o365\O365ConnectorInterface $o365_connector */
+    /** @var O365ConnectorInterface $o365_connector */
     $o365_connector = $this->entity;

     $form['label'] = [
@@ @@
    */
   public function validateForm(array &$form, FormStateInterface $form_state): void {
     if (empty($form_state->getValue('client_secret'))) {
-      /** @var \Drupal\o365\O365ConnectorInterface $o365_connector */
+      /** @var O365ConnectorInterface $o365_connector */
       $o365_connector = $this->entityTypeManager->getStorage('o365_connector')
         ->load($this->entity->id());
       $form_state->setValue('client_secret', $o365_connector->getClientSecret());
@@ @@
    * @return bool
    *   TRUE if connector exists, FALSE otherwise.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function exist(string $id): bool {
     $entity = $this->entityTypeManager->getStorage('o365_connector')->getQuery()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/o365/src/ConstantsService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365;

+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Symfony\Component\HttpFoundation\RequestStack;

@@ @@
   /**
    * The config factory interface.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The request object.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * Constructs a new ConstantsService object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory interface.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack object.
    */
   public function __construct(ConfigFactoryInterface $configFactory, RequestStack $request_stack) {
@@ @@
   /**
    * Get the authorize url.
    *
-   * @param \Drupal\o365\O365ConnectorInterface $o365_connector
+   * @param O365ConnectorInterface $o365_connector
    *   The Office 365 connector entity.
    *
    * @return string
@@ @@
   /**
    * Get the token url.
    *
-   * @param \Drupal\o365\O365ConnectorInterface $o365_connector
+   * @param O365ConnectorInterface $o365_connector
    *   The Office 365 connector entity.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/o365/src/AuthenticationServiceInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365;

+use Drupal\Core\TempStore\TempStoreException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
 /**
  * The AuthenticationServiceInterface interface.
  */
@@ @@
   /**
    * Redirect the user to the correct Microsoft pages for oAuth2.
    *
-   * @param \Drupal\o365\O365ConnectorInterface $o365_connector
+   * @param O365ConnectorInterface $o365_connector
    *   The Office 365 connector entity.
    */
   public function loginUser(O365ConnectorInterface $o365_connector);
@@ @@
    * @return string|bool
    *   The access token or FALSE.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
    */
   public function getAccessToken(bool $login = FALSE);

@@ @@
    *
    * @param string $code
    *   The code we got from Microsoft.
-   * @param \Drupal\o365\O365ConnectorInterface $o365_connector
+   * @param O365ConnectorInterface $o365_connector
    *   The Office 365 connector entity.
    * @param mixed $redirect
    *   Either FALSE or a url where to redirect to.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
    */
   public function setAccessToken(string $code, O365ConnectorInterface $o365_connector, $redirect);

@@ @@
   /**
    * Save the auth data from the cookie in the user session storage.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
+   * @throws TempStoreException
    */
   public function saveAuthDataFromCookie();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/o365/src/AuthenticationService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365;

+use Drupal\Core\Config\ImmutableConfig;
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\TempStore\TempStoreException;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The config factory interface.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The modules base config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $moduleConfig;

@@ @@
   /**
    * The private temp store.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStore;

@@ @@
   /**
    * A oauth provider.
    *
-   * @var \League\OAuth2\Client\Provider\GenericProvider
+   * @var GenericProvider
    */
   protected $oauthClient;

@@ @@
   /**
    * The ConstantsService implementation.
    *
-   * @var \Drupal\o365\ConstantsService
+   * @var ConstantsService
    */
   protected $constants;

@@ @@
   /**
    * The logger service.
    *
-   * @var \Drupal\o365\O365LoggerServiceInterface
+   * @var O365LoggerServiceInterface
    */
   protected $loggerService;

@@ @@
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new AuthenticationService object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory interface.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $tempStoreFactory
+   * @param PrivateTempStoreFactory $tempStoreFactory
    *   The private store factory.
-   * @param \Drupal\o365\ConstantsService $constantsService
+   * @param ConstantsService $constantsService
    *   The constants service from the o365 module.
-   * @param \Drupal\o365\O365LoggerServiceInterface $loggerService
+   * @param O365LoggerServiceInterface $loggerService
    *   The logger service from the o365 module.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(
@@ @@
    * @return string
    *   The new access token.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
    */
   private function refreshToken(string $refreshToken, string $connector_id): string {
-    /** @var \Drupal\o365\O365ConnectorInterface $o365_connector */
+    /** @var O365ConnectorInterface $o365_connector */
     $o365_connector = $this->entityTypeManager->getStorage('o365_connector')->load($connector_id);
     $this->generateProvider($o365_connector);

@@ @@
   /**
    * Generate a basic oAuth2 provider.
    *
-   * @param \Drupal\o365\O365ConnectorInterface $o365_connector
+   * @param O365ConnectorInterface $o365_connector
    *   The Office 365 connector entity.
    */
   private function generateProvider(O365ConnectorInterface $o365_connector): void {
@@ @@
   /**
    * Save the auth data to the temp store.
    *
-   * @param \League\OAuth2\Client\Token\AccessTokenInterface $accessToken
+   * @param AccessTokenInterface $accessToken
    *   The access token object.
-   * @param \Drupal\o365\O365ConnectorInterface $o365_connector
+   * @param O365ConnectorInterface $o365_connector
    *   The Office 365 connector entity.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
+   * @throws TempStoreException
    */
   private function saveAuthData(AccessTokenInterface $accessToken, O365ConnectorInterface $o365_connector): void {
     $this->authValues = [
@@ @@
    * @param mixed $value
    *   The value.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
+   * @throws TempStoreException
    */
   private function saveDataToTempStore(string $name, $value): void {
     $tempstore = $this->tempStore->get($this->constants->getUserTempStoreName());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/o365/modules/o365_sso_user/src/EventSubscriber/UserLoginEventSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_sso_user\EventSubscriber;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\TempStore\TempStoreException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\externalauth\Event\ExternalAuthEvents;
@@ @@
   /**
    * Drupal\Core\Config\ImmutableConfig definition.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * Drupal\o365\GraphService definition.
    *
-   * @var \Drupal\o365\GraphService
+   * @var GraphService
    */
   protected $graphService;

@@ @@
   /**
    * UserLoginEventSubscriber constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\o365\GraphService $o365_graph
+   * @param GraphService $o365_graph
    *   The graph service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, GraphService $o365_graph) {
@@ @@
   /**
    * Update a users data with data dfrom the Graph API.
    *
-   * @param \Drupal\externalauth\Event\ExternalAuthLoginEvent $event
+   * @param ExternalAuthLoginEvent $event
    *   The ExternalAuthLoginEvent event containing the user.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
+   * @throws EntityStorageException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
    */
   public function updateUserData(ExternalAuthLoginEvent $event) {
     // Only do this when we want to use graph data.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/o365/modules/o365_sso/src/Controller/UserLoginController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_sso\Controller;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\TempStore\TempStoreException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\externalauth\ExternalAuth;
@@ @@
   /**
    * Drupal\o365\GraphService definition.
    *
-   * @var \Drupal\o365\GraphService
+   * @var GraphService
    */
   protected $graphService;

@@ @@
   /**
    * Drupal\o365\AuthenticationService definition.
    *
-   * @var \Drupal\o365\AuthenticationService
+   * @var AuthenticationService
    */
   protected $authenticationService;

@@ @@
   /**
    * The external auth service.
    *
-   * @var \Drupal\externalauth\ExternalAuth
+   * @var ExternalAuth
    */
   protected $externalAuth;

@@ @@
   /**
    * Constructs a new UserLoginController object.
    *
-   * @param \Drupal\o365\GraphService $o365_graph
+   * @param GraphService $o365_graph
    *   The GraphService definition.
-   * @param \Drupal\o365\AuthenticationService $authentication_service
+   * @param AuthenticationService $authentication_service
    *   The AuthenticationService definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The EntityTypeManager definition.
-   * @param \Drupal\externalauth\ExternalAuth $external_auth
+   * @param ExternalAuth $external_auth
    *   The external auth.
    */
   public function __construct(
@@ @@
   /**
    * Login a user.
    *
-   * @param \Drupal\o365\O365ConnectorInterface $o365_connector
+   * @param O365ConnectorInterface $o365_connector
    *   The Office 365 connector entity.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The redirect to the set URL in config.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
    */
   public function login(O365ConnectorInterface $o365_connector) {
     // Enable cookie auth.
@@ @@
     }

     if ($account) {
-      /** @var \Drupal\user\UserInterface $account */
+      /** @var UserInterface $account */
       $this->externalAuth->linkExistingAccount($o365_id, 'o365_sso', $account);
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/o365/modules/o365_sso/src/Controller/LoginController.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The authentication service, used to handle all kinds of auth stuff.
    *
-   * @var \Drupal\o365\AuthenticationService
+   * @var AuthenticationService
    */
   protected $authenticationService;

@@ @@
   /**
    * Constructs a new LoginController object.
    *
-   * @param \Drupal\o365\AuthenticationService $authenticationService
+   * @param AuthenticationService $authenticationService
    *   The AuthenticationService definition.
    */
   public function __construct(AuthenticationService $authenticationService) {
@@ @@
   /**
    * The user login method.
    *
-   * @param \Drupal\o365\O365ConnectorInterface $o365_connector
+   * @param O365ConnectorInterface $o365_connector
    *   The Office 365 connector entity.
    *
    * @return mixed
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/o365/modules/o365_sso/src/Controller/LoginCallbackController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_sso\Controller;

+use Drupal\Core\TempStore\TempStoreException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Url;
 use Drupal\o365\AuthenticationService;
@@ @@
   /**
    * The authentication service, used to handle all kinds of auth stuff.
    *
-   * @var \Drupal\o365\AuthenticationService
+   * @var AuthenticationService
    */
   protected $authenticationService;

@@ @@
   /**
    * The o365 GraphService.
    *
-   * @var \Drupal\o365\GraphService
+   * @var GraphService
    */
   protected $graphService;

@@ @@
   /**
    * The o365 logger service.
    *
-   * @var \Drupal\o365\O365LoggerServiceInterface
+   * @var O365LoggerServiceInterface
    */
   protected $loggerService;

@@ @@
   /**
    * Constructs a new LoginController object.
    *
-   * @param \Drupal\o365\AuthenticationService $authenticationService
+   * @param AuthenticationService $authenticationService
    *   The AuthenticationService definition.
-   * @param \Drupal\o365\GraphService $graphService
+   * @param GraphService $graphService
    *   The GraphService definition.
-   * @param \Drupal\o365\O365LoggerServiceInterface $loggerService
+   * @param O365LoggerServiceInterface $loggerService
    *   The logger service from the o365 module.
    */
   public function __construct(AuthenticationService $authenticationService, GraphService $graphService, O365LoggerServiceInterface $loggerService) {
@@ @@
   /**
    * Callback for the login.
    *
-   * @param \Drupal\o365\O365ConnectorInterface $o365_connector
+   * @param O365ConnectorInterface $o365_connector
    *   The Office 365 connector entity.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
    * @return array
    *   A redirect to the set URL.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
    */
   public function callback(O365ConnectorInterface $o365_connector, Request $request): array {
     $authCode = $request->get('code');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/o365/modules/o365_sso/o365_sso.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\o365\O365ConnectorInterface;
 /**
  * @file
  * Contains o365_sso.module.
@@ @@
  */
 function o365_sso_form_user_login_form_alter(array &$form): void {
   // Get all Office 365 connectors.
-  /** @var \Drupal\o365\O365ConnectorInterface[] $o365_connectors */
+  /** @var O365ConnectorInterface[] $o365_connectors */
   $o365_connectors = \Drupal::entityTypeManager()->getStorage('o365_connector')
     ->loadByProperties([
       'status' => TRUE,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


14) modules/contrib/o365/modules/o365_rest/src/Plugin/rest/resource/GetAccessTokenResource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_rest\Plugin\rest\resource;

+use Drupal\o365\AuthenticationService;
+use Drupal\Core\TempStore\TempStoreException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
 use Drupal\rest\Plugin\ResourceBase;
 use Drupal\rest\ResourceResponse;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The authentication service, used to handle all kinds of auth stuff.
    *
-   * @var \Drupal\o365\AuthenticationService
+   * @var AuthenticationService
    */
   protected $authenticationService;

@@ @@
      * @throws \Symfony\Component\HttpKernel\Exception\HttpException
      *   Throws exception expected.
      */
-
-  /**
-   * Return the current users access token.
-   *
-   * @return \Drupal\rest\ResourceResponse
-   *   The HTTP response object.
-   *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
-   */
+    /**
+     * Return the current users access token.
+     *
+     * @return ResourceResponse
+     *   The HTTP response object.
+     *
+     * @throws TempStoreException
+     * @throws IdentityProviderException
+     */
     public function get() {
         return new ResourceResponse($this->authenticationService->getAccessToken(), 200);
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/o365/modules/o365_profile/src/Plugin/Block/ProfileBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_profile\Plugin\Block;

+use Drupal\Core\TempStore\TempStoreException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * Drupal\o365\GraphService definition.
    *
-   * @var \Drupal\o365\GraphService
+   * @var GraphService
    */
   protected $o365Graph;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\o365\GraphService $o365_graph
+   * @param GraphService $o365_graph
    *   The GraphService definition.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, GraphService $o365_graph) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
    */
   public function build() {
     $userData = $this->o365Graph->getGraphData('/me');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/o365/modules/o365_outlook_mail/src/Plugin/Block/LatestMailBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_outlook_mail\Plugin\Block;

+use Drupal\Core\TempStore\TempStoreException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
+use Microsoft\Graph\Exception\GraphException;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\o365_outlook_mail\GetMailServiceInterface;
@@ @@
   /**
    * The mail service interface.
    *
-   * @var \Drupal\o365_outlook_mail\GetMailServiceInterface
+   * @var GetMailServiceInterface
    */
   protected $getMailService;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\o365_outlook_mail\GetMailServiceInterface $getMailService
+   * @param GetMailServiceInterface $getMailService
    *   The get mail service definition.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, GetMailServiceInterface $getMailService) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
-   * @throws \Microsoft\Graph\Exception\GraphException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
+   * @throws GraphException
    */
   public function build() {
     return $this->getMails();
@@ @@
    * @return mixed
    *   The item list or FALSE.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
-   * @throws \Microsoft\Graph\Exception\GraphException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
+   * @throws GraphException
    */
   private function getMails($count = 10) {
     $mailData = $this->getMailService->getMail($count);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/o365/modules/o365_outlook_mail/src/GetMailServiceInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_outlook_mail;

+use Drupal\Core\TempStore\TempStoreException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
+use Microsoft\Graph\Exception\GraphException;
 /**
  * Interface GetMailServiceInterface.
  */
@@ @@
    * @return array|bool
    *   The list of mails or FALSE if no mails.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
-   * @throws \Microsoft\Graph\Exception\GraphException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
+   * @throws GraphException
    */
   public function getMail($limit = 10, array $fields = []);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


18) modules/contrib/o365/modules/o365_outlook_mail/src/GetMailService.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\o365\GraphService definition.
    *
-   * @var \Drupal\o365\GraphService
+   * @var GraphService
    */
   protected $o365Graph;

@@ @@
   /**
    * Constructs a new GetMailService object.
    *
-   * @param \Drupal\o365\GraphService $o365_graph
+   * @param GraphService $o365_graph
    *   The GraphService definition.
    */
   public function __construct(GraphService $o365_graph) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


19) modules/contrib/o365/modules/o365_outlook_mail/src/Controller/MyMailController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_outlook_mail\Controller;

+use Drupal\Core\TempStore\TempStoreException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
+use Microsoft\Graph\Exception\GraphException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Link;
 use Drupal\Core\Url;
@@ @@
   /**
    * Drupal\o365_outlook_mail\GetMailServiceInterface definition.
    *
-   * @var \Drupal\o365_outlook_mail\GetMailServiceInterface
+   * @var GetMailServiceInterface
    */
   protected $getMailService;

@@ @@
   /**
    * The o365 helper service with handy methods.
    *
-   * @var \Drupal\o365\HelperService
+   * @var HelperService
    */
   protected $helperService;

@@ @@
   /**
    * Constructs a new MyMailController object.
    *
-   * @param \Drupal\o365_outlook_mail\GetMailServiceInterface $getMailService
+   * @param GetMailServiceInterface $getMailService
    *   The GetMailServiceInterface definition.
-   * @param \Drupal\o365\HelperService $helperService
+   * @param HelperService $helperService
    * The HelperService definition.
    */
   public function __construct(GetMailServiceInterface $getMailService, HelperService $helperService) {
@@ @@
    * @return array
    *   The render array with the list of mails.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
-   * @throws \Microsoft\Graph\Exception\GraphException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
+   * @throws GraphException
    * @throws \Exception
    */
   public function getMail() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/o365/modules/o365_outlook_calendar/src/Plugin/Block/CalendarBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_outlook_calendar\Plugin\Block;

+use Drupal\Core\TempStore\TempStoreException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Datetime\DateFormatter;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * Drupal\o365\GraphService definition.
    *
-   * @var \Drupal\o365\GraphService
+   * @var GraphService
    */
   protected $o365Graph;

@@ @@
   /**
    * Drupal\o365\HelperService definition.
    *
-   * @var \Drupal\o365\HelperService
+   * @var HelperService
    */
   protected $helperService;

@@ @@
   /**
    * Drupal\Core\Datetime\DateFormatter definition.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\o365\GraphService $o365_graph
+   * @param GraphService $o365_graph
    *   The GraphService definition.
-   * @param \Drupal\o365\HelperService $helperService
+   * @param HelperService $helperService
    *   The HelperService definition.
-   * @param \Drupal\Core\Datetime\DateFormatter $dateFormatter
+   * @param DateFormatter $dateFormatter
    *   The DateFormatter definition.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, GraphService $o365_graph, HelperService $helperService, DateFormatter $dateFormatter) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
    * @throws \Exception
    */
   public function build() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/o365/modules/o365_onedrive/src/Plugin/Block/SharedFilesBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_onedrive\Plugin\Block;

+use Drupal\Core\TempStore\TempStoreException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
+use Microsoft\Graph\Exception\GraphException;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * Drupal\o365_onedrive\GetFilesAndFoldersServiceInterface definition.
    *
-   * @var \Drupal\o365_onedrive\GetFilesAndFoldersServiceInterface
+   * @var GetFilesAndFoldersServiceInterface
    */
   protected $getFilesAndFoldersService;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\o365_onedrive\GetFilesAndFoldersServiceInterface $o365_onedrive_get_files
+   * @param GetFilesAndFoldersServiceInterface $o365_onedrive_get_files
    *   The GetFilesAndFoldersServiceInterface definition.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, GetFilesAndFoldersServiceInterface $o365_onedrive_get_files) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
-   * @throws \Microsoft\Graph\Exception\GraphException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
+   * @throws GraphException
    */
   public function build() {
     return $this->getFilesAndFoldersService->listSharedFilesAndFolders();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/o365/modules/o365_onedrive/src/Plugin/Block/RecentFilesBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_onedrive\Plugin\Block;

+use Drupal\Core\TempStore\TempStoreException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
+use Microsoft\Graph\Exception\GraphException;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * Drupal\o365_onedrive\GetFilesAndFoldersServiceInterface definition.
    *
-   * @var \Drupal\o365_onedrive\GetFilesAndFoldersServiceInterface
+   * @var GetFilesAndFoldersServiceInterface
    */
   protected $getFilesAndFoldersService;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\o365_onedrive\GetFilesAndFoldersServiceInterface $o365_onedrive_get_files
+   * @param GetFilesAndFoldersServiceInterface $o365_onedrive_get_files
    *   The GetFilesAndFoldersServiceInterface definition.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, GetFilesAndFoldersServiceInterface $o365_onedrive_get_files) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
-   * @throws \Microsoft\Graph\Exception\GraphException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
+   * @throws GraphException
    */
   public function build() {
     return $this->getFilesAndFoldersService->listSpecialFilesAndFolders('recent');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/o365/modules/o365_onedrive/src/Plugin/Block/PinnedFilesBlock.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\o365_onedrive\GetFilesAndFoldersServiceInterface definition.
    *
-   * @var \Drupal\o365_onedrive\GetFilesAndFoldersServiceInterface
+   * @var GetFilesAndFoldersServiceInterface
    */
   protected $o365OnedriveGetFiles;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\o365_onedrive\GetFilesAndFoldersServiceInterface $o365_onedrive_get_files
+   * @param GetFilesAndFoldersServiceInterface $o365_onedrive_get_files
    *   The GetFilesAndFoldersServiceInterface definition.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, GetFilesAndFoldersServiceInterface $o365_onedrive_get_files) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/o365/modules/o365_onedrive/src/GetFilesAndFoldersServiceInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_onedrive;

+use Drupal\Core\TempStore\TempStoreException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
+use Microsoft\Graph\Exception\GraphException;
 /**
  * Interface GetFilesAndFoldersServiceInterface.
  */
@@ @@
    * @return mixed
    *   The list of files and folders.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
-   * @throws \Microsoft\Graph\Exception\GraphException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
+   * @throws GraphException
    */
   public function listFilesAndFolders($folder = FALSE);

@@ @@
    *
    * @return mixed
    */
-
   /**
    * List all the shared files and folders.
    *
@@ @@
    * @return array|mixed
    *   The list of files and folders.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
-   * @throws \Microsoft\Graph\Exception\GraphException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
+   * @throws GraphException
    */
   public function listSharedFilesAndFolders($limit = 10);

@@ @@
    * @return array|mixed
    *   The list of files and folders.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
-   * @throws \Microsoft\Graph\Exception\GraphException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
+   * @throws GraphException
    */
   public function listSpecialFilesAndFolders($type);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


25) modules/contrib/o365/modules/o365_onedrive/src/GetFilesAndFoldersService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_onedrive;

+use Drupal\Core\TempStore\TempStoreException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
 use Drupal\Core\Link;
 use Drupal\Core\Url;
 use Drupal\o365\GraphService;
@@ @@
   /**
    * Drupal\o365\GraphService definition.
    *
-   * @var \Drupal\o365\GraphService
+   * @var GraphService
    */
   protected $graphService;

@@ @@
   /**
    * Constructs a new GetFilesAndFoldersService object.
    *
-   * @param \Drupal\o365\GraphService $o365_graph
+   * @param GraphService $o365_graph
    *   The GraphService definition.
    */
   public function __construct(GraphService $o365_graph) {
@@ @@
    * @param string $endPoint
    *   The endpoint we want the content from.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
    */
   private function getDrive($endPoint) {
     $this->drive = $this->graphService->getGraphData($endPoint);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


26) modules/contrib/o365/modules/o365_onedrive/src/Controller/OneDriveListController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_onedrive\Controller;

+use Drupal\Core\TempStore\TempStoreException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
+use Microsoft\Graph\Exception\GraphException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\o365_onedrive\GetFilesAndFoldersServiceInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The get files and folders service.
    *
-   * @var \Drupal\o365_onedrive\GetFilesAndFoldersServiceInterface
+   * @var GetFilesAndFoldersServiceInterface
    */
   protected $getFilesAndFoldersService;

@@ @@
   /**
    * Constructs a new OneDriveListController object.
    *
-   * @param \Drupal\o365_onedrive\GetFilesAndFoldersServiceInterface $getFilesAndFoldersService
+   * @param GetFilesAndFoldersServiceInterface $getFilesAndFoldersService
    *   The GetFilesAndFoldersServiceInterface definition.
    */
   public function __construct(GetFilesAndFoldersServiceInterface $getFilesAndFoldersService) {
@@ @@
    * @return mixed
    *   The list of files and folders.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
-   * @throws \Microsoft\Graph\Exception\GraphException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
+   * @throws GraphException
    */
   public function listFiles($folder = FALSE) {
     return $this->getFilesAndFoldersService->listFilesAndFolders($folder);
@@ @@
    * @return array|mixed
    *   The list of files and folders.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
-   * @throws \Microsoft\Graph\Exception\GraphException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
+   * @throws GraphException
    */
   public function listSharedFiles() {
     return $this->getFilesAndFoldersService->listSharedFilesAndFolders();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 26 files have been changed by Rector                                      

