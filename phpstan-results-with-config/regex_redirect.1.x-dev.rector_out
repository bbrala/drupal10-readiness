modules/contrib/regex_redirect/regex_redirect.install
modules/contrib/regex_redirect/regex_redirect.module
modules/contrib/regex_redirect/src/Entity/RegexRedirect.php
modules/contrib/regex_redirect/src/EventSubscriber/RegexRedirectRequestSubscriber.php
modules/contrib/regex_redirect/src/Form/RegexRedirectDeleteForm.php
modules/contrib/regex_redirect/src/Form/RegexRedirectForm.php
modules/contrib/regex_redirect/src/Form/RegexRedirectSettingsForm.php
modules/contrib/regex_redirect/src/Plugin/Field/FieldFormatter/RegexRedirectSourceFormatter.php
modules/contrib/regex_redirect/src/Plugin/Field/FieldType/RegexRedirectSourceItem.php
modules/contrib/regex_redirect/src/Plugin/Field/FieldWidget/RegexRedirectSourceWidget.php
modules/contrib/regex_redirect/src/RegexRedirectRepository.php
modules/contrib/regex_redirect/src/RegexRedirectStorageSchema.php
modules/contrib/regex_redirect/tests/src/Unit/RegexRedirectRepositoryTest.php

7 files with changes
====================

1) modules/contrib/regex_redirect/tests/src/Unit/RegexRedirectRepositoryTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\regex_redirect\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
+use Drupal\Core\TypedData\Exception\MissingDataException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Database\Connection;
@@ @@
  */
 class RegexRedirectRepositoryTest extends UnitTestCase {

+  use ProphecyTrait;
   use StringTranslationTrait;

   /**
    * The mock container.
    *
-   * @var \Drupal\Core\DependencyInjection\ContainerBuilder
+   * @var ContainerBuilder
    */
   protected $container;

@@ @@
   /**
    * The entity type manager ObjectProphecy.
    *
-   * @var \Prophecy\Prophecy\ObjectProphecy|EntityTypeManagerInterface
+   * @var ObjectProphecy|EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The regex redirect entity ObjectProphecy.
    *
-   * @var \Prophecy\Prophecy\ObjectProphecy|RegexRedirect
+   * @var ObjectProphecy|RegexRedirect
    */
   protected $regexRedirect;

@@ @@
   /**
    * The regex redirect storage ObjectProphecy.
    *
-   * @var \Prophecy\Prophecy\ObjectProphecy|EntityStorageInterface
+   * @var ObjectProphecy|EntityStorageInterface
    */
   protected $regexRedirectStorage;

@@ @@
   /**
    * The url ObjectProphecy.
    *
-   * @var \Prophecy\Prophecy\ObjectProphecy|Url
+   * @var ObjectProphecy|Url
    */
   protected $url;

@@ @@
   /**
    * The statement ObjectProphecy.
    *
-   * @var \Prophecy\Prophecy\ObjectProphecy|StatementInterface
+   * @var ObjectProphecy|StatementInterface
    */
   protected $statement;

@@ @@
   /**
    * The database connection ObjectProphecy.
    *
-   * @var \Prophecy\Prophecy\ObjectProphecy|Connection
+   * @var ObjectProphecy|Connection
    */
   protected $connection;

@@ @@
   /**
    * The request ObjectProphecy.
    *
-   * @var \Prophecy\Prophecy\ObjectProphecy|Request
+   * @var ObjectProphecy|Request
    */
   protected $request;

@@ @@
   /**
    * The request stack ObjectProphecy.
    *
-   * @var \Prophecy\Prophecy\ObjectProphecy|RequestStack
+   * @var ObjectProphecy|RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Prophecy\Prophecy\ObjectProphecy|ConfigFactoryInterface
+   * @var ObjectProphecy|ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->container = new ContainerBuilder();
@@ @@
    * @covers ::findMatchingRedirect
    * @dataProvider getValidRedirects
    *
-   * @throws \Drupal\redirect\Exception\RedirectLoopException
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws RedirectLoopException
+   * @throws MissingDataException
+   * @throws PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
    */
   public function testWithMatchingRedirect($data) {
     $query_object = self::getQueryObject($data);
@@ @@
    * @covers ::findMatchingRedirect
    * @dataProvider getValidRecursiveRedirects
    *
-   * @throws \Drupal\redirect\Exception\RedirectLoopException
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws RedirectLoopException
+   * @throws MissingDataException
+   * @throws PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
    */
   public function testWithMatchingRecurrentRedirects($data) {
     $query_object = self::getQueryObject($data);
@@ @@
    * @covers ::findMatchingRedirect
    * @dataProvider getNonRedirects
    *
-   * @throws \Drupal\redirect\Exception\RedirectLoopException
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws RedirectLoopException
+   * @throws MissingDataException
+   * @throws PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
    */
   public function testForNonRequiredRedirect($data) {
     $this->connection->query(Argument::any())->shouldNotBeCalled();
@@ @@
   /**
    * @covers ::findMatchingRedirect
    *
-   * @throws \Drupal\redirect\Exception\RedirectLoopException
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws RedirectLoopException
+   * @throws MissingDataException
+   * @throws PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
    */
   public function testForNoRedirects() {
     $this->entityTypeManager->getStorage('regex_redirect')->shouldNotBeCalled();
@@ @@
    * @covers ::findMatchingRedirect
    * @dataProvider getRedirectsWithoutMatches
    *
-   * @throws \Drupal\redirect\Exception\RedirectLoopException
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws RedirectLoopException
+   * @throws MissingDataException
+   * @throws PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
    */
   public function testWithNoMatching($data) {
     $query_object = self::getQueryObject($data);
@@ @@
    * @covers ::findMatchingRedirect
    * @dataProvider getRedirectLoopData
    *
-   * @throws \Drupal\redirect\Exception\RedirectLoopException
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws RedirectLoopException
+   * @throws MissingDataException
+   * @throws PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
    */
   public function testForRedirectLoop($data) {
     $query_object = self::getQueryObject($data);
@@ @@
       $this->requestStack->reveal(),
       $this->configFactory->reveal()
     );
-    $this->setExpectedException(RedirectLoopException::class);
+    $this->expectException(RedirectLoopException::class);
     $regex_redirect_repository->findMatchingRedirect($data[0]['actual']);
   }

@@ @@
    * @covers ::findBySourcePath
    * @dataProvider getSourcePath
    *
-   * @throws \Drupal\redirect\Exception\RedirectLoopException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws RedirectLoopException
+   * @throws PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
    */
   public function testRetrievingRedirectsBySourcePath($data) {
     $query = $this->prophesize(QueryInterface::class);
@@ @@
   /**
    * @covers ::findBySourcePath
    *
-   * @throws \Drupal\redirect\Exception\RedirectLoopException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws RedirectLoopException
+   * @throws PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
    */
   public function testRetrievingRedirectsBySourcePathWithNoResults() {
     $query = $this->prophesize(QueryInterface::class);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * DelegateExceptionArgumentsRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/regex_redirect/src/RegexRedirectRepository.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\regex_redirect;

+use Drupal\Core\TypedData\Exception\MissingDataException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * Used to retrieve regex redirects.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The database service.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Constructs a RegexRedirectRequestSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager service.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function __construct(
@@ @@
    * @param string $language
    *   The language for which is the redirect.
    *
-   * @return \Drupal\regex_redirect\Entity\RegexRedirect|null
+   * @return RegexRedirect|null
    *   The matched redirect entity.
    *
-   * @throws \Drupal\redirect\Exception\RedirectLoopException
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws RedirectLoopException
+   * @throws MissingDataException
+   * @throws PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
    */
   public function findMatchingRedirect($source_path, $language = Language::LANGCODE_NOT_SPECIFIED) {
     $this->sourcePath = $source_path;
@@ @@
       return NULL;
     }

-    /** @var \Drupal\regex_redirect\Entity\RegexRedirect|null $redirect */
+    /** @var RegexRedirect|null $redirect */
     $redirect = $this->retrieveMatchingRedirect();
     if ($redirect === NULL) {
       return NULL;
@@ @@
    * @param string $path
    *   The parsed source path.
    *
-   * @return \Drupal\regex_redirect\Entity\RegexRedirect[]|null
+   * @return RegexRedirect[]|null
    *   Array of redirect entities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
    */
   public function findBySourcePath($path) {
     $ids = $this->entityTypeManager->getStorage('regex_redirect')->getQuery()
@@ @@
       return NULL;
     }

-    /** @var \Drupal\regex_redirect\Entity\RegexRedirect[] $regex_redirects */
+    /** @var RegexRedirect[] $regex_redirects */
     $regex_redirects = $this->loadMultiple($ids);
     return $regex_redirects;
   }
@@ @@
    * @param int $redirect_id
    *   The redirect id.
    *
-   * @return \Drupal\regex_redirect\Entity\RegexRedirect|null
+   * @return RegexRedirect|null
    *   The regex redirect entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
    */
   protected function load($redirect_id) {
-    /** @var \Drupal\regex_redirect\Entity\RegexRedirect $regex_redirect */
+    /** @var RegexRedirect $regex_redirect */
     $regex_redirect = $this->entityTypeManager->getStorage('regex_redirect')->load($redirect_id);
     return $regex_redirect;
   }
@@ @@
    * @param array $redirect_ids
    *   Redirect ids to load.
    *
-   * @return \Drupal\regex_redirect\Entity\RegexRedirect[]
+   * @return RegexRedirect[]
    *   List of redirect entities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
    */
   protected function loadMultiple(array $redirect_ids = NULL) {
-    /** @var \Drupal\regex_redirect\Entity\RegexRedirect[] $regex_redirects */
+    /** @var RegexRedirect[] $regex_redirects */
     $regex_redirects = $this->entityTypeManager->getStorage('regex_redirect')->loadMultiple($redirect_ids);
     return $regex_redirects;
   }
@@ @@
   /**
    * Helper function to find regex redirects.
    *
-   * @param \Drupal\regex_redirect\Entity\RegexRedirect $redirect
+   * @param RegexRedirect $redirect
    *   The redirect object.
    * @param string $language
    *   The language to use.
    *
-   * @return \Drupal\regex_redirect\Entity\RegexRedirect|null
+   * @return RegexRedirect|null
    *   The matched redirect entity.
    *
-   * @throws \Drupal\redirect\Exception\RedirectLoopException
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws RedirectLoopException
+   * @throws MissingDataException
+   * @throws PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
    */
   protected function findRedirectRecursively(RegexRedirect $redirect, $language) {
     $uri = $redirect->getRedirectUrl();
@@ @@
   /**
    * Retrieve the redirect matching the source path.
    *
-   * @return \Drupal\regex_redirect\Entity\RegexRedirect|null
+   * @return RegexRedirect|null
    *   The regex redirect.
    *
-   * @throws \Drupal\redirect\Exception\RedirectLoopException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws RedirectLoopException
+   * @throws PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
    */
   protected function retrieveMatchingRedirect() {
     // Load all regex redirects by source path. A direct query is used to
     // improve performance.
-    /** @var \Drupal\regex_redirect\Entity\RegexRedirect[] $regex_redirects */
+    /** @var RegexRedirect[] $regex_redirects */
     $regex_redirects = $this->connection->query('SELECT rid, regex_redirect_source FROM {regex_redirect}')->fetchAll();
     if (empty($regex_redirects)) {
       return NULL;
@@ @@
    * @param int $redirect_id
    *   The redirect id.
    *
-   * @throws \Drupal\redirect\Exception\RedirectLoopException
+   * @throws RedirectLoopException
    */
   protected function dealWithRedirectLoop($redirect_id) {
     // Check if this is a loop.
@@ @@
   /**
    * Replace the regex in the destination url with actual values.
    *
-   * @param \Drupal\regex_redirect\Entity\RegexRedirect $redirect
+   * @param RegexRedirect $redirect
    *   The redirect object.
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    */
   protected function replaceRegexWithActualUrl(RegexRedirect $redirect) {
     // Replaced all the named capture names in the redirect with the
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/regex_redirect/src/Plugin/Field/FieldWidget/RegexRedirectSourceWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\regex_redirect\Plugin\Field\FieldWidget;

+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\Core\Entity\Exception\UndefinedLinkTemplateException;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemListInterface;
@@ @@
   /**
    * The router service.
    *
-   * @var \Symfony\Component\Routing\RouterInterface
+   * @var RouterInterface
    */
   protected $router;

@@ @@
   /**
    * The regex redirect repository.
    *
-   * @var \Drupal\regex_redirect\RegexRedirectRepository
+   * @var RegexRedirectRepository
    */
   protected $repository;

@@ @@
    *   The plugin_id for the widget.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the widget is associated.
    * @param array $settings
    *   The widget settings.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Symfony\Component\Routing\RouterInterface $router
+   * @param RouterInterface $router
    *   The router service.
-   * @param \Drupal\regex_redirect\RegexRedirectRepository $repository
+   * @param RegexRedirectRepository $repository
    *   The regex redirect repository.
    */
   public function __construct(
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
-   * @throws \Drupal\Core\Entity\Exception\UndefinedLinkTemplateException
+   * @throws PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws EntityMalformedException
+   * @throws UndefinedLinkTemplateException
    */
   public function formElement(FieldItemListInterface $items, $delta, array $element, array &$form, FormStateInterface $form_state) {
     $default_url_value = $items[$delta]->path;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/regex_redirect/src/Form/RegexRedirectForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\regex_redirect\Form;

+use Drupal\Core\TypedData\Exception\MissingDataException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\Core\Entity\Exception\UndefinedLinkTemplateException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    * @throws MatchingRouteNotFoundException
    */
   protected function prepareEntity() {
-    /** @var \Drupal\regex_redirect\Entity\RegexRedirect $redirect */
+    /** @var RegexRedirect $redirect */
     $redirect = $this->entity;

     if ($redirect->isNew()) {
@@ @@
    * {@inheritdoc}
    */
   public function form(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\regex_redirect\Entity\RegexRedirect $redirect */
+    /** @var RegexRedirect $redirect */
     $redirect = $this->entity;

     if (!$redirect->isNew()) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
-   * @throws \Drupal\Core\Entity\Exception\UndefinedLinkTemplateException
+   * @throws PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws EntityMalformedException
+   * @throws UndefinedLinkTemplateException
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
     // No validation on queries because no queries were specified as necessary
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\regex_redirect\Entity\RegexRedirect $redirect */
+    /** @var RegexRedirect $redirect */
     $redirect = $this->entity;

     $redirect->setLanguage($form['langcode']['#value']);
@@ @@
   /**
    * Set the default options on a new regex redirect entity.
    *
-   * @param \Drupal\regex_redirect\Entity\RegexRedirect $redirect
+   * @param RegexRedirect $redirect
    *   The regex redirect entity.
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    * @throws MatchingRouteNotFoundException
    */
   protected function setDefaultOptions(RegexRedirect $redirect) {
@@ @@
   /**
    * Do some basic form validation.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $source_path
    *   The source path.
@@ @@
   /**
    * Validate the regex pattern.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $source_path
    *   The source path.
@@ @@
   /**
    * Check if source has been blacklisted in configuration.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $source_path
    *   The source path.
@@ @@
   /**
    * Check for duplicates.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $source_path
    *   The source path.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
-   * @throws \Drupal\Core\Entity\Exception\UndefinedLinkTemplateException
+   * @throws PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws EntityMalformedException
+   * @throws UndefinedLinkTemplateException
    */
   protected function hasDuplicates(FormStateInterface $form_state, $source_path) {
     // Generate the hash for checking duplicates.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/regex_redirect/src/Form/RegexRedirectDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\regex_redirect\Form;

+use Drupal\Core\TypedData\Exception\MissingDataException;
+use Drupal\regex_redirect\Entity\RegexRedirect;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    */
   public function getQuestion() {
-    /** @var \Drupal\regex_redirect\Entity\RegexRedirect $redirect */
+    /** @var RegexRedirect $redirect */
     $redirect = $this->entity;
     return $this->t(
       'Are you sure you want to delete the regex redirect from %source to %redirect?',
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws EntityStorageException
+   * @throws MissingDataException
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\regex_redirect\Entity\RegexRedirect $redirect */
+    /** @var RegexRedirect $redirect */
     $redirect = $this->entity;
     $redirect->delete();
     $this->messenger->addMessage(t(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/regex_redirect/src/EventSubscriber/RegexRedirectRequestSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\regex_redirect\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
+use Drupal\Core\TypedData\Exception\MissingDataException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\regex_redirect\Entity\RegexRedirect;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\PathProcessor\InboundPathProcessorInterface;
@@ @@
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\Response;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\Routing\RequestContext;

 /**
@@ @@
   /**
    * RegexRedirectRepository object.
    *
-   * @var \Drupal\regex_redirect\RegexRedirectRepository
+   * @var RegexRedirectRepository
    */
   protected $regexRedirectRepository;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * RedirectChecker object.
    *
-   * @var \Drupal\redirect\RedirectChecker
+   * @var RedirectChecker
    */
   protected $redirectChecker;

@@ @@
   /**
    * The request context.
    *
-   * @var \Symfony\Component\Routing\RequestContext
+   * @var RequestContext
    */
   protected $context;

@@ @@
   /**
    * A path processor manager for resolving the system path.
    *
-   * @var \Drupal\Core\PathProcessor\InboundPathProcessorInterface
+   * @var InboundPathProcessorInterface
    */
   protected $pathProcessor;

@@ @@
   /**
    * Constructs a RegexRedirectRequestSubscriber object.
    *
-   * @param \Drupal\regex_redirect\RegexRedirectRepository $regex_redirect_repository
+   * @param RegexRedirectRepository $regex_redirect_repository
    *   The redirect entity repository.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
-   * @param \Drupal\redirect\RedirectChecker $redirect_checker
+   * @param RedirectChecker $redirect_checker
    *   The redirect checker service.
-   * @param \Symfony\Component\Routing\RequestContext $context
+   * @param RequestContext $context
    *   Request context.
-   * @param \Drupal\Core\PathProcessor\InboundPathProcessorInterface $path_processor
+   * @param InboundPathProcessorInterface $path_processor
    *   Path processor.
    */
   public function __construct(
@@ @@
   /**
    * Handles the redirect if any found.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The event to process.
    *
-   * @throws \Drupal\redirect\Exception\RedirectLoopException
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws RedirectLoopException
+   * @throws MissingDataException
+   * @throws PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
    */
-  public function onKernelRequestCheckRegexRedirect(GetResponseEvent $event) {
+  public function onKernelRequestCheckRegexRedirect(RequestEvent $event) {
     // Get a clone of the request. During inbound processing the request
     // can be altered. Allowing this here can lead to unexpected behavior.
     // For example the path_processor.files inbound processor provided by
@@ @@
     $this->context->fromRequest($request);

     try {
-      /** @var \Drupal\regex_redirect\Entity\RegexRedirect $redirect */
+      /** @var RegexRedirect $redirect */
       $redirect = $this->regexRedirectRepository->findMatchingRedirect($path, $this->languageManager->getCurrentLanguage()->getId());
     }
     catch (RedirectLoopException $e) {
@@ @@
   /**
    * Prior to set the response it check if we can redirect.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The event object.
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   The Url where we want to redirect.
    */
-  protected function setResponse(GetResponseEvent $event, Url $url) {
+  protected function setResponse(RequestEvent $event, Url $url) {
     // Set the response if the regex redirect is valid.
     $request = $event->getRequest();
     $this->context->fromRequest($request);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/regex_redirect/src/Entity/RegexRedirect.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\regex_redirect\Entity;

+use Drupal\Core\TypedData\Exception\MissingDataException;
+use Drupal\Core\Url;
 use Drupal\Component\Utility\Crypt;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
    * @param string $path
    *   The base url of the source.
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    */
   public function setSource($path) {
     // Query is not supported for regex redirects.
@@ @@
    * @return string
    *   Regex redirect source path.
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    */
   public function getSourceValue() {
     $source = $this->get('regex_redirect_source')->first();
@@ @@
   }

  /**
-  * Gets the source base URL.
-  *
-  * @return string
-  *   Regex redirect source url.
-  *
-  * @throws \Drupal\Core\TypedData\Exception\MissingDataException
-  */
+   * Gets the source base URL.
+   *
+   * @return string
+   *   Regex redirect source url.
+   *
+   * @throws MissingDataException
+   */
   public function getSourceUrl() {
     $source = $this->get('regex_redirect_source')->first();
     if ($source === NULL) {
@@ @@
    * @param array $options
    *   The source url options.
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    */
   public function setRedirect($url, array $options = []) {
     $this->get('redirect_redirect')->set(0, [
@@ @@
   /**
    * Gets the redirect URL.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The redirect URL.
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    */
   public function getRedirectUrl() {
     return $this->get('redirect_redirect')->get(0)->getUrl();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 7 files have been changed by Rector                                       

