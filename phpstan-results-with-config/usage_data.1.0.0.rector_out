modules/contrib/usage_data/src/EntityStatisticsStorage.php
modules/contrib/usage_data/src/EntityStatisticsStorageInterface.php
modules/contrib/usage_data/src/Event/CollectExtraDataEvent.php
modules/contrib/usage_data/src/Event/RecordingViewEvent.php
modules/contrib/usage_data/src/Event/UsageDataEvents.php
modules/contrib/usage_data/usage_data.install
modules/contrib/usage_data/usage_data.module
modules/contrib/usage_data/usage_data.php

4 files with changes
====================

1) modules/contrib/usage_data/usage_data.module:49

    ---------- begin diff ----------
@@ @@
  * Implements hook_views_pre_render().
  */
 function usage_data_views_pre_render($view) {
-  /** @var \Drupal\views\ViewExecutable $view */
+  /** @var ViewExecutable $view */
   if ($view->getDisplay()->hasPath()) {
     // For views entity id we are going to concatenate the view id and
     // the display id.
@@ @@
 }

 function _usage_data_default_settings($entity_id, $entity_type_id): array {
-  $path = drupal_get_path('module', 'usage_data');
+  $path = \Drupal::service('extension.list.module')->getPath('usage_data');
   $current_user = \Drupal::currentUser();
   $roles = $current_user->getRoles(TRUE);
   $data = [
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


2) modules/contrib/usage_data/src/Event/RecordingViewEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\usage_data\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Event fired when a view record data is about to be stored.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/usage_data/src/Event/CollectExtraDataEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\usage_data\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Event fired when collecting extra data to be passed to the ajax call.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/usage_data/src/EntityStatisticsStorage.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The database connection used.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * Event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Constructs the entity statistics storage.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection for the node view storage.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher.
    */
   public function __construct(Connection $connection, StateInterface $state, RequestStack $request_stack, EventDispatcherInterface $event_dispatcher) {
@@ @@
      * assign it to the proper column.
      */
     $event = new RecordingViewEvent($data);
-    $this->eventDispatcher->dispatch(UsageDataEvents::RECORD_VIEW, $event);
+    $this->eventDispatcher->dispatch($event, UsageDataEvents::RECORD_VIEW);
     $data = $event->getData();

     // Removing extra data.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [WARNING] 2 nodes were removed                                                 

 [OK] 4 files have been changed by Rector                                       

