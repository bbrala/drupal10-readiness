diff --git a/date_content.info.yml b/date_content.info.yml
index a21d512..a33a949 100644
--- a/date_content.info.yml
+++ b/date_content.info.yml
@@ -1,8 +1,7 @@
 name: 'Date Content Augmenter'
 type: module
 description: 'Associate content with any date value'
-core: 8.x
-core_version_requirement: '^8 || ^9'
+core_version_requirement: ^9.3 || ^10
 package: 'Date Augmenter'
 dependencies:
   - 'date_augmenter:date_augmenter'
diff --git a/src/Access/DateContentRevisionAccessCheck.php b/src/Access/DateContentRevisionAccessCheck.php
index 033997e..18a17b8 100644
--- a/src/Access/DateContentRevisionAccessCheck.php
+++ b/src/Access/DateContentRevisionAccessCheck.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\date_content\Access;
 
+use Drupal\date_content\DateContentStorageInterface;
+use Drupal\Core\Entity\EntityAccessControlHandlerInterface;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
@@ -19,14 +22,14 @@ class DateContentRevisionAccessCheck implements AccessInterface {
   /**
    * The date_content date_content.
    *
-   * @var \Drupal\date_content\DateContentStorageInterface
+   * @var DateContentStorageInterface
    */
   protected $dateContentStorage;
 
   /**
    * The date_content access control handler.
    *
-   * @var \Drupal\Core\Entity\EntityAccessControlHandlerInterface
+   * @var EntityAccessControlHandlerInterface
    */
   protected $dateContentAccess;
 
@@ -40,7 +43,7 @@ class DateContentRevisionAccessCheck implements AccessInterface {
   /**
    * Constructs a new DateContentRevisionAccessCheck.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -51,9 +54,9 @@ class DateContentRevisionAccessCheck implements AccessInterface {
   /**
    * Checks routing access for the date_content revision.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check against.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    * @param int $date_content_revision
    *   (optional) The date_content revision ID. If not specified, but $date_content is,
@@ -64,7 +67,7 @@ class DateContentRevisionAccessCheck implements AccessInterface {
    *   $date_content_revision is specified. If neither $date_content_revision nor
    *   $date_content are specified, then access is denied.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(Route $route, AccountInterface $account, $date_content_revision = NULL, DateContentInterface $date_content = NULL) {
@@ -80,7 +83,7 @@ class DateContentRevisionAccessCheck implements AccessInterface {
    *
    * @param \Drupal\date_content\DateContentInterface $date_content
    *   The date_content to check.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   A user object representing the user for whom the operation is to be
    *   performed.
    * @param string $op
diff --git a/src/Controller/DateContentController.php b/src/Controller/DateContentController.php
index 212c432..39792bb 100644
--- a/src/Controller/DateContentController.php
+++ b/src/Controller/DateContentController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\date_content\Controller;
 
+use Drupal\Core\Datetime\DateFormatter;
+use Drupal\Core\Render\Renderer;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ -20,14 +22,14 @@ class DateContentController extends ControllerBase implements ContainerInjection
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;
 
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;
 
@@ -108,7 +110,7 @@ class DateContentController extends ControllerBase implements ContainerInjection
   /**
    * Generates an overview table of older revisions of a Date Content entity.
    *
-   * @param \Drupal\date_content\Entity\DateContentInterface $date_content
+   * @param DateContentInterface $date_content
    *   A Date Content object.
    *
    * @return array
diff --git a/src/DateContentAccessControlHandler.php b/src/DateContentAccessControlHandler.php
index 49c60ab..699a185 100644
--- a/src/DateContentAccessControlHandler.php
+++ b/src/DateContentAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\date_content;
 
+use Drupal\date_content\Entity\DateContentInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -18,8 +19,7 @@ class DateContentAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\date_content\Entity\DateContentInterface $entity */
-
+    /** @var DateContentInterface $entity */
     switch ($operation) {
 
       case 'view':
@@ -57,9 +57,9 @@ class DateContentAccessControlHandler extends EntityAccessControlHandler {
   /**
    * Test for given 'own' permission.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param $operation
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *
    * @return string|null
    *   The permission string indicating it's allowed.
diff --git a/src/DateContentHtmlRouteProvider.php b/src/DateContentHtmlRouteProvider.php
index 7e096e2..b2d3859 100644
--- a/src/DateContentHtmlRouteProvider.php
+++ b/src/DateContentHtmlRouteProvider.php
@@ -52,10 +52,10 @@ class DateContentHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ -76,10 +76,10 @@ class DateContentHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ -100,10 +100,10 @@ class DateContentHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ -124,10 +124,10 @@ class DateContentHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ -148,10 +148,10 @@ class DateContentHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type) {
@@ -172,10 +172,10 @@ class DateContentHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/DateContentPermissions.php b/src/DateContentPermissions.php
index 7b7ea8a..8ea9ce4 100644
--- a/src/DateContentPermissions.php
+++ b/src/DateContentPermissions.php
@@ -36,7 +36,7 @@ class DateContentPermissions{
   /**
    * Returns a list of node permissions for a given node type.
    *
-   * @param \Drupal\date_content\Entity\DateContentType $type
+   * @param DateContentType $type
    *   The Date Content type.
    *
    * @return array
diff --git a/src/DateContentStorageInterface.php b/src/DateContentStorageInterface.php
index 0a46475..0ab6c1d 100644
--- a/src/DateContentStorageInterface.php
+++ b/src/DateContentStorageInterface.php
@@ -20,7 +20,7 @@ interface DateContentStorageInterface extends ContentEntityStorageInterface {
   /**
    * Gets a list of Date Content revision IDs for a specific Date Content.
    *
-   * @param \Drupal\date_content\Entity\DateContentInterface $entity
+   * @param DateContentInterface $entity
    *   The Date Content entity.
    *
    * @return int[]
@@ -31,7 +31,7 @@ interface DateContentStorageInterface extends ContentEntityStorageInterface {
   /**
    * Gets a list of revision IDs having a given user as Date Content author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ -42,7 +42,7 @@ interface DateContentStorageInterface extends ContentEntityStorageInterface {
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\date_content\Entity\DateContentInterface $entity
+   * @param DateContentInterface $entity
    *   The Date Content entity.
    *
    * @return int
@@ -53,7 +53,7 @@ interface DateContentStorageInterface extends ContentEntityStorageInterface {
   /**
    * Unsets the language for all Date Content with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
diff --git a/src/Entity/DateContent.php b/src/Entity/DateContent.php
index 948ecfa..e7873ef 100644
--- a/src/Entity/DateContent.php
+++ b/src/Entity/DateContent.php
@@ -164,7 +164,7 @@ class DateContent extends ContentEntityBase implements DateContentInterface {
       $field_delta = (int) $this->field_delta->get(0)->getString();
       $parent_field_value = $parent->get($field_name)->get($field_delta)->view();
       if (!empty($parent_field_value['start'])) {
-        $start = render($parent_field_value);
+        $start = \Drupal::service('renderer')->render($parent_field_value);
       }
       else {
         // @todo Provide better fallback behaviour.
diff --git a/src/Form/DateContentForm.php b/src/Form/DateContentForm.php
index 9dae817..0c08bd4 100644
--- a/src/Form/DateContentForm.php
+++ b/src/Form/DateContentForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\date_content\Form;
 
+use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\date_content\Entity\DateContentType;
@@ -17,7 +18,7 @@ class DateContentForm extends ContentEntityForm {
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;
 
@@ -51,7 +52,7 @@ class DateContentForm extends ContentEntityForm {
         $field_delta = (int) $entity->field_delta->get(0)->getString();
         $parent_field_value = $parent->get($field_name)->get($field_delta)->view();
         if (!empty($parent_field_value['start'])) {
-          $start = render($parent_field_value);
+          $start = \Drupal::service('renderer')->render($parent_field_value);
         }
         else {
           // @todo Provide better fallback behaviour.
diff --git a/src/Form/DateContentRevisionDeleteForm.php b/src/Form/DateContentRevisionDeleteForm.php
index 0a49b17..3141109 100644
--- a/src/Form/DateContentRevisionDeleteForm.php
+++ b/src/Form/DateContentRevisionDeleteForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\date_content\Form;
 
+use Drupal\date_content\Entity\DateContentInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Database\Connection;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -17,21 +20,21 @@ class DateContentRevisionDeleteForm extends ConfirmFormBase {
   /**
    * The Date Content revision.
    *
-   * @var \Drupal\date_content\Entity\DateContentInterface
+   * @var DateContentInterface
    */
   protected $revision;
 
   /**
    * The Date Content date_content.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $dateContentStorage;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
@@ -57,7 +60,7 @@ class DateContentRevisionDeleteForm extends ConfirmFormBase {
    */
   public function getQuestion() {
     return $this->t('Are you sure you want to delete the revision from %revision-date?', [
-      '%revision-date' => format_date($this->revision->getRevisionCreationTime()),
+      '%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()),
     ]);
   }
 
@@ -92,7 +95,7 @@ class DateContentRevisionDeleteForm extends ConfirmFormBase {
     $this->DateContentDateContent->deleteRevision($this->revision->getRevisionId());
 
     $this->logger('content')->notice('Date Content: deleted %title revision %revision.', ['%title' => $this->revision->label(), '%revision' => $this->revision->getRevisionId()]);
-    $this->messenger()->addMessage(t('Revision from %revision-date of Date Content %title has been deleted.', ['%revision-date' => format_date($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
+    $this->messenger()->addMessage(t('Revision from %revision-date of Date Content %title has been deleted.', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
     $form_state->setRedirect(
       'entity.date_content.canonical',
        ['date_content' => $this->revision->id()]
diff --git a/src/Form/DateContentRevisionRevertForm.php b/src/Form/DateContentRevisionRevertForm.php
index 61f64d1..9e32777 100644
--- a/src/Form/DateContentRevisionRevertForm.php
+++ b/src/Form/DateContentRevisionRevertForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\date_content\Form;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -18,21 +20,21 @@ class DateContentRevisionRevertForm extends ConfirmFormBase {
   /**
    * The Date Content revision.
    *
-   * @var \Drupal\date_content\Entity\DateContentInterface
+   * @var DateContentInterface
    */
   protected $revision;
 
   /**
    * The Date Content date_content.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $dateContentStorage;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
@@ -118,18 +120,18 @@ class DateContentRevisionRevertForm extends ConfirmFormBase {
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\date_content\Entity\DateContentInterface $revision
+   * @param DateContentInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\date_content\Entity\DateContentInterface
+   * @return DateContentInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(DateContentInterface $revision, FormStateInterface $form_state) {
     $revision->setNewRevision();
     $revision->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());
 
     return $revision;
   }
diff --git a/src/Form/DateContentRevisionRevertTranslationForm.php b/src/Form/DateContentRevisionRevertTranslationForm.php
index 8d830aa..3958c40 100644
--- a/src/Form/DateContentRevisionRevertTranslationForm.php
+++ b/src/Form/DateContentRevisionRevertTranslationForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\date_content\Form;
 
+use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\date_content\Entity\DateContentInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -23,7 +24,7 @@ class DateContentRevisionRevertTranslationForm extends DateContentRevisionRevert
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
@@ -75,7 +76,7 @@ class DateContentRevisionRevertTranslationForm extends DateContentRevisionRevert
   protected function prepareRevertedRevision(DateContentInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');
 
-    /** @var \Drupal\date_content\Entity\DateContentInterface $default_revision */
+    /** @var DateContentInterface $default_revision */
     $latest_revision = $this->DateContentDateContent->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);
 
@@ -89,7 +90,7 @@ class DateContentRevisionRevertTranslationForm extends DateContentRevisionRevert
 
     $latest_revision_translation->setNewRevision();
     $latest_revision_translation->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());
 
     return $latest_revision_translation;
   }
diff --git a/src/Form/DateContentSettingsForm.php b/src/Form/DateContentSettingsForm.php
index 2c5880d..b445393 100644
--- a/src/Form/DateContentSettingsForm.php
+++ b/src/Form/DateContentSettingsForm.php
@@ -27,7 +27,7 @@ class DateContentSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -39,7 +39,7 @@ class DateContentSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/Form/DateContentTypeForm.php b/src/Form/DateContentTypeForm.php
index 0db15cd..eb808c4 100644
--- a/src/Form/DateContentTypeForm.php
+++ b/src/Form/DateContentTypeForm.php
@@ -16,14 +16,14 @@ class DateContentTypeForm extends BundleEntityFormBase {
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * Constructs the NodeTypeForm object.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(EntityFieldManagerInterface $entity_field_manager) {
diff --git a/src/Plugin/DateAugmenter/Content.php b/src/Plugin/DateAugmenter/Content.php
index 4445768..94f1dd2 100644
--- a/src/Plugin/DateAugmenter/Content.php
+++ b/src/Plugin/DateAugmenter/Content.php
@@ -35,9 +35,9 @@ class Content extends DateAugmenterPluginBase implements PluginFormInterface {
    *
    * @param array $output
    *   The existing render array, to be augmented, passed by reference.
-   * @param Drupal\Core\Datetime\DrupalDateTime $start
+   * @param DrupalDateTime $start
    *   The object which contains the start time.
-   * @param Drupal\Core\Datetime\DrupalDateTime $end
+   * @param DrupalDateTime $end
    *   The optionalobject which contains the end time.
    * @param array $options
    *   An array of options to further guide output.
@@ -143,7 +143,7 @@ class Content extends DateAugmenterPluginBase implements PluginFormInterface {
   /**
    * Construct a link with the configured attributes.
    *
-   * @param Drupal\Core\Url $url
+   * @param Url $url
    *   Where the link should point.
    * @param string $title
    *   The text of the link.
