diff --git a/insert.module b/insert.module
index 7982976..ebafd8a 100644
--- a/insert.module
+++ b/insert.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\node\NodeForm;
+use Drupal\Core\Image\ImageInterface;
 /**
  * @file
  */
@@ -126,7 +128,7 @@ function _insert_add_process(array &$elements) {
  * @see \Drupal\file\Plugin\Field\FieldWidget\FileWidget::process()
  *
  * @param array $element
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  * @param array $form
  *
  * @return array
@@ -234,7 +236,7 @@ function _insert_field_process(array $element, FormStateInterface $form_state, a
       'widgets' => [$insertType => $settings],
     ];
 
-    /** @var \Drupal\node\NodeForm $form */
+    /** @var NodeForm $form */
     $form = $form_state->getFormObject();
     $node = $form->getEntity();
 
@@ -450,7 +452,7 @@ function insert_insert_process(&$insertType, array &$element) {
     return FALSE;
   }
 
-  /** @var \Drupal\file\Entity\File $file */
+  /** @var File $file */
   $file = File::load($item['fids'][0]);
 
   $config = \Drupal::config('insert.config');
@@ -490,7 +492,7 @@ function insert_insert_variables($insertType, array &$element, $styleName, array
     return [];
   }
 
-  /** @var \Drupal\file\Entity\File $file */
+  /** @var File $file */
   $file = $element['#insert'][$insertType]['file'];
 
   if ($file === NULL) {
@@ -538,7 +540,7 @@ function insert_insert_variables($insertType, array &$element, $styleName, array
     'entity_type' => $file->getEntityTypeId(),
     'mime_type' => $file->getMimeType(),
     'uuid' => $file->uuid(),
-    'url' => file_create_url($file->getFileUri()),
+    'url' => \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri()),
   ];
 
   if (!$config->get('absolute')) {
@@ -577,7 +579,7 @@ function insert_insert_variables($insertType, array &$element, $styleName, array
 }
 
 /**
- * @param \Drupal\Core\Field\WidgetInterface $plugin
+ * @param WidgetInterface $plugin
  * @return array
  */
 function _insert_settings($plugin) {
@@ -708,7 +710,7 @@ function _insert_settings_form(array $settings, $insertType) {
  * Implements hook_field_widget_settings_summary_alter().
  */
 function insert_field_widget_settings_summary_alter(array &$summary, array $context) {
-  /** @var \Drupal\Core\Field\WidgetInterface $plugin */
+  /** @var WidgetInterface $plugin */
   $plugin = $context['widget'];
   $pluginId = $plugin->getPluginId();
 
@@ -735,7 +737,7 @@ function insert_field_widget_settings_summary_alter(array &$summary, array $cont
  * Implements hook_field_widget_form_alter().
  */
 function insert_field_widget_form_alter(array &$element, FormStateInterface $form_state, array $context) {
-  /** @var \Drupal\Core\Field\WidgetInterface $plugin */
+  /** @var WidgetInterface $plugin */
   $plugin = $context['widget'];
   $pluginId = $plugin->getPluginId();
 
@@ -839,7 +841,7 @@ function insert_editor_js_settings_alter(array &$settings) {
 
 /**
  * @param array $element
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function _insert_allowed_html_validate(array $element, FormStateInterface &$form_state) {
   $tags = [
@@ -952,7 +954,7 @@ function template_preprocess_insert_button_widget(array &$vars) {
  * particular image is transformed according to the image style.
  */
 function template_preprocess_insert_image(array &$vars) {
-  /** @var \Drupal\Core\Image\ImageInterface $image */
+  /** @var ImageInterface $image */
   $image = \Drupal::service('image.factory')->get($vars['file']->getFileUri());
   if ($image->isValid()) {
     if (!empty($vars['insert_settings']['width']) && $image->getWidth() > $vars['insert_settings']['width']) {
@@ -973,7 +975,7 @@ function template_preprocess_insert_image(array &$vars) {
     return;
   }
 
-  /** @var \Drupal\image\Entity\ImageStyle $style */
+  /** @var ImageStyle $style */
   $style = ImageStyle::load(
     isset($vars['insert__auto']) ? $vars['insert__auto'] : $vars['style_name']
   );
@@ -989,7 +991,7 @@ function template_preprocess_insert_image(array &$vars) {
  * Preprocess variables for the insert-link.html.twig file.
  */
 function template_preprocess_insert_link(array &$vars) {
-  /** @var \Drupal\file\Entity\File $vars['file'] */
+  /** @var File $vars ['file'] */
   $vars['name'] = $vars['file']->getFilename();
 }
 
@@ -997,7 +999,7 @@ function template_preprocess_insert_link(array &$vars) {
  * Preprocess variables for the insert-icon-link.html.twig file.
  */
 function template_preprocess_insert_icon_link(array &$vars) {
-  /** @var \Drupal\file\Entity\File $file */
+  /** @var File $file */
   $file = $vars['file'];
 
   $vars['name'] = $file->getFilename();
diff --git a/modules/insert_colorbox/insert_colorbox.module b/modules/insert_colorbox/insert_colorbox.module
index fc6747d..7f80514 100644
--- a/modules/insert_colorbox/insert_colorbox.module
+++ b/modules/insert_colorbox/insert_colorbox.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Config\Config;
 /**
  * @file
  */
@@ -56,7 +57,7 @@ function insert_colorbox_insert_config_form(array $form) {
  * Implements hook_insert_config_submit_form().
  */
 function insert_colorbox_insert_config_submit_form(FormStateInterface $form_state) {
-  /** @var \Drupal\Core\Config\Config $config */
+  /** @var Config $config */
   $config = \Drupal::getContainer()
     ->get('config.factory')
     ->getEditable('insert_colorbox.config');
diff --git a/modules/insert_media/insert_media.module b/modules/insert_media/insert_media.module
index 44a4fea..41ee7f5 100644
--- a/modules/insert_media/insert_media.module
+++ b/modules/insert_media/insert_media.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\EntityViewModeInterface;
 /**
  * @file
  */
@@ -37,7 +39,7 @@ function insert_media_field_widget_third_party_settings_form(WidgetInterface $pl
 }
 
 /**
- * @param \Drupal\Core\Field\WidgetInterface $plugin
+ * @param WidgetInterface $plugin
  * @return array
  */
 function _insert_media_settings($plugin) {
@@ -124,7 +126,7 @@ function insert_media_insert_process(&$insertType, array &$element) {
   $element['#insert']['settings']['styles'] = $settings['view_modes'];
   $element['#insert']['settings']['default'] = $settings['default'];
 
-  /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager */
+  /** @var EntityTypeManagerInterface $entityTypeManager */
   $entityTypeManager = \Drupal::entityTypeManager();
 
   foreach ($element['selection'] as $key => &$selectionElement) {
@@ -179,7 +181,7 @@ function insert_media_insert_process(&$insertType, array &$element) {
 /**
  * Returns all media view modes.
  *
- * @return \Drupal\Core\Entity\EntityViewModeInterface[]
+ * @return EntityViewModeInterface[]
  */
 function _insert_media_get_view_modes() {
   $viewModes = \Drupal::entityTypeManager()
@@ -198,7 +200,7 @@ function _insert_media_get_view_modes() {
  * Implements hook_field_widget_form_alter().
  */
 function insert_media_field_widget_form_alter(array &$element, FormStateInterface $form_state, array $context) {
-  /** @var \Drupal\Core\Field\WidgetInterface $plugin */
+  /** @var WidgetInterface $plugin */
   $plugin = $context['widget'];
   $pluginId = $plugin->getPluginId();
 
@@ -213,7 +215,7 @@ function insert_media_field_widget_form_alter(array &$element, FormStateInterfac
  * Implements hook_field_widget_settings_summary_alter().
  */
 function insert_media_field_widget_settings_summary_alter(array &$summary, array $context) {
-  /** @var \Drupal\Core\Field\WidgetInterface $plugin */
+  /** @var WidgetInterface $plugin */
   $plugin = $context['widget'];
   $pluginId = $plugin->getPluginId();
 
diff --git a/modules/insert_responsive_image/insert_responsive_image.module b/modules/insert_responsive_image/insert_responsive_image.module
index 7b10672..2e86303 100644
--- a/modules/insert_responsive_image/insert_responsive_image.module
+++ b/modules/insert_responsive_image/insert_responsive_image.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\file\Entity\File;
 /**
  * @file
  */
@@ -39,7 +40,7 @@ function insert_responsive_image_insert_variables($insertType, array &$element,
     return;
   }
 
-  /** @var \Drupal\file\Entity\File $file */
+  /** @var File $file */
   $file = $element['#insert'][$insertType]['file'];
   $styleName = $insertStyleNameSegments[1];
   $responsiveStyle = ResponsiveImageStyle::load($styleName);
@@ -58,11 +59,11 @@ function insert_responsive_image_insert_variables($insertType, array &$element,
   $style = ImageStyle::load($responsiveStyle->getFallbackImageStyle());
 
   $vars['url'] = $style === NULL
-    ? file_create_url($file->getFileUri())
+    ? \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri())
     : $style->buildUrl($file->getFileUri());
 
   if (!\Drupal::config('insert.config')->get('absolute')) {
-    $vars['url'] = file_url_transform_relative($vars['url']);
+    $vars['url'] = \Drupal::service('file_url_generator')->transformRelative($vars['url']);
   }
 
   // Have Responsive Image module generate the srcset and sizes attributes:
diff --git a/modules/insert_responsive_image/tests/src/FunctionalJavaScript/InsertResponsiveImageTestBase.php b/modules/insert_responsive_image/tests/src/FunctionalJavaScript/InsertResponsiveImageTestBase.php
index 92a915f..b037717 100644
--- a/modules/insert_responsive_image/tests/src/FunctionalJavaScript/InsertResponsiveImageTestBase.php
+++ b/modules/insert_responsive_image/tests/src/FunctionalJavaScript/InsertResponsiveImageTestBase.php
@@ -25,7 +25,7 @@ abstract class InsertResponsiveImageTestBase extends InsertImageTestBase {
   /**
    * @inheritdoc
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Install the 'wide' responsive image style.
diff --git a/src/Controller/RotateController.php b/src/Controller/RotateController.php
index 0436229..b6e51c7 100644
--- a/src/Controller/RotateController.php
+++ b/src/Controller/RotateController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\insert\Controller;
 
+use Drupal\Core\Image\ImageInterface;
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\file\Entity\File;
 use Drupal\image\Entity\ImageStyle;
@@ -18,9 +20,9 @@ class RotateController extends ControllerBase {
    * Rotates an image regenerating image derivatives for every image style and
    * saving the corresponding entity with the updated image dimensions.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    */
   public function rotate(Request $request) {
     $fid = $request->query->get('fid', NULL);
@@ -38,7 +40,7 @@ class RotateController extends ControllerBase {
       return new JsonResponse([]);
     }
 
-    /** @var \Drupal\Core\Image\ImageInterface $image */
+    /** @var ImageInterface $image */
     $image = \Drupal::service('image.factory')->get($file->getFileUri());
 
     if (!$image->isValid()) {
@@ -66,7 +68,7 @@ class RotateController extends ControllerBase {
     $node = Node::load($nid);
     if ($node !== NULL) {
 
-      /** @var \Drupal\Core\Field\FieldDefinitionInterface $definition */
+      /** @var FieldDefinitionInterface $definition */
       foreach ($node->getFieldDefinitions() as $field_name => $definition) {
         if ($definition->getType() === 'image') {
           $value = $node->get($field_name)->getValue();
diff --git a/src/Form/ConfigForm.php b/src/Form/ConfigForm.php
index 340586e..2780145 100644
--- a/src/Form/ConfigForm.php
+++ b/src/Form/ConfigForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\insert\Form;
 
+use Drupal\filter\Entity\FilterFormat;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Form\ConfigFormBase;
@@ -39,7 +40,7 @@ class ConfigForm extends ConfigFormBase {
     $config = $this->config('insert.config');
 
     $text_formats = array_map(function ($format) {
-      /** @var \Drupal\filter\Entity\FilterFormat $format */
+      /** @var FilterFormat $format */
       return $format->label();
     }, filter_formats());
 
@@ -179,7 +180,7 @@ class ConfigForm extends ConfigFormBase {
 
   /**
    * @param array $element
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public static function string_to_array(array $element, &$form_state) {
     $value = str_replace(',', ' ', trim($element['#value']));
diff --git a/src/Utility/InsertUtility.php b/src/Utility/InsertUtility.php
index 72b90bc..6e358a7 100644
--- a/src/Utility/InsertUtility.php
+++ b/src/Utility/InsertUtility.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\insert\Utility;
 
+use Drupal\Core\Image\Image;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\file\FileInterface;
@@ -92,7 +93,7 @@ class InsertUtility {
    * detect that all items were enabled when having set the value the last time.
    *
    * @param array $element
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public static function validateList(array $element, FormStateInterface &$form_state) {
     if (array_key_exists('#options', $element)
@@ -103,24 +104,24 @@ class InsertUtility {
   }
 
   /**
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    * @return bool
    */
   public static function isImage($file) {
-    /** @var \Drupal\Core\Image\Image $image */
+    /** @var Image $image */
     $image = \Drupal::service('image.factory')->get($file->getFileUri());
 
     return $image->isValid();
   }
 
   /**
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    * @param string $styleName
    * @param bool (optional) $absolute
    * @return null|string
    */
   public static function buildDerivativeUrl(FileInterface $file, $styleName, $absolute = FALSE) {
-    /** @var \Drupal\image\Entity\ImageStyle $style */
+    /** @var ImageStyle $style */
     $style = ImageStyle::load($styleName);
 
     if ($style !== NULL) {
diff --git a/tests/src/FunctionalJavaScript/InsertFileTestBase.php b/tests/src/FunctionalJavaScript/InsertFileTestBase.php
index d0a7f38..ebba108 100644
--- a/tests/src/FunctionalJavaScript/InsertFileTestBase.php
+++ b/tests/src/FunctionalJavaScript/InsertFileTestBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\insert\FunctionalJavascript;
 
+use Drupal\user\UserInterface;
+use Behat\Mink\Element\DocumentElement;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\Tests\file\Functional\FileFieldCreationTrait;
@@ -28,7 +30,7 @@ abstract class InsertFileTestBase extends WebDriverTestBase {
   public static $modules = ['node', 'file', 'insert', 'field_ui'];
 
   /**
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
@@ -40,7 +42,7 @@ abstract class InsertFileTestBase extends WebDriverTestBase {
   /**
    *
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->contentTypeName = 'article';
@@ -53,7 +55,7 @@ abstract class InsertFileTestBase extends WebDriverTestBase {
   }
 
   /**
-   * @return \Behat\Mink\Element\DocumentElement
+   * @return DocumentElement
    */
   protected function gotoInsertConfig() {
     $this->drupalGet('admin/config/content/insert');
@@ -61,7 +63,7 @@ abstract class InsertFileTestBase extends WebDriverTestBase {
   }
 
   /**
-   * @param \Behat\Mink\Element\DocumentElement $page
+   * @param DocumentElement $page
    */
   protected function saveInsertConfig($page) {
     $page->findButton('edit-submit')->click();
diff --git a/tests/src/FunctionalJavaScript/InsertImageCKEditorTestBase.php b/tests/src/FunctionalJavaScript/InsertImageCKEditorTestBase.php
index d3d72e5..bdaf3c9 100644
--- a/tests/src/FunctionalJavaScript/InsertImageCKEditorTestBase.php
+++ b/tests/src/FunctionalJavaScript/InsertImageCKEditorTestBase.php
@@ -20,7 +20,7 @@ abstract class InsertImageCKEditorTestBase extends InsertImageTestBase {
   /**
    * @inheritdoc
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create text format and associate CKEditor.
diff --git a/tests/src/FunctionalJavaScript/InsertImageTest.php b/tests/src/FunctionalJavaScript/InsertImageTest.php
index ab2df93..b6d7768 100644
--- a/tests/src/FunctionalJavaScript/InsertImageTest.php
+++ b/tests/src/FunctionalJavaScript/InsertImageTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\insert\FunctionalJavascript;
 
+use Behat\Mink\Element\NodeElement;
 /**
  * Tests Insert module's image insert capability.
  *
@@ -172,7 +173,7 @@ class InsertImageTest extends InsertImageTestBase {
     $page->findLink('↺')->click();
 
     $body->waitFor(20, function ($element) {
-      /** @var \Behat\Mink\Element\NodeElement $element */
+      /** @var NodeElement $element */
       return strpos($element->getValue(), 'width="20"') !== FALSE;
     });
 
@@ -185,7 +186,7 @@ class InsertImageTest extends InsertImageTestBase {
     $page->findLink('↺')->click();
 
     $body->waitFor(20, function ($element) {
-      /** @var \Behat\Mink\Element\NodeElement $element */
+      /** @var NodeElement $element */
       return strpos($element->getValue(), 'width="40"') !== FALSE;
     });
 
@@ -236,7 +237,7 @@ class InsertImageTest extends InsertImageTestBase {
     $page->findLink('↺')->click();
 
     $body->waitFor(20, function ($element) {
-      /** @var \Behat\Mink\Element\NodeElement $element */
+      /** @var NodeElement $element */
       return strpos($element->getValue(), 'width="20"') !== FALSE;
     });
 
@@ -249,7 +250,7 @@ class InsertImageTest extends InsertImageTestBase {
     $page->findLink('↺')->click();
 
     $body->waitFor(20, function ($element) {
-      /** @var \Behat\Mink\Element\NodeElement $element */
+      /** @var NodeElement $element */
       return strpos($element->getValue(), 'width="40"') !== FALSE;
     });
 
@@ -333,7 +334,7 @@ class InsertImageTest extends InsertImageTestBase {
     $wrappers[0]->findLink('↺')->click();
 
     $body->waitFor(20, function ($element) {
-      /** @var \Behat\Mink\Element\NodeElement $element */
+      /** @var NodeElement $element */
       return strpos($element->getValue(), 'width="20"') !== FALSE;
     });
 
@@ -366,7 +367,7 @@ class InsertImageTest extends InsertImageTestBase {
     $wrappers[1]->findLink('↺')->click();
 
     $body->waitFor(20, function ($element) {
-      /** @var \Behat\Mink\Element\NodeElement $element */
+      /** @var NodeElement $element */
       return strpos($element->getValue(), 'width="20"') !== FALSE;
     });
 
diff --git a/tests/src/FunctionalJavaScript/TextFieldCreationTrait.php b/tests/src/FunctionalJavaScript/TextFieldCreationTrait.php
index ab23fce..5896cda 100644
--- a/tests/src/FunctionalJavaScript/TextFieldCreationTrait.php
+++ b/tests/src/FunctionalJavaScript/TextFieldCreationTrait.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\insert\FunctionalJavascript;
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\Display\EntityDisplayInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 
@@ -32,7 +34,7 @@ trait TextFieldCreationTrait {
    * @param string (optional) $description
    *   A description for the field. Defaults to ''.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    */
   protected function createTextField($name, $type_name, $type = 'text_long', array $storage_settings = [], array $field_settings = [], array $widget_settings = [], array $formatter_settings = [], $description = '') {
     FieldStorageConfig::create([
@@ -55,7 +57,7 @@ trait TextFieldCreationTrait {
     ]);
     $field_config->save();
 
-    /** @var \Drupal\Core\Entity\Display\EntityDisplayInterface $entity */
+    /** @var EntityDisplayInterface $entity */
     $entity = \Drupal::entityTypeManager()
       ->getStorage('entity_form_display')
       ->load('node.' . $type_name . '.default');
@@ -67,7 +69,7 @@ trait TextFieldCreationTrait {
       ])
       ->save();
 
-    /** @var \Drupal\Core\Entity\Display\EntityDisplayInterface $entity */
+    /** @var EntityDisplayInterface $entity */
     $entity = \Drupal::entityTypeManager()
       ->getStorage('entity_view_display')
       ->load('node.' . $type_name . '.default');
