modules/contrib/social_geolocation/modules/social_geolocation_maps/social_geolocation_maps.install
modules/contrib/social_geolocation/modules/social_geolocation_maps/social_geolocation_maps.module
modules/contrib/social_geolocation/modules/social_geolocation_maps/src/Plugin/views/cache/SocialGeolocationMapsTag.php
modules/contrib/social_geolocation/modules/social_geolocation_maps/src/SocialGeolocationLandingPageConfigOverride.php
modules/contrib/social_geolocation/modules/social_geolocation_search/social_geolocation_search.install
modules/contrib/social_geolocation/modules/social_geolocation_search/social_geolocation_search.module
modules/contrib/social_geolocation/modules/social_geolocation_search/social_geolocation_search.views_execution.inc
modules/contrib/social_geolocation/modules/social_geolocation_search/src/SocialGeolocationSearchApiConfigOverride.php
modules/contrib/social_geolocation/social_geolocation.install
modules/contrib/social_geolocation/social_geolocation.module
modules/contrib/social_geolocation/social_geolocation.post_update.php
modules/contrib/social_geolocation/src/Form/SocialGeolocationSettings.php

6 files with changes
====================

1) modules/contrib/social_geolocation/src/Form/SocialGeolocationSettings.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The Drupal module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected ModuleHandlerInterface $moduleHandler;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/social_geolocation/social_geolocation.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\geolocation\GeocoderInterface;
+use CommerceGuys\Addressing\Formatter\FormatterInterface;
 /**
  * @file
  * Contains hook implementations for the Social Geolocation module.
@@ @@
 /**
  * Set value to geolocation field based on address input.
  *
- * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+ * @param FieldableEntityInterface $entity
  *   The entity that is being saved.
  * @param string $type
  *   The type of the entity being saved.
@@ @@
   $new_coordinates = NULL;

   // Format address as a string consumable by the geocoding API.
-  /** @var \Drupal\address\AddressInterface $address */
+  /** @var AddressInterface $address */
   $address = $entity->get($field_address)->first();
   $address = _social_geolocation_address_to_string($address);

@@ @@
 /**
  * Retrieves the configured Geocoder plugin.
  *
- * @return \Drupal\geolocation\GeocoderInterface|false
+ * @return GeocoderInterface|false
  *   Returns the configured geocoder or false if none is configured or the
  *   configured geocoder could not be loaded.
  */
@@ @@
  * a proper lef-to-right string that can be consumed by at least Nominatim and
  * the Google Geocoding API.
  *
- * @param \Drupal\address\AddressInterface $address
+ * @param AddressInterface $address
  *   The address field.
  *
  * @return string
@@ @@
  *   The string that can be sent to a geocoding API.
  */
 function _social_geolocation_address_to_string(AddressInterface $address) : string {
-  /** @var \CommerceGuys\Addressing\Formatter\FormatterInterface $formatter */
+  /** @var FormatterInterface $formatter */
   $formatter = \Drupal::service('social_geolocation.default_address_formatter');

   // Fix any edge cases in address formatting for the API we're using.
@@ @@
 /**
  * Fixes edge cases in address values before they're formatted.
  *
- * @param \Drupal\address\AddressInterface $address
+ * @param AddressInterface $address
  *   The address field.
  *
  * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


3) modules/contrib/social_geolocation/social_geolocation.install:58

    ---------- begin diff ----------
@@ @@
 function _social_geolocation_set_permissions(): void {
   $roles = Role::loadMultiple();

-  /** @var \Drupal\user\Entity\Role $role */
+  /** @var Role $role */
   foreach ($roles as $role) {
     if ($role->id() === 'administrator') {
       continue;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


4) modules/contrib/social_geolocation/modules/social_geolocation_search/src/SocialGeolocationSearchApiConfigOverride.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected ConfigFactoryInterface $configFactory;

@@ @@
   /**
    * Constructs the configuration override.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The Drupal configuration factory.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The Drupal module handler.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/social_geolocation/modules/social_geolocation_maps/src/SocialGeolocationLandingPageConfigOverride.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected ConfigFactoryInterface $configFactory;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected ModuleHandlerInterface $moduleHandler;

@@ @@
   /**
    * Constructs the configuration override.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The Drupal configuration factory.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/social_geolocation/modules/social_geolocation_maps/social_geolocation_maps.install:24

    ---------- begin diff ----------
@@ @@
       'location' => InstallStorage::CONFIG_OPTIONAL_DIRECTORY,
     ],
   ];
-  $base_path = drupal_get_path('module', 'social_geolocation_maps');
+  $base_path = \Drupal::service('extension.list.module')->getPath('social_geolocation_maps');

   foreach ($configs as $type => $config) {
     $storage = \Drupal::entityTypeManager()->getStorage($type);
@@ @@
  * From Social Geolocation - Leaflet - CommonMap with marker icons view.
  */
 function social_geolocation_maps_update_8002(&$sandbox): void {
-  $config_file = drupal_get_path('module', 'social_geolocation_maps') . '/config/static/views.view.social_geolocation_leaflet_commonmap_with_marker_icons_8002.yml';
+  $config_file = \Drupal::service('extension.list.module')->getPath('social_geolocation_maps') . '/config/static/views.view.social_geolocation_leaflet_commonmap_with_marker_icons_8002.yml';

   if (is_file($config_file)) {
     $views_configuration = Yaml::parse(file_get_contents($config_file));
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [OK] 6 files have been changed by Rector                                       

