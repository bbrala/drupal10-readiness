modules/contrib/setka_editor-setka_editor/modules/setka_editor_amp/setka_editor_amp.install
modules/contrib/setka_editor-setka_editor/modules/setka_editor_amp/setka_editor_amp.module
modules/contrib/setka_editor-setka_editor/modules/setka_editor_amp/src/Asset/SetkaEditorAmpCssCollectionRenderer.php
modules/contrib/setka_editor-setka_editor/modules/setka_editor_amp/src/Controller/SetkaEditorAMPApiController.php
modules/contrib/setka_editor-setka_editor/modules/setka_editor_amp/src/Plugin/Field/FieldFormatter/SetkaEditorAMPFormatter.php
modules/contrib/setka_editor-setka_editor/modules/setka_editor_amp/src/Routing/SetkaEditorAMPRouteSubscriber.php
modules/contrib/setka_editor-setka_editor/modules/setka_editor_amp/src/SetkaAmpSanitizer.php
modules/contrib/setka_editor-setka_editor/setka_editor.install
modules/contrib/setka_editor-setka_editor/setka_editor.module
modules/contrib/setka_editor-setka_editor/src/Controller/SetkaEditorApiController.php
modules/contrib/setka_editor-setka_editor/src/Element/SetkaEditorFormat.php
modules/contrib/setka_editor-setka_editor/src/Form/SettingsForm.php
modules/contrib/setka_editor-setka_editor/src/Plugin/Field/FieldFormatter/SetkaEditorFormatter.php
modules/contrib/setka_editor-setka_editor/src/Plugin/Field/FieldWidget/SetkaEditorStringTextareaWidget.php
modules/contrib/setka_editor-setka_editor/src/Plugin/Field/FieldWidget/SetkaEditorWidget.php
modules/contrib/setka_editor-setka_editor/src/Plugin/Field/FieldWidget/SetkaEditorWithSummaryWidget.php
modules/contrib/setka_editor-setka_editor/src/ProxyClass/SetkaEditorUninstallValidator.php
modules/contrib/setka_editor-setka_editor/src/SetkaEditorApi.php
modules/contrib/setka_editor-setka_editor/src/SetkaEditorHelper.php
modules/contrib/setka_editor-setka_editor/src/SetkaEditorUninstallValidator.php
modules/contrib/setka_editor-setka_editor/src/Validate/SetkaEditorValidate.php
modules/contrib/setka_editor-setka_editor/tests/src/Kernel/SetkaEditorApiTest.php

15 files with changes
=====================

1) modules/contrib/setka_editor-setka_editor/tests/src/Kernel/SetkaEditorApiTest.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->testStyleManagerResponse = [
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/setka_editor-setka_editor/src/Validate/SetkaEditorValidate.php:14

    ---------- begin diff ----------
@@ @@
    *
    * @param array $element
    *   The form element to process.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The form state.
    * @param array $form
    *   The complete form structure.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/setka_editor-setka_editor/src/SetkaEditorUninstallValidator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\setka_editor;

+use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * Drupal entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * Drupal entity display repository interface.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
             foreach ($fieldData['bundles'] as $bundle) {
               $formModes = $this->entityDisplayRepository->getFormModeOptionsByBundle($entityType, $bundle);
               foreach ($formModes as $formMode => $formModeData) {
-                /** @var \Drupal\Core\Entity\Entity\EntityFormDisplay $formDisplay */
+                /** @var EntityFormDisplay $formDisplay */
                 $formDisplay = $this->entityTypeManager
                   ->getStorage('entity_form_display')
                   ->load($entityType . '.' . $bundle . '.' . $formMode);
@@ @@
               }
               $viewModes = $this->entityDisplayRepository->getViewModeOptionsByBundle($entityType, $bundle);
               foreach ($viewModes as $viewMode => $viewModeData) {
-                /** @var \Drupal\Core\Entity\Entity\EntityFormDisplay $viewDisplay */
+                /** @var EntityFormDisplay $viewDisplay */
                 $viewDisplay = $this->entityTypeManager
                   ->getStorage('entity_view_display')
                   ->load($entityType . '.' . $bundle . '.' . $viewMode);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/setka_editor-setka_editor/src/SetkaEditorHelper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\setka_editor;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactory;
@@ @@
   /**
    * Drupal messenger interface.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
         $filename = $matches[1];
       }
       if ($filename) {
-        $file = file_save_data($fileData, 'public://setka/' . $filename, FileSystemInterface::EXISTS_REPLACE);
-        return $file ? file_create_url($file->getFileUri()) : FALSE;
+        $file = \Drupal::service('file.repository')->writeData($fileData, 'public://setka/' . $filename, FileSystemInterface::EXISTS_REPLACE);
+        return $file ? \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri()) : FALSE;
       }
     }
     return FALSE;
@@ @@
       $directoryPath = str_replace('/' . $filename, '', $directoryPath);
       $directoryPath = "public://setka/{$directoryPath}";
       \Drupal::service('file_system')->prepareDirectory($directoryPath, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);
-      $file = file_save_data($fileData, "{$directoryPath}/{$filename}", FileSystemInterface::EXISTS_REPLACE);
+      $file = \Drupal::service('file.repository')->writeData($fileData, "{$directoryPath}/{$filename}", FileSystemInterface::EXISTS_REPLACE);

-      return $file ? file_create_url($file->getFileUri()) : FALSE;
+      return $file ? \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri()) : FALSE;
     }

     return FALSE;
@@ @@
   /**
    * Checks if public://setka is writable directory.
    *
-   * @param \Drupal\Core\File\FileSystem $fileSystem
+   * @param FileSystem $fileSystem
    *   Drupal file system service.
    *
    * @return bool
@@ @@
   /**
    * Sets task of URLs to download.
    *
-   * @param \Drupal\Core\Config\ImmutableConfig|\Drupal\Core\Config\Config $config
+   * @param ImmutableConfig|Config $config
    *   Drupal config object.
-   * @param \Drupal\Core\State\State $drupalState
+   * @param State $drupalState
    *   Drupal state service.
    * @param array $newSettings
    *   New Style Manager settings.
@@ @@
   /**
    * This method updates Style Editor files on server storage.
    *
-   * @param \Drupal\Core\State\State $drupalState
+   * @param State $drupalState
    *   Drupal state service.
    */
   public static function runSetkaFilesUpdateTask(State $drupalState) {
@@ @@
   /**
    * Updates all Setka Editor settings in DB.
    *
-   * @param \Drupal\Core\Config\Config $setkaEditorConfig
+   * @param Config $setkaEditorConfig
    *   Editable Setka Editor config.
    * @param array $newSettings
    *   New settings values.
-   * @param \Drupal\Core\State\State $state
+   * @param State $state
    *   Drupal state service.
    */
   public static function updateSetkaEditorConfig(Config $setkaEditorConfig, array $newSettings, State $state) {
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/setka_editor-setka_editor/src/SetkaEditorApi.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\setka_editor;

+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Extension\ModuleExtensionList;
@@ @@
   /**
    * Http client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;

@@ @@
   /**
    * Drupal messenger interface.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Drupal logger channel interface.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * Setka Editor helper service.
    *
-   * @var \Drupal\setka_editor\SetkaEditorHelper
+   * @var SetkaEditorHelper
    */
   protected $setkaEditorHelper;

@@ @@
   /**
    * The module extension list.
    *
-   * @var \Drupal\Core\Extension\ModuleExtensionList
+   * @var ModuleExtensionList
    */
   protected $moduleExtensionList;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/setka_editor-setka_editor/src/ProxyClass/SetkaEditorUninstallValidator.php:6

    ---------- begin diff ----------
@@ @@

 namespace Drupal\setka_editor\ProxyClass {

+    use Drupal\Core\Extension\ModuleUninstallValidatorInterface;
+    use Drupal\Core\DependencyInjection\DependencySerializationTrait;
+    use Symfony\Component\DependencyInjection\ContainerInterface;
+    use Drupal\Core\StringTranslation\TranslationInterface;
     /**
      * Provides a proxy class for \Drupal\setka_editor\SetkaEditorUninstallValidator.
      *
      * @see \Drupal\Component\ProxyBuilder
      */
-    class SetkaEditorUninstallValidator implements \Drupal\Core\Extension\ModuleUninstallValidatorInterface
+    class SetkaEditorUninstallValidator implements ModuleUninstallValidatorInterface
     {

-        use \Drupal\Core\DependencyInjection\DependencySerializationTrait;
+        use DependencySerializationTrait;

         /**
          * The id of the original proxied service.
@@ @@
         /**
          * The service container.
          *
-         * @var \Symfony\Component\DependencyInjection\ContainerInterface
+         * @var ContainerInterface
          */
         protected $container;

@@ @@
         /**
          * Constructs a ProxyClass Drupal proxy object.
          *
-         * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+         * @param ContainerInterface $container
          *   The container.
          * @param string $drupal_proxy_original_service_id
          *   The service ID of the original service.
          */
-        public function __construct(\Symfony\Component\DependencyInjection\ContainerInterface $container, $drupal_proxy_original_service_id)
+        public function __construct(ContainerInterface $container, $drupal_proxy_original_service_id)
         {
             $this->container = $container;
             $this->drupalProxyOriginalServiceId = $drupal_proxy_original_service_id;
@@ @@
         /**
          * {@inheritdoc}
          */
-        public function setStringTranslation(\Drupal\Core\StringTranslation\TranslationInterface $translation)
+        public function setStringTranslation(TranslationInterface $translation)
         {
             return $this->lazyLoadItself()->setStringTranslation($translation);
         }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/setka_editor-setka_editor/src/Plugin/Field/FieldWidget/SetkaEditorWithSummaryWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\setka_editor\Plugin\Field\FieldWidget;

+use Drupal\Core\Config\Config;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\TempStore\PrivateTempStore;
+use Drupal\Core\Entity\EntityForm;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Database\Connection;
@@ @@
   /**
    * Setka Editor config.
    *
-   * @var \Drupal\Core\Config\Config|\Drupal\Core\Config\ImmutableConfig
+   * @var Config|ImmutableConfig
    */
   protected $setkaEditorConfig;

@@ @@
   /**
    * Service to interact with $_SESSION.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $sessionStore;

@@ @@
   /**
    * Drupal database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * Setka Editor helper service.
    *
-   * @var \Drupal\setka_editor\SetkaEditorHelper
+   * @var SetkaEditorHelper
    */
   protected $setkaEditorHelper;

@@ @@
   /**
    * Drupal current user.
    *
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    */
   protected $currentUser;

@@ @@
   /**
    * Drupal state service.
    *
-   * @var \Drupal\Core\State\State
+   * @var State
    */
   protected $state;

@@ @@
           $setkaEditorHeaderTopOffset = 0;
         }
         $formBuildInfo = $form_state->getBuildInfo();
-        /** @var \Drupal\Core\Entity\EntityForm $callbackObject */
+        /** @var EntityForm $callbackObject */
         $callbackObject = $formBuildInfo['callback_object'];
         /** @var \Drupal\Core\Entity\Entity $entity */
         $entity = $callbackObject->getEntity();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/setka_editor-setka_editor/src/Plugin/Field/FieldWidget/SetkaEditorWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\setka_editor\Plugin\Field\FieldWidget;

+use Drupal\Core\Config\Config;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\TempStore\PrivateTempStore;
+use Drupal\Core\Entity\EntityForm;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Database\Connection;
@@ @@
   /**
    * Setka Editor config.
    *
-   * @var \Drupal\Core\Config\Config|\Drupal\Core\Config\ImmutableConfig
+   * @var Config|ImmutableConfig
    */
   protected $setkaEditorConfig;

@@ @@
   /**
    * Service to interact with $_SESSION.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $sessionStore;

@@ @@
   /**
    * Drupal database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * Setka Editor helper service.
    *
-   * @var \Drupal\setka_editor\SetkaEditorHelper
+   * @var SetkaEditorHelper
    */
   protected $setkaEditorHelper;

@@ @@
   /**
    * Drupal current user.
    *
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    */
   protected $currentUser;

@@ @@
   /**
    * Drupal state service.
    *
-   * @var \Drupal\Core\State\State
+   * @var State
    */
   protected $state;

@@ @@
           $setkaEditorHeaderTopOffset = 0;
         }
         $formBuildInfo = $form_state->getBuildInfo();
-        /** @var \Drupal\Core\Entity\EntityForm $callbackObject */
+        /** @var EntityForm $callbackObject */
         $callbackObject = $formBuildInfo['callback_object'];
         /** @var \Drupal\Core\Entity\Entity $entity */
         $entity = $callbackObject->getEntity();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/setka_editor-setka_editor/src/Plugin/Field/FieldWidget/SetkaEditorStringTextareaWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\setka_editor\Plugin\Field\FieldWidget;

+use Drupal\Core\Config\Config;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\TempStore\PrivateTempStore;
+use Drupal\Core\Entity\EntityForm;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Database\Connection;
@@ @@
   /**
    * Setka Editor config.
    *
-   * @var \Drupal\Core\Config\Config|\Drupal\Core\Config\ImmutableConfig
+   * @var Config|ImmutableConfig
    */
   protected $setkaEditorConfig;

@@ @@
   /**
    * Service to interact with $_SESSION.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $sessionStore;

@@ @@
   /**
    * Drupal database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * Setka Editor helper service.
    *
-   * @var \Drupal\setka_editor\SetkaEditorHelper
+   * @var SetkaEditorHelper
    */
   protected $setkaEditorHelper;

@@ @@
   /**
    * Drupal current user.
    *
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    */
   protected $currentUser;

@@ @@
   /**
    * Drupal state service.
    *
-   * @var \Drupal\Core\State\State
+   * @var State
    */
   protected $state;

@@ @@
           $setkaEditorHeaderTopOffset = 0;
         }
         $formBuildInfo = $form_state->getBuildInfo();
-        /** @var \Drupal\Core\Entity\EntityForm $callbackObject */
+        /** @var EntityForm $callbackObject */
         $callbackObject = $formBuildInfo['callback_object'];
         /** @var \Drupal\Core\Entity\Entity $entity */
         $entity = $callbackObject->getEntity();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/setka_editor-setka_editor/src/Plugin/Field/FieldFormatter/SetkaEditorFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\setka_editor\Plugin\Field\FieldFormatter;

+use Drupal\Core\Config\Config;
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemListInterface;
@@ @@
   /**
    * Drupal state service.
    *
-   * @var \Drupal\Core\State\State
+   * @var State
    */
   protected $state;

@@ @@
   /**
    * Setka Editor config.
    *
-   * @var \Drupal\Core\Config\Config|\Drupal\Core\Config\ImmutableConfig
+   * @var Config|ImmutableConfig
    */
   protected $setkaEditorConfig;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/setka_editor-setka_editor/src/Form/SettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\setka_editor\Form;

+use Drupal\Core\Cache\DatabaseBackend;
 use Drupal\Core\Asset\CssCollectionOptimizer;
 use Drupal\Core\Asset\JsCollectionOptimizer;
 use Drupal\Core\Asset\LibraryDiscovery;
@@ @@
   /**
    * Setka Editor api service.
    *
-   * @var \Drupal\setka_editor\SetkaEditorApi
+   * @var SetkaEditorApi
    */
   protected $editorApi;

@@ @@
   /**
    * Cache Discovery bin backend.
    *
-   * @var \Drupal\Core\Cache\DatabaseBackend
+   * @var DatabaseBackend
    */
   protected $cacheDiscovery;

@@ @@
   /**
    * Drupal CSS optimizer service.
    *
-   * @var \Drupal\Core\Asset\CssCollectionOptimizer
+   * @var CssCollectionOptimizer
    */
   protected $cssOptimizer;

@@ @@
   /**
    * Drupal JS optimizer service.
    *
-   * @var \Drupal\Core\Asset\JsCollectionOptimizer
+   * @var JsCollectionOptimizer
    */
   protected $jsOptimizer;

@@ @@
   /**
    * Drupal file_system service.
    *
-   * @var \Drupal\Core\File\FileSystem
+   * @var FileSystem
    */
   protected $fileSystem;

@@ @@
   /**
    * Drupal state service.
    *
-   * @var \Drupal\Core\State\State
+   * @var State
    */
   protected $state;

@@ @@
   /**
    * Drupal queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;

@@ @@
   /**
    * Library discovery service.
    *
-   * @var \Drupal\Core\Asset\LibraryDiscovery
+   * @var LibraryDiscovery
    */
   protected $libraryDiscovery;

@@ @@
   /**
    * Lock service.
    *
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected $lock;

@@ @@
   /**
    * Module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;

@@ @@
   /**
    * Returns CDN Setka Editor config value if local is empty.
    *
-   * @param \Drupal\Core\Config\ImmutableConfig $config
+   * @param ImmutableConfig $config
    *   Immutable config.
-   * @param \Drupal\Core\State\State $state
+   * @param State $state
    *   Drupal state service.
    * @param string $confName
    *   Config value name.
@@ @@
   /**
    * Returns CDN Setka Editor state value if local is empty.
    *
-   * @param \Drupal\Core\Config\ImmutableConfig $config
+   * @param ImmutableConfig $config
    *   Immutable config.
-   * @param \Drupal\Core\State\State $state
+   * @param State $state
    *   Drupal state service.
    * @param string $confName
    *   Config value name.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/setka_editor-setka_editor/src/Controller/SetkaEditorApiController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\setka_editor\Controller;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\TempStore\PrivateTempStore;
+use Drupal\Core\Cache\DatabaseBackend;
+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Asset\CssCollectionOptimizer;
 use Drupal\Core\Asset\JsCollectionOptimizer;
@@ @@
   /**
    * Setka Editor api service.
    *
-   * @var \Drupal\setka_editor\SetkaEditorApi
+   * @var SetkaEditorApi
    */
   protected $editorApi;

@@ @@
   /**
    * Setka Editor config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $setkaConfig;

@@ @@
   /**
    * Service to interact with $_SESSION.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $sessionStore;

@@ @@
   /**
    * Drupal file usage interface.
    *
-   * @var \Drupal\file\FileUsage\FileUsageInterface
+   * @var FileUsageInterface
    */
   protected $fileUsage;

@@ @@
   /**
    * Drupal database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * Cache Discovery bin backend.
    *
-   * @var \Drupal\Core\Cache\DatabaseBackend
+   * @var DatabaseBackend
    */
   protected $cacheDiscovery;

@@ @@
   /**
    * Drupal CSS optimizer service.
    *
-   * @var \Drupal\Core\Asset\CssCollectionOptimizer
+   * @var CssCollectionOptimizer
    */
   protected $cssOptimizer;

@@ @@
   /**
    * Drupal JS optimizer service.
    *
-   * @var \Drupal\Core\Asset\JsCollectionOptimizer
+   * @var JsCollectionOptimizer
    */
   protected $jsOptimizer;

@@ @@
   /**
    * Drupal file_system service.
    *
-   * @var \Drupal\Core\File\FileSystem
+   * @var FileSystem
    */
   protected $fileSystem;

@@ @@
   /**
    * Drupal queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;

@@ @@
   /**
    * Library discovery service.
    *
-   * @var \Drupal\Core\Asset\LibraryDiscovery
+   * @var LibraryDiscovery
    */
   protected $libraryDiscovery;

@@ @@
   /**
    * Lock service.
    *
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected $lock;

@@ @@
    * @param array $data
    *   Current version data.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   Return 200 code.
    */
   public function processEditorConfig($token, array $data) {
@@ @@
         }
         else {
           $fileData = file_get_contents($_FILES['file']['tmp_name']);
-          $file = file_save_data($fileData, 'public://setka/' . $_FILES['file']['name']);
+          $file = \Drupal::service('file.repository')->writeData($fileData, 'public://setka/' . $_FILES['file']['name']);

           if ($entityId && $entityType && $entityId !== 'null') {
             $this->fileUsage->add($file, 'setka_editor', $entityType, $entityId);
@@ @@
       $imageId = (int) $id;
       if (($requestPayload['entityId'] || $requestPayload['entityUuid']) && !empty($requestPayload['entityType']) && $requestPayload['alt'] && $imageId > 0) {
         if ($this->checkEntityEditAccess($requestPayload['entityId'], $requestPayload['entityType'])) {
-          /** @var \Drupal\file\Entity\File $imageEntity */
+          /** @var File $imageEntity */
           $imageEntity = $this->entityTypeManager()->getStorage('file')->load($imageId);
           if ($this->checkImageAttachedToEntity($imageEntity, $requestPayload['entityId'], $requestPayload['entityUuid'])) {
             $imageUri = $imageEntity->getFileUri();
@@ @@
    * @param string $entityType
    *   Entity type.
    *
-   * @return bool|\Drupal\Core\Access\AccessResultInterface
+   * @return bool|AccessResultInterface
    *   Check access result.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function checkEntityEditAccess($entityId, $entityType) {
     $account = $this->currentUser();
@@ @@
   /**
    * Checks if image attached to entity or not.
    *
-   * @param \Drupal\file\Entity\File $imageFile
+   * @param File $imageFile
    *   Image file.
    * @param int $entityId
    *   Entity id.
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/setka_editor-setka_editor/setka_editor.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\TempStore\PrivateTempStore;
+use Drupal\file\FileUsage\DatabaseFileUsageBackend;
+use Drupal\Core\Image\Image;
 /**
  * @file
  * Main Setka Editor module file.
@@ @@
   // to know which images to attach to entity.
   // See \Drupal\setka_Editor\Validate\SetkaEditorValidate::validate method.
   $setkaEditorUuid = &drupal_static('setkaEditorUuid');
-  /** @var \Drupal\Core\TempStore\PrivateTempStore $store */
+  /** @var PrivateTempStore $store */
   $store = \Drupal::service('tempstore.private')->get('setka_editor');
   $setkaEditorImages = $store->get('setka_editor_images') ?? [];
   if ($setkaEditorUuid && !empty($setkaEditorImages[$setkaEditorUuid])) {
-    /** @var \Drupal\file\FileUsage\DatabaseFileUsageBackend $file_usage */
+    /** @var DatabaseFileUsageBackend $file_usage */
     $file_usage = \Drupal::service('file.usage');
     $entityImages = File::loadMultiple($setkaEditorImages[$setkaEditorUuid]);
     foreach ($entityImages as $imageFile) {
@@ @@
  */
 function setka_editor_image_item_prepare($imageItem) {
   $image = \Drupal::service('image.factory')->get($imageItem->uri);
-  if ($image instanceof Drupal\Core\Image\Image) {
+  if ($image instanceof Image) {
     // Original image size.
     $original = [
-      'url' => file_create_url($imageItem->uri),
+      'url' => \Drupal::service('file_url_generator')->generateAbsoluteString($imageItem->uri),
       'width' => $image->getWidth(),
       'height' => $image->getHeight(),
     ];
@@ @@
         $sizes[] = $size;
       }
     }
-    $imageUrl = file_create_url($imageItem->uri);
+    $imageUrl = \Drupal::service('file_url_generator')->generateAbsoluteString($imageItem->uri);
     $entityImage = [
       'id' => $imageItem->fid,
       'name' => $imageItem->filename,
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector


14) modules/contrib/setka_editor-setka_editor/modules/setka_editor_amp/src/Plugin/Field/FieldFormatter/SetkaEditorAMPFormatter.php:35

    ---------- begin diff ----------
@@ @@
   protected $ampService;

   /**
-   * @var \Drupal\setka_editor_amp\SetkaAmpSanitizer
+   * @var SetkaAmpSanitizer
    */
   protected $sanitizer;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/setka_editor-setka_editor/modules/setka_editor_amp/setka_editor_amp.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Config\Config;
 /**
  * @file
  * Setka Editor AMP module file.
@@ @@
 /**
  * Sets task of URLs to download.
  *
- * @param \Drupal\Core\Config\ImmutableConfig|\Drupal\Core\Config\Config $config
+ * @param ImmutableConfig|Config $config
  *   Drupal config object.
- * @param \Drupal\Core\State\StateInterface $drupalState
+ * @param StateInterface $drupalState
  *   Drupal state service.
  * @param array $newSettings
  *   New Style Manager settings.
@@ @@
   if ($fileData) {
     preg_match('/.*?\/([^\/]+)$/', $fileUrl, $matches);
     if ($matches[1]) {
-      $file = file_save_data($fileData, 'public://setka/' . $matches[1], FileSystemInterface::EXISTS_REPLACE);
-      return $file ? file_create_url($file->getFileUri()) : FALSE;
+      $file = \Drupal::service('file.repository')->writeData($fileData, 'public://setka/' . $matches[1], FileSystemInterface::EXISTS_REPLACE);
+      return $file ? \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri()) : FALSE;
     }
   }
   return FALSE;
@@ @@
       ];

       if (!empty($cachedAmpStyles[$libraryId])) {
-        $cachedAmpStyle = file_url_transform_relative($cachedAmpStyles[$libraryId]);
+        $cachedAmpStyle = \Drupal::service('file_url_generator')->transformRelative($cachedAmpStyles[$libraryId]);
         $libraries[$libraryId]['css'] = [
           'theme' => [
             $cachedAmpStyle => [
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * FileCreateUrlRector
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/setka_editor-setka_editor/modules/setka_editor_amp/src/A
         sset/SetkaEditorAmpCssCollectionRenderer.php" file, due to:            
         "Analyze error: "Class Drupal\amp\Asset\AmpCssCollectionRenderer not   
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

