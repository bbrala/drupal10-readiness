modules/contrib/search_api_location/modules/facets_map_widget/facets_map_widget.module
modules/contrib/search_api_location/modules/facets_map_widget/src/Plugin/facets/processor/RptMapProcessor.php
modules/contrib/search_api_location/modules/facets_map_widget/src/Plugin/facets/query_type/SearchApiRpt.php
modules/contrib/search_api_location/modules/facets_map_widget/src/Plugin/facets/widget/RptMapWidget.php
modules/contrib/search_api_location/modules/facets_map_widget/tests/src/Unit/Plugin/processor/RptMapProcessorTest.php
modules/contrib/search_api_location/modules/facets_map_widget/tests/src/Unit/Plugin/query_type/SearchApiRptTest.php
modules/contrib/search_api_location/modules/facets_map_widget/tests/src/Unit/Plugin/widget/RptMapWidgetTest.php
modules/contrib/search_api_location/modules/search_api_location_geocoder/src/Plugin/search_api_location/location_input/Geocode.php
modules/contrib/search_api_location/modules/search_api_location_geocoder/tests/src/Kernel/GeocodeTest.php
modules/contrib/search_api_location/modules/search_api_location_views/search_api_location_views.module
modules/contrib/search_api_location/modules/search_api_location_views/src/Plugin/views/argument/SearchApiLocationArgumentTrait.php
modules/contrib/search_api_location/modules/search_api_location_views/src/Plugin/views/argument/SearchApiLocationPoint.php
modules/contrib/search_api_location/modules/search_api_location_views/src/Plugin/views/argument/SearchApiLocationRadius.php
modules/contrib/search_api_location/modules/search_api_location_views/src/Plugin/views/filter/SearchApiFilterLocation.php
modules/contrib/search_api_location/modules/search_api_location_views/src/Plugin/views/sort/SearchApiSortLocationDistance.php
modules/contrib/search_api_location/search_api_location.api.php
modules/contrib/search_api_location/search_api_location.module
modules/contrib/search_api_location/src/Annotation/LocationInput.php
modules/contrib/search_api_location/src/LocationInput/LocationInputInterface.php
modules/contrib/search_api_location/src/LocationInput/LocationInputPluginBase.php
modules/contrib/search_api_location/src/LocationInput/LocationInputPluginManager.php
modules/contrib/search_api_location/src/Plugin/search_api/data_type/LocationDataType.php
modules/contrib/search_api_location/src/Plugin/search_api/data_type/RptDataType.php
modules/contrib/search_api_location/src/Plugin/search_api_location/location_input/Map.php
modules/contrib/search_api_location/src/Plugin/search_api_location/location_input/Raw.php
modules/contrib/search_api_location/tests/src/Kernel/LocationDataTypeTest.php
modules/contrib/search_api_location/tests/src/Kernel/RawTest.php

11 files with changes
=====================

1) modules/contrib/search_api_location/tests/src/Kernel/RawTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\search_api_location\Kernel;

+use Drupal\search_api_location\Plugin\search_api_location\location_input\Raw;
 use Drupal\KernelTests\KernelTestBase;

 /**
@@ @@
   /**
    * The Raw location input plugin under test.
    *
-   * @var \Drupal\search_api_location\Plugin\search_api_location\location_input\Raw
+   * @var Raw
    */
   protected $sut;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->sut = $this->container
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/search_api_location/src/Plugin/search_api_location/location_input/Raw.php:33

    ---------- begin diff ----------
@@ @@
    * @param array $form
    *   An associative array containing the structure of the plugin form as built
    *   by static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    */
   public function validateConfigurationForm(array &$form, FormStateInterface $form_state) {
@@ @@
    * @param array $form
    *   An associative array containing the structure of the plugin form as built
    *   by static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    */
   public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/search_api_location/src/Plugin/search_api_location/location_input/Map.php:174

    ---------- begin diff ----------
@@ @@
    * @param array $form
    *   An associative array containing the structure of the plugin form as built
    *   by static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    */
   public function validateConfigurationForm(array &$form, FormStateInterface $form_state) {
@@ @@
    * @param array $form
    *   An associative array containing the structure of the plugin form as built
    *   by static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    */
   public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/search_api_location/src/LocationInput/LocationInputPluginManager.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * Returns all known location input methods.
    *
-   * @return \Drupal\search_api_location\LocationInput\LocationInputInterface[]
+   * @return LocationInputInterface[]
    *   An array of data type plugins, keyed by type identifier.
    */
   public function getInstances() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/search_api_location/src/LocationInput/LocationInputInterface.php:57

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   The form where the settings form is being included in.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $options
    *   Option array with extra info of the plugin.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/search_api_location/src/Annotation/LocationInput.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\search_api_location\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the Location Input plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The Location Input description.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


7) modules/contrib/search_api_location/modules/search_api_location_views/src/Plugin/views/filter/SearchApiFilterLocation.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\search_api_location_views\Plugin\views\filter;

+use Drupal\search_api_location\LocationInput\LocationInputInterface;
+use Drupal\search_api\Query\Query;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Form\SubformState;
 use Drupal\search_api_location\LocationInput\LocationInputPluginManager;
@@ @@
   /**
    * The location plugin manager.
    *
-   * @var \Drupal\search_api_location\LocationInput\LocationInputPluginManager
+   * @var LocationInputPluginManager
    */
   protected $locationInputManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\search_api_location\LocationInput\LocationInputPluginManager $location_input_manager
+   * @param LocationInputPluginManager $location_input_manager
    *   The plugin implementation definition.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, LocationInputPluginManager $location_input_manager) {
@@ @@

     $plugin_id = $form_state->getValues()['options']['plugin'];

-    /** @var \Drupal\search_api_location\LocationInput\LocationInputInterface $plugin */
+    /** @var LocationInputInterface $plugin */
     $plugin = $this->locationInputManager->createInstance($plugin_id, $this->options['plugin-' . $plugin_id]);
     $processor_form_state = SubformState::createForSubform($form['plugin-' . $plugin_id], $form, $form_state);
     $plugin->submitConfigurationForm($form['plugin-' . $plugin_id], $processor_form_state);
@@ @@
       return;
     }

-    /** @var \Drupal\search_api_location\LocationInput\LocationInputInterface $plugin */
+    /** @var LocationInputInterface $plugin */
     $plugin = $this->locationInputManager->createInstance($plugin_id, $this->options['plugin-' . $plugin_id]);

     $form = $plugin->getForm($form, $form_state, $this->options + ['operator_options' => $this->operatorOptions()]);
@@ @@

     $plugin_options = $this->options['plugin-' . $plugin_id];

-    /** @var \Drupal\search_api_location\LocationInput\LocationInputInterface $plugin */
+    /** @var LocationInputInterface $plugin */
     $plugin = $this->locationInputManager->createInstance($plugin_id, $plugin_options);

     if (!$plugin->hasInput($this->value, $this->options)) {
@@ @@
       return;
     }
     $location = explode(',', $location, 2);
-    /** @var \Drupal\search_api\Query\Query $query */
+    /** @var Query $query */
     $query = $this->query;

     $location_options = (array) $query->getOption('search_api_location', []);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/search_api_location/modules/search_api_location_views/search_api_location_views.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\search_api\IndexInterface;
+use Drupal\search_api\Item\FieldInterface;
 /**
  * @file
  * Provide Views integration for Search API Location.
@@ @@
  * Implements hook_views_data_alter().
  */
 function search_api_location_views_views_data_alter(&$data) {
-  /** @var \Drupal\search_api\IndexInterface $index */
+  /** @var IndexInterface $index */
   foreach (Index::loadMultiple() as $index) {
     $table = &$data['search_api_index_' . $index->id()];

-    /** @var \Drupal\search_api\Item\FieldInterface $field */
+    /** @var FieldInterface $field */
     foreach ($index->getFields(TRUE) as $field_id => $field) {
       if ($field->getType() == 'location') {
         $field_alias = _search_api_location_views_get_field_alias($field_id, $table);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


9) modules/contrib/search_api_location/modules/search_api_location_geocoder/tests/src/Kernel/GeocodeTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\search_api_location_geocoder\Kernel;

+use Drupal\search_api_location_geocoder\Plugin\search_api_location\location_input\Geocode;
 use Drupal\KernelTests\KernelTestBase;
 use Geocoder\Model\Address;
 use Geocoder\Model\AddressCollection;
@@ @@
   /**
    * The Geocode location input plugin under test.
    *
-   * @var \Drupal\search_api_location_geocoder\Plugin\search_api_location\location_input\Geocode
+   * @var Geocode
    */
   protected $sut;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $ghent = new AddressCollection([new Address(new Coordinates(51.037455, 3.7192784))]);

     // Mock the Geocoder service.
-    $geocoder = $this->getMockBuilder('\Drupal\geocoder\Geocoder')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $geocoder = $this->createMock('\Drupal\geocoder\Geocoder');

     $geocoder->expects($this->any())
       ->method('geocode')
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/search_api_location/modules/search_api_location_geocoder/src/Plugin/search_api_location/location_input/Geocode.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\search_api_location_geocoder\Plugin\search_api_location\location_input;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * The geocoder config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $geocoderConfig;

@@ @@
    *   The plugin implementation definition.
    * @param \Drupal\geocoder\Geocoder $geocoder
    *   The geocoder service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   A config factory for retrieving required config objects.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, Geocoder $geocoder, ConfigFactoryInterface $config_factory) {
@@ @@
    * @param array $form
    *   An associative array containing the structure of the plugin form as built
    *   by static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    */
   public function validateConfigurationForm(array &$form, FormStateInterface $form_state) {
@@ @@
    * @param array $form
    *   An associative array containing the structure of the plugin form as built
    *   by static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    */
   public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/search_api_location/modules/facets_map_widget/facets_map_widget.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\search_api\Backend\BackendInterface;
 /**
  * @file
  * Contains hook implementations.
  */
-
 /**
  * Implements hook_facets_search_api_query_type_mapping_alter().
  */
 function facets_map_widget_facets_search_api_query_type_mapping_alter($backend_plugin_id, array &$query_types) {
   $backend_manager = \Drupal::service('plugin.manager.search_api.backend');
-  /** @var \Drupal\search_api\Backend\BackendInterface $plugin */
+  /** @var BackendInterface $plugin */
   $plugin = $backend_manager->createInstance($backend_plugin_id);

   // Check if rpt data type is supported by the backend plugin before adding the
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/search_api_location/modules/facets_map_widget/tests/src/
         Unit/Plugin/widget/RptMapWidgetTest.php" file, due to:                 
         "Analyze error: "Class                                                 
         Drupal\Tests\facets\Unit\Plugin\widget\WidgetTestBase not found.".     
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/search_api_location/modules/facets_map_widget/tests/src/
         Unit/Plugin/query_type/SearchApiRptTest.php" file, due to:             
         "Analyze error: "Class Drupal\facets\QueryType\QueryTypePluginBase not 
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/search_api_location/modules/facets_map_widget/tests/src/
         Unit/Plugin/processor/RptMapProcessorTest.php" file, due to:           
         "Analyze error: "Class Drupal\facets\Processor\ProcessorPluginBase not 
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/search_api_location/modules/facets_map_widget/src/Plugin
         /facets/widget/RptMapWidget.php" file, due to:                         
         "Analyze error: "Class Drupal\facets\Widget\WidgetPluginBase not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/search_api_location/modules/facets_map_widget/src/Plugin
         /facets/query_type/SearchApiRpt.php" file, due to:                     
         "Analyze error: "Class Drupal\facets\QueryType\QueryTypePluginBase not 
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/search_api_location/modules/facets_map_widget/src/Plugin
         /facets/processor/RptMapProcessor.php" file, due to:                   
         "Analyze error: "Class Drupal\facets\Processor\ProcessorPluginBase not 
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

