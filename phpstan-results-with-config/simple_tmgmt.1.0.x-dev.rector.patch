diff --git a/modules/simple_tmgmt_deepl/src/Plugin/tmgmt/Translator/SimpleTmgmtDeeplTranslator.php b/modules/simple_tmgmt_deepl/src/Plugin/tmgmt/Translator/SimpleTmgmtDeeplTranslator.php
index 9137129..5213d84 100755
--- a/modules/simple_tmgmt_deepl/src/Plugin/tmgmt/Translator/SimpleTmgmtDeeplTranslator.php
+++ b/modules/simple_tmgmt_deepl/src/Plugin/tmgmt/Translator/SimpleTmgmtDeeplTranslator.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simple_tmgmt_deepl\Plugin\tmgmt\Translator;
 
+use Drupal\simple_tmgmt\SimpleTmgmtInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\tmgmt\Entity\Translator;
 use Drupal\tmgmt\JobInterface;
@@ -32,7 +33,7 @@ class SimpleTmgmtDeeplTranslator extends DeeplProTranslator implements MachineTr
   /**
    * Local method to do request to DeepL Pro Translate service.
    *
-   * @param \Drupal\tmgmt\Entity\Translator $translator
+   * @param Translator $translator
    *   The translator entity to get the settings from.
    * @param array $query_params
    *   (Optional) Additional query params to be passed into the request.
@@ -48,7 +49,7 @@ class SimpleTmgmtDeeplTranslator extends DeeplProTranslator implements MachineTr
    */
   protected function doRequest(Translator $translator, array $query_params = [], array $options = []) {
     $configFactory = \Drupal::configFactory();
-    /** @var \Drupal\simple_tmgmt\SimpleTmgmtInterface $simpleTmgmt */
+    /** @var SimpleTmgmtInterface $simpleTmgmt */
     $simpleTmgmt = \Drupal::service('simple_tmgmt');
 
     $config = $configFactory->get('simple_tmgmt.settings');
diff --git a/modules/simple_tmgmt_file/src/Plugin/tmgmt/Translator/SimpleTmgmtFileMailTranslator.php b/modules/simple_tmgmt_file/src/Plugin/tmgmt/Translator/SimpleTmgmtFileMailTranslator.php
index b47c6c1..70ed2d7 100644
--- a/modules/simple_tmgmt_file/src/Plugin/tmgmt/Translator/SimpleTmgmtFileMailTranslator.php
+++ b/modules/simple_tmgmt_file/src/Plugin/tmgmt/Translator/SimpleTmgmtFileMailTranslator.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\simple_tmgmt_file\Plugin\tmgmt\Translator;
 
+use Drupal\simple_tmgmt\SimpleTmgmt;
+use Drupal\tmgmt\JobItemInterface;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\simple_tmgmt\SimpleTmgmtInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -31,28 +33,28 @@ class SimpleTmgmtFileMailTranslator extends FileTranslator implements ManualTran
   /**
    * Drupal\Core\Config\ConfigFactoryInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Drupal\simple_tmgmt\SimpleTmgmt definition.
    *
-   * @var \Drupal\simple_tmgmt\SimpleTmgmt
+   * @var SimpleTmgmt
    */
   protected $simpleTmgmt;
 
   /**
    * Drupal\Core\Datetime\DateFormatterInterface definition.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * Drupal\file\FileUsage\FileUsageInterface definition.
    *
-   * @var \Drupal\file\FileUsage\FileUsageInterface
+   * @var FileUsageInterface
    */
   protected $fileUsage;
 
@@ -62,10 +64,10 @@ class SimpleTmgmtFileMailTranslator extends FileTranslator implements ManualTran
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
-   * @param \Drupal\simple_tmgmt\SimpleTmgmtInterface $simple_tmgmt
-   * @param \Drupal\file\FileUsage\FileUsageInterface $file_usage
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param ConfigFactoryInterface $config_factory
+   * @param SimpleTmgmtInterface $simple_tmgmt
+   * @param FileUsageInterface $file_usage
+   * @param DateFormatterInterface $date_formatter
    */
   public function __construct(
     array $configuration,
@@ -115,15 +117,15 @@ class SimpleTmgmtFileMailTranslator extends FileTranslator implements ManualTran
     $path = $job->getSetting('scheme') . '://tmgmt_file/' . $name . '.' . $job->getSetting('export_format');
     $dirname = dirname($path);
     if (\Drupal::service('file_system')->prepareDirectory($dirname, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS)) {
-      $file = file_save_data($export->export($job), $path, FileSystemInterface::EXISTS_REPLACE);
+      $file = \Drupal::service('file.repository')->writeData($export->export($job), $path, FileSystemInterface::EXISTS_REPLACE);
       $this->fileUsage->add($file, 'tmgmt_file', 'tmgmt_job', $job->id());
-      $job->submitted($this->t('Exported file can be <a href="@url" download>downloaded</a>.', ['@url' => file_create_url($path)]));
+      $job->submitted($this->t('Exported file can be <a href="@url" download>downloaded</a>.', ['@url' => \Drupal::service('file_url_generator')->generateAbsoluteString($path)]));
 
       if ($job->getSetting('send_mail')) {
         // @todo check multiple items.
         $jobItems = $job->getItems();
         reset($jobItems);
-        /** @var \Drupal\tmgmt\JobItemInterface $jobItem */
+        /** @var JobItemInterface $jobItem */
         $jobItemKey = key($jobItems);
         $jobItem = $jobItems[$jobItemKey];
 
diff --git a/modules/simple_tmgmt_machine/simple_tmgmt_machine.module b/modules/simple_tmgmt_machine/simple_tmgmt_machine.module
index be57f63..54fb9e1 100644
--- a/modules/simple_tmgmt_machine/simple_tmgmt_machine.module
+++ b/modules/simple_tmgmt_machine/simple_tmgmt_machine.module
@@ -106,7 +106,7 @@ function simple_tmgmt_machine_form_node_form_alter(array &$form, FormStateInterf
   // - source (default translation)
   $formObject = $form_state->getFormObject();
   if ($formObject instanceof EntityForm) {
-    /** @var \Drupal\node\NodeInterface $entity */
+    /** @var NodeInterface $entity */
     $entity = $formObject->getEntity();
     if (!$entity->isDefaultTranslation() && !$entity->isNewTranslation()) {
       // Add a group.
@@ -136,7 +136,7 @@ function simple_tmgmt_machine_form_node_form_alter(array &$form, FormStateInterf
  * Job item edit form.
  */
 function simple_tmgmt_machine_form_tmgmt_job_item_edit_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\tmgmt\JobItemInterface $jobItem */
+  /** @var JobItemInterface $jobItem */
   $jobItem = \Drupal::routeMatch()->getParameter('tmgmt_job_item');
   if (
     !$jobItem instanceof JobItemInterface ||
@@ -151,7 +151,7 @@ function simple_tmgmt_machine_form_tmgmt_job_item_edit_form_alter(array &$form,
   // There might be another way to get the entity?
   $options = $jobItem->getSourceUrl()->getOptions();
   if (array_key_exists('entity', $options)) {
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $options['entity'];
     $targetLangCode = $jobItem->getJob()->getTargetLangcode();
     $stateKey = SimpleTmgmt::getStateKey($entity, $targetLangCode);
diff --git a/simple_tmgmt.module b/simple_tmgmt.module
index b8470c5..6cac502 100644
--- a/simple_tmgmt.module
+++ b/simple_tmgmt.module
@@ -1,5 +1,10 @@
 <?php
 
+use Drupal\simple_tmgmt\SimpleTmgmtInterface;
+use Drupal\tmgmt\TranslatorManager;
+use Drupal\views\ViewExecutable;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\content_moderation\ModerationInformationInterface;
 /**
  * @file
  * Contains simple_tmgmt.module.
@@ -83,7 +88,7 @@ function simple_tmgmt_mail($key, &$message, $params) {
  * Step 1, translation form.
  */
 function simple_tmgmt_form_tmgmt_content_translate_form_alter(&$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+  /** @var ContentEntityInterface $entity */
   $entity = $form_state->get('entity');
 
   // Does not cover yet forms for configuration entities.
@@ -115,7 +120,7 @@ function simple_tmgmt_form_tmgmt_content_translate_form_alter(&$form, FormStateI
   }
 
   // Add the help link.
-  /** @var \Drupal\simple_tmgmt\SimpleTmgmt $simpleTmgmt */
+  /** @var SimpleTmgmt $simpleTmgmt */
   $simpleTmgmt = \Drupal::service('simple_tmgmt');
   $form['actions']['help'] = [
     '#type' => 'markup',
@@ -265,7 +270,7 @@ function simple_tmgmt_form_tmgmt_content_translate_form_alter(&$form, FormStateI
  * Step 2, Job edit form.
  */
 function simple_tmgmt_form_tmgmt_job_edit_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\simple_tmgmt\SimpleTmgmtInterface $simpleTmgmt */
+  /** @var SimpleTmgmtInterface $simpleTmgmt */
   $simpleTmgmt = \Drupal::service('simple_tmgmt');
 
   // Remove disabled actions.
@@ -333,7 +338,7 @@ function simple_tmgmt_form_tmgmt_job_edit_form_alter(array &$form, FormStateInte
       // in_array($defaultProvider, $validProviders) &&.
       $form_state->getValue('translator') !== $defaultProvider
     ) {
-      /** @var \Drupal\tmgmt\JobInterface $job */
+      /** @var JobInterface $job */
       $job = \Drupal::routeMatch()->getParameter('tmgmt_job');
       $form['translator_wrapper']['translator']['#default_value'] = $defaultProvider;
       // @todo ideally trigger ajax change, disabling translator to prevent on change issues.
@@ -346,7 +351,7 @@ function simple_tmgmt_form_tmgmt_job_edit_form_alter(array &$form, FormStateInte
         unset($form['translator_wrapper']['logo']);
       }
 
-      /** @var \Drupal\tmgmt\TranslatorManager $translatorManager */
+      /** @var TranslatorManager $translatorManager */
       $translatorManager = \Drupal::service('plugin.manager.tmgmt.translator');
       $settingsForm = [];
       if (!$job->hasTranslator()) {
@@ -391,11 +396,11 @@ function simple_tmgmt_form_tmgmt_job_edit_form_alter(array &$form, FormStateInte
       // while using manual translation.
       $itemsAmount = count($form['job_items_wrapper']['items']['view']['#rows']);
       if ($itemsAmount === 1) {
-        /** @var \Drupal\views\ViewExecutable $view */
+        /** @var ViewExecutable $view */
         $view = $form['job_items_wrapper']['items']['view']['#view'];
         $view->execute();
         $result = $view->result;
-        /** @var \Drupal\tmgmt\JobItemInterface $jobItem */
+        /** @var JobItemInterface $jobItem */
         $jobItem = $result[0]->_entity;
 
         // Replace the label with markup, and set the default value
@@ -415,7 +420,7 @@ function simple_tmgmt_form_tmgmt_job_edit_form_alter(array &$form, FormStateInte
  */
 function _simple_tmgmt_form_tmgmt_job_edit_form_submit_handler(array &$form, FormStateInterface $form_state) {
   // Set form redirect for Machine translator.
-  /** @var \Drupal\simple_tmgmt\SimpleTmgmtInterface $simpleTmgmt */
+  /** @var SimpleTmgmtInterface $simpleTmgmt */
   $simpleTmgmt = \Drupal::service('simple_tmgmt');
   if ($simpleTmgmt->isMachineTranslator($form_state->getValue('translator'))) {
     $job = \Drupal::routeMatch()->getParameter('tmgmt_job');
@@ -447,7 +452,7 @@ function _simple_tmgmt_form_tmgmt_job_edit_form_submit_handler(array &$form, For
  * Step 3, Job item edit form.
  */
 function simple_tmgmt_form_tmgmt_job_item_edit_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\simple_tmgmt\SimpleTmgmtInterface $simpleTmgmt */
+  /** @var SimpleTmgmtInterface $simpleTmgmt */
   $simpleTmgmt = \Drupal::service('simple_tmgmt');
 
   // Remove disabled actions.
@@ -461,7 +466,7 @@ function simple_tmgmt_form_tmgmt_job_item_edit_form_alter(array &$form, FormStat
   // Changes the UX for the tick boxes status (red/green, message).
   $form['#attached']['library'][] = 'simple_tmgmt/job_item_edit_form_behaviors';
 
-  /** @var \Drupal\tmgmt\JobItemInterface $jobItem */
+  /** @var JobItemInterface $jobItem */
   $jobItem = \Drupal::routeMatch()->getParameter('tmgmt_job_item');
   if (
     !$jobItem instanceof JobItemInterface ||
@@ -473,14 +478,14 @@ function simple_tmgmt_form_tmgmt_job_item_edit_form_alter(array &$form, FormStat
   // There might be another way to get the entity?
   $options = $jobItem->getSourceUrl()->getOptions();
   if (array_key_exists('entity', $options)) {
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $options['entity'];
     // Add a custom submit handler if not handled by tmgmt_content_moderation.
     // @todo cover other cases for other entity types:
     if ($entity instanceof ContentEntityInterface) {
       $hasEntityWorkflow = FALSE;
       if (\Drupal::moduleHandler()->moduleExists('content_moderation')) {
-        /** @var \Drupal\content_moderation\ModerationInformationInterface $contentModerationInformation */
+        /** @var ModerationInformationInterface $contentModerationInformation */
         $contentModerationInformation = \Drupal::service('content_moderation.moderation_information');
         $hasEntityWorkflow = $contentModerationInformation->getWorkflowForEntityTypeAndBundle($entity->getEntityTypeId(), $entity->bundle()) instanceof WorkflowInterface;
       }
@@ -496,7 +501,7 @@ function simple_tmgmt_form_tmgmt_job_item_edit_form_alter(array &$form, FormStat
  * Custom submit handler to redirect to the translated entity once the Job Item is completed.
  */
 function _simple_tmgmt_form_tmgmt_job_item_edit_form_submit_handler(array &$form, FormStateInterface $form_state) {
-  /** @var \Drupal\tmgmt\JobItemInterface $jobItem */
+  /** @var JobItemInterface $jobItem */
   $jobItem = \Drupal::routeMatch()->getParameter('tmgmt_job_item');
   // Source entity url (e.g. node).
   $entityUrl = $jobItem->getSourceUrl();
@@ -514,7 +519,7 @@ function _simple_tmgmt_form_tmgmt_job_item_edit_form_submit_handler(array &$form
  */
 function simple_tmgmt_form_tmgmt_overview_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   if (!empty($form['items']['#options'])) {
-    /** @var \Drupal\simple_tmgmt\SimpleTmgmtInterface $simpleTmgmt */
+    /** @var SimpleTmgmtInterface $simpleTmgmt */
     $simpleTmgmt = \Drupal::service('simple_tmgmt');
     foreach ($form['items']['#options'] as $entityItemKey => $entityItem) {
       foreach ($entityItem as $entryKey => $entryValue) {
@@ -537,7 +542,7 @@ function simple_tmgmt_form_tmgmt_overview_form_alter(&$form, FormStateInterface
  * When the job is deleted, redirect to the node translation form.
  */
 function simple_tmgmt_form_tmgmt_job_delete_form_alter(&$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\simple_tmgmt\SimpleTmgmtInterface $simpleTmgmt */
+  /** @var SimpleTmgmtInterface $simpleTmgmt */
   $simpleTmgmt = \Drupal::service('simple_tmgmt');
   $simpleTmgmt->setTranslationFormUrl($form_state);
   $form['actions']['submit']['#submit'][] = '_simple_tmgmt_delete_job_form_submit_handler';
diff --git a/src/Controller/JobController.php b/src/Controller/JobController.php
index ad356f7..de0e994 100644
--- a/src/Controller/JobController.php
+++ b/src/Controller/JobController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\simple_tmgmt\Controller;
 
+use Drupal\Core\Routing\RouteProviderInterface;
+use Drupal\simple_tmgmt\SimpleTmgmtInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Url;
 use Drupal\tmgmt\TMGMTException;
@@ -21,11 +23,11 @@ class JobController extends ControllerBase {
    * @param string $langcode
    * @param string $default_provider
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    */
   public function createJob($entity_type_id, $entity_id, $langcode, $default_provider) {
     // The default destination is the translation overview form of the entity.
-    /** @var \Drupal\Core\Routing\RouteProviderInterface $routeProvider */
+    /** @var RouteProviderInterface $routeProvider */
     $routeProvider = \Drupal::service('router.route_provider');
     $entityTranslationFormRoute = 'entity.' . $entity_type_id . '.content_translation_overview';
     try {
@@ -41,7 +43,7 @@ class JobController extends ControllerBase {
         $item = $job->addItem('content', $entity->getEntityTypeId(), $entity->id());
         // Override the destination Url for Machine translators, it should lead to the
         // Job Item edit form.
-        /** @var \Drupal\simple_tmgmt\SimpleTmgmtInterface $simpleTmgmt */
+        /** @var SimpleTmgmtInterface $simpleTmgmt */
         $simpleTmgmt = \Drupal::service('simple_tmgmt');
         if ($simpleTmgmt->isMachineTranslator($default_provider)) {
           $destinationUrl = Url::fromRoute('entity.tmgmt_job_item.canonical', [
diff --git a/src/EventSubscriber/InactiveJobsSubscriber.php b/src/EventSubscriber/InactiveJobsSubscriber.php
index 259f8c9..a55fa4c 100644
--- a/src/EventSubscriber/InactiveJobsSubscriber.php
+++ b/src/EventSubscriber/InactiveJobsSubscriber.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\simple_tmgmt\EventSubscriber;
 
+use Symfony\Contracts\EventDispatcher\Event;
+use Symfony\Component\HttpKernel\Event\RequestEvent;
+use Drupal\node\NodeInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Link;
 use Drupal\Core\Messenger\MessengerInterface;
@@ -11,9 +14,7 @@ use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Core\Url;
 use Drupal\tmgmt\JobItemInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -26,28 +27,28 @@ class InactiveJobsSubscriber implements EventSubscriberInterface {
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Drupal\Core\Render\RendererInterface definition.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * Drupal\Core\Messenger\MessengerInterface definition.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Drupal\Core\Config\ConfigFactoryInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -86,17 +87,17 @@ class InactiveJobsSubscriber implements EventSubscriberInterface {
    * for the same node at the same time (several tabs, or different user)
    * and the translation page could be (re)loaded meanwhile.
    *
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param Event $event
    *   The dispatched event.
    */
   public function kernelRequest(Event $event) {
-    if ($event instanceof GetResponseEvent) {
+    if ($event instanceof RequestEvent) {
       $request = $event->getRequest();
       $routeName = $request->get('_route');
 
       // Could be extended to other entity types.
       if ($routeName === 'entity.node.content_translation_overview') {
-        /** @var \Drupal\node\NodeInterface $node */
+        /** @var NodeInterface $node */
         $node = $request->attributes->get('node');
         try {
           $tmgmtJobItemStorage = $this->entityTypeManager->getStorage('tmgmt_job_item');
diff --git a/src/Form/JobDeleteConfirmForm.php b/src/Form/JobDeleteConfirmForm.php
index bdc34e5..cc00988 100644
--- a/src/Form/JobDeleteConfirmForm.php
+++ b/src/Form/JobDeleteConfirmForm.php
@@ -31,14 +31,14 @@ class JobDeleteConfirmForm extends ConfirmFormBase {
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * JobDeleteConfirmForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
     $this->entityTypeManager = $entity_type_manager;
@@ -76,7 +76,7 @@ class JobDeleteConfirmForm extends ConfirmFormBase {
         'item_id' => $this->entityId,
       ]);
       if (!empty($inactiveJobItems)) {
-        /** @var \Drupal\tmgmt\JobItemInterface $inactiveJobItem */
+        /** @var JobItemInterface $inactiveJobItem */
         foreach ($inactiveJobItems as $inactiveJobItem) {
           $jobIds[] = $inactiveJobItem->getJobId();
         }
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index 75025d7..7bf903e 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -18,15 +18,15 @@ class SettingsForm extends ConfigFormBase {
   /**
    * Drupal\Core\Render\RendererInterface definition.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * SettingsForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param ConfigFactoryInterface $config_factory
+   * @param RendererInterface $renderer
    */
   public function __construct(ConfigFactoryInterface $config_factory, RendererInterface $renderer) {
     parent::__construct($config_factory);
diff --git a/src/Form/TestMailForm.php b/src/Form/TestMailForm.php
index 7517989..865ab9c 100644
--- a/src/Form/TestMailForm.php
+++ b/src/Form/TestMailForm.php
@@ -15,14 +15,14 @@ class TestMailForm extends FormBase {
   /**
    * Drupal\simple_tmgmt\SimpleTmgmtInterface definition.
    *
-   * @var \Drupal\simple_tmgmt\SimpleTmgmtInterface
+   * @var SimpleTmgmtInterface
    */
   protected $simpleTmgmt;
 
   /**
    * TestMailForm constructor.
    *
-   * @param \Drupal\simple_tmgmt\SimpleTmgmtInterface $simple_tmgmt
+   * @param SimpleTmgmtInterface $simple_tmgmt
    */
   public function __construct(SimpleTmgmtInterface $simple_tmgmt) {
     $this->simpleTmgmt = $simple_tmgmt;
diff --git a/src/ManualTranslatorUi.php b/src/ManualTranslatorUi.php
index 38bbc04..8ac3e7d 100644
--- a/src/ManualTranslatorUi.php
+++ b/src/ManualTranslatorUi.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simple_tmgmt;
 
+use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\tmgmt\JobInterface;
@@ -17,7 +18,7 @@ class ManualTranslatorUi extends FileTranslatorUi {
    *
    * @param string $deliveryDays
    *
-   * @return \Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    */
   public static function getMinimumDeliveryDate($deliveryDays) {
     $systemDateConfig = \Drupal::config('system.date');
@@ -30,13 +31,13 @@ class ManualTranslatorUi extends FileTranslatorUi {
   /**
    * Formats the date.
    *
-   * @param \Drupal\Core\Datetime\DrupalDateTime $date
+   * @param DrupalDateTime $date
    * @param string $format
    *
    * @return string
    */
   public static function formatDate(DrupalDateTime $date, $format) {
-    /** @var \Drupal\Core\Datetime\DateFormatterInterface $dateFormatter */
+    /** @var DateFormatterInterface $dateFormatter */
     $dateFormatter = \Drupal::service('date.formatter');
     return $dateFormatter->format($date->getTimestamp(), 'custom', $format);
   }
@@ -101,7 +102,7 @@ class ManualTranslatorUi extends FileTranslatorUi {
    *
    * @param array $element
    *   The input element to validate.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function validateDeliveryDate(array $element, FormStateInterface &$form_state) {
diff --git a/src/SimpleTmgmt.php b/src/SimpleTmgmt.php
index 3eb4925..ac324b0 100644
--- a/src/SimpleTmgmt.php
+++ b/src/SimpleTmgmt.php
@@ -35,46 +35,46 @@ class SimpleTmgmt implements SimpleTmgmtInterface {
   /**
    * Drupal\Core\Mail\MailManagerInterface definition.
    *
-   * @var \Drupal\Core\Mail\MailManagerInterface
+   * @var MailManagerInterface
    */
   protected $pluginManagerMail;
 
   /**
    * Drupal\Core\Session\AccountProxyInterface definition.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * Drupal\Core\Language\LanguageManagerInterface definition.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Drupal\Core\Render\RendererInterface definition.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * Drupal\Core\Config\ConfigFactoryInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * SimpleTmgmt constructor.
    *
-   * @param \Drupal\Core\Mail\MailManagerInterface $plugin_manager_mail
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
-   * @param \Drupal\Core\Render\RendererInterface $renderer
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param MailManagerInterface $plugin_manager_mail
+   * @param AccountProxyInterface $current_user
+   * @param LanguageManagerInterface $language_manager
+   * @param RendererInterface $renderer
+   * @param ConfigFactoryInterface $config_factory
    */
   public function __construct(
     MailManagerInterface $plugin_manager_mail,
@@ -231,7 +231,7 @@ class SimpleTmgmt implements SimpleTmgmtInterface {
   /**
    * Creates a Drupal State key for an entity translation.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param $langCode
    *
    * @return string
@@ -263,13 +263,13 @@ class SimpleTmgmt implements SimpleTmgmtInterface {
    * {@inheritdoc}
    */
   public function setTranslationFormUrl(FormStateInterface $form_state) {
-    /** @var \Drupal\tmgmt\JobInterface $job */
+    /** @var JobInterface $job */
     $job = \Drupal::routeMatch()->getParameter('tmgmt_job');
     if ($job instanceof JobInterface) {
       $jobItems = $job->getItems();
       if (!empty($jobItems)) {
         reset($jobItems);
-        /** @var \Drupal\tmgmt\JobItemInterface $jobItem */
+        /** @var JobItemInterface $jobItem */
         $jobItemKey = key($jobItems);
         $jobItem = $jobItems[$jobItemKey];
         if (!empty($jobItem->getSourceUrl())) {
diff --git a/src/SimpleTmgmtInterface.php b/src/SimpleTmgmtInterface.php
index 10da40c..b80f402 100644
--- a/src/SimpleTmgmtInterface.php
+++ b/src/SimpleTmgmtInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\simple_tmgmt;
 
+use Drupal\tmgmt\Entity\Translator;
+use Drupal\Core\Url;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Language\LanguageInterface;
@@ -15,15 +17,15 @@ interface SimpleTmgmtInterface {
   /**
    * Returns a list of active translators.
    *
-   * @return \Drupal\tmgmt\Entity\Translator[]
+   * @return Translator[]
    */
   public function getActiveTranslators();
 
   /**
    * Checks if a translation supports the provider.
    *
-   * @param \Drupal\tmgmt\TranslatorInterface $translator
-   * @param \Drupal\Core\Language\LanguageInterface $sourceLanguage
+   * @param TranslatorInterface $translator
+   * @param LanguageInterface $sourceLanguage
    * @param string $targetLangCode
    *
    * @return bool
@@ -79,11 +81,11 @@ interface SimpleTmgmtInterface {
    * - creates the Job
    * - redirects to the Job canonical url.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    * @param string $langcode
    * @param string $default_provider
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   public function getJobCreateUrl(ContentEntityInterface $entity, $langcode, $default_provider);
 
@@ -93,7 +95,7 @@ interface SimpleTmgmtInterface {
    * Scope: Job delete or edit forms.
    * So the delete operation can redirect to the entity translation form.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function setTranslationFormUrl(FormStateInterface $form_state);
 
diff --git a/tests/src/Functional/LoadTest.php b/tests/src/Functional/LoadTest.php
index c50f0fa..66b0744 100644
--- a/tests/src/Functional/LoadTest.php
+++ b/tests/src/Functional/LoadTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\simple_tmgmt\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
 
@@ -22,14 +23,14 @@ class LoadTest extends BrowserTestBase {
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
