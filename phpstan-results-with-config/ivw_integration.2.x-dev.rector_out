modules/contrib/ivw_integration/ivw_integration.install
modules/contrib/ivw_integration/ivw_integration.module
modules/contrib/ivw_integration/ivw_integration.tokens.inc
modules/contrib/ivw_integration/src/Form/SettingsForm.php
modules/contrib/ivw_integration/src/IvwLookupService.php
modules/contrib/ivw_integration/src/IvwLookupServiceInterface.php
modules/contrib/ivw_integration/src/IvwTracker.php
modules/contrib/ivw_integration/src/IvwTrackerInterface.php
modules/contrib/ivw_integration/src/Plugin/Block/IvwCallBlock.php
modules/contrib/ivw_integration/src/Plugin/Field/FieldFormatter/IvwEmptyFormatter.php
modules/contrib/ivw_integration/src/Plugin/Field/FieldType/IvwSettings.php
modules/contrib/ivw_integration/src/Plugin/Field/FieldWidget/IvwSettingsWidget.php
modules/contrib/ivw_integration/src/Plugin/GraphQL/DataProducer/IvwCall.php
modules/contrib/ivw_integration/src/Plugin/GraphQL/SchemaExtension/IvwSchemaExtension.php
modules/contrib/ivw_integration/tests/src/Functional/IvwIntegrationOverrideTest.php
modules/contrib/ivw_integration/tests/src/Unit/IvwLookupServiceTest.php

10 files with changes
=====================

1) modules/contrib/ivw_integration/tests/src/Unit/IvwLookupServiceTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\ivw_integration\Unit;

+use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Tests\UnitTestCase;
 use Drupal\Core\Config\Config;
 use Drupal\ivw_integration\IvwLookupService;
@@ @@
   /**
    * The route match mock.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatchMock;

@@ @@
   /**
    * The entity type manager mock.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManagerMock;

@@ @@
   /**
    * Config Factory Mock -> provides base configuration required for Testing.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactoryMock;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->routeMatchMock = $this->createMock('\Drupal\Core\Routing\RouteMatchInterface');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/ivw_integration/tests/src/Functional/IvwIntegrationOverrideTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\ivw_integration\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * A test user with permission to access the administrative toolbar.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create and log in an administrative user.
@@ @@
         $termEdit["field_ivw_settings[0][$termOverrideName]"] = $termOverrideValue;
       }

-      $this->drupalPostForm(NULL, $termEdit, 'Save');
+      $this->submitForm($termEdit, 'Save');

       $terms = taxonomy_term_load_multiple_by_name($termName);
       $term = reset($terms);
@@ @@
     $this->drupalGet('node/add/ivw_test');
     $this->assertSession()->statusCodeEquals(200);

-    $this->drupalPostForm(NULL, $nodeEdit, 'Save');
+    $this->submitForm($nodeEdit, 'Save');
     $this->assertSession()->pageTextContains($expectedOutput);
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/ivw_integration/src/Plugin/Field/FieldWidget/IvwSettingsWidget.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The IVW lookup service.
    *
-   * @var \Drupal\ivw_integration\IvwLookupServiceInterface
+   * @var IvwLookupServiceInterface
    */
   protected $lookupService;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/ivw_integration/src/Plugin/Block/IvwCallBlock.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The main menu object.
    *
-   * @var \Drupal\ivw_integration\IvwTracker
+   * @var IvwTracker
    */
   protected $ivwTracker;

@@ @@
   /**
    * The config factory object.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\ivw_integration\IvwTracker $ivw_tracker
+   * @param IvwTracker $ivw_tracker
    *   The ivw tracker object.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory object.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/ivw_integration/src/IvwTracker.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManager
+   * @var LanguageManager
    */
   protected $languageManager;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The token object.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;

@@ @@
   /**
    * The IVW lookup service.
    *
-   * @var \Drupal\ivw_integration\IvwLookupServiceInterface
+   * @var IvwLookupServiceInterface
    */
   protected $lookupService;

@@ @@
   /**
    * Generates IVW tracking information.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   Token service.
-   * @param \Drupal\ivw_integration\IvwLookupServiceInterface $lookupService
+   * @param IvwLookupServiceInterface $lookupService
    *   The IVW lookup service.
-   * @param \Drupal\Core\Language\LanguageManager $language_manager
+   * @param LanguageManager $language_manager
    *   The Drupal language manager.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/ivw_integration/src/IvwLookupServiceInterface.php:28

    ---------- begin diff ----------
@@ @@
    *
    * @param string $name
    *   The name of the IVW property to look up.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $routeMatch
+   * @param RouteMatchInterface $routeMatch
    *   The route matching the entity (node, term) on which to look up
    *   properties.
    * @param bool $parentOnly
@@ @@
    *
    * @param string $name
    *   The name of the IVW property to look up.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The content entity (usually node) to look up the property on.
    * @param bool $parentOnly
    *   If set to TRUE, skips lookup on first level ivw_settings field.
@@ @@
    *
    * @param string $name
    *   The name of the IVW property to look up.
-   * @param \Drupal\taxonomy\TermInterface $term
+   * @param TermInterface $term
    *   The term to look up the property on.
    * @param bool $parentOnly
    *   If set to TRUE, skips lookup on first level ivw_settings field.
@@ @@
   /**
    * Look up cache tags for the provided route.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route
+   * @param RouteMatchInterface $route
    *   The route, for which cache tags should be found.
    *
    * @return array|\string[]
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/ivw_integration/src/IvwLookupService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ivw_integration;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\taxonomy\TermStorageInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ @@
   /**
    * The route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $currentRouteMatch;
   /**
    * IVW integration configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * IvwLookupService constructor.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $currentRouteMatch
+   * @param RouteMatchInterface $currentRouteMatch
    *   The route match.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(RouteMatchInterface $currentRouteMatch, ConfigFactoryInterface $configFactory, EntityTypeManagerInterface $entityTypeManager) {
@@ @@
    */
   public function byRoute($name, RouteMatchInterface $route, $parentOnly = FALSE) {
     foreach (self::getSupportedEntityParameters() as $parameter) {
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       if ($entity = $route->getParameter($parameter)) {

         if (is_numeric($entity)) {
@@ @@
     $cache_tags = [];

     foreach (self::getSupportedEntityParameters() as $parameter) {
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       if ($entity = $route->getParameter($parameter)) {

         if (is_numeric($entity)) {
@@ @@
   /**
    * Gets cache tags of a term and its parents.
    *
-   * @param \Drupal\taxonomy\TermInterface $term
+   * @param TermInterface $term
    *   The term, from which cache tags should be gathered.
    *
    * @return array
@@ @@
    *   The gathered cache tags.
    */
   private function getCacheTagsByTerm(TermInterface $term) {
-    /** @var \Drupal\taxonomy\TermStorageInterface $termStorage  */
+    /** @var TermStorageInterface $termStorage  */
     $termStorage = $this->entityTypeManager->getStorage('taxonomy_term');

     $cache_tags = $term->getCacheTags();
@@ @@
   /**
    * Gets the term associated with an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity, in which the term should be found.
    *
-   * @return bool|\Drupal\taxonomy\TermInterface
+   * @return bool|TermInterface
    *   The Term or false.
    */
   private function getTermOfNode(ContentEntityInterface $entity) {
@@ @@

         $fieldName = $fieldDefinition->getName();
         if ($tid = $entity->$fieldName->target_id) {
-          /** @var \Drupal\taxonomy\TermInterface $term */
+          /** @var TermInterface $term */
           $term = $this->entityTypeManager->getStorage('taxonomy_term')
             ->load($tid);
           if ($term) {
@@ @@
    *
    * @param string $name
    *   The name of the IVW property to look up.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The content entity (usually node) to look up the property on.
    * @param bool $parentOnly
    *   If set to TRUE, skips lookup on first level ivw_settings field.
@@ @@
       if (!isset($termOverride) && $fieldType === 'entity_reference' && $fieldDefinition->getSetting('target_type') === 'taxonomy_term') {
         $fieldName = $fieldDefinition->getName();
         if ($tid = $entity->$fieldName->target_id) {
-          /** @var \Drupal\taxonomy\TermInterface $term */
+          /** @var TermInterface $term */
           $term = $this->entityTypeManager->getStorage('taxonomy_term')
             ->load($tid);

@@ @@
    *
    * @param string $name
    *   The name of the IVW property to look up.
-   * @param \Drupal\taxonomy\TermInterface $term
+   * @param TermInterface $term
    *   The term to look up the property on.
    * @param bool $parentOnly
    *   If set to TRUE, skips lookup on first level ivw_settings field.
@@ @@
       }
     }

-    /** @var \Drupal\taxonomy\TermStorageInterface $termStorage  */
+    /** @var TermStorageInterface $termStorage  */
     $termStorage = $this->entityTypeManager->getStorage('taxonomy_term');

     foreach ($termStorage->loadParents($term->id()) as $parent) {
@@ @@
    *
    * @param string $name
    *   The name of the IVW property to look up.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $fieldDefinition
+   * @param FieldDefinitionInterface $fieldDefinition
    *   The field definition interface.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity interface.
    *
    * @return string|null
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/ivw_integration/src/Form/SettingsForm.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManager
+   * @var LanguageManager
    *   Language manager.
    */
   protected $languageManager;
@@ @@
   /**
    * The token object.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token = [];

@@ @@
   /**
    * Constructs a \Drupal\ivw_integration\SettingsForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token object.
-   * @param \Drupal\Core\Language\LanguageManager $language_manager
+   * @param LanguageManager $language_manager
    *   The Language manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, Token $token, LanguageManager $language_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/ivw_integration/ivw_integration.tokens.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\ivw_integration\IvwLookupServiceInterface;
 /**
  * @file
  * Builds placeholder replacement tokens for ivw-related data.
@@ @@
     elseif (isset($data['term']) && $data['term'] instanceof TermInterface) {
       $lookupFrom = 'term';
     }
-    /** @var \Drupal\ivw_integration\IvwLookupServiceInterface $lookup */
+    /** @var IvwLookupServiceInterface $lookup */
     $lookup = \Drupal::service('ivw_integration.lookup');
     foreach ($tokens as $name => $original) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


10) modules/contrib/ivw_integration/ivw_integration.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\user\RoleInterface;
 /**
  * @file
  * Contains installation hooks for module.
@@ @@
 function ivw_integration_update_8103() {
   // Update hook 8102 did not include the save operation, thus retry it here.
   $roles = Role::loadMultiple();
-  /** @var \Drupal\user\RoleInterface $role */
+  /** @var RoleInterface $role */
   foreach ($roles as $role) {
     if ($role->hasPermission("administer site configuration") && !$role->hasPermission("administer ivw integration configuration")) {
       $role->grantPermission("administer ivw integration configuration");
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/ivw_integration/src/Plugin/GraphQL/SchemaExtension/IvwSc
         hemaExtension.php" file, due to:                                       
         "Analyze error: "Class                                                 
         Drupal\graphql\Plugin\GraphQL\SchemaExtension\SdlSchemaExtensionPluginBas
         e not found.". Include your files in                                   
         "$rectorConfig->autoloadPaths([...]);" or                              
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/ivw_integration/src/Plugin/GraphQL/DataProducer/IvwCall.
         php" file, due to:                                                     
         "Analyze error: "Class                                                 
         Drupal\graphql\Plugin\GraphQL\DataProducer\DataProducerPluginBase not  
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

