modules/contrib/wordfilter/src/Annotation/WordfilterProcess.php
modules/contrib/wordfilter/src/Entity/WordfilterConfiguration.php
modules/contrib/wordfilter/src/Entity/WordfilterConfigurationInterface.php
modules/contrib/wordfilter/src/Form/WordfilterConfigurationDeleteForm.php
modules/contrib/wordfilter/src/Form/WordfilterConfigurationForm.php
modules/contrib/wordfilter/src/Plugin/Filter/WordFilter.php
modules/contrib/wordfilter/src/Plugin/WordfilterProcess/DefaultWordfilterProcess.php
modules/contrib/wordfilter/src/Plugin/WordfilterProcess/TokenWordfilterProcess.php
modules/contrib/wordfilter/src/Plugin/WordfilterProcessBase.php
modules/contrib/wordfilter/src/Plugin/WordfilterProcessInterface.php
modules/contrib/wordfilter/src/Plugin/WordfilterProcessManager.php
modules/contrib/wordfilter/src/WordfilterConfigurationAccessControlHandler.php
modules/contrib/wordfilter/src/WordfilterConfigurationHtmlRouteProvider.php
modules/contrib/wordfilter/src/WordfilterConfigurationListBuilder.php
modules/contrib/wordfilter/src/WordfilterItem.php
modules/contrib/wordfilter/src/WordfilterPermissions.php
modules/contrib/wordfilter/tests/src/Functional/WordfilterApplianceTest.php
modules/contrib/wordfilter/tests/src/Unit/DefaultWordfilterProcessUnitTest.php
modules/contrib/wordfilter/tests/src/Unit/TokenWordfilterProcessUnitTest.php
modules/contrib/wordfilter/tests/src/Unit/WordfilterConfigurationUnitTest.php
modules/contrib/wordfilter/wordfilter.module

15 files with changes
=====================

1) modules/contrib/wordfilter/wordfilter.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\comment\CommentInterface;
 /**
  * @file
  * Contains wordfilter.module..
@@ @@
  * Implements hook_form_FORM_ID_alter().
  *
  * @param array &$form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  * @param string $form_id
  */
 function wordfilter_form_node_type_form_alter(&$form, FormStateInterface $form_state, $form_id) {
@@ @@

 /**
  * Implements hook_form_FORM_ID_alter().
- * 
+ *
  * @param array &$form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  * @param string $form_id
  */
 function wordfilter_form_comment_type_form_alter(&$form, FormStateInterface $form_state, $form_id) {
@@ @@

 /**
  * Add wordfilter display options to a given entity form.
- * 
+ *
  * The corresponding entity class
  * must implement ThirdPartySettingsInterface.
- * 
+ *
  * @param array &$form
  *   The form array to add the display options.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state.
  */
 function wordfilter_add_display_options_to_entity_form(&$form, FormStateInterface $form_state) {
-  /** @var \Drupal\Core\Config\Entity\ThirdPartySettingsInterface $entity */
+  /** @var ThirdPartySettingsInterface $entity */
   $entity = $form_state->getFormObject()->getEntity();
   $account = \Drupal::currentUser();

@@ @@
  *
  * @param string $entity_type
  *   The entity type, e.g. 'node_type' or 'comment_type'.
- * @param \Drupal\Core\Config\Entity\ThirdPartySettingsInterface $entity
+ * @param ThirdPartySettingsInterface $entity
  *   The corresponding entity object, must implement ThirdPartySettingsInterface.
  * @param array &$form
  *   The form render array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state.
  */
 function wordfilter_form_entity_form_builder($entity_type, $entity, &$form, FormStateInterface $form_state) {
@@ @@
  * @param array $context
  */
 function wordfilter_entity_display_build_alter(&$build, $context) {
-  /** @var \Drupal\Core\Entity\EntityInterface $entity */
+  /** @var EntityInterface $entity */
   $entity = $context['entity'];
   $type_id = $entity->getEntityTypeId();

@@ @@
       return;
   }
   
-  /** @var \Drupal\Core\Config\Entity\ThirdPartySettingsInterface $type */
+  /** @var ThirdPartySettingsInterface $type */
   $type = \Drupal::entityTypeManager()
     ->getStorage($type_id . '_type')->load($entity->bundle());

@@ @@
  * Implements template_preprocess_comment().
  */
 function wordfilter_preprocess_comment(&$variables) {
-  /** @var \Drupal\comment\CommentInterface $comment */
+  /** @var CommentInterface $comment */
   $comment = $variables['elements']['#comment'];
   
-  /** @var \Drupal\Core\Config\Entity\ThirdPartySettingsInterface $type */
+  /** @var ThirdPartySettingsInterface $type */
   $type = \Drupal::entityTypeManager()
     ->getStorage('comment_type')->load($comment->bundle());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/wordfilter/tests/src/Unit/WordfilterConfigurationUnitTest.php:12

    ---------- begin diff ----------
@@ @@
 class WordfilterConfigurationUnitTest extends UnitTestCase {

   /**
-   * @var \Drupal\wordfilter\Entity\WordfilterConfiguration
+   * @var WordfilterConfiguration
    */
   protected $wordfilter_config = NULL;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->wordfilter_config = new WordfilterConfiguration([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/wordfilter/tests/src/Unit/TokenWordfilterProcessUnitTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\wordfilter\Unit;

+use Drupal\wordfilter\Plugin\WordfilterProcessInterface;
 use \Drupal\Tests\UnitTestCase;
 use \Drupal\wordfilter\Entity\WordfilterConfiguration;
 use \Drupal\wordfilter\Plugin\WordfilterProcess\TokenWordfilterProcess;
@@ @@
  */
 class TokenWordfilterProcessUnitTest extends UnitTestCase {
   /**
-   * @var \Drupal\wordfilter\Plugin\WordfilterProcessInterface
+   * @var WordfilterProcessInterface
    */
   protected $wordfilter_process = NULL;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->wordfilter_process = new TokenWordfilterProcess([], 'token', []);

-    $token = $this->getMockBuilder('\Drupal\Core\Utility\Token')
-      ->disableOriginalConstructor()->getMock();
+    $token = $this->createMock('\Drupal\Core\Utility\Token');

     $container = $this->createMock('Symfony\Component\DependencyInjection\ContainerInterface');
     $container->expects($this->any())
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/wordfilter/tests/src/Unit/DefaultWordfilterProcessUnitTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\wordfilter\Unit;

+use Drupal\wordfilter\Plugin\WordfilterProcessInterface;
 use \Drupal\Tests\UnitTestCase;
 use \Drupal\wordfilter\Entity\WordfilterConfiguration;
 use \Drupal\wordfilter\Plugin\WordfilterProcess\DefaultWordfilterProcess;
@@ @@
 class DefaultWordfilterProcessUnitTest extends UnitTestCase {

   /**
-   * @var \Drupal\wordfilter\Plugin\WordfilterProcessInterface
+   * @var WordfilterProcessInterface
    */
   protected $wordfilter_process = NULL;
   
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     
     $this->wordfilter_process = new DefaultWordfilterProcess([], 'default', []);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/wordfilter/tests/src/Functional/WordfilterApplianceTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\wordfilter\Functional;

+use Drupal\node\NodeInterface;
 use \Drupal\Tests\BrowserTestBase;
 use \Drupal\Component\Render\FormattableMarkup;

@@ @@
   
   protected $wordfilter_config_id = 'my_superduper_wordfilter_config';

-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->user = $this->drupalCreateUser([
@@ @@
   /**
    * Create and get a node instance for all appliance tests.
    *
-   * @return \Drupal\node\NodeInterface
+   * @return NodeInterface
    */
   protected function nodeInstance() {
     if (!isset($this->node)) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/wordfilter/src/WordfilterPermissions.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * Returns a list of permissions for a given Wordfilter configuration.
    *
-   * @param \Drupal\wordfilter\Entity\WordfilterConfigurationInterface $config
+   * @param WordfilterConfigurationInterface $config
    *   The Wordfilter configuration.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/wordfilter/src/WordfilterItem.php:8

    ---------- begin diff ----------
@@ @@
   /**
    * The parent entity, which is holding the filtering item.
    *
-   * @var \Drupal\wordfilter\Entity\WordfilterConfigurationInterface
+   * @var WordfilterConfigurationInterface
    */
   protected $parent;

@@ @@
   /**
    * Get the parent entity.
    *
-   * @return \Drupal\wordfilter\Entity\WordfilterConfigurationInterface
+   * @return WordfilterConfigurationInterface
    */
   public function getParent() {
     return $this->parent;
@@ @@
   /**
    * Set the parent entity.
    *
-   * @param \Drupal\wordfilter\Entity\WordfilterConfigurationInterface $parent
+   * @param WordfilterConfigurationInterface $parent
    */
   protected function setParent(WordfilterConfigurationInterface $parent) {
     $this->parent = $parent;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/wordfilter/src/WordfilterConfigurationHtmlRouteProvider.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/wordfilter/src/Plugin/WordfilterProcessManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/wordfilter/src/Plugin/WordfilterProcessInterface.php:16

    ---------- begin diff ----------
@@ @@
    *
    * @param string $text
    *  The text to filter.
-   * @param \Drupal\wordfilter\Entity\WordfilterConfigurationInterface $wordfilter_config
+   * @param WordfilterConfigurationInterface $wordfilter_config
    *  The Wordfilter configuration to use during the filtering process.
    * @param string $langcode
    *  (Optional) The language code.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/wordfilter/src/Plugin/Filter/WordFilter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wordfilter\Plugin\Filter;

+use Drupal\wordfilter\Entity\WordfilterConfigurationInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\filter\FilterProcessResult;
@@ @@
    *
    * @see ::activeWordfilterConfigs()
    *
-   * @var \Drupal\wordfilter\Entity\WordfilterConfigurationInterface[]
+   * @var WordfilterConfigurationInterface[]
    */
   protected $active_configs = NULL;

@@ @@
   /**
    * Get a list of active Wordfilter configurations for this filter.
    *
-   * @return \Drupal\wordfilter\Entity\WordfilterConfigurationInterface[]
+   * @return WordfilterConfigurationInterface[]
    */
   public function activeWordfilterConfigs() {
     if (!isset($this->active_configs)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/wordfilter/src/Form/WordfilterConfigurationForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wordfilter\Form;

+use Drupal\wordfilter\Entity\WordfilterConfigurationInterface;
+use Drupal\wordfilter\Plugin\WordfilterProcessManager;
+use Drupal\wordfilter\Plugin\WordfilterProcessInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\Element\StatusMessages;
@@ @@
 class WordfilterConfigurationForm extends EntityForm {

   /**
-   * @return \Drupal\wordfilter\Entity\WordfilterConfigurationInterface
+   * @return WordfilterConfigurationInterface
    */
   public function getWordfilterConfiguration() {
     return $this->entity;
@@ @@
   /**
    * Helper function to rebuild the form when necessary.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    * @param array &$old_form
    *   The old form build.
    * @return array
@@ @@
       '#weight' => 30,
     ];
     /**
-     * @var \Drupal\wordfilter\Plugin\WordfilterProcessManager
+     * @var WordfilterProcessManager
      */
     $plugin_manager = \Drupal::service('plugin.manager.wordfilter_process');
     $definitions = $plugin_manager->getDefinitions();
@@ @@
     }

     /**
-     * @var \Drupal\wordfilter\Plugin\WordfilterProcessManager
+     * @var WordfilterProcessManager
      */
     $plugin_manager = \Drupal::service('plugin.manager.wordfilter_process');
     /**
-     * @var \Drupal\wordfilter\Plugin\WordfilterProcessInterface
+     * @var WordfilterProcessInterface
      */
     $plugin = $plugin_manager->createInstance($process_id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/wordfilter/src/Entity/WordfilterConfigurationInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wordfilter\Entity;

+use Drupal\wordfilter\Plugin\WordfilterProcessInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\wordfilter\WordfilterItem;

@@ @@
 interface WordfilterConfigurationInterface extends ConfigEntityInterface {
   /**
    * Get the assigned filtering process.
-   * 
-   * @return \Drupal\wordfilter\Plugin\WordfilterProcessInterface
+   *
+   * @return WordfilterProcessInterface
    *   The assigned filtering process.
    */
   public function getProcess();
@@ @@
   
   /**
    * Assign the filtering process.
-   * 
-   * @param \Drupal\wordfilter\Plugin\WordfilterProcessInterface $process
+   *
+   * @param WordfilterProcessInterface $process
    *   The Wordfilter process to assign. 
    */
-  public function setProcess(\Drupal\wordfilter\Plugin\WordfilterProcessInterface $process);
+  public function setProcess(WordfilterProcessInterface $process);

   /**
    * Get the filtering items.
    *
-   * @return \Drupal\wordfilter\WordfilterItem[]
+   * @return WordfilterItem[]
    *  An array of filtering items, keyed and sorted by delta.
    */
   public function getItems();
@@ @@
    * @param integer $delta
    *   (Optional) The delta for the new item.
    *
-   * @return \Drupal\wordfilter\WordfilterItem
+   * @return WordfilterItem
    */
   public function newItem($delta = NULL);

@@ @@
    * The item must belong to this configuration,
    * otherwise it won't be removed.
    *
-   * @param \Drupal\wordfilter\WordfilterItem $item
+   * @param WordfilterItem $item
    * @return bool
    *   TRUE if removal was successful, FALSE otherwise.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/wordfilter/src/Entity/WordfilterConfiguration.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wordfilter\Entity;

+use Drupal\wordfilter\Plugin\WordfilterProcessManager;
 use \Drupal\Core\Config\Entity\ConfigEntityBase;
 use \Drupal\wordfilter\WordfilterItem;
 use \Drupal\wordfilter\Plugin\WordfilterProcessInterface;
@@ @@
   protected $process_id = 'default';
   
   /**
-   * The assigned Wordfilter process object.
-   * 
-   * @see ::getProcess().
-   * 
-   * @var \Drupal\wordfilter\Plugin\WordfilterProcessInterface 
-   */
+    * The assigned Wordfilter process object.
+    *
+    * @see ::getProcess().
+    *
+    * @var WordfilterProcessInterface 
+    */
    protected $process = NULL;

   /**
@@ @@
   /**
    * The filtering items as cached objects.
    *
-   * @var \Drupal\wordfilter\WordfilterItem[]
+   * @var WordfilterItem[]
    */
   protected $item_objects = NULL;

@@ @@
     }

     /**
-     * @var \Drupal\wordfilter\Plugin\WordfilterProcessManager
+     * @var WordfilterProcessManager
      */
     $manager = \Drupal::service('plugin.manager.wordfilter_process');
     $this->setProcess($manager->createInstance($this->process_id));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/wordfilter/src/Annotation/WordfilterProcess.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wordfilter\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


 [OK] 15 files have been changed by Rector                                      

