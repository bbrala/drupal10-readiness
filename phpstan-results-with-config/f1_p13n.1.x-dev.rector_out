modules/contrib/f1_p13n/f1_p13n.module
modules/contrib/f1_p13n/f1_p13n.views.inc
modules/contrib/f1_p13n/modules/f1_p13n_paragraph_reaction/src/Form/ParagraphReactionSettingsForm.php
modules/contrib/f1_p13n/modules/f1_p13n_paragraph_reaction/src/ParagraphReactionService.php
modules/contrib/f1_p13n/modules/f1_p13n_paragraph_reaction/src/Plugin/Deriver/ParagraphReactionDeriver.php
modules/contrib/f1_p13n/modules/f1_p13n_paragraph_reaction/src/Plugin/f1_p13n/Reaction/ParagraphReaction.php
modules/contrib/f1_p13n/src/Annotation/Condition.php
modules/contrib/f1_p13n/src/Annotation/Reaction.php
modules/contrib/f1_p13n/src/CampaignInterface.php
modules/contrib/f1_p13n/src/CampaignListBuilder.php
modules/contrib/f1_p13n/src/Condition/ConditionInterface.php
modules/contrib/f1_p13n/src/Condition/ConditionPluginBase.php
modules/contrib/f1_p13n/src/Controller/PersonalizationContent.php
modules/contrib/f1_p13n/src/Entity/Campaign.php
modules/contrib/f1_p13n/src/Entity/Experience.php
modules/contrib/f1_p13n/src/EntityViewsData.php
modules/contrib/f1_p13n/src/Event/ExperienceEvent.php
modules/contrib/f1_p13n/src/Event/ExperienceEvents.php
modules/contrib/f1_p13n/src/EventSubscriber/ExperienceRuleSubscriber.php
modules/contrib/f1_p13n/src/ExperienceInterface.php
modules/contrib/f1_p13n/src/ExperienceListBuilder.php
modules/contrib/f1_p13n/src/ExperiencePluginManager.php
modules/contrib/f1_p13n/src/ExperienceStorage.php
modules/contrib/f1_p13n/src/ExperienceStorageInterface.php
modules/contrib/f1_p13n/src/Form/CampaignDeleteForm.php
modules/contrib/f1_p13n/src/Form/CampaignForm.php
modules/contrib/f1_p13n/src/Form/ExperienceDeleteForm.php
modules/contrib/f1_p13n/src/Form/ExperienceForm.php
modules/contrib/f1_p13n/src/Form/PersonalizationSettingsForm.php
modules/contrib/f1_p13n/src/Plugin/Field/FieldFormatter/ExperienceDefaultFormatter.php
modules/contrib/f1_p13n/src/Plugin/Field/FieldFormatter/RulesDefaultFormatter.php
modules/contrib/f1_p13n/src/Plugin/Field/FieldType/ExperienceReferenceItem.php
modules/contrib/f1_p13n/src/Plugin/Field/FieldType/RulesItem.php
modules/contrib/f1_p13n/src/Plugin/Field/FieldWidget/ExperienceReferenceAutocompleteWidget.php
modules/contrib/f1_p13n/src/Plugin/f1_p13n/Condition/ContentTypeCondition.php
modules/contrib/f1_p13n/src/Plugin/f1_p13n/Condition/IsTrue.php
modules/contrib/f1_p13n/src/Plugin/f1_p13n/Condition/SectionCondition.php
modules/contrib/f1_p13n/src/Plugin/f1_p13n/Condition/TaxonomyCondition.php
modules/contrib/f1_p13n/src/Plugin/f1_p13n/Reaction/FilteredView.php
modules/contrib/f1_p13n/src/Plugin/f1_p13n/Reaction/SimpleText.php
modules/contrib/f1_p13n/src/Plugin/f1_p13n/Reaction/Wysiwyg.php
modules/contrib/f1_p13n/src/Plugin/metatag/Group/Personalization.php
modules/contrib/f1_p13n/src/Plugin/metatag/Tag/Dimension.php
modules/contrib/f1_p13n/src/RdfaService.php
modules/contrib/f1_p13n/src/Reaction/ReactionInterface.php
modules/contrib/f1_p13n/src/Reaction/ReactionPluginBase.php
modules/contrib/f1_p13n/src/TokenizationService.php

24 files with changes
=====================

1) modules/contrib/f1_p13n/src/TokenizationService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\f1_p13n;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * The node storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $vocabStorage;

@@ @@
   /**
    * Dimensions settings.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $configFactory;

@@ @@
   /**
    * Constructs a new TokenizationService object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration service interface.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/f1_p13n/src/RdfaService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\f1_p13n;

+use Drupal\Core\Menu\MenuActiveTrail;
+use Drupal\Core\Entity\EntityRepository;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Config\Config;
+use Drupal\taxonomy\TermInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The path matcher.
    *
-   * @var \Drupal\Core\Path\PathMatcherInterface
+   * @var PathMatcherInterface
    */
   protected $pathMatcher;

@@ @@
   /**
    * The menu active trail service.
    *
-   * @var \Drupal\Core\Menu\MenuActiveTrail
+   * @var MenuActiveTrail
    */
   protected $menuActiveTrail;

@@ @@
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepository
+   * @var EntityRepository
    */
   protected $entityRepository;

@@ @@
   /**
    * The node storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $vocabStorage;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Dimensions settings.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $configFactory;

@@ @@
   /**
    * Constructs a new RdfaService object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Menu\MenuActiveTrailInterface $menu_active_trail
+   * @param MenuActiveTrailInterface $menu_active_trail
    *   The menu active trail service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\Path\PathMatcherInterface $path_matcher
+   * @param PathMatcherInterface $path_matcher
    *   The config factory service.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
    */
   public function __construct(
@@ @@
           // taxonomy terms.
           $taxonomy_terms = $context_entity->get($field)->referencedEntities();

-          /** @var \Drupal\taxonomy\TermInterface $taxonomy_term */
+          /** @var TermInterface $taxonomy_term */
           foreach ($taxonomy_terms as $taxonomy_term) {
             $bundle = $taxonomy_term->bundle();
             // Check to make sure the bundle of the found term is one that we're
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/f1_p13n/src/Plugin/metatag/Tag/Dimension.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\f1_p13n\Plugin\metatag\Tag;

+use Drupal\Core\Menu\MenuActiveTrail;
+use Drupal\Core\Entity\EntityRepository;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Menu\MenuActiveTrailInterface;
@@ @@
   /**
    * The menu active trail service.
    *
-   * @var \Drupal\Core\Menu\MenuActiveTrail
+   * @var MenuActiveTrail
    */
   protected $menuActiveTrail;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The RDFa service.
    *
-   * @var \Drupal\f1_p13n\RdfaService
+   * @var RdfaService
    */
   protected $rdfaService;

@@ @@
   /**
    * The route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepository
+   * @var EntityRepository
    */
   protected $entityRepository;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\f1_p13n\RdfaService $rdfa_service
+   * @param RdfaService $rdfa_service
    *   The RDFa service.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The routeMatch service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Menu\MenuActiveTrailInterface $menu_active_trail
+   * @param MenuActiveTrailInterface $menu_active_trail
    *   The menu active trail service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/f1_p13n/src/Plugin/f1_p13n/Reaction/SimpleText.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The related content service.
    *
-   * @var \Drupal\f1_p13n\TokenizationService
+   * @var TokenizationService
    */
   protected $tokenizationService;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
    *   The plugin definition.
    * @param \Drupal\f1_p13n\Services\TokenizationService $tokenization_service
    *   The Related Content service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   *
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, TokenizationService $tokenization_service, RendererInterface $renderer) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
@@ @@
   }

   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
@@ @@
    *
    * @param array $element
    *   The form element.
-   * @param Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state for the entire form.
    * @param array $form
    *   The entire form.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/f1_p13n/src/Plugin/f1_p13n/Reaction/FilteredView.php:55

    ---------- begin diff ----------
@@ @@
   }

   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/f1_p13n/src/Plugin/f1_p13n/Condition/TaxonomyCondition.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The related content service.
    *
-   * @var \Drupal\f1_p13n\TokenizationService
+   * @var TokenizationService
    */
   protected $tokenizationService;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    * @param \Drupal\f1_p13n\Services\TokenizationService $tokenization_service
    *   The Related Content service.
-   *
    */
   public function __construct(
     array $configuration,
@@ @@
   }

   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/f1_p13n/src/Plugin/f1_p13n/Condition/SectionCondition.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   }

   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/f1_p13n/src/Plugin/f1_p13n/Condition/ContentTypeCondition.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   }

   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/f1_p13n/src/Plugin/Field/FieldFormatter/RulesDefaultFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\f1_p13n\Plugin\Field\FieldFormatter;

+use Drupal\f1_p13n\ExperiencePluginManager;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\FormatterBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The condition plugin manager.
    *
-   * @var \Drupal\f1_p13n\ExperiencePluginManager
+   * @var ExperiencePluginManager
    */
   protected $conditionManager;

@@ @@
   /**
    * The reaction plugin manager.
    *
-   * @var \Drupal\f1_p13n\ExperiencePluginManager
+   * @var ExperiencePluginManager
    */
   protected $reactionManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/f1_p13n/src/Plugin/Field/FieldFormatter/ExperienceDefaultFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\f1_p13n\Plugin\Field\FieldFormatter;

+use Drupal\f1_p13n\ExperiencePluginManager;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\FormatterBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The condition plugin manager.
    *
-   * @var \Drupal\f1_p13n\ExperiencePluginManager
+   * @var ExperiencePluginManager
    */
   protected $conditionManager;

@@ @@
   /**
    * The reaction plugin manager.
    *
-   * @var \Drupal\f1_p13n\ExperiencePluginManager
+   * @var ExperiencePluginManager
    */
   protected $reactionManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/f1_p13n/src/Form/PersonalizationSettingsForm.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * PersonalizationSettingsForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/f1_p13n/src/Form/ExperienceForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\f1_p13n\Form;

+use Drupal\Core\Session\AccountProxyInterface;
+use Drupal\f1_p13n\ExperiencePluginManager;
+use Drupal\Component\Uuid\UuidInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Component\Utility\SortArray;
 use Drupal\Core\Entity\ContentEntityForm;
@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;

@@ @@
   /**
    * The condition plugin manager.
    *
-   * @var \Drupal\f1_p13n\ExperiencePluginManager
+   * @var ExperiencePluginManager
    */
   protected $conditionManager;

@@ @@
   /**
    * The reaction plugin manager.
    *
-   * @var \Drupal\f1_p13n\ExperiencePluginManager
+   * @var ExperiencePluginManager
    */
   protected $reactionManager;

@@ @@
   /**
    * The UUID service.
    *
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuidService;

@@ @@
    *
    * @param array $form
    *   The form of the entity.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the parent form.
    */
   public function addRuleElement(array &$form, FormStateInterface $form_state) {
@@ @@
   /**
    * Helper method to set rule form fields.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the parent form.
    * @param int $delta
    *   The delta of the rule.
@@ @@
    *   The id of the condition or reaction.
    * @param array $settings
    *   The plugin configuration values.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the parent form.
    *
    * @return array
@@ @@
    *   The rule delta.
    * @param array $rule
    *   The rule being set.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the parent form.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   The form of the entity.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the parent form.
    *
    * @todo Use relateive parents.
@@ @@
    *
    * @param array $form
    *   The form of the entity.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the parent form.
    */
   public function updateRulesAjax(array &$form, FormStateInterface $form_state) {
@@ @@
   /**
    * Helper to set rules values on entity.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the parent form.
    * @param array $rules
    *   The current rules input values.
@@ @@
    *   The rule position.
    * @param array $form
    *   The form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the parent.
    *
    * @todo Replace delta with rule uuid.
@@ @@
    *   The configuration settings for the plugin.
    * @param array $form
    *   The form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the parent.
    *
    * @todo Use plugin instance info as array instead of passing delta, id,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/f1_p13n/src/Form/CampaignForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\f1_p13n\Form;

+use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/f1_p13n/src/ExperiencePluginManager.php:26

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct($type, \Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/f1_p13n/src/EventSubscriber/ExperienceRuleSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\f1_p13n\EventSubscriber;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\f1_p13n\Event\ExperienceEvent;
 use Drupal\f1_p13n\Event\ExperienceEvents;
 use Drupal\f1_p13n\ExperiencePluginManager;
@@ @@
   /**
    * The condition plugin manager.
    *
-   * @var \Drupal\f1_p13n\ExperiencePluginManager
+   * @var ExperiencePluginManager
    */
   protected $conditionManager;

@@ @@
   /**
    * The reaction plugin manager.
    *
-   * @var \Drupal\f1_p13n\ExperiencePluginManager
+   * @var ExperiencePluginManager
    */
   protected $reactionManager;

@@ @@
   /**
    * Constructs a new ExperienceRuleSubscriber.
    *
-   * @param \Drupal\f1_p13n\ExperiencePluginManager $condition_manager
+   * @param ExperiencePluginManager $condition_manager
    *   The experience condition manager.
-   * @param \Drupal\f1_p13n\ExperiencePluginManager $reaction_manager
+   * @param ExperiencePluginManager $reaction_manager
    *   The experience reaction manager.
    */
   public function __construct(
@@ @@
   /**
    * Subscribe to the user login event dispatched.
    *
-   * @param \Drupal\f1_p13n\Event\ExperienceEvent $event
+   * @param ExperienceEvent $event
    *   The experience event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function onExperiencePresave(ExperienceEvent $event) {
     /* @var \Drupal\f1_p13n\Entity\Experience $experience. */
@@ @@
    * @param array $rule
    *   The id (plugin id) of the condition.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *
    * @return array
    *   An associative array of objects for the rule's Condition and Reaction.
@@ @@
    * @param array $settings
    *   The settings of the condition.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *
    * @return object|null
    *   The Condition created.
@@ @@
    * @param array $settings
    *   The settings of the condition.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *
    * @return object|null
    *   The Reaction created.
@@ @@
    * @param object $context
    *   Context to pass to the event (such as a new version of the condition).
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function _conditionEvent($condition, $event, $context = NULL) {
     if (method_exists($condition, $event)) {
@@ @@
    * @param array $context
    *   Context to pass to the event (such as a new version of the reaction).
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function _reactionEvent($reaction, $event, $context = NULL) {
     if (method_exists($reaction, $event)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/f1_p13n/src/Event/ExperienceEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\f1_p13n\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\f1_p13n\Entity\Experience;

 /**
@@ @@
   /**
    * The experience entity.
    *
-   * @var \Drupal\f1_p13n\Entity\Experience
+   * @var Experience
    */
   protected $experience;

@@ @@
   /**
    * Constructs a ExperienceEvent.
    *
-   * @param \Drupal\f1_p13n\Entity\Experience $experience
+   * @param Experience $experience
    *   The experience entity.
    */
   public function __construct(Experience $experience) {
@@ @@
   /**
    * Returns the experience that is undergoing some event operation.
    *
-   * @return \Drupal\f1_p13n\Entity\Experience
+   * @return Experience
    *   The experience entity.
    */
   public function getExperience() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/f1_p13n/src/EntityViewsData.php:34

    ---------- begin diff ----------
@@ @@
    *
    * @param array $data
    *   The views data.
-   * @param \Drupal\Core\Field\BaseFieldDefinition[] $fields
+   * @param BaseFieldDefinition[] $fields
    *   The entity reference fields.
    */
   protected function addReverseRelationships(array &$data, array $fields) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/f1_p13n/src/Controller/PersonalizationContent.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The render service.
    *
-   * @var Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * Constructor for personalization content fulfillment.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The render service.
    */
   public function __construct(RendererInterface $renderer) {
@@ @@
    * @param string $data
    *   The encoded string from client.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response.
    *
    * @throws \Exception
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/f1_p13n/src/Annotation/Reaction.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\f1_p13n\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The plugin description.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The category under which the reaction is listed in the UI.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


20) modules/contrib/f1_p13n/src/Annotation/Condition.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\f1_p13n\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The plugin description.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The category under which the condition is listed in the UI.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


21) modules/contrib/f1_p13n/modules/f1_p13n_paragraph_reaction/src/Plugin/f1_p13n/Reaction/ParagraphReaction.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity form builder.
    *
-   * @var \Drupal\Core\Entity\EntityFormBuilderInterface
+   * @var EntityFormBuilderInterface
    */
   protected $entityFormBuilder;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFormBuilderInterface $entity_form_builder
+   * @param EntityFormBuilderInterface $entity_form_builder
    *   The entity form builder service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(
@@ @@
   }

   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
@@ @@
    *
    * @param array $element
    *   The form element.
-   * @param Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state for the entire form.
    * @param array $form
    *   The entire form.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/f1_p13n/modules/f1_p13n_paragraph_reaction/src/ParagraphReactionService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\f1_p13n_paragraph_reaction;

+use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;

@@ @@
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * Configuration settings.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $configFactory;

@@ @@
   /**
    * Constructs new EntityViewDeriver.
    *
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
    */
   public function __construct(EntityTypeBundleInfoInterface $entity_type_bundle_info, ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


23) modules/contrib/f1_p13n/modules/f1_p13n_paragraph_reaction/src/Form/ParagraphReactionSettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\f1_p13n_paragraph_reaction\Form;

+use Drupal\f1_p13n_paragraph_reaction\ParagraphReactionService;
+use Drupal\f1_p13n\ExperiencePluginManager;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The Paragraph reaction service.
    *
-   * @var \Drupal\f1_p13n_paragraph_reaction\ParagraphReactionService
+   * @var ParagraphReactionService
    */
   protected $paragraphReactionService;

@@ @@
   /**
    * The reaction plugin manager.
    *
-   * @var \Drupal\f1_p13n\ExperiencePluginManager
+   * @var ExperiencePluginManager
    */
   protected $reactionManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/f1_p13n/f1_p13n.views.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\Sql\DefaultTableMapping;
 /**
  * @file
  * Contains Views hooks.
@@ @@
   $data = views_field_default_views_data($field_storage);
   $entity_manager = \Drupal::entityTypeManager();
   $entity_type_id = $field_storage->getTargetEntityTypeId();
-  /** @var \Drupal\Core\Entity\Sql\DefaultTableMapping $table_mapping */
+  /** @var DefaultTableMapping $table_mapping */
   $table_mapping = $entity_manager->getStorage($entity_type_id)->getTableMapping();
   foreach ($data as $table_name => $table_data) {
     // Add a relationship to the target entity type.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/f1_p13n/modules/f1_p13n_paragraph_reaction/src/Plugin/De
         river/ParagraphReactionDeriver.php" file, due to:                      
         "Analyze error: "Class Drupal\ctools\Plugin\Deriver\EntityDeriverBase not
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [WARNING] 1 nodes were removed                                                 

