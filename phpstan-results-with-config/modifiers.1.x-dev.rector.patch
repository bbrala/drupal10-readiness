diff --git a/modifiers.module b/modifiers.module
index 5abd837..cacf02c 100644
--- a/modifiers.module
+++ b/modifiers.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\block_content\Entity\BlockContent;
 /**
  * @file
  * Modifiers module.
@@ -51,7 +52,7 @@ function modifiers_entity_view_alter(array &$build, EntityInterface $entity, Ent
   $build['#attributes']['class'][] = Html::getClass('modifiers-display-' . $display_mode);
 
   // Initialize modifiers service.
-  /** @var \Drupal\modifiers\Modifiers $modifiers */
+  /** @var Modifiers $modifiers */
   $modifiers = \Drupal::service('modifiers');
 
   $config = $modifiers->extractEntityConfig($entity, Modifiers::FIELD, ['modifiers' => []]);
@@ -100,7 +101,7 @@ function modifiers_preprocess_layout(&$variables) {
 
       // Only if block contains a custom block entity.
       if (isset($region_block['content']['#block_content'])) {
-        /** @var \Drupal\block_content\Entity\BlockContent $entity */
+        /** @var BlockContent $entity */
         $entity = $region_block['content']['#block_content'];
 
         // Check if this block is of a modifier block type.
@@ -147,7 +148,7 @@ function modifiers_preprocess_layout(&$variables) {
  *
  * @param array $build
  *   The build array for rendering.
- * @param array|\Drupal\block_content\Entity\BlockContent[] $entities
+ * @param array|BlockContent[] $entities
  *   The set of modifier blocks.
  * @param string $entity_id
  *   The block entity ID.
@@ -157,7 +158,7 @@ function modifiers_preprocess_layout(&$variables) {
 function _modifiers_layout_apply(array &$build, $entities, $entity_id, $region = NULL) {
 
   // Initialize modifiers service.
-  /** @var \Drupal\modifiers\Modifiers $modifiers */
+  /** @var Modifiers $modifiers */
   $modifiers = \Drupal::service('modifiers');
 
   // Compose selector and config to field mapping.
diff --git a/src/Annotation/Modifier.php b/src/Annotation/Modifier.php
index 8810dca..61f97a9 100644
--- a/src/Annotation/Modifier.php
+++ b/src/Annotation/Modifier.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\modifiers\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -26,7 +27,7 @@ class Modifier extends Plugin {
   /**
    * The human-readable name of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -35,7 +36,7 @@ class Modifier extends Plugin {
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/ModifierInterface.php b/src/ModifierInterface.php
index 9685a44..e2f3fe0 100644
--- a/src/ModifierInterface.php
+++ b/src/ModifierInterface.php
@@ -22,7 +22,7 @@ interface ModifierInterface extends PluginInspectionInterface {
    * @param array $config
    *   The modification configuration.
    *
-   * @return \Drupal\modifiers\Modification|null
+   * @return Modification|null
    *   The Modification object or null if empty.
    */
   public static function modification($selector, array $config);
diff --git a/src/ModifierPluginManager.php b/src/ModifierPluginManager.php
index 90730b0..1233455 100644
--- a/src/ModifierPluginManager.php
+++ b/src/ModifierPluginManager.php
@@ -23,7 +23,7 @@ class ModifierPluginManager extends DefaultPluginManager {
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
@@ -33,11 +33,11 @@ class ModifierPluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, ThemeHandlerInterface $theme_handler) {
diff --git a/src/Modifiers.php b/src/Modifiers.php
index 49b2b96..5e9e94d 100644
--- a/src/Modifiers.php
+++ b/src/Modifiers.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\modifiers;
 
+use Drupal\file\Entity\File;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -23,23 +24,23 @@ class Modifiers {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The modifier plugin manager.
    *
-   * @var \Drupal\modifiers\ModifierPluginManager
+   * @var ModifierPluginManager
    */
   protected $modifierPluginManager;
 
   /**
    * Constructs a new Modifiers service.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\modifiers\ModifierPluginManager $modifier_plugin_manager
+   * @param ModifierPluginManager $modifier_plugin_manager
    *   The modifier plugin manager service.
    */
   public function __construct(ModuleHandlerInterface $module_handler, ModifierPluginManager $modifier_plugin_manager) {
@@ -201,7 +202,7 @@ class Modifiers {
    * The resulting array is suitable for consumption by modifiers and is much
    * simpler than the standard Drupal entity structure.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity containing configuration fields.
    * @param string $field_name
    *   The name of field referencing sets of fields.
@@ -226,7 +227,7 @@ class Modifiers {
 
       // Only if field is not already processed.
       if (!isset($config[$field_short])) {
-        /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface $field_storage */
+        /** @var FieldStorageDefinitionInterface $field_storage */
         $field_storage = $field->getFieldDefinition()
           ->getFieldStorageDefinition();
         $config[$field_short] = $this->getSimpleValue($field, $field_storage);
@@ -240,7 +241,7 @@ class Modifiers {
     $referenced_entities = $field->referencedEntities();
 
     // Process all referenced entities.
-    /** @var \Drupal\Core\Entity\FieldableEntityInterface $referenced_entity */
+    /** @var FieldableEntityInterface $referenced_entity */
     foreach ($referenced_entities as $referenced_entity) {
       $referenced_entity_bundle = $referenced_entity->bundle();
 
@@ -262,7 +263,7 @@ class Modifiers {
   /**
    * Extracts configuration from provided entity field.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $field
+   * @param FieldItemListInterface $field
    *   The field object containing values.
    * @param array $config
    *   The array where configuration is added.
@@ -291,9 +292,9 @@ class Modifiers {
   /**
    * Gets value from complex field with referenced entities.
    *
-   * @param \Drupal\Core\Field\EntityReferenceFieldItemListInterface $field
+   * @param EntityReferenceFieldItemListInterface $field
    *   The field object referencing other entities.
-   * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $field_storage
+   * @param FieldStorageDefinitionInterface $field_storage
    *   The field storage definition object.
    *
    * @return array|mixed|null
@@ -338,7 +339,7 @@ class Modifiers {
             if ($entity->hasField($field_name)) {
               // Only if some value exists.
               if (!$entity->get($field_name)->isEmpty()) {
-                /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $entity_field */
+                /** @var EntityReferenceFieldItemListInterface $entity_field */
                 $entity_field = $entity->get($field_name);
                 break;
               }
@@ -361,7 +362,7 @@ class Modifiers {
 
               case 'file':
               case 'image':
-                /** @var \Drupal\file\Entity\File $file */
+                /** @var File $file */
                 foreach ($entity_field->referencedEntities() as $file) {
                   $values[] = $file->createFileUrl();
                 }
@@ -388,9 +389,9 @@ class Modifiers {
   /**
    * Gets value from simple field.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $field
+   * @param FieldItemListInterface $field
    *   The field object containing values.
-   * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $field_storage
+   * @param FieldStorageDefinitionInterface $field_storage
    *   The field storage definition object.
    *
    * @return array|mixed|null
@@ -483,7 +484,7 @@ class Modifiers {
   /**
    * Fills all modifications based on provided configuration.
    *
-   * @param array|\Drupal\modifiers\Modification[] $modifications
+   * @param array|Modification[] $modifications
    *   The existing modifications set.
    * @param array $modifiers
    *   The modifiers configuration.
@@ -495,7 +496,7 @@ class Modifiers {
     foreach ($modifiers as $type => $configs) {
 
       if ($this->modifierPluginManager->hasDefinition($type) && !empty($configs)) {
-        /** @var \Drupal\modifiers\ModifierInterface $plugin */
+        /** @var ModifierInterface $plugin */
         $plugin = $this->modifierPluginManager->createInstance($type);
 
         // Process all current plugin modifications.
diff --git a/tests/src/Unit/ModifiersTest.php b/tests/src/Unit/ModifiersTest.php
index fb2269b..3325c66 100644
--- a/tests/src/Unit/ModifiersTest.php
+++ b/tests/src/Unit/ModifiersTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\modifiers\Unit;
 
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use PHPUnit\Framework\MockObject\MockObject;
+use Drupal\modifiers\ModifierPluginManager;
 use Drupal\modifiers\Modification;
 use Drupal\modifiers\Modifiers;
 use Drupal\Tests\UnitTestCase;
@@ -15,34 +18,32 @@ class ModifiersTest extends UnitTestCase {
   /**
    * The tested modifiers service.
    *
-   * @var \Drupal\modifiers\Modifiers
+   * @var Modifiers
    */
   protected $modifiers;
 
   /**
    * The mocked module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var ModuleHandlerInterface|MockObject
    */
   protected $moduleHandler;
 
   /**
    * The mocked modifier plugin manager.
    *
-   * @var \Drupal\modifiers\ModifierPluginManager|\PHPUnit_Framework_MockObject_MockObject
+   * @var ModifierPluginManager|MockObject
    */
   protected $modifierPluginManager;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->moduleHandler = $this->createMock('\Drupal\Core\Extension\ModuleHandlerInterface');
-    $this->modifierPluginManager = $this->getMockBuilder('Drupal\modifiers\ModifierPluginManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->modifierPluginManager = $this->createMock('Drupal\modifiers\ModifierPluginManager');
     $this->modifiers = new Modifiers($this->moduleHandler, $this->modifierPluginManager);
   }
 
