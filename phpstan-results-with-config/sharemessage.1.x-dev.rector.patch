diff --git a/modules/sharemessage_demo/tests/src/Functional/ShareMessageDemoTest.php b/modules/sharemessage_demo/tests/src/Functional/ShareMessageDemoTest.php
index cc37b85..da8a6bd 100644
--- a/modules/sharemessage_demo/tests/src/Functional/ShareMessageDemoTest.php
+++ b/modules/sharemessage_demo/tests/src/Functional/ShareMessageDemoTest.php
@@ -45,50 +45,68 @@ class ShareMessageDemoTest extends BrowserTestBase {
 
     $this->drupalLogin($admin_user);
     $this->drupalGet('admin/structure/block');
-    $this->assertText(t('Share Message'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Share Message'));
     $this->clickLink(t('Configure'), 0);
 
     $this->drupalGet('admin/structure/types');
-    $this->assertText(t('Shareable content'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Shareable content'));
 
     // Search for the Share Message block on the demo node.
     $this->drupalGet('admin/content');
     $this->clickLink(t('Share Message demo'));
-    $this->assertText(t('Welcome to the Share Message demo module!'));
-    $this->assertText(t('Share Message'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Welcome to the Share Message demo module!'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Share Message'));
     // Assert the demo links are correct.
     $node = $this->getNodeByTitle('Share Message demo');
     $this->drupalGet('node/' . $node->id());
-    $this->assertLinkByHref('admin/config/services/sharemessage/sharemessage-settings');
-    $this->assertLinkByHref('admin/config/services/sharemessage/manage/share_message_addthis_demo');
-    $this->assertLinkByHref('admin/config/services/sharemessage');
-    $this->assertLinkByHref('admin/structure/block/manage/sharemessage_addthis');
+    $this->assertSession()->linkByHrefExists('admin/config/services/sharemessage/sharemessage-settings');
+    $this->assertSession()->linkByHrefExists('admin/config/services/sharemessage/manage/share_message_addthis_demo');
+    $this->assertSession()->linkByHrefExists('admin/config/services/sharemessage');
+    $this->assertSession()->linkByHrefExists('admin/structure/block/manage/sharemessage_addthis');
 
     // Asserts that the buttons are displayed.
-    $this->assertRaw('addthis_button_preferred_1');
-    $this->assertRaw('addthis_button_preferred_2');
-    $this->assertRaw('addthis_button_preferred_3');
-    $this->assertRaw('addthis_button_preferred_4');
-    $this->assertRaw('addthis_button_preferred_5');
-    $this->assertRaw('addthis_button_compact');
+    $this->assertSession()->responseContains('addthis_button_preferred_1');
+    $this->assertSession()->responseContains('addthis_button_preferred_2');
+    $this->assertSession()->responseContains('addthis_button_preferred_3');
+    $this->assertSession()->responseContains('addthis_button_preferred_4');
+    $this->assertSession()->responseContains('addthis_button_preferred_5');
+    $this->assertSession()->responseContains('addthis_button_compact');
 
     // Test OG headers for image, video and url.
-    $this->assertRaw('<meta property="og:image" content="https://www.drupal.org/files/drupal%208%20logo%20Stacked%20CMYK%20300.png" />');
-    $this->assertRaw('<meta property="og:video" content="https://www.youtube.com/watch?v=ktCgVopf7D0?fs=1" />');
-    $this->assertRaw('<meta property="og:video:width" content="360" />');
-    $this->assertRaw('<meta property="og:video:height" content="270" />');
-    $this->assertRaw('<meta property="og:url" content="' . $this->getUrl() . '" />');
+    $this->assertSession()->responseContains('<meta property="og:image" content="https://www.drupal.org/files/drupal%208%20logo%20Stacked%20CMYK%20300.png" />');
+    $this->assertSession()->responseContains('<meta property="og:video" content="https://www.youtube.com/watch?v=ktCgVopf7D0?fs=1" />');
+    $this->assertSession()->responseContains('<meta property="og:video:width" content="360" />');
+    $this->assertSession()->responseContains('<meta property="og:video:height" content="270" />');
+    $this->assertSession()->responseContains('<meta property="og:url" content="' . $this->getUrl() . '" />');
 
     // Test that Sharrre plugin works.
-    $this->assertText('Share Message - Sharrre');
-    $this->assertRaw('<div id="block-sharemessage-sharrre" class="block block-sharemessage block-sharemessage-block">');
-    $this->assertRaw('"services":{"googlePlus":"googlePlus","facebook":"facebook","twitter":"twitter"}');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Share Message - Sharrre');
+    $this->assertSession()->responseContains('<div id="block-sharemessage-sharrre" class="block block-sharemessage block-sharemessage-block">');
+    $this->assertSession()->responseContains('"services":{"googlePlus":"googlePlus","facebook":"facebook","twitter":"twitter"}');
 
     // Test that Social Share Privacy plugin works.
-    $this->assertText('Share Message - Social Share Privacy');
-    $this->assertRaw('<div id="block-sharemessage-socialshareprivacy" class="block block-sharemessage block-sharemessage-block">');
-    $this->assertRaw('"twitter":{"status":true');
-    $this->assertRaw('"facebook":{"status":true');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Share Message - Social Share Privacy');
+    $this->assertSession()->responseContains('<div id="block-sharemessage-socialshareprivacy" class="block block-sharemessage block-sharemessage-block">');
+    $this->assertSession()->responseContains('"twitter":{"status":true');
+    $this->assertSession()->responseContains('"facebook":{"status":true');
   }
 
 }
diff --git a/sharemessage.api.php b/sharemessage.api.php
index 2f0c112..5d623b5 100644
--- a/sharemessage.api.php
+++ b/sharemessage.api.php
@@ -10,7 +10,7 @@ use Drupal\sharemessage\ShareMessageInterface;
 /**
  * Allow other modules to alter Share Message token context.
  *
- * @param \Drupal\sharemessage\ShareMessageInterface $sharemessage
+ * @param ShareMessageInterface $sharemessage
  *   Currently loaded Share Message object.
  * @param array $context
  *   Token Context.
diff --git a/sharemessage.module b/sharemessage.module
index 974eb4a..963e4fc 100644
--- a/sharemessage.module
+++ b/sharemessage.module
@@ -1,4 +1,5 @@
 <?php
+use Drupal\sharemessage\ShareMessageInterface;
 /**
  * @file
  * New Sharing Module.
@@ -142,7 +143,7 @@ function sharemessage_page_attachments(&$page) {
     $smid = \Drupal::request()->query->get('smid');
     $page['#cache']['contexts'][] = 'url.query_args:smid';
     if (!empty($smid)) {
-      /** @var \Drupal\sharemessage\ShareMessageInterface $sharemessage */
+      /** @var ShareMessageInterface $sharemessage */
       $sharemessage = ShareMessage::load($smid);
       if ($sharemessage) {
         \Drupal::service('renderer')->addCacheableDependency($page, $sharemessage);
@@ -206,7 +207,7 @@ function sharemessage_get_addthis_services() {
  */
 function addthis_get_services_json() {
   if (\Drupal::config('sharemessage.addthis')->get('local_services_definition')) {
-    $file_uri = drupal_get_path('module', 'sharemessage') . '/addthis/sharing.en.json';
+    $file_uri = \Drupal::service('extension.list.module')->getPath('sharemessage') . '/addthis/sharing.en.json';
   }
   else {
     $file_uri = 'http://cache.addthiscdn.com/services/v1/sharing.en.json';
@@ -254,7 +255,7 @@ function sharemessage_theme() {
 function sharemessage_entity_extra_field_info() {
   $extra = [];
 
-  /** @var \Drupal\sharemessage\ShareMessageInterface $sharemessage_storage */
+  /** @var ShareMessageInterface $sharemessage_storage */
   $sharemessage_storage = \Drupal::entityTypeManager()->getStorage('sharemessage');
   foreach ($sharemessage_storage->loadMultiple() as $sharemessage) {
     $entity_type = $sharemessage->getExtraFieldEntityType();
@@ -291,7 +292,7 @@ function sharemessage_entity_view(array &$build, EntityInterface $entity, Entity
       // that the context's bundle is one of the extra field's list.
       // This is needed because the Share Message settings can be changed and
       // that might not be immediately reflected in the view display.
-      /** @var \Drupal\sharemessage\ShareMessageInterface $sharemessage */
+      /** @var ShareMessageInterface $sharemessage */
       if ($sharemessage = ShareMessage::load($id)) {
         if (($sharemessage->getExtraFieldEntityType() == $entity->getEntityTypeId()) && (!$sharemessage->getExtraFieldBundles() || in_array($entity->bundle(), $sharemessage->getExtraFieldBundles()))) {
           // Default to the entity type ID for the token type.
diff --git a/src/Annotation/SharePlugin.php b/src/Annotation/SharePlugin.php
index 230be4b..72d6df6 100644
--- a/src/Annotation/SharePlugin.php
+++ b/src/Annotation/SharePlugin.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\sharemessage\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -25,7 +26,7 @@ class SharePlugin extends Plugin {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label;
 
@@ -34,7 +35,7 @@ class SharePlugin extends Plugin {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $description;
 
diff --git a/src/Controller/SharrreCounterController.php b/src/Controller/SharrreCounterController.php
index ea61cfd..12acba4 100644
--- a/src/Controller/SharrreCounterController.php
+++ b/src/Controller/SharrreCounterController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\sharemessage\Controller;
 
+use GuzzleHttp\ClientInterface;
 use Drupal\Core\Controller\ControllerBase;
 use GuzzleHttp\Exception\BadResponseException;
 use Symfony\Component\HttpFoundation\JsonResponse;
@@ -15,17 +16,17 @@ class SharrreCounterController extends ControllerBase {
   /**
    * Guzzle HTTP client.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $client;
 
   /**
    * Get the counter for Google Plus and Stumbleupon.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current HTTP request from which we get the counter.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response containing the counter.
    */
   public function getCounter(Request $request) {
diff --git a/src/Entity/Handler/ShareMessageListBuilder.php b/src/Entity/Handler/ShareMessageListBuilder.php
index f84833f..6db8ada 100644
--- a/src/Entity/Handler/ShareMessageListBuilder.php
+++ b/src/Entity/Handler/ShareMessageListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\sharemessage\Entity\Handler;
 
+use Drupal\sharemessage\ShareMessageInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 
@@ -23,7 +24,7 @@ class ShareMessageListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\sharemessage\ShareMessageInterface $entity */
+    /** @var ShareMessageInterface $entity */
     $row['label'] = $entity->label();
     $row['plugin'] = $entity->getPluginId();
     return $row + parent::buildRow($entity);
diff --git a/src/Entity/ShareMessage.php b/src/Entity/ShareMessage.php
index ecad78e..74fbac0 100644
--- a/src/Entity/ShareMessage.php
+++ b/src/Entity/ShareMessage.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\sharemessage\Entity;
 
+use Drupal\sharemessage\SharePluginBase;
 use Drupal\Component\Render\PlainTextOutput;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Url;
@@ -226,7 +227,7 @@ class ShareMessage extends ConfigEntityBase implements ShareMessageInterface {
    * {@inheritdoc}
    */
   public function getPluginDefinition() {
-    /** @var \Drupal\sharemessage\SharePluginBase $share_plugin */
+    /** @var SharePluginBase $share_plugin */
     $share_plugin = $this->getPlugin();
     return $share_plugin->getPluginDefinition();
   }
@@ -525,7 +526,7 @@ class ShareMessage extends ConfigEntityBase implements ShareMessageInterface {
    *
    * @param array $context
    *   The context for the token replacements.
-   * @param \Drupal\file\FileInterface|null $fallback_image
+   * @param FileInterface|null $fallback_image
    *   By-reference argument that holds the fallback image reference if that
    *   was used.
    *
@@ -539,10 +540,10 @@ class ShareMessage extends ConfigEntityBase implements ShareMessageInterface {
     // one is defined.
     if (!$image_url && !empty($this->fallback_image)) {
       $entity_repository = \Drupal::getContainer()->get('entity.repository');
-      /** @var \Drupal\file\FileInterface $image */
+      /** @var FileInterface $image */
       $fallback_image = $entity_repository->loadEntityByUuid('file', $this->fallback_image);
       if ($fallback_image) {
-        $image_url = file_create_url($fallback_image->getFileUri());
+        $image_url = \Drupal::service('file_url_generator')->generateAbsoluteString($fallback_image->getFileUri());
       }
     }
     return $image_url;
diff --git a/src/Form/ShareMessageForm.php b/src/Form/ShareMessageForm.php
index 66a59e7..f4d67c8 100644
--- a/src/Form/ShareMessageForm.php
+++ b/src/Form/ShareMessageForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\sharemessage\Form;
 
+use Drupal\sharemessage\ShareMessageInterface;
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ -20,41 +23,41 @@ class ShareMessageForm extends EntityForm {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Share plugin manager.
    *
-   * @var \Drupal\sharemessage\SharePluginManager
+   * @var SharePluginManager
    */
   protected $sharePluginManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * Constructs a new ShareMessageForm object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    * The module handler.
-   * @param \Drupal\sharemessage\SharePluginManager $share_manager
+   * @param SharePluginManager $share_manager
    *   The share manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
    */
   public function __construct(ModuleHandlerInterface $module_handler, SharePluginManager $share_manager, EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info) {
@@ -82,7 +85,7 @@ class ShareMessageForm extends EntityForm {
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\sharemessage\ShareMessageInterface $sharemessage */
+    /** @var ShareMessageInterface $sharemessage */
     $sharemessage = $this->entity;
     $defaults = \Drupal::config('sharemessage.settings');
     $available = $this->sharePluginManager->getLabels();
@@ -354,7 +357,7 @@ class ShareMessageForm extends EntityForm {
    *
    * @param array $form
    *   A nested array form elements comprising the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function ajaxShareMessagePluginSelect(array $form, FormStateInterface $form_state) {
@@ -366,7 +369,7 @@ class ShareMessageForm extends EntityForm {
    *
    * @param array $form
    *   A nested array form elements comprising the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function ajaxShareMessageContentTypeSelect(array $form, FormStateInterface $form_state) {
@@ -377,7 +380,7 @@ class ShareMessageForm extends EntityForm {
    * {@inheritdoc}
    */
   public function buildEntity(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\sharemessage\ShareMessageInterface $sharemessage */
+    /** @var ShareMessageInterface $sharemessage */
     $sharemessage = parent::buildEntity($form, $form_state);
     if (!$sharemessage->getSetting('override_default_settings')) {
       $sharemessage->settings = [];
@@ -400,10 +403,10 @@ class ShareMessageForm extends EntityForm {
   /**
    * Provides the bundle label with a fallback when not defined.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type we are looking the bundle label for.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The entity bundle label or a fallback label.
    */
   protected function getEntityBundleLabel($entity_type) {
@@ -440,7 +443,7 @@ class ShareMessageForm extends EntityForm {
    * {@inheritdoc}
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\sharemessage\ShareMessageInterface $sharemessage */
+    /** @var ShareMessageInterface $sharemessage */
     $sharemessage = $this->entity;
     $sharemessage->getPlugin()->validateConfigurationForm($form, $form_state);
   }
@@ -449,7 +452,7 @@ class ShareMessageForm extends EntityForm {
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\sharemessage\ShareMessageInterface $sharemessage */
+    /** @var ShareMessageInterface $sharemessage */
     $sharemessage = $this->entity;
     $status = $sharemessage->save();
 
diff --git a/src/Plugin/Block/ShareMessageBlock.php b/src/Plugin/Block/ShareMessageBlock.php
index e4aed52..042e40f 100644
--- a/src/Plugin/Block/ShareMessageBlock.php
+++ b/src/Plugin/Block/ShareMessageBlock.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\sharemessage\Plugin\Block;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Entity\EntityViewBuilderInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -24,14 +26,14 @@ class ShareMessageBlock extends BlockBase implements ContainerFactoryPluginInter
   /**
    * The entity storage controller for Share Messages.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storageController;
 
   /**
    * The entity view builder for Share Message.
    *
-   * @var \Drupal\Core\Entity\EntityViewBuilderInterface
+   * @var EntityViewBuilderInterface
    */
   protected $viewBuilder;
 
@@ -44,7 +46,7 @@ class ShareMessageBlock extends BlockBase implements ContainerFactoryPluginInter
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Plugin/sharemessage/SocialSharePrivacy.php b/src/Plugin/sharemessage/SocialSharePrivacy.php
index 882827e..4eaf94b 100644
--- a/src/Plugin/sharemessage/SocialSharePrivacy.php
+++ b/src/Plugin/sharemessage/SocialSharePrivacy.php
@@ -25,7 +25,7 @@ class SocialSharePrivacy extends SharePluginBase implements SharePluginInterface
   /**
    * Social Share Privacy config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $socialSharePrivacyConfig;
 
@@ -38,7 +38,7 @@ class SocialSharePrivacy extends SharePluginBase implements SharePluginInterface
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ImmutableConfig $config
+   * @param ImmutableConfig $config
    *   An immutable configuration object.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ImmutableConfig $config) {
@@ -244,10 +244,10 @@ class SocialSharePrivacy extends SharePluginBase implements SharePluginInterface
         $enabled_services[$service] = array_merge($enabled_services[$service], $this->servicesWithSettings()[$service]);
       }
       if (in_array($service, ['mail', 'tumblr', 'fbshare'])) {
-        $enabled_services[$service]['line_img'] = file_create_url($images_folder . $service . '.png');
+        $enabled_services[$service]['line_img'] = \Drupal::service('file_url_generator')->generateAbsoluteString($images_folder . $service . '.png');
       }
       else {
-        $enabled_services[$service]['dummy_line_img'] = file_create_url($images_folder . 'dummy_' . $service . '.png');
+        $enabled_services[$service]['dummy_line_img'] = \Drupal::service('file_url_generator')->generateAbsoluteString($images_folder . 'dummy_' . $service . '.png');
       }
     }
 
diff --git a/src/ShareMessageInterface.php b/src/ShareMessageInterface.php
index 9738dcd..2ac9a94 100644
--- a/src/ShareMessageInterface.php
+++ b/src/ShareMessageInterface.php
@@ -32,7 +32,7 @@ interface ShareMessageInterface extends ConfigEntityInterface {
   /**
    * Returns the plugin instance.
    *
-   * @return \Drupal\sharemessage\SharePluginInterface
+   * @return SharePluginInterface
    *   The plugin instance for this Share Message.
    */
   public function getPlugin();
diff --git a/src/SharePluginBase.php b/src/SharePluginBase.php
index d8ab245..201929a 100644
--- a/src/SharePluginBase.php
+++ b/src/SharePluginBase.php
@@ -18,7 +18,7 @@ abstract class SharePluginBase extends PluginBase implements SharePluginInterfac
   /**
    * Share Message.
    *
-   * @var \Drupal\sharemessage\ShareMessageInterface $shareMessage
+   * @var ShareMessageInterface $shareMessage
    */
   protected $shareMessage;
 
diff --git a/src/SharePluginManager.php b/src/SharePluginManager.php
index f600b9a..1b39034 100644
--- a/src/SharePluginManager.php
+++ b/src/SharePluginManager.php
@@ -17,9 +17,9 @@ class SharePluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/tests/src/Functional/Plugin/ShareMessageAddthisTest.php b/tests/src/Functional/Plugin/ShareMessageAddthisTest.php
index e2e582d..bf1f081 100644
--- a/tests/src/Functional/Plugin/ShareMessageAddthisTest.php
+++ b/tests/src/Functional/Plugin/ShareMessageAddthisTest.php
@@ -24,11 +24,15 @@ class ShareMessageAddthisTest extends ShareMessageTestBase {
       'default_additional_services' => FALSE,
       'default_icon_style' => 'addthis_16x16_style',
     ];
-    $this->drupalPostForm('admin/config/services/sharemessage/addthis-settings', $default_settings, t('Save configuration'));
+    $this->drupalGet('admin/config/services/sharemessage/addthis-settings');
+    $this->submitForm($default_settings, t('Save configuration'));
 
     // Set a new Share Message.
     $this->drupalGet('admin/config/services/sharemessage/add');
-    $this->assertText('AddThis plugin for Share Message module.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('AddThis plugin for Share Message module.');
     $override_settings = '//details[starts-with(@data-drupal-selector, "edit-settings")]';
     $this->assertFieldByXPath($override_settings);
     $sharemessage = [
@@ -37,14 +41,15 @@ class ShareMessageAddthisTest extends ShareMessageTestBase {
       'plugin' => 'addthis',
       'title' => 'AddThis test',
     ];
-    $this->drupalPostForm('admin/config/services/sharemessage/add', $sharemessage, t('Save'));
+    $this->drupalGet('admin/config/services/sharemessage/add');
+    $this->submitForm($sharemessage, t('Save'));
 
     // Assert that the initial settings are saved correctly.
     $this->drupalGet('sharemessage-test/sharemessage_test_addthis_label');
     $this->assertShareButtons($sharemessage, $default_settings['default_icon_style'], TRUE);
-    $this->assertRaw('<a class="addthis_button_facebook">');
-    $this->assertRaw('<a class="addthis_button_facebook_like">');
-    $this->assertNoRaw('<a class="addthis_button_compact">');
+    $this->assertSession()->responseContains('<a class="addthis_button_facebook">');
+    $this->assertSession()->responseContains('<a class="addthis_button_facebook_like">');
+    $this->assertSession()->responseNotContains('<a class="addthis_button_compact">');
 
     // Set new AddThis settings.
     $default_settings = [
@@ -56,16 +61,17 @@ class ShareMessageAddthisTest extends ShareMessageTestBase {
       'default_additional_services' => TRUE,
       'default_icon_style' => 'addthis_32x32_style',
     ];
-    $this->drupalPostForm('admin/config/services/sharemessage/addthis-settings', $default_settings, t('Save configuration'));
+    $this->drupalGet('admin/config/services/sharemessage/addthis-settings');
+    $this->submitForm($default_settings, t('Save configuration'));
 
     // Check that the saving of the new AddThis settings works correctly.
     $this->drupalGet('sharemessage-test/sharemessage_test_addthis_label');
     $this->assertShareButtons($sharemessage, $default_settings['default_icon_style'], TRUE);
-    $this->assertRaw('<a class="addthis_button_facebook">');
-    $this->assertNoRaw('<a class="addthis_button_facebook_like">');
-    $this->assertRaw('<a class="addthis_button_linkedin">');
-    $this->assertRaw('<a class="addthis_button_twitter">');
-    $this->assertRaw('<a class="addthis_button_compact">');
+    $this->assertSession()->responseContains('<a class="addthis_button_facebook">');
+    $this->assertSession()->responseNotContains('<a class="addthis_button_facebook_like">');
+    $this->assertSession()->responseContains('<a class="addthis_button_linkedin">');
+    $this->assertSession()->responseContains('<a class="addthis_button_twitter">');
+    $this->assertSession()->responseContains('<a class="addthis_button_compact">');
   }
 
 }
diff --git a/tests/src/Functional/Plugin/ShareMessageOGHeadersTest.php b/tests/src/Functional/Plugin/ShareMessageOGHeadersTest.php
index 6b91815..7fa1d0e 100644
--- a/tests/src/Functional/Plugin/ShareMessageOGHeadersTest.php
+++ b/tests/src/Functional/Plugin/ShareMessageOGHeadersTest.php
@@ -31,15 +31,25 @@ class ShareMessageOGHeadersTest extends ShareMessageTestBase {
       'message_short' => 'OG headers short description',
       'fallback_image' => $file->uuid(),
     ];
-    $this->drupalPostForm('admin/config/services/sharemessage/add', $sharemessage, t('Save'));
-    $this->assertText(t('Share Message @label has been added.', ['@label' => $sharemessage['label']]));
+    $this->drupalGet('admin/config/services/sharemessage/add');
+    $this->submitForm($sharemessage, t('Save'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Share Message @label has been added.', ['@label' => $sharemessage['label']]));
     $this->drupalGet('admin/config/services/sharemessage/manage/sharemessage_test_og_label');
     $override_settings = '//details[starts-with(@data-drupal-selector, "edit-settings")]';
     $this->assertFieldByXPath($override_settings);
-    $this->assertText('Open graph headers are used when users want to use it as a framework or a background tool only.');
-    $this->assertText('The OG Headers plugin doesn\'t provide any settings.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Open graph headers are used when users want to use it as a framework or a background tool only.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The OG Headers plugin doesn\'t provide any settings.');
     $this->drupalGet('sharemessage-test/sharemessage_test_og_label');
-    $url = file_create_url($file->getFileUri());
+    $url = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
 
     $image = \Drupal::service('image.factory')->get($file->getFileUri());
     $image_width = $image->getWidth();
@@ -62,7 +72,7 @@ class ShareMessageOGHeadersTest extends ShareMessageTestBase {
       'message_long' => 'Long description',
       'message_short' => 'Short description',
     ];
-    $this->drupalPostForm(NULL, $sharemessage, t('Save'));
+    $this->submitForm($sharemessage, t('Save'));
     $this->drupalGet('sharemessage-test/sharemessage_test_special_characters');
     // Test for special characters (such as ', ", <, >, &) in a node title
     // used as token for a Share Message title.
diff --git a/tests/src/Functional/Plugin/ShareMessageSharrreTest.php b/tests/src/Functional/Plugin/ShareMessageSharrreTest.php
index 762756f..9c2961d 100644
--- a/tests/src/Functional/Plugin/ShareMessageSharrreTest.php
+++ b/tests/src/Functional/Plugin/ShareMessageSharrreTest.php
@@ -28,7 +28,7 @@ class ShareMessageSharrreTest extends ShareMessageTestBase {
       'enable_counter' => FALSE,
       'enable_tracking' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $default_settings, t('Save configuration'));
+    $this->submitForm($default_settings, t('Save configuration'));
 
     // Set a new Share Message.
     $sharemessage = [
@@ -37,16 +37,20 @@ class ShareMessageSharrreTest extends ShareMessageTestBase {
       'plugin' => 'sharrre',
       'title' => 'Sharrre test',
     ];
-    $this->drupalPostForm('admin/config/services/sharemessage/add', $sharemessage, t('Save'));
+    $this->drupalGet('admin/config/services/sharemessage/add');
+    $this->submitForm($sharemessage, t('Save'));
     $this->drupalGet('admin/config/services/sharemessage/manage/sharemessage_test_sharrre_label');
     $override_settings = '//details[starts-with(@data-drupal-selector, "edit-settings")]';
     $this->assertFieldByXPath($override_settings);
-    $this->assertText('Sharrre is a jQuery plugin that allows you to create nice widgets sharing for Facebook, Twitter, Google Plus (with PHP script) and more.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Sharrre is a jQuery plugin that allows you to create nice widgets sharing for Facebook, Twitter, Google Plus (with PHP script) and more.');
 
     // Assert that the initial settings are saved correctly.
     $this->drupalGet('sharemessage-test/sharemessage_test_sharrre_label');
-    $this->assertRaw('"services":{"googlePlus":"googlePlus","facebook":"facebook"}');
-    $this->assertRaw('"shorter_total":false,"enable_hover":false,"enable_counter":false,"enable_tracking":false');
+    $this->assertSession()->responseContains('"services":{"googlePlus":"googlePlus","facebook":"facebook"}');
+    $this->assertSession()->responseContains('"shorter_total":false,"enable_hover":false,"enable_counter":false,"enable_tracking":false');
 
     // Set new Sharrre settings.
     $this->drupalGet('admin/config/services/sharemessage/sharrre-settings');
@@ -64,13 +68,13 @@ class ShareMessageSharrreTest extends ShareMessageTestBase {
       'enable_counter' => TRUE,
       'enable_tracking' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $default_settings, t('Save configuration'));
+    $this->submitForm($default_settings, t('Save configuration'));
 
     // Check that the saving of the new Sharrre settings works correctly.
     $this->drupalGet('sharemessage-test/sharemessage_test_sharrre_label');
-    $this->assertRaw('"services":{"googlePlus":"googlePlus","facebook":"facebook","twitter":"twitter","linkedin":"linkedin","pinterest":"pinterest"}');
-    $this->assertNoRaw('"services":{"googlePlus":"googlePlus","facebook":"facebook"}');
-    $this->assertRaw('"shorter_total":true,"enable_hover":true,"enable_counter":true,"enable_tracking":false');
-    $this->assertNoRaw('"shorter_total":false,"enable_hover":false,"enable_counter":false,"enable_tracking":false');
+    $this->assertSession()->responseContains('"services":{"googlePlus":"googlePlus","facebook":"facebook","twitter":"twitter","linkedin":"linkedin","pinterest":"pinterest"}');
+    $this->assertSession()->responseNotContains('"services":{"googlePlus":"googlePlus","facebook":"facebook"}');
+    $this->assertSession()->responseContains('"shorter_total":true,"enable_hover":true,"enable_counter":true,"enable_tracking":false');
+    $this->assertSession()->responseNotContains('"shorter_total":false,"enable_hover":false,"enable_counter":false,"enable_tracking":false');
   }
 }
diff --git a/tests/src/Functional/Plugin/ShareMessageSocialSharePrivacyTest.php b/tests/src/Functional/Plugin/ShareMessageSocialSharePrivacyTest.php
index 44f5ecb..a3cd500 100644
--- a/tests/src/Functional/Plugin/ShareMessageSocialSharePrivacyTest.php
+++ b/tests/src/Functional/Plugin/ShareMessageSocialSharePrivacyTest.php
@@ -23,7 +23,7 @@ class ShareMessageSocialSharePrivacyTest extends ShareMessageTestBase {
         'facebook',
       ],
     ];
-    $this->drupalPostForm(NULL, $default_settings, t('Save configuration'));
+    $this->submitForm($default_settings, t('Save configuration'));
 
     // Set a new Share Message.
     $sharemessage = [
@@ -32,17 +32,21 @@ class ShareMessageSocialSharePrivacyTest extends ShareMessageTestBase {
       'plugin' => 'socialshareprivacy',
       'title' => 'SocialSharePrivacy test',
     ];
-    $this->drupalPostForm('admin/config/services/sharemessage/add', $sharemessage, t('Save'));
+    $this->drupalGet('admin/config/services/sharemessage/add');
+    $this->submitForm($sharemessage, t('Save'));
     $this->drupalGet('admin/config/services/sharemessage/manage/sharemessage_test_socialshareprivacy_label');
     $override_settings = '//details[starts-with(@data-drupal-selector, "edit-settings")]';
     $this->assertFieldByXPath($override_settings);
-    $this->assertText('Social Share Privacy is a jQuery plugin that lets you add social share buttons to your website that don\'t allow the social sites to track your users.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Social Share Privacy is a jQuery plugin that lets you add social share buttons to your website that don\'t allow the social sites to track your users.');
 
     // Assert that the initial settings are saved correctly.
     $this->drupalGet('sharemessage-test/sharemessage_test_socialshareprivacy_label');
-    $this->assertRaw('"facebook":{"status":true');
-    $this->assertRaw('"gplus":{"status":true');
-    $this->assertRaw('"twitter":{"status":false');
+    $this->assertSession()->responseContains('"facebook":{"status":true');
+    $this->assertSession()->responseContains('"gplus":{"status":true');
+    $this->assertSession()->responseContains('"twitter":{"status":false');
 
     // Set new Social Share Privacy settings.
     $this->drupalGet('admin/config/services/sharemessage/socialshareprivacy-settings');
@@ -52,13 +56,13 @@ class ShareMessageSocialSharePrivacyTest extends ShareMessageTestBase {
         'twitter',
       ],
     ];
-    $this->drupalPostForm(NULL, $default_settings, t('Save configuration'));
+    $this->submitForm($default_settings, t('Save configuration'));
 
     // Check the saving of the new Social Share Privacy settings is correctly.
     $this->drupalGet('sharemessage-test/sharemessage_test_socialshareprivacy_label');
-    $this->assertRaw('"twitter":{"status":true');
-    $this->assertRaw('"gplus":{"status":true');
-    $this->assertRaw('"facebook":{"status":false');
+    $this->assertSession()->responseContains('"twitter":{"status":true');
+    $this->assertSession()->responseContains('"gplus":{"status":true');
+    $this->assertSession()->responseContains('"facebook":{"status":false');
   }
 
 }
