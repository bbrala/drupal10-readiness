modules/contrib/openid_connect_akamai/openid_connect_akamai.install
modules/contrib/openid_connect_akamai/src/Controller/OpenIDConnectRedirectController.php
modules/contrib/openid_connect_akamai/src/EventSubscriber/AnonymousRedirectSubscriber.php
modules/contrib/openid_connect_akamai/src/Plugin/OpenIDConnectClient/Akamai.php
modules/contrib/openid_connect_akamai/src/Routing/RouteSubscriber.php

3 files with changes
====================

1) modules/contrib/openid_connect_akamai/src/Routing/RouteSubscriber.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * RouteSubscriber constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The config factory.
    */
   public function __construct(ConfigFactoryInterface $config) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/openid_connect_akamai/src/EventSubscriber/AnonymousRedirectSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\openid_connect_akamai\EventSubscriber;

+use Drupal\openid_connect_akamai\Plugin\OpenIDConnectClient\Akamai;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * OpenId Akamai Client.
    *
-   * @var \Drupal\openid_connect_akamai\Plugin\OpenIDConnectClient\Akamai
+   * @var Akamai
    */
   protected $openidAkamaiClient;

@@ @@
   /**
    * Guzzle Http Client.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
   /**
    * Constructs a new AnonymousRedirectSubscriber instance.
    *
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   Configuration object.
-   * @param \Drupal\openid_connect\Plugin\OpenIDConnectClientManager $openid_client_manager
+   * @param OpenIDConnectClientManager $openid_client_manager
    *   OpenId Client Manager.
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   Guzzle Http Client.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function __construct(AccountInterface $current_user, ConfigFactoryInterface $config, OpenIDConnectClientManager $openid_client_manager, ClientInterface $http_client) {
     $this->currentUser = $current_user;
@@ @@
   /**
    * Redirects anonymous users to login endpoint for SSO.
    *
-   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
+   * @param RequestEvent $event
    *   The request event.
    */
   public function redirectAnonymous(RequestEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/openid_connect_akamai/src/Controller/OpenIDConnectRedirectController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\openid_connect_akamai\Controller;

+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\openid_connect\Controller\OpenIDConnectRedirectController as BaseOpenIDConnectRedirectController;
 use Symfony\Component\HttpFoundation\Cookie;

@@ @@
    * @param string $client_name
    *   The client name.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The redirect response starting the authentication request.
    */
   public function authenticate($client_name) {
@@ @@
     $query = $this->requestStack->getCurrentRequest()->query;
     if ($query->get('error')) {
       // Set cookie which controls that the login attempt using the SSO failed.
-      $response->headers->setCookie(new Cookie('akamai_error', '1', time() + $configuration['sso_cookie_age']));
+      $response->headers->setCookie(Cookie::create('akamai_error', '1', time() + $configuration['sso_cookie_age']));
       if ($query->get('error') == 'login_required') {
         // Remove error message.
         $this->messenger()->deleteByType('warning');
@@ @@
     }

     if ($this->currentUser()->isAuthenticated()) {
-      $response->headers->setCookie(new Cookie('akamai_error', '1', 1));
+      $response->headers->setCookie(Cookie::create('akamai_error', '1', 1));
     }

     return $response;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * NewToStaticCallRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 3 files have been changed by Rector                                       

