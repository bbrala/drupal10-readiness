modules/contrib/template_whisperer/inc/access.inc
modules/contrib/template_whisperer/inc/help.inc
modules/contrib/template_whisperer/inc/rm_cardinality.inc
modules/contrib/template_whisperer/inc/suggestions/entity.inc
modules/contrib/template_whisperer/inc/suggestions/page.inc
modules/contrib/template_whisperer/inc/tokens.inc
modules/contrib/template_whisperer/src/Controller/AdminSuggestionController.php
modules/contrib/template_whisperer/src/Entity/TemplateWhispererSuggestionEntity.php
modules/contrib/template_whisperer/src/Entity/TemplateWhispererSuggestionEntityInterface.php
modules/contrib/template_whisperer/src/Form/TemplateWhispererSuggestionDeleteForm.php
modules/contrib/template_whisperer/src/Form/TemplateWhispererSuggestionForm.php
modules/contrib/template_whisperer/src/Plugin/Condition/TemplateWhisperer.php
modules/contrib/template_whisperer/src/Plugin/Field/FieldFormatter/TemplateWhispererFormatter.php
modules/contrib/template_whisperer/src/Plugin/Field/FieldType/TemplateWhispererFieldItem.php
modules/contrib/template_whisperer/src/Plugin/Field/FieldWidget/TemplateWhispererWidget.php
modules/contrib/template_whisperer/src/TemplateWhispererManager.php
modules/contrib/template_whisperer/src/TemplateWhispererSuggestionListBuilder.php
modules/contrib/template_whisperer/src/TemplateWhispererSuggestionUsage.php
modules/contrib/template_whisperer/src/TwigExtension/TwigExtension.php
modules/contrib/template_whisperer/template_whisperer.install
modules/contrib/template_whisperer/template_whisperer.module
modules/contrib/template_whisperer/tests/src/Functional/ConditionalBlockTest.php
modules/contrib/template_whisperer/tests/src/Functional/SuggestionTokenReplaceTest.php
modules/contrib/template_whisperer/tests/src/Functional/TemplateWhispererTestBase.php
modules/contrib/template_whisperer/tests/src/Functional/UiFieldTest.php
modules/contrib/template_whisperer/tests/src/Functional/UiPageTest.php
modules/contrib/template_whisperer/tests/src/Functional/WidgetFormElementTest.php
modules/contrib/template_whisperer/tests/src/Kernel/FieldTemplateWhispererTest.php
modules/contrib/template_whisperer/tests/src/Kernel/TemplateWhispererManagerTest.php
modules/contrib/template_whisperer/tests/src/Kernel/TwigExtensionTest.php
modules/contrib/template_whisperer/tests/src/Traits/InvokeMethodTrait.php

21 files with changes
=====================

1) modules/contrib/template_whisperer/tests/src/Kernel/TwigExtensionTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\template_whisperer\Kernel;

+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\template_whisperer\TwigExtension\TwigExtension;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntityInterface;

@@ @@
   /**
    * The Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
     $this->installEntitySchema('template_whisperer_suggestion');
     $this->installSchema('template_whisperer', ['template_whisperer_suggestion_usage']);

-    /** @var \Drupal\Core\Entity\EntityTypeManager $entityTypeManager */
+    /** @var EntityTypeManager $entityTypeManager */
     $this->entityTypeManager = $this->container->get('entity_type.manager');

     // Create 2 defaults Template Whisperer.
@@ @@
    * @covers Drupal\template_whisperer\TwigExtension\TwigExtension::getEntitiesFromSuggestion
    */
   public function testsGetOneEntityFromSuggestion() {
-    /** @var \Drupal\template_whisperer\TwigExtension\TwigExtension $extension */
+    /** @var TwigExtension $extension */
     $extension = \Drupal::service('template_whisperer.twig.extension');

     $suggestions = $extension->getEntitiesFromSuggestion('bar');
@@ @@
    * @covers Drupal\template_whisperer\TwigExtension\TwigExtension::getEntitiesFromSuggestion
    */
   public function testsGetEntitiesFromSuggestion() {
-    /** @var \Drupal\template_whisperer\TwigExtension\TwigExtension $extension */
+    /** @var TwigExtension $extension */
     $extension = \Drupal::service('template_whisperer.twig.extension');
     $suggestions = $extension->getEntitiesFromSuggestion('foo');
     $this->assertIsArray($suggestions);
@@ @@
    * @covers Drupal\template_whisperer\TwigExtension\TwigExtension::getEntitiesFromSuggestion
    */
   public function testsGetNoneEntitiesBySuggestion() {
-    /** @var \Drupal\template_whisperer\TwigExtension\TwigExtension $extension */
+    /** @var TwigExtension $extension */
     $extension = \Drupal::service('template_whisperer.twig.extension');
     $suggestions = $extension->getEntitiesFromSuggestion($this->randomString(16));
     $this->assertIsArray($suggestions);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/template_whisperer/tests/src/Kernel/TemplateWhispererManagerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\template_whisperer\Kernel;

+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\template_whisperer\TemplateWhispererManager;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\template_whisperer\Traits\InvokeMethodTrait;

@@ @@
   /**
    * The Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
     $this->installEntitySchema('template_whisperer_suggestion');
     $this->installSchema('template_whisperer', ['template_whisperer_suggestion_usage']);

-    /** @var \Drupal\Core\Entity\EntityTypeManager $entityTypeManager */
+    /** @var EntityTypeManager $entityTypeManager */
     $this->entityTypeManager = $this->container->get('entity_type.manager');

     // Create 1 default Template Whisperer.
@@ @@
    * @covers \Drupal\template_whisperer\TemplateWhispererManager::getFieldSuggestions
    */
   public function testGetFieldSuggestions() {
-    /** @var \Drupal\template_whisperer\TemplateWhispererManager $tw_manager */
+    /** @var TemplateWhispererManager $tw_manager */
     $tw_manager = \Drupal::service('plugin.manager.template_whisperer');

     // Set an existing template whisperer.
@@ @@
       $entity,
       'field_template_whisperer',
     ]);
-    $this->assertEqual('foo', $suggestions);
+    $this->assertEquals('foo', $suggestions);

     // Set an none-existing template whisperer.
     // This may happend when an whisperer is deleted but stay on node data.
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/template_whisperer/tests/src/Kernel/FieldTemplateWhispererTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\template_whisperer\Kernel;

+use Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntity;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\FieldItemInterface;
 use Drupal\Tests\field\Kernel\FieldKernelTestBase;
@@ @@
   /**
    * Collection of  Template Whisperer test entites.
    *
-   * @var Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntity[]
+   * @var TemplateWhispererSuggestionEntity[]
    */
   private $suggestions;

@@ @@

     $this->assertTrue($entity->field_template_whisperer instanceof FieldItemListInterface, 'Field implements interface.');
     $this->assertTrue($entity->field_template_whisperer[0] instanceof FieldItemInterface, 'Field item implements interface.');
-    $this->assertEqual($entity->field_template_whisperer->target_id, $target_id);
-    $this->assertEqual($entity->field_template_whisperer[0]->target_id, $target_id);
+    $this->assertEquals($entity->field_template_whisperer->target_id, $target_id);
+    $this->assertEquals($entity->field_template_whisperer[0]->target_id, $target_id);

     // Verify changing the field's value.
     $new_target_id = $this->suggestions['bar']->getSuggestion();
     $entity->field_template_whisperer->value = $new_target_id;
-    $this->assertEqual($entity->field_template_whisperer->value, $new_target_id);
+    $this->assertEquals($entity->field_template_whisperer->value, $new_target_id);

     // Read changed entity and assert changed values.
     $entity->save();
     $entity = $type_manager->getStorage('entity_test')->load($id);
-    $this->assertEqual($entity->field_template_whisperer->target_id, $target_id);
-    $this->assertEqual($entity->field_template_whisperer[0]->target_id, $target_id);
+    $this->assertEquals($entity->field_template_whisperer->target_id, $target_id);
+    $this->assertEquals($entity->field_template_whisperer[0]->target_id, $target_id);
   }

   /**
@@ @@

     foreach ($scenarios as $operation => $expected) {
       $result = $entity->field_template_whisperer->access($operation, $test_user);
-      $this->assertEqual($result, $expected);
+      $this->assertEquals($result, $expected);
     }
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/template_whisperer/tests/src/Functional/WidgetFormElementTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\template_whisperer\Functional;

+use Drupal\node\NodeInterface;
+use Drupal\taxonomy\TermInterface;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;

 /**
@@ @@
   /**
    * The node (article) to tests with.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $article;

@@ @@
   /**
    * The taxonomy term (tags) to tests with.
    *
-   * @var \Drupal\taxonomy\TermInterface
+   * @var TermInterface
    */
   protected $tag;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/template_whisperer/tests/src/Functional/UiPageTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\template_whisperer\Functional;

+use Drupal\Core\Entity\EntityTypeManager;
 /**
  * Tests event info pages and links.
  *
@@ @@
   /**
    * The Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   protected function setUp(): void {
     parent::setUp();

-    /** @var \Drupal\Core\Entity\EntityTypeManager $entityTypeManager */
+    /** @var EntityTypeManager $entityTypeManager */
     $this->entityTypeManager = $this->container->get('entity_type.manager');

     // Create an page content type.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/template_whisperer/tests/src/Functional/UiFieldTest.php:75

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     $this->debugOff();
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/template_whisperer/tests/src/Functional/TemplateWhispererTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\template_whisperer\Functional;

+use Behat\Mink\Element\NodeElement;
+use Behat\Mink\Exception\ElementNotFoundException;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
    * @param string $locator
    *   Link id, title, text or image alt.
    *
-   * @return \Behat\Mink\Element\NodeElement|null
+   * @return NodeElement|null
    *   The link node element.
    */
   public function findLink($locator) {
@@ @@
    * @param string $locator
    *   Input id, name or label.
    *
-   * @return \Behat\Mink\Element\NodeElement|null
+   * @return NodeElement|null
    *   The input field element.
    */
   public function findField($locator) {
@@ @@
    * @param string $locator
    *   Button id, value or alt.
    *
-   * @return \Behat\Mink\Element\NodeElement|null
+   * @return NodeElement|null
    *   The button node element.
    */
   public function findButton($locator) {
@@ @@
    * @param string $locator
    *   Button id, value or alt.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
+   * @throws ElementNotFoundException
    */
   public function pressButton($locator) {
     $this->getSession()->getPage()->pressButton($locator);
@@ @@
    * @param string $value
    *   Value.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
+   * @throws ElementNotFoundException
    *
    * @see \Behat\Mink\Element\NodeElement::setValue
    */
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/template_whisperer/tests/src/Functional/SuggestionTokenReplaceTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\template_whisperer\Functional;

+use Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntity;
+use Drupal\node\NodeInterface;
 /**
  * Check suggestion tokens replacement.
  *
@@ @@
   /**
    * Collection of Template Whisperer test entites.
    *
-   * @var \Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntity[]
+   * @var TemplateWhispererSuggestionEntity[]
    */
   private $suggestions;

@@ @@
   /**
    * The node with an attached suggestion for this tests.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $testNode;

@@ @@

     // Suggestion tokens.
     $replacement = $token_service->replace('[suggestion:name]', ['suggestion' => $this->suggestions['foo']], $options);
-    $this->assertEqual($replacement, $this->suggestions['foo']->getName());
+    $this->assertEquals($replacement, $this->suggestions['foo']->getName());

     // Chainable Lookup -> Suggestion tokens.
     $replacement = $token_service->replace('[suggestion:lookup:foo]', [], $options);
-    $this->assertEqual($replacement, $this->suggestions['foo']->getSuggestion());
+    $this->assertEquals($replacement, $this->suggestions['foo']->getSuggestion());
     $replacement = $token_service->replace('[suggestion:lookup:foo:name]', [], $options);
-    $this->assertEqual($replacement, $this->suggestions['foo']->getName());
+    $this->assertEquals($replacement, $this->suggestions['foo']->getName());

     // Chainable Lookup -> Entity tokens.
     $replacement = $token_service->replace('[suggestion:lookup:foo:entity:nid]', [], $options);
-    $this->assertEqual($replacement, $this->testNode->id());
+    $this->assertEquals($replacement, $this->testNode->id());
     $replacement = $token_service->replace('[suggestion:lookup:foo:entity:url]', [], $options);
-    $this->assertEqual($replacement, $this->testNode->toUrl('canonical', ['absolute' => TRUE])->toString());
+    $this->assertEquals($replacement, $this->testNode->toUrl('canonical', ['absolute' => TRUE])->toString());

     // Tests invalide token for node.
     $replacement = $token_service->replace('[suggestion:lookup:foo:entity]', [], $options);
-    $this->assertEqual($replacement, '[suggestion:lookup:foo:entity]');
+    $this->assertEquals($replacement, '[suggestion:lookup:foo:entity]');
   }

   /**
@@ @@

     // Tests inexisting suggestion.
     $replacement = $token_service->replace('[suggestion:lookup:baz:entity:id]', [], $options);
-    $this->assertEqual($replacement, '[suggestion:lookup:baz:entity:id]');
+    $this->assertEquals($replacement, '[suggestion:lookup:baz:entity:id]');
   }

   /**
@@ @@

     // Tests existing but non-used suggestion.
     $replacement = $token_service->replace('[suggestion:lookup:bar:entity:id]', [], $options);
-    $this->assertEqual($replacement, '[suggestion:lookup:bar:entity:id]');
+    $this->assertEquals($replacement, '[suggestion:lookup:bar:entity:id]');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/template_whisperer/tests/src/Functional/ConditionalBlockTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\template_whisperer\Functional;

+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\node\NodeInterface;
+use Drupal\taxonomy\TermInterface;
+use Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntity;
+use Drupal\user\UserInterface;
 use Drupal\block\BlockInterface;

 /**
@@ @@
   /**
    * The Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The block entities used by this test.
    *
-   * @var \Drupal\block\BlockInterface[]
+   * @var BlockInterface[]
    */
   protected $blocks;

@@ @@
   /**
    * The articles Node used by this test.
    *
-   * @var \Drupal\node\NodeInterface[]
+   * @var NodeInterface[]
    */
   protected $articles;

@@ @@
   /**
    * The tags Term used by this test.
    *
-   * @var \Drupal\taxonomy\TermInterface[]
+   * @var TermInterface[]
    */
   protected $tags;

@@ @@
   /**
    * The Template Whisperer suggestions used by this test.
    *
-   * @var \Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntity[]
+   * @var TemplateWhispererSuggestionEntity[]
    */
   protected $suggestions;

@@ @@
   /**
    * An administrative user to configure the test environment.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   protected function setUp(): void {
     parent::setUp();

-    /** @var \Drupal\Core\Entity\EntityTypeManager $entityTypeManager */
+    /** @var EntityTypeManager $entityTypeManager */
     $this->entityTypeManager = $this->container->get('entity_type.manager');

     // Create and log in an administrative user.
@@ @@
   /**
    * Update the block with template whisperer visibility conditions.
    *
-   * @param \Drupal\block\BlockInterface $block
+   * @param BlockInterface $block
    *   The block to update.
    * @param array $suggestions
    *   Collection of suggestion ID to add as condition of block visibility.
@@ @@
     // Update the placed block to be visible only on "Timeline".
     $this->drupalGet('admin/structure/block/manage/' . $this->blocks[0]->id());
     $edit['visibility[template_whisperer][suggestions][' . $this->suggestions[0]->id() . ']'] = TRUE;
-    $this->drupalPostForm(NULL, $edit, 'Save block');
+    $this->submitForm($edit, 'Save block');

     // Asserts the configurations has been saved.
     $this->assertSession()->pageTextContains('The block configuration has been saved');
@@ @@
     $this->drupalGet('admin/structure/block/manage/' . $this->blocks[0]->id());
     $edit['visibility[template_whisperer][suggestions][' . $this->suggestions[0]->id() . ']'] = TRUE;
     $edit['visibility[template_whisperer][suggestions][' . $this->suggestions[1]->id() . ']'] = TRUE;
-    $this->drupalPostForm(NULL, $edit, 'Save block');
+    $this->submitForm($edit, 'Save block');
     // Asserts the configurations has been saved.
     $this->assertSession()->pageTextContains('The block configuration has been saved');
     $this->clickLink('Configure');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/template_whisperer/template_whisperer.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\user\RoleInterface;
 /**
  * @file
  * Contains template_whisperer.install.
@@ @@
  * Migrate the permission `administer the template whisperer field` to roles.
  */
 function template_whisperer_update_8001(&$sandbox) {
-  /** @var \Drupal\user\RoleInterface $roleStorage */
+  /** @var RoleInterface $roleStorage */
   $roleStorage = \Drupal::service('entity_type.manager')
     ->getStorage('user_role');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


11) modules/contrib/template_whisperer/src/TwigExtension/TwigExtension.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\template_whisperer\TwigExtension;

+use Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntityInterface;
 use Drupal\template_whisperer\TemplateWhispererManager;
 use Drupal\template_whisperer\TemplateWhispererSuggestionUsage;

@@ @@
   /**
    * Template Whisperer Manager.
    *
-   * @var \Drupal\template_whisperer\TemplateWhispererManager
+   * @var TemplateWhispererManager
    */
   protected $twManager;

@@ @@
   /**
    * Template Whisperer Suggestion Usage.
    *
-   * @var \Drupal\template_whisperer\TemplateWhispererSuggestionUsage
+   * @var TemplateWhispererSuggestionUsage
    */
   protected $twSuggestionUsage;

@@ @@
   /**
    * Constructs \Drupal\template_whisperer\TwigExtension\TwigExtension.
    *
-   * @param \Drupal\template_whisperer\TemplateWhispererManager $tw_manager
+   * @param TemplateWhispererManager $tw_manager
    *   The template whisperer manager.
-   * @param \Drupal\template_whisperer\TemplateWhispererSuggestionUsage $tw_suggestion_usage
+   * @param TemplateWhispererSuggestionUsage $tw_suggestion_usage
    *   The template whisperer suggestion usage service.
    */
   public function __construct(TemplateWhispererManager $tw_manager, TemplateWhispererSuggestionUsage $tw_suggestion_usage) {
@@ @@
    * @param string $tw_suggestion
    *   The template whisperer suggestion.
    *
-   * @return \Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntityInterface[]
+   * @return TemplateWhispererSuggestionEntityInterface[]
    *   A collection of Template whisperer entities.
    */
   public function getEntitiesFromSuggestion(string $tw_suggestion) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/template_whisperer/src/TemplateWhispererSuggestionUsage.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The database connection used to store usage information(s).
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Construct the TemplateWhispererSuggestionUsage.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection which will be used to store
    *   the Template Whisperer Suggestion usage information.
    * @param string $table
@@ @@
    * - The User module associates an suggestion with a user,
    *   so $type would be 'user' and the $id would be the user's uid.
    *
-   * @param \Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntityInterface $suggestion
+   * @param TemplateWhispererSuggestionEntityInterface $suggestion
    *   A suggestion entity.
    * @param string $module
    *   The name of the module using the suggestion.
@@ @@
   /**
    * Removes a record to indicate that a module is no longer using a suggestion.
    *
-   * @param \Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntityInterface $suggestion
+   * @param TemplateWhispererSuggestionEntityInterface $suggestion
    *   A suggestion entity.
    * @param string $module
    *   The name of the module using the suggestion.
@@ @@
   /**
    * Determines where a suggestion is used.
    *
-   * @param \Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntityInterface $suggestion
+   * @param TemplateWhispererSuggestionEntityInterface $suggestion
    *   A suggestion entity.
    *
    * @return array
@@ @@
   /**
    * Determines how many time a suggestion is used.
    *
-   * @param \Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntityInterface $suggestion
+   * @param TemplateWhispererSuggestionEntityInterface $suggestion
    *   A suggestion entity.
    *
    * @return int
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


13) modules/contrib/template_whisperer/src/TemplateWhispererSuggestionListBuilder.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The url generator service.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;

@@ @@
   /**
    * Template Whisperer Suggestion Usage.
    *
-   * @var \Drupal\template_whisperer\TemplateWhispererSuggestionUsage
+   * @var TemplateWhispererSuggestionUsage
    */
   protected $twSuggestionUsage;

@@ @@
   /**
    * Constructs a TemplateWhispererSuggestionListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   The url generator service.
-   * @param \Drupal\template_whisperer\TemplateWhispererSuggestionUsage $tw_suggestion_usage
+   * @param TemplateWhispererSuggestionUsage $tw_suggestion_usage
    *   Template Whisperer Suggestion Usage.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, UrlGeneratorInterface $url_generator, TemplateWhispererSuggestionUsage $tw_suggestion_usage) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/template_whisperer/src/TemplateWhispererManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\template_whisperer;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntity;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;

@@ @@
   /**
    * EntityTypeManagerInterface to manage Template Whisperer Suggestion.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   private $suggestionStorage;

@@ @@
   /**
    * Class constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity
+   * @param EntityTypeManagerInterface $entity
    *   The interface for entity type managers.
    */
   public function __construct(EntityTypeManagerInterface $entity) {
@@ @@
    * @param string $suggestion
    *   The suggestion.
    *
-   * @return \Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntity|null
+   * @return TemplateWhispererSuggestionEntity|null
    *   Return the Entity corresponding of the given suggestion or Null.
    */
   public function getOneBySuggestion($suggestion) {
@@ @@
   /**
    * Extracts all suggestions of a given entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The content entity to extract suggestions from.
    *
    * @return array
@@ @@
   /**
    * Returns a list of the template_whisperer fields on an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The Entity which contain our special field(s).
    *
    * @return array
@@ @@
   /**
    * Returns a list of the suggestions values from a field.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The Entity that contains our special field(s).
    * @param string $field_name
    *   The field that contains our suggestion.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


15) modules/contrib/template_whisperer/src/Plugin/Field/FieldWidget/TemplateWhispererWidget.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * Template Whisperer Manager.
    *
-   * @var Drupal\template_whisperer\TemplateWhispererManager
+   * @var TemplateWhispererManager
    */
   protected $twManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/template_whisperer/src/Plugin/Field/FieldType/TemplateWhispererFieldItem.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\template_whisperer\Plugin\Field\FieldType;

+use Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntityInterface;
 use Drupal\Core\Field\FieldItemBase;
 use Drupal\Core\TypedData\DataDefinition;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
@@ @@
       $suggestions = $this->referencedEntities();
       $ids = [];

-      /** @var \Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntityInterface $suggestion */
+      /** @var TemplateWhispererSuggestionEntityInterface $suggestion */
       foreach ($suggestions as $suggestion) {
         $ids[] = $suggestion->id();
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/template_whisperer/src/Plugin/Condition/TemplateWhisperer.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The Template Manager.
    *
-   * @var \Drupal\template_whisperer\TemplateWhispererManager
+   * @var TemplateWhispererManager
    */
   protected $twManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/template_whisperer/src/Form/TemplateWhispererSuggestionForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\template_whisperer\Form;

+use Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntity;
 use Drupal\Core\Entity\EntityForm;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Template Whisperer Manager.
    *
-   * @var Drupal\template_whisperer\TemplateWhispererManager
+   * @var TemplateWhispererManager
    */
   protected $twManager;

@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntity $entity */
+    /** @var TemplateWhispererSuggestionEntity $entity */
     $entity = $this->buildEntity($form, $form_state);

     $form['#title'] = $this->operation == 'add' ? $this->t('Add suggestion')
@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntity $entity */
+    /** @var TemplateWhispererSuggestionEntity $entity */
     $entity = $this->buildEntity($form, $form_state);

     $entity->id = trim($entity->suggestion);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/template_whisperer/src/Form/TemplateWhispererSuggestionDeleteForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Template Whisperer Suggestion Usage.
    *
-   * @var \Drupal\template_whisperer\TemplateWhispererSuggestionUsage
+   * @var TemplateWhispererSuggestionUsage
    */
   protected $twSuggestionUsage;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/template_whisperer/src/Controller/AdminSuggestionController.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Retrieves the entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Template Whisperer Suggestion Usage.
    *
-   * @var \Drupal\template_whisperer\TemplateWhispererSuggestionUsage
+   * @var TemplateWhispererSuggestionUsage
    */
   protected $twSuggestionUsage;

@@ @@
   /**
    * The url generator service.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;

@@ @@
   /**
    * The pager manager.
    *
-   * @var \Drupal\Core\Pager\PagerManagerInterface
+   * @var PagerManagerInterface
    */
   protected $pagerManager;

@@ @@
   /**
    * The usage admin page for Template Whisperer suggestion.
    *
-   * @param \Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntityInterface $template_whisperer_suggestion
+   * @param TemplateWhispererSuggestionEntityInterface $template_whisperer_suggestion
    *   The given entity from URL.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/template_whisperer/inc/tokens.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntity;
 /**
  * @file
  * Token integration for the Template Whisperer module.
@@ @@

   // Simple key values on the suggestion.
   if ($type == 'suggestion' && !empty($data['suggestion'])) {
-    /** @var \Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntity */
+    /** @var TemplateWhispererSuggestionEntity */
     $suggestion = $data['suggestion'];

     foreach ($tokens as $name => $original) {
@@ @@

   // Simple key values on the suggestion-lookup.
   if ($type == 'suggestion-lookup' && !empty($data['suggestion'])) {
-    /** @var \Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntity */
+    /** @var TemplateWhispererSuggestionEntity */
     $suggestion = $data['suggestion'];
     $usages = $tw_manager_usage->listUsage($suggestion);
     $usage = reset($usages);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 21 files have been changed by Rector                                      

