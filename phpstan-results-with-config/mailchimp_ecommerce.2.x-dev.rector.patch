diff --git a/mailchimp_ecommerce.drush.inc b/mailchimp_ecommerce.drush.inc
index 9e01c2b..e71f079 100644
--- a/mailchimp_ecommerce.drush.inc
+++ b/mailchimp_ecommerce.drush.inc
@@ -1,5 +1,6 @@
 <?php
 
+use Mailchimp\MailchimpEcommerce;
 /**
  * Implements hook_drush_command().
  */
@@ -29,7 +30,7 @@ function drush_mailchimp_ecommerce_mc_ecommerce_get_stores() {
   $api_key = \Drupal::config('mailchimp.settings')->get('api_key');
 
   if (!empty($api_key)) {
-    /** @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
+    /** @var MailchimpEcommerce $mc_ecommerce */
     $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
     $stores = $mc_ecommerce->getStores();
 
@@ -52,7 +53,7 @@ function drush_mailchimp_ecommerce_mc_ecommerce_get_orders($store_id) {
   $api_key = \Drupal::config('mailchimp.settings')->get('api_key');
 
   if (!empty($api_key)) {
-    /** @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
+    /** @var MailchimpEcommerce $mc_ecommerce */
     $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
     $orders = $mc_ecommerce->getOrders($store_id);
 
diff --git a/modules/mailchimp_ecommerce_commerce/src/BatchSyncOrders.php b/modules/mailchimp_ecommerce_commerce/src/BatchSyncOrders.php
index 8110677..b0b6f84 100644
--- a/modules/mailchimp_ecommerce_commerce/src/BatchSyncOrders.php
+++ b/modules/mailchimp_ecommerce_commerce/src/BatchSyncOrders.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\mailchimp_ecommerce_commerce;
 
+use Drupal\mailchimp_ecommerce\CustomerHandler;
+use Drupal\mailchimp_ecommerce\CartHandler;
+use Drupal\mailchimp_ecommerce\OrderHandler;
 use Drupal\commerce_order\Entity\Order;
 use Drupal\Core\Url;
 
@@ -30,13 +33,13 @@ class BatchSyncOrders {
 
     $batch = array_slice($context['results']['order_ids'], $context['sandbox']['progress'], $batch_limit);
 
-    /** @var \Drupal\mailchimp_ecommerce\CustomerHandler $customer_handler */
+    /** @var CustomerHandler $customer_handler */
     $customer_handler = \Drupal::service('mailchimp_ecommerce.customer_handler');
 
-    /** @var \Drupal\mailchimp_ecommerce\CartHandler $cart_handler */
+    /** @var CartHandler $cart_handler */
     $cart_handler = \Drupal::service('mailchimp_ecommerce.cart_handler');
 
-    /** @var \Drupal\mailchimp_ecommerce\OrderHandler $order_handler */
+    /** @var OrderHandler $order_handler */
     $order_handler = \Drupal::service('mailchimp_ecommerce.order_handler');
 
     foreach ($batch as $order_id) {
diff --git a/modules/mailchimp_ecommerce_commerce/src/BatchSyncProducts.php b/modules/mailchimp_ecommerce_commerce/src/BatchSyncProducts.php
index 8f453c3..c50b4b7 100644
--- a/modules/mailchimp_ecommerce_commerce/src/BatchSyncProducts.php
+++ b/modules/mailchimp_ecommerce_commerce/src/BatchSyncProducts.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\mailchimp_ecommerce_commerce;
 
+use Drupal\mailchimp_ecommerce\ProductHandler;
 use Drupal\commerce_product\Entity\Product;
 
 /**
@@ -29,7 +30,7 @@ class BatchSyncProducts {
       $description = (!empty($product->get('body')->value)) ? $product->get('body')->value : '';
       $type = (!empty($product->get('type')->value)) ? $product->get('type')->value : '';
 
-      /** @var \Drupal\mailchimp_ecommerce\ProductHandler $product_handler */
+      /** @var ProductHandler $product_handler */
       $product_handler = \Drupal::service('mailchimp_ecommerce.product_handler');
 
       $url = $product_handler->buildProductUrl($product);
diff --git a/modules/mailchimp_ecommerce_commerce/src/EventSubscriber/CartEventSubscriber.php b/modules/mailchimp_ecommerce_commerce/src/EventSubscriber/CartEventSubscriber.php
index f9d58c8..7c500f8 100644
--- a/modules/mailchimp_ecommerce_commerce/src/EventSubscriber/CartEventSubscriber.php
+++ b/modules/mailchimp_ecommerce_commerce/src/EventSubscriber/CartEventSubscriber.php
@@ -22,32 +22,32 @@ class CartEventSubscriber implements EventSubscriberInterface {
   /**
    * The Cart Handler.
    *
-   * @var \Drupal\mailchimp_ecommerce\CartHandler
+   * @var CartHandler
    */
   private $cart_handler;
 
   /**
    * The Order Handler.
    *
-   * @var \Drupal\mailchimp_ecommerce\OrderHandler
+   * @var OrderHandler
    */
   private $order_handler;
 
   /**
    * The Customer Handler.
    *
-   * @var \Drupal\mailchimp_ecommerce\CustomerHandler
+   * @var CustomerHandler
    */
   private $customer_handler;
 
   /**
    * CartEventSubscriber constructor.
    *
-   * @param \Drupal\mailchimp_ecommerce\CartHandler $cart_handler
+   * @param CartHandler $cart_handler
    *   The Cart Handler.
-   * @param \Drupal\mailchimp_ecommerce\OrderHandler $order_handler
+   * @param OrderHandler $order_handler
    *   The Order Handler.
-   * @param \Drupal\mailchimp_ecommerce\CustomerHandler $customer_handler
+   * @param CustomerHandler $customer_handler
    *   The Customer Handler.
    */
   public function __construct(CartHandler $cart_handler, OrderHandler $order_handler, CustomerHandler $customer_handler) {
diff --git a/modules/mailchimp_ecommerce_commerce/src/EventSubscriber/OrderEventSubscriber.php b/modules/mailchimp_ecommerce_commerce/src/EventSubscriber/OrderEventSubscriber.php
index 9932810..975e882 100644
--- a/modules/mailchimp_ecommerce_commerce/src/EventSubscriber/OrderEventSubscriber.php
+++ b/modules/mailchimp_ecommerce_commerce/src/EventSubscriber/OrderEventSubscriber.php
@@ -19,32 +19,32 @@ class OrderEventSubscriber implements EventSubscriberInterface {
   /**
    * The Order Handler.
    *
-   * @var \Drupal\mailchimp_ecommerce\OrderHandler
+   * @var OrderHandler
    */
   private $order_handler;
 
   /**
    * The Cart Handler.
    *
-   * @var \Drupal\mailchimp_ecommerce\CartHandler
+   * @var CartHandler
    */
   private $cart_handler;
 
   /**
    * The Customer Handler.
    *
-   * @var \Drupal\mailchimp_ecommerce\CustomerHandler
+   * @var CustomerHandler
    */
   private $customer_handler;
 
   /**
    * OrderEventSubscriber constructor.
    *
-   * @param \Drupal\mailchimp_ecommerce\OrderHandler $order_handler
+   * @param OrderHandler $order_handler
    *   The Order Handler.
-   * @param \Drupal\mailchimp_ecommerce\CartHandler $cart_handler
+   * @param CartHandler $cart_handler
    *   The Cart Handler.
-   * @param \Drupal\mailchimp_ecommerce\CustomerHandler $customer_handler
+   * @param CustomerHandler $customer_handler
    *   The Customer Handler.
    */
   public function __construct(OrderHandler $order_handler, CartHandler $cart_handler, CustomerHandler $customer_handler) {
diff --git a/modules/mailchimp_ecommerce_commerce/src/EventSubscriber/ProductEventSubscriber.php b/modules/mailchimp_ecommerce_commerce/src/EventSubscriber/ProductEventSubscriber.php
index fa5e807..9ad31da 100644
--- a/modules/mailchimp_ecommerce_commerce/src/EventSubscriber/ProductEventSubscriber.php
+++ b/modules/mailchimp_ecommerce_commerce/src/EventSubscriber/ProductEventSubscriber.php
@@ -17,14 +17,14 @@ class ProductEventSubscriber implements EventSubscriberInterface {
   /**
    * The Product Handler.
    *
-   * @var \Drupal\mailchimp_ecommerce\ProductHandler
+   * @var ProductHandler
    */
   private $product_handler;
 
   /**
    * ProductEventSubscriber constructor.
    *
-   * @param \Drupal\mailchimp_ecommerce\ProductHandler $product_handler
+   * @param ProductHandler $product_handler
    *   The Product Handler.
    */
   public function __construct(ProductHandler $product_handler) {
diff --git a/modules/mailchimp_ecommerce_commerce/src/Form/MailchimpEcommerceCommerceAdminSettings.php b/modules/mailchimp_ecommerce_commerce/src/Form/MailchimpEcommerceCommerceAdminSettings.php
index cf5c6bb..2828cd8 100644
--- a/modules/mailchimp_ecommerce_commerce/src/Form/MailchimpEcommerceCommerceAdminSettings.php
+++ b/modules/mailchimp_ecommerce_commerce/src/Form/MailchimpEcommerceCommerceAdminSettings.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\mailchimp_ecommerce_commerce\Form;
 
+use Drupal\mailchimp_ecommerce\StoreHandler;
 use Drupal\commerce_store\CurrentStoreInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ -23,22 +24,22 @@ class MailchimpEcommerceCommerceAdminSettings extends MailchimpEcommerceAdminSet
   /**
    * The Store Handler Interface.
    *
-   * @var \Drupal\mailchimp_ecommerce\StoreHandler
+   * @var StoreHandler
    */
   protected $storeHandler;
 
   /**
    * MailchimpEcommerceAdminSettings constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The Config Factory Interface.
    * @param mixed $store_context
    *   The Store Context Interface, or empty string if none.
-   * @param \Drupal\mailchimp_ecommerce\StoreHandlerInterface $store_handler
+   * @param StoreHandlerInterface $store_handler
    *   The Store Handler Interface.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager
+   * @param EntityFieldManagerInterface $field_manager
    *   The Field Manager Interface.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The Module Handler Interface.
    */
   public function __construct(ConfigFactoryInterface $config_factory, $store_context, StoreHandlerInterface $store_handler, EntityFieldManagerInterface $field_manager, ModuleHandlerInterface $module_handler) {
diff --git a/src/CartHandler.php b/src/CartHandler.php
index faf517e..cd9ab0a 100644
--- a/src/CartHandler.php
+++ b/src/CartHandler.php
@@ -15,21 +15,21 @@ class CartHandler implements CartHandlerInterface, ContainerInjectionInterface {
   /**
    * The ecommerce service.
    *
-   * @var \Mailchimp\MailchimpEcommerce
+   * @var MailchimpEcommerce
    */
   protected $mcEcommerce;
 
   /**
    * The ecommerce helper.
    *
-   * @var \Drupal\mailchimp_ecommerce\MailchimpEcommerceHelper
+   * @var MailchimpEcommerceHelper
    */
   protected $helper;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
diff --git a/src/CustomerHandler.php b/src/CustomerHandler.php
index a40ca53..1754cc0 100644
--- a/src/CustomerHandler.php
+++ b/src/CustomerHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\mailchimp_ecommerce;
 
+use Mailchimp\MailchimpEcommerce;
 use Drupal\Core\Database\Connection;
 
 /**
@@ -12,14 +13,14 @@ class CustomerHandler implements CustomerHandlerInterface {
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   private $database;
 
   /**
    * CustomerHandler constructor.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The Order Handler.
    */
   public function __construct(Connection $database) {
@@ -37,7 +38,7 @@ class CustomerHandler implements CustomerHandlerInterface {
         throw new \Exception('Cannot get a customer without a store ID.');
       }
 
-      /** @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
+      /** @var MailchimpEcommerce $mc_ecommerce */
       $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
       $customer = $mc_ecommerce->getCustomer($store_id, $customer_id);
     }
@@ -65,7 +66,7 @@ class CustomerHandler implements CustomerHandlerInterface {
         throw new \Exception('Cannot add or update a customer without a store ID.');
       }
 
-      /** @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
+      /** @var MailchimpEcommerce $mc_ecommerce */
       $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
 
       try {
@@ -100,7 +101,7 @@ class CustomerHandler implements CustomerHandlerInterface {
         throw new \Exception('Cannot delete a customer without a store ID.');
       }
 
-      /** @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
+      /** @var MailchimpEcommerce $mc_ecommerce */
       $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
       $mc_ecommerce->deleteCustomer($store_id, $customer_id);
     }
diff --git a/src/Form/MailchimpEcommerceAdminSettings.php b/src/Form/MailchimpEcommerceAdminSettings.php
index 782eb3c..637832c 100644
--- a/src/Form/MailchimpEcommerceAdminSettings.php
+++ b/src/Form/MailchimpEcommerceAdminSettings.php
@@ -17,34 +17,34 @@ class MailchimpEcommerceAdminSettings extends ConfigFormBase {
   /**
    * The Store Handler Interface.
    *
-   * @var \Drupal\mailchimp_ecommerce\StoreHandlerInterface
+   * @var StoreHandlerInterface
    */
   protected $storeHandler;
 
   /**
    * The Field manager Interface.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $fieldManager;
 
   /**
    * The Module Handler Interface.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * MailchimpEcommerceAdminSettings constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The Config Factory Interface.
-   * @param \Drupal\mailchimp_ecommerce\StoreHandlerInterface $store_handler
+   * @param StoreHandlerInterface $store_handler
    *   The Store Handler Interface.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager
+   * @param EntityFieldManagerInterface $field_manager
    *   The Field Manager Interface.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The Module Handler Interface.
    */
   public function __construct(ConfigFactoryInterface $config_factory, StoreHandlerInterface $store_handler, EntityFieldManagerInterface $field_manager, ModuleHandlerInterface $module_handler) {
diff --git a/src/MailchimpEcommerceHelper.php b/src/MailchimpEcommerceHelper.php
index 7d74018..5dd05ea 100644
--- a/src/MailchimpEcommerceHelper.php
+++ b/src/MailchimpEcommerceHelper.php
@@ -20,50 +20,50 @@ class MailchimpEcommerceHelper implements ContainerInjectionInterface {
   /**
    * The campaign service.
    *
-   * @var \Mailchimp\MailchimpCampaigns
+   * @var MailchimpCampaigns
    */
   protected $mcCampaigns;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * The mailchimp_ecommerce config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
    * The module list.
    *
-   * @var \Drupal\Core\Extension\ModuleExtensionList
+   * @var ModuleExtensionList
    */
   protected $moduleList;
 
   /**
    * MailchimpEcommerceHelper constructor.
    *
-   * @param \Mailchimp\MailchimpCampaigns $mc_campaigns
+   * @param MailchimpCampaigns $mc_campaigns
    *   The campaign service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
-   * @param \Drupal\Core\Config\ImmutableConfig $config
+   * @param ImmutableConfig $config
    *   The mailchimp_ecommerce config.
-   * @param \Drupal\Core\Extension\ModuleExtensionList $module_list
+   * @param ModuleExtensionList $module_list
    *   The module list service.
    */
   public function __construct(MailchimpCampaigns $mc_campaigns, MessengerInterface $messenger, Request $request, ImmutableConfig $config, ModuleExtensionList $module_list) {
diff --git a/src/OrderHandler.php b/src/OrderHandler.php
index 52a031a..76b1a7b 100644
--- a/src/OrderHandler.php
+++ b/src/OrderHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\mailchimp_ecommerce;
 
+use Mailchimp\MailchimpEcommerce;
 use Drupal\commerce_order\Entity\Order;
 use Drupal\commerce_order\Entity\OrderItem;
 
@@ -20,7 +21,7 @@ class OrderHandler implements OrderHandlerInterface {
         throw new \Exception('Cannot get an order without a store ID.');
       }
 
-      /** @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
+      /** @var MailchimpEcommerce $mc_ecommerce */
       $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
       $order = $mc_ecommerce->getOrder($store_id, $order_id);
       return $order;
@@ -55,7 +56,7 @@ class OrderHandler implements OrderHandlerInterface {
         $order['landing_site'] = isset($_SESSION['mc_landing_site']) ? $_SESSION['mc_landing_site'] : '';
       }
 
-      /** @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
+      /** @var MailchimpEcommerce $mc_ecommerce */
       $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
       $mc_ecommerce->addOrder($store_id, $order_id, $customer, $order);
     }
@@ -75,7 +76,7 @@ class OrderHandler implements OrderHandlerInterface {
         throw new \Exception('Cannot update an order without a store ID.');
       }
 
-      /** @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
+      /** @var MailchimpEcommerce $mc_ecommerce */
       $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
       $mc_ecommerce->updateOrder($store_id, $order_id, $order);
     }
diff --git a/src/ProductHandler.php b/src/ProductHandler.php
index 27bd522..6adb6e5 100644
--- a/src/ProductHandler.php
+++ b/src/ProductHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\mailchimp_ecommerce;
 
+use Mailchimp\MailchimpEcommerce;
 use Drupal\node\Entity\Node;
 use Drupal\commerce_product\Entity\Product;
 use Drupal\commerce_product\Entity\ProductVariation;
@@ -21,7 +22,7 @@ class ProductHandler implements ProductHandlerInterface {
         throw new \Exception('Cannot add a product without a store ID.');
       }
 
-      /** @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
+      /** @var MailchimpEcommerce $mc_ecommerce */
       $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
 
       $mc_ecommerce->addProduct($store_id, (string) $product_id, $title, $url, $variants, [
@@ -57,7 +58,7 @@ class ProductHandler implements ProductHandlerInterface {
         $product_id = $product;
       }
 
-      /** @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
+      /** @var MailchimpEcommerce $mc_ecommerce */
       $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
 
       // Update the base product with no variant.
@@ -91,7 +92,7 @@ class ProductHandler implements ProductHandlerInterface {
         throw new \Exception('Cannot delete a product without a store ID.');
       }
 
-      /** @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
+      /** @var MailchimpEcommerce $mc_ecommerce */
       $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
       $mc_ecommerce->deleteProduct($store_id, $product_id);
     }
@@ -111,7 +112,7 @@ class ProductHandler implements ProductHandlerInterface {
         throw new \Exception('Cannot add a product variant without a store ID.');
       }
 
-      /** @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
+      /** @var MailchimpEcommerce $mc_ecommerce */
       $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
       $mc_ecommerce->addProductVariant($store_id, $product_id, [
         'id' => $product_variant_id,
@@ -140,7 +141,7 @@ class ProductHandler implements ProductHandlerInterface {
         throw new \Exception('Cannot get a product variant without a store ID.');
       }
 
-      /** @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
+      /** @var MailchimpEcommerce $mc_ecommerce */
       $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
       $product_variant = $mc_ecommerce->getProductVariant($store_id, $product_id, $product_variant_id);
 
@@ -201,7 +202,7 @@ class ProductHandler implements ProductHandlerInterface {
         throw new \Exception('Cannot delete a product variant without a store ID.');
       }
 
-      /** @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
+      /** @var MailchimpEcommerce $mc_ecommerce */
       $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
 
       try {
@@ -283,7 +284,7 @@ class ProductHandler implements ProductHandlerInterface {
   /**
    * Build Mailchimp product values from an Ubercart product node.
    *
-   * @param \Drupal\node\Entity\Node $node
+   * @param Node $node
    *   The Ubercart 'product' type node.
    *
    * @return array
@@ -343,7 +344,7 @@ class ProductHandler implements ProductHandlerInterface {
   /**
    * Creates a product URL from a node.
    *
-   * @param \Drupal\node\Entity\Node $product
+   * @param Node $product
    *   The Commerce product object.
    *
    * @return string
diff --git a/src/StoreHandler.php b/src/StoreHandler.php
index d95432e..aff17c3 100644
--- a/src/StoreHandler.php
+++ b/src/StoreHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\mailchimp_ecommerce;
 
+use Mailchimp\MailchimpEcommerce;
 /**
  * Store handler.
  */
@@ -13,7 +14,7 @@ class StoreHandler implements StoreHandlerInterface {
   public function getStore($store_id) {
     $store = NULL;
     try {
-      /** @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
+      /** @var MailchimpEcommerce $mc_ecommerce */
       $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
       $store = $mc_ecommerce->getStore($store_id);
     }
@@ -35,7 +36,7 @@ class StoreHandler implements StoreHandlerInterface {
    */
   public function addStore($store_id, $store, $platform) {
     try {
-      /** @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
+      /** @var MailchimpEcommerce $mc_ecommerce */
       $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
 
       $parameters = [
@@ -57,7 +58,7 @@ class StoreHandler implements StoreHandlerInterface {
    */
   public function updateStore($store_id, $name, $currency_code, $platform) {
     try {
-      /** @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
+      /** @var MailchimpEcommerce $mc_ecommerce */
       $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
 
       $parameters = [
diff --git a/tests/src/Functional/MailchimpEcommerceTest.php b/tests/src/Functional/MailchimpEcommerceTest.php
index 9414432..bcd38f6 100644
--- a/tests/src/Functional/MailchimpEcommerceTest.php
+++ b/tests/src/Functional/MailchimpEcommerceTest.php
@@ -43,7 +43,10 @@ class MailchimpEcommerceTest extends FunctionalMailchimpTestBase {
       'mailchimp_ecommerce_list_id' => '57afe96172',
       'mailchimp_ecommerce_currency' => 'USD',
     ], 'Save configuration');
-    $this->assertText('The configuration options have been saved');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The configuration options have been saved');
   }
 
 }
diff --git a/tests/src/Unit/CartHandlerTest.php b/tests/src/Unit/CartHandlerTest.php
index 53a3641..ac0955a 100644
--- a/tests/src/Unit/CartHandlerTest.php
+++ b/tests/src/Unit/CartHandlerTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\mailchimp_ecommerce\Unit;
 
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\mailchimp_ecommerce\CartHandler;
 use Drupal\mailchimp_ecommerce\MailchimpEcommerceHelper;
@@ -25,28 +26,28 @@ class CartHandlerTest extends UnitTestCase {
   /**
    * The cart handler.
    *
-   * @var \Drupal\mailchimp_ecommerce\CartHandler
+   * @var CartHandler
    */
   protected $handler;
 
   /**
    * A mock of the messenger service.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject
+   * @var MockObject
    */
   protected $messenger;
 
   /**
    * A mock of the \Drupal\mailchimp_ecommerce\MailchimpEcommerceHelper class.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject
+   * @var MockObject
    */
   protected $helper;
 
   /**
    * A mock of the \Mailchimp\MailchimpEcommerce class.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject
+   * @var MockObject
    */
   protected $mcEcommerce;
 
@@ -60,7 +61,7 @@ class CartHandlerTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->mcEcommerce = $this->createMock(MailchimpEcommerce::class);
     $this->helper = $this->createMock(MailchimpEcommerceHelper::class);
@@ -96,6 +97,7 @@ class CartHandlerTest extends UnitTestCase {
 
   /**
    * @covers ::addOrUpdateCart
+   * @doesNotPerformAssertions
    */
   public function testAddOrUpdateCart() {
     // Test update case.
