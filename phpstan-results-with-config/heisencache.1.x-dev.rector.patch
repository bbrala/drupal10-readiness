diff --git a/heisencache.module b/heisencache.module
index 23cba77..c7aac18 100644
--- a/heisencache.module
+++ b/heisencache.module
@@ -1,4 +1,5 @@
 <?php
+use Drupal\Core\Extension\ExtensionPathResolver;
 /**
  * @file
  * Heisencache administrative module.
@@ -31,7 +32,7 @@ function heisencache_menu() {
  * Implements hook_views_api().
  */
 function heisencache_views_api() {
-  /** @var \Drupal\Core\Extension\ExtensionPathResolver $er */
+  /** @var ExtensionPathResolver $er */
   $er = \Drupal::service('extension.path.resolver');
   $path = $er->getPath('module', 'heisencache');
   $ret = array(
diff --git a/src/Cache/CacheInstrumentationPass.php b/src/Cache/CacheInstrumentationPass.php
index 7f6bc5e..df69edf 100644
--- a/src/Cache/CacheInstrumentationPass.php
+++ b/src/Cache/CacheInstrumentationPass.php
@@ -16,7 +16,7 @@ use Symfony\Component\DependencyInjection\Reference;
 class CacheInstrumentationPass implements CompilerPassInterface {
 
   /**
-   * @var \Symfony\Component\DependencyInjection\Reference
+   * @var Reference
    */
   protected $dispatcher;
 
diff --git a/src/Cache/InstrumentedBin.php b/src/Cache/InstrumentedBin.php
index c5e7ef0..ea1e489 100644
--- a/src/Cache/InstrumentedBin.php
+++ b/src/Cache/InstrumentedBin.php
@@ -44,7 +44,7 @@ class InstrumentedBin implements CacheBackendInterface, EventSourceInterface {
   protected static $events = NULL;
 
   /**
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    *   The decorated cache backend instance for the bin.
    */
   protected $decorated;
@@ -52,11 +52,11 @@ class InstrumentedBin implements CacheBackendInterface, EventSourceInterface {
   /**
    * Constructs an InstrumentedBin object.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $decorated
+   * @param CacheBackendInterface $decorated
    *   The original cache backend to instrument.
    * @param string $bin
    *   The cache bin for which the backend is instantiated.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher
+   * @param EventDispatcherInterface $dispatcher
    */
   public function __construct(
     CacheBackendInterface $decorated,
diff --git a/src/CacheFactory.php b/src/CacheFactory.php
index 487b7d2..ac21c71 100644
--- a/src/CacheFactory.php
+++ b/src/CacheFactory.php
@@ -30,16 +30,16 @@ class CacheFactory implements CacheFactoryInterface {
   /**
    * The core cache service.
    *
-   * @var \Drupal\Core\Cache\CacheFactoryInterface
+   * @var CacheFactoryInterface
    */
   protected CacheFactoryInterface $coreFactory;
 
   /**
    * The constructor.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher
+   * @param EventDispatcherInterface $dispatcher
    *   The event_dispatcher service.
-   * @param \Drupal\Core\Cache\CacheFactoryInterface $core_factory
+   * @param CacheFactoryInterface $core_factory
    *   The core cache service.
    */
   public function __construct(EventDispatcherInterface $dispatcher, CacheFactoryInterface $core_factory) {
diff --git a/src/Event/EventDispatcherTrait.php b/src/Event/EventDispatcherTrait.php
index acb1437..be43e95 100644
--- a/src/Event/EventDispatcherTrait.php
+++ b/src/Event/EventDispatcherTrait.php
@@ -12,21 +12,21 @@
 
 namespace Drupal\heisencache\Event;
 
-
+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 /**
  * Facade for Symfony dispatcher.
  */
 trait EventDispatcherTrait {
 
   /**
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $dispatcher;
 
   /**
    * Dispatch a Heisencache event.
    *
-   * @param \Drupal\heisencache\Event\EventBase $event
+   * @param EventBase $event
    *   This should be a EventInterface instead, but the Symfony dispatcher
    *   type-hints on a concrete Event instead of an interface.
    */
diff --git a/src/Heisencache/EventEmitter.php b/src/Heisencache/EventEmitter.php
index 72162c9..3789748 100644
--- a/src/Heisencache/EventEmitter.php
+++ b/src/Heisencache/EventEmitter.php
@@ -25,7 +25,7 @@ class EventEmitter {
    *
    * @param string $eventName
    *   The name of the event on which to act.
-   * @param \Drupal\heisencache\EventSubscriberInterface $subscriber
+   * @param EventSubscriberInterface $subscriber
    *   The subscriber instance.
    *
    * @return int
@@ -90,7 +90,7 @@ class EventEmitter {
   /**
    * Register an event subscriber with the event emitter for all its events..
    *
-   * @param \Drupal\heisencache\EventSubscriberInterface $subscriber
+   * @param EventSubscriberInterface $subscriber
    *   The subscriber instance to register.
    *
    * @return \Drupal\heisencache\EventEmitter
@@ -109,7 +109,7 @@ class EventEmitter {
    * @param string $eventName
    *   The name of the event.
    *
-   * @return \Drupal\heisencache\EventSubscriberInterface[]
+   * @return EventSubscriberInterface[]
    *   The list of subscribers
    */
   public function getSubscribersByEventName($eventName) {
diff --git a/src/Heisencache/EventSourceSubscriber.php b/src/Heisencache/EventSourceSubscriber.php
index 8130dfd..b3b7785 100644
--- a/src/Heisencache/EventSourceSubscriber.php
+++ b/src/Heisencache/EventSourceSubscriber.php
@@ -19,7 +19,7 @@ class EventSourceSubscriber extends BaseEventSubscriber implements EventSourceIn
 
   protected static $emittedEvents = array();
   /**
-   * @var \Drupal\heisencache\EventEmitter
+   * @var EventEmitter
    */
   protected $emitter;
 
diff --git a/src/Heisencache/tests/BaseEventSubscriberTest.php b/src/Heisencache/tests/BaseEventSubscriberTest.php
index 07908e0..35d33ba 100644
--- a/src/Heisencache/tests/BaseEventSubscriberTest.php
+++ b/src/Heisencache/tests/BaseEventSubscriberTest.php
@@ -20,7 +20,7 @@ class BaseEventSubscriberTest extends TestCase {
     $event1 = 'event1';
     $events = array($event1);
 
-    /** @var \Drupal\heisencache\tests\MockEventSubscriberInterface $mock */
+    /** @var MockEventSubscriberInterface $mock */
     $mock = $this->getMockForAbstractClass('Drupal\heisencache\BaseEventSubscriber');
     $mock->addEvent($event1);
 
diff --git a/src/Heisencache/tests/DebugSubscriberTest.php b/src/Heisencache/tests/DebugSubscriberTest.php
index 173125e..8e4268d 100644
--- a/src/Heisencache/tests/DebugSubscriberTest.php
+++ b/src/Heisencache/tests/DebugSubscriberTest.php
@@ -12,6 +12,7 @@
 
 namespace Drupal\heisencache\tests;
 
+use Drupal\heisencache\Tests\MockEventSubscriberInterface;
 use Drupal\heisencache\DebugSubscriber;
 use Drupal\heisencache\EventEmitter;
 use Drupal\heisencache\MissSubscriber;
@@ -25,7 +26,7 @@ class DebugSubscriberTest extends TestCase {
 
   protected $events = NULL;
 
-  public function setUp() {
+  public function setUp(): void {
     $this->events = array_merge(
       Cache::getEmittedEvents(),
       MissSubscriber::getEmittedEvents()
@@ -51,7 +52,7 @@ class DebugSubscriberTest extends TestCase {
   public function testEventHandling() {
     $channel = "some_bin";
 
-    /** @var \Drupal\heisencache\Tests\MockEventSubscriberInterface $mock */
+    /** @var MockEventSubscriberInterface $mock */
     $mock = $this->getMockBuilder(self::FQCN)
       ->onlyMethods(['getSubscribedEvents', 'show'])
       ->getMock();
diff --git a/src/Heisencache/tests/EventEmitterTest.php b/src/Heisencache/tests/EventEmitterTest.php
index 4245a51..4abef9d 100644
--- a/src/Heisencache/tests/EventEmitterTest.php
+++ b/src/Heisencache/tests/EventEmitterTest.php
@@ -24,7 +24,7 @@ class EventEmitterTest extends TestCase {
    * @param array $events
    * @param null $class
    *
-   * @return \Drupal\heisencache\tests\MockEventSubscriberInterface
+   * @return MockEventSubscriberInterface
    */
   protected function getMockSubscriber(array $events, $class = NULL) {
     static $sequence = 0;
@@ -52,7 +52,7 @@ class EventEmitterTest extends TestCase {
     }
 
     $actual = $emitter->getSubscribersByEventName($event1);
-    $this->assertInternalType('array', $actual, "getSubscribersByEventName() returns an array.");
+    $this->assertIsArray($actual, "getSubscribersByEventName() returns an array.");
     $this->assertEquals(count($actual), 1, "Exactly 1 subscriber returned for event.");
     $this->assertEquals(reset($actual), $subscriber, "Single subscriber on event is returned correctly.");
 
@@ -64,6 +64,9 @@ class EventEmitterTest extends TestCase {
     }
   }
 
+  /**
+   * @doesNotPerformAssertions
+   */
   public function testOnSingleSubscriberInvalidEvent() {
     $event1 = 'event1';
     $event2 = 'event2';
@@ -94,7 +97,7 @@ class EventEmitterTest extends TestCase {
       }
 
     $actual = $emitter->getSubscribersByEventName($event1);
-    $this->assertInternalType('array', $actual, "getSubscribersByEventName() returns an array.");
+    $this->assertIsArray($actual, "getSubscribersByEventName() returns an array.");
     $this->assertEquals(count($actual), 1, "Exactly 1 subscriber returned for first event.");
     $this->assertEquals(reset($actual), $subscriber, "Single subscriber on first event is returned correctly.");
 
@@ -106,7 +109,7 @@ class EventEmitterTest extends TestCase {
       $this->fail('Passing the same subscriber to on() for a second event does not throw an exception.');
     }
     $actual = $emitter->getSubscribersByEventName($event2);
-    $this->assertInternalType('array', $actual, "getSubscribersByEventName() returns an array.");
+    $this->assertIsArray($actual, "getSubscribersByEventName() returns an array.");
     $this->assertEquals(count($actual), 1, "Exactly 1 subscriber returned for second event.");
     $this->assertEquals(reset($actual), $subscriber, "Single subscriber on second event is returned correctly.");
   }
@@ -126,7 +129,7 @@ class EventEmitterTest extends TestCase {
     }
 
     $actual = $emitter->getSubscribersByEventName($event1);
-    $this->assertInternalType('array', $actual, "getSubscribersByEventName() returns an array.");
+    $this->assertIsArray($actual, "getSubscribersByEventName() returns an array.");
     $this->assertEquals(count($actual), 1, "Exactly 1 subscriber returned for event.");
     $this->assertEquals(reset($actual), $sub1, "Single subscriber on first event is returned correctly.");
 
@@ -138,7 +141,7 @@ class EventEmitterTest extends TestCase {
     }
 
     $actual = $emitter->getSubscribersByEventName($event1);
-    $this->assertInternalType('array', $actual, "getSubscribersByEventName() returns an array.");
+    $this->assertIsArray($actual, "getSubscribersByEventName() returns an array.");
     $this->assertEquals(count($actual), 2, "Exactly 2 subscribers returned for event.");
 
     $this->assertTrue(in_array($sub1, $actual), "First subscriber on event is returned correctly.");
@@ -165,6 +168,9 @@ class EventEmitterTest extends TestCase {
     }
   }
 
+  /**
+   * @doesNotPerformAssertions
+   */
   public function testEmitHappy() {
     $event1 = 'event1';
     $emitter = new EventEmitter();
diff --git a/src/Heisencache/tests/MissSubscriberTest.php b/src/Heisencache/tests/MissSubscriberTest.php
index 38da352..709f810 100644
--- a/src/Heisencache/tests/MissSubscriberTest.php
+++ b/src/Heisencache/tests/MissSubscriberTest.php
@@ -21,14 +21,14 @@ class MissSubscriberTest extends TestCase {
 
   protected $emitter;
 
-  public function setUp() {
+  public function setUp(): void {
     $this->emitter = $this->getMock('Drupal\heisencache\EventEmitter');
   }
 
   public function testGetHit() {
     $sub = new MissSubscriber($this->emitter);
     $actual = $sub->afterGet(self::CHANNEL, 'k', 'v');
-    $this->assertInternalType('array', $actual);
+    $this->assertIsArray($actual);
     $this->assertEmpty($actual);
   }
 
@@ -38,7 +38,7 @@ class MissSubscriberTest extends TestCase {
     $sub = new MissSubscriber($this->emitter);
     $actual = $sub->afterGet(self::CHANNEL, $key, FALSE);
 
-    $this->assertInternalType('array', $actual);
+    $this->assertIsArray($actual);
     $this->assertNotEmpty($actual);
     $this->assertArrayHasKey('misses', $actual);
     $this->assertNotEmpty($actual['misses']);
@@ -53,7 +53,7 @@ class MissSubscriberTest extends TestCase {
     $sub->beforeGetMultiple(self::CHANNEL, $initial_cids);
     $actual = $sub->afterGetMultiple(self::CHANNEL, $missed_cids);
 
-    $this->assertInternalType('array', $actual);
+    $this->assertIsArray($actual);
     $this->assertNotEmpty($actual);
     $this->assertArrayHasKey('full_miss', $actual);
     $this->assertFalse($actual['full_miss']);
@@ -72,7 +72,7 @@ class MissSubscriberTest extends TestCase {
     $sub->beforeGetMultiple(self::CHANNEL, $initial_cids);
     $actual = $sub->afterGetMultiple(self::CHANNEL, $missed_cids);
 
-    $this->assertInternalType('array', $actual);
+    $this->assertIsArray($actual);
     $this->assertNotEmpty($actual);
     $this->assertArrayHasKey('full_miss', $actual);
     $this->assertTrue($actual['full_miss']);
@@ -90,7 +90,7 @@ class MissSubscriberTest extends TestCase {
     $sub = new MissSubscriber($this->emitter);
     $sub->beforeGetMultiple(self::CHANNEL, $initial_cids);
     $actual = $sub->afterGetMultiple(self::CHANNEL, $missed_cids);
-    $this->assertInternalType('array', $actual);
+    $this->assertIsArray($actual);
     $this->assertEmpty($actual);
 
   }
diff --git a/src/Heisencache/tests/WriteSubscriberTest.php b/src/Heisencache/tests/WriteSubscriberTest.php
index 5ec35ed..8f201cf 100644
--- a/src/Heisencache/tests/WriteSubscriberTest.php
+++ b/src/Heisencache/tests/WriteSubscriberTest.php
@@ -21,7 +21,7 @@ class WriteSubscriberTest extends TestCase {
 
   protected $emitter;
 
-  public function setUp() {
+  public function setUp(): void {
     $this->emitter = $this->getMock('Drupal\heisencache\EventEmitter');
   }
 
@@ -31,7 +31,7 @@ class WriteSubscriberTest extends TestCase {
     $serialized_value = serialize($value);
 
     $actual = $sub->afterSet(self::CHANNEL, 'k', $value, 120);
-    $this->assertInternalType('array', $actual);
+    $this->assertIsArray($actual);
     $this->assertNotEmpty($actual);
     $this->assertArrayHasKey('value_size', $actual);
     $this->assertEquals(strlen($serialized_value), $actual['value_size']);
@@ -42,7 +42,7 @@ class WriteSubscriberTest extends TestCase {
     $wildcard = TRUE;
     $actual = $sub->afterClear(self::CHANNEL, 'k', $wildcard);
 
-    $this->assertInternalType('array', $actual);
+    $this->assertIsArray($actual);
     $this->assertNotEmpty($actual);
     $this->assertArrayHasKey('wildcard', $actual);
     $this->assertEquals($wildcard, $actual['wildcard']);
@@ -52,7 +52,7 @@ class WriteSubscriberTest extends TestCase {
     $sub = new WriteSubscriber($this->emitter);
     $actual = $sub->getEmittedEvents();
 
-    $this->assertInternalType('array', $actual);
+    $this->assertIsArray($actual);
     $this->assertNotEmpty($actual);
     $this->assertEquals(1, count($actual));
     $this->assertEquals('write', $actual[0]);
diff --git a/views/heisencache.views_default.inc b/views/heisencache.views_default.inc
index b4b37a2..2f5826b 100644
--- a/views/heisencache.views_default.inc
+++ b/views/heisencache.views_default.inc
@@ -27,7 +27,7 @@ function heisencache_views_default_views() {
       $view_arg = array(
         '@view' => $item->getFilename(),
       );
-      drupal_set_message(t('@view does not seem to contain an exported view.', $view_arg),  'error');
+      \Drupal::messenger()->addError(t('@view does not seem to contain an exported view.', $view_arg));
       watchdog('heisencache', '@view does not seem to contain an exported view.', $view_arg, WATCHDOG_ERROR);
     }
     // Only provide tables based on enabled modules: notably dblog.
