diff --git a/src/BreadcrumbBuilder.php b/src/BreadcrumbBuilder.php
index 64e5393..9581f13 100644
--- a/src/BreadcrumbBuilder.php
+++ b/src/BreadcrumbBuilder.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\custom_breadcrumbs;
 
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\path_alias\AliasManagerInterface;
 use Drupal\Core\Breadcrumb\Breadcrumb;
 use Drupal\Core\Breadcrumb\BreadcrumbBuilderInterface;
@@ -49,35 +52,35 @@ class BreadcrumbBuilder implements BreadcrumbBuilderInterface {
   /**
    * EntityTypeManager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|null
+   * @var Request|null
    */
   protected $currentRequest;
 
   /**
    * Token.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
   /**
    * Title resolver.
    *
-   * @var \Drupal\Core\Controller\TitleResolverInterface
+   * @var TitleResolverInterface
    */
   protected $titleResolver;
 
@@ -91,37 +94,37 @@ class BreadcrumbBuilder implements BreadcrumbBuilderInterface {
   /**
    * Path matcher.
    *
-   * @var \Drupal\Core\Path\PathMatcherInterface
+   * @var PathMatcherInterface
    */
   protected $pathMatcher;
 
   /**
    * Router admin context.
    *
-   * @var \Drupal\Core\Routing\AdminContext
+   * @var AdminContext
    */
   protected $routerAdminContext;
 
   /**
    * BreadcrumbBuilder constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   EntityTypeManager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   LanguageManager service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   Request stack.
-   * @param \Drupal\Core\Controller\TitleResolverInterface $titleResolver
+   * @param TitleResolverInterface $titleResolver
    *   Title resolver.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   Token.
-   * @param \Drupal\path_alias\AliasManagerInterface $aliasManager
+   * @param AliasManagerInterface $aliasManager
    *   Alias manager.
-   * @param \Drupal\Core\Path\PathMatcherInterface $pathMatcher
+   * @param PathMatcherInterface $pathMatcher
    *   Path matcher.
-   * @param Drupal\Core\Routing\AdminContext $routerAdminContext
+   * @param AdminContext $routerAdminContext
    *   Router admin context.
    */
   public function __construct(ConfigFactoryInterface $configFactory,
@@ -227,13 +230,13 @@ class BreadcrumbBuilder implements BreadcrumbBuilderInterface {
   /**
    * Added breadcrumbs based content entity.
    *
-   * @param \Drupal\Core\Breadcrumb\Breadcrumb $breadcrumb
+   * @param Breadcrumb $breadcrumb
    *   Breadcrumb.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   Route match.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function applyContentEntityBreadcrumb(Breadcrumb &$breadcrumb, RouteMatchInterface $route_match) {
     // Prepare all route parameters.
@@ -263,15 +266,15 @@ class BreadcrumbBuilder implements BreadcrumbBuilderInterface {
   /**
    * Apply breadcrumb per settings.
    *
-   * @param \Drupal\Core\Breadcrumb\Breadcrumb $breadcrumb
+   * @param Breadcrumb $breadcrumb
    *   Breadcrumb object.
-   * @param \Drupal\custom_breadcrumbs\Entity\CustomBreadcrumbs $customBreadcrumbs
+   * @param CustomBreadcrumbs $customBreadcrumbs
    *   Breadcrumb settings.
    * @param mixed $entity
    *   Entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function applyBreadcrumb(Breadcrumb &$breadcrumb, CustomBreadcrumbs $customBreadcrumbs, $entity) {
     $paths = $customBreadcrumbs->getMultiValues('breadcrumbPaths');
@@ -285,7 +288,7 @@ class BreadcrumbBuilder implements BreadcrumbBuilderInterface {
 
     foreach ($paths as $key => $path) {
       if (isset($titles[$key])) {
-        $href = file_url_transform_relative($this->token->replace($path, $token_vars, ['clear' => TRUE]));
+        $href = \Drupal::service('file_url_generator')->transformRelative($this->token->replace($path, $token_vars, ['clear' => TRUE]));
         $link_title = $this->token->replace($titles[$key], $token_vars, ['clear' => TRUE]);
         $link_title = Html::decodeEntities($link_title);
 
@@ -343,8 +346,8 @@ class BreadcrumbBuilder implements BreadcrumbBuilderInterface {
    * @return mixed
    *   List of entities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getAllParents($tid) {
     return $this->entityTypeManager->getStorage("taxonomy_term")
@@ -373,7 +376,7 @@ class BreadcrumbBuilder implements BreadcrumbBuilderInterface {
    *
    * @param array $settings
    *   Array of settings.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   Route match.
    */
   protected function filterPerBundle(array &$settings, RouteMatchInterface $route_match) {
@@ -418,14 +421,14 @@ class BreadcrumbBuilder implements BreadcrumbBuilderInterface {
   /**
    * Check breadcrumbs by path.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   Route match.
    *
-   * @return bool|\Drupal\Core\Entity\EntityInterface
+   * @return bool|EntityInterface
    *   CustomBreadcrumb entity or False.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function matchPaths(RouteMatchInterface $route_match) {
     $breadcrumbSettingsIDs = $this->entityTypeManager->getStorage('custom_breadcrumbs')
@@ -461,14 +464,14 @@ class BreadcrumbBuilder implements BreadcrumbBuilderInterface {
   /**
    * Check breadcrumbs by entity.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   Route match.
    *
    * @return bool
    *   True if a match was found, false otherwise.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function matchEntity(RouteMatchInterface $route_match) {
     $params = $route_match->getParameters()->all();
diff --git a/src/CustomBreadcrumbsListBuilder.php b/src/CustomBreadcrumbsListBuilder.php
index d74e0ce..2c53b8f 100644
--- a/src/CustomBreadcrumbsListBuilder.php
+++ b/src/CustomBreadcrumbsListBuilder.php
@@ -26,7 +26,7 @@ class CustomBreadcrumbsListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\custom_breadcrumbs\CustomBreadcrumbsInterface $entity */
+    /** @var CustomBreadcrumbsInterface $entity */
     $row['label'] = $entity->label();
     $row['entityType'] = $entity->get('entityType');
     $row['entityBundlee'] = $entity->get('entityBundle');
diff --git a/src/Form/CustomBreadcrumbsForm.php b/src/Form/CustomBreadcrumbsForm.php
index 2d8e726..e94fa4d 100644
--- a/src/Form/CustomBreadcrumbsForm.php
+++ b/src/Form/CustomBreadcrumbsForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\custom_breadcrumbs\Form;
 
+use Drupal\custom_breadcrumbs\CustomBreadcrumbsInterface;
 use Drupal\Core\Entity\ContentEntityType;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ -13,30 +14,30 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 /**
  * Custom breadcrumbs form.
  *
- * @property \Drupal\custom_breadcrumbs\CustomBreadcrumbsInterface $entity
+ * @property CustomBreadcrumbsInterface $entity
  */
 class CustomBreadcrumbsForm extends EntityForm {
 
   /**
    * EntityTypeBundleInfo.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * Language interface.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * CustomBreadcrumbsForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entityTypeBundleInfo
+   * @param EntityTypeBundleInfoInterface $entityTypeBundleInfo
    *   EntityTypeBundleInfo service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   LanguageManager service.
    */
   public function __construct(EntityTypeBundleInfoInterface $entityTypeBundleInfo, LanguageManagerInterface $languageManager) {
@@ -276,7 +277,7 @@ class CustomBreadcrumbsForm extends EntityForm {
    *
    * @param array $form
    *   Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form State.
    *
    * @return array
@@ -291,7 +292,7 @@ class CustomBreadcrumbsForm extends EntityForm {
    *
    * @param array $form
    *   Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form State.
    *
    * @return array
