modules/contrib/reporting/reporting.install
modules/contrib/reporting/src/Controller/ReportingEndpoint.php
modules/contrib/reporting/src/Controller/ReportingEndpointListBuilder.php
modules/contrib/reporting/src/Entity/ReportingEndpoint.php
modules/contrib/reporting/src/Entity/ReportingEndpointInterface.php
modules/contrib/reporting/src/EventSubscriber/ResponseSubscriber.php
modules/contrib/reporting/src/Form/ReportingEndpointDeleteForm.php
modules/contrib/reporting/src/Form/ReportingEndpointForm.php
modules/contrib/reporting/src/Plugin/CspReportingHandler/ReportTo.php
modules/contrib/reporting/src/ReportingResponse.php
modules/contrib/reporting/tests/src/Unit/EventSubscriber/ResponseSubscriberTest.php

5 files with changes
====================

1) modules/contrib/reporting/tests/src/Unit/EventSubscriber/ResponseSubscriberTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\reporting\Unit\EventSubscriber;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
  */
 class ResponseSubscriberTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Mock Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityTypeManagerInterface|ObjectProphecy
    */
   private $entityTypeManager;

@@ @@
   /**
    * Mock Reporting Endpoint Entity Storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityStorageInterface|ObjectProphecy
    */
   private $endpointStorage;

@@ @@
   /**
    * Mock Reporting Endpoint Entity Query.
    *
-   * @var \Drupal\Core\Entity\Query\QueryInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var QueryInterface|ObjectProphecy
    */
   private $query;

@@ @@
   /**
    * Mock Reporting Endpoint Entity Type Definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityTypeInterface|ObjectProphecy
    */
   private $entityTypeDefinition;

@@ @@
   /**
    * Mock URL Generator.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var UrlGeneratorInterface|ObjectProphecy
    */
   private $urlGenerator;

@@ @@
   /**
    * Mock Cache Backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var CacheBackendInterface|ObjectProphecy
    */
   private $cache;

@@ @@
    * {@inheritdoc}
    */
   public function setUp(): void {
-    /** @var \Symfony\Component\DependencyInjection\ContainerInterface|\Prophecy\Prophecy\ObjectProphecy $container */
+    /** @var ContainerInterface|ObjectProphecy $container */
     $container = $this->prophesize(ContainerInterface::class);
     \Drupal::setContainer($container->reveal());

@@ @@
       $this->cache->reveal()
     );

-    /** @var \Symfony\Component\HttpKernel\Event\ResponseEvent|\Prophecy\Prophecy\ObjectProphecy $event */
+    /** @var ResponseEvent|ObjectProphecy $event */
     $event = $this->prophesize(ResponseEvent::class);
     $event->isMasterRequest()->willReturn(TRUE);
     $response = $this->prophesize(ResponseInterface::class);
-    /** @var \Symfony\Component\HttpFoundation\HeaderBag|\Prophecy\Prophecy\ObjectProphecy $headers */
+    /** @var HeaderBag|ObjectProphecy $headers */
     $headers = $this->prophesize(HeaderBag::class);
     $event->getResponse()->willReturn($response->reveal());
     $response->headers = $headers->reveal();
@@ @@
       $this->cache->reveal()
     );

-    /** @var \Symfony\Component\HttpKernel\Event\ResponseEvent|\Prophecy\Prophecy\ObjectProphecy $event */
+    /** @var ResponseEvent|ObjectProphecy $event */
     $event = $this->prophesize(ResponseEvent::class);
     $event->isMasterRequest()->willReturn(TRUE);
     $response = $this->prophesize(ResponseInterface::class);
-    /** @var \Symfony\Component\HttpFoundation\HeaderBag|\Prophecy\Prophecy\ObjectProphecy $headers */
+    /** @var HeaderBag|ObjectProphecy $headers */
     $headers = $this->prophesize(HeaderBag::class);
     $event->getResponse()->willReturn($response->reveal());
     $response->headers = $headers->reveal();
@@ @@
       $this->cache->reveal()
     );

-    /** @var \Symfony\Component\HttpKernel\Event\ResponseEvent|\Prophecy\Prophecy\ObjectProphecy $event */
+    /** @var ResponseEvent|ObjectProphecy $event */
     $event = $this->prophesize(ResponseEvent::class);
     $event->isMasterRequest()->willReturn(TRUE);
     $response = $this->prophesize(ResponseInterface::class);
-    /** @var \Symfony\Component\HttpFoundation\HeaderBag|\Prophecy\Prophecy\ObjectProphecy $headers */
+    /** @var HeaderBag|ObjectProphecy $headers */
     $headers = $this->prophesize(HeaderBag::class);
     $event->getResponse()->willReturn($response->reveal());
     $response->headers = $headers->reveal();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/reporting/src/Form/ReportingEndpointForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a ReportingEndpointForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entityTypeManager.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, MessengerInterface $messenger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/reporting/src/EventSubscriber/ResponseSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\reporting\EventSubscriber;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ @@
   /**
    * The endpoint storage service.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   private $endpointStorage;

@@ @@
   /**
    * A cache bin.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   private $cache;

@@ @@
   /**
    * ResponseSubscriber constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The Entity Type Manager service.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   A cache bin.
    */
   public function __construct(
@@ @@
   /**
    * Prevent other response event listeners from altering reporting responses.
    *
-   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
+   * @param ResponseEvent $event
    *   The response event.
    */
   public function reportingResponses(ResponseEvent $event) {
@@ @@
   /**
    * Add Reporting-Endpoints header to responses.
    *
-   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
+   * @param ResponseEvent $event
    *   The response event.
    */
   public function addReportToHeader(ResponseEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/reporting/src/Controller/ReportingEndpointListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\reporting\Controller;

+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;

@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
-
+    /** @var ConfigEntityInterface $entity */
     $row['label'] = $entity->label();
     $row['id'] = $entity->id();
     $row['status'] = $entity->status() ? $this->t('Enabled') : $this->t('Disabled');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/reporting/src/Controller/ReportingEndpoint.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\reporting\Controller;

+use Symfony\Component\HttpFoundation\Response;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\reporting\Entity\ReportingEndpointInterface;
 use Drupal\reporting\ReportingResponse;
@@ @@
   /**
    * The Request Stack service.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   private $requestStack;

@@ @@
   /**
    * The Logger channel.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   private $logger;

@@ @@
   /**
    * Create a new Report URI Controller.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The Request Stack service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The Logger channel.
    */
   public function __construct(RequestStack $requestStack, LoggerInterface $logger) {
@@ @@
   /**
    * Handle a report submission.
    *
-   * @param \Drupal\reporting\Entity\ReportingEndpointInterface $reporting_endpoint
+   * @param ReportingEndpointInterface $reporting_endpoint
    *   The reporting endpoint.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   A Response object.
    */
   public function log(ReportingEndpointInterface $reporting_endpoint) {
@@ @@
   /**
    * Helper to log CSP report sent via report-uri directive.
    *
-   * @param \Drupal\reporting\Entity\ReportingEndpointInterface $reporting_endpoint
+   * @param ReportingEndpointInterface $reporting_endpoint
    *   The reporting endpoint.
    * @param array $report
    *   A CSP violation report.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The Request object.
    */
   private function storeReportUriData(ReportingEndpointInterface $reporting_endpoint, array $report, Request $request) {
@@ @@
   /**
    * Helper to log reports sent to Report-To endpoint.
    *
-   * @param \Drupal\reporting\Entity\ReportingEndpointInterface $reporting_endpoint
+   * @param ReportingEndpointInterface $reporting_endpoint
    *   The reporting endpoint.
    * @param array $reports
    *   An array of violation reports.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [ERROR] Could not process                                                      
         "modules/contrib/reporting/src/Plugin/CspReportingHandler/ReportTo.php"
         file, due to:                                                          
         "Analyze error: "Class Drupal\csp\Plugin\ReportingHandlerBase not      
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

