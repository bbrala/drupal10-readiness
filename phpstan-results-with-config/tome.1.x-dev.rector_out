modules/contrib/tome/modules/tome_base/src/CommandBase.php
modules/contrib/tome/modules/tome_base/src/Commands/CliWorkaroundCommands.php
modules/contrib/tome/modules/tome_base/src/ExecutableFinderTrait.php
modules/contrib/tome/modules/tome_base/src/PathTrait.php
modules/contrib/tome/modules/tome_base/src/ProcessTrait.php
modules/contrib/tome/modules/tome_base/tests/src/Kernel/TestBase.php
modules/contrib/tome/modules/tome_base/tests/src/Unit/ExecutableFinderTraitTest.php
modules/contrib/tome/modules/tome_base/tests/src/Unit/PathTraitTest.php
modules/contrib/tome/modules/tome_static/modules/tome_static_cron/src/Form/TomeStaticCronSettingsForm.php
modules/contrib/tome/modules/tome_static/modules/tome_static_cron/src/Plugin/QueueWorker/TomeStaticQueueWorker.php
modules/contrib/tome/modules/tome_static/modules/tome_static_cron/tests/src/Functional/TomeStaticCronTest.php
modules/contrib/tome/modules/tome_static/modules/tome_static_cron/tome_static_cron.module
modules/contrib/tome/modules/tome_static/modules/tome_static_super_cache/src/Commands/TomeSuperCacheRebuildCommand.php
modules/contrib/tome/modules/tome_static/modules/tome_static_super_cache/src/Plugin/views/cache/SmartTag.php
modules/contrib/tome/modules/tome_static/modules/tome_static_super_cache/src/SuperStaticCache.php
modules/contrib/tome/modules/tome_static/modules/tome_static_super_cache/src/TomeStaticSuperCacheTagsInvalidator.php
modules/contrib/tome/modules/tome_static/modules/tome_static_super_cache/tests/src/Kernel/SmartTagTest.php
modules/contrib/tome/modules/tome_static/modules/tome_static_super_cache/tests/src/Kernel/SuperStaticCacheTest.php
modules/contrib/tome/modules/tome_static/modules/tome_static_super_cache/tome_static_super_cache.module
modules/contrib/tome/modules/tome_static/src/Commands/StaticCommand.php
modules/contrib/tome/modules/tome_static/src/Commands/StaticExportPathCommand.php
modules/contrib/tome/modules/tome_static/src/Commands/StaticPreviewCommand.php
modules/contrib/tome/modules/tome_static/src/Controller/StaticDownloadController.php
modules/contrib/tome/modules/tome_static/src/Controller/StaticPreviewController.php
modules/contrib/tome/modules/tome_static/src/Event/CollectPathsEvent.php
modules/contrib/tome/modules/tome_static/src/Event/FileSavedEvent.php
modules/contrib/tome/modules/tome_static/src/Event/ModifyDestinationEvent.php
modules/contrib/tome/modules/tome_static/src/Event/ModifyHtmlEvent.php
modules/contrib/tome/modules/tome_static/src/Event/PathPlaceholderEvent.php
modules/contrib/tome/modules/tome_static/src/Event/TomeStaticEvents.php
modules/contrib/tome/modules/tome_static/src/EventSubscriber/EntityPathSubscriber.php
modules/contrib/tome/modules/tome_static/src/EventSubscriber/ExcludePathSubscriber.php
modules/contrib/tome/modules/tome_static/src/EventSubscriber/LanguagePathSubscriber.php
modules/contrib/tome/modules/tome_static/src/EventSubscriber/MediaOembedPathSubscriber.php
modules/contrib/tome/modules/tome_static/src/EventSubscriber/PageCacheRequestPrepareSubscriber.php
modules/contrib/tome/modules/tome_static/src/EventSubscriber/PagerPathSubscriber.php
modules/contrib/tome/modules/tome_static/src/EventSubscriber/RedirectPathSubscriber.php
modules/contrib/tome/modules/tome_static/src/EventSubscriber/RoutePathSubscriber.php
modules/contrib/tome/modules/tome_static/src/EventSubscriber/StaticPreviewRequestSubscriber.php
modules/contrib/tome/modules/tome_static/src/Form/StaticGeneratorForm.php
modules/contrib/tome/modules/tome_static/src/Form/StaticPreviewForm.php
modules/contrib/tome/modules/tome_static/src/LazyResettableContextRepository.php
modules/contrib/tome/modules/tome_static/src/PageCache/RequestPolicy/CoreRequestPolicy.php
modules/contrib/tome/modules/tome_static/src/PageCache/RequestPolicy/DynamicRequestPolicy.php
modules/contrib/tome/modules/tome_static/src/PageCache/RequestPolicy/UnsafeMethod.php
modules/contrib/tome/modules/tome_static/src/RequestPreparer.php
modules/contrib/tome/modules/tome_static/src/ResettablePathMatcher.php
modules/contrib/tome/modules/tome_static/src/StackMiddleware/ResettablePageCache.php
modules/contrib/tome/modules/tome_static/src/StaticCache.php
modules/contrib/tome/modules/tome_static/src/StaticCacheInterface.php
modules/contrib/tome/modules/tome_static/src/StaticGenerator.php
modules/contrib/tome/modules/tome_static/src/StaticGeneratorInterface.php
modules/contrib/tome/modules/tome_static/src/StaticUITrait.php
modules/contrib/tome/modules/tome_static/src/TomeStaticHelper.php
modules/contrib/tome/modules/tome_static/src/TomeStaticServiceProvider.php
modules/contrib/tome/modules/tome_static/tests/modules/tome_test/src/Controller/TestController.php
modules/contrib/tome/modules/tome_static/tests/src/Functional/TomeStaticGeneratorFormTest.php
modules/contrib/tome/modules/tome_static/tests/src/Functional/TomeStaticPreviewTest.php
modules/contrib/tome/modules/tome_static/tests/src/Kernel/CollectPathsEventTest.php
modules/contrib/tome/modules/tome_static/tests/src/Kernel/FileSavedEventTest.php
modules/contrib/tome/modules/tome_static/tests/src/Kernel/ModifyDestinationEventTest.php
modules/contrib/tome/modules/tome_static/tests/src/Kernel/ModifyHtmlEventTest.php
modules/contrib/tome/modules/tome_static/tests/src/Kernel/PathPlaceholderEventTest.php
modules/contrib/tome/modules/tome_static/tests/src/Kernel/StaticCacheTest.php
modules/contrib/tome/modules/tome_static/tests/src/Kernel/StaticGeneratorTest.php
modules/contrib/tome/modules/tome_static/tests/src/Kernel/StaticRedirectTest.php
modules/contrib/tome/modules/tome_static/tests/src/Kernel/TomeStaticEventTestBase.php
modules/contrib/tome/modules/tome_static/tome_static.install
modules/contrib/tome/modules/tome_sync/modules/tome_sync_autoclean/src/EventSubscriber/ExportEventSubscriber.php
modules/contrib/tome/modules/tome_sync/src/AccountSwitcherTrait.php
modules/contrib/tome/modules/tome_sync/src/CleanFilesTrait.php
modules/contrib/tome/modules/tome_sync/src/Commands/CleanFilesCommand.php
modules/contrib/tome/modules/tome_sync/src/Commands/DeleteContentCommand.php
modules/contrib/tome/modules/tome_sync/src/Commands/ExportCommand.php
modules/contrib/tome/modules/tome_sync/src/Commands/ExportContentCommand.php
modules/contrib/tome/modules/tome_sync/src/Commands/ImportCommand.php
modules/contrib/tome/modules/tome_sync/src/Commands/ImportCompleteCommand.php
modules/contrib/tome/modules/tome_sync/src/Commands/ImportContentCommand.php
modules/contrib/tome/modules/tome_sync/src/Commands/ImportPartialCommand.php
modules/contrib/tome/modules/tome_sync/src/ContentHasher.php
modules/contrib/tome/modules/tome_sync/src/ContentHasherInterface.php
modules/contrib/tome/modules/tome_sync/src/ContentIndexerTrait.php
modules/contrib/tome/modules/tome_sync/src/Encoder/YamlEncoder.php
modules/contrib/tome/modules/tome_sync/src/Event/ContentCrudEvent.php
modules/contrib/tome/modules/tome_sync/src/Event/TomeSyncEvents.php
modules/contrib/tome/modules/tome_sync/src/EventSubscriber/BookEventSubscriber.php
modules/contrib/tome/modules/tome_sync/src/EventSubscriber/ConfigEventSubscriber.php
modules/contrib/tome/modules/tome_sync/src/EventSubscriber/ContentHasherEventSubscriber.php
modules/contrib/tome/modules/tome_sync/src/EventSubscriber/LanguageConfigEventSubscriber.php
modules/contrib/tome/modules/tome_sync/src/Exporter.php
modules/contrib/tome/modules/tome_sync/src/ExporterInterface.php
modules/contrib/tome/modules/tome_sync/src/FileSync.php
modules/contrib/tome/modules/tome_sync/src/FileSyncInterface.php
modules/contrib/tome/modules/tome_sync/src/Form/CleanFilesForm.php
modules/contrib/tome/modules/tome_sync/src/Form/ImportPartialForm.php
modules/contrib/tome/modules/tome_sync/src/Importer.php
modules/contrib/tome/modules/tome_sync/src/ImporterInterface.php
modules/contrib/tome/modules/tome_sync/src/JsonFileStorage.php
modules/contrib/tome/modules/tome_sync/src/JsonFileStorageFactory.php
modules/contrib/tome/modules/tome_sync/src/Normalizer/ContentEntityNormalizer.php
modules/contrib/tome/modules/tome_sync/src/Normalizer/EntityReferenceItemNormalizer.php
modules/contrib/tome/modules/tome_sync/src/Normalizer/EntityReferenceRevisionItemNormalizer.php
modules/contrib/tome/modules/tome_sync/src/Normalizer/FieldItemNormalizer.php
modules/contrib/tome/modules/tome_sync/src/Normalizer/PathAliasNormalizer.php
modules/contrib/tome/modules/tome_sync/src/Normalizer/PathItemNormalizer.php
modules/contrib/tome/modules/tome_sync/src/Normalizer/PathautoItemNormalizer.php
modules/contrib/tome/modules/tome_sync/src/Normalizer/UriNormalizer.php
modules/contrib/tome/modules/tome_sync/src/Normalizer/UserEntityNormalizer.php
modules/contrib/tome/modules/tome_sync/src/NullFileSync.php
modules/contrib/tome/modules/tome_sync/src/TomeSyncHelper.php
modules/contrib/tome/modules/tome_sync/src/TomeSyncServiceProvider.php
modules/contrib/tome/modules/tome_sync/src/YamlFileStorage.php
modules/contrib/tome/modules/tome_sync/src/YamlFileStorageFactory.php
modules/contrib/tome/modules/tome_sync/tests/src/Functional/BookTest.php
modules/contrib/tome/modules/tome_sync/tests/src/Functional/ImportPartialFormTest.php
modules/contrib/tome/modules/tome_sync/tests/src/Kernel/ContentHasherTest.php
modules/contrib/tome/modules/tome_sync/tests/src/Kernel/ExporterTest.php
modules/contrib/tome/modules/tome_sync/tests/src/Kernel/FieldDeletionTest.php
modules/contrib/tome/modules/tome_sync/tests/src/Kernel/FileSyncTest.php
modules/contrib/tome/modules/tome_sync/tests/src/Kernel/ImporterTest.php
modules/contrib/tome/modules/tome_sync/tests/src/Kernel/LinkItemTest.php
modules/contrib/tome/modules/tome_sync/tests/src/Kernel/PathAliasTest.php
modules/contrib/tome/modules/tome_sync/tests/src/Kernel/PathautoTest.php
modules/contrib/tome/modules/tome_sync/tests/src/Unit/Normalizer/ContentEntityNormalizerTest.php
modules/contrib/tome/modules/tome_sync/tests/src/Unit/Normalizer/EntityReferenceItemNormalizerTest.php
modules/contrib/tome/modules/tome_sync/tests/src/Unit/Normalizer/FieldItemNormalizerTest.php
modules/contrib/tome/modules/tome_sync/tests/src/Unit/Normalizer/UserEntityNormalizerTest.php
modules/contrib/tome/modules/tome_sync/tome_sync.install
modules/contrib/tome/modules/tome_sync/tome_sync.module
modules/contrib/tome/tests/performance/create_articles.php
modules/contrib/tome/tome.install

98 files with changes
=====================

1) modules/contrib/tome/tome.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Extension\ModuleInstallerInterface;
 /**
  * @file
  * Install, update, and uninstall functions for Tome.
  */
-
 /**
  * Installs the new tome_sync and tome_static sub-modules.
  */
 function tome_update_8001() {
-  /** @var \Drupal\Core\Extension\ModuleInstallerInterface $installer */
+  /** @var ModuleInstallerInterface $installer */
   $installer = \Drupal::service('module_installer');
   $installer->install([
     'tome_base',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/tome/modules/tome_sync/tome_sync.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Config\StorageInterface;
 /**
  * @file
  * Keeps content, config, and files in sync.
@@ @@
   if (\Drupal::isConfigSyncing()) {
     return;
   }
-  /** @var \Drupal\Core\Config\StorageInterface $content_storage */
+  /** @var StorageInterface $content_storage */
   $content_storage = \Drupal::service('tome_sync.storage.content');
   $storage = \Drupal::entityTypeManager()
     ->getStorage($field->getTargetEntityTypeId());
@@ @@
 /**
  * Determines if a given entity should be exported.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   An entity to export.
  *
  * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


3) modules/contrib/tome/modules/tome_sync/tests/src/Unit/Normalizer/UserEntityNormalizerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tome_sync\Unit\Normalizer;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ @@
  */
 class UserEntityNormalizerTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Tests the normalize() method.
    *
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/tome/modules/tome_sync/tests/src/Unit/Normalizer/FieldItemNormalizerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tome_sync\Unit\Normalizer;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Field\FieldItemInterface;
 use Drupal\Core\TypedData\ComplexDataDefinitionInterface;
 use Drupal\Core\TypedData\DataDefinitionInterface;
@@ @@
  */
 class FieldItemNormalizerTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Tests the normalize() method.
    *
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/tome/modules/tome_sync/tests/src/Unit/Normalizer/EntityReferenceItemNormalizerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tome_sync\Unit\Normalizer;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ @@
  */
 class EntityReferenceItemNormalizerTest extends UnitTestCase {

+  use ProphecyTrait;
   use InternalTypedDataTestTrait;

   /**
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/tome/modules/tome_sync/tests/src/Unit/Normalizer/ContentEntityNormalizerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tome_sync\Unit\Normalizer;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ @@
  */
 class ContentEntityNormalizerTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Tests the normalize() method.
    *
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/tome/modules/tome_sync/tests/src/Kernel/PathautoTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tome_sync\Kernel;

+use Drupal\Core\Entity\EntityRepository;
+use Drupal\tome_sync\Importer;
+use Drupal\tome_sync\Exporter;
 use Drupal\Core\Datetime\Entity\DateFormat;
 use Drupal\node\Entity\Node;
 use Drupal\pathauto\Entity\PathautoPattern;
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('tome_sync', ['tome_sync_content_hash']);
     $this->installEntitySchema('path_alias');
@@ @@
    * Tests that exporting/importing nodes with patterns works.
    */
   public function testPathauto() {
-    /** @var \Drupal\Core\Entity\EntityRepository $repository */
+    /** @var EntityRepository $repository */
     $repository = \Drupal::service('entity.repository');
-    /** @var \Drupal\tome_sync\Importer $importer */
+    /** @var Importer $importer */
     $importer = \Drupal::service('tome_sync.importer');
-    /** @var \Drupal\tome_sync\Exporter $exporter */
+    /** @var Exporter $exporter */
     $exporter = \Drupal::service('tome_sync.exporter');

     // Make sure normal entities work with our pattern.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/tome/modules/tome_sync/tests/src/Kernel/PathAliasTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tome_sync\Kernel;

+use Symfony\Component\Serializer\Serializer;
+use Drupal\Core\Config\StorageInterface;
 use Drupal\Core\Site\Settings;
 use Drupal\node\Entity\Node;
 use Drupal\path_alias\Entity\PathAlias;
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('tome_sync', ['tome_sync_content_hash']);
     $this->installEntitySchema('path_alias');
@@ @@
    * Tests that exporting/importing path alias entities works.
    */
   public function testAliases() {
-    /** @var \Symfony\Component\Serializer\Serializer $serializer */
+    /** @var Serializer $serializer */
     $serializer = \Drupal::service('serializer');

-    /** @var \Drupal\Core\Config\StorageInterface $storage */
+    /** @var StorageInterface $storage */
     $storage = \Drupal::service('tome_sync.storage.content');

     $article = Node::create([
@@ @@
     $this->assertEquals($data['path'][0]['value'], '/node/' . $article->uuid());
     $this->assertEquals($data['alias'][0]['value'], '/node/' . $article2->uuid());

-    /** @var \Drupal\path_alias\Entity\PathAlias $exported_alias */
+    /** @var PathAlias $exported_alias */
     $exported_alias = $serializer->denormalize($data, PathAlias::class, 'json');
     $this->assertEquals($exported_alias->getPath(), '/node/' . $article->id());
     $this->assertEquals($exported_alias->getAlias(), '/node/' . $article2->id());
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/tome/modules/tome_sync/tests/src/Kernel/LinkItemTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tome_sync\Kernel;

+use Symfony\Component\Serializer\Serializer;
+use Drupal\Core\Config\StorageInterface;
 use Drupal\Core\Site\Settings;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('tome_sync', ['tome_sync_content_hash']);
     $this->installEntitySchema('path_alias');
@@ @@
    * Tests that exporting/importing link field data works.
    */
   public function testLinkFields() {
-    /** @var \Symfony\Component\Serializer\Serializer $serializer */
+    /** @var Serializer $serializer */
     $serializer = \Drupal::service('serializer');

-    /** @var \Drupal\Core\Config\StorageInterface $storage */
+    /** @var StorageInterface $storage */
     $storage = \Drupal::service('tome_sync.storage.content');

     $article1 = Node::create([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/tome/modules/tome_sync/tests/src/Kernel/ImporterTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tome_sync\Kernel;

+use Drupal\Core\Entity\EntityRepository;
+use Drupal\tome_sync\Exporter;
+use Drupal\tome_sync\Importer;
 use Drupal\Core\Site\Settings;
 use Drupal\node\Entity\Node;
 use Drupal\Tests\tome_base\Kernel\TestBase;
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('tome_sync', ['tome_sync_content_hash']);
   }
@@ @@
    * @covers \Drupal\tome_sync\Importer::importContent
    */
   public function testImportContent() {
-    /** @var \Drupal\Core\Entity\EntityRepository $repository */
+    /** @var EntityRepository $repository */
     $repository = \Drupal::service('entity.repository');

-    /** @var \Drupal\tome_sync\Exporter $exporter */
+    /** @var Exporter $exporter */
     $exporter = \Drupal::service('tome_sync.exporter');
-    /** @var \Drupal\tome_sync\Importer $importer */
+    /** @var Importer $importer */
     $importer = \Drupal::service('tome_sync.importer');

     $uuid = \Drupal::service('uuid')->generate();
@@ @@
     new Settings($settings);
     drupal_flush_all_caches();

-    /** @var \Drupal\Core\Entity\EntityRepository $repository */
+    /** @var EntityRepository $repository */
     $repository = \Drupal::service('entity.repository');

-    /** @var \Drupal\tome_sync\Exporter $exporter */
+    /** @var Exporter $exporter */
     $exporter = \Drupal::service('tome_sync.exporter');
-    /** @var \Drupal\tome_sync\Importer $importer */
+    /** @var Importer $importer */
     $importer = \Drupal::service('tome_sync.importer');

     $uuid = \Drupal::service('uuid')->generate();
@@ @@
     $yml_file = Settings::get('tome_content_directory', '../content') . '/node.' . $uuid . '.yml';
     $json_file = Settings::get('tome_content_directory', '../content') . '/node.' . $uuid . '.json';
     $this->assertFileExists($yml_file);
-    $this->assertFileNotExists($json_file);
+    $this->assertFileDoesNotExist($json_file);

     $this->assertFalse((bool) $repository->loadEntityByUuid('node', $uuid));
     $importer->importContent('node', $uuid);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameMethodRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/tome/modules/tome_sync/tests/src/Kernel/FileSyncTest.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->fileSystem = \Drupal::service('file_system');
     $this->installSchema('tome_sync', ['tome_sync_content_hash']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/tome/modules/tome_sync/tests/src/Kernel/FieldDeletionTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tome_sync\Kernel;

+use Drupal\Core\Config\StorageInterface;
+use Drupal\Core\Config\ConfigInstallerInterface;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('tome_sync', ['tome_sync_content_hash']);
   }
@@ @@
    * @covers \Drupal\tome_sync\Exporter::exportContent
    */
   public function testDeleteField() {
-    /** @var \Drupal\Core\Config\StorageInterface $storage */
+    /** @var StorageInterface $storage */
     $storage = \Drupal::service('tome_sync.storage.content');

     $field_config = node_add_body_field(NodeType::load('article'));
@@ @@
    * @covers \Drupal\tome_sync\Exporter::exportContent
    */
   public function testDeleteFieldDuringSync() {
-    /** @var \Drupal\Core\Config\StorageInterface $storage */
+    /** @var StorageInterface $storage */
     $storage = \Drupal::service('tome_sync.storage.content');

     $field_config = node_add_body_field(NodeType::load('article'));
@@ @@
     $data = $storage->read(TomeSyncHelper::getContentName($article));
     $this->assertArrayHasKey('body', $data);

-    /** @var \Drupal\Core\Config\ConfigInstallerInterface $installer */
+    /** @var ConfigInstallerInterface $installer */
     $installer = \Drupal::service('config.installer');
     $installer->setSyncing(TRUE);
     $field_config->delete();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/tome/modules/tome_sync/tests/src/Kernel/ExporterTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tome_sync\Kernel;

+use Symfony\Component\Serializer\Serializer;
+use Drupal\Core\Config\StorageInterface;
+use Drupal\language\Config\LanguageConfigFactoryOverrideInterface;
 use Drupal\Core\Site\Settings;
 use Drupal\node\Entity\Node;
 use Drupal\Tests\tome_base\Kernel\TestBase;
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('tome_sync', ['tome_sync_content_hash']);
     if (\Drupal::entityTypeManager()->hasDefinition('path_alias')) {
@@ @@
    * @covers \Drupal\tome_sync\Exporter::exportContent
    */
   public function testExportContent() {
-    /** @var \Symfony\Component\Serializer\Serializer $serializer */
+    /** @var Serializer $serializer */
     $serializer = \Drupal::service('serializer');

-    /** @var \Drupal\Core\Config\StorageInterface $storage */
+    /** @var StorageInterface $storage */
     $storage = \Drupal::service('tome_sync.storage.content');

     $user = $this->createUser();
@@ @@
    * @covers \Drupal\tome_sync\Exporter::deleteContentExport
    */
   public function testDeleteContentExport() {
-    /** @var \Drupal\Core\Config\StorageInterface $storage */
+    /** @var StorageInterface $storage */
     $storage = \Drupal::service('tome_sync.storage.content');
     $article = Node::create(['type' => 'article', 'title' => 'My article']);
     $article->save();
@@ @@
    * @covers \Drupal\tome_sync\EventSubscriber\LanguageConfigEventSubscriber::configDelete
    */
   public function testDeleteConfigExport() {
-    /** @var \Drupal\Core\Config\StorageInterface $storage */
+    /** @var StorageInterface $storage */
     $storage = \Drupal::service('config.storage.sync');

     \Drupal::configFactory()->getEditable('foo.bar')->save();
     $this->assertTrue($storage->exists('foo.bar'));

-    /** @var \Drupal\language\Config\LanguageConfigFactoryOverrideInterface $config_factory_override */
+    /** @var LanguageConfigFactoryOverrideInterface $config_factory_override */
     $config_factory_override = \Drupal::service('language.config_factory_override');
     $override = $config_factory_override->getOverride('fr', 'foo.bar');
     $override->setData(['bonjour' => 'monde'])->save();
@@ @@
    * @covers \Drupal\tome_sync\EventSubscriber\LanguageConfigEventSubscriber::configSave
    */
   public function testExportConfig() {
-    /** @var \Drupal\Core\Config\StorageInterface $storage */
+    /** @var StorageInterface $storage */
     $storage = \Drupal::service('config.storage.sync');
     $data = ['hello' => 'world'];
     \Drupal::configFactory()->getEditable('foo.bar')
@@ @@
     $this->assertEquals($data, $storage->read('foo.bar'));

     $data = ['bonjour' => 'monde'];
-    /** @var \Drupal\language\Config\LanguageConfigFactoryOverrideInterface $config_factory_override */
+    /** @var LanguageConfigFactoryOverrideInterface $config_factory_override */
     $config_factory_override = \Drupal::service('language.config_factory_override');
     $override = $config_factory_override->getOverride('fr', 'foo.bar');
     $override->setData($data)->save();
@@ @@
    * @covers \Drupal\tome_sync\EventSubscriber\LanguageConfigEventSubscriber::configDelete
    */
   public function testRenameConfig() {
-    /** @var \Drupal\Core\Config\StorageInterface $storage */
+    /** @var StorageInterface $storage */
     $storage = \Drupal::service('config.storage.sync');
     $data = ['hello' => 'world'];
     \Drupal::configFactory()->getEditable('foo.bar')
@@ @@
     $this->assertEquals($data, $storage->read('foo.bar'));

     $override_data = ['bonjour' => 'monde'];
-    /** @var \Drupal\language\Config\LanguageConfigFactoryOverrideInterface $config_factory_override */
+    /** @var LanguageConfigFactoryOverrideInterface $config_factory_override */
     $config_factory_override = \Drupal::service('language.config_factory_override');
     $override = $config_factory_override->getOverride('fr', 'foo.bar');
     $override->setData($override_data)->save();
@@ @@
     new Settings($settings);
     drupal_flush_all_caches();

-    /** @var \Symfony\Component\Serializer\Serializer $serializer */
+    /** @var Serializer $serializer */
     $serializer = \Drupal::service('serializer');

-    /** @var \Drupal\Core\Config\StorageInterface $storage */
+    /** @var StorageInterface $storage */
     $storage = \Drupal::service('tome_sync.storage.content');

     $user = $this->createUser();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/tome/modules/tome_sync/tests/src/Kernel/ContentHasherTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tome_sync\Kernel;

+use Drupal\tome_sync\ContentHasherInterface;
 use Drupal\node\Entity\Node;
 use Drupal\Tests\tome_base\Kernel\TestBase;
 use Drupal\tome_sync\TomeSyncHelper;
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('tome_sync', ['tome_sync_content_hash']);
   }
@@ @@
    * @covers \Drupal\tome_sync\EventSubscriber\ContentHasherEventSubscriber::writeHash
    */
   public function testContentHasher() {
-    /** @var \Drupal\tome_sync\ContentHasherInterface $content_hasher */
+    /** @var ContentHasherInterface $content_hasher */
     $content_hasher = \Drupal::service('tome_sync.content_hasher');

     $uuid = \Drupal::service('uuid')->generate();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/tome/modules/tome_sync/tests/src/Functional/ImportPartialFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tome_sync\Functional;

+use Drupal\Core\File\FileSystemInterface;
+use Drupal\tome_sync\JsonFileStorage;
 use Drupal\node\Entity\Node;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\tome_sync\ContentIndexerTrait;
@@ @@
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Note: The format for ::writeSettings is really weird.
@@ @@
    * Tests that the import partial form works.
    */
   public function testImportPartialForm() {
-    /** @var \Drupal\tome_sync\JsonFileStorage $storage */
+    /** @var JsonFileStorage $storage */
     $storage = \Drupal::service('tome_sync.storage.content');

     $node1 = $this->createNode([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/tome/modules/tome_sync/tests/src/Functional/BookTest.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('system_breadcrumb_block');
     $this->drupalPlaceBlock('page_title_block');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/tome/modules/tome_sync/src/YamlFileStorageFactory.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Returns a YamlFileStorage object.
    *
-   * @return \Drupal\tome_sync\YamlFileStorage
+   * @return YamlFileStorage
    *   The Yaml file storage.
    */
   public static function getContent() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


18) modules/contrib/tome/modules/tome_sync/src/TomeSyncHelper.php:16

    ---------- begin diff ----------
@@ @@
    *
    * This can be used to read/write from the tome_sync.storage.content service.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   An entity.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


19) modules/contrib/tome/modules/tome_sync/src/Normalizer/UriNormalizer.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * Constructs a UriNormalizer object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity field manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityRepositoryInterface $entity_repository) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/tome/modules/tome_sync/src/Normalizer/PathAliasNormalizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tome_sync\Normalizer;

+use Drupal\path_alias\PathAliasInterface;
 use Drupal\Component\Uuid\Uuid;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ @@
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * Constructs a PathAliasNormalizer object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeRepositoryInterface $entity_type_repository
+   * @param EntityTypeRepositoryInterface $entity_type_repository
    *   The entity type repository.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity field manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityTypeRepositoryInterface $entity_type_repository = NULL, EntityFieldManagerInterface $entity_field_manager = NULL, EntityRepositoryInterface $entity_repository) {
@@ @@
    * {@inheritdoc}
    */
   public function denormalize($data, $class, $format = NULL, array $context = []) {
-    /** @var \Drupal\path_alias\PathAliasInterface $entity */
+    /** @var PathAliasInterface $entity */
     $entity = parent::denormalize($data, $class, $format, $context);
     foreach (['path', 'alias'] as $key) {
       if ($entity && !empty($entity->get($key)->value)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/tome/modules/tome_sync/src/Normalizer/ContentEntityNormalizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tome_sync\Normalizer;

+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\serialization\Normalizer\ContentEntityNormalizer as BaseContentEntityNormalizer;

 /**
@@ @@
    */
   public function normalize($entity, $format = NULL, array $context = []) {
     $values = parent::normalize($entity, $format, $context);
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity_type = $entity->getEntityType();
     $id_key = $entity_type->getKey('id');
     // User IDs are important to retain to ensure that User 1 is consistent
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/tome/modules/tome_sync/src/JsonFileStorageFactory.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Returns a JsonFileStorage object.
    *
-   * @return \Drupal\tome_sync\JsonFileStorage
+   * @return JsonFileStorage
    *   The JSON file storage.
    */
   public static function getContent() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


23) modules/contrib/tome/modules/tome_sync/src/Importer.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * The target content storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $contentStorage;

@@ @@
   /**
    * The serializer.
    *
-   * @var \Symfony\Component\Serializer\Serializer
+   * @var Serializer
    */
   protected $serializer;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The file sync service.
    *
-   * @var \Drupal\tome_sync\FileSyncInterface
+   * @var FileSyncInterface
    */
   protected $fileSync;

@@ @@
   /**
    * Creates an Importer object.
    *
-   * @param \Drupal\Core\Config\StorageInterface $content_storage
+   * @param StorageInterface $content_storage
    *   The target content storage.
-   * @param \Symfony\Component\Serializer\Serializer $serializer
+   * @param Serializer $serializer
    *   The serializer.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Session\AccountSwitcherInterface $account_switcher
+   * @param AccountSwitcherInterface $account_switcher
    *   The account switcher.
-   * @param \Drupal\tome_sync\FileSyncInterface $file_sync
+   * @param FileSyncInterface $file_sync
    *   The file sync service.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
    */
   public function __construct(StorageInterface $content_storage, Serializer $serializer, EntityTypeManagerInterface $entity_type_manager, EventDispatcherInterface $event_dispatcher, AccountSwitcherInterface $account_switcher, FileSyncInterface $file_sync, FileSystemInterface $file_system) {
@@ @@
     $this->isImporting(FALSE);
     if (isset($imported_entity)) {
       $event = new ContentCrudEvent($imported_entity);
-      $this->eventDispatcher->dispatch(TomeSyncEvents::IMPORT_CONTENT, $event);
+      $this->eventDispatcher->dispatch($event, TomeSyncEvents::IMPORT_CONTENT);
     }
     $this->switchBack();
   }
@@ @@
   /**
    * Copies values from a denormalized entity to the original entity.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The denormalized entity.
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $original_entity
+   * @param FieldableEntityInterface $original_entity
    *   The original entity.
    *
    * @see \Drupal\rest\Plugin\rest\resource\EntityResource::patch
@@ @@
   /**
    * Loads an entity from the content storage.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type of this entity.
    * @param string $uuid
    *   The entity UUID.
@@ @@
    * @param string $langcode
    *   (optional) The langcode, for translations.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The loaded entity.
    */
   protected function loadEntityFromStorage(EntityTypeInterface $entity_type, $uuid, $langcode = NULL) {
     $contents = $this->contentStorage->read(TomeSyncHelper::getContentNameFromParts($entity_type->id(), $uuid, $langcode));
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->serializer->denormalize($contents, $entity_type->getClass(), $this->encoderFormat);
     $entity->_tomeFields = array_keys($contents);
     return $entity;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


24) modules/contrib/tome/modules/tome_sync/src/Form/ImportPartialForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tome_sync\Form;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Batch\BatchBuilder;
 use Drupal\Core\Config\StorageComparer;
 use Drupal\Core\Config\StorageInterface;
@@ @@
   /**
    * The importer.
    *
-   * @var \Drupal\tome_sync\ImporterInterface
+   * @var ImporterInterface
    */
   protected $importer;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The content hasher.
    *
-   * @var \Drupal\tome_sync\ContentHasherInterface
+   * @var ContentHasherInterface
    */
   protected $contentHasher;

@@ @@
   /**
    * The state system.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The sync configuration object.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $syncStorage;

@@ @@
   /**
    * The active configuration object.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $activeStorage;

@@ @@
   /**
    * Constructs an ImportPartialForm instance.
    *
-   * @param \Drupal\tome_sync\ImporterInterface $importer
+   * @param ImporterInterface $importer
    *   The importer.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\tome_sync\ContentHasherInterface $content_hasher
+   * @param ContentHasherInterface $content_hasher
    *   The content hasher.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state system.
-   * @param \Drupal\Core\Config\StorageInterface $sync_storage
+   * @param StorageInterface $sync_storage
    *   The source storage.
-   * @param \Drupal\Core\Config\StorageInterface $active_storage
+   * @param StorageInterface $active_storage
    *   The target storage.
    */
   public function __construct(ImporterInterface $importer, EntityTypeManagerInterface $entity_type_manager, ContentHasherInterface $content_hasher, StateInterface $state, StorageInterface $sync_storage, StorageInterface $active_storage) {
@@ @@
   /**
    * Determines if there is an initial error that should prevent an import.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup|string
+   * @return TranslatableMarkup|string
    *   An error message, if available.
    */
   protected function getInitialError() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/tome/modules/tome_sync/src/Form/CleanFilesForm.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * The target content storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $contentStorage;

@@ @@
   /**
    * The config storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $configStorage;

@@ @@
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The file sync service.
    *
-   * @var \Drupal\tome_sync\FileSyncInterface
+   * @var FileSyncInterface
    */
   protected $fileSync;

@@ @@
   /**
    * Creates a CleanFilesForm object.
    *
-   * @param \Drupal\Core\Config\StorageInterface $content_storage
+   * @param StorageInterface $content_storage
    *   The target content storage.
-   * @param \Drupal\Core\Config\StorageInterface $config_storage
+   * @param StorageInterface $config_storage
    *   The target config storage.
-   * @param \Drupal\tome_sync\FileSyncInterface $file_sync
+   * @param FileSyncInterface $file_sync
    *   The file sync service.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
    */
   public function __construct(StorageInterface $content_storage, StorageInterface $config_storage, FileSyncInterface $file_sync, FileSystemInterface $file_system) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/tome/modules/tome_sync/src/FileSyncInterface.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * Exports a file to the export directory.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file entity.
    */
   public function exportFile(FileInterface $file);
@@ @@
   /**
    * Deletes an exported file by entity.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file entity.
    */
   public function deleteFileExport(FileInterface $file);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


27) modules/contrib/tome/modules/tome_sync/src/FileSync.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * Creates an FileSync object.
    *
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
    */
   public function __construct(FileSystemInterface $file_system) {
@@ @@
     if (!is_dir($file_directory)) {
       return;
     }
-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     foreach ($this->fileSystem->scanDirectory($file_directory, '/.*/') as $file) {
       $destination = 'public://' . ltrim(str_replace($file_directory, '', $file->uri), '/');
       $directory = dirname($destination);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


28) modules/contrib/tome/modules/tome_sync/src/ExporterInterface.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * Exports a content entity to the target storage.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   An entity to export.
    */
   public function exportContent(ContentEntityInterface $entity);
@@ @@
   /**
    * Deletes an exported content entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   An entity to delete.
    */
   public function deleteContentExport(ContentEntityInterface $entity);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


29) modules/contrib/tome/modules/tome_sync/src/Exporter.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * The target content storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $contentStorage;

@@ @@
   /**
    * The serializer.
    *
-   * @var \Symfony\Component\Serializer\Serializer
+   * @var Serializer
    */
   protected $serializer;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The file sync service.
    *
-   * @var \Drupal\tome_sync\FileSyncInterface
+   * @var FileSyncInterface
    */
   protected $fileSync;

@@ @@
   /**
    * Creates an Exporter object.
    *
-   * @param \Drupal\Core\Config\StorageInterface $content_storage
+   * @param StorageInterface $content_storage
    *   The target content storage.
-   * @param \Symfony\Component\Serializer\Serializer $serializer
+   * @param Serializer $serializer
    *   The serializer.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Session\AccountSwitcherInterface $account_switcher
+   * @param AccountSwitcherInterface $account_switcher
    *   The account switcher.
-   * @param \Drupal\tome_sync\FileSyncInterface $file_sync
+   * @param FileSyncInterface $file_sync
    *   The file sync service.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
    */
   public function __construct(StorageInterface $content_storage, Serializer $serializer, EntityTypeManagerInterface $entity_type_manager, EventDispatcherInterface $event_dispatcher, AccountSwitcherInterface $account_switcher, FileSyncInterface $file_sync, FileSystemInterface $file_system) {
@@ @@
       $this->fileSync->exportFile($entity);
     }
     $event = new ContentCrudEvent($entity);
-    $this->eventDispatcher->dispatch(TomeSyncEvents::EXPORT_CONTENT, $event);
+    $this->eventDispatcher->dispatch($event, TomeSyncEvents::EXPORT_CONTENT);
     $this->switchBack();
   }

@@ @@
       $this->fileSync->deleteFileExport($entity);
     }
     $event = new ContentCrudEvent($entity);
-    $this->eventDispatcher->dispatch(TomeSyncEvents::DELETE_CONTENT, $event);
+    $this->eventDispatcher->dispatch($event, TomeSyncEvents::DELETE_CONTENT);
   }

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


30) modules/contrib/tome/modules/tome_sync/src/EventSubscriber/LanguageConfigEventSubscriber.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The config storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $configStorage;

@@ @@
   /**
    * Constructs the ConfigEventSubscriber object.
    *
-   * @param \Drupal\Core\Config\StorageInterface $config_storage
+   * @param StorageInterface $config_storage
    *   The config storage.
    */
   public function __construct(StorageInterface $config_storage) {
@@ @@
   /**
    * Reacts to a save event.
    *
-   * @param \Drupal\language\Config\LanguageConfigOverrideCrudEvent $event
+   * @param LanguageConfigOverrideCrudEvent $event
    *   The configuration event.
    */
   public function configSave(LanguageConfigOverrideCrudEvent $event) {
@@ @@
   /**
    * Reacts to delete event.
    *
-   * @param \Drupal\language\Config\LanguageConfigOverrideCrudEvent $event
+   * @param LanguageConfigOverrideCrudEvent $event
    *   The configuration event.
    */
   public function configDelete(LanguageConfigOverrideCrudEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


31) modules/contrib/tome/modules/tome_sync/src/EventSubscriber/ContentHasherEventSubscriber.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The content hasher.
    *
-   * @var \Drupal\tome_sync\ContentHasherInterface
+   * @var ContentHasherInterface
    */
   protected $contentHasher;

@@ @@
   /**
    * The target content storage.
    *
-   * @var \Drupal\Core\Config\FileStorage
+   * @var FileStorage
    */
   protected $contentStorage;

@@ @@
   /**
    * Creates a ContentHasherEventSubscriber object.
    *
-   * @param \Drupal\tome_sync\ContentHasherInterface $content_hasher
+   * @param ContentHasherInterface $content_hasher
    *   The content hasher.
-   * @param \Drupal\Core\Config\FileStorage $content_storage
+   * @param FileStorage $content_storage
    *   The target content storage.
    */
   public function __construct(ContentHasherInterface $content_hasher, FileStorage $content_storage) {
@@ @@
   /**
    * Maintains a hash of imported content to support partial imports.
    *
-   * @param \Drupal\tome_sync\Event\ContentCrudEvent $event
+   * @param ContentCrudEvent $event
    *   The content CRUD event.
    */
   public function writeHash(ContentCrudEvent $event) {
@@ @@
   /**
    * Maintains a hash of exported content to support partial imports.
    *
-   * @param \Drupal\tome_sync\Event\ContentCrudEvent $event
+   * @param ContentCrudEvent $event
    *   The content CRUD event.
    */
   public function writeSourceHash(ContentCrudEvent $event) {
@@ @@
   /**
    * Maintains a hash of imported content to support partial imports.
    *
-   * @param \Drupal\tome_sync\Event\ContentCrudEvent $event
+   * @param ContentCrudEvent $event
    *   The content CRUD event.
    */
   public function deleteHash(ContentCrudEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


32) modules/contrib/tome/modules/tome_sync/src/EventSubscriber/ConfigEventSubscriber.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The config storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $configStorage;

@@ @@
   /**
    * Constructs the ConfigEventSubscriber object.
    *
-   * @param \Drupal\Core\Config\StorageInterface $config_storage
+   * @param StorageInterface $config_storage
    *   The config storage.
    */
   public function __construct(StorageInterface $config_storage) {
@@ @@
   /**
    * Reacts to a save event.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The configuration event.
    */
   public function configSave(ConfigCrudEvent $event) {
@@ @@
   /**
    * Reacts to delete event.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The configuration event.
    */
   public function configDelete(ConfigCrudEvent $event) {
@@ @@
   /**
    * Reacts to rename event.
    *
-   * @param \Drupal\Core\Config\ConfigRenameEvent $event
+   * @param ConfigRenameEvent $event
    *   The configuration event.
    */
   public function configRename(ConfigRenameEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


33) modules/contrib/tome/modules/tome_sync/src/EventSubscriber/BookEventSubscriber.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * Creates a BookEventSubscriber object.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
    */
   public function __construct(Connection $connection, EntityTypeManagerInterface $entity_type_manager, FileSystemInterface $file_system) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


34) modules/contrib/tome/modules/tome_sync/src/Event/ContentCrudEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tome_sync\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\ContentEntityInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Wraps a content event for listeners.
@@ @@
   /**
    * Content object.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $content;

@@ @@
   /**
    * Constructs a CollectPathsEvent object.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $content
+   * @param ContentEntityInterface $content
    *   Content object.
    */
   public function __construct(ContentEntityInterface $content) {
@@ @@
   /**
    * Gets the content object.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The content object that caused the event to fire.
    */
   public function getContent() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/tome/modules/tome_sync/src/ContentIndexerTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tome_sync;

+use Drupal\Core\Field\FieldItemInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Field\EntityReferenceFieldItemListInterface;
 use Drupal\Core\Field\FieldItemListInterface;
@@ @@
   /**
    * Writes content to the index.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   An entity to be indexed.
    */
   protected function indexContent(ContentEntityInterface $entity) {
@@ @@
       }
       elseif ($field instanceof FieldItemListInterface) {
         foreach ($field as $item) {
-          /** @var \Drupal\Core\Field\FieldItemInterface $item */
+          /** @var FieldItemInterface $item */
           foreach ($item as $property) {
             // @see \Drupal\tome_sync\Normalizer\UriNormalizer
             if ($property instanceof UriInterface && strpos($property->getValue(), 'entity:') === 0) {
@@ @@
   /**
    * Removes content from the index.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   An entity to be indexed.
    */
   protected function unIndexContent(ContentEntityInterface $entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


36) modules/contrib/tome/modules/tome_sync/src/ContentHasher.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * The content storage.
    *
-   * @var \Drupal\Core\Config\FileStorage
+   * @var FileStorage
    */
   protected $storage;

@@ @@
   /**
    * Creates a ContentHasher object.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
-   * @param \Drupal\Core\Config\FileStorage $storage
+   * @param FileStorage $storage
    *   The content storage.
    */
   public function __construct(Connection $database, FileStorage $storage) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


37) modules/contrib/tome/modules/tome_sync/src/Commands/ImportPartialCommand.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The content hasher.
    *
-   * @var \Drupal\tome_sync\ContentHasherInterface
+   * @var ContentHasherInterface
    */
   protected $contentHasher;

@@ @@
   /**
    * Constructs an ImportPartialCommand instance.
    *
-   * @param \Drupal\tome_sync\ImporterInterface $importer
+   * @param ImporterInterface $importer
    *   The importer.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state system.
-   * @param \Drupal\tome_sync\ContentHasherInterface $content_hasher
+   * @param ContentHasherInterface $content_hasher
    *   The content hasher.
    */
   public function __construct(ImporterInterface $importer, EntityTypeManagerInterface $entity_type_manager, StateInterface $state, ContentHasherInterface $content_hasher) {
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
+  protected function execute(InputInterface $input, OutputInterface $output): int {
     if (!$this->contentHasher->hashesExist()) {
       $this->io()->error('No content hashes exist to perform a partial import. Please run a full Tome install and export (i.e. "drush tome:install && drush tome:export"), which will ensure hashes exist in the database and filesystem.');
       return 1;
@@ @@
     $this->state->set(ImporterInterface::STATE_KEY_IMPORTING, FALSE);

     $this->io()->success('Imported config, content, and files.');
+    return 0;
   }

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * ConsoleExecuteReturnIntRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/tome/modules/tome_sync/src/Commands/ImportContentCommand.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
+  protected function execute(InputInterface $input, OutputInterface $output): int {
     $names = $input->getArgument('names');
     $names = explode(',', $names);
     foreach ($names as $name) {
@@ @@
       list($entity_type_id, $uuid, $langcode) = TomeSyncHelper::getPartsFromContentName($name);
       $this->importer->importContent($entity_type_id, $uuid, $langcode);
     }
+    return 0;
   }

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * ConsoleExecuteReturnIntRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


39) modules/contrib/tome/modules/tome_sync/src/Commands/ImportCompleteCommand.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tome_sync\Commands;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\tome_base\CommandBase;
 use Drupal\tome_sync\Event\TomeSyncEvents;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Output\OutputInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;

 /**
@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Constructs an ImportCompleteCommand instance.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(EventDispatcherInterface $event_dispatcher) {
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
-    $this->eventDispatcher->dispatch(TomeSyncEvents::IMPORT_ALL, new Event());
+  protected function execute(InputInterface $input, OutputInterface $output): int {
+    $this->eventDispatcher->dispatch(new Event(), TomeSyncEvents::IMPORT_ALL);
+    return 0;
   }

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * ConsoleExecuteReturnIntRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/tome/modules/tome_sync/src/Commands/ImportCommand.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tome_sync\Commands;

+use Drupal\Core\Config\StorageInterface;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\State\StateInterface;
@@ @@
   /**
    * The importer.
    *
-   * @var \Drupal\tome_sync\ImporterInterface
+   * @var ImporterInterface
    */
   protected $importer;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The state system.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * Constructs an ImportCommand instance.
    *
-   * @param \Drupal\tome_sync\ImporterInterface $importer
+   * @param ImporterInterface $importer
    *   The importer.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state system.
    */
   public function __construct(ImporterInterface $importer, EntityTypeManagerInterface $entity_type_manager, StateInterface $state) {
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
+  protected function execute(InputInterface $input, OutputInterface $output): int {
     $options = $input->getOptions();

     if (!$options['yes'] && !$this->io()->confirm('Your local site\'s config, content, and files will be deleted and replaced.', FALSE)) {
@@ @@
     $this->state->set(ImporterInterface::STATE_KEY_IMPORTING, FALSE);

     $this->io()->success('Imported config, content, and files.');
+    return 0;
   }

   /**
@@ @@
    * Prepares config for import by copying some directly from the source.
    */
   protected function prepareConfigForImport() {
-    /** @var \Drupal\Core\Config\StorageInterface $source_storage */
+    /** @var StorageInterface $source_storage */
     $source_storage = \Drupal::service('config.storage.sync');
     if ($site_data = $source_storage->read('system.site')) {
       \Drupal::configFactory()->getEditable('system.site')->setData($site_data)->save(TRUE);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * ConsoleExecuteReturnIntRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


41) modules/contrib/tome/modules/tome_sync/src/Commands/ExportContentCommand.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function execute(InputInterface $input, OutputInterface $output) {
+  public function execute(InputInterface $input, OutputInterface $output): int {
     $chunk = $input->getArgument('chunk');
     $id_pairs = explode(',', $chunk);
     $storages = [];
@@ @@
         $this->exporter->exportContent($entity->getTranslation($language->getId()));
       }
     }
+    return 0;
   }

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * ConsoleExecuteReturnIntRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


42) modules/contrib/tome/modules/tome_sync/src/Commands/ExportCommand.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tome_sync\Commands;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\tome_base\CommandBase;
 use Drupal\tome_sync\Event\TomeSyncEvents;
@@ @@
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Input\InputOption;
 use Symfony\Component\Console\Output\OutputInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;

 /**
@@ @@
   /**
    * The exporter.
    *
-   * @var \Drupal\tome_sync\ExporterInterface
+   * @var ExporterInterface
    */
   protected $exporter;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Constructs an ExportCommand instance.
    *
-   * @param \Drupal\tome_sync\ExporterInterface $exporter
+   * @param ExporterInterface $exporter
    *   The exporter.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(ExporterInterface $exporter, EntityTypeManagerInterface $entity_type_manager, EventDispatcherInterface $event_dispatcher) {
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
+  protected function execute(InputInterface $input, OutputInterface $output): int {
     $options = $input->getOptions();
     if (!$options['yes'] && !$this->io()->confirm('The files in your export directory will be deleted and replaced.', FALSE)) {
       return 0;
@@ @@
       return 1;
     }

-    $this->eventDispatcher->dispatch(TomeSyncEvents::EXPORT_ALL, new Event());
+    $this->eventDispatcher->dispatch(new Event(), TomeSyncEvents::EXPORT_ALL);

     $this->io()->success('Exported config, content, and files.');
+    return 0;
   }

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * ConsoleExecuteReturnIntRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


43) modules/contrib/tome/modules/tome_sync/src/Commands/DeleteContentCommand.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The config installer.
    *
-   * @var \Drupal\Core\Config\ConfigInstallerInterface
+   * @var ConfigInstallerInterface
    */
   protected $configInstaller;

@@ @@
   /**
    * Constructs an DeleteContentCommand instance.
    *
-   * @param \Drupal\tome_sync\ImporterInterface $importer
+   * @param ImporterInterface $importer
    *   The importer.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state system.
-   * @param \Drupal\Core\Config\ConfigInstallerInterface $config_installer
+   * @param ConfigInstallerInterface $config_installer
    *   The config installer.
    */
   public function __construct(ImporterInterface $importer, EntityTypeManagerInterface $entity_type_manager, StateInterface $state, ConfigInstallerInterface $config_installer) {
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function execute(InputInterface $input, OutputInterface $output) {
+  public function execute(InputInterface $input, OutputInterface $output): int {
     $this->configInstaller->setSyncing(TRUE);
     $this->importer->isImporting(TRUE);

@@ @@

     $this->importer->isImporting(FALSE);
     $this->configInstaller->setSyncing(FALSE);
+    return 0;
   }

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * ConsoleExecuteReturnIntRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


44) modules/contrib/tome/modules/tome_sync/src/Commands/CleanFilesCommand.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The target content storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $contentStorage;

@@ @@
   /**
    * The config storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $configStorage;

@@ @@
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The file sync service.
    *
-   * @var \Drupal\tome_sync\FileSyncInterface
+   * @var FileSyncInterface
    */
   protected $fileSync;

@@ @@
   /**
    * Creates a CleanFilesCommand object.
    *
-   * @param \Drupal\Core\Config\StorageInterface $content_storage
+   * @param StorageInterface $content_storage
    *   The target content storage.
-   * @param \Drupal\Core\Config\StorageInterface $config_storage
+   * @param StorageInterface $config_storage
    *   The target config storage.
-   * @param \Drupal\tome_sync\FileSyncInterface $file_sync
+   * @param FileSyncInterface $file_sync
    *   The file sync service.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
    */
   public function __construct(StorageInterface $content_storage, StorageInterface $config_storage, FileSyncInterface $file_sync, FileSystemInterface $file_system) {
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
+  protected function execute(InputInterface $input, OutputInterface $output): int {
     $options = $input->getOptions();

     $this->io()->writeLn('Searching for unused files...');
@@ @@
       $this->fileSync->deleteFile($filename);
     }
     $this->io()->success('Deleted all unused files.');
+    return 0;
   }

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * ConsoleExecuteReturnIntRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


45) modules/contrib/tome/modules/tome_sync/src/AccountSwitcherTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tome_sync;

+use Drupal\Core\Session\AccountSwitcherInterface;
 use Drupal\Core\Session\UserSession;

 /**
@@ @@
   /**
    * The account switcher.
    *
-   * @var \Drupal\Core\Session\AccountSwitcherInterface
+   * @var AccountSwitcherInterface
    */
   protected $accountSwitcher;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


46) modules/contrib/tome/modules/tome_sync/modules/tome_sync_autoclean/src/EventSubscriber/ExportEventSubscriber.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * The target content storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $contentStorage;

@@ @@
   /**
    * The config storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $configStorage;

@@ @@
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The file sync service.
    *
-   * @var \Drupal\tome_sync\FileSyncInterface
+   * @var FileSyncInterface
    */
   protected $fileSync;

@@ @@
   /**
    * Creates a ExportEventSubscriber object.
    *
-   * @param \Drupal\Core\Config\StorageInterface $content_storage
+   * @param StorageInterface $content_storage
    *   The target content storage.
-   * @param \Drupal\Core\Config\StorageInterface $config_storage
+   * @param StorageInterface $config_storage
    *   The target config storage.
-   * @param \Drupal\tome_sync\FileSyncInterface $file_sync
+   * @param FileSyncInterface $file_sync
    *   The file sync service.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
    */
   public function __construct(StorageInterface $content_storage, StorageInterface $config_storage, FileSyncInterface $file_sync, FileSystemInterface $file_system) {
@@ @@
   /**
    * Reacts to content events.
    *
-   * @param \Drupal\tome_sync\Event\ContentCrudEvent $event
+   * @param ContentCrudEvent $event
    *   The event.
    */
   public function exportContent(ContentCrudEvent $event) {
@@ @@
   /**
    * Reacts to config events.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The event.
    */
   public function exportConfig(ConfigCrudEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


47) modules/contrib/tome/modules/tome_static/tests/src/Kernel/TomeStaticEventTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tome_static\Kernel;

+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Drupal\KernelTests\KernelTestBase;

 /**
@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->eventDispatcher = \Drupal::service('event_dispatcher');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


48) modules/contrib/tome/modules/tome_static/tests/src/Kernel/StaticRedirectTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tome_static\Kernel;

+use Drupal\tome_static\StaticGenerator;
 use Drupal\Core\Site\Settings;
 use Drupal\redirect\Entity\Redirect;
 use Drupal\Tests\tome_base\Kernel\TestBase;
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('redirect');
     // @see \Drupal\redirect\RedirectChecker::canRedirect
@@ @@
    * @covers \Drupal\tome_static\EventSubscriber\RedirectPathSubscriber::replacePathPlaceholder
    */
   public function testRedirect() {
-    /** @var \Drupal\tome_static\StaticGenerator $static */
+    /** @var StaticGenerator $static */
     $static = \Drupal::service('tome_static.generator');
     $base_dir = Settings::get('tome_static_directory');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


49) modules/contrib/tome/modules/tome_static/tests/src/Kernel/StaticGeneratorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tome_static\Kernel;

+use Drupal\tome_static\StaticGenerator;
 use Drupal\block_content\Entity\BlockContent;
 use Drupal\block_content\Entity\BlockContentType;
 use Drupal\Core\Datetime\Entity\DateFormat;
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     User::create([
@@ @@
    * @covers \Drupal\tome_static\EventSubscriber\EntityPathSubscriber::replacePathPlaceholder
    */
   public function testGetPaths() {
-    /** @var \Drupal\tome_static\StaticGenerator $static */
+    /** @var StaticGenerator $static */
     $static = \Drupal::service('tome_static.generator');
     $base_dir = Settings::get('tome_static_directory');

@@ @@
     \Drupal::entityTypeManager()->getAccessControlHandler('node')->resetCache();
     $static->requestPath('/');
     $static->requestPath('_entity:node:en:1');
-    $this->assertFileNotExists("$base_dir/node/1/index.html");
+    $this->assertFileDoesNotExist("$base_dir/node/1/index.html");
     $static->requestPath('_entity:node:fr:1');
     $this->assertFileExists("$base_dir/french/node/1/index.html");
   }
@@ @@
   public function testLanguagePathPrefix() {
     $this->enableModules(['tome_test']);

-    /** @var \Drupal\tome_static\StaticGenerator $static */
+    /** @var StaticGenerator $static */
     $static = \Drupal::service('tome_static.generator');

     $this->assertUnsortedEquals([
@@ @@
     $article->addTranslation('fr', ['title' => 'My french article']);
     $article->save();

-    /** @var \Drupal\tome_static\StaticGenerator $static */
+    /** @var StaticGenerator $static */
     $static = \Drupal::service('tome_static.generator');

     $this->assertUnsortedEquals([
@@ @@
   public function testRequestPath() {
     $this->enableModules(['tome_test']);

-    /** @var \Drupal\tome_static\StaticGenerator $static */
+    /** @var StaticGenerator $static */
     $static = \Drupal::service('tome_static.generator');

     $static->requestPath('/tome-test/page');
@@ @@
   public function testComplexHtml() {
     $this->enableModules(['tome_test']);

-    /** @var \Drupal\tome_static\StaticGenerator $static */
+    /** @var StaticGenerator $static */
     $static = \Drupal::service('tome_static.generator');

     $invoke_paths = $static->requestPath('/tome-test/complex-page');
-    $module_path = drupal_get_path('module', 'tome_test');
+    $module_path = \Drupal::service('extension.list.module')->getPath('tome_test');
     $base_dir = Settings::get('tome_static_directory');

     $this->assertContains("/$module_path/assets/srcset-test1.png", $invoke_paths);
@@ @@
   public function testPagers() {
     $this->enableModules(['tome_test']);

-    /** @var \Drupal\tome_static\StaticGenerator $static */
+    /** @var StaticGenerator $static */
     $static = \Drupal::service('tome_static.generator');

     $invoke_paths = $static->requestPath('/tome-test/pager-page');
@@ @@
   public function testOembed() {
     $this->enableModules(['tome_test']);

-    /** @var \Drupal\tome_static\StaticGenerator $static */
+    /** @var StaticGenerator $static */
     $static = \Drupal::service('tome_static.generator');

     $invoke_paths = $static->requestPath('/tome-test/oembed-page');
@@ @@
     $this->enableModules(['link', 'block_content']);
     $this->installEntitySchema('block_content');

-    /** @var \Drupal\tome_static\StaticGenerator $static */
+    /** @var StaticGenerator $static */
     $static = \Drupal::service('tome_static.generator');

     BlockContentType::create([
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameMethodRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


50) modules/contrib/tome/modules/tome_static/tests/src/Kernel/StaticCacheTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tome_static\Kernel;

+use Drupal\tome_static\StaticGenerator;
 use Drupal\Core\Datetime\Entity\DateFormat;
 use Drupal\Core\Site\Settings;
 use Drupal\node\Entity\Node;
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     User::create([
@@ @@
    * @covers \Drupal\tome_static\StaticGenerator::getPaths
    */
   public function testCache() {
-    /** @var \Drupal\tome_static\StaticGenerator $static */
+    /** @var StaticGenerator $static */
     $static = \Drupal::service('tome_static.generator');
     $base_dir = Settings::get('tome_static_directory');

@@ @@
       'id' => 'medium',
     ])->save();

-    /** @var \Drupal\node\Entity\Node $article */
+    /** @var Node $article */
     $article = Node::create(['type' => 'article', 'title' => 'My article']);
     $article->save();

@@ @@
     $this->assertFileExists("$base_dir/node/1/index.html");
     $article->delete();
     $static->cleanupStaticDirectory();
-    $this->assertFileNotExists("$base_dir/node/1/index.html");
+    $this->assertFileDoesNotExist("$base_dir/node/1/index.html");
   }

 }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameMethodRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


51) modules/contrib/tome/modules/tome_static/tests/src/Kernel/PathPlaceholderEventTest.php:45

    ---------- begin diff ----------
@@ @@
    * @param string $path
    *   (optional) The HTML path.
    *
-   * @return \Drupal\tome_static\Event\PathPlaceholderEvent
+   * @return PathPlaceholderEvent
    *   The path placeholder event after it is triggered.
    */
   protected function pathPlaceholder($path = '/my-path/{placeholder}') {
     $event = new PathPlaceholderEvent($path);
-    $this->eventDispatcher->dispatch($this->eventName, $event);
+    $this->eventDispatcher->dispatch($event, $this->eventName);
     return $event;
   }

@@ @@
   /**
    * Emulates the setPath() listener.
    *
-   * @param \Drupal\tome_static\Event\PathPlaceholderEvent $event
+   * @param PathPlaceholderEvent $event
    *   The path placeholder event.
    */
   public function setPath(PathPlaceholderEvent $event) {
@@ @@
   /**
    * Emulates the isInvalid() listener.
    *
-   * @param \Drupal\tome_static\Event\PathPlaceholderEvent $event
+   * @param PathPlaceholderEvent $event
    *   The path placeholder event.
    */
   public function isinvalid(PathPlaceholderEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


52) modules/contrib/tome/modules/tome_static/tests/src/Kernel/ModifyHtmlEventTest.php:68

    ---------- begin diff ----------
@@ @@
    * @param string $path
    *   (optional) The HTML path.
    *
-   * @return \Drupal\tome_static\Event\ModifyHtmlEvent
+   * @return ModifyHtmlEvent
    *   The modified HTML event after it is triggered.
    */
   protected function modifyHtml($html = 'HTML', $path = '/my-path') {
     $event = new ModifyHtmlEvent($html, $path);
-    $this->eventDispatcher->dispatch($this->eventName, $event);
+    $this->eventDispatcher->dispatch($event, $this->eventName);
     return $event;
   }

@@ @@
   /**
    * Emulates the setHtml() listener.
    *
-   * @param \Drupal\tome_static\Event\ModifyHtmlEvent $event
+   * @param ModifyHtmlEvent $event
    *   The modify HTML event.
    */
   public function setHtml(ModifyHtmlEvent $event) {
@@ @@
   /**
    * Emulates the addInvokePath() listener.
    *
-   * @param \Drupal\tome_static\Event\ModifyHtmlEvent $event
+   * @param ModifyHtmlEvent $event
    *   The modify HTML event.
    */
   public function addInvokePath(ModifyHtmlEvent $event) {
@@ @@
   /**
    * Emulates the addExcludePath() listener.
    *
-   * @param \Drupal\tome_static\Event\ModifyHtmlEvent $event
+   * @param ModifyHtmlEvent $event
    *   The modify HTML event.
    */
   public function addExcludePath(ModifyHtmlEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


53) modules/contrib/tome/modules/tome_static/tests/src/Kernel/ModifyDestinationEventTest.php:39

    ---------- begin diff ----------
@@ @@
    */
   protected function modifyDestination($destination = '/my-destination') {
     $event = new ModifyDestinationEvent($destination);
-    $this->eventDispatcher->dispatch($this->eventName, $event);
+    $this->eventDispatcher->dispatch($event, $this->eventName);
     return $event->getDestination();
   }

@@ @@
   /**
    * Emulates the setDestination() listener.
    *
-   * @param \Drupal\tome_static\Event\ModifyDestinationEvent $event
+   * @param ModifyDestinationEvent $event
    *   The modify destination event.
    */
   public function setDestination(ModifyDestinationEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


54) modules/contrib/tome/modules/tome_static/tests/src/Kernel/FileSavedEventTest.php:33

    ---------- begin diff ----------
@@ @@
    * @param string $path
    *   (optional) The HTML path.
    *
-   * @return \Drupal\tome_static\Event\FileSavedEvent
+   * @return FileSavedEvent
    *   The file saved event after it is triggered.
    */
   protected function fileSaved($path = '/my-file-path') {
     $event = new FileSavedEvent($path);
-    $this->eventDispatcher->dispatch($this->eventName, $event);
+    $this->eventDispatcher->dispatch($event, $this->eventName);
     return $event;
   }

@@ @@
   /**
    * Emulates the setPath() listener.
    *
-   * @param \Drupal\tome_static\Event\FileSavedEvent $event
+   * @param FileSavedEvent $event
    *   The file saved event.
    */
   public function getPath(FileSavedEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


55) modules/contrib/tome/modules/tome_static/tests/src/Kernel/CollectPathsEventTest.php:83

    ---------- begin diff ----------
@@ @@
    */
   protected function collectPaths(array $paths = []) {
     $event = new CollectPathsEvent($paths);
-    $this->eventDispatcher->dispatch($this->eventName, $event);
+    $this->eventDispatcher->dispatch($event, $this->eventName);
     return $event->getPaths();
   }

@@ @@
   /**
    * Emulates the addPath() listener.
    *
-   * @param \Drupal\tome_static\Event\CollectPathsEvent $event
+   * @param CollectPathsEvent $event
    *   The collect paths event.
    */
   public function addPath(CollectPathsEvent $event) {
@@ @@
   /**
    * Emulates the addPaths() listener.
    *
-   * @param \Drupal\tome_static\Event\CollectPathsEvent $event
+   * @param CollectPathsEvent $event
    *   The collect paths event.
    */
   public function addPaths(CollectPathsEvent $event) {
@@ @@
   /**
    * Emulates the replacePath() listener.
    *
-   * @param \Drupal\tome_static\Event\CollectPathsEvent $event
+   * @param CollectPathsEvent $event
    *   The collect paths event.
    */
   public function replacePath(CollectPathsEvent $event) {
@@ @@
   /**
    * Emulates the replacePaths() listener.
    *
-   * @param \Drupal\tome_static\Event\CollectPathsEvent $event
+   * @param CollectPathsEvent $event
    *   The collect paths event.
    */
   public function replacePaths(CollectPathsEvent $event) {
@@ @@
   /**
    * Emulates the deletePath() listener.
    *
-   * @param \Drupal\tome_static\Event\CollectPathsEvent $event
+   * @param CollectPathsEvent $event
    *   The collect paths event.
    */
   public function deletePath(CollectPathsEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


56) modules/contrib/tome/modules/tome_static/tests/src/Functional/TomeStaticGeneratorFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tome_static\Functional;

+use Drupal\tome_static\StaticGeneratorInterface;
 use Drupal\file\Entity\File;
 use Drupal\image\Entity\ImageStyle;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->createContentType([
@@ @@
    * Tests the static generator form.
    */
   public function testStaticGeneratorForm() {
-    /** @var \Drupal\tome_static\StaticGeneratorInterface $static */
+    /** @var StaticGeneratorInterface $static */
     $static = \Drupal::service('tome_static.generator');

     $valid_images = [];
@@ @@
     ]);

     $filename = $static->getStaticDirectory() . base_path() . 'node/' . $node->id() . '/index.html';
-    $image_filename = $static->getStaticDirectory() . file_url_transform_relative(file_create_url(ImageStyle::load('large')->buildUri($file->getFileUri())));
-    $this->assertFileNotExists($filename);
-    $this->assertFileNotExists($image_filename);
+    $image_filename = $static->getStaticDirectory() . \Drupal::service('file_url_generator')->generateString(ImageStyle::load('large')->buildUri($file->getFileUri()));
+    $this->assertFileDoesNotExist($filename);
+    $this->assertFileDoesNotExist($image_filename);

     $this->drupalGet('/admin/config/tome/static/generate');
     $this->submitForm([], 'Submit');
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameMethodRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


57) modules/contrib/tome/modules/tome_static/tests/modules/tome_test/src/Controller/TestController.php:25

    ---------- begin diff ----------
@@ @@
    * Outputs a more complex test page.
    */
   public function testComplexPage(Request $request) {
-    $module_path = drupal_get_path('module', 'tome_test');
+    $module_path = \Drupal::service('extension.list.module')->getPath('tome_test');
     return [
       '#children' => "<p>Hello, complex world</p>
 <img src=\"/$module_path/assets/druplicon-1.png\">
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


58) modules/contrib/tome/modules/tome_static/src/TomeStaticHelper.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Sets the base URL for a given request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    * @param string $base_url
    *   The base URL.
@@ @@
   /**
    * Restores the base URL for a request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    * @param array $original_params
    *   The return value of ::setBaseUrl.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


59) modules/contrib/tome/modules/tome_static/src/StaticUITrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tome_static;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 /**
  * Trait containing methods useful for different static user interfaces.
  *
@@ @@
    * @param \Exception $exception
    *   An exception.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   A formatted message to present to the user.
    */
   protected function formatPathException($path, \Exception $exception) {
@@ @@
    * @param array $options
    *   (optional) An associative array of additional options.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   An object that, when cast to a string, returns the translated string.
    */
   abstract protected function t($string, array $args = [], array $options = []);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


60) modules/contrib/tome/modules/tome_static/src/StaticGenerator.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * The HTTP kernel.
    *
-   * @var \Symfony\Component\HttpKernel\HttpKernelInterface
+   * @var HttpKernelInterface
    */
   protected $httpKernel;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $currentRequest;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The static cache.
    *
-   * @var \Drupal\tome_static\StaticCacheInterface
+   * @var StaticCacheInterface
    */
   protected $cache;

@@ @@
   /**
    * The account switcher.
    *
-   * @var \Drupal\Core\Session\AccountSwitcherInterface
+   * @var AccountSwitcherInterface
    */
   protected $accountSwitcher;

@@ @@
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * Creates a StaticGenerator object.
    *
-   * @param \Symfony\Component\HttpKernel\HttpKernelInterface $http_kernel
+   * @param HttpKernelInterface $http_kernel
    *   The HTTP kernel.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\tome_static\StaticCacheInterface $cache
+   * @param StaticCacheInterface $cache
    *   The static cache.
-   * @param \Drupal\Core\Session\AccountSwitcherInterface $account_switcher
+   * @param AccountSwitcherInterface $account_switcher
    *   The account switcher.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
    */
   public function __construct(HttpKernelInterface $http_kernel, RequestStack $request_stack, EventDispatcherInterface $event_dispatcher, StaticCacheInterface $cache, AccountSwitcherInterface $account_switcher, FileSystemInterface $file_system) {
@@ @@
   public function getPaths() {
     $this->accountSwitcher->switchTo(new AnonymousUserSession());
     $event = new CollectPathsEvent([]);
-    $this->eventDispatcher->dispatch(TomeStaticEvents::COLLECT_PATHS, $event);
+    $this->eventDispatcher->dispatch($event, TomeStaticEvents::COLLECT_PATHS);
     $paths = $event->getPaths();

     $paths = $this->cache->filterUncachedPaths($this->currentRequest->getSchemeAndHttpHost(), $paths);
@@ @@
     $original_path = $path;

     $event = new PathPlaceholderEvent($path);
-    $this->eventDispatcher->dispatch(TomeStaticEvents::PATH_PLACEHOLDER, $event);
+    $this->eventDispatcher->dispatch($event, TomeStaticEvents::PATH_PLACEHOLDER);

     if ($event->isInvalid()) {
       $this->accountSwitcher->switchBack();
@@ @@
         $content = $response->getContent();
         if (strpos($response->headers->get('Content-Type'), 'text/html') === 0) {
           $event = new ModifyHtmlEvent($content, $path);
-          $this->eventDispatcher->dispatch(TomeStaticEvents::MODIFY_HTML, $event);
+          $this->eventDispatcher->dispatch($event, TomeStaticEvents::MODIFY_HTML);
           $content = $event->getHtml();
           $invoke_paths = array_merge($invoke_paths, $this->getHtmlAssets($content, $path), $event->getInvokePaths());
           $invoke_paths = array_diff($invoke_paths, $event->getExcludePaths());
@@ @@
         }
         file_put_contents($destination, $content);
       }
-      $this->eventDispatcher->dispatch(TomeStaticEvents::FILE_SAVED, new FileSavedEvent($destination));
+      $this->eventDispatcher->dispatch(new FileSavedEvent($destination), TomeStaticEvents::FILE_SAVED);

       if ($response instanceof RedirectResponse) {
         $target_url = $this->makeExternalUrlLocal($response->getTargetUrl());
@@ @@
    *
    * @param array $invoke_paths
    *   An array of paths returned by requestPath or exportPaths.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   A request object.
    *
    * @return array
@@ @@
    */
   protected function getDestination($path) {
     $event = new ModifyDestinationEvent($path);
-    $this->eventDispatcher->dispatch(TomeStaticEvents::MODIFY_DESTINATION, $event);
+    $this->eventDispatcher->dispatch($event, TomeStaticEvents::MODIFY_DESTINATION);
     $path = $event->getDestination();
     $path = urldecode($path);
     $path = $this->sanitizePath($path);
@@ @@
   /**
    * Replaces the request stack with a static request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The new static request.
    *
-   * @return \Symfony\Component\HttpFoundation\Request[]
+   * @return Request[]
    *   An array of previous stack requests.
    */
   protected function replaceRequestStack(Request $request) {
@@ @@
   /**
    * Restores the request stack to its previous state.
    *
-   * @param \Symfony\Component\HttpFoundation\Request[] $stack
+   * @param Request[] $stack
    *   An array of previous stack requests.
    */
   protected function restoreRequestStack(array $stack) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


61) modules/contrib/tome/modules/tome_static/src/StaticCacheInterface.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * Adds to the Tome cache.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   A request object.
-   * @param \Symfony\Component\HttpFoundation\Response $response
+   * @param Response $response
    *   A response object that should be stored in the page cache.
    * @param string $original_path
    *   The original, placeholdered path.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


62) modules/contrib/tome/modules/tome_static/src/StaticCache.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a StaticCache object.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Cache\CacheTagsChecksumInterface $checksum_provider
+   * @param CacheTagsChecksumInterface $checksum_provider
    *   The cache tags checksum provider.
    */
   public function __construct(Connection $connection, CacheTagsChecksumInterface $checksum_provider) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


63) modules/contrib/tome/modules/tome_static/src/RequestPreparer.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The decorated context repository.
    *
-   * @var \Drupal\tome_static\LazyResettableContextRepository
+   * @var LazyResettableContextRepository
    */
   protected $contextRepository;

@@ @@
   /**
    * The decorated path matcher.
    *
-   * @var \Drupal\tome_static\ResettablePathMatcher
+   * @var ResettablePathMatcher
    */
   protected $pathMatcher;

@@ @@
   /**
    * The menu active trail cache collector.
    *
-   * @var \Drupal\Core\Menu\MenuActiveTrailInterface
+   * @var MenuActiveTrailInterface
    */
   protected $menuActiveTrail;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Constructs a RequestPreparer object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\tome_static\LazyResettableContextRepository $context_repository
+   * @param LazyResettableContextRepository $context_repository
    *   The decorated context repository.
-   * @param \Drupal\tome_static\ResettablePathMatcher $path_matcher
+   * @param ResettablePathMatcher $path_matcher
    *   The decorated path matcher.
-   * @param \Drupal\Core\Menu\MenuActiveTrailInterface $menu_active_trail
+   * @param MenuActiveTrailInterface $menu_active_trail
    *   The menu active trail cache collector.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, LazyResettableContextRepository $context_repository, ResettablePathMatcher $path_matcher, MenuActiveTrailInterface $menu_active_trail, EventDispatcherInterface $event_dispatcher, LanguageManagerInterface $language_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


64) modules/contrib/tome/modules/tome_static/src/PageCache/RequestPolicy/CoreRequestPolicy.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs the CoreRequestPolicy object.
    *
-   * @param \Drupal\Core\Session\SessionConfigurationInterface $session_configuration
+   * @param SessionConfigurationInterface $session_configuration
    *   The session configuration.
    */
   public function __construct(SessionConfigurationInterface $session_configuration) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


65) modules/contrib/tome/modules/tome_static/src/Form/StaticPreviewForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The session.
    *
-   * @var \Symfony\Component\HttpFoundation\Session\Session
+   * @var Session
    */
   protected $session;

@@ @@
   /**
    * StaticPreviewForm constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\Session\Session $session
+   * @param Session $session
    *   The session.
    */
   public function __construct(Session $session) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


66) modules/contrib/tome/modules/tome_static/src/Form/StaticGeneratorForm.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * The static generator.
    *
-   * @var \Drupal\tome_static\StaticGeneratorInterface
+   * @var StaticGeneratorInterface
    */
   protected $static;

@@ @@
   /**
    * The state system.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The request preparer.
    *
-   * @var \Drupal\tome_static\RequestPreparer
+   * @var RequestPreparer
    */
   protected $requestPreparer;

@@ @@
   /**
    * StaticGeneratorForm constructor.
    *
-   * @param \Drupal\tome_static\StaticGeneratorInterface $static
+   * @param StaticGeneratorInterface $static
    *   The static generator.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state system.
-   * @param \Drupal\tome_static\RequestPreparer $request_preparer
+   * @param RequestPreparer $request_preparer
    *   The request preparer.
    */
   public function __construct(StaticGeneratorInterface $static, StateInterface $state, RequestPreparer $request_preparer) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


67) modules/contrib/tome/modules/tome_static/src/EventSubscriber/StaticPreviewRequestSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tome_static\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Routing\CurrentRouteMatch;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Core\Url;
@@ @@
 use Symfony\Component\HttpFoundation\File\File;
 use Symfony\Component\HttpFoundation\Response;
 use Symfony\Component\HttpFoundation\Session\Session;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * The static generator.
    *
-   * @var \Drupal\tome_static\StaticGeneratorInterface
+   * @var StaticGeneratorInterface
    */
   protected $static;

@@ @@
   /**
    * The session.
    *
-   * @var \Symfony\Component\HttpFoundation\Session\Session
+   * @var Session
    */
   protected $session;

@@ @@
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $routeMatch;

@@ @@
   /**
    * Constructs a new StaticPreviewRequestSubscriber object.
    *
-   * @param \Drupal\tome_static\StaticGeneratorInterface $static
+   * @param StaticGeneratorInterface $static
    *   The static generator.
-   * @param \Symfony\Component\HttpFoundation\Session\Session $session
+   * @param Session $session
    *   The session.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $route_match
+   * @param CurrentRouteMatch $route_match
    *   The current route match.
    */
   public function __construct(StaticGeneratorInterface $static, Session $session, CurrentRouteMatch $route_match) {
@@ @@
   /**
    * Sets a response in case of a Dynamic Page Cache hit.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The event to process.
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(RequestEvent $event) {
     $request = $event->getRequest();
     if (!$this->session->get(static::SESSION_KEY) || $this->routeMatch->getRouteName() === 'tome_static.preview_exit') {
       return;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


68) modules/contrib/tome/modules/tome_static/src/EventSubscriber/RoutePathSubscriber.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Constructs the RoutePathSubscriber object.
    *
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(RouteProviderInterface $route_provider, LanguageManagerInterface $language_manager) {
@@ @@
   /**
    * Reacts to a collect paths event.
    *
-   * @param \Drupal\tome_static\Event\CollectPathsEvent $event
+   * @param CollectPathsEvent $event
    *   The collect paths event.
    */
   public function collectPaths(CollectPathsEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


69) modules/contrib/tome/modules/tome_static/src/EventSubscriber/RedirectPathSubscriber.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Constructs the RedirectPathSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager) {
@@ @@
   /**
    * Reacts to a collect paths event.
    *
-   * @param \Drupal\tome_static\Event\CollectPathsEvent $event
+   * @param CollectPathsEvent $event
    *   The collect paths event.
    */
   public function collectPaths(CollectPathsEvent $event) {
@@ @@
   /**
    * Reacts to a path placeholder event.
    *
-   * @param \Drupal\tome_static\Event\PathPlaceholderEvent $event
+   * @param PathPlaceholderEvent $event
    *   The path placeholder event.
    */
   public function replacePathPlaceholder(PathPlaceholderEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


70) modules/contrib/tome/modules/tome_static/src/EventSubscriber/PagerPathSubscriber.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Reacts to a modify destination event.
    *
-   * @param \Drupal\tome_static\Event\ModifyDestinationEvent $event
+   * @param ModifyDestinationEvent $event
    *   The event.
    */
   public function modifyDestination(ModifyDestinationEvent $event) {
@@ @@
   /**
    * Reacts to a modify HTML event.
    *
-   * @param \Drupal\tome_static\Event\ModifyHtmlEvent $event
+   * @param ModifyHtmlEvent $event
    *   The event.
    */
   public function modifyHtml(ModifyHtmlEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


71) modules/contrib/tome/modules/tome_static/src/EventSubscriber/PageCacheRequestPrepareSubscriber.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The resettable page cache.
    *
-   * @var \Drupal\tome_static\StackMiddleware\ResettablePageCache
+   * @var ResettablePageCache
    */
   protected $pageCache;

@@ @@
   /**
    * Constructs the EntityPathSubscriber object.
    *
-   * @param \Drupal\tome_static\StackMiddleware\ResettablePageCache $page_cache
+   * @param ResettablePageCache $page_cache
    *   The resettable page cache.
    */
   public function __construct(ResettablePageCache $page_cache) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


72) modules/contrib/tome/modules/tome_static/src/EventSubscriber/MediaOembedPathSubscriber.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Reacts to a modify destination event.
    *
-   * @param \Drupal\tome_static\Event\ModifyDestinationEvent $event
+   * @param ModifyDestinationEvent $event
    *   The event.
    */
   public function modifyDestination(ModifyDestinationEvent $event) {
@@ @@
   /**
    * Reacts to a modify HTML event.
    *
-   * @param \Drupal\tome_static\Event\ModifyHtmlEvent $event
+   * @param ModifyHtmlEvent $event
    *   The event.
    */
   public function modifyHtml(ModifyHtmlEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


73) modules/contrib/tome/modules/tome_static/src/EventSubscriber/LanguagePathSubscriber.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Constructs the LanguagePathSubscriber object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, LanguageManagerInterface $language_manager) {
@@ @@
   /**
    * Reacts to a collect paths event to add multilingual homepage paths.
    *
-   * @param \Drupal\tome_static\Event\CollectPathsEvent $event
+   * @param CollectPathsEvent $event
    *   The collect paths event.
    */
   public function collectPaths(CollectPathsEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


74) modules/contrib/tome/modules/tome_static/src/EventSubscriber/ExcludePathSubscriber.php:44

    ---------- begin diff ----------
@@ @@
   /**
    * Reacts to a collect paths event.
    *
-   * @param \Drupal\tome_static\Event\CollectPathsEvent $event
+   * @param CollectPathsEvent $event
    *   The collect paths event.
    */
   public function collectPaths(CollectPathsEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


75) modules/contrib/tome/modules/tome_static/src/EventSubscriber/EntityPathSubscriber.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Constructs the EntityPathSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager) {
@@ @@
   /**
    * Reacts to a collect paths event.
    *
-   * @param \Drupal\tome_static\Event\CollectPathsEvent $event
+   * @param CollectPathsEvent $event
    *   The collect paths event.
    */
   public function collectPaths(CollectPathsEvent $event) {
@@ @@
   /**
    * Reacts to a path placeholder event.
    *
-   * @param \Drupal\tome_static\Event\PathPlaceholderEvent $event
+   * @param PathPlaceholderEvent $event
    *   The path placeholder event.
    */
   public function replacePathPlaceholder(PathPlaceholderEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


76) modules/contrib/tome/modules/tome_static/src/Event/PathPlaceholderEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tome_static\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Allows modules that provide placeholder paths to load the real path.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


77) modules/contrib/tome/modules/tome_static/src/Event/ModifyHtmlEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tome_static\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Allows modules to modify the HTML of a static page before save.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


78) modules/contrib/tome/modules/tome_static/src/Event/ModifyDestinationEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tome_static\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Allows modules to modify the HTML of a static page before save.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


79) modules/contrib/tome/modules/tome_static/src/Event/FileSavedEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tome_static\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Allows modules to react to a file save.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


80) modules/contrib/tome/modules/tome_static/src/Event/CollectPathsEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tome_static\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Wraps an array of paths that will be processed by the static generator.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


81) modules/contrib/tome/modules/tome_static/src/Controller/StaticPreviewController.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The session.
    *
-   * @var \Symfony\Component\HttpFoundation\Session\Session
+   * @var Session
    */
   protected $session;

@@ @@
   /**
    * StaticPreviewForm constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\Session\Session $session
+   * @param Session $session
    *   The session.
    */
   public function __construct(Session $session) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


82) modules/contrib/tome/modules/tome_static/src/Controller/StaticDownloadController.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The static generator.
    *
-   * @var \Drupal\tome_static\StaticGeneratorInterface
+   * @var StaticGeneratorInterface
    */
   protected $static;

@@ @@
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * StaticGeneratorForm constructor.
    *
-   * @param \Drupal\tome_static\StaticGeneratorInterface $static
+   * @param StaticGeneratorInterface $static
    *   The static generator.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
    */
   public function __construct(StaticGeneratorInterface $static, FileSystemInterface $file_system) {
@@ @@
   /**
    * Custom access callback to determine if there's anything to download.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   The access result.
    */
   public function downloadAccess() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


83) modules/contrib/tome/modules/tome_static/src/Commands/StaticPreviewCommand.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The static service.
    *
-   * @var \Drupal\tome_static\StaticGeneratorInterface
+   * @var StaticGeneratorInterface
    */
   protected $static;

@@ @@
   /**
    * Constructs a StaticPreviewCommand instance.
    *
-   * @param \Drupal\tome_static\StaticGeneratorInterface $static
+   * @param StaticGeneratorInterface $static
    *   The static service.
    */
   public function __construct(StaticGeneratorInterface $static) {
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
+  protected function execute(InputInterface $input, OutputInterface $output): int {
     if (!file_exists($this->static->getStaticDirectory())) {
       $this->io()->error('Static directory does not exist. Have you ran the "tome:static" command yet?');
       return 1;
@@ @@
     $url = '127.0.0.1:' . $options['port'];
     $this->startBrowser('http://' . $url . base_path(), 2);
     $this->runCommand('php -S ' . escapeshellarg($url), $this->static->getStaticDirectory(), NULL);
+    return 0;
   }

   /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * ConsoleExecuteReturnIntRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


84) modules/contrib/tome/modules/tome_static/src/Commands/StaticExportPathCommand.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The request preparer.
    *
-   * @var \Drupal\tome_static\RequestPreparer
+   * @var RequestPreparer
    */
   protected $requestPreparer;

@@ @@
   /**
    * Constructs a StaticCommand instance.
    *
-   * @param \Drupal\tome_static\StaticGeneratorInterface $static
+   * @param StaticGeneratorInterface $static
    *   The static service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state system.
-   * @param \Drupal\tome_static\RequestPreparer $request_preparer
+   * @param RequestPreparer $request_preparer
    *   The request preparer.
    */
   public function __construct(StaticGeneratorInterface $static, StateInterface $state, RequestPreparer $request_preparer) {
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
+  protected function execute(InputInterface $input, OutputInterface $output): int {
     $chunk = $input->getArgument('chunk');
     $paths = explode(',', $chunk);
     $invoke_paths = [];
@@ @@
     else {
       $this->exportPaths($invoke_paths, $paths, $options['process-count'], $options['path-count'], FALSE, $options['retry-count'], $options['uri']);
     }
+    return 0;
   }

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * ConsoleExecuteReturnIntRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


85) modules/contrib/tome/modules/tome_static/src/Commands/StaticCommand.php:41

    ---------- begin diff ----------
@@ @@
   /**
    * The static service.
    *
-   * @var \Drupal\tome_static\StaticGeneratorInterface
+   * @var StaticGeneratorInterface
    */
   protected $static;

@@ @@
   /**
    * Constructs a StaticCommand instance.
    *
-   * @param \Drupal\tome_static\StaticGeneratorInterface $static
+   * @param StaticGeneratorInterface $static
    *   The static service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state system.
    */
   public function __construct(StaticGeneratorInterface $static, StateInterface $state) {
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
+  protected function execute(InputInterface $input, OutputInterface $output): int {
     $options = $input->getOptions();

     if ($this->state->get(StaticGeneratorInterface::STATE_KEY_BUILDING, FALSE)) {
@@ @@
     if ($options['run-server']) {
       $this->runCommand($this->executable . ' tome:preview --port=' . escapeshellarg($options['port']), NULL, NULL);
     }
+    return 0;
   }

   /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * ConsoleExecuteReturnIntRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


86) modules/contrib/tome/modules/tome_static/modules/tome_static_super_cache/tome_static_super_cache.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\views\ViewEntityInterface;
 /**
  * @file
  * Contains functions for the Tome Static Super Cache module.
@@ @@
   if (empty($view_ids)) {
     return;
   }
-  /** @var \Drupal\views\ViewEntityInterface $view */
+  /** @var ViewEntityInterface $view */
   foreach ($view_storage->loadMultiple($view_ids) as $view) {
     $base_entity_type = $view->getExecutable()->getBaseEntityType();
     if (!$base_entity_type || $base_entity_type->id() !== $entity->getEntityTypeId()) {
@@ @@
  *
  * @param array $form
  *   The form array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state.
  */
 function _tome_static_super_cache_form_system_performance_settings_submit(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


87) modules/contrib/tome/modules/tome_static/modules/tome_static_super_cache/tests/src/Kernel/SuperStaticCacheTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tome_static_super_cache\Kernel;

+use Drupal\tome_static\StaticGenerator;
 use Drupal\Core\Datetime\Entity\DateFormat;
 use Drupal\node\Entity\Node;
 use Drupal\Tests\tome_base\Kernel\TestBase;
@@ @@
       'name' => '',
     ])->save();

-    /** @var \Drupal\tome_static\StaticGenerator $static */
+    /** @var StaticGenerator $static */
     $static = \Drupal::service('tome_static.generator');

     DateFormat::create([
@@ @@
       'id' => 'medium',
     ])->save();

-    /** @var \Drupal\node\Entity\Node $article */
+    /** @var Node $article */
     $article = Node::create(['type' => 'article', 'title' => 'My article']);
     $article->save();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


88) modules/contrib/tome/modules/tome_static/modules/tome_static_super_cache/tests/src/Kernel/SmartTagTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tome_static_super_cache\Kernel;

+use Drupal\tome_static\StaticGenerator;
 use Drupal\Core\Datetime\Entity\DateFormat;
 use Drupal\node\Entity\Node;
 use Drupal\Tests\tome_base\Kernel\TestBase;
@@ @@
   public function testSmartTag() {
     $this->installConfig(['tome_static_super_cache_test']);

-    /** @var \Drupal\tome_static\StaticGenerator $static */
+    /** @var StaticGenerator $static */
     $static = \Drupal::service('tome_static.generator');

     DateFormat::create([
@@ @@
       'id' => 'medium',
     ])->save();

-    /** @var \Drupal\node\Entity\Node $article */
+    /** @var Node $article */
     $article = Node::create(['type' => 'article', 'title' => 'My article']);

     drupal_static_reset('tome_static_super_cache_entity_insert');
@@ @@

     $this->assertNotContains('/test', $static->getPaths());

-    /** @var \Drupal\node\Entity\Node $article */
+    /** @var Node $article */
     $article = Node::create(['type' => 'article', 'title' => 'My other article']);
     $article->setUnpublished();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


89) modules/contrib/tome/modules/tome_static/modules/tome_static_super_cache/src/Plugin/views/cache/SmartTag.php:58

    ---------- begin diff ----------
@@ @@
   /**
    * Determines the cache tag for the given View.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   A View executable.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


90) modules/contrib/tome/modules/tome_static/modules/tome_static_super_cache/src/Commands/TomeSuperCacheRebuildCommand.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
+  protected function execute(InputInterface $input, OutputInterface $output): int {
     $GLOBALS[SuperStaticCache::FULL_REBUILD_KEY] = TRUE;
     drupal_flush_all_caches();
     $this->io()->success('Full cache rebuild complete.');
+    return 0;
   }

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * ConsoleExecuteReturnIntRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


91) modules/contrib/tome/modules/tome_static/modules/tome_static_cron/tome_static_cron.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\tome_static\StaticGeneratorInterface;
 /**
  * @file
  * Contains hook implementations for the tome_static_cron module.
@@ @@
   \Drupal::state()->set(TomeStaticQueueWorker::STATE_KEY_INVOKE_PATHS, []);
   \Drupal::state()->set(TomeStaticQueueWorker::STATE_KEY_OLD_PATHS, []);

-  /** @var \Drupal\tome_static\StaticGeneratorInterface $static */
+  /** @var StaticGeneratorInterface $static */
   $static = \Drupal::service('tome_static.generator');
   $static->cleanupStaticDirectory();
   $static->prepareStaticDirectory();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


92) modules/contrib/tome/modules/tome_static/modules/tome_static_cron/tests/src/Functional/TomeStaticCronTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tome_static_cron\Functional;

+use Drupal\tome_static\StaticGeneratorInterface;
 use Drupal\file\Entity\File;
 use Drupal\image\Entity\ImageStyle;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->createContentType([
@@ @@
    * Tests the static cron.
    */
   public function testStaticCron() {
-    /** @var \Drupal\tome_static\StaticGeneratorInterface $static */
+    /** @var StaticGeneratorInterface $static */
     $static = \Drupal::service('tome_static.generator');

     $valid_images = [];
@@ @@
     _tome_static_cron_queue_paths(['/node/' . $node->id()], 'http://google.com');

     $filename = $static->getStaticDirectory() . '/node/' . $node->id() . '/index.html';
-    $image_filename = $static->getStaticDirectory() . file_url_transform_relative(file_create_url(ImageStyle::load('large')->buildUri($file->getFileUri())));
-    $this->assertFileNotExists($filename);
-    $this->assertFileNotExists($image_filename);
+    $image_filename = $static->getStaticDirectory() . \Drupal::service('file_url_generator')->generateString(ImageStyle::load('large')->buildUri($file->getFileUri()));
+    $this->assertFileDoesNotExist($filename);
+    $this->assertFileDoesNotExist($image_filename);
     $this->cronRun();
     $this->assertFileExists($filename);
     $this->assertFileExists($image_filename);
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameMethodRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


93) modules/contrib/tome/modules/tome_static/modules/tome_static_cron/src/Plugin/QueueWorker/TomeStaticQueueWorker.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tome_static_cron\Plugin\QueueWorker;

+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Queue\QueueWorkerBase;
@@ @@
   /**
    * The static generator.
    *
-   * @var \Drupal\tome_static\StaticGeneratorInterface
+   * @var StaticGeneratorInterface
    */
   protected $static;

@@ @@
   /**
    * The request preparer.
    *
-   * @var \Drupal\tome_static\RequestPreparer
+   * @var RequestPreparer
    */
   protected $requestPreparer;

@@ @@
   /**
    * The current request, or NULL if there is no request.
    *
-   * @var null|\Symfony\Component\HttpFoundation\Request
+   * @var null|Request
    */
   protected $currentRequest;

@@ @@
   /**
    * The state system.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The logger.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\tome_static\StaticGeneratorInterface $static
+   * @param StaticGeneratorInterface $static
    *   The static generator.
-   * @param \Drupal\tome_static\RequestPreparer $request_preparer
+   * @param RequestPreparer $request_preparer
    *   The request preparer.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state system.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, StaticGeneratorInterface $static, RequestPreparer $request_preparer, RequestStack $request_stack, StateInterface $state, LoggerChannelFactoryInterface $logger_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


94) modules/contrib/tome/modules/tome_base/tests/src/Unit/ExecutableFinderTraitTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tome_base\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Tests\UnitTestCase;
 use Drupal\tome_base\ExecutableFinderTrait;
 use Symfony\Component\Console\Input\InputInterface;
@@ @@
  */
 class ExecutableFinderTraitTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * @covers \Drupal\tome_base\ExecutableFinderTrait::findExecutable
    *
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


95) modules/contrib/tome/modules/tome_base/tests/src/Kernel/TestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tome_base\Kernel;

+use Drupal\content_translation\ContentTranslationManagerInterface;
 use Drupal\Core\Site\Settings;
 use Drupal\Tests\field\Traits\EntityReferenceTestTrait;
 use Drupal\KernelTests\KernelTestBase;
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->setUpFilesystem();
@@ @@
       'name' => 'Article',
     ])->save();

-    /** @var \Drupal\content_translation\ContentTranslationManagerInterface $content_translation_manager */
+    /** @var ContentTranslationManagerInterface $content_translation_manager */
     $content_translation_manager = $this->container->get('content_translation.manager');
     $content_translation_manager->setEnabled('node', 'page', TRUE);
     $content_translation_manager->setEnabled('node', 'article', TRUE);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


96) modules/contrib/tome/modules/tome_base/src/ProcessTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tome_base;

+use Symfony\Component\Console\Style\SymfonyStyle;
 use Symfony\Component\Process\Process;

 /**
@@ @@
     $collected_errors = [];

     $retry_callback = function (&$current_process) use (&$collected_errors, $retry_count) {
-      /** @var \Symfony\Component\Process\Process $process */
+      /** @var Process $process */
       $process = $current_process['process'];
       $command = $process->getCommandLine();
       if (!$process->isRunning() && !$process->isSuccessful() && $current_process['retry'] < $retry_count) {
@@ @@
     };

     $filter_callback = function ($current_process) use (&$collected_errors, $callback) {
-      /** @var \Symfony\Component\Process\Process $process */
+      /** @var Process $process */
       $process = $current_process['process'];
       $is_running = $process->isRunning();
       $command = $process->getCommandLine();
@@ @@
   /**
    * Returns the IO decorator, for reporting errors.
    *
-   * @return \Symfony\Component\Console\Style\SymfonyStyle
+   * @return SymfonyStyle
    *   The IO decorator.
    */
   abstract public function io();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * StringToArrayArgumentProcessRector
 * WrapReturnRector


97) modules/contrib/tome/modules/tome_base/src/ExecutableFinderTrait.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Finds an executable string for the current process.
    *
-   * @param \Symfony\Component\Console\Input\InputInterface $input
+   * @param InputInterface $input
    *   The command input.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


98) modules/contrib/tome/modules/tome_base/src/CommandBase.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The IO decorator.
    *
-   * @var \Symfony\Component\Console\Style\SymfonyStyle
+   * @var SymfonyStyle
    */
   protected $io;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [WARNING] 8 nodes were removed                                                 

 [OK] 98 files have been changed by Rector                                      

