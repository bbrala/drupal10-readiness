modules/contrib/wsdl_docs/src/Services/SoapClientManager.php
modules/contrib/wsdl_docs/tests/src/Kernel/SoapClientManagerTest.php
modules/contrib/wsdl_docs/wsdl_docs.install
modules/contrib/wsdl_docs/wsdl_docs.module

2 files with changes
====================

1) modules/contrib/wsdl_docs/tests/src/Kernel/SoapClientManagerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\wsdl_docs\Kernel;

+use Drupal\Core\Session\AccountInterface;
+use Drupal\wsdl_docs\Services\SoapClientManager;
 use Drupal;
 use Drupal\Core\Entity\EntityStorageException;
 use Drupal\KernelTests\Core\Entity\EntityKernelTestBase;
@@ @@
   /**
    * Admin user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminUser;

@@ @@
   /**
    * Soap Client manager.
    *
-   * @var \Drupal\wsdl_docs\Services\SoapClientManager
+   * @var SoapClientManager
    */
   protected $soapManagerService;

@@ @@
   /**
    * Set up initial prerequisites.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installConfig(['node', 'wsdl_docs']);
     try {
@@ @@
       ]
     );
     $violations = $node->validate();
-    $this->assertEqual(count($violations), 2);
-    $this->assertEqual($violations[0]->getPropertyPath(), 'title');
-    $this->assertEqual($violations[0]->getMessage(), 'This value should not be null.');
-    $this->assertEqual($violations[1]->getPropertyPath(), 'field_wsdl_docs_source');
-    $this->assertEqual($violations[1]->getMessage(), 'This value should not be null.');
+    $this->assertEquals(count($violations), 2);
+    $this->assertEquals($violations[0]->getPropertyPath(), 'title');
+    $this->assertEquals($violations[0]->getMessage(), 'This value should not be null.');
+    $this->assertEquals($violations[1]->getPropertyPath(), 'field_wsdl_docs_source');
+    $this->assertEquals($violations[1]->getMessage(), 'This value should not be null.');
   }

   /**
@@ @@
       ]);
     // Match of no of operations with wsdl docs operation
     // nodes referencing soap service node.
-    $this->assertEqual(count($operations), count($current_operation), 'Number of operations should match with WSDL Docs operation nodes.');
+    $this->assertEquals(count($operations), count($current_operation), 'Number of operations should match with WSDL Docs operation nodes.');

     // New operations left.
     foreach ($operations as $name => $operation) {
@@ @@

       // Compare.
       $docstyle = isset($styles[$operation['label']]) ? $styles[$operation['label']] : '';
-      $this->assertEqual($current_operation->field_wsdl_docs_style->value, $docstyle, 'Input field "field_wsdl_docs_style" value should match for WSDL Docs Operation node with ' . $current_operation->label() . '.');
+      $this->assertEquals($current_operation->field_wsdl_docs_style->value, $docstyle, 'Input field "field_wsdl_docs_style" value should match for WSDL Docs Operation node with ' . $current_operation->label() . '.');

       $documentation = isset($documentations[$operation['label']]) ? $documentations[$operation['label']] : '';
-      $this->assertEqual($documentation, $current_operation->field_wsdl_docs_documentation->value, 'Input field "field_wsdl_docs_documentation" value should match for WSDL Docs Operation node with ' . $current_operation->label() . '.');
+      $this->assertEquals($documentation, $current_operation->field_wsdl_docs_documentation->value, 'Input field "field_wsdl_docs_documentation" value should match for WSDL Docs Operation node with ' . $current_operation->label() . '.');

       $output = isset($outputs[$operation['label']]) ? $outputs[$operation['label']] : '';
-      $this->assertEqual($current_operation->field_wsdl_docs_output->value, $output, 'Input field "field_wsdl_docs_output" value should match for WSDL Docs Operation node with ' . $current_operation->label() . '.');
+      $this->assertEquals($current_operation->field_wsdl_docs_output->value, $output, 'Input field "field_wsdl_docs_output" value should match for WSDL Docs Operation node with ' . $current_operation->label() . '.');

       $input = isset($inputs[$operation['label']]) ? $inputs[$operation['label']] : '';
-      $this->assertEqual($current_operation->field_wsdl_docs_input->value, $input, 'Input field "field_wsdl_docs_input" value should match for WSDL Docs Operation node with ' . $current_operation->label() . '.');
+      $this->assertEquals($current_operation->field_wsdl_docs_input->value, $input, 'Input field "field_wsdl_docs_input" value should match for WSDL Docs Operation node with ' . $current_operation->label() . '.');
     }
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/wsdl_docs/src/Services/SoapClientManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wsdl_docs\Services;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use DOMDocument;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The logger factory service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * Current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * ProductManager constructor.
    *
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   Logger factory service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   File system service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   Database connnection.
    */
   public function __construct(LoggerChannelFactoryInterface $logger_factory, EntityTypeManagerInterface $entity_type_manager, FileSystemInterface $file_system, AccountInterface $current_user, Connection $connection) {
@@ @@
   /**
    * Returns a SoapClient given a soap_service node.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   Soap service node.
    *
    * @return null|SoapClient
@@ @@
   /**
    * Returns a SOAP endpoint URI given a soap_service node.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   Soap service node.
    *
    * @return null|string
@@ @@
    * Function called during create/update of soap_service nodes to process
    * linked WSDL file into wsdl_docs_operation nodes.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   Soap Service node.
    *
    * @return bool
@@ @@
   /**
    * Create/update/delete nodes derived from WSDL.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   SOAP Service node with link to WSDL.
    * @param \DOMDocument|null $domDocument
    *   DOMDocument of the WSDL.
@@ @@
    * @return null
    *   Returns early on error.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function updateOperations(NodeInterface $node, DOMDocument $domDocument = NULL) {
     $user = $this->currentUser;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


 [OK] 2 files have been changed by Rector                                       

