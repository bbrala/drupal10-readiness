modules/contrib/dvf/dvf.api.php
modules/contrib/dvf/dvf.module
modules/contrib/dvf/dvf_ckan/dvf_ckan.module
modules/contrib/dvf/dvf_ckan/src/Plugin/Visualisation/Source/CkanResource.php
modules/contrib/dvf/dvf_csv/dvf_csv.module
modules/contrib/dvf/dvf_csv/src/Plugin/Visualisation/Source/CsvFile.php
modules/contrib/dvf/dvf_json/dvf_json.module
modules/contrib/dvf/dvf_json/src/Plugin/Visualisation/Source/JsonFile.php
modules/contrib/dvf/src/Annotation/Visualisation.php
modules/contrib/dvf/src/Annotation/VisualisationSource.php
modules/contrib/dvf/src/Annotation/VisualisationStyle.php
modules/contrib/dvf/src/ConfigurablePluginTrait.php
modules/contrib/dvf/src/Controller/DvfHelpController.php
modules/contrib/dvf/src/DvfHelpers.php
modules/contrib/dvf/src/FieldTypeTrait.php
modules/contrib/dvf/src/FieldWidgetTrait.php
modules/contrib/dvf/src/FormElementAttributesTrait.php
modules/contrib/dvf/src/Plugin/Field/FieldFormatter/VisualisationDefaultFormatter.php
modules/contrib/dvf/src/Plugin/Field/FieldType/VisualisationFileItem.php
modules/contrib/dvf/src/Plugin/Field/FieldType/VisualisationUrlItem.php
modules/contrib/dvf/src/Plugin/Field/FieldWidget/VisualisationFileWidget.php
modules/contrib/dvf/src/Plugin/Field/FieldWidget/VisualisationUrlWidget.php
modules/contrib/dvf/src/Plugin/Visualisation/Source/VisualisationSourceBase.php
modules/contrib/dvf/src/Plugin/Visualisation/Style/AxisChart.php
modules/contrib/dvf/src/Plugin/Visualisation/Style/BarChart.php
modules/contrib/dvf/src/Plugin/Visualisation/Style/BubbleChart.php
modules/contrib/dvf/src/Plugin/Visualisation/Style/DonutChart.php
modules/contrib/dvf/src/Plugin/Visualisation/Style/GaugeChart.php
modules/contrib/dvf/src/Plugin/Visualisation/Style/LineChart.php
modules/contrib/dvf/src/Plugin/Visualisation/Style/PieChart.php
modules/contrib/dvf/src/Plugin/Visualisation/Style/RadarChart.php
modules/contrib/dvf/src/Plugin/Visualisation/Style/ScatterPlotChart.php
modules/contrib/dvf/src/Plugin/Visualisation/Style/SplineChart.php
modules/contrib/dvf/src/Plugin/Visualisation/Style/Table.php
modules/contrib/dvf/src/Plugin/Visualisation/Style/TableVisualisationStyleBase.php
modules/contrib/dvf/src/Plugin/Visualisation/Style/VisualisationStyleBase.php
modules/contrib/dvf/src/Plugin/Visualisation/VisualisationBase.php
modules/contrib/dvf/src/Plugin/Visualisation/VisualisationFile.php
modules/contrib/dvf/src/Plugin/Visualisation/VisualisationUrl.php
modules/contrib/dvf/src/Plugin/VisualisationInterface.php
modules/contrib/dvf/src/Plugin/VisualisationItemInterface.php
modules/contrib/dvf/src/Plugin/VisualisationManager.php
modules/contrib/dvf/src/Plugin/VisualisationManagerInterface.php
modules/contrib/dvf/src/Plugin/VisualisationPluginManager.php
modules/contrib/dvf/src/Plugin/VisualisationPluginManagerInterface.php
modules/contrib/dvf/src/Plugin/VisualisationSourceInterface.php
modules/contrib/dvf/src/Plugin/VisualisationSourceManager.php
modules/contrib/dvf/src/Plugin/VisualisationSourceManagerInterface.php
modules/contrib/dvf/src/Plugin/VisualisationStyleInterface.php
modules/contrib/dvf/src/Plugin/VisualisationStyleManager.php
modules/contrib/dvf/src/Plugin/VisualisationStyleManagerInterface.php
modules/contrib/dvf/src/Plugin/migrate/process/CkanConvertBlob.php
modules/contrib/dvf/src/Plugin/migrate/process/CkanConvertUrl.php
modules/contrib/dvf/src/Plugin/migrate/source/CkanEntityMigration.php
modules/contrib/dvf/tests/src/Functional/DvfFieldBasicConfigTest.php
modules/contrib/dvf/tests/src/Functional/DvfFieldCreationTest.php
modules/contrib/dvf/tests/src/Functional/DvfFieldTestBase.php
modules/contrib/dvf/tests/src/Functional/Traits/DvfFieldCreationTrait.php
modules/contrib/dvf/tests/src/Functional/Traits/DvfFileTrait.php
modules/contrib/dvf/tests/src/Functional/Traits/DvfNodeTrait.php
modules/contrib/dvf/tests/src/Functional/Traits/DvfTestTrait.php
modules/contrib/dvf/tests/src/Unit/DvfHelpersTest.php

34 files with changes
=====================

1) modules/contrib/dvf/tests/src/Unit/DvfHelpersTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\dvf\Unit;

+use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\GeneratedLink;
 use Drupal\Core\Link;
 use Drupal\dvf\DvfHelpers;
@@ @@
   /**
    * The Dvf helpers class to test.
    *
-   * @var \Drupal\dvf\DvfHelpers
+   * @var DvfHelpers
    */
   protected $dvfHelpers;

@@ @@
    * Tests that "help page" link can be retrieved.
    *
    * @covers ::getHelpPageLink()
+   * @doesNotPerformAssertions
    */
   public function testGetHelpPageLink() {
     $message = 'Help page page link rendered';
@@ @@
     $base_path = '/dvf/help/';
     $expected = '<span class="dvf-admin-popup"><a href="' . $base_path . $template_name . '">Help</a> &#x29c9;</span>';

-    /** @var \Drupal\Component\Render\FormattableMarkup $output */
+    /** @var FormattableMarkup $output */
     $result = $this->dvfHelpers->getHelpPageLink($template_name);
     $output = $result->__toString();
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/dvf/tests/src/Functional/Traits/DvfTestTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\dvf\Functional\Traits;

+use Behat\Mink\Exception\ResponseTextException;
 /**
  * General trait providing helper methods for the dvf test suite.
  */
@@ @@
    * @param string $text
    *   Text to be asserted on page.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ResponseTextException
    */
   public function visitAndAssertText($page_path, $text) {
     $this->drupalGet($page_path);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/dvf/tests/src/Functional/Traits/DvfNodeTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\dvf\Functional\Traits;

+use Drupal\node\Entity\Node;
 /**
  * Trait DvfNodeTrait.
  *
@@ @@
    * @param int $nid
    *   Unique node id.
    *
-   * @return \Drupal\node\Entity\Node
+   * @return Node
    *   Returns a node entity.
    */
   public function getNodeById($nid) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/dvf/tests/src/Functional/Traits/DvfFileTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\dvf\Functional\Traits;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\File\FileSystemInterface;
 use Drupal\Core\StreamWrapper\PublicStream;
 use Drupal\file\Entity\File;

@@ @@
    *   Full path to directory.
    */
   protected function getDvfSampleDirFullPath() {
-    return \Drupal::root() . '/' . drupal_get_path('module', 'dvf') . $this->dvfSampleDirPath;
+    return \Drupal::root() . '/' . \Drupal::service('extension.list.module')->getPath('dvf') . $this->dvfSampleDirPath;
   }

   /**
@@ @@
    * @param string $sample_file_name
    *   Name of sample file to be used.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   Sample File entity.
    */
   protected function getSampleFile($sample_file_name) {
@@ @@
     $file_path = $this->getDvfSampleFilePath($sample_file_name);

     // Copy sample file to public:// directory.
-    /** @var \Drupal\Core\File\FileSystemInterface $file_system */
+    /** @var FileSystemInterface $file_system */
     $file_system = \Drupal::service('file_system');
     $file_system->copy($file_path, PublicStream::basePath());
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/dvf/tests/src/Functional/Traits/DvfFieldCreationTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\dvf\Functional\Traits;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\field\Entity\FieldConfig;

@@ @@
    * @param string $bundle
    *   The bundle that this field will be added to.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   Created field.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function createDvfFileField($field_name, array $field_settings = [], array $widget_settings = [], $entity_type = 'node', $bundle = 'page') {
     $field_storage_settings = [
@@ @@
    * @param array $widget_settings
    *   A list of widget settings that will be added to the widget defaults.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The entity interface.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function createDvfField($field_type, $field_name, $entity_type, $bundle, array $storage_settings = [], array $field_settings = [], array $widget_settings = []) {
     $field_storage = FieldStorageConfig::create([
@@ @@
    * @param array $widget_settings
    *   A list of widget settings that will be added to the widget defaults.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function attachDvfFieldToBundle($field_type, $field_name, $entity_type, $bundle, array $field_settings = [], array $widget_settings = []) {
     $field = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/dvf/tests/src/Functional/DvfFieldTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\dvf\Functional;

+use Drupal\user\Entity\User;
+use Drupal\Core\Entity\EntityStorageException;
+use Behat\Mink\Exception\ElementNotFoundException;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\dvf\Functional\Traits\DvfFileTrait;
@@ @@
   /**
    * Admin user test account.
    *
-   * @var \Drupal\user\Entity\User|bool
+   * @var User|bool
    */
   protected $adminUser;

@@ @@
   /**
    * Setup test dependencies including container and mock.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setUp(): void {
     parent::setUp();
@@ @@
    * @param string $field_name
    *   Name of dvf_file field present on node entity.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
+   * @throws ElementNotFoundException
    */
   protected function uploadSampleFileToNode($sample_file_name, $field_name) {
     $this->attachFileToDvfField(
@@ @@
    * @param string $field_name
    *   Name of (test) field to attach file to.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
+   * @throws ElementNotFoundException
    */
   protected function attachFileToDvfField($file, $field_name) {
     // Build file attachment form field name.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/dvf/tests/src/Functional/DvfFieldCreationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\dvf\Functional;

+use Behat\Mink\Exception\ElementNotFoundException;
+use Behat\Mink\Exception\ResponseTextException;
 /**
  * Functional tests for creation of dvf fields.
  *
@@ @@
    *
    * (... to an entity such as page.)
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ElementNotFoundException
+   * @throws ResponseTextException
    */
   public function testAddFieldVisualisationFile() {
     $new_field_label = 'Testing visualisation file field';
@@ @@
    *
    * (... to an entity such as page.)
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ElementNotFoundException
+   * @throws ResponseTextException
    */
   public function testAddFieldVisualisationUrl() {
     $new_field_label = 'Testing visualisation url field';
@@ @@
    * @param string $storage_type
    *   New field storage type (dvf_url or dvf_file).
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ElementNotFoundException
+   * @throws ResponseTextException
    */
   public function addNewFieldToPage($new_field_label, $new_field_name, $storage_type) {
     $page_path = 'admin/structure/types/manage/page/fields/add-field';
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/dvf/tests/src/Functional/DvfFieldBasicConfigTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\dvf\Functional;

+use Behat\Mink\Exception\ElementNotFoundException;
+use Behat\Mink\Exception\ResponseTextException;
+use Drupal\Core\Entity\EntityStorageException;
 /**
  * Class DvfFieldBasicConfigTest.
  *
@@ @@
   /**
    * Tests the configuration of a visualisation file with csv source.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
-   * @throws \Behat\Mink\Exception\ResponseTextException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ElementNotFoundException
+   * @throws ResponseTextException
+   * @throws EntityStorageException
    */
   public function testConfigureFieldVisualisationFileCsv() {
     $assert_session = $this->assertSession();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


9) modules/contrib/dvf/src/Plugin/VisualisationStyleManager.php:15

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/dvf/src/Plugin/VisualisationStyleInterface.php:16

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   The form where the settings form is being included in.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
   /**
    * Returns the current visualisation.
    *
-   * @return \Drupal\dvf\Plugin\VisualisationInterface
+   * @return VisualisationInterface
    *   Current visualisation instance.
    */
   public function getVisualisation();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/dvf/src/Plugin/VisualisationSourceManager.php:15

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/dvf/src/Plugin/VisualisationSourceInterface.php:16

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   The form where the settings form is being included in.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
   /**
    * Returns the current visualisation.
    *
-   * @return \Drupal\dvf\Plugin\VisualisationInterface
+   * @return VisualisationInterface
    *   Current visualisation instance.
    */
   public function getVisualisation();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/dvf/src/Plugin/VisualisationPluginManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\dvf\Plugin;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\PluginManagerInterface;

 /**
@@ @@
    *   The ID of the plugin being instantiated.
    * @param array $configuration
    *   An array of configuration relevant to the plugin instance.
-   * @param \Drupal\dvf\Plugin\VisualisationInterface $visualisation
+   * @param VisualisationInterface $visualisation
    *   The visualisation context in which the plugin will run.
    *
    * @return object
    *   A fully configured plugin instance.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
    */
   public function createInstance($plugin_id, array $configuration = [], VisualisationInterface $visualisation = NULL);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/dvf/src/Plugin/VisualisationPluginManager.php:19

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    * @param string $annotation
    *   (optional) The annotation class name. Defaults to
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/dvf/src/Plugin/VisualisationManager.php:17

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Instance of the logger object.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, LoggerInterface $logger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/dvf/src/Plugin/VisualisationItemInterface.php:16

    ---------- begin diff ----------
@@ @@
    * @param array $default_style
    *   The default visualisation style configuration.
    *
-   * @return \Drupal\dvf\Plugin\VisualisationInterface
+   * @return VisualisationInterface
    *   An instance of the visualisation plugin.
    */
   public function getVisualisationPlugin(array $default_source = [], array $default_style = []);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


17) modules/contrib/dvf/src/Plugin/VisualisationInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\dvf\Plugin;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
@@ @@
   /**
    * Returns the source plugin.
    *
-   * @return \Drupal\dvf\Plugin\VisualisationSourceInterface
+   * @return VisualisationSourceInterface
    *   The source plugin.
    */
   public function getSourcePlugin();
@@ @@
   /**
    * Returns the style plugin.
    *
-   * @return \Drupal\dvf\Plugin\VisualisationStyleInterface
+   * @return VisualisationStyleInterface
    *   The style plugin.
    */
   public function getStylePlugin();
@@ @@
   /**
    * Gets the entity the DVF field is attached to.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   Entity object or null if not available.
    */
   public function getEntity();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


18) modules/contrib/dvf/src/Plugin/Visualisation/VisualisationBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\dvf\Plugin\Visualisation;

+use Drupal\dvf\Plugin\VisualisationSourceInterface;
+use Drupal\dvf\Plugin\VisualisationStyleInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * The source plugin.
    *
-   * @var \Drupal\dvf\Plugin\VisualisationSourceInterface
+   * @var VisualisationSourceInterface
    */
   protected $sourcePlugin;

@@ @@
   /**
    * The style plugin.
    *
-   * @var \Drupal\dvf\Plugin\VisualisationStyleInterface
+   * @var VisualisationStyleInterface
    */
   protected $stylePlugin;

@@ @@
   /**
    * The source plugin manager.
    *
-   * @var \Drupal\dvf\Plugin\VisualisationSourceManagerInterface
+   * @var VisualisationSourceManagerInterface
    */
   protected $sourcePluginManager;

@@ @@
   /**
    * The style plugin manager.
    *
-   * @var \Drupal\dvf\Plugin\VisualisationStyleManagerInterface
+   * @var VisualisationStyleManagerInterface
    */
   protected $stylePluginManager;

@@ @@
   /**
    * Module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   public $moduleHandler;

@@ @@
   /**
    * The entity this visualisation is attached to.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;

@@ @@
   /**
    * The theme manager.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\dvf\Plugin\VisualisationSourceManagerInterface $source_plugin_manager
+   * @param VisualisationSourceManagerInterface $source_plugin_manager
    *   The source plugin manager.
-   * @param \Drupal\dvf\Plugin\VisualisationStyleManagerInterface $style_plugin_manager
+   * @param VisualisationStyleManagerInterface $style_plugin_manager
    *   The style plugin manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Instance of the module handler.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $themeManager
+   * @param ThemeManagerInterface $themeManager
    *   The theme manager.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/dvf/src/Plugin/Visualisation/Style/VisualisationStyleBase.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The visualisation.
    *
-   * @var \Drupal\dvf\Plugin\VisualisationInterface
+   * @var VisualisationInterface
    */
   protected $visualisation;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * DVF Helpers.
    *
-   * @var \Drupal\dvf\DvfHelpers
+   * @var DvfHelpers
    */
   protected $dvfHelpers;

@@ @@
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\dvf\Plugin\VisualisationInterface $visualisation
+   * @param VisualisationInterface $visualisation
    *   The visualisation context in which the plugin will run.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Instance of the logger object.
-   * @param \Drupal\dvf\DvfHelpers $dvf_helpers
+   * @param DvfHelpers $dvf_helpers
    *   The DVF helpers.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The Messenger service.
    */
   public function __construct(
@@ @@
   /**
    * Creates an instance of the plugin.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container to pull out services used in the plugin.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\dvf\Plugin\VisualisationInterface $visualisation
+   * @param VisualisationInterface $visualisation
    *   The visualisation context in which the plugin will run.
    *
    * @return static
@@ @@
    *
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/dvf/src/Plugin/Visualisation/Style/AxisChart.php:668

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   The form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   The form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function addGridLine(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function removeGridLine(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   The form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/dvf/src/Plugin/Visualisation/Source/VisualisationSourceBase.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * The visualisation.
    *
-   * @var \Drupal\dvf\Plugin\VisualisationInterface
+   * @var VisualisationInterface
    */
   protected $visualisation;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * The HTTP client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\dvf\Plugin\VisualisationInterface $visualisation
+   * @param VisualisationInterface $visualisation
    *   The visualisation context in which the plugin will run.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Instance of the logger object.
-   * @param \GuzzleHttp\Client $http_client
+   * @param Client $http_client
    *   The HTTP client.
    */
   public function __construct(
@@ @@
   /**
    * Creates an instance of the plugin.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container to pull out services used in the plugin.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\dvf\Plugin\VisualisationInterface $visualisation
+   * @param VisualisationInterface $visualisation
    *   The visualisation context in which the plugin will run.
    *
    * @return static
@@ @@
   public function getDownloadUrl() {
     $uri = $this->config('uri');
     return ('dvf_file' === $this->visualisation->getPluginId())
-      ? file_create_url($uri) : $uri;
+      ? \Drupal::service('file_url_generator')->generateAbsoluteString($uri) : $uri;
   }

   /**
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/dvf/src/Plugin/Field/FieldWidget/VisualisationUrlWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\dvf\Plugin\Field\FieldWidget;

+use Drupal\dvf\Plugin\VisualisationInterface;
+use Drupal\dvf\Plugin\VisualisationManagerInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\WidgetBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Gets the visualisation plugin.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   Array of default values for this field.
    * @param int $delta
    *   The order of this item in the array of sub-elements (0, 1, 2, etc.).
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\dvf\Plugin\VisualisationInterface
+   * @return VisualisationInterface
    *   The visualisation plugin.
    */
   protected function getVisualisationPlugin(FieldItemListInterface $items, $delta, array $form, FormStateInterface $form_state) {
     $values = $this->getFieldValue($items, $delta, $form, $form_state);

-    /** @var \Drupal\dvf\Plugin\VisualisationManagerInterface $plugin_manager */
+    /** @var VisualisationManagerInterface $plugin_manager */
     $plugin_manager = \Drupal::service('plugin.manager.visualisation');

     $plugin_id = $this->fieldDefinition->getType();
@@ @@
       $plugin_configuration['style']['options'] = $values[$delta]['options']['visualisation_style_options'];
     }

-    /** @var \Drupal\dvf\Plugin\VisualisationInterface $plugin */
+    /** @var VisualisationInterface $plugin */
     $plugin = $plugin_manager->createInstance($plugin_id, $plugin_configuration);

     return $plugin;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/dvf/src/Plugin/Field/FieldWidget/VisualisationFileWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\dvf\Plugin\Field\FieldWidget;

+use Drupal\dvf\Plugin\VisualisationInterface;
+use Drupal\dvf\Plugin\VisualisationManagerInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\WidgetBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
    *   Form element.
    * @param mixed $input
    *   Form input.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
    * @return array
@@ @@
   /**
    * Gets the visualisation plugin.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   Array of default values for this field.
    * @param int $delta
    *   The order of this item in the array of sub-elements (0, 1, 2, etc.).
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\dvf\Plugin\VisualisationInterface
+   * @return VisualisationInterface
    *   The visualisation plugin.
    */
   protected function getVisualisationPlugin(FieldItemListInterface $items, $delta, array $form, FormStateInterface $form_state) {
     $values = $this->getFieldValue($items, $delta, $form, $form_state);

-    /** @var \Drupal\dvf\Plugin\VisualisationManagerInterface $plugin_manager */
+    /** @var VisualisationManagerInterface $plugin_manager */
     $plugin_manager = \Drupal::service('plugin.manager.visualisation');

     $plugin_id = $this->fieldDefinition->getType();
@@ @@
       $plugin_configuration['style']['options'] = $values[$delta]['options']['visualisation_style_options'];
     }

-    /** @var \Drupal\dvf\Plugin\VisualisationInterface $plugin */
+    /** @var VisualisationInterface $plugin */
     $plugin = $plugin_manager->createInstance($plugin_id, $plugin_configuration);

     return $plugin;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/dvf/src/Plugin/Field/FieldFormatter/VisualisationDefaultFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\dvf\Plugin\Field\FieldFormatter;

+use Drupal\dvf\Plugin\VisualisationItemInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FormatterBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * DVF Helpers.
    *
-   * @var \Drupal\dvf\DvfHelpers
+   * @var DvfHelpers
    */
   protected $dvfHelpers;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\dvf\DvfHelpers $dvf_helpers
+   * @param DvfHelpers $dvf_helpers
    *   The DVF helpers.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, DvfHelpers $dvf_helpers) {
@@ @@
     $element = [];
     $formatter_settings = $this->getSettings();

-    /** @var \Drupal\dvf\Plugin\VisualisationItemInterface $item */
+    /** @var VisualisationItemInterface $item */
     foreach ($items as $delta => $item) {
       $visualisation_style_options = $item->getVisualisationPlugin()->getStyleConfiguration();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/dvf/src/FormElementAttributesTrait.php:50

    ---------- begin diff ----------
@@ @@
   /**
    * Get the correct parent field name within a ajax callback.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state passed in ajax callback.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


26) modules/contrib/dvf/src/FieldWidgetTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\dvf;

+use Drupal\dvf\Plugin\VisualisationStyleManagerInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Field\FieldItemListInterface;
@@ @@
   /**
    * Gets the options for a single field widget.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   Array of default values for this field.
    * @param int $delta
    *   The order of this item in the array of sub-elements (0, 1, 2, etc.).
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $key
    *   The key.
@@ @@
    *
    * @param array $form
    *   The form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
   protected function getVisualisationStyleOptions() {
     $options = [];

-    /** @var \Drupal\dvf\Plugin\VisualisationStyleManagerInterface $plugin_manager */
+    /** @var VisualisationStyleManagerInterface $plugin_manager */
     $plugin_manager = \Drupal::service('plugin.manager.visualisation.style');

     foreach ($plugin_manager->getDefinitions() as $plugin_id => $plugin) {
@@ @@
    * If values exists in form_state we assume this is more current than the
    * item so it gets preferenced.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   Array of default values for this field.
    * @param int $delta
    *   The order of this item in the array of sub-elements (0, 1, 2, etc.).
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


27) modules/contrib/dvf/src/FieldTypeTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\dvf;

+use Drupal\dvf\Plugin\VisualisationInterface;
+use Drupal\dvf\Plugin\VisualisationManagerInterface;
+use Drupal\dvf\Plugin\VisualisationSourceManagerInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
    *
    * @param array $form
    *   The form where the settings form is being included in.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the (entire) configuration form.
    *
    * @return array
@@ @@
    * @param array $default_style
    *   The default visualisation style configuration.
    *
-   * @return \Drupal\dvf\Plugin\VisualisationInterface
+   * @return VisualisationInterface
    *   An instance of the visualisation plugin.
    */
   public function getVisualisationPlugin(array $default_source = [], array $default_style = []) {
     $item = $this->getValue();

-    /** @var \Drupal\dvf\Plugin\VisualisationManagerInterface $plugin_manager */
+    /** @var VisualisationManagerInterface $plugin_manager */
     $plugin_manager = \Drupal::service('plugin.manager.visualisation');

     $plugin_id = $this->getFieldDefinition()->getType();
@@ @@
       $plugin_configuration['style'] = NestedArray::mergeDeep($plugin_configuration['style'], $default_style);
     }

-    /** @var \Drupal\dvf\Plugin\VisualisationInterface $plugin */
+    /** @var VisualisationInterface $plugin */
     $plugin = $plugin_manager->createInstance($plugin_id, $plugin_configuration);

     return $plugin;
@@ @@
    */
   protected function getVisualisationSourceOptions() {
     $plugin_options = [];
-    /** @var \Drupal\dvf\Plugin\VisualisationSourceManagerInterface $plugin_manager */
+    /** @var VisualisationSourceManagerInterface $plugin_manager */
     $plugin_manager = \Drupal::service('plugin.manager.visualisation.source');
     $plugin_definitions = $plugin_manager->getDefinitionsByType($this->getFieldDefinition()->getType());

@@ @@
    *
    * @param array $form
    *   The form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


28) modules/contrib/dvf/src/Controller/DvfHelpController.php:15

    ---------- begin diff ----------
@@ @@
    * @param string $topic
    *   The topic or help page subject to load.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   Raw response (not using site theme).
    */
   public function helpPage($topic) {

-    $dvf_path = drupal_get_path('module', 'dvf');
+    $dvf_path = \Drupal::service('extension.list.module')->getPath('dvf');
     $file_path = $dvf_path . '/templates/help/';
     $css_path = base_path() . $dvf_path . '/css/help.css';
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/dvf/src/Annotation/VisualisationStyle.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\dvf\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


30) modules/contrib/dvf/src/Annotation/VisualisationSource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\dvf\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The category.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


31) modules/contrib/dvf/dvf_json/src/Plugin/Visualisation/Source/JsonFile.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * The cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * DVF Helpers.
    *
-   * @var \Drupal\dvf\DvfHelpers
+   * @var DvfHelpers
    */
   protected $dvfHelpers;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\dvf\Plugin\VisualisationInterface $visualisation
+   * @param VisualisationInterface $visualisation
    *   The visualisation context in which the plugin will run.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Instance of the logger object.
-   * @param \GuzzleHttp\Client $http_client
+   * @param Client $http_client
    *   The HTTP client.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend.
-   * @param \Drupal\dvf\DvfHelpers $dvf_helpers
+   * @param DvfHelpers $dvf_helpers
    *   The DVF helpers.
    */
   public function __construct(
@@ @@
   /**
    * Creates an instance of the plugin.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container to pull out services used in the plugin.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\dvf\Plugin\VisualisationInterface $visualisation
+   * @param VisualisationInterface $visualisation
    *   The visualisation context in which the plugin will run.
    *
    * @return static
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/dvf/dvf_csv/src/Plugin/Visualisation/Source/CsvFile.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\dvf\Plugin\VisualisationInterface $visualisation
+   * @param VisualisationInterface $visualisation
    *   The visualisation context in which the plugin will run.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Instance of the logger object.
-   * @param \GuzzleHttp\Client $http_client
+   * @param Client $http_client
    *   The HTTP client.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend.
    */
   public function __construct(
@@ @@
   /**
    * Creates an instance of the plugin.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container to pull out services used in the plugin.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\dvf\Plugin\VisualisationInterface $visualisation
+   * @param VisualisationInterface $visualisation
    *   The visualisation context in which the plugin will run.
    *
    * @return static
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/dvf/dvf_ckan/src/Plugin/Visualisation/Source/CkanResource.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * The cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * DVF Helpers.
    *
-   * @var \Drupal\dvf\DvfHelpers
+   * @var DvfHelpers
    */
   protected $dvfHelpers;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\dvf\Plugin\VisualisationInterface $visualisation
+   * @param VisualisationInterface $visualisation
    *   The visualisation context in which the plugin will run.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Instance of the logger object.
-   * @param \GuzzleHttp\Client $http_client
+   * @param Client $http_client
    *   The HTTP client.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend.
    * @param \Drupal\ckan_connect\Client\CkanClientInterface $ckan_client
    *   The CKAN client.
    * @param \Drupal\ckan_connect\Parser\CkanResourceUrlParserInterface $ckan_resource_url_parser
    *   The CKAN resource URL parser.
-   * @param \Drupal\dvf\DvfHelpers $dvf_helpers
+   * @param DvfHelpers $dvf_helpers
    *   The DVF helpers.
    */
   public function __construct(
@@ @@
   /**
    * Creates an instance of the plugin.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container to pull out services used in the plugin.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\dvf\Plugin\VisualisationInterface $visualisation
+   * @param VisualisationInterface $visualisation
    *   The visualisation context in which the plugin will run.
    *
    * @return static
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/dvf/dvf.api.php:12

    ---------- begin diff ----------
@@ @@
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Alter the visualisation source configuration.
  *
  * @param array $configuration
  *   The configuration options.
- * @param \Drupal\dvf\Plugin\VisualisationInterface $visualisation
+ * @param VisualisationInterface $visualisation
  *   The Visualisation instance.
  */
 function hook_dvf_source_configuration_alter(array &$configuration, VisualisationInterface $visualisation) {
@@ @@
  *
  * @param array $configuration
  *   The configuration options.
- * @param \Drupal\dvf\Plugin\VisualisationInterface $visualisation
+ * @param VisualisationInterface $visualisation
  *   The Visualisation instance.
  */
 function hook_dvf_style_configuration_alter(array &$configuration, VisualisationInterface $visualisation) {
@@ @@
  *
  * @param array $build
  *   The built visualisation render array.
- * @param \Drupal\dvf\Plugin\VisualisationInterface $visualisation
+ * @param VisualisationInterface $visualisation
  *   The Visualisation instance.
  */
 function hook_dvf_visualisation_build_alter(array &$build, VisualisationInterface $visualisation) {
@@ @@
  *
  * @param array $data
  *   The parsed records from the data set.
- * @param \Drupal\dvf\Plugin\VisualisationInterface $visualisation
+ * @param VisualisationInterface $visualisation
  *   The Visualisation instance.
  */
 function hook_dvf_visualisation_data_alter(array &$data, VisualisationInterface $visualisation) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 34 files have been changed by Rector                                      

