modules/contrib/commerce_cart_redirection/commerce_cart_redirection.install
modules/contrib/commerce_cart_redirection/commerce_cart_redirection.module
modules/contrib/commerce_cart_redirection/src/EventSubscriber/CommerceCartRedirectionSubscriber.php
modules/contrib/commerce_cart_redirection/src/Form/CommerceCartRedirectionConfigForm.php
modules/contrib/commerce_cart_redirection/tests/src/Functional/LoadTest.php

3 files with changes
====================

1) modules/contrib/commerce_cart_redirection/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\commerce_cart_redirection\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/commerce_cart_redirection/src/Form/CommerceCartRedirectionConfigForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\commerce_cart_redirection\Form;

+use Drupal\Core\Form\FormBase;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfo;
 use Drupal\Core\Form\ConfigFormBase;
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;
   /**
    * Drupal\Core\Config\ConfigManagerInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigManagerInterface
+   * @var ConfigManagerInterface
    */
   protected ConfigManagerInterface $configManager;

@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeBundleInfo.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfo
+   * @var EntityTypeBundleInfo
    */
   protected EntityTypeBundleInfo $entityTypeBundleInfo;

@@ @@
   /**
    * CommerceCartRedirectionConfigForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   EntityTypeManagerInterface.
-   * @param \Drupal\Core\Config\ConfigManagerInterface $config_manager
+   * @param ConfigManagerInterface $config_manager
    *   ConfigManagerInterface.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfo $entity_type_bundle_info
+   * @param EntityTypeBundleInfo $entity_type_bundle_info
    *   EntityTypeBundleInfo.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ConfigManagerInterface $config_manager, EntityTypeBundleInfo $entity_type_bundle_info, ConfigFactoryInterface $config_factory) {
@@ @@
   }

   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *
-   * @return \Drupal\commerce_cart_redirection\Form\CommerceCartRedirectionConfigForm|\Drupal\Core\Form\FormBase
+   * @return \Drupal\commerce_cart_redirection\Form\CommerceCartRedirectionConfigForm|FormBase
    */
   public static function create(ContainerInterface $container) {
     return new static(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/commerce_cart_redirection/src/EventSubscriber/CommerceCartRedirectionSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\commerce_cart_redirection\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\commerce_cart\Event\CartEntityAddEvent;
 use Drupal\commerce_cart\Event\CartEvents;
 use Drupal\Core\Routing\RouteProviderInterface;
@@ @@
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Symfony\Component\HttpFoundation\RequestStack;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Config\ImmutableConfig;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected RequestStack $requestStack;

@@ @@
   /**
    * The route provider to load routes by name.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected RouteProviderInterface $routeProvider;

@@ @@
   /**
    * Config for the module.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected ImmutableConfig $config;

@@ @@
   /**
    * CartEventSubscriber constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
    *
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
    */
   public function __construct(RequestStack $request_stack, RouteProviderInterface $route_provider) {
@@ @@
    *
    * Redirects to the provided url if there is one.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The response event.
    *
    * @return void
    */
-  public function checkRedirectIssued(FilterResponseEvent $event) {
+  public function checkRedirectIssued(ResponseEvent $event) {
     $request = $event->getRequest();
     $redirect_url = $request->attributes->get('commerce_cart_redirection_url');
     if (isset($redirect_url)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 3 files have been changed by Rector                                       

