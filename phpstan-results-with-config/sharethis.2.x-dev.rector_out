modules/contrib/sharethis/sharethis.install
modules/contrib/sharethis/sharethis.module
modules/contrib/sharethis/sharethis.views.inc
modules/contrib/sharethis/src/Form/SharethisConfigurationForm.php
modules/contrib/sharethis/src/Plugin/Block/SharethisBlock.php
modules/contrib/sharethis/src/Plugin/Block/SharethisWidgetBlock.php
modules/contrib/sharethis/src/Plugin/views/field/SharethisNode.php
modules/contrib/sharethis/src/SharethisManager.php
modules/contrib/sharethis/src/SharethisManagerInterface.php
modules/contrib/sharethis/tests/src/Functional/ShareThisTest.php
modules/contrib/sharethis/tests/src/Functional/SharethisBlockTest.php
modules/contrib/sharethis/tests/src/Functional/SharethisConfigFormTest.php
modules/contrib/sharethis/tests/src/Functional/Views/SharethisViewsPluginTest.php

9 files with changes
====================

1) modules/contrib/sharethis/tests/src/Functional/Views/SharethisViewsPluginTest.php:66

    ---------- begin diff ----------
@@ @@
     $view = Views::getView('test_sharethis');
     $view->setDisplay('page_1');
     $this->executeView($view);
-    $this->assertEqual(count($view->result), 2);
+    $this->assertEquals(count($view->result), 2);
     $this->drupalGet('test-sharethis');
     $result = $this->xpath('//div[@class=:class]', [':class' => 'sharethis-wrapper']);
-    $this->assertEqual(count($result), 2, 'Sharethis links found');
+    $this->assertEquals(count($result), 2, 'Sharethis links found');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/sharethis/tests/src/Functional/SharethisConfigFormTest.php:54

    ---------- begin diff ----------
@@ @@
   public function testSharethisConfigForm() {
     // Test that out of range values are picked up.
     $edit['location'] = 'content';
-    $this->drupalPostForm('admin/config/services/sharethis', $edit, t('Save configuration'));
-    $this->assertText(t('The configuration options have been saved.'));
+    $this->drupalGet('admin/config/services/sharethis');
+    $this->submitForm($edit, t('Save configuration'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('The configuration options have been saved.'));
     $settings = [
       'body' => [['value' => 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam vitae arcu at leo cursus laoreet. Curabitur dui tortor, adipiscing malesuada tempor in, bibendum ac diam. Cras non tellus a libero pellentesque condimentum. What is a Drupalism? Suspendisse ac lacus libero. Ut non est vel nisl faucibus interdum nec sed leo. Pellentesque sem risus, vulputate eu semper eget, auctor in libero. Ut fermentum est vitae metus convallis scelerisque. Phasellus pellentesque rhoncus tellus, eu dignissim purus posuere id. Quisque eu fringilla ligula. Morbi ullamcorper, lorem et mattis egestas, tortor neque pretium velit, eget eleifend odio turpis eu purus. Donec vitae metus quis leo pretium tincidunt a pulvinar sem. Morbi adipiscing laoreet mauris vel placerat. Nullam elementum, nisl sit amet scelerisque malesuada, dolor nunc hendrerit quam, eu ultrices erat est in orci. Curabitur feugiat egestas nisl sed accumsan.']],
       'promote' => 1,
@@ @@
     // Render the node.
     $this->drupalGet('node/' . $node->id());
     $result = $this->xpath('//div[@class=:class]', [':class' => 'sharethis-wrapper']);
-    $this->assertEqual(count($result), 1, 'Sharethis links found');
+    $this->assertEquals(count($result), 1, 'Sharethis links found');
   }

   /**
@@ @@
     $edit['location'] = 'links';
     $edit['article_options[full]'] = 'full';
     $edit['page_options[full]'] = 'full';
+    $this->drupalGet('admin/config/services/sharethis');

-    $this->drupalPostForm('admin/config/services/sharethis', $edit, t('Save configuration'));
-    $this->assertText(t('The configuration options have been saved.'));
+    $this->submitForm($edit, t('Save configuration'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('The configuration options have been saved.'));
     $settings = [
       'body' => [['value' => 'Lorem ipsum dolor sit amet, consectetur www.drupal.org']],
       'promote' => 1,
@@ @@
     // Render the node.
     $this->drupalGet('node/' . $node->id());
     $result = $this->xpath('//div[@class=:class]', [':class' => 'sharethis-wrapper']);
-    $this->assertEqual(count($result), 1, 'Sharethis links found');
+    $this->assertEquals(count($result), 1, 'Sharethis links found');
     $result = $this->xpath('//span[@class=:class]', [':class' => 'st_facebook_button']);
-    $this->assertEqual(count($result), 1, 'Facebook button found');
+    $this->assertEquals(count($result), 1, 'Facebook button found');
     $result = $this->xpath('//span[@class=:class]', [':class' => 'st_twitter_button']);
-    $this->assertEqual(count($result), 1, 'Twitter button found');
+    $this->assertEquals(count($result), 1, 'Twitter button found');
     $result = $this->xpath('//span[@class=:class]', [':class' => 'st_linkedin_button']);
-    $this->assertEqual(count($result), 1, 'LinkedIn button found');
+    $this->assertEquals(count($result), 1, 'LinkedIn button found');
     $result = $this->xpath('//span[@class=:class]', [':class' => 'st_email_button']);
-    $this->assertEqual(count($result), 1, 'Email button found');
+    $this->assertEquals(count($result), 1, 'Email button found');
     $result = $this->xpath('//span[@class=:class]', [':class' => 'st_sharethis_button']);
-    $this->assertEqual(count($result), 1, 'Sharethis button links found');
+    $this->assertEquals(count($result), 1, 'Sharethis button links found');
     $result = $this->xpath('//span[@class=:class]', [':class' => 'st_pinterest_button']);
-    $this->assertEqual(count($result), 1, 'Pinterest button found');
+    $this->assertEquals(count($result), 1, 'Pinterest button found');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/sharethis/tests/src/Functional/SharethisBlockTest.php:42

    ---------- begin diff ----------
@@ @@
    */
   public function testSharethisBlock() {
     $edit['location'] = 'block';
-    $this->drupalPostForm('admin/config/services/sharethis', $edit, t('Save configuration'));
-    $this->assertText(t('The configuration options have been saved.'));
+    $this->drupalGet('admin/config/services/sharethis');
+    $this->submitForm($edit, t('Save configuration'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('The configuration options have been saved.'));
     // Test availability of sharethis block in the admin 'Place blocks' list.
     \Drupal::service('theme_installer')->install(['bartik', 'seven', 'stark']);
     $theme_settings = $this->config('system.theme');
@@ @@
       $block['id'] = strtolower($this->randomMachineName());
       $block['theme'] = $theme;
       $block['region'] = 'content';
-      $this->drupalPostForm('admin/structure/block/add/sharethis_block', $block, t('Save block'));
-      $this->assertText(t('The block configuration has been saved.'));
+      $this->drupalGet('admin/structure/block/add/sharethis_block');
+      $this->submitForm($block, t('Save block'));
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains(t('The block configuration has been saved.'));
       // Set the default theme and ensure the block is placed.
       $theme_settings->set('default', $theme)->save();
       $this->drupalGet('');
       $result = $this->xpath('//div[@class=:class]', [':class' => 'sharethis-wrapper']);
-      $this->assertEqual(count($result), 1, 'Sharethis links found');
+      $this->assertEquals(count($result), 1, 'Sharethis links found');
     }
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/sharethis/tests/src/Functional/ShareThisTest.php:49

    ---------- begin diff ----------
@@ @@
     $edit = [];
     $edit['title[0][value]'] = $this->randomMachineName(8);
     $edit['body[0][value]'] = $this->randomMachineName(16);
-    $this->drupalPostForm('node/add/page', $edit, t('Preview'));
-    $this->assertResponse(200);
+    $this->drupalGet('node/add/page');
+    $this->submitForm($edit, t('Preview'));
+    $this->assertSession()->statusCodeEquals(200);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/sharethis/src/SharethisManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sharethis;

+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * The config object.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The Title Resolver object.
    *
-   * @var \Drupal\Core\Controller\TitleResolverInterface
+   * @var TitleResolverInterface
    */
   protected $titleResolver;

@@ @@
   /**
    * The currently active route match object.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * The request Stack object.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $requestStack;

@@ @@
   /**
    * Constructs an SharethisManager object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The Configuration Factory.
-   * @param \Drupal\Core\Controller\TitleResolverInterface $title_resolver
+   * @param TitleResolverInterface $title_resolver
    *   The Title Resolver.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
    */
   public function __construct(ConfigFactoryInterface $config_factory, TitleResolverInterface $title_resolver, RouteMatchInterface $route_match, RequestStack $request_stack) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/sharethis/src/Plugin/views/field/SharethisNode.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sharethis\Plugin\views\field;

+use Drupal\sharethis\SharethisManager;
 use Drupal\sharethis\SharethisManagerInterface;
 use Drupal\views\ResultRow;
 use Drupal\views\Plugin\views\field\FieldPluginBase;
@@ @@
   /**
    * The Sharethis Manager.
    *
-   * @var \Drupal\sharethis\SharethisManager
+   * @var SharethisManager
    */
   protected $sharethisManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\sharethis\SharethisManagerInterface $sharethis_manager
+   * @param SharethisManagerInterface $sharethis_manager
    *   The sharethis manager service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, SharethisManagerInterface $sharethis_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/sharethis/src/Plugin/Block/SharethisWidgetBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sharethis\Plugin\Block;

+use Drupal\sharethis\SharethisManager;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Controller\TitleResolverInterface;
@@ @@
   /**
    * The config object for 'sharethis.settings'.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $sharethisSettings;

@@ @@
   /**
    * The Sharethis Manager.
    *
-   * @var \Drupal\sharethis\SharethisManager
+   * @var SharethisManager
    */
   protected $sharethisManager;

@@ @@
   /**
    * The Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $routeMatch;

@@ @@
   /**
    * The title resolver.
    *
-   * @var \Drupal\Core\Controller\TitleResolverInterface
+   * @var TitleResolverInterface
    */
   protected $titleResolver;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\Config $sharethis_settings
+   * @param Config $sharethis_settings
    *   The config object for 'sharethis.settings'.
-   * @param \Drupal\sharethis\SharethisManagerInterface $sharethis_manager
+   * @param SharethisManagerInterface $sharethis_manager
    *   The sharethis manager service.
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The Config factory.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $route_match
+   * @param CurrentRouteMatch $route_match
    *   The current route match.
-   * @param \Drupal\Core\Controller\TitleResolverInterface $title_resolver
+   * @param TitleResolverInterface $title_resolver
    *   The title resolver.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, Config $sharethis_settings, SharethisManagerInterface $sharethis_manager, ConfigFactory $config_factory, RequestStack $request_stack, CurrentRouteMatch $route_match, TitleResolverInterface $title_resolver) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/sharethis/src/Plugin/Block/SharethisBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sharethis\Plugin\Block;

+use Drupal\sharethis\SharethisManager;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Config\Config;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * The config object for 'sharethis.settings'.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $sharethisSettings;

@@ @@
   /**
    * The Sharethis Manager.
    *
-   * @var \Drupal\sharethis\SharethisManager
+   * @var SharethisManager
    */
   protected $sharethisManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\Config $sharethis_settings
+   * @param Config $sharethis_settings
    *   The config object for 'sharethis.settings'.
-   * @param \Drupal\sharethis\SharethisManagerInterface $sharethis_manager
+   * @param SharethisManagerInterface $sharethis_manager
    *   The module manager service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, Config $sharethis_settings, SharethisManagerInterface $sharethis_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/sharethis/src/Form/SharethisConfigurationForm.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The entity type Bundle Information.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The entity display Repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
   /**
    * The entity field Manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The sharethis manager.
    *
-   * @var \Drupal\sharethis\SharethisManagerInterface
+   * @var SharethisManagerInterface
    */
   protected $sharethisManager;

@@ @@
   /**
    * Constructs a \Drupal\user\SharethisConfigurationForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle information.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display Repository.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field Manager.
-   * @param \Drupal\sharethis\SharethisManagerInterface $sharethis_manager
+   * @param SharethisManagerInterface $sharethis_manager
    *   The sharethis Manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler, EntityTypeBundleInfoInterface $entity_type_bundle_info, EntityDisplayRepositoryInterface $entity_display_repository, EntityFieldManagerInterface $entity_field_manager, SharethisManagerInterface $sharethis_manager) {
@@ @@
   public function buildForm(array $form, FormStateInterface $form_state) {

     global $base_url;
-    $my_path = drupal_get_path('module', 'sharethis');
+    $my_path = \Drupal::service('extension.list.module')->getPath('sharethis');

     // First, setup variables we will need.
     // Get the path variables setup.
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 9 files have been changed by Rector                                       

