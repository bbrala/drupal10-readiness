modules/contrib/data_policy/data_policy.api.php
modules/contrib/data_policy/data_policy.install
modules/contrib/data_policy/data_policy.module
modules/contrib/data_policy/data_policy.page.inc
modules/contrib/data_policy/modules/data_policy_export/data_policy_export.install
modules/contrib/data_policy/modules/data_policy_export/data_policy_export.module
modules/contrib/data_policy/modules/data_policy_export/src/Plugin/Action/ExportDataPolicy.php
modules/contrib/data_policy/modules/data_policy_export/src/Plugin/Annotation/DataPolicyExportPlugin.php
modules/contrib/data_policy/modules/data_policy_export/src/Plugin/DataPolicyExportPluginBase.php
modules/contrib/data_policy/modules/data_policy_export/src/Plugin/DataPolicyExportPluginInterface.php
modules/contrib/data_policy/modules/data_policy_export/src/Plugin/DataPolicyExportPluginManager.php
modules/contrib/data_policy/src/Controller/DataPolicy.php
modules/contrib/data_policy/src/Controller/DataPolicyInformController.php
modules/contrib/data_policy/src/Controller/InformBlockListBuilder.php
modules/contrib/data_policy/src/DataPolicyAccessControlHandler.php
modules/contrib/data_policy/src/DataPolicyConsentManager.php
modules/contrib/data_policy/src/DataPolicyConsentManagerInterface.php
modules/contrib/data_policy/src/DataPolicyHtmlRouteProvider.php
modules/contrib/data_policy/src/DataPolicyInformAccessControlHandler.php
modules/contrib/data_policy/src/DataPolicyListBuilder.php
modules/contrib/data_policy/src/DataPolicyModuleInstaller.php
modules/contrib/data_policy/src/DataPolicyServiceProvider.php
modules/contrib/data_policy/src/DataPolicyStorage.php
modules/contrib/data_policy/src/DataPolicyStorageInterface.php
modules/contrib/data_policy/src/DataPolicyTranslationHandler.php
modules/contrib/data_policy/src/Entity/DataPolicy.php
modules/contrib/data_policy/src/Entity/DataPolicyInterface.php
modules/contrib/data_policy/src/Entity/DataPolicyViewsData.php
modules/contrib/data_policy/src/Entity/InformBlock.php
modules/contrib/data_policy/src/Entity/UserConsent.php
modules/contrib/data_policy/src/Entity/UserConsentInterface.php
modules/contrib/data_policy/src/Entity/UserConsentViewsData.php
modules/contrib/data_policy/src/Form/DataPolicyAddForm.php
modules/contrib/data_policy/src/Form/DataPolicyAgreement.php
modules/contrib/data_policy/src/Form/DataPolicyForm.php
modules/contrib/data_policy/src/Form/DataPolicyRevisionDeleteForm.php
modules/contrib/data_policy/src/Form/DataPolicyRevisionEdit.php
modules/contrib/data_policy/src/Form/DataPolicyRevisionRevertForm.php
modules/contrib/data_policy/src/Form/DataPolicyRevisionRevertTranslationForm.php
modules/contrib/data_policy/src/Form/DataPolicySettingsForm.php
modules/contrib/data_policy/src/Form/InformBlockDeleteForm.php
modules/contrib/data_policy/src/Form/InformBlockForm.php
modules/contrib/data_policy/src/InformBlockInterface.php
modules/contrib/data_policy/src/Plugin/Block/DataPolicyInformBlock.php
modules/contrib/data_policy/src/Plugin/views/field/UserConsentDataPolicyRevision.php
modules/contrib/data_policy/src/Plugin/views/field/UserConsentState.php
modules/contrib/data_policy/src/Plugin/views/filter/UserConsentDataPolicyRevision.php
modules/contrib/data_policy/src/Plugin/views/filter/UserConsentState.php
modules/contrib/data_policy/src/ProxyClass/DataPolicyModuleInstaller.php
modules/contrib/data_policy/src/RedirectSubscriber.php
modules/contrib/data_policy/src/UserConsentHtmlRouteProvider.php
modules/contrib/data_policy/src/UserConsentListBuilder.php

31 files with changes
=====================

1) modules/contrib/data_policy/src/UserConsentListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\data_policy;

+use Drupal\data_policy\Entity\UserConsentInterface;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new UserConsentListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter) {
@@ @@
    */
   public function buildRow(EntityInterface $entity) {
     $owner = $entity->getOwner();
-    /** @var \Drupal\data_policy\Entity\UserConsentInterface $entity */
+    /** @var UserConsentInterface $entity */
     return [
       'id' => $entity->id(),
       'user' => ($owner instanceof UserInterface) ? $owner->getDisplayName() : $this->t('Deleted user'),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/data_policy/src/RedirectSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\data_policy;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
+use Drupal\data_policy\Entity\DataPolicy;
+use Drupal\Core\Database\Query\SelectInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
 use Drupal\data_policy\Entity\DataPolicyInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * The current active route match object.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * The redirect destination helper.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $destination;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The Data Policy consent manager.
    *
-   * @var \Drupal\data_policy\DataPolicyConsentManagerInterface
+   * @var DataPolicyConsentManagerInterface
    */
   protected $dataPolicyConsentManager;

@@ @@
   /**
    * The module handler interface.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The database.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   public $database;

@@ @@
   /**
    * RedirectSubscriber constructor.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current active route match object.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $destination
+   * @param RedirectDestinationInterface $destination
    *   The redirect destination helper.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
-   * @param \Drupal\data_policy\DataPolicyConsentManagerInterface $data_policy_manager
+   * @param DataPolicyConsentManagerInterface $data_policy_manager
    *   The Data Policy consent manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler interface.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
    */
   public function __construct(
@@ @@
   /**
    * This method is called when the KernelEvents::REQUEST event is dispatched.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The event.
    */
-  public function checkForRedirection(GetResponseEvent $event): void {
+  public function checkForRedirection(RequestEvent $event): void {
     // Check if a data policy is set.
     if (!$this->dataPolicyConsentManager->isDataPolicy()) {
       return;
@@ @@

     $revisions = $this->dataPolicyConsentManager->getRevisionsByEntityIds($entity_ids);
     foreach ($revisions as $revision) {
-      /** @var \Drupal\data_policy\Entity\DataPolicy $revision */
+      /** @var DataPolicy $revision */
       $saved_revision_ids[] = $revision->getRevisionId();
     }

@@ @@
   /**
    * Do redirect to the agreement page.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The event.
    */
-  private function doRedirect(GetResponseEvent $event): void {
+  private function doRedirect(RequestEvent $event): void {
     // Set the destination that redirects the user after accepting the
     // data policy agreements.
     $destination = $this->getDestination();
@@ @@
   /**
    * Get the redirect destination.
    *
-   * @return \Drupal\Core\Routing\RedirectDestinationInterface
+   * @return RedirectDestinationInterface
    *   The redirect destination.
    */
   protected function getDestination(): RedirectDestinationInterface {
@@ @@
    * @param bool $return_query
    *   True if the query should re returned instead of query result.
    *
-   * @return \Drupal\Core\Database\Query\SelectInterface|array
+   * @return SelectInterface|array
    *   Active users.
    */
   private function getActiveUserRevisionData($return_query = FALSE) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/data_policy/src/ProxyClass/DataPolicyModuleInstaller.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * The service container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected $container;

@@ @@
   /**
    * Constructs a ProxyClass Drupal proxy object.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container.
    * @param string $drupal_proxy_original_service_id
    *   The service ID of the original service.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/data_policy/src/Plugin/views/filter/UserConsentDataPolicyRevision.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, Connection $connection, DateFormatterInterface $date_formatter, ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/data_policy/src/Plugin/views/field/UserConsentDataPolicyRevision.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $date_format_storage
+   * @param EntityStorageInterface $date_format_storage
    *   The date format storage.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, DateFormatterInterface $date_formatter, EntityStorageInterface $date_format_storage, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/data_policy/src/Plugin/Block/DataPolicyInformBlock.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The current path.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPath;

@@ @@
   /**
    * An alias manager to find the alias for the current system path.
    *
-   * @var \Drupal\path_alias\AliasManagerInterface
+   * @var AliasManagerInterface
    */
   protected $aliasManager;

@@ @@
   /**
    * The path matcher.
    *
-   * @var \Drupal\Core\Path\PathMatcherInterface
+   * @var PathMatcherInterface
    */
   protected $pathMatcher;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Path\CurrentPathStack $current_path
+   * @param CurrentPathStack $current_path
    *   The current path.
-   * @param \Drupal\path_alias\AliasManagerInterface $alias_manager
+   * @param AliasManagerInterface $alias_manager
    *   An alias manager to find the alias for the current system path.
-   * @param \Drupal\Core\Path\PathMatcherInterface $path_matcher
+   * @param PathMatcherInterface $path_matcher
    *   The path matcher service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, RequestStack $request_stack, CurrentPathStack $current_path, AliasManagerInterface $alias_manager, PathMatcherInterface $path_matcher, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Get entity of inform_block for current page.
    *
-   * @return \Drupal\data_policy\InformBlockInterface|null
+   * @return InformBlockInterface|null
    *   If current page has data for information block then will be returned
    *   entity else NULL.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/data_policy/src/Form/InformBlockForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs an InformBlockForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManager $entityTypeManager
+   * @param EntityTypeManager $entityTypeManager
    *   The entityTypeManager.
    */
   public function __construct(EntityTypeManager $entityTypeManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/data_policy/src/Form/DataPolicyRevisionRevertTranslationForm.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Constructs a new DataPolicyRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Data policy storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The system time.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(
@@ @@
   protected function prepareRevertedRevision(DataPolicyInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');

-    /** @var \Drupal\data_policy\Entity\DataPolicyInterface $default_revision */
+    /** @var DataPolicyInterface $default_revision */
     $latest_revision = $this->dataPolicyStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/data_policy/src/Form/DataPolicyRevisionRevertForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The Data policy revision.
    *
-   * @var \Drupal\data_policy\Entity\DataPolicyInterface
+   * @var DataPolicyInterface
    */
   protected $revision;

@@ @@
   /**
    * The Data policy storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $dataPolicyStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * Constructs a new DataPolicyRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Data policy storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, TimeInterface $time) {
@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\data_policy\Entity\DataPolicyInterface $revision
+   * @param DataPolicyInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\data_policy\Entity\DataPolicyInterface
+   * @return DataPolicyInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(DataPolicyInterface $revision, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/data_policy/src/Form/DataPolicyRevisionEdit.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The currently active request object.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a DataPolicyRevisionEdit object.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/data_policy/src/Form/DataPolicyRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\data_policy\Form;

+use Drupal\data_policy\Entity\DataPolicyInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
   /**
    * The Data policy revision.
    *
-   * @var \Drupal\data_policy\Entity\DataPolicyInterface
+   * @var DataPolicyInterface
    */
   protected $revision;

@@ @@
   /**
    * The Data policy storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $dataPolicyStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new DataPolicyRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection, DateFormatterInterface $date_formatter) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/data_policy/src/Form/DataPolicyAgreement.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\data_policy\Form;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The Data Policy consent manager.
    *
-   * @var \Drupal\data_policy\DataPolicyConsentManagerInterface
+   * @var DataPolicyConsentManagerInterface
    */
   protected $dataPolicyConsentManager;

@@ @@
   /**
    * The redirect destination helper.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $destination;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * DataPolicyAgreement constructor.
    *
-   * @param \Drupal\data_policy\DataPolicyConsentManagerInterface $data_policy_manager
+   * @param DataPolicyConsentManagerInterface $data_policy_manager
    *   The Data Policy consent manager.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $destination
+   * @param RedirectDestinationInterface $destination
    *   The redirect destination helper.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(
@@ @@
       $form_state->clearErrors();

       foreach ($errors as $id => $error) {
-        /** @var \Drupal\Core\StringTranslation\TranslatableMarkup $g */
+        /** @var TranslatableMarkup $g */
         if (strpos($id, 'data_policy') !== FALSE) {
           $name = Markup::create($error->getArguments()['@name']);
           $form_state->setErrorByName($id, $this->t('@name field is required.', ['@name' => $name]));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/data_policy/src/Form/DataPolicyAddForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * The currently active request object.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * DataPolicyAddForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/data_policy/src/Entity/UserConsentInterface.php:90

    ---------- begin diff ----------
@@ @@
   /**
    * Sets the Data policy revision author.
    *
-   * @param \Drupal\data_policy\Entity\DataPolicyInterface $data_policy
+   * @param DataPolicyInterface $data_policy
    *   The data policy entity object.
    *
    * @return \Drupal\data_policy\Entity\UserConsentInterface
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/data_policy/src/Entity/UserConsent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\data_policy\Entity;

+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityChangedTrait;
@@ @@
   /**
    * Override of the default label() function to return a human-friendly name.
    *
-   * @return \Drupal\Component\Render\MarkupInterface|string
+   * @return MarkupInterface|string
    *   Return user display name.
    */
   public function label() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/data_policy/src/Entity/DataPolicyInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\data_policy\Entity;

+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\RevisionLogInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
@@ @@
   /**
    * Gets the Data policy revision author.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity for the revision author.
    */
   public function getRevisionUser();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


17) modules/contrib/data_policy/src/DataPolicyStorageInterface.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Gets a list of Data policy revision IDs for a specific Data policy.
    *
-   * @param \Drupal\data_policy\Entity\DataPolicyInterface $entity
+   * @param DataPolicyInterface $entity
    *   The Data policy entity.
    *
    * @return int[]
@@ @@
   /**
    * Gets a list of revision IDs having a given user as Data policy author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ @@
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\data_policy\Entity\DataPolicyInterface $entity
+   * @param DataPolicyInterface $entity
    *   The Data policy entity.
    *
    * @return int
@@ @@
   /**
    * Unsets the language for all Data policy with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


18) modules/contrib/data_policy/src/DataPolicyModuleInstaller.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The data policy storage.
    *
-   * @var \Drupal\data_policy\DataPolicyStorageInterface
+   * @var DataPolicyStorageInterface
    */
   protected $storage;

@@ @@
    *
    * @param string $root
    *   The app root.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\DrupalKernelInterface $kernel
+   * @param DrupalKernelInterface $kernel
    *   The drupal kernel.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Update\UpdateHookRegistry|null $update_registry
+   * @param UpdateHookRegistry|null $update_registry
    *   (Optional) The update registry service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct($root, ModuleHandlerInterface $module_handler, DrupalKernelInterface $kernel, Connection $connection, UpdateHookRegistry $update_registry, EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/data_policy/src/DataPolicyListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\data_policy;

+use Drupal\data_policy\Entity\DataPolicyInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Link;
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\data_policy\Entity\DataPolicyInterface $entity */
+    /** @var DataPolicyInterface $entity */
     $row['name'] = Link::createFromRoute($entity->label(), 'entity.data_policy.revision', [
       'entity_id' => $entity->id(),
       'data_policy_revision' => $entity->getRevisionId(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/data_policy/src/DataPolicyHtmlRouteProvider.php:51

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision edit route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionEditRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/data_policy/src/DataPolicyConsentManager.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The data policy entity.
    *
-   * @var \Drupal\data_policy\Entity\DataPolicyInterface
+   * @var DataPolicyInterface
    */
   protected $entity;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * Constructs a new GDPR Consent Manager service.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
    */
   public function __construct(
@@ @@
     ];

     foreach ($links as $entity_id => $link) {
-      /** @var \Drupal\Core\Link $link */
+      /** @var Link $link */
       $data = [];
       foreach ($items as $item) {
         if (strpos($item, "[id:{$entity_id}") !== FALSE) {
@@ @@
         'status' => TRUE,
       ]);

-    /** @var \Drupal\data_policy\DataPolicyStorageInterface $data_policy_storage */
+    /** @var DataPolicyStorageInterface $data_policy_storage */
     $data_policy_storage = $this->entityTypeManager->getStorage('data_policy');
     // Existing states for the current user.
     $existing_states = array_map(function (UserConsentInterface $user_consent) {
@@ @@

         // Create new "user_consent" entities with active revision from
         // user consent text in the settings tab.
-        /** @var \Drupal\data_policy\Entity\DataPolicyInterface $data_policy */
+        /** @var DataPolicyInterface $data_policy */
         $data_policy = $data_policy_storage->load($value['entity_id']);
         $is_required = $this->isRequiredEntity($value['entity_id']);
         $this->createUserConsent($data_policy, $user_id, $state, $is_required);
@@ @@

           // Create new ones, those that were previously agreed - skip.
           foreach (array_diff($revision_ids_from_consent_text, array_flip($confirmed)) as $revision_id) {
-            /** @var \Drupal\data_policy\Entity\DataPolicyInterface $data_policy */
+            /** @var DataPolicyInterface $data_policy */
             $data_policy = $data_policy_storage->loadRevision($revision_id);
             $is_required = $this->isRequiredEntity($data_policy->id());
             $this->createUserConsent($data_policy, $user_id, $state, $is_required);
@@ @@
       }

       foreach ($entities as $entity) {
-        /** @var \Drupal\data_policy\Entity\DataPolicyInterface $data_policy */
+        /** @var DataPolicyInterface $data_policy */
         $data_policy = $data_policy_storage->load($entity);
         $is_required = $this->isRequiredEntity($entity);
         $this->createUserConsent($data_policy, $user_id, $state, $is_required);
@@ @@
   /**
    * Create the user_consent entity.
    *
-   * @param \Drupal\data_policy\Entity\DataPolicyInterface $data_policy
+   * @param DataPolicyInterface $data_policy
    *   The data policy entity.
    * @param int $user_id
    *   The user id.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


22) modules/contrib/data_policy/src/Controller/DataPolicyInformController.php:45

    ---------- begin diff ----------
@@ @@
    * @param string $informblock
    *   The 'informblock' entity ID.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   The access result.
    */
   public function access($informblock) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/data_policy/src/Controller/DataPolicy.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\data_policy\Controller;

+use Drupal\Core\Datetime\DateFormatter;
+use Drupal\Core\Render\Renderer;
+use Drupal\data_policy\Entity\DataPolicyInterface;
+use Drupal\data_policy\DataPolicyStorageInterface;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Access\AccessResult;
@@ @@
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;

@@ @@
   /**
    * The Data Policy consent manager.
    *
-   * @var \Drupal\data_policy\DataPolicyConsentManagerInterface
+   * @var DataPolicyConsentManagerInterface
    */
   protected $dataPolicyConsentManager;

@@ @@
   /**
    * The currently active request object.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * DataPolicy constructor.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\data_policy\DataPolicyConsentManagerInterface $data_policy_consent_manager
+   * @param DataPolicyConsentManagerInterface $data_policy_consent_manager
    *   The Data Policy consent manager.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    */
   public function __construct(
@@ @@
     $links = [];

     foreach ($entity_ids as $entity_id) {
-      /** @var \Drupal\data_policy\Entity\DataPolicyInterface $entity */
+      /** @var DataPolicyInterface $entity */
       $entity = $this->entityTypeManager()->getStorage('data_policy')->load($entity_id);
       // Get translation for the current language.
       $entity = $this->entityRepository->getTranslationFromContext($entity);
@@ @@
   /**
    * Check if data policy is created.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   The access result.
    */
   public function entityOverviewAccess() {
@@ @@
       return $build;
     }

-    /** @var \Drupal\data_policy\DataPolicyStorageInterface $data_policy_storage */
+    /** @var DataPolicyStorageInterface $data_policy_storage */
     $data_policy_storage = $this->entityTypeManager()->getStorage('data_policy');

-    /** @var \Drupal\data_policy\Entity\DataPolicyInterface $data_policy */
+    /** @var DataPolicyInterface $data_policy */
     $data_policy = $data_policy_storage->load($entity_id);

     $account = $this->currentUser();
@@ @@
     $vids = $data_policy_storage->revisionIds($data_policy);

     foreach (array_reverse($vids) as $vid) {
-      /** @var \Drupal\data_policy\Entity\DataPolicyInterface $revision */
+      /** @var DataPolicyInterface $revision */
       $revision = $data_policy_storage->loadRevision($vid);

       // Only show revisions that are affected by the language that is being
@@ @@
   /**
    * Check access to agreement page.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   Allow to open page when a user was not give consent on a current version
    *   of data policy.
    */
@@ @@
    * @param int $data_policy_revision
    *   The data policy revision ID.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   Allow editing revision if it never been active.
    */
   public function revisionEditAccess($data_policy_revision) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/data_policy/modules/data_policy_export/src/Plugin/DataPolicyExportPluginManager.php:17

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/data_policy/modules/data_policy_export/src/Plugin/DataPolicyExportPluginInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\data_policy_export\Plugin;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\data_policy\Entity\DataPolicyInterface;

@@ @@
   /**
    * Returns the header.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup|string
+   * @return TranslatableMarkup|string
    *   The header.
    */
   public function getHeader();
@@ @@
   /**
    * Returns the value.
    *
-   * @param \Drupal\data_policy\Entity\DataPolicyInterface $entity
+   * @param DataPolicyInterface $entity
    *   The Data Policy entity to get the value from.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


26) modules/contrib/data_policy/modules/data_policy_export/src/Plugin/DataPolicyExportPluginBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\data_policy_export\Plugin;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Datetime\DateFormatterInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   public $entityTypeManager;

@@ @@
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   public $dateFormatter;

@@ @@
   /**
    * The database.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   public $database;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, DateFormatterInterface $date_formatter, Connection $database) {
@@ @@
   /**
    * The create method.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   Container interface.
    * @param array $configuration
    *   An array of configuration.
@@ @@
    * @param mixed $plugin_definition
    *   The plugin definition.
    *
-   * @return \Drupal\Core\Plugin\ContainerFactoryPluginInterface|\Drupal\data_policy_export\Plugin\DataPolicyExportPluginBase
+   * @return ContainerFactoryPluginInterface|\Drupal\data_policy_export\Plugin\DataPolicyExportPluginBase
    *   Returns the DataPolicyExportPluginBase.
    */
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
@@ @@
   /**
    * Returns the header.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup|string
+   * @return TranslatableMarkup|string
    *   The header.
    */
   public function getHeader() {
@@ @@
   /**
    * Returns the value.
    *
-   * @param \Drupal\data_policy\Entity\DataPolicyInterface $entity
+   * @param DataPolicyInterface $entity
    *   The Data Policy entity to get the value from.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/data_policy/modules/data_policy_export/src/Plugin/Annotation/DataPolicyExportPlugin.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\data_policy_export\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


28) modules/contrib/data_policy/modules/data_policy_export/data_policy_export.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\file\FileInterface;
 /**
  * @file
  * The Data Policy Export module.
@@ @@
   $query->condition('uri', $uri);
   $fid = $query->execute();

-  /** @var \Drupal\file\FileInterface $file */
+  /** @var FileInterface $file */
   $file = File::load(reset($fid));

   $access = FALSE;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


29) modules/contrib/data_policy/data_policy.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\data_policy\DataPolicyConsentManagerInterface;
+use Drupal\data_policy\DataPolicyConsentManager;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 /**
  * @file
  * data_policy.module
@@ @@
  * Implements hook_form_FORM_ID_alter().
  */
 function data_policy_form_user_register_form_alter(&$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\data_policy\DataPolicyConsentManagerInterface $data_policy_manager */
+  /** @var DataPolicyConsentManagerInterface $data_policy_manager */
   $data_policy_manager = \Drupal::service('data_policy.manager');

   if (!$data_policy_manager->isDataPolicy()) {
@@ @@
  *
  * @param array $form
  *   An associative array containing the structure of the form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current state of the form.
  */
 function _data_policy_user_register_form_submit(array &$form, FormStateInterface $form_state) {
-  /** @var \Drupal\data_policy\DataPolicyConsentManager $data_policy_manager */
+  /** @var DataPolicyConsentManager $data_policy_manager */
   $data_policy_manager = \Drupal::service('data_policy.manager');
   $values = $form_state->getValue('data_policy');

@@ @@
  *
  * @param array $form
  *   An associative array containing the structure of the form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current state of the form.
  */
 function _data_policy_user_register_form_validate(array &$form, FormStateInterface $form_state) {
@@ @@
     $form_state->clearErrors();

     foreach ($errors as $id => $error) {
-      /** @var \Drupal\Core\StringTranslation\TranslatableMarkup $g */
+      /** @var TranslatableMarkup $g */
       if (strpos($id, 'data_policy') !== FALSE) {
         $name = Markup::create($error->getArguments()['@name']);
         $form_state->setErrorByName($id, t('@name field is required.', ['@name' => $name]));
@@ @@
   if (isset($variables['message_list']['error'])) {
     $error_messages = $variables['message_list']['error'];
     foreach ($error_messages as $delta => $message) {
-      /** @var \Drupal\Core\Render\Markup $message */
+      /** @var Markup $message */
       if (strpos((string) $message, '<a href="#edit-data-policy-data-policy-') !== FALSE) {
         $variables['message_list']['error'][$delta] = Markup::create(html_entity_decode((string) $message));
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


30) modules/contrib/data_policy/data_policy.install:24

    ---------- begin diff ----------
@@ @@
  * Implements hook_uninstall().
  */
 function data_policy_uninstall() {
-  /** @var \Drupal\data_policy\Entity\DataPolicyInterface $data_policy */
+  /** @var DataPolicyInterface $data_policy */
   foreach (DataPolicy::loadMultiple() as $data_policy) {
     $data_policy->delete();
   }
@@ @@
 function data_policy_update_8004() {
   $name = 'views.view.data_policy_agreements';

-  $install_source = drupal_get_path('module', 'data_policy') . '/config/install';
+  $install_source = \Drupal::service('extension.list.module')->getPath('data_policy') . '/config/install';
   $source = new FileStorage($install_source);
   $config_storage = \Drupal::service('config.storage');
   $config_storage->write($name, $source->read($name));
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


31) modules/contrib/data_policy/data_policy.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Session\AccountProxyInterface;
+use Drupal\Core\Routing\RedirectDestinationInterface;
 /**
  * @file
  * Documentation for Data Policy API.
  */
-
 /**
  * Alter the data policy destination before performing the redirect.
  *
- * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+ * @param AccountProxyInterface $current_user
  *   The current user.
- * @param \Drupal\Core\Routing\RedirectDestinationInterface $destination
+ * @param RedirectDestinationInterface $destination
  *   The original destination parameter.
  *
- * @return \Drupal\Core\Routing\RedirectDestinationInterface
+ * @return RedirectDestinationInterface
  *   An altered data policy destination url.
  */
-function hook_data_policy_destination_alter(\Drupal\Core\Session\AccountProxyInterface $current_user, \Drupal\Core\Routing\RedirectDestinationInterface $destination) {
+function hook_data_policy_destination_alter(AccountProxyInterface $current_user, RedirectDestinationInterface $destination) {
   if ($current_user->isAnonymous()) {
     $destination->set('/user/login');
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/data_policy/modules/data_policy_export/src/Plugin/Action
         /ExportDataPolicy.php" file, due to:                                   
         "Analyze error: "Class                                                 
         Drupal\views_bulk_operations\Action\ViewsBulkOperationsActionBase not  
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

