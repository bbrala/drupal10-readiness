modules/contrib/dashboards/dashboards.install
modules/contrib/dashboards/dashboards.module
modules/contrib/dashboards/modules/dashboards_comments/src/Plugin/Dashboard/Comments.php
modules/contrib/dashboards/modules/dashboards_matomo/src/Plugin/Dashboard/Browser.php
modules/contrib/dashboards/modules/dashboards_matomo/src/Plugin/Dashboard/Country.php
modules/contrib/dashboards/modules/dashboards_matomo/src/Plugin/Dashboard/MatomoBase.php
modules/contrib/dashboards/modules/dashboards_matomo/src/Plugin/Dashboard/OsVersion.php
modules/contrib/dashboards/modules/dashboards_matomo/src/Plugin/Dashboard/TopUrls.php
modules/contrib/dashboards/modules/dashboards_matomo/src/Plugin/Dashboard/VisitStatistic.php
modules/contrib/dashboards/modules/dashboards_statistic/src/Plugin/Dashboard/MostReaded.php
modules/contrib/dashboards/modules/dashboards_webform/src/Plugin/Dashboard/Submissions.php
modules/contrib/dashboards/src/Annotation/Dashboard.php
modules/contrib/dashboards/src/DashboardsPermissions.php
modules/contrib/dashboards/src/Entity/Dashboard.php
modules/contrib/dashboards/src/Entity/DashboardAccessControlHandler.php
modules/contrib/dashboards/src/Entity/DashboardListBuilder.php
modules/contrib/dashboards/src/Entity/DashboardStorage.php
modules/contrib/dashboards/src/Entity/DashboardViewBuilder.php
modules/contrib/dashboards/src/EventSubscriber/BlockComponentPreviewFormReplace.php
modules/contrib/dashboards/src/Form/DashboardDeleteForm.php
modules/contrib/dashboards/src/Form/DashboardForm.php
modules/contrib/dashboards/src/Form/DashboardLayoutBuilderForm.php
modules/contrib/dashboards/src/Form/DashboardsSettingsForm.php
modules/contrib/dashboards/src/Layouts/SectionLayout.php
modules/contrib/dashboards/src/Plugin/Block/DashboardBlock.php
modules/contrib/dashboards/src/Plugin/Dashboard/Account.php
modules/contrib/dashboards/src/Plugin/Dashboard/AddContentMenu.php
modules/contrib/dashboards/src/Plugin/Dashboard/ChartTrait.php
modules/contrib/dashboards/src/Plugin/Dashboard/NodeStatistics.php
modules/contrib/dashboards/src/Plugin/Dashboard/RssNews.php
modules/contrib/dashboards/src/Plugin/Dashboard/ViewEmbed.php
modules/contrib/dashboards/src/Plugin/DashboardBase.php
modules/contrib/dashboards/src/Plugin/DashboardInterface.php
modules/contrib/dashboards/src/Plugin/DashboardLazyBuildBase.php
modules/contrib/dashboards/src/Plugin/DashboardLazyBuildInterface.php
modules/contrib/dashboards/src/Plugin/DashboardManager.php
modules/contrib/dashboards/src/Plugin/Derivative/DashboardBlock.php
modules/contrib/dashboards/src/Plugin/SectionStorage/DashboardSectionStorage.php
modules/contrib/dashboards/src/Plugin/SectionStorage/UserDashboardSectionStorage.php
modules/contrib/dashboards/src/Theme/ThemeNegotiator.php

29 files with changes
=====================

1) modules/contrib/dashboards/src/Theme/ThemeNegotiator.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Theme manager.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $user;

@@ @@
   /**
    * Service constructor.
    *
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $theme_manager
+   * @param ThemeManagerInterface $theme_manager
    *   The theme manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \Drupal\Core\Session\AccountInterface $currentUser
+   * @param AccountInterface $currentUser
    *   The current user.
    */
   public function __construct(ThemeManagerInterface $theme_manager, ConfigFactoryInterface $configFactory, AccountInterface $currentUser) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


2) modules/contrib/dashboards/src/Plugin/SectionStorage/UserDashboardSectionStorage.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * UserDataInterface definition.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;

@@ @@

     $id = !empty($value) ? $value : (!empty($defaults['dashboard']) ? $defaults['dashboard'] : NULL);
     /**
-     * @var \Drupal\dashboards\Entity\Dashboard $entity
+     * @var Dashboard $entity
      */
     if ($id && ($entity = $this->entityTypeManager->getStorage('dashboard')->load($id))) {
       if ($entity->isOverriden()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/dashboards/src/Plugin/SectionStorage/DashboardSectionStorage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\dashboards\Plugin\SectionStorage;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Url;
 use Drupal\Core\Access\AccessResult;
 use Drupal\dashboards\Entity\Dashboard;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityBundleInfo;

@@ @@
   /**
    * The sample entity generator.
    *
-   * @var \Drupal\layout_builder\Entity\SampleEntityGeneratorInterface
+   * @var SampleEntityGeneratorInterface
    */
   protected $sampleEntityGenerator;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;

@@ @@
   /**
    * Gets the dashboard entity.
    *
-   * @return \Drupal\dashboards\Entity\Dashboard
+   * @return Dashboard
    *   Dashboard entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function getDashboard() {
     return $this->getContextValue(Dashboard::CONTEXT_TYPE);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/dashboards/src/Plugin/Derivative/DashboardBlock.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $manager;

@@ @@
   /**
    * Constructs new DashboardBlock.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $plugin_manager
+   * @param PluginManagerInterface $plugin_manager
    *   The entity type manager.
    */
   public function __construct(PluginManagerInterface $plugin_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/dashboards/src/Plugin/DashboardManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/dashboards/src/Plugin/DashboardLazyBuildInterface.php:9

    ---------- begin diff ----------
@@ @@
   /**
    * Callback for lazy build.
    *
-   * @param \Drupal\dashboards\Plugin\DashboardBase $plugin
+   * @param DashboardBase $plugin
    *   Plugin.
    * @param array $configuration
    *   Configuration.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/dashboards/src/Plugin/DashboardBase.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * Cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
    *
    * @param array $form
    *   Default form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Default form.
    * @param array $configuration
    *   Configuration.
@@ @@
    *
    * @param array $form
    *   Default form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Default form.
    * @param array $configuration
    *   Configuration.
@@ @@
    *
    * @param array $form
    *   Default form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Default form.
    * @param array $configuration
    *   Configuration.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/dashboards/src/Plugin/Dashboard/ViewEmbed.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * Entity query.
    *
-   * @var \Drupal\Core\Entity\Query\QueryInterface
+   * @var QueryInterface
    */
   protected $entityQuery;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/dashboards/src/Plugin/Dashboard/RssNews.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\dashboards\Plugin\Dashboard;

+use Drupal\Core\StringTranslation\TranslationManager;
 use Drupal\Core\Url;
 use Zend\Feed\Reader\Reader;
 use Drupal\Core\Datetime\DrupalDateTime;
@@ @@
   /**
    * Lazy builder callback.
    *
-   * @param \Drupal\dashboards\Plugin\DashboardBase $plugin
+   * @param DashboardBase $plugin
    *   Plugin id.
    * @param array $configuration
    *   Plugin configuration.
@@ @@
     $url = $configuration['uri'];
     $max_items = $configuration['max_items'];
     $show_description = $configuration['show_description'];
-    /** @var \Drupal\Core\StringTranslation\TranslationManager $translation_manager */
+    /** @var TranslationManager $translation_manager */
     $translation_manager = \Drupal::service('string_translation');

     try {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/dashboards/src/Plugin/Dashboard/NodeStatistics.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * Entity query.
    *
-   * @var \Drupal\Core\Entity\Query\QueryInterface
+   * @var QueryInterface
    */
   protected $entityQuery;

@@ @@
   /**
    * Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeInfo;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/dashboards/src/Plugin/Dashboard/AddContentMenu.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * AccountInterface definition.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;

@@ @@
   /**
    * Entity bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInfo;

@@ @@
   /**
    * EntityTypeManagerInterface.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/dashboards/src/Plugin/Dashboard/Account.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * AccountInterface definition.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;

@@ @@
   /**
    * Entity query for entity views displays.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
   /**
    * EntityTypeManagerInterface.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/dashboards/src/Plugin/Block/DashboardBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\dashboards\Plugin\Block;

+use Drupal\dashboards\Plugin\DashboardBase;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Block\BlockPluginInterface;
@@ @@
   /**
    * Base plugin.
    *
-   * @var \Drupal\dashboards\Plugin\DashboardBase
+   * @var DashboardBase
    */
   protected $basePlugin;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/dashboards/src/Form/DashboardLayoutBuilderForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\dashboards\Form;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Routing\TrustedRedirectResponse;
@@ @@
   /**
    * Dashboard settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * LayoutBuiolder Tempstore.
    *
-   * @var \Drupal\layout_builder\LayoutTempstoreRepositoryInterface
+   * @var LayoutTempstoreRepositoryInterface
    */
   protected $layoutTempstoreRepository;

@@ @@
   /**
    * Section storage.
    *
-   * @var \Drupal\layout_builder\SectionStorageInterface
+   * @var SectionStorageInterface
    */
   protected $sectionStorage;

@@ @@
   /**
    * User data interface.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;

@@ @@
   /**
    * Current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;

@@ @@
    *
    * @param array $form
    *   Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    */
   public function resetToDefault(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\dashboards\Entity\Dashboard $dashboard */
+    /** @var Dashboard $dashboard */
     $dashboard = $this->sectionStorage->getContextValue(Dashboard::CONTEXT_TYPE);

     // Delete the userdata containing the dashboard override.
@@ @@
   /**
    * Retrieves the section storage object.
    *
-   * @return \Drupal\layout_builder\SectionStorageInterface
+   * @return SectionStorageInterface
    *   The section storage for the current form.
    */
   public function getSectionStorage() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/dashboards/src/EventSubscriber/BlockComponentPreviewFormReplace.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The core renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * Creates a BlockComponentRenderArray object.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The core renderer service.
    */
   public function __construct(RendererInterface $renderer) {
@@ @@
   /**
    * Change forms to divs if in layout builder's preview mode.
    *
-   * @param \Drupal\layout_builder\Event\SectionComponentBuildRenderArrayEvent $event
+   * @param SectionComponentBuildRenderArrayEvent $event
    *   The section component render event.
    */
   public function onBuildRender(SectionComponentBuildRenderArrayEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/dashboards/src/Entity/DashboardViewBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\dashboards\Entity;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\layout_builder\SectionStorage\SectionStorageManager;
 use Drupal\Component\Plugin\Exception\ContextException;
 use Drupal\Core\Theme\Registry;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * Dashboard settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * Section storage handler.
    *
-   * @var \Drupal\layout_builder\SectionStorage\SectionStorageManager
+   * @var SectionStorageManager
    */
   protected $sectionStorageManager;

@@ @@
   /**
    * Module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructs a new EntityViewBuilder.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Theme\Registry $theme_registry
+   * @param Registry $theme_registry
    *   The theme registry.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
-   * @param \Drupal\layout_builder\SectionStorage\SectionStorageManagerInterface $section_storage_manager
+   * @param SectionStorageManagerInterface $section_storage_manager
    *   Section storage handler.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Module handler interface.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Module config factory interface.
    */
   public function __construct(
@@ @@
   /**
    * View entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity to display.
    * @param string $view_mode
    *   View mode.
@@ @@
    */
   public function view(EntityInterface $entity, $view_mode = 'full', $langcode = NULL) {
     /**
-     * @var \Drupal\dashboards\Entity\Dashboard $entity
+     * @var Dashboard $entity
      */
     $build_list = $this->viewMultiple([$entity], $view_mode, $langcode);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/dashboards/src/Entity/DashboardStorage.php:31

    ---------- begin diff ----------
@@ @@

     /**
      * @var integer $delta
-     * @var \Drupal\layout_builder\Section $section
+     * @var Section $section
      */
     foreach ($record['sections'] as $delta => $section) {
       $record['sections'][$delta] = $section->toArray();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/dashboards/src/Entity/Dashboard.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\dashboards\Entity;

+use Drupal\user\UserDataInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\layout_builder\Section;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * Section.
    *
-   * @var \Drupal\layout_builder\Section[]
+   * @var Section[]
    */
   public $sections = [];

@@ @@
   /**
    * Gets the layout sections.
    *
-   * @return \Drupal\layout_builder\Section[]
+   * @return Section[]
    *   A sequentially and numerically keyed array of section objects.
    */
   public function getSections() {
@@ @@
    * Implementations of this method are expected to call array_values() to rekey
    * the list of sections.
    *
-   * @param \Drupal\layout_builder\Section[] $sections
+   * @param Section[] $sections
    *   An array of section objects.
    *
    * @return $this
@@ @@
    */
   public static function preDelete(EntityStorageInterface $storage, array $entities) {
     /**
-     * @var \Drupal\user\UserDataInterface
+     * @var UserDataInterface
      */
     $userData = \Drupal::service('user.data');
     foreach ($entities as $entity) {
@@ @@
   /**
    * Check if is overriden.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Account to check.
    *
    * @return bool
@@ @@
       $account = \Drupal::currentUser();
     }
     /**
-     * @var \Drupal\user\UserDataInterface
+     * @var UserDataInterface
      */
     $dataService = \Drupal::service('user.data');
     $data = $dataService->get('dashboards', $account->id(), $this->id());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/dashboards/src/DashboardsPermissions.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\dashboards;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityManager;

@@ @@
   /**
    * Constructs a DashboardsPermissions instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager) {
@@ @@
    * @return array
    *   An array of permissions.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function permissions(): array {
     $permissions = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


20) modules/contrib/dashboards/src/Annotation/Dashboard.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\dashboards\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * Category of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


21) modules/contrib/dashboards/modules/dashboards_webform/src/Plugin/Dashboard/Submissions.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * Database.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/dashboards/modules/dashboards_statistic/src/Plugin/Dashboard/MostReaded.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeInfo;

@@ @@
   /**
    * Module Handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Database.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/dashboards/modules/dashboards_matomo/src/Plugin/Dashboard/VisitStatistic.php:51

    ---------- begin diff ----------
@@ @@
   /**
    * Lazy build callback.
    *
-   * @param \Drupal\dashboards\Plugin\DashboardBase $plugin
+   * @param DashboardBase $plugin
    *   Matomo base plugin.
    * @param array $configuration
    *   Configuration.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/dashboards/modules/dashboards_matomo/src/Plugin/Dashboard/TopUrls.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * Lazy build callback.
    *
-   * @param \Drupal\dashboards\Plugin\DashboardBase $plugin
+   * @param DashboardBase $plugin
    *   Matomo base plugin.
    * @param array $configuration
    *   Configuration.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/dashboards/modules/dashboards_matomo/src/Plugin/Dashboard/OsVersion.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Lazy build callback.
    *
-   * @param \Drupal\dashboards\Plugin\DashboardBase $plugin
+   * @param DashboardBase $plugin
    *   Matomo base plugin.
    * @param array $configuration
    *   Configuration.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/dashboards/modules/dashboards_matomo/src/Plugin/Dashboard/Browser.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Lazy build callback.
    *
-   * @param \Drupal\dashboards\Plugin\DashboardBase $plugin
+   * @param DashboardBase $plugin
    *   Matomo base plugin.
    * @param array $configuration
    *   Configuration.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/dashboards/modules/dashboards_comments/src/Plugin/Dashboard/Comments.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeInfo;

@@ @@
   /**
    * Module Handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Database.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/dashboards/dashboards.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\dashboards\Entity\DashboardStorage;
 /**
  * @file
  * Contains dashboards.module.
@@ @@
   $entityTypeManager = \Drupal::entityTypeManager();

   /**
-   * @var \Drupal\dashboards\Entity\DashboardStorage
+   * @var DashboardStorage
    */
   $storage = $entityTypeManager->getStorage('dashboard');
   $boards = $storage->loadMultipleOrderedByWeight();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


29) modules/contrib/dashboards/dashboards.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\user\UserDataInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 /**
  * @file
  * Install, update, and uninstall functions for dashboards.module.
  */
-
 /**
  * Implements hook_uninstall().
  */
 function dashboards_uninstall() {
-  /** @var \Drupal\user\UserDataInterface $userData */
+  /** @var UserDataInterface $userData */
   $userData = \Drupal::service('user.data');
   $userData->delete('dashboards');

-  /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $manager */
+  /** @var EntityTypeManagerInterface $manager */
   $manager = \Drupal::service('entity_type.manager');
   $boards = $manager->getStorage('dashboard')->loadMultiple();
   $manager->getStorage('dashboard')->delete($boards);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 29 files have been changed by Rector                                      

