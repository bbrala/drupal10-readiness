diff --git a/modules/dbxschema_mysql/dbxschema_mysql.install b/modules/dbxschema_mysql/dbxschema_mysql.install
index a1b4af9..f879229 100644
--- a/modules/dbxschema_mysql/dbxschema_mysql.install
+++ b/modules/dbxschema_mysql/dbxschema_mysql.install
@@ -1,9 +1,10 @@
 <?php
+
+use Drupal\dbxschema_mysql\Database\DatabaseTool;
 /**
  * @file
  * Contains functions used to install/uninstall dbxschema_mysql.
  */
-
 /**
  * Implements hook_install().
  */
@@ -14,7 +15,7 @@ function dbxschema_mysql_install($is_syncing) {
     $config = \Drupal::service('config.factory')
       ->getEditable('dbxschema.settings')
     ;
-    $db_tool = new \Drupal\dbxschema_mysql\Database\DatabaseTool();
+    $db_tool = new DatabaseTool();
     $drupal_schema = $db_tool->getDrupalSchemaName();
     $reserved_schema_patterns = $config->get('reserved_schema_patterns') ?? [];
     $reserved_schema_patterns[$drupal_schema] = 'Drupal installation';
diff --git a/modules/dbxschema_mysql/src/Database/Connection.php b/modules/dbxschema_mysql/src/Database/Connection.php
index 9264f5d..72b58f7 100644
--- a/modules/dbxschema_mysql/src/Database/Connection.php
+++ b/modules/dbxschema_mysql/src/Database/Connection.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\dbxschema_mysql\Database;
 
+use Drupal\dbxschema\Database\CrossSchemaConnectionTrait;
+use Psr\Log\LoggerInterface;
+use Drupal\Core\Database\ConnectionNotDefinedException;
+use Drupal\Core\Database\Database;
+use Drupal\Core\Database\Schema;
 use Drupal\Core\Database\Driver\mysql\Connection as MyConnection;
 use Drupal\dbxschema\Database\CrossSchemaConnectionInterface;
 use Drupal\dbxschema\Exception\ConnectionException;
@@ -14,7 +19,7 @@ use Drupal\dbxschema\Exception\ConnectionException;
  * @see https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Database%21Connection.php/class/Connection/9.0.x
  */
 class Connection extends MyConnection implements CrossSchemaConnectionInterface {
-  use \Drupal\dbxschema\Database\CrossSchemaConnectionTrait {
+  use CrossSchemaConnectionTrait {
     setSchemaName as private setSchemaNameTrait;
   }
 
@@ -48,13 +53,13 @@ class Connection extends MyConnection implements CrossSchemaConnectionInterface
    *   Extra databases specified in settings.php do not need to specify a
    *   schema name as a database prefix parameter. The prefix will be managed by
    *   this connection class instance.
-   * @param ?\Psr\Log\LoggerInterface $logger
+   * @param ?LoggerInterface $logger
    *   A logger in case of operations to log.
    * @param ?\Drupal\dbxschema\Plugin\CrossSchemaInterface $driver
    *   The driver to use.
    *
-   * @throws \Drupal\dbxschema\Exception\ConnectionException
-   * @throws \Drupal\Core\Database\ConnectionNotDefinedException
+   * @throws ConnectionException
+   * @throws ConnectionNotDefinedException
    *
    * @see https://api.drupal.org/api/drupal/core!lib!Drupal!Core!Database!Database.php/function/Database%3A%3AgetConnection/9.0.x
    * @see https://api.drupal.org/api/drupal/sites%21default%21default.settings.php/9.0.x
@@ -63,7 +68,7 @@ class Connection extends MyConnection implements CrossSchemaConnectionInterface
   public function __construct(
     string $schema_name = '',
     $database = 'default',
-    ?\Psr\Log\LoggerInterface $logger = NULL,
+    ?LoggerInterface $logger = NULL,
     ?CrossSchemaInterface $driver = NULL
   ) {
     // Check a key was provided instead of a connection object.
@@ -74,7 +79,7 @@ class Connection extends MyConnection implements CrossSchemaConnectionInterface
       }
       // Get the corresponding connection object.
       $this->dbKey = $database;
-      $database = \Drupal\Core\Database\Database::getConnection(
+      $database = Database::getConnection(
         'default',
         $database
       );
@@ -153,7 +158,7 @@ class Connection extends MyConnection implements CrossSchemaConnectionInterface
     $this->setSchemaName($schema_name);
 
     // Register default classes to use this instance's schema as default.
-    $this->useCrossSchemaFor(\Drupal\Core\Database\Schema::class);
+    $this->useCrossSchemaFor(Schema::class);
     $this->useCrossSchemaFor(\Drupal\mysql\Driver\Database\mysql\Schema::class);
     $this->useCrossSchemaFor(\Drupal\Core\Database\Driver\mysql\Schema::class);
     $this->useCrossSchemaFor(\Drupal\dbxschema_mysql\Database\Schema::class);
diff --git a/modules/dbxschema_mysql/src/Database/Schema.php b/modules/dbxschema_mysql/src/Database/Schema.php
index 99b579b..72c9c38 100644
--- a/modules/dbxschema_mysql/src/Database/Schema.php
+++ b/modules/dbxschema_mysql/src/Database/Schema.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\dbxschema_mysql\Database;
 
+use Drupal\dbxschema\Database\CrossSchemaSchemaTrait;
 use Drupal\Core\Database\Driver\mysql\Schema as MySchema;
 use Drupal\dbxschema\Database\CrossSchemaSchemaInterface;
 use Drupal\dbxschema\Exception\SchemaException;
@@ -14,7 +15,7 @@ use Drupal\dbxschema_mysql\Database\Connection;
  * @see https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Database%21Schema.php/class/Schema/9.0.x
  */
 class Schema extends MySchema implements CrossSchemaSchemaInterface {
-  use \Drupal\dbxschema\Database\CrossSchemaSchemaTrait;
+  use CrossSchemaSchemaTrait;
 
   /**
    * (override) Default schema name.
@@ -50,7 +51,7 @@ class Schema extends MySchema implements CrossSchemaSchemaInterface {
    * @throws \Drupal\dbxschema_mysql\Exception\SchemaException
    */
   public function __construct(
-    \Drupal\dbxschema_mysql\Database\Connection $connection
+    Connection $connection
   ) {
     $schema_name = $connection->getSchemaName();
     // Get a DatabaseTool object.
diff --git a/modules/dbxschema_pgsql/dbxschema_pgsql.install b/modules/dbxschema_pgsql/dbxschema_pgsql.install
index fe88a4b..3640473 100644
--- a/modules/dbxschema_pgsql/dbxschema_pgsql.install
+++ b/modules/dbxschema_pgsql/dbxschema_pgsql.install
@@ -1,4 +1,5 @@
 <?php
+use Drupal\dbxschema_pgsql\Database\DatabaseTool;
 /**
  * @file
  * Contains functions used to install/uninstall dbxschema_pgsql.
@@ -16,7 +17,7 @@ function dbxschema_pgsql_install($is_syncing) {
     $config = \Drupal::service('config.factory')
       ->getEditable('dbxschema.settings')
     ;
-    $db_tool = new \Drupal\dbxschema_pgsql\Database\DatabaseTool();
+    $db_tool = new DatabaseTool();
     $drupal_schema = $db_tool->getDrupalSchemaName();
     $reserved_schema_patterns = $config->get('reserved_schema_patterns') ?? [];
     $reserved_schema_patterns[$drupal_schema] = 'Drupal installation';
@@ -77,7 +78,7 @@ function dbxschema_pgsql_install_cloner() {
   $logger = \Drupal::service('dbxschema.logger');
   
   $sql_cloner_path =
-    drupal_get_path('module', 'dbxschema_pgsql')
+    \Drupal::service('extension.list.module')->getPath('dbxschema_pgsql')
     . '/pg-clone-schema/clone_schema.sql'
   ;
 
@@ -137,7 +138,7 @@ function dbxschema_pgsql_install_cloner() {
 function dbxschema_pgsql_uninstall_cloner() {
   $logger = \Drupal::service('dbxschema.logger');
   $sql_uninstall_cloner_path =
-    drupal_get_path('module', 'dbxschema_pgsql')
+    \Drupal::service('extension.list.module')->getPath('dbxschema_pgsql')
     . '/pg-clone-schema/clone_schema_uninstall.sql'
   ;
 
diff --git a/modules/dbxschema_pgsql/src/Database/Connection.php b/modules/dbxschema_pgsql/src/Database/Connection.php
index dfb1562..bbbbe7f 100644
--- a/modules/dbxschema_pgsql/src/Database/Connection.php
+++ b/modules/dbxschema_pgsql/src/Database/Connection.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\dbxschema_pgsql\Database;
 
+use Drupal\dbxschema\Database\CrossSchemaConnectionTrait;
+use Drupal\Core\Database\Database;
+use Psr\Log\LoggerInterface;
+use Drupal\Core\Database\ConnectionNotDefinedException;
+use Drupal\Core\Database\Schema;
 use Drupal\Core\Database\Driver\pgsql\Connection as PgConnection;
 use Drupal\dbxschema\Database\CrossSchemaConnectionInterface;
 use Drupal\dbxschema\Exception\ConnectionException;
@@ -14,7 +19,7 @@ use Drupal\dbxschema\Exception\ConnectionException;
  * @see https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Database%21Connection.php/class/Connection/9.0.x
  */
 class Connection extends PgConnection implements CrossSchemaConnectionInterface {
-  use \Drupal\dbxschema\Database\CrossSchemaConnectionTrait {
+  use CrossSchemaConnectionTrait {
     setSchemaName as private setSchemaNameTrait;
   }
 
@@ -56,7 +61,7 @@ class Connection extends PgConnection implements CrossSchemaConnectionInterface
   ) {
     // We call this method in a context of an existing connection already
     // used by Drupal so we can avoid a couple of tests and assume it works.
-    $database_info = \Drupal\Core\Database\Database::getAllConnectionInfo();
+    $database_info = Database::getAllConnectionInfo();
     $target = $database->target;
     $key = $database->key;
 
@@ -90,13 +95,13 @@ class Connection extends PgConnection implements CrossSchemaConnectionInterface
    *   Extra databases specified in settings.php do not need to specify a
    *   schema name as a database prefix parameter. The prefix will be managed by
    *   this connection class instance.
-   * @param ?\Psr\Log\LoggerInterface $logger
+   * @param ?LoggerInterface $logger
    *   A logger in case of operations to log.
    * @param ?\Drupal\dbxschema\Plugin\CrossSchemaInterface $driver
    *   The driver to use.
    *
-   * @throws \Drupal\dbxschema\Exception\ConnectionException
-   * @throws \Drupal\Core\Database\ConnectionNotDefinedException
+   * @throws ConnectionException
+   * @throws ConnectionNotDefinedException
    *
    * @see https://api.drupal.org/api/drupal/core!lib!Drupal!Core!Database!Database.php/function/Database%3A%3AgetConnection/9.0.x
    * @see https://api.drupal.org/api/drupal/sites%21default%21default.settings.php/9.0.x
@@ -105,7 +110,7 @@ class Connection extends PgConnection implements CrossSchemaConnectionInterface
   public function __construct(
     string $schema_name = '',
     $database = 'default',
-    ?\Psr\Log\LoggerInterface $logger = NULL,
+    ?LoggerInterface $logger = NULL,
     ?CrossSchemaInterface $driver = NULL
   ) {
     // Check a key was provided instead of a connection object.
@@ -116,7 +121,7 @@ class Connection extends PgConnection implements CrossSchemaConnectionInterface
       }
       // Get the corresponding connection object.
       $this->dbKey = $database;
-      $database = \Drupal\Core\Database\Database::getConnection(
+      $database = Database::getConnection(
         'default',
         $database
       );
@@ -217,7 +222,7 @@ class Connection extends PgConnection implements CrossSchemaConnectionInterface
     $this->setSchemaName($schema_name);
 
     // Register default classes to use this instance's schema as default.
-    $this->useCrossSchemaFor(\Drupal\Core\Database\Schema::class);
+    $this->useCrossSchemaFor(Schema::class);
     $this->useCrossSchemaFor(\Drupal\Core\Database\Driver\pgsql\Schema::class);
     $this->useCrossSchemaFor(\Drupal\dbxschema_pgsql\Database\Schema::class);
   }
diff --git a/modules/dbxschema_pgsql/src/Database/Schema.php b/modules/dbxschema_pgsql/src/Database/Schema.php
index 4bbdab5..4f0c590 100644
--- a/modules/dbxschema_pgsql/src/Database/Schema.php
+++ b/modules/dbxschema_pgsql/src/Database/Schema.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\dbxschema_pgsql\Database;
 
+use Drupal\dbxschema\Database\CrossSchemaSchemaTrait;
 use Drupal\Core\Database\Driver\pgsql\Schema as PgSchema;
 use Drupal\dbxschema\Database\CrossSchemaSchemaInterface;
 use Drupal\dbxschema\Exception\SchemaException;
@@ -14,7 +15,7 @@ use Drupal\dbxschema_pgsql\Database\Connection;
  * @see https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Database%21Schema.php/class/Schema/9.0.x
  */
 class Schema extends PgSchema implements CrossSchemaSchemaInterface {
-  use \Drupal\dbxschema\Database\CrossSchemaSchemaTrait;
+  use CrossSchemaSchemaTrait;
 
   /**
    * (override) Default schema name.
@@ -50,7 +51,7 @@ class Schema extends PgSchema implements CrossSchemaSchemaInterface {
    * @throws \Drupal\dbxschema_pgsql\Exception\SchemaException
    */
   public function __construct(
-    \Drupal\dbxschema_pgsql\Database\Connection $connection
+    Connection $connection
   ) {
     $schema_name = $connection->getSchemaName();
     // Get a DatabaseTool object.
diff --git a/src/Annotation/CrossSchema.php b/src/Annotation/CrossSchema.php
index 2fc55a3..f67ff45 100644
--- a/src/Annotation/CrossSchema.php
+++ b/src/Annotation/CrossSchema.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\dbxschema\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -17,7 +18,7 @@ class CrossSchema extends Plugin {
    * This describes how the driver implementation handles different aspects of
    * the corss-schema query system.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/CrossSchemaPluginManager.php b/src/CrossSchemaPluginManager.php
index d594624..3021fc8 100644
--- a/src/CrossSchemaPluginManager.php
+++ b/src/CrossSchemaPluginManager.php
@@ -19,9 +19,9 @@ class CrossSchemaPluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(
diff --git a/src/Database/CrossSchemaConnectionInterface.php b/src/Database/CrossSchemaConnectionInterface.php
index 2c40975..4440270 100644
--- a/src/Database/CrossSchemaConnectionInterface.php
+++ b/src/Database/CrossSchemaConnectionInterface.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\dbxschema\Database;
 
+use Drupal\Core\Database\Driver\pgsql\Connection;
+use Psr\Log\LoggerInterface;
+use Drupal\dbxschema\Exception\ConnectionException;
+use Drupal\Core\Database\ConnectionNotDefinedException;
+use Drupal\Core\Database\Schema;
 use Drupal\dbxschema\Plugin\CrossSchemaInterface;
 use Drupal\dbxschema\Database\DatabaseTool;
 
@@ -35,7 +40,7 @@ interface CrossSchemaConnectionInterface extends ConnectionInterface {
    *   Default: '' (no schema). It will throw exceptions on methods needing a
    *   default schema but may work on others or when a schema is not needed or
    *   it can be passed as a parameter.
-   * @param \Drupal\Core\Database\Driver\pgsql\Connection|string $database
+   * @param Connection|string $database
    *   Either a \Drupal\Core\Database\Connection instance or a
    *   Drupal database key string (from current site's settings.php).
    *   Extra databases specified in settings.php do not need to specify a
@@ -43,13 +48,13 @@ interface CrossSchemaConnectionInterface extends ConnectionInterface {
    *   this connection class instance.
    *   To be more precise, this parameter is here just to provide the database
    *   credentials to use.
-   * @param ?\Psr\Log\LoggerInterface $logger
+   * @param ?LoggerInterface $logger
    *   A logger in case of events to log.
-   * @param ?\Drupal\dbxschema\Plugin\CrossSchemaInterface $driver
+   * @param ?CrossSchemaInterface $driver
    *   The driver to use.
    *
-   * @throws \Drupal\dbxschema\Exception\ConnectionException
-   * @throws \Drupal\Core\Database\ConnectionNotDefinedException
+   * @throws ConnectionException
+   * @throws ConnectionNotDefinedException
    *
    * @see https://api.drupal.org/api/drupal/core!lib!Drupal!Core!Database!Database.php/function/Database%3A%3AgetConnection/9.0.x
    * @see https://api.drupal.org/api/drupal/sites%21default%21default.settings.php/9.0.x
@@ -58,7 +63,7 @@ interface CrossSchemaConnectionInterface extends ConnectionInterface {
   public static function create(
     string $schema_name = '',
     $database = 'default',
-    ?\Psr\Log\LoggerInterface $logger = NULL,
+    ?LoggerInterface $logger = NULL,
     ?CrossSchemaInterface $driver = NULL
   );
 
@@ -81,7 +86,7 @@ interface CrossSchemaConnectionInterface extends ConnectionInterface {
   /**
    * Returns database tool member.
    *
-   * @return \Drupal\dbxschema\Database\DatabaseTool
+   * @return DatabaseTool
    *   Database tool member.
    */
   public function getDatabaseTool() :DatabaseTool;
@@ -89,18 +94,18 @@ interface CrossSchemaConnectionInterface extends ConnectionInterface {
   /**
    * Returns current message logger.
    *
-   * @return \Psr\Log\LoggerInterface
+   * @return LoggerInterface
    *   A message logger.
    */
-  public function getMessageLogger() :\Psr\Log\LoggerInterface;
+  public function getMessageLogger() :LoggerInterface;
 
   /**
    * Sets current message logger.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A message logger.
    */
-  public function setMessageLogger(\Psr\Log\LoggerInterface $logger) :void;
+  public function setMessageLogger(LoggerInterface $logger) :void;
 
   /**
    * (override) Returns a Schema object for manipulating the schema.
@@ -110,7 +115,7 @@ interface CrossSchemaConnectionInterface extends ConnectionInterface {
    * schema changes for this connection. The Schema object is automatically
    * updated on changes.
    *
-   * @return \Drupal\Core\Database\Schema
+   * @return Schema
    *   The database Schema object for this connection.
    */
   public function schema();
@@ -129,7 +134,7 @@ interface CrossSchemaConnectionInterface extends ConnectionInterface {
    * @param string $schema_name
    *   The schema name to use.
    *
-   * @throws \Drupal\dbxschema\Exception\ConnectionException
+   * @throws ConnectionException
    */
   public function setSchemaName(string $schema_name) :void;
 
@@ -170,7 +175,7 @@ interface CrossSchemaConnectionInterface extends ConnectionInterface {
    *   replaced by the returned integer and table_name should be an actual table
    *   name).
    *
-   * @throws \Drupal\dbxschema\Exception\ConnectionException
+   * @throws ConnectionException
    *   If the given schema name is invalid or does not exist in current
    *   database or there is no current schema.
    */
@@ -190,7 +195,7 @@ interface CrossSchemaConnectionInterface extends ConnectionInterface {
    *   associated schema set already.
    *   Default: 2.
    *
-   * @throws \Drupal\dbxschema\Exception\ConnectionException
+   * @throws ConnectionException
    *   If the given schema name is invalid or does not exist in current
    *   database or there is no current schema or a lower index has not
    *   associated schema or the index is invalid.
@@ -200,7 +205,7 @@ interface CrossSchemaConnectionInterface extends ConnectionInterface {
   /**
    * Sets the driver for this connection object.
    *
-   * @param \Drupal\dbxschema\Plugin\CrossSchemaInterface $driver
+   * @param CrossSchemaInterface $driver
    *   A cross-schema query driver.
    */
   public function setDriver(CrossSchemaInterface $driver);
@@ -208,7 +213,7 @@ interface CrossSchemaConnectionInterface extends ConnectionInterface {
   /**
    * Returns the driver used by this connection object.
    *
-   * @return \Drupal\dbxschema\Plugin\CrossSchemaInterface
+   * @return CrossSchemaInterface
    *   Current driver.
    */
   public function getDriver() :CrossSchemaInterface;
diff --git a/src/Database/CrossSchemaConnectionTrait.php b/src/Database/CrossSchemaConnectionTrait.php
index ac0f6e3..a491871 100644
--- a/src/Database/CrossSchemaConnectionTrait.php
+++ b/src/Database/CrossSchemaConnectionTrait.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\dbxschema\Database;
 
+use Drupal\Core\Database\Connection;
+use Psr\Log\LoggerInterface;
 use Drupal\dbxschema\Plugin\CrossSchemaInterface;
 use Drupal\dbxschema\Exception\ConnectionException;
 use Drupal\dbxschema\Database\DatabaseTool;
@@ -20,7 +22,7 @@ trait CrossSchemaConnectionTrait {
   /**
    * Instance driver that should be set by the constructor.
    *
-   * @var \Drupal\dbxschema\Plugin\CrossSchemaInterface
+   * @var CrossSchemaInterface
    */
   protected $driver;
 
@@ -32,13 +34,13 @@ trait CrossSchemaConnectionTrait {
    * @var array
    */
   protected $self_classes = [
-    \Drupal\Core\Database\Connection::class => TRUE,
+    Connection::class => TRUE,
   ];
 
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database = NULL;
 
@@ -105,7 +107,7 @@ trait CrossSchemaConnectionTrait {
   public static function create(
     string $schema_name = '',
     $database = 'default',
-    ?\Psr\Log\LoggerInterface $logger = NULL,
+    ?LoggerInterface $logger = NULL,
     ?CrossSchemaInterface $driver = NULL
   ) {
     return new static($schema_name, $database, $logger, $driver);
@@ -135,14 +137,14 @@ trait CrossSchemaConnectionTrait {
   /**
    * {@inheritdoc}
    */
-  public function getMessageLogger() :\Psr\Log\LoggerInterface {
+  public function getMessageLogger() :LoggerInterface {
     return $this->messageLogger;
   }
 
   /**
    * {@inheritdoc}
    */
-  public function setMessageLogger(\Psr\Log\LoggerInterface $logger) :void {
+  public function setMessageLogger(LoggerInterface $logger) :void {
     $this->messageLogger = $logger;
   }
 
@@ -230,7 +232,7 @@ trait CrossSchemaConnectionTrait {
    * @return string
    *   $schema_name if set and valid, or the current schema name.
    *
-   * @throws \Drupal\dbxschema\Exception\ConnectionException
+   * @throws ConnectionException
    *  If the given schema name is invalid (ignoring schema name reservations)
    *  or none of $schema_name and $this->schemaName are set.
    */
diff --git a/src/Database/CrossSchemaSchemaInterface.php b/src/Database/CrossSchemaSchemaInterface.php
index 9e7b6ca..2895bcd 100644
--- a/src/Database/CrossSchemaSchemaInterface.php
+++ b/src/Database/CrossSchemaSchemaInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\dbxschema\Database;
 
+use Drupal\Core\Database\DatabaseExceptionWrapper;
+use Drupal\dbxschema\Exception\CrossSchemaException;
 use Drupal\dbxschema\Plugin\CrossSchemaInterface;
 
 /**
@@ -42,7 +44,7 @@ interface CrossSchemaSchemaInterface extends SchemaInterface {
    * The schema to create must not exist. If an error occurs, an exception
    * is thrown.
    *
-   * @throws \Drupal\Core\Database\DatabaseExceptionWrapper
+   * @throws DatabaseExceptionWrapper
    */
   public function createSchema() :void;
 
@@ -81,8 +83,8 @@ interface CrossSchemaSchemaInterface extends SchemaInterface {
    * @param string $new_schema_name
    *   New name to use.
    *
-   * @throws \Drupal\Core\Database\DatabaseExceptionWrapper
-   * @throws \Drupal\dbxschema\Exception\CrossSchemaException
+   * @throws DatabaseExceptionWrapper
+   * @throws CrossSchemaException
    *   if there is no current schema name.
    */
   public function renameSchema(
@@ -95,7 +97,7 @@ interface CrossSchemaSchemaInterface extends SchemaInterface {
    * The schema to remove must exist. If an error occurs, an exception is
    * thrown.
    *
-   * @throws \Drupal\Core\Database\DatabaseExceptionWrapper
+   * @throws DatabaseExceptionWrapper
    */
   public function dropSchema() :void;
 
@@ -123,7 +125,7 @@ interface CrossSchemaSchemaInterface extends SchemaInterface {
    *   An array with details for the current schema version as defined by
    *   $parameters values.
    *
-   * @throws \Drupal\dbxschema\Exception\CrossSchemaException
+   * @throws CrossSchemaException
    */
   public function getSchemaDef(array $parameters) :array;
 
diff --git a/src/Database/CrossSchemaSchemaTrait.php b/src/Database/CrossSchemaSchemaTrait.php
index f55ba17..ab403f9 100644
--- a/src/Database/CrossSchemaSchemaTrait.php
+++ b/src/Database/CrossSchemaSchemaTrait.php
@@ -26,7 +26,7 @@ trait CrossSchemaSchemaTrait {
   /**
    * Database tool.
    *
-   * @var \Drupal\dbxschema\Database\DatabaseTool
+   * @var DatabaseTool
    */
   protected $dbTool = NULL;
 
diff --git a/src/Database/DatabaseTool.php b/src/Database/DatabaseTool.php
index ada4a36..5f3eae6 100644
--- a/src/Database/DatabaseTool.php
+++ b/src/Database/DatabaseTool.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\dbxschema\Database;
 
+use Drupal\dbxschema\Plugin\CrossSchemaInterface;
+use Drupal\Core\Database\DatabaseExceptionWrapper;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Database\Database;
 use Drupal\dbxschema\Exception\DatabaseToolException;
@@ -18,7 +20,7 @@ abstract class DatabaseTool {
   /**
    * Instance driver that should be set by the constructor.
    *
-   * @var \Drupal\dbxschema\Plugin\CrossSchemaInterface
+   * @var CrossSchemaInterface
    */
   protected $driver;
 
@@ -48,10 +50,10 @@ abstract class DatabaseTool {
    * @param bool $reset_cache
    *   If TRUE, local driver cache is ignored and refreshed.
    *
-   * @return \Drupal\dbxschema\Plugin\CrossSchemaInterface
+   * @return CrossSchemaInterface
    *  A plugin implementation for the given driver.
    *
-   * @throws \Drupal\dbxschema\Exception\DatabaseToolException
+   * @throws DatabaseToolException
    *   If no implementation is available for the given driver.
    */
   public static function getDriverImplementation(
@@ -101,7 +103,7 @@ abstract class DatabaseTool {
    * @return \Drupal\dbxschema\Database\DatabaseTool
    *  A database tool implementation for the given driver.
    *
-   * @throws \Drupal\dbxschema\Exception\DatabaseToolException
+   * @throws DatabaseToolException
    *   If no implementation is available for the given driver.
    */
   public static function getDatabaseTool(
@@ -120,7 +122,7 @@ abstract class DatabaseTool {
    *   Default: '' (no schema). It will throw exceptions on methods needing a
    *   default schema but may work on others or when a schema can be passed
    *   as parameter.
-   * @param \Drupal\Core\Database\Connection|string $database
+   * @param Connection|string $database
    *   Either a \Drupal\Core\Database\Connection instance or a
    *   Drupal database key string (from current site's settings.php).
    *   Extra databases specified in settings.php do not need to specify a
@@ -138,7 +140,7 @@ abstract class DatabaseTool {
    * @return \Drupal\dbxschema\Database\CrossSchemaConnection
    *  A cross-schema connection implementation for the given driver.
    *
-   * @throws \Drupal\dbxschema\Exception\DatabaseToolException
+   * @throws DatabaseToolException
    *   If no implementation is available for the given driver.
    */
   public static function getConnection(
@@ -323,7 +325,7 @@ abstract class DatabaseTool {
    *   The description of the reservation that may be displayed to users when a
    *   schema name is denied.
    *
-   * @throws \Drupal\dbxschema\Exception\DatabaseToolException
+   * @throws DatabaseToolException
    *   if the pattern is empty or does not contain any valid schema name
    *   character.
    */
@@ -429,7 +431,7 @@ abstract class DatabaseTool {
    *
    * @param string $schema_name
    *   Schema name.
-   * @param \Drupal\dbxschema\Database\CrossSchemaConnectionInterface $db
+   * @param CrossSchemaConnectionInterface $db
    *   A database connection object.
    *   If NULL, current Drupal database is used.
    *
@@ -456,11 +458,11 @@ abstract class DatabaseTool {
    *
    * @param string $schema_name
    *   Name of schema to create.
-   * @param \Drupal\dbxschema\Database\CrossSchemaConnectionInterface $db
+   * @param CrossSchemaConnectionInterface $db
    *   A database connection object.
    *   If NULL, current Drupal database is used.
    *
-   * @throws \Drupal\Core\Database\DatabaseExceptionWrapper
+   * @throws DatabaseExceptionWrapper
    */
   abstract public function createSchema(
     string $schema_name,
@@ -484,11 +486,11 @@ abstract class DatabaseTool {
    * @param string $target_schema
    *   Destination schema that will be created and filled with a copy of
    *   $source_schema.
-   * @param \Drupal\dbxschema\Database\CrossSchemaConnectionInterface $db
+   * @param CrossSchemaConnectionInterface $db
    *   A cross database connection object.
    *   If NULL, current Drupal database is used.
    *
-   * @throws \Drupal\Core\Database\DatabaseExceptionWrapper
+   * @throws DatabaseExceptionWrapper
    */
   abstract public function cloneSchema(
     string $source_schema,
@@ -513,11 +515,11 @@ abstract class DatabaseTool {
    *   The old schema name to rename.
    * @param string $new_schema_name
    *   New name to use.
-   * @param \Drupal\dbxschema\Database\CrossSchemaConnectionInterface $db
+   * @param CrossSchemaConnectionInterface $db
    *   A cross database connection object.
    *   If NULL, current Drupal database is used.
    *
-   * @throws \Drupal\Core\Database\DatabaseExceptionWrapper
+   * @throws DatabaseExceptionWrapper
    */
   abstract public function renameSchema(
     string $old_schema_name,
@@ -541,11 +543,11 @@ abstract class DatabaseTool {
    *   Name of schema to remove.
    * @param string $schema_name
    *   Schema name.
-   * @param \Drupal\dbxschema\Database\CrossSchemaConnectionInterface $db
+   * @param CrossSchemaConnectionInterface $db
    *   A cross database connection object.
    *   If NULL, current Drupal database is used.
    *
-   * @throws \Drupal\Core\Database\DatabaseExceptionWrapper
+   * @throws DatabaseExceptionWrapper
    */
   abstract public function dropSchema(
     string $schema_name,
@@ -563,14 +565,14 @@ abstract class DatabaseTool {
    *
    * @param string $schema_name
    *   Schema name.
-   * @param \Drupal\dbxschema\Database\CrossSchemaConnectionInterface $db
+   * @param CrossSchemaConnectionInterface $db
    *   A cross database connection object.
    *   If NULL, current Drupal database is used.
    *
    * @return integer
    *   The size in bytes of the schema or 0 if the size is not available.
    *
-   * @throws \Drupal\dbxschema\Exception\DatabaseToolException
+   * @throws DatabaseToolException
    */
   abstract public function getSchemaSize(
     string $schema_name,
@@ -585,7 +587,7 @@ abstract class DatabaseTool {
    *   $db_size = $db_tool->getDatabaseSize();
    * @endcode
    *
-   * @param \Drupal\dbxschema\Database\CrossSchemaConnectionInterface $db
+   * @param CrossSchemaConnectionInterface $db
    *   A cross database connection object.
    *
    * @return int
