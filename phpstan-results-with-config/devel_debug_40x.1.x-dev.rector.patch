diff --git a/devel_debug_40x.info.yml b/devel_debug_40x.info.yml
index b4826f5..a61f93f 100644
--- a/devel_debug_40x.info.yml
+++ b/devel_debug_40x.info.yml
@@ -2,7 +2,6 @@ name: Devel Debug 40x
 type: module
 description: 'Provides an event subscriber to debug 403 and 404 errors with Devel.'
 package: Development
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 dependencies:
   - devel:devel
diff --git a/src/EventSubscriber/DevelDebug40xExceptionSubscriber.php b/src/EventSubscriber/DevelDebug40xExceptionSubscriber.php
index bc464d9..74b3c6b 100644
--- a/src/EventSubscriber/DevelDebug40xExceptionSubscriber.php
+++ b/src/EventSubscriber/DevelDebug40xExceptionSubscriber.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\devel_debug_40x\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
 use Drupal\devel\DevelDumperManagerInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpKernel\Exception\HttpExceptionInterface;
 use Symfony\Component\HttpKernel\KernelEvents;
 
@@ -16,14 +16,14 @@ class DevelDebug40xExceptionSubscriber implements EventSubscriberInterface {
   /**
    * The Devel dumper manager.
    *
-   * @var \Drupal\devel\DevelDumperManagerInterface
+   * @var DevelDumperManagerInterface
    */
   protected $develDumperManager;
 
   /**
    * Constructs a new DevelDebug40xExceptionSubscriber instance.
    *
-   * @param \Drupal\devel\DevelDumperManagerInterface $devel_dumper_manager
+   * @param DevelDumperManagerInterface $devel_dumper_manager
    *   The Devel dumper manager.
    */
   public function __construct(DevelDumperManagerInterface $devel_dumper_manager) {
@@ -33,11 +33,11 @@ class DevelDebug40xExceptionSubscriber implements EventSubscriberInterface {
   /**
    * Dumps 403 or 404 exceptions through Devel's dumper manager.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent $event
+   * @param ExceptionEvent $event
    *   The event to process.
    */
-  public function onException(GetResponseForExceptionEvent $event) {
-    $exception = $event->getException();
+  public function onException(ExceptionEvent $event) {
+    $exception = $event->getThrowable();
 
     if ($exception instanceof HttpExceptionInterface) {
       if ($exception->getStatusCode() == 403) {
