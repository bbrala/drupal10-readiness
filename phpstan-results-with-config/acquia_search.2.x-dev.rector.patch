diff --git a/acquia_search.module b/acquia_search.module
index 2fe5b71..1db3751 100644
--- a/acquia_search.module
+++ b/acquia_search.module
@@ -1,5 +1,9 @@
 <?php
 
+use Drupal\search_api\SearchApiException;
+use Drupal\search_api_solr\Plugin\search_api\backend\SearchApiSolrBackend;
+use Drupal\Component\Render\MarkupInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 /**
  * @file
  * Integration between Acquia Drupal and Acquia's hosted solr search service.
@@ -34,13 +38,13 @@ function acquia_search_acquia_subscription_status($subscription = FALSE) {
     }
 
     // Enable search.
-    /** @var \Drupal\search_api\Entity\Server $server */
+    /** @var Server $server */
     if ($server = Server::load('acquia_search_server')) {
       $server->set('status', TRUE);
       $server->save();
     }
 
-    /** @var \Drupal\search_api\Entity\Index $index */
+    /** @var Index $index */
     if ($index = Index::load('acquia_search_index')) {
       $index->set('status', TRUE);
       $index->save();
@@ -53,12 +57,12 @@ function acquia_search_acquia_subscription_status($subscription = FALSE) {
       case Subscription::NOT_FOUND:
       case Subscription::EXPIRED:
         // Disable search.
-        /** @var \Drupal\search_api\Entity\Server $server */
+        /** @var Server $server */
         if ($server = Server::load('acquia_search_server')) {
           $server->set('status', FALSE);
           $server->save();
         }
-        /** @var \Drupal\search_api\Entity\Index $index */
+        /** @var Index $index */
         if ($index = Index::load('acquia_search_index')) {
           $index->set('status', FALSE);
           $index->save();
@@ -200,19 +204,19 @@ function acquia_search_should_set_read_only_mode() {
  *
  * Flag when a certain server should be enforcing read-only mode.
  *
- * @throws \Drupal\search_api\SearchApiException
+ * @throws SearchApiException
  */
 function acquia_search_search_api_server_load($entities) {
   $acquia_servers = array_filter($entities, function ($server) {
-    /** @var \Drupal\search_api\Entity\Server $server */
+    /** @var Server $server */
     return acquia_search_is_acquia_server($server->getBackendConfig());
   });
 
   $core_service = acquia_search_get_core_service();
 
-  /** @var \Drupal\search_api\Entity\Server $server */
+  /** @var Server $server */
   foreach ($acquia_servers as $server) {
-    /** @var \Drupal\search_api_solr\Plugin\search_api\backend\SearchApiSolrBackend $backend */
+    /** @var SearchApiSolrBackend $backend */
     $backend = $server->getBackend();
     $connector_config = $backend->getSolrConnector()->getConfiguration();
     // Set a list of eligible cores.
@@ -265,7 +269,7 @@ function acquia_search_search_api_index_load($entities) {
     }
 
     // Check for non-existent servers.
-    /** @var \Drupal\search_api\Entity\Index $index */
+    /** @var Index $index */
     $server = Server::load($serverId);
 
     if (!$server) {
@@ -348,7 +352,7 @@ function acquia_search_form_search_api_server_edit_form_alter(&$form) {
  * Shows message if we are editing a Search API server's configuration.
  */
 function acquia_search_form_search_api_index_edit_form_alter(&$form) {
-  /** @var \Drupal\search_api\Entity\Server $server */
+  /** @var Server $server */
   $server = Server::load($form['server']['#default_value']);
 
   if (!$server) {
@@ -378,7 +382,7 @@ function acquia_search_server_show_read_only_mode_warning() {
 /**
  * Returns formatted message about read-only mode.
  *
- * @return \Drupal\Component\Render\MarkupInterface|string
+ * @return MarkupInterface|string
  *   Renderable array or translatable markup.
  */
 function acquia_search_get_read_only_mode_warning() {
@@ -397,7 +401,7 @@ function acquia_search_get_read_only_mode_warning() {
       '#theme' => 'item_list',
       '#items' => $core_service->getListOfPossibleCores(),
     ];
-    $list = render($item_list);
+    $list = \Drupal::service('renderer')->render($item_list);
 
     $msg .= '<p>';
     $msg .= t('The following Acquia Search Solr index IDs would have worked for your current environment, but could not be found on your Acquia subscription: @list', ['@list' => $list]);
@@ -416,16 +420,16 @@ function acquia_search_get_read_only_mode_warning() {
 /**
  * Returns formatted message about Acquia Search connection details.
  *
- * @param \Drupal\search_api\Entity\Server $server
+ * @param Server $server
  *   Server entity.
  *
- * @return \Drupal\Component\Render\MarkupInterface|string
+ * @return MarkupInterface|string
  *   Renderable array or translatable markup.
  *
- * @throws \Drupal\search_api\SearchApiException
+ * @throws SearchApiException
  */
 function acquia_search_get_search_status_message(Server $server) {
-  /** @var \Drupal\search_api_solr\Plugin\search_api\backend\SearchApiSolrBackend $backend */
+  /** @var SearchApiSolrBackend $backend */
   $backend = $server->getBackend();
   $configuration = $backend->getSolrConnector()->getConfiguration();
 
@@ -453,7 +457,7 @@ function acquia_search_get_search_status_message(Server $server) {
  * @param int $override
  *   Override mode. Read only, core auto selected or using existing overrides.
  *
- * @return array|\Drupal\Core\StringTranslation\TranslatableMarkup
+ * @return array|TranslatableMarkup
  *   Renderable array or translatable markup.
  */
 function acquia_search_get_overridden_mode_message($override) {
@@ -475,7 +479,7 @@ function acquia_search_get_overridden_mode_message($override) {
  * @param array $configuration
  *   A configuration array containing scheme, host, port and path.
  *
- * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+ * @return TranslatableMarkup
  *   Translatable markup.
  */
 function acquia_search_get_server_url_message(array $configuration) {
@@ -489,7 +493,7 @@ function acquia_search_get_server_url_message(array $configuration) {
  * @param string $server_id
  *   Server ID.
  *
- * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+ * @return TranslatableMarkup
  *   Translatable markup.
  */
 function acquia_search_get_server_id_message($server_id) {
@@ -499,13 +503,13 @@ function acquia_search_get_server_id_message($server_id) {
 /**
  * Get message describing authentication status for the given server.
  *
- * @param \Drupal\search_api\Entity\Server $server
+ * @param Server $server
  *   Server entity.
  *
- * @return array|\Drupal\Core\StringTranslation\TranslatableMarkup
+ * @return array|TranslatableMarkup
  *   Renderable array or translatable markup.
  *
- * @throws \Drupal\search_api\SearchApiException
+ * @throws SearchApiException
  */
 function acquia_search_get_server_auth_check_message(Server $server) {
   if ($server->getBackend()->getSolrConnector()->pingServer()) {
@@ -520,13 +524,13 @@ function acquia_search_get_server_auth_check_message(Server $server) {
 /**
  * Get text describing availability for the given server.
  *
- * @param \Drupal\search_api\Entity\Server $server
+ * @param Server $server
  *   Server entity.
  *
- * @return array|\Drupal\Core\StringTranslation\TranslatableMarkup
+ * @return array|TranslatableMarkup
  *   Renderable array or translatable markup.
  *
- * @throws \Drupal\search_api\SearchApiException
+ * @throws SearchApiException
  */
 function acquia_search_get_server_availability_message(Server $server) {
   if ($server->getBackend()->getSolrConnector()->pingCore()) {
@@ -544,7 +548,7 @@ function acquia_search_get_server_availability_message(Server $server) {
  * The PreferredSearchCoreService class, helps to determines which search core
  * should be used and whether it is available within the subscription.
  *
- * @return \Drupal\acquia_search\PreferredSearchCoreService
+ * @return PreferredSearchCoreService
  *   Preferred Search Core Service.
  */
 function acquia_search_get_core_service() {
@@ -607,9 +611,9 @@ function acquia_search_theme_registry_alter(&$theme_registry) {
  * @see acquia_search_theme_registry_alter()
  */
 function acquia_search_preprocess_search_api_index(&$variables) {
-  /** @var \Drupal\search_api\Entity\Index $index */
+  /** @var Index $index */
   $index = $variables['index'];
-  /** @var \Drupal\search_api\Entity\Server $server */
+  /** @var Server $server */
   $server = Server::load($index->get('server'));
 
   if (!$server || !acquia_search_is_acquia_server($server->getBackendConfig())) {
@@ -635,7 +639,7 @@ function acquia_search_preprocess_search_api_index(&$variables) {
  * @see acquia_search_theme_registry_alter()
  */
 function acquia_search_preprocess_search_api_server(array &$variables) {
-  /** @var \Drupal\search_api\Entity\Server $server */
+  /** @var Server $server */
   $server = $variables['server'];
 
   if (!acquia_search_is_acquia_server($server->getBackendConfig())) {
@@ -656,7 +660,7 @@ function acquia_search_preprocess_search_api_server(array &$variables) {
 /**
  * Initializes and returns an instance of AcquiaSearchV3ApiClient.
  *
- * @return \Drupal\acquia_search\AcquiaSearchV3ApiClient|false
+ * @return AcquiaSearchV3ApiClient|false
  *   Acquia search V3 API Client or false on failure.
  */
 function acquia_search_get_v3_client() {
diff --git a/src/AcquiaSearchV3ApiClient.php b/src/AcquiaSearchV3ApiClient.php
index 9442bce..f9f08bc 100644
--- a/src/AcquiaSearchV3ApiClient.php
+++ b/src/AcquiaSearchV3ApiClient.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\acquia_search;
 
+use GuzzleHttp\Client;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Cache\CacheBackendInterface;
 use GuzzleHttp\ClientInterface;
@@ -31,7 +32,7 @@ class AcquiaSearchV3ApiClient {
   /**
    * Http client.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;
 
@@ -45,14 +46,14 @@ class AcquiaSearchV3ApiClient {
   /**
    * Cache.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;
 
   /**
    * The HTTP client to fetch the feed data with.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $client;
 
@@ -63,9 +64,9 @@ class AcquiaSearchV3ApiClient {
    *   Search V3 API host.
    * @param string $api_key
    *   Search V3 API key.
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   Http client.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   Cache.
    */
   public function __construct($host, $api_key, ClientInterface $http_client, CacheBackendInterface $cache) {
diff --git a/src/Client/Adapter/TimeoutAwarePsr18Adapter.php b/src/Client/Adapter/TimeoutAwarePsr18Adapter.php
index 79e18b8..2b2c836 100644
--- a/src/Client/Adapter/TimeoutAwarePsr18Adapter.php
+++ b/src/Client/Adapter/TimeoutAwarePsr18Adapter.php
@@ -27,14 +27,14 @@ class TimeoutAwarePsr18Adapter implements AdapterInterface, TimeoutAwareInterfac
   /**
    * Solarium Psr18 Adapter.
    *
-   * @var \Solarium\Core\Client\Adapter\Psr18Adapter
+   * @var Psr18Adapter
    */
   protected $psr18Adapter;
 
   /**
    * Constructor of TimeoutAwarePsr18Adapter.
    *
-   * @param \Psr\Http\Client\ClientInterface $httpClient
+   * @param ClientInterface $httpClient
    *   Guzzle HTTP Client.
    */
   public function __construct(ClientInterface $httpClient) {
@@ -68,12 +68,12 @@ class TimeoutAwarePsr18Adapter implements AdapterInterface, TimeoutAwareInterfac
   /**
    * Executes request.
    *
-   * @param \Solarium\Core\Client\Request $request
+   * @param Request $request
    *   Solarium Request.
-   * @param \Solarium\Core\Client\Endpoint $endpoint
+   * @param Endpoint $endpoint
    *   Solarium Endpoint.
    *
-   * @return \Solarium\Core\Client\Response
+   * @return Response
    *   Solarium response object.
    */
   public function execute(Request $request, Endpoint $endpoint): Response {
diff --git a/src/Commands/AcquiaSearchCommands.php b/src/Commands/AcquiaSearchCommands.php
index 2daaebb..d8e89de 100644
--- a/src/Commands/AcquiaSearchCommands.php
+++ b/src/Commands/AcquiaSearchCommands.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\acquia_search\Commands;
 
+use Drupal\acquia_search\PreferredSearchCoreService;
 use Drupal\acquia_connector\Subscription;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ -23,21 +24,21 @@ class AcquiaSearchCommands extends DrushCommands {
   /**
    * Cache service.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   private $cache;
 
   /**
    * Core service.
    *
-   * @var \Drupal\acquia_search\PreferredSearchCoreService
+   * @var PreferredSearchCoreService
    */
   private $preferredCoreService;
 
   /**
    * AcquiaSearchCommands constructor.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   Cache backend service.
    */
   public function __construct(CacheBackendInterface $cache) {
diff --git a/src/EventSubscriber/SearchSubscriber.php b/src/EventSubscriber/SearchSubscriber.php
index 4e80c83..1c2722b 100644
--- a/src/EventSubscriber/SearchSubscriber.php
+++ b/src/EventSubscriber/SearchSubscriber.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\acquia_search\EventSubscriber;
 
+use Solarium\Core\Client\Client;
+use Solarium\Core\Client\Request;
 use Drupal\acquia_connector\CryptConnector;
 use Drupal\acquia_connector\Helper\Storage;
 use Drupal\Component\Utility\Crypt;
@@ -21,7 +23,7 @@ class SearchSubscriber extends AbstractPlugin implements EventSubscriberInterfac
   /**
    * Solarium client.
    *
-   * @var \Solarium\Core\Client\Client
+   * @var Client
    */
   protected $client;
 
@@ -59,7 +61,7 @@ class SearchSubscriber extends AbstractPlugin implements EventSubscriberInterfac
   /**
    * Build Acquia Search Solr Authenticator.
    *
-   * @param \Drupal\search_api_solr\Solarium\EventDispatcher\EventProxy $event
+   * @param EventProxy $event
    *   PreExecuteRequest event.
    */
   public function preExecuteRequest(EventProxy $event) {
@@ -68,7 +70,7 @@ class SearchSubscriber extends AbstractPlugin implements EventSubscriberInterfac
       return;
     }
 
-    /** @var \Solarium\Core\Client\Request $request */
+    /** @var Request $request */
     $request = $event->getRequest();
     $request->addParam('request_id', uniqid(), TRUE);
     // If we're hosted on Acquia, and have an Acquia request ID,
@@ -99,10 +101,10 @@ class SearchSubscriber extends AbstractPlugin implements EventSubscriberInterfac
   /**
    * Validate response.
    *
-   * @param \Drupal\search_api_solr\Solarium\EventDispatcher\EventProxy $event
+   * @param EventProxy $event
    *   postExecuteRequest event.
    *
-   * @throws \Solarium\Exception\HttpException
+   * @throws HttpException
    */
   public function postExecuteRequest(EventProxy $event) {
     // If no client exists, its not an acquia solr server.
@@ -123,17 +125,17 @@ class SearchSubscriber extends AbstractPlugin implements EventSubscriberInterfac
   /**
    * Validate the hmac for the response body.
    *
-   * @param \Solarium\Core\Client\Response $response
+   * @param Response $response
    *   Solarium Response.
    * @param string $nonce
    *   Nonce.
    * @param string $url
    *   Url.
    *
-   * @return \Solarium\Core\Client\Response
+   * @return Response
    *   Solarium Response.
    *
-   * @throws \Solarium\Exception\HttpException
+   * @throws HttpException
    */
   protected function authenticateResponse(Response $response, $nonce, $url) {
     $hmac = $this->extractHmac($response->getHeaders());
diff --git a/src/Plugin/SolrConnector/SearchApiSolrAcquiaConnector.php b/src/Plugin/SolrConnector/SearchApiSolrAcquiaConnector.php
index e3bddd6..32b5579 100644
--- a/src/Plugin/SolrConnector/SearchApiSolrAcquiaConnector.php
+++ b/src/Plugin/SolrConnector/SearchApiSolrAcquiaConnector.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\acquia_search\Plugin\SolrConnector;
 
+use Drupal\acquia_search\EventSubscriber\SearchSubscriber;
 use Drupal\acquia_connector\Helper\Storage;
 use Drupal\acquia_search\Client\Adapter\TimeoutAwarePsr18Adapter;
 use Drupal\acquia_search\PreferredSearchCoreService;
@@ -29,7 +30,7 @@ class SearchApiSolrAcquiaConnector extends SolrConnectorPluginBase {
   /**
    * Event subscriber.
    *
-   * @var \Drupal\acquia_search\EventSubscriber\SearchSubscriber
+   * @var SearchSubscriber
    */
   protected $searchSubscriber;
 
@@ -102,7 +103,7 @@ class SearchApiSolrAcquiaConnector extends SolrConnectorPluginBase {
    *
    * @param array $configuration
    *   Solr connection configuration.
-   * @param \Drupal\acquia_search\PreferredSearchCoreService $preferred_core_service
+   * @param PreferredSearchCoreService $preferred_core_service
    *   Service for determining the preferred search core.
    *
    * @return array
diff --git a/tests/modules/acquia_search_test/src/EventSubscriber/AcquiaSearchTestSubscriber.php b/tests/modules/acquia_search_test/src/EventSubscriber/AcquiaSearchTestSubscriber.php
index 18d042e..cce5b30 100644
--- a/tests/modules/acquia_search_test/src/EventSubscriber/AcquiaSearchTestSubscriber.php
+++ b/tests/modules/acquia_search_test/src/EventSubscriber/AcquiaSearchTestSubscriber.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\acquia_search_test\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -14,10 +14,10 @@ class AcquiaSearchTestSubscriber implements EventSubscriberInterface {
   /**
    * Injects $_GET parameters from URLs into the some global $_ENV.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The Event to process.
    */
-  public function checkForOverrides(GetResponseEvent $event) {
+  public function checkForOverrides(RequestEvent $event) {
     if ($event->getRequest()->query->get('env-overrides')) {
       $allowed_keys = [
         'AH_SITE_ENVIRONMENT',
diff --git a/tests/src/Functional/AcquiaConnectorSearchOverrideTest.php b/tests/src/Functional/AcquiaConnectorSearchOverrideTest.php
index 2547761..f6360a7 100644
--- a/tests/src/Functional/AcquiaConnectorSearchOverrideTest.php
+++ b/tests/src/Functional/AcquiaConnectorSearchOverrideTest.php
@@ -74,7 +74,7 @@ class AcquiaConnectorSearchOverrideTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
 
     parent::setUp();
     // Generate and store a random set of credentials.
@@ -118,7 +118,10 @@ class AcquiaConnectorSearchOverrideTest extends BrowserTestBase {
 
     $this->drupalGet('/admin/config/search/search-api/server/' . $this->server);
 
-    $this->assertText('automatically enforced read-only mode on this connection.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('automatically enforced read-only mode on this connection.');
 
     //phpcs:disable
     //$delete_btn = $this->xpath('//input[@value="Delete all indexed data on this server"]');
@@ -127,7 +130,10 @@ class AcquiaConnectorSearchOverrideTest extends BrowserTestBase {
 
     $this->drupalGet('/admin/config/search/search-api/index/' . $this->index);
 
-    $this->assertText('automatically enforced read-only mode on this connection.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('automatically enforced read-only mode on this connection.');
 
   }
 
@@ -147,8 +153,14 @@ class AcquiaConnectorSearchOverrideTest extends BrowserTestBase {
 
     $this->drupalGet('/admin/config/search/search-api/server/' . $this->server, ['query' => $overrides]);
 
-    $this->assertNoText('automatically enforced read-only mode on this connection.');
-    $this->assertNoText('The following Acquia Search Solr index IDs would have worked for your current environment');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('automatically enforced read-only mode on this connection.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('The following Acquia Search Solr index IDs would have worked for your current environment');
 
     //phpcs:disable
     //$delete_btn = $this->xpath('//input[@value="Delete all indexed data on this server"]');
@@ -157,8 +169,14 @@ class AcquiaConnectorSearchOverrideTest extends BrowserTestBase {
 
     $this->drupalGet('/admin/config/search/search-api/index/' . $this->index, ['query' => $overrides]);
 
-    $this->assertNoText('automatically enforced read-only mode on this connection.');
-    $this->assertNoText('The following Acquia Search Solr index IDs would have worked for your current environment');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('automatically enforced read-only mode on this connection.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('The following Acquia Search Solr index IDs would have worked for your current environment');
 
   }
 
@@ -179,11 +197,23 @@ class AcquiaConnectorSearchOverrideTest extends BrowserTestBase {
 
     $this->drupalGet('/admin/config/search/search-api/server/' . $this->server, ['query' => $overrides]);
 
-    $this->assertText('automatically enforced read-only mode on this connection.');
-
-    $this->assertText('The following Acquia Search Solr index IDs would have worked for your current environment');
-    $this->assertText($this->id . '.test.' . $this->getDbName());
-    $this->assertText($this->id . '.test.' . $this->getSiteFolderName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('automatically enforced read-only mode on this connection.');
+
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The following Acquia Search Solr index IDs would have worked for your current environment');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->id . '.test.' . $this->getDbName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->id . '.test.' . $this->getSiteFolderName());
 
     //phpcs:disable
     //$delete_btn = $this->xpath('//input[@value="Delete all indexed data on this server"]');
@@ -193,7 +223,10 @@ class AcquiaConnectorSearchOverrideTest extends BrowserTestBase {
     $this->drupalGet('/admin/config/search/search-api/index/' . $this->index, ['query' => $overrides]);
 
     // On index edit page, check the read-only mode state.
-    $this->assertText('automatically enforced read-only mode on this connection.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('automatically enforced read-only mode on this connection.');
 
   }
 
@@ -213,11 +246,23 @@ class AcquiaConnectorSearchOverrideTest extends BrowserTestBase {
 
     $this->drupalGet('/admin/config/search/search-api/server/' . $this->server, ['query' => $overrides]);
 
-    $this->assertText('automatically enforced read-only mode on this connection.');
-
-    $this->assertText('The following Acquia Search Solr index IDs would have worked for your current environment');
-    $this->assertText($this->id . '.prod.' . $this->getDbName());
-    $this->assertText($this->id . '.prod.' . $this->getSiteFolderName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('automatically enforced read-only mode on this connection.');
+
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The following Acquia Search Solr index IDs would have worked for your current environment');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->id . '.prod.' . $this->getDbName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->id . '.prod.' . $this->getSiteFolderName());
 
     //phpcs:disable
     //$delete_btn = $this->xpath('//input[@value="Delete all indexed data on this server"]');
@@ -226,7 +271,10 @@ class AcquiaConnectorSearchOverrideTest extends BrowserTestBase {
 
     $this->drupalGet('/admin/config/search/search-api/index/' . $this->index, ['query' => $overrides]);
 
-    $this->assertText('automatically enforced read-only mode on this connection.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('automatically enforced read-only mode on this connection.');
 
   }
 
@@ -247,8 +295,14 @@ class AcquiaConnectorSearchOverrideTest extends BrowserTestBase {
 
     $this->drupalGet('/admin/config/search/search-api/server/' . $this->server, ['query' => $overrides]);
 
-    $this->assertNoText('automatically enforced read-only mode on this connection.');
-    $this->assertNoText('The following Acquia Search Solr index IDs would have worked for your current environment');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('automatically enforced read-only mode on this connection.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('The following Acquia Search Solr index IDs would have worked for your current environment');
 
     //phpcs:disable
     //$delete_btn = $this->xpath('//input[@value="Delete all indexed data on this server"]');
@@ -257,8 +311,14 @@ class AcquiaConnectorSearchOverrideTest extends BrowserTestBase {
 
     $this->drupalGet('/admin/config/search/search-api/index/' . $this->index, ['query' => $overrides]);
 
-    $this->assertNoText('automatically enforced read-only mode on this connection.');
-    $this->assertNoText('The following Acquia Search Solr index IDs would have worked for your current environment');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('automatically enforced read-only mode on this connection.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('The following Acquia Search Solr index IDs would have worked for your current environment');
 
   }
 
@@ -279,7 +339,8 @@ class AcquiaConnectorSearchOverrideTest extends BrowserTestBase {
     ];
 
     $submit_button = 'Connect';
-    $this->drupalPostForm('admin/config/system/acquia-connector/credentials', $edit_fields, $submit_button);
+    $this->drupalGet('admin/config/system/acquia-connector/credentials');
+    $this->submitForm($edit_fields, $submit_button);
 
     \Drupal::service('module_installer')->install(['acquia_search']);
   }
