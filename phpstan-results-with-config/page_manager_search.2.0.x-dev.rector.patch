diff --git a/page_manager_search.info.yml b/page_manager_search.info.yml
index ea435f5..5c8a600 100644
--- a/page_manager_search.info.yml
+++ b/page_manager_search.info.yml
@@ -2,6 +2,6 @@ name: 'Page Manager Search'
 description: 'Integration Page Manager with core Search and Search API'
 type: module
 package: search
-core_version_requirement: ^8.8 || ^9
+core_version_requirement: ^8.8 || ^9 || ^10
 dependencies:
   - page_manager
diff --git a/page_manager_search.module b/page_manager_search.module
index f820cd1..e986a2e 100755
--- a/page_manager_search.module
+++ b/page_manager_search.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\page_manager\Entity\Page;
+use Drupal\Core\Language\LanguageInterface;
+use Drupal\config_translation\ConfigEntityMapper;
 /**
  * @file
  * Main file of module.
@@ -21,12 +24,12 @@ function page_manager_search_entity_insert(EntityInterface $entity) {
   if (!_page_manager_entity_is_instanceof_page_variant($entity)) {
     return;
   }
-  /** @var \Drupal\page_manager\PageVariantInterface $entity */
+  /** @var PageVariantInterface $entity */
   if (!_page_manager_check_if_need_index_page_variant($entity)) {
     return;
   }
 
-  /** @var \Drupal\page_manager\Entity\Page $page */
+  /** @var Page $page */
   $page = $entity->getPage();
 
   foreach (_page_manager_search_get_selected_languages($entity) as $langcode) {
@@ -53,8 +56,7 @@ function page_manager_search_entity_presave(EntityInterface $entity) {
   if (!_page_manager_entity_is_instanceof_page_variant($entity)) {
     return;
   }
-  /** @var \Drupal\page_manager\PageVariantInterface $entity */
-
+  /** @var PageVariantInterface $entity */
   // Get index_page_variant value.
   $index_page_value = $entity->getThirdPartySetting('page_manager_search', 'index_page_variant');
 
@@ -94,13 +96,13 @@ function page_manager_search_entity_update(EntityInterface $entity) {
   if (!_page_manager_entity_is_instanceof_page_variant($entity)) {
     return;
   }
-  /** @var \Drupal\page_manager\PageVariantInterface $entity */
+  /** @var PageVariantInterface $entity */
   if (!_page_manager_check_if_need_index_page_variant($entity)) {
     _page_manager_delete_page_manager_search_entities_by_id($entity->id());
     return;
   }
 
-  /** @var \Drupal\page_manager\Entity\Page $page */
+  /** @var Page $page */
   $page = $entity->getPage();
 
   foreach (_page_manager_search_get_selected_languages($entity) as $langcode) {
@@ -141,7 +143,7 @@ function page_manager_search_entity_update(EntityInterface $entity) {
 /**
  * Get selected languages to index.
  *
- * @param \Drupal\page_manager\PageVariantInterface $entity
+ * @param PageVariantInterface $entity
  *   Page Variant entity.
  *
  * @return array
@@ -163,7 +165,7 @@ function _page_manager_search_get_selected_languages(PageVariantInterface $entit
 /**
  * Get a rendered page variant.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity to render.
  * @param string $langcode
  *   (optional) For which language the entity should be rendered, defaults to
@@ -223,7 +225,7 @@ function _page_manager_search_get_entities($pid, $langcode = NULL) {
 /**
  * Get all available languages.
  *
- * @return \Drupal\Core\Language\LanguageInterface[]
+ * @return LanguageInterface[]
  *   An associative array of languages, keyed by the language code.
  */
 function _page_manager_search_get_available_languages() {
@@ -262,7 +264,7 @@ function _page_manager_delete_page_manager_search_entities_by_id($id) {
 /**
  * Get page variant translations.
  *
- * @param \Drupal\page_manager\PageVariantInterface $page_variant
+ * @param PageVariantInterface $page_variant
  *   Page variant.
  *
  * @return array
@@ -283,7 +285,7 @@ function _page_manager_search_get_variant_translations(PageVariantInterface $pag
   $mapper_id = $page_variant->getEntityTypeId();
   $mapper_definition = $config_translation_mapper->getDefinition($mapper_id);
 
-  /** @var \Drupal\config_translation\ConfigEntityMapper $mapper */
+  /** @var ConfigEntityMapper $mapper */
   $mapper = $config_translation_mapper->createInstance($mapper_id, $mapper_definition);
   if (!$mapper) {
     throw new NotFoundHttpException();
@@ -311,7 +313,7 @@ function page_manager_search_form_alter(&$form, FormStateInterface $form_state,
   }
 
   $cached_values = $form_state->getTemporaryValue('wizard');
-  /** @var \Drupal\page_manager\Entity\PageVariant $page_variant */
+  /** @var PageVariant $page_variant */
   $page_variant = $cached_values['page_variant'];
 
   // Get index_page_variant value.
@@ -367,13 +369,13 @@ function page_manager_search_form_alter(&$form, FormStateInterface $form_state,
  *
  * @param array $form
  *   An associative array containing the structure of the form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current state of the form.
  */
 function page_manager_search_page_variant_submit(array $form, FormStateInterface $form_state) {
   $cached_values = $form_state->getTemporaryValue('wizard');
 
-  /** @var \Drupal\page_manager\Entity\PageVariant $page_variant */
+  /** @var PageVariant $page_variant */
   $page_variant = $cached_values['page_variant'];
   $index_page_variant = $form_state->getValue('variant_settings')['include_in_search_results'];
   $languages_selection_mode = $form_state->getValue('variant_settings')['languages']['selection_mode'];
@@ -400,7 +402,7 @@ function page_manager_search_page_variant_submit(array $form, FormStateInterface
 /**
  * Check if entity is instance of PageVariant.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity.
  *
  * @return bool
@@ -413,7 +415,7 @@ function _page_manager_entity_is_instanceof_page_variant(EntityInterface $entity
 /**
  * Check if need to index PageVariant.
  *
- * @param \Drupal\page_manager\PageVariantInterface $entity
+ * @param PageVariantInterface $entity
  *   The PageVariant entity.
  *
  * @return bool
diff --git a/src/EventSubscriber/PageManagerSearchRedirect.php b/src/EventSubscriber/PageManagerSearchRedirect.php
index aa911cd..a0f411a 100755
--- a/src/EventSubscriber/PageManagerSearchRedirect.php
+++ b/src/EventSubscriber/PageManagerSearchRedirect.php
@@ -7,9 +7,9 @@
 
 namespace Drupal\page_manager_search\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 
 
@@ -22,7 +22,7 @@ use Symfony\Component\EventDispatcher\EventSubscriberInterface;
  */
 class PageManagerSearchRedirect implements EventSubscriberInterface {
 
-  public function checkForRedirection(GetResponseEvent $event) {
+  public function checkForRedirection(RequestEvent $event) {
     $baseUrl = $event->getRequest()->getBaseUrl();
     $attr = $event->getRequest()->attributes;
 
diff --git a/src/Language/LanguageSwitcher.php b/src/Language/LanguageSwitcher.php
index 1707c21..92f6bb6 100644
--- a/src/Language/LanguageSwitcher.php
+++ b/src/Language/LanguageSwitcher.php
@@ -27,21 +27,21 @@ class LanguageSwitcher implements LanguageSwitcherInterface {
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The default language.
    *
-   * @var \Drupal\Core\Language\LanguageDefault
+   * @var LanguageDefault
    */
   protected $languageDefault;
 
   /**
    * The write-safe session handler.
    *
-   * @var \Drupal\Core\Session\WriteSafeSessionHandlerInterface
+   * @var WriteSafeSessionHandlerInterface
    */
   protected $writeSafeHandler;
 
@@ -55,11 +55,11 @@ class LanguageSwitcher implements LanguageSwitcherInterface {
   /**
    * Constructs a new LanguageSwitcher.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Language\LanguageDefault $language_default
+   * @param LanguageDefault $language_default
    *   The default language.
-   * @param \Drupal\Core\Session\WriteSafeSessionHandlerInterface $write_safe_handler
+   * @param WriteSafeSessionHandlerInterface $write_safe_handler
    *   The write-safe session handler.
    */
   public function __construct(LanguageManagerInterface $language_manager, LanguageDefault $language_default, WriteSafeSessionHandlerInterface $write_safe_handler) {
diff --git a/src/Plugin/Search/PageManagerSearch.php b/src/Plugin/Search/PageManagerSearch.php
index 9bfee4f..8e9865c 100755
--- a/src/Plugin/Search/PageManagerSearch.php
+++ b/src/Plugin/Search/PageManagerSearch.php
@@ -38,49 +38,49 @@ class PageManagerSearch extends SearchPluginBase implements AccessibleInterface,
   /**
    * A database connection object.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * An entity manager object.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityManager;
 
   /**
    * A module handler object.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * A config object for 'search.settings'.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $searchSettings;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The Drupal account to use for checking for access to advanced search.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
 
   /**
    * The Renderer service to format the username and entity.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -119,17 +119,17 @@ class PageManagerSearch extends SearchPluginBase implements AccessibleInterface,
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   A database connection object.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   An entity manager object.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   A module handler object.
-   * @param \Drupal\Core\Config\Config $search_settings
+   * @param Config $search_settings
    *   A config object for 'search.settings'.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The $account object to use for checking for access to advanced search.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, Connection $database, EntityTypeManagerInterface $entity_manager, ModuleHandlerInterface $module_handler, Config $search_settings, LanguageManagerInterface $language_manager, RendererInterface $renderer, AccountInterface $account = NULL) {
@@ -188,7 +188,7 @@ class PageManagerSearch extends SearchPluginBase implements AccessibleInterface,
    * This method can assume that $this->isSearchExecutable() has already been
    * checked and returned TRUE.
    *
-   * @return \Drupal\Core\Database\StatementInterface|null
+   * @return StatementInterface|null
    *   Results from search query execute() method, or NULL if the search
    *   failed.
    */
@@ -269,7 +269,7 @@ class PageManagerSearch extends SearchPluginBase implements AccessibleInterface,
   /**
    * Prepares search results for rendering.
    *
-   * @param \Drupal\Core\Database\StatementInterface $found
+   * @param StatementInterface $found
    *   Results found from a successful search query execute() method.
    *
    * @return array
@@ -386,7 +386,7 @@ class PageManagerSearch extends SearchPluginBase implements AccessibleInterface,
   /**
    * Indexes a single Page Manager Search.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    */
   protected function indexPageManagerSearch(ContentEntityInterface $entity) {
     $languages = $entity->getTranslationLanguages();
