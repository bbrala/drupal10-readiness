modules/contrib/search_api_algolia/search_api_algolia.api.php
modules/contrib/search_api_algolia/search_api_algolia.install
modules/contrib/search_api_algolia/search_api_algolia.module
modules/contrib/search_api_algolia/src/Commands/SearchApiAlgoliaCommands.php
modules/contrib/search_api_algolia/src/Plugin/search_api/backend/SearchApiAlgoliaBackend.php
modules/contrib/search_api_algolia/src/SearchApiAlgoliaHelper.php

5 files with changes
====================

1) modules/contrib/search_api_algolia/src/SearchApiAlgoliaHelper.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManager
+   * @var LanguageManager
    */
   protected $languageManager;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Constructs a new class instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Language\LanguageManager $language_manager
+   * @param LanguageManager $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   Database connection object.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager,
@@ @@
    * Deletes all entries for this entity from the tracking table for each index
    * that tracks this entity type.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The deleted entity.
    *
    * @see search_api_algolia_entity_delete()
@@ @@
    *
    * This items will be deleted via drush command sapia-d.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   Index.
    * @param array $item_ids
    *   Items to delete.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/search_api_algolia/src/Plugin/search_api/backend/SearchApiAlgoliaBackend.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\search_api_algolia\Plugin\search_api\backend;

+use Drupal\search_api\SearchApiException;
+use Drupal\search_api\Item\FieldInterface;
+use Drupal\search_api\Query\Condition;
+use Drupal\search_api_autocomplete\SearchInterface;
+use Drupal\search_api_autocomplete\Suggestion\SuggestionFactory;
 use Algolia\AlgoliaSearch\SearchClient;
 use Algolia\AlgoliaSearch\Exceptions\AlgoliaException;
 use Algolia\AlgoliaSearch\SearchIndex;
@@ @@
   /**
    * Algolia Index.
    *
-   * @var \Algolia\AlgoliaSearch\SearchIndex
+   * @var SearchIndex
    */
   protected $algoliaIndex = NULL;

@@ @@
   /**
    * A connection to the Algolia server.
    *
-   * @var \Algolia\AlgoliaSearch\SearchClient
+   * @var SearchClient
    */
   protected $algoliaClient;

@@ @@
   /**
    * The logger to use for logging messages.
    *
-   * @var \Psr\Log\LoggerInterface|null
+   * @var LoggerInterface|null
    */
   protected $logger;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Search API Algolia Helper service.
    *
-   * @var \Drupal\search_api_algolia\SearchApiAlgoliaHelper
+   * @var SearchApiAlgoliaHelper
    */
   protected $helper;

@@ @@
       $container->get('search_api_algolia.helper')
     );

-    /** @var \Drupal\Core\Extension\ModuleHandlerInterface $module_handler */
+    /** @var ModuleHandlerInterface $module_handler */
     $module_handler = $container->get('module_handler');
     $backend->setModuleHandler($module_handler);

-    /** @var \Psr\Log\LoggerInterface $logger */
+    /** @var LoggerInterface $logger */
     $logger = $container->get('logger.channel.search_api_algolia');
     $backend->setLogger($logger);

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws SearchApiException
    */
   public function removeIndex($index) {
     // Only delete the index's data if the index isn't read-only.
@@ @@
   public function indexItems(IndexInterface $index, array $items) {
     $objects = [];

-    /** @var \Drupal\search_api\Item\ItemInterface $item */
+    /** @var ItemInterface $item */
     foreach ($items as $id => $item) {
       $objects[$id] = $this->prepareItem($index, $item);
     }
@@ @@
   /**
    * Indexes a single item on the specified index.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index for which the item is being indexed.
-   * @param \Drupal\search_api\Item\ItemInterface $item
+   * @param ItemInterface $item
    *   The item to index.
    */
   protected function indexItem(IndexInterface $index, ItemInterface $item) {
@@ @@
    *
    * Used as a helper method in indexItem()/indexItems().
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   Index.
-   * @param \Drupal\search_api\Item\ItemInterface $item
+   * @param ItemInterface $item
    *   The item to index.
    *
    * @return array
@@ @@
     $item_fields = $item->getFields();
     $item_fields += $this->getSpecialFields($index, $item);

-    /** @var \Drupal\search_api\Item\FieldInterface $field */
+    /** @var FieldInterface $field */
     foreach ($item_fields as $field) {
       $type = $field->getType();
       $values = NULL;
@@ @@
    *
    * @param array $objects
    *   An array of objects ready to be indexed, generated from $items array.
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The search index for which items are being indexed.
    * @param array $items
    *   An array of items being indexed.
@@ @@
   /**
    * Creates a connection to the Algolia Search server as configured.
    *
-   * @param \Drupal\search_api\IndexInterface|null $index
+   * @param IndexInterface|null $index
    *   Index to connect to.
    * @param string $index_suffix
    *   Index suffix, specified when connecting to replica or query suggestion.
@@ @@
   /**
    * Retrieves the logger to use.
    *
-   * @return \Psr\Log\LoggerInterface
+   * @return LoggerInterface
    *   The logger to use.
    */
   public function getLogger() {
@@ @@
   /**
    * Sets the logger to use.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger to use.
    *
    * @return $this
@@ @@
   /**
    * Returns the module handler to use for this plugin.
    *
-   * @return \Drupal\Core\Extension\ModuleHandlerInterface
+   * @return ModuleHandlerInterface
    *   The module handler.
    */
   public function getModuleHandler() {
@@ @@
   /**
    * Sets the module handler to use for this plugin.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to use for this plugin.
    *
    * @return $this
@@ @@
   /**
    * Returns the AlgoliaSearch client.
    *
-   * @return \Algolia\AlgoliaSearch\SearchClient
+   * @return SearchClient
    *   The algolia instance object.
    */
   public function getAlgolia() {
@@ @@
   /**
    * Extract conditions.
    *
-   * @param \Drupal\search_api\Query\ConditionGroupInterface $condition_group
+   * @param ConditionGroupInterface $condition_group
    *   Condition group.
    * @param array $options
    *   Algolia options to updatesearch_api_algolia.module.
@@ @@

       $field = $condition->getField();

-      /** @var \Drupal\search_api\Query\Condition $condition */
+      /** @var Condition $condition */
       // We support limited operators for now.
       if ($condition->getOperator() == '=' ) {
         $query = $field . ':' . $condition->getValue();
@@ @@
   /**
    * Implements autocomplete compatible to AutocompleteBackendInterface.
    *
-   * @param \Drupal\search_api\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   A query representing the completed user input so far.
    * @param \Drupal\search_api_autocomplete\SearchInterface $search
    *   An object containing details about the search the user is on, and
@@ @@
    *
    * @see \Drupal\search_api_autocomplete\AutocompleteBackendInterface
    */
-  public function getAutocompleteSuggestions(QueryInterface $query, \Drupal\search_api_autocomplete\SearchInterface $search, $incomplete_key, $user_input) {
+  public function getAutocompleteSuggestions(QueryInterface $query, SearchInterface $search, $incomplete_key, $user_input) {
     // This function will be used only is search_api_autocomplete is enabled
     // and used. We have it here to add the support but it might never be used
     // in normal cases.
@@ @@
     $suggestions = [];

     try {
-      $factory = new \Drupal\search_api_autocomplete\Suggestion\SuggestionFactory($user_input);
+      $factory = new SuggestionFactory($user_input);
     }
     catch (\Exception $e) {
       return $suggestions;
@@ @@
   /**
    * Wrapper function to check if multi-lingual language suffix is enabled.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   Index to check for.
    *
    * @return bool
@@ @@
   /**
    * Get all the languages supported by the Index.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   Index.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/search_api_algolia/src/Commands/SearchApiAlgoliaCommands.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\search_api_algolia\Commands;

+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Algolia\AlgoliaSearch\SearchClient;
 use Drupal\Core\Database\Database;
 use Drush\Commands\DrushCommands;
@@ @@
   /**
    * Logger Factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $drupalLogger;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * SearchApiAlgoliaCommands constructor.
    *
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerChannelFactory
+   * @param LoggerChannelFactoryInterface $loggerChannelFactory
    *   Logger factory.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   Database connection object.
    */
   public function __construct(
@@ @@
    * @usage drush sapia-d --batch-size=100
    *   Fetch and delete objects  in algolia with batch of 100.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function deleteFromAlgolia(array $options = ['batch-size' => NULL]) {
     $batch_size = $options['batch-size'] ?? 100;
@@ @@
    *   The batch current context.
    *
    * @throws \AlgoliaSearch\AlgoliaException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public static function batchProcess(array $object_ids, $index_name, &$context) {
     // Store Algolia Connection credentials in context if not available.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/search_api_algolia/search_api_algolia.module:67

    ---------- begin diff ----------
@@ @@

       $form['options']['algolia_index_list'] = [
         '#type' => 'item',
-        '#markup' => render($element),
+        '#markup' => \Drupal::service('renderer')->render($element),
         '#weight' => 3,
       ];
     }
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector


5) modules/contrib/search_api_algolia/search_api_algolia.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\search_api\Item\ItemInterface;
 /**
  * @file
  * Hooks provided by the Search API Algolia search module.
@@ @@
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Alter Algolia objects before they are sent to Algolia for indexing.
  *
  * @param array $objects
  *   An array of objects ready to be indexed, generated from $items array.
- * @param \Drupal\search_api\IndexInterface $index
+ * @param IndexInterface $index
  *   The search index for which items are being indexed.
- * @param \Drupal\search_api\Item\ItemInterface[] $items
+ * @param ItemInterface[] $items
  *   An array of items to be indexed, keyed by their item IDs.
  */
-function hook_search_api_algolia_objects_alter(array &$objects, \Drupal\search_api\IndexInterface $index, array $items) {
+function hook_search_api_algolia_objects_alter(array &$objects, IndexInterface $index, array $items) {
   // Adds a "foo" field with value "bar" to all documents.
   foreach ($objects as $key => $object) {
     $objects[$key]['foo'] = 'bar';
@@ @@
  *
  * @param array $sorts
  *   Sorts from query.
- * @param \Drupal\search_api\IndexInterface $index
+ * @param IndexInterface $index
  *   Index.
  */
 function hook_search_api_algolia_sorts_alter(array &$sorts, IndexInterface $index) {
    ----------- end diff -----------

 [OK] 5 files have been changed by Rector                                       

