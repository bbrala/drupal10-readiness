diff --git a/src/Cache/Context/CountryCacheContext.php b/src/Cache/Context/CountryCacheContext.php
index ea24123..f88cde3 100644
--- a/src/Cache/Context/CountryCacheContext.php
+++ b/src/Cache/Context/CountryCacheContext.php
@@ -16,14 +16,14 @@ class CountryCacheContext implements CacheContextInterface {
   /**
    * The current country.
    *
-   * @var \Drupal\price\CurrentCountry
+   * @var CurrentCountry
    */
   protected $currentCountry;
 
   /**
    * Constructs a new CountryCacheContext object.
    *
-   * @param \Drupal\price\CurrentCountry $country
+   * @param CurrentCountry $country
    *   The current country.
    */
   public function __construct(CurrentCountry $country) {
diff --git a/src/CurrencyFormatter.php b/src/CurrencyFormatter.php
index 95338ce..0488c47 100644
--- a/src/CurrencyFormatter.php
+++ b/src/CurrencyFormatter.php
@@ -17,11 +17,11 @@ class CurrencyFormatter extends ExternalCurrencyFormatter {
   /**
    * Constructs a new CurrencyFormatter object.
    *
-   * @param \CommerceGuys\Intl\NumberFormat\NumberFormatRepositoryInterface $number_format_repository
+   * @param NumberFormatRepositoryInterface $number_format_repository
    *   The number format repository.
-   * @param \CommerceGuys\Intl\Currency\CurrencyRepositoryInterface $currency_repository
+   * @param CurrencyRepositoryInterface $currency_repository
    *   The currency repository.
-   * @param \Drupal\price\CurrentLocaleInterface $current_locale
+   * @param CurrentLocaleInterface $current_locale
    *   The current locale.
    */
   public function __construct(NumberFormatRepositoryInterface $number_format_repository, CurrencyRepositoryInterface $currency_repository, CurrentLocaleInterface $current_locale) {
diff --git a/src/CurrencyImporter.php b/src/CurrencyImporter.php
index b867eb5..ef67015 100644
--- a/src/CurrencyImporter.php
+++ b/src/CurrencyImporter.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\price;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use CommerceGuys\Intl\Currency\CurrencyRepositoryInterface;
+use Drupal\language\Config\LanguageConfigOverride;
 use CommerceGuys\Addressing\Country\CountryRepository;
 use CommerceGuys\Intl\Currency\CurrencyRepository;
 use CommerceGuys\Intl\Exception\UnknownLocaleException;
@@ -18,30 +21,30 @@ class CurrencyImporter implements CurrencyImporterInterface {
   /**
    * The currency storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The library's currency repository.
    *
-   * @var \CommerceGuys\Intl\Currency\CurrencyRepositoryInterface
+   * @var CurrencyRepositoryInterface
    */
   protected $externalRepository;
 
   /**
    * Creates a new CurrencyImporter object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager) {
@@ -86,7 +89,7 @@ class CurrencyImporter implements CurrencyImporterInterface {
       'symbol' => $currency->getSymbol(),
       'fractionDigits' => $currency->getFractionDigits(),
     ];
-    /** @var \Drupal\price\Entity\CurrencyInterface $entity */
+    /** @var CurrencyInterface $entity */
     $entity = $this->storage->create($values);
     $entity->trustData()->save();
     if ($this->languageManager->isMultilingual()) {
@@ -129,7 +132,7 @@ class CurrencyImporter implements CurrencyImporterInterface {
   /**
    * Imports translations for the given currency entity.
    *
-   * @param \Drupal\price\Entity\CurrencyInterface $currency
+   * @param CurrencyInterface $currency
    *   The currency entity.
    * @param array $langcodes
    *   The langcodes.
@@ -146,7 +149,7 @@ class CurrencyImporter implements CurrencyImporterInterface {
         continue;
       }
 
-      /** @var \Drupal\language\Config\LanguageConfigOverride $config_translation */
+      /** @var LanguageConfigOverride $config_translation */
       $config_translation = $this->languageManager->getLanguageConfigOverride($langcode, $config_name);
       if ($config_translation->isNew()) {
         $config_translation->set('name', $translated_currency->getName());
diff --git a/src/CurrencyImporterInterface.php b/src/CurrencyImporterInterface.php
index 8d177b0..9974e8a 100644
--- a/src/CurrencyImporterInterface.php
+++ b/src/CurrencyImporterInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\price;
 
+use Drupal\price\Entity\CurrencyInterface;
+use CommerceGuys\Intl\Exception\UnknownCurrencyException;
 /**
  * Imports the library-provided currency data into config entities.
  */
@@ -21,10 +23,10 @@ interface CurrencyImporterInterface {
    * @param string $currency_code
    *   The currency code.
    *
-   * @return \Drupal\price\Entity\CurrencyInterface
+   * @return CurrencyInterface
    *   The saved currency entity.
    *
-   * @throws \CommerceGuys\Intl\Exception\UnknownCurrencyException
+   * @throws UnknownCurrencyException
    *   Thrown when the currency couldn't be found in the library definitions.
    */
   public function import($currency_code);
@@ -35,7 +37,7 @@ interface CurrencyImporterInterface {
    * @param string $country_code
    *   The country code.
    *
-   * @return \Drupal\price\Entity\CurrencyInterface|null
+   * @return CurrencyInterface|null
    *   The saved currency entity or NULL if the given country's currency
    *   isn't known.
    *
diff --git a/src/CurrentCountry.php b/src/CurrentCountry.php
index 4139fa3..a86df38 100644
--- a/src/CurrentCountry.php
+++ b/src/CurrentCountry.php
@@ -21,14 +21,14 @@ class CurrentCountry implements CurrentCountryInterface {
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The chain resolver.
    *
-   * @var \Drupal\price\Resolver\ChainCountryResolverInterface
+   * @var ChainCountryResolverInterface
    */
   protected $chainResolver;
 
@@ -42,9 +42,9 @@ class CurrentCountry implements CurrentCountryInterface {
   /**
    * Constructs a new CurrentCountry object.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\price\Resolver\ChainCountryResolverInterface $chain_resolver
+   * @param ChainCountryResolverInterface $chain_resolver
    *   The chain resolver.
    */
   public function __construct(RequestStack $request_stack, ChainCountryResolverInterface $chain_resolver) {
diff --git a/src/CurrentCountryInterface.php b/src/CurrentCountryInterface.php
index 56331bc..00ff79c 100644
--- a/src/CurrentCountryInterface.php
+++ b/src/CurrentCountryInterface.php
@@ -12,7 +12,7 @@ interface CurrentCountryInterface {
   /**
    * Gets the country for the current request.
    *
-   * @return \Drupal\price\Country
+   * @return Country
    *   The country.
    */
   public function getCountry();
diff --git a/src/CurrentLocale.php b/src/CurrentLocale.php
index 9a9fecf..e5383e2 100644
--- a/src/CurrentLocale.php
+++ b/src/CurrentLocale.php
@@ -21,14 +21,14 @@ class CurrentLocale implements CurrentLocaleInterface {
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The chain resolver.
    *
-   * @var \Drupal\price\Resolver\ChainLocaleResolverInterface
+   * @var ChainLocaleResolverInterface
    */
   protected $chainResolver;
 
@@ -42,9 +42,9 @@ class CurrentLocale implements CurrentLocaleInterface {
   /**
    * Constructs a new CurrentLocale object.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\price\Resolver\ChainLocaleResolverInterface $chain_resolver
+   * @param ChainLocaleResolverInterface $chain_resolver
    *   The chain resolver.
    */
   public function __construct(RequestStack $request_stack, ChainLocaleResolverInterface $chain_resolver) {
diff --git a/src/CurrentLocaleInterface.php b/src/CurrentLocaleInterface.php
index 5a111d9..5a7fd60 100644
--- a/src/CurrentLocaleInterface.php
+++ b/src/CurrentLocaleInterface.php
@@ -12,7 +12,7 @@ interface CurrentLocaleInterface {
   /**
    * Gets the locale for the current request.
    *
-   * @return \Drupal\price\Locale
+   * @return Locale
    *   The locale.
    */
   public function getLocale();
diff --git a/src/Element/Number.php b/src/Element/Number.php
index 1f6d2fe..2dd6d65 100644
--- a/src/Element/Number.php
+++ b/src/Element/Number.php
@@ -92,7 +92,7 @@ class Number extends FormElement {
    *
    * @param array $element
    *   The initial price_number form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
@@ -120,7 +120,7 @@ class Number extends FormElement {
    *
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function validateNumber(array $element, FormStateInterface $form_state) {
diff --git a/src/Element/Price.php b/src/Element/Price.php
index d009318..f049f13 100644
--- a/src/Element/Price.php
+++ b/src/Element/Price.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\price\Element;
 
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Drupal\price\Entity\CurrencyInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\Element\FormElement;
 
@@ -65,7 +67,7 @@ class Price extends FormElement {
    *
    * @param array $element
    *   The initial price_price form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
@@ -83,9 +85,9 @@ class Price extends FormElement {
       throw new \InvalidArgumentException('The #default_value for a price_price element must be an array with "number" and "currency_code" keys.');
     }
 
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $currency_storage */
+    /** @var ConfigEntityStorageInterface $currency_storage */
     $currency_storage = \Drupal::service('entity_type.manager')->getStorage('price_currency');
-    /** @var \Drupal\price\Entity\CurrencyInterface[] $currencies */
+    /** @var CurrencyInterface[] $currencies */
     $currencies = $currency_storage->loadMultiple();
     $currency_codes = array_keys($currencies);
     // Keep only available currencies.
@@ -185,7 +187,7 @@ class Price extends FormElement {
    *
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function moveInlineErrors(array $element, FormStateInterface $form_state) {
diff --git a/src/Element/PriceModified.php b/src/Element/PriceModified.php
index ddd9644..de5ca3c 100644
--- a/src/Element/PriceModified.php
+++ b/src/Element/PriceModified.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\price\Element;
 
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Drupal\price\Entity\CurrencyInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\Element\FormElement;
 
@@ -62,7 +64,7 @@ class PriceModified extends FormElement {
    *
    * @param array $element
    *   The initial price_price form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
@@ -80,9 +82,9 @@ class PriceModified extends FormElement {
       throw new \InvalidArgumentException('The #default_value for a price_modified element must be an array with "number", "currency_code" and "modifier" keys.');
     }
 
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $currency_storage */
+    /** @var ConfigEntityStorageInterface $currency_storage */
     $currency_storage = \Drupal::service('entity_type.manager')->getStorage('price_currency');
-    /** @var \Drupal\price\Entity\CurrencyInterface[] $currencies */
+    /** @var CurrencyInterface[] $currencies */
     $currencies = $currency_storage->loadMultiple();
     $currency_codes = array_keys($currencies);
     // Keep only available currencies.
@@ -99,9 +101,9 @@ class PriceModified extends FormElement {
       $fraction_digits[] = $currency->getFractionDigits();
     }
 
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $modifier_storage */
+    /** @var ConfigEntityStorageInterface $modifier_storage */
     $modifier_storage = \Drupal::service('entity_type.manager')->getStorage('price_modifier');
-    /** @var \Drupal\price\Entity\CurrencyInterface[] $currencies */
+    /** @var CurrencyInterface[] $currencies */
     $modifiers = $modifier_storage->loadMultiple();
 
     $modifier_codes = array_keys($modifiers);
diff --git a/src/Event/NumberFormatDefinitionEvent.php b/src/Event/NumberFormatDefinitionEvent.php
index e7fdabe..bdf4edb 100644
--- a/src/Event/NumberFormatDefinitionEvent.php
+++ b/src/Event/NumberFormatDefinitionEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\price\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Defines the number format definition event.
diff --git a/src/Event/NumberFormatEvent.php b/src/Event/NumberFormatEvent.php
index 04c9c49..e9543ad 100644
--- a/src/Event/NumberFormatEvent.php
+++ b/src/Event/NumberFormatEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\price\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Defines the number format event.
diff --git a/src/Form/CurrencyForm.php b/src/Form/CurrencyForm.php
index 9d7ba7a..13614a1 100644
--- a/src/Form/CurrencyForm.php
+++ b/src/Form/CurrencyForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\price\Form;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\price\Entity\CurrencyInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -13,14 +15,14 @@ class CurrencyForm extends EntityForm {
   /**
    * The currency storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;
 
   /**
    * Creates a new CurrencyForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The currency storage.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -31,7 +33,7 @@ class CurrencyForm extends EntityForm {
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container) {
-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
+    /** @var EntityTypeManagerInterface $entity_type_manager */
     $entity_type_manager = $container->get('entity_type.manager');
 
     return new static($entity_type_manager);
@@ -42,7 +44,7 @@ class CurrencyForm extends EntityForm {
    */
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
-    /** @var \Drupal\price\Entity\CurrencyInterface $currency */
+    /** @var CurrencyInterface $currency */
     $currency = $this->entity;
 
     $form['name'] = [
diff --git a/src/Form/CurrencyImportForm.php b/src/Form/CurrencyImportForm.php
index de82251..f4b2ebb 100644
--- a/src/Form/CurrencyImportForm.php
+++ b/src/Form/CurrencyImportForm.php
@@ -15,14 +15,14 @@ class CurrencyImportForm extends FormBase {
   /**
    * The currency importer.
    *
-   * @var \Drupal\price\CurrencyImporterInterface
+   * @var CurrencyImporterInterface
    */
   protected $importer;
 
   /**
    * Creates a new CurrencyImportForm object.
    *
-   * @param \Drupal\price\CurrencyImporterInterface $importer
+   * @param CurrencyImporterInterface $importer
    *   The currency importer.
    */
   public function __construct(CurrencyImporterInterface $importer) {
diff --git a/src/Form/PriceModifierForm.php b/src/Form/PriceModifierForm.php
index cbc9e1c..eaa6031 100644
--- a/src/Form/PriceModifierForm.php
+++ b/src/Form/PriceModifierForm.php
@@ -11,7 +11,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class PriceModifierForm extends EntityForm {
 
   /**
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -85,10 +85,10 @@ class PriceModifierForm extends EntityForm {
     $status = $entity->save();
 
     if ($status == SAVED_UPDATED) {
-      drupal_set_message($this->t($entity_label . ' %label has been updated.', ['%label' => $entity->label()]));
+      $this->messenger()->addStatus($this->t($entity_label . ' %label has been updated.', ['%label' => $entity->label()]));
     }
     else {
-      drupal_set_message($this->t($entity_label . ' %label has been created.', ['%label' => $entity->label()]));
+      $this->messenger()->addStatus($this->t($entity_label . ' %label has been created.', ['%label' => $entity->label()]));
     }
 
     $form_state->setRedirect('entity.' . $entity_type->id() . '.collection');
diff --git a/src/LegacyNumberFormatter.php b/src/LegacyNumberFormatter.php
index c9bedff..cdd50eb 100644
--- a/src/LegacyNumberFormatter.php
+++ b/src/LegacyNumberFormatter.php
@@ -15,7 +15,7 @@ class LegacyNumberFormatter {
   /**
    * The currency formatter.
    *
-   * @var \CommerceGuys\Intl\Formatter\CurrencyFormatterInterface
+   * @var CurrencyFormatterInterface
    */
   protected $currencyFormatter;
 
@@ -29,7 +29,7 @@ class LegacyNumberFormatter {
   /**
    * Constructs a new LegacyNumberFormatter object.
    *
-   * @param \CommerceGuys\Intl\Formatter\CurrencyFormatterInterface $currency_formatter
+   * @param CurrencyFormatterInterface $currency_formatter
    *   The currency formatter.
    */
   public function __construct(CurrencyFormatterInterface $currency_formatter) {
@@ -55,7 +55,7 @@ class LegacyNumberFormatter {
    *
    * @param string $number
    *   The number.
-   * @param \Drupal\price\Entity\CurrencyInterface $currency
+   * @param CurrencyInterface $currency
    *   The currency.
    *
    * @return string
@@ -83,7 +83,7 @@ class LegacyNumberFormatter {
    *
    * @param string $number
    *   The formatted number.
-   * @param \Drupal\price\Entity\CurrencyInterface $currency
+   * @param CurrencyInterface $currency
    *   The currency.
    *
    * @return string|false
diff --git a/src/NumberFormatter.php b/src/NumberFormatter.php
index 79be75a..cb6c893 100644
--- a/src/NumberFormatter.php
+++ b/src/NumberFormatter.php
@@ -16,9 +16,9 @@ class NumberFormatter extends ExternalNumberFormatter {
   /**
    * Constructs a new NumberFormatter object.
    *
-   * @param \CommerceGuys\Intl\NumberFormat\NumberFormatRepositoryInterface $number_format_repository
+   * @param NumberFormatRepositoryInterface $number_format_repository
    *   The number format repository.
-   * @param \Drupal\price\CurrentLocaleInterface $current_locale
+   * @param CurrentLocaleInterface $current_locale
    *   The current locale.
    */
   public function __construct(NumberFormatRepositoryInterface $number_format_repository, CurrentLocaleInterface $current_locale) {
diff --git a/src/NumberFormatterFactory.php b/src/NumberFormatterFactory.php
index 307e7cf..d9060f6 100644
--- a/src/NumberFormatterFactory.php
+++ b/src/NumberFormatterFactory.php
@@ -16,14 +16,14 @@ class NumberFormatterFactory implements NumberFormatterFactoryInterface {
   /**
    * The currency formatter.
    *
-   * @var \CommerceGuys\Intl\Formatter\CurrencyFormatterInterface
+   * @var CurrencyFormatterInterface
    */
   protected $currencyFormatter;
 
   /**
    * Constructs a new NumberFormatterFactory object.
    *
-   * @param \CommerceGuys\Intl\Formatter\CurrencyFormatterInterface $currency_formatter
+   * @param CurrencyFormatterInterface $currency_formatter
    *   The currency formatter.
    */
   public function __construct(CurrencyFormatterInterface $currency_formatter) {
diff --git a/src/NumberFormatterFactoryInterface.php b/src/NumberFormatterFactoryInterface.php
index 1349413..88d240d 100644
--- a/src/NumberFormatterFactoryInterface.php
+++ b/src/NumberFormatterFactoryInterface.php
@@ -12,7 +12,7 @@ interface NumberFormatterFactoryInterface {
   /**
    * Creates an instance of the number formatter for the current locale.
    *
-   * @return \Drupal\price\LegacyNumberFormatter
+   * @return LegacyNumberFormatter
    *   The created number formatter.
    */
   public function createInstance();
diff --git a/src/Plugin/Field/FieldFormatter/PriceDefaultFormatter.php b/src/Plugin/Field/FieldFormatter/PriceDefaultFormatter.php
index c398f61..653a899 100644
--- a/src/Plugin/Field/FieldFormatter/PriceDefaultFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/PriceDefaultFormatter.php
@@ -27,7 +27,7 @@ class PriceDefaultFormatter extends FormatterBase implements ContainerFactoryPlu
   /**
    * The currency formatter.
    *
-   * @var \CommerceGuys\Intl\Formatter\CurrencyFormatterInterface
+   * @var CurrencyFormatterInterface
    */
   protected $currencyFormatter;
 
@@ -38,7 +38,7 @@ class PriceDefaultFormatter extends FormatterBase implements ContainerFactoryPlu
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ -48,7 +48,7 @@ class PriceDefaultFormatter extends FormatterBase implements ContainerFactoryPlu
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \CommerceGuys\Intl\Formatter\CurrencyFormatterInterface $currency_formatter
+   * @param CurrencyFormatterInterface $currency_formatter
    *   The currency formatter.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, CurrencyFormatterInterface $currency_formatter) {
diff --git a/src/Plugin/Field/FieldFormatter/PriceModifiedDefaultFormatter.php b/src/Plugin/Field/FieldFormatter/PriceModifiedDefaultFormatter.php
index ed5f062..2f8d7cd 100644
--- a/src/Plugin/Field/FieldFormatter/PriceModifiedDefaultFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/PriceModifiedDefaultFormatter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\price\Plugin\Field\FieldFormatter;
 
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\price\NumberFormatterFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ -29,21 +30,21 @@ class PriceModifiedDefaultFormatter extends FormatterBase implements ContainerFa
   /**
    * The currency storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $currencyStorage;
 
   /**
    * The modifier storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $modifierStorage;
 
   /**
    * The number formatter.
    *
-   * @var \CommerceGuys\Intl\Formatter\NumberFormatterInterface
+   * @var NumberFormatterInterface
    */
   protected $numberFormatter;
 
@@ -54,7 +55,7 @@ class PriceModifiedDefaultFormatter extends FormatterBase implements ContainerFa
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ -64,9 +65,9 @@ class PriceModifiedDefaultFormatter extends FormatterBase implements ContainerFa
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\price\NumberFormatterFactoryInterface $number_formatter_factory
+   * @param NumberFormatterFactoryInterface $number_formatter_factory
    *   The number formatter factory.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, EntityTypeManagerInterface $entity_type_manager, NumberFormatterFactoryInterface $number_formatter_factory) {
diff --git a/src/Plugin/Field/FieldFormatter/PricePlainFormatter.php b/src/Plugin/Field/FieldFormatter/PricePlainFormatter.php
index e4fae33..b4c188b 100644
--- a/src/Plugin/Field/FieldFormatter/PricePlainFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/PricePlainFormatter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\price\Plugin\Field\FieldFormatter;
 
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemListInterface;
@@ -26,7 +27,7 @@ class PricePlainFormatter extends FormatterBase implements ContainerFactoryPlugi
   /**
    * The currency storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $currencyStorage;
 
@@ -37,7 +38,7 @@ class PricePlainFormatter extends FormatterBase implements ContainerFactoryPlugi
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ -47,7 +48,7 @@ class PricePlainFormatter extends FormatterBase implements ContainerFactoryPlugi
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Plugin/Field/FieldType/PriceItem.php b/src/Plugin/Field/FieldType/PriceItem.php
index 5daacaf..6e05bcc 100644
--- a/src/Plugin/Field/FieldType/PriceItem.php
+++ b/src/Plugin/Field/FieldType/PriceItem.php
@@ -139,7 +139,7 @@ class PriceItem extends FieldItemBase {
   /**
    * Gets the Price value object for the current field item.
    *
-   * @return \Drupal\price\Price
+   * @return Price
    *   The Price value object.
    */
   public function toPrice() {
diff --git a/src/Plugin/Field/FieldType/PriceModifiedItem.php b/src/Plugin/Field/FieldType/PriceModifiedItem.php
index f69b028..eba3bd0 100644
--- a/src/Plugin/Field/FieldType/PriceModifiedItem.php
+++ b/src/Plugin/Field/FieldType/PriceModifiedItem.php
@@ -125,7 +125,7 @@ class PriceModifiedItem extends PriceItem {
   /**
    * Gets the Price value object for the current field item.
    *
-   * @return \Drupal\price\PriceModified
+   * @return PriceModified
    *   The Price value object.
    */
   public function toPrice() {
diff --git a/src/Plugin/Validation/Constraint/CurrencyConstraintValidator.php b/src/Plugin/Validation/Constraint/CurrencyConstraintValidator.php
index caee900..00960c4 100644
--- a/src/Plugin/Validation/Constraint/CurrencyConstraintValidator.php
+++ b/src/Plugin/Validation/Constraint/CurrencyConstraintValidator.php
@@ -18,14 +18,14 @@ class CurrencyConstraintValidator extends ConstraintValidator implements Contain
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new CurrencyConstraintValidator object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Plugin/Validation/Constraint/PriceModifierConstraintValidator.php b/src/Plugin/Validation/Constraint/PriceModifierConstraintValidator.php
index 4992bb9..8cc506b 100644
--- a/src/Plugin/Validation/Constraint/PriceModifierConstraintValidator.php
+++ b/src/Plugin/Validation/Constraint/PriceModifierConstraintValidator.php
@@ -18,14 +18,14 @@ class PriceModifierConstraintValidator extends ConstraintValidator implements Co
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new PriceModifierConstraintValidator object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Price.php b/src/Price.php
index 1295ce2..7dc8b92 100644
--- a/src/Price.php
+++ b/src/Price.php
@@ -273,7 +273,7 @@ final class Price {
    * @param \Drupal\price\Price $second_price
    *   The second price.
    *
-   * @throws \Drupal\price\Exception\CurrencyMismatchException
+   * @throws CurrencyMismatchException
    *   Thrown when the prices do not have the same currency.
    */
   protected function assertSameCurrency(Price $first_price, Price $second_price) {
diff --git a/src/PriceModified.php b/src/PriceModified.php
index 3e4fd69..db4210d 100644
--- a/src/PriceModified.php
+++ b/src/PriceModified.php
@@ -291,7 +291,7 @@ final class PriceModified {
    * @param \Drupal\price\PriceModified $second_price
    *   The second price.
    *
-   * @throws \Drupal\price\Exception\CurrencyMismatchException
+   * @throws CurrencyMismatchException
    *   Thrown when the prices do not have the same currency.
    */
   protected function assertSameCurrency(PriceModified $first_price, PriceModified $second_price) {
diff --git a/src/Repository/CurrencyRepository.php b/src/Repository/CurrencyRepository.php
index f77b3f7..cedd034 100644
--- a/src/Repository/CurrencyRepository.php
+++ b/src/Repository/CurrencyRepository.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\price\Repository;
 
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use CommerceGuys\Intl\Currency\Currency;
 use CommerceGuys\Intl\Currency\CurrencyRepositoryInterface;
 use CommerceGuys\Intl\Exception\UnknownCurrencyException;
@@ -22,14 +23,14 @@ class CurrencyRepository implements CurrencyRepositoryInterface {
   /**
    * The currency storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $currencyStorage;
 
   /**
    * Creates an CurrencyRepository instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -40,7 +41,7 @@ class CurrencyRepository implements CurrencyRepositoryInterface {
    * {@inheritdoc}
    */
   public function get($currency_code, $locale = NULL) {
-    /** @var \Drupal\price\Entity\CurrencyInterface $currency */
+    /** @var CurrencyInterface $currency */
     $currency = $this->currencyStorage->load($currency_code);
     if (!$currency) {
       throw new UnknownCurrencyException($currency_code);
@@ -54,7 +55,7 @@ class CurrencyRepository implements CurrencyRepositoryInterface {
    */
   public function getAll($locale = NULL) {
     $all = [];
-    /** @var \Drupal\price\Entity\CurrencyInterface[] $currencies */
+    /** @var CurrencyInterface[] $currencies */
     $currencies = $this->currencyStorage->loadMultiple();
     foreach ($currencies as $currency_code => $currency) {
       $all[$currency_code] = $this->createValueObjectFromEntity($currency);
@@ -69,7 +70,7 @@ class CurrencyRepository implements CurrencyRepositoryInterface {
    */
   public function getList($locale = NULL) {
     $list = [];
-    /** @var \Drupal\price\Entity\CurrencyInterface[] $entities */
+    /** @var CurrencyInterface[] $entities */
     $currencies = $this->currencyStorage->loadMultiple();
     foreach ($currencies as $currency_code => $currency) {
       $list[$currency_code] = $currency->getName();
@@ -81,10 +82,10 @@ class CurrencyRepository implements CurrencyRepositoryInterface {
   /**
    * Creates a currency value object from the given entity.
    *
-   * @param \Drupal\price\Entity\CurrencyInterface $currency
+   * @param CurrencyInterface $currency
    *   The currency entity.
    *
-   * @return \CommerceGuys\Intl\Currency\Currency
+   * @return Currency
    *   The currency value object.
    */
   protected function createValueObjectFromEntity(CurrencyInterface $currency) {
diff --git a/src/Repository/NumberFormatRepository.php b/src/Repository/NumberFormatRepository.php
index fce3461..7c559ec 100644
--- a/src/Repository/NumberFormatRepository.php
+++ b/src/Repository/NumberFormatRepository.php
@@ -19,14 +19,14 @@ class NumberFormatRepository extends ExternalNumberFormatRepository implements N
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * Creates a NumberFormatRepository instance.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(EventDispatcherInterface $event_dispatcher) {
@@ -42,7 +42,7 @@ class NumberFormatRepository extends ExternalNumberFormatRepository implements N
     $definition = parent::processDefinition($locale, $definition);
     // Let the definition be altered.
     $event = new NumberFormatDefinitionEvent($definition);
-    $this->eventDispatcher->dispatch(PriceEvents::NUMBER_FORMAT, $event);
+    $this->eventDispatcher->dispatch($event, PriceEvents::NUMBER_FORMAT);
     $definition = $event->getDefinition();
 
     return $definition;
diff --git a/src/Resolver/ChainCountryResolver.php b/src/Resolver/ChainCountryResolver.php
index 1e17a35..c9ca7ca 100644
--- a/src/Resolver/ChainCountryResolver.php
+++ b/src/Resolver/ChainCountryResolver.php
@@ -10,14 +10,14 @@ class ChainCountryResolver implements ChainCountryResolverInterface {
   /**
    * The resolvers.
    *
-   * @var \Drupal\price\Resolver\CountryResolverInterface[]
+   * @var CountryResolverInterface[]
    */
   protected $resolvers = [];
 
   /**
    * Constructs a new ChainCountryResolver object.
    *
-   * @param \Drupal\price\Resolver\CountryResolverInterface[] $resolvers
+   * @param CountryResolverInterface[] $resolvers
    *   The resolvers.
    */
   public function __construct(array $resolvers = []) {
diff --git a/src/Resolver/ChainCountryResolverInterface.php b/src/Resolver/ChainCountryResolverInterface.php
index 8239758..daae4f6 100644
--- a/src/Resolver/ChainCountryResolverInterface.php
+++ b/src/Resolver/ChainCountryResolverInterface.php
@@ -13,7 +13,7 @@ interface ChainCountryResolverInterface extends CountryResolverInterface {
   /**
    * Adds a resolver.
    *
-   * @param \Drupal\price\Resolver\CountryResolverInterface $resolver
+   * @param CountryResolverInterface $resolver
    *   The resolver.
    */
   public function addResolver(CountryResolverInterface $resolver);
@@ -21,7 +21,7 @@ interface ChainCountryResolverInterface extends CountryResolverInterface {
   /**
    * Gets all added resolvers.
    *
-   * @return \Drupal\price\Resolver\CountryResolverInterface[]
+   * @return CountryResolverInterface[]
    *   The resolvers.
    */
   public function getResolvers();
diff --git a/src/Resolver/ChainLocaleResolver.php b/src/Resolver/ChainLocaleResolver.php
index 0a96f72..5f493ed 100644
--- a/src/Resolver/ChainLocaleResolver.php
+++ b/src/Resolver/ChainLocaleResolver.php
@@ -10,14 +10,14 @@ class ChainLocaleResolver implements ChainLocaleResolverInterface {
   /**
    * The resolvers.
    *
-   * @var \Drupal\price\Resolver\LocaleResolverInterface[]
+   * @var LocaleResolverInterface[]
    */
   protected $resolvers = [];
 
   /**
    * Constructs a new ChainLocaleResolver object.
    *
-   * @param \Drupal\price\Resolver\LocaleResolverInterface[] $resolvers
+   * @param LocaleResolverInterface[] $resolvers
    *   The resolvers.
    */
   public function __construct(array $resolvers = []) {
diff --git a/src/Resolver/ChainLocaleResolverInterface.php b/src/Resolver/ChainLocaleResolverInterface.php
index 0a28a3d..65e1c44 100644
--- a/src/Resolver/ChainLocaleResolverInterface.php
+++ b/src/Resolver/ChainLocaleResolverInterface.php
@@ -13,7 +13,7 @@ interface ChainLocaleResolverInterface extends LocaleResolverInterface {
   /**
    * Adds a resolver.
    *
-   * @param \Drupal\price\Resolver\LocaleResolverInterface $resolver
+   * @param LocaleResolverInterface $resolver
    *   The resolver.
    */
   public function addResolver(LocaleResolverInterface $resolver);
@@ -21,7 +21,7 @@ interface ChainLocaleResolverInterface extends LocaleResolverInterface {
   /**
    * Gets all added resolvers.
    *
-   * @return \Drupal\price\Resolver\LocaleResolverInterface[]
+   * @return LocaleResolverInterface[]
    *   The resolvers.
    */
   public function getResolvers();
diff --git a/src/Resolver/CountryResolverInterface.php b/src/Resolver/CountryResolverInterface.php
index 6a2533f..87e880d 100644
--- a/src/Resolver/CountryResolverInterface.php
+++ b/src/Resolver/CountryResolverInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\price\Resolver;
 
+use Drupal\price\Country;
 /**
  * Defines the interface for country resolvers.
  */
@@ -10,7 +11,7 @@ interface CountryResolverInterface {
   /**
    * Resolves the country.
    *
-   * @return \Drupal\price\Country|null
+   * @return Country|null
    *   The country object, if resolved. Otherwise NULL, indicating that the next
    *   resolver in the chain should be called.
    */
diff --git a/src/Resolver/DefaultCountryResolver.php b/src/Resolver/DefaultCountryResolver.php
index 293f075..0dcbec5 100644
--- a/src/Resolver/DefaultCountryResolver.php
+++ b/src/Resolver/DefaultCountryResolver.php
@@ -13,14 +13,14 @@ class DefaultCountryResolver implements CountryResolverInterface {
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Constructs a new DefaultCountryResolver object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
diff --git a/src/Resolver/DefaultLocaleResolver.php b/src/Resolver/DefaultLocaleResolver.php
index ab24229..aa6d964 100644
--- a/src/Resolver/DefaultLocaleResolver.php
+++ b/src/Resolver/DefaultLocaleResolver.php
@@ -14,23 +14,23 @@ class DefaultLocaleResolver implements LocaleResolverInterface {
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The current country.
    *
-   * @var \Drupal\price\CurrentCountryInterface
+   * @var CurrentCountryInterface
    */
   protected $currentCountry;
 
   /**
    * Constructs a new DefaultLocaleResolver object.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\price\CurrentCountryInterface $current_country
+   * @param CurrentCountryInterface $current_country
    *   The current country.
    */
   public function __construct(LanguageManagerInterface $language_manager, CurrentCountryInterface $current_country) {
diff --git a/src/Resolver/LocaleResolverInterface.php b/src/Resolver/LocaleResolverInterface.php
index 4ae29d5..390bf2b 100644
--- a/src/Resolver/LocaleResolverInterface.php
+++ b/src/Resolver/LocaleResolverInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\price\Resolver;
 
+use Drupal\price\Locale;
 /**
  * Defines the interface for locale resolvers.
  */
@@ -10,7 +11,7 @@ interface LocaleResolverInterface {
   /**
    * Resolves the locale.
    *
-   * @return \Drupal\price\Locale|null
+   * @return Locale|null
    *   The locale object, if resolved. Otherwise NULL, indicating that the next
    *   resolver in the chain should be called.
    */
diff --git a/src/Rounder.php b/src/Rounder.php
index 8df9c10..9efa936 100644
--- a/src/Rounder.php
+++ b/src/Rounder.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\price;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\price\Entity\CurrencyInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 
 class Rounder implements RounderInterface {
@@ -9,14 +11,14 @@ class Rounder implements RounderInterface {
   /**
    * The currency storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $currencyStorage;
 
   /**
    * Constructs a new Rounder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -28,7 +30,7 @@ class Rounder implements RounderInterface {
    */
   public function round(Price $price, $mode = PHP_ROUND_HALF_UP) {
     $currency_code = $price->getCurrencyCode();
-    /** @var \Drupal\price\Entity\CurrencyInterface $currency */
+    /** @var CurrencyInterface $currency */
     $currency = $this->currencyStorage->load($currency_code);
     if (!$currency) {
       throw new \InvalidArgumentException(sprintf('Could not load the "%s" currency.', $currency_code));
diff --git a/src/RounderInterface.php b/src/RounderInterface.php
index 07028d6..8b45c32 100644
--- a/src/RounderInterface.php
+++ b/src/RounderInterface.php
@@ -12,13 +12,13 @@ interface RounderInterface {
    *
    * For example, USD prices will be rounded to 2 decimals.
    *
-   * @param \Drupal\price\Price $price
+   * @param Price $price
    *   The price.
    * @param int $mode
    *   The rounding mode. One of the following constants: PHP_ROUND_HALF_UP,
    *   PHP_ROUND_HALF_DOWN, PHP_ROUND_HALF_EVEN, PHP_ROUND_HALF_ODD.
    *
-   * @return \Drupal\price\Price
+   * @return Price
    *   The rounded price.
    *
    * @throws \InvalidArgumentException
