modules/contrib/purge_queuer_url/purge_queuer_url.install
modules/contrib/purge_queuer_url/src/Commands/SqlSanitizeCommands.php
modules/contrib/purge_queuer_url/src/Form/ConfigurationForm.php
modules/contrib/purge_queuer_url/src/Plugin/Purge/DiagnosticCheck/RegistryCheck.php
modules/contrib/purge_queuer_url/src/Plugin/Purge/Queuer/UrlAndPathQueuer.php
modules/contrib/purge_queuer_url/src/Plugin/Purge/Queuer/UrlAndPathQueuerPlugin.php
modules/contrib/purge_queuer_url/src/StackMiddleware/UrlRegistrar.php
modules/contrib/purge_queuer_url/src/TrafficRegistry.php
modules/contrib/purge_queuer_url/src/TrafficRegistryInterface.php
modules/contrib/purge_queuer_url/tests/src/Functional/QueuerConfigFormTest.php

7 files with changes
====================

1) modules/contrib/purge_queuer_url/tests/src/Functional/QueuerConfigFormTest.php:48

    ---------- begin diff ----------
@@ @@
     $this->assertSession()->checkboxNotChecked('edit-scheme-override');
     $this->assertSession()->fieldExists('edit-scheme');
     $this->assertSession()->fieldValueEquals('edit-scheme', 'http');
-    $this->assertRaw('Clear traffic history');
+    $this->assertSession()->responseContains('Clear traffic history');
     // Test that direct configuration changes are reflected properly.
     $this->config('purge_queuer_url.settings')
       ->set('queue_paths', TRUE)
    ----------- end diff -----------

Applied rules:
 * AssertRawRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/purge_queuer_url/src/TrafficRegistry.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The active database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Constructs a TrafficRegistry object.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The active database connection.
    */
   public function __construct(Connection $connection) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/purge_queuer_url/src/StackMiddleware/UrlRegistrar.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The wrapped HTTP kernel.
    *
-   * @var \Symfony\Component\HttpKernel\HttpKernelInterface
+   * @var HttpKernelInterface
    */
   protected $httpKernel;

@@ @@
   /**
    * The traffic registry with the stored URLs and tags.
    *
-   * @var \Drupal\purge_queuer_url\TrafficRegistryInterface
+   * @var TrafficRegistryInterface
    */
   protected $registry;

@@ @@
   /**
    * Constructs a UrlRegistrar object.
    *
-   * @param \Symfony\Component\HttpKernel\HttpKernelInterface $http_kernel
+   * @param HttpKernelInterface $http_kernel
    *   The decorated kernel.
-   * @param \Drupal\purge_queuer_url\TrafficRegistryInterface $registry
+   * @param TrafficRegistryInterface $registry
    *   The traffic registry with the stored URLs and tags.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
    */
   public function __construct(HttpKernelInterface $http_kernel, TrafficRegistryInterface $registry, ConfigFactoryInterface $config_factory) {
@@ @@
   /**
    * Determine what to do with the given response object.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   A Request object.
-   * @param \Symfony\Component\HttpFoundation\Response $response
+   * @param Response $response
    *   A Response object.
    *
    * @return true|false|null
@@ @@
   /**
    * Generates the URL or path to register.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   A request object.
    *
    * @return string
@@ @@
    * {@inheritdoc}
    */
   public function handle(Request $request, $type = self::MASTER_REQUEST, $catch = TRUE) {
-    /** @var \Symfony\Component\HttpFoundation\Response|\Drupal\Core\Cache\CacheableResponseInterface$response */
+    /** @var Response|CacheableResponseInterface $response */
     $response = $this->httpKernel->handle($request, $type, $catch);
     $what_to_do = $this->determine($request, $response);
     if ($what_to_do === TRUE) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/purge_queuer_url/src/Plugin/Purge/Queuer/UrlAndPathQueuer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\purge_queuer_url\Plugin\Purge\Queuer;

+use Drupal\purge\Plugin\Purge\Invalidation\InvalidationsServiceInterface;
+use Drupal\purge\Plugin\Purge\Queue\QueueServiceInterface;
+use Drupal\purge_queuer_url\TrafficRegistryInterface;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\purge\Plugin\Purge\Invalidation\Exception\TypeUnsupportedException;
@@ @@
   /**
    * Purge's invalidation object factory.
    *
-   * @var null|\Drupal\purge\Plugin\Purge\Invalidation\InvalidationsServiceInterface
+   * @var null|InvalidationsServiceInterface
    */
   protected $purgeInvalidationFactory;

@@ @@
   /**
    * Purge's queue service.
    *
-   * @var null|\Drupal\purge\Plugin\Purge\Queue\QueueServiceInterface
+   * @var null|QueueServiceInterface
    */
   protected $purgeQueue;

@@ @@
   /**
    * The traffic registry with the stored URLs and tags.
    *
-   * @var null|\Drupal\purge_queuer_url\TrafficRegistryInterface
+   * @var null|TrafficRegistryInterface
    */
   protected $registry;

@@ @@
   /**
    * The queuer plugin or FALSE when the plugin is disabled.
    *
-   * @var null|false|\Drupal\purge_queuer_url\Plugin\Purge\Queuer\UrlAndPathQueuerPlugin
+   * @var null|false|UrlAndPathQueuerPlugin
    */
   protected $queuer;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/purge_queuer_url/src/Plugin/Purge/DiagnosticCheck/RegistryCheck.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The traffic registry with the stored URLs and tags.
    *
-   * @var \Drupal\purge_queuer_url\TrafficRegistryInterface
+   * @var TrafficRegistryInterface
    */
   protected $registry;

@@ @@
   /**
    * Constructs a RegistryCheck object.
    *
-   * @param \Drupal\purge_queuer_url\TrafficRegistryInterface $registry
+   * @param TrafficRegistryInterface $registry
    *   The traffic registry with the stored URLs and tags.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/purge_queuer_url/src/Form/ConfigurationForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Constructs a ConfigurationForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   final public function __construct(ConfigFactoryInterface $config_factory, MessengerInterface $messenger) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function addMoreSubmit(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function addMoreCallback(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitFormClear(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/purge_queuer_url/src/Commands/SqlSanitizeCommands.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The traffic registry with the stored URLs and tags.
    *
-   * @var \Drupal\purge_queuer_url\TrafficRegistryInterface
+   * @var TrafficRegistryInterface
    */
   protected $registry;

@@ @@
   /**
    * Constructs a SqlSanitizeCommands object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\purge_queuer_url\TrafficRegistryInterface $registry
+   * @param TrafficRegistryInterface $registry
    *   The traffic registry with the stored URLs and tags.
    */
   public function __construct(ModuleHandlerInterface $module_handler, TrafficRegistryInterface $registry) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 7 files have been changed by Rector                                       

