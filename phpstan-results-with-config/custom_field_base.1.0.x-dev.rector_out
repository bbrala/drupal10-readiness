modules/contrib/custom_field_base/modules/custom_field_example/src/Plugin/Field/FieldFormatter/CustomFieldExampleFormatter.php
modules/contrib/custom_field_base/modules/custom_field_example/src/Plugin/Field/FieldType/CustomFieldExample.php
modules/contrib/custom_field_base/modules/custom_field_example/src/Plugin/Field/FieldWidget/CustomFieldExampleWidget.php
modules/contrib/custom_field_base/src/Plugin/Field/FieldFormatter/CustomFieldBaseFormatter.php
modules/contrib/custom_field_base/src/Plugin/Field/FieldType/CustomFieldBase.php
modules/contrib/custom_field_base/src/Plugin/Field/FieldWidget/CustomFieldBaseWidget.php
modules/contrib/custom_field_base/tests/modules/custom_field_base_test_fields/src/Plugin/Field/FieldType/TestFloat.php
modules/contrib/custom_field_base/tests/modules/custom_field_base_test_fields/src/Plugin/Field/FieldType/TestInteger.php
modules/contrib/custom_field_base/tests/modules/custom_field_base_test_fields/src/Plugin/Field/FieldType/TestIntegerUnsigned.php
modules/contrib/custom_field_base/tests/modules/custom_field_base_test_fields/src/Plugin/Field/FieldType/TestMultiple.php
modules/contrib/custom_field_base/tests/modules/custom_field_base_test_fields/src/Plugin/Field/FieldType/TestString.php
modules/contrib/custom_field_base/tests/modules/custom_field_base_test_fields/src/Plugin/Field/FieldType/TestStringMaxLength.php
modules/contrib/custom_field_base/tests/src/Kernel/CustomFieldBaseTestBase.php
modules/contrib/custom_field_base/tests/src/Kernel/CustomFieldBaseTestFloat.php
modules/contrib/custom_field_base/tests/src/Kernel/CustomFieldBaseTestInteger.php
modules/contrib/custom_field_base/tests/src/Kernel/CustomFieldBaseTestIntegerUnsigned.php
modules/contrib/custom_field_base/tests/src/Kernel/CustomFieldBaseTestMultiple.php
modules/contrib/custom_field_base/tests/src/Kernel/CustomFieldBaseTestString.php
modules/contrib/custom_field_base/tests/src/Kernel/CustomFieldBaseTestStringMaxLength.php

8 files with changes
====================

1) modules/contrib/custom_field_base/tests/src/Kernel/CustomFieldBaseTestStringMaxLength.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->fieldType = "custom_field_base_test_fields_single_string_max_length";
     parent::setUp();
   }
@@ @@
       // $entity->{$this->fieldName}->mykey = $value;
       $get_value = $entity->{$this->fieldName}->get(0)->getValue()["mykey"];

-      $this->assertNotEqual($get_value, $value);
-      $this->assertEqual($get_value, $cut_value);
+      $this->assertNotEquals($get_value, $value);
+      $this->assertEquals($get_value, $cut_value);
     } finally {
       if ($entity->id()) {
         $entity->delete();
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertNotEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/custom_field_base/tests/src/Kernel/CustomFieldBaseTestString.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->fieldType = "custom_field_base_test_fields_single_string";
     parent::setUp();
   }
@@ @@
     // $entity->{$this->fieldName}->mykey = $value;
     $get_value = $entity->{$this->fieldName}->get(0)->getValue()["mykey"];

-    $this->assertEqual($get_value, $value);
+    $this->assertEquals($get_value, $value);

     // -----
     $entity = EntityTest::create([]);
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/custom_field_base/tests/src/Kernel/CustomFieldBaseTestMultiple.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->fieldType = "custom_field_base_test_fields_multiple";
     parent::setUp();

@@ @@
     // $entity->{$this->fieldName}->mykey = $value;
     $get_value = $entity->{$this->fieldName}->get(0)->getValue();

-    $this->assert(is_array($get_value));
+    $this->assertTrue(is_array($get_value));

     foreach ($value as $kk => $vv) {
-      $this->assert(array_key_exists($kk, $get_value));
-      $this->assertEqual($get_value[$kk], $value[$kk]);
+      $this->assertTrue(array_key_exists($kk, $get_value));
+      $this->assertEquals($get_value[$kk], $value[$kk]);
     }

     // -----
@@ @@
     $entity->{$this->fieldName} = $value;

     $get_value = $entity->{$this->fieldName}->get(0)->getValue();
-    $this->assert(is_array($get_value));
+    $this->assertTrue(is_array($get_value));

     foreach ($value as $kk => $vv) {
-      $this->assert(array_key_exists($kk, $get_value));
-      $this->assertEqual($get_value[$kk], $value[$kk]);
+      $this->assertTrue(array_key_exists($kk, $get_value));
+      $this->assertEquals($get_value[$kk], $value[$kk]);
     }
     // ----
     $entity = EntityTest::create([]);
@@ @@

     $get_value = $entity->{$this->fieldName}->get(0)->getValue();

-    $this->assert(is_array($get_value));
+    $this->assertTrue(is_array($get_value));

     foreach ($value as $kk => $vv) {
-      $this->assert(array_key_exists($kk, $get_value));
-      $this->assertEqual($get_value[$kk], $value[$kk]);
+      $this->assertTrue(array_key_exists($kk, $get_value));
+      $this->assertEquals($get_value[$kk], $value[$kk]);
     }

     // --------
@@ @@

     $get_value = $entity->{$this->fieldName}->get(0)->getValue();

-    $this->assert(is_array($get_value));
+    $this->assertTrue(is_array($get_value));

     foreach ($value as $kk => $vv) {
-      $this->assert(array_key_exists($kk, $get_value));
-      $this->assertEqual($get_value[$kk], $value[$kk]);
+      $this->assertTrue(array_key_exists($kk, $get_value));
+      $this->assertEquals($get_value[$kk], $value[$kk]);
     }

   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/custom_field_base/tests/src/Kernel/CustomFieldBaseTestIntegerUnsigned.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->fieldType = "custom_field_base_test_fields_single_integer_unsigned";
     parent::setUp();

@@ @@
    * Test reading and writing values into the field.
    *
    * @dataProvider valuesProvider
+   * @doesNotPerformAssertions
    */
   public function testReadWrite($value) {

@@ @@
       $this->fail("expected exception");
     }
     catch (\Exception $e) {
-      $this->pass("expected exception ok");
     }
   }
    ----------- end diff -----------

Applied rules:
 * PassRector
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/custom_field_base/tests/src/Kernel/CustomFieldBaseTestInteger.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->fieldType = "custom_field_base_test_fields_single_integer";
     parent::setUp();

@@ @@
     // $entity->{$this->fieldName}->mykey = $value;
     $get_value = $entity->{$this->fieldName}->get(0)->getValue()["mykey"];

-    $this->assertEqual($get_value, $value);
+    $this->assertEquals($get_value, $value);
     // -----
     $entity = EntityTest::create([]);
     $entity->{$this->fieldName}->mykey = $value;

     $get_value = $entity->{$this->fieldName}->get(0)->getValue()["mykey"];
-    $this->assertEqual($get_value, $value);
+    $this->assertEquals($get_value, $value);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/custom_field_base/tests/src/Kernel/CustomFieldBaseTestFloat.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->fieldType = "custom_field_base_test_fields_single_float";
     parent::setUp();

@@ @@
     // $entity->{$this->fieldName}->mykey = $value;
     $get_value = $entity->{$this->fieldName}->get(0)->getValue()["mykey"];

-    $this->assertEqual($get_value, $value);
+    $this->assertEquals($get_value, $value);
     // -----
     $entity = EntityTest::create([]);
     $entity->{$this->fieldName}->mykey = $value;

     $get_value = $entity->{$this->fieldName}->get(0)->getValue()["mykey"];
-    $this->assertEqual($get_value, $value);
+    $this->assertEquals($get_value, $value);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/custom_field_base/tests/src/Kernel/CustomFieldBaseTestBase.php:65

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Configure the theme system.
@@ @@
   /**
    * Renders fields of a given entity with a given display.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity object with attached fields to render.
-   * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+   * @param EntityViewDisplayInterface $display
    *   The display to render the fields in.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/custom_field_base/src/Plugin/Field/FieldFormatter/CustomFieldBaseFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\custom_field_base\Plugin\Field\FieldFormatter;

+use Drupal\Core\Url;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ @@
     /**
      * The entity type manager.
      *
-     * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+     * @var EntityTypeManagerInterface
      */
     protected $entityTypeManager;

@@ @@
      *   The plugin_id for the formatter.
      * @param mixed                                          $plugin_definition
      *   The plugin implementation definition.
-     * @param \Drupal\Core\Field\FieldDefinitionInterface    $field_definition
+     * @param FieldDefinitionInterface $field_definition
      *   The definition of the field to which the formatter is associated.
      * @param array                                          $settings
      *   The formatter settings.
@@ @@
      *   The view mode.
      * @param array                                          $third_party_settings
      *   Any third party settings settings.
-     * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+     * @param EntityTypeManagerInterface $entity_type_manager
      *   The entity type manager.
      */
     public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, EntityTypeManagerInterface $entity_type_manager)
@@ @@
     /**
      * Generate the output appropriate for one field item.
      *
-     * @param \Drupal\Core\Field\FieldItemInterface $item
+     * @param FieldItemInterface $item
      *   One field item.
      * @param array|null                            $settings
      *   Formatter settings passed as argument.
      * @param array|null                            $field_settings
      *   Field settings passed as argument.
-     * @param \Drupal\Core\Url|null                 $url
+     * @param Url|null $url
      *   Entity url passed as argument.
      *
      * @return string
@@ @@
     /**
      * Gets the URI elements of the entity.
      *
-     * @param \Drupal\Core\Entity\EntityInterface $entity
+     * @param EntityInterface $entity
      *   The entity object.
      *
-     * @return \Drupal\Core\Url
+     * @return Url
      *   The URI elements of the entity.
      */
     public function getEntityUrl(EntityInterface $entity)
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 8 files have been changed by Rector                                       

