modules/contrib/field_completeness/field_completeness.install
modules/contrib/field_completeness/field_completeness.module
modules/contrib/field_completeness/src/FieldCompletenessManager.php
modules/contrib/field_completeness/src/FieldCompletenessStorage.php
modules/contrib/field_completeness/src/Form/FieldCompletenessFieldsForm.php
modules/contrib/field_completeness/src/Form/FieldCompletenessSettingsForm.php
modules/contrib/field_completeness/src/Plugin/Block/FieldCompletenessBlock.php

5 files with changes
====================

1) modules/contrib/field_completeness/src/Plugin/Block/FieldCompletenessBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_completeness\Plugin\Block;

+use Drupal\field_completeness\FieldCompletenessManager;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Session\AccountInterface;
@@ @@
     $build = [];
     $percentage = 0;
     $included_fields = [];
-    /** @var \Drupal\field_completeness\FieldCompletenessManager $field_completeness_manager */
+    /** @var FieldCompletenessManager $field_completeness_manager */
     $field_completeness_manager = \Drupal::service('field_completeness.manager');
     $node = $field_completeness_manager->getNode();
     if ($node) {
@@ @@
    */
   public function getPercentage() {
     $percentage = 0;
-    /** @var \Drupal\field_completeness\FieldCompletenessManager $field_completeness_manager */
+    /** @var FieldCompletenessManager $field_completeness_manager */
     $field_completeness_manager = \Drupal::service('field_completeness.manager');
     $node = $field_completeness_manager->getNode();
     if ($node) {
@@ @@
    * {@inheritdoc}
    */
   protected function blockAccess(AccountInterface $account) {
-    /** @var \Drupal\field_completeness\FieldCompletenessManager $field_completeness_manager */
+    /** @var FieldCompletenessManager $field_completeness_manager */
     $field_completeness_manager = \Drupal::service('field_completeness.manager');
     $node = $field_completeness_manager->getNode();
     $route_name = \Drupal::routeMatch()->getRouteName();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/field_completeness/src/Form/FieldCompletenessFieldsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_completeness\Form;

+use Drupal\field_completeness\FieldCompletenessManager;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\field\Entity\FieldConfig;
@@ @@
       }
     }

-    /** @var \Drupal\field_completeness\FieldCompletenessManager $field_completeness_manager */
+    /** @var FieldCompletenessManager $field_completeness_manager */
     $field_completeness_manager = \Drupal::service('field_completeness.manager');

     foreach($field_completeness_manager->getIncludedFields($node_type) as $field_name) {
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\field_completeness\FieldCompletenessManager $field_completeness_manager */
+    /** @var FieldCompletenessManager $field_completeness_manager */
     $field_completeness_manager = \Drupal::service('field_completeness.manager');
     $allowed_types = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/field_completeness/src/FieldCompletenessStorage.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Database service object
    *
-   * @var Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/field_completeness/src/FieldCompletenessManager.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Field completeness storage.
    *
-   * @var \Drupal\field_completeness\FieldCompletenessStorage
+   * @var FieldCompletenessStorage
    */
   public $fieldCompletenessStorage;

@@ @@
   /**
    * Constructs a FieldCompletenessManager object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    * @param \Drupal\Core\language\LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\field_completeness\FieldCompletenessStorage $field_completeness_storage
+   * @param FieldCompletenessStorage $field_completeness_storage
    *   The Field completeness storage.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager, FieldCompletenessStorage $field_completeness_storage) {
@@ @@
   /**
    * Determines new or existing record and update or add in field completeness database table
    *
-   * @param \Drupal\Core\Entity\EntityInterface $node
-   *
+   * @param EntityInterface $node
    */
   public function updateOutline(EntityInterface $node) {
     $is_allowed_type = $this->isAllowedContentType($node->bundle());
@@ @@

   /**
    * insert data into Field completeness table
-   * @param \Drupal\Core\Entity\EntityInterface $node
+   * @param EntityInterface $node
    */
   public function getNodeData(EntityInterface $node, $lang_code) {
     $values = [];
@@ @@

   /**
    * Determines included fields and their values
-   * @param \Drupal\Core\Entity\EntityInterface $node
+   * @param EntityInterface $node
    * @param $wrap
    *   'all' - gets all the fields whether its completed or not
    *   'completed' - Gets only completed fields
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/field_completeness/field_completeness.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\field\FieldConfigInterface;
+use Drupal\field_completeness\FieldCompletenessManager;
 /**
  * @file
  * Hook implementations for field_completeness module.
@@ @@
  */
 function field_completeness_form_field_config_edit_form_alter(array &$form, FormStateinterface $form_state) {
   $account = \Drupal::currentUser();
-  /** @var \Drupal\field\FieldConfigInterface $field */
+  /** @var FieldConfigInterface $field */
   $field = $form_state->getFormObject()->getEntity();
   if (!$account->hasPermission('administer field permissions')) {
     return $form;
   }
   $is_allowed_type = FALSE;
-  /** @var \Drupal\field_completeness\FieldCompletenessManager $field_completeness_manager */
+  /** @var FieldCompletenessManager $field_completeness_manager */
   $field_completeness_manager = \Drupal::service('field_completeness.manager');
   if ($field->getTargetEntityTypeId() == 'node') {
     $is_allowed_type = $field_completeness_manager->isAllowedContentType($field->getTargetBundle());
@@ @@
     $config_original = $config->get($fc_config);
     $config->set($fc_config, $form_state->getValue('fc_include'))->save();
     if ($config_original <> $config->get($fc_config)) {
-      /** @var \Drupal\field_completeness\FieldCompletenessManager $field_completeness_manager */
+      /** @var FieldCompletenessManager $field_completeness_manager */
       $field_completeness_manager = \Drupal::service('field_completeness.manager');
       $field_completeness_manager->setLatestPercentageToBundle($field->getName(), $field->getTargetBundle());
     }
@@ @@
  * Implements hook_ENTITY_TYPE_view() for node entities.
  */
 function field_completeness_node_view(array &$build, EntityInterface $node, EntityViewDisplayInterface $display, $view_mode) {
-  /** @var \Drupal\field_completeness\FieldCompletenessManager $field_completeness_manager */
+  /** @var FieldCompletenessManager $field_completeness_manager */
   $field_completeness_manager = \Drupal::service('field_completeness.manager');
   $field_completeness_manager->updateOutline($node);
 }
@@ @@
  * Implements hook_ENTITY_TYPE_update() for node entities.
  */
 function field_completeness_node_update(EntityInterface $node) {
-  /** @var \Drupal\field_completeness\FieldCompletenessManager $field_completeness_manager */
+  /** @var FieldCompletenessManager $field_completeness_manager */
   $field_completeness_manager = \Drupal::service('field_completeness.manager');
   $field_completeness_manager->updateOutline($node);
 }
@@ @@
  * Implements hook_ENTITY_TYPE_insert() for node entities.
  */
 function field_completeness_node_insert(EntityInterface $node) {
-  /** @var \Drupal\field_completeness\FieldCompletenessManager $field_completeness_manager */
+  /** @var FieldCompletenessManager $field_completeness_manager */
   $field_completeness_manager = \Drupal::service('field_completeness.manager');
   $field_completeness_manager->updateOutline($node);
 }
@@ @@
  * Implements hook_form_alter().
  */
 function field_completeness_form_alter(&$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\field_completeness\FieldCompletenessManager $field_completeness_manager */
+  /** @var FieldCompletenessManager $field_completeness_manager */
   $field_completeness_manager = \Drupal::service('field_completeness.manager');
   $route_node = $field_completeness_manager->getNode();
   if($route_node) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 5 files have been changed by Rector                                       

