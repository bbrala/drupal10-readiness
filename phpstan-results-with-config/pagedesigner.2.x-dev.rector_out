modules/contrib/pagedesigner/modules/pagedesigner_audio/pagedesigner_audio.module
modules/contrib/pagedesigner/modules/pagedesigner_audio/src/Plugin/pagedesigner/Asset/Audio.php
modules/contrib/pagedesigner/modules/pagedesigner_audio/src/Plugin/pagedesigner/Handler/Audio.php
modules/contrib/pagedesigner/modules/pagedesigner_audio/tests/src/Kernel/HandlerTests/AudioHandlerTest.php
modules/contrib/pagedesigner/modules/pagedesigner_block/pagedesigner_block.module
modules/contrib/pagedesigner/modules/pagedesigner_block/src/Plugin/Condition/PagedesignerCondition.php
modules/contrib/pagedesigner/modules/pagedesigner_block/src/Plugin/pagedesigner/Handler/Block.php
modules/contrib/pagedesigner/modules/pagedesigner_block/tests/src/Kernel/HandlerTests/BlockHandlerTest.php
modules/contrib/pagedesigner/modules/pagedesigner_document/pagedesigner_document.module
modules/contrib/pagedesigner/modules/pagedesigner_document/src/Plugin/Linkit/Substitution/FileDownload.php
modules/contrib/pagedesigner/modules/pagedesigner_document/src/Plugin/pagedesigner/Asset/Document.php
modules/contrib/pagedesigner/modules/pagedesigner_document/src/Plugin/pagedesigner/Handler/Document.php
modules/contrib/pagedesigner/modules/pagedesigner_document/tests/src/Kernel/HandlerTests/DocumentHandlerTest.php
modules/contrib/pagedesigner/modules/pagedesigner_duplication/pagedesigner_duplication.module
modules/contrib/pagedesigner/modules/pagedesigner_duplication/src/Service/DuplicationService.php
modules/contrib/pagedesigner/modules/pagedesigner_embed/pagedesigner_embed.module
modules/contrib/pagedesigner/modules/pagedesigner_embed/src/Plugin/Field/FieldFormatter/EmbedUrl.php
modules/contrib/pagedesigner/modules/pagedesigner_embed/src/Plugin/Field/FieldFormatter/Provider.php
modules/contrib/pagedesigner/modules/pagedesigner_embed/src/Plugin/Field/FieldFormatter/Thumbnail.php
modules/contrib/pagedesigner/modules/pagedesigner_embed/src/Plugin/pagedesigner/Asset/Embed.php
modules/contrib/pagedesigner/modules/pagedesigner_embed/src/Plugin/pagedesigner/Handler/Embed.php
modules/contrib/pagedesigner/modules/pagedesigner_embed/tests/src/Kernel/HandlerTests/EmbedHandlerTest.php
modules/contrib/pagedesigner/modules/pagedesigner_frontendpublishing/pagedesigner_frontendpublishing.module
modules/contrib/pagedesigner/modules/pagedesigner_frontendpublishing/src/Plugin/frontendpublishing/StateChange/Pagedesigner.php
modules/contrib/pagedesigner/modules/pagedesigner_gallery/pagedesigner_gallery.module
modules/contrib/pagedesigner/modules/pagedesigner_gallery/src/Plugin/pagedesigner/Handler/Gallery.php
modules/contrib/pagedesigner/modules/pagedesigner_gallery/src/Plugin/pagedesigner/Handler/GalleryGallery.php
modules/contrib/pagedesigner/modules/pagedesigner_image/pagedesigner_image.module
modules/contrib/pagedesigner/modules/pagedesigner_image/src/Plugin/pagedesigner/Asset/Image.php
modules/contrib/pagedesigner/modules/pagedesigner_image/src/Plugin/pagedesigner/Handler/Image.php
modules/contrib/pagedesigner/modules/pagedesigner_image/tests/src/Kernel/HandlerTests/ImageHandlerTest.php
modules/contrib/pagedesigner/modules/pagedesigner_imageedit/pagedesigner_imageedit.module
modules/contrib/pagedesigner/modules/pagedesigner_layout/pagedesigner_layout.module
modules/contrib/pagedesigner/modules/pagedesigner_layout/src/Plugin/pagedesigner/Handler/Layout.php
modules/contrib/pagedesigner/modules/pagedesigner_layout/src/Plugin/rest/resource/LayoutResource.php
modules/contrib/pagedesigner/modules/pagedesigner_link/pagedesigner_link.module
modules/contrib/pagedesigner/modules/pagedesigner_link/src/Plugin/pagedesigner/Handler/Link.php
modules/contrib/pagedesigner/modules/pagedesigner_link/src/Plugin/pagedesigner/Handler/Target.php
modules/contrib/pagedesigner/modules/pagedesigner_link/tests/src/Kernel/HandlerTests/LinkHandlerTest.php
modules/contrib/pagedesigner/modules/pagedesigner_link/tests/src/Kernel/HandlerTests/TargetHandlerTest.php
modules/contrib/pagedesigner/modules/pagedesigner_media/pagedesigner_media.module
modules/contrib/pagedesigner/modules/pagedesigner_media/src/Plugin/MediaFieldHandlerBase.php
modules/contrib/pagedesigner/modules/pagedesigner_media/src/Plugin/pagedesigner/Asset/Media.php
modules/contrib/pagedesigner/modules/pagedesigner_media/tests/src/Kernel/HandlerTests/MediaHandlerTestBase.php
modules/contrib/pagedesigner/modules/pagedesigner_multitheme/src/EventSubscriber/FilterSubscriber.php
modules/contrib/pagedesigner/modules/pagedesigner_pagetree/pagedesigner_pagetree.module
modules/contrib/pagedesigner/modules/pagedesigner_pagetree/src/Plugin/pagetree/State/Pagedesigner.php
modules/contrib/pagedesigner/modules/pagedesigner_svg/pagedesigner_svg.module
modules/contrib/pagedesigner/modules/pagedesigner_svg/src/Plugin/pagedesigner/Asset/SVG.php
modules/contrib/pagedesigner/modules/pagedesigner_svg/src/Plugin/pagedesigner/Handler/SVG.php
modules/contrib/pagedesigner/modules/pagedesigner_svg/tests/src/Kernel/HandlerTests/SVGHandlerTest.php
modules/contrib/pagedesigner/modules/pagedesigner_video/pagedesigner_video.module
modules/contrib/pagedesigner/modules/pagedesigner_video/src/Plugin/pagedesigner/Asset/Video.php
modules/contrib/pagedesigner/modules/pagedesigner_video/src/Plugin/pagedesigner/Handler/Video.php
modules/contrib/pagedesigner/modules/pagedesigner_video/tests/src/Kernel/HandlerTests/VideoHandlerTest.php
modules/contrib/pagedesigner/modules/pagedesigner_webform/pagedesigner_webform.module
modules/contrib/pagedesigner/modules/pagedesigner_webform/src/Plugin/pagedesigner/Handler/Webform.php
modules/contrib/pagedesigner/modules/pagedesigner_webform/tests/src/Kernel/HandlerTests/WebformHandlerTest.php
modules/contrib/pagedesigner/modules/pagedesigner_yoast/pagedesigner_yoast.install
modules/contrib/pagedesigner/modules/pagedesigner_yoast/pagedesigner_yoast.module
modules/contrib/pagedesigner/modules/pagedesigner_yoast/src/Plugin/Field/FieldFormatter/DescriptionFormatter.php
modules/contrib/pagedesigner/modules/pagedesigner_yoast/src/Plugin/Field/FieldFormatter/KeywordFormatter.php
modules/contrib/pagedesigner/modules/pagedesigner_yoast/src/Plugin/Field/FieldWidget/PagedesignerYoastSeoBodyWidget.php
modules/contrib/pagedesigner/modules/pagedesigner_yoast/src/Plugin/Field/FieldWidget/PagedesignerYoastSeoWidget.php
modules/contrib/pagedesigner/pagedesigner.install
modules/contrib/pagedesigner/pagedesigner.module
modules/contrib/pagedesigner/pagedesigner_element.page.inc
modules/contrib/pagedesigner/src/Annotation/PagedesignerAsset.php
modules/contrib/pagedesigner/src/Annotation/PagedesignerHandler.php
modules/contrib/pagedesigner/src/Controller/AssetController.php
modules/contrib/pagedesigner/src/Controller/ElementController.php
modules/contrib/pagedesigner/src/Controller/NodeController.php
modules/contrib/pagedesigner/src/CustomFunctionTwigExtension.php
modules/contrib/pagedesigner/src/ElementAccessControlHandler.php
modules/contrib/pagedesigner/src/ElementEvents.php
modules/contrib/pagedesigner/src/ElementHtmlRouteProvider.php
modules/contrib/pagedesigner/src/ElementListBuilder.php
modules/contrib/pagedesigner/src/ElementStorage.php
modules/contrib/pagedesigner/src/ElementStorageInterface.php
modules/contrib/pagedesigner/src/ElementTranslationHandler.php
modules/contrib/pagedesigner/src/ElementTypeHtmlRouteProvider.php
modules/contrib/pagedesigner/src/ElementTypeListBuilder.php
modules/contrib/pagedesigner/src/Entity/Element.php
modules/contrib/pagedesigner/src/Entity/ElementInterface.php
modules/contrib/pagedesigner/src/Entity/ElementType.php
modules/contrib/pagedesigner/src/Entity/ElementTypeInterface.php
modules/contrib/pagedesigner/src/Entity/ElementViewsData.php
modules/contrib/pagedesigner/src/Event/ElementEvent.php
modules/contrib/pagedesigner/src/EventSubscriber/InitSubscriber.php
modules/contrib/pagedesigner/src/EventSubscriber/SearchApiSubscriber.php
modules/contrib/pagedesigner/src/Form/ElementDeleteForm.php
modules/contrib/pagedesigner/src/Form/ElementForm.php
modules/contrib/pagedesigner/src/Form/ElementRevisionDeleteForm.php
modules/contrib/pagedesigner/src/Form/ElementRevisionRevertForm.php
modules/contrib/pagedesigner/src/Form/ElementRevisionRevertTranslationForm.php
modules/contrib/pagedesigner/src/Form/ElementSettingsForm.php
modules/contrib/pagedesigner/src/Form/ElementTypeDeleteForm.php
modules/contrib/pagedesigner/src/Form/ElementTypeForm.php
modules/contrib/pagedesigner/src/Form/PagedesignerSettingsForm.php
modules/contrib/pagedesigner/src/Form/PagedesignerTypeEntityForm.php
modules/contrib/pagedesigner/src/PagedesignerPatternBuilder.php
modules/contrib/pagedesigner/src/PagedesignerPatternPermissions.php
modules/contrib/pagedesigner/src/PagedesignerService.php
modules/contrib/pagedesigner/src/Plugin/AssetPluginBase.php
modules/contrib/pagedesigner/src/Plugin/CompoundHandlerBase.php
modules/contrib/pagedesigner/src/Plugin/DataType/PagedesignerData.php
modules/contrib/pagedesigner/src/Plugin/Field/FieldFormatter/PagedesignerFormatter.php
modules/contrib/pagedesigner/src/Plugin/Field/FieldType/PagedesignerItem.php
modules/contrib/pagedesigner/src/Plugin/Field/FieldWidget/EntityReferenceAutocompleteWidget.php
modules/contrib/pagedesigner/src/Plugin/Field/FieldWidget/PagedesignerWidget.php
modules/contrib/pagedesigner/src/Plugin/FieldHandlerBase.php
modules/contrib/pagedesigner/src/Plugin/HandlerPluginBase.php
modules/contrib/pagedesigner/src/Plugin/PlainFieldHandlerBase.php
modules/contrib/pagedesigner/src/Plugin/pagedesigner/Asset/Standard.php
modules/contrib/pagedesigner/src/Plugin/pagedesigner/AssetPluginInterface.php
modules/contrib/pagedesigner/src/Plugin/pagedesigner/Handler/Cell.php
modules/contrib/pagedesigner/src/Plugin/pagedesigner/Handler/Checkbox.php
modules/contrib/pagedesigner/src/Plugin/pagedesigner/Handler/Color.php
modules/contrib/pagedesigner/src/Plugin/pagedesigner/Handler/Component.php
modules/contrib/pagedesigner/src/Plugin/pagedesigner/Handler/Container.php
modules/contrib/pagedesigner/src/Plugin/pagedesigner/Handler/Content.php
modules/contrib/pagedesigner/src/Plugin/pagedesigner/Handler/Fontawesome.php
modules/contrib/pagedesigner/src/Plugin/pagedesigner/Handler/Hide.php
modules/contrib/pagedesigner/src/Plugin/pagedesigner/Handler/Html.php
modules/contrib/pagedesigner/src/Plugin/pagedesigner/Handler/Longtext.php
modules/contrib/pagedesigner/src/Plugin/pagedesigner/Handler/MultipleCheckbox.php
modules/contrib/pagedesigner/src/Plugin/pagedesigner/Handler/Row.php
modules/contrib/pagedesigner/src/Plugin/pagedesigner/Handler/Select.php
modules/contrib/pagedesigner/src/Plugin/pagedesigner/Handler/Text.php
modules/contrib/pagedesigner/src/Plugin/pagedesigner/Handler/Textarea.php
modules/contrib/pagedesigner/src/Plugin/pagedesigner/HandlerPluginInterface.php
modules/contrib/pagedesigner/src/Plugin/rest/resource/AssetResource.php
modules/contrib/pagedesigner/src/Plugin/rest/resource/CloneResource.php
modules/contrib/pagedesigner/src/Plugin/rest/resource/ElementResource.php
modules/contrib/pagedesigner/src/Plugin/rest/resource/LockResource.php
modules/contrib/pagedesigner/src/Plugin/rest/resource/PatternResource.php
modules/contrib/pagedesigner/src/Service/AssetPluginManager.php
modules/contrib/pagedesigner/src/Service/ElementHandler.php
modules/contrib/pagedesigner/src/Service/HandlerPluginManager.php
modules/contrib/pagedesigner/src/Service/Locker.php
modules/contrib/pagedesigner/src/Service/Render/Styles.php
modules/contrib/pagedesigner/src/Service/Renderer.php
modules/contrib/pagedesigner/src/Service/StateChanger.php
modules/contrib/pagedesigner/tests/src/Kernel/AbstractPagedesignerTest.php
modules/contrib/pagedesigner/tests/src/Kernel/HandlerTests/CompoundHandlerTestBase.php
modules/contrib/pagedesigner/tests/src/Kernel/HandlerTests/ContentHandlerTest.php
modules/contrib/pagedesigner/tests/src/Kernel/HandlerTests/EditorHandlerTestCase.php
modules/contrib/pagedesigner/tests/src/Kernel/HandlerTests/FieldHandlerTestBase.php
modules/contrib/pagedesigner/tests/src/Kernel/HandlerTests/HTMLHandlerTest.php
modules/contrib/pagedesigner/tests/src/Kernel/HandlerTests/HandlerTestBase.php
modules/contrib/pagedesigner/tests/src/Kernel/HandlerTests/HideHandlerTest.php
modules/contrib/pagedesigner/tests/src/Kernel/HandlerTests/LongtextHandlerTest.php
modules/contrib/pagedesigner/tests/src/Kernel/HandlerTests/PlainFieldHandlerTestBase.php
modules/contrib/pagedesigner/tests/src/Kernel/HandlerTests/SelectHandlerTest.php
modules/contrib/pagedesigner/tests/src/Kernel/HandlerTests/TextHandlerTest.php
modules/contrib/pagedesigner/tests/src/Kernel/HandlerTests/TextareaHandlerTest.php
modules/contrib/pagedesigner/tests/src/Kernel/PatternTests/ComponentPatternTest.php
modules/contrib/pagedesigner/tests/src/Kernel/PatternTests/PatternTestBase.php
modules/contrib/pagedesigner/tests/src/Kernel/PatternTests/RowPatternTest.php

57 files with changes
=====================

1) modules/contrib/pagedesigner/tests/src/Kernel/PatternTests/RowPatternTest.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $entity = Element::create(
       [
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/pagedesigner/tests/src/Kernel/PatternTests/PatternTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\pagedesigner\Kernel\PatternTests;

+use Drupal\pagedesigner\Service\ElementHandler;
 use Drupal\Tests\pagedesigner\Kernel\AbstractPagedesignerTest;
 use Drupal\ui_patterns\UiPatterns;

@@ @@
   /**
    * The element handler.
    *
-   * @var \Drupal\pagedesigner\Service\ElementHandler
+   * @var ElementHandler
    */
   protected $elementHandler = NULL;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     self::$modules[] = 'ui_patterns_library';
     self::$modules[] = 'pagedesigner_pattern_test';
     parent::setUp();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/pagedesigner/tests/src/Kernel/PatternTests/ComponentPatternTest.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     self::$modules[] = 'system';
     self::$modules[] = 'editor';
     self::$modules[] = 'filter';
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/pagedesigner/tests/src/Kernel/HandlerTests/HandlerTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\pagedesigner\Kernel\HandlerTests;

+use Drupal\pagedesigner\Plugin\pagedesigner\HandlerPluginInterface;
+use Drupal\pagedesigner\Service\HandlerPluginManager;
 use Drupal\pagedesigner\Entity\Element;
 use Drupal\Tests\pagedesigner\Kernel\AbstractPagedesignerTest;
 use Drupal\ui_patterns\Definition\PatternDefinition;
@@ @@
   /**
    * The element handler.
    *
-   * @var \Drupal\pagedesigner\Plugin\pagedesigner\HandlerPluginInterface
+   * @var HandlerPluginInterface
    */
   protected $handlerId = '';

@@ @@
   /**
    * The element handler.
    *
-   * @var \Drupal\pagedesigner\Plugin\pagedesigner\HandlerPluginInterface
+   * @var HandlerPluginInterface
    */
   protected $handler = NULL;

@@ @@
   /**
    * The handler manager.
    *
-   * @var \Drupal\pagedesigner\Service\HandlerPluginManager
+   * @var HandlerPluginManager
    */
   protected $handlerManager = NULL;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->handlerManager = \Drupal::service('plugin.manager.pagedesigner_handler');
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/pagedesigner/tests/src/Kernel/HandlerTests/EditorHandlerTestCase.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     self::$modules[] = 'editor';
     parent::setUp();
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/pagedesigner/tests/src/Kernel/AbstractPagedesignerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\pagedesigner\Kernel;

+use Drupal\pagedesigner\Entity\Element;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\user\Traits\UserCreationTrait;

@@ @@
   /**
    * The base entity created by the test.
    *
-   * @var \Drupal\pagedesigner\Entity\Element
+   * @var Element
    */
   protected $entity = NULL;

@@ @@
    *
    * Set up current user, install config and schema for pagedesigner elements.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->setUpCurrentUser();
     $this->installEntitySchema('pagedesigner_element');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/pagedesigner/src/Service/StateChanger.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Publish an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityBase $entity
+   * @param ContentEntityBase $entity
    *
    * @return void
    */
@@ @@
   /**
    * Unpublish an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityBase $entity
+   * @param ContentEntityBase $entity
    *
    * @return void
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/pagedesigner/src/Service/Renderer.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Style object to collect the styles during rendering.
    *
-   * @var Drupal\pagedesigner\Service\Render\Styles|null
+   * @var Styles|null
    */
   protected static $styles = NULL;

@@ @@
   /**
    * Publicly render a container for a certain entity.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $container
+   * @param Element $container
    *   The container to render.
-   * @param \Drupal\Core\Entity\ContentEntityBase $entity
+   * @param ContentEntityBase $entity
    *   The entity the container is rendered for.
    *
    * @return \Drupal\pagedesigner\Service\Renderer
@@ @@
   /**
    * Render a container for a certain entity.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $container
+   * @param Element $container
    *   The container to render.
-   * @param \Drupal\Core\Entity\ContentEntityBase $entity
+   * @param ContentEntityBase $entity
    *   The entity the container is rendered for.
    *
    * @return \Drupal\pagedesigner\Service\Renderer
@@ @@
   /**
    * Render a container for a certain entity in edit mode.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $container
+   * @param Element $container
    *   The container to render.
-   * @param \Drupal\Core\Entity\ContentEntityBase $entity
+   * @param ContentEntityBase $entity
    *   The entity the container is rendered for.
    *
    * @return \Drupal\pagedesigner\Service\Renderer
@@ @@
   /**
    * Adds the appropiate cache keys and context.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $container
+   * @param Element $container
    *   The container being rendered.
-   * @param \Drupal\Core\Entity\ContentEntityBase $entity
+   * @param ContentEntityBase $entity
    *   The entity the output is rendered for.
    * @param string $mode
    *   The mode of rendering for cache key ("public", "internal" or "edit")
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/pagedesigner/src/Service/Locker.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * Set the lock key for the entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $id
+   * @param ContentEntityInterface $id
    *   The page id.
    * @param string $lang
    *   The page language.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/pagedesigner/src/Service/HandlerPluginManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pagedesigner\Service;

+use Drupal\pagedesigner\Plugin\pagedesigner\HandlerPluginInterface;
 use Drupal\Component\Plugin\FallbackPluginManagerInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ @@
    *   - id: The id of the plugin.
    *   - type: The type of the pattern field.
    *
-   * @return \Drupal\pagedesigner\Plugin\pagedesigner\HandlerPluginInterface[]
+   * @return HandlerPluginInterface[]
    *   A list of Handler objects.
    */
   public function getInstance(array $options) {
@@ @@
   /**
    * Returns all handlers.
    *
-   * @return \Drupal\pagedesigner\Plugin\pagedesigner\HandlerPluginInterface[]
+   * @return HandlerPluginInterface[]
    *   A list of Handler objects.
    */
   public function getHandlers() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/pagedesigner/src/Service/ElementHandler.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The element handler manager.
    *
-   * @var \Drupal\pagedesigner\Service\HandlerPluginManager
+   * @var HandlerPluginManager
    */
   protected $handlerManager = NULL;

@@ @@
   /**
    * The Event dispatcher.
    *
-   * @var Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher = NULL;

@@ @@
   /**
    * Create a new instance.
    *
-   * @param \Drupal\pagedesigner\Service\HandlerPluginManager $handler_manager
+   * @param HandlerPluginManager $handler_manager
    *   The handler manager from which to retrieve the element handlers.
-   * @param Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher to dispatch events.
    */
   public function __construct(HandlerPluginManager $handler_manager, EventDispatcherInterface $event_dispatcher) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/pagedesigner/src/Service/AssetPluginManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pagedesigner\Service;

+use Drupal\pagedesigner\Plugin\pagedesigner\AssetPluginInterface;
 use Drupal\Component\Plugin\FallbackPluginManagerInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ @@
    *   - id: The id of the plugin.
    *   - type: The type of the pattern field.
    *
-   * @return \Drupal\pagedesigner\Plugin\pagedesigner\AssetPluginInterface
+   * @return AssetPluginInterface
    *   A list of Render objects.
    */
   public function getInstance(array $options) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/pagedesigner/src/Plugin/rest/resource/PatternResource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pagedesigner\Plugin\rest\resource;

+use Symfony\Component\HttpKernel\Exception\HttpException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\pagedesigner\Service\ElementHandler;
@@ @@
   /**
    * A current user instance.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The pattern manager.
    *
-   * @var \Drupal\ui_patterns\UiPatternsManager
+   * @var UiPatternsManager
    */
   protected $patternManager;

@@ @@
   /**
    * The element handler.
    *
-   * @var Drupal\pagedesigner\Service\ElementHandler
+   * @var ElementHandler
    */
   protected $elementHandler;

@@ @@
    *   The plugin implementation definition.
    * @param array $serializer_formats
    *   The available serialization formats.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   A current user instance.
-   * @param \Drupal\ui_patterns\UiPatternsManager $pattern_manager
+   * @param UiPatternsManager $pattern_manager
    *   The pattern manager.
    */
   public function __construct(
@@ @@
   /**
    * Responds to GET requests.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    *
-   * @return \Drupal\rest\ResourceResponse
+   * @return ResourceResponse
    *   The HTTP response object.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws exception expected.
    */
   public function get(EntityInterface $entity = NULL) {
@@ @@
   /**
    * Get fields of pattern by definition.
    *
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition $definition
+   * @param PatternDefinition $definition
    *   The pattern defitiontion.
    */
   protected function getFields(PatternDefinition $definition) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/pagedesigner/src/Plugin/rest/resource/LockResource.php:32

    ---------- begin diff ----------
@@ @@
    * @param int $id
    *   The node id.
    *
-   * @return \Drupal\rest\ResourceResponse The responce containing the info.
+   * @return ResourceResponse The responce containing the info.
    */
   public function get($id = NULL) {
     $language = \Drupal::languageManager()->getcurrentLanguage(LanguageInterface::TYPE_CONTENT)->getId();
@@ @@
    *
    * Create a new lock on the node.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Drupal\rest\ResourceResponse
+   * @return ResourceResponse
    *   The response containing either true on success of info about the existing lock.
    */
   public function post(Request $request) {
@@ @@
    *
    * @param int $id
    *   The node id.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Drupal\rest\ResourceResponse
+   * @return ResourceResponse
    *   The response containing either true on success of info about the existing lock.
    */
   public function patch($id, Request $request) {
@@ @@
    *
    * @param int $id
    *   The node id.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Drupal\rest\ModifiedResourceResponse
+   * @return ModifiedResourceResponse
    *   An empty response.
    */
   public function delete($id, Request $request) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/pagedesigner/src/Plugin/rest/resource/ElementResource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pagedesigner\Plugin\rest\resource;

+use Symfony\Component\HttpKernel\Exception\HttpException;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Language\LanguageManager;
 use Drupal\Core\Session\AccountProxyInterface;
@@ @@
   /**
    * A current user instance.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The handler manager.
    *
-   * @var \Drupal\pagedesigner\Service\ElementHandler
+   * @var ElementHandler
    */
   protected $elementHandler;

@@ @@
   /**
    * The handler manager.
    *
-   * @var \Drupal\ui_patterns\UiPatternsManager
+   * @var UiPatternsManager
    */
   protected $patternManager;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManager
+   * @var LanguageManager
    */
   protected $languageManager = NULL;

@@ @@
    *   The plugin implementation definition.
    * @param array $serializer_formats
    *   The available serialization formats.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   A current user instance.
-   * @param \Drupal\pagedesigner\Service\ElementHandler $handler_manager
+   * @param ElementHandler $handler_manager
    *   The processor plugin manager.
    */
   public function __construct(
@@ @@
    * @param int $id
    *   ID of the entity.
    *
-   * @return \Drupal\rest\ResourceResponse
+   * @return ResourceResponse
    *   The HTTP response object.
    */
   public function get($id = NULL) {
@@ @@
   /**
    * Responds to POST requests.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Drupal\rest\ModifiedResourceResponse
+   * @return ModifiedResourceResponse
    *   The HTTP response object.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws exception expected.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\BadRequestHttpException
+   * @throws BadRequestHttpException
    *   If the request is malformed.
    */
   public function post(Request $request) {
@@ @@
    *
    * @param int $id
    *   The entity key.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Drupal\rest\ModifiedResourceResponse
+   * @return ModifiedResourceResponse
    *   The HTTP response object.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws exception expected.
    */
   public function patch($id, Request $request) {
@@ @@
    * @param int $id
    *   ID of the entity.
    *
-   * @return \Drupal\rest\ModifiedResourceResponse
+   * @return ModifiedResourceResponse
    *   The HTTP response object.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws exception expected.
    */
   public function delete($id) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/pagedesigner/src/Plugin/rest/resource/CloneResource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pagedesigner\Plugin\rest\resource;

+use Symfony\Component\HttpKernel\Exception\HttpException;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\pagedesigner\Entity\Element;
@@ @@
   /**
    * A current user instance.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The handler manager.
    *
-   * @var \Drupal\pagedesigner\Service\StateChanger
+   * @var StateChanger
    */
   protected $stateChanger;

@@ @@
   /**
    * The handler manager.
    *
-   * @var \Drupal\pagedesigner\Service\Renderer
+   * @var Renderer
    */
   protected $renderer;

@@ @@
    *   The plugin implementation definition.
    * @param array $serializer_formats
    *   The available serialization formats.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   A current user instance.
-   * @param \Drupal\pagedesigner\Service\StateChanger $state_changer
+   * @param StateChanger $state_changer
    *   The state changer.
-   * @param \Drupal\pagedesigner\Service\Renderer $renderer
+   * @param Renderer $renderer
    *   The pagedesigner renderer.
    */
   public function __construct(
@@ @@
   /**
    * Responds to POST requests.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Drupal\rest\ModifiedResourceResponse
+   * @return ModifiedResourceResponse
    *   The HTTP response object.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws exception expected.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\BadRequestHttpException
+   * @throws BadRequestHttpException
    *   If the request is malformed.
    */
   public function post(Request $request) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/pagedesigner/src/Plugin/rest/resource/AssetResource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pagedesigner\Plugin\rest\resource;

+use Symfony\Component\HttpKernel\Exception\HttpException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\rest\ModifiedResourceResponse;
@@ @@
   /**
    * A current user instance.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
    *   The plugin implementation definition.
    * @param array $serializer_formats
    *   The available serialization formats.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   A current user instance.
    */
   public function __construct(
@@ @@
   /**
    * Responds to GET requests.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    *
-   * @return \Drupal\rest\ResourceResponse
+   * @return ResourceResponse
    *   The HTTP response object.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws exception expected.
    */
   public function get($asset_type, EntityInterface $entity = NULL) {
@@ @@
   /**
    * Responds to POST requests.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    *
-   * @return \Drupal\rest\ModifiedResourceResponse
+   * @return ModifiedResourceResponse
    *   The HTTP response object.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws exception expected.
    */
   public function post(EntityInterface $entity) {
@@ @@
   /**
    * Responds to PATCH requests.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    *
-   * @return \Drupal\rest\ModifiedResourceResponse
+   * @return ModifiedResourceResponse
    *   The HTTP response object.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws exception expected.
    */
   public function patch(EntityInterface $entity) {
@@ @@
   /**
    * Responds to DELETE requests.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    *
-   * @return \Drupal\rest\ModifiedResourceResponse
+   * @return ModifiedResourceResponse
    *   The HTTP response object.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws exception expected.
    */
   public function delete(EntityInterface $entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/pagedesigner/src/Plugin/pagedesigner/HandlerPluginInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pagedesigner\Plugin\pagedesigner;

+use Drupal\ui_patterns\Definition\PatternDefinition;
 use Drupal\pagedesigner\Entity\Element;
 use Drupal\ui_patterns\Definition\PatternDefinitionField;

@@ @@
   /**
    * Allows to alter the list of patterns generated by the ui_pattern module.
    *
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition[] $patterns
+   * @param PatternDefinition[] $patterns
    *   The list of patterns.
    */
   public function collectPatterns(array &$patterns);
@@ @@
   /**
    * Processes a pattern field.
    *
-   * @param \Drupal\ui_patterns\Definition\PatternDefinitionField $field
+   * @param PatternDefinitionField $field
    *   The field definition.
    * @param array $fieldArray
    *   The field description to be sent to the frontend.
@@ @@
   /**
    * Get a textual representation of the entity.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $entity
+   * @param Element $entity
    *   The entity to process.
    * @param string $result
    *   The resulting text representation (inout).
@@ @@
    *
    * Each entity's textual representation will be in the array.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $entity
+   * @param Element $entity
    *   The entity to process.
    * @param array $list
    *   The resulting text representation (inout).
@@ @@
   /**
    * Serialize the content of an entity for edit mode.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $entity
+   * @param Element $entity
    *   The entity to process.
    * @param array $result
    *   The resulting serialized representation (inout).
@@ @@
   /**
    * Describe the structure of an entity for edit mode.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $entity
+   * @param Element $entity
    *   The entity to process.
    * @param array $result
    *   The resulting serialized representation (inout).
@@ @@
   /**
    * Generate a new entity.
    *
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition|array $definition
+   * @param PatternDefinition|array $definition
    *   The definition of the new entity.
    * @param array $data
    *   The data to create the entity with.
-   * @param \Drupal\pagedesigner\Entity\Element $entity
+   * @param Element $entity
    *   The created entity (inout).
    *
-   * @return \Drupal\pagedesigner\Entity\Element
+   * @return Element
    *   The created entity. Void if inout parameter is used.
    */
   public function generate($definition, array $data, Element &$entity = NULL);
@@ @@
   /**
    * Update the entity.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $entity
+   * @param Element $entity
    *   The entity to update.
    * @param array $data
    *   The data to update the entity with.
@@ @@
   /**
    * Copy an entity and return the cloned entity.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $entity
+   * @param Element $entity
    *   The entity to copy.
-   * @param \Drupal\pagedesigner\Entity\Element $container
+   * @param Element $container
    *   The container for the cloned entity.
-   * @param \Drupal\pagedesigner\Entity\Element $clone
+   * @param Element $clone
    *   The clone of the entity (inout).
    *
-   * @return \Drupal\pagedesigner\Entity\Element|void
+   * @return Element|void
    *   The clone of the entity. Void if inout parameter is used.
    */
   public function copy(Element $entity, Element $container = NULL, Element &$clone = NULL);
@@ @@
   /**
    * Delete an entity.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $entity
+   * @param Element $entity
    *   The entity to delete.
    * @param bool $remove
    *   Whether to delete the information from the database.
@@ @@
   /**
    * Restore an entity.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $entity
+   * @param Element $entity
    *   The entity to restore.
    */
   public function restore(Element $entity);
@@ @@
   /**
    * Render an entity for authenticated users.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $entity
+   * @param Element $entity
    *   The entity to update.
    * @param array $build
    *   The render array (inout).
@@ @@
   /**
    * Render an entity for anonymous users.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $entity
+   * @param Element $entity
    *   The entity to update.
    * @param array $build
    *   The render array (inout).
@@ @@
   /**
    * Render an entity for editing.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $entity
+   * @param Element $entity
    *   The entity to update.
    * @param array $build
    *   The render array (inout).
@@ @@
   /**
    * Publish the entity and all referenced elements.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $entity
+   * @param Element $entity
    *   The entity to publish.
    */
   public function publish(Element $entity);
@@ @@
   /**
    * Unpublish the entity and all referenced elements.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $entity
+   * @param Element $entity
    *   The entity to unpublish.
    */
   public function unpublish(Element $entity);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


19) modules/contrib/pagedesigner/src/Plugin/HandlerPluginBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pagedesigner\Plugin;

+use Drupal\ui_patterns\Definition\PatternDefinition;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Language\LanguageManager;
@@ @@
   /**
    * The user to render the markup for.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $user = NULL;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManager
+   * @var LanguageManager
    */
   protected $languageManager = NULL;

@@ @@
   /**
    * The pattern manager.
    *
-   * @var \Drupal\ui_patterns\UiPatternsManager
+   * @var UiPatternsManager
    */
   protected $patternManager = NULL;

@@ @@
   /**
    * The element handler.
    *
-   * @var \Drupal\pagedesigner\Service\ElementHandler
+   * @var ElementHandler
    */
   protected $elementHandler = NULL;

@@ @@
    * @param string $id
    *   The id of the pattern.
    *
-   * @return \Drupal\ui_patterns\Definition\PatternDefinition|null
+   * @return PatternDefinition|null
    *   The pattern or null.
    */
   protected function getPatternDefinition($id) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/pagedesigner/src/Plugin/CompoundHandlerBase.php:69

    ---------- begin diff ----------
@@ @@
   /**
    * Add the styles of the given entity to the renderer.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $entity
+   * @param Element $entity
    *   The entity to add the styles of.
    */
   protected function addStyles(Element $entity, $public = TRUE) {
@@ @@
    *
    * @param string $markup
    *   The markup to alter.
-   * @param \Drupal\pagedesigner\Entity\Element $entity
+   * @param Element $entity
    *   The entity to use.
    * @param bool $edit
    *   Whether to add the edit attributes.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/pagedesigner/src/PagedesignerService.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManager
+   * @var LanguageManager
    */
   protected $languageManager = NULL;

@@ @@
   /**
    * The element handler.
    *
-   * @var \Drupal\pagedesigner\Service\ElementHandler
+   * @var ElementHandler
    */
   protected $elementHandler = NULL;

@@ @@
   /**
    * Create a new instance.
    *
-   * @param \Drupal\Core\Language\LanguageManager $language_manager
+   * @param LanguageManager $language_manager
    *   The language manager.
    * @param \Drupal\pagedesigner\Entity\ElementHandler $element_handler
    *   The element handler.
@@ @@
   /**
    * Get all pagedesigner fields of the entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityBase $entity
+   * @param ContentEntityBase $entity
    *   The entity to get the fields from.
    *
    * @return array
@@ @@
    *
    * If no container exists, a container will be created.
    *
-   * @param \Drupal\Core\Entity\ContentEntityBase $entity
+   * @param ContentEntityBase $entity
    *   The entity to add the containers to.
    */
   public function addContainer(ContentEntityBase &$entity) {
@@ @@
   /**
    * Replaces the container linked in the entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityBase $entity
+   * @param ContentEntityBase $entity
    *   The entity to replace the container in.
    */
   public function overrideContainers(ContentEntityBase &$entity) {
@@ @@
   /**
    * Saves the containers in all fields.
    *
-   * @param \Drupal\Core\Entity\ContentEntityBase $entity
+   * @param ContentEntityBase $entity
    */
   public function saveContainer(ContentEntityBase &$entity) {
     $entityFieldManager = \Drupal::service('entity_field.manager');
@@ @@
   /**
    * Loads or creates the container for the given entity in the language of the entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityBase $entity
+   * @param ContentEntityBase $entity
    *   The entity being rendered.
    *
-   * @return \Drupal\pagedesigner\Entity\Element
+   * @return Element
    *   The container.
    */
   public function getContainer(ContentEntityBase $entity, $fieldname = 'field_pagedesigner_content') {
@@ @@
    * @param Drupal\pagedesigner\ContentEntityBase $entity
    *   The entity for which to create the container (optional).
    *
-   * @return \Drupal\pagedesigner\Entity\Element
+   * @return Element
    *   The container.
    */
   public function createContainer(string $language, ContentEntityBase $entity = NULL) {
@@ @@
   /**
    * Gets or creates the translation of the given container.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $container
+   * @param Element $container
    *   The container.
    * @param string $language
    *   The language.
    *
-   * @return \Drupal\pagedesigner\Entity\Element
+   * @return Element
    *   The container in the given language.
    */
   public function getLanguage(Element $container, $language) {
@@ @@
    * and the entity (current or given) is editable
    * by the user (current or given).
    *
-   * @param \Drupal\Core\Entity\ContentEntityBase $entity
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param ContentEntityBase $entity
+   * @param AccountInterface $user
    *
    * @return bool
    */
@@ @@
   /**
    * Returns true if the given entity may be edited by the user.
    *
-   * @param \Drupal\Core\Entity\ContentEntityBase $entity
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param ContentEntityBase $entity
+   * @param AccountInterface $user
    *
    * @return bool
    */
@@ @@
   /**
    * Get the handler.
    *
-   * @return Drupal\pagedesigner\Service\ElementHandler
+   * @return ElementHandler
    */
   protected function getHandler() {
     return $this->elementHandler;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


22) modules/contrib/pagedesigner/src/Form/ElementSettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/pagedesigner/src/Form/ElementRevisionRevertTranslationForm.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Constructs a new ElementRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Pagedesigner Element storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager) {
@@ @@
   protected function prepareRevertedRevision(ElementInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');

-    /** @var \Drupal\pagedesigner\Entity\ElementInterface $default_revision */
+    /** @var ElementInterface $default_revision */
     $latest_revision = $this->ElementStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/pagedesigner/src/Form/ElementRevisionRevertForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The Pagedesigner Element revision.
    *
-   * @var \Drupal\pagedesigner\Entity\ElementInterface
+   * @var ElementInterface
    */
   protected $revision;

@@ @@
   /**
    * The Pagedesigner Element storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $ElementStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new ElementRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Pagedesigner Element storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter) {
@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\pagedesigner\Entity\ElementInterface $revision
+   * @param ElementInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\pagedesigner\Entity\ElementInterface
+   * @return ElementInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(ElementInterface $revision, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/pagedesigner/src/Form/ElementRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pagedesigner\Form;

+use Drupal\pagedesigner\Entity\ElementInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ @@
   /**
    * The Pagedesigner Element revision.
    *
-   * @var \Drupal\pagedesigner\Entity\ElementInterface
+   * @var ElementInterface
    */
   protected $revision;

@@ @@
   /**
    * The Pagedesigner Element storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $ElementStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Constructs a new ElementRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/pagedesigner/src/EventSubscriber/InitSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pagedesigner\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\Core\Routing\CurrentRouteMatch;
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $user = NULL;

@@ @@
   /**
    * The current route.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $_currentRoute = NULL;

@@ @@
   /**
    * Create the InitSubscriber.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $user
+   * @param AccountProxyInterface $user
    *   The current user.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $route
+   * @param CurrentRouteMatch $route
    *   The current route.
    */
   public function __construct(AccountProxyInterface $user, CurrentRouteMatch $currentRoute) {
@@ @@
   /**
    * Redirect old pagedesigner url to new route.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The event.
    */
-  public function redirectOldUrl(GetResponseEvent $event) {
+  public function redirectOldUrl(RequestEvent $event) {

     if (!$this->user->isAnonymous() && \Drupal::request()->query->get('pd') == 1) {
       $nid = $this->_currentRoute->getRawParameter('node');
@@ @@
   /**
    * Disable aggregation in pagedesigner editing mode.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The event.
    */
-  public function disableAggregation(GetResponseEvent $event) {
+  public function disableAggregation(RequestEvent $event) {
     global $config;
     $editMode = \Drupal::request()->query->get('pd');
     if (!$this->user->isAnonymous() && $editMode == 1) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


27) modules/contrib/pagedesigner/src/Event/ElementEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pagedesigner\Event;

-use Symfony\Component\EventDispatcher\Event;
-
+use Symfony\Contracts\EventDispatcher\Event;
+use Drupal\pagedesigner\Entity\Element;
 /**
  * Event that is fired when a pagedesigner is handled.
  */
@@ @@
   /**
    * Constructs the object.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $entity
+   * @param Element $entity
    *   The original data.
-   * @param \Drupal\pagedesigner\Entity\Element $clone
+   * @param Element $clone
    *   The clone data.
    */
   public function __construct($eventName, &$data) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/pagedesigner/src/Entity/ElementInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pagedesigner\Entity;

+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\RevisionLogInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
@@ @@
   /**
    * Gets the Pagedesigner Element revision author.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity for the revision author.
    */
   public function getRevisionUser();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


29) modules/contrib/pagedesigner/src/ElementStorageInterface.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Gets a list of Pagedesigner Element revision IDs for a specific Pagedesigner Element.
    *
-   * @param \Drupal\pagedesigner\Entity\ElementInterface $entity
+   * @param ElementInterface $entity
    *   The Pagedesigner Element entity.
    *
    * @return int[]
@@ @@
   /**
    * Gets a list of revision IDs having a given user as Pagedesigner Element author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ @@
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\pagedesigner\Entity\ElementInterface $entity
+   * @param ElementInterface $entity
    *   The Pagedesigner Element entity.
    *
    * @return int
@@ @@
   /**
    * Unsets the language for all Pagedesigner Element with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


30) modules/contrib/pagedesigner/src/ElementHtmlRouteProvider.php:51

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/pagedesigner/src/ElementAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pagedesigner;

+use Drupal\pagedesigner\Entity\ElementInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\pagedesigner\Entity\ElementInterface $entity */
+    /** @var ElementInterface $entity */
     switch ($operation) {
       case 'view':
         if (!$entity->isPublished()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/pagedesigner/src/Controller/ElementController.php:48

    ---------- begin diff ----------
@@ @@
   /**
    * Generates an overview table of older revisions of a Pagedesigner Element .
    *
-   * @param \Drupal\pagedesigner\Entity\ElementInterface $pagedesigner_element
+   * @param ElementInterface $pagedesigner_element
    *   A Pagedesigner Element  object.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/pagedesigner/src/Controller/AssetController.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\pagedesigner\Service\AssetPluginManager definition.
    *
-   * @var \Drupal\pagedesigner\Service\AssetPluginManager
+   * @var AssetPluginManager
    */
   protected $assetManager;

@@ @@
   /**
    * Getassetform.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Return Hello string.
    */
   public function getSearchForm($type) {
@@ @@
   /**
    * Getassetform.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Return Hello string.
    */
   public function getCreateForm() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/pagedesigner/src/Annotation/PagedesignerHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pagedesigner\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The name of the form plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


35) modules/contrib/pagedesigner/src/Annotation/PagedesignerAsset.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pagedesigner\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The name of the form plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


36) modules/contrib/pagedesigner/pagedesigner.module:73

    ---------- begin diff ----------
@@ @@
  *
  * @param array $build
  *   The render array.
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The current entity.
  * @param \Drupal\Core\Entity\EntityViewDisplayInterface $display
  *   The current entity view display.
@@ @@
 /**
  * Add/Create/Translate pagedesigner container on entity save.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *
  * @return void
  */
@@ @@
  * as the entity is saved as well on container save.
  *
  * @todo Investigate a method to both create and save container in presave.
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *
  * @return void
  */
@@ @@
 /**
  * Mark pagedesigner elements as deleted on entity delete.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity being deleted.
  */
 function pagedesigner_entity_delete(EntityInterface $entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


37) modules/contrib/pagedesigner/modules/pagedesigner_yoast/pagedesigner_yoast.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\Entity\EntityFormDisplay;
 /**
  * @file
  * Contains pagedesigner_yoast update and install hooks.
  */
-
 /**
  * Update form displays to hide the body field if the pagedesigner yoast widget is used.
  */
@@ @@
     ];

     if ($form_displays = \Drupal::entityTypeManager()->getStorage('entity_form_display')->loadByProperties($properties)) {
-      /** @var \Drupal\Core\Entity\Entity\EntityFormDisplay $form_display */
+      /** @var EntityFormDisplay $form_display */
       foreach ($form_displays as $form_display) {
         $components = $form_display->getComponents();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


38) modules/contrib/pagedesigner/modules/pagedesigner_webform/tests/src/Kernel/HandlerTests/WebformHandlerTest.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     self::$modules[] = 'system';
     self::$modules[] = 'path';
     self::$modules[] = 'webform';
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


39) modules/contrib/pagedesigner/modules/pagedesigner_video/tests/src/Kernel/HandlerTests/VideoHandlerTest.php:38

    ---------- begin diff ----------
@@ @@
    *
    * @todo Add the pagedesigner editor config to the environment.
    */
-  public function setUp() {
+  public function setUp(): void {
     self::$modules[] = 'pagedesigner_video';

     parent::setUp();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/pagedesigner/modules/pagedesigner_svg/tests/src/Kernel/HandlerTests/SVGHandlerTest.php:38

    ---------- begin diff ----------
@@ @@
    *
    * @todo Add the pagedesigner editor config to the environment.
    */
-  public function setUp() {
+  public function setUp(): void {
     self::$modules[] = 'pagedesigner_svg';

     parent::setUp();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


41) modules/contrib/pagedesigner/modules/pagedesigner_multitheme/src/EventSubscriber/FilterSubscriber.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Create the FilterSubscriber.
    *
-   * @param \Drupal\Core\Theme\ThemeManager $themeManager
+   * @param ThemeManager $themeManager
    *   The theme manager.
    */
   public function __construct(ThemeManager $themeManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


42) modules/contrib/pagedesigner/modules/pagedesigner_media/tests/src/Kernel/HandlerTests/MediaHandlerTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\pagedesigner_media\Kernel\HandlerTests;

+use Drupal\file\Entity\File;
+use Drupal\media\Entity\Media;
 use Drupal\Tests\pagedesigner\Kernel\HandlerTests\PlainFieldHandlerTestBase;

 /**
@@ @@
   /**
    * The file entity for the test.
    *
-   * @var Drupal\file\Entity\File
+   * @var File
    */
   protected $file = NULL;

@@ @@
   /**
    * The media entity for the test.
    *
-   * @var Drupal\media\Entity\Media
+   * @var Media
    */
   protected $media = NULL;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     self::$modules[] = 'system';
     self::$modules[] = 'file';
     self::$modules[] = 'image';
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


43) modules/contrib/pagedesigner/modules/pagedesigner_link/tests/src/Kernel/HandlerTests/TargetHandlerTest.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     self::$modules[] = 'system';
     self::$modules[] = 'link';
     self::$modules[] = 'linkit';
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


44) modules/contrib/pagedesigner/modules/pagedesigner_link/tests/src/Kernel/HandlerTests/LinkHandlerTest.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     self::$modules[] = 'system';
     self::$modules[] = 'link';
     self::$modules[] = 'linkit';
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


45) modules/contrib/pagedesigner/modules/pagedesigner_layout/src/Plugin/rest/resource/LayoutResource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pagedesigner_layout\Plugin\rest\resource;

+use Symfony\Component\HttpKernel\Exception\HttpException;
 use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\pagedesigner\Entity\Element;
 use Drupal\pagedesigner\Service\Renderer;
@@ @@
   /**
    * A current user instance.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The handler manager.
    *
-   * @var \Drupal\pagedesigner\Service\StateChanger
+   * @var StateChanger
    */
   protected $stateChanger;

@@ @@
   /**
    * The handler manager.
    *
-   * @var \Drupal\pagedesigner\Service\Renderer
+   * @var Renderer
    */
   protected $renderer;

@@ @@
    *   The plugin implementation definition.
    * @param array $serializer_formats
    *   The available serialization formats.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   A current user instance.
-   * @param \Drupal\pagedesigner\Service\StateChanger $state_changer
+   * @param StateChanger $state_changer
    *   The state changer.
-   * @param \Drupal\pagedesigner\Service\Renderer $renderer
+   * @param Renderer $renderer
    *   The pagedesigner renderer.
    */
   public function __construct(
@@ @@
    * @param int $id
    *   ID of the entity.
    *
-   * @return \Drupal\rest\ModifiedResourceResponse
+   * @return ModifiedResourceResponse
    *   The HTTP response object.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws exception expected.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\BadRequestHttpException
+   * @throws BadRequestHttpException
    *   If the request is malformed.
    */
   public function get($id) {
@@ @@
   /**
    * Responds to POST requests.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Drupal\rest\ModifiedResourceResponse
+   * @return ModifiedResourceResponse
    *   The HTTP response object.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws exception expected.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\BadRequestHttpException
+   * @throws BadRequestHttpException
    *   If the request is malformed.
    */
   public function post(Request $request) {
@@ @@
    * @param int $id
    *   ID of the entity.
    *
-   * @return \Drupal\rest\ModifiedResourceResponse
+   * @return ModifiedResourceResponse
    *   The HTTP response object.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws exception expected.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\BadRequestHttpException
+   * @throws BadRequestHttpException
    *   If the request is malformed.
    */
   public function delete($id) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


46) modules/contrib/pagedesigner/modules/pagedesigner_image/tests/src/Kernel/HandlerTests/ImageHandlerTest.php:38

    ---------- begin diff ----------
@@ @@
    *
    * @todo Add the pagedesigner editor config to the environment.
    */
-  public function setUp() {
+  public function setUp(): void {
     self::$modules[] = 'pagedesigner_image';

     parent::setUp();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


47) modules/contrib/pagedesigner/modules/pagedesigner_embed/tests/src/Kernel/HandlerTests/EmbedHandlerTest.php:45

    ---------- begin diff ----------
@@ @@
    *
    * @todo Add the pagedesigner editor config to the environment.
    */
-  public function setUp() {
+  public function setUp(): void {
     self::$modules[] = 'video_embed_field';
     self::$modules[] = 'video_embed_media';
     self::$modules[] = 'pagedesigner_embed';
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


48) modules/contrib/pagedesigner/modules/pagedesigner_embed/src/Plugin/Field/FieldFormatter/Thumbnail.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The embed provider plugin manager.
    *
-   * @var \Drupal\video_embed_field\ProviderManagerInterface
+   * @var ProviderManagerInterface
    */
   protected $providerManager;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Third party settings.
-   * @param \Drupal\video_embed_field\ProviderManagerInterface $provider_manager
+   * @param ProviderManagerInterface $provider_manager
    *   The video embed provider manager.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, $settings, $label, $view_mode, $third_party_settings, ProviderManagerInterface $provider_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


49) modules/contrib/pagedesigner/modules/pagedesigner_embed/src/Plugin/Field/FieldFormatter/Provider.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The embed provider plugin manager.
    *
-   * @var \Drupal\video_embed_field\ProviderManagerInterface
+   * @var ProviderManagerInterface
    */
   protected $providerManager;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Third party settings.
-   * @param \Drupal\video_embed_field\ProviderManagerInterface $provider_manager
+   * @param ProviderManagerInterface $provider_manager
    *   The video embed provider manager.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, $settings, $label, $view_mode, $third_party_settings, ProviderManagerInterface $provider_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


50) modules/contrib/pagedesigner/modules/pagedesigner_embed/src/Plugin/Field/FieldFormatter/EmbedUrl.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The embed provider plugin manager.
    *
-   * @var \Drupal\video_embed_field\ProviderManagerInterface
+   * @var ProviderManagerInterface
    */
   protected $providerManager;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Third party settings.
-   * @param \Drupal\video_embed_field\ProviderManagerInterface $provider_manager
+   * @param ProviderManagerInterface $provider_manager
    *   The video embed provider manager.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, $settings, $label, $view_mode, $third_party_settings, ProviderManagerInterface $provider_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


51) modules/contrib/pagedesigner/modules/pagedesigner_duplication/src/Service/DuplicationService.php:15

    ---------- begin diff ----------
@@ @@
    * Clone the elements from on entity to another entity.
    * Only matching pagedesigner fields are taken into account.
    *
-   * @param \Drupal\Core\Entity\ContentEntityBase $source
+   * @param ContentEntityBase $source
    *   The source entity.
-   * @param \Drupal\Core\Entity\ContentEntityBase $target
+   * @param ContentEntityBase $target
    *   The target entity.
    */
   public function duplicate(ContentEntityBase $source, ContentEntityBase $target) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


52) modules/contrib/pagedesigner/modules/pagedesigner_duplication/pagedesigner_duplication.module:31

    ---------- begin diff ----------
@@ @@
  * Adds the copy form to copy content and layout.
  *
  * @param array $form
- * @param \Drupal\Core\Form\FormStateInterface $formState
+ * @param FormStateInterface $formState
  * @param string $form_id
  *
  * @return void
@@ @@
  * Helper function to add the copy form to copy content and layout.
  *
  * @param array $form
- * @param \Drupal\Core\Form\FormStateInterface $formState
+ * @param FormStateInterface $formState
  *
  * @return void
  */
@@ @@
  * Copies layout and content.
  *
  * @param array $form
- * @param \Drupal\Core\Form\FormStateInterface $formState
+ * @param FormStateInterface $formState
  *
  * @return void
  */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


53) modules/contrib/pagedesigner/modules/pagedesigner_document/tests/src/Kernel/HandlerTests/DocumentHandlerTest.php:38

    ---------- begin diff ----------
@@ @@
    *
    * @todo Add the pagedesigner editor config to the environment.
    */
-  public function setUp() {
+  public function setUp(): void {
     self::$modules[] = 'pagedesigner_document';

     parent::setUp();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


54) modules/contrib/pagedesigner/modules/pagedesigner_document/src/Plugin/Linkit/Substitution/FileDownload.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pagedesigner_document\Plugin\Linkit\Substitution;

+use Drupal\media\Entity\MediaType;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Get the URL associated with a given entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to get a URL for.
    *
-   * @return \Drupal\Core\GeneratedUrl
+   * @return GeneratedUrl
    *   A url to replace.
    */
   public function getUrl(EntityInterface $entity) {
     $url = new GeneratedUrl();

-    /** @var \Drupal\media\Entity\MediaType $media_bundle */
+    /** @var MediaType $media_bundle */
     $media_bundle = $this->entityTypeManager->getStorage('media_type')->load($entity->bundle());

     // Default to the canonical URL if the bundle doesn't have a source field.
@@ @@
       return $entity->toUrl('canonical')->toString(TRUE);
     }

-    $fileUrl = file_create_url($file->getFileUri());
+    $fileUrl = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
     if (empty($fileUrl)) {
       return $entity->toUrl('canonical')->toString(TRUE);
     }
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


55) modules/contrib/pagedesigner/modules/pagedesigner_block/tests/src/Kernel/HandlerTests/BlockHandlerTest.php:37

    ---------- begin diff ----------
@@ @@
    *
    * @todo Add the pagedesigner editor config to the environment.
    */
-  public function setUp() {
+  public function setUp(): void {
     self::$modules[] = 'system';
     self::$modules[] = 'block';
     self::$modules[] = 'pagedesigner_block';
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


56) modules/contrib/pagedesigner/modules/pagedesigner_block/src/Plugin/Condition/PagedesignerCondition.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pagedesigner_block\Plugin\Condition;

+use Drupal\Core\Menu\MenuActiveTrailInterface;
+use Drupal\Core\Menu\MenuParentFormSelectorInterface;
+use Drupal\Core\Menu\MenuLinkManagerInterface;
 use Drupal\Core\Condition\ConditionInterface;
 use Drupal\Core\Condition\ConditionPluginBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Menu\MenuActiveTrailInterface $menu_active_trail
+   * @param MenuActiveTrailInterface $menu_active_trail
    *   The menu active trail service.
-   * @param \Drupal\Core\Menu\MenuParentFormSelectorInterface $menu_parent_form_selector
+   * @param MenuParentFormSelectorInterface $menu_parent_form_selector
    *   The menu parent form selector service.
-   * @param \Drupal\Core\Menu\MenuLinkManagerInterface $plugin_manager_menu_link
+   * @param MenuLinkManagerInterface $plugin_manager_menu_link
    *   The plugin manager menu link service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


57) modules/contrib/pagedesigner/modules/pagedesigner_audio/tests/src/Kernel/HandlerTests/AudioHandlerTest.php:38

    ---------- begin diff ----------
@@ @@
    *
    * @todo Add the pagedesigner editor config to the environment.
    */
-  public function setUp() {
+  public function setUp(): void {
     self::$modules[] = 'pagedesigner_audio';

     parent::setUp();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [ERROR] Could not process                                                      
         "modules/contrib/pagedesigner/modules/pagedesigner_yoast/src/Plugin/Field
         /FieldWidget/PagedesignerYoastSeoWidget.php" file, due to:             
         "Analyze error: "Class                                                 
         Drupal\yoast_seo\Plugin\Field\FieldWidget\YoastSeoWidget not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/pagedesigner/modules/pagedesigner_pagetree/src/Plugin/pa
         getree/State/Pagedesigner.php" file, due to:                           
         "Analyze error: "Class Drupal\pagetree\Plugin\StatePluginBase not      
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/pagedesigner/modules/pagedesigner_frontendpublishing/src
         /Plugin/frontendpublishing/StateChange/Pagedesigner.php" file, due to: 
         "Analyze error: "Class                                                 
         Drupal\frontendpublishing\Plugin\frontendpublishing\StateChange\Standard
         not found.". Include your files in                                     
         "$rectorConfig->autoloadPaths([...]);" or                              
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [WARNING] 1 nodes were removed                                                 

