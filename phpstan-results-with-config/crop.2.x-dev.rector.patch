diff --git a/crop.install b/crop.install
index 8f922bb..a168d10 100644
--- a/crop.install
+++ b/crop.install
@@ -58,7 +58,7 @@ function crop_update_8001(&$sandbox) {
   }
   else {
     foreach ($crops as $cid) {
-      /** @var \Drupal\crop\Entity\Crop $crop */
+      /** @var Crop $crop */
       $crop = Crop::load($cid);
       $files = \Drupal::entityQuery('file')
         ->condition('uri', $crop->get('uri')->value)
diff --git a/crop.module b/crop.module
index aa7d5f8..79a184b 100644
--- a/crop.module
+++ b/crop.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\media\Entity\MediaType;
+use Drupal\Core\Field\FieldDefinitionInterface;
 /**
  * @file
  * The Crop API Drupal module.
@@ -87,12 +89,12 @@ function template_preprocess_crop_crop_summary(&$variables) {
  * Adds crop configuration fields to media form.
  */
 function crop_form_media_type_edit_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\media\Entity\MediaType $entity_type */
+  /** @var MediaType $entity_type */
   $entity_type = $form_state->getFormObject()->getEntity();
   $options = [];
   $allowed_field_types = ['file', 'image'];
 
-  /** @var \Drupal\Core\Field\FieldDefinitionInterface[] $fields */
+  /** @var FieldDefinitionInterface[] $fields */
   $fields = \Drupal::service('entity_field.manager')->getFieldDefinitions('media', $entity_type->id());
   foreach ($fields as $field_name => $field) {
     if (in_array($field->getType(), $allowed_field_types) && !$field->getFieldStorageDefinition()->isBaseField()) {
diff --git a/src/Annotation/CropEntityProvider.php b/src/Annotation/CropEntityProvider.php
index 43d69fa..ccc59f0 100644
--- a/src/Annotation/CropEntityProvider.php
+++ b/src/Annotation/CropEntityProvider.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\crop\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -25,7 +26,7 @@ class CropEntityProvider extends Plugin {
    *
    * Will usually match entity type name.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -34,7 +35,7 @@ class CropEntityProvider extends Plugin {
   /**
    * A brief description of the crop entity provider.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/CropInterface.php b/src/CropInterface.php
index f37c872..6b87a27 100644
--- a/src/CropInterface.php
+++ b/src/CropInterface.php
@@ -63,10 +63,10 @@ interface CropInterface extends ContentEntityInterface {
   /**
    * Gets entity provider for the crop.
    *
-   * @return \Drupal\crop\EntityProviderInterface
+   * @return EntityProviderInterface
    *   Entity provider.
    *
-   * @throws \Drupal\crop\EntityProviderNotFoundException
+   * @throws EntityProviderNotFoundException
    *   Thrown if entity provider not found.
    */
   public function provider();
@@ -103,7 +103,7 @@ interface CropInterface extends ContentEntityInterface {
    *
    * @param string $uri
    *   URI of the image.
-   * @param \Drupal\image\ImageStyleInterface $image_style
+   * @param ImageStyleInterface $image_style
    *   The image style.
    *
    * @return \Drupal\crop\CropInterface|null
diff --git a/src/CropStorageInterface.php b/src/CropStorageInterface.php
index e1da959..a12b19c 100644
--- a/src/CropStorageInterface.php
+++ b/src/CropStorageInterface.php
@@ -19,7 +19,7 @@ interface CropStorageInterface extends SqlEntityStorageInterface, DynamicallyFie
    * @param string $type
    *   Crop type.
    *
-   * @return \Drupal\crop\CropInterface|null
+   * @return CropInterface|null
    *   A Crop object or NULL if nothing matches the search parameters.
    */
   public function getCrop($uri, $type);
diff --git a/src/CropTypeInterface.php b/src/CropTypeInterface.php
index 1f35d4f..aab1bbb 100644
--- a/src/CropTypeInterface.php
+++ b/src/CropTypeInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\crop;
 
+use Symfony\Component\Validator\ConstraintViolationListInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 
 /**
@@ -37,7 +38,7 @@ interface CropTypeInterface extends ConfigEntityInterface {
   /**
    * Validates the currently set values.
    *
-   * @return \Symfony\Component\Validator\ConstraintViolationListInterface
+   * @return ConstraintViolationListInterface
    *   A list of constraint violations. If the list is empty, validation
    *   succeeded.
    */
diff --git a/src/CropTypeListBuilder.php b/src/CropTypeListBuilder.php
index 8972084..dd1badc 100644
--- a/src/CropTypeListBuilder.php
+++ b/src/CropTypeListBuilder.php
@@ -22,27 +22,27 @@ class CropTypeListBuilder extends ConfigEntityListBuilder {
   /**
    * The url generator service.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a CropTypeListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   The url generator service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, UrlGeneratorInterface $url_generator, EntityTypeManagerInterface $entity_type_manager) {
@@ -98,7 +98,7 @@ class CropTypeListBuilder extends ConfigEntityListBuilder {
       ->execute();
     $image_styles = ImageStyle::loadMultiple($image_style_ids);
 
-    /** @var \Drupal\image\Entity\ImageStyle $image_style */
+    /** @var ImageStyle $image_style */
     $usage = [];
     foreach ($image_styles as $image_style) {
       if (count($usage) < 2) {
diff --git a/src/Entity/Crop.php b/src/Entity/Crop.php
index 823d9ff..e6bac2f 100644
--- a/src/Entity/Crop.php
+++ b/src/Entity/Crop.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\crop\Entity;
 
+use Drupal\crop\EntityProviderManager;
+use Drupal\image\ImageEffectInterface;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -117,7 +119,7 @@ class Crop extends ContentEntityBase implements CropInterface {
    * {@inheritdoc}
    */
   public function provider() {
-    /** @var \Drupal\crop\EntityProviderManager $plugin_manager */
+    /** @var EntityProviderManager $plugin_manager */
     $plugin_manager = \Drupal::service('plugin.manager.crop.entity_provider');
 
     if (!$plugin_manager->hasDefinition($this->entity_type->value)) {
@@ -200,7 +202,7 @@ class Crop extends ContentEntityBase implements CropInterface {
 
       $effects = [];
       foreach ($image_style->getEffects() as $uuid => $effect) {
-        /** @var \Drupal\image\ImageEffectInterface $effect */
+        /** @var ImageEffectInterface $effect */
         // Store the effects parameters for later use.
         $effects[$effect->getPluginId()] = [
           'uuid' => $uuid,
diff --git a/src/EntityProviderInterface.php b/src/EntityProviderInterface.php
index 2cc568c..c3936f6 100644
--- a/src/EntityProviderInterface.php
+++ b/src/EntityProviderInterface.php
@@ -21,7 +21,7 @@ interface EntityProviderInterface extends PluginInspectionInterface {
   /**
    * Gets URI of the image file.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity being cropping.
    *
    * @return string|false
diff --git a/src/EntityProviderManager.php b/src/EntityProviderManager.php
index 78cdf80..2f49c12 100644
--- a/src/EntityProviderManager.php
+++ b/src/EntityProviderManager.php
@@ -17,9 +17,9 @@ class EntityProviderManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Events/AutomaticCrop.php b/src/Events/AutomaticCrop.php
index cc893d4..b798cec 100644
--- a/src/Events/AutomaticCrop.php
+++ b/src/Events/AutomaticCrop.php
@@ -2,10 +2,10 @@
 
 namespace Drupal\crop\Events;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Image\ImageInterface;
 use Drupal\crop\CropInterface;
 use Drupal\crop\Entity\CropType;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Represents automatic crop action as event.
@@ -15,7 +15,7 @@ class AutomaticCrop extends Event {
   /**
    * The crop entity.
    *
-   * @var \Drupal\crop\CropInterface|false
+   * @var CropInterface|false
    */
   protected $crop = FALSE;
 
@@ -23,14 +23,14 @@ class AutomaticCrop extends Event {
   /**
    * The image resource to crop.
    *
-   * @var \Drupal\Core\Image\ImageInterface
+   * @var ImageInterface
    */
   protected $image;
 
   /**
    * The crop type loaded.
    *
-   * @var \Drupal\crop\Entity\CropType
+   * @var CropType
    */
   protected $cropType;
 
@@ -44,8 +44,8 @@ class AutomaticCrop extends Event {
   /**
    * Constructs a EntitySelectionEvent object.
    *
-   * @param \Drupal\Core\Image\ImageInterface $image
-   * @param \Drupal\crop\Entity\CropType $cropType
+   * @param ImageInterface $image
+   * @param CropType $cropType
    * @param $configuration
    */
   public function __construct(ImageInterface $image, CropType $cropType, array $configuration) {
@@ -57,7 +57,7 @@ class AutomaticCrop extends Event {
   /**
    * Set calculated crop instance.
    *
-   * @param \Drupal\crop\CropInterface $crop
+   * @param CropInterface $crop
    *   The crop entity instance.
    */
   public function setCrop(CropInterface $crop) {
@@ -67,7 +67,7 @@ class AutomaticCrop extends Event {
   /**
    * Get crop instance.
    *
-   * @return \Drupal\crop\CropInterface|false
+   * @return CropInterface|false
    *   List of fallbacks.
    */
   public function getCrop() {
@@ -77,7 +77,7 @@ class AutomaticCrop extends Event {
   /**
    * Get the crop type entity.
    *
-   * @return \Drupal\crop\Entity\CropType
+   * @return CropType
    *   The crop type entity loaded.
    */
   public function getCropType() {
@@ -87,7 +87,7 @@ class AutomaticCrop extends Event {
   /**
    * Get image to crop.
    *
-   * @return \Drupal\Core\Image\ImageInterface
+   * @return ImageInterface
    *   The image resource.
    */
   public function getImage() {
diff --git a/src/Events/AutomaticCropProviders.php b/src/Events/AutomaticCropProviders.php
index 05daad3..b2b7a92 100644
--- a/src/Events/AutomaticCropProviders.php
+++ b/src/Events/AutomaticCropProviders.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\crop\Events;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Collects "Automatic crop" providers.
diff --git a/src/Form/CropTypeDeleteForm.php b/src/Form/CropTypeDeleteForm.php
index 1bd56cc..11b4400 100644
--- a/src/Form/CropTypeDeleteForm.php
+++ b/src/Form/CropTypeDeleteForm.php
@@ -17,14 +17,14 @@ class CropTypeDeleteForm extends EntityConfirmFormBase {
   /**
    * String translation manager.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface
+   * @var TranslationInterface
    */
   protected $translation;
 
   /**
    * Constructs a new CropTypeDeleteForm object.
    *
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation manager.
    */
   public function __construct(TranslationInterface $string_translation) {
diff --git a/src/Form/CropTypeForm.php b/src/Form/CropTypeForm.php
index be8db52..74e963c 100644
--- a/src/Form/CropTypeForm.php
+++ b/src/Form/CropTypeForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\crop\Form;
 
+use Drupal\crop\Entity\CropType;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Link;
@@ -128,7 +129,7 @@ class CropTypeForm extends EntityForm {
   public function validateForm(array &$form, FormStateInterface $form_state) {
     parent::validateForm($form, $form_state);
 
-    /** @var \Drupal\crop\Entity\CropType $entity */
+    /** @var CropType $entity */
     $entity = $this->buildEntity($form, $form_state);
     $violations = $entity->validate();
 
@@ -138,11 +139,11 @@ class CropTypeForm extends EntityForm {
   /**
    * Flags violations for the current form.
    *
-   * @param \Symfony\Component\Validator\ConstraintViolationListInterface $violations
+   * @param ConstraintViolationListInterface $violations
    *   The violations to flag.
    * @param array $form
    *   A nested array of form elements comprising the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function flagViolations(ConstraintViolationListInterface $violations, array $form, FormStateInterface $form_state) {
diff --git a/src/Plugin/Crop/EntityProvider/File.php b/src/Plugin/Crop/EntityProvider/File.php
index e8721d5..90847fe 100644
--- a/src/Plugin/Crop/EntityProvider/File.php
+++ b/src/Plugin/Crop/EntityProvider/File.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\crop\Plugin\Crop\EntityProvider;
 
+use Drupal\file\FileInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\crop\EntityProviderBase;
 
@@ -20,7 +21,7 @@ class File extends EntityProviderBase {
    * {@inheritdoc}
    */
   public function uri(EntityInterface $entity) {
-    /** @var \Drupal\file\FileInterface $entity */
+    /** @var FileInterface $entity */
     return $entity->getFileUri();
   }
 
diff --git a/src/Plugin/Crop/EntityProvider/Media.php b/src/Plugin/Crop/EntityProvider/Media.php
index f3d6127..fa5d9eb 100644
--- a/src/Plugin/Crop/EntityProvider/Media.php
+++ b/src/Plugin/Crop/EntityProvider/Media.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\crop\Plugin\Crop\EntityProvider;
 
+use Drupal\Core\Config\Entity\ConfigEntityBase;
+use Drupal\file\FileInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -22,7 +24,7 @@ class Media extends EntityProviderBase implements ContainerFactoryPluginInterfac
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -35,7 +37,7 @@ class Media extends EntityProviderBase implements ContainerFactoryPluginInterfac
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
@@ -60,7 +62,7 @@ class Media extends EntityProviderBase implements ContainerFactoryPluginInterfac
    */
   public function uri(EntityInterface $entity) {
     $bundle_entity_type = $entity->getEntityType()->getBundleEntityType();
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityBase $entity_type */
+    /** @var ConfigEntityBase $entity_type */
     $entity_type = $this->entityTypeManager->getStorage($bundle_entity_type)->load($entity->bundle());
     $image_field = $entity_type->getThirdPartySetting('crop', 'image_field');
 
@@ -68,7 +70,7 @@ class Media extends EntityProviderBase implements ContainerFactoryPluginInterfac
       return FALSE;
     }
 
-    /** @var \Drupal\file\FileInterface $image */
+    /** @var FileInterface $image */
     $image = $this->entityTypeManager->getStorage('file')->load($entity->{$image_field}->target_id);
 
     if (strpos($image->getMimeType(), 'image') !== 0) {
diff --git a/src/Plugin/ImageEffect/CropEffect.php b/src/Plugin/ImageEffect/CropEffect.php
index f6930b6..da657e2 100644
--- a/src/Plugin/ImageEffect/CropEffect.php
+++ b/src/Plugin/ImageEffect/CropEffect.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\crop\Plugin\ImageEffect;
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\crop\Entity\CropType;
 use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Image\ImageFactory;
@@ -32,35 +34,35 @@ class CropEffect extends ConfigurableImageEffectBase implements ContainerFactory
   /**
    * Crop entity storage.
    *
-   * @var \Drupal\crop\CropStorageInterface
+   * @var CropStorageInterface
    */
   protected $storage;
 
   /**
    * Crop type entity storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $typeStorage;
 
   /**
    * Crop entity or Automated Crop Plugin.
    *
-   * @var \Drupal\crop\CropInterface|false
+   * @var CropInterface|false
    */
   protected $crop = FALSE;
 
   /**
    * The image factory service.
    *
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   protected $imageFactory;
 
   /**
    * Event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
@@ -207,10 +209,10 @@ class CropEffect extends ConfigurableImageEffectBase implements ContainerFactory
   /**
    * Gets crop entity for the image.
    *
-   * @param \Drupal\Core\Image\ImageInterface $image
+   * @param ImageInterface $image
    *   Image object.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|\Drupal\crop\CropInterface|false
+   * @return EntityInterface|CropInterface|false
    *   Crop entity or FALSE.
    */
   protected function getCrop(ImageInterface $image) {
@@ -219,10 +221,10 @@ class CropEffect extends ConfigurableImageEffectBase implements ContainerFactory
     }
 
     if (!$this->crop && !empty($this->configuration['automatic_crop_provider'])) {
-      /** @var \Drupal\crop\Entity\CropType $crop_type */
+      /** @var CropType $crop_type */
       $crop_type = $this->typeStorage->load($this->configuration['crop_type']);
       $automatic_crop_event = new AutomaticCrop($image, $crop_type, $this->configuration);
-      $this->eventDispatcher->dispatch(Events::AUTOMATIC_CROP, $automatic_crop_event);
+      $this->eventDispatcher->dispatch($automatic_crop_event, Events::AUTOMATIC_CROP);
       $this->crop = $automatic_crop_event->getCrop();
     }
 
@@ -264,7 +266,7 @@ class CropEffect extends ConfigurableImageEffectBase implements ContainerFactory
    */
   public function getAutomaticCropProvidersList() {
     $event = new AutomaticCropProviders();
-    $this->eventDispatcher->dispatch(Events::AUTOMATIC_CROP_PROVIDERS, $event);
+    $this->eventDispatcher->dispatch($event, Events::AUTOMATIC_CROP_PROVIDERS);
 
     return $event->getProviders();
   }
diff --git a/src/Plugin/Validation/Constraint/CropTypeAspectRatioValidationConstraintValidator.php b/src/Plugin/Validation/Constraint/CropTypeAspectRatioValidationConstraintValidator.php
index 4de8d00..f490c0f 100644
--- a/src/Plugin/Validation/Constraint/CropTypeAspectRatioValidationConstraintValidator.php
+++ b/src/Plugin/Validation/Constraint/CropTypeAspectRatioValidationConstraintValidator.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\crop\Plugin\Validation\Constraint;
 
+use Symfony\Component\Validator\Context\ExecutionContextInterface;
+use Drupal\crop\Entity\CropType;
 use Symfony\Component\Validator\Constraint;
 use Symfony\Component\Validator\ConstraintValidator;
 
@@ -13,7 +15,7 @@ class CropTypeAspectRatioValidationConstraintValidator extends ConstraintValidat
   /**
    * Validator 2.5 and upwards compatible execution context.
    *
-   * @var \Symfony\Component\Validator\Context\ExecutionContextInterface
+   * @var ExecutionContextInterface
    */
   protected $context;
 
@@ -21,7 +23,7 @@ class CropTypeAspectRatioValidationConstraintValidator extends ConstraintValidat
    * {@inheritdoc}
    */
   public function validate($value, Constraint $constraint) {
-    /** @var \Drupal\crop\Entity\CropType $value */
+    /** @var CropType $value */
     $aspect_ratio = $value->getAspectRatio();
     if (!empty($aspect_ratio) && !preg_match($value::VALIDATION_REGEXP, $aspect_ratio)) {
       $this->context->buildViolation($constraint->message)
diff --git a/src/Plugin/Validation/Constraint/CropTypeMachineNameValidationConstraintValidator.php b/src/Plugin/Validation/Constraint/CropTypeMachineNameValidationConstraintValidator.php
index 977155d..67aa5e4 100644
--- a/src/Plugin/Validation/Constraint/CropTypeMachineNameValidationConstraintValidator.php
+++ b/src/Plugin/Validation/Constraint/CropTypeMachineNameValidationConstraintValidator.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\crop\Plugin\Validation\Constraint;
 
+use Symfony\Component\Validator\Context\ExecutionContextInterface;
+use Drupal\crop\Entity\CropType;
 use Symfony\Component\Validator\Constraint;
 use Symfony\Component\Validator\ConstraintValidator;
 
@@ -13,7 +15,7 @@ class CropTypeMachineNameValidationConstraintValidator extends ConstraintValidat
   /**
    * Validator 2.5 and upwards compatible execution context.
    *
-   * @var \Symfony\Component\Validator\Context\ExecutionContextInterface
+   * @var ExecutionContextInterface
    */
   protected $context;
 
@@ -22,7 +24,7 @@ class CropTypeMachineNameValidationConstraintValidator extends ConstraintValidat
    */
   public function validate($value, Constraint $constraint) {
     // '0' is invalid, since elsewhere we check it using empty().
-    /** @var \Drupal\crop\Entity\CropType $value */
+    /** @var CropType $value */
     if (trim($value->id()) == '0') {
       $this->context->buildViolation($constraint->message)
         ->atPath('id')
