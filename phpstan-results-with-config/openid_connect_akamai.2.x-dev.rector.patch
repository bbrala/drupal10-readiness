diff --git a/src/Controller/OpenIDConnectRedirectController.php b/src/Controller/OpenIDConnectRedirectController.php
index 0fa88c3..2c3966c 100644
--- a/src/Controller/OpenIDConnectRedirectController.php
+++ b/src/Controller/OpenIDConnectRedirectController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\openid_connect_akamai\Controller;
 
+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\openid_connect\Controller\OpenIDConnectRedirectController as BaseOpenIDConnectRedirectController;
 use Symfony\Component\HttpFoundation\Cookie;
 
@@ -18,7 +19,7 @@ class OpenIDConnectRedirectController extends BaseOpenIDConnectRedirectControlle
    * @param string $client_name
    *   The client name.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The redirect response starting the authentication request.
    */
   public function authenticate($client_name) {
@@ -29,7 +30,7 @@ class OpenIDConnectRedirectController extends BaseOpenIDConnectRedirectControlle
     $query = $this->requestStack->getCurrentRequest()->query;
     if ($query->get('error')) {
       // Set cookie which controls that the login attempt using the SSO failed.
-      $response->headers->setCookie(new Cookie('akamai_error', '1', time() + $configuration['sso_cookie_age']));
+      $response->headers->setCookie(Cookie::create('akamai_error', '1', time() + $configuration['sso_cookie_age']));
       if ($query->get('error') == 'login_required') {
         // Remove error message.
         $this->messenger()->deleteByType('warning');
@@ -38,7 +39,7 @@ class OpenIDConnectRedirectController extends BaseOpenIDConnectRedirectControlle
     }
 
     if ($this->currentUser()->isAuthenticated()) {
-      $response->headers->setCookie(new Cookie('akamai_error', '1', 1));
+      $response->headers->setCookie(Cookie::create('akamai_error', '1', 1));
     }
 
     return $response;
diff --git a/src/EventSubscriber/AnonymousRedirectSubscriber.php b/src/EventSubscriber/AnonymousRedirectSubscriber.php
index 504420b..fae4c37 100644
--- a/src/EventSubscriber/AnonymousRedirectSubscriber.php
+++ b/src/EventSubscriber/AnonymousRedirectSubscriber.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\openid_connect_akamai\EventSubscriber;
 
+use Drupal\openid_connect_akamai\Plugin\OpenIDConnectClient\Akamai;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Url;
@@ -9,7 +12,6 @@ use Drupal\openid_connect\Plugin\OpenIDConnectClientManager;
 use GuzzleHttp\ClientInterface;
 use GuzzleHttp\Exception\RequestException;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 
 /**
@@ -23,14 +25,14 @@ class AnonymousRedirectSubscriber implements EventSubscriberInterface {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * OpenId Akamai Client.
    *
-   * @var \Drupal\openid_connect_akamai\Plugin\OpenIDConnectClient\Akamai
+   * @var Akamai
    */
   protected $openidAkamaiClient;
 
@@ -44,23 +46,23 @@ class AnonymousRedirectSubscriber implements EventSubscriberInterface {
   /**
    * Guzzle Http Client.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;
 
   /**
    * Constructs a new AnonymousRedirectSubscriber instance.
    *
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   Configuration object.
-   * @param \Drupal\openid_connect\Plugin\OpenIDConnectClientManager $openid_client_manager
+   * @param OpenIDConnectClientManager $openid_client_manager
    *   OpenId Client Manager.
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   Guzzle Http Client.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function __construct(AccountInterface $current_user, ConfigFactoryInterface $config, OpenIDConnectClientManager $openid_client_manager, ClientInterface $http_client) {
     $this->currentUser = $current_user;
@@ -81,10 +83,10 @@ class AnonymousRedirectSubscriber implements EventSubscriberInterface {
   /**
    * Redirects anonymous users to login endpoint for SSO.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The request event.
    */
-  public function redirectAnonymous(GetResponseEvent $event) {
+  public function redirectAnonymous(RequestEvent $event) {
     $request = $event->getRequest();
 
     if ($this->akamaiSettings['enable_sso']
diff --git a/src/Routing/RouteSubscriber.php b/src/Routing/RouteSubscriber.php
index 0676398..8e599a5 100644
--- a/src/Routing/RouteSubscriber.php
+++ b/src/Routing/RouteSubscriber.php
@@ -24,7 +24,7 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * RouteSubscriber constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The config factory.
    */
   public function __construct(ConfigFactoryInterface $config) {
