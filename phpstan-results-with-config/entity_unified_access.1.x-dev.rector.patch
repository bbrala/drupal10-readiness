diff --git a/entity_unified_access.info.yml b/entity_unified_access.info.yml
index ac0e903..23bdc4d 100644
--- a/entity_unified_access.info.yml
+++ b/entity_unified_access.info.yml
@@ -1,4 +1,4 @@
 name: Entity Unified Access
 description: Adds a unified access event that replaces hook_entity_access and hook_entity_views_query.
 type: module
-core_version_requirement: ^8.7.7 || ^9
+core_version_requirement: ^8.7.7 || ^9 || ^10
diff --git a/entity_unified_access.module b/entity_unified_access.module
index e4344f0..8be49a3 100644
--- a/entity_unified_access.module
+++ b/entity_unified_access.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\Core\TypedData\Exception\MissingDataException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 /**
  * @file
  * Provides unified access.
@@ -14,10 +17,10 @@ use Drupal\entity_unified_access\QueryAccess\SqlQueryAlter;
 /**
  * Implements hook_entity_access().
  *
- * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+ * @throws MissingDataException
  */
 function entity_unified_access_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
-  /** @var \Drupal\entity_unified_access\EntityAccess\EntityAccessAlter $alterer */
+  /** @var EntityAccessAlter $alterer */
   $alterer = \Drupal::service('class_resolver')
     ->getInstanceFromDefinition(EntityAccessAlter::class);
   return $alterer->hookEntityAccess($entity, $operation, $account);
@@ -26,11 +29,11 @@ function entity_unified_access_entity_access(EntityInterface $entity, $operation
 /**
  * Implements hook_query_alter().
  *
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
  */
 function entity_unified_access_query_alter(SelectInterface $query) {
-  /** @var \Drupal\entity_unified_access\QueryAccess\SqlQueryAlter $alterer */
+  /** @var SqlQueryAlter $alterer */
   $alterer = \Drupal::service('class_resolver')
     ->getInstanceFromDefinition(SqlQueryAlter::class);
   $alterer->alter($query);
diff --git a/src/CacheabilityUtility.php b/src/CacheabilityUtility.php
index 669a6aa..c5bb570 100644
--- a/src/CacheabilityUtility.php
+++ b/src/CacheabilityUtility.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_unified_access;
 
+use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Cache\CacheableDependencyInterface;
 use Drupal\Core\Render\RendererInterface;
 use Symfony\Component\HttpFoundation\RequestStack;
@@ -16,22 +17,22 @@ class CacheabilityUtility {
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * CacheabilityUtility constructor.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RendererInterface $renderer
+   * @param RequestStack $requestStack
    */
   public function __construct(RendererInterface $renderer, RequestStack $requestStack) {
     $this->renderer = $renderer;
@@ -41,7 +42,7 @@ class CacheabilityUtility {
   /**
    * Applies the cacheablity metadata to the current request.
    *
-   * @param \Drupal\Core\Cache\CacheableMetadata $cacheable_metadata
+   * @param CacheableMetadata $cacheable_metadata
    *   The cacheability metadata.
    *
    * @throws \Exception
diff --git a/src/ConditionConverter/ConditionConverterBase.php b/src/ConditionConverter/ConditionConverterBase.php
index d2cd999..e594503 100644
--- a/src/ConditionConverter/ConditionConverterBase.php
+++ b/src/ConditionConverter/ConditionConverterBase.php
@@ -30,7 +30,7 @@ abstract class ConditionConverterBase {
   /**
    * Replay conditions.
    *
-   * @param \Drupal\entity_unified_access\Conditions\ConditionInterface $condition
+   * @param ConditionInterface $condition
    *   The condition.
    * @param mixed|null $resultGroup
    *   The result group that may carry context for creation of new conditions.
@@ -70,7 +70,7 @@ abstract class ConditionConverterBase {
   /**
    * Get constant condition.
    *
-   * @param \Drupal\entity_unified_access\Conditions\ConditionInterface $condition
+   * @param ConditionInterface $condition
    *   The condition.
    * @param mixed|null $outerResultGroup
    *   The result group that may carry context for creation of new conditions.
@@ -83,7 +83,7 @@ abstract class ConditionConverterBase {
   /**
    * Get field condition.
    *
-   * @param \Drupal\entity_unified_access\Conditions\FieldCondition $condition
+   * @param FieldCondition $condition
    *   The condition.
    * @param mixed|null $outerResultGroup
    *   The result group that may carry context for creation of new conditions.
@@ -96,7 +96,7 @@ abstract class ConditionConverterBase {
   /**
    * Get condition group.
    *
-   * @param \Drupal\entity_unified_access\Conditions\ConditionGroup $group
+   * @param ConditionGroup $group
    *   The condition group.
    * @param mixed|null $outerResultGroup
    *   The result group that may carry context for creation of new conditions.
@@ -113,9 +113,9 @@ abstract class ConditionConverterBase {
    *   The result group.
    * @param mixed $resultCondition
    *   The result condition to add.
-   * @param \Drupal\entity_unified_access\Conditions\ConditionGroup $group
+   * @param ConditionGroup $group
    *   The condition group.
-   * @param \Drupal\entity_unified_access\Conditions\ConditionInterface $condition
+   * @param ConditionInterface $condition
    *   The condition.
    *
    * @return mixed
@@ -128,7 +128,7 @@ abstract class ConditionConverterBase {
    *
    * @param mixed $resultGroup
    *   The result group.
-   * @param \Drupal\entity_unified_access\Conditions\ConditionGroup $group
+   * @param ConditionGroup $group
    *   The condition group.
    *
    * @return mixed
@@ -141,7 +141,7 @@ abstract class ConditionConverterBase {
    *
    * @param mixed $result
    *   The result.
-   * @param \Drupal\Core\Cache\CacheableDependencyInterface $cacheableDependency
+   * @param CacheableDependencyInterface $cacheableDependency
    *   The cacheable dependency.
    *
    * @return mixed
diff --git a/src/Conditions/ConditionGroup.php b/src/Conditions/ConditionGroup.php
index c9abb8c..5b60ff5 100644
--- a/src/Conditions/ConditionGroup.php
+++ b/src/Conditions/ConditionGroup.php
@@ -40,7 +40,7 @@ abstract class ConditionGroup extends ConditionBase implements ConditionInterfac
   /**
    * The conditions.
    *
-   * @var \Drupal\entity_unified_access\Conditions\ConditionInterface[]
+   * @var ConditionInterface[]
    */
   protected $conditions = [];
 
@@ -59,7 +59,7 @@ abstract class ConditionGroup extends ConditionBase implements ConditionInterfac
    *   Whether irrelevant conditions (FALSE in OR, TRUE in AND) are filtered.
    *   Changing filtered conditions reference is useless though.
    *
-   * @return \Drupal\entity_unified_access\Conditions\ConditionInterface[]
+   * @return ConditionInterface[]
    *   The conditions, where each one is either a Condition or a nested
    *   ConditionGroup. Returned by reference, to allow callers to replace
    *   or remove conditions.
@@ -79,7 +79,7 @@ abstract class ConditionGroup extends ConditionBase implements ConditionInterfac
   /**
    * Adds a condition.
    *
-   * @param \Drupal\entity_unified_access\Conditions\ConditionInterface $condition
+   * @param ConditionInterface $condition
    *   Either a condition group (for nested AND/OR conditions), or a
    *   condition.
    *
diff --git a/src/Conditions/ConstantCondition.php b/src/Conditions/ConstantCondition.php
index f540206..97acfe2 100644
--- a/src/Conditions/ConstantCondition.php
+++ b/src/Conditions/ConstantCondition.php
@@ -47,7 +47,7 @@ final class ConstantCondition extends SingleConditionBase implements ConditionIn
    *   The name.
    * @param $permission
    *   The permission to check.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account to check.
    *
    * @return static
diff --git a/src/EntityAccess/EntityAccessAlter.php b/src/EntityAccess/EntityAccessAlter.php
index c9f528c..b9bc440 100644
--- a/src/EntityAccess/EntityAccessAlter.php
+++ b/src/EntityAccess/EntityAccessAlter.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\entity_unified_access\EntityAccess;
 
+use Drupal\Core\Access\AccessResultAllowed;
+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\Core\TypedData\Exception\MissingDataException;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -20,14 +23,14 @@ class EntityAccessAlter implements ContainerInjectionInterface {
   /**
    * The unified access dispatcher.
    *
-   * @var \Drupal\entity_unified_access\UnifiedAccess\UnifiedAccessDispatcherInterface
+   * @var UnifiedAccessDispatcherInterface
    */
   protected $unifiedAccessDispatcher;
 
   /**
    * Constructs a new EntityAccessAlter object.
    *
-   * @param \Drupal\entity_unified_access\UnifiedAccess\UnifiedAccessDispatcherInterface $unifiedAccessDispatcher
+   * @param UnifiedAccessDispatcherInterface $unifiedAccessDispatcher
    *   The unified access dispatcher.
    */
   public function __construct(UnifiedAccessDispatcherInterface $unifiedAccessDispatcher) {
@@ -52,16 +55,16 @@ class EntityAccessAlter implements ContainerInjectionInterface {
    * @todo Consider making this configurable.
    * @todo Kill that insane 3state access object upstream.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    * @param $operation
    *   The operation.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account.
    *
-   * @return \Drupal\Core\Access\AccessResultAllowed|\Drupal\Core\Access\AccessResultInterface|null
+   * @return AccessResultAllowed|AccessResultInterface|null
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    */
   public function hookEntityAccess(EntityInterface $entity, $operation, AccountInterface $account) {
     if ($entity instanceof FieldableEntityInterface) {
diff --git a/src/EntityAccess/EntitySingleQuery.php b/src/EntityAccess/EntitySingleQuery.php
index 65348e2..c25f5ef 100644
--- a/src/EntityAccess/EntitySingleQuery.php
+++ b/src/EntityAccess/EntitySingleQuery.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_unified_access\EntityAccess;
 
+use Drupal\Core\TypedData\Exception\MissingDataException;
+use Drupal\Core\TypedData\TypedDataInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Core\Entity\Plugin\DataType\EntityAdapter;
 use Drupal\Core\Entity\Sql\TableMappingInterface;
@@ -27,7 +29,7 @@ class EntitySingleQuery {
    *
    * @internal Use the static constructor.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The fieldable entity.
    */
   public function __construct(FieldableEntityInterface $entity) {
@@ -37,7 +39,7 @@ class EntitySingleQuery {
   /**
    * Static constructor.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The fieldable entity.
    *
    * @return static
@@ -52,9 +54,9 @@ class EntitySingleQuery {
    * @param string $propertyPath
    *   The property path.
    *
-   * @return \Drupal\entity_unified_access\EntityAccess\EntitySingleQueryResult
+   * @return EntitySingleQueryResult
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    */
   public function query($propertyPath) {
     $resultArray = $this->doQuery(EntityAdapter::createFromEntity($this->entity), $propertyPath, $this->entity->getEntityTypeId());
@@ -68,7 +70,7 @@ class EntitySingleQuery {
    * This kinda imitates EntityFieldQuery. The main difference is, as we imitate
    * a sql query, if we get a property from an item list, we array_map it.
    *
-   * @param \Drupal\Core\TypedData\TypedDataInterface $item
+   * @param TypedDataInterface $item
    *   The data item to query.
    * @param string $propertyPathr
    *   The property path to query.
@@ -79,7 +81,7 @@ class EntitySingleQuery {
    * @return mixed[]
    *   The result array.
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    * @todo Implement case insensitive field comparisons.
    *
    * @todo Implement %delta.
diff --git a/src/EntityAccess/EntitySingleQueryConverter.php b/src/EntityAccess/EntitySingleQueryConverter.php
index 92c3ca5..0e234e8 100644
--- a/src/EntityAccess/EntitySingleQueryConverter.php
+++ b/src/EntityAccess/EntitySingleQueryConverter.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\entity_unified_access\EntityAccess;
 
+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\Core\Access\AccessResultAllowed;
+use Drupal\Core\Access\AccessResultNeutral;
+use Drupal\Core\TypedData\Exception\MissingDataException;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Cache\CacheableDependencyInterface;
 use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
@@ -18,14 +22,14 @@ use Drupal\entity_unified_access\Conditions\FieldCondition;
 class EntitySingleQueryConverter extends ConditionConverterBase {
 
   /**
-   * @var \Drupal\Core\Entity\FieldableEntityInterface
+   * @var FieldableEntityInterface
    */
   protected $entity;
 
   /**
    * EntityAccessReplay constructor.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity.
    */
   public function __construct(FieldableEntityInterface $entity, $simplify = TRUE) {
@@ -36,7 +40,7 @@ class EntitySingleQueryConverter extends ConditionConverterBase {
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    */
   public function convert(ConditionInterface $condition, $resultGroup = NULL) {
     return parent::convert($condition);
@@ -48,7 +52,7 @@ class EntitySingleQueryConverter extends ConditionConverterBase {
    * @param bool $value
    *   The boolean value.
    *
-   * @return \Drupal\Core\Access\AccessResultAllowed|\Drupal\Core\Access\AccessResultNeutral
+   * @return AccessResultAllowed|AccessResultNeutral
    */
   protected function createAccessResult($value) {
     return $value ?
@@ -59,7 +63,7 @@ class EntitySingleQueryConverter extends ConditionConverterBase {
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    */
   protected function getConstantCondition(ConditionInterface $condition, $outerResultGroup = NULL) {
     return $this->createAccessResult($condition->getConstantValue());
@@ -68,7 +72,7 @@ class EntitySingleQueryConverter extends ConditionConverterBase {
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    */
   protected function getConditionGroup(ConditionGroup $group, $outerResultGroup = NULL) {
     return $this->createAccessResult($group->getEmptyValue());
@@ -77,12 +81,12 @@ class EntitySingleQueryConverter extends ConditionConverterBase {
   /**
    * {@inheritdoc}
    *
-   * @param \Drupal\Core\Access\AccessResultInterface $resultGroup
+   * @param AccessResultInterface $resultGroup
    *   The group.
-   * @param \Drupal\Core\Access\AccessResultInterface $resultCondition
+   * @param AccessResultInterface $resultCondition
    *   The condition to add.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    */
   protected function addConditionToGroup($resultGroup, $resultCondition, ConditionGroup $group, ConditionInterface $condition) {
     $conjunction = $group->getConjunction();
@@ -100,10 +104,10 @@ class EntitySingleQueryConverter extends ConditionConverterBase {
   /**
    * {@inheritdoc}
    *
-   * @param \Drupal\Core\Access\AccessResultInterface $resultGroup
+   * @param AccessResultInterface $resultGroup
    *   The group.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    */
   protected function finalizeGroup($resultGroup, ConditionGroup $group) {
     return $resultGroup;
@@ -112,9 +116,9 @@ class EntitySingleQueryConverter extends ConditionConverterBase {
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    */
   protected function getFieldCondition(FieldCondition $condition, $outerResultGroup = NULL) {
     $query = EntitySingleQuery::create($this->entity);
@@ -131,9 +135,9 @@ class EntitySingleQueryConverter extends ConditionConverterBase {
   /**
    * {@inheritdoc}
    *
-   * @param \Drupal\Core\Access\AccessResultInterface|RefinableCacheableDependencyInterface $result
+   * @param AccessResultInterface|RefinableCacheableDependencyInterface $result
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    */
   protected function addCacheableDependency($result, CacheableDependencyInterface $cacheableDependency) {
     return $result->addCacheableDependency($cacheableDependency);
@@ -142,9 +146,9 @@ class EntitySingleQueryConverter extends ConditionConverterBase {
   /**
    * {@inheritdoc}
    *
-   * @param \Drupal\Core\Access\AccessResultInterface|RefinableCacheableDependencyInterface $result
+   * @param AccessResultInterface|RefinableCacheableDependencyInterface $result
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    */
   protected function setDependentOnThisEntity($result) {
     return $result->addCacheableDependency($this->entity);
diff --git a/src/QueryAccess/QueryConverterBase.php b/src/QueryAccess/QueryConverterBase.php
index aa779c0..01d44cf 100644
--- a/src/QueryAccess/QueryConverterBase.php
+++ b/src/QueryAccess/QueryConverterBase.php
@@ -17,12 +17,12 @@ abstract class QueryConverterBase extends ConditionConverterBase {
   /**
    * {@inheritDoc}
    *
-   * @param \Drupal\entity_unified_access\QueryAccess\SqlConditionWrapper|null $resultGroup
+   * @param SqlConditionWrapper|null $resultGroup
    *
-   * @return \Drupal\entity_unified_access\QueryAccess\SqlConditionWrapper
+   * @return SqlConditionWrapper
    */
   public function convert(ConditionInterface $condition, $resultGroup = NULL) {
-    /** @var \Drupal\entity_unified_access\QueryAccess\SqlConditionWrapper $result */
+    /** @var SqlConditionWrapper $result */
     $result = parent::convert($condition);
     return $result;
   }
@@ -30,9 +30,9 @@ abstract class QueryConverterBase extends ConditionConverterBase {
   /**
    * {@inheritDoc}
    *
-   * @param \Drupal\entity_unified_access\QueryAccess\SqlConditionWrapper $result
+   * @param SqlConditionWrapper $result
    *
-   * @return \Drupal\entity_unified_access\QueryAccess\SqlConditionWrapper
+   * @return SqlConditionWrapper
    */
   protected function addCacheableDependency($result, CacheableDependencyInterface $cacheableDependency) {
     // We do this in the alter hook.
@@ -42,9 +42,9 @@ abstract class QueryConverterBase extends ConditionConverterBase {
   /**
    * {@inheritDoc}
    *
-   * @param \Drupal\entity_unified_access\QueryAccess\SqlConditionWrapper $result
+   * @param SqlConditionWrapper $result
    *
-   * @return \Drupal\entity_unified_access\QueryAccess\SqlConditionWrapper
+   * @return SqlConditionWrapper
    */
   protected function setDependentOnThisEntity($result) {
     // We can safely ignore isDependentOnThisEntity(), as the query carries
@@ -55,9 +55,9 @@ abstract class QueryConverterBase extends ConditionConverterBase {
   /**
    * {@inheritDoc}
    *
-   * @param \Drupal\entity_unified_access\QueryAccess\SqlConditionWrapper|null $outerResultGroup
+   * @param SqlConditionWrapper|null $outerResultGroup
    *
-   * @return \Drupal\entity_unified_access\QueryAccess\SqlConditionWrapper
+   * @return SqlConditionWrapper
    */
   protected function getConstantCondition(ConditionInterface $condition, $outerResultGroup = NULL) {
     $value = $condition->getConstantValue();
@@ -68,7 +68,7 @@ abstract class QueryConverterBase extends ConditionConverterBase {
   /**
    * @param bool $value
    *
-   * @return \Drupal\entity_unified_access\QueryAccess\SqlConditionWrapper
+   * @return SqlConditionWrapper
    */
   protected function getSqlConstantConditionWrapper($value) {
     // As core does not support a single condition, we add an arbtrary contaner
@@ -92,9 +92,9 @@ abstract class QueryConverterBase extends ConditionConverterBase {
   /**
    * {@inheritDoc}
    *
-   * @param \Drupal\entity_unified_access\QueryAccess\SqlConditionWrapper|null $outerResultGroup
+   * @param SqlConditionWrapper|null $outerResultGroup
    *
-   * @return \Drupal\entity_unified_access\QueryAccess\SqlConditionWrapper
+   * @return SqlConditionWrapper
    */
   protected function getConditionGroup(ConditionGroup $group, $outerResultGroup = NULL) {
     // Conditions inside OR need the more expensive LEFT JOINs.
@@ -119,10 +119,10 @@ abstract class QueryConverterBase extends ConditionConverterBase {
   /**
    * {@inheritDoc}
    *
-   * @param \Drupal\entity_unified_access\QueryAccess\SqlConditionWrapper $resultGroup
-   * @param \Drupal\entity_unified_access\QueryAccess\SqlConditionWrapper $resultCondition
+   * @param SqlConditionWrapper $resultGroup
+   * @param SqlConditionWrapper $resultCondition
    *
-   * @return \Drupal\entity_unified_access\QueryAccess\SqlConditionWrapper
+   * @return SqlConditionWrapper
    */
   protected function addConditionToGroup($resultGroup, $resultCondition, ConditionGroup $group, ConditionInterface $condition) {
     $resultGroup->getSqlCondition()->condition($resultCondition->getSqlCondition());
@@ -132,9 +132,9 @@ abstract class QueryConverterBase extends ConditionConverterBase {
   /**
    * {@inheritDoc}
    *
-   * @param \Drupal\entity_unified_access\QueryAccess\SqlConditionWrapper $resultGroup
+   * @param SqlConditionWrapper $resultGroup
    *
-   * @return \Drupal\entity_unified_access\QueryAccess\SqlConditionWrapper
+   * @return SqlConditionWrapper
    */
   protected function finalizeGroup($resultGroup, ConditionGroup $group) {
     if (!count($resultGroup->getSqlCondition())) {
diff --git a/src/QueryAccess/SqlConditionWrapper.php b/src/QueryAccess/SqlConditionWrapper.php
index f5c5800..57c7931 100644
--- a/src/QueryAccess/SqlConditionWrapper.php
+++ b/src/QueryAccess/SqlConditionWrapper.php
@@ -12,7 +12,7 @@ class SqlConditionWrapper {
   /**
    * The SQL condition.
    *
-   * @var \Drupal\Core\Database\Query\ConditionInterface
+   * @var ConditionInterface
    */
   protected $sqlCondition;
 
@@ -28,7 +28,7 @@ class SqlConditionWrapper {
   /**
    * SqlConditionWrapper constructor.
    *
-   * @param \Drupal\Core\Database\Query\ConditionInterface $sqlCondition
+   * @param ConditionInterface $sqlCondition
    */
   public function __construct(ConditionInterface $sqlCondition, $nestedInsideOr = FALSE) {
     $this->sqlCondition = $sqlCondition;
@@ -36,7 +36,7 @@ class SqlConditionWrapper {
   }
 
   /**
-   * @return \Drupal\Core\Database\Query\ConditionInterface|\Countable
+   * @return ConditionInterface|\Countable
    */
   public function getSqlCondition() {
     return $this->sqlCondition;
diff --git a/src/QueryAccess/SqlQueryAlter.php b/src/QueryAccess/SqlQueryAlter.php
index d979770..c718a44 100644
--- a/src/QueryAccess/SqlQueryAlter.php
+++ b/src/QueryAccess/SqlQueryAlter.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\entity_unified_access\QueryAccess;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Database\Query\SelectInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -12,12 +15,12 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class SqlQueryAlter implements ContainerInjectionInterface {
 
   /**
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected $container;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -32,10 +35,10 @@ class SqlQueryAlter implements ContainerInjectionInterface {
   }
 
   /**
-   * @param \Drupal\Core\Database\Query\SelectInterface $query
+   * @param SelectInterface $query
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function alter(SelectInterface $query) {
     foreach ($this->entityTypeManager->getDefinitions() as $entityTypeId => $entityType) {
@@ -46,13 +49,13 @@ class SqlQueryAlter implements ContainerInjectionInterface {
   }
 
   /**
-   * @param \Drupal\Core\Database\Query\SelectInterface $query
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entityType
+   * @param SelectInterface $query
+   * @param EntityTypeInterface $entityType
    *
-   * @return \Drupal\entity_unified_access\QueryAccess\SqlQueryAlterEntityType
+   * @return SqlQueryAlterEntityType
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function createInstance(SelectInterface $query, EntityTypeInterface $entityType) {
     $storage = $this->entityTypeManager->getStorage($entityType->id());
diff --git a/src/QueryAccess/SqlQueryAlterEntityType.php b/src/QueryAccess/SqlQueryAlterEntityType.php
index fa8e303..66e4288 100644
--- a/src/QueryAccess/SqlQueryAlterEntityType.php
+++ b/src/QueryAccess/SqlQueryAlterEntityType.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_unified_access\QueryAccess;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Database\Query\SelectInterface;
@@ -21,32 +23,32 @@ class SqlQueryAlterEntityType {
   /**
    * The unified access dispatcher.
    *
-   * @var \Drupal\entity_unified_access\UnifiedAccess\UnifiedAccessDispatcherInterface
+   * @var UnifiedAccessDispatcherInterface
    */
   protected $unifiedAccessDispatcher;
 
   /**
-   * @var \Drupal\entity_unified_access\CacheabilityUtility
+   * @var CacheabilityUtility
    */
   protected $cacheabilityUtility;
 
   /**
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
-   * @var \Drupal\Core\Database\Query\SelectInterface
+   * @var SelectInterface
    */
   protected $query;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeInterface
+   * @var EntityTypeInterface
    */
   protected $entityType;
 
   /**
-   * @var \Drupal\Core\Entity\Sql\DefaultTableMapping
+   * @var DefaultTableMapping
    */
   protected $tableMapping;
 
@@ -63,12 +65,12 @@ class SqlQueryAlterEntityType {
   /**
    * SqlQueryAlterEntityType constructor.
    *
-   * @param \Drupal\entity_unified_access\UnifiedAccess\UnifiedAccessDispatcherInterface $unifiedAccessDispatcher
-   * @param \Drupal\entity_unified_access\CacheabilityUtility $cacheabilityUtility
-   * @param \Drupal\Core\Database\Connection $connection
-   * @param \Drupal\Core\Database\Query\SelectInterface $query
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entityType
-   * @param \Drupal\Core\Entity\Sql\DefaultTableMapping $tableMapping
+   * @param UnifiedAccessDispatcherInterface $unifiedAccessDispatcher
+   * @param CacheabilityUtility $cacheabilityUtility
+   * @param Connection $connection
+   * @param SelectInterface $query
+   * @param EntityTypeInterface $entityType
+   * @param DefaultTableMapping $tableMapping
    */
   public function __construct(UnifiedAccessDispatcherInterface $unifiedAccessDispatcher, CacheabilityUtility $cacheabilityUtility, Connection $connection, SelectInterface $query, EntityTypeInterface $entityType, DefaultTableMapping $tableMapping) {
     $this->unifiedAccessDispatcher = $unifiedAccessDispatcher;
@@ -84,8 +86,8 @@ class SqlQueryAlterEntityType {
   }
 
   /**
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    * @throws \Exception
    */
   public function alter() {
@@ -141,7 +143,7 @@ class SqlQueryAlterEntityType {
   }
 
   /**
-   * @return \Drupal\Core\Database\Query\SelectInterface
+   * @return SelectInterface
    */
   protected function createSubQuery() {
     $subQueryBaseTable = $this->usesRevisions ?
diff --git a/src/QueryAccess/SqlQueryConverter.php b/src/QueryAccess/SqlQueryConverter.php
index 2d1e602..971b4a1 100644
--- a/src/QueryAccess/SqlQueryConverter.php
+++ b/src/QueryAccess/SqlQueryConverter.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\entity_unified_access\QueryAccess;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\Query\QueryException;
 use Drupal\Core\Database\Query\SelectInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -15,27 +18,27 @@ use Drupal\entity_unified_access\Conditions\FieldCondition;
 class SqlQueryConverter extends QueryConverterBase {
 
   /**
-   * @var \Drupal\Core\Database\Query\SelectInterface
+   * @var SelectInterface
    */
   protected $query;
 
   /**
    * The entity type.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface
+   * @var EntityTypeInterface
    */
   protected $entityType;
 
   /**
    * EntityQueryConverter constructor.
    *
-   * @param \Drupal\Core\Database\Query\SelectInterface $query
+   * @param SelectInterface $query
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entityType
+   * @param EntityTypeInterface $entityType
    * @param $simplify
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    * @internal Use ::create.
    */
   public function __construct(SelectInterface $query, EntityTypeInterface $entityType, $simplify) {
@@ -47,16 +50,16 @@ class SqlQueryConverter extends QueryConverterBase {
   /**
    * Create a entity query converter.
    *
-   * @param \Drupal\Core\Database\Query\SelectInterface $query
+   * @param SelectInterface $query
    *   The query.
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entityType
+   * @param EntityTypeInterface $entityType
    * @param bool $simplify
    *   Whether the query should be simplified.
    *
    * @return \Drupal\entity_unified_access\QueryAccess\SqlQueryConverter
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public static function create(SelectInterface $query, EntityTypeInterface $entityType, $simplify = TRUE) {
     return new static($query, $entityType, $simplify);
@@ -70,14 +73,13 @@ class SqlQueryConverter extends QueryConverterBase {
   }
 
   /**
-
    * {@inheritdoc}
    *
-   * @param \Drupal\entity_unified_access\QueryAccess\SqlConditionWrapper $outerResultGroup
+   * @param SqlConditionWrapper $outerResultGroup
    *
-   * @return \Drupal\entity_unified_access\QueryAccess\SqlConditionWrapper
+   * @return SqlConditionWrapper
    *
-   * @throws \Drupal\Core\Entity\Query\QueryException
+   * @throws QueryException
    */
   protected function getFieldCondition(FieldCondition $condition, $outerResultGroup = NULL) {
     $langcode = $this->query->getMetaData('language');
diff --git a/src/UnifiedAccess/UnifiedAccessDispatcher.php b/src/UnifiedAccess/UnifiedAccessDispatcher.php
index a716d7e..466e8b7 100644
--- a/src/UnifiedAccess/UnifiedAccessDispatcher.php
+++ b/src/UnifiedAccess/UnifiedAccessDispatcher.php
@@ -12,23 +12,23 @@ class UnifiedAccessDispatcher implements UnifiedAccessDispatcherInterface {
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * Constructs a new QueryAccessHandlerBase object.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(EventDispatcherInterface $event_dispatcher, AccountInterface $current_user) {
diff --git a/src/UnifiedAccess/UnifiedAccessDispatcherInterface.php b/src/UnifiedAccess/UnifiedAccessDispatcherInterface.php
index dc1613a..d3ba5e6 100644
--- a/src/UnifiedAccess/UnifiedAccessDispatcherInterface.php
+++ b/src/UnifiedAccess/UnifiedAccessDispatcherInterface.php
@@ -2,20 +2,21 @@
 
 namespace Drupal\entity_unified_access\UnifiedAccess;
 
+use Drupal\entity_unified_access\Conditions\AndConditionGroup;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Session\AccountInterface;
 
 interface UnifiedAccessDispatcherInterface {
 
   /**
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entityType
+   * @param EntityTypeInterface $entityType
    *   The entity type.
    * @param string $operation
    *   The operation.
-   * @param \Drupal\Core\Session\AccountInterface|NULL $account
+   * @param AccountInterface|NULL $account
    *   The user account.
    *
-   * @return \Drupal\entity_unified_access\Conditions\AndConditionGroup
+   * @return AndConditionGroup
    */
   public function dispatch(EntityTypeInterface $entityType, $operation, AccountInterface $account = NULL);
 
diff --git a/src/UnifiedAccess/UnifiedAccessEvent.php b/src/UnifiedAccess/UnifiedAccessEvent.php
index f36ee87..a3c6e06 100644
--- a/src/UnifiedAccess/UnifiedAccessEvent.php
+++ b/src/UnifiedAccess/UnifiedAccessEvent.php
@@ -2,10 +2,10 @@
 
 namespace Drupal\entity_unified_access\UnifiedAccess;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\entity_unified_access\Conditions\ConditionGroup;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Defines the common base class for query and entity access event.
@@ -15,14 +15,14 @@ class UnifiedAccessEvent extends Event {
   /**
    * The entity type.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface
+   * @var EntityTypeInterface
    */
   protected $entityType;
 
   /**
    * The conditions.
    *
-   * @var \Drupal\entity_unified_access\Conditions\ConditionGroup
+   * @var ConditionGroup
    */
   protected $conditions;
 
@@ -36,20 +36,20 @@ class UnifiedAccessEvent extends Event {
   /**
    * The user for which to restrict access.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
 
   /**
    * Constructs a new QueryAccessEvent.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entityType
+   * @param EntityTypeInterface $entityType
    *   The entity type.
-   * @param \Drupal\entity_unified_access\Conditions\ConditionGroup $conditions
+   * @param ConditionGroup $conditions
    *   The conditions.
    * @param string $operation
    *   The operation. Usually one of "view", "update", "duplicate", or "delete".
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user for which to restrict access.
    */
   public function __construct(EntityTypeInterface $entityType, ConditionGroup $conditions, $operation, AccountInterface $account) {
@@ -62,7 +62,7 @@ class UnifiedAccessEvent extends Event {
   /**
    * Gets the entity type.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface
+   * @return EntityTypeInterface
    */
   public function getEntityType() {
     return $this->entityType;
@@ -79,7 +79,7 @@ class UnifiedAccessEvent extends Event {
    * empty (count is 0), the user has full access, and the query doesn't
    * need to be restricted.
    *
-   * @return \Drupal\entity_unified_access\Conditions\ConditionGroup
+   * @return ConditionGroup
    *   The conditions.
    */
   public function getConditions() {
@@ -99,7 +99,7 @@ class UnifiedAccessEvent extends Event {
   /**
    * Gets the user for which to restrict access.
    *
-   * @return \Drupal\Core\Session\AccountInterface
+   * @return AccountInterface
    *   The user.
    */
   public function getAccount() {
diff --git a/tests/src/Functional/AdminPageTest.php b/tests/src/Functional/AdminPageTest.php
index 37da5cb..9239050 100644
--- a/tests/src/Functional/AdminPageTest.php
+++ b/tests/src/Functional/AdminPageTest.php
@@ -33,7 +33,7 @@ class AdminPageTest extends BrowserTestBase {
   public function testAdminPage() {
     $this->drupalLogin($this->rootUser);
     $this->drupalGet('admin');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Ensure that the test is not marked as risky because of no assertions.
     // see https://gitlab.com/weitzman/drupal-test-traits/-/commit/82bf5059908f9073b3468cb7313960da72176d9a
