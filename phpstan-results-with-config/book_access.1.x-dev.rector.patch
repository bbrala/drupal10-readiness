diff --git a/book_access.api.php b/book_access.api.php
index c85655c..0e96413 100644
--- a/book_access.api.php
+++ b/book_access.api.php
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Session\AccountInterface;
 /**
  * @file
  * Hooks provided by the Book access module.
@@ -44,10 +45,10 @@ function hook_book_access_author_grants_alter(array &$grants, array $context) {
  *   - the node for the book page (node)
  */
 function hook_book_access_roles_grants_alter(array &$rids, array &$grants, array $context) {
-  if (isset($rids[\Drupal\Core\Session\AccountInterface::AUTHENTICATED_RID])) {
-    $grants['grant_view'][\Drupal\Core\Session\AccountInterface::AUTHENTICATED_RID] = TRUE;
-    $grants['grant_update'][\Drupal\Core\Session\AccountInterface::AUTHENTICATED_RID] = TRUE;
-    $grants['grant_delete'][\Drupal\Core\Session\AccountInterface::AUTHENTICATED_RID] = TRUE;
+  if (isset($rids[AccountInterface::AUTHENTICATED_RID])) {
+    $grants['grant_view'][AccountInterface::AUTHENTICATED_RID] = TRUE;
+    $grants['grant_update'][AccountInterface::AUTHENTICATED_RID] = TRUE;
+    $grants['grant_delete'][AccountInterface::AUTHENTICATED_RID] = TRUE;
   }
 }
 
diff --git a/book_access.info.yml b/book_access.info.yml
index 6d31bba..229d96f 100644
--- a/book_access.info.yml
+++ b/book_access.info.yml
@@ -1,7 +1,7 @@
 name: 'Book access'
 description: 'Allows setting the access control for book nodes on a per book basis.'
 package: 'Access control'
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 dependencies:
   book: 'drupal:book'
 type: module
diff --git a/book_access.module b/book_access.module
index b2618e9..6837b64 100644
--- a/book_access.module
+++ b/book_access.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\user\RoleInterface;
+use Drupal\book_access\BookAccessHelper;
 /**
  * @file
  */
@@ -16,9 +18,9 @@ use Drupal\Core\Entity\EntityInterface;
  * Makes sure to set default visibility when a new role is created.
  */
 function book_access_user_role_insert(EntityInterface $entity) {
-  /** @var \Drupal\user\RoleInterface $role */
+  /** @var RoleInterface $role */
   $role = $entity;
-  /** @var \Drupal\book_access\BookAccessHelper $book_helper */
+  /** @var BookAccessHelper $book_helper */
   $book_helper = \Drupal::service('book_access.book_access_helper');
   $book_helper->setDefaultForRole($role);
 }
@@ -217,7 +219,7 @@ function book_access_form_alter(&$form, FormStateInterface &$form_state, $form_i
  * Submit handler for book_admin_settings form.
  *
  * @param array $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function book_access_admin_settings_submit(array $form, FormStateInterface $form_state) {
   if ($form['#id'] == 'book-admin-settings' && $form_state->hasValue('book_access_defaults')) {
diff --git a/src/Access/BookAccess.php b/src/Access/BookAccess.php
index 1327115..46e361a 100644
--- a/src/Access/BookAccess.php
+++ b/src/Access/BookAccess.php
@@ -188,7 +188,9 @@ final class BookAccess extends EntityAccessControlHandler implements EntityHandl
 
     $resultSets = array();
     foreach ($queries as $table) {
-      $queryObj = db_select( $table, $table);
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+      $queryObj = \Drupal::database()->select($table, $table);
       $queryObj
         ->condition( "nid", $bid, "=");
       if ($table == 'book_access_role') {
@@ -221,7 +223,7 @@ final class BookAccess extends EntityAccessControlHandler implements EntityHandl
     // permissions entry in one of the tables.  iterate and find the missing ones
     // and check the defaults instead.
     if (! $hasPermission && $rowCount < 3) {
-      $node = node_load( $bid);
+      $node = \Drupal::service('entity_type.manager')->getStorage('node')->load($bid);
 
       // check default author permissions first
       if (! isset($explicitTables['book_access_author'])) {
@@ -293,7 +295,9 @@ final class BookAccess extends EntityAccessControlHandler implements EntityHandl
     }
 
     foreach ($tables as $table) {
-      db_update($table)
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+      \Drupal::database()->update($table)
         ->fields( array(
           "grant_admin_access" => 0,
           "grant_update" => 0,
@@ -360,29 +364,26 @@ final class BookAccess extends EntityAccessControlHandler implements EntityHandl
     }
 
     foreach ($grants as $grant) {
-      $result = db_query(
-        "SELECT nid FROM {book_access_author} WHERE uid = :uid AND grant_$grant > 0",
-        array(':uid' => $account->uid)
-      );
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+      $result = \Drupal::database()->query("SELECT nid FROM {book_access_author} WHERE uid = :uid AND grant_$grant > 0", array(':uid' => $account->uid));
 
       foreach ($result as $book) {
         $permitted_bids[$book->nid] = $book->nid;
       }
 
       $roles = array_keys($account->roles);
-      $result = db_query(
-        "SELECT nid FROM {book_access_role} WHERE rid IN (:rid) AND grant_$grant > 0",
-        array(':rid' => $roles)
-      );
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+      $result = \Drupal::database()->query("SELECT nid FROM {book_access_role} WHERE rid IN (:rid) AND grant_$grant > 0", array(':rid' => $roles));
 
       foreach ($result as $book) {
         $permitted_bids[$book->nid] = $book->nid;
       }
 
-      $result = db_query(
-        "SELECT nid FROM {book_access_user} WHERE uid = :uid AND grant_$grant > 0",
-        array(':uid' => $account->uid)
-      );
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+      $result = \Drupal::database()->query("SELECT nid FROM {book_access_user} WHERE uid = :uid AND grant_$grant > 0", array(':uid' => $account->uid));
 
       foreach ($result as $book) {
         $permitted_bids[$book->nid] = $book->nid;
@@ -434,10 +435,9 @@ final class BookAccess extends EntityAccessControlHandler implements EntityHandl
     }
 
     foreach ($info as $data) {
-      $result = db_query(
-        "SELECT * FROM {" . db_escape_table($data['table']) . "} WHERE nid = :nid",
-        array(':nid' => $bid)
-      );
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+      $result = \Drupal::database()->query("SELECT * FROM {" . db_escape_table($data['table']) . "} WHERE nid = :nid", array(':nid' => $bid));
 
       foreach ($result as $grant) {
         $grants[] = array(
@@ -483,10 +483,9 @@ final class BookAccess extends EntityAccessControlHandler implements EntityHandl
     $rcopy = $roles;
 
     $rids = array_keys($roles);
-    $result = db_query(
-      "SELECT * FROM {book_access_role} WHERE nid = :nid AND rid IN (:rid)",
-      array(':nid' => $bid, ':rid' => $rids)
-    );
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    $result = \Drupal::database()->query("SELECT * FROM {book_access_role} WHERE nid = :nid AND rid IN (:rid)", array(':nid' => $bid, ':rid' => $rids));
 
     // Build the role access permissions for the book.
     if ($result->rowCount() > 0) {
@@ -552,10 +551,9 @@ final class BookAccess extends EntityAccessControlHandler implements EntityHandl
     );
     $uids = array();
 
-    $result = db_query(
-      "SELECT * FROM {book_access_user} bau INNER JOIN {users} u ON u.uid = bau.uid WHERE bau.nid = :nid",
-      array(':nid' => $bid)
-    );
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    $result = \Drupal::database()->query("SELECT * FROM {book_access_user} bau INNER JOIN {users} u ON u.uid = bau.uid WHERE bau.nid = :nid", array(':nid' => $bid));
     foreach ($result as $access) {
       $uid = $access->uid;
       $uids[$uid] = $uid;
@@ -612,7 +610,9 @@ final class BookAccess extends EntityAccessControlHandler implements EntityHandl
    *   'grant_edit_outline'.
    */
   public static function setAuthorGrants($bid, $uid, array $grants) {
-    db_delete('book_access_author')
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    \Drupal::database()->delete('book_access_author')
       ->condition('nid', $bid)
       ->execute();
     self::addAuthorGrants($bid, $uid, $grants);
@@ -634,7 +634,9 @@ final class BookAccess extends EntityAccessControlHandler implements EntityHandl
    *   'grant_edit_outline', and @code $rid @endcode is the role ID.
    */
   public static function setRoleGrants($bid, array $rids, array $grants) {
-    db_delete('book_access_role')
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    \Drupal::database()->delete('book_access_role')
       ->condition('nid', $bid)
       ->execute();
     self::addRoleGrants($bid, $rids, $grants);
@@ -656,7 +658,9 @@ final class BookAccess extends EntityAccessControlHandler implements EntityHandl
    *   'grant_edit_outline', and @code $uid @endcode is the user ID.
    */
   public static function setUserGrants($bid, array $uids, array $grants) {
-    db_delete('book_access_user')
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    \Drupal::database()->delete('book_access_user')
       ->condition('nid', $bid)
       ->execute();
     self::addUserGrants($bid, $uids, $grants);
@@ -666,7 +670,7 @@ final class BookAccess extends EntityAccessControlHandler implements EntityHandl
    * Resets book permissions to its defaults, ignoring user-specific ones.
    */
   public static function resetToDefault($nid) {
-    $node = node_load( $nid);
+    $node = \Drupal::service('entity_type.manager')->getStorage('node')->load($nid);
     $roles = user_roles();
 
     $authorDefaults = variable_get('book_access_default_author_access');
@@ -714,7 +718,9 @@ final class BookAccess extends EntityAccessControlHandler implements EntityHandl
       }
 
       if ($table) {
-        db_update($table)
+        // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+        // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+        \Drupal::database()->update($table)
           ->fields($fields)
           ->condition('nid', $bid)
           ->execute();
diff --git a/src/BookAccessHelper.php b/src/BookAccessHelper.php
index b35dd4f..ddc3d83 100644
--- a/src/BookAccessHelper.php
+++ b/src/BookAccessHelper.php
@@ -21,23 +21,23 @@ class BookAccessHelper {
   /**
    * The EntityTypeManager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The logger service.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * Constructs a new ContentUninstallValidator.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager,
@@ -105,7 +105,7 @@ class BookAccessHelper {
    *
    * See hook_ENTITY_TYPE_create() in book.module.
    *
-   * @param \Drupal\user\RoleInterface $role
+   * @param RoleInterface $role
    *   The role to set the default for.
    *
    *   Based on the role name, this initializes the default grants for the role
@@ -213,7 +213,7 @@ class BookAccessHelper {
         $grant_values[$key] = boolval($item);
       }
       try {
-        /** @var \Drupal\book_access\Entity\BookAccessDefaultsInterface $accessDefault */
+        /** @var BookAccessDefaultsInterface $accessDefault */
         $accessDefault = $this->entityTypeManager
           ->getStorage('book_access_defaults')->load($id);
 
diff --git a/tests/src/Kernel/BookAccessDefaultsTest.php b/tests/src/Kernel/BookAccessDefaultsTest.php
index 9536e3e..8df1dcf 100644
--- a/tests/src/Kernel/BookAccessDefaultsTest.php
+++ b/tests/src/Kernel/BookAccessDefaultsTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\book_access;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Entity\EntityBase;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\RandomGeneratorTrait;
 use Drupal\user\Entity\Role;
@@ -25,17 +29,17 @@ class BookAccessDefaultsTest extends KernelTestBase {
   /**
    * The storage manager.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $defaultStorage;
 
   /**
    * Create a role.
    *
-   * @return \Drupal\Core\Entity\EntityBase|\Drupal\Core\Entity\EntityInterface
+   * @return EntityBase|EntityInterface
    *   The role
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function createRole() {
     $role1 = Role::create([
@@ -71,13 +75,13 @@ class BookAccessDefaultsTest extends KernelTestBase {
     $query = $this->defaultStorage->getQuery();
     $results = $query->condition('grant_type', 'author')->execute();
     $this->assertIsArray($results, "Results are not available. Not an array");
-    $this->assertEqual(count($results), 1, "One result expected.");
+    $this->assertEquals(count($results), 1, "One result expected.");
 
     $query = \Drupal::entityTypeManager()
       ->getStorage('book_access_defaults')->getQuery();
     $results = $query->condition('grant_type', 'role')->execute();
     $this->assertIsArray($results, "Results are not available. Not an array");
-    $this->assertEqual(count($results), 3, "Three results expected.");
+    $this->assertEquals(count($results), 3, "Three results expected.");
   }
 
   /**
@@ -91,11 +95,11 @@ class BookAccessDefaultsTest extends KernelTestBase {
     $results = $query->condition('role_id', 'authenticated')
       ->execute();
     $this->assertIsArray($results, "Results are not available. Not an array");
-    $this->assertEqual(count($results), 1, "One result expected.");
+    $this->assertEquals(count($results), 1, "One result expected.");
     /** @var $config \Drupal\book_access\Entity\BookAccessDefaultsInterface */
     $config = $this->defaultStorage->load(current($results));
     $grants = $config->getGrants();
-    $this->assertEqual($grants['grant_add_child'], FALSE, "Grant add child expected FALSE.");
+    $this->assertEquals($grants['grant_add_child'], FALSE, "Grant add child expected FALSE.");
 
     // Update config.
     $grants['grant_add_child'] = TRUE;
@@ -106,17 +110,17 @@ class BookAccessDefaultsTest extends KernelTestBase {
     $results = $query2->condition('role_id', 'authenticated')
       ->execute();
     $this->assertIsArray($results, "Results are not available. Not an array");
-    $this->assertEqual(count($results), 1, "One result expected.");
+    $this->assertEquals(count($results), 1, "One result expected.");
     /** @var $config \Drupal\book_access\Entity\BookAccessDefaultsInterface */
     $config = $this->defaultStorage->load(current($results));
     $grants = $config->getGrants();
-    $this->assertEqual($grants['grant_add_child'], TRUE, "Grant add child expected TRUE.");
+    $this->assertEquals($grants['grant_add_child'], TRUE, "Grant add child expected TRUE.");
   }
 
   /**
    * Test that adding a new role adds the corresponding BookAccessDefaults.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testAddingRoleAddsConfig() {
     $role1 = $this->createRole();
@@ -127,13 +131,13 @@ class BookAccessDefaultsTest extends KernelTestBase {
     $results = $query->condition('role_id', $role1->id())
       ->execute();
     $this->assertIsArray($results, "Results are not available. Not an array");
-    $this->assertEqual(count($results), 1, "One result expected.");
+    $this->assertEquals(count($results), 1, "One result expected.");
   }
 
   /**
    * Test that deleting a role deletes the corresponding BookAccessDefaults.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testDeletingRoleDeletesConfig() {
     $role1 = $this->createRole();
@@ -143,7 +147,7 @@ class BookAccessDefaultsTest extends KernelTestBase {
     $results = $query->condition('role_id', $role1->id())
       ->execute();
     $this->assertIsArray($results, "Results are not available. Not an array");
-    $this->assertEqual(count($results), 1, "One result expected.");
+    $this->assertEquals(count($results), 1, "One result expected.");
     $config = $this->defaultStorage->load(current($results));
     $config_id = $config->id();
     $role1->delete();
@@ -153,7 +157,7 @@ class BookAccessDefaultsTest extends KernelTestBase {
     $query = $this->defaultStorage->getQuery();
     $results = $query->condition('id', $config_id)
       ->execute();
-    $this->assertEqual(count($results), 0, "Zero results expected.");
+    $this->assertEquals(count($results), 0, "Zero results expected.");
   }
 
 }
