modules/contrib/path_redirect_import/path_redirect_import.install
modules/contrib/path_redirect_import/src/Commands/PathRedirectImportCommands.php
modules/contrib/path_redirect_import/src/Form/ExportRedirectForm.php
modules/contrib/path_redirect_import/src/Form/MigrateRedirectForm.php
modules/contrib/path_redirect_import/src/MigratePluginTrait.php
modules/contrib/path_redirect_import/src/Plugin/migrate/source/CSVRedirect.php
modules/contrib/path_redirect_import/src/RedirectExport.php
modules/contrib/path_redirect_import/tests/modules/path_redirect_import_test/path_redirect_import_test.module
modules/contrib/path_redirect_import/tests/modules/path_redirect_import_test/src/Form/MigrateRedirectForm.php
modules/contrib/path_redirect_import/tests/src/Kernel/Plugin/migrate/source/CSVRedirectTest.php

7 files with changes
====================

1) modules/contrib/path_redirect_import/tests/src/Kernel/Plugin/migrate/source/CSVRedirectTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\path_redirect_import\Kernel\Plugin\migrate\source;

+use Drupal\migrate\Plugin\MigrationPluginManagerInterface;
 use Drupal\path_redirect_import_test\Form\MigrateRedirectForm;
 use Drupal\redirect\Entity\Redirect;
 use Drupal\Tests\migrate\Kernel\MigrateTestBase;
@@ @@
     $this->installEntitySchema('redirect');
     $this->installConfig(['path_redirect_import', 'path_redirect_import_test']);

-    /** @var \Drupal\migrate\Plugin\MigrationPluginManagerInterface $migrationManager */
+    /** @var MigrationPluginManagerInterface $migrationManager */
     $migrationManager = $this->container->get('plugin.manager.migration');
     $migration = $migrationManager->createInstance('path_redirect_import');
     $this->executeMigration($migration);
@@ @@
     $this->installEntitySchema('redirect');
     $this->installConfig(['path_redirect_import', 'path_redirect_import_test']);

-    /** @var \Drupal\migrate\Plugin\MigrationPluginManagerInterface $migrationManager */
+    /** @var MigrationPluginManagerInterface $migrationManager */
     $migrationManager = $this->container->get('plugin.manager.migration');
     $migration = $migrationManager->createInstance('path_redirect_import');
     $this->executeMigration($migration);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/path_redirect_import/src/RedirectExport.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\path_redirect_import;

+use Drupal\file\FileInterface;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\migrate\MigrateException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\redirect\Entity\Redirect;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\Core\Link;
@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a RedirectExport object.
    *
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\migrate\Plugin\MigrationPluginManagerInterface $migration_plugin_manager
+   * @param MigrationPluginManagerInterface $migration_plugin_manager
    *   The plugin manager for config entity-based migrations.
    */
   public function __construct(FileSystemInterface $file_system, EntityTypeManagerInterface $entity_type_manager, MigrationPluginManagerInterface $migration_plugin_manager) {
@@ @@
   /**
    * Creates the spreadsheet file to export entries to.
    *
-   * @return \Drupal\file\FileInterface|false
+   * @return FileInterface|false
    *   File.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function getFile() {
     $filename = 'export_' . time() . '.csv';
@@ @@
     $uri = self::MIGRATE_FOLDER . $filename;
     $directory = self::MIGRATE_FOLDER;
     $result = $this->fileSystem->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);
-    return file_save_data('', $uri, FileSystemInterface::EXISTS_REPLACE);
+    return \Drupal::service('file.repository')->writeData('', $uri, FileSystemInterface::EXISTS_REPLACE);
   }

   /**
@@ @@
    * @param array $configuration
    *   Array with CSV configuration.
    *
-   * @return \League\Csv\Writer
+   * @return Writer
    *   The writer.
    *
-   * @throws \Drupal\migrate\MigrateException
+   * @throws MigrateException
    * @throws \League\Csv\Exception
    */
   protected static function createWriter($file_path, $mode, array $configuration) {
@@ @@
    * @return array
    *   Configuration for csv info, separators, etc.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginException
+   * @throws PluginNotFoundException
    */
   protected function getConfigurationFromPlugin() {
     $migration_plugin = $this->migrationPlugin();
@@ @@
    * @return array
    *   The batch operations.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function getBatchOperations() {
     // Create file, folder and prepare variables.
@@ @@
     }

     // Now export entities one by one, only with the fields we need.
-    /** @var \Drupal\redirect\Entity\Redirect $redirect_entity */
+    /** @var Redirect $redirect_entity */
     foreach ($entities as $redirect_entity) {
       try {
         $source = $redirect_entity->getSourceUrl();
@@ @@
    *   If $success is FALSE, contains the operations that remained unprocessed.
    */
   public function batchFinishedExport($success, array $results, array $operations) {
-    /** @var \Drupal\file\Entity\File $file */
+    /** @var File $file */
     $file = !empty($results['file']) ? $results['file'] : NULL;
     if ($success && !empty($file)) {
-      $uri = file_create_url($file->getFileUri());
+      $uri = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
       $url = Url::fromUri($uri);
       $download = Link::fromTextAndUrl(t('link'), $url);
       $return['link'] = $url;
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/path_redirect_import/src/Plugin/migrate/source/CSVRedirect.php:69

    ---------- begin diff ----------
@@ @@
   /**
    * Prepare Row to have clean ids before calculation.
    *
-   * @param \Drupal\migrate\Row $row
+   * @param Row $row
    *   Row to migrate.
    */
   private function prepareRowIds(Row $row) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/path_redirect_import/src/MigratePluginTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\path_redirect_import;

+use Drupal\migrate\Plugin\MigrationPluginManagerInterface;
+use Drupal\migrate\Plugin\MigrationInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 /**
  * Trait MigratePluginTrait to reuse common migrate config.
  */
@@ @@
   /**
    * Plugin manager for migration plugins.
    *
-   * @var \Drupal\migrate\Plugin\MigrationPluginManagerInterface
+   * @var MigrationPluginManagerInterface
    */
   protected $migrationPluginManager;

@@ @@
   /**
    * Helper function to get the migration plugin.
    *
-   * @return \Drupal\migrate\Plugin\MigrationInterface
+   * @return MigrationInterface
    *   The migration plugin.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginException
+   * @throws PluginNotFoundException
    */
   protected function migrationPlugin() {
     return $this->migrationPluginManager->createInstance('path_redirect_import');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/path_redirect_import/src/Form/MigrateRedirectForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\path_redirect_import\Form;

+use Drupal\Core\TempStore\SharedTempStore;
+use Drupal\file\Entity\File;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\TempStore\TempStoreException;
+use Drupal\migrate\MigrateException;
+use League\Csv\Exception;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\File\FileSystemInterface;
@@ @@
   /**
    * The tempstore object.
    *
-   * @var \Drupal\Core\TempStore\SharedTempStore
+   * @var SharedTempStore
    */
   protected $privateTempStore;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a MigrateRedirectForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\migrate\Plugin\MigrationPluginManagerInterface $migration_plugin_manager
+   * @param MigrationPluginManagerInterface $migration_plugin_manager
    *   The plugin manager for config entity-based migrations.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   Current user.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, MigrationPluginManagerInterface $migration_plugin_manager, PrivateTempStoreFactory $temp_store_factory, AccountInterface $current_user) {
@@ @@
         $form_state->setErrorByName('spreadsheet', $this->t('Unable to load the file. Please upload it again'));
         return;
       }
-      /** @var \Drupal\file\Entity\File $file */
+      /** @var File $file */
       $file = $this->entityTypeManager->getStorage('file')->load($fid);
       $reader = Reader::createFromPath($file->getFileUri(), 'r')->setHeaderOffset(0);
       $removeFile = FALSE;
@@ @@
   /**
    * Imports the redirect data using Migrate.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginException
+   * @throws PluginNotFoundException
    */
   protected function migrateRedirectData() {
     $migration = $this->migrationPlugin();
@@ @@
   /**
    * Loads the Redirects to delete and redirects to the Deletion confirm form.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file to fetch the redirects to delete from.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \Drupal\migrate\MigrateException
-   * @throws \League\Csv\Exception
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws TempStoreException
+   * @throws MigrateException
+   * @throws Exception
    */
   protected function deleteRedirectData(FormStateInterface $form_state, FileInterface $file) {
     $redirects = $this->redirectsToDelete($file);
@@ @@
    * @param int $fid
    *   The spreadsheet file ID.
    *
-   * @return \Drupal\file\FileInterface|false
+   * @return FileInterface|false
    *   Resulting file entity for success, or false in the event of an error.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function processSpreadsheet(int $fid) {
-    /** @var \Drupal\file\Entity\File $file */
+    /** @var File $file */
     $file = $this->entityTypeManager->getStorage('file')->load($fid);
-    return file_move($file, self::MIGRATE_FILE_PATH, FileSystemInterface::EXISTS_REPLACE);
+    return \Drupal::service('file.repository')->move($file, self::MIGRATE_FILE_PATH, FileSystemInterface::EXISTS_REPLACE);
   }

   /**
    * Iterates over the CSV file to load the list of redirects to delete.
    *
-   * @return \Drupal\redirect\Entity\Redirect[]
+   * @return Redirect[]
    *   Array containing the Redirect entities to delete.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\migrate\MigrateException
-   * @throws \League\Csv\Exception
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws MigrateException
+   * @throws Exception
    */
   protected function redirectsToDelete() {
     $redirects_to_delete = [];
@@ @@
   /**
    * Get the CSV reader.
    *
-   * @return \League\Csv\Reader
+   * @return Reader
    *   The reader.
    *
-   * @throws \Drupal\migrate\MigrateException
-   * @throws \League\Csv\Exception
+   * @throws MigrateException
+   * @throws Exception
    */
   protected function getReader() {
     $migration_plugin = $this->migrationPlugin();
@@ @@
   /**
    * Construct a new CSV reader.
    *
-   * @return \League\Csv\Reader
+   * @return Reader
    *   The reader.
    */
   protected function createReader() {
    ----------- end diff -----------

Applied rules:
 * FileMoveRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/path_redirect_import/src/Form/ExportRedirectForm.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The redirect export service.
    *
-   * @var \Drupal\path_redirect_import\RedirectExport
+   * @var RedirectExport
    */
   protected $redirectExport;

@@ @@
   /**
    * Constructs a MigrateRedirectForm object.
    *
-   * @param \Drupal\path_redirect_import\RedirectExport $redirect_export
+   * @param RedirectExport $redirect_export
    *   The redirect export service.
    */
   public function __construct(RedirectExport $redirect_export) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/path_redirect_import/src/Commands/PathRedirectImportCommands.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystem
+   * @var FileSystem
    */
   protected $fileSystem;

@@ @@
   /**
    * The redirect export service.
    *
-   * @var \Drupal\path_redirect_import\RedirectExport
+   * @var RedirectExport
    */
   protected $redirectExport;

@@ @@
   /**
    * PathRedirectImportCommands constructor.
    *
-   * @param \Drupal\migrate\Plugin\MigrationPluginManager $migrationPluginManager
+   * @param MigrationPluginManager $migrationPluginManager
    *   Migration Plugin Manager service.
-   * @param \Drupal\Core\Datetime\DateFormatter $dateFormatter
+   * @param DateFormatter $dateFormatter
    *   Date formatter service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager service.
-   * @param \Drupal\Core\KeyValueStore\KeyValueFactoryInterface $keyValue
+   * @param KeyValueFactoryInterface $keyValue
    *   Key-value store service.
-   * @param \Drupal\Core\File\FileSystem $fileSystem
+   * @param FileSystem $fileSystem
    *   File System service.
-   * @param \Drupal\path_redirect_import\RedirectExport $redirectExport
+   * @param RedirectExport $redirectExport
    *   The redirect export service.
    */
   public function __construct(MigrationPluginManager $migrationPluginManager, DateFormatter $dateFormatter, EntityTypeManagerInterface $entityTypeManager, KeyValueFactoryInterface $keyValue, FileSystem $fileSystem, RedirectExport $redirectExport) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 7 files have been changed by Rector                                       

