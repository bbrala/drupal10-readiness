modules/contrib/welcome_mail/src/Form/SettingsForm.php
modules/contrib/welcome_mail/src/Plugin/QueueWorker/WelcomeMailQueue.php
modules/contrib/welcome_mail/tests/src/FunctionalJavascript/ManualEnableAndCreateTest.php
modules/contrib/welcome_mail/tests/src/Kernel/MailQueuedTest.php
modules/contrib/welcome_mail/tests/src/Kernel/UserDeletedTest.php
modules/contrib/welcome_mail/welcome_mail.api.php
modules/contrib/welcome_mail/welcome_mail.install
modules/contrib/welcome_mail/welcome_mail.module

4 files with changes
====================

1) modules/contrib/welcome_mail/tests/src/Kernel/UserDeletedTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\welcome_mail\Kernel;

+use Drupal\user\UserInterface;
+use Drupal\Core\Queue\QueueWorkerManager;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\user\Traits\UserCreationTrait;

@@ @@
   /**
    * User.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
     $queue = $this->container->get('queue')->get(WELCOME_MAIL_QUEUE_NAME);
     $queue->createItem($this->user->id());
     $this->assertEquals(1, $queue->numberOfItems());
-    /** @var \Drupal\Core\Queue\QueueWorkerManager $queue_manager */
+    /** @var QueueWorkerManager $queue_manager */
     $queue_manager = $this->container->get('plugin.manager.queue_worker');
     $worker = $queue_manager->createInstance(WELCOME_MAIL_QUEUE_NAME);
     $item = $queue->claimItem();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/welcome_mail/tests/src/Kernel/MailQueuedTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\welcome_mail\Kernel;

+use Drupal\user\UserStorageInterface;
+use Drupal\Core\Queue\QueueFactory;
+use Drupal\user\UserInterface;
+use Drupal\Core\Queue\QueueWorkerManagerInterface;
+use Drupal\welcome_mail\Plugin\QueueWorker\WelcomeMailQueue;
+use Drupal\Core\Queue\QueueWorkerManager;
 use Drupal\Core\Test\AssertMailTrait;
 use Drupal\KernelTests\KernelTestBase;

@@ @@
    */
   public function testQueue() {
     // Create a user.
-    /** @var \Drupal\user\UserStorageInterface $user_storage */
+    /** @var UserStorageInterface $user_storage */
     $user_storage = $this->container->get('entity_type.manager')->getStorage('user');
     $user = $user_storage->create([
       'name' => 'testuser1',
@@ @@
       'mail' => 'testuser1@example.com',
     ]);
     $user->save();
-    /** @var \Drupal\Core\Queue\QueueFactory $queue_factory */
+    /** @var QueueFactory $queue_factory */
     $queue_factory = $this->container->get('queue');
     $queue = $queue_factory->get(WELCOME_MAIL_QUEUE_NAME);
     // Should not trigger a queue item, since we have not enabled anything yet.
@@ @@
       ->set('enabled', TRUE)
       ->save();
     // Create a user.
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     $user = $user_storage->create([
       'name' => 'testuser2',
       'mail' => 'testuser2@example.com',
@@ @@
     // Should now hold an item.
     $this->assertEquals(1, $queue->numberOfItems());
     // Try to run the queue.
-    /** @var \Drupal\Core\Queue\QueueWorkerManagerInterface $queue_runner */
+    /** @var QueueWorkerManagerInterface $queue_runner */
     $queue_runner = $this->container->get('plugin.manager.queue_worker');
     // Process all of them.
-    /** @var \Drupal\welcome_mail\Plugin\QueueWorker\WelcomeMailQueue $wc_queue */
+    /** @var WelcomeMailQueue $wc_queue */
     $wc_queue = $queue_runner->createInstance(WELCOME_MAIL_QUEUE_NAME);
     $item = $queue->claimItem();
     $wc_queue->processItem($item->data);
@@ @@
       ->set('enabled', TRUE)
       ->save();
     // Create a user.
-    /** @var \Drupal\user\UserStorageInterface $user_storage */
+    /** @var UserStorageInterface $user_storage */
     $user_storage = $this->container->get('entity_type.manager')->getStorage('user');
     $user1 = $user_storage->create([
       'name' => 'testuser1',
@@ @@
     // Delete the first two users.
     $user1->delete();
     $user2->delete();
-    /** @var \Drupal\Core\Queue\QueueFactory $queue_factory */
+    /** @var QueueFactory $queue_factory */
     $queue_factory = $this->container->get('queue');
     $queue = $queue_factory->get(WELCOME_MAIL_QUEUE_NAME);
     // Should now hold 3 items.
     $this->assertEquals(3, $queue->numberOfItems());
-    /** @var \Drupal\Core\Queue\QueueWorkerManager $queue_runner */
+    /** @var QueueWorkerManager $queue_runner */
     $queue_runner = $this->container->get('plugin.manager.queue_worker');
     // Process all of them.
     $wc_queue = $queue_runner->createInstance(WELCOME_MAIL_QUEUE_NAME);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/welcome_mail/tests/src/FunctionalJavascript/ManualEnableAndCreateTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\welcome_mail\FunctionalJavascript;

+use Drupal\user\Entity\User;
+use Drupal\Core\Queue\QueueFactory;
+use Drupal\user\UserStorageInterface;
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;

@@ @@
   /**
    * Admin user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $adminUser;

@@ @@
    * @see https://www.drupal.org/project/welcome_mail/issues/3168913
    */
   public function testMailQueuedAfterEnabled() {
-    /** @var \Drupal\Core\Queue\QueueFactory $queue_factory */
+    /** @var QueueFactory $queue_factory */
     $queue_factory = $this->container->get('queue');
     $queue = $queue_factory->get(WELCOME_MAIL_QUEUE_NAME);
     $this->assertEquals(0, $queue->numberOfItems());
@@ @@
     $this->click('input[type="checkbox"]');
     $this->click('input[type="submit"]');
     // Create a user.
-    /** @var \Drupal\user\UserStorageInterface $user_storage */
+    /** @var UserStorageInterface $user_storage */
     $user_storage = $this->container->get('entity_type.manager')->getStorage('user');
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     $user = $user_storage->create([
       'name' => 'testuser2',
       'mail' => 'testuser2@example.com',
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/welcome_mail/src/Plugin/QueueWorker/WelcomeMailQueue.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\welcome_mail\Plugin\QueueWorker;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\user\UserInterface;
 use Drupal\Component\Datetime\Time;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * Time.
    *
-   * @var \Drupal\Component\Datetime\Time
+   * @var Time
    */
   protected $time;

@@ @@
   /**
    * Mail manager.
    *
-   * @var \Drupal\Core\Mail\MailManagerInterface
+   * @var MailManagerInterface
    */
   protected $mailManager;

@@ @@
    *   The data that was passed to
    *   \Drupal\Core\Queue\QueueInterface::createItem() when the item was queued.
    *
-   * @throws \Drupal\Core\Queue\RequeueException
+   * @throws RequeueException
    *   Processing is not yet finished. This will allow another process to claim
    *   the item immediately.
    * @throws \Exception
@@ @@
    *   A QueueWorker plugin may throw an exception to indicate there was a
    *   problem. The cron process will log the exception, and leave the item in
    *   the queue to be processed again later.
-   * @throws \Drupal\Core\Queue\SuspendQueueException
+   * @throws SuspendQueueException
    *   More specifically, a SuspendQueueException should be thrown when a
    *   QueueWorker plugin is aware that the problem will affect all subsequent
    *   workers of its queue. For example, a callback that makes HTTP requests
@@ @@
    * @see \Drupal\Core\Cron::processQueues()
    */
   public function processItem($uid) {
-    /** @var \Drupal\user\UserInterface $account */
+    /** @var UserInterface $account */
     $account = $this->entityTypeManager->getStorage('user')->load($uid);
     if (!$account) {
       return;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 4 files have been changed by Rector                                       

