diff --git a/linkit.module b/linkit.module
index e9159be..1423ab5 100644
--- a/linkit.module
+++ b/linkit.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\filter\Entity\FilterFormat;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\editor\EditorInterface;
 /**
  * @file
  * Linkit hook implementations.
@@ -54,13 +57,13 @@ function linkit_form_editor_link_dialog_alter(&$form, FormStateInterface $form_s
     return;
   }
 
-  /** @var Drupal\filter\Entity\FilterFormat $filter_format */
+  /** @var FilterFormat $filter_format */
   $filter_format = $form_state->getBuildInfo()['args'][0];
 
-  /** @var \Drupal\Core\Entity\EntityStorageInterface $editorStorage */
+  /** @var EntityStorageInterface $editorStorage */
   $editorStorage = Drupal::service('entity_type.manager')->getStorage('editor');
 
-  /** @var \Drupal\editor\EditorInterface $editor */
+  /** @var EditorInterface $editor */
   $editor = $editorStorage->load($filter_format->id());
   $plugin_settings = $editor->getSettings()['plugins']['drupallink'];
 
diff --git a/src/Annotation/Matcher.php b/src/Annotation/Matcher.php
index 6892db0..6366a67 100644
--- a/src/Annotation/Matcher.php
+++ b/src/Annotation/Matcher.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\linkit\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -28,7 +29,7 @@ class Matcher extends Plugin {
   /**
    * The human-readable name of the matcher.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label;
 
diff --git a/src/Annotation/Substitution.php b/src/Annotation/Substitution.php
index b46a73a..436e050 100644
--- a/src/Annotation/Substitution.php
+++ b/src/Annotation/Substitution.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\linkit\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -21,7 +22,7 @@ class Substitution extends Plugin {
   /**
    * The human-readable name of the substitution.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label;
 
diff --git a/src/Controller/AutocompleteController.php b/src/Controller/AutocompleteController.php
index 0bcdeaf..b8d6e75 100644
--- a/src/Controller/AutocompleteController.php
+++ b/src/Controller/AutocompleteController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\linkit\Controller;
 
+use Drupal\linkit\ProfileInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\linkit\SuggestionManager;
@@ -17,30 +18,30 @@ class AutocompleteController implements ContainerInjectionInterface {
   /**
    * The linkit profile storage service.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $linkitProfileStorage;
 
   /**
    * The suggestion manager.
    *
-   * @var \Drupal\linkit\SuggestionManager
+   * @var SuggestionManager
    */
   protected $suggestionManager;
 
   /**
    * The linkit profile.
    *
-   * @var \Drupal\linkit\ProfileInterface
+   * @var ProfileInterface
    */
   protected $linkitProfile;
 
   /**
    * Constructs a EntityAutocompleteController object.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $linkit_profile_storage
+   * @param EntityStorageInterface $linkit_profile_storage
    *   The linkit profile storage service.
-   * @param \Drupal\linkit\SuggestionManager $suggestionManager
+   * @param SuggestionManager $suggestionManager
    *   The suggestion service.
    */
   public function __construct(EntityStorageInterface $linkit_profile_storage, SuggestionManager $suggestionManager) {
@@ -64,12 +65,12 @@ class AutocompleteController implements ContainerInjectionInterface {
    * Like other autocomplete functions, this function inspects the 'q' query
    * parameter for the string to use to search for suggestions.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    * @param string $linkit_profile_id
    *   The linkit profile id.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response containing the autocomplete suggestions.
    */
   public function autocomplete(Request $request, $linkit_profile_id) {
diff --git a/src/Controller/LinkitController.php b/src/Controller/LinkitController.php
index fdefd47..afe161b 100644
--- a/src/Controller/LinkitController.php
+++ b/src/Controller/LinkitController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\linkit\Controller;
 
+use Drupal\linkit\MatcherInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\linkit\ProfileInterface;
 
@@ -13,7 +14,7 @@ class LinkitController extends ControllerBase {
   /**
    * Route title callback.
    *
-   * @param \Drupal\linkit\ProfileInterface $linkit_profile
+   * @param ProfileInterface $linkit_profile
    *   The profile.
    *
    * @return string
@@ -26,7 +27,7 @@ class LinkitController extends ControllerBase {
   /**
    * Route title callback.
    *
-   * @param \Drupal\linkit\ProfileInterface $linkit_profile
+   * @param ProfileInterface $linkit_profile
    *   The profile.
    * @param string $plugin_instance_id
    *   The plugin instance id.
@@ -35,7 +36,7 @@ class LinkitController extends ControllerBase {
    *   The title for the matcher edit form.
    */
   public function matcherTitle(ProfileInterface $linkit_profile, $plugin_instance_id) {
-    /** @var \Drupal\linkit\MatcherInterface $matcher */
+    /** @var MatcherInterface $matcher */
     $matcher = $linkit_profile->getMatcher($plugin_instance_id);
     return $this->t('Edit %label matcher', ['%label' => $matcher->getLabel()]);
   }
diff --git a/src/Element/Linkit.php b/src/Element/Linkit.php
index 2bb7963..2c1a380 100644
--- a/src/Element/Linkit.php
+++ b/src/Element/Linkit.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\linkit\Element;
 
+use Drupal\Core\Access\AccessManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\BubbleableMetadata;
 use Drupal\Core\Render\Element\FormElement;
@@ -60,7 +61,7 @@ class Linkit extends FormElement {
     if (!empty($element['#autocomplete_route_name'])) {
       $parameters = isset($element['#autocomplete_route_parameters']) ? $element['#autocomplete_route_parameters'] : [];
       $url = Url::fromRoute($element['#autocomplete_route_name'], $parameters)->toString(TRUE);
-      /** @var \Drupal\Core\Access\AccessManagerInterface $access_manager */
+      /** @var AccessManagerInterface $access_manager */
       $access_manager = \Drupal::service('access_manager');
       $access = $access_manager->checkNamedRoute($element['#autocomplete_route_name'], $parameters, \Drupal::currentUser(), TRUE);
     }
diff --git a/src/Entity/Profile.php b/src/Entity/Profile.php
index 48cb5d1..c7f2e71 100644
--- a/src/Entity/Profile.php
+++ b/src/Entity/Profile.php
@@ -82,7 +82,7 @@ class Profile extends ConfigEntityBase implements ProfileInterface, EntityWithPl
   /**
    * Holds the collection of matchers that are attached to this profile.
    *
-   * @var \Drupal\linkit\MatcherCollection
+   * @var MatcherCollection
    */
   protected $matcherCollection;
 
diff --git a/src/Form/Matcher/AddForm.php b/src/Form/Matcher/AddForm.php
index 5007d04..190982f 100644
--- a/src/Form/Matcher/AddForm.php
+++ b/src/Form/Matcher/AddForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\linkit\Form\Matcher;
 
+use Drupal\linkit\MatcherInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\linkit\ConfigurableMatcherInterface;
@@ -17,7 +18,7 @@ class AddForm extends FormBase {
   /**
    * The profiles to which the matchers will be applied.
    *
-   * @var \Drupal\linkit\ProfileInterface
+   * @var ProfileInterface
    */
   protected $linkitProfile;
 
@@ -25,14 +26,14 @@ class AddForm extends FormBase {
   /**
    * The matcher manager.
    *
-   * @var \Drupal\linkit\MatcherManager
+   * @var MatcherManager
    */
   protected $manager;
 
   /**
    * Constructs a new AddForm.
    *
-   * @param \Drupal\linkit\MatcherManager $manager
+   * @param MatcherManager $manager
    *   The matcher manager.
    */
   public function __construct(MatcherManager $manager) {
@@ -101,7 +102,7 @@ class AddForm extends FormBase {
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $form_state->cleanValues();
 
-    /** @var \Drupal\linkit\MatcherInterface $plugin */
+    /** @var MatcherInterface $plugin */
     $plugin = $this->manager->createInstance($form_state->getValue('plugin'));
 
     $plugin_uuid = $this->linkitProfile->addMatcher($plugin->getConfiguration());
@@ -141,7 +142,7 @@ class AddForm extends FormBase {
       return strnatcasecmp($a['label'], $b['label']);
     });
     foreach ($all_plugins as $definition) {
-      /** @var \Drupal\linkit\MatcherInterface $plugin */
+      /** @var MatcherInterface $plugin */
       $plugin = $this->manager->createInstance($definition['id']);
       $row = [
         'label' => $plugin->getLabel(),
diff --git a/src/Form/Matcher/DeleteForm.php b/src/Form/Matcher/DeleteForm.php
index e2f14ec..65c1776 100644
--- a/src/Form/Matcher/DeleteForm.php
+++ b/src/Form/Matcher/DeleteForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\linkit\Form\Matcher;
 
+use Drupal\linkit\MatcherInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -16,14 +17,14 @@ class DeleteForm extends ConfirmFormBase {
   /**
    * The profiles that the matcher is applied to.
    *
-   * @var \Drupal\linkit\ProfileInterface
+   * @var ProfileInterface
    */
   protected $linkitProfile;
 
   /**
    * The matcher to be removed from the profile.
    *
-   * @var \Drupal\linkit\MatcherInterface
+   * @var MatcherInterface
    */
   protected $linkitMatcher;
 
diff --git a/src/Form/Matcher/EditForm.php b/src/Form/Matcher/EditForm.php
index d847d4e..32cbf85 100644
--- a/src/Form/Matcher/EditForm.php
+++ b/src/Form/Matcher/EditForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\linkit\Form\Matcher;
 
+use Drupal\linkit\ConfigurableMatcherInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormState;
 use Drupal\Core\Form\FormStateInterface;
@@ -16,14 +17,14 @@ class EditForm extends FormBase {
   /**
    * The profiles to which the matchers will be applied.
    *
-   * @var \Drupal\linkit\ProfileInterface
+   * @var ProfileInterface
    */
   protected $linkitProfile;
 
   /**
    * The matcher to edit.
    *
-   * @var \Drupal\linkit\ConfigurableMatcherInterface
+   * @var ConfigurableMatcherInterface
    */
   protected $linkitMatcher;
 
diff --git a/src/Form/Matcher/OverviewForm.php b/src/Form/Matcher/OverviewForm.php
index 33cb0e3..a83083c 100644
--- a/src/Form/Matcher/OverviewForm.php
+++ b/src/Form/Matcher/OverviewForm.php
@@ -18,21 +18,21 @@ class OverviewForm extends FormBase {
   /**
    * The profiles to which the matchers are applied to.
    *
-   * @var \Drupal\linkit\ProfileInterface
+   * @var ProfileInterface
    */
   private $linkitProfile;
 
   /**
    * The matcher manager.
    *
-   * @var \Drupal\linkit\MatcherManager
+   * @var MatcherManager
    */
   protected $manager;
 
   /**
    * Constructs a new OverviewForm.
    *
-   * @param \Drupal\linkit\MatcherManager $manager
+   * @param MatcherManager $manager
    *   The matcher manager.
    */
   public function __construct(MatcherManager $manager) {
diff --git a/src/Form/Profile/FormBase.php b/src/Form/Profile/FormBase.php
index d11e33c..0c6b8b5 100644
--- a/src/Form/Profile/FormBase.php
+++ b/src/Form/Profile/FormBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\linkit\Form\Profile;
 
+use Drupal\linkit\ProfileInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -13,7 +14,7 @@ abstract class FormBase extends EntityForm {
   /**
    * The entity being used by this form.
    *
-   * @var \Drupal\linkit\ProfileInterface
+   * @var ProfileInterface
    */
   protected $entity;
 
diff --git a/src/MatcherInterface.php b/src/MatcherInterface.php
index e2be93a..ab00ab7 100644
--- a/src/MatcherInterface.php
+++ b/src/MatcherInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\linkit;
 
+use Drupal\linkit\Suggestion\SuggestionCollection;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
@@ -64,7 +65,7 @@ interface MatcherInterface extends PluginInspectionInterface, ConfigurableInterf
    * @param string $string
    *   The string that contains the text to search for.
    *
-   * @return \Drupal\linkit\Suggestion\SuggestionCollection
+   * @return SuggestionCollection
    *   A suggestion collection.
    */
   public function execute($string);
diff --git a/src/Plugin/CKEditorPlugin/LinkitDrupalLink.php b/src/Plugin/CKEditorPlugin/LinkitDrupalLink.php
index c0168bc..c1d3cdc 100644
--- a/src/Plugin/CKEditorPlugin/LinkitDrupalLink.php
+++ b/src/Plugin/CKEditorPlugin/LinkitDrupalLink.php
@@ -18,7 +18,7 @@ class LinkitDrupalLink extends DrupalLink implements CKEditorPluginConfigurableI
   /**
    * The Linkit profile storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $linkitProfileStorage;
 
@@ -90,7 +90,7 @@ class LinkitDrupalLink extends DrupalLink implements CKEditorPluginConfigurableI
    * @param array $element
    *   An associative array containing the properties and children of the
    *   generic form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form for the form this element belongs to.
    *
    * @see \Drupal\Core\Render\Element\FormElement::processPattern()
diff --git a/src/Plugin/Derivative/EntityMatcherDeriver.php b/src/Plugin/Derivative/EntityMatcherDeriver.php
index 3e6f689..478fc14 100644
--- a/src/Plugin/Derivative/EntityMatcherDeriver.php
+++ b/src/Plugin/Derivative/EntityMatcherDeriver.php
@@ -18,14 +18,14 @@ class EntityMatcherDeriver extends DeriverBase implements ContainerDeriverInterf
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Creates an EntityMatcherDeriver object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Plugin/Filter/LinkitFilter.php b/src/Plugin/Filter/LinkitFilter.php
index f272303..d7fc90e 100644
--- a/src/Plugin/Filter/LinkitFilter.php
+++ b/src/Plugin/Filter/LinkitFilter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\linkit\Plugin\Filter;
 
+use Drupal\Core\GeneratedUrl;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -29,14 +30,14 @@ class LinkitFilter extends FilterBase implements ContainerFactoryPluginInterface
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * The substitution manager.
    *
-   * @var \Drupal\linkit\SubstitutionManagerInterface
+   * @var SubstitutionManagerInterface
    */
   protected $substitutionManager;
 
@@ -49,9 +50,9 @@ class LinkitFilter extends FilterBase implements ContainerFactoryPluginInterface
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\linkit\SubstitutionManagerInterface $substitution_manager
+   * @param SubstitutionManagerInterface $substitution_manager
    *   The substitution manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityRepositoryInterface $entity_repository, SubstitutionManagerInterface $substitution_manager) {
@@ -109,7 +110,7 @@ class LinkitFilter extends FilterBase implements ContainerFactoryPluginInterface
 
             $entity = $this->entityRepository->getTranslationFromContext($entity, $langcode);
 
-            /** @var \Drupal\Core\GeneratedUrl $url */
+            /** @var GeneratedUrl $url */
             $url = $this->substitutionManager
               ->createInstance($substitution_type)
               ->getUrl($entity);
diff --git a/src/Plugin/Linkit/Matcher/EntityMatcher.php b/src/Plugin/Linkit/Matcher/EntityMatcher.php
index e5a9413..8a6eec3 100644
--- a/src/Plugin/Linkit/Matcher/EntityMatcher.php
+++ b/src/Plugin/Linkit/Matcher/EntityMatcher.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\linkit\Plugin\Linkit\Matcher;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Config\Entity\ConfigEntityTypeInterface;
 use Drupal\Core\Database\Connection;
@@ -44,42 +45,42 @@ class EntityMatcher extends ConfigurableMatcherBase {
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
@@ -93,7 +94,7 @@ class EntityMatcher extends ConfigurableMatcherBase {
   /**
    * The substitution manager.
    *
-   * @var \Drupal\linkit\SubstitutionManagerInterface
+   * @var SubstitutionManagerInterface
    */
   protected $substitutionManager;
 
@@ -335,7 +336,7 @@ class EntityMatcher extends ConfigurableMatcherBase {
 
     foreach ($entities as $entity) {
       // Check the access against the defined entity access handler.
-      /** @var \Drupal\Core\Access\AccessResultInterface $access */
+      /** @var AccessResultInterface $access */
       $access = $entity->access('view', $this->currentUser, TRUE);
 
       if (!$access->isAllowed()) {
@@ -356,7 +357,7 @@ class EntityMatcher extends ConfigurableMatcherBase {
    * @param string $search_string
    *   Text to match the label against.
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface
+   * @return QueryInterface
    *   The EntityQuery object with the basic conditions and sorting applied to
    *   it.
    */
@@ -396,7 +397,7 @@ class EntityMatcher extends ConfigurableMatcherBase {
   /**
    * Adds query tags to the query.
    *
-   * @param \Drupal\Core\Entity\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   A query to add tags to.
    */
   protected function addQueryTags(QueryInterface $query) {
@@ -412,10 +413,10 @@ class EntityMatcher extends ConfigurableMatcherBase {
   /**
    * Creates a suggestion.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The matched entity.
    *
-   * @return \Drupal\linkit\Suggestion\EntitySuggestion
+   * @return EntitySuggestion
    *   A suggestion object with populated entity data.
    */
   protected function createSuggestion(EntityInterface $entity) {
@@ -434,7 +435,7 @@ class EntityMatcher extends ConfigurableMatcherBase {
   /**
    * Builds the label string used in the suggestion.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The matched entity.
    *
    * @return string
@@ -447,7 +448,7 @@ class EntityMatcher extends ConfigurableMatcherBase {
   /**
    * Builds the metadata string used in the suggestion.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The matched entity.
    *
    * @return string
@@ -461,7 +462,7 @@ class EntityMatcher extends ConfigurableMatcherBase {
   /**
    * Builds the group string used in the suggestion.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The matched entity.
    *
    * @return string
@@ -484,7 +485,7 @@ class EntityMatcher extends ConfigurableMatcherBase {
   /**
    * Builds the path string used in the suggestion.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The matched entity.
    *
    * @return string
diff --git a/src/Plugin/Linkit/Matcher/FileMatcher.php b/src/Plugin/Linkit/Matcher/FileMatcher.php
index 9d05089..41d33fe 100644
--- a/src/Plugin/Linkit/Matcher/FileMatcher.php
+++ b/src/Plugin/Linkit/Matcher/FileMatcher.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\linkit\Plugin\Linkit\Matcher;
 
+use Drupal\file\FileInterface;
+use Drupal\Core\Image\ImageInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\image\Entity\ImageStyle;
@@ -187,7 +189,7 @@ class FileMatcher extends EntityMatcher {
 
     $description_array[] = parent::buildDescription($entity);
 
-    /** @var \Drupal\file\FileInterface $entity */
+    /** @var FileInterface $entity */
     $file = $entity->getFileUri();
 
     if ($this->configuration['images']['show_dimensions'] || $this->configuration['images']['show_thumbnail']) {
@@ -196,7 +198,7 @@ class FileMatcher extends EntityMatcher {
 
       // Check if the file extension is supported by the image toolkit.
       if (empty(file_validate_extensions($entity, implode(' ', $supported_extensions)))) {
-        /** @var \Drupal\Core\Image\ImageInterface $image */
+        /** @var ImageInterface $image */
         $image = $image_factory->get($file);
         if ($image->isValid()) {
           if ($this->configuration['images']['show_dimensions']) {
@@ -225,8 +227,8 @@ class FileMatcher extends EntityMatcher {
    * {@inheritdoc}
    */
   protected function buildPath(EntityInterface $entity) {
-    /** @var \Drupal\file\FileInterface $entity */
-    return file_url_transform_relative(file_create_url($entity->getFileUri()));
+    /** @var FileInterface $entity */
+    return \Drupal::service('file_url_generator')->generateString($entity->getFileUri());
   }
 
 }
diff --git a/src/Plugin/Linkit/Substitution/File.php b/src/Plugin/Linkit/Substitution/File.php
index c441dfc..6b3b003 100644
--- a/src/Plugin/Linkit/Substitution/File.php
+++ b/src/Plugin/Linkit/Substitution/File.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\linkit\Plugin\Linkit\Substitution;
 
+use Drupal\file\FileInterface;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -23,7 +24,7 @@ class File extends PluginBase implements SubstitutionInterface {
    */
   public function getUrl(EntityInterface $entity) {
     $url = new GeneratedUrl();
-    /** @var \Drupal\file\FileInterface $entity */
+    /** @var FileInterface $entity */
     $url->setGeneratedUrl(file_create_url($entity->getFileUri()));
     $url->addCacheableDependency($entity);
     return $url;
diff --git a/src/Plugin/Linkit/Substitution/Media.php b/src/Plugin/Linkit/Substitution/Media.php
index 9cdcb1c..3f58474 100644
--- a/src/Plugin/Linkit/Substitution/Media.php
+++ b/src/Plugin/Linkit/Substitution/Media.php
@@ -46,7 +46,7 @@ class Media extends PluginBase implements SubstitutionInterface, ContainerFactor
 
     $source_field = $entity->getSource()->getSourceFieldDefinition($entity->get('bundle')->entity);
     if ($source_field && $entity->hasField($source_field->getName()) && $entity->get($source_field->getName())->entity instanceof FileInterface) {
-      /** @var \Drupal\file\FileInterface $file */
+      /** @var FileInterface $file */
       $file = $entity->get($source_field->getName())->entity;
       $url->setGeneratedUrl(file_create_url($file->getFileUri()));
       $url->addCacheableDependency($entity);
diff --git a/src/ProfileInterface.php b/src/ProfileInterface.php
index de8c5da..3e9a730 100644
--- a/src/ProfileInterface.php
+++ b/src/ProfileInterface.php
@@ -33,7 +33,7 @@ interface ProfileInterface extends ConfigEntityInterface {
    * @param string $instance_id
    *   The matcher instance ID.
    *
-   * @return \Drupal\linkit\MatcherInterface
+   * @return MatcherInterface
    *   The matcher object.
    */
   public function getMatcher($instance_id);
@@ -41,7 +41,7 @@ interface ProfileInterface extends ConfigEntityInterface {
   /**
    * Returns the matchers for this profile.
    *
-   * @return \Drupal\linkit\MatcherCollection|\Drupal\linkit\MatcherInterface[]
+   * @return MatcherCollection|MatcherInterface[]
    *   The matcher collection.
    */
   public function getMatchers();
@@ -60,7 +60,7 @@ interface ProfileInterface extends ConfigEntityInterface {
   /**
    * Removes a matcher from this profile.
    *
-   * @param \Drupal\linkit\MatcherInterface $matcher
+   * @param MatcherInterface $matcher
    *   The matcher object.
    *
    * @return $this
diff --git a/src/ProfileListBuilder.php b/src/ProfileListBuilder.php
index 728fcb9..0e05573 100644
--- a/src/ProfileListBuilder.php
+++ b/src/ProfileListBuilder.php
@@ -29,7 +29,7 @@ class ProfileListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\linkit\ProfileInterface $linkitProfile */
+    /** @var ProfileInterface $linkitProfile */
     $linkitProfile = $entity;
     $row['label'] = $linkitProfile->label();
     $row['description']['data'] = ['#markup' => $linkitProfile->getDescription()];
diff --git a/src/SubstitutionInterface.php b/src/SubstitutionInterface.php
index c39ec5a..446dc49 100644
--- a/src/SubstitutionInterface.php
+++ b/src/SubstitutionInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\linkit;
 
+use Drupal\Core\GeneratedUrl;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -14,10 +15,10 @@ interface SubstitutionInterface extends PluginInspectionInterface {
   /**
    * Get the URL associated with a given entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to get a URL for.
    *
-   * @return \Drupal\Core\GeneratedUrl
+   * @return GeneratedUrl
    *   A url to replace.
    */
   public function getUrl(EntityInterface $entity);
@@ -25,7 +26,7 @@ interface SubstitutionInterface extends PluginInspectionInterface {
   /**
    * Checks if this substitution plugin is applicable for the given entity type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   An entity type object.
    *
    * @return bool
diff --git a/src/SubstitutionManager.php b/src/SubstitutionManager.php
index 987b0fe..5f85e5f 100644
--- a/src/SubstitutionManager.php
+++ b/src/SubstitutionManager.php
@@ -16,7 +16,7 @@ class SubstitutionManager extends DefaultPluginManager implements SubstitutionMa
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -26,11 +26,11 @@ class SubstitutionManager extends DefaultPluginManager implements SubstitutionMa
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, EntityTypeManagerInterface $entity_type_manager) {
@@ -58,7 +58,7 @@ class SubstitutionManager extends DefaultPluginManager implements SubstitutionMa
    *
    * @param array $definitions
    *   An array of plugin definitions.
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type to get applicable plugins for.
    *
    * @return array
@@ -68,7 +68,7 @@ class SubstitutionManager extends DefaultPluginManager implements SubstitutionMa
    */
   protected function filterPlugins(array $definitions, EntityTypeInterface $entity_type) {
     return array_filter($definitions, function ($definition) use ($entity_type) {
-      /** @var \Drupal\linkit\SubstitutionInterface $class */
+      /** @var SubstitutionInterface $class */
       $class = $definition['class'];
       return $class::isApplicable($entity_type);
     });
diff --git a/src/Suggestion/SuggestionCollection.php b/src/Suggestion/SuggestionCollection.php
index 9117009..291f78e 100644
--- a/src/Suggestion/SuggestionCollection.php
+++ b/src/Suggestion/SuggestionCollection.php
@@ -17,7 +17,7 @@ class SuggestionCollection implements \JsonSerializable {
   /**
    * Returns all suggestions in the collection.
    *
-   * @return \Drupal\linkit\Suggestion\SuggestionInterface[]
+   * @return SuggestionInterface[]
    *   All suggestions in the collection.
    */
   public function getSuggestions() {
@@ -27,7 +27,7 @@ class SuggestionCollection implements \JsonSerializable {
   /**
    * Adds a suggestion to this collection.
    *
-   * @param \Drupal\linkit\Suggestion\SuggestionInterface $suggestion
+   * @param SuggestionInterface $suggestion
    *   The suggestion to add to the collection.
    */
   public function addSuggestion(SuggestionInterface $suggestion) {
diff --git a/src/SuggestionManager.php b/src/SuggestionManager.php
index 1f7b280..4517d47 100644
--- a/src/SuggestionManager.php
+++ b/src/SuggestionManager.php
@@ -22,7 +22,7 @@ class SuggestionManager {
    * @param string $search_string
    *   The string ro use in the matchers.
    *
-   * @return \Drupal\linkit\Suggestion\SuggestionCollection
+   * @return SuggestionCollection
    *   A suggestion collection.
    */
   public function getSuggestions(ProfileInterface $linkitProfile, $search_string) {
@@ -42,12 +42,12 @@ class SuggestionManager {
   /**
    * Adds an unscathed suggestion to the given suggestion collection.
    *
-   * @param \Drupal\linkit\Suggestion\SuggestionCollection $suggestionCollection
+   * @param SuggestionCollection $suggestionCollection
    *   A suggestion collection to add the unscathed suggestion to.
    * @param string $search_string
    *   The string ro use in the matchers.
    *
-   * @return \Drupal\linkit\Suggestion\SuggestionCollection
+   * @return SuggestionCollection
    *   A suggestion collection.
    */
   public function addUnscathedSuggestion(SuggestionCollection $suggestionCollection, $search_string) {
diff --git a/src/Tests/ProfileCreationTrait.php b/src/Tests/ProfileCreationTrait.php
index 2343035..a7fca8e 100644
--- a/src/Tests/ProfileCreationTrait.php
+++ b/src/Tests/ProfileCreationTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\linkit\Tests;
 
+use Drupal\linkit\ProfileInterface;
 use Drupal\linkit\Entity\Profile;
 
 /**
@@ -22,7 +23,7 @@ trait ProfileCreationTrait {
    *   - id: Random string.
    *   - label: Random string.
    *
-   * @return \Drupal\linkit\ProfileInterface
+   * @return ProfileInterface
    *   The created profile entity.
    */
   protected function createProfile(array $settings = []) {
diff --git a/tests/src/Functional/Controller/LinkitControllerTest.php b/tests/src/Functional/Controller/LinkitControllerTest.php
index e931e85..9258f65 100644
--- a/tests/src/Functional/Controller/LinkitControllerTest.php
+++ b/tests/src/Functional/Controller/LinkitControllerTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\linkit\Functional\Controller;
 
+use Drupal\linkit\ProfileInterface;
+use Drupal\linkit\MatcherInterface;
 use Drupal\linkit\Tests\ProfileCreationTrait;
 use Drupal\Tests\linkit\Functional\LinkitBrowserTestBase;
 
@@ -17,14 +19,14 @@ class LinkitControllerTest extends LinkitBrowserTestBase {
   /**
    * The linkit profile.
    *
-   * @var \Drupal\linkit\ProfileInterface
+   * @var ProfileInterface
    */
   protected $linkitProfile;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->linkitProfile = $this->createProfile();
@@ -47,7 +49,7 @@ class LinkitControllerTest extends LinkitBrowserTestBase {
   public function testMatcherTitle() {
     $this->drupalLogin($this->adminUser);
 
-    /** @var \Drupal\linkit\MatcherInterface $plugin */
+    /** @var MatcherInterface $plugin */
     $plugin = $this->container->get('plugin.manager.linkit.matcher')->createInstance('configurable_dummy_matcher');
     $matcher_uuid = $this->linkitProfile->addMatcher($plugin->getConfiguration());
     $this->linkitProfile->save();
diff --git a/tests/src/Functional/LinkitBrowserTestBase.php b/tests/src/Functional/LinkitBrowserTestBase.php
index bc61b6c..7c13cef 100644
--- a/tests/src/Functional/LinkitBrowserTestBase.php
+++ b/tests/src/Functional/LinkitBrowserTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\linkit\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -24,21 +25,21 @@ abstract class LinkitBrowserTestBase extends BrowserTestBase {
   /**
    * A test user with administrative privileges.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
   /**
    * A user without the 'administer linkit profiles' permission.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $webUser;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->placeBlock('page_title_block');
diff --git a/tests/src/Functional/LinkitUpdateTest.php b/tests/src/Functional/LinkitUpdateTest.php
index 140fe12..b025490 100644
--- a/tests/src/Functional/LinkitUpdateTest.php
+++ b/tests/src/Functional/LinkitUpdateTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\linkit\Functional;
 
+use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\filter\Entity\FilterFormat;
 use Drupal\FunctionalTests\Update\UpdatePathTestBase;
 
@@ -16,7 +17,7 @@ class LinkitUpdateTest extends UpdatePathTestBase {
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -28,7 +29,7 @@ class LinkitUpdateTest extends UpdatePathTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->configFactory = $this->container->get('config.factory');
   }
diff --git a/tests/src/Functional/MatcherAdminTest.php b/tests/src/Functional/MatcherAdminTest.php
index 2db6653..1a36021 100644
--- a/tests/src/Functional/MatcherAdminTest.php
+++ b/tests/src/Functional/MatcherAdminTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\linkit\Functional;
 
+use Drupal\linkit\MatcherManager;
+use Drupal\linkit\ProfileInterface;
+use Drupal\linkit\MatcherInterface;
 use Drupal\linkit\Entity\Profile;
 use Drupal\linkit\Tests\ProfileCreationTrait;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -20,21 +23,21 @@ class MatcherAdminTest extends LinkitBrowserTestBase {
   /**
    * The attribute manager.
    *
-   * @var \Drupal\linkit\MatcherManager
+   * @var MatcherManager
    */
   protected $manager;
 
   /**
    * The linkit profile.
    *
-   * @var \Drupal\linkit\ProfileInterface
+   * @var ProfileInterface
    */
   protected $linkitProfile;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->manager = $this->container->get('plugin.manager.linkit.matcher');
 
@@ -88,7 +91,7 @@ class MatcherAdminTest extends LinkitBrowserTestBase {
     $this->linkitProfile = Profile::load($this->linkitProfile->id());
 
     $matcher_ids = $this->linkitProfile->getMatchers()->getInstanceIds();
-    /** @var \Drupal\linkit\MatcherInterface $plugin */
+    /** @var MatcherInterface $plugin */
     $plugin = $this->linkitProfile->getMatcher(current($matcher_ids));
 
     $this->assertSession()->addressEquals('/admin/config/content/linkit/manage/' . $this->linkitProfile->id() . '/matchers/' . $plugin->getUuid());
@@ -103,7 +106,7 @@ class MatcherAdminTest extends LinkitBrowserTestBase {
   public function testDelete() {
     $this->drupalLogin($this->adminUser);
 
-    /** @var \Drupal\linkit\MatcherInterface $plugin */
+    /** @var MatcherInterface $plugin */
     $plugin = $this->manager->createInstance('dummy_matcher');
 
     $plugin_uuid = $this->linkitProfile->addMatcher($plugin->getConfiguration());
@@ -126,7 +129,7 @@ class MatcherAdminTest extends LinkitBrowserTestBase {
     $this->assertSession()->addressEquals('/admin/config/content/linkit/manage/' . $this->linkitProfile->id() . '/matchers');
     $this->assertSession()->pageTextContains('No matchers added.');
 
-    /** @var \Drupal\linkit\Entity\Profile $updated_profile */
+    /** @var Profile $updated_profile */
     $updated_profile = Profile::load($this->linkitProfile->id());
     $this->assertFalse($updated_profile->getMatchers()->has($plugin_uuid), 'The user matcher is deleted from the profile');
   }
diff --git a/tests/src/FunctionalJavascript/LinkitDialogTest.php b/tests/src/FunctionalJavascript/LinkitDialogTest.php
index 26eb74e..1603960 100644
--- a/tests/src/FunctionalJavascript/LinkitDialogTest.php
+++ b/tests/src/FunctionalJavascript/LinkitDialogTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\linkit\FunctionalJavascript;
 
+use Drupal\ckeditor\Plugin\Editor\CKEditor;
+use Drupal\linkit\ProfileInterface;
+use Drupal\linkit\MatcherInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\editor\Entity\Editor;
 use Drupal\entity_test\Entity\EntityTestMul;
@@ -44,26 +48,25 @@ class LinkitDialogTest extends WebDriverTestBase {
   /**
    * An instance of the "CKEditor" text editor plugin.
    *
-   * @var \Drupal\ckeditor\Plugin\Editor\CKEditor
+   * @var CKEditor
    */
   protected $ckeditor;
 
   /**
    * A linkit profile.
    *
-   * @var \Drupal\linkit\ProfileInterface
+   * @var ProfileInterface
    */
   protected $linkitProfile;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $matcherManager = $this->container->get('plugin.manager.linkit.matcher');
-    /** @var \Drupal\linkit\MatcherInterface $plugin */
-
+    /** @var MatcherInterface $plugin */
     $this->linkitProfile = $this->createProfile();
     $plugin = $matcherManager->createInstance('entity:entity_test_mul');
     $this->linkitProfile->addMatcher($plugin->getConfiguration());
@@ -143,7 +146,7 @@ class LinkitDialogTest extends WebDriverTestBase {
     }
 
     // Create a test entity.
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = EntityTestMul::create(['name' => 'Foo']);
     $entity->save();
 
diff --git a/tests/src/FunctionalJavascript/LinkitFormatAdminTest.php b/tests/src/FunctionalJavascript/LinkitFormatAdminTest.php
index 7ab46ff..b56693a 100644
--- a/tests/src/FunctionalJavascript/LinkitFormatAdminTest.php
+++ b/tests/src/FunctionalJavascript/LinkitFormatAdminTest.php
@@ -26,7 +26,7 @@ class LinkitFormatAdminTest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $account = $this->drupalCreateUser([
diff --git a/tests/src/Kernel/AssertLinkitFilterTrait.php b/tests/src/Kernel/AssertLinkitFilterTrait.php
index 24ca822..0ad0d2a 100644
--- a/tests/src/Kernel/AssertLinkitFilterTrait.php
+++ b/tests/src/Kernel/AssertLinkitFilterTrait.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\linkit\Kernel;
 
+use Drupal\filter\Plugin\FilterInterface;
+use Drupal\file\Entity\File;
+use Drupal\filter\FilterProcessResult;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Language\LanguageInterface;
@@ -14,22 +17,22 @@ trait AssertLinkitFilterTrait {
   /**
    * The linkit filter.
    *
-   * @var \Drupal\filter\Plugin\FilterInterface
+   * @var FilterInterface
    */
   protected $filter;
 
   /**
    * Asserts that Linkit filter correctly processes the content.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object to check.
    * @param string $langcode
    *   The language code of the text to be filtered.
    */
   protected function assertLinkitFilter(EntityInterface $entity, $langcode = LanguageInterface::LANGCODE_SITE_DEFAULT) {
     if ($entity->getEntityTypeId() === "file") {
-      /** @var \Drupal\file\Entity\File $entity */
-      $href = file_create_url($entity->getFileUri());
+      /** @var File $entity */
+      $href = \Drupal::service('file_url_generator')->generateAbsoluteString($entity->getFileUri());
     }
     else {
       $href = $entity->toUrl()->toString();
@@ -43,15 +46,15 @@ trait AssertLinkitFilterTrait {
   /**
    * Asserts that Linkit filter correctly processes the content titles.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object to check.
    * @param string $langcode
    *   The language code of the text to be filtered.
    */
   protected function assertLinkitFilterWithTitle(EntityInterface $entity, $langcode = LanguageInterface::LANGCODE_SITE_DEFAULT) {
     if ($entity->getEntityTypeId() === "file") {
-      /** @var \Drupal\file\Entity\File $entity */
-      $href = file_create_url($entity->getFileUri());
+      /** @var File $entity */
+      $href = \Drupal::service('file_url_generator')->generateAbsoluteString($entity->getFileUri());
     }
     else {
       $href = $entity->toUrl()->toString();
@@ -70,7 +73,7 @@ trait AssertLinkitFilterTrait {
    * @param string $langcode
    *   The language code of the text to be filtered.
    *
-   * @return \Drupal\filter\FilterProcessResult
+   * @return FilterProcessResult
    *   The filtered text, wrapped in a FilterProcessResult object, and possibly
    *   with associated assets, cacheability metadata and placeholders.
    *
diff --git a/tests/src/Kernel/EntityMatcherDeriverTest.php b/tests/src/Kernel/EntityMatcherDeriverTest.php
index cf3832a..b2e52be 100644
--- a/tests/src/Kernel/EntityMatcherDeriverTest.php
+++ b/tests/src/Kernel/EntityMatcherDeriverTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\linkit\Kernel;
 
+use Drupal\linkit\MatcherManager;
 /**
  * Tests the entity matcher deriver.
  *
@@ -17,14 +18,14 @@ class EntityMatcherDeriverTest extends LinkitKernelTestBase {
   /**
    * The matcher manager.
    *
-   * @var \Drupal\linkit\MatcherManager
+   * @var MatcherManager
    */
   protected $manager;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installConfig(['block_content']);
diff --git a/tests/src/Kernel/LinkitAutocompleteTest.php b/tests/src/Kernel/LinkitAutocompleteTest.php
index 5eae284..b52ad23 100644
--- a/tests/src/Kernel/LinkitAutocompleteTest.php
+++ b/tests/src/Kernel/LinkitAutocompleteTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\linkit\Kernel;
 
+use Drupal\Linkit\ProfileInterface;
+use Drupal\linkit\MatcherManager;
+use Drupal\linkit\MatcherInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Component\Serialization\Json;
 use Drupal\Component\Utility\Html;
@@ -29,14 +32,14 @@ class LinkitAutocompleteTest extends LinkitKernelTestBase {
   /**
    * The linkit profile.
    *
-   * @var \Drupal\Linkit\ProfileInterface
+   * @var ProfileInterface
    */
   protected $linkitProfile;
 
   /**
    * The matcher manager.
    *
-   * @var \Drupal\linkit\MatcherManager
+   * @var MatcherManager
    */
   protected $matcherManager;
 
@@ -50,7 +53,7 @@ class LinkitAutocompleteTest extends LinkitKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create user 1 who has special permissions.
@@ -71,7 +74,7 @@ class LinkitAutocompleteTest extends LinkitKernelTestBase {
    * Tests that inaccessible entities isn't included in the results.
    */
   public function testAutocompletionAccess() {
-    /** @var \Drupal\linkit\MatcherInterface $plugin */
+    /** @var MatcherInterface $plugin */
     $plugin = $this->matcherManager->createInstance('entity:entity_test');
     $this->linkitProfile->addMatcher($plugin->getConfiguration());
     $this->linkitProfile->save();
@@ -90,7 +93,7 @@ class LinkitAutocompleteTest extends LinkitKernelTestBase {
    * Tests that 'front' adds the front page match.
    */
   public function testAutocompletionFront() {
-    /** @var \Drupal\linkit\MatcherInterface $plugin */
+    /** @var MatcherInterface $plugin */
     $plugin = $this->matcherManager->createInstance('front_page');
     $this->linkitProfile->addMatcher($plugin->getConfiguration());
     $this->linkitProfile->save();
@@ -103,7 +106,7 @@ class LinkitAutocompleteTest extends LinkitKernelTestBase {
    * Tests the autocomplete with an email address.
    */
   public function testAutocompletionEmail() {
-    /** @var \Drupal\linkit\MatcherInterface $plugin */
+    /** @var MatcherInterface $plugin */
     $plugin = $this->matcherManager->createInstance('email');
     $this->linkitProfile->addMatcher($plugin->getConfiguration());
     $this->linkitProfile->save();
@@ -118,7 +121,7 @@ class LinkitAutocompleteTest extends LinkitKernelTestBase {
    * Tests autocompletion in general.
    */
   public function testAutocompletion() {
-    /** @var \Drupal\linkit\MatcherInterface $plugin */
+    /** @var MatcherInterface $plugin */
     $plugin = $this->matcherManager->createInstance('entity:entity_test');
     $this->linkitProfile->addMatcher($plugin->getConfiguration());
     $this->linkitProfile->save();
@@ -156,7 +159,7 @@ class LinkitAutocompleteTest extends LinkitKernelTestBase {
    * Tests autocompletion with results limit.
    */
   public function testAutocompletionWithLimit() {
-    /** @var \Drupal\linkit\MatcherInterface $plugin */
+    /** @var MatcherInterface $plugin */
     $plugin = $this->matcherManager->createInstance('entity:entity_test');
     $configuration = $plugin->getConfiguration();
     $configuration['settings']['limit'] = 2;
@@ -179,7 +182,7 @@ class LinkitAutocompleteTest extends LinkitKernelTestBase {
    * Tests autocompletion with translated entities.
    */
   public function testAutocompletionTranslations() {
-    /** @var \Drupal\linkit\MatcherInterface $plugin */
+    /** @var MatcherInterface $plugin */
     $plugin = $this->matcherManager->createInstance('entity:entity_test_mul');
     $this->linkitProfile->addMatcher($plugin->getConfiguration());
     $this->linkitProfile->save();
diff --git a/tests/src/Kernel/LinkitEditorLinkDialogTest.php b/tests/src/Kernel/LinkitEditorLinkDialogTest.php
index 0a1963b..c85c493 100644
--- a/tests/src/Kernel/LinkitEditorLinkDialogTest.php
+++ b/tests/src/Kernel/LinkitEditorLinkDialogTest.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\Tests\linkit\Kernel;
 
+use Drupal\linkit\ProfileInterface;
+use Drupal\editor\EditorInterface;
+use Drupal\linkit\MatcherManager;
+use Drupal\linkit\MatcherInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Form\FormBuilderInterface;
 use Drupal\Core\Form\FormState;
 use Drupal\editor\Entity\Editor;
 use Drupal\editor\Form\EditorLinkDialog;
@@ -22,14 +28,14 @@ class LinkitEditorLinkDialogTest extends LinkitKernelTestBase {
   /**
    * The linkit profile.
    *
-   * @var \Drupal\linkit\ProfileInterface
+   * @var ProfileInterface
    */
   protected $linkitProfile;
 
   /**
    * Editor for testing.
    *
-   * @var \Drupal\editor\EditorInterface
+   * @var EditorInterface
    */
   protected $editor;
 
@@ -43,7 +49,7 @@ class LinkitEditorLinkDialogTest extends LinkitKernelTestBase {
   /**
    * Sets up the test.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installEntitySchema('entity_test');
@@ -52,11 +58,11 @@ class LinkitEditorLinkDialogTest extends LinkitKernelTestBase {
     // Create a profile.
     $this->linkitProfile = $this->createProfile();
 
-    /** @var \Drupal\linkit\MatcherManager $matcherManager */
+    /** @var MatcherManager $matcherManager */
     $matcherManager = $this->container->get('plugin.manager.linkit.matcher');
 
     // Add the entity_test matcher to the profile.
-    /** @var \Drupal\linkit\MatcherInterface $plugin */
+    /** @var MatcherInterface $plugin */
     $plugin = $matcherManager->createInstance('entity:entity_test');
     $this->linkitProfile->addMatcher($plugin->getConfiguration());
     $this->linkitProfile->save();
@@ -91,7 +97,7 @@ class LinkitEditorLinkDialogTest extends LinkitKernelTestBase {
    */
   public function testAdd() {
     $entity_label = $this->randomString();
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = EntityTest::create(['name' => $entity_label]);
     $entity->save();
 
@@ -116,7 +122,7 @@ class LinkitEditorLinkDialogTest extends LinkitKernelTestBase {
       ->setUserInput($input)
       ->addBuildInfo('args', [$this->editor]);
 
-    /** @var \Drupal\Core\Form\FormBuilderInterface $form_builder */
+    /** @var FormBuilderInterface $form_builder */
     $form_builder = $this->container->get('form_builder');
     $form_id = $form_builder->getFormId($form_object, $form_state);
     $form = $form_builder->retrieveForm($form_id, $form_state);
@@ -154,7 +160,7 @@ class LinkitEditorLinkDialogTest extends LinkitKernelTestBase {
    */
   public function testEditWithDataAttributes() {
     $entity_label = $this->randomString();
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = EntityTest::create(['name' => $entity_label]);
     $entity->save();
     $entity_url = $entity->toUrl('canonical', ['path_processing' => FALSE])->toString();
@@ -185,7 +191,7 @@ class LinkitEditorLinkDialogTest extends LinkitKernelTestBase {
       ->setUserInput($input)
       ->addBuildInfo('args', [$this->editor]);
 
-    /** @var \Drupal\Core\Form\FormBuilderInterface $form_builder */
+    /** @var FormBuilderInterface $form_builder */
     $form_builder = $this->container->get('form_builder');
     $form_id = $form_builder->getFormId($form_object, $form_state);
     $form = $form_builder->retrieveForm($form_id, $form_state);
@@ -226,7 +232,7 @@ class LinkitEditorLinkDialogTest extends LinkitKernelTestBase {
       ->setUserInput($input)
       ->addBuildInfo('args', [$this->editor]);
 
-    /** @var \Drupal\Core\Form\FormBuilderInterface $form_builder */
+    /** @var FormBuilderInterface $form_builder */
     $form_builder = $this->container->get('form_builder');
     $form_id = $form_builder->getFormId($form_object, $form_state);
     $form = $form_builder->retrieveForm($form_id, $form_state);
diff --git a/tests/src/Kernel/LinkitFilterEntityTest.php b/tests/src/Kernel/LinkitFilterEntityTest.php
index 945b747..08b0686 100644
--- a/tests/src/Kernel/LinkitFilterEntityTest.php
+++ b/tests/src/Kernel/LinkitFilterEntityTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\linkit\Kernel;
 
+use Drupal\Component\Plugin\PluginManagerInterface;
+use Drupal\Core\Language\Language;
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\entity_test\Entity\EntityTestMul;
 use Drupal\file\Entity\File;
@@ -38,7 +40,7 @@ class LinkitFilterEntityTest extends LinkitKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installEntitySchema('entity_test');
@@ -50,7 +52,7 @@ class LinkitFilterEntityTest extends LinkitKernelTestBase {
     ConfigurableLanguage::createFromLangcode('da')->save();
     ConfigurableLanguage::createFromLangcode('fi')->save();
 
-    /** @var \Drupal\Component\Plugin\PluginManagerInterface $manager */
+    /** @var PluginManagerInterface $manager */
     $manager = $this->container->get('plugin.manager.filter');
     $bag = new FilterPluginCollection($manager, []);
     $this->filter = $bag->get('linkit');
@@ -83,7 +85,7 @@ class LinkitFilterEntityTest extends LinkitKernelTestBase {
    */
   public function testFilterEntityTranslations() {
     // Create an entity and add translations to that.
-    /** @var \Drupal\entity_test\Entity\EntityTestMul $entity */
+    /** @var EntityTestMul $entity */
     $entity = EntityTestMul::create(['name' => $this->randomMachineName()]);
     $entity->addTranslation('sv', ['name' => $this->randomMachineName(), 'langcode' => 'sv']);
     $entity->addTranslation('da', ['name' => $this->randomMachineName(), 'langcode' => 'da']);
@@ -100,14 +102,14 @@ class LinkitFilterEntityTest extends LinkitKernelTestBase {
 
     // Disable the automatic title attribute.
     $this->filter->setConfiguration(['settings' => ['title' => 0]]);
-    /** @var \Drupal\Core\Language\Language $language */
+    /** @var Language $language */
     foreach ($entity->getTranslationLanguages() as $language) {
       $this->assertLinkitFilter($entity->getTranslation($language->getId()), $language->getId());
     }
 
     // Enable the automatic title attribute.
     $this->filter->setConfiguration(['settings' => ['title' => 1]]);
-    /** @var \Drupal\Core\Language\Language $language */
+    /** @var Language $language */
     foreach ($entity->getTranslationLanguages() as $language) {
       $this->assertLinkitFilterWithTitle($entity->getTranslation($language->getId()), $language->getId());
     }
diff --git a/tests/src/Kernel/LinkitKernelTestBase.php b/tests/src/Kernel/LinkitKernelTestBase.php
index d04a2bc..fd691a0 100644
--- a/tests/src/Kernel/LinkitKernelTestBase.php
+++ b/tests/src/Kernel/LinkitKernelTestBase.php
@@ -28,7 +28,7 @@ abstract class LinkitKernelTestBase extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installSchema('system', 'sequences');
     $this->installEntitySchema('user');
@@ -46,7 +46,7 @@ abstract class LinkitKernelTestBase extends KernelTestBase {
    * @param array $permissions
    *   (optional) Array of permission names to assign to user.
    *
-   * @return \Drupal\user\Entity\User
+   * @return User
    *   The created user entity.
    */
   protected function createUser(array $values = [], array $permissions = []) {
diff --git a/tests/src/Kernel/Matchers/ContactFormMatcherTest.php b/tests/src/Kernel/Matchers/ContactFormMatcherTest.php
index 7d80503..ca8f3e2 100644
--- a/tests/src/Kernel/Matchers/ContactFormMatcherTest.php
+++ b/tests/src/Kernel/Matchers/ContactFormMatcherTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\linkit\Kernel\Matchers;
 
+use Drupal\linkit\MatcherManager;
+use Drupal\linkit\MatcherInterface;
 use Drupal\contact\Entity\ContactForm;
 use Drupal\Tests\linkit\Kernel\LinkitKernelTestBase;
 
@@ -22,14 +24,14 @@ class ContactFormMatcherTest extends LinkitKernelTestBase {
   /**
    * The matcher manager.
    *
-   * @var \Drupal\linkit\MatcherManager
+   * @var MatcherManager
    */
   protected $manager;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create user 1 who has special permissions.
@@ -49,7 +51,7 @@ class ContactFormMatcherTest extends LinkitKernelTestBase {
    * Tests contact form matcher.
    */
   public function testMatcherWidthDefaultConfiguration() {
-    /** @var \Drupal\linkit\MatcherInterface $plugin */
+    /** @var MatcherInterface $plugin */
     $plugin = $this->manager->createInstance('entity:contact_form', []);
     $suggestions = $plugin->execute('Lorem');
     $this->assertEquals(1, count($suggestions->getSuggestions()), 'Correct number of suggestions');
diff --git a/tests/src/Kernel/Matchers/FileMatcherTest.php b/tests/src/Kernel/Matchers/FileMatcherTest.php
index d5829d1..95b14e8 100644
--- a/tests/src/Kernel/Matchers/FileMatcherTest.php
+++ b/tests/src/Kernel/Matchers/FileMatcherTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\linkit\Kernel\Matchers;
 
+use Drupal\linkit\MatcherManager;
+use Drupal\linkit\MatcherInterface;
+use Drupal\linkit\Suggestion\EntitySuggestion;
 use Drupal\file\Entity\File;
 use Drupal\Tests\linkit\Kernel\LinkitKernelTestBase;
 
@@ -22,14 +25,14 @@ class FileMatcherTest extends LinkitKernelTestBase {
   /**
    * The matcher manager.
    *
-   * @var \Drupal\linkit\MatcherManager
+   * @var MatcherManager
    */
   protected $manager;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installEntitySchema('file');
@@ -58,7 +61,7 @@ class FileMatcherTest extends LinkitKernelTestBase {
    * Tests file matcher.
    */
   public function testFileMatcherWithDefaultConfiguration() {
-    /** @var \Drupal\linkit\MatcherInterface $plugin */
+    /** @var MatcherInterface $plugin */
     $plugin = $this->manager->createInstance('entity:file', []);
     $suggestions = $plugin->execute('image-test');
     $this->assertEquals(3, count($suggestions->getSuggestions()), 'Correct number of suggestions.');
@@ -68,7 +71,7 @@ class FileMatcherTest extends LinkitKernelTestBase {
    * Tests file matcher with extension filer.
    */
   public function testFileMatcherWithExtensionFiler() {
-    /** @var \Drupal\linkit\MatcherInterface $plugin */
+    /** @var MatcherInterface $plugin */
     $plugin = $this->manager->createInstance('entity:file', [
       'settings' => [
         'file_extensions' => 'png',
@@ -78,7 +81,7 @@ class FileMatcherTest extends LinkitKernelTestBase {
     $suggestions = $plugin->execute('image-test');
     $this->assertEquals(1, count($suggestions->getSuggestions()), 'Correct number of suggestions with single file extension filter.');
 
-    /** @var \Drupal\linkit\MatcherInterface $plugin */
+    /** @var MatcherInterface $plugin */
     $plugin = $this->manager->createInstance('entity:file', [
       'settings' => [
         'file_extensions' => 'png jpg',
@@ -93,7 +96,7 @@ class FileMatcherTest extends LinkitKernelTestBase {
    * Tests file matcher with tokens in the matcher metadata.
    */
   public function testTermMatcherWidthMetadataTokens() {
-    /** @var \Drupal\linkit\MatcherInterface $plugin */
+    /** @var MatcherInterface $plugin */
     $plugin = $this->manager->createInstance('entity:file', [
       'settings' => [
         'metadata' => '[file:fid] [file:field_with_no_value]',
@@ -101,7 +104,7 @@ class FileMatcherTest extends LinkitKernelTestBase {
     ]);
 
     $suggestionCollection = $plugin->execute('Lorem');
-    /** @var \Drupal\linkit\Suggestion\EntitySuggestion[] $suggestions */
+    /** @var EntitySuggestion[] $suggestions */
     $suggestions = $suggestionCollection->getSuggestions();
 
     foreach ($suggestions as $suggestion) {
diff --git a/tests/src/Kernel/Matchers/MediaMatcherTest.php b/tests/src/Kernel/Matchers/MediaMatcherTest.php
index 1302bdf..b7a3466 100644
--- a/tests/src/Kernel/Matchers/MediaMatcherTest.php
+++ b/tests/src/Kernel/Matchers/MediaMatcherTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\linkit\Kernel\Matchers;
 
+use Drupal\linkit\MatcherManager;
+use Drupal\linkit\MatcherInterface;
 use Drupal\file\Entity\File;
 use Drupal\media\Entity\Media;
 use Drupal\media\Entity\MediaType;
@@ -24,14 +26,14 @@ class MediaMatcherTest extends LinkitKernelTestBase {
   /**
    * The matcher manager.
    *
-   * @var \Drupal\linkit\MatcherManager
+   * @var MatcherManager
    */
   protected $manager;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installEntitySchema('file');
@@ -83,7 +85,7 @@ class MediaMatcherTest extends LinkitKernelTestBase {
    * Tests media matcher.
    */
   public function testMediaMatcherWithDefaultConfiguration() {
-    /** @var \Drupal\linkit\MatcherInterface $plugin */
+    /** @var MatcherInterface $plugin */
     $plugin = $this->manager->createInstance('entity:media', []);
     $suggestions = $plugin->execute('image-test');
     $this->assertEquals(3, count($suggestions->getSuggestions()), 'Correct number of suggestions.');
diff --git a/tests/src/Kernel/Matchers/NodeMatcherTest.php b/tests/src/Kernel/Matchers/NodeMatcherTest.php
index f225eaf..b9418d0 100644
--- a/tests/src/Kernel/Matchers/NodeMatcherTest.php
+++ b/tests/src/Kernel/Matchers/NodeMatcherTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\linkit\Kernel\Matchers;
 
+use Drupal\linkit\MatcherManager;
+use Drupal\linkit\MatcherInterface;
+use Drupal\node\NodeInterface;
+use Drupal\linkit\Suggestion\EntitySuggestion;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;
 use Drupal\Tests\linkit\Kernel\LinkitKernelTestBase;
@@ -23,14 +27,14 @@ class NodeMatcherTest extends LinkitKernelTestBase {
   /**
    * The matcher manager.
    *
-   * @var \Drupal\linkit\MatcherManager
+   * @var MatcherManager
    */
   protected $manager;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installEntitySchema('node');
@@ -98,7 +102,7 @@ class NodeMatcherTest extends LinkitKernelTestBase {
    * Tests node matcher.
    */
   public function testNodeMatcherWidthDefaultConfiguration() {
-    /** @var \Drupal\linkit\MatcherInterface $plugin */
+    /** @var MatcherInterface $plugin */
     $plugin = $this->manager->createInstance('entity:node', []);
     $suggestions = $plugin->execute('Lorem');
     $this->assertEquals(3, count($suggestions->getSuggestions()), 'Correct number of suggestions');
@@ -108,7 +112,7 @@ class NodeMatcherTest extends LinkitKernelTestBase {
    * Tests node matcher with bundle filer.
    */
   public function testNodeMatcherWidthBundleFiler() {
-    /** @var \Drupal\linkit\MatcherInterface $plugin */
+    /** @var MatcherInterface $plugin */
     $plugin = $this->manager->createInstance('entity:node', [
       'settings' => [
         'bundles' => [
@@ -125,7 +129,7 @@ class NodeMatcherTest extends LinkitKernelTestBase {
    * Tests node matcher with include unpublished setting activated.
    */
   public function testNodeMatcherWidthIncludeUnpublished() {
-    /** @var \Drupal\linkit\MatcherInterface $plugin */
+    /** @var MatcherInterface $plugin */
     $plugin = $this->manager->createInstance('entity:node', [
       'settings' => [
         'include_unpublished' => TRUE,
@@ -147,7 +151,7 @@ class NodeMatcherTest extends LinkitKernelTestBase {
     \Drupal::currentUser()->setAccount($this->createUser([], ['access content', 'view own unpublished content']));
     $nodes = $this->container->get('entity_type.manager')->getStorage('node')->loadByProperties(['title' => 'Lorem unpublishd']);
     $node4 = reset($nodes);
-    /** @var \Drupal\node\NodeInterface $node4 */
+    /** @var NodeInterface $node4 */
     $node4->setOwnerId(\Drupal::currentUser()->id());
     $node4->save();
     $suggestions = $plugin->execute('Lorem');
@@ -163,7 +167,7 @@ class NodeMatcherTest extends LinkitKernelTestBase {
    * Tests node matcher with tokens in the matcher metadata.
    */
   public function testNodeMatcherWidthMetadataTokens() {
-    /** @var \Drupal\linkit\MatcherInterface $plugin */
+    /** @var MatcherInterface $plugin */
     $plugin = $this->manager->createInstance('entity:node', [
       'settings' => [
         'metadata' => '[node:nid] [node:field_with_no_value]',
@@ -171,7 +175,7 @@ class NodeMatcherTest extends LinkitKernelTestBase {
     ]);
 
     $suggestionCollection = $plugin->execute('Lorem');
-    /** @var \Drupal\linkit\Suggestion\EntitySuggestion[] $suggestions */
+    /** @var EntitySuggestion[] $suggestions */
     $suggestions = $suggestionCollection->getSuggestions();
 
     foreach ($suggestions as $suggestion) {
diff --git a/tests/src/Kernel/Matchers/TermMatcherTest.php b/tests/src/Kernel/Matchers/TermMatcherTest.php
index c3a3a68..448db0a 100644
--- a/tests/src/Kernel/Matchers/TermMatcherTest.php
+++ b/tests/src/Kernel/Matchers/TermMatcherTest.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\Tests\linkit\Kernel\Matchers;
 
+use Drupal\linkit\MatcherManager;
+use Drupal\linkit\MatcherInterface;
+use Drupal\linkit\Suggestion\EntitySuggestion;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\taxonomy\Entity\Term;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\taxonomy\VocabularyInterface;
 use Drupal\Tests\linkit\Kernel\LinkitKernelTestBase;
@@ -25,14 +30,14 @@ class TermMatcherTest extends LinkitKernelTestBase {
   /**
    * The matcher manager.
    *
-   * @var \Drupal\linkit\MatcherManager
+   * @var MatcherManager
    */
   protected $manager;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create user 1 who has special permissions.
@@ -59,7 +64,7 @@ class TermMatcherTest extends LinkitKernelTestBase {
    * Tests term matcher with default configuration.
    */
   public function testTermMatcherWidthDefaultConfiguration() {
-    /** @var \Drupal\linkit\MatcherInterface $plugin */
+    /** @var MatcherInterface $plugin */
     $plugin = $this->manager->createInstance('entity:taxonomy_term', []);
     $suggestions = $plugin->execute('foo');
     $this->assertEquals(5, count($suggestions->getSuggestions()), 'Correct number of suggestions');
@@ -69,7 +74,7 @@ class TermMatcherTest extends LinkitKernelTestBase {
    * Tests term matcher with bundle filer.
    */
   public function testTermMatcherWidthBundleFiler() {
-    /** @var \Drupal\linkit\MatcherInterface $plugin */
+    /** @var MatcherInterface $plugin */
     $plugin = $this->manager->createInstance('entity:taxonomy_term', [
       'settings' => [
         'bundles' => [
@@ -86,7 +91,7 @@ class TermMatcherTest extends LinkitKernelTestBase {
    * Tests term matcher with tokens in the matcher metadata.
    */
   public function testTermMatcherWidthMetadataTokens() {
-    /** @var \Drupal\linkit\MatcherInterface $plugin */
+    /** @var MatcherInterface $plugin */
     $plugin = $this->manager->createInstance('entity:taxonomy_term', [
       'settings' => [
         'metadata' => '[term:tid] [term:field_with_no_value]',
@@ -94,7 +99,7 @@ class TermMatcherTest extends LinkitKernelTestBase {
     ]);
 
     $suggestionCollection = $plugin->execute('Lorem');
-    /** @var \Drupal\linkit\Suggestion\EntitySuggestion[] $suggestions */
+    /** @var EntitySuggestion[] $suggestions */
     $suggestions = $suggestionCollection->getSuggestions();
 
     foreach ($suggestions as $suggestion) {
@@ -109,7 +114,7 @@ class TermMatcherTest extends LinkitKernelTestBase {
    * @param string $name
    *   The vocabulary name.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|\Drupal\taxonomy\VocabularyInterface
+   * @return EntityInterface|VocabularyInterface
    *   The new vocabulary object.
    */
   private function createVocabulary($name) {
@@ -127,13 +132,13 @@ class TermMatcherTest extends LinkitKernelTestBase {
   /**
    * Creates and saves a new term with in vocabulary $vid.
    *
-   * @param \Drupal\taxonomy\VocabularyInterface $vocabulary
+   * @param VocabularyInterface $vocabulary
    *   The vocabulary object.
    * @param array $values
    *   (optional) An array of values to set, keyed by property name. If the
    *   entity type has bundles, the bundle key has to be specified.
    *
-   * @return \Drupal\taxonomy\Entity\Term
+   * @return Term
    *   The new taxonomy term object.
    */
   private function createTerm(VocabularyInterface $vocabulary, array $values = []) {
diff --git a/tests/src/Kernel/Matchers/UserMatcherTest.php b/tests/src/Kernel/Matchers/UserMatcherTest.php
index fbe7060..b09af7b 100644
--- a/tests/src/Kernel/Matchers/UserMatcherTest.php
+++ b/tests/src/Kernel/Matchers/UserMatcherTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\linkit\Kernel\Matchers;
 
+use Drupal\linkit\MatcherManager;
+use Drupal\linkit\MatcherInterface;
+use Drupal\linkit\Suggestion\EntitySuggestion;
 use Drupal\Tests\linkit\Kernel\LinkitKernelTestBase;
 use Drupal\user\Entity\Role;
 
@@ -15,14 +18,14 @@ class UserMatcherTest extends LinkitKernelTestBase {
   /**
    * The matcher manager.
    *
-   * @var \Drupal\linkit\MatcherManager
+   * @var MatcherManager
    */
   protected $manager;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create user 1 who has special permissions.
@@ -68,7 +71,7 @@ class UserMatcherTest extends LinkitKernelTestBase {
    * Tests user matcher.
    */
   public function testUserMatcherWidthDefaultConfiguration() {
-    /** @var \Drupal\linkit\MatcherInterface $plugin */
+    /** @var MatcherInterface $plugin */
     $plugin = $this->manager->createInstance('entity:user', []);
     $suggestions = $plugin->execute('Lorem');
     $this->assertEquals(4, count($suggestions->getSuggestions()), 'Correct number of suggestions');
@@ -78,7 +81,7 @@ class UserMatcherTest extends LinkitKernelTestBase {
    * Tests user matcher with role filer.
    */
   public function testUserMatcherWidthRoleFiler() {
-    /** @var \Drupal\linkit\MatcherInterface $plugin */
+    /** @var MatcherInterface $plugin */
     $plugin = $this->manager->createInstance('entity:user', [
       'settings' => [
         'roles' => [
@@ -95,7 +98,7 @@ class UserMatcherTest extends LinkitKernelTestBase {
    * Tests user matcher with include blocked setting activated.
    */
   public function testUserMatcherWidthIncludeBlocked() {
-    /** @var \Drupal\linkit\MatcherInterface $plugin */
+    /** @var MatcherInterface $plugin */
     $plugin = $this->manager->createInstance('entity:user', [
       'settings' => [
         'include_blocked' => TRUE,
@@ -118,7 +121,7 @@ class UserMatcherTest extends LinkitKernelTestBase {
    * Tests user matcher with tokens in the matcher metadata.
    */
   public function testTermMatcherWidthMetadataTokens() {
-    /** @var \Drupal\linkit\MatcherInterface $plugin */
+    /** @var MatcherInterface $plugin */
     $plugin = $this->manager->createInstance('entity:user', [
       'settings' => [
         'metadata' => '[user:uid] [term:field_with_no_value]',
@@ -126,7 +129,7 @@ class UserMatcherTest extends LinkitKernelTestBase {
     ]);
 
     $suggestionCollection = $plugin->execute('Lorem');
-    /** @var \Drupal\linkit\Suggestion\EntitySuggestion[] $suggestions */
+    /** @var EntitySuggestion[] $suggestions */
     $suggestions = $suggestionCollection->getSuggestions();
 
     foreach ($suggestions as $suggestion) {
diff --git a/tests/src/Kernel/SubstitutionPluginTest.php b/tests/src/Kernel/SubstitutionPluginTest.php
index 0bc6202..ea8c69d 100644
--- a/tests/src/Kernel/SubstitutionPluginTest.php
+++ b/tests/src/Kernel/SubstitutionPluginTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\linkit\Kernel;
 
+use Drupal\linkit\SubstitutionManagerInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Site\Settings;
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\file\Entity\File;
@@ -22,14 +24,14 @@ class SubstitutionPluginTest extends LinkitKernelTestBase {
   /**
    * The substitution manager.
    *
-   * @var \Drupal\linkit\SubstitutionManagerInterface
+   * @var SubstitutionManagerInterface
    */
   protected $substitutionManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -50,7 +52,7 @@ class SubstitutionPluginTest extends LinkitKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->substitutionManager = $this->container->get('plugin.manager.linkit.substitution');
     $this->entityTypeManager = $this->container->get('entity_type.manager');
