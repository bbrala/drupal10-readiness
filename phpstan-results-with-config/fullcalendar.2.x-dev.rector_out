modules/contrib/fullcalendar/fullcalendar.api.php
modules/contrib/fullcalendar/fullcalendar.install
modules/contrib/fullcalendar/fullcalendar.module
modules/contrib/fullcalendar/fullcalendar.views_execution.inc
modules/contrib/fullcalendar/modules/fullcalendar_legend/fullcalendar_legend.module
modules/contrib/fullcalendar/modules/fullcalendar_legend/fullcalendar_legend.theme.inc
modules/contrib/fullcalendar/modules/fullcalendar_legend/src/Plugin/block/Bundle.php
modules/contrib/fullcalendar/modules/fullcalendar_legend/src/Plugin/block/FullcalendarLegendBase.php
modules/contrib/fullcalendar/modules/fullcalendar_legend/src/Plugin/block/Term.php
modules/contrib/fullcalendar/src/Access/UpdateAccessCheck.php
modules/contrib/fullcalendar/src/Ajax/ResultsCommand.php
modules/contrib/fullcalendar/src/Annotation/FullcalendarOption.php
modules/contrib/fullcalendar/src/Controller/ResultsController.php
modules/contrib/fullcalendar/src/Controller/UpdateController.php
modules/contrib/fullcalendar/src/Form/SettingsForm.php
modules/contrib/fullcalendar/src/Plugin/FullcalendarBase.php
modules/contrib/fullcalendar/src/Plugin/FullcalendarInterface.php
modules/contrib/fullcalendar/src/Plugin/FullcalendarManager.php
modules/contrib/fullcalendar/src/Plugin/FullcalendarPluginCollection.php
modules/contrib/fullcalendar/src/Plugin/fullcalendar/type/FullCalendar.php
modules/contrib/fullcalendar/src/Plugin/fullcalendar/type/OptionsFormHelperTrait.php
modules/contrib/fullcalendar/src/Plugin/views/style/FullCalendar.php

12 files with changes
=====================

1) modules/contrib/fullcalendar/src/Plugin/views/style/FullCalendar.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\fullcalendar\Plugin\views\style;

+use Drupal\Core\Entity\EntityFieldManagerInterface;
+use Drupal\fullcalendar\Plugin\FullcalendarInterface;
+use Drupal\views\Plugin\views\field\EntityField;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use DateTime;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Datetime\DateFormatter;
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Entity Field Manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $fieldManager;

@@ @@
   /**
    * Stores the FullCalendar plugins used by this style plugin.
    *
-   * @var \Drupal\fullcalendar\Plugin\FullcalendarPluginCollection
+   * @var FullcalendarPluginCollection
    */
   protected $pluginBag;

   /**
-   * @var \Drupal\Core\Datetime\DateFormatter $dateFormatter
+   * @var DateFormatter $dateFormatter
    *   The date formatter service.
    */
   protected $dateFormatter;
@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Get all available FullCalendar plugins.
    *
-   * @return \Drupal\fullcalendar\Plugin\FullcalendarPluginCollection|\Drupal\fullcalendar\Plugin\FullcalendarInterface[]
+   * @return FullcalendarPluginCollection|FullcalendarInterface[]
    */
   public function getPlugins() {
     return $this->pluginBag;
@@ @@
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $fullcalendar_manager
+   * @param PluginManagerInterface $fullcalendar_manager
    *   FullCalendar Manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager
+   * @param EntityFieldManagerInterface $field_manager
    *   Entity Field Manager.
-   * @param \Drupal\Core\Datetime\DateFormatter $date_formatter
+   * @param DateFormatter $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, PluginManagerInterface $fullcalendar_manager, ModuleHandlerInterface $module_handler, $field_manager, DateFormatter $date_formatter, MessengerInterface $messenger) {
@@ @@

     $date_fields = [];

-    /** @var \Drupal\views\Plugin\views\field\EntityField $field */
+    /** @var EntityField $field */
     foreach ($this->view->field as $id => $field) {
       if (fullcalendar_field_is_date($field)) {
         $date_fields[$id] = $labels[$id];
@@ @@
     $events = [];

     foreach ($this->view->result as $delta => $row) {
-      /** @var \Drupal\Core\Entity\EntityInterface $entity */
+      /** @var EntityInterface $entity */
       $entity = $row->_entity;

       // Collect all fields for the customize options.
@@ @@
           continue;
         }

-        /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface $field_definition */
+        /** @var FieldStorageDefinitionInterface $field_definition */
         $field_definition = $field['field_info'];
         // Get 'min' and 'max' dates appear in the Calendar.
         $date_range = $this->getExposedDates($field['field_name']);
@@ @@
   /**
    * Helper method to prepare an event.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Event entity.
    * @param $fields
    *
@@ @@

       $settings = $this->view->style_plugin->options;

-      /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager */
+      /** @var EntityFieldManagerInterface $field_manager */
       $field_manager = \Drupal::getContainer()->get('entity_field.manager');
-      /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface[] $field_storages */
+      /** @var FieldStorageDefinitionInterface[] $field_storages */
       $field_storages = $field_manager->getFieldStorageDefinitions($entity_type_id);
-      /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface $field_storage */
+      /** @var FieldStorageDefinitionInterface $field_storage */
       $field_storage = $field_storages[$field_name];
       $field_value = $field_storage->getName() . '_value';

@@ @@
   public function getEventStartEndDates(array $fields) {
     $event_start_end_date = [];
     $field = current($fields);
-    /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface $field_info */
+    /** @var FieldStorageDefinitionInterface $field_info */
     $field_info = $field['field_info'];

     switch ($field_info->getType()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/fullcalendar/src/Plugin/fullcalendar/type/FullCalendar.php:28

    ---------- begin diff ----------
@@ @@
   const COMMA_REPLACEMENT = '_COMMA_';

   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

   /**
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param ModuleHandlerInterface $module_handler
+   * @param LanguageManagerInterface $language_manager
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ModuleHandlerInterface $module_handler, LanguageManagerInterface $language_manager) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/fullcalendar/src/Plugin/FullcalendarPluginCollection.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The manager used to instantiate the plugins.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $manager;

@@ @@
   /**
    * @todo.
    *
-   * @var \Drupal\views\Plugin\views\style\StylePluginBase
+   * @var StylePluginBase
    */
   protected $style;

@@ @@
   /**
    * Constructs a FullcalendarPluginCollection object.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $manager
+   * @param PluginManagerInterface $manager
    *   The manager to be used for instantiating plugins.
-   * @param \Drupal\views\Plugin\views\style\StylePluginBase $style
+   * @param StylePluginBase $style
    *   The style plugin that contains these plugins.
    */
   public function __construct(PluginManagerInterface $manager, StylePluginBase $style) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/fullcalendar/src/Plugin/FullcalendarManager.php:24

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\fullcalendar\Plugin\FullcalendarInterface
+   * @return FullcalendarInterface
    */
   public function createInstance($plugin_id, array $configuration = [], $style = NULL) {
     $plugin = parent::createInstance($plugin_id, $configuration);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/fullcalendar/src/Plugin/FullcalendarBase.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * @todo.
    *
-   * @var \Drupal\views\Plugin\views\style\StylePluginBase
+   * @var StylePluginBase
    */
   protected $style;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/fullcalendar/src/Controller/UpdateController.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * @todo.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param string $field
    * @param int $index
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    */
   public function drop(EntityInterface $entity, $field, $index, Request $request) {
     if ($request->request->has('day_delta') && $request->request->has('minute_delta')) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/fullcalendar/src/Controller/ResultsController.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Ajax callback to refresh calendar view.
    *
-   * @param \Drupal\views\Entity\View $view
+   * @param View $view
    *   Fully-loaded view entity.
    * @param string $display_id
    *   Display ID.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|void
+   * @return AjaxResponse|void
    */
   public function getResults(View $view, $display_id) {
     $response = new AjaxResponse();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/fullcalendar/modules/fullcalendar_legend/src/Plugin/block/Term.php:6

    ---------- begin diff ----------
@@ @@

 namespace Drupal\fullcalendar_legend\Plugin\Block;

+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityManagerInterface;
 use Drupal\Core\Entity\Query\QueryFactory;
@@ @@
 class Term extends FullcalendarLegendBase implements ContainerFactoryPluginInterface {

   /**
-   * @var \Drupal\taxonomy\TermStorageInterface
+   * @var TermStorageInterface
    */
   protected $termStorage;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   protected function buildLegend(array $fields) {
     $types = [];

-    /** @var \Drupal\Core\Field\FieldDefinitionInterface[] $fields */
+    /** @var FieldDefinitionInterface[] $fields */
     foreach ($fields as $field_name => $field) {
       // Then by entity type.
       foreach ($field->getBundles() as $entity_type => $bundles) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/fullcalendar/modules/fullcalendar_legend/src/Plugin/block/FullcalendarLegendBase.php:6

    ---------- begin diff ----------
@@ @@

 namespace Drupal\fullcalendar_legend\Plugin\Block;

+use Drupal\views\Plugin\views\field\EntityField;
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Block\BlockBase;
 use Drupal\views\ViewExecutable;
 use Drupal\views\Views;
@@ @@

     $fieldManager = \Drupal::getContainer()->get('entity_field.manager');

-    /** @var \Drupal\views\Plugin\views\field\EntityField $field */
+    /** @var EntityField $field */
     foreach ($view->field as $field_name => $field) {
       if (fullcalendar_field_is_date($field)) {
         $field_storage_definitions = $fieldManager->getFieldStorageDefinitions($field->definition['entity_type']);
@@ @@
   }

   /**
-   * @param \Drupal\Core\Field\FieldDefinitionInterface[] $fields
+   * @param FieldDefinitionInterface[] $fields
    *
    * @return array
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/fullcalendar/fullcalendar.views_execution.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\fullcalendar\Plugin\views\style\FullCalendar;
+use Drupal\Core\Entity\EntityFieldManagerInterface;
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
+use Drupal\views\Plugin\views\field\EntityField;
 /**
  * @file
  * Contains Views module runtime hooks.
@@ @@

   // Get the current view settings.
   $view->initStyle();
-  /** @var \Drupal\fullcalendar\Plugin\views\style\FullCalendar $view_style */
+  /** @var FullCalendar $view_style */
   $view_style = $view->style_plugin;

   $settings = $view->style_plugin->options;
@@ @@
   $settings['fullcalendar_fields_count'] = 0;
   $exposed_input = $view->getExposedInput();

-  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager */
+  /** @var EntityFieldManagerInterface $field_manager */
   $field_manager = \Drupal::getContainer()->get('entity_field.manager');

   $entity_type = $view->getBaseEntityType();
   $entity_type_id = $entity_type->id();

-  /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface[] $field_storages */
+  /** @var FieldStorageDefinitionInterface[] $field_storages */
   $field_storages = $field_manager->getFieldStorageDefinitions($entity_type_id);

   // Loop through each date field and provide an argument for it.
   foreach ($view->display_handler->getHandlers('field') as $field_id => $field) {
-    /** @var \Drupal\views\Plugin\views\field\EntityField $field */
+    /** @var EntityField $field */
     if (!fullcalendar_field_is_date($field)) {
       continue;
     }

-    /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface $field_storage */
+    /** @var FieldStorageDefinitionInterface $field_storage */
     $field_storage = $field_storages[$field->definition['field_name']];

     // Default table name for the field.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


11) modules/contrib/fullcalendar/fullcalendar.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityFieldManagerInterface;
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
 /**
  * @file
  * Provides a views style plugin for FullCalendar
@@ @@
 /**
  * Determines if a given field is a date field.
  *
- * @param \Drupal\views\Plugin\views\field\EntityField $field
+ * @param EntityField $field
  *   A Views field handler object.
  *
  * @return bool
@@ @@
     return FALSE;
   }

-  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager */
+  /** @var EntityFieldManagerInterface $field_manager */
   $field_manager = \Drupal::getContainer()->get('entity_field.manager');

-  /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface[] $field_storages */
+  /** @var FieldStorageDefinitionInterface[] $field_storages */
   $field_storages = $field_manager->getFieldStorageDefinitions($entity_type);

   if (isset($field_storages[$field->definition['field_name']])) {
-    /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface $field_storage */
+    /** @var FieldStorageDefinitionInterface $field_storage */
     $field_storage = $field_storages[$field->definition['field_name']];

     return in_array($field_storage->getType(), [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


12) modules/contrib/fullcalendar/fullcalendar.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;
 /**
  * @file
  * Hooks provided by the FullCalendar module.
@@ @@
  */
 function hook_fullcalendar_process_dates_alter(&$date1, &$date2, $context) {
   // Always display dates only on one day.
-  if ($date1->format(DATETIME_DATE_STORAGE_FORMAT) != $date2->format(DATETIME_DATE_STORAGE_FORMAT)) {
+  if ($date1->format(DateTimeItemInterface::DATE_STORAGE_FORMAT) != $date2->format(DateTimeItemInterface::DATE_STORAGE_FORMAT)) {
     $date2 = $date1;
   }
 }
    ----------- end diff -----------

Applied rules:
 * DatetimeDateStorageFormatRector
 * ArgumentRemoverRector


 [OK] 12 files have been changed by Rector                                      

