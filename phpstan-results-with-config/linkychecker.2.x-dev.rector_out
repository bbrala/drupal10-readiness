modules/contrib/linkychecker/linkychecker.module
modules/contrib/linkychecker/src/Commands/LinkyCheckerCommands.php
modules/contrib/linkychecker/src/Form/LinkyCheckerLinkyCheckForm.php
modules/contrib/linkychecker/src/Form/LinkyCheckerLinkyExcludeForm.php
modules/contrib/linkychecker/src/Form/LinkyCheckerLinkyIncludeForm.php
modules/contrib/linkychecker/src/Form/LinkyCheckerSettingsForm.php
modules/contrib/linkychecker/src/LinkyCheckerCrawlQueue.php
modules/contrib/linkychecker/src/LinkyCheckerCrawlQueueInterface.php
modules/contrib/linkychecker/src/LinkyCheckerCrawler.php
modules/contrib/linkychecker/src/LinkyCheckerCrawlerInterface.php
modules/contrib/linkychecker/src/LinkyCheckerCronHook.php
modules/contrib/linkychecker/src/LinkyCheckerMemoryLogger.php
modules/contrib/linkychecker/src/Plugin/QueueWorker/CrawlJob.php
modules/contrib/linkychecker/src/Plugin/views/filter/InternalFilter.php
modules/contrib/linkychecker/src/Routing/LinkyCheckerRouteProvider.php
modules/contrib/linkychecker/tests/src/Functional/LinkyCheckerIncludeExcludeTest.php
modules/contrib/linkychecker/tests/src/Kernel/LinkyCheckerCrawlQueueTest.php
modules/contrib/linkychecker/tests/src/Kernel/LinkyFieldTest.php

14 files with changes
=====================

1) modules/contrib/linkychecker/tests/src/Kernel/LinkyFieldTest.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installSchema('user', 'users_data');
     $this->installEntitySchema('linky');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/linkychecker/tests/src/Kernel/LinkyCheckerCrawlQueueTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setup() {
+  public function setup(): void {
     parent::setUp();
     $this->installSchema('user', 'users_data');
     $this->installEntitySchema('linky');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/linkychecker/tests/src/Functional/LinkyCheckerIncludeExcludeTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\linkychecker\Functional;

+use Drupal\user\Entity\User;
 use Drupal\linky\LinkyInterface;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * The admin user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $adminUser;

@@ @@
   /**
    * Sets the test up.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Test admin user.
     $this->adminUser = $this->drupalCreateUser($this->permissions);
@@ @@
   /**
    * Asserts number of operation links for given table row.
    *
-   * @param \Drupal\linky\LinkyInterface $linky
+   * @param LinkyInterface $linky
    *   The current linky.
    * @param int $index
    *   The row number.
@@ @@
     foreach ($operation_links as $link) {
       switch ($link->getText()) {
         case 'Edit':
-          $this->assertContains("$url/edit?destination=", $link->getAttribute('href'));
+          $this->assertStringContainsString("$url/edit?destination=", $link->getAttribute('href'));
           $number_of_links_found++;
           break;

         case 'Re-check':
-          $this->assertIdentical("$url/crawl", $link->getAttribute('href'));
+          $this->assertSame("$url/crawl", $link->getAttribute('href'));
           $number_of_links_found++;
           break;

         case 'Exclude':
-          $this->assertIdentical("$url/exclude", $link->getAttribute('href'));
+          $this->assertSame("$url/exclude", $link->getAttribute('href'));
           $number_of_links_found++;
           break;

         case 'Remove Exclusion':
-          $this->assertIdentical("$url/include", $link->getAttribute('href'));
+          $this->assertSame("$url/include", $link->getAttribute('href'));
           $number_of_links_found++;
           break;

       }
     }
-    $this->assertEqual($number_of_links, $number_of_links_found);
+    $this->assertEquals($number_of_links, $number_of_links_found);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * SpecificAssertContainsRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/linkychecker/src/Plugin/QueueWorker/CrawlJob.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\linkychecker\Plugin\QueueWorker;

+use Drupal\linky\LinkyInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Queue\QueueWorkerBase;
@@ @@
   /**
    * The linky checker crawler.
    *
-   * @var \Drupal\linkychecker\LinkyCheckerCrawlerInterface
+   * @var LinkyCheckerCrawlerInterface
    */
   protected $crawler;

@@ @@
   /**
    * Storage for linky entities.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $linkyStorage;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\linkychecker\LinkyCheckerCrawlerInterface $linkyCheckerCrawler
+   * @param LinkyCheckerCrawlerInterface $linkyCheckerCrawler
    *   The linky checker crawler.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $linkyStorage
+   * @param EntityStorageInterface $linkyStorage
    *   Storage for linky entities.
    */
   public function __construct(array $configuration, string $plugin_id, $plugin_definition, LinkyCheckerCrawlerInterface $linkyCheckerCrawler, EntityStorageInterface $linkyStorage) {
@@ @@
     /** @var int[] $ids */
     $ids = $data['linky_ids'];
     foreach ($this->linkyStorage->loadMultiple($ids) as $linky) {
-      /** @var \Drupal\linky\LinkyInterface $linky */
+      /** @var LinkyInterface $linky */
       $this->crawler->checkLinks([$linky]);
     }
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/linkychecker/src/LinkyCheckerCronHook.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The linky checker queue service.
    *
-   * @var \Drupal\linkychecker\LinkyCheckerCrawlQueueInterface
+   * @var LinkyCheckerCrawlQueueInterface
    */
   protected $checkerCrawlQueue;

@@ @@
   /**
    * Constructs a new LinkyCheckerCronHook.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \Drupal\linkychecker\LinkyCheckerCrawlQueueInterface $checkerCrawlQueue
+   * @param LinkyCheckerCrawlQueueInterface $checkerCrawlQueue
    *   The linky checker queue service.
    */
   public function __construct(ConfigFactoryInterface $configFactory, LinkyCheckerCrawlQueueInterface $checkerCrawlQueue) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/linkychecker/src/LinkyCheckerCrawlerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\linkychecker;

+use Drupal\linky\LinkyInterface;
 /**
  * Interface for the linky checker crawler.
  */
@@ @@
   /**
    * Crawls the link and stores the result.
    *
-   * @param \Drupal\linky\LinkyInterface[] $links
+   * @param LinkyInterface[] $links
    *   An array of linky entities.
    */
   public function checkLinks(array $links);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/linkychecker/src/LinkyCheckerCrawler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\linkychecker;

+use Drupal\link\Plugin\Field\FieldType\LinkItem;
+use Psr\Http\Message\ResponseInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\linky\LinkyInterface;
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The default http client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;

@@ @@
   /**
    * Service for obtaining system time.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Constructs a new LinkyCheckerCrawler.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \GuzzleHttp\Client $httpClient
+   * @param Client $httpClient
    *   The default http client.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   Service for obtaining system time.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
    */
   public function __construct(ConfigFactoryInterface $configFactory, Client $httpClient, TimeInterface $time, LoggerInterface $logger) {
@@ @@
   /**
    * Check the status of a link.
    *
-   * @param \Drupal\linky\LinkyInterface $link
+   * @param LinkyInterface $link
    *   A linky entity.
    */
   protected function checkLink(LinkyInterface $link): void {
@@ @@
     $error = FALSE;
     $message = NULL;

-    /** @var \Drupal\link\Plugin\Field\FieldType\LinkItem $item */
+    /** @var LinkItem $item */
     try {
       $item = $link->link->first();
       $url = $item->getUrl();
@@ @@
    * @param string $method
    *   The HTTP method.
    *
-   * @return \Psr\Http\Message\ResponseInterface
+   * @return ResponseInterface
    *   A response.
    *
    * @throws \Exception
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/linkychecker/src/LinkyCheckerCrawlQueueInterface.php:38

    ---------- begin diff ----------
@@ @@
    *   Set a timestamp for any links older than this will be re-added to the
    *   queue.
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface
+   * @return QueryInterface
    *   An prepared query.
    */
   public function getLinksNeedingUpdate(int $threshold): QueryInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/linkychecker/src/LinkyCheckerCrawlQueue.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\linkychecker;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Queue\QueueInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The state key value collection.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * Storage for linky entities.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $linkyStorage;

@@ @@
   /**
    * Service for obtaining system time.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * The crawl job queue.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $crawlJobQueue;

@@ @@
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Constructs a new linky checker queue service.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state key value collection.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   Service for obtaining system time.
-   * @param \Drupal\Core\Queue\QueueFactory $queueFactory
+   * @param QueueFactory $queueFactory
    *   The queue factory.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
    */
   public function __construct(ConfigFactoryInterface $configFactory, StateInterface $state, EntityTypeManagerInterface $entityTypeManager, TimeInterface $time, QueueFactory $queueFactory, LoggerInterface $logger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/linkychecker/src/Form/LinkyCheckerLinkyIncludeForm.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\linkychecker\Form;

+use Drupal\linky\LinkyInterface;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
 /**
  * Link entity inclusion form.
  *
- * @property \Drupal\linky\LinkyInterface $entity
+ * @property LinkyInterface $entity
  */
 class LinkyCheckerLinkyIncludeForm extends ContentEntityConfirmFormBase {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/linkychecker/src/Form/LinkyCheckerLinkyExcludeForm.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\linkychecker\Form;

+use Drupal\linky\LinkyInterface;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
 /**
  * Link entity exclusion form.
  *
- * @property \Drupal\linky\LinkyInterface $entity
+ * @property LinkyInterface $entity
  */
 class LinkyCheckerLinkyExcludeForm extends ContentEntityConfirmFormBase {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/linkychecker/src/Form/LinkyCheckerLinkyCheckForm.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\linkychecker\Form;

+use Drupal\linky\LinkyInterface;
+use Drupal\linkychecker\LinkyCheckerMemoryLogger;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Ajax\AjaxFormHelperTrait;
@@ @@
 /**
  * Linky check form.
  *
- * @method \Drupal\linky\LinkyInterface getEntity()
+ * @method LinkyInterface getEntity()
  */
 class LinkyCheckerLinkyCheckForm extends ContentEntityForm {

@@ @@
   /**
    * Linky checker crawler.
    *
-   * @var \Drupal\linkychecker\LinkyCheckerCrawlerInterface
+   * @var LinkyCheckerCrawlerInterface
    */
   protected $crawler;

@@ @@
   /**
    * The in-memory logger.
    *
-   * @var \Psr\Log\LoggerInterface|\Drupal\linkychecker\LinkyCheckerMemoryLogger
+   * @var LoggerInterface|LinkyCheckerMemoryLogger
    */
   protected $logger;

@@ @@
   /**
    * Constructs a new LinkyCheckerLinkyCheckForm.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\linkychecker\LinkyCheckerCrawlerInterface $crawler
+   * @param LinkyCheckerCrawlerInterface $crawler
    *   Linky checker crawler.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The in-memory logger.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeBundleInfoInterface $entity_type_bundle_info, TimeInterface $time, LinkyCheckerCrawlerInterface $crawler, LoggerInterface $logger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/linkychecker/src/Commands/LinkyCheckerCommands.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The linky checker queue service.
    *
-   * @var \Drupal\linkychecker\LinkyCheckerCrawlQueueInterface
+   * @var LinkyCheckerCrawlQueueInterface
    */
   protected $checkerCrawlQueue;

@@ @@
   /**
    * Constructs a new LinkyCheckerCommands.
    *
-   * @param \Drupal\linkychecker\LinkyCheckerCrawlQueueInterface $checkerCrawlQueue
+   * @param LinkyCheckerCrawlQueueInterface $checkerCrawlQueue
    *   The linky checker queue service.
    */
   public function __construct(LinkyCheckerCrawlQueueInterface $checkerCrawlQueue) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/linkychecker/linkychecker.module:93

    ---------- begin diff ----------
@@ @@
  * Implements hook_cron().
  */
 function linkychecker_cron(): void {
-  /** @var \Drupal\linkychecker\LinkyCheckerCronHook $cronHook */
+  /** @var LinkyCheckerCronHook $cronHook */
   $cronHook = \Drupal::service('class_resolver')->getInstanceFromDefinition(LinkyCheckerCronHook::class);
   $cronHook->cron();
 }
@@ @@
     return;
   }

-  /** @var \Drupal\linky\LinkyInterface $original */
+  /** @var LinkyInterface $original */
   $original = $entity->original;
   // Check if URI changed.
   if (($entity->link->uri ?? NULL) !== ($original->link->uri ?? NULL)) {
@@ @@
  * Implements hook_entity_type_build().
  */
 function linkychecker_entity_type_build(array &$entity_types) {
-  /** @var \Drupal\Core\Entity\EntityTypeInterface $entityType */
+  /** @var EntityTypeInterface $entityType */
   $entityType = $entity_types['linky'];
   // Route provider.
   $routeProviders = $entityType->getRouteProviderClasses() ?: [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 14 files have been changed by Rector                                      

