diff --git a/opigno_dashboard.module b/opigno_dashboard.module
index fa6f268..0b00fdd 100644
--- a/opigno_dashboard.module
+++ b/opigno_dashboard.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Menu\LocalTaskManagerInterface;
 /**
  * @file
  * Contains opigno_dashboard.module.
@@ -157,10 +158,10 @@ function opigno_dashboard_preprocess_region(&$variables) {
       }
     }
 
-    /** @var \Drupal\Core\Menu\LocalTaskManagerInterface $manager */
+    /** @var LocalTaskManagerInterface $manager */
     $manager = \Drupal::service('plugin.manager.menu.local_task');
 
-    /** @var \Drupal\Core\Cache\CacheableMetadata $cacheability */
+    /** @var CacheableMetadata $cacheability */
     $cacheability = new CacheableMetadata();
     $cacheability->addCacheableDependency($manager);
 
diff --git a/src/BlockService.php b/src/BlockService.php
index d98645f..8fa126d 100644
--- a/src/BlockService.php
+++ b/src/BlockService.php
@@ -25,59 +25,59 @@ class BlockService implements BlockServiceInterface {
   /**
    * The block manager service.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The database connection service.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * BlockService constructor.
    *
-   * @param \Drupal\Core\Block\BlockManagerInterface $block_manager
+   * @param BlockManagerInterface $block_manager
    *   The block manager service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user account.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection service.
    */
   public function __construct(
diff --git a/src/BlockServiceInterface.php b/src/BlockServiceInterface.php
index 9ead21e..73fe09b 100644
--- a/src/BlockServiceInterface.php
+++ b/src/BlockServiceInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\opigno_dashboard;
 
+use Symfony\Component\HttpFoundation\JsonResponse;
 /**
  * The Opigno dashboard block service definition.
  */
@@ -92,7 +93,7 @@ interface BlockServiceInterface {
    * @param bool $user_default
    *   Should the user default positioning be used or not.
    *
-   * @return array|\Symfony\Component\HttpFoundation\JsonResponse
+   * @return array|JsonResponse
    *   Blocks positioning.
    */
   public function getPositioning($uid = NULL, bool $default = FALSE, bool $user_default = FALSE);
diff --git a/src/Cache/Context/IsCurrentUserPageCacheContext.php b/src/Cache/Context/IsCurrentUserPageCacheContext.php
index 17e2a95..e1624e0 100644
--- a/src/Cache/Context/IsCurrentUserPageCacheContext.php
+++ b/src/Cache/Context/IsCurrentUserPageCacheContext.php
@@ -31,9 +31,9 @@ class IsCurrentUserPageCacheContext implements CacheContextInterface {
   /**
    * IsCurrentUserPageCacheContext constructor.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The rote match service.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user account.
    */
   public function __construct(RouteMatchInterface $route_match, AccountInterface $account) {
diff --git a/src/Controller/DashboardController.php b/src/Controller/DashboardController.php
index ec55917..684ef17 100644
--- a/src/Controller/DashboardController.php
+++ b/src/Controller/DashboardController.php
@@ -25,38 +25,38 @@ class DashboardController extends ControllerBase {
   /**
    * The block service.
    *
-   * @var \Drupal\opigno_dashboard\BlockServiceInterface
+   * @var BlockServiceInterface
    */
   protected $blockService;
 
   /**
    * The database connection manager.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * The users entity query.
    *
-   * @var \Drupal\Core\Entity\Query\QueryInterface|null
+   * @var QueryInterface|null
    */
   protected $userEntityQuery = NULL;
 
   /**
    * DashboardController constructor.
    *
-   * @param \Drupal\opigno_dashboard\BlockServiceInterface $block_service
+   * @param BlockServiceInterface $block_service
    *   Opigno dashboard blocks service.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user account.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(
@@ -115,7 +115,7 @@ class DashboardController extends ControllerBase {
    * @param bool $user_default
    *   Should the user default positioning be used or not.
    *
-   * @return array|\Symfony\Component\HttpFoundation\JsonResponse
+   * @return array|JsonResponse
    *   Blocks positioning.
    */
   public function getPositioning($uid = NULL, bool $default = FALSE, bool $user_default = FALSE) {
@@ -125,10 +125,10 @@ class DashboardController extends ControllerBase {
   /**
    * Sets the positioning.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request object.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The response.
    */
   public function setPositioning(Request $request): JsonResponse {
@@ -165,7 +165,7 @@ class DashboardController extends ControllerBase {
   /**
    * Returns the default positioning.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The default positioning.
    */
   public function getDefaultPositioning(): JsonResponse {
@@ -180,10 +180,10 @@ class DashboardController extends ControllerBase {
   /**
    * Sets default positioning.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    */
   public function setDefaultPositioning(Request $request): JsonResponse {
@@ -218,7 +218,7 @@ class DashboardController extends ControllerBase {
   /**
    * Restore dashboard settings to defaults for the current user.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    */
   public function restoreToDefaultAll(): JsonResponse {
diff --git a/src/EventSubscriber/RedirectOnAccessDeniedSubscriber.php b/src/EventSubscriber/RedirectOnAccessDeniedSubscriber.php
index d0eb753..5f8a94f 100644
--- a/src/EventSubscriber/RedirectOnAccessDeniedSubscriber.php
+++ b/src/EventSubscriber/RedirectOnAccessDeniedSubscriber.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\opigno_dashboard\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Access\AccessResultReasonInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
@@ -10,8 +12,6 @@ use Drupal\Core\Session\AccountInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
 use Symfony\Component\HttpKernel\KernelEvents;
 
@@ -23,14 +23,14 @@ class RedirectOnAccessDeniedSubscriber implements EventSubscriberInterface {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $user;
 
   /**
    * Constructs a new ResponseSubscriber instance.
    *
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(AccountInterface $current_user) {
@@ -47,9 +47,9 @@ class RedirectOnAccessDeniedSubscriber implements EventSubscriberInterface {
   }
 
   /**
-   * @return \Drupal\Core\Session\AccountInterface
+   * @return AccountInterface
    */
-  public function onKernelRequest(GetResponseEvent $event) {
+  public function onKernelRequest(RequestEvent $event) {
     $is_anonymous = $this->user->isAnonymous();
     // Add the route name as an extra class to body.
     $route = (string) \Drupal::routeMatch()->getRouteName();
@@ -77,10 +77,10 @@ class RedirectOnAccessDeniedSubscriber implements EventSubscriberInterface {
   /**
    * Redirect if 403 and node an event.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The route building event.
    */
-  public function redirectOn403(FilterResponseEvent $event) {
+  public function redirectOn403(ResponseEvent $event) {
     $route_name = \Drupal::routeMatch()->getRouteName();
     $status_code = $event->getResponse()->getStatusCode();
     $is_anonymous = $this->user->isAnonymous();
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index 1c1cd70..e8e8c01 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -17,25 +17,25 @@ class SettingsForm extends ConfigFormBase {
   /**
    * The block service.
    *
-   * @var \Drupal\opigno_dashboard\BlockServiceInterface
+   * @var BlockServiceInterface
    */
   protected $blockService;
 
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
   /**
    * Constructs a \Drupal\opigno_dashboard\Form\SettingsForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\opigno_dashboard\BlockServiceInterface $block_service
+   * @param BlockServiceInterface $block_service
    *   The block service object.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
    */
   public function __construct(ConfigFactoryInterface $config_factory, BlockServiceInterface $block_service, ThemeHandlerInterface $theme_handler) {
diff --git a/src/Plugin/Block/AboutOpignoBlock.php b/src/Plugin/Block/AboutOpignoBlock.php
index e03755c..668e4df 100644
--- a/src/Plugin/Block/AboutOpignoBlock.php
+++ b/src/Plugin/Block/AboutOpignoBlock.php
@@ -26,7 +26,7 @@ class AboutOpignoBlock extends BlockBase implements ContainerFactoryPluginInterf
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
 
@@ -81,7 +81,7 @@ class AboutOpignoBlock extends BlockBase implements ContainerFactoryPluginInterf
 
     $logo = theme_get_setting('logo_path_anonymous');
     if (!is_file($logo)) {
-      $logo = drupal_get_path('theme', 'aristotle') . '/assets/' . $logo;
+      $logo = \Drupal::service('extension.list.theme')->getPath('aristotle') . '/assets/' . $logo;
     }
 
     $options = [
@@ -91,7 +91,7 @@ class AboutOpignoBlock extends BlockBase implements ContainerFactoryPluginInterf
 
     return [
       '#theme' => 'opigno_about_block',
-      '#logo' => file_exists($logo) ? file_url_transform_relative(file_create_url($logo)) : '',
+      '#logo' => file_exists($logo) ? \Drupal::service('file_url_generator')->generateString($logo) : '',
       '#texts' => [
         $this->t('Opigno™ is a Trademark of Connect-i Sàrl, based in Préverenges, Switzerland.'),
         $this->t('For more information regarding Opigno™ please consult the website @link.', [
diff --git a/src/Plugin/Block/SiteHeaderBlock.php b/src/Plugin/Block/SiteHeaderBlock.php
index e6afa98..7912196 100644
--- a/src/Plugin/Block/SiteHeaderBlock.php
+++ b/src/Plugin/Block/SiteHeaderBlock.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\opigno_dashboard\Plugin\Block;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Block\BlockBase;
@@ -36,7 +37,7 @@ class SiteHeaderBlock extends BlockBase implements ContainerFactoryPluginInterfa
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Entity\EntityInterface|null
+   * @var EntityInterface|null
    */
   protected $user = NULL;
 
@@ -50,28 +51,28 @@ class SiteHeaderBlock extends BlockBase implements ContainerFactoryPluginInterfa
   /**
    * The user statistics manager.
    *
-   * @var \Drupal\opigno_statistics\Services\UserStatisticsManager
+   * @var UserStatisticsManager
    */
   protected $statsManager;
 
   /**
    * The menu link tree service.
    *
-   * @var \Drupal\Core\Menu\MenuLinkTreeInterface
+   * @var MenuLinkTreeInterface
    */
   protected $menuTree;
 
   /**
    * Notifications manager service.
    *
-   * @var \Drupal\opigno_notification\Services\OpignoNotificationManager
+   * @var OpignoNotificationManager
    */
   protected $notificationsManager;
 
   /**
    * The private messages manager service.
    *
-   * @var \Drupal\private_message\Service\PrivateMessageServiceInterface
+   * @var PrivateMessageServiceInterface
    */
   protected $pmService;
 
@@ -207,7 +208,7 @@ class SiteHeaderBlock extends BlockBase implements ContainerFactoryPluginInterfa
   /**
    * Prepare the user dropdown menu.
    *
-   * @param \Drupal\Core\StringTranslation\TranslatableMarkup $role
+   * @param TranslatableMarkup $role
    *   The user role.
    *
    * @return array
diff --git a/src/RedirectMiddleware.php b/src/RedirectMiddleware.php
index 0e6bee8..a9282fc 100644
--- a/src/RedirectMiddleware.php
+++ b/src/RedirectMiddleware.php
@@ -19,14 +19,14 @@ class RedirectMiddleware implements HttpKernelInterface {
   /**
    * The wrapped HTTP kernel.
    *
-   * @var \Symfony\Component\HttpKernel\HttpKernelInterface
+   * @var HttpKernelInterface
    */
   protected $httpKernel;
 
   /**
    * The redirect URL.
    *
-   * @var \Symfony\Component\HttpFoundation\RedirectResponse
+   * @var RedirectResponse
    */
   protected $redirectResponse;
 
@@ -34,7 +34,7 @@ class RedirectMiddleware implements HttpKernelInterface {
    * Constructs a RedirectMiddleware
    * object.
    *
-   * @param \Symfony\Component\HttpKernel\HttpKernelInterface $http_kernel
+   * @param HttpKernelInterface $http_kernel
    *   The decorated kernel.
    */
   public function __construct(HttpKernelInterface $http_kernel) {
@@ -52,7 +52,7 @@ class RedirectMiddleware implements HttpKernelInterface {
   /**
    * Stores the requested redirect response.
    *
-   * @param \Symfony\Component\HttpFoundation\RedirectResponse|null $redirectResponse
+   * @param RedirectResponse|null $redirectResponse
    *   Redirect response.
    */
   public function setRedirectResponse(?RedirectResponse $redirectResponse) {
