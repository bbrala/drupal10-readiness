modules/contrib/epayco/epayco.module
modules/contrib/epayco/modules/commerce_epayco/commerce_epayco.api.php
modules/contrib/epayco/modules/commerce_epayco/commerce_epayco.module
modules/contrib/epayco/modules/commerce_epayco/src/Commands/DrushCommands.php
modules/contrib/epayco/modules/commerce_epayco/src/CommerceGatewayHandler.php
modules/contrib/epayco/modules/commerce_epayco/src/Plugin/Commerce/PaymentGateway/OffsiteCheckoutBase.php
modules/contrib/epayco/modules/commerce_epayco/src/Plugin/Commerce/PaymentGateway/OnePageCheckout.php
modules/contrib/epayco/modules/commerce_epayco/src/Plugin/Commerce/PaymentGateway/StandardCheckout.php
modules/contrib/epayco/modules/commerce_epayco/src/PluginForm/OffsiteRedirect/OffsiteCheckoutFormBase.php
modules/contrib/epayco/modules/commerce_epayco/src/PluginForm/OffsiteRedirect/OnePageCheckoutForm.php
modules/contrib/epayco/modules/commerce_epayco/src/PluginForm/OffsiteRedirect/StandardCheckoutForm.php
modules/contrib/epayco/modules/epayco_api/src/Controller/Operation.php
modules/contrib/epayco/modules/epayco_business_rules/src/EventSubscriber/TransactionResponseListener.php
modules/contrib/epayco/modules/epayco_business_rules/src/Plugin/BusinessRulesAction/FetchPaymentAction.php
modules/contrib/epayco/modules/epayco_business_rules/src/Plugin/BusinessRulesReactsOn/GatewayTransactionResponse.php
modules/contrib/epayco/modules/epayco_business_rules/src/Plugin/BusinessRulesVariable/EmptyPaymentVariable.php
modules/contrib/epayco/modules/epayco_business_rules/src/RemotePaymentProcessingTrait.php
modules/contrib/epayco/src/Controller/FactoryListBuilder.php
modules/contrib/epayco/src/Controller/TransactionResponse.php
modules/contrib/epayco/src/Entity/Factory.php
modules/contrib/epayco/src/Entity/FactoryInterface.php
modules/contrib/epayco/src/Event/GatewayTransactionEvent.php
modules/contrib/epayco/src/Event/GatewayTransactionEvents.php
modules/contrib/epayco/src/Form/FactoryAddForm.php
modules/contrib/epayco/src/Form/FactoryDeleteForm.php
modules/contrib/epayco/src/Form/FactoryEditForm.php
modules/contrib/epayco/src/Form/FactoryFormBase.php
modules/contrib/epayco/src/GatewayHandler.php
modules/contrib/epayco/src/GatewayHandlerInterface.php
modules/contrib/epayco/src/PaymentOptionsHandler.php
modules/contrib/epayco/src/PaymentOptionsHandlerInterface.php
modules/contrib/epayco/src/Plugin/DataType/Factory.php

11 files with changes
=====================

1) modules/contrib/epayco/src/Plugin/DataType/Factory.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The ePayco factory.
    *
-   * @var \Epayco\Epayco
+   * @var Epayco
    */
   protected $value;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/epayco/src/GatewayHandler.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * The logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Constructor method.
    *
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   The HTTP client.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger channel.
    */
   public function __construct(ClientInterface $http_client, LoggerInterface $logger) {
@@ @@
   /**
    * Method to execute any factory operation (Experimental).
    *
-   * @param \Epayco\Epayco $client_instance
+   * @param Epayco $client_instance
    *   The ePyco client instance.
    * @param string $element_name
    *   The initial object to perform operation.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/epayco/src/Form/FactoryFormBase.php:107

    ---------- begin diff ----------
@@ @@
    *   The entity ID.
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return bool
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    */
   public function save(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/epayco/src/Form/FactoryDeleteForm.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the cancel URL.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The URL to go to if the user cancels the deletion.
    */
   public function getCancelUrl() {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/epayco/src/Event/GatewayTransactionEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\epayco\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Class GatewayTransactionEvent.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/epayco/src/Controller/TransactionResponse.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\epayco\Controller;

+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * The logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Constructs a new TransactionResponse controller.
    *
-   * @param \Drupal\epayco\GatewayHandlerInterface $gateway_handler
+   * @param GatewayHandlerInterface $gateway_handler
    *   The gateway handler.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
    */
   public function __construct(GatewayHandlerInterface $gateway_handler, EventDispatcherInterface $event_dispatcher, RequestStack $request_stack, LoggerInterface $logger) {
@@ @@
         $data = $this->gatewayHandler->getReferenceRemoteData($remote_ref);
         // We'll dispatch event only if it's a valid transaction.
         if ($data['success']) {
-          /** @var \Drupal\epayco\Event\GatewayTransactionEvent $event */
+          /** @var GatewayTransactionEvent $event */
           $event = new GatewayTransactionEvent($data);
-          $this->eventDispatcher->dispatch(GatewayTransactionEvents::EPAYCO_TRANSACTION_RESPONSE, $event);
+          $this->eventDispatcher->dispatch($event, GatewayTransactionEvents::EPAYCO_TRANSACTION_RESPONSE);
         }
       }
     }
@@ @@
   /**
    * Check access to the page, if needed conditions are met.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user account.
    */
   public function checkAccess(AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/epayco/src/Controller/FactoryListBuilder.php:46

    ---------- begin diff ----------
@@ @@
     foreach ($this->getVars($entity) as $key => $value) {
       array_push($row['info']['#items'], $key . ': ' . $value);
     }
-    $row['info'] = render($row['info']);
+    $row['info'] = \Drupal::service('renderer')->render($row['info']);

     return $row + parent::buildRow($entity);
   }
@@ @@
   /**
    * Get a list of available useful variables to be shown.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to fetch values from.
    */
   public function getVars(EntityInterface $entity) {
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/epayco/modules/epayco_business_rules/src/EventSubscriber/TransactionResponseListener.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\epayco_business_rules\EventSubscriber;

+use Symfony\Component\EventDispatcher\EventDispatcher;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\epayco\Event\GatewayTransactionEvent;
 use Drupal\epayco\Event\GatewayTransactionEvents;
@@ @@
   /**
    * Create a new event for BusinessRules plugin GatewayTransactionResponse.
    *
-   * @param \Drupal\epayco\Event\GatewayTransactionEvent $event
+   * @param GatewayTransactionEvent $event
    *   The event.
    */
   public function onTransactionResponse(GatewayTransactionEvent $event) {
@@ @@
       'entity_unchanged' => NULL,
       'reacts_on' => $reacts_on_definition,
     ]);
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcher $event_dispatcher */
+    /** @var EventDispatcher $event_dispatcher */
     $event_dispatcher = $this->container->get('event_dispatcher');
     $event_dispatcher->dispatch($reacts_on_definition['eventName'], $new_event);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/epayco/modules/epayco_api/src/Controller/Operation.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The gateway handler.
    *
-   * @var \Drupal\epayco\GatewayHandlerInterface
+   * @var GatewayHandlerInterface
    */
   protected $gatewayHandler;

@@ @@
   /**
    * Class constructor.
    *
-   * @param \Drupal\epayco\GatewayHandlerInterface $gateway_handler
+   * @param GatewayHandlerInterface $gateway_handler
    *   The gateway handler.
    */
   public function __construct(GatewayHandlerInterface $gateway_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/epayco/modules/commerce_epayco/src/CommerceGatewayHandler.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructor method.
    *
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   The HTTP client.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger channel.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
    */
   public function __construct(ClientInterface $http_client, LoggerInterface $logger, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/epayco/modules/commerce_epayco/commerce_epayco.module:166

    ---------- begin diff ----------
@@ @@
  *
  * And check if there is any ePayco payment gateway provided.
  *
- * @param \Drupal\user\Entity\User $user
+ * @param User $user
  *   - The user to check permissions to.
  *
  * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/epayco/modules/epayco_business_rules/src/Plugin/Business
         RulesVariable/EmptyPaymentVariable.php" file, due to:                  
         "Analyze error: "Class                                                 
         Drupal\business_rules\Plugin\BusinessRulesVariablePlugin not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/epayco/modules/epayco_business_rules/src/Plugin/Business
         RulesReactsOn/GatewayTransactionResponse.php" file, due to:            
         "Analyze error: "Class                                                 
         Drupal\business_rules\Plugin\BusinessRulesReactsOnPlugin not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/epayco/modules/epayco_business_rules/src/Plugin/Business
         RulesAction/FetchPaymentAction.php" file, due to:                      
         "Analyze error: "Class                                                 
         Drupal\business_rules\Plugin\BusinessRulesActionPlugin not found.".    
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/epayco/modules/commerce_epayco/src/PluginForm/OffsiteRed
         irect/StandardCheckoutForm.php" file, due to:                          
         "Analyze error: "Class                                                 
         Drupal\commerce_payment\PluginForm\PaymentOffsiteForm not found.".     
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/epayco/modules/commerce_epayco/src/PluginForm/OffsiteRed
         irect/OnePageCheckoutForm.php" file, due to:                           
         "Analyze error: "Class                                                 
         Drupal\commerce_payment\PluginForm\PaymentOffsiteForm not found.".     
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/epayco/modules/commerce_epayco/src/PluginForm/OffsiteRed
         irect/OffsiteCheckoutFormBase.php" file, due to:                       
         "Analyze error: "Class                                                 
         Drupal\commerce_payment\PluginForm\PaymentOffsiteForm not found.".     
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/epayco/modules/commerce_epayco/src/Plugin/Commerce/Payme
         ntGateway/StandardCheckout.php" file, due to:                          
         "Analyze error: "Class                                                 
         Drupal\commerce_payment\Plugin\Commerce\PaymentGateway\OffsitePaymentGate
         wayBase not found.". Include your files in                             
         "$rectorConfig->autoloadPaths([...]);" or                              
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/epayco/modules/commerce_epayco/src/Plugin/Commerce/Payme
         ntGateway/OnePageCheckout.php" file, due to:                           
         "Analyze error: "Class                                                 
         Drupal\commerce_payment\Plugin\Commerce\PaymentGateway\OffsitePaymentGate
         wayBase not found.". Include your files in                             
         "$rectorConfig->autoloadPaths([...]);" or                              
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/epayco/modules/commerce_epayco/src/Plugin/Commerce/Payme
         ntGateway/OffsiteCheckoutBase.php" file, due to:                       
         "Analyze error: "Class                                                 
         Drupal\commerce_payment\Plugin\Commerce\PaymentGateway\OffsitePaymentGate
         wayBase not found.". Include your files in                             
         "$rectorConfig->autoloadPaths([...]);" or                              
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [WARNING] 1 nodes were removed                                                 

