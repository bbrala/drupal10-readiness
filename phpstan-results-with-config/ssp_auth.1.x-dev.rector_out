modules/contrib/ssp_auth/src/Authentication.php
modules/contrib/ssp_auth/src/AuthenticationInterface.php
modules/contrib/ssp_auth/src/Controller/AuthenticationController.php
modules/contrib/ssp_auth/src/Entity/IdentityProvider.php
modules/contrib/ssp_auth/src/Entity/IdentityProviderInterface.php
modules/contrib/ssp_auth/src/Event/LoginEvent.php
modules/contrib/ssp_auth/src/Form/IdentityProviderDeleteForm.php
modules/contrib/ssp_auth/src/Form/IdentityProviderForm.php
modules/contrib/ssp_auth/src/Form/ServiceProviderSettingsForm.php
modules/contrib/ssp_auth/src/IdentityProviderHtmlRouteProvider.php
modules/contrib/ssp_auth/src/IdentityProviderListBuilder.php
modules/contrib/ssp_auth/ssp_auth.install
modules/contrib/ssp_auth/ssp_auth.module
modules/contrib/ssp_auth/tests/src/Functional/ServiceProviderSettingsFormTest.php
modules/contrib/ssp_auth/tests/src/Kernel/IdentityProviderTest.php

5 files with changes
====================

1) modules/contrib/ssp_auth/tests/src/Kernel/IdentityProviderTest.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('identity_provider');
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/ssp_auth/tests/src/Functional/ServiceProviderSettingsFormTest.php:27

    ---------- begin diff ----------
@@ @@
   public function testsServiceProviderSettingsForm() {
     $settingsFormUrl = Url::fromRoute('ssp_auth.service_provider_settings_form');
     $this->drupalGet($settingsFormUrl);
-    $this->assertText('Access denied');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Access denied');

     $this->drupalLogin($this->createUser(['administer service provider settings']));
     $this->drupalGet($settingsFormUrl);
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/ssp_auth/src/Event/LoginEvent.php:2

    ---------- begin diff ----------
@@ @@
 namespace Drupal\ssp_auth\Event;

 use Drupal\user\Entity\User;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Event that is fired after the user has been logged in.
  */
-class LoginEvent extends Event {
+class LoginEvent extends \Symfony\Contracts\EventDispatcher\Event {

   /**
    * Fires when the user has been logged in.
@@ @@
   /**
    * The User.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   public $user;

@@ @@
   /**
    * Constructs the object.
    *
-   * @param \Drupal\user\Entity\User $user
+   * @param User $user
    *   The User object.
    */
   public function __construct(User $user) {
@@ @@
   /**
    * Get the user.
    *
-   * @return \Drupal\user\Entity\User
+   * @return User
    *   Returns the user.
    */
   public function getUser() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/ssp_auth/src/Controller/AuthenticationController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ssp_auth\Controller;

+use Drupal\externalauth\ExternalAuth;
+use Symfony\Component\HttpFoundation\RedirectResponse;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\externalauth\Exception\ExternalAuthRegisterException;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\user\UserInterface;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The ExternalAuth service.
    *
-   * @var \Drupal\externalauth\ExternalAuth
+   * @var ExternalAuth
    */
   protected $externalauth;

@@ @@
   /**
    * The URL generator.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * AuthenticationController constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\externalauth\ExternalAuthInterface $externalauth
+   * @param ExternalAuthInterface $externalauth
    *   The ExternalAuth service.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   The url generator.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(RequestStack $request_stack, ExternalAuthInterface $externalauth, UrlGeneratorInterface $url_generator, EntityTypeManagerInterface $entity_type_manager, MessengerInterface $messenger, LoggerInterface $logger, EventDispatcherInterface $event_dispatcher) {
@@ @@
   /**
    * Initiates user login.
    *
-   * @param \Drupal\ssp_auth\Entity\IdentityProviderInterface $identity_provider
+   * @param IdentityProviderInterface $identity_provider
    *   The identity provider.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   A redirect response object that may be returned by the controller.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\externalauth\Exception\ExternalAuthRegisterException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws ExternalAuthRegisterException
    */
   public function login(IdentityProviderInterface $identity_provider) {
     if (!$this->config($this->config('ssp_auth.serviceprovidersettings')->get('general_enable'))) {
@@ @@
   /**
    * Redirects the user after login.
    *
-   * @param \Drupal\ssp_auth\Entity\IdentityProviderInterface $identity_provider
+   * @param IdentityProviderInterface $identity_provider
    *   The identity provider.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   A redirect response object that may be returned by the controller.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\externalauth\Exception\ExternalAuthRegisterException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws ExternalAuthRegisterException
    */
   public function authenticate(IdentityProviderInterface $identity_provider) {
     if (!$this->instance->isAuthenticated()) {
@@ @@
   /**
    * Returns the user name from the identity provider or FALSE.
    *
-   * @param \Drupal\ssp_auth\Entity\IdentityProviderInterface $identityProvider
+   * @param IdentityProviderInterface $identityProvider
    *   The identity provider.
    * @param array $attributes
    *   Array of attributes from the identity provider.
@@ @@
   /**
    * Returns the user mail from the identity provider or FALSE.
    *
-   * @param \Drupal\ssp_auth\Entity\IdentityProviderInterface $identityProvider
+   * @param IdentityProviderInterface $identityProvider
    *   The identity provider.
    * @param array $attributes
    *   Array of attributes from the identity provider.
@@ @@
   /**
    * Returns a SimpleSAML Simple class instance.
    *
-   * @return \SimpleSAML\Auth\Simple|NULL
+   * @return Simple|NULL
    *   The SimpleSAML Simple instance.
    */
   protected function getSimpleSamlInstance() {
@@ @@
    * @param $roles
    * @param bool $provision
    *
-   * @return bool|\Drupal\Core\Entity\EntityInterface|\Drupal\user\UserInterface|mixed
+   * @return bool|EntityInterface|UserInterface|mixed
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\externalauth\Exception\ExternalAuthRegisterException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
+   * @throws ExternalAuthRegisterException
    */
   protected function externalLoginRegister($userName, $email, $roles, $provision) {
     $account = $this->externalauth->login($userName, 'ssp_auth');
@@ @@
     }

     $event = new LoginEvent($account);
-    $this->eventDispatcher->dispatch(LoginEvent::LOGIN_EVENT, $event);
+    $this->eventDispatcher->dispatch($event, LoginEvent::LOGIN_EVENT);

     return $account;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/ssp_auth/src/Authentication.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Constructs a Authentication service.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
@@ @@
   /**
    * Returns a SimpleSAML Simple class instance.
    *
-   * @return \SimpleSAML\Auth\Simple|NULL
+   * @return Simple|NULL
    *   The SimpleSAML Simple instance.
    */
   public function getSimpleSamlInstance() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 5 files have been changed by Rector                                       

