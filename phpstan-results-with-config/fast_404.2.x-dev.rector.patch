diff --git a/src/EventSubscriber/Fast404EventSubscriber.php b/src/EventSubscriber/Fast404EventSubscriber.php
index 6caff8a..64b3ead 100644
--- a/src/EventSubscriber/Fast404EventSubscriber.php
+++ b/src/EventSubscriber/Fast404EventSubscriber.php
@@ -2,10 +2,10 @@
 
 namespace Drupal\fast404\EventSubscriber;
 
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
+use Symfony\Component\HttpKernel\Event\RequestEvent;
+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\RequestStack;
 use Drupal\Core\Site\Settings;
@@ -21,14 +21,14 @@ class Fast404EventSubscriber implements EventSubscriberInterface {
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   public $requestStack;
 
   /**
    * Constructs a new Fast404EventSubscriber instance.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The Request Stack.
    */
   public function __construct(RequestStack $request_stack) {
@@ -38,7 +38,7 @@ class Fast404EventSubscriber implements EventSubscriberInterface {
   /**
    * Ensures Fast 404 output returned if applicable.
    */
-  public function onKernelRequest(GetResponseEvent $event) {
+  public function onKernelRequest(RequestEvent $event) {
     $request = $this->requestStack->getCurrentRequest();
     $fast_404 = new Fast404($request);
 
@@ -56,13 +56,13 @@ class Fast404EventSubscriber implements EventSubscriberInterface {
   /**
    * Ensures Fast 404 output returned upon NotFoundHttpException.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent $event
+   * @param ExceptionEvent $event
    *   The response for exception event.
    */
-  public function onNotFoundException(GetResponseForExceptionEvent $event) {
+  public function onNotFoundException(ExceptionEvent $event) {
     // Check to see if we will completely replace the Drupal 404 page.
     if (Settings::get('fast404_not_found_exception', FALSE)) {
-      if ($event->getException() instanceof NotFoundHttpException) {
+      if ($event->getThrowable() instanceof NotFoundHttpException) {
         $fast_404 = new Fast404($event->getRequest());
         $event->setResponse($fast_404->response(TRUE));
       }
diff --git a/src/Fast404.php b/src/Fast404.php
index 0939279..fad6ca1 100644
--- a/src/Fast404.php
+++ b/src/Fast404.php
@@ -29,7 +29,7 @@ class Fast404 {
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   public $request;
 
@@ -43,7 +43,7 @@ class Fast404 {
   /**
    * Fast404 constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    */
   public function __construct(Request $request) {
@@ -192,7 +192,7 @@ class Fast404 {
    * @param bool $return
    *   Decide whether to return the response object or simply send it.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   If this returns anything, it will be a response object.
    */
   public function response($return = FALSE) {
