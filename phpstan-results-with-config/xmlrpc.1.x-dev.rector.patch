diff --git a/src/Controller/XmlrpcController.php b/src/Controller/XmlrpcController.php
index 6de89cd..82fba74 100644
--- a/src/Controller/XmlrpcController.php
+++ b/src/Controller/XmlrpcController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\xmlrpc\Controller;
 
+use Symfony\Component\HttpFoundation\Response;
 use Drupal\Core\Controller\ControllerBase;
 
 /**
@@ -16,7 +17,7 @@ class XmlrpcController extends ControllerBase {
   /**
    * Process an XML-RPC request.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   A Response object.
    */
   public function php() {
diff --git a/src/Tests/XmlRpcBasicTest.php b/src/Tests/XmlRpcBasicTest.php
index 6422d64..094c3f5 100644
--- a/src/Tests/XmlRpcBasicTest.php
+++ b/src/Tests/XmlRpcBasicTest.php
@@ -47,7 +47,7 @@ class XmlRpcBasicTest extends XmlRpcTestBase {
       }
     }
 
-    $this->assertEqual($count, count($minimum), 'system.listMethods returned at least the minimum listing');
+    $this->assertEquals($count, count($minimum), 'system.listMethods returned at least the minimum listing');
   }
 
   /**
@@ -55,8 +55,7 @@ class XmlRpcBasicTest extends XmlRpcTestBase {
    */
   public function testMethodSignature() {
     $signature = $this->xmlRpcGet(['system.methodSignature' => ['system.listMethods']]);
-    $this->assert(is_array($signature) && !empty($signature) && is_array($signature[0]),
-      'system.methodSignature returns an array of signature arrays.');
+    $this->assertTrue(is_array($signature) && !empty($signature) && is_array($signature[0]), 'system.methodSignature returns an array of signature arrays.');
   }
 
   /**
@@ -123,7 +122,7 @@ class XmlRpcBasicTest extends XmlRpcTestBase {
     $this->verboseResult($result);
     $this->assertFalse($result, "Calling an unknown host returns an error condition");
 
-    $this->assertEqual(-32300, xmlrpc_errno(), "Calling an unknown host is reported as a transport error.");
+    $this->assertEquals(-32300, xmlrpc_errno(), "Calling an unknown host is reported as a transport error.");
     $message = xmlrpc_error_msg();
     $this->assertFalse(empty($message), "Calling an unknown host returns a meaningful error message.");
   }
diff --git a/src/Tests/XmlRpcMessagesTest.php b/src/Tests/XmlRpcMessagesTest.php
index 021cf35..e593dbb 100644
--- a/src/Tests/XmlRpcMessagesTest.php
+++ b/src/Tests/XmlRpcMessagesTest.php
@@ -37,7 +37,7 @@ class XmlRpcMessagesTest extends XmlRpcTestBase {
       $xml_message_l = xmlrpc_test_message_sized_in_kb($size);
       $xml_message_r = $this->xmlRpcGet(['messages.messageSizedInKB' => [$size]]);
 
-      $this->assertEqual($xml_message_l, $xml_message_r, new FormattableMarkup('XML-RPC messages.messageSizedInKB of %s Kb size received', ['%s' => $size]));
+      $this->assertEquals($xml_message_l, $xml_message_r, new FormattableMarkup('XML-RPC messages.messageSizedInKB of %s Kb size received', ['%s' => $size]));
     }
   }
 
@@ -57,7 +57,7 @@ class XmlRpcMessagesTest extends XmlRpcTestBase {
     $diff = array_diff($methods1, $methods2);
     $this->assertTrue(is_array($diff) && !empty($diff), 'Method list is altered by hook_xmlrpc_alter');
     $removed = reset($diff);
-    $this->assertEqual($removed, 'system.methodSignature', 'Hiding builtin system.methodSignature with hook_xmlrpc_alter works');
+    $this->assertEquals($removed, 'system.methodSignature', 'Hiding builtin system.methodSignature with hook_xmlrpc_alter works');
   }
 
   /**
@@ -65,7 +65,7 @@ class XmlRpcMessagesTest extends XmlRpcTestBase {
    */
   public function testRequestContentTypeDefinition() {
     $headers = xmlrpc($this->getEndpoint(), ['test.headerEcho' => []]);
-    $this->assertIdentical($headers['Content-Type'], 'text/xml; charset=utf-8');
+    $this->assertSame($headers['Content-Type'], 'text/xml; charset=utf-8');
   }
 
   /**
@@ -105,11 +105,11 @@ class XmlRpcMessagesTest extends XmlRpcTestBase {
     }
 
     // The request string starts with the XML processing instruction.
-    $this->assertIdentical(0, strpos($request->getBody(), '<?xml version="1.0" encoding="utf-8" ?>'), 'Request Processing Instruction is "&lt;?xml version="1.0" encoding="utf-8" ?&gt;"');
+    $this->assertSame(0, strpos($request->getBody(), '<?xml version="1.0" encoding="utf-8" ?>'), 'Request Processing Instruction is "&lt;?xml version="1.0" encoding="utf-8" ?&gt;"');
 
     // The response body has to start with the xml processing instruction.
-    $this->assertIdentical(strpos($data, '<?xml version="1.0" encoding="utf-8" ?>'), 0, 'Response Processing Instruction is "&lt;?xml version="1.0" encoding="utf-8" ?&gt;"');
-    $this->assertIdentical($content_type, 'text/xml; charset=utf-8');
+    $this->assertSame(strpos($data, '<?xml version="1.0" encoding="utf-8" ?>'), 0, 'Response Processing Instruction is "&lt;?xml version="1.0" encoding="utf-8" ?&gt;"');
+    $this->assertSame($content_type, 'text/xml; charset=utf-8');
   }
 
 }
diff --git a/src/Tests/XmlRpcValidatorTest.php b/src/Tests/XmlRpcValidatorTest.php
index 76953b8..d26be38 100644
--- a/src/Tests/XmlRpcValidatorTest.php
+++ b/src/Tests/XmlRpcValidatorTest.php
@@ -43,12 +43,12 @@ class XmlRpcValidatorTest extends XmlRpcTestBase {
     shuffle($array_1);
     $l_res_1 = xmlrpc_test_array_of_structs_test($array_1);
     $r_res_1 = $this->xmlRpcGet(['validator1.arrayOfStructsTest' => [$array_1]]);
-    $this->assertIdentical($l_res_1, $r_res_1);
+    $this->assertSame($l_res_1, $r_res_1);
 
     $string_2 = 't\'&>>zf"md>yr>xlcev<h<"k&j<og"w&&>">>uai"np&s>>q\'&b<>"&&&';
     $l_res_2 = xmlrpc_test_count_the_entities($string_2);
     $r_res_2 = $this->xmlRpcGet(['validator1.countTheEntities' => [$string_2]]);
-    $this->assertIdentical($l_res_2, $r_res_2);
+    $this->assertSame($l_res_2, $r_res_2);
 
     $struct_3 = [
       'moe' => mt_rand(-100, 100),
@@ -58,7 +58,7 @@ class XmlRpcValidatorTest extends XmlRpcTestBase {
     ];
     $l_res_3 = xmlrpc_test_easy_struct_test($struct_3);
     $r_res_3 = $this->xmlRpcGet(['validator1.easyStructTest' => [$struct_3]]);
-    $this->assertIdentical($l_res_3, $r_res_3);
+    $this->assertSame($l_res_3, $r_res_3);
 
     $struct_4 = [
       'sub1' => ['bar' => 13],
@@ -68,7 +68,7 @@ class XmlRpcValidatorTest extends XmlRpcTestBase {
     ];
     $l_res_4 = xmlrpc_test_echo_struct_test($struct_4);
     $r_res_4 = $this->xmlRpcGet(['validator1.echoStructTest' => [$struct_4]]);
-    $this->assertIdentical($l_res_4, $r_res_4);
+    $this->assertSame($l_res_4, $r_res_4);
 
     $int_5 = mt_rand(-100, 100);
     $bool_5 = (($int_5 % 2) == 0);
@@ -90,7 +90,7 @@ class XmlRpcValidatorTest extends XmlRpcTestBase {
       ],
     ]);
     // @todo Contains objects, objects are not equal.
-    $this->assertEqual($l_res_5, $r_res_5);
+    $this->assertEquals($l_res_5, $r_res_5);
 
     $size = mt_rand(100, 200);
     $array_6 = [];
@@ -100,7 +100,7 @@ class XmlRpcValidatorTest extends XmlRpcTestBase {
 
     $l_res_6 = xmlrpc_test_moderate_size_array_check($array_6);
     $r_res_6 = $this->xmlRpcGet(['validator1.moderateSizeArrayCheck' => [$array_6]]);
-    $this->assertIdentical($l_res_6, $r_res_6);
+    $this->assertSame($l_res_6, $r_res_6);
 
     $struct_7 = [];
     for ($y = 2000; $y < 2002; $y++) {
@@ -117,12 +117,12 @@ class XmlRpcValidatorTest extends XmlRpcTestBase {
     }
     $l_res_7 = xmlrpc_test_nested_struct_test($struct_7);
     $r_res_7 = $this->xmlRpcGet(['validator1.nestedStructTest' => [$struct_7]]);
-    $this->assertIdentical($l_res_7, $r_res_7);
+    $this->assertSame($l_res_7, $r_res_7);
 
     $int_8 = mt_rand(-100, 100);
     $l_res_8 = xmlrpc_test_simple_struct_return_test($int_8);
     $r_res_8 = $this->xmlRpcGet(['validator1.simpleStructReturnTest' => [$int_8]]);
-    $this->assertIdentical($l_res_8, $r_res_8);
+    $this->assertSame($l_res_8, $r_res_8);
 
     /* Now test multicall */
     $x = [];
@@ -153,7 +153,7 @@ class XmlRpcValidatorTest extends XmlRpcTestBase {
       $l_res_8,
     ];
     $a_r_res = $this->xmlRpcGet($x);
-    $this->assertEqual($a_l_res, $a_r_res);
+    $this->assertEquals($a_l_res, $a_r_res);
   }
 
 }
diff --git a/xmlrpc.server.inc b/xmlrpc.server.inc
index 9fa0ae3..77e8fe1 100644
--- a/xmlrpc.server.inc
+++ b/xmlrpc.server.inc
@@ -16,7 +16,7 @@ use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
  *   the callbacks they map to as values, or a more complex structure
  *   describing XML-RPC callbacks as returned from hook_xmlrpc().
  *
- * @return \Symfony\Component\HttpFoundation\Response
+ * @return Response
  *   A Response object.
  */
 function xmlrpc_server(array $callbacks) {
@@ -115,7 +115,7 @@ function xmlrpc_server(array $callbacks) {
  *   (optional) The description of the error. Used only if an integer error
  *   code was passed in.
  *
- * @return \Symfony\Component\HttpFoundation\Response
+ * @return Response
  *   A Response object.
  */
 function xmlrpc_server_error($error, $message = FALSE) {
@@ -131,7 +131,7 @@ function xmlrpc_server_error($error, $message = FALSE) {
  * @param string $xml
  *   XML to send to the browser.
  *
- * @return \Symfony\Component\HttpFoundation\Response
+ * @return Response
  *   A Response object.
  */
 function xmlrpc_server_output($xml) {
diff --git a/xmlrpc_example/src/Form/XmlRpcExampleClientForm.php b/xmlrpc_example/src/Form/XmlRpcExampleClientForm.php
index 4c350af..bb7b201 100644
--- a/xmlrpc_example/src/Form/XmlRpcExampleClientForm.php
+++ b/xmlrpc_example/src/Form/XmlRpcExampleClientForm.php
@@ -112,7 +112,7 @@ class XmlRpcExampleClientForm extends FormBase {
    *
    * @param array $form
    *   Form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form_state object.
    *
    * @see xmlrpc()
@@ -152,7 +152,7 @@ class XmlRpcExampleClientForm extends FormBase {
    *
    * @param array $form
    *   Form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form_state object.
    *
    * @see xmlrpc()
@@ -195,7 +195,7 @@ class XmlRpcExampleClientForm extends FormBase {
    *
    * @param array $form
    *   Form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form_state object.
    *
    * @see xmlrpc()
@@ -236,7 +236,7 @@ class XmlRpcExampleClientForm extends FormBase {
    *
    * @param array $form
    *   Form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form_state object.
    *
    * @see xmlrpc()
diff --git a/xmlrpc_example/src/Tests/XmlRpcExampleTest.php b/xmlrpc_example/src/Tests/XmlRpcExampleTest.php
index 4ed3cc5..8cf894c 100644
--- a/xmlrpc_example/src/Tests/XmlRpcExampleTest.php
+++ b/xmlrpc_example/src/Tests/XmlRpcExampleTest.php
@@ -44,10 +44,10 @@ class XmlRpcExampleTest extends BrowserTestBase {
     $this->xmlRpcUrl = $this->getEndpoint();
     // Unit test functionality.
     $result = xmlrpc($this->xmlRpcUrl, ['xmlrpc_example.add' => [3, 4]]);
-    $this->assertEqual($result, 7, 'Successfully added 3+4 = 7');
+    $this->assertEquals($result, 7, 'Successfully added 3+4 = 7');
 
     $result = xmlrpc($this->xmlRpcUrl, ['xmlrpc_example.subtract' => [4, 3]]);
-    $this->assertEqual($result, 1, 'Successfully subtracted 4-3 = 1');
+    $this->assertEquals($result, 1, 'Successfully subtracted 4-3 = 1');
 
     // Make a multicall request.
     $options = [
@@ -56,14 +56,14 @@ class XmlRpcExampleTest extends BrowserTestBase {
     ];
     $expected = [7, 3];
     $result = xmlrpc($this->xmlRpcUrl, $options);
-    $this->assertEqual($result, $expected, 'Successfully called multicall request');
+    $this->assertEquals($result, $expected, 'Successfully called multicall request');
 
     // Verify default limits.
     $result = xmlrpc($this->xmlRpcUrl, ['xmlrpc_example.subtract' => [3, 4]]);
-    $this->assertEqual(xmlrpc_errno(), 10002, 'Results below minimum return custom error: 10002');
+    $this->assertEquals(xmlrpc_errno(), 10002, 'Results below minimum return custom error: 10002');
 
     $result = xmlrpc($this->xmlRpcUrl, ['xmlrpc_example.add' => [7, 4]]);
-    $this->assertEqual(xmlrpc_errno(), 10001, 'Results beyond maximum return custom error: 10001');
+    $this->assertEquals(xmlrpc_errno(), 10001, 'Results beyond maximum return custom error: 10001');
   }
 
   /**
@@ -73,28 +73,53 @@ class XmlRpcExampleTest extends BrowserTestBase {
     // Now test the UI.
     // Add the integers.
     $edit = ['num1' => 3, 'num2' => 5];
-    $this->drupalPostForm('xmlrpc_example/client', $edit, t('Add the integers'));
-    $this->assertText(t('The XML-RPC server returned this response: @num', ['@num' => 8]));
+    $this->drupalGet('xmlrpc_example/client');
+    $this->submitForm($edit, t('Add the integers'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('The XML-RPC server returned this response: @num', ['@num' => 8]));
 
     // Subtract the integers.
     $edit = ['num1' => 8, 'num2' => 3];
-    $this->drupalPostForm('xmlrpc_example/client', $edit, t('Subtract the integers'));
-    $this->assertText(t('The XML-RPC server returned this response: @num', ['@num' => 5]));
+    $this->drupalGet('xmlrpc_example/client');
+    $this->submitForm($edit, t('Subtract the integers'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('The XML-RPC server returned this response: @num', ['@num' => 5]));
+    $this->drupalGet('xmlrpc_example/client');
 
     // Request available methods.
-    $this->drupalPostForm('xmlrpc_example/client', $edit, t('Request methods'));
-    $this->assertText('xmlrpc_example.add', 'The XML-RPC Add method was found.');
-    $this->assertText('xmlrpc_example.subtract', 'The XML-RPC Subtract method was found.');
+    $this->submitForm($edit, t('Request methods'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('xmlrpc_example.add');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('xmlrpc_example.subtract');
 
     // Before testing multicall, verify that method exists.
-    $this->assertText('system.multicall', 'The XML-RPC Multicall method was found.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('system.multicall');
 
     // Verify multicall request.
     $edit = ['num1' => 5, 'num2' => 2];
-    $this->drupalPostForm('xmlrpc_example/client', $edit, t('Add and Subtract'));
-
-    $this->assertText('[0] =&gt; 7', 'The XML-RPC server returned the addition result.');
-    $this->assertText('[1] =&gt; 3', 'The XML-RPC server returned the subtraction result.');
+    $this->drupalGet('xmlrpc_example/client');
+    $this->submitForm($edit, t('Add and Subtract'));
+
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('[0] =&gt; 7');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('[1] =&gt; 3');
   }
 
   /**
@@ -104,22 +129,30 @@ class XmlRpcExampleTest extends BrowserTestBase {
     $this->xmlRpcUrl = $this->getEndpoint();
     // Set different minimum and maximum values.
     $options = ['min' => 3, 'max' => 7];
-    $this->drupalPostForm('xmlrpc_example/server', $options, t('Save configuration'));
+    $this->drupalGet('xmlrpc_example/server');
+    $this->submitForm($options, t('Save configuration'));
 
-    $this->assertText(t('The configuration options have been saved'), 'Results limited to >= 3 and <= 7');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('The configuration options have been saved'));
 
     $edit = ['num1' => 8, 'num2' => 3];
-    $this->drupalPostForm('xmlrpc_example/client', $edit, t('Subtract the integers'));
-    $this->assertText(t('The XML-RPC server returned this response: @num', ['@num' => 5]));
+    $this->drupalGet('xmlrpc_example/client');
+    $this->submitForm($edit, t('Subtract the integers'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('The XML-RPC server returned this response: @num', ['@num' => 5]));
 
     $result = xmlrpc($this->xmlRpcUrl, ['xmlrpc_example.add' => [3, 4]]);
-    $this->assertEqual($result, 7, 'Successfully added 3+4 = 7');
+    $this->assertEquals($result, 7, 'Successfully added 3+4 = 7');
 
     $result = xmlrpc($this->xmlRpcUrl, ['xmlrpc_example.subtract' => [4, 3]]);
-    $this->assertEqual(xmlrpc_errno(), 10002, 'subtracting 4-3 = 1 returns custom error: 10002');
+    $this->assertEquals(xmlrpc_errno(), 10002, 'subtracting 4-3 = 1 returns custom error: 10002');
 
     $result = xmlrpc($this->xmlRpcUrl, ['xmlrpc_example.add' => [7, 4]]);
-    $this->assertEqual(xmlrpc_errno(), 10001, 'Adding 7 + 4 = 11 returns custom error: 10001');
+    $this->assertEquals(xmlrpc_errno(), 10001, 'Adding 7 + 4 = 11 returns custom error: 10001');
   }
 
   /**
@@ -133,20 +166,28 @@ class XmlRpcExampleTest extends BrowserTestBase {
     $this->xmlRpcUrl = $this->getEndpoint();
     // Enable XML-RPC service altering functionality.
     $options = ['alter_enabled' => TRUE];
-    $this->drupalPostForm('xmlrpc_example/alter', $options, t('Save configuration'));
-    $this->assertText(t('The configuration options have been saved'), 'Results are not limited due to methods alteration');
+    $this->drupalGet('xmlrpc_example/alter');
+    $this->submitForm($options, t('Save configuration'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('The configuration options have been saved'));
 
     // After altering the functionality, the add and subtract methods have no
     // limits and should not return any error.
     $edit = ['num1' => 80, 'num2' => 3];
-    $this->drupalPostForm('xmlrpc_example/client', $edit, t('Subtract the integers'));
-    $this->assertText(t('The XML-RPC server returned this response: @num', ['@num' => 77]));
+    $this->drupalGet('xmlrpc_example/client');
+    $this->submitForm($edit, t('Subtract the integers'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('The XML-RPC server returned this response: @num', ['@num' => 77]));
 
     $result = xmlrpc($this->xmlRpcUrl, ['xmlrpc_example.add' => [30, 4]]);
-    $this->assertEqual($result, 34, 'Successfully added 30+4 = 34');
+    $this->assertEquals($result, 34, 'Successfully added 30+4 = 34');
 
     $result = xmlrpc($this->xmlRpcUrl, ['xmlrpc_example.subtract' => [4, 30]]);
-    $this->assertEqual($result, -26, 'Successfully subtracted 4-30 = -26');
+    $this->assertEquals($result, -26, 'Successfully subtracted 4-30 = -26');
   }
 
 }
