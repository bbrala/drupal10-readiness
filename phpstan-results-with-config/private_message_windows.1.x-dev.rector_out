modules/contrib/private_message_windows/private_message_windows.module
modules/contrib/private_message_windows/src/Ajax/PrivateMessageWindowsDeleteThreadCommand.php
modules/contrib/private_message_windows/src/Ajax/PrivateMessageWindowsFillThreadMessagesCommand.php
modules/contrib/private_message_windows/src/Ajax/PrivateMessageWindowsInboxUpdateCommand.php
modules/contrib/private_message_windows/src/Ajax/PrivateMessageWindowsInsertNewMessagesCommand.php
modules/contrib/private_message_windows/src/Ajax/PrivateMessageWindowsInsertOldMessagesCommand.php
modules/contrib/private_message_windows/src/Ajax/PrivateMessageWindowsOpenRecipientWinCommand.php
modules/contrib/private_message_windows/src/Ajax/PrivateMessageWindowsShowUsersCommand.php
modules/contrib/private_message_windows/src/Controller/AjaxController.php
modules/contrib/private_message_windows/src/Form/ModuleSettings.php
modules/contrib/private_message_windows/src/Plugin/Block/PrivateMessageWindowsBlock.php

3 files with changes
====================

1) modules/contrib/private_message_windows/src/Plugin/Block/PrivateMessageWindowsBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\private_message_windows\Plugin\Block;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Access\CsrfTokenGenerator;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Block\BlockPluginInterface;
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Configuration Factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
   /**
    * The private message service.
    *
-   * @var \Drupal\private_message\Service\PrivateMessageServiceInterface
+   * @var PrivateMessageServiceInterface
    */
   protected $privateMessageService;

@@ @@
   /**
    * The CSRF token generator service.
    *
-   * @var \Drupal\Core\Access\CsrfTokenGenerator
+   * @var CsrfTokenGenerator
    */
   protected $csrfToken;

@@ @@
    *   The ID of the plugin.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\Core\Config\ConfigFactory $configFactory
+   * @param ConfigFactory $configFactory
    *   The config factory service.
-   * @param \Drupal\private_message\Service\PrivateMessageServiceInterface $privateMessageService
+   * @param PrivateMessageServiceInterface $privateMessageService
    *   The private message service.
-   * @param \Drupal\Core\Access\CsrfTokenGenerator $csrfToken
+   * @param CsrfTokenGenerator $csrfToken
    *   The CSRF token generator service.
    * @param LanguageManagerInterface $languageManager
    *   Language Manager Service
@@ @@

   /**
    * {@inheritdoc}
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function build() {
     $block = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/private_message_windows/src/Controller/AjaxController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\private_message_windows\Controller;

+use Drupal\Core\Entity\Sql\SqlContentEntityStorage;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The entity manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The private message thread manager.
    *
-   * @var \Drupal\Core\Entity\Sql\SqlContentEntityStorage
+   * @var SqlContentEntityStorage
    */
   protected $threadStorage;

@@ @@
   /**
    * The private message service.
    *
-   * @var \Drupal\private_message\Service\PrivateMessageServiceInterface
+   * @var PrivateMessageServiceInterface
    */
   protected $privateMessageService;

@@ @@
   /**
    * The private message service.
    *
-   * @var \Drupal\private_message\Service\PrivateMessageThreadManagerInterface
+   * @var PrivateMessageThreadManagerInterface
    */
   protected $privateMessageThreadManager;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * Constructs n AjaxController object.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The configuration factory.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\private_message\Service\PrivateMessageServiceInterface $privateMessageService
+   * @param PrivateMessageServiceInterface $privateMessageService
    *   The private message service.
-   * @param \Drupal\private_message\Service\PrivateMessageThreadManagerInterface $privateMessageThreadManager
+   * @param PrivateMessageThreadManagerInterface $privateMessageThreadManager
    *   The private message service.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
    */
   public function __construct(
@@ @@
   /**
    * Creates an Ajax Command with new threads for the private message inbox.
    *
-   * @param Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    *   The response to which any commands should be attached.
    */
   protected function getNewInboxThreads(AjaxResponse $response) {
@@ @@
   /**
    * Load a private message thread to be dynamically inserted into the page.
    *
-   * @param Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    *   The response to which any commands should be attached.
    */
   protected function loadThread(AjaxResponse $response) {
@@ @@
    * @param int $fromId - get message after this
    *
    * @return array
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getThreadMessagesSlice($thread, $count = 0, $fromId=0) {

@@ @@
   /**
    * Creates an Ajax Command containing new private message.
    *
-   * @param Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    *   The response to which any commands should be attached.
    */
   protected function getNewPrivateMessages(AjaxResponse $response) {
@@ @@
   /**
    * Create an Ajax Command containing old private messages threads.
    *
-   * @param Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    *   The response to which any commands should be attached.
    */
   protected function getOldInboxThreads(AjaxResponse $response) {
@@ @@
   /**
    * Add new message and create ajax-command to add new messages to the thread
    *
-   * @param Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    *   The response to which any commands should be attached.
    */
   protected function sendMessage(AjaxResponse $response) {
@@ @@
    *
    * @param AjaxResponse $response
    *   The response to which any commands should be attached.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function newThread(AjaxResponse $response) {
     $current_request = $this->requestStack->getCurrentRequest();
@@ @@
    *
    * @param AjaxResponse $response
    *   The response to which any commands should be attached.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   protected function deleteThread(AjaxResponse $response) {
     $current_request = $this->requestStack->getCurrentRequest();
@@ @@
    *
    * @param AjaxResponse $response
    *   The response to which any commands should be attached.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getOldPrivateMessages(AjaxResponse $response) {
     $current_request = $this->requestStack->getCurrentRequest();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/private_message_windows/private_message_windows.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Link;
 use Drupal\Core\Url;
 use Drupal\field\Entity\FieldConfig;
@@ @@
  * Implements hook_help().
  *
  * @param $route_name
- * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+ * @param RouteMatchInterface $route_match
  *
  * @return string
  */
@@ @@
         'addAnotherUserMsg' => '',
         'userPicture' => '',
         'userSearch' => 1,
-        'modulePath' => drupal_get_path('module', 'private_message_windows'),
+        'modulePath' => \Drupal::service('extension.list.module')->getPath('private_message_windows'),
       ],
     ],
   ];
@@ @@
 /**
  * User thumbnail by user object
  *
- * @param \Drupal\Core\Session\AccountInterface $sourceUser
+ * @param AccountInterface $sourceUser
  *
  * @return File|string
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws EntityStorageException
  */
 function private_message_windows_get_user_thumbnail($sourceUser) {
   $userPictureFld = \Drupal::config('private_message_windows.settings')->get('user_picture_field');
@@ @@

 /**
  * @return File|string
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws EntityStorageException
  */
 function private_message_windows_get_default_user_picture() {
   $userPictureFld = \Drupal::config('private_message_windows.settings')->get('user_picture_field');
@@ @@
  *
  * @param $vars
  *
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws EntityStorageException
  */
 function private_message_windows_preprocess_private_message(&$vars) {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [OK] 3 files have been changed by Rector                                       

