modules/contrib/backup_migrate_drop_box/backup_migrate_drop_box.module
modules/contrib/backup_migrate_drop_box/src/Controller/DropboxBackupController.php
modules/contrib/backup_migrate_drop_box/src/Destination/DropboxDestination.php
modules/contrib/backup_migrate_drop_box/src/Plugin/BackupMigrateDestination/DropboxDestinationPlugin.php
modules/contrib/backup_migrate_drop_box/src/Routing/DropboxRouteSubscriber.php
modules/contrib/backup_migrate_drop_box/tests/src/Functional/LoadTest.php

3 files with changes
====================

1) modules/contrib/backup_migrate_drop_box/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\backup_migrate_drop_box\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/backup_migrate_drop_box/src/Destination/DropboxDestination.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\backup_migrate_drop_box\Destination;

+use Drupal\key\KeyRepository;
+use Drupal\file\FileRepository;
+use Drupal\Core\File\FileSystem;
 use Kunnu\Dropbox\DropboxApp;
 use Kunnu\Dropbox\Dropbox;
 use Kunnu\Dropbox\Models\FileMetadata;
@@ @@
   /**
    * Dropbox Client.
    *
-   * @var \Kunnu\Dropbox\Dropbox
+   * @var Dropbox
    */
   protected $client = NULL;

@@ @@
   /**
    * Key repository service.
    *
-   * @var \Drupal\key\KeyRepository
+   * @var KeyRepository
    */
   protected $keyRepository = NULL;

@@ @@
   /**
    * File repository service.
    *
-   * @var \Drupal\file\FileRepository
+   * @var FileRepository
    */
   protected $fileRepository = NULL;

@@ @@
   /**
    * Filesystem service.
    *
-   * @var \Drupal\Core\File\FileSystem
+   * @var FileSystem
    */
   protected $fileSystem = NULL;

@@ @@
     parent::__construct($config);

     /** @codingStandardsIgnoreStart */
-
     /**
-     * @var \Drupal\key\KeyRepository keyRepository
+     * @var KeyRepository keyRepository
      */
     $this->keyRepository = \Drupal::service('key.repository');

     /**
-     * @var \Drupal\file\FileRepository fileRepository
+     * @var FileRepository fileRepository
      */
     $this->fileRepository = \Drupal::service('file.repository');

     /**
-     * @var \Drupal\Core\File\FileSystem fileSystem
+     * @var FileSystem fileSystem
      */
     $this->fileSystem = \Drupal::service('file_system');

@@ @@
   /**
    * Download backup file.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileInterface $file
+   * @param BackupFileInterface $file
    *   Backup file.
    *
-   * @return \Symfony\Component\HttpFoundation\Response|void
+   * @return Response|void
    *   Returns http file response.
    */
   public function downloadFile(BackupFileInterface $file) {
@@ @@
   /**
    * Get Dropbox Client.
    *
-   * @return \Kunnu\Dropbox\Dropbox|null
+   * @return Dropbox|null
    *
-   * @throws \Kunnu\Dropbox\Exceptions\DropboxClientException
+   * @throws DropboxClientException
    */
   public function getClient(): ?Dropbox {
     // Check client.
@@ @@
   /**
    * @inheritDoc
    *
-   * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException
+   * @throws BackupMigrateException
    */
   protected function saveTheFile(BackupFileReadableInterface $file): ?FileMetadata {
     $dropboxFile = NULL;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/backup_migrate_drop_box/src/Controller/DropboxBackupController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\backup_migrate_drop_box\Controller;

+use Drupal\backup_migrate\Core\Destination\DestinationInterface;
+use Symfony\Component\HttpFoundation\Response;
+use Drupal\backup_migrate\Core\Exception\BackupMigrateException;
 use Drupal\backup_migrate\Drupal\Destination\DrupalBrowserDownloadDestination;
 use Drupal\backup_migrate\Entity\Destination;
 use Drupal\backup_migrate_drop_box\Destination\DropboxDestination;
@@ @@
   /**
    * Backup & migrate destination object.
    *
-   * @var \Drupal\backup_migrate\Core\Destination\DestinationInterface
+   * @var DestinationInterface
    */
   public $destination;

@@ @@
   /**
    * Download a backup via the browser.
    *
-   * @param \Drupal\backup_migrate\Entity\Destination $backup_migrate_destination
+   * @param Destination $backup_migrate_destination
    *   Backup & migrate destination object.
    * @param string $backup_id
    *   Backup & migrate backup file id.
    *
-   * @return \Symfony\Component\HttpFoundation\Response|void
+   * @return Response|void
    *   Return http response to download backup file.
    *
-   * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException
+   * @throws BackupMigrateException
    */
   public function download(Destination $backup_migrate_destination, string $backup_id) {
     $destination = $backup_migrate_destination->getObject();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 3 files have been changed by Rector                                       

