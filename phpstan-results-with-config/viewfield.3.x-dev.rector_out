modules/contrib/viewfield/src/Normalizer/ViewfieldNormalizer.php
modules/contrib/viewfield/src/Plugin/Field/FieldFormatter/ViewfieldFormatterDefault.php
modules/contrib/viewfield/src/Plugin/Field/FieldFormatter/ViewfieldFormatterTitle.php
modules/contrib/viewfield/src/Plugin/Field/FieldType/ViewfieldItem.php
modules/contrib/viewfield/src/Plugin/Field/FieldWidget/ViewfieldWidgetSelect.php
modules/contrib/viewfield/src/Plugin/migrate/field/d7/ViewField.php
modules/contrib/viewfield/src/ViewfieldServiceProvider.php
modules/contrib/viewfield/tests/src/FunctionalJavascript/ViewfieldFormatterTest.php
modules/contrib/viewfield/tests/src/FunctionalJavascript/ViewfieldFunctionalTestBase.php
modules/contrib/viewfield/tests/src/FunctionalJavascript/ViewfieldWidgetTest.php
modules/contrib/viewfield/tests/src/Kernel/ViewfieldKernelTest.php
modules/contrib/viewfield/viewfield.install
modules/contrib/viewfield/viewfield.module

7 files with changes
====================

1) modules/contrib/viewfield/viewfield.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Field\FieldStorageDefinitionInterface;
+use Drupal\Core\Entity\Sql\SqlEntityStorageInterface;
+use Drupal\Core\Entity\Sql\DefaultTableMapping;
+use Drupal\Core\Field\FieldConfigInterface;
 /**
  * @file
  * Install, update and uninstall functions for the viewfield module.
@@ @@
   }

   foreach ($field_storage_configs as $field_storage) {
-    /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface $field_storage */
+    /** @var FieldStorageDefinitionInterface $field_storage */
     $schema = $field_storage->getSchema();
     $field_spec = $schema['columns'][$property];
     $field_spec['type'] = $db_type;
     $entity_type_id = $field_storage->getTargetEntityTypeId();
-    /** @var \Drupal\Core\Entity\Sql\SqlEntityStorageInterface $entity_storage */
+    /** @var SqlEntityStorageInterface $entity_storage */
     $entity_storage = \Drupal::entityTypeManager()->getStorage($entity_type_id);
-    /** @var \Drupal\Core\Entity\Sql\DefaultTableMapping $table_mapping */
+    /** @var DefaultTableMapping $table_mapping */
     $table_mapping = $entity_storage->getTableMapping();
     $tables = [$table_mapping->getDedicatedDataTableName($field_storage)];
     if ($field_storage->isRevisionable()) {
@@ @@
   }

   foreach ($field_storage_configs as $field_storage) {
-    /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface $field_storage */
+    /** @var FieldStorageDefinitionInterface $field_storage */
     $schema = $field_storage->getSchema();
     $field_spec = $schema['columns'][$property];
     $field_spec['type'] = $db_type;
     $entity_type_id = $field_storage->getTargetEntityTypeId();
-    /** @var \Drupal\Core\Entity\Sql\SqlEntityStorageInterface $entity_storage */
+    /** @var SqlEntityStorageInterface $entity_storage */
     $entity_storage = \Drupal::entityTypeManager()->getStorage($entity_type_id);
-    /** @var \Drupal\Core\Entity\Sql\DefaultTableMapping $table_mapping */
+    /** @var DefaultTableMapping $table_mapping */
     $table_mapping = $entity_storage->getTableMapping();
     $tables = [$table_mapping->getDedicatedDataTableName($field_storage)];
     if ($field_storage->isRevisionable()) {
@@ @@
   }

   foreach ($field_configs as $field) {
-    /** @var \Drupal\Core\Field\FieldConfigInterface $field */
+    /** @var FieldConfigInterface $field */
     $default_values = $field->getDefaultValueLiteral();

     foreach ($default_values as $key => $value) {
@@ @@

   $entity_definition_update_manager = \Drupal::entityDefinitionUpdateManager();
   foreach ($field_configs as $field) {
-    /** @var \Drupal\Core\Field\FieldConfigInterface $field */
+    /** @var FieldConfigInterface $field */
     $entity_type = $field->getTargetEntityTypeId();
     $field_name = $field->getName();
     $field_storage_definition = $entity_definition_update_manager->getFieldStorageDefinition($field_name, $entity_type);
     $entity_definition_update_manager->updateFieldStorageDefinition($field_storage_definition);
   }
-}
+}
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/viewfield/tests/src/Kernel/ViewfieldKernelTest.php:27

    ---------- begin diff ----------
@@ @@
    */
   protected $defaultTheme = 'stark';

-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp(); // TODO: Change the autogenerated stub

     FieldStorageConfig::create([
@@ @@
     ])->save();
   }

+  /**
+   * @doesNotPerformAssertions
+   */
   public function testViewfieldItem() {
     // Create the test entity.

@@ @@

   }

+  /**
+   * @doesNotPerformAssertions
+   */
   public function testViewfieldItemDefaultValue() {

   }
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/viewfield/tests/src/FunctionalJavascript/ViewfieldWidgetTest.php:46

    ---------- begin diff ----------
@@ @@
     $viewfield_display = $session->fieldExists('field_view_test[0][display_id]');
     $viewfield_display->setValue('block_1');

-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Test response.
     $session->responseContains('content_test');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/viewfield/tests/src/FunctionalJavascript/ViewfieldFunctionalTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\viewfield\FunctionalJavascript;

+use Drupal\Core\Entity\Entity\EntityViewDisplay;
+use Drupal\Core\Entity\Entity\EntityFormDisplay;
+use Drupal\Core\Session\AccountInterface;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ @@
   /**
    * The Entity View Display for the article_test node type.
    *
-   * @var \Drupal\Core\Entity\Entity\EntityViewDisplay
+   * @var EntityViewDisplay
    */
   protected $display;

@@ @@
   /**
    * The Entity Form Display for the article_test node type.
    *
-   * @var \Drupal\Core\Entity\Entity\EntityFormDisplay
+   * @var EntityFormDisplay
    */
   protected $form;

@@ @@
   /**
    * A user with all permissions.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalCreateContentType(['type' => 'article_test']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/viewfield/tests/src/FunctionalJavascript/ViewfieldFormatterTest.php:42

    ---------- begin diff ----------
@@ @@
     $viewfield_display->setValue('block_1');

     // Submit node form.
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->responseContains('Article 1');
     $this->assertSession()->responseContains('Page 1');
   }
@@ @@
     $viewfield_display->setValue('block_1');

     // Submit node form.
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->pageTextContains('View: (content_test)');
     $this->assertSession()->pageTextContains('Display: Block (block_1)');
   }
@@ @@
     ];

     // Submit node form.
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Test results to verify that only page nodes are shown.
     $this->assertSession()->responseContains('Page 1');
@@ @@
     ];

     // Submit node form.
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Test results to verify that only page nodes are shown.
     $rows = $page->findAll('css', '.views-element-container div .views-row');
@@ @@
     ];

     // Submit node form.
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Test results to verify that only page nodes are shown.
     $this->assertSession()->elementNotExists('css', 'div.field--name-field-view-test');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/viewfield/src/Plugin/Field/FieldWidget/ViewfieldWidgetSelect.php:208

    ---------- begin diff ----------
@@ @@
    *
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @see OptionsWidgetBase::validateElement()
@@ @@
    *
    * @param array $form
    *   The form from which the display IDs are being requested.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the form.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The Ajax response.
    */
   public function ajaxGetDisplayOptions(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/viewfield/src/Plugin/Field/FieldFormatter/ViewfieldFormatterDefault.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\viewfield\Plugin\Field\FieldFormatter;

+use Drupal\views\Plugin\views\pager\None;
 use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@

         // Disable pager, if items_to_display was set.
         if (!empty($items_to_display)) {
-          $view->pager = new \Drupal\views\Plugin\views\pager\None([], '', []);
+          $view->pager = new None([], '', []);
           $view->pager->init($view, $view->display_handler);
           $view->pager->setItemsPerPage($items_to_display);
         }
@@ @@
    *
    * @param string $argument_string
    *   The raw argument string.
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity containing this field.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 7 files have been changed by Rector                                       

