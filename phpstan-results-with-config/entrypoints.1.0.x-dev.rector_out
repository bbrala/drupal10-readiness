modules/contrib/entrypoints/entrypoints.install
modules/contrib/entrypoints/entrypoints.module
modules/contrib/entrypoints/src/Annotation/EntrypointsInputHandler.php
modules/contrib/entrypoints/src/Annotation/EntrypointsRenderer.php
modules/contrib/entrypoints/src/Annotation/EntrypointsRuntime.php
modules/contrib/entrypoints/src/Commands/EntrypointsCommands.php
modules/contrib/entrypoints/src/EntrypointDefinition.php
modules/contrib/entrypoints/src/EntrypointsCleanup.php
modules/contrib/entrypoints/src/EntrypointsInvalidProjectException.php
modules/contrib/entrypoints/src/EntrypointsInvalidUriException.php
modules/contrib/entrypoints/src/EntrypointsLibraries.php
modules/contrib/entrypoints/src/EntrypointsNoDefaultRuntimeAvailableException.php
modules/contrib/entrypoints/src/EntrypointsNotFoundException.php
modules/contrib/entrypoints/src/EntrypointsOutputProtection.php
modules/contrib/entrypoints/src/EntrypointsOutputScan.php
modules/contrib/entrypoints/src/EntrypointsProjectCreate.php
modules/contrib/entrypoints/src/EntrypointsProjectOutdated.php
modules/contrib/entrypoints/src/EntrypointsProjectRegister.php
modules/contrib/entrypoints/src/EntrypointsProjectSource.php
modules/contrib/entrypoints/src/EntrypointsProjectUpdate.php
modules/contrib/entrypoints/src/EntrypointsRebuild.php
modules/contrib/entrypoints/src/EntrypointsRegistry.php
modules/contrib/entrypoints/src/EntrypointsRendererNegotiator.php
modules/contrib/entrypoints/src/EntrypointsRendererNotAllowedException.php
modules/contrib/entrypoints/src/EntrypointsRuntimeNegotiator.php
modules/contrib/entrypoints/src/EntrypointsRuntimeNotAllowedException.php
modules/contrib/entrypoints/src/EntrypointsRuntimeTask.php
modules/contrib/entrypoints/src/EventSubscriber/HtmlResponseSsrEntrypointsSubscriber.php
modules/contrib/entrypoints/src/Form/EntrypointsRebuildForm.php
modules/contrib/entrypoints/src/Form/EntrypointsSettingsForm.php
modules/contrib/entrypoints/src/LocalUriResolver.php
modules/contrib/entrypoints/src/ManifestEntry.php
modules/contrib/entrypoints/src/MessageLogTrait.php
modules/contrib/entrypoints/src/OutputDirectoryTrait.php
modules/contrib/entrypoints/src/Plugin/Block/EntrypointBlock.php
modules/contrib/entrypoints/src/Plugin/EntrypointsInputHandlerPluginBase.php
modules/contrib/entrypoints/src/Plugin/EntrypointsInputHandlerPluginInterface.php
modules/contrib/entrypoints/src/Plugin/EntrypointsInputHandlerPluginManager.php
modules/contrib/entrypoints/src/Plugin/EntrypointsRendererPluginBase.php
modules/contrib/entrypoints/src/Plugin/EntrypointsRendererPluginInterface.php
modules/contrib/entrypoints/src/Plugin/EntrypointsRendererPluginManager.php
modules/contrib/entrypoints/src/Plugin/EntrypointsRuntimePluginBase.php
modules/contrib/entrypoints/src/Plugin/EntrypointsRuntimePluginInterface.php
modules/contrib/entrypoints/src/Plugin/EntrypointsRuntimePluginManager.php
modules/contrib/entrypoints/src/Plugin/RuntimePluginTrait.php
modules/contrib/entrypoints/src/Plugin/entrypoints/InputHandler/AttachedEntrypointsInputHandlerPlugin.php
modules/contrib/entrypoints/src/Plugin/entrypoints/InputHandler/ResponseContentInputHandlerPlugin.php
modules/contrib/entrypoints/src/Plugin/entrypoints/Renderer/NodeRendererPlugin.php
modules/contrib/entrypoints/src/Plugin/entrypoints/Runtime/NpmRuntimePlugin.php
modules/contrib/entrypoints/src/Plugin/entrypoints/Runtime/YarnRuntimePlugin.php
modules/contrib/entrypoints/src/Render/HtmlResponseSsrEntrypointsProcessor.php

30 files with changes
=====================

1) modules/contrib/entrypoints/src/Render/HtmlResponseSsrEntrypointsProcessor.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entrypoints\Render;

+use Drupal\entrypoints\EntrypointDefinition;
+use Drupal\entrypoints\EntrypointsRendererNegotiator;
+use Drupal\entrypoints\Plugin\EntrypointsInputHandlerPluginManager;
+use Drupal\entrypoints\Plugin\EntrypointsInputHandlerPluginInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Render\HtmlResponse;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The HtmlResponseSsrEntrypointsProcessor constructor method.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
@@ @@
   /**
    * Processes the server-side rendering for attached entrypoint libraries.
    *
-   * @param \Drupal\Core\Render\HtmlResponse $response
+   * @param HtmlResponse $response
    *   The response that might contain entrypoint library attachments.
    *
-   * @return \Drupal\Core\Render\HtmlResponse
+   * @return HtmlResponse
    *   The updated response that contains the result of server-side renderings.
    */
   public function processSsrEntrypoints(HtmlResponse $response) {
@@ @@
         // log a corresponding error message, thus no need to log here too.
         continue;
       }
-      /** @var \Drupal\entrypoints\EntrypointDefinition $definition */
+      /** @var EntrypointDefinition $definition */
       $definition = $definitions[$name];
       if ($ssr_definition = $definition->getSsrDefinition()) {
         $ssr_definitions[$ssr_definition->getName()] = $ssr_definition;
@@ @@
    * @param array $names
    *   A list of entrypoint names to load.
    *
-   * @return \Drupal\entrypoints\EntrypointDefinition[]
+   * @return EntrypointDefinition[]
    *   The entrypoint definitions.
    */
   protected static function loadEntrypointDefinitions(array $names) {
@@ @@
   /**
    * Performs server-side rendering for the given entrypoints.
    *
-   * @param \Drupal\entrypoints\EntrypointDefinition[] $definitions
+   * @param EntrypointDefinition[] $definitions
    *   The entrypoint definitions to be rendered on the server-side.
-   * @param \Drupal\Core\Render\HtmlResponse $response
+   * @param HtmlResponse $response
    *   The response that might contain entrypoint library attachments.
    *
-   * @return \Drupal\Core\Render\HtmlResponse
+   * @return HtmlResponse
    *   The updated response that contains the result of server-side renderings.
    */
   protected static function renderSsrEntrypoints(array $definitions, HtmlResponse $response) {
-    /** @var \Drupal\entrypoints\EntrypointsRendererNegotiator $negotiator */
+    /** @var EntrypointsRendererNegotiator $negotiator */
     $negotiator = \Drupal::service('entrypoints.renderer');
     if (!($renderer = $negotiator->get())) {
       if (!empty($definitions)) {
@@ @@
       }
       return $response;
     }
-    /** @var \Drupal\entrypoints\Plugin\EntrypointsInputHandlerPluginManager $input_handler_manager */
+    /** @var EntrypointsInputHandlerPluginManager $input_handler_manager */
     $input_handler_manager = \Drupal::service('plugin.manager.entrypoints.input_handler');
-    /** @var \Drupal\entrypoints\Plugin\EntrypointsInputHandlerPluginInterface[] $input_handlers */
+    /** @var EntrypointsInputHandlerPluginInterface[] $input_handlers */
     $input_handlers = [];
     foreach (array_keys($input_handler_manager->getDefinitions()) as $plugin_id) {
       $input_handlers[$plugin_id] = $input_handler_manager->createInstance($plugin_id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/entrypoints/src/Plugin/entrypoints/Renderer/NodeRendererPlugin.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entrypoints\Plugin\entrypoints\Renderer;

+use Drupal\Core\Cache\CacheBackendInterface;
+use Drupal\Core\State\StateInterface;
+use Drupal\entrypoints\LocalUriResolver;
+use Drupal\Core\Lock\LockBackendInterface;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\entrypoints\EntrypointDefinition;
 use Drupal\entrypoints\Plugin\EntrypointsRendererPluginBase;
@@ @@
   /**
    * The cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;

@@ @@
   /**
    * The state storage.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The local uri resolver.
    *
-   * @var \Drupal\entrypoints\LocalUriResolver
+   * @var LocalUriResolver
    */
   protected $localUriResolver;

@@ @@
   /**
    * The lock backend.
    *
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected $lock;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/entrypoints/src/Plugin/RuntimePluginTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entrypoints\Plugin;

+use Drupal\Core\Logger\LoggerChannelFactoryInterface;
+use Drupal\Component\Serialization\SerializationInterface;
+use Drupal\Core\Logger\LoggerChannelInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\Process\Process;

@@ @@
   /**
    * The logger channel factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;

@@ @@
   /**
    * The JSON serialization service.
    *
-   * @var \Drupal\Component\Serialization\SerializationInterface
+   * @var SerializationInterface
    */
   protected $jsonSerialization;

@@ @@
    * @param string $channel
    *   The channel to get. Default set to the 'entrypoints' channel.
    *
-   * @return \Drupal\Core\Logger\LoggerChannelInterface
+   * @return LoggerChannelInterface
    *   The required logger channel.
    */
   protected function logger($channel = 'entrypoints') {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/entrypoints/src/Plugin/EntrypointsRuntimePluginManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/entrypoints/src/Plugin/EntrypointsRuntimePluginBase.php:30

    ---------- begin diff ----------
@@ @@
    *   (Optional) The timeout in seconds, 0 or NULL for unlimited time. The
    *   limitation factor might be cut to the current maximum execution time.
    *
-   * @return \Symfony\Component\Process\Process
+   * @return Process
    *   The wrapped process object, ready to be executed.
    */
   protected function buildExecutableProcess(array $arguments, $cwd = NULL, array $env = NULL, $input = NULL, $timeout = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/entrypoints/src/Plugin/EntrypointsRendererPluginManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/entrypoints/src/Plugin/EntrypointsRendererPluginInterface.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * Performs server-side rendering for the given entrypoint and input.
    *
-   * @param \Drupal\entrypoints\EntrypointDefinition $definition
+   * @param EntrypointDefinition $definition
    *   The entrypoint definition that contains 'ssr' assets for the rendering.
    * @param array $input
    *   An array that contains input, which will be passed to the rendering
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/entrypoints/src/Plugin/EntrypointsRendererPluginBase.php:35

    ---------- begin diff ----------
@@ @@
    *   (Optional) The timeout in seconds, 0 or NULL for unlimited time. The
    *   limitation factor might be cut to the current maximum execution time.
    *
-   * @return \Symfony\Component\Process\Process
+   * @return Process
    *   The wrapped process object, ready to be executed.
    */
   protected function buildExecutableProcess(array $arguments, $cwd = NULL, array $env = NULL, $input = NULL, $timeout = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/entrypoints/src/Plugin/EntrypointsInputHandlerPluginManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/entrypoints/src/Plugin/EntrypointsInputHandlerPluginInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entrypoints\Plugin;

+use Drupal\Core\Render\HtmlResponse;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\entrypoints\EntrypointDefinition;

@@ @@
    *   An array that contains input, which will be passed to the rendering
    *   process as "DrupalServer" Javascript object. The values can be changed
    *   and extended by further data that might be needed within the SSR process.
-   * @param \Drupal\entrypoints\EntrypointDefinition[] &$definitions
+   * @param EntrypointDefinition[] $definitions
    *   All entrypoint definitions that are to be rendered on the server-side.
-   * @param \Drupal\entrypoints\Plugin\EntrypointsRendererPluginInterface &$renderer
+   * @param EntrypointsRendererPluginInterface $renderer
    *   The renderer plugin that will be used for rendering.
-   * @param \Drupal\Core\Render\HtmlResponse|mixed &$context
+   * @param HtmlResponse|mixed $context
    *   Further parameter that might be relevant. For the response build chain,
    *   this parameter is the current response object.
    */
@@ @@
    *   An array that contains input, which will be passed to the rendering
    *   process as "DrupalServer" Javascript object. The values can be changed
    *   and extended by further data that might be needed within the SSR process.
-   * @param \Drupal\entrypoints\EntrypointDefinition $definition
+   * @param EntrypointDefinition $definition
    *   The entrypoint that is about to be server-side rendered.
-   * @param \Drupal\entrypoints\Plugin\EntrypointsRendererPluginInterface $renderer
+   * @param EntrypointsRendererPluginInterface $renderer
    *   The renderer plugin that will be used for rendering.
-   * @param \Drupal\Core\Render\HtmlResponse|mixed &$context
+   * @param HtmlResponse|mixed $context
    *   Further parameter that might be relevant. For the response build chain,
    *   this parameter is the current response object.
    */
@@ @@
    *   contains updated values regards the given $input argument. The value is
    *   FALSE if the renderer execution did not deliver any result, but is not
    *   considered to be an error and thus is not worth throwing an exception.
-   * @param \Drupal\entrypoints\EntrypointDefinition $definition
+   * @param EntrypointDefinition $definition
    *   The entrypoint that just got rendered.
-   * @param \Drupal\entrypoints\Plugin\EntrypointsRendererPluginInterface $renderer
+   * @param EntrypointsRendererPluginInterface $renderer
    *   The renderer plugin that was used for rendering.
-   * @param \Drupal\Core\Render\HtmlResponse|mixed &$context
+   * @param HtmlResponse|mixed $context
    *   Further parameter that might be relevant. For the response build chain,
    *   this parameter is the current response object.
    */
@@ @@
    *   An array that contains generated output. This argument is not being used
    *   from the outside anymore, but it could be used for passing information
    *   between input handler plugins within their finishing routines.
-   * @param \Drupal\entrypoints\EntrypointDefinition[] &$definitions
+   * @param EntrypointDefinition[] $definitions
    *   All entrypoint definitions that got rendered on the server-side.
-   * @param \Drupal\entrypoints\Plugin\EntrypointsRendererPluginInterface &$renderer
+   * @param EntrypointsRendererPluginInterface $renderer
    *   The renderer plugin that was used for rendering.
-   * @param \Drupal\Core\Render\HtmlResponse|mixed &$context
+   * @param HtmlResponse|mixed $context
    *   Further parameter that might be relevant. For the response build chain,
    *   this parameter is the current response object.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/entrypoints/src/Plugin/EntrypointsInputHandlerPluginBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entrypoints\Plugin;

+use Drupal\Core\Logger\LoggerChannelFactoryInterface;
+use Drupal\Component\Serialization\SerializationInterface;
+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\entrypoints\EntrypointDefinition;
@@ @@
   /**
    * The logger channel factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;

@@ @@
   /**
    * The JSON serialization service.
    *
-   * @var \Drupal\Component\Serialization\SerializationInterface
+   * @var SerializationInterface
    */
   protected $jsonSerialization;

@@ @@
    * @param string $channel
    *   The channel to get. Default set to the 'entrypoints' channel.
    *
-   * @return \Drupal\Core\Logger\LoggerChannelInterface
+   * @return LoggerChannelInterface
    *   The required logger channel.
    */
   protected function logger($channel = 'entrypoints') {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/entrypoints/src/Plugin/Block/EntrypointBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entrypoints\Plugin\Block;

+use Drupal\entrypoints\EntrypointsRegistry;
+use Drupal\Core\Plugin\Context\ContextRepositoryInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\Core\Render\BubbleableMetadata;
+use Drupal\Core\Plugin\Context\EntityContext;
+use Drupal\Core\Entity\EntityTypeInterface;
+use Symfony\Component\Serializer\Serializer;
+use Drupal\Core\Render\Renderer;
 use Drupal\Component\Plugin\Exception\ContextException;
 use Drupal\Component\Utility\Crypt;
 use Drupal\Core\Block\BlockBase;
@@ @@
   /**
    * The entrypoints registry.
    *
-   * @var \Drupal\entrypoints\EntrypointsRegistry
+   * @var EntrypointsRegistry
    */
   protected $entrypointsRegistry;

@@ @@
   /**
    * The context repository.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
         $context_info->value = $renderer->executeInRenderContext($render_context, function () use (&$text_build, $renderer) {
           return trim((string) $renderer->render($text_build));
         });
-        /** @var \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata */
+        /** @var BubbleableMetadata $bubbleable_metadata */
         $bubbleable_metadata = $render_context->pop();
         $bubbleable_metadata->applyTo($build);
       }
@@ @@
   /**
    * Get allowed entrypoint options for the given form state.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
   /**
    * Get allowed context options for the given form state.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
     // When using Layout Builder blocks, make sure the "entity being viewed"
     // context is at first place on the selection list.
     if (isset($contexts['layout_builder.entity'])) {
-      /** @var \Drupal\Core\Plugin\Context\EntityContext $entity_context */
+      /** @var EntityContext $entity_context */
       $entity_context = $contexts['layout_builder.entity'];
       $label = new TranslatableMarkup('@entity being viewed', [
         '@entity' => $entity_context->getContextValue()->getEntityType()->getSingularLabel(),
@@ @@
       if (!(reset($data_type) === 'entity') || !($entity_type_id = next($data_type))) {
         continue;
       }
-      /** @var \Drupal\Core\Entity\EntityTypeInterface $type_definition */
+      /** @var EntityTypeInterface $type_definition */
       $type_definition = $this->entityTypeManager->getDefinition($entity_type_id);
       if ($type_definition instanceof ContentEntityTypeInterface) {
         $options[$context_id] = $context->getContextDefinition()->getLabel();
@@ @@
   /**
    * Get the serializer service.
    *
-   * @return \Symfony\Component\Serializer\Serializer
+   * @return Serializer
    *   The serializer service.
    */
   protected static function getSerializer() {
@@ @@
   /**
    * Get the renderer service.
    *
-   * @return \Drupal\Core\Render\Renderer
+   * @return Renderer
    *   The renderer service.
    */
   protected static function getRenderer() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/entrypoints/src/MessageLogTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entrypoints;

+use Drupal\Core\Logger\LoggerChannelFactoryInterface;
+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Core\Logger\RfcLogLevel;
 use Symfony\Component\Console\Style\SymfonyStyle;

@@ @@
   /**
    * The logger channel factory, if given.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory = NULL;

@@ @@
   /**
    * The io instance, if given.
    *
-   * @var \Symfony\Component\Console\Style\SymfonyStyle
+   * @var SymfonyStyle
    */
   protected $io = NULL;

@@ @@
    * @param string $channel
    *   The channel to get. Default set to the 'entrypoints' channel.
    *
-   * @return \Drupal\Core\Logger\LoggerChannelInterface
+   * @return LoggerChannelInterface
    *   The required logger channel.
    */
   protected function logger($channel = 'entrypoints') {
@@ @@
   /**
    * Set the io instance.
    *
-   * @param \Symfony\Component\Console\Style\SymfonyStyle $io
+   * @param SymfonyStyle $io
    *   The io instance to set.
    */
   public function setIo(SymfonyStyle $io = NULL) {
@@ @@
   /**
    * Get the logger factory.
    *
-   * @return \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @return LoggerChannelFactoryInterface
    *   The logger factory.
    */
   protected static function loggerFactory() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/entrypoints/src/LocalUriResolver.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The stream wrapper manager.
    *
-   * @var Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;

@@ @@
   /**
    * The LocalUriResolver service constructor.
    *
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *   The stream wrapper manager.
    */
   public function __construct(StreamWrapperManagerInterface $stream_wrapper_manager) {
@@ @@
    * @return string
    *   The realpath as string.
    *
-   * @throws \Drupal\entrypoints\EntrypointsInvalidUriException
+   * @throws EntrypointsInvalidUriException
    *   If the given uri is not valid, e.g. when it's not a local stream wrapper.
    */
   public function getRealpath($uri) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


15) modules/contrib/entrypoints/src/Form/EntrypointsSettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entrypoints\Form;

+use Drupal\entrypoints\Plugin\EntrypointsRuntimePluginManager;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\MessageCommand;
@@ @@
   /**
    * The runtime negotiator.
    *
-   * @var \Drupal\entrypoints\EntrypointsRuntimeNegotiator
+   * @var EntrypointsRuntimeNegotiator
    */
   protected $runtimeNegotiator;

@@ @@
   /**
    * The server-side renderer negotiator.
    *
-   * @var \Drupal\entrypoints\EntrypointsRendererNegotiator
+   * @var EntrypointsRendererNegotiator
    */
   protected $rendererNegotiator;

@@ @@
   /**
    * The entrypoints output scan service.
    *
-   * @var \Drupal\entrypoints\EntrypointsOutputScan
+   * @var EntrypointsOutputScan
    */
   protected $outputScan;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
    *
    * @param array &$form
    *   The form array that is being passed as reference.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The corresponding form state.
    * @param array $project
    *   (Optional) The project in scope. An empty array indicates form elements
@@ @@
    *
    * @param array &$element
    *   The part of the form where to build the elements, passed as reference.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The corresponding form state.
    * @param array $settings
    *   (Optional) The entrypoint settings in scope. An empty array indicates
@@ @@
    *   The not available runtimes with translated label info.
    */
   protected function getRuntimeOptionsNotAvailable() {
-    /** @var \Drupal\entrypoints\Plugin\EntrypointsRuntimePluginManager $plugin_manager */
+    /** @var EntrypointsRuntimePluginManager $plugin_manager */
     $plugin_manager = \Drupal::service('plugin.manager.entrypoints.runtime');
     $available = $this->runtimeNegotiator->getRuntimesAvailable();
     $not_available = [];
@@ @@
   /**
    * Set the runtime negotiator.
    *
-   * @param \Drupal\entrypoints\EntrypointsRuntimeNegotiator $negotiator
+   * @param EntrypointsRuntimeNegotiator $negotiator
    *   The runtime negotiator.
    */
   public function setRuntimeNegotiator(EntrypointsRuntimeNegotiator $negotiator) {
@@ @@
   /**
    * Set the server-side renderer negotiator.
    *
-   * @param \Drupal\entrypoints\EntrypointsRendererNegotiator $negotiator
+   * @param EntrypointsRendererNegotiator $negotiator
    *   The server-side renderer negotiator.
    */
   public function setRendererNegotiator(EntrypointsRendererNegotiator $negotiator) {
@@ @@
   /**
    * Set the entrypoints output scan service.
    *
-   * @param \Drupal\entrypoints\EntrypointsOutputScan $output_scan
+   * @param EntrypointsOutputScan $output_scan
    *   The output scan service.
    */
   public function setOutputScan(EntrypointsOutputScan $output_scan) {
@@ @@
   /**
    * Set the module handler.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function setModuleHandler(ModuleHandlerInterface $module_handler) {
@@ @@
    *
    * @param array $form
    *   The form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The corresponding form state.
    */
   public function projectAddSubmit(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The corresponding form state.
    */
   public function overrideAddSubmit(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The corresponding form state.
    */
   public function overrideRemoveSubmit(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The corresponding form state.
    */
   public function projectRemoveSubmit(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The corresponding form state.
    */
   public function ajaxRefresh(array $form, FormStateInterface $form_state) {
@@ @@
    *   'entrypoints.settings.projects'.
    * @param int $index
    *   The index position of the project.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The project summary.
    */
   protected function getProjectSummary(array $project, $index, FormStateInterface $form_state) {
@@ @@
   /**
    * Updates the configuration values with the current form state values.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   protected function updateConfigValues(FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form_key
    *   The form key to check for.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/entrypoints/src/EventSubscriber/HtmlResponseSsrEntrypointsSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entrypoints\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Render\HtmlResponse;
 use Drupal\entrypoints\Render\HtmlResponseSsrEntrypointsProcessor;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
@@ @@
   /**
    * The server-side rendering processor for entrypoint libraries.
    *
-   * @var \Drupal\entrypoints\Render\HtmlResponseSsrEntrypointsProcessor
+   * @var HtmlResponseSsrEntrypointsProcessor
    */
   protected $ssrEntrypointsProcessor;

@@ @@
   /**
    * The event subscriber constructor.
    *
-   * @param \Drupal\entrypoints\Render\HtmlResponseSsrEntrypointsProcessor $ssr_entrypoints_processor
+   * @param HtmlResponseSsrEntrypointsProcessor $ssr_entrypoints_processor
    *   The server-side rendering processor for entrypoint libraries.
    */
   public function __construct(HtmlResponseSsrEntrypointsProcessor $ssr_entrypoints_processor) {
@@ @@
   /**
    * Executes SSR entrypoints and updates the response content accordingly.
    *
-   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
+   * @param ResponseEvent $event
    *   The event to process.
    */
   public function onRespond($event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


17) modules/contrib/entrypoints/src/EntrypointsRuntimeTask.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entrypoints;

+use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;

 /**
@@ @@
   /**
    * The runtime negotiator service.
    *
-   * @var \Drupal\entrypoints\EntrypointsRuntimeNegotiator
+   * @var EntrypointsRuntimeNegotiator
    */
   protected $runtime;

@@ @@
   /**
    * The local uri resolver.
    *
-   * @var \Drupal\entrypoints\LocalUriResolver
+   * @var LocalUriResolver
    */
   protected $localUriResolver;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The EntrypointsRuntimeTask constructor.
    *
-   * @param \Drupal\entrypoints\EntrypointsRuntimeNegotiator $runtime
+   * @param EntrypointsRuntimeNegotiator $runtime
    *   The runtime negotiator service.
-   * @param \Drupal\entrypoints\LocalUriResolver $local_uri_resolver
+   * @param LocalUriResolver $local_uri_resolver
    *   The local uri resolver.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function __construct(EntrypointsRuntimeNegotiator $runtime, LocalUriResolver $local_uri_resolver, ConfigFactoryInterface $config_factory) {
@@ @@
    * @param string $id
    *   The config ID. By default, the entrypoints settings ID will be used.
    *
-   * @return \Drupal\Core\Config\Config
+   * @return Config
    *   The configuration object.
    */
   protected function config($id = 'entrypoints.settings') {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


18) modules/contrib/entrypoints/src/EntrypointsRuntimeNegotiator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entrypoints;

+use Drupal\entrypoints\Plugin\EntrypointsRuntimePluginInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
@@ @@
   /**
    * The manager for entrypoint runtime plugins.
    *
-   * @var \Drupal\entrypoints\Plugin\EntrypointsRuntimePluginManager
+   * @var EntrypointsRuntimePluginManager
    */
   protected $pluginManager;

@@ @@
   /**
    * The logger channel factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;

@@ @@
   /**
    * The cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;

@@ @@
   /**
    * The EntrypointsRuntimeNegotiator constructor.
    *
-   * @param \Drupal\entrypoints\Plugin\EntrypointsRuntimePluginManager $plugin_manager
+   * @param EntrypointsRuntimePluginManager $plugin_manager
    *   The manager for entrypoint runtime plugins.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger channel factory.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend.
    * @param array $build_modes
    *   A list of allowed compilation build modes, keyed by machine name.
@@ @@
    * @param string $runtime
    *   The runtime to set.
    *
-   * @throws \Drupal\entrypoints\EntrypointsRuntimeNotAllowedException
+   * @throws EntrypointsRuntimeNotAllowedException
    *   If the given runtime is not allowed.
    */
   public function setDefaultRuntime($runtime) {
@@ @@
    *   (Optional) The runtime to use. Skip this argument to use the currently
    *   configured or previously set default runtime.
    *
-   * @return \Drupal\entrypoints\Plugin\EntrypointsRuntimePluginInterface|null
+   * @return EntrypointsRuntimePluginInterface|null
    *   The plugin of the runtime, or NULL if not configured or not available.
    */
   public function get($runtime = NULL) {
@@ @@
    * @param string $plugin_id
    *   The plugin ID.
    *
-   * @return \Drupal\entrypoints\Plugin\EntrypointsRuntimePluginInterface
+   * @return EntrypointsRuntimePluginInterface
    *   The runtime plugin instance.
    */
   protected function getPlugin($plugin_id) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


19) modules/contrib/entrypoints/src/EntrypointsRendererNegotiator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entrypoints;

+use Drupal\entrypoints\Plugin\EntrypointsRendererPluginInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
@@ @@
   /**
    * The manager for entrypoint server-side renderer plugins.
    *
-   * @var \Drupal\entrypoints\Plugin\EntrypointsRendererPluginManager
+   * @var EntrypointsRendererPluginManager
    */
   protected $pluginManager;

@@ @@
   /**
    * The logger channel factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;

@@ @@
   /**
    * The cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;

@@ @@
   /**
    * The EntrypointsRendererNegotiator constructor.
    *
-   * @param \Drupal\entrypoints\Plugin\EntrypointsRendererPluginManager $plugin_manager
+   * @param EntrypointsRendererPluginManager $plugin_manager
    *   The manager for entrypoint server-side renderer plugins.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger channel factory.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend.
    * @param array $renderers
    *   A list of allowed renderers.
@@ @@
    * @param string $renderer
    *   The renderer to set.
    *
-   * @throws \Drupal\entrypoints\EntrypointsRendererNotAllowedException
+   * @throws EntrypointsRendererNotAllowedException
    *   If the given renderer is not allowed.
    */
   public function setDefaultRenderer($renderer) {
@@ @@
    *   (Optional) The renderer to use. Skip this argument to use the currently
    *   configured or previously set default renderer.
    *
-   * @return \Drupal\entrypoints\Plugin\EntrypointsRendererPluginInterface|null
+   * @return EntrypointsRendererPluginInterface|null
    *   The plugin of the renderer, or NULL if not configured or not available.
    */
   public function get($renderer = NULL) {
@@ @@
    * @param string $plugin_id
    *   The plugin ID.
    *
-   * @return \Drupal\entrypoints\Plugin\EntrypointsRendererPluginInterface
+   * @return EntrypointsRendererPluginInterface
    *   The server-side renderer plugin instance.
    */
   protected function getPlugin($plugin_id) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


20) modules/contrib/entrypoints/src/EntrypointsRegistry.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The cache backend for entrypoints.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;

@@ @@
   /**
    * The cache backend for manifest entries.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackendManifest;

@@ @@
   /**
    * The state storage.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The logger channel factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;

@@ @@
   /**
    * The EntrypointsRegistry constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend for entrypoints.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_manifest
+   * @param CacheBackendInterface $cache_manifest
    *   The cache backend for manifest entries.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state storage.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger channel factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory, CacheBackendInterface $cache, CacheBackendInterface $cache_manifest, StateInterface $state, LoggerChannelFactoryInterface $logger_factory) {
@@ @@
    *   this method does not throw an exception when certain entrypoint names
    *   could not be loaded. Default is set to TRUE.
    *
-   * @return \Drupal\entrypoints\EntrypointDefinition[]
+   * @return EntrypointDefinition[]
    *   The entrypoint instances that match the given criteria, keyed by
    *   entrypoint name.
    */
@@ @@
    *   See the 'entrypoints.schema.yml' for available settings within the
    *   'entrypoints_settings' type definition.
    *
-   * @return \Drupal\entrypoints\EntrypointDefinition[]
+   * @return EntrypointDefinition[]
    *   The entrypoint instances that match the given criteria.
    */
   public function getDefinitionsBySettings(array $settings) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


21) modules/contrib/entrypoints/src/EntrypointsProjectSource.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The local uri resolver.
    *
-   * @var \Drupal\entrypoints\LocalUriResolver
+   * @var LocalUriResolver
    */
   protected $localUriResolver;

@@ @@
   /**
    * The JSON serialization service, only available at the service instance.
    *
-   * @var \Drupal\Component\Serialization\SerializationInterface
+   * @var SerializationInterface
    */
   protected $jsonSerialization;

@@ @@
    * Do not call this method directly,
    * use \Drupal::service('entrypoints.source') instead.
    *
-   * @param \Drupal\entrypoints\LocalUriResolver $local_uri_resolver
+   * @param LocalUriResolver $local_uri_resolver
    *   The local uri resolver.
-   * @param \Drupal\Component\Serialization\SerializationInterface $json_serialization
+   * @param SerializationInterface $json_serialization
    *   The JSON serialization service.
    *
    * @return \Drupal\entrypoints\EntrypointsProjectSource
@@ @@
    * @return $this
    *   The instance itself.
    *
-   * @throws \Drupal\entrypoints\EntrypointsInvalidUriException
+   * @throws EntrypointsInvalidUriException
    *   If the given uri is not valid, e.g. when it's not a local stream wrapper.
-   * @throws \Drupal\entrypoints\EntrypointsInvalidProjectException
+   * @throws EntrypointsInvalidProjectException
    *   If the given uri points to an invalid project, e.g. with a malformed
    *   package.json file.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


22) modules/contrib/entrypoints/src/EntrypointsProjectCreate.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The stream wrapper manager.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The project register service.
    *
-   * @var \Drupal\entrypoints\EntrypointsProjectRegister
+   * @var EntrypointsProjectRegister
    */
   protected $projectRegister;

@@ @@
   /**
    * Set the stream wrapper manager.
    *
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *   The stream wrapper manager.
    */
   public function setStreamWrapperManager(StreamWrapperManagerInterface $stream_wrapper_manager) {
@@ @@
   /**
    * Set the file system service.
    *
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
    */
   public function setFileSystem(FileSystemInterface $file_system) {
@@ @@
   /**
    * Set the module handler.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function setModuleHandler(ModuleHandlerInterface $module_handler) {
@@ @@
   /**
    * Set the project register service.
    *
-   * @param \Drupal\entrypoints\EntrypointsProjectRegister $project_register
+   * @param EntrypointsProjectRegister $project_register
    *   The project register service.
    */
   public function setProjectRegister(EntrypointsProjectRegister $project_register) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/entrypoints/src/EntrypointsOutputScan.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The local uri resolver.
    *
-   * @var \Drupal\entrypoints\LocalUriResolver
+   * @var LocalUriResolver
    */
   protected $localUriResolver;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The JSON serialization service.
    *
-   * @var \Drupal\Component\Serialization\SerializationInterface
+   * @var SerializationInterface
    */
   protected $jsonSerialization;

@@ @@
   /**
    * The EntrypointsOutputScan service constructor.
    *
-   * @param \Drupal\entrypoints\LocalUriResolver $local_uri_resolver
+   * @param LocalUriResolver $local_uri_resolver
    *   The local uri resolver.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
-   * @param \Drupal\Component\Serialization\SerializationInterface $json_serialization
+   * @param SerializationInterface $json_serialization
    *   The JSON serialization service.
    */
   public function __construct(LocalUriResolver $local_uri_resolver, FileSystemInterface $file_system, SerializationInterface $json_serialization) {
@@ @@
    *   are not license-related definition-related files (like manifest.json and
    *   entrypoints.json).
    *
-   * @throws \Drupal\entrypoints\EntrypointsInvalidUriException
+   * @throws EntrypointsInvalidUriException
    *   In case the given uri does not resolve properly to an existing
    *   entrypoints output directory.
-   * @throws \Drupal\entrypoints\EntrypointsNotFoundException
+   * @throws EntrypointsNotFoundException
    *   In case given definitions point to missing asset files, or the
    *   entrypoints.json file itself either does not exist, is not readable
    *   or is malformed.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


24) modules/contrib/entrypoints/src/EntrypointsLibraries.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The entrypoints registry.
    *
-   * @var \Drupal\entrypoints\EntrypointsRegistry
+   * @var EntrypointsRegistry
    */
   protected $registry;

@@ @@
   /**
    * The entrypoints libraries service constructor.
    *
-   * @param \Drupal\entrypoints\EntrypointsRegistry $registry
+   * @param EntrypointsRegistry $registry
    *   The entrypoints registry.
    */
   public function __construct(EntrypointsRegistry $registry) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


25) modules/contrib/entrypoints/src/EntrypointsCleanup.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The entrypoints registry service.
    *
-   * @var \Drupal\entrypoints\EntrypointsRegistry
+   * @var EntrypointsRegistry
    */
   protected $registry;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * The state storage.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The EntrypointsCleanup service constructor.
    *
-   * @param \Drupal\entrypoints\EntrypointsRegistry $registry
+   * @param EntrypointsRegistry $registry
    *   The entrypoints registry service.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state storage.
    */
   public function __construct(EntrypointsRegistry $registry, FileSystemInterface $file_system, TimeInterface $time, StateInterface $state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


26) modules/contrib/entrypoints/src/Commands/EntrypointsCommands.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entrypoints\Commands;

+use Drupal\entrypoints\EntrypointsProjectCreate;
+use Drupal\entrypoints\EntrypointsProjectRegister;
+use Drupal\entrypoints\EntrypointsCleanup;
+use Drupal\entrypoints\EntrypointsRebuild;
+use Drupal\entrypoints\EntrypointsProjectUpdate;
+use Drupal\entrypoints\EntrypointsProjectOutdated;
+use Drupal\Core\Config\Config;
 use Drush\Commands\DrushCommands;
 use Consolidation\OutputFormatters\StructuredData\RowsOfFields;
 use Drupal\Core\Logger\RfcLogLevel;
@@ @@
    * @param array $options
    *   An associative array of options.
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return RowsOfFields
    *   The rows of fields.
    *
    * @option production
@@ @@
    * @param array $options
    *   An associative array of options.
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return RowsOfFields
    *   The rows of fields.
    *
    * @option enforce-all
@@ @@
   /**
    * Get the project creation service.
    *
-   * @return \Drupal\entrypoints\EntrypointsProjectCreate
+   * @return EntrypointsProjectCreate
    *   The project creation service.
    */
   protected static function projectCreateService() {
@@ @@
   /**
    * Get the project register service.
    *
-   * @return \Drupal\entrypoints\EntrypointsProjectRegister
+   * @return EntrypointsProjectRegister
    *   The project register service.
    */
   protected static function projectRegisterService() {
@@ @@
   /**
    * Get the output cleanup service.
    *
-   * @return \Drupal\entrypoints\EntrypointsCleanup
+   * @return EntrypointsCleanup
    *   The output cleanup service.
    */
   protected static function cleanupService() {
@@ @@
   /**
    * Get the rebuild service.
    *
-   * @return \Drupal\entrypoints\EntrypointsRebuild
+   * @return EntrypointsRebuild
    *   The rebuild service.
    */
   protected static function rebuildService() {
@@ @@
   /**
    * Get the update service.
    *
-   * @return \Drupal\entrypoints\EntrypointsProjectUpdate
+   * @return EntrypointsProjectUpdate
    *   The update service.
    */
   protected static function updateService() {
@@ @@
   /**
    * Get the check for outdated packages service.
    *
-   * @return \Drupal\entrypoints\EntrypointsProjectOutdated
+   * @return EntrypointsProjectOutdated
    *   The outdated check service.
    */
   protected static function outdatedCheckService() {
@@ @@
   /**
    * Get the editable entrypoints configuration object.
    *
-   * @return \Drupal\Core\Config\Config
+   * @return Config
    *   The editable configuration object.
    */
   protected static function entrypointsConfig() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/entrypoints/src/Annotation/EntrypointsRuntime.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entrypoints\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the runtime plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


28) modules/contrib/entrypoints/src/Annotation/EntrypointsRenderer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entrypoints\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the renderer plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


29) modules/contrib/entrypoints/src/Annotation/EntrypointsInputHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entrypoints\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the handler plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


30) modules/contrib/entrypoints/entrypoints.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\entrypoints\EntrypointsRuntimeNegotiator;
+use Drupal\entrypoints\EntrypointsProjectOutdated;
 /**
  * @file
  * The entrypoints install file.
@@ @@
   $requirements = [];

   if ($default_build_mode = $config->get('build_mode')) {
-    /** @var \Drupal\entrypoints\EntrypointsRuntimeNegotiator $runtime */
+    /** @var EntrypointsRuntimeNegotiator $runtime */
     $runtime = \Drupal::service('entrypoints.runtime');
     $build_modes_available = $runtime->getBuildModesAvailable();
     $build_info_level = REQUIREMENT_INFO;
@@ @@
     $source_info_level = REQUIREMENT_INFO;
     $source_value = t('Up to date');

-    /** @var \Drupal\entrypoints\EntrypointsProjectOutdated $outdated_service */
+    /** @var EntrypointsProjectOutdated $outdated_service */
     $outdated_service = \Drupal::service('entrypoints.project_outdated');
     $outdated_info = $outdated_service->getOutdatedPackages();
     if (FALSE === $outdated_info) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 30 files have been changed by Rector                                      

