diff --git a/modules/opigno_onesignal/opigno_onesignal.module b/modules/opigno_onesignal/opigno_onesignal.module
index 9be6e84..29d7569 100644
--- a/modules/opigno_onesignal/opigno_onesignal.module
+++ b/modules/opigno_onesignal/opigno_onesignal.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\opigno_onesignal\Config\ConfigManager;
+use Drupal\Core\Entity\EntityInterface;
 /**
  * @file
  * Contains opigno_onesignal.module.
@@ -22,7 +24,7 @@ function opigno_onesignal_page_attachments(&$attachments) {
   if ($account->isAnonymous()) {
     return;
   }
-  /** @var \Drupal\opigno_onesignal\Config\ConfigManager $config_manager */
+  /** @var ConfigManager $config_manager */
   $config_manager = \Drupal::service('opigno_onesignal.config_manager');
   if (!$config_manager->getAppId()) {
     return;
@@ -87,7 +89,7 @@ function opigno_onesignal_page_attachments(&$attachments) {
 /**
  * Implements hook_ENTITY_TYPE_insert().
  */
-function opigno_onesignal_opigno_notification_insert(Drupal\Core\Entity\EntityInterface $notification) {
+function opigno_onesignal_opigno_notification_insert(EntityInterface $notification) {
   /* @var \Drupal\opigno_notification\Entity\OpignoNotification $notification */
   $params = [];
   $params['title'] = 'New notification:';
@@ -110,7 +112,7 @@ function opigno_onesignal_opigno_notification_insert(Drupal\Core\Entity\EntityIn
 /**
  * Implements hook_ENTITY_TYPE_presave().
  */
-function opigno_onesignal_private_message_thread_presave(Drupal\Core\Entity\EntityInterface $private_message_thread) {
+function opigno_onesignal_private_message_thread_presave(EntityInterface $private_message_thread) {
   // Skip threads that are created/updated from the command line.
   if (PHP_SAPI === 'cli') {
     return;
@@ -197,7 +199,7 @@ function opigno_onesignal_private_message_thread_presave(Drupal\Core\Entity\Enti
 /**
  * Implements hook_ENTITY_TYPE_insert().
  */
-function opigno_onesignal_opigno_calendar_event_insert(Drupal\Core\Entity\EntityInterface $event) {
+function opigno_onesignal_opigno_calendar_event_insert(EntityInterface $event) {
   /* @var \Drupal\opigno_calendar_event\Entity\CalendarEvent $event */
   $params = [];
   $params['title'] = 'New event';
diff --git a/modules/opigno_onesignal/src/Config/ConfigManager.php b/modules/opigno_onesignal/src/Config/ConfigManager.php
index 3f732db..ad128d7 100644
--- a/modules/opigno_onesignal/src/Config/ConfigManager.php
+++ b/modules/opigno_onesignal/src/Config/ConfigManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\opigno_onesignal\Config;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactory;
 
 /**
@@ -14,14 +15,14 @@ class ConfigManager implements ConfigManagerInterface {
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   private $config;
   
   /**
    * ConfigManager constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactory $configFactory
+   * @param ConfigFactory $configFactory
    *   The config factory service.
    */
   public function __construct(ConfigFactory $configFactory) {
diff --git a/modules/opigno_onesignal/src/Form/OneSignalConfigForm.php b/modules/opigno_onesignal/src/Form/OneSignalConfigForm.php
index ae109be..8c5f437 100644
--- a/modules/opigno_onesignal/src/Form/OneSignalConfigForm.php
+++ b/modules/opigno_onesignal/src/Form/OneSignalConfigForm.php
@@ -16,16 +16,16 @@ class OneSignalConfigForm extends ConfigFormBase {
   /**
    * The config manager service.
    *
-   * @var \Drupal\opigno_onesignal\Config\ConfigManagerInterface
+   * @var ConfigManagerInterface
    */
   private $configManager;
   
   /**
    * OneSignalConfigForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The factory for configuration objects.
-   * @param \Drupal\opigno_onesignal\Config\ConfigManagerInterface $configManager
+   * @param ConfigManagerInterface $configManager
    *   The config manager service.
    */
   public function __construct(ConfigFactoryInterface $configFactory, ConfigManagerInterface $configManager) {
diff --git a/modules/opigno_onesignal/src/OneSignalManager.php b/modules/opigno_onesignal/src/OneSignalManager.php
index 0ff1bba..eb611b0 100644
--- a/modules/opigno_onesignal/src/OneSignalManager.php
+++ b/modules/opigno_onesignal/src/OneSignalManager.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\opigno_onesignal;
 
+use GuzzleHttp\Client;
+use Drupal\Core\Logger\LoggerChannel;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ -25,7 +27,7 @@ class OneSignalManager implements OneSignalManagerInterface {
   /**
    * Http client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;
 
@@ -33,31 +35,31 @@ class OneSignalManager implements OneSignalManagerInterface {
   /**
    * Logger.
    *
-   * @var \Drupal\Core\Logger\LoggerChannel
+   * @var LoggerChannel
    */
   protected $logger;
 
   /**
    * Messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The onesignal manager.
    *
-   * @var \Drupal\opigno_onesignal\Config\ConfigManager
+   * @var ConfigManager
    */
   private $configManager;
 
   /**
    * Constructs a new OneSignalManager object.
    *
-   * @param \GuzzleHttp\ClientInterface $http_client
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
-   * @param \Drupal\opigno_onesignal\Config\ConfigManager $onesignal_config_manager
+   * @param ClientInterface $http_client
+   * @param LoggerChannelFactoryInterface $logger_factory
+   * @param MessengerInterface $messenger
+   * @param ConfigManager $onesignal_config_manager
    */
   public function __construct(
     ClientInterface $http_client,
@@ -103,7 +105,7 @@ class OneSignalManager implements OneSignalManagerInterface {
     }
 
     // Get logo.
-    $logo_path = $base_url . '/' . drupal_get_path("theme", "aristotle") . "/logo.png";
+    $logo_path = $base_url . '/' . \Drupal::service('extension.list.theme')->getPath("aristotle") . "/logo.png";
     // Build title for notification.
     $title = [
       $langcode => isset($params['title']) ? $params['title'] : '',
diff --git a/opigno_mobile_app.module b/opigno_mobile_app.module
index 1e77579..f20c444 100644
--- a/opigno_mobile_app.module
+++ b/opigno_mobile_app.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\user\UserInterface;
 /**
  * @file
  * Contains opigno_mobile_app.module.
@@ -38,17 +39,17 @@ function opigno_mobile_app_entity_type_alter(array &$entity_types) {
 /**
  *  Get user's picture url.
  *
- * @param \Drupal\user\UserInterface $user
+ * @param UserInterface $user
  *
  * @return string
  *   Return url with user's picture.
  */
-function opigno_mobile_app_get_user_picture(\Drupal\user\UserInterface $user) {
+function opigno_mobile_app_get_user_picture(UserInterface $user) {
   $user_picture = $user->get('user_picture')->target_id;
   if ($user_picture) {
     $file = File::load($user_picture);
     $uri = $file->getFileUri();
-    $url = file_create_url($uri);
+    $url = \Drupal::service('file_url_generator')->generateAbsoluteString($uri);
   }
 
   return isset($url) ? $url : '';
diff --git a/src/Authentication/Provider/JsonAuth.php b/src/Authentication/Provider/JsonAuth.php
index 18ebeb9..ec876c4 100644
--- a/src/Authentication/Provider/JsonAuth.php
+++ b/src/Authentication/Provider/JsonAuth.php
@@ -17,41 +17,41 @@ class JsonAuth implements AuthenticationProviderInterface {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The user auth service.
    *
-   * @var \Drupal\user\UserAuthInterface
+   * @var UserAuthInterface
    */
   protected $userAuth;
 
   /**
    * The flood service.
    *
-   * @var \Drupal\Core\Flood\FloodInterface
+   * @var FloodInterface
    */
   protected $flood;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a HTTP basic authentication provider object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\user\UserAuthInterface $user_auth
+   * @param UserAuthInterface $user_auth
    *   The user authentication service.
-   * @param \Drupal\Core\Flood\FloodInterface $flood
+   * @param FloodInterface $flood
    *   The flood service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, UserAuthInterface $user_auth, FloodInterface $flood, EntityTypeManagerInterface $entity_manager) {
diff --git a/src/Controller/Groups/LearningPathController.php b/src/Controller/Groups/LearningPathController.php
index 32c014c..e353928 100644
--- a/src/Controller/Groups/LearningPathController.php
+++ b/src/Controller/Groups/LearningPathController.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\opigno_mobile_app\Controller\Groups;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -27,7 +30,7 @@ class LearningPathController extends ControllerBase {
   /**
    * The serializer.
    *
-   * @var \Symfony\Component\Serializer\Serializer
+   * @var Serializer
    */
   protected $serializer;
 
@@ -41,21 +44,21 @@ class LearningPathController extends ControllerBase {
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
@@ -69,15 +72,15 @@ class LearningPathController extends ControllerBase {
   /**
    * Constructs a new UserAuthenticationController object.
    *
-   * @param \Symfony\Component\Serializer\Serializer $serializer
+   * @param Serializer $serializer
    *   The serializer.
    * @param array $serializer_formats
    *   The available serialization formats.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   A database connection.
    */
   public function __construct(Serializer $serializer,
@@ -158,9 +161,9 @@ class LearningPathController extends ControllerBase {
   /**
    * Get latest active trainings for current user.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginException
+   * @throws PluginNotFoundException
    *
    * @return JsonResponse $response.
    *   Return JsonResponse object with trainings info.
@@ -333,7 +336,7 @@ class LearningPathController extends ControllerBase {
   /**
    * Gets the format of the current request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
    * @return string
diff --git a/src/Controller/Messaging/MessagingController.php b/src/Controller/Messaging/MessagingController.php
index 3d7df91..e2a95ff 100644
--- a/src/Controller/Messaging/MessagingController.php
+++ b/src/Controller/Messaging/MessagingController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\opigno_mobile_app\Controller\Messaging;
 
+use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\FieldableEntityInterface;
@@ -25,7 +26,7 @@ class MessagingController extends ControllerBase {
   /**
    * The serializer.
    *
-   * @var \Symfony\Component\Serializer\Serializer
+   * @var Serializer
    */
   protected $serializer;
 
@@ -39,18 +40,18 @@ class MessagingController extends ControllerBase {
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * Constructs a new UserAuthenticationController object.
    *
-   * @param \Symfony\Component\Serializer\Serializer $serializer
+   * @param Serializer $serializer
    *   The serializer.
    * @param array $serializer_formats
    *   The available serialization formats.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
    */
   public function __construct(Serializer $serializer, array $serializer_formats, LoggerInterface $logger) {
@@ -86,12 +87,12 @@ class MessagingController extends ControllerBase {
    *
    * @param \Drupal\private_message\Entity\PrivateMessageThread $private_message_thread
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *
    * @return JsonResponse $response.
    *   Return JsonResponse object with created message info.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function addNewMessageToTread(PrivateMessageThread $private_message_thread, Request $request) {
     $format = $this->getRequestFormat($request);
@@ -141,11 +142,10 @@ class MessagingController extends ControllerBase {
    *
    * @param \Drupal\private_message\Entity\PrivateMessageThread $private_message_thread
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *
    * @return JsonResponse $response.
    *   Return JsonResponse object with created messages if success and array with unsaved messages otherwise.
-   *
    */
   public function addMessagesBulkToTread(PrivateMessageThread $private_message_thread, Request $request) {
     $response_data = [
@@ -220,7 +220,7 @@ class MessagingController extends ControllerBase {
     // Filter fields without access.
     if ($private_message_thread instanceof FieldableEntityInterface) {
       foreach ($private_message_thread as $field_name => $field) {
-        /** @var \Drupal\Core\Field\FieldItemListInterface $field */
+        /** @var FieldItemListInterface $field */
         $field_access = $field->access('view', NULL, TRUE);
         if (!$field_access->isAllowed()) {
           $private_message_thread->set($field_name, NULL);
@@ -268,11 +268,10 @@ class MessagingController extends ControllerBase {
   /**
    * Create a new Private Message Thread.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *
    * @return JsonResponse $response.
    *   Return JsonResponse object with created thread info.
-   *
    */
   public function createPrivateMessageThread(Request $request) {
     $response_data = [
@@ -381,7 +380,7 @@ class MessagingController extends ControllerBase {
   /**
    * Gets the format of the current request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
    * @return string
diff --git a/src/Controller/OpignoMobileController.php b/src/Controller/OpignoMobileController.php
index 14b93e2..0e275d1 100644
--- a/src/Controller/OpignoMobileController.php
+++ b/src/Controller/OpignoMobileController.php
@@ -20,7 +20,7 @@ class OpignoMobileController extends ControllerBase {
   /**
    * The serializer.
    *
-   * @var \Symfony\Component\Serializer\Serializer
+   * @var Serializer
    */
   protected $serializer;
 
@@ -34,36 +34,36 @@ class OpignoMobileController extends ControllerBase {
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * Constructs a new UsersController object.
    *
-   * @param \Symfony\Component\Serializer\Serializer $serializer
+   * @param Serializer $serializer
    *   The serializer.
    * @param array $serializer_formats
    *   The available serialization formats.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   A database connection.
    */
   public function __construct(
diff --git a/src/Controller/OpignoMoxtraController.php b/src/Controller/OpignoMoxtraController.php
index ed496cf..c273abe 100644
--- a/src/Controller/OpignoMoxtraController.php
+++ b/src/Controller/OpignoMoxtraController.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\opigno_mobile_app\Controller;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Datetime\DrupalDateTime;
@@ -28,7 +31,7 @@ class OpignoMoxtraController extends ControllerBase {
   /**
    * The serializer.
    *
-   * @var \Symfony\Component\Serializer\Serializer
+   * @var Serializer
    */
   protected $serializer;
 
@@ -42,28 +45,28 @@ class OpignoMoxtraController extends ControllerBase {
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * The group membership loader service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $groupMembershipLoader;
 
@@ -84,15 +87,15 @@ class OpignoMoxtraController extends ControllerBase {
   /**
    * Constructs a new UsersController object.
    *
-   * @param \Symfony\Component\Serializer\Serializer $serializer
+   * @param Serializer $serializer
    *   The serializer.
    * @param array $serializer_formats
    *   The available serialization formats.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   A database connection.
    *   The entity type manager service.
    * @param \Drupal\group\GroupMembershipLoader $groupMembershipLoader
@@ -153,9 +156,9 @@ class OpignoMoxtraController extends ControllerBase {
    * @return JsonResponse $response.
    *   Return JsonResponse object.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginException
+   * @throws PluginNotFoundException
    */
   public function getMeetings() {
     $response_data = [
@@ -245,7 +248,7 @@ class OpignoMoxtraController extends ControllerBase {
   /**
    * Helper function to get meetings ids by trainings where user is a member.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *
    * @return array $meetings
    *  Array with meetings ids.
diff --git a/src/Controller/StatisticsController.php b/src/Controller/StatisticsController.php
index c4a796e..e924d20 100644
--- a/src/Controller/StatisticsController.php
+++ b/src/Controller/StatisticsController.php
@@ -25,7 +25,7 @@ class StatisticsController extends ControllerBase {
   /**
    * The serializer.
    *
-   * @var \Symfony\Component\Serializer\Serializer
+   * @var Serializer
    */
   protected $serializer;
 
@@ -39,44 +39,44 @@ class StatisticsController extends ControllerBase {
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * Constructs a new StatisticsController object.
    *
-   * @param \Symfony\Component\Serializer\Serializer $serializer
+   * @param Serializer $serializer
    *   The serializer.
    * @param array $serializer_formats
    *   The available serialization formats.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   A database connection.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   A date formatter.
    */
   public function __construct(
@@ -233,7 +233,7 @@ class StatisticsController extends ControllerBase {
    *
    * @see \Drupal\opigno_statistics\Form\DashboardForm::buildTrainingsProgress()
    *
-   * @param \Drupal\Core\Datetime\DrupalDateTime $datetime
+   * @param DrupalDateTime $datetime
    *   Date.
    * @param mixed $lp_id
    *
@@ -291,7 +291,7 @@ class StatisticsController extends ControllerBase {
    *
    * @see \Drupal\opigno_statistics\Form\DashboardForm::buildUsersPerDay()
    *
-   * @param \Drupal\Core\Datetime\DrupalDateTime $datetime
+   * @param DrupalDateTime $datetime
    *   Date.
    * @param mixed $lp_id
    *   LP ID.
@@ -353,7 +353,7 @@ class StatisticsController extends ControllerBase {
   /**
    * Get trainings members.
    *
-   * @param \Drupal\Core\Datetime\DrupalDateTime $datetime
+   * @param DrupalDateTime $datetime
    *   Date.
    * @param mixed $lp_id
    *   LP ID.
@@ -444,7 +444,7 @@ class StatisticsController extends ControllerBase {
   /**
    * Gets the format of the current request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
    * @return string
diff --git a/src/Controller/Users/UsersController.php b/src/Controller/Users/UsersController.php
index cde30e3..d44d29b 100644
--- a/src/Controller/Users/UsersController.php
+++ b/src/Controller/Users/UsersController.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\opigno_mobile_app\Controller\Users;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -24,7 +28,7 @@ class UsersController extends ControllerBase {
   /**
    * The serializer.
    *
-   * @var \Symfony\Component\Serializer\Serializer
+   * @var Serializer
    */
   protected $serializer;
 
@@ -38,21 +42,21 @@ class UsersController extends ControllerBase {
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
@@ -66,15 +70,15 @@ class UsersController extends ControllerBase {
   /**
    * Constructs a new UsersController object.
    *
-   * @param \Symfony\Component\Serializer\Serializer $serializer
+   * @param Serializer $serializer
    *   The serializer.
    * @param array $serializer_formats
    *   The available serialization formats.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   A database connection.
    */
   public function __construct(
@@ -156,8 +160,8 @@ class UsersController extends ControllerBase {
    *
    * @return JsonResponse $response.
    *   Return JsonResponse object with users and groups info.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getUsersGroupsList() {
     $response_data = [];
@@ -360,14 +364,14 @@ class UsersController extends ControllerBase {
    * @return JsonResponse $response.
    *   Return JsonResponse object with user info.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginException
+   * @throws PluginNotFoundException
    */
   public function getUserProfileInfo() {
 //    // User entity.
     $user = User::load($this->currentUser()->id());
-    /** @var \Drupal\Core\Datetime\DateFormatterInterface $date_formatter */
+    /** @var DateFormatterInterface $date_formatter */
     $date_formatter = \Drupal::service('date.formatter');
     // Response data.
     $response_data = [
diff --git a/src/GroupOMATrait.php b/src/GroupOMATrait.php
index e842a0b..d32b970 100644
--- a/src/GroupOMATrait.php
+++ b/src/GroupOMATrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\opigno_mobile_app;
 
+use Drupal\Core\TypedData\Exception\MissingDataException;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\Core\Url;
@@ -18,7 +19,7 @@ trait GroupOMATrait {
    * @see \Drupal\opigno_learning_path\TwigExtension\DefaultTwigExtension::get_start_link()
    *
    * @param \Drupal\group\Entity\Group $group
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *
    * @return array $start_link
    *   Array with text and url.
@@ -92,7 +93,7 @@ trait GroupOMATrait {
    * @param \Drupal\group\Entity\Group $training
    *
    * @return array
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    */
   private function getTrainingImageInfo(Group $training) {
     $info = [];
@@ -132,7 +133,7 @@ trait GroupOMATrait {
   /**
    * Helper function for get private trainings where user is a member.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *
    * @return array $private_trainings
    *  Array with trainings ids.
diff --git a/src/Plugin/rest/resource/AchievementsRestResource.php b/src/Plugin/rest/resource/AchievementsRestResource.php
index 8d7adc6..17f98ac 100644
--- a/src/Plugin/rest/resource/AchievementsRestResource.php
+++ b/src/Plugin/rest/resource/AchievementsRestResource.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\opigno_mobile_app\Plugin\rest\resource;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Session\AccountProxyInterface;
@@ -32,21 +36,21 @@ class AchievementsRestResource extends ResourceBase {
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * A current user instance.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -73,13 +77,13 @@ class AchievementsRestResource extends ResourceBase {
    *   The plugin implementation definition.
    * @param array $serializer_formats
    *   The available serialization formats.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   A database connection.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   A current user instance.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(
@@ -121,10 +125,10 @@ class AchievementsRestResource extends ResourceBase {
   /**
    *  Get achievements for current user.
    *
-   * @return \Drupal\rest\ResourceResponse
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return ResourceResponse
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginException
+   * @throws PluginNotFoundException
    */
   public function get() {
     // Array with response data.
@@ -183,7 +187,7 @@ class AchievementsRestResource extends ResourceBase {
         // Get time when user finished the training.
         $validation = opigno_learning_path_completed_on($training->id(), $this->currentUser->id(), TRUE);
         // Get time spent.
-        /** @var \Drupal\Core\Datetime\DateFormatterInterface $date_formatter */
+        /** @var DateFormatterInterface $date_formatter */
         $date_formatter = \Drupal::service('date.formatter');
         $time_spent = opigno_learning_path_get_time_spent($training->id(), $this->currentUser->id());
         // Get progress.
@@ -225,12 +229,12 @@ class AchievementsRestResource extends ResourceBase {
    * Get training progress status for current user.
    *
    * @param \Drupal\group\Entity\Group $training
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *
    * @return string
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginException
+   * @throws PluginNotFoundException
    */
   private function getTrainingProgressStatus(Group $training, AccountProxyInterface $account) {
     $progress = $this->progress->getProgressRound($training->id(), $account->id());
diff --git a/src/Plugin/rest/resource/ColorRestResource.php b/src/Plugin/rest/resource/ColorRestResource.php
index 8cab86c..2b5267d 100644
--- a/src/Plugin/rest/resource/ColorRestResource.php
+++ b/src/Plugin/rest/resource/ColorRestResource.php
@@ -21,7 +21,7 @@ class ColorRestResource extends ResourceBase {
 
   /**
    * Responds to entity GET requests.
-   * @return \Drupal\rest\ResourceResponse
+   * @return ResourceResponse
    */
   public function get() {
     $default_palette = \Drupal::service('color.theme_decorator')->getPalette('aristotle', TRUE);
diff --git a/src/Plugin/rest/resource/Group/TrainingsCatalogueRestResource.php b/src/Plugin/rest/resource/Group/TrainingsCatalogueRestResource.php
index 06e2b76..6904402 100644
--- a/src/Plugin/rest/resource/Group/TrainingsCatalogueRestResource.php
+++ b/src/Plugin/rest/resource/Group/TrainingsCatalogueRestResource.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\opigno_mobile_app\Plugin\rest\resource\Group;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Session\AccountProxyInterface;
@@ -36,21 +39,21 @@ class TrainingsCatalogueRestResource extends ResourceBase {
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * A current user instance.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -77,13 +80,13 @@ class TrainingsCatalogueRestResource extends ResourceBase {
    *   The plugin implementation definition.
    * @param array $serializer_formats
    *   The available serialization formats.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   A database connection.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   A current user instance.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(
@@ -126,10 +129,10 @@ class TrainingsCatalogueRestResource extends ResourceBase {
   /**
    *  Responds to entity GET requests.
    *
-   * @return \Drupal\rest\ResourceResponse
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return ResourceResponse
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginException
+   * @throws PluginNotFoundException
    */
   public function get() {
     // Array with response data.
@@ -249,9 +252,9 @@ class TrainingsCatalogueRestResource extends ResourceBase {
    * @param \Drupal\group\Entity\Group $training
    *
    * @return string
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginException
+   * @throws PluginNotFoundException
    */
   private function getTrainingProgress(Group $training) {
     return $this->progress->getProgressRound($training->id(), $this->currentUser->id());
@@ -262,7 +265,7 @@ class TrainingsCatalogueRestResource extends ResourceBase {
    *
    * @param string $membership
    * @param string $category
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *
    * @return array
    *  An array with trainings ids.
diff --git a/src/Plugin/rest/resource/Messaging/PMTLastAccessTimeUpdateRestResource.php b/src/Plugin/rest/resource/Messaging/PMTLastAccessTimeUpdateRestResource.php
index c81d574..1076bf1 100644
--- a/src/Plugin/rest/resource/Messaging/PMTLastAccessTimeUpdateRestResource.php
+++ b/src/Plugin/rest/resource/Messaging/PMTLastAccessTimeUpdateRestResource.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\opigno_mobile_app\Plugin\rest\resource\Messaging;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\private_message\Entity\PrivateMessageThread;
 use Drupal\rest\Plugin\ResourceBase;
@@ -26,7 +27,7 @@ class PMTLastAccessTimeUpdateRestResource extends ResourceBase {
   /**
    * A current user instance.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
@@ -41,9 +42,9 @@ class PMTLastAccessTimeUpdateRestResource extends ResourceBase {
    *   The plugin implementation definition.
    * @param array $serializer_formats
    *   The available serialization formats.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   A current user instance.
    */
   public function __construct(
@@ -78,8 +79,8 @@ class PMTLastAccessTimeUpdateRestResource extends ResourceBase {
    * @param $private_message_thread
    * @param $data
    *
-   * @return \Drupal\rest\ResourceResponse
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @return ResourceResponse
+   * @throws EntityStorageException
    */
   public function patch($private_message_thread, $data) {
     if (empty($data['body'])) {
diff --git a/src/Plugin/rest/resource/Messaging/PrivateMessageLastForThreadsRestResource.php b/src/Plugin/rest/resource/Messaging/PrivateMessageLastForThreadsRestResource.php
index 1984bb5..22dc3d4 100644
--- a/src/Plugin/rest/resource/Messaging/PrivateMessageLastForThreadsRestResource.php
+++ b/src/Plugin/rest/resource/Messaging/PrivateMessageLastForThreadsRestResource.php
@@ -27,14 +27,14 @@ class PrivateMessageLastForThreadsRestResource extends ResourceBase {
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * A current user instance.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
@@ -59,11 +59,11 @@ class PrivateMessageLastForThreadsRestResource extends ResourceBase {
    *   The plugin implementation definition.
    * @param array $serializer_formats
    *   The available serialization formats.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   A database connection.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   A current user instance.
    */
   public function __construct(
@@ -98,7 +98,7 @@ class PrivateMessageLastForThreadsRestResource extends ResourceBase {
   /**
    * Get Private messages for current User.
    *
-   * @return \Drupal\rest\ResourceResponse
+   * @return ResourceResponse
    */
   public function get() {
     $response_data = [
@@ -173,7 +173,7 @@ class PrivateMessageLastForThreadsRestResource extends ResourceBase {
   /**
    * Get private messages and tread ids for current user.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *
    * @return array $result
    *   Array with messages and thread ids (keyed by messages ids)
diff --git a/src/Plugin/rest/resource/Messaging/PrivateMessageRestResource.php b/src/Plugin/rest/resource/Messaging/PrivateMessageRestResource.php
index 1ac155d..fbf7608 100644
--- a/src/Plugin/rest/resource/Messaging/PrivateMessageRestResource.php
+++ b/src/Plugin/rest/resource/Messaging/PrivateMessageRestResource.php
@@ -30,21 +30,21 @@ class PrivateMessageRestResource extends ResourceBase {
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * A current user instance.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -69,13 +69,13 @@ class PrivateMessageRestResource extends ResourceBase {
    *   The plugin implementation definition.
    * @param array $serializer_formats
    *   The available serialization formats.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   A database connection.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   A current user instance.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(
@@ -115,7 +115,7 @@ class PrivateMessageRestResource extends ResourceBase {
    *
    * @param \Drupal\private_message\Entity\PrivateMessageThread $private_message_thread
    *
-   * @return \Drupal\rest\ResourceResponse
+   * @return ResourceResponse
    */
   public function get($private_message_thread) {
     $response_data = [
diff --git a/src/Plugin/rest/resource/Messaging/PrivateMessageThreadsRestResource.php b/src/Plugin/rest/resource/Messaging/PrivateMessageThreadsRestResource.php
index 6d86cd0..fc7fd1c 100644
--- a/src/Plugin/rest/resource/Messaging/PrivateMessageThreadsRestResource.php
+++ b/src/Plugin/rest/resource/Messaging/PrivateMessageThreadsRestResource.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\opigno_mobile_app\Plugin\rest\resource\Messaging;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Session\AccountProxyInterface;
@@ -30,21 +32,21 @@ class PrivateMessageThreadsRestResource extends ResourceBase {
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * A current user instance.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -73,13 +75,13 @@ class PrivateMessageThreadsRestResource extends ResourceBase {
    *   The plugin implementation definition.
    * @param array $serializer_formats
    *   The available serialization formats.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   A database connection.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   A current user instance.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(
@@ -117,11 +119,11 @@ class PrivateMessageThreadsRestResource extends ResourceBase {
   /**
    * Get all dialogs for current User.
    *
-   * @return \Drupal\rest\ResourceResponse
+   * @return ResourceResponse
    *   The response object.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function get() {
 
diff --git a/src/Plugin/rest/resource/Messaging/PrivateMessagesRestResource.php b/src/Plugin/rest/resource/Messaging/PrivateMessagesRestResource.php
index a047b24..37925e3 100644
--- a/src/Plugin/rest/resource/Messaging/PrivateMessagesRestResource.php
+++ b/src/Plugin/rest/resource/Messaging/PrivateMessagesRestResource.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\opigno_mobile_app\Plugin\rest\resource\Messaging;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountProxyInterface;
@@ -29,14 +31,14 @@ class PrivateMessagesRestResource extends ResourceBase {
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * A current user instance.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
@@ -65,11 +67,11 @@ class PrivateMessagesRestResource extends ResourceBase {
    *   The plugin implementation definition.
    * @param array $serializer_formats
    *   The available serialization formats.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   A database connection.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   A current user instance.
    */
   public function __construct(
@@ -104,11 +106,11 @@ class PrivateMessagesRestResource extends ResourceBase {
   /**
    * Get Private messages for current User.
    *
-   * @return \Drupal\rest\ResourceResponse
+   * @return ResourceResponse
    *   Rest response interface.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function get() {
     $response_data = [
@@ -195,7 +197,7 @@ class PrivateMessagesRestResource extends ResourceBase {
   /**
    * Get private messages and tread ids for current user.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   User account interface.
    * @param int $before
    *   Unix time value less a created date.
diff --git a/src/Plugin/rest/resource/OpignoCalendarEventsRestResource.php b/src/Plugin/rest/resource/OpignoCalendarEventsRestResource.php
index e101544..7f39f9a 100644
--- a/src/Plugin/rest/resource/OpignoCalendarEventsRestResource.php
+++ b/src/Plugin/rest/resource/OpignoCalendarEventsRestResource.php
@@ -29,28 +29,28 @@ class OpignoCalendarEventsRestResource extends ResourceBase {
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * A current user instance.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -75,15 +75,15 @@ class OpignoCalendarEventsRestResource extends ResourceBase {
    *   The plugin implementation definition.
    * @param array $serializer_formats
    *   The available serialization formats.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   A database connection.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   A current user instance.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   A date formatter.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(
@@ -123,7 +123,7 @@ class OpignoCalendarEventsRestResource extends ResourceBase {
 
   /**
    * Responds to entity GET requests.
-   * @return \Drupal\rest\ResourceResponse
+   * @return ResourceResponse
    */
   public function get() {
    $response_data = [
diff --git a/src/Plugin/rest/resource/OpignoNotificationRestResource.php b/src/Plugin/rest/resource/OpignoNotificationRestResource.php
index e83cfb4..efcefec 100644
--- a/src/Plugin/rest/resource/OpignoNotificationRestResource.php
+++ b/src/Plugin/rest/resource/OpignoNotificationRestResource.php
@@ -26,7 +26,7 @@ class OpignoNotificationRestResource extends ResourceBase {
   /**
    * A current user instance.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
@@ -56,9 +56,9 @@ class OpignoNotificationRestResource extends ResourceBase {
    *   The plugin implementation definition.
    * @param array $serializer_formats
    *   The available serialization formats.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   A current user instance.
    */
   public function __construct(
@@ -89,7 +89,7 @@ class OpignoNotificationRestResource extends ResourceBase {
 
   /**
    * Responds to entity GET requests.
-   * @return \Drupal\rest\ResourceResponse
+   * @return ResourceResponse
    */
   public function get() {
 
diff --git a/src/Plugin/rest/resource/TokenRestResource.php b/src/Plugin/rest/resource/TokenRestResource.php
index 91ccbf6..62170b3 100644
--- a/src/Plugin/rest/resource/TokenRestResource.php
+++ b/src/Plugin/rest/resource/TokenRestResource.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\opigno_mobile_app\Plugin\rest\resource;
 
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\Component\Plugin\PluginManagerInterface;
+use Firebase\JWT\JWT;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\jwt\Transcoder\JwtTranscoderInterface;
 use Drupal\jwt\Transcoder\JwtTranscoder;
@@ -32,14 +35,14 @@ class TokenRestResource extends ResourceBase {
   /**
    * The JWT Transcoder service.
    *
-   * @var \Drupal\jwt\Transcoder\JwtTranscoderInterface
+   * @var JwtTranscoderInterface
    */
   protected $transcoder;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
@@ -52,15 +55,15 @@ class TokenRestResource extends ResourceBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager
    * @param array $serializer_formats
    *   The available serialization formats.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $link_relation_type_manager
+   * @param PluginManagerInterface $link_relation_type_manager
    *   The link relation type manager.
    */
   public function __construct(
@@ -72,7 +75,7 @@ class TokenRestResource extends ResourceBase {
     parent::__construct($configuration, $plugin_id, $plugin_definition, $serializer_formats, $logger);
 
     $this->eventDispatcher = \Drupal::service('event_dispatcher');
-    $this->transcoder = new JwtTranscoder(new \Firebase\JWT\JWT(), \Drupal::configFactory(), \Drupal::service('key.repository'));
+    $this->transcoder = new JwtTranscoder(new JWT(), \Drupal::configFactory(), \Drupal::service('key.repository'));
   }
 
   /**
@@ -87,7 +90,7 @@ class TokenRestResource extends ResourceBase {
 
   /**
    * Responds to entity POST requests.
-   * @return \Drupal\rest\ResourceResponse
+   * @return ResourceResponse
    */
   public function post() {
     $user = \Drupal::currentUser();
@@ -114,7 +117,7 @@ class TokenRestResource extends ResourceBase {
    */
   public function generateToken() {
     $event = new JwtAuthGenerateEvent(new JsonWebToken());
-    $this->eventDispatcher->dispatch(JwtAuthEvents::GENERATE, $event);
+    $this->eventDispatcher->dispatch($event, JwtAuthEvents::GENERATE);
     $jwt = $event->getToken();
     return $this->transcoder->encode($jwt);
   }
diff --git a/src/PrivateMessagesHandler.php b/src/PrivateMessagesHandler.php
index 9e25b73..4c7a8c9 100644
--- a/src/PrivateMessagesHandler.php
+++ b/src/PrivateMessagesHandler.php
@@ -16,7 +16,7 @@ class PrivateMessagesHandler {
    *
    * @param \Drupal\private_message\Entity\PrivateMessageThread $thread
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *
    * @return array $unread_messages
    *   Array unread private messages.
diff --git a/src/Routing/RouteSubscriber.php b/src/Routing/RouteSubscriber.php
index ce7d4fb..755528c 100644
--- a/src/Routing/RouteSubscriber.php
+++ b/src/Routing/RouteSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\opigno_mobile_app\Routing;
 
+use Symfony\Component\Routing\Route;
 use Drupal\Core\Routing\RouteSubscriberBase;
 use Drupal\Core\Routing\RoutingEvents;
 use Symfony\Component\Routing\RouteCollection;
@@ -26,7 +27,7 @@ class RouteSubscriber extends RouteSubscriberBase {
    * {@inheritdoc}
    */
   protected function alterRoutes(RouteCollection $collection) {
-    /** @var \Symfony\Component\Routing\Route $route */
+    /** @var Route $route */
     // Restrict access to default route with jwt token.
     if ($route = $collection->get('jwt_auth_issuer.jwt_auth_issuer_controller_generateToken')) {
       $route->setRequirement('_access', 'FALSE');
