modules/contrib/entity_import/entity_import.install
modules/contrib/entity_import/entity_import.module
modules/contrib/entity_import/modules/entity_import_plus/src/EventSubscriber/EntityImportPlusEventSubscriber.php
modules/contrib/entity_import/modules/entity_import_plus/src/Plugin/migrate/process/EntityImportPlusEntityGenerate.php
modules/contrib/entity_import/modules/entity_import_plus/src/Plugin/migrate/process/EntityImportPlusEntityLookup.php
modules/contrib/entity_import/modules/entity_import_plus/src/Plugin/migrate/process/EntityImportPlusStrReplace.php
modules/contrib/entity_import/src/Controller/EntityImportController.php
modules/contrib/entity_import/src/Controller/EntityImporterFieldMappingList.php
modules/contrib/entity_import/src/Controller/EntityImporterList.php
modules/contrib/entity_import/src/Entity/EntityImporter.php
modules/contrib/entity_import/src/Entity/EntityImporterConfigEntityBase.php
modules/contrib/entity_import/src/Entity/EntityImporterFieldMapping.php
modules/contrib/entity_import/src/Entity/EntityImporterFieldMappingInterface.php
modules/contrib/entity_import/src/Entity/EntityImporterInterface.php
modules/contrib/entity_import/src/Entity/Routing/EntityImporterRouteDefault.php
modules/contrib/entity_import/src/EntityImportEntityProperties.php
modules/contrib/entity_import/src/EntityImportEntityPropertiesInterface.php
modules/contrib/entity_import/src/EntityImportProcessManager.php
modules/contrib/entity_import/src/EntityImportProcessManagerInterface.php
modules/contrib/entity_import/src/EntityImportSourceManager.php
modules/contrib/entity_import/src/EntityImportSourceManagerInterface.php
modules/contrib/entity_import/src/Event/EntityImportEvents.php
modules/contrib/entity_import/src/Event/EntityImportMigrationStubEvent.php
modules/contrib/entity_import/src/Form/EntityImporterBatchProcess.php
modules/contrib/entity_import/src/Form/EntityImporterBundleFormBase.php
modules/contrib/entity_import/src/Form/EntityImporterDeleteForm.php
modules/contrib/entity_import/src/Form/EntityImporterFieldMappingDeleteForm.php
modules/contrib/entity_import/src/Form/EntityImporterFieldMappingForm.php
modules/contrib/entity_import/src/Form/EntityImporterForm.php
modules/contrib/entity_import/src/Form/EntityImporterLogConfirmDeleteForm.php
modules/contrib/entity_import/src/Form/EntityImporterLogForm.php
modules/contrib/entity_import/src/Form/EntityImporterOptionsForm.php
modules/contrib/entity_import/src/Form/EntityImporterPageImportActionForm.php
modules/contrib/entity_import/src/Form/EntityImporterPageImportForm.php
modules/contrib/entity_import/src/Form/EntityImporterStatusForm.php
modules/contrib/entity_import/src/Plugin/Derivative/EntityImportMenuLinks.php
modules/contrib/entity_import/src/Plugin/migrate/EntityImporterMigrateDeriver.php
modules/contrib/entity_import/src/Plugin/migrate/process/EntityImportCallback.php
modules/contrib/entity_import/src/Plugin/migrate/process/EntityImportDefaultValue.php
modules/contrib/entity_import/src/Plugin/migrate/process/EntityImportExplode.php
modules/contrib/entity_import/src/Plugin/migrate/process/EntityImportExtract.php
modules/contrib/entity_import/src/Plugin/migrate/process/EntityImportFlatten.php
modules/contrib/entity_import/src/Plugin/migrate/process/EntityImportFormatDate.php
modules/contrib/entity_import/src/Plugin/migrate/process/EntityImportMachineName.php
modules/contrib/entity_import/src/Plugin/migrate/process/EntityImportMakeUniqueEntityField.php
modules/contrib/entity_import/src/Plugin/migrate/process/EntityImportMigrationLookup.php
modules/contrib/entity_import/src/Plugin/migrate/process/EntityImportProcessInterface.php
modules/contrib/entity_import/src/Plugin/migrate/process/EntityImportProcessTrait.php
modules/contrib/entity_import/src/Plugin/migrate/process/EntityImportSkipOnEmpty.php
modules/contrib/entity_import/src/Plugin/migrate/source/EntityImportSourceBase.php
modules/contrib/entity_import/src/Plugin/migrate/source/EntityImportSourceCSV.php
modules/contrib/entity_import/src/Plugin/migrate/source/EntityImportSourceInterface.php
modules/contrib/entity_import/src/Plugin/migrate/source/EntityImportSourceLimitIteratorBase.php
modules/contrib/entity_import/src/Plugin/migrate/source/EntityImportSourceLimitIteratorInterface.php
modules/contrib/entity_import/src/Routing/ParamConverter/MigrationConverter.php
modules/contrib/entity_import/src/Subscriber/EntityImportSubscriber.php

36 files with changes
=====================

1) modules/contrib/entity_import/src/Subscriber/EntityImportSubscriber.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * On migration post import.
    *
-   * @param \Drupal\migrate\Event\MigrateImportEvent $event
+   * @param MigrateImportEvent $event
    *   The migration import event instance.
    */
   public function onMigratePostImport(MigrateImportEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


2) modules/contrib/entity_import/src/Routing/ParamConverter/MigrationConverter.php:8

    ---------- begin diff ----------
@@ @@
 class MigrationConverter implements ParamConverterInterface {

   /**
-   * @var \Drupal\migrate\Plugin\MigrationPluginManagerInterface
+   * @var MigrationPluginManagerInterface
    */
   protected $migrationPluginManager;

@@ @@
   /**
    * The migration param converter.
    *
-   * @param \Drupal\migrate\Plugin\MigrationPluginManagerInterface $migration_plugin_manager
+   * @param MigrationPluginManagerInterface $migration_plugin_manager
    */
   public function __construct(
     MigrationPluginManagerInterface $migration_plugin_manager
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/entity_import/src/Plugin/migrate/source/EntityImportSourceInterface.php:55

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An array of the form elements.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   An array of the form elements.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function validateImportForm(array $form, FormStateInterface $form_state);
@@ @@
    *
    * @param array $form
    *   An array of the form elements.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function submitImportForm(array &$form, FormStateInterface $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/entity_import/src/Plugin/migrate/source/EntityImportSourceCSV.php:44

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function current() {
-    /** @var \Drupal\migrate\Row $current_row */
+    /** @var Row $current_row */
     $current_row = parent::current();

     if ($this->hasEmptyRowData($current_row)) {
@@ @@
   /**
    * Determine if the row data is empty.
    *
-   * @param \Drupal\migrate\Row $row
+   * @param Row $row
    *   The migration row instance.
    *
    * @return bool
@@ @@
     $iterator = new \AppendIterator();

     foreach ($this->getFiles() as $file) {
-      /** @var \League\Csv\Reader $csv */
+      /** @var Reader $csv */
       $csv = Reader::createFromPath($file->getFileUri());
       $csv->setHeaderOffset(0);

@@ @@
   /**
    * Get an array of uploaded files.
    *
-   * @return \Drupal\file\Entity\File[]
+   * @return File[]
    *   An array of instantiated files.
    */
   protected function getFiles() {
@@ @@
    * @param array $file_ids
    *   An array of file identifiers.
    *
-   * @return \Drupal\file\Entity\File[]
+   * @return File[]
    *   An array of instantiated file objects.
    */
   protected function loadFiles(array $file_ids) {
@@ @@
     $files = [];

     foreach ($file_ids as $fid) {
-      /** @var \Drupal\file\Entity\File $file */
+      /** @var File $file */
       $file = File::load($fid);

       if (!isset($file) || !$file instanceof FileInterface) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/entity_import/src/Plugin/migrate/source/EntityImportSourceBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_import\Plugin\migrate\source;

+use Drupal\entity_import\Entity\EntityImporterInterface;
+use Drupal\entity_import\Entity\EntityImporter;
+use Drupal\entity_import\Entity\EntityImporterFieldMapping;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   protected $required = FALSE;

   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $settings;

@@ @@
   protected $skipCleanup = FALSE;

   /**
-   * @var \Drupal\entity_import\Entity\EntityImporterInterface
+   * @var EntityImporterInterface
    */
   protected $entityImporter;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   public function fields() {
     $fields = [];

-    /** @var \Drupal\entity_import\Entity\EntityImporter $importer */
+    /** @var EntityImporter $importer */
     $importer = $this->getEntityImporter();

-    /** @var \Drupal\entity_import\Entity\EntityImporterFieldMapping $field_mapping */
+    /** @var EntityImporterFieldMapping $field_mapping */
     foreach ($importer->getFieldMapping() as $field_mapping) {
       $fields[$field_mapping->name()] = $field_mapping->label();
     }
@@ @@
    */
   public function getIds() {
     $unique_ids = [];
-    /** @var \Drupal\entity_import\Entity\EntityImporter $importer */
+    /** @var EntityImporter $importer */
     $importer = $this->getEntityImporter();

     foreach ($importer->getFieldMappingUniqueIdentifiers() as $info) {
@@ @@
   /**
    * Get the entity importer instance.
    *
-   * @return \Drupal\entity_import\Entity\EntityImporter
+   * @return EntityImporter
    *   The entity importer instance.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\migrate\MigrateException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws MigrateException
    */
   protected function getEntityImporter() {
     if (!$this->entityImporter) {
@@ @@
    * @return string
    *   The importer identifier.
    *
-   * @throws \Drupal\migrate\MigrateException
+   * @throws MigrateException
    */
   protected function getImporterId() {
     $configuration = $this->getConfiguration();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/entity_import/src/Plugin/migrate/process/EntityImportProcessTrait.php:40

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
    *
    * @param $property
    *   The form property key, either a string or an array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state instance.
    * @param null $default_value
    *   The default value.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/entity_import/src/Plugin/migrate/process/EntityImportMigrationLookup.php:24

    ---------- begin diff ----------
@@ @@
   use EntityImportProcessTrait;

   /**
-   * @var \Drupal\migrate\Plugin\MigrationPluginManagerInterface
+   * @var MigrationPluginManagerInterface
    */
   protected $migrationPluginManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/entity_import/src/Plugin/migrate/process/EntityImportMakeUniqueEntityField.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_import\Plugin\migrate\process;

+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Annotation\Translation;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
   use EntityImportProcessTrait;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

   /**
-   * @var \Drupal\entity_import\EntityImportEntityPropertiesInterface
+   * @var EntityImportEntityPropertiesInterface
    */
   protected $entityImportEntityProperties;

@@ @@
    * @return array
    *   An array of the entity type properties options.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   protected function getEntityTypePropertiesOptions($entity_type_id, $bundle_type) {
     $options = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/entity_import/src/Plugin/migrate/EntityImporterMigrateDeriver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_import\Plugin\migrate;

+use Drupal\entity_import\Entity\EntityImporter;
+use Drupal\migrate\Plugin\Migration;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ @@
 class EntityImporterMigrateDeriver extends DeriverBase implements ContainerDeriverInterface {

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Creates a new class instance.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container to pull out services used in the fetcher.
    * @param string $base_plugin_id
    *   The base plugin ID for the plugin ID.
@@ @@
   /**
    * Entity importer migrate deriver constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
     $this->entityTypeManager = $entity_type_manager;
@@ @@
   public function getDerivativeDefinitions($base_plugin_definition) {
     $importers = $this->entityTypeManager->getStorage('entity_importer')->loadMultiple();

-    /** @var \Drupal\entity_import\Entity\EntityImporter $importer */
+    /** @var EntityImporter $importer */
     foreach ($importers as $importer_id => $importer) {
       foreach ($importer->getImporterBundles() as $bundle) {
-        /** @var \Drupal\migrate\Plugin\Migration $migration */
+        /** @var Migration $migration */
         $migration = $importer->createMigrationInstance($bundle);
         $this->derivatives["{$importer_id}:{$bundle}"] = $migration->getPluginDefinition();
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/entity_import/src/Plugin/Derivative/EntityImportMenuLinks.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_import\Plugin\Derivative;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    * Define class constructor.
    *
    * @param $base_plugin_id
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    */
   public function __construct($base_plugin_id, EntityTypeManagerInterface $entity_type_manager) {
     $this->entityTypeManager = $entity_type_manager;
@@ @@
   /**
    * Get entity importer pages.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return EntityInterface[]
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getEntityImporterPages() {
     return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/entity_import/src/Form/EntityImporterStatusForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_import\Form;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\migrate\Plugin\MigrationInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\entity_import\Entity\EntityImporterInterface;

@@ @@
   /**
    * Set the form title.
    *
-   * @param \Drupal\entity_import\Entity\EntityImporterInterface $entity_importer
+   * @param EntityImporterInterface $entity_importer
    *   The entity importer instance.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    */
   public function setTitle(EntityImporterInterface $entity_importer = NULL) {
     return $this->t('@label: Status', [
@@ @@
       )
     ];

-    /** @var \Drupal\migrate\Plugin\MigrationInterface $migration */
+    /** @var MigrationInterface $migration */
     foreach ($entity_importer->getDependencyMigrations($bundle) as $migration_id => $migration) {
       $form['overview'][$migration_id]['importer']['#plain_text'] = $migration
         ->label();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/entity_import/src/Form/EntityImporterPageImportForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_import\Form;

+use Drupal\migrate\Plugin\MigrationPluginManager;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\migrate\Plugin\Migration;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\entity_import\Entity\EntityImporter;
+use Drupal\migrate\Plugin\MigrateSourceInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Form\SubformState;
@@ @@
 class EntityImporterPageImportForm extends EntityImporterBundleFormBase {

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\migrate\Plugin\MigrationPluginManager
+   * @var MigrationPluginManager
    */
   protected $migrationPluginManager;

@@ @@
   /**
    * Entity importer page import form.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\migrate\Plugin\MigrationPluginManagerInterface $migration_plugin_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param MigrationPluginManagerInterface $migration_plugin_manager
    */
   public function __construct(
     EntityTypeManagerInterface $entity_type_manager,
@@ @@
   /**
    * Set the form title.
    *
-   * @param \Drupal\entity_import\Entity\EntityImporterInterface|null $entity_importer
+   * @param EntityImporterInterface|null $entity_importer
    *   The entity importer instance.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    */
   public function setTitle(EntityImporterInterface $entity_importer = NULL) {
     return $this->t('@label: Import', [
@@ @@
    *
    * @param array $form
    *   The form elements.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state instance.
    * @param array $parents
    *   An array of parents.
@@ @@
    * @return array
    *   An array of migration operations.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function buildMigrationBatchOperations(array $form, FormStateInterface $form_state, array $parents = []) {
     $operations = [];
@@ @@
         $migration_parents = explode('::', $migration_key);
         $migration_id = end($migration_parents);

-        /** @var \Drupal\migrate\Plugin\Migration $migration */
+        /** @var Migration $migration */
         $migration = $this->migrationPluginManager->createInstance($migration_id);

         if (!$migration instanceof MigrationInterface) {
@@ @@
   /**
    * Build migration form elements.
    *
-   * @param \Drupal\migrate\Plugin\MigrationInterface $base_migration
+   * @param MigrationInterface $base_migration
    * @param array $migrations
    *   An array of migrations.
    * @param array $form
    *   The form elements.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state instance.
    * @param array $parents
    *   An array of parents.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function buildMigrationForm(
     MigrationInterface $base_migration,
@@ @@
         || !$info['migration'] instanceof MigrationInterface) {
         continue;
       }
-      /** @var \Drupal\migrate\Plugin\Migration $migration */
+      /** @var Migration $migration */
       $migration = $info['migration'];

       $id_map = $migration->getIdMap();
@@ @@
       ];
       $plugin_parents = array_merge($parents, [$migration_key]);

-      /** @var \Drupal\entity_import\Entity\EntityImporter $entity_importer */
+      /** @var EntityImporter $entity_importer */
       $entity_importer = $this->loadEntityImporterByMigration($migration);

       // Display the entity importer description if one is defined.
@@ @@
         ];
       }

-      /** @var \Drupal\migrate\Plugin\MigrateSourceInterface $source */
+      /** @var MigrateSourceInterface $source */
       $source = $migration->getSourcePlugin();

       if ($source instanceof EntityImportSourceInterface) {
@@ @@
   /**
    * Build migration execute order.
    *
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The required migration object.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state instance.
    * @param array $parents
    *   An array of parents.
@@ @@
    *
    * @return array
    *   Build migration execute order based on dependencies.
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function buildMigrationExecuteOrder(
     MigrationInterface $migration,
@@ @@
   /**
    * Build the migration dependency information.
    *
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The required migration object.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state instance.
    * @param array $plugin_parents
    *   An array of the plugin parents.
@@ @@
    * @return array
    *   An array of optional dependency migrations.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function buildMigrationDependencyInfo(
     MigrationInterface $migration,
@@ @@
    * @param $importer_id
    *   The entity importer identifier.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return EntityInterface|null
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function loadEntityImporter($importer_id) {
     return $this
@@ @@
   /**
    * Load entity importer by migration.
    *
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The migration instance.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return EntityInterface|null
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function loadEntityImporterByMigration(MigrationInterface $migration) {
     $identifier = $migration->getDerivativeId();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/entity_import/src/Form/EntityImporterPageImportActionForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_import\Form;

+use Drupal\migrate\Plugin\MigrationPluginManager;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\migrate\Plugin\Migration;
 use Drupal\Core\Entity\EntityTypeManagerInterface;;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\entity_import\Entity\EntityImporterInterface;
@@ @@
 class EntityImporterPageImportActionForm extends EntityImporterBundleFormBase {

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\migrate\Plugin\MigrationPluginManager
+   * @var MigrationPluginManager
    */
   protected $migrationPluginManager;

@@ @@
   /**
    * Entity importer page import form.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\migrate\Plugin\MigrationPluginManagerInterface $migration_plugin_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param MigrationPluginManagerInterface $migration_plugin_manager
    */
   public function __construct(
     EntityTypeManagerInterface $entity_type_manager,
@@ @@
   /**
    * Set the form title.
    *
-   * @param \Drupal\entity_import\Entity\EntityImporterInterface $entity_importer
+   * @param EntityImporterInterface $entity_importer
    *   The entity importer instance.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    */
   public function setTitle(EntityImporterInterface $entity_importer = NULL) {
     return $this->t('@label: Action', [
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $action = $form_state->getValue('action');
@@ @@
    * @return array
    *   An array of batch operations.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function buildMigrationActionOperations($action, array $migrations) {
     $classes = [
@@ @@
   protected function buildMigrationTableOptions(array $migrations) {
     $options = [];

-    /** @var \Drupal\migrate\Plugin\Migration $migration */
+    /** @var Migration $migration */
     foreach ($migrations as $plugin_id => $migration) {
       $options[$plugin_id] = [
         'title' => $migration->label(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/entity_import/src/Form/EntityImporterOptionsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_import\Form;

+use Drupal\entity_import\Entity\EntityImporter;
+use Drupal\Core\Config\Config;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
 class EntityImporterOptionsForm extends FormBase {

   /**
-   * @var \Drupal\Core\Field\FieldTypePluginManagerInterface
+   * @var FieldTypePluginManagerInterface
    */
   protected $fieldTypeManager;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state, $entity_importer_type = NULL) {
-    /** @var \Drupal\entity_import\Entity\EntityImporter $entity_importer */
+    /** @var EntityImporter $entity_importer */
     $entity_importer = $this->loadEntityImporter($entity_importer_type);

     if (!isset($entity_importer)) {
@@ @@
    * Get form item value.
    *
    * @param array $property
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
-   * @param \Drupal\entity_import\Entity\EntityImporterInterface $entity_importer
+   * @param EntityImporterInterface $entity_importer
    *
    * @return mixed
    */
@@ @@
    * Replace AJAX callback.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return mixed
    */
@@ @@
    * Identifier items AJAX callback.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return mixed
    */
@@ @@
    * Identifier items submit callback.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function itemsSubmitCallback(array $form, FormStateInterface $form_state) {
     $trigger = $form_state->getTriggeringElement();
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
- */
+   */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     if (!isset($form['#importer'])) {
       return;
     }
-    /** @var \Drupal\entity_import\Entity\EntityImporter $importer */
+    /** @var EntityImporter $importer */
     $importer = $form['#importer'];

     if (!$importer instanceof EntityImporterInterface) {
@@ @@
    * @param array $values
    *   The unique identifier values.
    *
-   * @return \Drupal\Core\Config\Config
+   * @return Config
    */
   protected function updateConfigurationValues($importer_type_id, array $values) {
     $config = $this->getConfig($importer_type_id, TRUE);
@@ @@
    * @param bool $editable
    *   Determine if the configuration is editable.
    *
-   * @return \Drupal\Core\Config\Config|\Drupal\Core\Config\ImmutableConfig
+   * @return Config|ImmutableConfig
    */
   protected function getConfig($importer_type_id, $editable = FALSE) {
     $config = $this->configFactory;
@@ @@
    *
    * @param $entity_type_id
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return EntityInterface|null
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function loadEntityImporter($entity_type_id) {
     return $this->entityTypeManager
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/entity_import/src/Form/EntityImporterLogForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_import\Form;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\entity_import\Entity\EntityImporterInterface;
 use Drupal\migrate\Plugin\MigrationInterface;
@@ @@
   /**
    * Set the form title.
    *
-   * @param \Drupal\entity_import\Entity\EntityImporterInterface $entity_importer
+   * @param EntityImporterInterface $entity_importer
    *   The entity importer instance.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    */
   public function setTitle(EntityImporterInterface $entity_importer = NULL) {
     return $this->t('@label: Log', [
@@ @@
   }

   /**
-   * @param \Drupal\entity_import\Entity\EntityImporterInterface $entity_importer
+   * @param EntityImporterInterface $entity_importer
    * @param $bundle
    *
    * @return array
@@ @@
   /**
    * Build migration message rows.
    *
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The migration instance.
    * @param null $level
    *   The message level indication.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/entity_import/src/Form/EntityImporterForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_import\Form;

+use Drupal\entity_import\Entity\EntityImporter;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ @@
 class EntityImporterForm extends EntityForm  {

   /**
-   * @var \Drupal\Core\Routing\RouteBuilderInterface
+   * @var RouteBuilderInterface
    */
   protected $routeBuilder;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityBundleInfo;

   /**
-   * @var \Drupal\entity_import\EntityImportSourceManagerInterface
+   * @var EntityImportSourceManagerInterface
    */
   protected $entityImportSources;

   /**
-   * @var \Drupal\migrate\Plugin\MigrationPluginManagerInterface
+   * @var MigrationPluginManagerInterface
    */
   protected $migrationPluginManager;

@@ @@
   /**
    * Entity import form constructor.
    *
-   * @param \Drupal\Core\Routing\RouteBuilderInterface $route_builder
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_bundle_info
-   * @param \Drupal\migrate\Plugin\MigrationPluginManagerInterface $migration_plugin_manager
-   * @param \Drupal\entity_import\EntityImportSourceManagerInterface $entity_import_sources
+   * @param RouteBuilderInterface $route_builder
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeBundleInfoInterface $entity_bundle_info
+   * @param MigrationPluginManagerInterface $migration_plugin_manager
+   * @param EntityImportSourceManagerInterface $entity_import_sources
    */
   public function __construct(
     RouteBuilderInterface $route_builder,
@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\entity_import\Entity\EntityImporter $entity */
+    /** @var EntityImporter $entity */
     $entity = $this->entity;

     $form['label'] = [
@@ @@
   public function save(array $form, FormStateInterface $form_state) {
     parent::save($form, $form_state);

-    /** @var \Drupal\entity_import\Entity\EntityImporter $entity */
+    /** @var EntityImporter $entity */
     $entity = $this->entity;

     $this->rebuildRouteCache();
@@ @@
    * Ajax reload callback.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return mixed
    */
@@ @@
    *
    * @param string $property
    *   The entity property name or an array of nested properties.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @param null $default
@@ @@
    * Rebuild route cache.
    */
   protected function rebuildRouteCache() {
-    /** @var \Drupal\entity_import\Entity\EntityImporter $entity */
+    /** @var EntityImporter $entity */
     $entity = $this->entity;

     if ($entity->hasPageDisplayChanged()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/entity_import/src/Form/EntityImporterFieldMappingForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_import\Form;

+use Drupal\Core\Entity\EntityFieldManager;
+use Drupal\entity_import\EntityImportProcessManager;
+use Drupal\entity_import\Entity\EntityImporterFieldMapping;
+use Drupal\entity_import\Entity\EntityImporter;
+use Drupal\entity_import\Plugin\migrate\process\EntityImportProcessInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\Core\Field\TypedData\FieldItemDataDefinition;
+use Drupal\Core\TypedData\DataDefinition;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityForm;
@@ @@
 class EntityImporterFieldMappingForm extends EntityForm {

   /**
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;

   /**
-   * @var \Drupal\entity_import\EntityImportProcessManager
+   * @var EntityImportProcessManager
    */
   protected $entityImportProcessManager;

@@ @@
   /**
    * Entity importer field mapping form.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
-   * @param \Drupal\entity_import\EntityImportProcessManagerInterface $entity_import_process_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
+   * @param EntityImportProcessManagerInterface $entity_import_process_manager
    */
   public function __construct(
     EntityFieldManagerInterface $entity_field_manager,
@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\entity_import\Entity\EntityImporterFieldMapping $mapping_entity */
+    /** @var EntityImporterFieldMapping $mapping_entity */
     $mapping_entity = $this->entity;
     $mapping_bundle = $mapping_entity->getImporterBundle();

-    /** @var \Drupal\entity_import\Entity\EntityImporter $importer_entity */
+    /** @var EntityImporter $importer_entity */
     $importer_entity = $mapping_entity->getImporterEntity();
     $importer_bundles = $importer_entity->getImporterBundles();

@@ @@
           $plugin_info = $processing['configuration']['plugins'][$plugin_id] ?? [];
           $process_configuration = $plugin_info['settings'] ?? [];

-          /** @var \Drupal\entity_import\Plugin\migrate\process\EntityImportProcessInterface $process_instance */
+          /** @var EntityImportProcessInterface $process_instance */
           $process_instance = $this->entityImportProcessManager
             ->createPluginInstance($plugin_id, $process_configuration);

@@ @@
    *
    * @param array $form
    *   An array of form elements.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return mixed
@@ @@
    * {@inheritdoc}
    */
   public function getEntityFromRouteMatch(RouteMatchInterface $route_match, $entity_type_id) {
-    /** @var \Drupal\entity_import\Entity\EntityImporterFieldMapping $entity */
+    /** @var EntityImporterFieldMapping $entity */
     $entity = parent::getEntityFromRouteMatch($route_match, $entity_type_id);

     if ($route_match->getRawParameter('entity_importer') !== NULL) {
@@ @@
    *
    * @param array $form
    *   An array of form elements.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    * @param $method
    *   A process submit or validate method to call.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function processProcessingPlugins(array $form, FormStateInterface $form_state, $method) {
     $processing_plugins = $form_state->getValue(
@@ @@

     foreach ($processing_plugins as $plugin_id => $plugin_info) {
       $settings = $plugin_info['settings'] ?? [];
-      /** @var \Drupal\entity_import\Plugin\migrate\process\EntityImportProcessInterface $process */
+      /** @var EntityImportProcessInterface $process */
       $process = $this
         ->entityImportProcessManager
         ->createPluginInstance($plugin_id, $settings);
@@ @@
    * @param $entity_type
    * @param $bundle
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface[]
+   * @return FieldDefinitionInterface[]
    */
   protected function loadFieldMappingFields($entity_type, $bundle) {
     return $this
@@ @@
    *
    * @param $property
    *   The property name.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return mixed
@@ @@
   /**
    * Get entity importer entity.
    *
-   * @return \Drupal\entity_import\Entity\EntityImporter
+   * @return EntityImporter
    */
   protected function getEntityImporterEntity() {
     return $this->entity->getImporterEntity();
@@ @@
       if ($field->isComputed()) {
         continue;
       }
-      /** @var \Drupal\Core\Field\TypedData\FieldItemDataDefinition $item_definition */
+      /** @var FieldItemDataDefinition $item_definition */
       $item_definition = $field->getItemDefinition();

       $options["{$field_name}"] = $this->t('@field_name', [
@@ @@
       ]);
       $field_property_options = [];

-      /** @var \Drupal\Core\TypedData\DataDefinition $data_definition */
+      /** @var DataDefinition $data_definition */
       foreach ($item_definition->getPropertyDefinitions() as $property_name => $data_definition) {
         if ($data_definition->isComputed() || $data_definition->isReadOnly()) {
           continue;
@@ @@
    *
    * @return array
    *   Return an array of migration process info: options, instances, etc.
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function getMigrationProcessingInfo() {
     return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/entity_import/src/Form/EntityImporterBundleFormBase.php:17

    ---------- begin diff ----------
@@ @@
   protected $bundle;

   /**
-   * @var \Drupal\entity_import\Entity\EntityImporterInterface
+   * @var EntityImporterInterface
    */
   protected $entityImporter;

@@ @@
    *
    * @param array $form
    *   The form elements.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array
@@ @@
    *
    * @param array $operations
    *   The entity importer batch operations.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state instance.
    * @param array $default_batch
    *   An array of default batch definitions properties.
@@ @@
    *
    * @param $property
    *   The form property name.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state instance.
    * @param null $default
    *   The default value.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/entity_import/src/Form/EntityImporterBatchProcess.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_import\Form;

+use Drupal\migrate\MigrateException;
+use Drupal\entity_import\Plugin\migrate\source\EntityImportSourceInterface;
+use Drupal\Core\Messenger\Messenger;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\entity_import\Plugin\migrate\source\EntityImportSourceLimitIteratorInterface;
@@ @@
   /**
    * Batch migration import.
    *
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The migration object.
    * @param $update
    *   A boolean flag if the migration should update.
@@ @@
    * @param array $context
    *   An array of batch contexts.
    *
-   * @throws \Drupal\migrate\MigrateException
+   * @throws MigrateException
    */
   public static function import(
     MigrationInterface $migration,
@@ @@
     array &$context
   ) {
     $action = 'import';
-    /** @var \Drupal\entity_import\Plugin\migrate\source\EntityImportSourceInterface $source */
+    /** @var EntityImportSourceInterface $source */
     $source = $migration->getSourcePlugin();

     if (!isset($context['results']['count'])) {
@@ @@
   /**
    * Batch migration rollback.
    *
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The migration object.
    * @param $status
    *   The migration status that should be initialized.
@@ @@
    * @param $context
    *   An array of batch contexts.
    *
-   * @throws \Drupal\migrate\MigrateException
+   * @throws MigrateException
    */
   public static function rollback(
     MigrationInterface $migration,
@@ @@
   /**
    * Execute migration.
    *
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   * @param MigrationInterface $migration
    * @param $update
    *   A boolean flag if the migration should update.
    * @param $status
@@ @@
    *   A boolean flag if it's the first iteration of the batch.
    *
    * @return int
-   * @throws \Drupal\migrate\MigrateException
+   * @throws MigrateException
    */
   protected static function executeMigration(
     MigrationInterface $migration,
@@ @@
   /**
    * Get messenger instance.
    *
-   * @return \Drupal\Core\Messenger\Messenger
+   * @return Messenger
    */
   protected static function messenger() {
     return \Drupal::service('messenger');;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


20) modules/contrib/entity_import/src/Event/EntityImportMigrationStubEvent.php:2

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_import\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Define entity import migration stub event.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/entity_import/src/EntityImportSourceManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_import;

+use Drupal\migrate\Plugin\MigrateSourceInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\migrate\Plugin\MigrationInterface;

 interface EntityImportSourceManagerInterface {
@@ @@
    *   The migrate source plugin identifier.
    * @param array $configuration
    *   The migration source configuration.
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The migration object.
    *
-   * @return \Drupal\migrate\Plugin\MigrateSourceInterface
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @return MigrateSourceInterface
+   * @throws PluginException
    */
   public function createSourceStubInstance(
     $plugin_id,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


22) modules/contrib/entity_import/src/EntityImportSourceManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_import;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\migrate\Plugin\MigrateSourcePluginManager;
 use Drupal\migrate\Plugin\MigrationInterface;
 use Drupal\migrate\Plugin\MigrationPluginManagerInterface;
@@ @@
 class EntityImportSourceManager implements EntityImportSourceManagerInterface {

   /**
-   * @var \Drupal\migrate\Plugin\MigrationPluginManagerInterface
+   * @var MigrationPluginManagerInterface
    */
   protected $migrationManager;

   /**
-   * @var \Drupal\migrate\Plugin\MigrateSourcePluginManager
+   * @var MigrateSourcePluginManager
    */
   protected $migrateSourceManager;

@@ @@
   /**
    * Entity import source construct.
    *
-   * @param \Drupal\migrate\Plugin\MigrateSourcePluginManager $migrate_source_manager
+   * @param MigrateSourcePluginManager $migrate_source_manager
    *   The migrate source manager.
-   * @param \Drupal\migrate\Plugin\MigrationPluginManagerInterface $migration_manager
+   * @param MigrationPluginManagerInterface $migration_manager
    *   The migration manager.
    */
   public function __construct(
@@ @@
    * @return array
    *   The entity import source definitions.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function getDefinitions() {
     $definitions = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


23) modules/contrib/entity_import/src/EntityImportProcessManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_import;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\migrate\Plugin\MigrationInterface;

 /**
@@ @@
    * @return array
    *   An array of migration process information.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function getMigrationProcessInfo();

@@ @@
    *   The plugin instance identifier.
    * @param array $configuration
    *   An array of a plugin configurations.
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The migration instance.
    *
    * @return object
    *   The plugin instance.
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function createPluginInstance(
     $plugin_id,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


24) modules/contrib/entity_import/src/EntityImportProcessManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_import;

+use Drupal\migrate\Plugin\MigrationPluginManager;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\entity_import\Event\EntityImportEvents;
 use Drupal\entity_import\Event\EntityImportMigrationStubEvent;
 use Drupal\migrate\Plugin\MigratePluginManagerInterface;
@@ @@
 class EntityImportProcessManager implements EntityImportProcessManagerInterface {

   /**
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

   /**
-   * @var \Drupal\migrate\Plugin\MigrationPluginManagerInterface
+   * @var MigrationPluginManagerInterface
    */
   protected $migrationManager;

   /**
-   * @var \Drupal\migrate\Plugin\MigrationPluginManager
+   * @var MigrationPluginManager
    */
   protected $migratePluginManager;

@@ @@
   /**
    * Entity import process manager constructor.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
-   * @param \Drupal\migrate\Plugin\MigrationPluginManagerInterface $migration_manager
-   * @param \Drupal\migrate\Plugin\MigratePluginManagerInterface $migrate_plugin_manager
+   * @param EventDispatcherInterface $event_dispatcher
+   * @param MigrationPluginManagerInterface $migration_manager
+   * @param MigratePluginManagerInterface $migrate_plugin_manager
    */
   public function __construct(
     EventDispatcherInterface $event_dispatcher,
@@ @@
   ) {
     $prepare_event = $this->eventDispatcher
       ->dispatch(
-        EntityImportEvents::ENTITY_IMPORT_PREPARE_MIGRATION_STUB,
-        new EntityImportMigrationStubEvent($plugin_id, [])
+        new EntityImportMigrationStubEvent($plugin_id, []),
+        EntityImportEvents::ENTITY_IMPORT_PREPARE_MIGRATION_STUB
       );

     $migration = isset($migration)
@@ @@
    * @return array
    *   An array plugin instances.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function getPluginInstances() {
     $definitions = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


25) modules/contrib/entity_import/src/EntityImportEntityPropertiesInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_import;

+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeInterface;

 /**
@@ @@
    * interface of \Drupal\Core\Config\Entity\ConfigEntityTypeInterface or
    * \Drupal\Core\Entity\ContentEntityTypeInterface.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type instance.
    * @param $bundle
    *   The bundle type identifier.
@@ @@
    * @return array
    *   An array of entity properties.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function getEntityPropertiesOptions(EntityTypeInterface $entity_type, $bundle);
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


26) modules/contrib/entity_import/src/EntityImportEntityProperties.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_import;

+use Drupal\Core\Field\TypedData\FieldItemDataDefinition;
+use Drupal\Core\TypedData\DataDefinition;
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Config\Entity\ConfigEntityTypeInterface;
 use Drupal\Core\Config\TypedConfigManagerInterface;
@@ @@
   use StringTranslationTrait;

   /**
-   * @var \Drupal\Core\Config\TypedConfigManagerInterface
+   * @var TypedConfigManagerInterface
    */
   protected $typedConfigManager;

   /**
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The entity properties constructor.
    *
-   * @param \Drupal\Core\Config\TypedConfigManagerInterface $typed_config_manager
+   * @param TypedConfigManagerInterface $typed_config_manager
    *   The typed configuration manager service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager service.
    */
   public function __construct(
@@ @@
   /**
    * Get the entity typed data mapping options.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityTypeInterface $entity_type
+   * @param ConfigEntityTypeInterface $entity_type
    *   The entity type instance.
    *
    * @return array
@@ @@
       if ($field->isComputed()) {
         continue;
       }
-      /** @var \Drupal\Core\Field\TypedData\FieldItemDataDefinition $item_definition */
+      /** @var FieldItemDataDefinition $item_definition */
       $item_definition = $field->getItemDefinition();

-      /** @var \Drupal\Core\TypedData\DataDefinition $data_definition */
+      /** @var DataDefinition $data_definition */
       foreach ($item_definition->getPropertyDefinitions() as $property_name => $data_definition) {
         if ($data_definition->isComputed() || $data_definition->isReadOnly()) {
           continue;
@@ @@
    * @param $bundle
    *   The entity bundle type.
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface[]
+   * @return FieldDefinitionInterface[]
    *   An array of entity field definitions.
    */
   protected function loadEntityFieldDefinitions($entity_type, $bundle) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


27) modules/contrib/entity_import/src/Entity/EntityImporterInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_import\Entity;

+use Drupal\Core\Url;
+use Drupal\Core\Link;
+use Drupal\migrate\Plugin\Migration;
+use Drupal\migrate\Plugin\MigrationPluginManager;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Entity\EntityInterface;

 /**
@@ @@
    * @param $route_name
    *   The URL route name.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The drupal URL instance.
    */
   public function createUrl($route_name);
@@ @@
    * @param $route_name
    *   The link route name.
    *
-   * @return \Drupal\Core\Link
+   * @return Link
    *   The drupal link instance.
    */
   public function createLink($text, $route_name);
@@ @@
    * @param array $definition
    *   Additional definitions that should be merged.
    *
-   * @return \Drupal\migrate\Plugin\Migration|\Drupal\migrate\Plugin\MigrationPluginManager
+   * @return Migration|MigrationPluginManager
    */
   public function createMigrationInstance($bundle, array $definition = []);

@@ @@
   /**
    * Get entity importer field mapping.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getFieldMapping();

@@ @@
    * Has field mappings.
    *
    * @return bool
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function hasFieldMappings();

@@ @@
    * Get field mapping options.
    *
    * @return array
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getFieldMappingOptions();

@@ @@
    *   An array of migration definition values.
    *
    * @return array
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function getDependencyMigrations($bundle, $order = TRUE, $definition = []);

@@ @@
    * @return MigrationInterface|null
    *   Return the dependency migration instance; otherwise NULL.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function loadDependencyMigration($plugin_id, $bundle);
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


28) modules/contrib/entity_import/src/Entity/EntityImporterFieldMappingInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_import\Entity;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 /**
  * Define entity importer field mapping interface.
  */
@@ @@
   /**
    * Get importer entity instance.
    *
-   * @return \Drupal\entity_import\Entity\EntityImporter
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return EntityImporter
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getImporterEntity();
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


29) modules/contrib/entity_import/src/Entity/EntityImporterFieldMapping.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_import\Entity;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Annotation\Translation;
 use Drupal\Core\Entity\Annotation\ConfigEntityType;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
    * @param $entity_type_id
    *   The entity importer identifier.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return EntityInterface|null
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function loadEntityImporterType($entity_type_id) {
     return $this->entityTypeManager()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/entity_import/src/Entity/EntityImporterConfigEntityBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_import\Entity;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\Query\QueryInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\StringTranslation\StringTranslationTrait;

@@ @@
    * @param array $element
    *
    * @return array|int
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function entityExist($id, array $element) {
     $identifier = isset($element['#prefix_id'])
@@ @@
    * @param $identifier
    *
    * @return array|int
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function checkIfEntityIdExist($identifier) {
     return (bool) $this->getQuery()->condition('id', $identifier)->execute();
@@ @@
   /**
    * Get entity storage query.
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return QueryInterface
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getQuery() {
     return $this->getStorage()->getQuery();
@@ @@
   /**
    * Get entity storage.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    */
   protected function getStorage() {
     return $this->entityTypeManager()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/entity_import/src/Entity/EntityImporter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_import\Entity;

+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Cache\CacheBackendInterface;
+use Drupal\entity_import\EntityImportSourceManager;
+use Drupal\migrate\Plugin\MigrationPluginManager;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Annotation\Translation;
 use Drupal\Core\Entity\Annotation\ConfigEntityType;
@@ @@
   /**
    * Create dependency migrations.
    *
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The required migration instance.
    * @param array $values
    * @param array $parents
@@ @@
    * @param array $migrations
    *
    * @return mixed
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function createDependencyMigrations(
     MigrationInterface $migration,
@@ @@
    * @param bool $editable
    *   Determine if the field mapping configurations are editable.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig
+   * @return ImmutableConfig
    */
   protected function getOptionConfig($editable = FALSE) {
     $name = $this->getOptionConfigName();
@@ @@
   /**
    * Delete field mappings.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   protected function deleteFieldMapping() {
     foreach ($this->getFieldMapping() as $field_mapping) {
@@ @@
   protected function getFieldMappingsKeyedByBundle() {
     $field_mappings = [];

-    /** @var \Drupal\entity_import\Entity\EntityImporterFieldMapping $field_mapping */
+    /** @var EntityImporterFieldMapping $field_mapping */
     foreach ($this->getFieldMapping() as $entity_type_id => $field_mapping) {
       $field_mappings[$field_mapping->getImporterBundle()][] = $field_mapping;
     }
@@ @@
       'optional' => []
     ];

-    /** @var \Drupal\entity_import\Entity\EntityImporterFieldMapping $field_mapping */
+    /** @var EntityImporterFieldMapping $field_mapping */
     foreach ($this->getFieldMappingByBundle($bundle) as $name => $field_mapping) {
       if (!$field_mapping->hasProcessingPlugin($plugin_id)) {
         continue;
@@ @@
    * Get field mapping configurations by importer type.
    *
    * @return array|int
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getFieldMappingByImporterType() {
     $query = $this->getFieldMappingStorage()
@@ @@
   /**
    * Get field mapping storage.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return EntityStorageInterface
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getFieldMappingStorage() {
     return $this->entityTypeManager()
@@ @@
   /**
    * Get migration discovery cache backend.
    *
-   * @return \Drupal\Core\Cache\CacheBackendInterface
+   * @return CacheBackendInterface
    */
   protected function getMigrationDiscoveryCache() {
     return \Drupal::service('cache.discovery_migration');
@@ @@
   /**
    * Get importer options configuration.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig
+   * @return ImmutableConfig
    */
   protected function getOptionsConfig() {
     return \Drupal::config("entity_import.options.{$this->id()}");
@@ @@
   /**
    * Entity import source manager.
    *
-   * @return \Drupal\entity_import\EntityImportSourceManager
+   * @return EntityImportSourceManager
    */
   protected function entityImportSourceManager() {
     return \Drupal::service('entity_import.source.manager');
@@ @@
   /**
    * Migration plugin manager.
    *
-   * @return \Drupal\migrate\Plugin\MigrationPluginManager
+   * @return MigrationPluginManager
    */
   protected function migrationPluginManager() {
     return \Drupal::service('plugin.manager.migration');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/entity_import/src/Controller/EntityImporterFieldMappingList.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_import\Controller;

+use Symfony\Component\HttpFoundation\Request;
+use Drupal\entity_import\Entity\EntityImporterFieldMapping;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
 class EntityImporterFieldMappingList extends ConfigEntityListBuilder {

   /**
-   * @var null|\Symfony\Component\HttpFoundation\Request
+   * @var null|Request
    */
   protected $request;

   /**
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;

@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\entity_import\Entity\EntityImporterFieldMapping $entity */
+    /** @var EntityImporterFieldMapping $entity */
     return [
         $entity->label(),
         $entity->name(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/entity_import/src/Controller/EntityImportController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_import\Controller;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Controller\ControllerBase;

 /**
@@ @@
   /**
    * Get display page entity importers.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return EntityInterface[]
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getDisplayPageEntityImporters() {
     return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


34) modules/contrib/entity_import/modules/entity_import_plus/src/EventSubscriber/EntityImportPlusEventSubscriber.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * React on the creation of the migration stub instance.
    *
-   * @param \Drupal\entity_import\Event\EntityImportMigrationStubEvent $event
+   * @param EntityImportMigrationStubEvent $event
    *   The event instance.
    */
   public function onPrepareMigrationStub(EntityImportMigrationStubEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


35) modules/contrib/entity_import/entity_import.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\entity_import\Entity\EntityImporter;
 /**
  * @file
  * The hook implementations for the entity import module.
@@ @@
   $variables['importers'] = [];

   if (!empty($variables['content'])) {
-    /** @var \Drupal\entity_import\Entity\EntityImporter $importer */
+    /** @var EntityImporter $importer */
     foreach ($variables['content'] as $importer) {
       $variables['importers'][$importer->id()] = [
         'type' => $importer->id(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


36) modules/contrib/entity_import/entity_import.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\entity_import\Entity\EntityImporter;
+use Drupal\entity_import\Entity\EntityImporterFieldMapping;
 use Drupal\Core\Utility\UpdateException;

 /**
@@ @@
  */
 function entity_import_update_8103() {
   try {
-    /** @var \Drupal\Core\Entity\EntityTypeManager $entity_type_manager */
+    /** @var EntityTypeManager $entity_type_manager */
     $entity_type_manager = \Drupal::service('entity_type.manager');
     $entity_importer_storage = $entity_type_manager->getStorage('entity_importer');

-    /** @var \Drupal\entity_import\Entity\EntityImporter $entity_importer */
+    /** @var EntityImporter $entity_importer */
     foreach ($entity_importer_storage->loadMultiple() as $entity_importer) {
       // Map the old property values to the new properties.
       $entity_importer->expose_importer = $entity_importer->display_page ?? FALSE;
@@ @@
  * Update field mapping to use a source name instead of the field mapping machine name.
  */
 function entity_import_update_8102() {
-  /** @var \Drupal\Core\Entity\EntityTypeManager $entity_type_manager */
+  /** @var EntityTypeManager $entity_type_manager */
   $entity_type_manager = \Drupal::service('entity_type.manager');
   $entity_importer_field_mapping = $entity_type_manager->getStorage(
     'entity_importer_field_mapping'
   );

-  /** @var \Drupal\entity_import\Entity\EntityImporterFieldMapping $field_mapping */
+  /** @var EntityImporterFieldMapping $field_mapping */
   foreach ($entity_importer_field_mapping->loadMultiple() as $field_mapping) {
     if (isset($field_mapping->source)) {
       continue;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/entity_import/modules/entity_import_plus/src/Plugin/migr
         ate/process/EntityImportPlusStrReplace.php" file, due to:              
         "Analyze error: "Class                                                 
         Drupal\migrate_plus\Plugin\migrate\process\StrReplace not found.".     
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/entity_import/modules/entity_import_plus/src/Plugin/migr
         ate/process/EntityImportPlusEntityLookup.php" file, due to:            
         "Analyze error: "Class                                                 
         Drupal\migrate_plus\Plugin\migrate\process\EntityLookup not found.".   
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/entity_import/modules/entity_import_plus/src/Plugin/migr
         ate/process/EntityImportPlusEntityGenerate.php" file, due to:          
         "Analyze error: "Class                                                 
         Drupal\migrate_plus\Plugin\migrate\process\EntityGenerate not found.". 
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [WARNING] 1 nodes were removed                                                 

