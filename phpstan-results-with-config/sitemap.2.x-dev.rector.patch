diff --git a/src/Annotation/Sitemap.php b/src/Annotation/Sitemap.php
index 9caeaf4..e86f1fb 100644
--- a/src/Annotation/Sitemap.php
+++ b/src/Annotation/Sitemap.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\sitemap\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -26,7 +27,7 @@ class Sitemap extends Plugin {
   /**
    * The human-readable name of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -35,7 +36,7 @@ class Sitemap extends Plugin {
   /**
    * A short description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Controller/SitemapController.php b/src/Controller/SitemapController.php
index a0fab0c..a10c8fe 100644
--- a/src/Controller/SitemapController.php
+++ b/src/Controller/SitemapController.php
@@ -16,23 +16,23 @@ class SitemapController implements ContainerInjectionInterface {
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The SitemapMap plugin manager.
    *
-   * @var \Drupal\sitemap\SitemapManager
+   * @var SitemapManager
    */
   protected $sitemapManager;
 
   /**
    * Constructs update status data.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\sitemap\SitemapManager $sitemap_manager
+   * @param SitemapManager $sitemap_manager
    *   The SitemapMap plugin manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, SitemapManager $sitemap_manager) {
diff --git a/src/Form/SitemapSettingsForm.php b/src/Form/SitemapSettingsForm.php
index dc426c0..b9a27bf 100644
--- a/src/Form/SitemapSettingsForm.php
+++ b/src/Form/SitemapSettingsForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\sitemap\Form;
 
+use Drupal\sitemap\SitemapInterface;
+use Drupal\sitemap\SitemapBase;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Config\ConfigFactory;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -18,23 +20,23 @@ class SitemapSettingsForm extends ConfigFormBase {
   /**
    * The SitemapMap plugin manager.
    *
-   * @var \Drupal\sitemap\SitemapManager
+   * @var SitemapManager
    */
   protected $sitemapManager;
 
   /**
    * An array of Sitemap plugins.
    *
-   * @var \Drupal\sitemap\SitemapInterface[]
+   * @var SitemapInterface[]
    */
   protected $plugins = [];
 
   /**
    * Constructs a SitemapSettingsForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\sitemap\SitemapManager $sitemap_manager
+   * @param SitemapManager $sitemap_manager
    *   The Sitemap plugin manager.
    */
   public function __construct(ConfigFactory $config_factory, SitemapManager $sitemap_manager) {
@@ -136,8 +138,7 @@ class SitemapSettingsForm extends ConfigFormBase {
     $sorted = $this->sortPlugins($this->plugins);
 
     foreach ($sorted as $id => $plugin) {
-      /** @var \Drupal\sitemap\SitemapBase $plugin */
-
+      /** @var SitemapBase $plugin */
       $form['plugins']['enabled'][$id] = [
         '#type' => 'checkbox',
         '#title' => $plugin->getLabel(),
diff --git a/src/Menu/SitemapMenuLinkTree.php b/src/Menu/SitemapMenuLinkTree.php
index 7c65b1b..d70864d 100644
--- a/src/Menu/SitemapMenuLinkTree.php
+++ b/src/Menu/SitemapMenuLinkTree.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\sitemap\Menu;
 
+use Drupal\Core\Menu\MenuLinkInterface;
 use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Menu\MenuLinkTree;
@@ -20,7 +21,7 @@ class SitemapMenuLinkTree extends MenuLinkTree {
     $items = [];
 
     foreach ($tree as $data) {
-      /** @var \Drupal\Core\Menu\MenuLinkInterface $link */
+      /** @var MenuLinkInterface $link */
       $link = $data->link;
 
       // Removed $link->isEnabled() check.
diff --git a/src/Plugin/Block/SitemapBlock.php b/src/Plugin/Block/SitemapBlock.php
index 7c8bc7a..0cd9593 100644
--- a/src/Plugin/Block/SitemapBlock.php
+++ b/src/Plugin/Block/SitemapBlock.php
@@ -24,7 +24,7 @@ class SitemapBlock extends BlockBase implements ContainerFactoryPluginInterface
   /**
    * Class Resolver service.
    *
-   * @var \Drupal\Core\DependencyInjection\ClassResolverInterface
+   * @var ClassResolverInterface
    */
   protected $classResolver;
 
@@ -37,7 +37,7 @@ class SitemapBlock extends BlockBase implements ContainerFactoryPluginInterface
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\DependencyInjection\ClassResolverInterface $class_resolver
+   * @param ClassResolverInterface $class_resolver
    *   The class resolver service.
    */
   public function __construct(
diff --git a/src/Plugin/Block/SitemapSyndicateBlock.php b/src/Plugin/Block/SitemapSyndicateBlock.php
index 2aa64ee..b36cc24 100644
--- a/src/Plugin/Block/SitemapSyndicateBlock.php
+++ b/src/Plugin/Block/SitemapSyndicateBlock.php
@@ -28,21 +28,21 @@ class SitemapSyndicateBlock extends BlockBase implements ContainerFactoryPluginI
   /**
    * The route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -55,11 +55,11 @@ class SitemapSyndicateBlock extends BlockBase implements ContainerFactoryPluginI
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $routeMatch
+   * @param RouteMatchInterface $routeMatch
    *   The route match.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The configuration factory.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, RouteMatchInterface $routeMatch, ConfigFactoryInterface $configFactory, RendererInterface $renderer) {
diff --git a/src/Plugin/Derivative/BookSitemapDeriver.php b/src/Plugin/Derivative/BookSitemapDeriver.php
index 7d27703..21a10d1 100644
--- a/src/Plugin/Derivative/BookSitemapDeriver.php
+++ b/src/Plugin/Derivative/BookSitemapDeriver.php
@@ -17,14 +17,14 @@ class BookSitemapDeriver extends DeriverBase implements ContainerDeriverInterfac
   /**
    * The book manager.
    *
-   * @var \Drupal\book\BookManagerInterface
+   * @var BookManagerInterface
    */
   protected $bookManager;
 
   /**
    * Constructs new SitemapBooks sitemap_map.
    *
-   * @param \Drupal\book\BookManagerInterface $book_manager
+   * @param BookManagerInterface $book_manager
    *   The book manager.
    */
   public function __construct(BookManagerInterface $book_manager) {
diff --git a/src/Plugin/Derivative/MenuSitemapDeriver.php b/src/Plugin/Derivative/MenuSitemapDeriver.php
index 08d0432..2becaab 100644
--- a/src/Plugin/Derivative/MenuSitemapDeriver.php
+++ b/src/Plugin/Derivative/MenuSitemapDeriver.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\sitemap\Plugin\Derivative;
 
+use Drupal\system\Entity\Menu;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ -17,14 +18,14 @@ class MenuSitemapDeriver extends DeriverBase implements ContainerDeriverInterfac
   /**
    * The menu storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $menuStorage;
 
   /**
    * Constructs new SitemapMenus sitemap_map.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $menu_storage
+   * @param EntityStorageInterface $menu_storage
    *   The menu storage.
    */
   public function __construct(EntityStorageInterface $menu_storage) {
@@ -45,7 +46,7 @@ class MenuSitemapDeriver extends DeriverBase implements ContainerDeriverInterfac
    */
   public function getDerivativeDefinitions($base_plugin_definition) {
     foreach ($this->menuStorage->loadMultiple() as $menu => $entity) {
-      /** @var \Drupal\system\Entity\Menu $entity */
+      /** @var Menu $entity */
       $this->derivatives[$menu] = $base_plugin_definition;
       $this->derivatives[$menu]['title'] = $this->t('Menu: @menu', ['@menu' => $entity->label()]);
       $this->derivatives[$menu]['description'] = $entity->getDescription();
diff --git a/src/Plugin/Derivative/VocabularySitemapDeriver.php b/src/Plugin/Derivative/VocabularySitemapDeriver.php
index c978891..d81b2e2 100644
--- a/src/Plugin/Derivative/VocabularySitemapDeriver.php
+++ b/src/Plugin/Derivative/VocabularySitemapDeriver.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\sitemap\Plugin\Derivative;
 
+use Drupal\taxonomy\VocabularyInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\taxonomy\Entity\Vocabulary;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ -27,7 +28,7 @@ class VocabularySitemapDeriver extends DeriverBase implements ContainerDeriverIn
   public function getDerivativeDefinitions($base_plugin_definition) {
     if (\Drupal::moduleHandler()->moduleExists('taxonomy')) {
       foreach (Vocabulary::loadMultiple() as $id => $vocabulary) {
-        /** @var \Drupal\taxonomy\VocabularyInterface $vocabulary */
+        /** @var VocabularyInterface $vocabulary */
         $this->derivatives[$id] = $base_plugin_definition;
         $this->derivatives[$id]['title'] = $this->t('Vocabulary: @vocabulary', ['@vocabulary' => $vocabulary->label()]);
         $this->derivatives[$id]['description'] = $vocabulary->getDescription();
diff --git a/src/Plugin/Sitemap/Book.php b/src/Plugin/Sitemap/Book.php
index 3dc67d8..9478321 100644
--- a/src/Plugin/Sitemap/Book.php
+++ b/src/Plugin/Sitemap/Book.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\sitemap\Plugin\Sitemap;
 
+use Drupal\book\BookManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\sitemap\SitemapBase;
 
@@ -50,7 +51,7 @@ class Book extends SitemapBase {
    * {@inheritdoc}
    */
   public function view() {
-    /** @var \Drupal\book\BookManagerInterface $book_manager */
+    /** @var BookManagerInterface $book_manager */
     $book_manager = \Drupal::service('book.manager');
     $book_id = $this->pluginDefinition['book'];
 
diff --git a/src/Plugin/Sitemap/Vocabulary.php b/src/Plugin/Sitemap/Vocabulary.php
index 9706613..560d600 100644
--- a/src/Plugin/Sitemap/Vocabulary.php
+++ b/src/Plugin/Sitemap/Vocabulary.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\sitemap\Plugin\Sitemap;
 
+use Drupal\taxonomy\TermStorageInterface;
+use Drupal\taxonomy\TermInterface;
+use Drupal\Core\Routing\RouteProviderInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
 use Drupal\sitemap\SitemapBase;
@@ -217,7 +220,7 @@ class Vocabulary extends SitemapBase {
     $display_unpublished = $this->settings['display_unpublished'];
     $list = [];
     if ($maxDepth = $this->settings['term_depth']) {
-      /** @var \Drupal\taxonomy\TermStorageInterface $termStorage */
+      /** @var TermStorageInterface $termStorage */
       $termStorage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
 
       $hierarchyType = $termStorage->getVocabularyHierarchyType($vid);
@@ -418,7 +421,7 @@ class Vocabulary extends SitemapBase {
     if ($maxDepth >= $currentDepth) {
       $child_objects = $termStorage->loadTree($vid, $object->tid, 1);
 
-      /** @var \Drupal\taxonomy\TermInterface[] $children */
+      /** @var TermInterface[] $children */
       foreach ($children as $child) {
         foreach ($child_objects as $child_object) {
           if ($child_object->tid == $child->id()) {
@@ -524,7 +527,7 @@ class Vocabulary extends SitemapBase {
   protected function validateCustomRoute($string) {
     $parts = $this->splitRouteArg($string);
 
-    /** @var \Drupal\Core\Routing\RouteProviderInterface $route_provider */
+    /** @var RouteProviderInterface $route_provider */
     $route_provider = \Drupal::service('router.route_provider');
 
     try {
diff --git a/src/SitemapInterface.php b/src/SitemapInterface.php
index 8abf277..fba5a13 100644
--- a/src/SitemapInterface.php
+++ b/src/SitemapInterface.php
@@ -19,7 +19,7 @@ interface SitemapInterface extends ConfigurableInterface, DependentPluginInterfa
    *
    * @param array $form
    *   The form where the settings form is being included in.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/SitemapManager.php b/src/SitemapManager.php
index 862aca8..0a81fe3 100644
--- a/src/SitemapManager.php
+++ b/src/SitemapManager.php
@@ -21,9 +21,9 @@ class SitemapManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Tests/SitemapBookTest.php b/src/Tests/SitemapBookTest.php
index 311df2e..df7bede 100644
--- a/src/Tests/SitemapBookTest.php
+++ b/src/Tests/SitemapBookTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\sitemap\Tests;
 
+use Drupal\node\NodeInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 
 /**
@@ -22,21 +23,21 @@ class SitemapBookTest extends SitemapBrowserTestBase {
   /**
    * The parent book node.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $book;
 
   /**
    * Nodes that make up the content of the book.
    *
-   * @var \Drupal\node\NodeInterface[]
+   * @var NodeInterface[]
    */
   protected $nodes;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create user then login.
@@ -94,6 +95,7 @@ class SitemapBookTest extends SitemapBrowserTestBase {
 
   /**
    * Tests a custom title setting for books.
+   * @doesNotPerformAssertions
    */
   public function testBooksCustomTitle() {
     $bid = $this->book->id();
@@ -141,7 +143,7 @@ class SitemapBookTest extends SitemapBrowserTestBase {
    * @param int|null $parent
    *   (optional) Parent book reference ID. Defaults to NULL.
    *
-   * @return \Drupal\node\NodeInterface
+   * @return NodeInterface
    *   Returns object
    *
    * @throws \Exception
@@ -153,13 +155,15 @@ class SitemapBookTest extends SitemapBrowserTestBase {
     ];
 
     if ($parent !== NULL) {
-      $this->drupalPostForm('node/add/book', $edit, $this->t('Change book (update list of parents)'));
+      $this->drupalGet('node/add/book');
+      $this->submitForm($edit, $this->t('Change book (update list of parents)'));
 
       $edit['book[pid]'] = $parent;
-      $this->drupalPostForm(NULL, $edit, $this->t('Save'));
+      $this->submitForm($edit, $this->t('Save'));
     }
     else {
-      $this->drupalPostForm('node/add/book', $edit, $this->t('Save'));
+      $this->drupalGet('node/add/book');
+      $this->submitForm($edit, $this->t('Save'));
     }
 
     return $this->drupalGetNodeByTitle($edit['title[0][value]']);
diff --git a/src/Tests/SitemapBrowserTestBase.php b/src/Tests/SitemapBrowserTestBase.php
index dfaabd1..71403e5 100644
--- a/src/Tests/SitemapBrowserTestBase.php
+++ b/src/Tests/SitemapBrowserTestBase.php
@@ -25,7 +25,8 @@ abstract class SitemapBrowserTestBase extends BrowserTestBase {
    *   The array with the form fields.
    */
   protected function saveSitemapForm(array $edit = []) {
-    $this->drupalPostForm('admin/config/search/sitemap', $edit, $this->t('Save configuration'));
+    $this->drupalGet('admin/config/search/sitemap');
+    $this->submitForm($edit, $this->t('Save configuration'));
   }
 
 }
diff --git a/src/Tests/SitemapContentTest.php b/src/Tests/SitemapContentTest.php
index 9700369..b3e31a6 100644
--- a/src/Tests/SitemapContentTest.php
+++ b/src/Tests/SitemapContentTest.php
@@ -28,7 +28,7 @@ class SitemapContentTest extends SitemapTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Place page title block.
diff --git a/src/Tests/SitemapCssTest.php b/src/Tests/SitemapCssTest.php
index fa75564..311d04a 100644
--- a/src/Tests/SitemapCssTest.php
+++ b/src/Tests/SitemapCssTest.php
@@ -12,7 +12,7 @@ class SitemapCssTest extends SitemapTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->drupalLogin($this->userAdmin);
@@ -24,7 +24,7 @@ class SitemapCssTest extends SitemapTestBase {
   public function testIncludeCssFile() {
     // Assert that css file is included by default.
     $this->drupalGet('/sitemap');
-    $this->assertRaw('sitemap.theme.css');
+    $this->assertSession()->responseContains('sitemap.theme.css');
 
     // Change module not to include css file.
     $this->saveSitemapForm(['include_css' => FALSE]);
@@ -32,7 +32,7 @@ class SitemapCssTest extends SitemapTestBase {
 
     // Assert that css file is not included.
     $this->drupalGet('/sitemap');
-    $this->assertNoRaw('sitemap.theme.css');
+    $this->assertSession()->responseNotContains('sitemap.theme.css');
   }
 
 }
diff --git a/src/Tests/SitemapFrontpageTest.php b/src/Tests/SitemapFrontpageTest.php
index b2c9a5f..d58de6a 100644
--- a/src/Tests/SitemapFrontpageTest.php
+++ b/src/Tests/SitemapFrontpageTest.php
@@ -21,7 +21,7 @@ class SitemapFrontpageTest extends SitemapBrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create user, then login.
