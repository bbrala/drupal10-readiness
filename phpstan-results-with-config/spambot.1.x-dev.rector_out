modules/contrib/spambot/spambot.install
modules/contrib/spambot/spambot.module
modules/contrib/spambot/src/Controller/SpambotUserSpamPageController.php
modules/contrib/spambot/src/Form/SpambotSettingsForm.php
modules/contrib/spambot/src/Form/SpambotUserspamForm.php
modules/contrib/spambot/tests/src/Kernel/SpambotCacheTest.php
modules/contrib/spambot/tests/src/Kernel/SpambotUserspamTest.php

5 files with changes
====================

1) modules/contrib/spambot/tests/src/Kernel/SpambotUserspamTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\spambot\Kernel;

+use Drupal\Core\Entity\EntityBase;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\DependencyInjection\ServiceModifierInterface;
 use Drupal\KernelTests\KernelTestBase;
@@ @@
   /**
    * User for tests.
    *
-   * @var \Drupal\Core\Entity\EntityBase|\Drupal\Core\Entity\EntityInterface
+   * @var EntityBase|EntityInterface
    */
   protected $user;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/spambot/src/Form/SpambotUserspamForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\spambot\Form;

+use Drupal\Core\Extension\ModuleHandler;
+use Drupal\Core\Messenger\Messenger;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\comment\Entity\Comment;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Batch\BatchBuilder;
@@ @@
   /**
    * This will hold Database connection object.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Service that manages modules in a Drupal installation.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;

@@ @@
   /**
    * Batch Builder.
    *
-   * @var \Drupal\Core\Batch\BatchBuilder
+   * @var BatchBuilder
    */
   protected $batchBuilder;

@@ @@
   /**
    * Config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   Constructs a Connection object.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Provides an interface for an entity type and its metadata.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   Interface for classes that manage a set of enabled modules.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Stores runtime messages sent out to individual users on the page.
    */
   public function __construct(ConfigFactoryInterface $config_factory, Connection $connection, EntityTypeManagerInterface $entityTypeManager, ModuleHandlerInterface $moduleHandler, MessengerInterface $messenger) {
@@ @@
       }

       foreach ($cids as $cid) {
-        /** @var \Drupal\comment\Entity\Comment $comment */
+        /** @var Comment $comment */
         $comment = $this->entityTypeManager->getStorage('comment')->load($cid);
         if ($comment) {
           $subject = $comment->getSubject();
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $values = $form_state->getValues();
-    /** @var \Drupal\user\UserInterface $account */
+    /** @var UserInterface $account */
     $account = $this->entityTypeManager->getStorage('user')->load($values['uid']);
     $config = \Drupal::config('spambot.settings');

@@ @@
   /**
    * Function provide functional for "Check" button.
    *
-   * @param \Drupal\user\UserInterface|null $account
+   * @param UserInterface|null $account
    *   Account who will checked.
-   * @param \Drupal\Core\Config\ImmutableConfig|null $config
+   * @param ImmutableConfig|null $config
    *   Config for get white list ip.
    */
   public function checkSubmit($account, $config) {
@@ @@
   /**
    * Function provide functional for button "take action".
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   FormState.
-   * @param \Drupal\user\UserInterface|null $account
+   * @param UserInterface|null $account
    *   Account who will take action.
-   * @param \Drupal\Core\Config\ImmutableConfig|null $config
+   * @param ImmutableConfig|null $config
    *   Config for get api key.
    * @param array|null $values
    *   FormState values.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException|\Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException|EntityStorageException
    */
   public function actionSubmit(FormStateInterface $form_state, $account, $config, $values) {
     $comments_enabled = $this->moduleHandler->moduleExists('comment');
@@ @@
     // Report posts to www.stopforumspam.com.
     if (!empty($values['report']['nids'])) {
       foreach (array_filter($values['report']['nids']) as $nid => $unused) {
-        /** @var \Drupal\node\Entity\Node $node */
+        /** @var Node $node */
         $node = $this->entityTypeManager->getStorage('node')->load($nid);
         if ($node && !empty($node->id())) {
           $body = $node->get('body')->getValue();
@@ @@

     if ($comments_enabled && !empty($values['report']['cids'])) {
       foreach (array_filter($values['report']['cids']) as $cid => $unused) {
-        /** @var \Drupal\comment\Entity\Comment $comment */
+        /** @var Comment $comment */
         $comment = $this->entityTypeManager->getStorage('comment')->load($cid);
         if ($comment && !empty($comment->id())) {
           $body = $comment->get('comment_body')->getValue();
@@ @@
       ->setProgressMessage($this->t('Completed @current of @total.'))
       ->setErrorMessage($this->t('An error has occurred.'));

-    $this->batchBuilder->setFile(drupal_get_path('module', 'spambot') . '/src/Form/SpambotUserspamForm.php');
+    $this->batchBuilder->setFile(\Drupal::service('extension.list.module')->getPath('spambot') . '/src/Form/SpambotUserspamForm.php');
   }

   /**
@@ @@
    * @param array $context
    *   Batch data.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function deleteEntitiesBatch($items, $type, array &$context) {
     // Elements per operation.
@@ @@
    * @param string $type
    *   Entity type.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function deleteEntity($id, $type) {
     $storage = $this->entityTypeManager->getStorage($type);
@@ @@
    * @param array $context
    *   Batch data.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function entitiesUnpublish($items, $type, array &$context) {
     // Elements per operation.
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/spambot/src/Form/SpambotSettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\spambot\Form;

+use Drupal\user\UserInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * This will hold Database connection object.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   Constructs a Connection object.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Provides an interface for an entity type and its metadata.
-   * @param Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   Provides an interface for state.
    */
   public function __construct(ConfigFactoryInterface $config_factory, Connection $connection, EntityTypeManagerInterface $entityTypeManager, StateInterface $state) {
@@ @@
         ->execute()
         ->fetchField();

-      /** @var \Drupal\user\UserInterface $account */
+      /** @var UserInterface $account */
       $account = $this->entityTypeManager->getStorage('user')->load($last_uid);
       $suffix = '<br />';
       $renderableLink = Link::fromTextAndUrl($account->label(), $account->toUrl())->toRenderable();
       $suffix .= $this->t('The last checked user account is: %account (uid %uid)', [
-        '%account' => render($renderableLink),
+        '%account' => \Drupal::service('renderer')->render($renderableLink),
         '%uid' => $account->id(),
       ]);
     }
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/spambot/src/Controller/SpambotUserSpamPageController.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Returns a render-able array for a spam page.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user who can be reported.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/spambot/spambot.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\user\UserInterface;
 /**
  * @file
  * Main module file.
@@ @@
     if ($uids) {
       // Action to be done after the existing user is known as spam User.
       $action = $config->get('spambot_spam_account_action');
-      /** @var \Drupal\user\UserInterface[] $accounts */
+      /** @var UserInterface[] $accounts */
       $accounts = User::loadMultiple($uids);
       foreach ($accounts as $account) {
         $account_status = $account->status->getValue()[0]['value'];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 5 files have been changed by Rector                                       

