modules/contrib/domain_lang/domain_lang.module
modules/contrib/domain_lang/src/DomainLangHandler.php
modules/contrib/domain_lang/src/DomainLangHandlerInterface.php
modules/contrib/domain_lang/src/DomainLangServiceProvider.php
modules/contrib/domain_lang/src/EventSubscriber/DomainLangConfigRedirect.php
modules/contrib/domain_lang/src/Exception/DomainLangDomainNotFoundException.php
modules/contrib/domain_lang/src/Form/DomainLangNegotiationBrowserDeleteForm.php
modules/contrib/domain_lang/src/Form/DomainLangNegotiationBrowserForm.php
modules/contrib/domain_lang/src/Form/DomainLangNegotiationConfigureForm.php
modules/contrib/domain_lang/src/Form/DomainLangNegotiationSelectedForm.php
modules/contrib/domain_lang/src/Form/DomainLangNegotiationSessionForm.php
modules/contrib/domain_lang/src/Form/DomainLangNegotiationUrlForm.php
modules/contrib/domain_lang/src/Language/LanguageNegotiator.php

9 files with changes
====================

1) modules/contrib/domain_lang/src/Form/DomainLangNegotiationUrlForm.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The domain lang handler.
    *
-   * @var \Drupal\domain_lang\DomainLangHandlerInterface
+   * @var DomainLangHandlerInterface
    */
   protected $domainLangHandler;

@@ @@
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\domain_lang\DomainLangHandlerInterface $domain_lang_handler
+   * @param DomainLangHandlerInterface $domain_lang_handler
    *   The domain lang handler.
    */
   public function __construct(ConfigFactoryInterface $config_factory, LanguageManagerInterface $language_manager, DomainLangHandlerInterface $domain_lang_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/domain_lang/src/Form/DomainLangNegotiationSessionForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The domain lang handler.
    *
-   * @var \Drupal\domain_lang\DomainLangHandlerInterface
+   * @var DomainLangHandlerInterface
    */
   protected $domainLangHandler;

@@ @@
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\domain_lang\DomainLangHandlerInterface $domain_lang_handler
+   * @param DomainLangHandlerInterface $domain_lang_handler
    *   The domain lang handler.
    */
   public function __construct(ConfigFactoryInterface $config_factory, DomainLangHandlerInterface $domain_lang_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/domain_lang/src/Form/DomainLangNegotiationSelectedForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The domain lang handler.
    *
-   * @var \Drupal\domain_lang\DomainLangHandlerInterface
+   * @var DomainLangHandlerInterface
    */
   protected $domainLangHandler;

@@ @@
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\domain_lang\DomainLangHandlerInterface $domain_lang_handler
+   * @param DomainLangHandlerInterface $domain_lang_handler
    *   The domain lang handler.
    */
   public function __construct(ConfigFactoryInterface $config_factory, DomainLangHandlerInterface $domain_lang_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/domain_lang/src/Form/DomainLangNegotiationConfigureForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\domain_lang\Form;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Block\BlockManagerInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
   /**
    * The domain lang handler.
    *
-   * @var \Drupal\domain_lang\DomainLangHandlerInterface
+   * @var DomainLangHandlerInterface
    */
   protected $domainLangHandler;

@@ @@
   /**
    * Route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;

@@ @@
   /**
    * Constructs a NegotiationConfigureForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\language\ConfigurableLanguageManagerInterface $language_manager
+   * @param ConfigurableLanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\language\LanguageNegotiatorInterface $negotiator
+   * @param LanguageNegotiatorInterface $negotiator
    *   The language negotiation methods manager.
-   * @param \Drupal\Core\Block\BlockManagerInterface $block_manager
+   * @param BlockManagerInterface $block_manager
    *   The block manager.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $block_storage
+   * @param EntityStorageInterface $block_storage
    *   The block storage, or NULL if not available.
-   * @param \Drupal\domain_lang\DomainLangHandlerInterface $domain_lang_handler
+   * @param DomainLangHandlerInterface $domain_lang_handler
    *   The domain lang handler.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   Route provider.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ConfigurableLanguageManagerInterface $language_manager, LanguageNegotiatorInterface $negotiator, BlockManagerInterface $block_manager, ThemeHandlerInterface $theme_handler, EntityStorageInterface $block_storage = NULL, DomainLangHandlerInterface $domain_lang_handler, RouteProviderInterface $route_provider) {
@@ @@
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container) {
-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager */
+    /** @var EntityTypeManagerInterface $entity_manager */
     $entity_manager = $container->get('entity_type.manager');
     $block_storage = $entity_manager->hasHandler('block', 'storage') ? $entity_manager->getStorage('block') : NULL;
     return new static(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/domain_lang/src/Form/DomainLangNegotiationBrowserForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The domain lang handler.
    *
-   * @var \Drupal\domain_lang\DomainLangHandlerInterface
+   * @var DomainLangHandlerInterface
    */
   protected $domainLangHandler;

@@ @@
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\language\ConfigurableLanguageManagerInterface $language_manager
+   * @param ConfigurableLanguageManagerInterface $language_manager
    *   The configurable language manager.
-   * @param \Drupal\domain_lang\DomainLangHandlerInterface $domain_lang_handler
+   * @param DomainLangHandlerInterface $domain_lang_handler
    *   The domain lang handler.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ConfigurableLanguageManagerInterface $language_manager, DomainLangHandlerInterface $domain_lang_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/domain_lang/src/Form/DomainLangNegotiationBrowserDeleteForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The domain lang handler.
    *
-   * @var \Drupal\domain_lang\DomainLangHandlerInterface
+   * @var DomainLangHandlerInterface
    */
   protected $domainLangHandler;

@@ @@
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\domain_lang\DomainLangHandlerInterface $domain_lang_handler
+   * @param DomainLangHandlerInterface $domain_lang_handler
    *   The domain lang handler.
    */
   public function __construct(DomainLangHandlerInterface $domain_lang_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/domain_lang/src/EventSubscriber/DomainLangConfigRedirect.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\domain_lang\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\Routing\TrustedRedirectResponse;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
 use Drupal\domain\DomainNegotiatorInterface;
 use Symfony\Cmf\Component\Routing\RouteObjectInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * The domain negotiator.
    *
-   * @var \Drupal\domain\DomainNegotiatorInterface
+   * @var DomainNegotiatorInterface
    */
   protected $domainNegotiator;

@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Constructs a new class object.
    *
-   * @param \Drupal\domain\DomainNegotiatorInterface $domain_negotiator
+   * @param DomainNegotiatorInterface $domain_negotiator
    *   The domain negotiator service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(DomainNegotiatorInterface $domain_negotiator, MessengerInterface $messenger) {
@@ @@
   /**
    * Check current request and redirect if needed.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   Current request response event.
    */
-  public function checkRequest(GetResponseEvent $event) {
+  public function checkRequest(RequestEvent $event) {
     $domain = $this->domainNegotiator->getActiveDomain();

     if ($domain instanceof DomainInterface) {
@@ @@
   /**
    * Sets TrustedRedirectResponse to redirect to related domain page.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The request response event.
    * @param string $route
    *   The name of the route.
-   * @param \Drupal\domain\DomainInterface $domain
+   * @param DomainInterface $domain
    *   The domain object.
    */
-  protected function setRedirectResponse(GetResponseEvent $event, $route, DomainInterface $domain) {
+  protected function setRedirectResponse(RequestEvent $event, $route, DomainInterface $domain) {
     $event->setResponse(new TrustedRedirectResponse(Url::fromRoute(
       $route,
       ['domain' => $domain->id()],
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/domain_lang/src/DomainLangHandlerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\domain_lang;

+use Drupal\domain_lang\Exception\DomainLangDomainNotFoundException;
 use Drupal\domain\DomainInterface;

 /**
@@ @@
    *
    * @param string $config_name
    *   The name of the config object.
-   * @param \Drupal\domain\DomainInterface $domain
+   * @param DomainInterface $domain
    *   Domain object.
    *
    * @return string
@@ @@
   /**
    * Return domain object from URL.
    *
-   * @return \Drupal\domain\DomainInterface
+   * @return DomainInterface
    *   Loaded domain object.
    *
-   * @throws \Drupal\domain_lang\Exception\DomainLangDomainNotFoundException
+   * @throws DomainLangDomainNotFoundException
    *   In case if domain not found.
    */
   public function getDomainFromUrl();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/domain_lang/src/DomainLangHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\domain_lang;

+use Drupal\Core\Config\Config;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The language negotiation method plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $negotiatorManager;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\language\ConfigurableLanguageManagerInterface
+   * @var ConfigurableLanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The language negotiator.
    *
-   * @var \Drupal\language\LanguageNegotiatorInterface
+   * @var LanguageNegotiatorInterface
    */
   protected $languageNegotiator;

@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The currently active route match object.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $currentRouteMatch;

@@ @@
   /**
    * Constructs a new class object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $negotiator_manager
+   * @param PluginManagerInterface $negotiator_manager
    *   The language negotiation methods plugin manager.
-   * @param \Drupal\language\ConfigurableLanguageManagerInterface $language_manager
+   * @param ConfigurableLanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\language\LanguageNegotiatorInterface $language_negotiator
+   * @param LanguageNegotiatorInterface $language_negotiator
    *   The language negotiation methods manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $current_route_match
+   * @param RouteMatchInterface $current_route_match
    *   The currently active route match object.
    */
   public function __construct(ConfigFactoryInterface $config_factory, PluginManagerInterface $negotiator_manager, ConfigurableLanguageManagerInterface $language_manager, LanguageNegotiatorInterface $language_negotiator, EntityTypeManagerInterface $entity_type_manager, RouteMatchInterface $current_route_match) {
@@ @@
   /**
    * Returns mutable configuration object for language types.
    *
-   * @return \Drupal\Core\Config\Config
+   * @return Config
    *   The language types config object.
    */
   protected function getLanguageTypesConfig() {
@@ @@
    * @param string $config_name
    *   The name of the config object.
    *
-   * @return \Drupal\Core\Config\Config
+   * @return Config
    *   Editable config object.
    */
   protected function getEditableConfig($config_name) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 9 files have been changed by Rector                                       

