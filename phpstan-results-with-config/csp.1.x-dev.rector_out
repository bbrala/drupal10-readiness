modules/contrib/csp/csp.install
modules/contrib/csp/csp.module
modules/contrib/csp/csp_extras/csp_extras.module
modules/contrib/csp/csp_extras/src/Ajax/AddAssetsCommand.php
modules/contrib/csp/csp_extras/src/Ajax/AjaxResponseAttachmentsProcessor.php
modules/contrib/csp/src/Annotation/CspReportingHandler.php
modules/contrib/csp/src/Controller/ReportUri.php
modules/contrib/csp/src/Csp.php
modules/contrib/csp/src/CspEvents.php
modules/contrib/csp/src/Event/PolicyAlterEvent.php
modules/contrib/csp/src/EventSubscriber/CoreCspSubscriber.php
modules/contrib/csp/src/EventSubscriber/Ie9CspSubscriber.php
modules/contrib/csp/src/EventSubscriber/ResponseCspSubscriber.php
modules/contrib/csp/src/Form/CspSettingsForm.php
modules/contrib/csp/src/LibraryPolicyBuilder.php
modules/contrib/csp/src/Plugin/CspReportingHandler/None.php
modules/contrib/csp/src/Plugin/CspReportingHandler/ReportUri.php
modules/contrib/csp/src/Plugin/CspReportingHandler/SiteLog.php
modules/contrib/csp/src/Plugin/CspReportingHandler/Uri.php
modules/contrib/csp/src/Plugin/ReportingHandlerBase.php
modules/contrib/csp/src/Plugin/ReportingHandlerInterface.php
modules/contrib/csp/src/ReportingHandlerPluginManager.php
modules/contrib/csp/tests/src/Unit/Controller/ReportUriTest.php
modules/contrib/csp/tests/src/Unit/CspFirefoxBugTest.php
modules/contrib/csp/tests/src/Unit/CspOptimizationTest.php
modules/contrib/csp/tests/src/Unit/CspTest.php
modules/contrib/csp/tests/src/Unit/EventSubscriber/CoreCspSubscriberTest.php
modules/contrib/csp/tests/src/Unit/EventSubscriber/Ie9CspSubscriberTest.php
modules/contrib/csp/tests/src/Unit/EventSubscriber/ResponseCspSubscriberTest.php
modules/contrib/csp/tests/src/Unit/Form/CspSettingsFormTest.php
modules/contrib/csp/tests/src/Unit/LibraryPolicyBuilderTest.php

16 files with changes
=====================

1) modules/contrib/csp/tests/src/Unit/LibraryPolicyBuilderTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\csp\Unit;

+use Drupal\Core\Cache\CacheBackendInterface;
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use PHPUnit\Framework\MockObject\MockObject;
+use Drupal\Core\Theme\ActiveTheme;
+use Drupal\Core\Extension\ThemeHandlerInterface;
+use Drupal\Core\Asset\LibraryDiscoveryInterface;
 use Drupal\Core\Asset\LibraryDiscovery;
 use Drupal\Core\Cache\MemoryBackend;
 use Drupal\Core\Extension\ModuleHandler;
@@ @@
   /**
    * Memory Cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * Mock Module Handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var ModuleHandlerInterface|MockObject
    */
   protected $moduleHandler;

@@ @@
   /**
    * Mock Active Theme.
    *
-   * @var \Drupal\Core\Theme\ActiveTheme|\PHPUnit_Framework_MockObject_MockObject
+   * @var ActiveTheme|MockObject
    */
   protected $activeTheme;

@@ @@
   /**
    * Mock Theme Handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var ThemeHandlerInterface|MockObject
    */
   protected $themeHandler;

@@ @@
   /**
    * Mock Library Discovery.
    *
-   * @var \Drupal\Core\Asset\LibraryDiscoveryInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var LibraryDiscoveryInterface|MockObject
    */
   protected $libraryDiscovery;

@@ @@

     $this->cache = new MemoryBackend();

-    $this->moduleHandler = $this->getMockBuilder(ModuleHandler::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->moduleHandler = $this->createMock(ModuleHandler::class);

-    $this->themeHandler = $this->getMockBuilder(ThemeHandler::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->themeHandler = $this->createMock(ThemeHandler::class);

-    $this->libraryDiscovery = $this->getMockBuilder(LibraryDiscovery::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->libraryDiscovery = $this->createMock(LibraryDiscovery::class);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/csp/tests/src/Unit/EventSubscriber/ResponseCspSubscriberTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\csp\Unit\EventSubscriber;

+use PHPUnit\Framework\MockObject\MockObject;
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
+use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Render\HtmlResponse;
 use Drupal\csp\Csp;
@@ @@
 use Drupal\Tests\UnitTestCase;
 use Symfony\Component\EventDispatcher\EventDispatcher;
 use Symfony\Component\HttpFoundation\ResponseHeaderBag;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * Mock HTTP Response.
    *
-   * @var \Drupal\Core\Render\HtmlResponse|\PHPUnit_Framework_MockObject_MockObject
+   * @var HtmlResponse|MockObject
    */
   protected $response;

@@ @@
   /**
    * Mock Response Event.
    *
-   * @var \Symfony\Component\HttpKernel\Event\FilterResponseEvent|\PHPUnit_Framework_MockObject_MockObject
+   * @var ResponseEvent|MockObject
    */
   protected $event;

@@ @@
   /**
    * The Library Policy service.
    *
-   * @var \Drupal\csp\LibraryPolicyBuilder|\PHPUnit_Framework_MockObject_MockObject
+   * @var LibraryPolicyBuilder|MockObject
    */
   private $libraryPolicy;

@@ @@
   /**
    * The Reporting Handler Plugin Manager service.
    *
-   * @var \Drupal\csp\ReportingHandlerPluginManager|\PHPUnit_Framework_MockObject_MockObject
+   * @var ReportingHandlerPluginManager|MockObject
    */
   private $reportingHandlerPluginManager;

@@ @@
   /**
    * The Event Dispatcher Service.
    *
-   * @var \PHPUnit\Framework\MockObject\MockObject|\Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var MockObject|EventDispatcherInterface
    */
   private $eventDispatcher;

@@ @@
   public function setUp(): void {
     parent::setUp();

-    $this->response = $this->getMockBuilder(HtmlResponse::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->response->headers = $this->getMockBuilder(ResponseHeaderBag::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-    $responseCacheableMetadata = $this->getMockBuilder(CacheableMetadata::class)
-      ->getMock();
+    $this->response = $this->createMock(HtmlResponse::class);
+    $this->response->headers = $this->createMock(ResponseHeaderBag::class);
+    $responseCacheableMetadata = $this->createMock(CacheableMetadata::class);
     $this->response->method('getCacheableMetadata')
       ->willReturn($responseCacheableMetadata);

-    /** @var \Symfony\Component\HttpKernel\Event\FilterResponseEvent|\PHPUnit_Framework_MockObject_MockObject $event */
-    $this->event = $this->getMockBuilder(FilterResponseEvent::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    /** @var ResponseEvent|MockObject $event */
+    $this->event = $this->createMock(ResponseEvent::class);
     $this->event->expects($this->any())
       ->method('isMasterRequest')
       ->willReturn(TRUE);
@@ @@
       ->method('getResponse')
       ->willReturn($this->response);

-    $this->libraryPolicy = $this->getMockBuilder(LibraryPolicyBuilder::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->libraryPolicy = $this->createMock(LibraryPolicyBuilder::class);

-    $this->reportingHandlerPluginManager = $this->getMockBuilder(ReportingHandlerPluginManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->reportingHandlerPluginManager = $this->createMock(ReportingHandlerPluginManager::class);

-    $this->eventDispatcher = $this->getMockBuilder(EventDispatcher::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->eventDispatcher = $this->createMock(EventDispatcher::class);
   }

   /**
@@ @@
    */
   public function testPolicyAlterEvent() {

-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var ConfigFactoryInterface|MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'system.performance' => [
         'css.preprocess' => FALSE,
@@ @@
    * @covers ::onKernelResponse
    */
   public function testEmptyDirective() {
-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var ConfigFactoryInterface|MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'system.performance' => [
         'css.preprocess' => FALSE,
@@ @@
    * @covers ::onKernelResponse
    */
   public function testUnoptimizedResponse() {
-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var ConfigFactoryInterface|MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'system.performance' => [
         'css.preprocess' => FALSE,
@@ @@
    */
   public function testOptimizedResponse() {

-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var ConfigFactoryInterface|MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'system.performance' => [
         'css.preprocess' => TRUE,
@@ @@
    */
   public function testEnforcedResponse() {

-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var ConfigFactoryInterface|MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'system.performance' => [
         'css.preprocess' => TRUE,
@@ @@
    */
   public function testBothPolicies() {

-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var ConfigFactoryInterface|MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'system.performance' => [
         'css.preprocess' => TRUE,
@@ @@
    */
   public function testWithLibraryDirective() {

-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var ConfigFactoryInterface|MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'system.performance' => [
         'css.preprocess' => TRUE,
@@ @@
    */
   public function testDisabledLibraryDirective() {

-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var ConfigFactoryInterface|MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'system.performance' => [
         'css.preprocess' => TRUE,
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/csp/tests/src/Unit/EventSubscriber/Ie9CspSubscriberTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\csp\Unit\EventSubscriber;

+use PHPUnit\Framework\MockObject\MockObject;
+use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Render\HtmlResponse;
 use Drupal\csp\Csp;
@@ @@
   /**
    * The Module Handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit\Framework\MockObject\MockObject
+   * @var ModuleHandlerInterface|MockObject
    */
   private $moduleHandler;

@@ @@
   /**
    * The response object.
    *
-   * @var \Drupal\Core\Render\HtmlResponse|\PHPUnit\Framework\MockObject\MockObject
+   * @var HtmlResponse|MockObject
    */
   private $response;

@@ @@
   public function setUp(): void {
     parent::setUp();

-    $this->moduleHandler = $this->getMockBuilder(ModuleHandlerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->moduleHandler = $this->createMock(ModuleHandlerInterface::class);

-    $this->response = $this->getMockBuilder(HtmlResponse::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->response = $this->createMock(HtmlResponse::class);
   }

   /**
@@ @@
         return $parameter === 'ie9';
       }));

-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var ConfigFactoryInterface|MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'system.performance' => [
         'css.preprocess' => FALSE,
@@ @@
         return $parameter === 'ie9';
       }));

-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var ConfigFactoryInterface|MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'system.performance' => [
         'css.preprocess' => FALSE,
@@ @@
         return $parameter === 'ie9';
       }));

-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var ConfigFactoryInterface|MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'system.performance' => [
         'css.preprocess' => TRUE,
@@ @@
       ->with($this->equalTo('ie9'))
       ->willReturn(TRUE);

-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var ConfigFactoryInterface|MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'system.performance' => [
         'css.preprocess' => FALSE,
@@ @@
         return $parameter === 'ie9';
       }));

-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var ConfigFactoryInterface|MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'system.performance' => [
         'css.preprocess' => FALSE,
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/csp/tests/src/Unit/EventSubscriber/CoreCspSubscriberTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\csp\Unit\EventSubscriber;

+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Core\Asset\LibraryDependencyResolverInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Render\HtmlResponse;
@@ @@
   /**
    * The Library Dependency Resolver service.
    *
-   * @var \Drupal\Core\Asset\LibraryDependencyResolverInterface|\PHPUnit\Framework\MockObject\MockObject
+   * @var LibraryDependencyResolverInterface|MockObject
    */
   private $libraryDependencyResolver;

@@ @@
   /**
    * The Module Handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit\Framework\MockObject\MockObject
+   * @var ModuleHandlerInterface|MockObject
    */
   private $moduleHandler;

@@ @@
   /**
    * The event subscriber for core modules.
    *
-   * @var \Drupal\csp\EventSubscriber\CoreCspSubscriber
+   * @var CoreCspSubscriber
    */
   private $coreCspSubscriber;

@@ @@
   /**
    * The response object.
    *
-   * @var \Drupal\Core\Render\HtmlResponse|\PHPUnit\Framework\MockObject\MockObject
+   * @var HtmlResponse|MockObject
    */
   private $response;

@@ @@
   public function setUp(): void {
     parent::setUp();

-    $this->libraryDependencyResolver = $this->getMockBuilder(LibraryDependencyResolverInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->libraryDependencyResolver = $this->createMock(LibraryDependencyResolverInterface::class);
     $this->libraryDependencyResolver->method('getLibrariesWithDependencies')
       ->willReturnArgument(0);

-    $this->moduleHandler = $this->getMockBuilder(ModuleHandlerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->moduleHandler = $this->createMock(ModuleHandlerInterface::class);

-    $this->response = $this->getMockBuilder(HtmlResponse::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->response = $this->createMock(HtmlResponse::class);

     $this->coreCspSubscriber = new CoreCspSubscriber($this->libraryDependencyResolver, $this->moduleHandler);
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/csp/tests/src/Unit/Controller/ReportUriTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\csp\Unit\Controller;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\csp\Controller\ReportUri;
 use Drupal\Tests\UnitTestCase;
 use Prophecy\Argument;
@@ @@
  */
 class ReportUriTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Valid JSON should get sent to the logger.
    */
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/csp/src/ReportingHandlerPluginManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache backend.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/csp/src/Plugin/ReportingHandlerInterface.php:25

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   The form fields for this plugin.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The submitted form state.
    */
   public function validateForm(array &$form, FormStateInterface $form_state);
@@ @@
   /**
    * Alter the provided policy according to the plugin settings.
    *
-   * @param \Drupal\csp\Csp $policy
+   * @param Csp $policy
    *   The policy to alter.
    */
   public function alterPolicy(Csp $policy);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/csp/src/LibraryPolicyBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\csp;

+use Drupal\Core\Asset\LibraryDiscovery;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Asset\LibraryDiscoveryInterface;
 use Drupal\Core\Cache\Cache;
@@ @@
   /**
    * The Library Discovery service.
    *
-   * @var \Drupal\Core\Asset\LibraryDiscovery
+   * @var LibraryDiscovery
    */
   protected $libraryDiscovery;

@@ @@
   /**
    * The cache bin.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The Theme Handler service.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
   /**
    * Constructs a new Library Parser.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache bin.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The Module Handler service.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $themeHandler
+   * @param ThemeHandlerInterface $themeHandler
    *   The Theme Handler service.
-   * @param \Drupal\Core\Asset\LibraryDiscoveryInterface $libraryDiscovery
+   * @param LibraryDiscoveryInterface $libraryDiscovery
    *   The Library Discovery Collector service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/csp/src/Form/CspSettingsForm.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The Library Policy Builder service.
    *
-   * @var \Drupal\csp\LibraryPolicyBuilder
+   * @var LibraryPolicyBuilder
    */
   private $libraryPolicyBuilder;

@@ @@
   /**
    * The Reporting Handler Plugin Manager service.
    *
-   * @var \Drupal\csp\ReportingHandlerPluginManager
+   * @var ReportingHandlerPluginManager
    */
   private $reportingHandlerPluginManager;

@@ @@
   /**
    * Constructs a \Drupal\csp\Form\CspSettingsForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\csp\LibraryPolicyBuilder $libraryPolicyBuilder
+   * @param LibraryPolicyBuilder $libraryPolicyBuilder
    *   The Library Policy Builder service.
-   * @param \Drupal\csp\ReportingHandlerPluginManager $reportingHandlerPluginManager
+   * @param ReportingHandlerPluginManager $reportingHandlerPluginManager
    *   The Reporting Handler Plugin Manger service.
-   * @param \Drupal\Core\Messenger\MessengerInterface|null $messenger
+   * @param MessengerInterface|null $messenger
    *   The Messenger service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, LibraryPolicyBuilder $libraryPolicyBuilder, ReportingHandlerPluginManager $reportingHandlerPluginManager, MessengerInterface $messenger) {
@@ @@
    *
    * @param array $form
    *   The form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function submitClearPolicy(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/csp/src/EventSubscriber/ResponseCspSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\csp\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Cache\CacheableResponseInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
 use Drupal\csp\ReportingHandlerPluginManager;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * The Config Factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The Library Policy Builder service.
    *
-   * @var \Drupal\csp\LibraryPolicyBuilder
+   * @var LibraryPolicyBuilder
    */
   protected $libraryPolicyBuilder;

@@ @@
   /**
    * The Reporting Handler Plugin Manager service.
    *
-   * @var \Drupal\csp\ReportingHandlerPluginManager
+   * @var ReportingHandlerPluginManager
    */
   private $reportingHandlerPluginManager;

@@ @@
   /**
    * The Event Dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   private $eventDispatcher;

@@ @@
   /**
    * Constructs a new ResponseSubscriber object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Config Factory service.
-   * @param \Drupal\csp\LibraryPolicyBuilder $libraryPolicyBuilder
+   * @param LibraryPolicyBuilder $libraryPolicyBuilder
    *   The Library Parser service.
-   * @param \Drupal\csp\ReportingHandlerPluginManager $reportingHandlerPluginManager
+   * @param ReportingHandlerPluginManager $reportingHandlerPluginManager
    *   The Reporting Handler Plugin Manager service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The Event Dispatcher Service.
    */
   public function __construct(
@@ @@
   /**
    * Add Content-Security-Policy header to response.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The Response event.
    */
-  public function onKernelResponse(FilterResponseEvent $event) {
+  public function onKernelResponse(ResponseEvent $event) {
     if (!$event->isMasterRequest()) {
       return;
     }
@@ @@
       }

       $this->eventDispatcher->dispatch(
-        CspEvents::POLICY_ALTER,
-        new PolicyAlterEvent($policy, $response)
+        new PolicyAlterEvent($policy, $response),
+        CspEvents::POLICY_ALTER
       );

       if (($headerValue = $policy->getHeaderValue())) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/csp/src/EventSubscriber/Ie9CspSubscriber.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The Module Handler Service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   private $moduleHandler;

@@ @@
   /**
    * The Config Factory Service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   private $configFactory;

@@ @@
   /**
    * Ie9CspSubscriber constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The Config Factory service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The Module Handler service.
    */
   public function __construct(ConfigFactoryInterface $configFactory, ModuleHandlerInterface $moduleHandler) {
@@ @@
    * more difficult, just check the optimization settings, as in
    * HtmlResponseAttachmentsProcessor::processAssetLibraries()
    *
-   * @param \Drupal\csp\Event\PolicyAlterEvent $alterEvent
+   * @param PolicyAlterEvent $alterEvent
    *   The Policy Alter event.
    *
    * @see https://www.drupal.org/node/2993171
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/csp/src/EventSubscriber/CoreCspSubscriber.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The Library Dependency Resolver service.
    *
-   * @var \Drupal\Core\Asset\LibraryDependencyResolverInterface
+   * @var LibraryDependencyResolverInterface
    */
   private $libraryDependencyResolver;

@@ @@
   /**
    * The Module Handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   private $moduleHandler;

@@ @@
   /**
    * CoreCspSubscriber constructor.
    *
-   * @param \Drupal\Core\Asset\LibraryDependencyResolverInterface $libraryDependencyResolver
+   * @param LibraryDependencyResolverInterface $libraryDependencyResolver
    *   The Library Dependency Resolver Service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The Module Handler service.
    */
   public function __construct(LibraryDependencyResolverInterface $libraryDependencyResolver, ModuleHandlerInterface $moduleHandler) {
@@ @@
   /**
    * Alter CSP policy for libraries included in Drupal core.
    *
-   * @param \Drupal\csp\Event\PolicyAlterEvent $alterEvent
+   * @param PolicyAlterEvent $alterEvent
    *   The Policy Alter event.
    */
   public function onCspPolicyAlter(PolicyAlterEvent $alterEvent) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/csp/src/Event/PolicyAlterEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\csp\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\csp\Csp;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\HttpFoundation\Response;

 /**
@@ @@
   /**
    * A CSP policy.
    *
-   * @var \Drupal\csp\Csp
+   * @var Csp
    */
   private $policy;

@@ @@
   /**
    * The Response the policy is being applied to.
    *
-   * @var \Symfony\Component\HttpFoundation\Response
+   * @var Response
    */
   private $response;

@@ @@
   /**
    * Create a new PolicyAlterEvent instance.
    *
-   * @param \Drupal\csp\Csp $policy
+   * @param Csp $policy
    *   A CSP policy.
-   * @param \Symfony\Component\HttpFoundation\Response $response
+   * @param Response $response
    *   The Response the policy is being applied to.
    */
   public function __construct(Csp $policy, Response $response) {
@@ @@
   /**
    * Retrieve the defined CSP policy.
    *
-   * @return \Drupal\csp\Csp
+   * @return Csp
    *   The CSP policy.
    */
   public function getPolicy() {
@@ @@
   /**
    * Retrieve the Response the policy is applied to.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The Response the policy is applied to.
    */
   public function getResponse() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/csp/src/Controller/ReportUri.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The Request Stack service.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   private $requestStack;

@@ @@
   /**
    * The Logger channel.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   private $logger;

@@ @@
   /**
    * The Config Factory Service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   private $configFactory;

@@ @@
   /**
    * Create a new Report URI Controller.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The Request Stack service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The Logger channel.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The Config Factory Service.
    */
   public function __construct(RequestStack $requestStack, LoggerInterface $logger, ConfigFactoryInterface $configFactory) {
@@ @@
    * @param string $type
    *   The report type.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   An empty response.
    */
   public function log($type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/csp/csp_extras/src/Ajax/AjaxResponseAttachmentsProcessor.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\csp_extras\Ajax;

+use Drupal\Core\Config\Config;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\SettingsCommand;
@@ @@
   /**
    * The asset resolver service.
    *
-   * @var \Drupal\Core\Asset\AssetResolverInterface
+   * @var AssetResolverInterface
    */
   protected $assetResolver;

@@ @@
   /**
    * A config object for the system performance configuration.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * Constructs a AjaxResponseAttachmentsProcessor object.
    *
-   * @param \Drupal\Core\Asset\AssetResolverInterface $asset_resolver
+   * @param AssetResolverInterface $asset_resolver
    *   An asset resolver.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   A config factory for retrieving required config objects.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(
@@ @@
   /**
    * Prepares the AJAX commands to attach assets.
    *
-   * @param \Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    *   The AJAX response to update.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object that the AJAX is responding to.
    *
    * @return array
@@ @@
             'type' => 'stylesheet',
             'attributes' => [
               'media' => $css_asset['media'],
-              'href' => file_url_transform_relative(file_create_url($css_asset['data'])),
+              'href' => \Drupal::service('file_url_generator')->generateString($css_asset['data']),
             ],
           ];

@@ @@
           $asset = [
             'type' => 'script',
             'attributes' => [
-              'src' => file_url_transform_relative(file_create_url($js_asset['data'])),
+              'src' => \Drupal::service('file_url_generator')->generateString($js_asset['data']),
             ],
           ];
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/csp/csp_extras/csp_extras.module:11

    ---------- begin diff ----------
@@ @@

   // Add module ajax.js to core library.
   if ($extension == 'core' && isset($libraries['drupal.ajax'])) {
-    $path = '/' . drupal_get_path('module', 'csp_extras') . '/js/ajax.js';
+    $path = '/' . \Drupal::service('extension.list.module')->getPath('csp_extras') . '/js/ajax.js';
     $libraries['drupal.ajax']['js'][$path] = [
       'version' => '1.13',
     ];
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 16 files have been changed by Rector                                      

