modules/contrib/medf/media_entity_download_filter.module
modules/contrib/medf/src/Plugin/Filter/MediaEntityDownloadFilter.php

1 file with changes
===================

1) modules/contrib/medf/src/Plugin/Filter/MediaEntityDownloadFilter.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityRepositoryInterface $entity_repository, SubstitutionManagerInterface $substitution_manager) {
@@ @@
    * {@inheritdoc}
    */
   public function process($text, $langcode) {
-    /** @var \Drupal\filter\FilterProcessResult $entity */
+    /** @var FilterProcessResult $entity */
     $result = new FilterProcessResult($text);

     if (strpos($text, 'data-entity-type') === FALSE && strpos($text, 'data-entity-uuid') === FALSE) {
@@ @@
   }

   /**
-   * @param \Drupal\filter\FilterProcessResult $result
+   * @param FilterProcessResult $result
    * @param \DOMElement $element
    * @param $langcode
    */
@@ @@
     if (!$this->isValidMediaReference($entity_type, $uuid)) {
       return;
     }
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $this->loadTranslatedEntity($entity_type, $uuid, $langcode);

     if (!$entity) {
       return;
     }
-    /** @var \Drupal\Core\Url $url */
+    /** @var Url $url */
     $url = $this->getUrl($entity);

     if (!$url) {
@@ @@
   }

   /**
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
-   * @return \Drupal\Core\Url|null
+   * @return Url|null
    */
   private function getUrl(EntityInterface $entity) {
     if (!$entity->hasField(self::FIELD_FILE_NAME)) {
@@ @@
       ->first()
       ->entity
       ->getFileUri();
-    $url = file_create_url($fileUri);
+    $url = \Drupal::service('file_url_generator')->generateAbsoluteString($fileUri);

     return Url::fromUri($url);
   }
@@ @@
    * @param string $uuid
    * @param string $langcode
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    */
   private function loadTranslatedEntity($entity_type, $uuid, $langcode) {
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $this->entityRepository
       ->loadEntityByUuid($entity_type, $uuid);
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 1 file has been changed by Rector                                         

