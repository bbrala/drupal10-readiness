diff --git a/login_history.info.yml b/login_history.info.yml
index 941ebe6..a6a725d 100644
--- a/login_history.info.yml
+++ b/login_history.info.yml
@@ -1,8 +1,7 @@
 name: 'Login History'
 description: "A history of the site's user logins."
 package: Security
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.3 || ^10
 type: module
 dependencies:
  - drupal:views
diff --git a/login_history.install b/login_history.install
index da0622d..ca1a2f4 100644
--- a/login_history.install
+++ b/login_history.install
@@ -82,7 +82,7 @@ function login_history_update_8001() {
 function login_history_update_8002() {
   // Only create if the login_history view doesn't exist and views is enabled.
   if (\Drupal::moduleHandler()->moduleExists('views') && !View::load('login_history')) {
-    $config_path = drupal_get_path('module', 'login_history') . '/config/install/views.view.login_history.yml';
+    $config_path = \Drupal::service('extension.list.module')->getPath('login_history') . '/config/install/views.view.login_history.yml';
     $data = Yaml::parseFile($config_path);
     \Drupal::configFactory()->getEditable('views.view.login_history')->setData($data)->save(TRUE);
     return 'The new login_history view has been created.';
diff --git a/login_history.module b/login_history.module
index 75eec43..fe75a97 100644
--- a/login_history.module
+++ b/login_history.module
@@ -37,7 +37,7 @@ function login_history_user_login($account) {
 /**
  * Provide data about the last login for a user.
  *
- * @param \Drupal\Core\Session\AccountInterface|null $account
+ * @param AccountInterface|null $account
  *   An optional user to get the last login for.
  *
  * @return object|false
diff --git a/src/Controller/LoginHistoryController.php b/src/Controller/LoginHistoryController.php
index 740f15d..40b499f 100644
--- a/src/Controller/LoginHistoryController.php
+++ b/src/Controller/LoginHistoryController.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\login_history\Controller;
 
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\user\Entity\User;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Database\Connection;
@@ -22,32 +25,32 @@ class LoginHistoryController extends ControllerBase {
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a LoginHistoryController object.
    *
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Database\Connection|null $database
+   * @param Connection|null $database
    *   The database connection.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface|null $entity_type_manager
+   * @param EntityTypeManagerInterface|null $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(DateFormatterInterface $date_formatter, Connection $database = NULL, EntityTypeManagerInterface $entity_type_manager = NULL) {
@@ -70,14 +73,14 @@ class LoginHistoryController extends ControllerBase {
   /**
    * Displays a report of user logins.
    *
-   * @param \Drupal\user\UserInterface|null $user
+   * @param UserInterface|null $user
    *   (optional) The user to display for individual user reports.
    *
    * @return array
    *   A render array.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
    */
   public function report(UserInterface $user = NULL) {
     $header = [
@@ -122,8 +125,8 @@ class LoginHistoryController extends ControllerBase {
    * @return array
    *   A table render array.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
    */
   public function generateReportTable(array $history, array $header) {
     // Load all users first.
@@ -131,7 +134,7 @@ class LoginHistoryController extends ControllerBase {
     foreach ($history as $entry) {
       $uids[] = $entry->uid;
     }
-    /** @var \Drupal\user\Entity\User[] $users */
+    /** @var User[] $users */
     $users = $this->entityTypeManager->getStorage('user')->loadMultiple($uids);
 
     $rows = [];
@@ -160,10 +163,10 @@ class LoginHistoryController extends ControllerBase {
   /**
    * Checks access for the user login report.
    *
-   * @param \Drupal\user\UserInterface|null $user
+   * @param UserInterface|null $user
    *   The user to check access for.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   Returns Allowed or Neutral.
    */
   public function checkUserReportAccess(UserInterface $user = NULL) {
diff --git a/src/Plugin/Block/LastLoginBlock.php b/src/Plugin/Block/LastLoginBlock.php
index 9c2dd6f..14ca172 100644
--- a/src/Plugin/Block/LastLoginBlock.php
+++ b/src/Plugin/Block/LastLoginBlock.php
@@ -25,14 +25,14 @@ class LastLoginBlock extends BlockBase implements ContainerFactoryPluginInterfac
   /**
    * The account proxy service.
    *
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    */
   protected $currentUser;
 
   /**
    * The account proxy service.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
@@ -45,9 +45,9 @@ class LastLoginBlock extends BlockBase implements ContainerFactoryPluginInterfac
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Session\AccountProxy $currentUser
+   * @param AccountProxy $currentUser
    *   The account proxy service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, AccountProxy $currentUser, RequestStack $requestStack) {
diff --git a/tests/src/Functional/LoginHistoryTest.php b/tests/src/Functional/LoginHistoryTest.php
index 41fd517..7430cf2 100644
--- a/tests/src/Functional/LoginHistoryTest.php
+++ b/tests/src/Functional/LoginHistoryTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\login_history\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Tests\BrowserTestBase;
 
@@ -30,14 +31,14 @@ class LoginHistoryTest extends BrowserTestBase {
   /**
    * The admin user that will be created.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
   /**
    * The authenticated user that will be created.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $authenticatedUser;
 
@@ -51,7 +52,7 @@ class LoginHistoryTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->adminUser = $this->drupalCreateUser([
@@ -75,25 +76,43 @@ class LoginHistoryTest extends BrowserTestBase {
     // Verify we can successfully access the Login history page.
     $this->drupalLogin($this->adminUser);
     $this->drupalGet('admin/reports/login-history');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Verify the Login history page has the table.
-    $this->assertText('Date');
-    $this->assertText('Username');
-    $this->assertText('IP Address');
-    $this->assertText('One-time login?');
-    $this->assertText('User Agent');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Date');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Username');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('IP Address');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('One-time login?');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('User Agent');
 
     // Verify the Last Login block is on the home page.
     $this->drupalGet('<front>');
-    $this->assertText('You last logged in from');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You last logged in from');
 
     // Verify the link is in the block.
     $this->clickLink($this->t('View your login history'));
 
     // Verify the Login History tab is reachable.
     $this->drupalGet('user/' . $this->adminUser->id() . '/login-history');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $this->drupalLogout();
 
@@ -106,10 +125,13 @@ class LoginHistoryTest extends BrowserTestBase {
     $this->assertSession()->statusCodeNotEquals(200);
 
     $this->drupalGet('<front>');
-    $this->assertNoText('You last logged in from');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('You last logged in from');
 
     $this->drupalGet('user/' . $this->authenticatedUser->id() . '/login-history');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     $this->drupalLogout();
   }
