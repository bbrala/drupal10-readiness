modules/contrib/entityreference_filter/entityreference_filter.module
modules/contrib/entityreference_filter/entityreference_filter.views.inc
modules/contrib/entityreference_filter/src/Ajax/EntityReferenceFilterInsertNoWrapCommand.php
modules/contrib/entityreference_filter/src/Controller/EntityReferenceFilterAjaxController.php
modules/contrib/entityreference_filter/src/Plugin/views/filter/EntityReferenceFilterViewResult.php
modules/contrib/entityreference_filter/tests/src/Functional/EntityReferenceFunctionalTestBase.php
modules/contrib/entityreference_filter/tests/src/Functional/Views/EntityReferenceFilterViewsResultTest.php
modules/contrib/entityreference_filter/tests/src/FunctionalJavascript/EntityReferenceFunctionalJavascriptTestBase.php
modules/contrib/entityreference_filter/tests/src/FunctionalJavascript/View/EntityReferenceFilterViewsResultJsTest.php
modules/contrib/entityreference_filter/tests/src/Traits/EntityReferenceFilterTrait.php

7 files with changes
====================

1) modules/contrib/entityreference_filter/tests/src/Traits/EntityReferenceFilterTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entityreference_filter\Traits;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Config\FileStorage;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ @@
    */
   protected function contentPrepare() {
     // Vocabulary 1.
-    /** @var \Drupal\taxonomy\Entity\Vocabulary $vocabulary */
+    /** @var Vocabulary $vocabulary */
     $vocabulary = Vocabulary::create([
       'name' => 'test1',
       'vid'  => 'test1',
@@ @@
    * @param array $views
    *   Views to create.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function createTestViews(array $views) {
     $storage = \Drupal::entityTypeManager()->getStorage('view');
     $module_handler = \Drupal::moduleHandler();
-    $config_dir = drupal_get_path('module', 'entityreference_filter_test_config') . '/test_views';
+    $config_dir = \Drupal::service('extension.list.module')->getPath('entityreference_filter_test_config') . '/test_views';
     if (!is_dir($config_dir) || !$module_handler->moduleExists('entityreference_filter_test_config')) {
       return;
     }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/entityreference_filter/tests/src/FunctionalJavascript/EntityReferenceFunctionalJavascriptTestBase.php:58

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritDoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->contentPrepare();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/entityreference_filter/tests/src/Functional/Views/EntityReferenceFilterViewsResultTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entityreference_filter\Functional\Views;

+use Behat\Mink\Exception\ElementNotFoundException;
+use Behat\Mink\Exception\ExpectationException;
 use Drupal\Tests\entityreference_filter\Functional\EntityReferenceFunctionalTestBase;

 /**
@@ @@
    * @param string $url_2
    *   URL 2 to visit.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ElementNotFoundException
+   * @throws ExpectationException
    */
   public function dynamicFilterOptionsWithArgumentsTest($url_1, $url_2) {
     $web_assert = $this->assertSession();
@@ @@
     $field_id = 'edit-field-taxonomy-reference-target-id-entityreference-filter';
     $web_assert->selectExists($field_id);
     $elements = $this->cssSelect('.hidden select#edit-field-taxonomy-reference-target-id-entityreference-filter');
-    $this->assertEqual(1, count($elements));
+    $this->assertEquals(1, count($elements));
     $web_assert->optionExists($field_id, 'All');
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/entityreference_filter/tests/src/Functional/EntityReferenceFunctionalTestBase.php:58

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->contentPrepare();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/entityreference_filter/src/Plugin/views/filter/EntityReferenceFilterViewResult.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entityreference_filter\Plugin\views\filter;

+use Drupal\Core\Logger\LoggerChannel;
+use Drupal\views\Plugin\views\exposed_form\ExposedFormPluginInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
@@ @@
   /**
    * Logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannel
+   * @var LoggerChannel
    */
   protected $loggerChannel;

@@ @@
   /**
    * Language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Config view storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $viewStorage;

@@ @@
   /**
    * Entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * Path current stack.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $pathCurrent;

@@ @@
   /**
    * Entity Type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Psr\Log\LoggerInterface $logger_channel
+   * @param LoggerInterface $logger_channel
    *   Logger for the channel.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $view_storage
+   * @param ConfigEntityStorageInterface $view_storage
    *   View config storage.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   Entity repository.
-   * @param \Drupal\Core\Path\CurrentPathStack $path_current
+   * @param CurrentPathStack $path_current
    *   Path current.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, LoggerInterface $logger_channel, LanguageManagerInterface $language_manager, ConfigEntityStorageInterface $view_storage, EntityRepositoryInterface $entity_repository, CurrentPathStack $path_current, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
       }
     }

-    /** @var \Drupal\views\Plugin\views\exposed_form\ExposedFormPluginInterface $exposed_plugin **/
+    /** @var ExposedFormPluginInterface $exposed_plugin **/
     $exposed_plugin = $this->view->display_handler->getPlugin('exposed_form');
     $exposed_plugin_options = $exposed_plugin->options ?? NULL;
     $autosubmit = $exposed_plugin_options['bef']['general']['autosubmit'] ?? FALSE;
@@ @@

     if ($reference_display) {
       [$view_name] = explode(':', $reference_display);
-      /** @var \Drupal\views\Entity\View $config */
+      /** @var View $config */
       $config = $this->viewStorage->load($view_name);
       if ($config && $config instanceof View) {
         $definitions = $this->entityTypeManager->getDefinitions();
@@ @@

     if ($reference_display) {
       [$view_name] = explode(':', $reference_display);
-      /** @var \Drupal\views\Entity\View $config */
+      /** @var View $config */
       $config = $this->viewStorage->load($view_name);
       if (empty($config) || !$config instanceof View) {
         return $dependencies;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/entityreference_filter/src/Controller/EntityReferenceFilterAjaxController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entityreference_filter\Controller;

+use Drupal\views\ViewEntityInterface;
+use Drupal\views\Plugin\views\exposed_form\ExposedFormPluginInterface;
 use Drupal\better_exposed_filters\BetterExposedFiltersHelper;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\InvokeCommand;
@@ @@
   /**
    * The entity storage for views.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;

@@ @@
   /**
    * The factory to load a view executable with.
    *
-   * @var \Drupal\views\ViewExecutableFactory
+   * @var ViewExecutableFactory
    */
   protected $executableFactory;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The current path.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPath;

@@ @@
   /**
    * The redirect destination.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;

@@ @@
   /**
    * Logger channel.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $loggerChannel;

@@ @@
   /**
    * Language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructs a ViewAjaxController object.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage for views.
-   * @param \Drupal\views\ViewExecutableFactory $executable_factory
+   * @param ViewExecutableFactory $executable_factory
    *   The factory to load a view executable with.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\Core\Path\CurrentPathStack $current_path
+   * @param CurrentPathStack $current_path
    *   The current path.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination.
-   * @param \Psr\Log\LoggerInterface $logger_channel
+   * @param LoggerInterface $logger_channel
    *   Logger channel.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   Language manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Module handler.
    */
   public function __construct(EntityStorageInterface $storage, ViewExecutableFactory $executable_factory, RendererInterface $renderer, CurrentPathStack $current_path, RedirectDestinationInterface $redirect_destination, LoggerInterface $logger_channel, LanguageManagerInterface $language_manager, ModuleHandlerInterface $module_handler) {
@@ @@
   /**
    * Loads and renders a view via AJAX.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request object.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The ajax response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
+   * @throws NotFoundHttpException
    *   Thrown when the view was not found.
-   * @throws \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException
+   * @throws AccessDeniedHttpException
    *   Thrown when the view isn't accessible.
    *
    * @see \Drupal\views\Controller\ViewAjaxController::ajaxView()
@@ @@
       $response = new AjaxResponse();

       // Load the view to rebuild the filters for.
-      /** @var \Drupal\views\ViewEntityInterface $entity */
+      /** @var ViewEntityInterface $entity */
       if (!$entity = $this->storage->load($name)) {
         throw new NotFoundHttpException();
       }
@@ @@

       if ($view && $view->access($display_id) && $view->setDisplay($display_id)) {

-        /** @var \Drupal\views\Plugin\views\exposed_form\ExposedFormPluginInterface $exposed_plugin **/
+        /** @var ExposedFormPluginInterface $exposed_plugin **/
         $exposed_plugin = $view->display_handler->getPlugin('exposed_form');
         $exposed_plugin_options = $exposed_plugin->options ?? NULL;

@@ @@
   /**
    * Extract and convert filter arguments to the actual values.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Request object.
    * @param string $dependent_filter_name
    *   Dependent filter name.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/entityreference_filter/entityreference_filter.views.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 /**
  * @file
  * Contains views hooks.
@@ @@
         continue;
       }

-      /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type_info */
+      /** @var EntityTypeInterface $entity_type_info */
       $target_entity_type_info = Drupal::entityTypeManager()->getDefinition($target_entity_type);

       // Content entities.
@@ @@
         $filter = $field_info;

         // Filter title.
-        /** @var \Drupal\Core\StringTranslation\TranslatableMarkup $title */
+        /** @var TranslatableMarkup $title */
         $title = !empty($field_info['filter']['title']) ?
             $field_info['filter']['title'] : $field_info['title'];

@@ @@
         $filter['title'] = t('@title (entityreference filter)', ['@title' => $title]);

         // Filter title short.
-        /** @var \Drupal\Core\StringTranslation\TranslatableMarkup $title */
+        /** @var TranslatableMarkup $title */
         $title_short = !empty($field_info['filter']['title short']) ?
           $field_info['filter']['title short'] : $field_info['title'];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 7 files have been changed by Rector                                       

