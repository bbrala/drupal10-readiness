modules/contrib/og/og.api.php
modules/contrib/og/og.install
modules/contrib/og/og.module
modules/contrib/og/og.post_update.php
modules/contrib/og/og.views.inc
modules/contrib/og/og_ui/og_ui.module
modules/contrib/og/og_ui/src/BundleFormAlter.php
modules/contrib/og/og_ui/src/Controller/OgUiController.php
modules/contrib/og/og_ui/src/Form/AdminSettingsForm.php
modules/contrib/og/og_ui/tests/src/Functional/BundleFormAlterTest.php
modules/contrib/og/src/Access/GroupCheck.php
modules/contrib/og/src/Access/OgMembershipAddAccessCheck.php
modules/contrib/og/src/Annotation/OgDeleteOrphans.php
modules/contrib/og/src/Annotation/OgFields.php
modules/contrib/og/src/Annotation/OgGroupResolver.php
modules/contrib/og/src/Cache/Context/OgGroupContextCacheContext.php
modules/contrib/og/src/Cache/Context/OgMembershipStateCacheContext.php
modules/contrib/og/src/Cache/Context/OgRoleCacheContext.php
modules/contrib/og/src/ContextProvider/OgContext.php
modules/contrib/og/src/Controller/OgAdminMembersController.php
modules/contrib/og/src/Controller/OgAdminRoutesController.php
modules/contrib/og/src/Controller/OgAutocompleteController.php
modules/contrib/og/src/Controller/SubscriptionController.php
modules/contrib/og/src/Element/OgAutocomplete.php
modules/contrib/og/src/Entity/OgMembership.php
modules/contrib/og/src/Entity/OgMembershipType.php
modules/contrib/og/src/Entity/OgRole.php
modules/contrib/og/src/Event/AccessEventBase.php
modules/contrib/og/src/Event/AccessEventInterface.php
modules/contrib/og/src/Event/DefaultRoleEvent.php
modules/contrib/og/src/Event/DefaultRoleEventInterface.php
modules/contrib/og/src/Event/GroupContentEntityOperationAccessEvent.php
modules/contrib/og/src/Event/GroupContentEntityOperationAccessEventInterface.php
modules/contrib/og/src/Event/GroupCreationEvent.php
modules/contrib/og/src/Event/GroupCreationEventInterface.php
modules/contrib/og/src/Event/OgAdminRoutesEvent.php
modules/contrib/og/src/Event/OgAdminRoutesEventInterface.php
modules/contrib/og/src/Event/PermissionEvent.php
modules/contrib/og/src/Event/PermissionEventInterface.php
modules/contrib/og/src/EventSubscriber/OgEventSubscriber.php
modules/contrib/og/src/Exception/OgRoleException.php
modules/contrib/og/src/Form/GroupSubscribeForm.php
modules/contrib/og/src/Form/GroupUnsubscribeConfirmForm.php
modules/contrib/og/src/Form/OgAddMultipleRolesForm.php
modules/contrib/og/src/Form/OgChangeMultipleRolesFormBase.php
modules/contrib/og/src/Form/OgMembershipDeleteForm.php
modules/contrib/og/src/Form/OgMembershipForm.php
modules/contrib/og/src/Form/OgMembershipTypeForm.php
modules/contrib/og/src/Form/OgRemoveMultipleRolesForm.php
modules/contrib/og/src/GroupContentOperationPermission.php
modules/contrib/og/src/GroupPermission.php
modules/contrib/og/src/GroupTypeManager.php
modules/contrib/og/src/GroupTypeManagerInterface.php
modules/contrib/og/src/MembershipManager.php
modules/contrib/og/src/MembershipManagerInterface.php
modules/contrib/og/src/Og.php
modules/contrib/og/src/OgAccess.php
modules/contrib/og/src/OgAccessInterface.php
modules/contrib/og/src/OgContextInterface.php
modules/contrib/og/src/OgDeleteOrphansBase.php
modules/contrib/og/src/OgDeleteOrphansInterface.php
modules/contrib/og/src/OgDeleteOrphansPluginManager.php
modules/contrib/og/src/OgFieldBase.php
modules/contrib/og/src/OgFieldsInterface.php
modules/contrib/og/src/OgFieldsPluginManager.php
modules/contrib/og/src/OgGroupAlwaysTrue.php
modules/contrib/og/src/OgGroupAudienceHelper.php
modules/contrib/og/src/OgGroupAudienceHelperInterface.php
modules/contrib/og/src/OgGroupResolverBase.php
modules/contrib/og/src/OgGroupResolverInterface.php
modules/contrib/og/src/OgGroupResolverPluginManager.php
modules/contrib/og/src/OgMembershipAccessControlHandler.php
modules/contrib/og/src/OgMembershipInterface.php
modules/contrib/og/src/OgMembershipTypeInterface.php
modules/contrib/og/src/OgMembershipTypeListBuilder.php
modules/contrib/og/src/OgMembershipViewsData.php
modules/contrib/og/src/OgResolvedGroupCollection.php
modules/contrib/og/src/OgResolvedGroupCollectionInterface.php
modules/contrib/og/src/OgRoleInterface.php
modules/contrib/og/src/OgRoleManager.php
modules/contrib/og/src/OgRoleManagerInterface.php
modules/contrib/og/src/OgRouteGroupResolverBase.php
modules/contrib/og/src/Permission.php
modules/contrib/og/src/PermissionInterface.php
modules/contrib/og/src/PermissionManager.php
modules/contrib/og/src/PermissionManagerInterface.php
modules/contrib/og/src/Plugin/Action/AddMultipleOgMembershipRoles.php
modules/contrib/og/src/Plugin/Action/AddSingleOgMembershipRole.php
modules/contrib/og/src/Plugin/Action/ApprovePendingOgMembership.php
modules/contrib/og/src/Plugin/Action/BlockOgMembership.php
modules/contrib/og/src/Plugin/Action/ChangeMultipleOgMembershipRolesBase.php
modules/contrib/og/src/Plugin/Action/ChangeOgMembershipStateBase.php
modules/contrib/og/src/Plugin/Action/ChangeSingleOgMembershipRoleBase.php
modules/contrib/og/src/Plugin/Action/DeleteOgMembership.php
modules/contrib/og/src/Plugin/Action/PendingOgMembership.php
modules/contrib/og/src/Plugin/Action/RemoveMultipleOgMembershipRoles.php
modules/contrib/og/src/Plugin/Action/RemoveSingleOgMembershipRole.php
modules/contrib/og/src/Plugin/Action/UnblockOgMembership.php
modules/contrib/og/src/Plugin/Block/MemberCountBlock.php
modules/contrib/og/src/Plugin/Block/RecentGroupContentBlock.php
modules/contrib/og/src/Plugin/Condition/GroupType.php
modules/contrib/og/src/Plugin/Derivative/OgActionLink.php
modules/contrib/og/src/Plugin/Derivative/OgLocalTask.php
modules/contrib/og/src/Plugin/EntityReferenceSelection/OgRoleSelection.php
modules/contrib/og/src/Plugin/EntityReferenceSelection/OgSelection.php
modules/contrib/og/src/Plugin/EntityReferenceSelection/OgUserSelection.php
modules/contrib/og/src/Plugin/Field/FieldFormatter/GroupSubscribeFormatter.php
modules/contrib/og/src/Plugin/Field/FieldType/OgGroupItem.php
modules/contrib/og/src/Plugin/Field/FieldType/OgStandardReferenceItem.php
modules/contrib/og/src/Plugin/Field/FieldWidget/OgAutocomplete.php
modules/contrib/og/src/Plugin/Field/FieldWidget/OgComplex.php
modules/contrib/og/src/Plugin/OgDeleteOrphans/Batch.php
modules/contrib/og/src/Plugin/OgDeleteOrphans/Cron.php
modules/contrib/og/src/Plugin/OgDeleteOrphans/Simple.php
modules/contrib/og/src/Plugin/OgFields/AccessField.php
modules/contrib/og/src/Plugin/OgFields/AudienceField.php
modules/contrib/og/src/Plugin/OgGroupResolver/RequestQueryArgumentResolver.php
modules/contrib/og/src/Plugin/OgGroupResolver/RouteGroupContentResolver.php
modules/contrib/og/src/Plugin/OgGroupResolver/RouteGroupResolver.php
modules/contrib/og/src/Plugin/OgGroupResolver/UserGroupAccessResolver.php
modules/contrib/og/src/Plugin/QueueWorker/DeleteOrphan.php
modules/contrib/og/src/Plugin/Validation/Constraint/UniqueOgMembershipConstraint.php
modules/contrib/og/src/Plugin/Validation/Constraint/UniqueOgMembershipConstraintValidator.php
modules/contrib/og/src/Plugin/Validation/Constraint/ValidOgMembershipReferenceConstraint.php
modules/contrib/og/src/Plugin/Validation/Constraint/ValidOgMembershipReferenceConstraintValidator.php
modules/contrib/og/src/Plugin/Validation/Constraint/ValidOgRoleConstraint.php
modules/contrib/og/src/Plugin/Validation/Constraint/ValidOgRoleConstraintValidator.php
modules/contrib/og/src/Plugin/views/argument_default/Group.php
modules/contrib/og/src/Plugin/views/field/OgMembershipBulkForm.php
modules/contrib/og/src/Routing/RouteSubscriber.php
modules/contrib/og/tests/modules/og_test/og_test.install
modules/contrib/og/tests/modules/og_test/og_test.module
modules/contrib/og/tests/modules/og_test/src/EventSubscriber/OgTestEventSubscriber.php
modules/contrib/og/tests/modules/og_test/src/Plugin/OgFields/EntityRestrictedField.php
modules/contrib/og/tests/src/Functional/GroupSubscribeFormatterTest.php
modules/contrib/og/tests/src/Functional/GroupSubscribeTest.php
modules/contrib/og/tests/src/Functional/GroupTabTest.php
modules/contrib/og/tests/src/Functional/OgComplexWidgetTest.php
modules/contrib/og/tests/src/Kernel/Access/AccessByOgMembershipTest.php
modules/contrib/og/tests/src/Kernel/Access/GroupContentOperationAccessAlterTest.php
modules/contrib/og/tests/src/Kernel/Access/GroupLevelAccessTest.php
modules/contrib/og/tests/src/Kernel/Access/OgAccessHookTest.php
modules/contrib/og/tests/src/Kernel/Access/OgGroupContentOperationAccessTest.php
modules/contrib/og/tests/src/Kernel/Action/ActionTestBase.php
modules/contrib/og/tests/src/Kernel/Action/AddMultipleOgMembershipRolesActionTest.php
modules/contrib/og/tests/src/Kernel/Action/AddSingleOgMembershipRoleActionTest.php
modules/contrib/og/tests/src/Kernel/Action/ApprovePendingOgMembershipActionTest.php
modules/contrib/og/tests/src/Kernel/Action/BlockOgMembershipActionTest.php
modules/contrib/og/tests/src/Kernel/Action/ChangeMultipleOgMembershipRolesActionTestBase.php
modules/contrib/og/tests/src/Kernel/Action/ChangeOgMembershipActionTestBase.php
modules/contrib/og/tests/src/Kernel/Action/DeleteOgMembershipActionTest.php
modules/contrib/og/tests/src/Kernel/Action/PendingOgMembershipActionTest.php
modules/contrib/og/tests/src/Kernel/Action/RemoveMultipleOgMembershipRolesActionTest.php
modules/contrib/og/tests/src/Kernel/Action/RemoveSingleOgMembershipRoleActionTest.php
modules/contrib/og/tests/src/Kernel/Action/UnblockOgMembershipActionTest.php
modules/contrib/og/tests/src/Kernel/Cache/Context/OgRoleCacheContextTest.php
modules/contrib/og/tests/src/Kernel/DefaultRoleEventIntegrationTest.php
modules/contrib/og/tests/src/Kernel/Entity/CacheInvalidationOnGroupChangeTest.php
modules/contrib/og/tests/src/Kernel/Entity/EntityCreateAccessTest.php
modules/contrib/og/tests/src/Kernel/Entity/FieldCreateTest.php
modules/contrib/og/tests/src/Kernel/Entity/GetBundleByBundleTest.php
modules/contrib/og/tests/src/Kernel/Entity/GetGroupContentTest.php
modules/contrib/og/tests/src/Kernel/Entity/GetMembershipsTest.php
modules/contrib/og/tests/src/Kernel/Entity/GetUserGroupsTest.php
modules/contrib/og/tests/src/Kernel/Entity/GroupAudienceTest.php
modules/contrib/og/tests/src/Kernel/Entity/GroupMembershipManagerTest.php
modules/contrib/og/tests/src/Kernel/Entity/GroupTypeTest.php
modules/contrib/og/tests/src/Kernel/Entity/OgMembershipRoleReferenceTest.php
modules/contrib/og/tests/src/Kernel/Entity/OgMembershipTest.php
modules/contrib/og/tests/src/Kernel/Entity/OgRoleTest.php
modules/contrib/og/tests/src/Kernel/Entity/OgStandardReferenceItemTest.php
modules/contrib/og/tests/src/Kernel/Entity/ReferenceStringIdTest.php
modules/contrib/og/tests/src/Kernel/Entity/SelectionHandlerTest.php
modules/contrib/og/tests/src/Kernel/EntityReference/Views/OgStandardReferenceRelationshipTest.php
modules/contrib/og/tests/src/Kernel/Field/AudienceFieldFormatterTest.php
modules/contrib/og/tests/src/Kernel/Field/GroupSubscribeFormatterTest.php
modules/contrib/og/tests/src/Kernel/Form/GroupSubscribeFormTest.php
modules/contrib/og/tests/src/Kernel/GroupManagerSubscriptionTest.php
modules/contrib/og/tests/src/Kernel/GroupTypeConditionTest.php
modules/contrib/og/tests/src/Kernel/OgDeleteOrphansTest.php
modules/contrib/og/tests/src/Kernel/OgRoleManagerTest.php
modules/contrib/og/tests/src/Kernel/PermissionEventTest.php
modules/contrib/og/tests/src/Kernel/Plugin/Block/MemberCountBlockTest.php
modules/contrib/og/tests/src/Kernel/SelectionHandlerSettingsSchemaTest.php
modules/contrib/og/tests/src/Kernel/Views/OgAdminMembersViewTest.php
modules/contrib/og/tests/src/Traits/OgMembershipCreationTrait.php
modules/contrib/og/tests/src/Traits/OgRoleCacheContextTestTrait.php
modules/contrib/og/tests/src/Unit/Cache/Context/OgCacheContextTestBase.php
modules/contrib/og/tests/src/Unit/Cache/Context/OgContextCacheContextTestBase.php
modules/contrib/og/tests/src/Unit/Cache/Context/OgGroupContextCacheContextTest.php
modules/contrib/og/tests/src/Unit/Cache/Context/OgMembershipStateCacheContextTest.php
modules/contrib/og/tests/src/Unit/Cache/Context/OgRoleCacheContextTest.php
modules/contrib/og/tests/src/Unit/CreateMembershipTest.php
modules/contrib/og/tests/src/Unit/DefaultRoleEventTest.php
modules/contrib/og/tests/src/Unit/GroupCheckTest.php
modules/contrib/og/tests/src/Unit/GroupContentOperationPermissionTest.php
modules/contrib/og/tests/src/Unit/GroupPermissionTest.php
modules/contrib/og/tests/src/Unit/GroupTypeManagerTest.php
modules/contrib/og/tests/src/Unit/OgAccessEntityTest.php
modules/contrib/og/tests/src/Unit/OgAccessEntityTestBase.php
modules/contrib/og/tests/src/Unit/OgAccessHookTest.php
modules/contrib/og/tests/src/Unit/OgAccessTest.php
modules/contrib/og/tests/src/Unit/OgAccessTestBase.php
modules/contrib/og/tests/src/Unit/OgAdminRoutesControllerTest.php
modules/contrib/og/tests/src/Unit/OgContextTest.php
modules/contrib/og/tests/src/Unit/OgLocalTaskTest.php
modules/contrib/og/tests/src/Unit/OgResolvedGroupCollectionTest.php
modules/contrib/og/tests/src/Unit/OgRoleManagerTest.php
modules/contrib/og/tests/src/Unit/OgRoleTest.php
modules/contrib/og/tests/src/Unit/PermissionEventTest.php
modules/contrib/og/tests/src/Unit/Plugin/OgGroupResolver/OgGroupResolverTestBase.php
modules/contrib/og/tests/src/Unit/Plugin/OgGroupResolver/OgRouteGroupResolverTestBase.php
modules/contrib/og/tests/src/Unit/Plugin/OgGroupResolver/RequestQueryArgumentResolverTest.php
modules/contrib/og/tests/src/Unit/Plugin/OgGroupResolver/RouteGroupContentResolverTest.php
modules/contrib/og/tests/src/Unit/Plugin/OgGroupResolver/RouteGroupResolverTest.php
modules/contrib/og/tests/src/Unit/Plugin/OgGroupResolver/UserGroupAccessResolverTest.php
modules/contrib/og/tests/src/Unit/SubscriptionControllerTest.php

164 files with changes
======================

1) modules/contrib/og/tests/src/Unit/SubscriptionControllerTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
+use Drupal\user\UserInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityFormBuilderInterface;
@@ @@
  */
 class SubscriptionControllerTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The entity for builder object.
    *
-   * @var \Drupal\Core\Entity\EntityFormBuilderInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityFormBuilderInterface|ObjectProphecy
    */
   protected $entityFormBuilder;

@@ @@
   /**
    * The group entity.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var ContentEntityInterface|ObjectProphecy
    */
   protected $group;

@@ @@
   /**
    * The membership manager service.
    *
-   * @var \Drupal\og\MembershipManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var MembershipManagerInterface|ObjectProphecy
    */
   protected $membershipManager;

@@ @@
   /**
    * OG access service.
    *
-   * @var \Drupal\og\OgAccessInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var OgAccessInterface|ObjectProphecy
    */
   protected $ogAccess;

@@ @@
   /**
    * The mocked messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var MessengerInterface|ObjectProphecy
    */
   protected $messenger;

@@ @@
   /**
    * The OG membership entity.
    *
-   * @var \Drupal\og\OgMembershipInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var OgMembershipInterface|ObjectProphecy
    */
   protected $ogMembership;

@@ @@
   /**
    * The URL object.
    *
-   * @var \Drupal\Core\Url|\Prophecy\Prophecy\ObjectProphecy
+   * @var Url|ObjectProphecy
    */
   protected $url;

@@ @@
   /**
    * The user entity.
    *
-   * @var \Drupal\user\UserInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var UserInterface|ObjectProphecy
    */
   protected $user;

@@ @@
   /**
    * The mocked entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityTypeManagerInterface|ObjectProphecy
    */
   protected $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/og/tests/src/Unit/Plugin/OgGroupResolver/UserGroupAccessResolverTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit\Plugin\OgGroupResolver;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\og\OgResolvedGroupCollectionInterface;
 use Drupal\og\Plugin\OgGroupResolver\UserGroupAccessResolver;

@@ @@
  */
 class UserGroupAccessResolverTest extends OgGroupResolverTestBase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ @@
    */
   public function testResolve(array $previously_added_groups = [], array $expected_added_groups = [], array $expected_removed_groups = []) {
     // Construct a collection of groups that were discovered by other plugins.
-    /** @var \Drupal\og\OgResolvedGroupCollectionInterface|\Prophecy\Prophecy\ObjectProphecy $collection */
+    /** @var OgResolvedGroupCollectionInterface|ObjectProphecy $collection */
     $collection = $this->prophesize(OgResolvedGroupCollectionInterface::class);

     // It is expected that the plugin will retrieve the full set of information
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/og/tests/src/Unit/Plugin/OgGroupResolver/RouteGroupResolverTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit\Plugin\OgGroupResolver;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\og\Plugin\OgGroupResolver\RouteGroupResolver;

@@ @@
  */
 class RouteGroupResolverTest extends OgRouteGroupResolverTestBase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ @@
    *
    * This mimicks the data returned by EntityTypeManager::getDefinitions().
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface[]
+   * @return EntityTypeInterface[]
    *   A list of mocked entity types.
    *
    * @see \Drupal\Core\Entity\EntityTypeManagerInterface::getDefinitions()
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/og/tests/src/Unit/Plugin/OgGroupResolver/RequestQueryArgumentResolverTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit\Plugin\OgGroupResolver;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\og\OgResolvedGroupCollectionInterface;
 use Drupal\og\Plugin\OgGroupResolver\RequestQueryArgumentResolver;
@@ @@
  */
 class RequestQueryArgumentResolverTest extends OgGroupResolverTestBase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ @@
   /**
    * The mocked request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack|\Prophecy\Prophecy\ObjectProphecy
+   * @var RequestStack|ObjectProphecy
    */
   protected $requestStack;

@@ @@
       ->shouldBeCalled();

     // It will retrieve the query object from the request.
-    /** @var \Symfony\Component\HttpFoundation\ParameterBag|\Prophecy\Prophecy\ObjectProphecy $query */
+    /** @var ParameterBag|ObjectProphecy $query */
     $query = $this->prophesize(ParameterBag::class);

     // Mock methods to check for the existence and value of the query arguments
@@ @@
     }

     // Construct a collection of groups that were discovered by other plugins.
-    /** @var \Drupal\og\OgResolvedGroupCollectionInterface|\Prophecy\Prophecy\ObjectProphecy $collection */
+    /** @var OgResolvedGroupCollectionInterface|ObjectProphecy $collection */
     $collection = $this->prophesize(OgResolvedGroupCollectionInterface::class);

     // Set expectations for investigations the plugin may launch into the nature
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/og/tests/src/Unit/Plugin/OgGroupResolver/OgRouteGroupResolverTestBase.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit\Plugin\OgGroupResolver;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ @@
  */
 abstract class OgRouteGroupResolverTestBase extends OgGroupResolverTestBase {

+  use ProphecyTrait;
   /**
    * A list of link templates that belong to entity types used in the tests.
    *
@@ @@
   /**
    * The mocked route matcher.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var RouteMatchInterface|ObjectProphecy
    */
   protected $routeMatch;

@@ @@
     }

     // Add expectations for groups that should be added or removed.
-    /** @var \Drupal\og\OgResolvedGroupCollectionInterface|\Prophecy\Prophecy\ObjectProphecy $collection */
+    /** @var OgResolvedGroupCollectionInterface|ObjectProphecy $collection */
     $collection = $this->prophesize(OgResolvedGroupCollectionInterface::class);

     foreach ($expected_added_groups as $expected_added_group) {
@@ @@
    *   The path that will be retrieved.
    */
   protected function willRetrieveCurrentPathFromRouteMatcher($path) {
-    /** @var \Symfony\Component\Routing\Route|\Prophecy\Prophecy\ObjectProphecy $route */
+    /** @var Route|ObjectProphecy $route */
     $route = $this->prophesize(Route::class);
     $route
       ->getPath()
@@ @@
     // Provide some mocked content entity types.
     $entity_types = [];
     foreach (array_keys($this->linkTemplates) as $entity_type_id) {
-      /** @var \Drupal\Core\Entity\EntityTypeInterface|\Prophecy\Prophecy\ObjectProphecy $entity_type */
+      /** @var EntityTypeInterface|ObjectProphecy $entity_type */
       $entity_type = $this->prophesize(EntityTypeInterface::class);
       // The plugin will need to know if this is a content entity, so we will
       // provide this information. We are not requiring this to be called since
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/og/tests/src/Unit/Plugin/OgGroupResolver/OgGroupResolverTestBase.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit\Plugin\OgGroupResolver;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
+use Drupal\og\OgGroupResolverInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Tests\UnitTestCase;
@@ @@
  */
 abstract class OgGroupResolverTestBase extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The fully qualified class name of the plugin under test.
    *
@@ @@
   /**
    * Mocked test entities.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface[]
+   * @var ContentEntityInterface[]
    */
   protected $testEntities;

@@ @@
   /**
    * The mocked entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityTypeManagerInterface|ObjectProphecy
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The OG group audience helper.
    *
-   * @var \Drupal\og\OgGroupAudienceHelperInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var OgGroupAudienceHelperInterface|ObjectProphecy
    */
   protected $groupAudienceHelper;

@@ @@
   /**
    * The mocked OG group type manager.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var GroupTypeManagerInterface|ObjectProphecy
    */
   protected $groupTypeManager;

@@ @@
   /**
    * The OG membership manager.
    *
-   * @var \Drupal\og\MembershipManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var MembershipManagerInterface|ObjectProphecy
    */
   protected $membershipManager;

@@ @@
     $this->membershipManager = $this->prophesize(MembershipManagerInterface::class);

     // Create mocked test entities.
-    /** @var \Drupal\Core\Entity\ContentEntityInterface[] $test_entities */
+    /** @var ContentEntityInterface[] $test_entities */
     $test_entities = [];
     foreach ($this->getTestEntityProperties() as $id => $properties) {
       $entity_type_id = $properties['type'];
@@ @@
    *
    * @dataProvider resolveProvider
    * @covers ::resolve()
+   * @doesNotPerformAssertions
    */
   abstract public function testResolve();

@@ @@
   /**
    * Returns an instance of the plugin under test.
    *
-   * @return \Drupal\og\OgGroupResolverInterface
+   * @return OgGroupResolverInterface
    *   The plugin under test.
    */
   protected function getPluginInstance() {
@@ @@
    *   - type: The entity type.
    *   - bundle: The entity bundle.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @return ContentEntityInterface|ObjectProphecy
    *   The mocked entity.
    */
   protected function createMockedEntity($id, array $properties) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface|\Prophecy\Prophecy\ObjectProphecy $entity */
+    /** @var ContentEntityInterface|ObjectProphecy $entity */
     $entity = $this->prophesize(ContentEntityInterface::class);

     // In case this entity is questioned about its identity, it shall
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/og/tests/src/Unit/PermissionEventTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit;

+use Drupal\og\PermissionInterface;
 use Drupal\Tests\UnitTestCase;
 use Drupal\og\Event\PermissionEvent;
 use Drupal\og\GroupContentOperationPermission;
@@ @@
   /**
    * Tests getting a single group permission.
    *
-   * @param \Drupal\og\PermissionInterface[] $permissions
+   * @param PermissionInterface[] $permissions
    *   An array of test permissions.
    * @param string $entity_type_id
    *   The entity type ID of the group type to which the permissions apply.
@@ @@
   /**
    * Tests getting a single group content permission.
    *
-   * @param \Drupal\og\GroupContentOperationPermission[] $permissions
+   * @param GroupContentOperationPermission[] $permissions
    *   An array of test permissions.
    * @param string $entity_type_id
    *   The entity type ID of the group type to which the permissions apply.
@@ @@
   /**
    * Tests getting group permissions.
    *
-   * @param \Drupal\og\PermissionInterface[] $permissions
+   * @param PermissionInterface[] $permissions
    *   An array of test permissions.
    * @param string $entity_type_id
    *   The entity type ID of the group type to which the permissions apply.
@@ @@
   /**
    * Tests setting group permissions.
    *
-   * @param \Drupal\og\PermissionInterface[] $permissions
+   * @param PermissionInterface[] $permissions
    *   An array of test permissions.
    * @param string $entity_type_id
    *   The entity type ID of the group type to which the permissions apply.
@@ @@
   /**
    * Tests setting an invalid permission.
    *
-   * @param \Drupal\og\PermissionInterface[] $permissions
+   * @param PermissionInterface[] $permissions
    *   An array of test permissions.
    * @param string $entity_type_id
    *   The entity type ID of the group type to which the permissions apply.
@@ @@
   /**
    * Tests deleting a permission.
    *
-   * @param \Drupal\og\PermissionInterface[] $permissions
+   * @param PermissionInterface[] $permissions
    *   An array of test permissions.
    * @param string $entity_type_id
    *   The entity type ID of the group type to which the permissions apply.
@@ @@
   /**
    * Tests deleting a group content permission.
    *
-   * @param \Drupal\og\GroupContentOperationPermission[] $permissions
+   * @param GroupContentOperationPermission[] $permissions
    *   An array of test permissions.
    * @param string $entity_type_id
    *   The entity type ID of the group type to which the permissions apply.
@@ @@
   /**
    * Tests checking if permission exists.
    *
-   * @param \Drupal\og\PermissionInterface[] $permissions
+   * @param PermissionInterface[] $permissions
    *   An array of test permissions.
    * @param string $entity_type_id
    *   The entity type ID of the group type to which the permissions apply.
@@ @@
   /**
    * Tests checking if group content permission exists.
    *
-   * @param \Drupal\og\GroupContentOperationPermission[] $permissions
+   * @param GroupContentOperationPermission[] $permissions
    *   An array of test permissions.
    * @param string $entity_type_id
    *   The entity type ID of the group type to which the permissions apply.
@@ @@
   /**
    * Tests getting a group entity type ID.
    *
-   * @param \Drupal\og\PermissionInterface[] $permissions
+   * @param PermissionInterface[] $permissions
    *   An array of test permissions.
    * @param string $entity_type_id
    *   The entity type ID of the group type to which the permissions apply.
@@ @@
   /**
    * Tests getting a group bundle ID.
    *
-   * @param \Drupal\og\PermissionInterface[] $permissions
+   * @param PermissionInterface[] $permissions
    *   An array of test permissions.
    * @param string $entity_type_id
    *   The entity type ID of the group type to which the permissions apply.
@@ @@
   /**
    * Tests getting group content bundle IDs.
    *
-   * @param \Drupal\og\PermissionInterface[] $permissions
+   * @param PermissionInterface[] $permissions
    *   An array of test permissions.
    * @param string $entity_type_id
    *   The entity type ID of the group type to which the permissions apply.
@@ @@
   /**
    * Tests "offsetGet".
    *
-   * @param \Drupal\og\PermissionInterface[] $permissions
+   * @param PermissionInterface[] $permissions
    *   An array of test permissions.
    * @param string $entity_type_id
    *   The entity type ID of the group type to which the permissions apply.
@@ @@
   /**
    * Tests "offsetSet".
    *
-   * @param \Drupal\og\PermissionInterface[] $permissions
+   * @param PermissionInterface[] $permissions
    *   An array of test permissions.
    * @param string $entity_type_id
    *   The entity type ID of the group type to which the permissions apply.
@@ @@
   /**
    * Tests "offsetUnset".
    *
-   * @param \Drupal\og\PermissionInterface[] $permissions
+   * @param PermissionInterface[] $permissions
    *   An array of test permissions.
    * @param string $entity_type_id
    *   The entity type ID of the group type to which the permissions apply.
@@ @@
   /**
    * Tests "offsetExists".
    *
-   * @param \Drupal\og\PermissionInterface[] $permissions
+   * @param PermissionInterface[] $permissions
    *   An array of test permissions.
    * @param string $entity_type_id
    *   The entity type ID of the group type to which the permissions apply.
@@ @@
   /**
    * Check that the iterator has looped over all permissions correctly.
    *
-   * @param \Drupal\og\PermissionInterface[] $permissions
+   * @param PermissionInterface[] $permissions
    *   An array of test permissions.
    * @param string $entity_type_id
    *   The entity type ID of the group type to which the permissions apply.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/og/tests/src/Unit/OgRoleManagerTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
+use Drupal\og\OgRoleManagerInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Tests\UnitTestCase;
@@ @@
  */
 class OgRoleManagerTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The entity type ID of the test group.
    *
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityTypeManagerInterface|ObjectProphecy
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity storage service.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityStorageInterface|ObjectProphecy
    */
   protected $entityStorage;

@@ @@
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EventDispatcherInterface|ObjectProphecy
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The created OG role.
    *
-   * @var \Drupal\og\Entity\OgRole|\Prophecy\Prophecy\ObjectProphecy
+   * @var OgRole|ObjectProphecy
    */
   protected $ogRole;

@@ @@
   /**
    * The entity storage for OgRole entities.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $ogRoleStorage;

@@ @@
   /**
    * The permissions manager service.
    *
-   * @var \Drupal\og\PermissionManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var PermissionManagerInterface|ObjectProphecy
    */
   protected $permissionManager;

@@ @@
   /**
    * Return a new OG role manager object.
    *
-   * @return \Drupal\og\OgRoleManagerInterface
+   * @return OgRoleManagerInterface
    *   The initialized OG role manager.
    */
   protected function getOgRoleManager() {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/og/tests/src/Unit/OgResolvedGroupCollectionTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Tests\UnitTestCase;
 use Drupal\og\OgResolvedGroupCollection;
@@ @@
  */
 class OgResolvedGroupCollectionTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * An array of mocked test groups, keyed by entity type ID and entity ID.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface[]|\Prophecy\Prophecy\ObjectProphecy[]
+   * @var ContentEntityInterface[]|ObjectProphecy[]
    */
   protected $groups;

@@ @@
     foreach ($entity_types as $entity_type) {
       for ($i = 0; $i < 2; $i++) {
         $entity_id = "$entity_type-$i";
-        /** @var \Drupal\Core\Entity\ContentEntityInterface|\Prophecy\Prophecy\ObjectProphecy $entity */
+        /** @var ContentEntityInterface|ObjectProphecy $entity */
         $entity = $this->prophesize(ContentEntityInterface::class);
         $entity->getEntityTypeId()->willReturn($entity_type);
         $entity->id()->willReturn($entity_id);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/og/tests/src/Unit/OgLocalTaskTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Routing\RouteProvider;
 use Drupal\Tests\UnitTestCase;
@@ @@
  */
 class OgLocalTaskTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The group type manager.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var GroupTypeManagerInterface|ObjectProphecy
    */
   protected $groupTypeManager;

@@ @@
   /**
    * Route provider object.
    *
-   * @var \Drupal\Core\Routing\RouteProvider|\Prophecy\Prophecy\ObjectProphecy
+   * @var RouteProvider|ObjectProphecy
    */
   protected $routeProvider;

@@ @@
   /**
    * The route service.
    *
-   * @var \Symfony\Component\Routing\Route|\Prophecy\Prophecy\ObjectProphecy
+   * @var Route|ObjectProphecy
    */
   protected $route;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/og/tests/src/Unit/OgContextTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\ImmutableConfig;
@@ @@
  */
 class OgContextTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * A mocked plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var PluginManagerInterface|ObjectProphecy
    */
   protected $pluginManager;

@@ @@
   /**
    * A mocked config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var ConfigFactoryInterface|ObjectProphecy
    */
   protected $configFactory;

@@ @@
   /**
    * A mocked typed data manager service.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var TypedDataManagerInterface|ObjectProphecy
    */
   protected $typedDataManager;

@@ @@
   /**
    * A mocked typed data definition.
    *
-   * @var \Drupal\Core\Entity\TypedData\EntityDataDefinition|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityDataDefinition|ObjectProphecy
    */
   protected $dataDefinition;

@@ @@
   /**
    * A mocked typed data object.
    *
-   * @var \Drupal\Core\TypedData\TypedDataInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var TypedDataInterface|ObjectProphecy
    */
   protected $typedData;

@@ @@
   /**
    * An array of mocked test entities.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface[]|\Prophecy\Prophecy\ObjectProphecy[]
+   * @var ContentEntityInterface[]|ObjectProphecy[]
    */
   protected $entities;

@@ @@
         ->willReturn(!empty($group_resolver['stop_propagation']));
       $plugin->resolve(Argument::type(OgResolvedGroupCollectionInterface::class))
         ->will(function ($args) use ($entities, $group_resolver) {
-          /** @var \Drupal\og\OgResolvedGroupCollectionInterface $collection */
+          /** @var OgResolvedGroupCollectionInterface $collection */
           $collection = $args[0];
           foreach ($group_resolver['candidates'] as $candidate) {
             $entity = $entities[$candidate['entity']];
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/og/tests/src/Unit/OgAdminRoutesControllerTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
+use Drupal\Core\Routing\RouteProvider;
 use Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher;
 use Drupal\Core\Access\AccessManagerInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
@@ @@
  */
 class OgAdminRoutesControllerTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The access manager service.
    *
-   * @var \Drupal\Core\Access\AccessManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var AccessManagerInterface|ObjectProphecy
    */
   protected $accessManager;

@@ @@
   /**
    * Route provider object.
    *
-   * @var \Drupal\Core\Routing\RouteProvider|\Prophecy\Prophecy\ObjectProphecy
+   * @var RouteProvider|ObjectProphecy
    */
   protected $routeProvider;

@@ @@
   /**
    * The route service.
    *
-   * @var \Symfony\Component\Routing\Route|\Prophecy\Prophecy\ObjectProphecy
+   * @var Route|ObjectProphecy
    */
   protected $route;

@@ @@
   /**
    * The route match service.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var RouteMatchInterface|ObjectProphecy
    */
   protected $routeMatch;

@@ @@
   /**
    * The event dispatcher service.
    *
-   * @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher|\Prophecy\Prophecy\ObjectProphecy
+   * @var ContainerAwareEventDispatcher|ObjectProphecy
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The group entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityInterface|ObjectProphecy
    */
   protected $group;

@@ @@
   /**
    * The OG admin route event.
    *
-   * @var \Drupal\og\Event\OgAdminRoutesEvent
+   * @var OgAdminRoutesEvent
    */
   protected $event;

@@ @@
   /**
    * The Url object.
    *
-   * @var \Drupal\Core\Url
+   * @var Url
    */
   protected $url;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/og/tests/src/Unit/OgAccessTestBase.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
+use Drupal\user\UserInterface;
+use Drupal\og\OgAccessInterface;
+use Drupal\og\OgRoleInterface;
 use Drupal\Core\Cache\Context\CacheContextsManager;
 use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
  */
 class OgAccessTestBase extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The mocked config handler.
    *
-   * @var \Drupal\Core\Config\Config|\Prophecy\Prophecy\ObjectProphecy
+   * @var Config|ObjectProphecy
    */
   protected $config;

@@ @@
   /**
    * A mocked test user.
    *
-   * @var \Drupal\user\UserInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var UserInterface|ObjectProphecy
    */
   protected $user;

@@ @@
   /**
    * The mocked test group.
    *
-   * @var \Drupal\Core\Entity\EntityInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityInterface|ObjectProphecy
    */
   protected $group;

@@ @@
   /**
    * The mocked group manager.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var GroupTypeManagerInterface|ObjectProphecy
    */
   protected $groupTypeManager;

@@ @@
   /**
    * The mocked permission manager.
    *
-   * @var \Drupal\og\PermissionManager|\Prophecy\Prophecy\ObjectProphecy
+   * @var PermissionManager|ObjectProphecy
    */
   protected $permissionManager;

@@ @@
   /**
    * The OgAccess class, this is the system under test.
    *
-   * @var \Drupal\og\OgAccessInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var OgAccessInterface|ObjectProphecy
    */
   protected $ogAccess;

@@ @@
   /**
    * The group membership manager service.
    *
-   * @var \Drupal\og\MembershipManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var MembershipManagerInterface|ObjectProphecy
    */
   protected $membershipManager;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityTypeManagerInterface|ObjectProphecy
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The membership entity.
    *
-   * @var \Drupal\og\OgMembershipInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var OgMembershipInterface|ObjectProphecy
    */
   protected $membership;

@@ @@
   /**
    * The OG role.
    *
-   * @var \Drupal\og\OgRoleInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var OgRoleInterface|ObjectProphecy
    */
   protected $ogRole;

@@ @@
    *   Whether or not this test group should be owned by the test user which is
    *   used in the test.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @return EntityInterface|ObjectProphecy
    *   The test group.
    */
   protected function groupEntity($is_owner = FALSE) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/og/tests/src/Unit/OgAccessHookTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\EntityInterface;

 /**
@@ @@
  */
 class OgAccessHookTest extends OgAccessEntityTestBase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/og/tests/src/Unit/OgAccessEntityTestBase.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
  */
 abstract class OgAccessEntityTestBase extends OgAccessTestBase {

+  use ProphecyTrait;
   /**
    * A test group content entity.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var ContentEntityInterface|ObjectProphecy
    */
   protected $groupContentEntity;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/og/tests/src/Unit/GroupTypeManagerTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
  */
 class GroupTypeManagerTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The config prophecy used in the test.
    *
-   * @var \Drupal\Core\Config\Config|\Prophecy\Prophecy\ObjectProphecy
+   * @var Config|ObjectProphecy
    */
   protected $config;

@@ @@
   /**
    * The config factory prophecy used in the test.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var ConfigFactoryInterface|ObjectProphecy
    */
   protected $configFactory;

@@ @@
   /**
    * The entity type manager prophecy used in the test.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityTypeManagerInterface|ObjectProphecy
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity storage prophecy used in the test.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityStorageInterface|ObjectProphecy
    */
   protected $entityStorage;

@@ @@
   /**
    * The OG role prophecy used in the test.
    *
-   * @var \Drupal\og\Entity\OgRole|\Prophecy\Prophecy\ObjectProphecy
+   * @var OgRole|ObjectProphecy
    */
   protected $ogRole;

@@ @@
   /**
    * The entity type bundle info prophecy used in the test.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityTypeBundleInfoInterface|ObjectProphecy
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The event dispatcher prophecy used in the test.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EventDispatcherInterface|ObjectProphecy
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The permission event prophecy used in the test.
    *
-   * @var \Drupal\og\Event\PermissionEventInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var PermissionEventInterface|ObjectProphecy
    */
   protected $permissionEvent;

@@ @@
   /**
    * The cache prophecy used in the test.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var CacheBackendInterface|ObjectProphecy
    */
   protected $cache;

@@ @@
   /**
    * The OG permission manager prophecy used in the test.
    *
-   * @var \Drupal\og\PermissionManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var PermissionManagerInterface|ObjectProphecy
    */
   protected $permissionManager;

@@ @@
   /**
    * The OG role manager prophecy used in the test.
    *
-   * @var \Drupal\og\OgRoleManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var OgRoleManagerInterface|ObjectProphecy
    */
   protected $ogRoleManager;

@@ @@
   /**
    * The route builder service used in the test.
    *
-   * @var \Drupal\Core\Routing\RouteBuilderInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var RouteBuilderInterface|ObjectProphecy
    */
   protected $routeBuilder;

@@ @@
   /**
    * The OG group audience helper.
    *
-   * @var \Drupal\og\OgGroupAudienceHelperInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var OgGroupAudienceHelperInterface|ObjectProphecy
    */
   protected $groupAudienceHelper;

@@ @@
   /**
    * Creates a group manager instance with a mock config factory.
    *
-   * @return \Drupal\og\GroupTypeManagerInterface
+   * @return GroupTypeManagerInterface
    *   Returns the group manager.
    */
   protected function createGroupManager() {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/og/tests/src/Unit/GroupCheckTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
+use Drupal\og\OgAccess;
+use Drupal\user\UserInterface;
 use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
  */
 class GroupCheckTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The entity type manager prophecy used in the test.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityTypeManagerInterface|ObjectProphecy
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity type prophecy used in the test.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var \Drupal\Core\Entity\EntityTypeInterface|ObjectProphecy
    */
   protected $entityType;

@@ @@
   /**
    * The entity storage prophecy used in the test.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityStorageInterface|ObjectProphecy
    */
   protected $entityStorage;

@@ @@
   /**
    * The OG access service prophecy used in the test.
    *
-   * @var \Drupal\og\OgAccess|\Prophecy\Prophecy\ObjectProphecy
+   * @var OgAccess|ObjectProphecy
    */
   protected $ogAccess;

@@ @@
   /**
    * The route service prophecy used in the test.
    *
-   * @var \Symfony\Component\Routing\Route|\Prophecy\Prophecy\ObjectProphecy
+   * @var Route|ObjectProphecy
    */
   protected $route;

@@ @@
   /**
    * A user used in the test.
    *
-   * @var \Drupal\user\UserInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var UserInterface|ObjectProphecy
    */
   protected $user;

@@ @@
   /**
    * The test group entity used in the test..
    *
-   * @var \Drupal\Core\Entity\EntityInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityInterface|ObjectProphecy
    */
   protected $group;

@@ @@
   /**
    * The group manager used in the test.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var GroupTypeManagerInterface|ObjectProphecy
    */
   protected $groupTypeManager;

@@ @@
   /**
    * The access result used in the test.
    *
-   * @var \Drupal\Core\Access\AccessResultInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var AccessResultInterface|ObjectProphecy
    */
   protected $accessResult;

@@ @@
   /**
    * Return the access result.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   protected function getAccessResult() {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/og/tests/src/Unit/DefaultRoleEventTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Tests\UnitTestCase;
@@ @@
  */
 class DefaultRoleEventTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The DefaultRoleEvent class, which is the system under test.
    *
-   * @var \Drupal\og\Event\DefaultRoleEvent
+   * @var DefaultRoleEvent
    */
   protected $defaultRoleEvent;

@@ @@
   /**
    * The mocked OgRole entity storage.
    *
-   * @var \Drupal\core\Entity\EntityStorageInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var \Drupal\core\Entity\EntityStorageInterface|ObjectProphecy
    */
   protected $ogRoleStorage;

@@ @@
   /**
    * Asserts that the given role properties matches the expected result.
    *
-   * @param \Drupal\og\Entity\OgRole $expected
+   * @param OgRole $expected
    *   The expected role.
-   * @param \Drupal\og\Entity\OgRole $actual
+   * @param OgRole $actual
    *   The actual OgRole entity to check.
    *
    *   Note that we are not specifying the OgRoleInterface type because of a PHP
@@ @@
   /**
    * Adds an expectation that roles with the given properties should be created.
    *
-   * @param \Drupal\og\Entity\OgRole[] $roles
+   * @param OgRole[] $roles
    *   An array of role properties that are expected to be passed to the roles
    *   that should be created.
    */
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/og/tests/src/Unit/CreateMembershipTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Cache\MemoryCache\MemoryCacheInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ @@
  */
 class CreateMembershipTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityTypeManagerInterface|ObjectProphecy
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The mocked entity type repository.
    *
-   * @var \Drupal\Core\Entity\EntityTypeRepositoryInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityTypeRepositoryInterface|ObjectProphecy
    */
   protected $entityTypeRepository;

@@ @@
   /**
    * The OG group audience helper.
    *
-   * @var \Drupal\og\OgGroupAudienceHelperInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var OgGroupAudienceHelperInterface|ObjectProphecy
    */
   protected $groupAudienceHelper;

@@ @@
   /**
    * The mocked memory cache backend.
    *
-   * @var \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var MemoryCacheInterface|ObjectProphecy
    */
   protected $staticCache;

@@ @@
   /**
    * The entity storage prophecy used in the test.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityStorageInterface|ObjectProphecy
    */
   protected $entityStorage;

@@ @@
   /**
    * A mocked test user.
    *
-   * @var \Drupal\Core\Session\AccountInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var AccountInterface|ObjectProphecy
    */
   protected $user;

@@ @@
   /**
    * The mocked test group.
    *
-   * @var \Drupal\Core\Entity\EntityInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityInterface|ObjectProphecy
    */
   protected $group;

@@ @@
   /**
    * The mocked test OG membership.
    *
-   * @var \Drupal\og\OgMembershipInterface
+   * @var OgMembershipInterface
    */
   protected $membership;

@@ @@
       ->willReturn('og_membership');

     // Create a mocked Og Membership entity.
-    /** @var \Drupal\og\OgMembershipInterface|\Prophecy\Prophecy\ObjectProphecy $membership_entity */
+    /** @var OgMembershipInterface|ObjectProphecy $membership_entity */
     $membership_entity = $this->prophesize(OgMembershipInterface::class);

     $this->entityStorage
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/og/tests/src/Unit/Cache/Context/OgRoleCacheContextTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit\Cache\Context;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Core\Cache\Context\CacheContextInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
  */
 class OgRoleCacheContextTest extends OgCacheContextTestBase {

+  use ProphecyTrait;
   use OgRoleCacheContextTestTrait;

   /**
    * The mocked entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityTypeManagerInterface|ObjectProphecy
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The mocked OG membership manager service.
    *
-   * @var \Drupal\og\MembershipManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var MembershipManagerInterface|ObjectProphecy
    */
   protected $membershipManager;

@@ @@
   /**
    * The mocked database connection.
    *
-   * @var \Drupal\Core\Database\Connection|\Prophecy\Prophecy\ObjectProphecy
+   * @var Connection|ObjectProphecy
    */
   protected $database;

@@ @@
   /**
    * The mocked private key handler.
    *
-   * @var \Drupal\Core\PrivateKey|\Prophecy\Prophecy\ObjectProphecy
+   * @var PrivateKey|ObjectProphecy
    */
   protected $privateKey;

@@ @@
   public function testNoMemberships(): void {
     // No memberships (an empty array) will be returned by the membership
     // manager.
-    /** @var \Drupal\Core\Session\AccountInterface|\Prophecy\Prophecy\ObjectProphecy $user */
+    /** @var AccountInterface|ObjectProphecy $user */
     $user = $this->prophesize(AccountInterface::class)->reveal();
     $this->membershipManager->getMemberships($user->id())->willReturn([]);

@@ @@
   public function testMembershipsWithOrphanedRole(): void {
     // Mock the membership with the orphaned role. It will return a group and
     // group entity type, but no roles.
-    /** @var \Drupal\og\OgMembershipInterface|\Prophecy\Prophecy\ObjectProphecy $membership */
+    /** @var OgMembershipInterface|ObjectProphecy $membership */
     $membership = $this->prophesize(OgMembershipInterface::class);
     $membership->getRolesIds()->willReturn([]);

     // The membership with the orphaned role will be returned by the membership
     // manager.
-    /** @var \Drupal\Core\Session\AccountInterface|\Prophecy\Prophecy\ObjectProphecy $user */
+    /** @var AccountInterface|ObjectProphecy $user */
     $user = $this->prophesize(AccountInterface::class)->reveal();
     $this->membershipManager->getMemberships($user->id())->willReturn([$membership]);

@@ @@
     // Mock the users that are defined in the test case.
     $user_ids = array_keys($group_memberships);
     $users = array_map(function ($user_id) {
-      /** @var \Drupal\Core\Session\AccountInterface|\Prophecy\Prophecy\ObjectProphecy $user */
+      /** @var AccountInterface|ObjectProphecy $user */
       $user = $this->prophesize(AccountInterface::class);
       $user->id()->willReturn($user_id);
       return $user->reveal();
@@ @@
             return "{$group_entity_type_id}-bundle-{$role_name}";
           }, $roles);
           // Mock the expected returns of method calls on the membership.
-          /** @var \Drupal\og\OgMembershipInterface|\Prophecy\Prophecy\ObjectProphecy $membership */
+          /** @var OgMembershipInterface|ObjectProphecy $membership */
           $membership = $this->prophesize(OgMembershipInterface::class);
           $membership->getGroupEntityType()->willReturn($group_entity_type_id);
           $membership->getGroupBundle()->willReturn('bundle');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/og/tests/src/Unit/Cache/Context/OgMembershipStateCacheContextTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit\Cache\Context;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\og\Cache\Context\OgMembershipStateCacheContext;
 use Drupal\og\MembershipManagerInterface;
@@ @@
  */
 class OgMembershipStateCacheContextTest extends OgContextCacheContextTestBase {

+  use ProphecyTrait;
   /**
    * The OG membership entity.
    *
-   * @var \Drupal\og\OgMembershipInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var OgMembershipInterface|ObjectProphecy
    */
   protected $membership;

@@ @@
   /**
    * The membership manager service.
    *
-   * @var \Drupal\og\MembershipManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var MembershipManagerInterface|ObjectProphecy
    */
   protected $membershipManager;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var AccountInterface|ObjectProphecy
    */
   protected $user;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/og/tests/src/Unit/Cache/Context/OgContextCacheContextTestBase.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit\Cache\Context;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\og\OgContextInterface;

@@ @@
  */
 abstract class OgContextCacheContextTestBase extends OgCacheContextTestBase {

+  use ProphecyTrait;
   /**
    * The mocked OG context service.
    *
-   * @var \Drupal\og\OgContextInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var OgContextInterface|ObjectProphecy
    */
   protected $ogContext;

@@ @@
   /**
    * A mocked group entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityInterface|ObjectProphecy
    */
   protected $group;

@@ @@
    * Tests the result of the cache context service without active context.
    *
    * @covers ::getContext
+   * @doesNotPerformAssertions
    */
   abstract public function testWithoutContext();

@@ @@
   /**
    * Sets an expectation that OgContext will return the given group.
    *
-   * @param \Drupal\Core\Entity\EntityInterface|null $group
+   * @param EntityInterface|null $group
    *   The group to return, or NULL if no group is expected to be returned by
    *   OgContext.
    */
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/og/tests/src/Unit/Cache/Context/OgCacheContextTestBase.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Unit\Cache\Context;

+use Drupal\Core\Cache\Context\CacheContextInterface;
 use Drupal\Tests\UnitTestCase;

 /**
@@ @@
   /**
    * Returns the instantiated cache context service which is being tested.
    *
-   * @return \Drupal\Core\Cache\Context\CacheContextInterface
+   * @return CacheContextInterface
    *   The instantiated cache context service.
    */
   abstract protected function getCacheContext();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


24) modules/contrib/og/tests/src/Traits/OgMembershipCreationTrait.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Traits;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\og\Entity\OgMembership;
@@ @@
   /**
    * Creates a test membership.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group for which to create the membership.
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The user for which to create the membership.
    * @param array|null $role_names
    *   Optional array of role names to assign to the membership. Defaults to the
@@ @@
    * @param string|null $membership_type
    *   The membership type. Defaults to 'default'.
    *
-   * @return \Drupal\og\OgMembershipInterface
+   * @return OgMembershipInterface
    *   The membership.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   Thrown when the membership cannot be created.
    */
   protected function createOgMembership(EntityInterface $group, AccountInterface $user, ?array $role_names = NULL, ?string $state = NULL, ?string $membership_type = NULL) {
@@ @@
       return OgRole::getRole($group_entity_type, $group_bundle, $role_name);
     }, $role_names);

-    /** @var \Drupal\og\OgMembershipInterface $membership */
+    /** @var OgMembershipInterface $membership */
     $membership = OgMembership::create(['type' => $membership_type]);
     $membership
       ->setRoles($roles)
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


25) modules/contrib/og/tests/src/Kernel/Views/OgAdminMembersViewTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel\Views;

+use Drupal\user\UserInterface;
+use Drupal\entity_test\Entity\EntityTest;
+use Drupal\Core\Render\RendererInterface;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;
 use Drupal\og\Og;
@@ @@
   /**
    * The user entity.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * The group entity.
    *
-   * @var \Drupal\entity_test\Entity\EntityTest
+   * @var EntityTest
    */
   protected $group;

@@ @@
    * Tests the Members table.
    */
   public function testMembersTable() {
-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = $this->container->get('renderer');

     $view = Views::getView('og_members_overview');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


26) modules/contrib/og/tests/src/Kernel/Plugin/Block/MemberCountBlockTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel\Plugin\Block;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\og\GroupTypeManagerInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Drupal\Core\Entity\EntityViewBuilderInterface;
+use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
+use Drupal\Core\Render\RendererInterface;
+use Drupal\Core\Render\PlaceholderingRenderCache;
+use Drupal\block\BlockInterface;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\entity_test\Entity\EntityTest;
@@ @@
  */
 class MemberCountBlockTest extends KernelTestBase {

+  use ProphecyTrait;
   use OgMembershipCreationTrait;
   use StringTranslationTrait;
   use UserCreationTrait;
@@ @@
   /**
    * The group type manager.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface
+   * @var GroupTypeManagerInterface
    */
   protected $groupTypeManager;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The block storage handler.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $blockStorage;

@@ @@
   /**
    * The block view builder.
    *
-   * @var \Drupal\Core\Entity\EntityViewBuilderInterface
+   * @var EntityViewBuilderInterface
    */
   protected $blockViewBuilder;

@@ @@
   /**
    * The cache tags invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The render cache.
    *
-   * @var \Drupal\Core\Render\PlaceholderingRenderCache
+   * @var PlaceholderingRenderCache
    */
   protected $renderCache;

@@ @@
   /**
    * Test groups.
    *
-   * @var \Drupal\entity_test\Entity\EntityTest[]
+   * @var EntityTest[]
    */
   protected $groups;

@@ @@
   /**
    * A test block. This is the system under test.
    *
-   * @var \Drupal\block\BlockInterface
+   * @var BlockInterface
    */
   protected $block;

@@ @@
    *
    * This group will be returned by the mocked OgContext service.
    *
-   * @var \Drupal\entity_test\Entity\EntityTest
+   * @var EntityTest
    */
   protected $activeGroup;

@@ @@
    * @param string $state
    *   The membership state to assign to the newly added member.
    *
-   * @return \Drupal\og\OgMembershipInterface
+   * @return OgMembershipInterface
    *   The membership entity for the newly added member.
    */
   protected function addMember($group_key, $state) {
@@ @@
    * @param mixed $value
    *   The value to set.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   Thrown when the updated block cannot be saved.
    */
   protected function updateBlockSetting($setting, $value) {
@@ @@
   /**
    * Callback providing the active group to be returned by the mocked OgContext.
    *
-   * @return \Drupal\entity_test\Entity\EntityTest
+   * @return EntityTest
    *   The active group.
    */
   public function getActiveGroup() {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/og/tests/src/Kernel/PermissionEventTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel;

+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\node\Entity\NodeType;
@@ @@
   /**
    * The Symfony event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
    *   group.
    * @param array $expected_permissions
    *   An array of permission names that are expected to be returned.
-   * @param \Drupal\og\PermissionInterface[] $expected_full_permissions
+   * @param PermissionInterface[] $expected_full_permissions
    *   An array of full permissions that are expected to be returned. This is a
    *   subset of the permissions. It is not necessary to test the full
    *   permission data for each entry, testing the data for only a couple of
@@ @@
    */
   public function testPermissionEventIntegration(array $group_content_bundle_ids, array $expected_permissions, array $expected_full_permissions) {
     // Retrieve the permissions from the listeners.
-    /** @var \Drupal\og\Event\PermissionEvent $permission_event */
+    /** @var PermissionEvent $permission_event */
     $event = new PermissionEvent($this->randomMachineName(), $this->randomMachineName(), $group_content_bundle_ids);
-    $permission_event = $this->eventDispatcher->dispatch(PermissionEventInterface::EVENT_NAME, $event);
+    $permission_event = $this->eventDispatcher->dispatch($event, PermissionEventInterface::EVENT_NAME);
     $actual_permissions = array_keys($permission_event->getPermissions());

     // Sort the permission arrays so they can be compared.
@@ @@
   /**
    * Asserts that the two permissions are identical.
    *
-   * @param \Drupal\og\PermissionInterface $expected
+   * @param PermissionInterface $expected
    *   The expected permission.
-   * @param \Drupal\og\PermissionInterface $actual
+   * @param PermissionInterface $actual
    *   The actual permission.
    */
   protected function assertPermission(PermissionInterface $expected, PermissionInterface $actual) {
@@ @@
   /**
    * Returns the property names that are used for the given Permission object.
    *
-   * @param \Drupal\og\PermissionInterface $permission
+   * @param PermissionInterface $permission
    *   The Permission object for which to return the properties.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/og/tests/src/Kernel/OgRoleManagerTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\og\OgRoleManagerInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\node\Entity\NodeType;
 use Drupal\og\Entity\OgRole;
@@ @@
   /**
    * A test group.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $group;

@@ @@
   /**
    * The OG role manager.
    *
-   * @var \Drupal\og\OgRoleManagerInterface
+   * @var OgRoleManagerInterface
    */
   protected $ogRoleManager;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/og/tests/src/Kernel/OgDeleteOrphansTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel;

+use Drupal\Component\Plugin\PluginManagerInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\og\OgDeleteOrphansPluginManager;
+use Drupal\og\OgDeleteOrphansInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;
@@ @@
   /**
    * The plugin manager for OgDeleteOrphans plugins.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $ogDeleteOrphansPluginManager;

@@ @@
   /**
    * A test group.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $group;

@@ @@
   /**
    * A test group content.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $groupContent;

@@ @@
     $this->installSchema('node', 'node_access');
     $this->installSchema('system', ['sequences']);

-    /** @var \Drupal\og\OgDeleteOrphansPluginManager $plugin_manager */
+    /** @var OgDeleteOrphansPluginManager $plugin_manager */
     $plugin_manager = \Drupal::service('plugin.manager.og.delete_orphans');
     $this->ogDeleteOrphansPluginManager = $plugin_manager;

@@ @@
    *   The ID of the plugin that is responsible for processing the queue.
    */
   protected function process($queue_id, $plugin_id) {
-    /** @var \Drupal\og\OgDeleteOrphansInterface $plugin */
+    /** @var OgDeleteOrphansInterface $plugin */
     $plugin = $this->ogDeleteOrphansPluginManager->createInstance($plugin_id, []);
     while ($this->getQueueCount($queue_id) > 0) {
       $plugin->process();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/og/tests/src/Kernel/GroupTypeConditionTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\PluginManagerInterface;
+use Drupal\og\GroupTypeManagerInterface;
+use Drupal\og\Plugin\Condition\GroupType;
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\node\Entity\Node;
@@ @@
   /**
    * Test groups.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]
+   * @var EntityInterface[]
    */
   protected $groups;

@@ @@
   /**
    * The condition plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $conditionManager;

@@ @@
   /**
    * The group type manager.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface
+   * @var GroupTypeManagerInterface
    */
   protected $groupTypeManager;

@@ @@
    */
   public function testConditions($group_types, $negate, $context_value, $expected) {
     // Create an instance of the group type condition plugin.
-    /** @var \Drupal\og\Plugin\Condition\GroupType $plugin_instance */
-
+    /** @var GroupType $plugin_instance */
     $plugin_instance = $this->conditionManager->createInstance('og_group_type')
       ->setConfig('group_types', array_combine($group_types, $group_types))
       ->setConfig('negate', $negate)
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/og/tests/src/Kernel/GroupManagerSubscriptionTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel;

+use Drupal\user\UserInterface;
+use Drupal\og\GroupTypeManagerInterface;
+use Drupal\og\MembershipManagerInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;
@@ @@
   /**
    * Test group owner.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $owner;

@@ @@
   /**
    * The group type manager.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface
+   * @var GroupTypeManagerInterface
    */
   protected $groupTypeManager;

@@ @@
   /**
    * The membership manager.
    *
-   * @var \Drupal\og\MembershipManagerInterface
+   * @var MembershipManagerInterface
    */
   protected $membershipManager;

@@ @@
   /**
    * Checks if the membership is overridden by a custom hook implementation.
    *
-   * @param \Drupal\og\OgMembershipInterface $membership
+   * @param OgMembershipInterface $membership
    *   The OG Membership to check. If empty the membership does not exist.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/og/tests/src/Kernel/Form/GroupSubscribeFormTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel\Form;

+use Drupal\og\Form\GroupSubscribeForm;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;
@@ @@
   /**
    * A user object.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $user1;

@@ @@
   /**
    * A group entity.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $group1;

@@ @@
   /**
    * A group entity.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $group2;

@@ @@
   /**
    * A group entity.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $group3;

@@ @@
     $this->group3->save();

     // Change the permissions of group to "subscribe".
-    /** @var \Drupal\og\Entity\OgRole $role */
+    /** @var OgRole $role */
     $role = OgRole::getRole('node', $bundle_names[0], OgRoleInterface::ANONYMOUS);
     $role
       ->grantPermission('subscribe')
@@ @@
   public function testIsStateActive() {
     $user = $this->createUser(['access content']);

-    /** @var \Drupal\og\Form\GroupSubscribeForm $form */
+    /** @var GroupSubscribeForm $form */
     $form = \Drupal::entityTypeManager()->getFormObject('og_membership', 'subscribe');

     // Pending membership.
@@ @@
    * @param array $permissions
    *   (optional) Array of permission names to assign to user.
    *
-   * @return \Drupal\user\Entity\User
+   * @return User
    *   The created user entity.
    */
   protected function createUser(array $permissions = []) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/og/tests/src/Kernel/Field/GroupSubscribeFormatterTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel\Field;

+use Drupal\user\Entity\User;
+use Drupal\node\NodeInterface;
+use Drupal\og\MembershipManager;
 use Drupal\KernelTests\Core\Entity\EntityKernelTestBase;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;
@@ @@
   /**
    * The owner of the group.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $user;

@@ @@
   /**
    * Test entity group.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $group;

@@ @@
     $elements = $this->getElements();
     $this->assertEquals('Request group membership', $elements[0]['#title']);

-    /** @var \Drupal\og\MembershipManager $membership_manager */
+    /** @var MembershipManager $membership_manager */
     $membership_manager = $this->container->get('og.membership_manager');
     $membership = $membership_manager->createMembership($this->group, $user1, OgMembershipInterface::STATE_ACTIVE);
     $membership->save();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/og/tests/src/Kernel/Field/AudienceFieldFormatterTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel\Field;

+use Drupal\Core\Field\FormatterPluginManager;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\og\OgGroupAudienceHelperInterface;

@@ @@
    * Testing og_field_formatter_info_alter().
    */
   public function testFieldFormatterInfoAlter() {
-    /** @var \Drupal\Core\Field\FormatterPluginManager $formatter_manager */
+    /** @var FormatterPluginManager $formatter_manager */
     $formatter_manager = \Drupal::getContainer()->get('plugin.manager.field.formatter');

     $expected = [
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


35) modules/contrib/og/tests/src/Kernel/EntityReference/Views/OgStandardReferenceRelationshipTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel\EntityReference\Views;

+use Drupal\views\ResultRow;
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\entity_test\Entity\EntityTestMul;
 use Drupal\og\Og;
@@ @@
     $entity = EntityTest::create();
     $entity->field_test_data->target_id = $referenced_entity->id();
     $entity->save();
-    $this->assertEqual($entity->field_test_data[0]->entity->id(), $referenced_entity->id());
+    $this->assertEquals($entity->field_test_data[0]->entity->id(), $referenced_entity->id());
     $this->entities[] = $entity;

     $entity = EntityTest::create();
     $entity->field_test_data->target_id = $referenced_entity->id();
     $entity->save();
-    $this->assertEqual($entity->field_test_data[0]->entity->id(), $referenced_entity->id());
+    $this->assertEquals($entity->field_test_data[0]->entity->id(), $referenced_entity->id());
     $this->entities[] = $entity;

     Views::viewsData()->clear();
@@ @@

     // Check the generated views data.
     $views_data = Views::viewsData()->get('entity_test__field_test_data');
-    $this->assertEqual($views_data['field_test_data']['relationship']['id'], 'standard');
-    $this->assertEqual($views_data['field_test_data']['relationship']['base'], 'entity_test_mul_property_data');
-    $this->assertEqual($views_data['field_test_data']['relationship']['base field'], 'id');
-    $this->assertEqual($views_data['field_test_data']['relationship']['relationship field'], 'field_test_data_target_id');
-    $this->assertEqual($views_data['field_test_data']['relationship']['entity type'], 'entity_test_mul');
+    $this->assertEquals($views_data['field_test_data']['relationship']['id'], 'standard');
+    $this->assertEquals($views_data['field_test_data']['relationship']['base'], 'entity_test_mul_property_data');
+    $this->assertEquals($views_data['field_test_data']['relationship']['base field'], 'id');
+    $this->assertEquals($views_data['field_test_data']['relationship']['relationship field'], 'field_test_data_target_id');
+    $this->assertEquals($views_data['field_test_data']['relationship']['entity type'], 'entity_test_mul');

     // Check the backwards reference.
     $views_data = Views::viewsData()->get('entity_test_mul_property_data');
-    $this->assertEqual($views_data['reverse__entity_test__field_test_data']['relationship']['id'], 'entity_reverse');
-    $this->assertEqual($views_data['reverse__entity_test__field_test_data']['relationship']['base'], 'entity_test');
-    $this->assertEqual($views_data['reverse__entity_test__field_test_data']['relationship']['base field'], 'id');
-    $this->assertEqual($views_data['reverse__entity_test__field_test_data']['relationship']['field table'], 'entity_test__field_test_data');
-    $this->assertEqual($views_data['reverse__entity_test__field_test_data']['relationship']['field field'], 'field_test_data_target_id');
-    $this->assertEqual($views_data['reverse__entity_test__field_test_data']['relationship']['field_name'], 'field_test_data');
-    $this->assertEqual($views_data['reverse__entity_test__field_test_data']['relationship']['entity_type'], 'entity_test');
+    $this->assertEquals($views_data['reverse__entity_test__field_test_data']['relationship']['id'], 'entity_reverse');
+    $this->assertEquals($views_data['reverse__entity_test__field_test_data']['relationship']['base'], 'entity_test');
+    $this->assertEquals($views_data['reverse__entity_test__field_test_data']['relationship']['base field'], 'id');
+    $this->assertEquals($views_data['reverse__entity_test__field_test_data']['relationship']['field table'], 'entity_test__field_test_data');
+    $this->assertEquals($views_data['reverse__entity_test__field_test_data']['relationship']['field field'], 'field_test_data_target_id');
+    $this->assertEquals($views_data['reverse__entity_test__field_test_data']['relationship']['field_name'], 'field_test_data');
+    $this->assertEquals($views_data['reverse__entity_test__field_test_data']['relationship']['entity_type'], 'entity_test');

     $values = ['field' => 'deleted', 'value' => 0, 'numeric' => TRUE];
-    $this->assertEqual($views_data['reverse__entity_test__field_test_data']['relationship']['join_extra'][0], $values);
+    $this->assertEquals($views_data['reverse__entity_test__field_test_data']['relationship']['join_extra'][0], $values);

     // Check an actual test view.
     $view = Views::getView('test_og_standard_reference_entity_test_view');
     $this->executeView($view);
-    /** @var \Drupal\views\ResultRow $row */
+    /** @var ResultRow $row */
     foreach ($view->result as $index => $row) {
       // Check that the actual ID of the entity is the expected one.
-      $this->assertEqual($row->id, $this->entities[$index]->id());
+      $this->assertEquals($row->id, $this->entities[$index]->id());

       // Also check that we have the correct result entity.
-      $this->assertEqual($row->_entity->id(), $this->entities[$index]->id());
+      $this->assertEquals($row->_entity->id(), $this->entities[$index]->id());

       // Test the forward relationship.
-      $this->assertEqual($row->entity_test_mul_property_data_entity_test__field_test_data_i, 1);
+      $this->assertEquals($row->entity_test_mul_property_data_entity_test__field_test_data_i, 1);

       // Test that the correct relationship entity is on the row.
-      $this->assertEqual($row->_relationship_entities['field_test_data']->id(), 1);
-      $this->assertEqual($row->_relationship_entities['field_test_data']->bundle(), 'entity_test_mul');
+      $this->assertEquals($row->_relationship_entities['field_test_data']->id(), 1);
+      $this->assertEquals($row->_relationship_entities['field_test_data']->bundle(), 'entity_test_mul');

     }

@@ @@
     // Check the backwards reference view.
     $view = Views::getView('test_og_standard_reference_reverse_entity_test_view');
     $this->executeView($view);
-    /** @var \Drupal\views\ResultRow $row */
+    /** @var ResultRow $row */
     foreach ($view->result as $index => $row) {
-      $this->assertEqual($row->id, 1);
-      $this->assertEqual($row->_entity->id(), 1);
+      $this->assertEquals($row->id, 1);
+      $this->assertEquals($row->_entity->id(), 1);

       // Test the backwards relationship.
-      $this->assertEqual($row->field_test_data_entity_test_mul_property_data_id, $this->entities[$index]->id());
+      $this->assertEquals($row->field_test_data_entity_test_mul_property_data_id, $this->entities[$index]->id());

       // Test that the correct relationship entity is on the row.
-      $this->assertEqual($row->_relationship_entities['reverse__entity_test__field_test_data']->id(), $this->entities[$index]->id());
-      $this->assertEqual($row->_relationship_entities['reverse__entity_test__field_test_data']->bundle(), 'entity_test');
+      $this->assertEquals($row->_relationship_entities['reverse__entity_test__field_test_data']->id(), $this->entities[$index]->id());
+      $this->assertEquals($row->_relationship_entities['reverse__entity_test__field_test_data']->bundle(), 'entity_test');
     }
   }

@@ @@
     $entity = EntityTestMul::create();
     $entity->field_data_test->target_id = $referenced_entity->id();
     $entity->save();
-    $this->assertEqual($entity->field_data_test[0]->entity->id(), $referenced_entity->id());
+    $this->assertEquals($entity->field_data_test[0]->entity->id(), $referenced_entity->id());
     $this->entities[] = $entity;

     $entity = EntityTestMul::create();
     $entity->field_data_test->target_id = $referenced_entity->id();
     $entity->save();
-    $this->assertEqual($entity->field_data_test[0]->entity->id(), $referenced_entity->id());
+    $this->assertEquals($entity->field_data_test[0]->entity->id(), $referenced_entity->id());
     $this->entities[] = $entity;

     Views::viewsData()->clear();
@@ @@

     // Check the generated views data.
     $views_data = Views::viewsData()->get('entity_test_mul__field_data_test');
-    $this->assertEqual($views_data['field_data_test']['relationship']['id'], 'standard');
-    $this->assertEqual($views_data['field_data_test']['relationship']['base'], 'entity_test');
-    $this->assertEqual($views_data['field_data_test']['relationship']['base field'], 'id');
-    $this->assertEqual($views_data['field_data_test']['relationship']['relationship field'], 'field_data_test_target_id');
-    $this->assertEqual($views_data['field_data_test']['relationship']['entity type'], 'entity_test');
+    $this->assertEquals($views_data['field_data_test']['relationship']['id'], 'standard');
+    $this->assertEquals($views_data['field_data_test']['relationship']['base'], 'entity_test');
+    $this->assertEquals($views_data['field_data_test']['relationship']['base field'], 'id');
+    $this->assertEquals($views_data['field_data_test']['relationship']['relationship field'], 'field_data_test_target_id');
+    $this->assertEquals($views_data['field_data_test']['relationship']['entity type'], 'entity_test');

     // Check the backwards reference.
     $views_data = Views::viewsData()->get('entity_test');
-    $this->assertEqual($views_data['reverse__entity_test_mul__field_data_test']['relationship']['id'], 'entity_reverse');
-    $this->assertEqual($views_data['reverse__entity_test_mul__field_data_test']['relationship']['base'], 'entity_test_mul_property_data');
-    $this->assertEqual($views_data['reverse__entity_test_mul__field_data_test']['relationship']['base field'], 'id');
-    $this->assertEqual($views_data['reverse__entity_test_mul__field_data_test']['relationship']['field table'], 'entity_test_mul__field_data_test');
-    $this->assertEqual($views_data['reverse__entity_test_mul__field_data_test']['relationship']['field field'], 'field_data_test_target_id');
-    $this->assertEqual($views_data['reverse__entity_test_mul__field_data_test']['relationship']['field_name'], 'field_data_test');
-    $this->assertEqual($views_data['reverse__entity_test_mul__field_data_test']['relationship']['entity_type'], 'entity_test_mul');
+    $this->assertEquals($views_data['reverse__entity_test_mul__field_data_test']['relationship']['id'], 'entity_reverse');
+    $this->assertEquals($views_data['reverse__entity_test_mul__field_data_test']['relationship']['base'], 'entity_test_mul_property_data');
+    $this->assertEquals($views_data['reverse__entity_test_mul__field_data_test']['relationship']['base field'], 'id');
+    $this->assertEquals($views_data['reverse__entity_test_mul__field_data_test']['relationship']['field table'], 'entity_test_mul__field_data_test');
+    $this->assertEquals($views_data['reverse__entity_test_mul__field_data_test']['relationship']['field field'], 'field_data_test_target_id');
+    $this->assertEquals($views_data['reverse__entity_test_mul__field_data_test']['relationship']['field_name'], 'field_data_test');
+    $this->assertEquals($views_data['reverse__entity_test_mul__field_data_test']['relationship']['entity_type'], 'entity_test_mul');

     $values = ['field' => 'deleted', 'value' => 0, 'numeric' => TRUE];
-    $this->assertEqual($views_data['reverse__entity_test_mul__field_data_test']['relationship']['join_extra'][0], $values);
+    $this->assertEquals($views_data['reverse__entity_test_mul__field_data_test']['relationship']['join_extra'][0], $values);

     // Check an actual test view.
     $view = Views::getView('test_og_standard_reference_entity_test_mul_view');
     $this->executeView($view);
-    /** @var \Drupal\views\ResultRow $row */
+    /** @var ResultRow $row */
     foreach ($view->result as $index => $row) {
       // Check that the actual ID of the entity is the expected one.
-      $this->assertEqual($row->id, $this->entities[$index]->id());
+      $this->assertEquals($row->id, $this->entities[$index]->id());

       // Also check that we have the correct result entity.
-      $this->assertEqual($row->_entity->id(), $this->entities[$index]->id());
+      $this->assertEquals($row->_entity->id(), $this->entities[$index]->id());

       // Test the forward relationship.
-      $this->assertEqual($row->entity_test_entity_test_mul__field_data_test_id, 1);
+      $this->assertEquals($row->entity_test_entity_test_mul__field_data_test_id, 1);

       // Test that the correct relationship entity is on the row.
-      $this->assertEqual($row->_relationship_entities['field_data_test']->id(), 1);
-      $this->assertEqual($row->_relationship_entities['field_data_test']->bundle(), 'entity_test');
+      $this->assertEquals($row->_relationship_entities['field_data_test']->id(), 1);
+      $this->assertEquals($row->_relationship_entities['field_data_test']->bundle(), 'entity_test');

     }

@@ @@
     // Check the backwards reference view.
     $view = Views::getView('test_og_standard_reference_reverse_entity_test_mul_view');
     $this->executeView($view);
-    /** @var \Drupal\views\ResultRow $row */
+    /** @var ResultRow $row */
     foreach ($view->result as $index => $row) {
-      $this->assertEqual($row->id, 1);
-      $this->assertEqual($row->_entity->id(), 1);
+      $this->assertEquals($row->id, 1);
+      $this->assertEquals($row->_entity->id(), 1);

       // Test the backwards relationship.
-      $this->assertEqual($row->field_data_test_entity_test_id, $this->entities[$index]->id());
+      $this->assertEquals($row->field_data_test_entity_test_id, $this->entities[$index]->id());

       // Test that the correct relationship entity is on the row.
-      $this->assertEqual($row->_relationship_entities['reverse__entity_test_mul__field_data_test']->id(), $this->entities[$index]->id());
-      $this->assertEqual($row->_relationship_entities['reverse__entity_test_mul__field_data_test']->bundle(), 'entity_test_mul');
+      $this->assertEquals($row->_relationship_entities['reverse__entity_test_mul__field_data_test']->id(), $this->entities[$index]->id());
+      $this->assertEquals($row->_relationship_entities['reverse__entity_test_mul__field_data_test']->bundle(), 'entity_test_mul');
     }
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/og/tests/src/Kernel/Entity/SelectionHandlerTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel\Entity;

+use Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface;
+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManager;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;
@@ @@
   /**
    * The selection handler.
    *
-   * @var \Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface|false|object
+   * @var SelectionInterface|false|object
    */
   protected $selectionHandler;

@@ @@
   /**
    * A user object.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $user1;

@@ @@
   /**
    * A user object.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $user2;

@@ @@
   /**
    * The field definition used in this test.
    *
-   * @var \Drupal\Core\Field\FieldDefinitionInterface
+   * @var FieldDefinitionInterface
    */
   protected $fieldDefinition;

@@ @@
   /**
    * Selection plugin manager.
    *
-   * @var \Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManager
+   * @var SelectionPluginManager
    */
   protected $selectionPluginManager;

@@ @@
    *
    * @param int $amount
    *   The number of groups to create.
-   * @param \Drupal\user\Entity\User $user
+   * @param User $user
    *   The user object which owns the groups.
    *
    * @return ContentEntityBase[]
@@ @@
   /**
    * Sets the current account.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account to switch to.
    */
   protected function setCurrentAccount(AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/og/tests/src/Kernel/Entity/OgStandardReferenceItemTest.php:45

    ---------- begin diff ----------
@@ @@
   /**
    * A list of groups.
    *
-   * @var \Drupal\entity_test\Entity\EntityTest[]
+   * @var EntityTest[]
    */
   protected $groups;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/og/tests/src/Kernel/Entity/OgRoleTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel\Entity;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\og\GroupTypeManagerInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Config\Entity\ConfigEntityBundleBase;
+use Drupal\Core\Action\ActionInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Config\ConfigValueException;
 use Drupal\Core\Entity\EntityStorageException;
 use Drupal\KernelTests\KernelTestBase;
@@ @@
   /**
    * The entity storage handler for Action entities.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $actionStorage;

@@ @@
   /**
    * The group type manager.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface
+   * @var GroupTypeManagerInterface
    */
   protected $groupTypeManager;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Test group types.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityBundleBase[]
+   * @var ConfigEntityBundleBase[]
    */
   protected $groupTypes;

@@ @@
    * Testing OG role creation.
    */
   public function testRoleCreate() {
-    /** @var \Drupal\og\Entity\OgRole $og_role */
+    /** @var OgRole $og_role */
     $og_role = OgRole::create();
     $og_role
       ->setName('content_editor')
@@ @@
       ->setGroupBundle('group')
       ->save();

-    /** @var \Drupal\og\Entity\OgRole $saved_role */
+    /** @var OgRole $saved_role */
     $saved_role = $this->loadUnchangedOgRole('node-group-content_editor');
     $this->assertNotEmpty($saved_role, 'The role was created with the expected ID.');
     $this->assertEquals($og_role->id(), $saved_role->id());
@@ @@
       'og_membership_add_single_role_action.content_editor',
       'og_membership_remove_single_role_action.content_editor',
     ];
-    /** @var \Drupal\Core\Action\ActionInterface[] $actions */
+    /** @var ActionInterface[] $actions */
     $actions = Action::loadMultiple($action_ids);
     foreach ($action_ids as $action_id) {
       $this->assertTrue(array_key_exists($action_id, $actions));
@@ @@
    * @param string $id
    *   The ID of the role to load.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The role, or NULL if there is no such role.
    */
   protected function loadUnchangedOgRole($id) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


39) modules/contrib/og/tests/src/Kernel/Entity/OgMembershipTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel\Entity;

+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\og\GroupTypeManagerInterface;
 use Drupal\Core\Entity\EntityStorageException;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\entity_test\Entity\EntityTest;
@@ @@
   /**
    * Test group.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $group;

@@ @@
   /**
    * Test group owner.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $owner;

@@ @@
   /**
    * Test user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The group type manager.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface
+   * @var GroupTypeManagerInterface
    */
   protected $groupTypeManager;

@@ @@
   /**
    * Asserts that the test user is set as the owner of the given membership.
    *
-   * @param \Drupal\og\OgMembershipInterface $membership
+   * @param OgMembershipInterface $membership
    *   The membership to check.
    */
   protected function assertOwner(OgMembershipInterface $membership) {
@@ @@
     $this->assertEquals($this->user->id(), $membership->getOwnerId());

     // And after re-loading.
-    /** @var \Drupal\og\OgMembershipInterface $membership */
+    /** @var OgMembershipInterface $membership */
     $membership = $this->entityTypeManager->getStorage('og_membership')->loadUnchanged($membership->id());

     $this->assertInstanceOf(UserInterface::class, $membership->getOwner());
@@ @@
    * @covers ::preSave
    */
   public function testSetNoUserException() {
-    /** @var \Drupal\og\OgMembershipInterface $membership */
+    /** @var OgMembershipInterface $membership */
     $membership = OgMembership::create(['type' => OgMembershipInterface::TYPE_DEFAULT]);
     $this->expectException(EntityStorageException::class);
     $membership
@@ @@
    * @covers ::preSave
    */
   public function testSetNoGroupException() {
-    /** @var \Drupal\og\OgMembershipInterface $membership */
+    /** @var OgMembershipInterface $membership */
     $membership = OgMembership::create();
     $this->expectException(EntityStorageException::class);
     $membership
@@ @@
    *
    * @todo This test is not related to the OgMembership entity. It should be
    *   moved to a more appropriate test class.
+   * @doesNotPerformAssertions
    */
   public function testNoOwnerException() {
     // Create a bundle and add as a group.
@@ @@
     ]);

     $non_group->save();
-    /** @var \Drupal\og\OgMembershipInterface $membership */
+    /** @var OgMembershipInterface $membership */
     $membership = Og::createMembership($non_group, $this->user);

     $this->expectException(EntityStorageException::class);
@@ @@

     $this->groupTypeManager->addGroup('entity_test', $group->bundle());

-    /** @var \Drupal\og\OgMembershipInterface $membership */
+    /** @var OgMembershipInterface $membership */
     $membership1 = Og::createMembership($group, $this->user);
     $membership1->save();

@@ @@
    * Tests re-saving a membership.
    *
    * @covers ::preSave
+   * @doesNotPerformAssertions
    */
   public function testSaveSameMembershipTwice() {
     $group = EntityTest::create([
@@ @@

     $this->groupTypeManager->addGroup('entity_test', $group->bundle());

-    /** @var \Drupal\og\OgMembershipInterface $membership */
+    /** @var OgMembershipInterface $membership */
     $membership = Og::createMembership($group, $this->user);
     $membership->save();
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/og/tests/src/Kernel/Entity/OgMembershipRoleReferenceTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel\Entity;

+use Drupal\og\OgMembershipInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;
@@ @@
   /**
    * The group entity, of type node.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $group;

@@ @@
   /**
    * The user object.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $user;

@@ @@
       ->setLabel('Group member');
     $group_member->save();

-    /** @var \Drupal\og\OgMembershipInterface $membership */
+    /** @var OgMembershipInterface $membership */
     $membership = Og::getMembership($this->group, $this->user);
     $membership
       // Assign only the content editor role for now.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


41) modules/contrib/og/tests/src/Kernel/Entity/GroupTypeTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel\Entity;

+use Drupal\og\GroupTypeManagerInterface;
+use Drupal\node\NodeTypeInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\node\Entity\NodeType;

@@ @@
   /**
    * The group type manager.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface
+   * @var GroupTypeManagerInterface
    */
   protected $groupTypeManager;

@@ @@
     $editable->set('groups', $groups);
     $editable->save();
     // Create a content type.
-    /** @var \Drupal\node\NodeTypeInterface $group_type */
+    /** @var NodeTypeInterface $group_type */
     $group_type = NodeType::create(['type' => 'group', 'name' => 'Group']);
     $group_type->save();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


42) modules/contrib/og/tests/src/Kernel/Entity/GroupMembershipManagerTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel\Entity;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\user\UserInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\og\MembershipManagerInterface;
+use Drupal\node\NodeInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\og\Traits\OgMembershipCreationTrait;
 use Drupal\entity_test\Entity\EntityTestBundle;
@@ @@
   /**
    * Test groups.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[][]
+   * @var EntityInterface[][]
    */
   protected $groups;

@@ @@
   /**
    * Test group content.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $groupContent;

@@ @@
   /**
    * Test users.
    *
-   * @var \Drupal\user\UserInterface[]
+   * @var UserInterface[]
    */
   protected $users;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The membership manager. This is the system under test.
    *
-   * @var \Drupal\og\MembershipManagerInterface
+   * @var MembershipManagerInterface
    */
   protected $membershipManager;

@@ @@
    *
    * @covers ::getGroupIds
    * @dataProvider groupContentProvider
+   * @doesNotPerformAssertions
    */
   public function testGetGroupIdsInvalidArguments() {
-    /** @var \Drupal\og\MembershipManagerInterface $membership_manager */
+    /** @var MembershipManagerInterface $membership_manager */
     $membership_manager = \Drupal::service('og.membership_manager');

     $test_cases = [
@@ @@
     $this->assertEquals($group_content_rev->id(), $group_content_with_bundle->id());

     $group_content_rev_group = $this->membershipManager->getGroups($group_content_rev);
-    /** @var \Drupal\node\NodeInterface $group */
+    /** @var NodeInterface $group */
     $group = reset($group_content_rev_group['node']);
     $this->assertEquals($this->groups['node'][0]->id(), $group->id());
     $group_content_with_bundle_group = $this->membershipManager->getGroups($group_content_with_bundle);
@@ @@
     // Check that all expected results are returned.
     foreach ($expected as $expected_type => $expected_keys) {
       foreach ($expected_keys as $expected_key) {
-        /** @var \Drupal\Core\Entity\EntityInterface $expected_group */
+        /** @var EntityInterface $expected_group */
         $expected_group = $this->groups[$expected_type][$expected_key];
-        /** @var \Drupal\Core\Entity\EntityInterface $group */
+        /** @var EntityInterface $group */
         foreach ($result[$expected_type] as $group) {
           if ($group->getEntityTypeId() === $expected_group->getEntityTypeId() && $group->id() === $expected_group->id()) {
             // The expected result was found. Continue the test.
@@ @@
    * Tests retrieval of group membership IDs filtered by role names.
    *
    * @covers ::getGroupMembershipIdsByRoleNames
+   * @doesNotPerformAssertions
    */
   public function testGetGroupMembershipIdsByRoleNames() {
     $membership_storage = $this->container->get('entity_type.manager')->getStorage('og_membership');
     $retrieve_membership_owner_id = function ($membership_id) use ($membership_storage) {
-      /** @var \Drupal\og\OgMembershipInterface $membership */
+      /** @var OgMembershipInterface $membership */
       $membership = $membership_storage->load($membership_id);
       return $membership->getOwnerId();
     };
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


43) modules/contrib/og/tests/src/Kernel/Entity/GroupAudienceTest.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The OG group audience helper.
    *
-   * @var \Drupal\og\OgGroupAudienceHelperInterface
+   * @var OgGroupAudienceHelperInterface
    */
   protected $groupAudienceHelper;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


44) modules/contrib/og/tests/src/Kernel/Entity/GetUserGroupsTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel\Entity;

+use Drupal\og\MembershipManagerInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\og\Traits\OgMembershipCreationTrait;
 use Drupal\entity_test\Entity\EntityTest;
@@ @@
   /**
    * The OG membership manager.
    *
-   * @var \Drupal\og\MembershipManagerInterface
+   * @var MembershipManagerInterface
    */
   protected $membershipManager;

@@ @@
   /**
    * A user object.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $user1;

@@ @@
   /**
    * A user object.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $user2;

@@ @@
   /**
    * A user object.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $user3;

@@ @@
   /**
    * A group entity.
    *
-   * @var \Drupal\entity_test\Entity\EntityTest
+   * @var EntityTest
    */
   protected $group1;

@@ @@
   /**
    * A group entity.
    *
-   * @var \Drupal\entity_test\Entity\EntityTest
+   * @var EntityTest
    */
   protected $group2;

@@ @@
    *
    * Assumes entity_type is used.
    *
-   * @param \Drupal\entity_test\Entity\EntityTest $group_to_check
+   * @param EntityTest $group_to_check
    *   The group entity to check.
    * @param array $results
    *   Array keyed by the entity type, and with the group entities as values.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


45) modules/contrib/og/tests/src/Kernel/Entity/GetMembershipsTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel\Entity;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\user\UserInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\og\Traits\OgMembershipCreationTrait;
 use Drupal\node\Entity\Node;
@@ @@
   /**
    * Test groups.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]
+   * @var EntityInterface[]
    */
   protected $groups = [];

@@ @@
   /**
    * Test users.
    *
-   * @var \Drupal\user\UserInterface[]
+   * @var UserInterface[]
    */
   protected $users;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


46) modules/contrib/og/tests/src/Kernel/Entity/GetGroupContentTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel\Entity;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\user\UserInterface;
+use Drupal\og\MembershipManagerInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\node\Entity\Node;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The group admin user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $groupAdmin;

@@ @@
     $this->installEntitySchema('user');
     $this->installSchema('system', 'sequences');

-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
+    /** @var EntityTypeManagerInterface $entity_type_manager */
     $entity_type_manager = $this->container->get('entity_type.manager');
     $this->entityTypeManager = $entity_type_manager;

@@ @@
       }
     }

-    /** @var \Drupal\og\MembershipManagerInterface $membership_manager */
+    /** @var MembershipManagerInterface $membership_manager */
     $membership_manager = \Drupal::service('og.membership_manager');

     // Check that Og::getGroupContent() returns the correct group content for
@@ @@
     ]);
     $group_content->save();

-    /** @var \Drupal\og\MembershipManagerInterface $membership_manager */
+    /** @var MembershipManagerInterface $membership_manager */
     $membership_manager = \Drupal::service('og.membership_manager');

     // Check that Og::getGroupContent() returns the group content entity for
@@ @@
     $group_content = $this->entityTypeManager->getStorage('entity_test')->create($values);
     $group_content->save();

-    /** @var \Drupal\og\MembershipManagerInterface $membership_manager */
+    /** @var MembershipManagerInterface $membership_manager */
     $membership_manager = \Drupal::service('og.membership_manager');

     // Check that Og::getGroupContent() returns the group content entity for
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


47) modules/contrib/og/tests/src/Kernel/Entity/GetBundleByBundleTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel\Entity;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\og\GroupTypeManagerInterface;
+use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\block_content\Entity\BlockContentType;
 use Drupal\node\Entity\NodeType;
@@ @@
   /**
    * Test groups.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[][]
+   * @var EntityInterface[][]
    */
   protected $groups = [];

@@ @@
   /**
    * Test group content.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $groupContent;

@@ @@
   /**
    * The group manager.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface
+   * @var GroupTypeManagerInterface
    */
   protected $groupTypeManager;

@@ @@
   /**
    * The cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


48) modules/contrib/og/tests/src/Kernel/Entity/FieldCreateTest.php:96

    ---------- begin diff ----------
@@ @@

   /**
    * Testing invalid field creation.
+   * @doesNotPerformAssertions
    */
   public function testInvalidFields() {
     // Unknown plugin.
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


49) modules/contrib/og/tests/src/Kernel/Entity/EntityCreateAccessTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel\Entity;

+use Drupal\node\Access\NodeAddAccessCheck;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\node\Traits\ContentTypeCreationTrait;
 use Drupal\Tests\node\Traits\NodeCreationTrait;
@@ @@
   /**
    * The group type.
    *
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   public $groupType;

@@ @@
   /**
    * The group content type.
    *
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   public $groupContentType;

@@ @@
       ->save();

     // Grant the anonymous user permission to view published content.
-    /** @var \Drupal\user\Entity\Role $role */
+    /** @var Role $role */
     $role = Role::create([
       'id' => Role::ANONYMOUS_ID,
       'label' => 'anonymous user',
@@ @@

     // Verify that the user does not have access to the entity create form of
     // the group content type.
-    /** @var \Drupal\node\Access\NodeAddAccessCheck $node_access_check */
+    /** @var NodeAddAccessCheck $node_access_check */
     $node_access_check = $this->container->get('access_check.node.add');
     $result = $node_access_check->access(User::getAnonymousUser(), $this->groupContentType);
     $this->assertNotInstanceOf('\Drupal\Core\Access\AccessResultAllowed', $result);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


50) modules/contrib/og/tests/src/Kernel/Entity/CacheInvalidationOnGroupChangeTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel\Entity;

+use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\entity_test\Entity\EntityTest;
@@ @@
   /**
    * The cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * Caches a listing of group content that belongs to the given group.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $group
+   * @param ContentEntityInterface $group
    *   The group for which to cache a group content listing.
    * @param bool $include_group_cache_tag
    *   Whether or not the group content listing is tagged with the group's cache
@@ @@
   /**
    * Generates a cache ID for a group content listing of the given group.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $group
+   * @param ContentEntityInterface $group
    *   The group for which to generate a group content listing cache ID.
    *
    * @return string
@@ @@
   /**
    * Checks if the group content listing cache for a given group is populated.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $group
+   * @param ContentEntityInterface $group
    *   The group for which to perform the check.
    */
   protected function assertCachePopulated(ContentEntityInterface $group): void {
@@ @@
   /**
    * Checks if the group content listing cache for a given group is unpopulated.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $group
+   * @param ContentEntityInterface $group
    *   The group for which to perform the check.
    */
   protected function assertCacheNotPopulated(ContentEntityInterface $group): void {
@@ @@
   /**
    * Returns the cached group content listing for a given group, if available.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $group
+   * @param ContentEntityInterface $group
    *   The group for which to return the cached group content listing.
    *
    * @return false|object
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


51) modules/contrib/og/tests/src/Kernel/DefaultRoleEventIntegrationTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel;

+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\og\Event\DefaultRoleEvent;
 use Drupal\og\Event\DefaultRoleEventInterface;
@@ @@
   /**
    * The Symfony event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The OG role storage handler.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $ogRoleStorage;

@@ @@
    * Tests that OG correctly provides the group administrator default role.
    */
   public function testPermissionEventIntegration() {
-    /** @var \Drupal\og\Event\DefaultRoleEvent $event */
+    /** @var DefaultRoleEvent $event */
     $event = new DefaultRoleEvent();

     // Query the event listener directly to see if the administrator role is
     // present.
-    $this->eventDispatcher->dispatch(DefaultRoleEventInterface::EVENT_NAME, $event);
+    $this->eventDispatcher->dispatch($event, DefaultRoleEventInterface::EVENT_NAME);
     $this->assertEquals([OgRoleInterface::ADMINISTRATOR], array_keys($event->getRoles()));

     // Check that the role was created with the correct values.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


52) modules/contrib/og/tests/src/Kernel/Cache/Context/OgRoleCacheContextTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel\Cache\Context;

+use Drupal\Core\Database\Connection;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\og\GroupTypeManagerInterface;
+use Drupal\og\MembershipManagerInterface;
+use Drupal\Core\PrivateKey;
+use Drupal\og\OgRoleInterface;
 use Drupal\Core\Cache\Context\CacheContextInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The OG group type manager service.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface
+   * @var GroupTypeManagerInterface
    */
   protected $groupTypeManager;

@@ @@
   /**
    * The OG membership manager service.
    *
-   * @var \Drupal\og\MembershipManagerInterface
+   * @var MembershipManagerInterface
    */
   protected $membershipManager;

@@ @@
   /**
    * The private key handler.
    *
-   * @var \Drupal\Core\PrivateKey
+   * @var PrivateKey
    */
   protected $privateKey;

@@ @@
     // test as a custom role in addition to the default roles 'member',
     // 'administrator', etc.
     foreach (['entity_test', 'node'] as $entity_type_id) {
-      /** @var \Drupal\og\OgRoleInterface $role */
+      /** @var OgRoleInterface $role */
       $role = OgRole::create();
       $role
         ->setGroupType($entity_type_id)
@@ @@
   /**
    * Returns the instantiated cache context service which is being tested.
    *
-   * @param \Drupal\Core\Session\AccountInterface|null $user
+   * @param AccountInterface|null $user
    *   The user account for which to return the cache context service.
    *
-   * @return \Drupal\Core\Cache\Context\CacheContextInterface
+   * @return CacheContextInterface
    *   The instantiated cache context service.
    */
   protected function getCacheContext(?AccountInterface $user = NULL): CacheContextInterface {
@@ @@
    * @param string $entity_type_id
    *   The entity type of the entity to create. Can be 'entity_test' or 'node'.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The entity.
    */
   protected function createGroup(string $entity_type_id): ContentEntityInterface {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


53) modules/contrib/og/tests/src/Kernel/Action/UnblockOgMembershipActionTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel\Action;

+use Drupal\og\Plugin\Action\AddSingleOgMembershipRole;
 use Drupal\og\OgMembershipInterface;

 /**
@@ @@
    */
   public function testExecute($membership = NULL) {
     $membership = $this->memberships[$membership];
-    /** @var \Drupal\og\Plugin\Action\AddSingleOgMembershipRole $plugin */
+    /** @var AddSingleOgMembershipRole $plugin */
     $plugin = $this->getPlugin();
     $plugin->execute($membership);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


54) modules/contrib/og/tests/src/Kernel/Action/RemoveSingleOgMembershipRoleActionTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel\Action;

+use Drupal\og\Plugin\Action\AddSingleOgMembershipRole;
 use Drupal\og\Entity\OgRole;

 /**
@@ @@
    * @dataProvider executeProvider
    */
   public function testExecute($membership, $default_role_name = NULL, $expected_role_name = NULL) {
-    /** @var \Drupal\og\Plugin\Action\AddSingleOgMembershipRole $plugin */
+    /** @var AddSingleOgMembershipRole $plugin */
     $configuration = !empty($default_role_name) ? ['role_name' => $default_role_name] : [];
     $plugin = $this->getPlugin($configuration);
     $plugin->execute($this->memberships[$membership]);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


55) modules/contrib/og/tests/src/Kernel/Action/PendingOgMembershipActionTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel\Action;

+use Drupal\og\Plugin\Action\AddSingleOgMembershipRole;
 use Drupal\og\OgMembershipInterface;

 /**
@@ @@
    */
   public function testExecute($membership = NULL) {
     $membership = $this->memberships[$membership];
-    /** @var \Drupal\og\Plugin\Action\AddSingleOgMembershipRole $plugin */
+    /** @var AddSingleOgMembershipRole $plugin */
     $plugin = $this->getPlugin();
     $plugin->execute($membership);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


56) modules/contrib/og/tests/src/Kernel/Action/DeleteOgMembershipActionTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel\Action;

+use Drupal\og\Plugin\Action\AddSingleOgMembershipRole;
 use Drupal\og\OgMembershipInterface;

 /**
@@ @@
   public function testExecute($membership = NULL) {
     $membership = $this->memberships[$membership];
     $member = $membership->getOwner();
-    /** @var \Drupal\og\Plugin\Action\AddSingleOgMembershipRole $plugin */
+    /** @var AddSingleOgMembershipRole $plugin */
     $plugin = $this->getPlugin();
     $plugin->execute($membership);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


57) modules/contrib/og/tests/src/Kernel/Action/ChangeMultipleOgMembershipRolesActionTestBase.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel\Action;

+use Drupal\Core\TempStore\PrivateTempStoreFactory;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\og\Plugin\Action\AddMultipleOgMembershipRoles;
 /**
  * Base class for tests for plugins that change multiple roles at once.
  */
@@ @@
   /**
    * The factory for private temporary storage objects.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStorageFactory;

@@ @@
   /**
    * A test user that is logged in during the test session.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $testUser;

@@ @@
       return in_array($membership_id, $membership_ids);
     }, ARRAY_FILTER_USE_KEY);

-    /** @var \Drupal\og\Plugin\Action\AddMultipleOgMembershipRoles $plugin */
+    /** @var AddMultipleOgMembershipRoles $plugin */
     $plugin = $this->getPlugin();
     $plugin->executeMultiple($memberships);

@@ @@
     // @see \Drupal\Tests\og\Kernel\Action\ActionTestBase::testAccess()
     $this->setCurrentUser($this->testUser);

-    /** @var \Drupal\og\Plugin\Action\AddMultipleOgMembershipRoles $plugin */
+    /** @var AddMultipleOgMembershipRoles $plugin */
     $plugin = $this->getPlugin();
     $plugin->execute($this->memberships[$membership]);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


58) modules/contrib/og/tests/src/Kernel/Action/BlockOgMembershipActionTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel\Action;

+use Drupal\og\Plugin\Action\AddSingleOgMembershipRole;
 use Drupal\og\OgMembershipInterface;

 /**
@@ @@
    */
   public function testExecute($membership = NULL) {
     $membership = $this->memberships[$membership];
-    /** @var \Drupal\og\Plugin\Action\AddSingleOgMembershipRole $plugin */
+    /** @var AddSingleOgMembershipRole $plugin */
     $plugin = $this->getPlugin();
     $plugin->execute($membership);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


59) modules/contrib/og/tests/src/Kernel/Action/ApprovePendingOgMembershipActionTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel\Action;

+use Drupal\og\Plugin\Action\AddSingleOgMembershipRole;
 use Drupal\og\OgMembershipInterface;

 /**
@@ @@
    */
   public function testExecute($membership = NULL) {
     $membership = $this->memberships[$membership];
-    /** @var \Drupal\og\Plugin\Action\AddSingleOgMembershipRole $plugin */
+    /** @var AddSingleOgMembershipRole $plugin */
     $plugin = $this->getPlugin();
     $plugin->execute($membership);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


60) modules/contrib/og/tests/src/Kernel/Action/AddSingleOgMembershipRoleActionTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel\Action;

+use Drupal\og\Plugin\Action\AddSingleOgMembershipRole;
 use Drupal\og\Entity\OgRole;

 /**
@@ @@
    * @dataProvider executeProvider
    */
   public function testExecute($membership, $default_role_name = NULL, $expected_role_name = NULL) {
-    /** @var \Drupal\og\Plugin\Action\AddSingleOgMembershipRole $plugin */
+    /** @var AddSingleOgMembershipRole $plugin */
     $configuration = !empty($default_role_name) ? ['role_name' => $default_role_name] : [];
     $plugin = $this->getPlugin($configuration);
     $plugin->execute($this->memberships[$membership]);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


61) modules/contrib/og/tests/src/Kernel/Action/ActionTestBase.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel\Action;

+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\og\MembershipManagerInterface;
+use Drupal\og\GroupTypeManagerInterface;
+use Drupal\Core\Action\ActionInterface;
+use Drupal\Core\Action\ActionManager;
 use Drupal\Core\Access\AccessResultAllowed;
 use Drupal\Core\Session\AnonymousUserSession;
 use Drupal\KernelTests\KernelTestBase;
@@ @@
   /**
    * An array of test users.
    *
-   * @var \Drupal\Core\Session\AccountInterface[]
+   * @var AccountInterface[]
    */
   protected $users;

@@ @@
   /**
    * An array of test memberships.
    *
-   * @var \Drupal\og\OgMembershipInterface[]
+   * @var OgMembershipInterface[]
    */
   protected $memberships;

@@ @@
   /**
    * A test group.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $group;

@@ @@
   /**
    * An array of test OG roles.
    *
-   * @var \Drupal\og\OgRoleInterface[]
+   * @var OgRoleInterface[]
    */
   protected $roles;

@@ @@
   /**
    * The OG membership manager.
    *
-   * @var \Drupal\og\MembershipManagerInterface
+   * @var MembershipManagerInterface
    */
   protected $membershipManager;

@@ @@
   /**
    * The OG group type manager.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface
+   * @var GroupTypeManagerInterface
    */
   protected $groupTypeManager;

@@ @@
    * @var array $configuration
    *   An array of configuration relevant to the plugin instance.
    *
-   * @return \Drupal\Core\Action\ActionInterface
+   * @return ActionInterface
    *   The plugin instance.
    */
   public function getPlugin($configuration = []) {
-    /** @var \Drupal\Core\Action\ActionManager $plugin_manager */
+    /** @var ActionManager $plugin_manager */
     $plugin_manager = $this->container->get('plugin.manager.action');
     return $plugin_manager->createInstance($this->pluginId, $configuration);
   }
@@ @@
    *
    * @covers ::execute
    * @dataProvider executeProvider
+   * @doesNotPerformAssertions
    */
   abstract public function testExecute($membership);
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


62) modules/contrib/og/tests/src/Kernel/Access/OgGroupContentOperationAccessTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel\Access;

+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\og\OgAccessInterface;
 use Drupal\comment\Entity\CommentType;
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\KernelTests\KernelTestBase;
@@ @@
   /**
    * An array of test users.
    *
-   * @var \Drupal\user\Entity\User[]
+   * @var User[]
    */
   protected $users;

@@ @@
   /**
    * A test group.
    *
-   * @var \Drupal\entity_test\Entity\EntityTest
+   * @var EntityTest
    */
   protected $group;

@@ @@
   /**
    * An array of test roles.
    *
-   * @var \Drupal\og\OgRoleInterface[]
+   * @var OgRoleInterface[]
    */
   protected $roles;

@@ @@
   /**
    * An array of test group content, keyed by bundle ID and user ID.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface[][]
+   * @var ContentEntityInterface[][]
    */
   protected $groupContent;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    * @dataProvider accessProvider
    */
   public function testAccess($group_content_bundle_id, $expected_access_matrix) {
-    /** @var \Drupal\og\OgAccessInterface $og_access */
+    /** @var OgAccessInterface $og_access */
     $og_access = $this->container->get('og.access');

     foreach ($expected_access_matrix as $user_id => $operations) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


63) modules/contrib/og/tests/src/Kernel/Access/OgAccessHookTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel\Access;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Access\AccessResult;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\og\Traits\OgMembershipCreationTrait;
 use Drupal\block_content\Entity\BlockContent;
@@ @@
   /**
    * A test group.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $group;

@@ @@
   /**
    * Test group content entities.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]
+   * @var EntityInterface[]
    */
   protected $groupContent;

@@ @@
   /**
    * Test non group content entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $nonGroupContent;

@@ @@
   /**
    * Test users.
    *
-   * @var \Drupal\Core\Session\AccountInterface[]
+   * @var AccountInterface[]
    */
   protected $users;

@@ @@
   /**
    * Test roles.
    *
-   * @var \Drupal\user\Entity\Role[]
+   * @var Role[]
    */
   protected $roles;

@@ @@
     Og::createField(OgGroupAudienceHelperInterface::DEFAULT_FIELD, 'node', 'group_content', $settings);

     // Grant members permission to edit their own content.
-    /** @var \Drupal\og\Entity\OgRole $role */
+    /** @var OgRole $role */
     $role = OgRole::getRole('block_content', 'group', OgRoleInterface::AUTHENTICATED);
     $role->grantPermission('edit own group_content content');
     $role->save();
@@ @@
    */
   public function testEntityOperationAccess($user, array $expected_results) {
     foreach ($expected_results as $group_content => $expected_result) {
-      /** @var \Drupal\Core\Access\AccessResult $result */
+      /** @var AccessResult $result */
       $result = og_entity_access($this->groupContent[$group_content], 'update', $this->users[$user]);
       $this->assertEquals($expected_result, $result->isAllowed());
     }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


64) modules/contrib/og/tests/src/Kernel/Access/GroupLevelAccessTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel\Access;

+use Drupal\og\OgAccessInterface;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\entity_test\Entity\EntityTest;
@@ @@
   /**
    * The OgAccess service, this is the system under test.
    *
-   * @var \Drupal\og\OgAccessInterface
+   * @var OgAccessInterface
    */
   protected $ogAccess;

@@ @@
   /**
    * A user object.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $nonMemberUser;

@@ @@
   /**
    * The group owner.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $ownerUser;

@@ @@
   /**
    * An admin user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $adminUser;

@@ @@
   /**
    * A second administrator which has an alternative administration role.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $alternativeAdminUser;

@@ @@
   /**
    * A group entity.
    *
-   * @var \Drupal\entity_test\Entity\EntityTest
+   * @var EntityTest
    */
   protected $group;

@@ @@
     // Create another administrator role and assign it to a second test user.
     // This is a supported use case: it is possible to have multiple
     // administration roles.
-    /** @var \Drupal\og\OgRoleInterface $alternative_admin_role */
+    /** @var OgRoleInterface $alternative_admin_role */
     $alternative_admin_role = $this->createOgRole([], TRUE);
     $this->alternativeAdminUser = $this->createUserWithOgRole($alternative_admin_role);
   }
@@ @@

     // Grant the arbitrary permission to non-members and check that our
     // non-member now has the permission.
-    /** @var \Drupal\og\Entity\OgRole $role */
+    /** @var OgRole $role */
     $role = OgRole::loadByGroupAndName($this->group, OgRoleInterface::ANONYMOUS);
     $role
       ->grantPermission('some_perm')
@@ @@
         $result = AccessResult::neutral();
       }
       else {
-        /** @var \Drupal\Core\Access\AccessResultInterface $result */
+        /** @var AccessResultInterface $result */
         $result = array_shift($hook_result);
         foreach ($hook_result as $other) {
           $result = $result->orIf($other);
@@ @@
   /**
    * Returns test users with permissions to perform group entity operations.
    *
-   * @return \Drupal\user\UserInterface[]
+   * @return UserInterface[]
    *   The test users.
    */
   protected function setupGroupEntityOperationPermissions(): array {
@@ @@
    * @param bool $is_admin
    *   Whether or not this is an admin role.
    *
-   * @return \Drupal\og\OgRoleInterface
+   * @return OgRoleInterface
    *   The newly created role.
    */
   protected function createOgRole(array $permissions = [], bool $is_admin = FALSE): OgRoleInterface {
-    /** @var \Drupal\og\OgRoleInterface $role */
+    /** @var OgRoleInterface $role */
     $role = OgRole::create();
     $role
       ->setName($this->randomMachineName())
@@ @@
   /**
    * Creates a test user and assigns it a membership with the given role.
    *
-   * @param \Drupal\og\OgRoleInterface $role
+   * @param OgRoleInterface $role
    *   The OG role to assign to the newly created user.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The newly created user.
    */
   protected function createUserWithOgRole(OgRoleInterface $role): UserInterface {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


65) modules/contrib/og/tests/src/Kernel/Access/GroupContentOperationAccessAlterTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel\Access;

+use Drupal\og\OgAccessInterface;
+use Drupal\user\UserInterface;
+use Drupal\comment\CommentInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\user\Traits\UserCreationTrait;
 use Drupal\comment\Entity\Comment;
@@ @@
   /**
    * The OG access service. This is the system under test.
    *
-   * @var \Drupal\og\OgAccessInterface
+   * @var OgAccessInterface
    */
   protected $ogAccess;

@@ @@
   /**
    * A test user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * A test group.
    *
-   * @var \Drupal\entity_test\Entity\EntityTest
+   * @var EntityTest
    */
   protected $group;

@@ @@
   /**
    * A test group content entity.
    *
-   * @var \Drupal\comment\CommentInterface
+   * @var CommentInterface
    */
   protected $groupContent;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


66) modules/contrib/og/tests/src/Kernel/Access/AccessByOgMembershipTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Kernel\Access;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityStorageException;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\node\Traits\ContentTypeCreationTrait;
@@ @@
   /**
    * A test group.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $group;

@@ @@
   /**
    * Test group content entities.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]
+   * @var EntityInterface[]
    */
   protected $groupContent;

@@ @@
   /**
    * Test users.
    *
-   * @var \Drupal\Core\Session\AccountInterface[]
+   * @var AccountInterface[]
    */
   protected $users;

@@ @@

     // Grant both members and non-members permission to edit any group content.
     foreach ([OgRoleInterface::AUTHENTICATED, OgRoleInterface::ANONYMOUS] as $role_name) {
-      /** @var \Drupal\og\Entity\OgRole $role */
+      /** @var OgRole $role */
       $role = OgRole::getRole('block_content', 'group', $role_name);

       $role
@@ @@
    */
   public function testEntityOperationAccess($user, array $expected_results) {
     foreach ($expected_results as $group_content => $expected_result) {
-      /** @var \Drupal\Core\Access\AccessResult $result */
+      /** @var AccessResult $result */
       $result = og_entity_access($this->groupContent[$group_content], 'update', $this->users[$user]);
       $this->assertEquals($expected_result, $result->isAllowed());
     }
@@ @@
    * Tests exception is thrown when trying to save non-member role.
    */
   public function testNonMemberRoleMembershipSave() {
-    /** @var \Drupal\og\Entity\OgRole $role */
+    /** @var OgRole $role */
     $role = OgRole::getRole('block_content', 'group', OgRoleInterface::ANONYMOUS);

     $role
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


67) modules/contrib/og/tests/src/Functional/OgComplexWidgetTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Functional;

+use Drupal\node\NodeInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\node\Traits\ContentTypeCreationTrait;
 use Drupal\Tests\node\Traits\NodeCreationTrait;
@@ @@
       ->execute();
     $post_nid = reset($result);

-    /** @var \Drupal\node\NodeInterface $post */
+    /** @var NodeInterface $post */
     $post = Node::load($post_nid);

     // Check that the post references the group correctly.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


68) modules/contrib/og/tests/src/Functional/GroupTabTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Functional;

+use Drupal\node\NodeInterface;
+use Drupal\user\UserInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\og\MembershipManager;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Url;
 use Drupal\entity_test\Entity\EntityTest;
@@ @@
   /**
    * Test entity group.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $groupNode;

@@ @@
   /**
    * Test non-group entity.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $nonGroup;

@@ @@
   /**
    * The group author user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $authorUser;

@@ @@
   /**
    * The group administrator user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $groupAdminUser;

@@ @@
   /**
    * A group user with 'manage members' permission.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $groupManagerUser;

@@ @@
   /**
    * The node group membership for another user.
    *
-   * @var \Drupal\og\OgMembershipInterface
+   * @var OgMembershipInterface
    */
   protected $anotherNodeMembership;

@@ @@
   /**
    * A group that is of type entity_test.
    *
-   * @var \Drupal\entity_test\Entity\EntityTest
+   * @var EntityTest
    */
   protected $groupTestEntity;

@@ @@
   /**
    * The entity_test group membership for another user.
    *
-   * @var \Drupal\og\OgMembershipInterface
+   * @var OgMembershipInterface
    */
   protected $anotherTestEntityMembership;

@@ @@
   /**
    * A administrative user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user1;

@@ @@
   /**
    * A non-author user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user2;

@@ @@
   public function testMembershipAdd() {
     $loop = 0;
     $random_name = $this->randomMachineName();
-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manger */
+    /** @var EntityTypeManagerInterface $entity_type_manger */
     $entity_type_manger = $this->container->get('entity_type.manager');
-    /** @var \Drupal\og\MembershipManager $membership_manager */
+    /** @var MembershipManager $membership_manager */
     $membership_manager = $this->container->get('og.membership_manager');
     foreach ($this->membershipAddScenarios() as $scenario) {
       [$account] = $scenario;
@@ @@

       foreach ($group_data as $data) {
         [$group, $membership] = $data;
-        /** @var \Drupal\og\OgMembershipInterface $membership */
+        /** @var OgMembershipInterface $membership */
         $exiting_member = $membership->getOwner();
         $this->drupalGet($this->groupMemberAddFormUrl($group));
         $value = $exiting_member->getDisplayName() . ' (' . $exiting_member->id() . ')';
@@ @@
   public function testBlockedUserAdd() {
     $this->drupalLogin($this->groupAdminUser);
     $blocked_user = $this->drupalCreateUser([], 'bbblocked', FALSE, ['status' => 0]);
-    /** @var \Drupal\og\MembershipManager $membership_manager */
+    /** @var MembershipManager $membership_manager */
     $membership_manager = $this->container->get('og.membership_manager');
     $group_data = [
       [$this->groupNode, $this->anotherNodeMembership],
@@ @@

     foreach ($group_data as $data) {
       [$group, $membership] = $data;
-      /** @var \Drupal\og\OgMembershipInterface $membership */
+      /** @var OgMembershipInterface $membership */
       $exiting_member = $membership->getOwner();
       $membership->setState(OgMembershipInterface::STATE_BLOCKED);
       $membership->save();
@@ @@
   /**
    * Get the Url for the member add for for a group.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The Url object.
    */
   protected function groupMemberAddFormUrl(EntityInterface $group): Url {
@@ @@
   /**
    * Assert an expected number of matches looking to add a user to a group.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group.
    * @param string $match
    *   The search string.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


69) modules/contrib/og/tests/src/Functional/GroupSubscribeTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Functional;

+use Drupal\user\UserInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\og\MembershipManager;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;
 use Drupal\node\NodeInterface;
@@ @@
   /**
    * Test entity group.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $groupB1No1;

@@ @@
   /**
    * Test entity group.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $groupB2No1;

@@ @@
   /**
    * Test entity group.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $groupB1No2Unpublished;

@@ @@
   /**
    * Test entity group.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $nonGroup;

@@ @@
   /**
    * Test entity group.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $groupB3No1;

@@ @@
   /**
    * Test normal user with no connection to the organic group.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $normalUser;

@@ @@
       $new_user = $this->drupalCreateUser();
       $this->drupalLogin($new_user);
       $entity = NULL;
-      /** @var \Drupal\Core\Entity\EntityInterface $entity */
+      /** @var EntityInterface $entity */
       if (!empty($scenario['entity'])) {
         $entity = $scenario['entity'];
         $entity_type_id = $entity->getEntityTypeId();
@@ @@
       $this->assertSession()->elementNotExists('css', '#edit-state');
       $this->click('#edit-submit');
       $this->assertSession()->statusCodeEquals(200);
-      /** @var \Drupal\og\MembershipManager $membership_manager */
+      /** @var MembershipManager $membership_manager */
       $membership_manager = $this->container->get('og.membership_manager');
       $this->assertTrue($membership_manager->isMember($entity, $new_user->id(), $expected_state));
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


70) modules/contrib/og/tests/src/Functional/GroupSubscribeFormatterTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og\Functional;

+use Drupal\node\NodeInterface;
+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;
@@ @@
   /**
    * Test entity group.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $group;

@@ @@
   /**
    * A non-author user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user1;

@@ @@
   /**
    * A non-author user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user2;

@@ @@
     ]);
     $this->group->save();

-    /** @var \Drupal\og\Entity\OgRole $role */
+    /** @var OgRole $role */
     $role = OgRole::getRole('node', $this->groupBundle, OgRoleInterface::ANONYMOUS);
     $role
       ->grantPermission('subscribe without approval')
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


71) modules/contrib/og/tests/modules/og_test/src/EventSubscriber/OgTestEventSubscriber.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * Constructs an OgTestEventSubscriber.
    *
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
    */
   public function __construct(StateInterface $state) {
@@ @@
   /**
    * Allows moderators to edit and delete comments in all groups.
    *
-   * @param \Drupal\og\Event\GroupContentEntityOperationAccessEventInterface $event
+   * @param GroupContentEntityOperationAccessEventInterface $event
    *   The event that fires when an entity operation is being performed on group
    *   content.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


72) modules/contrib/og/tests/modules/og_test/og_test.module:5

    ---------- begin diff ----------
@@ @@
  */

 declare(strict_types = 1);
+use Drupal\Core\Session\AccountProxyInterface;

 use Drupal\Core\Access\AccessResultAllowed;
 use Drupal\Core\Access\AccessResultInterface;
@@ @@
   if (\Drupal::state()->get('og_test_group_content_entity_operation_access_alter', FALSE)) {
     // Moderators should have access to edit and delete all comments in all
     // groups.
-    /** @var \Drupal\Core\Session\AccountProxyInterface $user */
+    /** @var AccountProxyInterface $user */
     $user = $context['user'];
     $group_content = $context['group_content'];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


73) modules/contrib/og/src/Routing/RouteSubscriber.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og\Routing;

+use Drupal\Core\Routing\RouteProvider;
+use Symfony\Component\EventDispatcher\EventDispatcher;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\RouteProviderInterface;
 use Drupal\Core\Routing\RouteSubscriberBase;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The route provider service.
    *
-   * @var \Drupal\Core\Routing\RouteProvider
+   * @var RouteProvider
    */
   protected $routeProvider;

@@ @@
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcher
+   * @var EventDispatcher
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Constructs a new RouteSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, RouteProviderInterface $route_provider, EventDispatcherInterface $event_dispatcher) {
@@ @@
    *   The OG admin path.
    * @param string $entity_type_id
    *   The entity type ID.
-   * @param \Symfony\Component\Routing\RouteCollection $collection
+   * @param RouteCollection $collection
    *   The route collection object.
    */
   protected function createRoutesFromEventSubscribers($og_admin_path, $entity_type_id, RouteCollection $collection) {
     $event = new OgAdminRoutesEvent();
-    $this->eventDispatcher->dispatch(OgAdminRoutesEventInterface::EVENT_NAME, $event);
+    $this->eventDispatcher->dispatch($event, OgAdminRoutesEventInterface::EVENT_NAME);

     foreach ($event->getRoutes($entity_type_id) as $name => $route_info) {
       // Add the parent route.
@@ @@
   /**
    * Helper method to add route to collection.
    *
-   * @param \Symfony\Component\Routing\RouteCollection $collection
+   * @param RouteCollection $collection
    *   The collection route.
    * @param string $route_name
    *   The route name.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


74) modules/contrib/og/src/Plugin/views/argument_default/Group.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The OG context provider.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextProviderInterface
+   * @var ContextProviderInterface
    */
   protected $ogContext;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Plugin\Context\ContextProviderInterface $og_context
+   * @param ContextProviderInterface $og_context
    *   The OG context provider.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ContextProviderInterface $og_context) {
@@ @@
   /**
    * Returns the group that is relevant in the current context.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    *   The group, or NULL if no group is found.
    */
   protected function getGroup() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


75) modules/contrib/og/src/Plugin/Validation/Constraint/ValidOgRoleConstraintValidator.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og\Plugin\Validation\Constraint;

+use Drupal\Core\Field\FieldItemInterface;
 use Symfony\Component\Validator\Constraint;
 use Symfony\Component\Validator\ConstraintValidator;

@@ @@
    * {@inheritdoc}
    */
   public function validate($value, Constraint $constraint) {
-    /** @var \Drupal\Core\Field\FieldItemInterface $value */
+    /** @var FieldItemInterface $value */
     if (!isset($value)) {
       return;
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


76) modules/contrib/og/src/Plugin/Validation/Constraint/ValidOgMembershipReferenceConstraintValidator.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og\Plugin\Validation\Constraint;

+use Drupal\Core\Field\FieldItemInterface;
 use Drupal\og\Og;
 use Symfony\Component\Validator\Constraint;
 use Symfony\Component\Validator\ConstraintValidator;
@@ @@
    * {@inheritdoc}
    */
   public function validate($value, Constraint $constraint) {
-    /** @var \Drupal\Core\Field\FieldItemInterface $value */
+    /** @var FieldItemInterface $value */
     if (!isset($value)) {
       return;
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


77) modules/contrib/og/src/Plugin/Validation/Constraint/UniqueOgMembershipConstraintValidator.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og\Plugin\Validation\Constraint;

+use Drupal\Core\Field\FieldItemInterface;
+use Drupal\og\Entity\OgMembership;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a UniqueOgMembershipConstraintValidator object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
    * {@inheritdoc}
    */
   public function validate($value, Constraint $constraint) {
-    /** @var \Drupal\Core\Field\FieldItemInterface $value */
+    /** @var FieldItemInterface $value */
     if (!isset($value)) {
       return;
     }

-    /** @var \Drupal\og\Entity\OgMembership $entity */
+    /** @var OgMembership $entity */
     $entity = $value->getEntity();

     // Only applicable to new memberships.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


78) modules/contrib/og/src/Plugin/QueueWorker/DeleteOrphan.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The plugin manager for OgDeleteOrphans plugins.
    *
-   * @var \Drupal\og\OgDeleteOrphansPluginManager
+   * @var OgDeleteOrphansPluginManager
    */
   protected $ogDeleteOrphansPluginManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\og\OgDeleteOrphansPluginManager $og_delete_orphans_plugin_manager
+   * @param OgDeleteOrphansPluginManager $og_delete_orphans_plugin_manager
    *   The plugin manager for OgDeleteOrphans plugins.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, OgDeleteOrphansPluginManager $og_delete_orphans_plugin_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


79) modules/contrib/og/src/Plugin/OgGroupResolver/UserGroupAccessResolver.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og\Plugin\OgGroupResolver;

+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\og\OgGroupResolverBase;
 use Drupal\og\OgResolvedGroupCollectionInterface;

@@ @@
    */
   public function resolve(OgResolvedGroupCollectionInterface $collection) {
     foreach ($collection->getGroupInfo() as $group_info) {
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $group */
+      /** @var ContentEntityInterface $group */
       $group = $group_info['entity'];

       // If the current user has access, cast a vote along with the 'user'
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


80) modules/contrib/og/src/Plugin/OgGroupResolver/RouteGroupContentResolver.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The OG membership manager.
    *
-   * @var \Drupal\og\MembershipManagerInterface
+   * @var MembershipManagerInterface
    */
   protected $membershipManager;

@@ @@
   /**
    * The OG group audience helper.
    *
-   * @var \Drupal\og\OgGroupAudienceHelperInterface
+   * @var OgGroupAudienceHelperInterface
    */
   protected $groupAudienceHelper;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match service.
-   * @param \Drupal\og\GroupTypeManagerInterface $group_type_manager
+   * @param GroupTypeManagerInterface $group_type_manager
    *   The group type manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\og\MembershipManagerInterface $membership_manager
+   * @param MembershipManagerInterface $membership_manager
    *   The OG membership manager.
-   * @param \Drupal\og\OgGroupAudienceHelperInterface $group_audience_helper
+   * @param OgGroupAudienceHelperInterface $group_audience_helper
    *   The OG group audience helper.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, RouteMatchInterface $route_match, GroupTypeManagerInterface $group_type_manager, EntityTypeManagerInterface $entity_type_manager, MembershipManagerInterface $membership_manager, OgGroupAudienceHelperInterface $group_audience_helper) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


81) modules/contrib/og/src/Plugin/OgGroupResolver/RequestQueryArgumentResolver.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og\Plugin\OgGroupResolver;

+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The group type manager.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface
+   * @var GroupTypeManagerInterface
    */
   protected $groupTypeManager;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\og\GroupTypeManagerInterface $group_type_manager
+   * @param GroupTypeManagerInterface $group_type_manager
    *   The group type manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, RequestStack $request_stack, GroupTypeManagerInterface $group_type_manager, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
       }

       // Load the entity and check if it is a group.
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       if ($entity = $storage->load($query->get(self::GROUP_ID_ARGUMENT))) {
         if ($this->groupTypeManager->isGroup($entity->getEntityTypeId(), $entity->bundle())) {
           // Only add a vote for the group if it already has been discovered by
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


82) modules/contrib/og/src/Plugin/Field/FieldWidget/OgComplex.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og\Plugin\Field\FieldWidget;

+use Drupal\og\MembershipManagerInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Field\FieldFilteredMarkup;
@@ @@

     $target_type = $this->fieldDefinition->getFieldStorageDefinition()->getSetting('target_type');

-    /** @var \Drupal\og\MembershipManagerInterface $membership_manager */
+    /** @var MembershipManagerInterface $membership_manager */
     $membership_manager = \Drupal::service('og.membership_manager');
     $user_groups = $membership_manager->getUserGroups(\Drupal::currentUser()->id());
     $user_groups_target_type = isset($user_groups[$target_type]) ? $user_groups[$target_type] : [];
@@ @@
   /**
    * Adding the other groups widget to the form.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   The existing items to add to the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@

     $target_type = $this->fieldDefinition->getFieldStorageDefinition()->getSetting('target_type');

-    /** @var \Drupal\og\MembershipManagerInterface $membership_manager */
+    /** @var MembershipManagerInterface $membership_manager */
     $membership_manager = \Drupal::service('og.membership_manager');
     $user_groups = $membership_manager->getUserGroups(\Drupal::currentUser()->id());
     $user_groups_target_type = isset($user_groups[$target_type]) ? $user_groups[$target_type] : [];
@@ @@
    * @param int $delta
    *   The delta of the new element. Need to be the last delta in order to be
    *   added in the end of the list.
-   * @param \Drupal\Core\Entity\EntityInterface|null $entity
+   * @param EntityInterface|null $entity
    *   The entity object.
    * @param int $weight_delta
    *   The delta of the item.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


83) modules/contrib/og/src/Plugin/Field/FieldFormatter/GroupSubscribeFormatter.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og\Plugin\Field\FieldFormatter;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The OG access service.
    *
-   * @var \Drupal\og\OgAccessInterface
+   * @var OgAccessInterface
    */
   protected $ogAccess;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\og\OgAccessInterface $og_access
+   * @param OgAccessInterface $og_access
    *   The OG access service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, AccountInterface $current_user, OgAccessInterface $og_access, EntityTypeManagerInterface $entity_type_manager) {
     parent::__construct($plugin_id, $plugin_definition, $field_definition, $settings, $label, $view_mode, $third_party_settings);
@@ @@
       'entity_id' => $group->id(),
     ];
     $memberships = $storage->loadByProperties($props);
-    /** @var \Drupal\og\OgMembershipInterface $membership */
+    /** @var OgMembershipInterface $membership */
     $membership = reset($memberships);

     if ($membership) {
@@ @@
       }
       $cache_meta->applyTo($elements);

-      /** @var \Drupal\Core\Access\AccessResult $access */
+      /** @var AccessResult $access */
       if (($access = $this->ogAccess->userAccess($group, 'subscribe without approval', $user)) && $access->isAllowed()) {
         $link['title'] = $this->t('Subscribe to group');
         $link['class'] = ['subscribe'];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


84) modules/contrib/og/src/Plugin/EntityReferenceSelection/OgUserSelection.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og\Plugin\EntityReferenceSelection;

+use Drupal\user\UserStorageInterface;
+use Drupal\user\UserInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Database\Query\SelectInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The user storage.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userStorage;

@@ @@
   /**
    * The OG membership manager.
    *
-   * @var \Drupal\og\MembershipManagerInterface
+   * @var MembershipManagerInterface
    */
   protected $membershipManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\og\MembershipManagerInterface $membership_manager
+   * @param MembershipManagerInterface $membership_manager
    *   The OG membership manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler, AccountInterface $current_user, EntityFieldManagerInterface $entity_field_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, EntityRepositoryInterface $entity_repository, Connection $connection, MembershipManagerInterface $membership_manager) {
@@ @@
   /**
    * Get the selection handler of the field.
    *
-   * @return \Drupal\Core\Entity\Plugin\EntityReferenceSelection\DefaultSelection
+   * @return DefaultSelection
    *   Returns the selection handler.
    */
   public function getSelectionHandler() {
@@ @@

     // In order to create a referenceable user, it needs to be active.
     if (!$this->currentUser->hasPermission('administer users')) {
-      /** @var \Drupal\user\UserInterface $user */
+      /** @var UserInterface $user */
       $user->activate();
     }

@@ @@
     // Mirror the conditions checked in buildEntityQuery().
     if (!$this->currentUser->hasPermission('administer users')) {
       $entities = array_filter($entities, function ($user) {
-        /** @var \Drupal\user\UserInterface $user */
+        /** @var UserInterface $user */
         return $user->isActive();
       });
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


85) modules/contrib/og/src/Plugin/EntityReferenceSelection/OgSelection.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og\Plugin\EntityReferenceSelection;

+use Drupal\Core\Entity\Query\QueryInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\og\MembershipManagerInterface;
 use Drupal\Core\Entity\Plugin\EntityReferenceSelection\DefaultSelection;
 use Drupal\og\Og;

@@ @@
   /**
    * Get the selection handler of the field.
    *
-   * @return \Drupal\Core\Entity\Plugin\EntityReferenceSelection\DefaultSelection
+   * @return DefaultSelection
    *   Returns the selection handler.
    */
   public function getSelectionHandler() {
@@ @@
    *   (Optional) The operation the matching should be done with. Defaults
    *   to "CONTAINS".
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface
+   * @return QueryInterface
    *   The EntityQuery object with the basic conditions and sorting applied to
    *   it.
    */
@@ @@
   /**
    * Return all the user's groups.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface[]
+   * @return ContentEntityInterface[]
    *   Array with the user's group, or an empty array if none found.
    */
   protected function getUserGroups() {
-    /** @var \Drupal\og\MembershipManagerInterface $membership_manager */
+    /** @var MembershipManagerInterface $membership_manager */
     $membership_manager = \Drupal::service('og.membership_manager');
     $other_groups = $membership_manager->getUserGroups($this->currentUser->id());
     return isset($other_groups[$this->configuration['target_type']]) ? $other_groups[$this->configuration['target_type']] : [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


86) modules/contrib/og/src/Plugin/EntityReferenceSelection/OgRoleSelection.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Get the selection handler of the field.
    *
-   * @return Drupal\Core\Entity\Plugin\EntityReferenceSelection\DefaultSelection
+   * @return DefaultSelection
    *   Returns the selection handler.
    */
   public function getSelectionHandler() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


87) modules/contrib/og/src/Plugin/Derivative/OgLocalTask.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The group type manager.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface
+   * @var GroupTypeManagerInterface
    */
   protected $groupTypeManager;

@@ @@
   /**
    * Route provider object.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routProvider;

@@ @@
   /**
    * Creates an OgLocalTask object.
    *
-   * @param \Drupal\og\GroupTypeManagerInterface $group_type_manager
+   * @param GroupTypeManagerInterface $group_type_manager
    *   The group type manager.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider services.
    */
   public function __construct(GroupTypeManagerInterface $group_type_manager, RouteProviderInterface $route_provider) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


88) modules/contrib/og/src/Plugin/Derivative/OgActionLink.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The group type manager.
    *
-   * @var \Drupal\og\GroupTypeManager
+   * @var GroupTypeManager
    */
   protected $groupTypeManager;

@@ @@
   /**
    * Route provider object.
    *
-   * @var \Drupal\Core\Routing\RouteProvider
+   * @var RouteProvider
    */
   protected $routeProvider;

@@ @@
   /**
    * Creates an OgLocalTask object.
    *
-   * @param \Drupal\og\GroupTypeManager $group_type_manager
+   * @param GroupTypeManager $group_type_manager
    *   The group type manager.
-   * @param \Drupal\Core\Routing\RouteProvider $route_provider
+   * @param RouteProvider $route_provider
    *   The route provider services.
    */
   public function __construct(GroupTypeManager $group_type_manager, RouteProvider $route_provider) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


89) modules/contrib/og/src/Plugin/Condition/GroupType.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * The group type manager.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface
+   * @var GroupTypeManagerInterface
    */
   protected $groupTypeManager;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\og\GroupTypeManagerInterface $group_type_manager
+   * @param GroupTypeManagerInterface $group_type_manager
    *   The group type manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, GroupTypeManagerInterface $group_type_manager, EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


90) modules/contrib/og/src/Plugin/Block/RecentGroupContentBlock.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og\Plugin\Block;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ @@
   /**
    * The OG context provider.
    *
-   * @var \Drupal\og\OgContextInterface
+   * @var OgContextInterface
    */
   protected $ogContext;

@@ @@
   /**
    * The entity type manager, needed to load entities.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The OG group type manager.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface
+   * @var GroupTypeManagerInterface
    */
   protected $groupTypeManager;

@@ @@
   /**
    * The bundle information service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\og\OgContextInterface $og_context
+   * @param OgContextInterface $og_context
    *   The OG context provider.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\og\GroupTypeManagerInterface $group_type_manager
+   * @param GroupTypeManagerInterface $group_type_manager
    *   The OG group type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The bundle info service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, OgContextInterface $og_context, EntityTypeManagerInterface $entity_type_manager, GroupTypeManagerInterface $group_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info) {
@@ @@
   /**
    * Returns the most recent group content for the active group.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The most recent group content for the group which is currently active
    *   according to OgContext.
    */
@@ @@
       ->condition('type', OgGroupAudienceHelperInterface::GROUP_REFERENCE)
       ->condition('entity_type', $entity_type);

-    /** @var \Drupal\field\FieldStorageConfigInterface[] $fields */
+    /** @var FieldStorageConfigInterface[] $fields */
     $fields = array_filter($field_storage_config_storage->loadMultiple($query->execute()), function (FieldStorageConfigInterface $field) use ($group) {
       $type_matches = $field->getSetting('target_type') === $group->getEntityTypeId();
       // If the list of target bundles is empty, it targets all bundles.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


91) modules/contrib/og/src/Plugin/Block/MemberCountBlock.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * The OG context provider.
    *
-   * @var \Drupal\og\OgContextInterface
+   * @var OgContextInterface
    */
   protected $ogContext;

@@ @@
   /**
    * The membership manager.
    *
-   * @var \Drupal\og\MembershipManagerInterface
+   * @var MembershipManagerInterface
    */
   protected $membershipManager;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\og\OgContextInterface $og_context
+   * @param OgContextInterface $og_context
    *   The OG context provider.
-   * @param \Drupal\og\MembershipManagerInterface $membership_manager
+   * @param MembershipManagerInterface $membership_manager
    *   The membership manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, OgContextInterface $og_context, MembershipManagerInterface $membership_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


92) modules/contrib/og/src/Plugin/Action/UnblockOgMembership.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The OG access service.
    *
-   * @var \Drupal\og\OgAccessInterface
+   * @var OgAccessInterface
    */
   protected $ogAccess;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\og\OgAccessInterface $og_access
+   * @param OgAccessInterface $og_access
    *   The OG access service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, OgAccessInterface $og_access) {
@@ @@
    * {@inheritdoc}
    */
   public function access($object, ?AccountInterface $account = NULL, $return_as_object = FALSE) {
-    /** @var \Drupal\og\Entity\OgMembership $object */
+    /** @var OgMembership $object */
     // Deny access if the membership is not blocked.
     if ($object->getState() !== OgMembershipInterface::STATE_BLOCKED) {
       $access = AccessResult::forbidden();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


93) modules/contrib/og/src/Plugin/Action/DeleteOgMembership.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The OG access service.
    *
-   * @var \Drupal\og\OgAccessInterface
+   * @var OgAccessInterface
    */
   protected $ogAccess;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\og\OgAccessInterface $og_access
+   * @param OgAccessInterface $og_access
    *   The OG access service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, OgAccessInterface $og_access) {
@@ @@
    * {@inheritdoc}
    */
   public function access($object, ?AccountInterface $account = NULL, $return_as_object = FALSE) {
-    /** @var \Drupal\og\Entity\OgMembership $object */
+    /** @var OgMembership $object */
     // Grant access if the user can manage members in this group.
     $access = $this->ogAccess->userAccess($object->getGroup(), 'manage members', $account);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


94) modules/contrib/og/src/Plugin/Action/ChangeSingleOgMembershipRoleBase.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og\Plugin\Action;

+use Drupal\Core\Config\Entity\ConfigEntityTypeInterface;
+use Drupal\og\Entity\OgMembership;
+use Drupal\og\OgRoleInterface;
 use Drupal\Core\Action\ConfigurableActionBase;
 use Drupal\Core\Entity\DependencyTrait;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
   /**
    * The OG role entity type.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityTypeInterface
+   * @var ConfigEntityTypeInterface
    */
   protected $entityType;

@@ @@
   /**
    * The OG access service.
    *
-   * @var \Drupal\og\OgAccessInterface
+   * @var OgAccessInterface
    */
   protected $ogAccess;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The user role entity type.
-   * @param \Drupal\og\OgAccessInterface $og_access
+   * @param OgAccessInterface $og_access
    *   The OG access service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeInterface $entity_type, OgAccessInterface $og_access) {
@@ @@
    * {@inheritdoc}
    */
   public function access($object, ?AccountInterface $account = NULL, $return_as_object = FALSE) {
-    /** @var \Drupal\og\Entity\OgMembership $object */
+    /** @var OgMembership $object */
     // Grant access if the user can manage members in this group.
     $access = $this->ogAccess->userAccess($object->getGroup(), 'manage members', $account);

@@ @@
    *   An associative array of labels, keyed by OgRole ID.
    */
   protected function getOgRoleLabels() {
-    /** @var \Drupal\og\OgRoleInterface[] $roles */
+    /** @var OgRoleInterface[] $roles */
     $roles = OgRole::loadMultiple();
     // Do not return the default roles 'member' and 'non-member'. These are
     // required and cannot be added to or removed from a membership.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


95) modules/contrib/og/src/Plugin/Action/ChangeOgMembershipStateBase.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The OG access service.
    *
-   * @var \Drupal\og\OgAccessInterface
+   * @var OgAccessInterface
    */
   protected $ogAccess;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\og\OgAccessInterface $og_access
+   * @param OgAccessInterface $og_access
    *   The OG access service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, OgAccessInterface $og_access) {
@@ @@
    * {@inheritdoc}
    */
   public function access($object, ?AccountInterface $account = NULL, $return_as_object = FALSE) {
-    /** @var \Drupal\og\Entity\OgMembership $object */
+    /** @var OgMembership $object */
     // Deny access if the membership is not in the required state.
     $original_state = $this->getOriginalState();
     if ($original_state && $object->getState() !== $original_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


96) modules/contrib/og/src/Plugin/Action/ChangeMultipleOgMembershipRolesBase.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og\Plugin\Action;

+use Drupal\Core\TempStore\PrivateTempStore;
+use Drupal\og\Entity\OgMembership;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * The OG access service.
    *
-   * @var \Drupal\og\OgAccessInterface
+   * @var OgAccessInterface
    */
   protected $ogAccess;

@@ @@
   /**
    * The private temporary storage.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $tempStore;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\og\OgAccessInterface $og_access
+   * @param OgAccessInterface $og_access
    *   The OG access service.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The private temporary storage factory.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, OgAccessInterface $og_access, PrivateTempStoreFactory $temp_store_factory) {
@@ @@
    * {@inheritdoc}
    */
   public function access($object, ?AccountInterface $account = NULL, $return_as_object = FALSE) {
-    /** @var \Drupal\og\Entity\OgMembership $object */
+    /** @var OgMembership $object */
     // Only grant access if the user has permission to manage members in this
     // group.
     $access = $this->ogAccess->userAccess($object->getGroup(), 'manage members', $account);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


97) modules/contrib/og/src/PermissionManagerInterface.php:26

    ---------- begin diff ----------
@@ @@
    *   Optional default role name to filter the permissions on. If omitted, all
    *   permissions will be returned.
    *
-   * @return \Drupal\og\PermissionInterface[]
+   * @return PermissionInterface[]
    *   The array of permissions.
    */
   public function getDefaultPermissions($group_entity_type_id, $group_bundle_id, array $group_content_bundle_ids, $role_name = NULL);
@@ @@
    *   Optional default role name to filter the permissions on. If omitted, all
    *   permissions will be returned.
    *
-   * @return \Drupal\og\GroupPermission[]
+   * @return GroupPermission[]
    *   An array of permissions that are enabled by default for the given role.
    *
    * @see \Drupal\og\Event\PermissionEventInterface
@@ @@
    *   Optional default role name to filter the permissions on. If omitted, all
    *   permissions will be returned.
    *
-   * @return \Drupal\og\GroupContentOperationPermission[]
+   * @return GroupContentOperationPermission[]
    *   The array of permissions.
    *
    * @see \Drupal\og\Event\PermissionEventInterface
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


98) modules/contrib/og/src/PermissionManager.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Constructs a PermissionManager object.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(EventDispatcherInterface $event_dispatcher) {
@@ @@
    */
   public function getDefaultPermissions($group_entity_type_id, $group_bundle_id, array $group_content_bundle_ids, $role_name = NULL) {
     $event = new PermissionEvent($group_entity_type_id, $group_bundle_id, $group_content_bundle_ids);
-    $this->eventDispatcher->dispatch(PermissionEventInterface::EVENT_NAME, $event);
+    $this->eventDispatcher->dispatch($event, PermissionEventInterface::EVENT_NAME);
     return $event->getPermissions();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


99) modules/contrib/og/src/OgRouteGroupResolverBase.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og;

+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * The route matching service.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The group type manager.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface
+   * @var GroupTypeManagerInterface
    */
   protected $groupTypeManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match service.
-   * @param \Drupal\og\GroupTypeManagerInterface $group_type_manager
+   * @param GroupTypeManagerInterface $group_type_manager
    *   The group type manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, RouteMatchInterface $route_match, GroupTypeManagerInterface $group_type_manager, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
    * This will return the entity if the current route matches the entity paths
    * ('link templates') that are defined in the entity definition.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    *   The entity, or NULL if we are not on a content entity path.
    */
   protected function getContentEntity() {
@@ @@
   protected function getContentEntityPaths() {
     if (!isset($this->contentEntityPaths)) {
       $this->contentEntityPaths = [];
-      /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
+      /** @var EntityTypeInterface[] $entity_types */
       $entity_types = $this->entityTypeManager->getDefinitions();
       foreach ($entity_types as $entity_type_id => $entity_type) {
         if ($entity_type->entityClassImplements(ContentEntityInterface::class)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


100) modules/contrib/og/src/OgRoleManagerInterface.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og;

+use Drupal\og\Entity\OgRole;
 /**
  * Defines an interface for OG role manager.
  */
@@ @@
    * @param string $bundle_id
    *   The bundle ID of the group for which to create default roles.
    *
-   * @return \Drupal\og\Entity\OgRole[]
+   * @return OgRole[]
    *   Array with the saved OG roles that were created
    */
   public function createPerBundleRoles($entity_type_id, $bundle_id);
@@ @@
   /**
    * Returns the default roles.
    *
-   * @return \Drupal\og\Entity\OgRole[]
+   * @return OgRole[]
    *   An associative array of (unsaved) OgRole entities, keyed by role name.
    *   These are populated with the basic properties: name, label, role_type and
    *   is_admin.
@@ @@
    * This provides the 'member' and 'non-member' roles. These are hard coded
    * because they are strictly required and should not be altered.
    *
-   * @return \Drupal\og\Entity\OgRole[]
+   * @return OgRole[]
    *   An associative array of (unsaved) required OgRole entities, keyed by role
    *   name. These are populated with the basic properties: name, label and
    *   role_type.
@@ @@
    * @param string $bundle
    *   The bundle of the group.
    *
-   * @return \Drupal\og\OgRoleInterface[]
+   * @return OgRoleInterface[]
    *   An array of roles indexed by their IDs.
    */
   public function getRolesByBundle($entity_type_id, $bundle);
@@ @@
    *   all roles that include one or more of the given permissions will be
    *   returned. Defaults to TRUE.
    *
-   * @return \Drupal\og\OgRoleInterface[]
+   * @return OgRoleInterface[]
    *   An array of roles indexed by their IDs.
    */
   public function getRolesByPermissions(array $permissions, $entity_type_id = NULL, $bundle = NULL, $require_all = TRUE): array;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


101) modules/contrib/og/src/OgRoleManager.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\og\Event\DefaultRoleEvent;
 use Drupal\og\Event\DefaultRoleEventInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity storage for OgRole entities.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $ogRoleStorage;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The OG permission manager.
    *
-   * @var \Drupal\og\PermissionManagerInterface
+   * @var PermissionManagerInterface
    */
   protected $permissionManager;

@@ @@
   /**
    * Constructs an OgRoleManager object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\og\PermissionManagerInterface $permission_manager
+   * @param PermissionManagerInterface $permission_manager
    *   The OG permission manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EventDispatcherInterface $event_dispatcher, PermissionManagerInterface $permission_manager) {
@@ @@
     $roles = $this->getRequiredDefaultRoles();

     $event = new DefaultRoleEvent();
-    $this->eventDispatcher->dispatch(DefaultRoleEventInterface::EVENT_NAME, $event);
+    $this->eventDispatcher->dispatch($event, DefaultRoleEventInterface::EVENT_NAME);

     // Use the array union operator '+=' to ensure the default roles cannot be
     // altered by event subscribers.
@@ @@
   /**
    * Retrieves the OG Role storage.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   The OG Role storage
    */
   protected function ogRoleStorage() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


102) modules/contrib/og/src/OgRoleInterface.php:150

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the role represented by the given group and role name.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group for which to return the role.
    * @param string $name
    *   The role name for which to return the role.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


103) modules/contrib/og/src/OgResolvedGroupCollectionInterface.php:50

    ---------- begin diff ----------
@@ @@
    * Each time it is added a 'vote' will be cast in its favor, increasing the
    * chance this group will be chosen as the group context.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $group
+   * @param ContentEntityInterface $group
    *   The group to add.
    * @param string[] $cache_contexts
    *   An optional array of cache contexts to assign to the group.
@@ @@
   /**
    * Removes the given group from the collection.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $group
+   * @param ContentEntityInterface $group
    *   The group to remove.
    */
   public function removeGroup(ContentEntityInterface $group);
@@ @@
   /**
    * Returns whether the given group has already been added.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $group
+   * @param ContentEntityInterface $group
    *   The group for which to check the existence.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


104) modules/contrib/og/src/OgResolvedGroupCollection.php:104

    ---------- begin diff ----------
@@ @@
   /**
    * Generates a key that can be used to identify the given group.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $group
+   * @param ContentEntityInterface $group
    *   The group for which to generate the key.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


105) modules/contrib/og/src/OgMembershipInterface.php:84

    ---------- begin diff ----------
@@ @@
   /**
    * Sets the group associated with the membership.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $group
+   * @param ContentEntityInterface $group
    *   The entity object.
    *
    * @return \Drupal\og\OgMembershipInterface
@@ @@
   /**
    * Gets the group associated with the membership.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    *   The group object which is referenced by the membership, or NULL if the
    *   group no longer exists in the entity storage. This can happen when the
    *   cleanup of orphaned memberships is configured to be handled in a cron job
@@ @@
   /**
    * Sets the group's roles for the current user group membership.
    *
-   * @param \Drupal\og\OgRoleInterface[] $roles
+   * @param OgRoleInterface[] $roles
    *   The array of OG roles to set.
    *
    * @return \Drupal\og\OgMembershipInterface
@@ @@
   /**
    * Adds a role to the user membership.
    *
-   * @param \Drupal\og\OgRoleInterface $role
+   * @param OgRoleInterface $role
    *   The OG role.
    *
    * @return \Drupal\og\OgMembershipInterface
@@ @@
   /**
    * Revokes a role from the OG membership.
    *
-   * @param \Drupal\og\OgRoleInterface $role
+   * @param OgRoleInterface $role
    *   The OG role.
    *
    * @return \Drupal\og\OgMembershipInterface
@@ @@
   /**
    * Gets all the referenced OG roles.
    *
-   * @return \Drupal\og\OgRoleInterface[]
+   * @return OgRoleInterface[]
    *   List of OG roles the user own for the current membership instance.
    */
   public function getRoles(): array;
@@ @@
   /**
    * Returns whether the given role is valid for this membership.
    *
-   * @param \Drupal\og\OgRoleInterface $role
+   * @param OgRoleInterface $role
    *   The role to check.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


106) modules/contrib/og/src/OgMembershipAccessControlHandler.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The OG access service.
    *
-   * @var \Drupal\og\OgAccess
+   * @var OgAccess
    */
   protected $ogAccess;

@@ @@
   /**
    * The OG Membership Manager service.
    *
-   * @var \Drupal\og\MembershipManagerInterface
+   * @var MembershipManagerInterface
    */
   protected $membershipManager;

@@ @@
   /**
    * Constructs a OgMembershipAccessControllHandler object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\og\OgAccessInterface $og_access
+   * @param OgAccessInterface $og_access
    *   The OG access service.
-   * @param \Drupal\og\MembershipManagerInterface $membership_manager
+   * @param MembershipManagerInterface $membership_manager
    *   The OG Membership Manager service.
    */
   public function __construct(EntityTypeInterface $entity_type, OgAccessInterface $og_access, MembershipManagerInterface $membership_manager) {
@@ @@
    * {@inheritdoc}
    */
   protected function checkFieldAccess($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL) {
-    /** @var \Drupal\og\OgMembershipInterface $membership */
+    /** @var OgMembershipInterface $membership */
     $membership = $items ? $items->getEntity() : NULL;

     $administrative_fields = ['uid', 'state', 'roles'];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


107) modules/contrib/og/src/OgGroupResolverPluginManager.php:18

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


108) modules/contrib/og/src/OgGroupResolverInterface.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * Resolves groups within the plugin's domain.
    *
-   * @param \Drupal\og\OgResolvedGroupCollectionInterface $collection
+   * @param OgResolvedGroupCollectionInterface $collection
    *   A collection of groups that were resolved by previous plugins. If the
    *   plugin discovers new groups, it may add these to this collection.
    *   A plugin may also remove groups from the collection that were previously
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


109) modules/contrib/og/src/OgGroupAudienceHelperInterface.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * Returns TRUE if field is a group audience type.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition object.
    *
    * @return bool
@@ @@
    *   Fields that do not specify any bundle restrictions at all are also
    *   included. If omitted, the results will not be filtered by group bundle.
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface[]
+   * @return FieldDefinitionInterface[]
    *   An array of field definitions, keyed by field name; Or an empty array if
    *   none found.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


110) modules/contrib/og/src/OgGroupAudienceHelper.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * Constructs an OgGroupAudienceHelper object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


111) modules/contrib/og/src/OgFieldsPluginManager.php:18

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


112) modules/contrib/og/src/OgDeleteOrphansPluginManager.php:18

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


113) modules/contrib/og/src/OgDeleteOrphansInterface.php:26

    ---------- begin diff ----------
@@ @@
    *
    * During processing its orphaned members or content will be deleted.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The group entity to register.
    */
   public function register(EntityInterface $entity);
@@ @@
    *
    * @param array $form
    *   The form definition array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


114) modules/contrib/og/src/OgDeleteOrphansBase.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og;

+use Drupal\Core\Queue\QueueInterface;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;

@@ @@
   /**
    * The OG membership manager.
    *
-   * @var \Drupal\og\MembershipManagerInterface
+   * @var MembershipManagerInterface
    */
   protected $membershipManager;

@@ @@
   /**
    * The OG group audience helper.
    *
-   * @var \Drupal\og\OgGroupAudienceHelperInterface
+   * @var OgGroupAudienceHelperInterface
    */
   protected $groupAudienceHelper;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   The queue factory.
-   * @param \Drupal\og\MembershipManagerInterface $membership_manager
+   * @param MembershipManagerInterface $membership_manager
    *   The OG membership manager service.
-   * @param \Drupal\og\OgGroupAudienceHelperInterface $group_audience_helper
+   * @param OgGroupAudienceHelperInterface $group_audience_helper
    *   The OG group audience helper.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, QueueFactory $queue_factory, MembershipManagerInterface $membership_manager, OgGroupAudienceHelperInterface $group_audience_helper) {
@@ @@
   /**
    * Queries the registered group entity for orphaned members to delete.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The group entity that is the basis for the query.
    *
    * @return array
@@ @@
   /**
    * Returns the queue of orphans to delete.
    *
-   * @return \Drupal\Core\Queue\QueueInterface
+   * @return QueueInterface
    *   The queue.
    */
   protected function getQueue() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


115) modules/contrib/og/src/OgContextInterface.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og;

+use Drupal\Core\Entity\ContentEntityInterface;
 /**
  * Declares an interface for OG context providers.
  */
@@ @@
   /**
    * Returns the group which is relevant in the current context, if any.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    *   The group which is relevant in the current context, or NULL if no group
    *   was found.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


116) modules/contrib/og/src/OgAccessInterface.php:35

    ---------- begin diff ----------
@@ @@
    * guarantee consistent behavior, and ensure that the superuser and group
    * administrators can perform all actions.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group entity.
    * @param string $permission
    *   The name of the OG permission being checked. This includes both group
    *   level permissions such as 'subscribe without approval' and group content
    *   entity operation permissions such as 'edit own article content'.
-   * @param \Drupal\Core\Session\AccountInterface|null $user
+   * @param AccountInterface|null $user
    *   (optional) The user to check. Defaults to the current user.
    * @param bool $skip_alter
    *   (optional) If TRUE then user access will not be sent to other modules
@@ @@
    *   hook_og_user_access_alter() that still want to use og_user_access(), but
    *   without causing a recursion. Defaults to FALSE.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   An access result object.
    */
   public function userAccess(EntityInterface $group, string $permission, ?AccountInterface $user = NULL, bool $skip_alter = FALSE): AccessResultInterface;
@@ @@
    *   The name of the OG permission being checked. This includes both group
    *   level permissions such as 'subscribe without approval' and group content
    *   entity operation permissions such as 'edit own article content'.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object. This can be either a group or group content entity.
-   * @param \Drupal\Core\Session\AccountInterface|null $user
+   * @param AccountInterface|null $user
    *   (optional) The user object. If empty the current user will be used.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   An access result object.
    *
    * @see \Drupal\og\userAccess();
@@ @@
    *
    * @param string $operation
    *   The entity operation, such as "create", "update" or "delete".
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object. This can be either a group or group content entity.
-   * @param \Drupal\Core\Session\AccountInterface|null $user
+   * @param AccountInterface|null $user
    *   (optional) The user object. If empty the current user will be used.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   An access result object.
    *
    * @see \Drupal\og\userAccessGroupContentEntityOperation();
@@ @@
    *
    * @param string $operation
    *   The entity operation, such as "create", "update" or "delete".
-   * @param \Drupal\Core\Entity\EntityInterface $group_entity
+   * @param EntityInterface $group_entity
    *   The group entity, to retrieve the permissions from.
-   * @param \Drupal\Core\Entity\EntityInterface $group_content_entity
+   * @param EntityInterface $group_content_entity
    *   The group content entity for which access to the entity operation is
    *   requested.
-   * @param \Drupal\Core\Session\AccountInterface|null $user
+   * @param AccountInterface|null $user
    *   Optional user for which to check access. If omitted, the currently logged
    *   in user will be used.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result object.
    */
   public function userAccessGroupContentEntityOperation(string $operation, EntityInterface $group_entity, EntityInterface $group_content_entity, ?AccountInterface $user = NULL): AccessResultInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


117) modules/contrib/og/src/OgAccess.php:51

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The service that contains the current active user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $accountProxy;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The group manager.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface
+   * @var GroupTypeManagerInterface
    */
   protected $groupTypeManager;

@@ @@
   /**
    * The OG permission manager.
    *
-   * @var \Drupal\og\PermissionManagerInterface
+   * @var PermissionManagerInterface
    */
   protected $permissionManager;

@@ @@
   /**
    * The group membership manager.
    *
-   * @var \Drupal\og\MembershipManagerInterface
+   * @var MembershipManagerInterface
    */
   protected $membershipManager;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $dispatcher;

@@ @@
   /**
    * Constructs the OgAccess service.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Session\AccountProxyInterface $account_proxy
+   * @param AccountProxyInterface $account_proxy
    *   The service that contains the current active user.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\og\GroupTypeManagerInterface $group_manager
+   * @param GroupTypeManagerInterface $group_manager
    *   The group manager.
-   * @param \Drupal\og\PermissionManagerInterface $permission_manager
+   * @param PermissionManagerInterface $permission_manager
    *   The permission manager.
-   * @param \Drupal\og\MembershipManagerInterface $membership_manager
+   * @param MembershipManagerInterface $membership_manager
    *   The group membership manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher
+   * @param EventDispatcherInterface $dispatcher
    *   The event dispatcher.
    */
   public function __construct(ConfigFactoryInterface $config_factory, AccountProxyInterface $account_proxy, ModuleHandlerInterface $module_handler, GroupTypeManagerInterface $group_manager, PermissionManagerInterface $permission_manager, MembershipManagerInterface $membership_manager, EventDispatcherInterface $dispatcher) {
@@ @@
     }
     elseif (!$this->membershipManager->isMember($group, $user->id(), [OgMembershipInterface::STATE_BLOCKED])) {
       // User is a non-member or has a pending membership.
-      /** @var \Drupal\og\Entity\OgRole $role */
+      /** @var OgRole $role */
       $role = OgRole::loadByGroupAndName($group, OgRoleInterface::ANONYMOUS);
       if ($role) {
         $permissions = $role->getPermissions();
@@ @@
       $event->addCacheContexts(['user']);
     }

-    $this->dispatcher->dispatch(GroupContentEntityOperationAccessEvent::EVENT_NAME, $event);
+    $this->dispatcher->dispatch($event, GroupContentEntityOperationAccessEvent::EVENT_NAME);

     return $event->getAccessResult();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


118) modules/contrib/og/src/Og.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og;

+use Drupal\Core\Field\FieldConfigInterface;
+use Drupal\og\Entity\OgMembership;
+use Drupal\og\Plugin\EntityReferenceSelection\OgSelection;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ @@
    *   - view_display: Array with values to override the view display
    *     definitions.
    *
-   * @return \Drupal\Core\Field\FieldConfigInterface
+   * @return FieldConfigInterface
    *   The created or existing field config.
    */
   public static function createField($plugin_id, $entity_type, $bundle, array $settings = []) {
@@ @@
     // we validate the the field can be attached to the entity. For example,
     // the OG access module's field can be attached only to node entities, so
     // any other entity will throw an exception.
-    /** @var \Drupal\og\OgFieldBase $og_field */
+    /** @var OgFieldBase $og_field */
     $og_field = static::getFieldBaseDefinition($plugin_id)
       ->setFieldName($field_name)
       ->setBundle($bundle)
@@ @@
   /**
    * Returns the group memberships a user is associated with.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The user to get groups for.
    * @param array $states
    *   (optional) Array with the states to return. Defaults to only returning
@@ @@
    *   active memberships. In order to retrieve all memberships regardless of
    *   state, pass `OgMembershipInterface::ALL_STATES`.
    *
-   * @return \Drupal\og\OgMembershipInterface[]
+   * @return OgMembershipInterface[]
    *   An array of OgMembership entities, keyed by ID.
    */
   public static function getMemberships(AccountInterface $user, array $states = [OgMembershipInterface::STATE_ACTIVE]) {
-    /** @var \Drupal\og\MembershipManagerInterface $membership_manager */
+    /** @var MembershipManagerInterface $membership_manager */
     $membership_manager = \Drupal::service('og.membership_manager');
     return $membership_manager->getMemberships($user->id(), $states);
   }
@@ @@
   /**
    * Returns the group membership for a given user and group.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group to get the membership for.
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The user to get the membership for.
    * @param array $states
    *   (optional) Array with the states to return. Defaults to only returning
@@ @@
    *   active memberships. In order to retrieve all memberships regardless of
    *   state, pass `OgMembershipInterface::ALL_STATES`.
    *
-   * @return \Drupal\og\OgMembershipInterface|null
+   * @return OgMembershipInterface|null
    *   The OgMembership entity. NULL will be returned if no membership is
    *   available that matches the passed in $states.
    */
   public static function getMembership(EntityInterface $group, AccountInterface $user, array $states = [OgMembershipInterface::STATE_ACTIVE]) {
-    /** @var \Drupal\og\MembershipManagerInterface $membership_manager */
+    /** @var MembershipManagerInterface $membership_manager */
     $membership_manager = \Drupal::service('og.membership_manager');
     return $membership_manager->getMembership($group, $user->id(), $states);
   }
@@ @@
   /**
    * Returns the group memberships for a given group.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group to get the membership for.
    * @param array $states
    *   (optional) Array with the state to return. Defaults to active.
    *
-   * @return \Drupal\og\OgMembershipInterface[]
+   * @return OgMembershipInterface[]
    *   An array of OgMembership entities, keyed by ID.
    */
   public static function getGroupMemberships(EntityInterface $group, array $states = [OgMembershipInterface::STATE_ACTIVE]) {
-    /** @var \Drupal\og\MembershipManagerInterface $membership_manager */
+    /** @var MembershipManagerInterface $membership_manager */
     $membership_manager = \Drupal::service('og.membership_manager');
     return $membership_manager->getGroupMemberships($group, $states);
   }
@@ @@
   /**
    * Creates an OG membership.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group entity.
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The user object.
    * @param string $membership_type
    *   (optional) The membership type. Defaults to
    *   \Drupal\og\OgMembershipInterface::TYPE_DEFAULT.
    *
-   * @return \Drupal\og\Entity\OgMembership
+   * @return OgMembership
    *   The unsaved membership object.
    */
   public static function createMembership(EntityInterface $group, AccountInterface $user, $membership_type = OgMembershipInterface::TYPE_DEFAULT) {
-    /** @var \Drupal\og\MembershipManagerInterface $membership_manager */
+    /** @var MembershipManagerInterface $membership_manager */
     $membership_manager = \Drupal::service('og.membership_manager');
     return $membership_manager->createMembership($group, $user, $membership_type);
   }
@@ @@
   /**
    * Returns whether a user belongs to a group.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group entity.
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The user to test the membership for.
    * @param array $states
    *   (optional) Array with the membership states to check the membership.
@@ @@
    *   TRUE if the user belongs to a group with a certain state.
    */
   public static function isMember(EntityInterface $group, AccountInterface $user, array $states = [OgMembershipInterface::STATE_ACTIVE]) {
-    /** @var \Drupal\og\MembershipManagerInterface $membership_manager */
+    /** @var MembershipManagerInterface $membership_manager */
     $membership_manager = \Drupal::service('og.membership_manager');
     return $membership_manager->isMember($group, $user->id(), $states);
   }
@@ @@
   /**
    * Returns whether a user belongs to a group with a pending status.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group entity.
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The user entity.
    *
    * @return bool
@@ @@
   /**
    * Returns whether an entity belongs to a group with a blocked status.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group entity.
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The entity to test the membership for.
    *
    * @return bool
@@ @@
   /**
    * Returns the group manager instance.
    *
-   * @return \Drupal\og\GroupTypeManagerInterface
+   * @return GroupTypeManagerInterface
    *   Returns the group manager.
    */
   public static function groupTypeManager() {
@@ @@
   /**
    * Get the selection handler for an audience field attached to entity.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    * @param array $options
    *   Overriding the default options of the selection handler.
    *
-   * @return \Drupal\og\Plugin\EntityReferenceSelection\OgSelection
+   * @return OgSelection
    *   Returns the OG selection handler.
    *
    * @throws \Exception
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


119) modules/contrib/og/src/MembershipManagerInterface.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og;

+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\user\UserInterface;

@@ @@
    * @param string[] $states
    *   (optional) Array with the states to return. Defaults to active.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface[][]
+   * @return ContentEntityInterface[][]
    *   An associative array, keyed by group entity type, each item an array of
    *   group entities.
    *
@@ @@
    *   the group. Set to FALSE to return the groups that match one or more of
    *   the requested roles. Defaults to TRUE.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface[][]
+   * @return ContentEntityInterface[][]
    *   An associative array, keyed by group entity type, each item an array of
    *   group entities.
    */
@@ @@
    *   active memberships. In order to retrieve all memberships regardless of
    *   state, pass `OgMembershipInterface::ALL_STATES`.
    *
-   * @return \Drupal\og\OgMembershipInterface[]
+   * @return OgMembershipInterface[]
    *   An array of OgMembership entities, keyed by ID.
    */
   public function getMemberships($user_id, array $states = [OgMembershipInterface::STATE_ACTIVE]);
@@ @@
   /**
    * Returns the group membership for a given user and group.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group to get the membership for.
    * @param int $user_id
    *   The ID of the user to get the membership for.
@@ @@
    *   active memberships. In order to retrieve all memberships regardless of
    *   state, pass `OgMembershipInterface::ALL_STATES`.
    *
-   * @return \Drupal\og\OgMembershipInterface|null
+   * @return OgMembershipInterface|null
    *   The OgMembership entity. NULL will be returned if no membership is
    *   available that matches the passed in $states.
    */
@@ @@
   /**
    * Returns the number of group memberships for a given group.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group to get the membership for.
    * @param array $states
    *   (optional) Array with the state to return. Defaults to active.
@@ @@
   /**
    * Returns the membership IDs of the given group filtered by role names.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group entity for which to return the memberships.
    * @param array $role_names
    *   An array of role names to filter by. In order to retrieve a list of all
@@ @@
    *   active membership IDs. In order to retrieve all membership IDs regardless
    *   of state, pass `OgMembershipInterface::ALL_STATES`.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The membership entities.
    */
   public function getGroupMembershipIdsByRoleNames(EntityInterface $group, array $role_names, array $states = [OgMembershipInterface::STATE_ACTIVE]);
@@ @@
   /**
    * Returns the memberships of the given group filtered by role name.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group entity for which to return the memberships.
    * @param array $role_names
    *   An array of role names to filter by. In order to retrieve a list of all
@@ @@
    *   active memberships. In order to retrieve all memberships regardless of
    *   state, pass `OgMembershipInterface::ALL_STATES`.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The membership entities.
    */
   public function getGroupMembershipsByRoleNames(EntityInterface $group, array $role_names, array $states = [OgMembershipInterface::STATE_ACTIVE]);
@@ @@
   /**
    * Creates an OG membership.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group entity.
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user object.
    * @param string $membership_type
    *   (optional) The membership type. Defaults to
    *   \Drupal\og\OgMembershipInterface::TYPE_DEFAULT.
    *
-   * @return \Drupal\og\OgMembershipInterface
+   * @return OgMembershipInterface
    *   The unsaved membership object.
    */
   public function createMembership(EntityInterface $group, UserInterface $user, $membership_type = OgMembershipInterface::TYPE_DEFAULT);
@@ @@
    * Do not use this to retrieve group IDs associated with a user entity. Use
    * MembershipManager::getUserGroups() instead.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The group content entity for which to return the associated groups.
    * @param string $group_type_id
    *   Filter results to only include group IDs of this entity type.
@@ @@
    * to the group is stored on a field attached to the content entity, while
    * user memberships are tracked in OgMembership entities.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The group content entity for which to return the groups.
    * @param string $group_type_id
    *   Filter results to only include groups of this entity type.
@@ @@
    * @param string $group_bundle
    *   Filter results to only include groups of this bundle.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[][]
+   * @return EntityInterface[][]
    *   An associative array, keyed by group entity type, each item an array of
    *   group entities.
    *
@@ @@
    * Do not use this to retrieve the group membership count for a user entity.
    * Use count(\Drupal\og\MembershipManager::getUserGroupIds()) instead.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The group content entity for which to count the associated groups.
    * @param string $group_type_id
    *   Only count groups of this entity type.
@@ @@
    * This does not return information about users that are members of the given
    * group.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The group entity for which to return group content IDs.
    * @param array $entity_types
    *   Optional list of group content entity types for which to return results.
@@ @@
   /**
    * Returns whether a user belongs to a group.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group entity.
    * @param int $user_id
    *   The ID of the user to test the membership for.
@@ @@
   /**
    * Returns whether a user belongs to a group with a pending status.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group entity.
    * @param int $user_id
    *   The ID of the user.
@@ @@
   /**
    * Returns whether an entity belongs to a group with a blocked status.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group entity.
    * @param int $user_id
    *   The ID of the user to test the membership for.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


120) modules/contrib/og/src/MembershipManager.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og;

+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ @@
   /**
    * The static cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $staticCache;

@@ @@
   /**
    * The OG group audience helper.
    *
-   * @var \Drupal\og\OgGroupAudienceHelperInterface
+   * @var OgGroupAudienceHelperInterface
    */
   protected $groupAudienceHelper;

@@ @@
    *
    * @param \Drupal\core\Entity\EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\og\OgGroupAudienceHelperInterface $group_audience_helper
+   * @param OgGroupAudienceHelperInterface $group_audience_helper
    *   The OG group audience helper.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The static cache backend.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, OgGroupAudienceHelperInterface $group_audience_helper, CacheBackendInterface $cache) {
@@ @@
     }
     $group_ids = [];

-    /** @var \Drupal\og\Entity\OgMembership[] $memberships */
+    /** @var OgMembership[] $memberships */
     $memberships = $this->getMemberships($user_id, $states);
     foreach ($memberships as $membership) {
       $group_ids[$membership->getGroupEntityType()][] = $membership->getGroupId();
@@ @@
       $user_id = $user_id->id();
     }

-    /** @var \Drupal\og\OgMembershipInterface[] $memberships */
+    /** @var OgMembershipInterface[] $memberships */
     $memberships = $this->getMemberships($user_id, $states);
     $memberships = array_filter($memberships, function (OgMembershipInterface $membership) use ($role_ids, $require_all_roles): bool {
       $membership_roles_ids = $membership->getRolesIds();
@@ @@
    */
   public function createMembership(EntityInterface $group, UserInterface $user, $membership_type = OgMembershipInterface::TYPE_DEFAULT) {
     /** @var \Drupal\user\UserInterface $user */
-    /** @var \Drupal\og\OgMembershipInterface $membership */
+    /** @var OgMembershipInterface $membership */
     $membership = OgMembership::create(['type' => $membership_type]);
     $membership
       ->setOwner($user)
@@ @@
       $query->condition('entity_type', $entity_types, 'IN');
     }

-    /** @var \Drupal\field\FieldStorageConfigInterface[] $fields */
+    /** @var FieldStorageConfigInterface[] $fields */
     $storage = $this->entityTypeManager->getStorage('field_storage_config');
     $fields = array_filter($storage->loadMultiple($query->execute()), function (FieldStorageConfigInterface $field) use ($entity) {
       $type_matches = $field->getSetting('target_type') === $entity->getEntityTypeId();
@@ @@
    * @param array[] $group_ids
    *   An associative array of entity IDs indexed by their entity type ID.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface[][]
+   * @return ContentEntityInterface[][]
    *   An associative array of entities indexed by their entity type ID.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown when the entity type definition of one or more of the passed in
    *   entity types is invalid.
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Thrown when one or more of the passed in entity types is not defined.
    */
   protected function loadGroups(array $group_ids): array {
@@ @@
    * @param array $ids
    *   The IDs of the memberships to load.
    *
-   * @return \Drupal\og\OgMembershipInterface[]
+   * @return OgMembershipInterface[]
    *   The membership entities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown when the entity type definition of one or more of the passed in
    *   entity types is invalid.
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Thrown when one or more of the passed in entity types is not defined.
    */
   protected function loadMemberships(array $ids) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


121) modules/contrib/og/src/GroupTypeManagerInterface.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og;

+use Drupal\Core\Entity\EntityInterface;
 /**
  * Interface for services intended to help managing groups.
  */
@@ @@
    * @param string $entity_type_id
    *   The entity type name.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Array of groups, or an empty array if none found
    */
   public function getGroupBundleIdsByEntityType($entity_type_id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


122) modules/contrib/og/src/GroupTypeManager.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og;

+use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The service providing information about bundles.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * The OG permission manager.
    *
-   * @var \Drupal\og\PermissionManagerInterface
+   * @var PermissionManagerInterface
    */
   protected $permissionManager;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The OG role manager.
    *
-   * @var \Drupal\og\OgRoleManagerInterface
+   * @var OgRoleManagerInterface
    */
   protected $ogRoleManager;

@@ @@
   /**
    * The route builder service.
    *
-   * @var \Drupal\Core\Routing\RouteBuilderInterface
+   * @var RouteBuilderInterface
    */
   protected $routeBuilder;

@@ @@
   /**
    * The OG group audience helper.
    *
-   * @var \Drupal\og\OgGroupAudienceHelperInterface
+   * @var OgGroupAudienceHelperInterface
    */
   protected $groupAudienceHelper;

@@ @@
   /**
    * The Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a GroupTypeManager object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The service providing information about bundles.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend.
-   * @param \Drupal\og\PermissionManagerInterface $permission_manager
+   * @param PermissionManagerInterface $permission_manager
    *   The OG permission manager.
-   * @param \Drupal\og\OgRoleManagerInterface $og_role_manager
+   * @param OgRoleManagerInterface $og_role_manager
    *   The OG role manager.
-   * @param \Drupal\Core\Routing\RouteBuilderInterface $route_builder
+   * @param RouteBuilderInterface $route_builder
    *   The route builder service.
-   * @param \Drupal\og\OgGroupAudienceHelperInterface $group_audience_helper
+   * @param OgGroupAudienceHelperInterface $group_audience_helper
    *   The OG group audience helper.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, EventDispatcherInterface $event_dispatcher, CacheBackendInterface $cache, PermissionManagerInterface $permission_manager, OgRoleManagerInterface $og_role_manager, RouteBuilderInterface $route_builder, OgGroupAudienceHelperInterface $group_audience_helper) {
@@ @@

     // Trigger an event upon the new group creation.
     $event = new GroupCreationEvent($entity_type_id, $bundle_id);
-    $this->eventDispatcher->dispatch(GroupCreationEventInterface::EVENT_NAME, $event);
+    $this->eventDispatcher->dispatch($event, GroupCreationEventInterface::EVENT_NAME);

     $this->ogRoleManager->createPerBundleRoles($entity_type_id, $bundle_id);
     $this->refreshGroupMap();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


123) modules/contrib/og/src/Form/OgRemoveMultipleRolesForm.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og\Form;

+use Drupal\og\OgRoleInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\og\Entity\OgRole;

@@ @@
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $role_ids = array_keys($form_state->getValue('roles'));
-    /** @var \Drupal\og\OgRoleInterface[] $roles */
+    /** @var OgRoleInterface[] $roles */
     $roles = OgRole::loadMultiple($role_ids);
     foreach ($this->getMemberships() as $membership) {
       $changed = FALSE;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


124) modules/contrib/og/src/Form/OgMembershipTypeForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * Constructs the OgMembershipTypeForm object.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(EntityFieldManagerInterface $entity_field_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


125) modules/contrib/og/src/Form/OgMembershipForm.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og\Form;

+use Drupal\og\OgAccess;
+use Drupal\og\Entity\OgMembership;
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ @@
   /**
    * The OG access service.
    *
-   * @var \Drupal\og\OgAccess
+   * @var OgAccess
    */
   protected $ogAccess;

@@ @@
   /**
    * Constructs a MessageForm object.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\og\OgAccessInterface $og_access
+   * @param OgAccessInterface $og_access
    *   The OG access service.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, TimeInterface $time = NULL, OgAccessInterface $og_access) {
@@ @@
    * {@inheritdoc}
    */
   public function form(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\og\Entity\OgMembership $entity */
+    /** @var OgMembership $entity */
     $entity = $this->getEntity();
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $group */
+    /** @var ContentEntityInterface $group */
     $group = $entity->getGroup();

     $form = parent::form($form, $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


126) modules/contrib/og/src/Form/OgMembershipDeleteForm.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og\Form;

+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\og\Entity\OgMembership;
 use Drupal\Core\Entity\ContentEntityDeleteForm;

 /**
@@ @@
    * {@inheritdoc}
    */
   protected function getDeletionMessage() {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $membership = $this->getEntity();

     return $this->t('%user has been unsubscribed from %group.', [
@@ @@
    * {@inheritdoc}
    */
   protected function logDeletionMessage() {
-    /** @var \Drupal\og\Entity\OgMembership $entity */
+    /** @var OgMembership $entity */
     $membership = $this->getEntity();

     $this->logger('og')->notice('OG Membership: deleted the @membership_type membership for the user uid: @uid to the group of the entity-type @group_type and ID: @gid', [
@@ @@
    * {@inheritdoc}
    */
   public function getQuestion() {
-    /** @var \Drupal\og\Entity\OgMembership $entity */
+    /** @var OgMembership $entity */
     $membership = $this->getEntity();

     return $this->t('Are you sure you want to unsubscribe %user from %group?', [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


127) modules/contrib/og/src/Form/OgChangeMultipleRolesFormBase.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og\Form;

+use Drupal\og\OgMembershipInterface;
+use Drupal\Core\TempStore\PrivateTempStore;
+use Drupal\og\OgRoleInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The memberships on which roles should be changed.
    *
-   * @var \Drupal\og\OgMembershipInterface[]
+   * @var OgMembershipInterface[]
    */
   protected $memberships = [];

@@ @@
   /**
    * The tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;

@@ @@
   /**
    * The temporary storage for the current user.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $tempStore;

@@ @@
   /**
    * The OG access service.
    *
-   * @var \Drupal\og\OgAccessInterface
+   * @var OgAccessInterface
    */
   protected $ogAccess;

@@ @@
   /**
    * Constructs a OgChangeMultipleRolesFormbase object.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
-   * @param \Drupal\og\OgAccessInterface $og_access
+   * @param OgAccessInterface $og_access
    *   The OG access service.
    */
   public function __construct(PrivateTempStoreFactory $temp_store_factory, OgAccessInterface $og_access) {
@@ @@
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $role_ids = array_keys($form_state->getValue('roles'));
-    /** @var \Drupal\og\OgRoleInterface[] $roles */
+    /** @var OgRoleInterface[] $roles */
     $roles = OgRole::loadMultiple($role_ids);
     foreach ($this->getMemberships() as $membership) {
       $changed = FALSE;
@@ @@
   /**
    * Controls access to the form.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account for which to check access.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   The access result.
    */
   public function access(AccountInterface $account) {
@@ @@
   /**
    * Returns the temporary storage for the current user.
    *
-   * @return \Drupal\Core\TempStore\PrivateTempStore
+   * @return PrivateTempStore
    *   The temporary storage for the current user.
    */
   protected function getTempStore() {
@@ @@
   /**
    * Returns an array of memberships on which to change roles.
    *
-   * @return \Drupal\og\OgMembershipInterface[]
+   * @return OgMembershipInterface[]
    *   The array of memberships.
    */
   protected function getMemberships() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


128) modules/contrib/og/src/Form/OgAddMultipleRolesForm.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og\Form;

+use Drupal\og\OgRoleInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\og\Entity\OgRole;

@@ @@
   public function buildForm(array $form, FormStateInterface $form_state) {
     $options = [];
     foreach ($this->getGroupTypes() as $group_type) {
-      /** @var \Drupal\og\OgRoleInterface $role */
+      /** @var OgRoleInterface $role */
       foreach (OgRole::loadByGroupType($group_type['entity_type_id'], $group_type['bundle_id']) as $role) {
         // Only add the role to the list if it is not a required role, these
         // cannot be added.
@@ @@
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $role_ids = array_keys($form_state->getValue('roles'));
-    /** @var \Drupal\og\OgRoleInterface[] $roles */
+    /** @var OgRoleInterface[] $roles */
     $roles = OgRole::loadMultiple($role_ids);
     foreach ($this->getMemberships() as $membership) {
       $changed = FALSE;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


129) modules/contrib/og/src/Form/GroupSubscribeForm.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * OG access service.
    *
-   * @var \Drupal\og\OgAccessInterface
+   * @var OgAccessInterface
    */
   protected $ogAccess;

@@ @@
   /**
    * Constructs a GroupSubscribeForm.
    *
-   * @param \Drupal\og\OgAccessInterface $og_access
+   * @param OgAccessInterface $og_access
    *   The OG access service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface|null $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface|null $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface|null $time
+   * @param TimeInterface|null $time
    *   The time service.
    *
    * @todo Set the `EntityRepositoryInterface` type hint on the second argument
@@ @@
    *   The confirmation question.
    */
   public function getQuestion() {
-    /** @var \Drupal\og\OgMembershipInterface $membership */
+    /** @var OgMembershipInterface $membership */
     $membership = $this->entity;
     $group = $membership->getGroup();

@@ @@
   /**
    * Return the URL to redirect on cancel.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The URL object to redirect to.
    */
   public function getCancelUrl() {
@@ @@
   public function buildForm(array $form, FormStateInterface $form_state) {
     $state = $this->isStateActive() ? OgMembershipInterface::STATE_ACTIVE : OgMembershipInterface::STATE_PENDING;

-    /** @var \Drupal\og\OgMembershipInterface $membership */
+    /** @var OgMembershipInterface $membership */
     $membership = $this->entity;
     $membership->setState($state);

@@ @@
    *   True if the state is active.
    */
   public function isStateActive() {
-    /** @var \Drupal\og\OgMembershipInterface $membership */
+    /** @var OgMembershipInterface $membership */
     $membership = $this->getEntity();

     $group = $membership->getGroup();
@@ @@
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     parent::submitForm($form, $form_state);
-    /** @var \Drupal\og\OgMembershipInterface $membership */
+    /** @var OgMembershipInterface $membership */
     $membership = $this->getEntity();

     $group = $membership->getGroup();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


130) modules/contrib/og/src/EventSubscriber/OgEventSubscriber.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og\EventSubscriber;

+use Drupal\og\Entity\OgRole;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * The OG permission manager.
    *
-   * @var \Drupal\og\PermissionManagerInterface
+   * @var PermissionManagerInterface
    */
   protected $permissionManager;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The service providing information about bundles.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The OG access service.
    *
-   * @var \Drupal\og\OgAccessInterface
+   * @var OgAccessInterface
    */
   protected $ogAccess;

@@ @@
   /**
    * Constructs an OgEventSubscriber object.
    *
-   * @param \Drupal\og\PermissionManagerInterface $permission_manager
+   * @param PermissionManagerInterface $permission_manager
    *   The OG permission manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The service providing information about bundles.
-   * @param \Drupal\og\OgAccessInterface $og_access
+   * @param OgAccessInterface $og_access
    *   The OG access service.
    */
   public function __construct(PermissionManagerInterface $permission_manager, EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, OgAccessInterface $og_access) {
@@ @@
   /**
    * Provides default OG permissions.
    *
-   * @param \Drupal\og\Event\PermissionEventInterface $event
+   * @param PermissionEventInterface $event
    *   The OG permission event.
    */
   public function provideDefaultOgPermissions(PermissionEventInterface $event) {
@@ @@
   /**
    * Provides default permissions for the Node entity.
    *
-   * @param \Drupal\og\Event\PermissionEventInterface $event
+   * @param PermissionEventInterface $event
    *   The OG permission event.
    */
   public function provideDefaultNodePermissions(PermissionEventInterface $event) {
@@ @@
   /**
    * Provides a default role for the group administrator.
    *
-   * @param \Drupal\og\Event\DefaultRoleEventInterface $event
+   * @param DefaultRoleEventInterface $event
    *   The default role event.
    */
   public function provideDefaultRoles(DefaultRoleEventInterface $event) {
-    /** @var \Drupal\og\Entity\OgRole $role */
+    /** @var OgRole $role */
     $role = $this->entityTypeManager->getStorage('og_role')->create([
       'name' => OgRoleInterface::ADMINISTRATOR,
       'label' => 'Administrator',
@@ @@
    *   An array of group content bundle IDs, keyed by group content entity type
    *   ID.
    *
-   * @return \Drupal\og\GroupContentOperationPermission[]
+   * @return GroupContentOperationPermission[]
    *   The array of permissions.
    *
    * @see \Drupal\og\EventSubscriber\OgEventSubscriber::provideDefaultNodePermissions()
@@ @@
   /**
    * Provide OG admin routes.
    *
-   * @param \Drupal\og\Event\OgAdminRoutesEventInterface $event
+   * @param OgAdminRoutesEventInterface $event
    *   The OG admin routes event object.
    */
   public function provideOgAdminRoutes(OgAdminRoutesEventInterface $event) {
@@ @@
   /**
    * Checks if a user has access to perform a group content entity operation.
    *
-   * @param \Drupal\og\Event\GroupContentEntityOperationAccessEventInterface $event
+   * @param GroupContentEntityOperationAccessEventInterface $event
    *   The event fired when a group content entity operation is performed.
    */
   public function checkGroupContentEntityOperationAccess(GroupContentEntityOperationAccessEventInterface $event): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


131) modules/contrib/og/src/Event/PermissionEventInterface.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og\Event;

+use Drupal\og\GroupContentOperationPermission;
 use Drupal\og\PermissionInterface;

 /**
@@ @@
    * @param string $name
    *   The name of the permission to return.
    *
-   * @return \Drupal\og\PermissionInterface
+   * @return PermissionInterface
    *   The permission.
    *
    * @throws \InvalidArgumentException
@@ @@
    *   Set to FALSE if this permission applies to all entities, or to TRUE if it
    *   only applies to the ones owned by the user. Defaults to FALSE.
    *
-   * @return \Drupal\og\GroupContentOperationPermission
+   * @return GroupContentOperationPermission
    *   The permission.
    *
    * @throws \InvalidArgumentException
@@ @@
   /**
    * Returns all the permissions.
    *
-   * @return \Drupal\og\PermissionInterface[]
+   * @return PermissionInterface[]
    *   An associative array of permissions, keyed by permission name.
    */
   public function getPermissions();
@@ @@
   /**
    * Sets the permission with the given data.
    *
-   * @param \Drupal\og\PermissionInterface $permission
+   * @param PermissionInterface $permission
    *   The permission to set.
    *
    * @throws \InvalidArgumentException
@@ @@
   /**
    * Sets multiple permissions.
    *
-   * @param \Drupal\og\PermissionInterface[] $permissions
+   * @param PermissionInterface[] $permissions
    *   The permissions to set, keyed by permission name.
    */
   public function setPermissions(array $permissions);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


132) modules/contrib/og/src/Event/PermissionEvent.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\og\GroupContentOperationPermission;
 use Drupal\og\PermissionInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Event that is fired when OG permissions are compiled.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


133) modules/contrib/og/src/Event/OgAdminRoutesEvent.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\og\OgAccess;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Event that is fired when OG admin routes are being compiled.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


134) modules/contrib/og/src/Event/GroupCreationEvent.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * The group creation event.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


135) modules/contrib/og/src/Event/GroupContentEntityOperationAccessEventInterface.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the group content entity upon which the operation is performed.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The group content entity.
    */
   public function getGroupContent(): ContentEntityInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


136) modules/contrib/og/src/Event/GroupContentEntityOperationAccessEvent.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The group content entity upon which the operation is being performed.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $groupContent;

@@ @@
    *
    * @param string $operation
    *   The entity operation, such as "create", "update" or "delete".
-   * @param \Drupal\Core\Entity\ContentEntityInterface $group
+   * @param ContentEntityInterface $group
    *   The group in scope of which the access check is being performed.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $groupContent
+   * @param ContentEntityInterface $groupContent
    *   The group content upon which the entity operation is performed.
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The user for which to check access.
    */
   public function __construct(string $operation, ContentEntityInterface $group, ContentEntityInterface $groupContent, AccountInterface $user) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


137) modules/contrib/og/src/Event/DefaultRoleEventInterface.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og\Event;

+use Drupal\og\OgRoleInterface;
 use Drupal\og\Entity\OgRole;

 /**
@@ @@
    * @param string $name
    *   The name of the role to return.
    *
-   * @return \Drupal\og\OgRoleInterface
+   * @return OgRoleInterface
    *   The OgRole entity.
    *
    * @throws \InvalidArgumentException
@@ @@
   /**
    * Adds a default role.
    *
-   * @param \Drupal\og\Entity\OgRole $role
+   * @param OgRole $role
    *   The OgRole entity to add. This should be an unsaved entity that doesn't
    *   have the group entity type and bundle IDs set.
    *
@@ @@
   /**
    * Adds multiple default roles.
    *
-   * @param \Drupal\og\Entity\OgRole[] $roles
+   * @param OgRole[] $roles
    *   An array of OgRole entities to add. These should be unsaved entities that
    *   don't have the group entity type and bundle IDs set.
    */
@@ @@
   /**
    * Sets a default roles.
    *
-   * @param \Drupal\og\Entity\OgRole $role
+   * @param OgRole $role
    *   The OgRole entity to set. This should be an unsaved entity that doesn't
    *   have the group entity type and bundle IDs set.
    *
@@ @@
   /**
    * Sets multiple default roles.
    *
-   * @param \Drupal\og\Entity\OgRole[] $roles
+   * @param OgRole[] $roles
    *   An array of OgRole entities to set. These should be unsaved entities that
    *   don't have the group entity type and bundle IDs set.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


138) modules/contrib/og/src/Event/DefaultRoleEvent.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\og\Entity\OgRole;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Event that is fired when default roles are compiled.
@@ @@
    *
    * The roles are stored locally keyed by role name.
    *
-   * @param \Drupal\og\Entity\OgRole $role
+   * @param OgRole $role
    *   The role to validate.
    *
    * @throws \InvalidArgumentException
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


139) modules/contrib/og/src/Event/AccessEventInterface.php:19

    ---------- begin diff ----------
@@ @@
    * Calling this method will cause access to be granted for the action that is
    * being checked, unless another event listener denies access.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The updated access result.
    */
   public function grantAccess(): AccessResultInterface;
@@ @@
    * being checked. This takes precedence over any other event listeners that
    * might grant access.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The updated access result.
    */
   public function denyAccess(): AccessResultInterface;
@@ @@
   /**
    * Merges the given access result with the existing access result.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The updated access result.
    */
   public function mergeAccessResult(AccessResultInterface $access_result): AccessResultInterface;
@@ @@
   /**
    * Returns the group that provides the context for the access check.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The group entity.
    */
   public function getGroup(): ContentEntityInterface;
@@ @@
   /**
    * Returns the user for which access is being determined.
    *
-   * @return \Drupal\Core\Session\AccountInterface
+   * @return AccountInterface
    *   The user.
    */
   public function getUser(): AccountInterface;
@@ @@
   /**
    * Returns the current access result object.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result object.
    */
   public function getAccessResult(): AccessResultInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


140) modules/contrib/og/src/Event/AccessEventBase.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
@@ @@
 use Drupal\Core\Cache\RefinableCacheableDependencyTrait;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Session\AccountInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Base class for OG access events.
@@ @@
   /**
    * The access result.
    *
-   * @var \Drupal\Core\Access\AccessResultInterface
+   * @var AccessResultInterface
    */
   protected $access;

@@ @@
   /**
    * The group that provides the context for the access check.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $group;

@@ @@
   /**
    * The user for which to check access.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $user;

@@ @@
   /**
    * Constructs an AccessEventBase event.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $group
+   * @param ContentEntityInterface $group
    *   The group that provides the context in which to perform the access check.
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The user for which to check access.
    */
   public function __construct(ContentEntityInterface $group, AccountInterface $user) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


141) modules/contrib/og/src/Entity/OgRole.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og\Entity;

+use Drupal\og\GroupTypeManagerInterface;
+use Drupal\og\OgAccessInterface;
 use Drupal\Core\Config\ConfigValueException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\og\Exception\OgRoleException;
@@ @@
   /**
    * Gets the group manager.
    *
-   * @return \Drupal\og\GroupTypeManagerInterface
+   * @return GroupTypeManagerInterface
    *   The group manager.
    */
   protected function groupTypeManager() {
@@ @@
   /**
    * Gets the OG access service.
    *
-   * @return \Drupal\og\OgAccessInterface
+   * @return OgAccessInterface
    *   The OG access service.
    */
   protected function ogAccess() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


142) modules/contrib/og/src/Entity/OgMembership.php:527

    ---------- begin diff ----------
@@ @@

     // Check if the roles are valid.
     foreach ($this->getRoles() as $role) {
-      /** @var \Drupal\og\Entity\OgRole $role */
+      /** @var OgRole $role */
       // Make sure we don't save a membership for a non-member.
       if ($role->getName() == OgRoleInterface::ANONYMOUS) {
         throw new \LogicException('Cannot save an OgMembership with reference to a non-member role.');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


143) modules/contrib/og/src/Controller/SubscriptionController.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * OG access service.
    *
-   * @var \Drupal\og\OgAccessInterface
+   * @var OgAccessInterface
    */
   protected $ogAccess;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Constructs a SubscriptionController object.
    *
-   * @param \Drupal\og\OgAccessInterface $og_access
+   * @param OgAccessInterface $og_access
    *   The OG access service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(OgAccessInterface $og_access, MessengerInterface $messenger) {
@@ @@
    *
    * @param string $entity_type_id
    *   The entity type of the group entity.
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The entity ID of the group entity.
-   * @param \Drupal\og\OgMembershipTypeInterface $og_membership_type
+   * @param OgMembershipTypeInterface $og_membership_type
    *   The membership type to be used for creating the membership.
    *
    * @return mixed
@@ @@
   /**
    * Unsubscribe a user from group.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $group
+   * @param ContentEntityInterface $group
    *   The group entity.
    *
    * @return mixed
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


144) modules/contrib/og/src/Controller/OgAutocompleteController.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The autocomplete matcher for entity references.
    *
-   * @var \Drupal\Core\Entity\EntityAutocompleteMatcher
+   * @var EntityAutocompleteMatcher
    */
   protected $matcher;

@@ @@
   /**
    * The private key service.
    *
-   * @var \Drupal\Core\PrivateKey
+   * @var PrivateKey
    */
   protected $privateKey;

@@ @@
   /**
    * The key value store.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueStoreInterface
+   * @var KeyValueStoreInterface
    */
   protected $keyValue;

@@ @@
   /**
    * Constructs a EntityAutocompleteController object.
    *
-   * @param \Drupal\Core\Entity\EntityAutocompleteMatcher $matcher
+   * @param EntityAutocompleteMatcher $matcher
    *   The autocomplete matcher for entity references.
-   * @param \Drupal\Core\PrivateKey $privateKey
+   * @param PrivateKey $privateKey
    *   The private key service.
-   * @param \Drupal\Core\KeyValueStore\KeyValueStoreInterface $key_value
+   * @param KeyValueStoreInterface $key_value
    *   The key value factory.
    */
   public function __construct(EntityAutocompleteMatcher $matcher, PrivateKey $privateKey, KeyValueStoreInterface $key_value) {
@@ @@
   /**
    * Autocomplete the label of an entity.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object that contains the typed tags.
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group context for this autocomplete.
    * @param string $target_type
    *   The ID of the target entity type.
@@ @@
    *   The hashed key of the key/value entry that holds the selection handler
    *   settings.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The matched entity labels as a JSON response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException
+   * @throws AccessDeniedHttpException
    *   Thrown if the selection settings key is not found in the key/value store
    *   or if it does not match the stored data.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


145) modules/contrib/og/src/Controller/OgAdminRoutesController.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og\Controller;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher;
 use Drupal\Core\Access\AccessManagerInterface;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
   /**
    * The event dispatcher service.
    *
-   * @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher
+   * @var ContainerAwareEventDispatcher
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The access manager service.
    *
-   * @var \Drupal\Core\Access\AccessManagerInterface
+   * @var AccessManagerInterface
    */
   protected $accessManager;

@@ @@
   /**
    * Constructs an OgAdminController object.
    *
-   * @param \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher $event_dispatcher
+   * @param ContainerAwareEventDispatcher $event_dispatcher
    *   The event dispatcher service.
-   * @param \Drupal\Core\Access\AccessManagerInterface $access_manager
+   * @param AccessManagerInterface $access_manager
    *   The access manager service.
    */
   public function __construct(ContainerAwareEventDispatcher $event_dispatcher, AccessManagerInterface $access_manager) {
@@ @@
   /**
    * Show all the available admin routes.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match service.
    *
    * @return array
@@ @@
   public function overview(RouteMatchInterface $route_match) {
     $parameter_name = $route_match->getRouteObject()->getOption('_og_entity_type_id');

-    /** @var \Drupal\Core\Entity\EntityInterface $group */
+    /** @var EntityInterface $group */
     $group = $route_match->getParameter($parameter_name);

     $entity_type_id = $group->getEntityTypeId();
@@ @@
     $content = [];

     $event = new OgAdminRoutesEvent();
-    $event = $this->eventDispatcher->dispatch(OgAdminRoutesEventInterface::EVENT_NAME, $event);
+    $event = $this->eventDispatcher->dispatch($event, OgAdminRoutesEventInterface::EVENT_NAME);

     foreach ($event->getRoutes($entity_type_id) as $name => $info) {
       $route_name = "entity.$entity_type_id.og_admin_routes.$name";
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


146) modules/contrib/og/src/Controller/OgAdminMembersController.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new EntityController.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Display list of members that belong to the group.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match service.
    *
    * @return array
@@ @@
   /**
    * Provides the add member submission form.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group entity.
-   * @param \Drupal\og\OgMembershipTypeInterface $og_membership_type
+   * @param OgMembershipTypeInterface $og_membership_type
    *   The membership type entity.
    *
    * @return array
@@ @@
    *   The member add form.
    */
   public function addForm(EntityInterface $group, OgMembershipTypeInterface $og_membership_type) {
-    /** @var \Drupal\og\Entity\OgMembership $og_membership */
+    /** @var OgMembership $og_membership */
     $og_membership = OgMembership::create([
       'type' => $og_membership_type->id(),
       'entity_type' => $group->getEntityType()->id(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


147) modules/contrib/og/src/ContextProvider/OgContext.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og\ContextProvider;

+use Drupal\og\OgGroupResolverInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * The OgGroupResolver plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $pluginManager;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Constructs a new OgContext.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $plugin_manager
+   * @param PluginManagerInterface $plugin_manager
    *   The OgGroupResolver plugin manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(PluginManagerInterface $plugin_manager, ConfigFactoryInterface $config_factory) {
@@ @@
   /**
    * Returns the context object containing the relevant group.
    *
-   * @return \Drupal\Core\Plugin\Context\Context
+   * @return Context
    *   A context object containing the group which is relevant in the current
    *   context as a value. If there is no relevant group in the current context
    *   then the value will be empty.
@@ @@
     $group_resolvers = $this->configFactory->get('og.settings')->get('group_resolvers');
     $priority = 0;
     foreach ($group_resolvers as $plugin_id) {
-      /** @var \Drupal\og\OgGroupResolverInterface $plugin */
+      /** @var OgGroupResolverInterface $plugin */
       if ($plugin = $this->pluginManager->createInstance($plugin_id)) {
         // Set the default vote weight according to the plugin's priority.
         $collection->setVoteWeight($priority);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


148) modules/contrib/og/src/Cache/Context/OgRoleCacheContext.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og\Cache\Context;

+use Drupal\Core\Entity\Sql\DefaultTableMapping;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Cache\Context\CacheContextInterface;
 use Drupal\Core\Cache\Context\UserCacheContextBase;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The membership manager service.
    *
-   * @var \Drupal\og\MembershipManagerInterface
+   * @var MembershipManagerInterface
    */
   protected $membershipManager;

@@ @@
   /**
    * The active database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * The private key service.
    *
-   * @var \Drupal\Core\PrivateKey
+   * @var PrivateKey
    */
   protected $privateKey;

@@ @@
   /**
    * Constructs a new UserCacheContextBase class.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\og\MembershipManagerInterface $membershipManager
+   * @param MembershipManagerInterface $membershipManager
    *   The membership manager service.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The active database connection.
-   * @param \Drupal\Core\PrivateKey $privateKey
+   * @param PrivateKey $privateKey
    *   The private key service.
    */
   public function __construct(AccountInterface $user, EntityTypeManagerInterface $entityTypeManager, MembershipManagerInterface $membershipManager, Connection $database, PrivateKey $privateKey) {
@@ @@
       throw new \LogicException('Can only retrieve memberships directly from SQL databases.');
     }

-    /** @var \Drupal\Core\Entity\Sql\DefaultTableMapping $table_mapping */
+    /** @var DefaultTableMapping $table_mapping */
     $table_mapping = $storage->getTableMapping();
     $base_table = $table_mapping->getBaseTable();
     $role_table = $table_mapping->getFieldTableName('roles');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


149) modules/contrib/og/src/Cache/Context/OgMembershipStateCacheContext.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The membership manager service.
    *
-   * @var \Drupal\og\MembershipManagerInterface
+   * @var MembershipManagerInterface
    */
   protected $membershipManager;

@@ @@
   /**
    * The OG context provider.
    *
-   * @var \Drupal\og\OgContextInterface
+   * @var OgContextInterface
    */
   protected $ogContext;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $user;

@@ @@
   /**
    * Constructs a new UserCacheContextBase class.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The current user.
-   * @param \Drupal\og\OgContextInterface $og_context
+   * @param OgContextInterface $og_context
    *   The OG context provider.
-   * @param \Drupal\og\MembershipManagerInterface $membership_manager
+   * @param MembershipManagerInterface $membership_manager
    *   The membership manager service.
    */
   public function __construct(AccountInterface $user, OgContextInterface $og_context, MembershipManagerInterface $membership_manager) {
@@ @@
       return self::NO_CONTEXT;
     }

-    /** @var \Drupal\og\OgMembershipInterface $membership */
+    /** @var OgMembershipInterface $membership */
     $membership = $this->membershipManager->getMembership($group, $this->user->id(), OgMembershipInterface::ALL_STATES);
     return $membership ? $membership->getState() : self::NO_CONTEXT;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


150) modules/contrib/og/src/Cache/Context/OgGroupContextCacheContext.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * The OG context provider.
    *
-   * @var \Drupal\og\OgContextInterface
+   * @var OgContextInterface
    */
   protected $ogContext;

@@ @@
   /**
    * Constructs a new UserCacheContextBase class.
    *
-   * @param \Drupal\og\OgContextInterface $og_context
+   * @param OgContextInterface $og_context
    *   The OG context provider.
    */
   public function __construct(OgContextInterface $og_context) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


151) modules/contrib/og/src/Annotation/OgGroupResolver.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


152) modules/contrib/og/src/Annotation/OgDeleteOrphans.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * A short description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


153) modules/contrib/og/src/Access/OgMembershipAddAccessCheck.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og\Access;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a EntityCreateAccessCheck object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Checks access to create the entity type and bundle for the given route.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The parametrized route.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group entity.
-   * @param \Drupal\og\OgMembershipTypeInterface $og_membership_type
+   * @param OgMembershipTypeInterface $og_membership_type
    *   The membership type entity.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(RouteMatchInterface $route_match, AccountInterface $account, EntityInterface $group = NULL, OgMembershipTypeInterface $og_membership_type = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


154) modules/contrib/og/src/Access/GroupCheck.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og\Access;

+use Drupal\og\OgAccess;
+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The OG access service.
    *
-   * @var \Drupal\og\OgAccess
+   * @var OgAccess
    */
   protected $ogAccess;

@@ @@
   /**
    * Constructs a GroupCheck object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\og\OgAccessInterface $og_access
+   * @param OgAccessInterface $og_access
    *   The OG access service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, OgAccessInterface $og_access) {
@@ @@
    * using the Route::setOption method.
    * see \Drupal\og\Routing\RouteSubscriber::alterRoutes as an example.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The currently logged in user.
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check against.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The rout match object.
    * @param string $entity_type_id
    *   (optional) The entity type ID.
@@ @@
    *   The entity ID. If the ID is not sent, the access method will try to
    *   extract it from the route matcher.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $user, Route $route, RouteMatchInterface $route_match, $entity_type_id = NULL, $entity_id = NULL) {
@@ @@
         throw new \BadMethodCallException('Group definition is missing from the router. Did you define $route->setOption(\'_og_entity_type_id\', $entity_type_id) in your route declaration?');
       }

-      /** @var \Drupal\Core\Entity\EntityInterface $group */
+      /** @var EntityInterface $group */
       if (!$group = $route_match->getParameter($parameter_name)) {
         return AccessResult::forbidden();
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


155) modules/contrib/og/og_ui/tests/src/Functional/BundleFormAlterTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og_ui\Functional;

+use Drupal\user\Entity\User;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Form\FormState;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   /**
    * An administrator user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $adminUser;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The message to display with the assertion.
    */
   protected function assertTargetBundles($expected, $message) {
-    /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager */
+    /** @var EntityFieldManagerInterface $entity_field_manager */
     $entity_field_manager = $this->container->get('entity_field.manager');
     $entity_field_manager->clearCachedFieldDefinitions();
     $field_definitions = $entity_field_manager->getFieldDefinitions('node', 'class');
@@ @@
    *   The message to display with the assertion.
    */
   protected function assertTargetType($expected, $message) {
-    /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager */
+    /** @var EntityFieldManagerInterface $entity_field_manager */
     $entity_field_manager = $this->container->get('entity_field.manager');
     $entity_field_manager->clearCachedFieldDefinitions();
     $field_definitions = $entity_field_manager->getFieldStorageDefinitions('node');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


156) modules/contrib/og/og_ui/src/Form/AdminSettingsForm.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og_ui\Form;

+use Drupal\og\OgDeleteOrphansInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\ConfigFormBase;
@@ @@
   /**
    * The manager for OgDeleteOrphans plugins.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $ogDeleteOrphansPluginManager;

@@ @@
   /**
    * Constructs an AdminSettingsForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $delete_orphans_plugin_manager
+   * @param PluginManagerInterface $delete_orphans_plugin_manager
    *   The manager for OgDeleteOrphans plugins.
    */
   public function __construct(ConfigFactoryInterface $config_factory, PluginManagerInterface $delete_orphans_plugin_manager) {
@@ @@
     ];

     foreach ($definitions as $id => $definition) {
-      /** @var \Drupal\og\OgDeleteOrphansInterface $plugin */
+      /** @var OgDeleteOrphansInterface $plugin */
       $plugin = $this->ogDeleteOrphansPluginManager->createInstance($id, []);

       // Add the description for each delete method.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


157) modules/contrib/og/og_ui/src/Controller/OgUiController.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og_ui\Controller;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The OG group manager.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface
+   * @var GroupTypeManagerInterface
    */
   protected $groupTypeManager;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * Constructs a OgUiController object.
    *
-   * @param \Drupal\og\GroupTypeManagerInterface $group_manager
+   * @param GroupTypeManagerInterface $group_manager
    *   The OG group manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info service.
    */
   public function __construct(GroupTypeManagerInterface $group_manager, EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info) {
@@ @@
    * @param string $type
    *   The type of overview, either 'roles' or 'permissions'.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Return the translated title.
    */
   public function rolesPermissionsOverviewTitleCallback($type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


158) modules/contrib/og/og_ui/src/BundleFormAlter.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og_ui;

+use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Entity type definition.
    *
-   * @var \Drupal\Core\Entity\ContentEntityTypeInterface
+   * @var ContentEntityTypeInterface
    */
   protected $definition;

@@ @@
   /**
    * The form entity which has been used for populating form element defaults.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;

@@ @@
   /**
    * Construct a BundleFormAlter object.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    */
   public function __construct(EntityInterface $entity) {
@@ @@
    *
    * @param array $form
    *   The form variable.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function formAlter(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form variable.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   protected function prepare(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


159) modules/contrib/og/og_ui/og_ui.module:50

    ---------- begin diff ----------
@@ @@
 /**
  * Helper to save group information when a bundle entity is saved.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity object.
  */
 function og_ui_entity_type_save(EntityInterface $entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


160) modules/contrib/og/og.views.inc:5

    ---------- begin diff ----------
@@ @@
  */

 declare(strict_types = 1);
+use Drupal\Core\Entity\Sql\DefaultTableMapping;

 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\field\FieldStorageConfigInterface;
@@ @@
     case 'og_standard_reference':
       $entity_type_manager = \Drupal::entityTypeManager();
       $entity_type_id = $field_storage->getTargetEntityTypeId();
-      /** @var \Drupal\Core\Entity\Sql\DefaultTableMapping $table_mapping */
+      /** @var DefaultTableMapping $table_mapping */
       $table_mapping = $entity_type_manager->getStorage($entity_type_id)->getTableMapping();
       foreach ($data as $table_name => $table_data) {
         // Add a relationship to the target entity type.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


161) modules/contrib/og/og.post_update.php:5

    ---------- begin diff ----------
@@ @@
  */

 declare(strict_types = 1);
+use Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface;

 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ @@
   // mismatch which would otherwise be reported in the drupal Status Report
   // page.
   // @see https://www.drupal.org/docs/drupal-apis/update-api/updating-entities-and-fields-in-drupal-8#s-updating-a-base-field-type
-  /** @var \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface $definition_manager */
+  /** @var EntityDefinitionUpdateManagerInterface $definition_manager */
   $definition_manager = \Drupal::service('entity.definition_update_manager');
   if (!$definition_manager->needsUpdates()) {
     // No updates necessary.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


162) modules/contrib/og/og.module:5

    ---------- begin diff ----------
@@ @@
  */

 declare(strict_types = 1);
+use Drupal\og\OgDeleteOrphansInterface;
+use Drupal\og\MembershipManagerInterface;
+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManager;
+use Drupal\Core\Entity\FieldableEntityInterface;
+use Drupal\Core\Field\EntityReferenceFieldItemListInterface;
+use Drupal\system\ActionConfigEntityInterface;

 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Cache\Cache;
@@ @@
     $config = \Drupal::config('og.settings');
     if ($config->get('delete_orphans')) {
       $plugin_id = $config->get('delete_orphans_plugin_id');
-      /** @var \Drupal\og\OgDeleteOrphansInterface $plugin */
+      /** @var OgDeleteOrphansInterface $plugin */
       $plugin = \Drupal::service('plugin.manager.og.delete_orphans')->createInstance($plugin_id, []);
       $plugin->register($entity);
     }
@@ @@
   }
   // If a user is being deleted, also delete its memberships.
   if ($entity instanceof UserInterface) {
-    /** @var \Drupal\og\MembershipManagerInterface $membership_manager */
+    /** @var MembershipManagerInterface $membership_manager */
     $membership_manager = \Drupal::service('og.membership_manager');
     foreach ($membership_manager->getMemberships($entity->id(), []) as $membership) {
       $membership->delete();
@@ @@
     return AccessResult::allowed();
   }

-  /** @var \Drupal\Core\Access\AccessResult $access */
+  /** @var AccessResult $access */
   $access = \Drupal::service('og.access')->userAccessEntityOperation($operation, $entity, $account);

   if ($access->isAllowed()) {
@@ @@

   $field_definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions($entity_type_id, $bundle);
   foreach ($field_definitions as $field_definition) {
-    /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */
+    /** @var FieldDefinitionInterface $field_definition */
     if (!\Drupal::service('og.group_audience_helper')->isGroupAudienceField($field_definition)) {
       continue;
     }
@@ @@
       'handler' => $field_definition->getSetting('handler'),
       'field_mode' => 'admin',
     ];
-    /** @var \Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManager $handler */
+    /** @var SelectionPluginManager $handler */
     $handler = \Drupal::service('plugin.manager.entity_reference_selection');

     if ($handler->getInstance($options)) {
@@ @@
  * be rebuilt via RouteBuilder::setRebuildNeeded.
  */
 function og_entity_type_alter(array &$entity_types) {
-  /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+  /** @var EntityTypeInterface $entity_type */
   foreach ($entity_types as $entity_type_id => $entity_type) {
     $entity_type->setLinkTemplate('og-admin-routes', "/group/$entity_type_id/{{$entity_type_id}}/admin");
   }
@@ @@
 /**
  * Invalidates group content cache tags for the groups this entity belongs to.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The group content entity that is being created, changed or deleted and is
  *   the direct cause for the need to invalidate cached group content.
  */
@@ @@
   // 'og-group-content:{group entity type}:{group entity id}'.
   $is_group_content = Og::isGroupContent($entity->getEntityTypeId(), $entity->bundle());
   if ($is_group_content) {
-    /** @var \Drupal\og\MembershipManagerInterface $membership_manager */
+    /** @var MembershipManagerInterface $membership_manager */
     $membership_manager = \Drupal::service('og.membership_manager');
     $tags = [];

@@ @@
     // update, check if any of the OG audience fields have been changed. This
     // means the group(s) of the entity changed and we should also invalidate
     // the tags of the old group(s).
-    /** @var \Drupal\Core\Entity\FieldableEntityInterface $entity */
+    /** @var FieldableEntityInterface $entity */
     $original = !empty($entity->original) ? $entity->original : NULL;
     if ($original) {
-      /** @var \Drupal\og\OgGroupAudienceHelperInterface $group_audience_helper */
+      /** @var OgGroupAudienceHelperInterface $group_audience_helper */
       $group_audience_helper = \Drupal::service('og.group_audience_helper');
-      /** @var \Drupal\Core\Entity\FieldableEntityInterface $original */
+      /** @var FieldableEntityInterface $original */
       foreach ($group_audience_helper->getAllGroupAudienceFields($entity->getEntityTypeId(), $entity->bundle()) as $field) {
         $field_name = $field->getName();
-        /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $original_field_item_list */
+        /** @var EntityReferenceFieldItemListInterface $original_field_item_list */
         $original_field_item_list = $original->get($field_name);
         if (!$entity->get($field_name)->equals($original_field_item_list)) {
           foreach ($original_field_item_list->referencedEntities() as $old_group) {
@@ @@
     }

     foreach ($membership_manager->getGroups($entity) as $groups) {
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $group */
+      /** @var ContentEntityInterface $group */
       foreach ($groups as $group) {
         $tags = Cache::mergeTags($tags, $group->getCacheTagsToInvalidate());
       }
@@ @@
  */
 function og_og_role_delete(OgRoleInterface $role) {
   $role_name = $role->getName();
-  /** @var \Drupal\system\ActionConfigEntityInterface[] $actions */
+  /** @var ActionConfigEntityInterface[] $actions */
   $actions = Action::loadMultiple([
     'og_membership_add_single_role_action.' . $role_name,
     'og_membership_remove_single_role_action.' . $role_name,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


163) modules/contrib/og/og.install:5

    ---------- begin diff ----------
@@ @@
  */

 declare(strict_types = 1);
+use Drupal\og\Entity\OgMembership;

 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ @@
     ->sort('id')
     ->execute();

-  /** @var \Drupal\og\Entity\OgMembership $membership */
+  /** @var OgMembership $membership */
   foreach ($storage->loadMultiple($membership_ids) as $membership) {
     $group = $membership->getGroup();
     if (!empty($group)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


164) modules/contrib/og/og.api.php:14

    ---------- begin diff ----------
@@ @@
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Allows modules to alter group level permissions.
  *
  * @param array $permissions
  *   The list of group level permissions, passed by reference.
- * @param \Drupal\Core\Cache\CacheableMetadata $cacheable_metadata
+ * @param CacheableMetadata $cacheable_metadata
  *   The cache metadata.
  * @param array $context
  *   An associative array containing contextual information, with keys:
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [WARNING] 5 nodes were removed                                                 

 [OK] 164 files have been changed by Rector                                     

