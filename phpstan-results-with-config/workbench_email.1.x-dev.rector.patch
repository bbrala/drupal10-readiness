diff --git a/src/Annotation/RecipientType.php b/src/Annotation/RecipientType.php
index 4d49166..be8ff74 100644
--- a/src/Annotation/RecipientType.php
+++ b/src/Annotation/RecipientType.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\workbench_email\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -37,7 +38,7 @@ class RecipientType extends Plugin {
    *
    * This is used as an administrative summary of what the recipient type does.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -46,7 +47,7 @@ class RecipientType extends Plugin {
   /**
    * Additional administrative information about the recipient type's behavior.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Entity/Template.php b/src/Entity/Template.php
index f5c4eee..94262c6 100644
--- a/src/Entity/Template.php
+++ b/src/Entity/Template.php
@@ -108,7 +108,7 @@ class Template extends ConfigEntityBase implements TemplateInterface {
   /**
    * Holds the collection of recipient types that are attached to this template.
    *
-   * @var \Drupal\workbench_email\RecipientTypePluginCollection
+   * @var RecipientTypePluginCollection
    */
   protected $recipientTypeCollection;
 
diff --git a/src/EventSubscriber/ContentModerationStateChangedEvent.php b/src/EventSubscriber/ContentModerationStateChangedEvent.php
index 06e9f12..a500a8d 100644
--- a/src/EventSubscriber/ContentModerationStateChangedEvent.php
+++ b/src/EventSubscriber/ContentModerationStateChangedEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\workbench_email\EventSubscriber;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\ContentEntityInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Defines content moderation state change events.
@@ -15,7 +15,7 @@ class ContentModerationStateChangedEvent extends Event {
   /**
    * The entity that was moderated.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $moderatedEntity;
 
@@ -43,7 +43,7 @@ class ContentModerationStateChangedEvent extends Event {
   /**
    * Create a new ContentModerationStateChangedEvent.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $moderated_entity
+   * @param ContentEntityInterface $moderated_entity
    *   The entity that is being moderated.
    * @param string $new_state
    *   The new state the content is moving to.
@@ -62,7 +62,7 @@ class ContentModerationStateChangedEvent extends Event {
   /**
    * Get the entity that is being moderated.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The entity that is being moderated.
    */
   public function getModeratedEntity() {
diff --git a/src/EventSubscriber/WorkbenchTransitionEventSubscriber.php b/src/EventSubscriber/WorkbenchTransitionEventSubscriber.php
index e00b2ee..25ff78f 100644
--- a/src/EventSubscriber/WorkbenchTransitionEventSubscriber.php
+++ b/src/EventSubscriber/WorkbenchTransitionEventSubscriber.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\workbench_email\EventSubscriber;
 
+use Drupal\Core\Queue\QueueInterface;
+use Drupal\workflows\WorkflowInterface;
+use Drupal\content_moderation\Plugin\WorkflowType\ContentModerationInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\PluginBase;
@@ -19,21 +22,21 @@ class WorkbenchTransitionEventSubscriber implements EventSubscriberInterface {
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The queue service.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;
 
@@ -84,10 +87,10 @@ class WorkbenchTransitionEventSubscriber implements EventSubscriberInterface {
       // There may be multiple at this point, but given we don't have access
       // to the transition that fired this event, we just pick the first one.
       $transition = reset($transitions);
-      /** @var \Drupal\Core\Queue\QueueInterface $queue */
+      /** @var QueueInterface $queue */
       $queue = $this->queueFactory->get('workbench_email_send' . PluginBase::DERIVATIVE_SEPARATOR . $entity->getEntityTypeId());
 
-      /** @var \Drupal\workbench_email\TemplateInterface $template */
+      /** @var TemplateInterface $template */
       foreach ($this->entityTypeManager->getStorage('workbench_email_template')->loadMultiple($transition->getThirdPartySetting('workbench_email', 'workbench_email_templates', [])) as $template) {
         if ($template->getBundles() && !in_array($entity->getEntityTypeId() . ':' . $entity->bundle(), $template->getBundles(), TRUE)) {
           // Continue, invalid bundle.
@@ -103,14 +106,14 @@ class WorkbenchTransitionEventSubscriber implements EventSubscriberInterface {
   /**
    * Event handler for Content Moderation.
    *
-   * @param \Drupal\content_moderation\Event\ContentModerationStateChangedEvent|\Drupal\workbench_email\EventSubscriber\ContentModerationStateChangedEvent $event
+   * @param \Drupal\content_moderation\Event\ContentModerationStateChangedEvent|ContentModerationStateChangedEvent $event
    *   The event listened to.
    */
   public function onContentModerationTransition($event) {
     $entity = $event->getModeratedEntity();
-    /** @var \Drupal\workflows\WorkflowInterface $workflow */
+    /** @var WorkflowInterface $workflow */
     $workflow = $this->entityTypeManager->getStorage('workflow')->load($event->getWorkflow());
-    /** @var \Drupal\content_moderation\Plugin\WorkflowType\ContentModerationInterface $type_plugin */
+    /** @var ContentModerationInterface $type_plugin */
     $type_plugin = $workflow->getTypePlugin();
     if (!$event->getOriginalState()) {
       $from = $type_plugin->getInitialState($entity)->id();
@@ -133,10 +136,10 @@ class WorkbenchTransitionEventSubscriber implements EventSubscriberInterface {
     if (!isset($templates[$transition->id()])) {
       return;
     }
-    /** @var \Drupal\Core\Queue\QueueInterface $queue */
+    /** @var QueueInterface $queue */
     $queue = $this->queueFactory->get('workbench_email_send' . PluginBase::DERIVATIVE_SEPARATOR . $entity->getEntityTypeId());
 
-    /** @var \Drupal\workbench_email\TemplateInterface $template */
+    /** @var TemplateInterface $template */
     foreach ($this->entityTypeManager->getStorage('workbench_email_template')->loadMultiple($templates[$transition->id()]) as $template) {
       if ($template->getBundles() && !in_array($entity->getEntityTypeId() . ':' . $entity->bundle(), $template->getBundles(), TRUE)) {
         // Continue, invalid bundle.
@@ -161,9 +164,9 @@ class WorkbenchTransitionEventSubscriber implements EventSubscriberInterface {
   /**
    * Prepares the recipient list given the entity and template combination.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity being transitioned.
-   * @param \Drupal\workbench_email\TemplateInterface $template
+   * @param TemplateInterface $template
    *   Template being used.
    *
    * @return array
diff --git a/src/Form/TemplateDeleteForm.php b/src/Form/TemplateDeleteForm.php
index 302fa09..2d892f8 100644
--- a/src/Form/TemplateDeleteForm.php
+++ b/src/Form/TemplateDeleteForm.php
@@ -16,7 +16,7 @@ class TemplateDeleteForm extends EntityDeleteForm {
   /**
    * Messenger.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;
 
diff --git a/src/Form/TemplateForm.php b/src/Form/TemplateForm.php
index 5b55341..482bce9 100644
--- a/src/Form/TemplateForm.php
+++ b/src/Form/TemplateForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\workbench_email\Form;
 
+use Drupal\content_moderation\ModerationInformationInterface;
+use Drupal\workbench_email\TemplateInterface;
+use Drupal\workbench_email\Plugin\RecipientTypeInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityInterface;
@@ -24,53 +27,53 @@ class TemplateForm extends EntityForm {
   /**
    * Messenger.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;
 
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * Entity Bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityBundleInfo;
 
   /**
    * Moderation info.
    *
-   * @var \Drupal\workbench_moderation\ModerationInformationInterface|\Drupal\content_moderation\ModerationInformationInterface
+   * @var \Drupal\workbench_moderation\ModerationInformationInterface|ModerationInformationInterface
    */
   protected $moderationInfo;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Constructs a new TemplateForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   Entity field manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_bundle_info
    *   The entity type bundle info.
    * @param \Drupal\workbench_moderation\ModerationInformationInterface $moderation_info
    *   The moderation info service.
@@ -104,7 +107,7 @@ class TemplateForm extends EntityForm {
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\workbench_email\TemplateInterface $workbench_email_template */
+    /** @var TemplateInterface $workbench_email_template */
     $workbench_email_template = $this->entity;
     $form['label'] = [
       '#type' => 'textfield',
@@ -188,7 +191,7 @@ class TemplateForm extends EntityForm {
       '#type' => 'vertical_tabs',
       '#title' => $this->t('Recipient type configuration'),
     ];
-    /** @var \Drupal\workbench_email\Plugin\RecipientTypeInterface $plugin */
+    /** @var RecipientTypeInterface $plugin */
     foreach ($recipient_types as $plugin_id => $plugin) {
       $form['enabled_recipient_types']['#options'][$plugin_id] = $plugin->getLabel();
       if ($plugin->isEnabled()) {
@@ -250,10 +253,10 @@ class TemplateForm extends EntityForm {
    * {@inheritdoc}
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\workbench_email\TemplateInterface $workbench_email_template */
+    /** @var TemplateInterface $workbench_email_template */
     $workbench_email_template = $this->entity;
     $recipient_types = $workbench_email_template->recipientTypes();
-    /** @var \Drupal\workbench_email\Plugin\RecipientTypeInterface $plugin */
+    /** @var RecipientTypeInterface $plugin */
     foreach ($recipient_types as $plugin_id => $plugin) {
       if ($plugin->hasFormClass('configure')) {
         $subform_state = SubformState::createForSubform($form['recipient_types']['settings'][$plugin_id], $form, $form_state);
@@ -267,10 +270,10 @@ class TemplateForm extends EntityForm {
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\workbench_email\TemplateInterface $workbench_email_template */
+    /** @var TemplateInterface $workbench_email_template */
     $workbench_email_template = $this->entity;
     $recipient_types = $workbench_email_template->recipientTypes();
-    /** @var \Drupal\workbench_email\Plugin\RecipientTypeInterface $plugin */
+    /** @var RecipientTypeInterface $plugin */
     foreach ($recipient_types as $plugin_id => $plugin) {
       if ($plugin->hasFormClass('configure')) {
         $subform_state = SubformState::createForSubform($form['recipient_types']['settings'][$plugin_id], $form, $form_state);
@@ -318,7 +321,7 @@ class TemplateForm extends EntityForm {
   /**
    * Determines if an entity type has been marked as moderatable.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   An entity type object.
    *
    * @return bool
@@ -336,7 +339,7 @@ class TemplateForm extends EntityForm {
   /**
    * Determines if an entity type/bundle is one that will be moderated.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition to check.
    * @param string $bundle
    *   The bundle to check.
diff --git a/src/Plugin/Derivative/WorkbenchEmailDeriver.php b/src/Plugin/Derivative/WorkbenchEmailDeriver.php
index 9bcfaa5..ca62d32 100644
--- a/src/Plugin/Derivative/WorkbenchEmailDeriver.php
+++ b/src/Plugin/Derivative/WorkbenchEmailDeriver.php
@@ -33,7 +33,7 @@ class WorkbenchEmailDeriver extends DeriverBase implements ContainerDeriverInter
   /**
    * Creates an EntityMatcherDeriver object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
    * @param \Drupal\workbench_moderation\ModerationInformationInterface|\Drupal\content_moderation\ModerationInformationInterface $moderation_info
    *   Moderation info service.
@@ -73,7 +73,7 @@ class WorkbenchEmailDeriver extends DeriverBase implements ContainerDeriverInter
   /**
    * Determines if an entity type has been marked as moderatable.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   An entity type object.
    *
    * @return bool
diff --git a/src/Plugin/QueueWorker/WorkbenchEmailProcessor.php b/src/Plugin/QueueWorker/WorkbenchEmailProcessor.php
index 39186ec..7cef893 100644
--- a/src/Plugin/QueueWorker/WorkbenchEmailProcessor.php
+++ b/src/Plugin/QueueWorker/WorkbenchEmailProcessor.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\workbench_email\Plugin\QueueWorker;
 
+use Drupal\Core\Mail\MailManager;
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Language\LanguageInterface;
@@ -35,35 +37,35 @@ class WorkbenchEmailProcessor extends QueueWorkerBase implements ContainerFactor
   /**
    * Mail manager service.
    *
-   * @var \Drupal\Core\Mail\MailManager
+   * @var MailManager
    */
   protected $mailManager;
 
   /**
    * Renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * Token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
   /**
    * Entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -76,15 +78,15 @@ class WorkbenchEmailProcessor extends QueueWorkerBase implements ContainerFactor
    *   Plugin ID.
    * @param mixed $plugin_definition
    *   Definition.
-   * @param \Drupal\Core\Mail\MailManagerInterface $mail_manager
+   * @param MailManagerInterface $mail_manager
    *   Mail manager service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   Entity repository service.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   Token service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   Renderer service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, MailManagerInterface $mail_manager, EntityRepositoryInterface $entity_repository, Token $token, RendererInterface $renderer, EntityTypeManagerInterface $entity_type_manager) {
@@ -155,7 +157,7 @@ class WorkbenchEmailProcessor extends QueueWorkerBase implements ContainerFactor
    * @param string $langcode
    *   Langcode.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   Filtered markup.
    */
   protected function checkMarkup($text, $format_id, $langcode = LanguageInterface::LANGCODE_DEFAULT) {
diff --git a/src/Plugin/RecipientType/EmailField.php b/src/Plugin/RecipientType/EmailField.php
index 7fb828e..7af40c4 100644
--- a/src/Plugin/RecipientType/EmailField.php
+++ b/src/Plugin/RecipientType/EmailField.php
@@ -33,14 +33,14 @@ class EmailField extends RecipientTypeBase implements ContainerFactoryPluginInte
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
@@ -60,9 +60,9 @@ class EmailField extends RecipientTypeBase implements ContainerFactoryPluginInte
    *   The plugin ID.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    * @param \Drupal\workbench_moderation\ModerationInformationInterface|\Drupal\content_moderation\ModerationInformationInterface $moderation_info
    *   Moderation info service.
@@ -144,7 +144,7 @@ class EmailField extends RecipientTypeBase implements ContainerFactoryPluginInte
     });
     foreach ($fields as $field) {
       list(, $field_name) = explode(':', $field, 2);
-      /** @var \Drupal\Core\Field\FieldItemInterface $field_item */
+      /** @var FieldItemInterface $field_item */
       foreach ($entity->{$field_name} as $field_item) {
         $recipients[] = $this->getEmailFromFieldItem($field_item);
       }
@@ -220,7 +220,7 @@ class EmailField extends RecipientTypeBase implements ContainerFactoryPluginInte
   /**
    * Determines if an entity type has been marked as moderatable.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   An entity type object.
    *
    * @return bool
diff --git a/src/Plugin/RecipientType/LastRevisionAuthor.php b/src/Plugin/RecipientType/LastRevisionAuthor.php
index 86d8031..28836d1 100644
--- a/src/Plugin/RecipientType/LastRevisionAuthor.php
+++ b/src/Plugin/RecipientType/LastRevisionAuthor.php
@@ -24,7 +24,7 @@ class LastRevisionAuthor extends RecipientTypeBase implements ContainerFactoryPl
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -39,7 +39,7 @@ class LastRevisionAuthor extends RecipientTypeBase implements ContainerFactoryPl
   /**
    * Sets entity type manager.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
    *
    * @return $this
diff --git a/src/Plugin/RecipientType/Role.php b/src/Plugin/RecipientType/Role.php
index d626a08..1ece45d 100644
--- a/src/Plugin/RecipientType/Role.php
+++ b/src/Plugin/RecipientType/Role.php
@@ -29,7 +29,7 @@ class Role extends RecipientTypeBase implements ContainerFactoryPluginInterface
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -42,7 +42,7 @@ class Role extends RecipientTypeBase implements ContainerFactoryPluginInterface
    *   The plugin ID.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Plugin/RecipientTypeInterface.php b/src/Plugin/RecipientTypeInterface.php
index 0bb3bd4..48abce6 100644
--- a/src/Plugin/RecipientTypeInterface.php
+++ b/src/Plugin/RecipientTypeInterface.php
@@ -44,7 +44,7 @@ interface RecipientTypeInterface extends ConfigurableInterface, PluginInspection
    *
    * @param array $form
    *   A minimally prepopulated form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The state of the (entire) configuration form.
    *
    * @return array
@@ -56,9 +56,9 @@ interface RecipientTypeInterface extends ConfigurableInterface, PluginInspection
   /**
    * Returns email address(s) matching this recipient type's configuration.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity being transitioned.
-   * @param \Drupal\workbench_email\TemplateInterface $template
+   * @param TemplateInterface $template
    *   Template being used.
    */
   public function prepareRecipients(ContentEntityInterface $entity, TemplateInterface $template);
diff --git a/src/QueuedEmail.php b/src/QueuedEmail.php
index 40e604b..6398900 100644
--- a/src/QueuedEmail.php
+++ b/src/QueuedEmail.php
@@ -10,7 +10,7 @@ class QueuedEmail {
   /**
    * Template to use.
    *
-   * @var \Drupal\workbench_email\TemplateInterface
+   * @var TemplateInterface
    */
   protected $template;
 
@@ -31,7 +31,7 @@ class QueuedEmail {
   /**
    * Constructs a new QueuedEmail object.
    *
-   * @param \Drupal\workbench_email\TemplateInterface $template
+   * @param TemplateInterface $template
    *   Template to use.
    * @param string $uuid
    *   Entity to use for token replacement.
@@ -47,7 +47,7 @@ class QueuedEmail {
   /**
    * Gets value of template.
    *
-   * @return \Drupal\workbench_email\TemplateInterface
+   * @return TemplateInterface
    *   Value of template
    */
   public function getTemplate() {
diff --git a/src/RecipientTypePluginCollection.php b/src/RecipientTypePluginCollection.php
index 6b282e1..d4d4ab4 100644
--- a/src/RecipientTypePluginCollection.php
+++ b/src/RecipientTypePluginCollection.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\workbench_email;
 
+use Drupal\workbench_email\Plugin\RecipientTypeInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Plugin\DefaultLazyPluginCollection;
 
@@ -20,7 +21,7 @@ class RecipientTypePluginCollection extends DefaultLazyPluginCollection {
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\workbench_email\Plugin\RecipientTypeInterface
+   * @return RecipientTypeInterface
    *   The recipient type.
    */
   public function &get($instance_id) {
diff --git a/src/RecipientTypePluginManager.php b/src/RecipientTypePluginManager.php
index c5212a2..5c384ee 100644
--- a/src/RecipientTypePluginManager.php
+++ b/src/RecipientTypePluginManager.php
@@ -23,9 +23,9 @@ class RecipientTypePluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/TemplateHtmlRouteProvider.php b/src/TemplateHtmlRouteProvider.php
index aa67a16..27db809 100644
--- a/src/TemplateHtmlRouteProvider.php
+++ b/src/TemplateHtmlRouteProvider.php
@@ -36,10 +36,10 @@ class TemplateHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ -63,10 +63,10 @@ class TemplateHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the add-form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/TemplateInterface.php b/src/TemplateInterface.php
index 56967af..6efb815 100644
--- a/src/TemplateInterface.php
+++ b/src/TemplateInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\workbench_email;
 
+use Drupal\workbench_email\Plugin\RecipientTypeInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityWithPluginCollectionInterface;
@@ -74,7 +75,7 @@ interface TemplateInterface extends ConfigEntityInterface, EntityWithPluginColle
    * @param string $instance_id
    *   (optional) The ID of a recipient type plugin instance to return.
    *
-   * @return \Drupal\workbench_email\RecipientTypePluginCollection|\Drupal\workbench_email\Plugin\RecipientTypeInterface
+   * @return RecipientTypePluginCollection|RecipientTypeInterface
    *   Either the recipient type collection or a specific recipient type plugin
    *   instance.
    */
@@ -102,7 +103,7 @@ interface TemplateInterface extends ConfigEntityInterface, EntityWithPluginColle
   /**
    * Calculates recipients.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity being sent.
    *
    * @return array
diff --git a/src/Update/UpdateHelper.php b/src/Update/UpdateHelper.php
index f6dfdae..5f24045 100644
--- a/src/Update/UpdateHelper.php
+++ b/src/Update/UpdateHelper.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\workbench_email\Update;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\workbench_email\TemplateInterface;
@@ -15,14 +18,14 @@ class UpdateHelper implements ContainerInjectionInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * ConfigEntityUpdater constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -41,7 +44,7 @@ class UpdateHelper implements ContainerInjectionInterface {
   /**
    * Update helper for migrating from old configuration to recipient plugins.
    *
-   * @param \Drupal\workbench_email\TemplateInterface $template
+   * @param TemplateInterface $template
    *   Template being updated.
    *
    * @return bool
@@ -90,11 +93,11 @@ class UpdateHelper implements ContainerInjectionInterface {
    * @param array $sandbox
    *   Stores information for batch updates.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   When the entity type is not found.
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   When the entity type is not found.
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   If an error occurs during update.
    *
    * @see workbench_email_post_update_move_to_recipient_plugins()
@@ -107,7 +110,7 @@ class UpdateHelper implements ContainerInjectionInterface {
       $sandbox[$sandbox_key]['count'] = count($sandbox[$sandbox_key]['entities']);
     }
 
-    /** @var \Drupal\workbench_email\TemplateInterface $template */
+    /** @var TemplateInterface $template */
     $entities = $storage->loadMultiple(array_splice($sandbox[$sandbox_key]['entities'], 0, 50));
     foreach ($entities as $template) {
       if (self::updateToRecipientPlugin($template)) {
