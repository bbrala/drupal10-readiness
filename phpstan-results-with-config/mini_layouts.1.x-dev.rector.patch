diff --git a/src/Entity/MiniLayout.php b/src/Entity/MiniLayout.php
index 8b73c8e..fe10ccb 100644
--- a/src/Entity/MiniLayout.php
+++ b/src/Entity/MiniLayout.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\mini_layouts\Entity;
 
+use Drupal\layout_builder\Section;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\layout_builder\SectionListInterface;
 use Drupal\layout_builder\SectionStorage\SectionStorageTrait;
@@ -75,7 +76,7 @@ class MiniLayout extends ConfigEntityBase implements SectionListInterface {
   /**
    * Gets the layout sections.
    *
-   * @return \Drupal\layout_builder\Section[]
+   * @return Section[]
    *   A sequentially and numerically keyed array of section objects.
    */
   public function getSections() {
@@ -88,7 +89,7 @@ class MiniLayout extends ConfigEntityBase implements SectionListInterface {
    * Implementations of this method are expected to call array_values() to rekey
    * the list of sections.
    *
-   * @param \Drupal\layout_builder\Section[] $sections
+   * @param Section[] $sections
    *   An array of section objects.
    *
    * @return $this
diff --git a/src/Entity/MiniLayoutStorage.php b/src/Entity/MiniLayoutStorage.php
index 578f214..57bbb34 100644
--- a/src/Entity/MiniLayoutStorage.php
+++ b/src/Entity/MiniLayoutStorage.php
@@ -21,7 +21,7 @@ class MiniLayoutStorage extends ConfigEntityStorage {
 
     /**
      * @var integer $delta
-     * @var \Drupal\layout_builder\Section $section
+     * @var Section $section
      */
     foreach ($record['sections'] as $delta => $section) {
       $record['sections'][$delta] = $section->toArray();
diff --git a/src/Form/MiniLayoutForm.php b/src/Form/MiniLayoutForm.php
index 01d1b7f..1f7f8d6 100644
--- a/src/Form/MiniLayoutForm.php
+++ b/src/Form/MiniLayoutForm.php
@@ -187,7 +187,7 @@ class MiniLayoutForm extends EntityForm {
    * Validate the information entered for the new context.
    *
    * @param $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function formValidateAddRequiredContext($form, FormStateInterface $form_state) {
     $values = $form_state->getValue(['required_context', '_add_new']);
@@ -204,7 +204,7 @@ class MiniLayoutForm extends EntityForm {
    * Submit to add a required context.
    *
    * @param $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function formSubmitAddRequiredContext($form, FormStateInterface $form_state) {
     $rc = $form_state->get('required_context');
@@ -227,7 +227,7 @@ class MiniLayoutForm extends EntityForm {
    * Submit to remove a required context.
    *
    * @param $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function formSubmitRemoveRequiredContext($form, FormStateInterface $form_state) {
     $button = $form_state->getTriggeringElement();
@@ -252,7 +252,7 @@ class MiniLayoutForm extends EntityForm {
    * Ajax callback to reload the required context.
    *
    * @param $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return array
    */
@@ -261,9 +261,9 @@ class MiniLayoutForm extends EntityForm {
   }
 
   /**
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   protected function copyFormValuesToEntity(EntityInterface $entity, array $form, FormStateInterface $form_state) {
     parent::copyFormValuesToEntity($entity, $form, $form_state);
diff --git a/src/Form/MiniLayoutLayoutBuilderForm.php b/src/Form/MiniLayoutLayoutBuilderForm.php
index 13569dd..bc0e1ca 100644
--- a/src/Form/MiniLayoutLayoutBuilderForm.php
+++ b/src/Form/MiniLayoutLayoutBuilderForm.php
@@ -13,12 +13,12 @@ class MiniLayoutLayoutBuilderForm extends EntityForm {
   use PreviewToggleTrait;
 
   /**
-   * @var \Drupal\layout_builder\LayoutTempstoreRepositoryInterface
+   * @var LayoutTempstoreRepositoryInterface
    */
   protected $layoutTempstoreRepository;
 
   /**
-   * @var \Drupal\layout_builder\SectionStorageInterface
+   * @var SectionStorageInterface
    */
   protected $sectionStorage;
 
@@ -109,7 +109,7 @@ class MiniLayoutLayoutBuilderForm extends EntityForm {
   /**
    * Retrieves the section storage object.
    *
-   * @return \Drupal\layout_builder\SectionStorageInterface
+   * @return SectionStorageInterface
    *   The section storage for the current form.
    */
   public function getSectionStorage() {
diff --git a/src/Plugin/Block/MiniLayout.php b/src/Plugin/Block/MiniLayout.php
index 7306a81..bdd9636 100644
--- a/src/Plugin/Block/MiniLayout.php
+++ b/src/Plugin/Block/MiniLayout.php
@@ -25,14 +25,14 @@ use Drupal\Core\Plugin\Context\ContextRepositoryInterface;
 class MiniLayout extends BlockBase implements ContextAwarePluginInterface, ContainerFactoryPluginInterface {
 
   /**
-   * @var \Drupal\layout_builder\SectionStorage\SectionStorageManagerInterface
+   * @var SectionStorageManagerInterface
    */
   protected $sectionStorageManager;
 
   /**
    * The context repository service.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;
 
diff --git a/src/Plugin/Deriver/MiniLayoutBlockDeriver.php b/src/Plugin/Deriver/MiniLayoutBlockDeriver.php
index 5d3c471..a8434cd 100644
--- a/src/Plugin/Deriver/MiniLayoutBlockDeriver.php
+++ b/src/Plugin/Deriver/MiniLayoutBlockDeriver.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\mini_layouts\Plugin\Deriver;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\Context\ContextDefinition;
@@ -11,7 +13,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class MiniLayoutBlockDeriver extends DeriverBase implements ContainerDeriverInterface {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -27,7 +29,7 @@ class MiniLayoutBlockDeriver extends DeriverBase implements ContainerDeriverInte
   /**
    * MiniLayoutBlockDeriver constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
     $this->entityTypeManager = $entity_type_manager;
@@ -37,8 +39,8 @@ class MiniLayoutBlockDeriver extends DeriverBase implements ContainerDeriverInte
    * @param array $base_plugin_definition
    *
    * @return array
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getDerivativeDefinitions($base_plugin_definition) {
     if (!empty($this->derivatives)) {
diff --git a/src/Plugin/SectionStorage/MiniLayoutSectionStorage.php b/src/Plugin/SectionStorage/MiniLayoutSectionStorage.php
index c926b2c..1ce7e5a 100644
--- a/src/Plugin/SectionStorage/MiniLayoutSectionStorage.php
+++ b/src/Plugin/SectionStorage/MiniLayoutSectionStorage.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\mini_layouts\Plugin\SectionStorage;
 
+use Drupal\mini_layouts\Entity\MiniLayout;
+use Drupal\layout_builder\SectionListInterface;
+use Drupal\Core\Plugin\Context\ContextInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
 use Drupal\Core\Config\Entity\ThirdPartySettingsInterface;
@@ -35,17 +38,17 @@ use Symfony\Component\Routing\RouteCollection;
 class MiniLayoutSectionStorage extends SectionStorageBase implements ContainerFactoryPluginInterface, ThirdPartySettingsInterface {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityBundleInfo;
 
   /**
-   * @var \Drupal\layout_builder\Entity\SampleEntityGeneratorInterface
+   * @var SampleEntityGeneratorInterface
    */
   protected $sampleEntityGenerator;
 
@@ -74,7 +77,7 @@ class MiniLayoutSectionStorage extends SectionStorageBase implements ContainerFa
   /**
    * Get the mini layout entity.
    *
-   * @return \Drupal\mini_layouts\Entity\MiniLayout
+   * @return MiniLayout
    */
   protected function getMiniLayout() {
     return $this->getContextValue('display');
@@ -83,7 +86,7 @@ class MiniLayoutSectionStorage extends SectionStorageBase implements ContainerFa
   /**
    * Gets the section list.
    *
-   * @return \Drupal\layout_builder\SectionListInterface
+   * @return SectionListInterface
    *   The section list.
    */
   protected function getSectionList() {
@@ -106,7 +109,7 @@ class MiniLayoutSectionStorage extends SectionStorageBase implements ContainerFa
    * @param string $id
    *   The storage ID, see ::getStorageId().
    *
-   * @return \Drupal\layout_builder\SectionListInterface
+   * @return SectionListInterface
    *   The section list.
    *
    * @throws \InvalidArgumentException
@@ -131,7 +134,7 @@ class MiniLayoutSectionStorage extends SectionStorageBase implements ContainerFa
    * \Drupal\layout_builder\Routing\LayoutBuilderRoutesTrait is provided for the
    * typical use case of building a standard Layout Builder UI.
    *
-   * @param \Symfony\Component\Routing\RouteCollection $collection
+   * @param RouteCollection $collection
    *   The route collection.
    *
    * @see \Drupal\Core\Routing\RoutingEvents::ALTER
@@ -162,7 +165,7 @@ class MiniLayoutSectionStorage extends SectionStorageBase implements ContainerFa
   /**
    * Gets the URL used when redirecting away from the Layout Builder UI.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The URL object.
    */
   public function getRedirectUrl() {
@@ -178,7 +181,7 @@ class MiniLayoutSectionStorage extends SectionStorageBase implements ContainerFa
    *   (optional) The link relationship type, for example: 'view' or 'disable'.
    *   Defaults to 'view'.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The URL object.
    */
   public function getLayoutBuilderUrl($rel = 'view') {
@@ -267,7 +270,7 @@ class MiniLayoutSectionStorage extends SectionStorageBase implements ContainerFa
    * @param array $defaults
    *   The route defaults array.
    *
-   * @return \Drupal\Core\Plugin\Context\ContextInterface[]
+   * @return ContextInterface[]
    *   The available plugin contexts.
    *
    * @see \Drupal\Core\ParamConverter\ParamConverterInterface::convert()
@@ -307,7 +310,7 @@ class MiniLayoutSectionStorage extends SectionStorageBase implements ContainerFa
   /**
    * Determines if this section storage is applicable for the current contexts.
    *
-   * @param \Drupal\Core\Cache\RefinableCacheableDependencyInterface $cacheability
+   * @param RefinableCacheableDependencyInterface $cacheability
    *   Refinable cacheability object, typically provided by the section storage
    *   manager. When implementing this method, populate $cacheability with any
    *   information that affects whether this storage is applicable.
