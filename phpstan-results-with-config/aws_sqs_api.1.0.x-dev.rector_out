modules/contrib/aws_sqs_api/src/AwsSqsQueueItem.php
modules/contrib/aws_sqs_api/src/Controller/QueueList.php
modules/contrib/aws_sqs_api/src/Event/AwsClientConfigEvent.php
modules/contrib/aws_sqs_api/src/Event/SqsQueueConfigEvent.php
modules/contrib/aws_sqs_api/src/EventSubscriber/SqsQueueCreate/SetFromGlobalDefaults.php
modules/contrib/aws_sqs_api/src/EventSubscriber/SqsQueueCreate/SetFromPlugin.php
modules/contrib/aws_sqs_api/src/EventSubscriber/SqsQueueCreate/SetFromQueueConfig.php
modules/contrib/aws_sqs_api/src/EventSubscriber/SqsQueueCreate/SetHttpHandler.php
modules/contrib/aws_sqs_api/src/Form/ConfigureQueueForm.php
modules/contrib/aws_sqs_api/src/Form/FormOptionsTrait.php
modules/contrib/aws_sqs_api/src/Form/GlobalDefaultsConfigurationForm.php
modules/contrib/aws_sqs_api/src/Form/PurgeQueueForm.php
modules/contrib/aws_sqs_api/src/Queue/AwsSqsQueue.php
modules/contrib/aws_sqs_api/src/Queue/Configuration.php
modules/contrib/aws_sqs_api/src/Queue/DrupalQueueInterfaceImplementationTrait.php
modules/contrib/aws_sqs_api/src/Routing/ParamConverter/QueueConverter.php
modules/contrib/aws_sqs_api/src/Service/AwsClientFactory.php
modules/contrib/aws_sqs_api/src/Service/AwsInformation.php
modules/contrib/aws_sqs_api/src/Service/AwsSqsQueueFactory.php
modules/contrib/aws_sqs_api/src/Service/DrupalSqsQueueInformation.php

15 files with changes
=====================

1) modules/contrib/aws_sqs_api/src/Service/DrupalSqsQueueInformation.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The settings object.
    *
-   * @var \Drupal\Core\Site\Settings
+   * @var Settings
    */
   protected $settings;

@@ @@
    *
    * This is used to fetch the queue worker plugins and definitions.
    *
-   * @var \Drupal\Core\Queue\QueueWorkerManagerInterface
+   * @var QueueWorkerManagerInterface
    */
   protected $queueWorkerManager;

@@ @@
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Site\Settings $settings
+   * @param Settings $settings
    *   The Drupal settings service.
-   * @param \Drupal\Core\Queue\QueueWorkerManagerInterface $queue_worker_manager
+   * @param QueueWorkerManagerInterface $queue_worker_manager
    *   Queue worker manager service, to load the plugin definitions.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher
+   * @param EventDispatcherInterface $dispatcher
    *   The Symfony event dispatcher.
    */
   public function __construct(Settings $settings, QueueWorkerManagerInterface $queue_worker_manager, EventDispatcherInterface $dispatcher) {
@@ @@
   /**
    * Get the config definition for a particular queue.
    *
-   * @return \Drupal\aws_sqs_api\Queue\Configuration
+   * @return Configuration
    *   A queue configuration definition.
    */
   public function getDefinition($name) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/aws_sqs_api/src/Service/AwsSqsQueueFactory.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\aws_sqs_api\Service;

+use Psr\Log\LoggerInterface;
+use Drupal\aws_sqs_api\Queue\Configuration;
 use Drupal\aws_sqs_api\Queue\AwsSqsQueue;
 use Drupal\Core\Logger\LoggerChannelFactory;
 use Drupal\serialization\Encoder\JsonEncoder;
@@ @@
   /**
    * Drupal queue information service.
    *
-   * @var \Drupal\aws_sqs_api\Service\DrupalSqsQueueInformation
+   * @var DrupalSqsQueueInformation
    */
   protected $drupalQueueInfoService;

@@ @@
   /**
    * Drupal watchdog logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Drupal JSON serializer service.
    *
-   * @var \Drupal\serialization\Encoder\JsonEncoder
+   * @var JsonEncoder
    */
   protected $serializerJson;

@@ @@
   /**
    * Drupal XML serializer service.
    *
-   * @var \Drupal\serialization\Encoder\XmlEncoder
+   * @var XmlEncoder
    */
   protected $serializerXml;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\aws_sqs_api\Service\DrupalSqsQueueInformation $queue_info
+   * @param DrupalSqsQueueInformation $queue_info
    *   Queue information service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactory $logger_factory
+   * @param LoggerChannelFactory $logger_factory
    *   Logger factory.
-   * @param \Drupal\serialization\Encoder\JsonEncoder $serializer_json
+   * @param JsonEncoder $serializer_json
    *   Serializer service for JSON.
-   * @param \Drupal\serialization\Encoder\XmlEncoder $serializer_xml
+   * @param XmlEncoder $serializer_xml
    *   Serializer service for XML.
    */
   public function __construct(
@@ @@
    *   Return an AwsSqsQueue object.
    */
   public function get($name) {
-    /** @var \Drupal\aws_sqs_api\Queue\Configuration */
+    /** @var Configuration */
     $configuration = $this->drupalQueueInfoService->getDefinition($name);

     $queue = new AwsSqsQueue($configuration);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/aws_sqs_api/src/Service/AwsInformation.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\aws_sqs_api\Service;

+use Aws\Result;
 /**
  * Retrieve information from AWS about available regions and queues.
  */
@@ @@
   /**
    * AWS client factory service.
    *
-   * @var \Drupal\aws_sqs_api\Service\AwsClientFactory
+   * @var AwsClientFactory
    */
   protected $clientFactory;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\aws_sqs_api\Service\AwsClientFactory $client_factory
+   * @param AwsClientFactory $client_factory
    *   The client factory service.
    */
   public function __construct(AwsClientFactory $client_factory) {
@@ @@
     $args = $region ? ['region' => $region] : [];
     $client = $this->clientFactory->sqsClient($args);

-    /** @var \Aws\Result */
+    /** @var Result */
     $result = $client->listQueues([]);

     if ($urls = $result->get('QueueUrls')) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/aws_sqs_api/src/Service/AwsClientFactory.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * Constructor.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher
+   * @param EventDispatcherInterface $dispatcher
    *   The Symfony event dispatcher.
    */
   public function __construct(EventDispatcherInterface $dispatcher) {
@@ @@
    *   (optional) Default arguments to pass to the Ec2Client constructor.
    *   Arguments may be altered by the configuration event.
    *
-   * @return \Aws\Ec2\Ec2Client
+   * @return Ec2Client
    *   The EC2 client.
    */
   public function ec2Client(array $args = []) {
@@ @@
    *   (optional) Default arguments to pass to the SqsClient constructor.
    *   Arguments may be altered by the configuration event.
    *
-   * @return \Aws\Sqs\SqsClient
+   * @return SqsClient
    *   The SQS client.
    */
   public function sqsClient(array $args = []) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/aws_sqs_api/src/Routing/ParamConverter/QueueConverter.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The queue factory service.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;

@@ @@
   /**
    * Constructs a new paramater upcaster for queue IDs.
    *
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   The queue factory service..
    */
   public function __construct(QueueFactory $queue_factory) {
@@ @@
    */
   public function convert($value, $definition, $name, array $defaults) {
     if (!empty($value) && is_string($value)) {
-      /** @var \Drupal\aws_sqs_api\Queue\AwsSqsQueue */
+      /** @var AwsSqsQueue */
       if ($queue = $this->queueFactory->get($value)) {
         if ($queue instanceof AwsSqsQueue) {
           return $queue;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/aws_sqs_api/src/Queue/AwsSqsQueue.php:79

    ---------- begin diff ----------
@@ @@
   /**
    * Configuration for this queue implementation.
    *
-   * @var \Drupal\aws_sqs_api\Queue\Configuration
+   * @var Configuration
    */
   protected $queueConfiguration;

@@ @@
   /**
    * Drupal watchdog logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Create a Drupal queue class to integrate with AWS SQS.
    *
-   * @param \Drupal\aws_sqs_api\Queue\Configuration $config
+   * @param Configuration $config
    *   The configuration properties for this queue.
    */
   public function __construct(Configuration $config) {
@@ @@
   /**
    * Set the serializer service for JSON.
    *
-   * @param \Drupal\serialization\Encoder\JsonEncoder $serializer
+   * @param JsonEncoder $serializer
    *   The JSON serializer service.
    */
   public function setSerializerJson(JsonEncoder $serializer) {
@@ @@
   /**
    * Set the serializer service for XML.
    *
-   * @param \Drupal\serialization\Encoder\XmlEncoder $serializer
+   * @param XmlEncoder $serializer
    *   The XML serializer service.
    */
   public function setSerializerXml(XmlEncoder $serializer) {
@@ @@
   /**
    * Set the logger service.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger service.
    */
   public function setLogger(LoggerInterface $logger) {
@@ @@
   /**
    * Get the configuration object.
    *
-   * @return \Drupal\aws_sqs_api\Queue\Configuration
+   * @return Configuration
    *   The configuration object.
    */
   public function getConfiguration() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/aws_sqs_api/src/Form/PurgeQueueForm.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * AWS SQS queue implementation.
    *
-   * @var \Drupal\aws_sqs_api\Queue\AwsSqsQueue
+   * @var AwsSqsQueue
    */
   protected $queue;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/aws_sqs_api/src/Form/GlobalDefaultsConfigurationForm.php:27

    ---------- begin diff ----------
@@ @@
    *
    * This is used to query a list of regions.
    *
-   * @var \Drupal\aws_sqs_api\Service\AwsInformation
+   * @var AwsInformation
    */
   protected $awsInformation;

@@ @@
   /**
    * Construct a configuration form for SQS defaults.
    *
-   * @param \Drupal\aws_sqs_api\Service\AwsInformation $aws_information
+   * @param AwsInformation $aws_information
    *   AWS information service.
    */
   public function __construct(AwsInformation $aws_information) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/aws_sqs_api/src/Form/ConfigureQueueForm.php:28

    ---------- begin diff ----------
@@ @@
    *
    * This is used to query a list of regions.
    *
-   * @var \Drupal\aws_sqs_api\Service\AwsInformation
+   * @var AwsInformation
    */
   protected $awsInformation;

@@ @@
   /**
    * Construct a configuration form for SQS defaults.
    *
-   * @param \Drupal\aws_sqs_api\Service\AwsInformation $aws_information
+   * @param AwsInformation $aws_information
    *   AWS information service.
    */
   public function __construct(AwsInformation $aws_information) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/aws_sqs_api/src/EventSubscriber/SqsQueueCreate/SetHttpHandler.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The http client service.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
    * This ensures the SQS requests are handled by Drupal's HTTP client, so that
    * any client middleware (proxies/logging/etc) are applied.
    *
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   The HTTP client service.
    */
   public function __construct(ClientInterface $http_client) {
@@ @@
   /**
    * Attach the HTTP client handler.
    *
-   * @param \Drupal\aws_sqs_api\Event\SqsQueueConfigEvent $event
+   * @param SqsQueueConfigEvent $event
    *   The SQS queue config auto-discovery event.
    */
   public function configure(SqsQueueConfigEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/aws_sqs_api/src/EventSubscriber/SqsQueueCreate/SetFromQueueConfig.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The config factory service.
    */
   public function __construct(ConfigFactory $config_factory) {
@@ @@
   /**
    * Set the configs according to the global defaults.
    *
-   * @param \Drupal\aws_sqs_api\Event\SqsQueueConfigEvent $event
+   * @param SqsQueueConfigEvent $event
    *   The SQS queue config auto-discovery event.
    */
   public function configure(SqsQueueConfigEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/aws_sqs_api/src/EventSubscriber/SqsQueueCreate/SetFromPlugin.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\aws_sqs_api\Event\SqsQueueConfigEvent $event
+   * @param SqsQueueConfigEvent $event
    *   The SQS queue config auto-discovery event.
    */
   public function configure(SqsQueueConfigEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/aws_sqs_api/src/EventSubscriber/SqsQueueCreate/SetFromGlobalDefaults.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\aws_sqs_api\EventSubscriber\SqsQueueCreate;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\aws_sqs_api\Event\SqsQueueConfigEvent;
 use Drupal\aws_sqs_api\Form\GlobalDefaultsConfigurationForm;
 use Drupal\aws_sqs_api\Queue\AwsSqsQueue;
@@ @@
   /**
    * The default config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $defaultConfig;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The config factory service.
    */
   public function __construct(ConfigFactory $config_factory) {
@@ @@
   /**
    * Set the configs according to the global defaults.
    *
-   * @param \Drupal\aws_sqs_api\Event\SqsQueueConfigEvent $event
+   * @param SqsQueueConfigEvent $event
    *   The SQS queue config auto-discovery event.
    */
   public function configure(SqsQueueConfigEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/aws_sqs_api/src/Event/SqsQueueConfigEvent.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * Queue configuration definition.
    *
-   * @var \Drupal\aws_sqs_api\Queue\Configuration
+   * @var Configuration
    */
   protected $config;

@@ @@
   /**
    * Set the configuration definition.
    *
-   * @param \Drupal\aws_sqs_api\Queue\Configuration $config
+   * @param Configuration $config
    *   The queue configuration definition.
    */
   public function setConfiguration(Configuration $config) {
@@ @@
   /**
    * Get the configuration definition.
    *
-   * @return \Drupal\aws_sqs_api\Queue\Configuration
+   * @return Configuration
    *   The queue configuration definition.
    */
   public function getConfiguration() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/aws_sqs_api/src/Controller/QueueList.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The Drupal SQS queue information service.
    *
-   * @var \Drupal\aws_sqs_api\Service\DrupalSqsQueueInformation
+   * @var DrupalSqsQueueInformation
    */
   protected $sqsQueueInformation;

@@ @@
   /**
    * The queue factory service.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\aws_sqs_api\Service\DrupalSqsQueueInformation $info_svc
+   * @param DrupalSqsQueueInformation $info_svc
    *   The AWS information service.
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   The queue factory service.
    */
   public function __construct(DrupalSqsQueueInformation $info_svc, QueueFactory $queue_factory) {
@@ @@
    *
    * @todo Add 'Revert overrides' option.
    *
-   * @param \Drupal\aws_sqs_api\Queue\AwsSqsQueue $queue
+   * @param AwsSqsQueue $queue
    *   The queue.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 15 files have been changed by Rector                                      

