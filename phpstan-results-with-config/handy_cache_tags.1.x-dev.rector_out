modules/contrib/handy_cache_tags/handy_cache_tags.module
modules/contrib/handy_cache_tags/src/HandyCacheTagsHandler.php
modules/contrib/handy_cache_tags/src/HandyCacheTagsManager.php
modules/contrib/handy_cache_tags/tests/src/Unit/CacheClearTest.php
modules/contrib/handy_cache_tags/tests/src/Unit/HandyCacheTagsBase.php
modules/contrib/handy_cache_tags/tests/src/Unit/TagNamesTest.php

3 files with changes
====================

1) modules/contrib/handy_cache_tags/src/HandyCacheTagsManager.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Creates cache tags from entities.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   An entity to use.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/handy_cache_tags/src/HandyCacheTagsHandler.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Handy cache tags manager service.
    *
-   * @var \Drupal\handy_cache_tags\HandyCacheTagsManager
+   * @var HandyCacheTagsManager
    */
   protected $manager;

@@ @@
     // If the entity is a field config, we want to clear the cache for the
     // potential entities it affects.
     if ($entity instanceof FieldStorageConfig) {
-      /** @var \Drupal\field\Entity\FieldStorageConfig $field_storage_config */
+      /** @var FieldStorageConfig $field_storage_config */
       $field_storage_config = $entity;
       Cache::invalidateTags(([
         // Clear the cache of the entity type (like node) the field belongs to,
@@ @@
       ]));
     }
     if ($entity instanceof FieldConfig) {
-      /** @var \Drupal\field\Entity\FieldConfig $field_config */
+      /** @var FieldConfig $field_config */
       $field_config = $entity;
       $entity_type = $field_config->getTargetEntityTypeId();
       Cache::invalidateTags([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/handy_cache_tags/handy_cache_tags.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\handy_cache_tags\HandyCacheTagsHandler;
+use Drupal\handy_cache_tags\HandyCacheTagsManager;
 /**
  * @file
  * The module file for handy cache tags.
@@ @@
  * Helper to invalidate caches based on an entity.
  */
 function _handy_cache_tags_clear_entity_tags(EntityInterface $entity) {
-  /** @var \Drupal\handy_cache_tags\HandyCacheTagsHandler $handler */
+  /** @var HandyCacheTagsHandler $handler */
   $handler = \Drupal::service('handy_cache_tags.handler');
   $handler->invalidateEntity($entity);
 }
@@ @@
  * @see https://www.drupal.org/project/handy_cache_tags/issues/2939178
  */
 function handy_cache_tags_get_entity_tags(EntityInterface $entity) {
-  /** @var \Drupal\handy_cache_tags\HandyCacheTagsManager $manager */
+  /** @var HandyCacheTagsManager $manager */
   $manager = \Drupal::service('handy_cache_tags.manager');
   return $manager->getEntityTags($entity);
 }
@@ @@
  * @see https://www.drupal.org/project/handy_cache_tags/issues/2939178
  */
 function handy_cache_tags_get_entity_type_tag_from_entity(EntityInterface $entity) {
-  /** @var \Drupal\handy_cache_tags\HandyCacheTagsManager $manager */
+  /** @var HandyCacheTagsManager $manager */
   $manager = \Drupal::service('handy_cache_tags.manager');
   return $manager->getEntityTypeTagFromEntity($entity);
 }
@@ @@
  * @see https://www.drupal.org/project/handy_cache_tags/issues/2939178
  */
 function handy_cache_tags_get_tag($type) {
-  /** @var \Drupal\handy_cache_tags\HandyCacheTagsManager $manager */
+  /** @var HandyCacheTagsManager $manager */
   $manager = \Drupal::service('handy_cache_tags.manager');
   return $manager->getTag($type);
 }
@@ @@
  * @see https://www.drupal.org/project/handy_cache_tags/issues/2939178
  */
 function handy_cache_tags_get_bundle_tag_from_entity(EntityInterface $entity) {
-  /** @var \Drupal\handy_cache_tags\HandyCacheTagsManager $manager */
+  /** @var HandyCacheTagsManager $manager */
   $manager = \Drupal::service('handy_cache_tags.manager');
   return $manager->getBundleTagFromEntity($entity);
 }
@@ @@
  * @see https://www.drupal.org/project/handy_cache_tags/issues/2939178
  */
 function handy_cache_tags_get_bundle_tag($entity_type, $bundle) {
-  /** @var \Drupal\handy_cache_tags\HandyCacheTagsManager $manager */
+  /** @var HandyCacheTagsManager $manager */
   $manager = \Drupal::service('handy_cache_tags.manager');
   return $manager->getBundleTag($entity_type, $bundle);
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 3 files have been changed by Rector                                       

