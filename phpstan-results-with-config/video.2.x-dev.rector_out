modules/contrib/video/modules/video_transcode/src/Annotation/Transcoder.php
modules/contrib/video/modules/video_transcode/src/Controller/PresetListBuilder.php
modules/contrib/video/modules/video_transcode/src/Controller/TranscodeJobListBuilder.php
modules/contrib/video/modules/video_transcode/src/Entity/Preset.php
modules/contrib/video/modules/video_transcode/src/Entity/TranscodeJob.php
modules/contrib/video/modules/video_transcode/src/Form/PresetAddForm.php
modules/contrib/video/modules/video_transcode/src/Form/PresetDeleteForm.php
modules/contrib/video/modules/video_transcode/src/Form/PresetEditForm.php
modules/contrib/video/modules/video_transcode/src/Form/PresetFormBase.php
modules/contrib/video/modules/video_transcode/src/Form/TranscodeJobDeleteForm.php
modules/contrib/video/modules/video_transcode/src/Form/TranscodeJobForm.php
modules/contrib/video/modules/video_transcode/src/Form/TranscodeJobSettingsForm.php
modules/contrib/video/modules/video_transcode/src/Plugin/Field/FieldWidget/VideoUploadTranscodeWidget.php
modules/contrib/video/modules/video_transcode/src/Plugin/video/Transcoder/Ffmpeg.php
modules/contrib/video/modules/video_transcode/src/PresetAccessController.php
modules/contrib/video/modules/video_transcode/src/TranscodeJobAccessControlHandler.php
modules/contrib/video/modules/video_transcode/src/TranscodeJobInterface.php
modules/contrib/video/modules/video_transcode/src/TranscoderBase.php
modules/contrib/video/modules/video_transcode/src/TranscoderInterface.php
modules/contrib/video/modules/video_transcode/src/TranscoderManager.php
modules/contrib/video/modules/video_transcode/video_transcode.install
modules/contrib/video/modules/video_transcode/video_transcode.module
modules/contrib/video/src/Annotation/VideoEmbeddableProvider.php
modules/contrib/video/src/Plugin/Field/FieldFormatter/VideoEmbedPlayerFormatter.php
modules/contrib/video/src/Plugin/Field/FieldFormatter/VideoEmbedThumbnailFormatter.php
modules/contrib/video/src/Plugin/Field/FieldFormatter/VideoPlayerFormatter.php
modules/contrib/video/src/Plugin/Field/FieldFormatter/VideoPlayerFormatterBase.php
modules/contrib/video/src/Plugin/Field/FieldFormatter/VideoPlayerListFormatter.php
modules/contrib/video/src/Plugin/Field/FieldFormatter/VideoUrlFormatter.php
modules/contrib/video/src/Plugin/Field/FieldType/VideoItem.php
modules/contrib/video/src/Plugin/Field/FieldWidget/VideoEmbedWidget.php
modules/contrib/video/src/Plugin/Field/FieldWidget/VideoUploadWidget.php
modules/contrib/video/src/Plugin/migrate/cckfield/VideoItem.php
modules/contrib/video/src/Plugin/video/Provider/Dailymotion.php
modules/contrib/video/src/Plugin/video/Provider/Facebook.php
modules/contrib/video/src/Plugin/video/Provider/Instagram.php
modules/contrib/video/src/Plugin/video/Provider/Vimeo.php
modules/contrib/video/src/Plugin/video/Provider/Vine.php
modules/contrib/video/src/Plugin/video/Provider/YouTube.php
modules/contrib/video/src/ProviderManager.php
modules/contrib/video/src/ProviderManagerInterface.php
modules/contrib/video/src/ProviderPluginBase.php
modules/contrib/video/src/ProviderPluginInterface.php
modules/contrib/video/src/StreamWrapper/DailymotionStream.php
modules/contrib/video/src/StreamWrapper/FacebookStream.php
modules/contrib/video/src/StreamWrapper/InstagramStream.php
modules/contrib/video/src/StreamWrapper/VideoRemoteStreamWrapper.php
modules/contrib/video/src/StreamWrapper/VimeoStream.php
modules/contrib/video/src/StreamWrapper/VineStream.php
modules/contrib/video/src/StreamWrapper/YoutubeStream.php
modules/contrib/video/tests/src/Kernel/VideoItemSerializationTest.php
modules/contrib/video/video.module

21 files with changes
=====================

1) modules/contrib/video/video.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\video\ProviderManager;
 /**
  * @file
  * Exposes global functionality for video fields.
@@ @@
 function video_file_access(EntityInterface $entity, $operation, AccountInterface $account) {
   switch ($operation) {
     case 'view':
-      /** @var \Drupal\video\ProviderManager $provider_manager */
+      /** @var ProviderManager $provider_manager */
       $provider_manager = \Drupal::service('video.provider_manager');
       $stream_wrappers = [];
       foreach ($provider_manager->getDefinitions() as $definition) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/video/tests/src/Kernel/VideoItemSerializationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\video\Kernel;

+use Symfony\Component\Serializer\SerializerInterface;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\entity_test\Entity\EntityTest;
@@ @@
   /**
    * The serializer service.
    *
-   * @var \Symfony\Component\Serializer\SerializerInterface
+   * @var SerializerInterface
    */
   protected $serializer;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('user');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/video/src/ProviderPluginBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\video;

+use Drupal\file\Entity\File;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Component\Render\PlainTextOutput;
@@ @@
   /**
    * File object to handle
    *
-   * @var Drupal\file\Entity\File $file
+   * @var File $file
    */
   protected $file;

@@ @@
   /**
    * An http client.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
    *
    * @param string $configuration
    *   The configuration of the plugin.
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *    An HTTP client.
    *
    * @throws \Exception
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/video/src/ProviderManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\video;

+use Drupal\file\Entity\File;
 /**
  * Interface for the class that gathers the provider plugins.
  */
@@ @@
    * @param $user_input
    *   The user input to test against the plugins.
    *
-   * @return \Drupal\video\ProviderPluginInterface|bool
+   * @return ProviderPluginInterface|bool
    *   The relevant plugin or FALSE on failure.
    */
   public function loadApplicableDefinitionMatches(array $definitions, $user_input);
@@ @@
    * @param string $stream
    *   Stream used from the file.
    *
-   * @param \Drupal\file\Entity\File $file
+   * @param File $file
    *   The source file.
    *
    * @param array $data
    *   Source file metadata.
    *
-   * @return \Drupal\video\ProviderPluginInterface|bool
+   * @return ProviderPluginInterface|bool
    *   The loaded plugin.
    */
   public function loadProviderFromStream($stream, $file, $data = []);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/video/src/ProviderManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\video;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Mapper\MapperInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function loadProviderFromStream($stream, $file, $metadata = [], $settings = []) {
     $definitions = $this->getDefinitions();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/video/src/Plugin/Field/FieldWidget/VideoEmbedWidget.php:337

    ---------- begin diff ----------
@@ @@
    *
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function validateFormElement(array &$element, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/video/src/Plugin/Field/FieldType/VideoItem.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\video\Plugin\Field\FieldType;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
     // Generate a file entity.
     $destination = $dirname . '/' . $random->name(10, TRUE) . '.mp4';
     $data = $random->paragraphs(3);
-    $file = file_save_data($data, $destination, FileSystemInterface::EXISTS_ERROR);
+    $file = \Drupal::service('file.repository')->writeData($data, $destination, FileSystemInterface::EXISTS_ERROR);
     $values = [
       'target_id' => $file->id(),
     ];
@@ @@
   /**
    * Gets the entity manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface.
+   * @return EntityTypeManagerInterface .
    */
   protected function getEntityTypeManager() {
     if (!isset($this->entityTypeManager)) {
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/video/src/Plugin/Field/FieldFormatter/VideoUrlFormatter.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, AccountInterface $current_user) {
@@ @@

     // Collect cache tags to be added for each item in the field.
     foreach ($files as $delta => $file) {
-      $video_uri = file_create_url($file->getFileUri());
+      $video_uri = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
       $elements[$delta] = ['#markup' => $video_uri];
     }
     return $elements;
   }
 }
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/video/src/Plugin/Field/FieldFormatter/VideoPlayerListFormatter.php:41

    ---------- begin diff ----------
@@ @@
     // Collect cache tags to be added for each item in the field.
     $video_items = [];
     foreach ($files as $delta => $file) {
-      $video_items[] = file_create_url($file->getFileUri());
+      $video_items[] = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
     }
     $elements[] = [
       '#theme' => 'video_player_formatter',
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/video/src/Plugin/Field/FieldFormatter/VideoPlayerFormatter.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, AccountInterface $current_user) {
@@ @@
     foreach ($files as $delta => $file) {
       $elements[$delta] = [
         '#theme' => 'video_player_formatter',
-        '#items' => [file_create_url($file->getFileUri())],
+        '#items' => [\Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri())],
         '#player_attributes' => $this->getSettings(),
       ];
     }
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/video/src/Plugin/Field/FieldFormatter/VideoEmbedThumbnailFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\video\Plugin\Field\FieldFormatter;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Field\FormatterBase;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The stream wrapper manager.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    * @param $langcode
    *
    * @return array
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityMalformedException
    */
   public function viewElements(FieldItemListInterface $items, $langcode) {
     // load widget settings
@@ @@
         $url = $items->getEntity()->toUrl();
       }
       elseif ($this->getSetting('link_image_to') == static::LINK_PROVIDER) {
-        $url = Url::fromUri(file_create_url($file->getFileUri()));
+        $url = \Drupal::service('file_url_generator')->generate($file->getFileUri());
       }
       $element[$delta] = $provider->renderThumbnail($this->getSetting('image_style'), $url);
     }
@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Third party settings.
-   * @param \Drupal\video\ProviderManagerInterface $provider_manager
+   * @param ProviderManagerInterface $provider_manager
    *   The video embed provider manager.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *`  The stream wrapper manager.
    */
   public function __construct($plugin_id, $plugin_definition, $field_definition, $settings, $label, $view_mode, $third_party_settings, ProviderManagerInterface $provider_manager, StreamWrapperManagerInterface $stream_wrapper_manager) {
    ----------- end diff -----------

Applied rules:
 * FromUriRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/video/src/Plugin/Field/FieldFormatter/VideoEmbedPlayerFormatter.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The embed provider plugin manager.
    *
-   * @var \Drupal\video\ProviderManagerInterface
+   * @var ProviderManagerInterface
    */
   protected $providerManager;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Third party settings.
-   * @param \Drupal\video\ProviderManagerInterface $provider_manager
+   * @param ProviderManagerInterface $provider_manager
    *   The video embed provider manager.
    */
   public function __construct($plugin_id, $plugin_definition, $field_definition, $settings, $label, $view_mode, $third_party_settings, ProviderManagerInterface $provider_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/video/src/Annotation/VideoEmbeddableProvider.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\video\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation (optional)
+   * @var Translation (optional)
    */
   public $description = '';
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


14) modules/contrib/video/modules/video_transcode/src/TranscoderManager.php:20

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations,
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/video/modules/video_transcode/src/TranscoderBase.php:6

    ---------- begin diff ----------
@@ @@

 namespace Drupal\video_transcode;

+use Drupal\file\Entity\File;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use GuzzleHttp\ClientInterface;
@@ @@
   /**
    * File object to transcode
    *
-   * @var Drupal\file\Entity\File $file
+   * @var File $file
    */
   protected $file;
   
@@ @@
   /**
    * An http client.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;
   
@@ @@
    *
    * @param string $configuration
    *   The configuration of the plugin.
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *    An HTTP client.
    *
    * @throws \Exception
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/video/modules/video_transcode/src/Form/PresetFormBase.php:23

    ---------- begin diff ----------
@@ @@
 class PresetFormBase extends EntityForm {

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
    * from the container. We later use this query factory to build an entity
    * query for the exists() method.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
+   * @param EntityTypeManager $entity_type_manager
    *   An entity query factory for the preset entity type.
    */
   public function __construct(EntityTypeManager $entity_type_manager) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    */
   public function validate(array $form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    */
   public function save(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/video/modules/video_transcode/src/Form/PresetEditForm.php:21

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/video/modules/video_transcode/src/Form/PresetDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\video_transcode\Form;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Url;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
    * delete forms, this is typically the route that points at the list
    * controller.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The URL to go to if the user cancels the deletion.
    */
   public function getCancelUrl() {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     // Delete the entity.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/video/modules/video_transcode/src/Form/PresetAddForm.php:21

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/video/modules/video_transcode/src/Controller/TranscodeJobListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\video_transcode\Controller;

+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityListBuilder;
@@ @@
   /**
    * The url generator.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;

@@ @@
   /**
    * Constructs a new TranscodeJobListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   The url generator.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, UrlGeneratorInterface $url_generator) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function buildRow(EntityInterface $entity) {
     /* @var $entity \Drupal\video_transcode\Entity\TranscodeJob */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/video/modules/video_transcode/src/Annotation/Transcoder.php:5

    ---------- begin diff ----------
@@ @@

 namespace Drupal\video_transcode\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the transcoder.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation (optional)
+   * @var Translation (optional)
    */
   public $description = '';
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


 [OK] 21 files have been changed by Rector                                      

