modules/contrib/ogmedia/ogmedia_audience_lock/ogmedia_audience_lock.module
modules/contrib/ogmedia/ogmedia_audience_lock/src/AudienceLockHooks.php
modules/contrib/ogmedia/ogmedia_audience_match/ogmedia_audience_match.module
modules/contrib/ogmedia/ogmedia_audience_match/src/Plugin/Validation/Constraint/OgMediaAudienceMatchConstraint.php
modules/contrib/ogmedia/ogmedia_audience_match/src/Plugin/Validation/Constraint/OgMediaAudienceMatchConstraintValidator.php
modules/contrib/ogmedia/ogmedia_entityembed/ogmedia_entityembed.module
modules/contrib/ogmedia/ogmedia_entityembed/src/OGMediaEntityEmbedService.php
modules/contrib/ogmedia/ogmedia_group_stub/ogmedia_group_stub.module
modules/contrib/ogmedia/ogmedia_group_stub/src/GroupStubEntityFormControllerDecorator.php
modules/contrib/ogmedia/ogmedia_group_stub/src/GroupStubFormControllerDecoratorBase.php
modules/contrib/ogmedia/ogmedia_group_stub/src/GroupStubService.php
modules/contrib/ogmedia/ogmedia_helpers/src/OGMediaHelpers.php
modules/contrib/ogmedia/ogmedia_upload_audience/ogmedia_upload_audience.module
modules/contrib/ogmedia/ogmedia_upload_audience/src/UploadAudienceHooks.php
modules/contrib/ogmedia/tests/src/Functional/AdminPageTest.php

13 files with changes
=====================

1) modules/contrib/ogmedia/tests/src/Functional/AdminPageTest.php:32

    ---------- begin diff ----------
@@ @@
   public function testAdminPage() {
     $this->drupalLogin($this->rootUser);
     $this->drupalGet('admin');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // Ensure that the test is not marked as risky because of no assertions.
     // see https://gitlab.com/weitzman/drupal-test-traits/-/commit/82bf5059908f9073b3468cb7313960da72176d9a
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/ogmedia/ogmedia_upload_audience/src/UploadAudienceHooks.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * UploadAudienceHooks constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    * @param \Drupal\og\OgGroupAudienceHelperInterface $groupAudienceHelper
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, OgGroupAudienceHelperInterface $groupAudienceHelper) {
@@ @@
   /**
    * Extract media entities.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *
-   * @return \Drupal\media\MediaInterface[]
+   * @return MediaInterface[]
    */
   private function extractMediaFromFormState(FormStateInterface $formState) {
     $formObject = $formState->getFormObject();
@@ @@
    *
    * @todo Make this more generic.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    */
   private function extractGroupEntityIds(FormStateInterface $formState) {
     $nodeIdList = $formState->get([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/ogmedia/ogmedia_upload_audience/ogmedia_upload_audience.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\ogmedia_upload_audience\UploadAudienceHooks;
 /**
  * @file
  * OGMedia Upload Audience module.
@@ @@
  * Implements hook_form_alter().
  */
 function ogmedia_upload_audience_form_alter(&$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\ogmedia_upload_audience\UploadAudienceHooks $hooks */
+  /** @var UploadAudienceHooks $hooks */
   $hooks = \Drupal::service('ogmedia_upload_audience.hooks');
   $hooks->hookFormAlter($form, $form_state, $form_id);
 }
@@ @@
  * Implements hook_inline_entity_form_entity_form_alter().
  */
 function ogmedia_upload_audience_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
-  /** @var \Drupal\ogmedia_upload_audience\UploadAudienceHooks $hooks */
+  /** @var UploadAudienceHooks $hooks */
   $hooks = \Drupal::service('ogmedia_upload_audience.hooks');
   $hooks->hookInlineEntityFormEntityFormAlter($entity_form, $form_state);
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


4) modules/contrib/ogmedia/ogmedia_helpers/src/OGMediaHelpers.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ogmedia_helpers;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Field\EntityReferenceFieldItemListInterface;
@@ @@
   const GROUPS_INFO = 'ogmedia_groups';

   /**
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   protected $groupAudienceHelper;

   /**
-   * @var \Symfony\Component\Routing\RouterInterface
+   * @var RouterInterface
    */
   protected $router;

   /**
-   * @var \Drupal\Core\PathProcessor\InboundPathProcessorInterface
+   * @var InboundPathProcessorInterface
    */
   protected $inboundPathProcessorManager;

@@ @@
   /**
    * OGMediaHelpers constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param RequestStack $requestStack
+   * @param EntityTypeManagerInterface $entityTypeManager
    * @param \Drupal\og\GroupTypeManagerInterface $groupTypeManager
    * @param \Drupal\og\OgGroupAudienceHelper $groupAudienceHelper
    */
@@ @@
    * ogmedia_helpers.path_processor -> ogmedia_helpers.service ->
    * router.no_access_checks"."
    *
-   * @return \Symfony\Component\Routing\RouterInterface
+   * @return RouterInterface
    */
   public function router(): RouterInterface {
     if (!$this->router) {
@@ @@
   }

   /**
-   * @return \Drupal\Core\PathProcessor\InboundPathProcessorInterface
+   * @return InboundPathProcessorInterface
    */
   public function inboundPathProcessorManager(): InboundPathProcessorInterface {
     if (!$this->inboundPathProcessorManager) {
@@ @@
    * This is an ugly hack to compensate that entity_embed has no API to
    * propagate contextual info.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function prepareGroupsInfoFromReferrer(Request $request) {
     $info = NULL;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/ogmedia/ogmedia_group_stub/src/GroupStubService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ogmedia_group_stub;

+use Drupal\og\OgGroupAudienceHelperInterface;
+use Drupal\Core\TypedData\Exception\MissingDataException;
+use Drupal\content_moderation\Plugin\WorkflowType\ContentModeration;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\content_moderation\Entity\ContentModerationStateInterface;
+use Drupal\Core\Entity\Sql\DefaultTableMapping;
+use Drupal\Core\Url;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\content_moderation\ModerationInformationInterface;
 use Drupal\Core\Access\AccessResult;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The selection plugin manager interface.
    *
-   * @var \Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManagerInterface
+   * @var SelectionPluginManagerInterface
    */
   protected $selectionPluginManager;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $timeService;

@@ @@
   /**
    * The content moderation information service.
    *
-   * @var \Drupal\content_moderation\ModerationInformationInterface|null
+   * @var ModerationInformationInterface|null
    */
   protected $moderationInformation;

@@ @@
   /**
    * Hooks constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
-   * @param \Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManagerInterface $selectionPluginManager
+   * @param EntityTypeManagerInterface $entityTypeManager
+   * @param EntityFieldManagerInterface $entityFieldManager
+   * @param SelectionPluginManagerInterface $selectionPluginManager
    * @param \Drupal\og\OgGroupAudienceHelperInterface $groupAudienceHelper
-   * @param \Drupal\content_moderation\ModerationInformationInterface|null $moderationInformation
+   * @param ModerationInformationInterface|null $moderationInformation
    */
-  public function __construct(EntityTypeManagerInterface $entityTypeManager, EntityFieldManagerInterface $entityFieldManager, SelectionPluginManagerInterface $selectionPluginManager, \Drupal\og\OgGroupAudienceHelperInterface $groupAudienceHelper, TimeInterface $timeService, ModerationInformationInterface $moderationInformation = NULL) {
+  public function __construct(EntityTypeManagerInterface $entityTypeManager, EntityFieldManagerInterface $entityFieldManager, SelectionPluginManagerInterface $selectionPluginManager, OgGroupAudienceHelperInterface $groupAudienceHelper, TimeInterface $timeService, ModerationInformationInterface $moderationInformation = NULL) {
     $this->entityTypeManager = $entityTypeManager;
     $this->entityFieldManager = $entityFieldManager;
     $this->selectionPluginManager = $selectionPluginManager;
@@ @@
   /**
    * Implements hook_entity_prepare_form().
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param $operation
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    */
   public function hookEntityPrepareForm(EntityInterface $entity, $operation, FormStateInterface $form_state) {
     // If we're editing any stub, remove stub mark.
@@ @@
   /**
    * Set workflow state to internal.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    */
   public function setWorkflowStateToStub(ContentEntityInterface $entity) {
     if ($this->moderationInformation) {
@@ @@
   /**
    * Set workflow to initial state.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    */
   public function setWorkflowStateIfStubToInitial(ContentEntityInterface $entity) {
     if ($this->moderationInformation) {
@@ @@
         if ($state === self::STATE_STUB) {
           // ContentModeration changes the method signature :-/ .
           // @see \Drupal\content_moderation\Plugin\WorkflowType\ContentModeration::getInitialState
-          /** @var \Drupal\content_moderation\Plugin\WorkflowType\ContentModeration $workflowType */
+          /** @var ContentModeration $workflowType */
           $workflowType = $workflow->getTypePlugin();
           $initialState = $workflowType->getInitialState($entity)->id();
           $entity->set(self::MODERATION_STATE, $initialState);
@@ @@
   /**
    * Implements hook_cron().
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function hookCron() {
     $this->doGarbageCollection();
@@ @@
   /**
    * Do garbage collection.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   private function doGarbageCollection() {
     if ($this->moderationInformation) {
@@ @@
       $stubStateIds = \Drupal::entityQuery('content_moderation_state')
         ->condition(self::MODERATION_STATE, self::STATE_STUB)
         ->execute();
-      /** @var \Drupal\content_moderation\Entity\ContentModerationStateInterface[] $stubStates */
+      /** @var ContentModerationStateInterface[] $stubStates */
       $stubStates = $this->entityTypeManager->getStorage('content_moderation_state')
         ->loadMultiple($stubStateIds);
       $entityIdsByType = [];
@@ @@
    * For now we leave all stubs in media audience selectors, as they are auto-
    * selected anyway.
    *
-   * @param \Drupal\Core\Database\Query\AlterableInterface $query
+   * @param AlterableInterface $query
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function hookQueryNodeAccessAlter(AlterableInterface $query) {
     $doRemoveStubs = $query instanceof SelectInterface && !$this->isMediaAudienceSelector($query);
@@ @@
   /**
    * Extract base table alias.
    *
-   * @param \Drupal\Core\Database\Query\AlterableInterface $query
+   * @param AlterableInterface $query
    *
    * @return string
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    * @throws \Exception
    */
   private function extractBaseTableAlias(AlterableInterface $query) {
@@ @@
     $base_table = $query->getMetaData('base_table');
     // If the base table is not given, default to one of the node base tables.
     if (!$base_table) {
-      /** @var \Drupal\Core\Entity\Sql\DefaultTableMapping $table_mapping */
+      /** @var DefaultTableMapping $table_mapping */
       $table_mapping = \Drupal::entityTypeManager()->getStorage('node')->getTableMapping();
       $node_base_tables = $table_mapping->getTableNames();

@@ @@
   }

   /**
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *
-   * @return \Drupal\Core\Url
-   * @throws \Drupal\Core\Entity\EntityMalformedException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @return Url
+   * @throws EntityMalformedException
+   * @throws EntityStorageException
    */
   public function makeStubEditUrl(ContentEntityInterface $entity) {
     // @todo Generalize this.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/ogmedia/ogmedia_group_stub/src/GroupStubFormControllerDecoratorBase.php:17

    ---------- begin diff ----------
@@ @@
 abstract class GroupStubFormControllerDecoratorBase extends FormController {

   /**
-   * @var \Drupal\Core\Controller\FormController
+   * @var FormController
    */
   protected $decorated;

@@ @@
   /**
    * GroupStubFormControllerDecoratorBase constructor.
    *
-   * @param \Symfony\Component\HttpKernel\Controller\ArgumentResolverInterface $argument_resolver
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
-   * @param \Drupal\Core\Controller\FormController $decorated
+   * @param ArgumentResolverInterface $argument_resolver
+   * @param FormBuilderInterface $form_builder
+   * @param FormController $decorated
    */
   public function __construct(ArgumentResolverInterface $argument_resolver, FormBuilderInterface $form_builder, FormController $decorated) {
     parent::__construct($argument_resolver, $form_builder);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/ogmedia/ogmedia_group_stub/src/GroupStubEntityFormControllerDecorator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ogmedia_group_stub;

+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\Core\TypedData\Exception\MissingDataException;
+use Drupal\Core\Entity\EntityFormInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Controller\FormController;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormBuilderInterface;
@@ @@
 class GroupStubEntityFormControllerDecorator extends GroupStubFormControllerDecoratorBase {

   /**
-   * @var \Drupal\ogmedia_group_stub\GroupStubService
+   * @var GroupStubService
    */
   protected $groupStubService;

@@ @@
   /**
    * GroupStubFormControllerDecorator constructor.
    *
-   * @param \Symfony\Component\HttpKernel\Controller\ArgumentResolverInterface $argument_resolver
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
-   * @param \Drupal\Core\Controller\FormController $decorated
-   * @param \Drupal\ogmedia_group_stub\GroupStubService $groupStubService
+   * @param ArgumentResolverInterface $argument_resolver
+   * @param FormBuilderInterface $form_builder
+   * @param FormController $decorated
+   * @param GroupStubService $groupStubService
    */
   public function __construct(ArgumentResolverInterface $argument_resolver, FormBuilderInterface $form_builder, FormController $decorated, GroupStubService $groupStubService) {
     parent::__construct($argument_resolver, $form_builder, $decorated);
@@ @@
   /**
    * {@inheritDoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws EntityStorageException
+   * @throws EntityMalformedException
+   * @throws MissingDataException
    *
    * @todo Consider to throw a EnforcedResponseException in hook_form_alter
    *   like \Drupal\Core\Form\FormBuilder::retrieveForm
@@ @@
   public function getContentResult(Request $request, RouteMatchInterface $route_match) {
     // @see \Drupal\Core\Controller\FormController::getContentResult
     $formArg = $this->getFormArgument($route_match);
-    /** @var \Drupal\Core\Entity\EntityFormInterface $formObject */
+    /** @var EntityFormInterface $formObject */
     $formObject = $this->getFormObject($route_match, $formArg);
     $entity = $formObject->getEntity();

@@ @@
     $entityTypeId = $entity->getEntityTypeId();
     $bundleId = $entity->bundle();
     if ($entity->isNew() && Og::isGroup($entityTypeId, $bundleId)) {
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       $stubEditUrl = $this->groupStubService->makeStubEditUrl($entity);
       $redirectToStubEdit = RedirectResponse::create($stubEditUrl->toString());
       return $redirectToStubEdit;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/ogmedia/ogmedia_group_stub/ogmedia_group_stub.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\TypedData\Exception\MissingDataException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\ogmedia_group_stub\GroupStubService;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Database\Query\AlterableInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
 /**
  * Implements hook_entity_prepare_form().
  *
- * @throws \Drupal\Core\TypedData\Exception\MissingDataException
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws MissingDataException
+ * @throws EntityStorageException
  */
 function ogmedia_group_stub_entity_prepare_form(EntityInterface $entity, $operation, FormStateInterface $form_state) {
-  /** @var \Drupal\ogmedia_group_stub\GroupStubService $hooks */
+  /** @var GroupStubService $hooks */
   $hooks = \Drupal::service('ogmedia_group_stub.service');
   $hooks->hookEntityPrepareForm($entity, $operation, $form_state);
 }
@@ @@
 /**
  * Implements hook_cron().
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
+ * @throws EntityStorageException
  */
 function ogmedia_group_stub_cron() {
-  /** @var \Drupal\ogmedia_group_stub\GroupStubService $hooks */
+  /** @var GroupStubService $hooks */
   $hooks = \Drupal::service('ogmedia_group_stub.service');
   $hooks->hookCron();
 }
@@ @@
 /**
  * Implements hook_query_TAG_alter() for node_access.
  *
- * @param \Drupal\Core\Database\Query\AlterableInterface $query
+ * @param AlterableInterface $query
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function ogmedia_group_stub_query_node_access_alter(AlterableInterface $query) {
-  /** @var \Drupal\ogmedia_group_stub\GroupStubService $hooks */
+  /** @var GroupStubService $hooks */
   $hooks = \Drupal::service('ogmedia_group_stub.service');
   $hooks->hookQueryNodeAccessAlter($query);
 }
@@ @@
  * Implements hook_entity_access().
  */
 function ogmedia_group_stub_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
-  /** @var \Drupal\ogmedia_group_stub\GroupStubService $hooks */
+  /** @var GroupStubService $hooks */
   $hooks = \Drupal::service('ogmedia_group_stub.service');
   $hooks->hookEntityAccess($entity, $operation, $account);
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


9) modules/contrib/ogmedia/ogmedia_entityembed/src/OGMediaEntityEmbedService.php:13

    ---------- begin diff ----------
@@ @@
 class OGMediaEntityEmbedService implements EnhancerInterface {

   /**
-   * @var \Drupal\ogmedia_helpers\OGMediaHelpers
+   * @var OGMediaHelpers
    */
   protected $helpers;

@@ @@
   /**
    * OGMediaEntityEmbedService constructor.
    *
-   * @param \Drupal\ogmedia_helpers\OGMediaHelpers $helpers
+   * @param OGMediaHelpers $helpers
    */
   public function __construct(OGMediaHelpers $helpers) {
     $this->helpers = $helpers;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/ogmedia/ogmedia_entityembed/ogmedia_entityembed.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\ogmedia_entityembed\OGMediaEntityEmbedService;
 use Drupal\Core\Form\FormStateInterface;

 /**
@@ @@
  * Implements hook_form_alter().
  */
 function ogmedia_entityembed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\ogmedia_entityembed\OGMediaEntityEmbedService $hooks */
+  /** @var OGMediaEntityEmbedService $hooks */
   $hooks = \Drupal::service('ogmedia_entityembed.service');
   $hooks->hookFormAlter($form, $form_state, $form_id);
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


11) modules/contrib/ogmedia/ogmedia_audience_match/src/Plugin/Validation/Constraint/OgMediaAudienceMatchConstraintValidator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ogmedia_audience_match\Plugin\Validation\Constraint;

+use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Field\EntityReferenceFieldItemListInterface;
 use Drupal\Core\Field\FieldItemInterface;
@@ @@
       $entityAudienceFields = $ogGroupAudienceHelper->getAllGroupAudienceFields($entity->getEntityTypeId(), $entity->bundle());
       $audienceFieldNames = array_keys(array_intersect_key($entityAudienceFields, $mediaAudienceFields));
       foreach ($audienceFieldNames as $fieldName) {
-        /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $entityAudienceField */
+        /** @var EntityReferenceFieldItemListInterface $entityAudienceField */
         $entityAudienceField = $entity->get($fieldName);
-        /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $mediaAudienceField */
+        /** @var EntityReferenceFieldItemListInterface $mediaAudienceField */
         $mediaAudienceField = $mediaEntity->get($fieldName);
         $this->validateMediaAudienceFieldHasAllGroups($fieldItem, $mediaAudienceField, $entityAudienceField->referencedEntities(), $constraint);
       }
@@ @@
       if (isset($groupBundleIds[$entity->getEntityTypeId()][$entity->bundle()])) {
         // @todo Fix this once needed.
         $fieldName = key($mediaAudienceFields);
-        /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $mediaAudienceField */
+        /** @var EntityReferenceFieldItemListInterface $mediaAudienceField */
         $mediaAudienceField = $mediaEntity->get($fieldName);
         $this->validateMediaAudienceFieldHasAllGroups($fieldItem, $mediaAudienceField, [$entity], $constraint);
       }
@@ @@
   }

   /**
-   * @param \Drupal\Core\Field\FieldItemInterface $fieldItem
-   * @param \Drupal\Core\Field\EntityReferenceFieldItemListInterface $mediaAudienceField
-   * @param \Drupal\Core\Entity\EntityInterface[] $entityGroups
-   * @param \Symfony\Component\Validator\Constraint $constraint
+   * @param FieldItemInterface $fieldItem
+   * @param EntityReferenceFieldItemListInterface $mediaAudienceField
+   * @param EntityInterface[] $entityGroups
+   * @param Constraint $constraint
    */
   private function validateMediaAudienceFieldHasAllGroups(FieldItemInterface $fieldItem, EntityReferenceFieldItemListInterface $mediaAudienceField, array $entityGroups, Constraint $constraint): void {
     $mediaGroups = $mediaAudienceField->referencedEntities();
@@ @@
     $mediaGroupIds = array_map(function (EntityInterface $entity) {
       return $entity->id();
     }, $mediaGroups);
-    /** @var \Drupal\Core\Field\FieldItemListInterface $fieldItemList */
+    /** @var FieldItemListInterface $fieldItemList */
     $fieldItemList = $fieldItem->getParent();

     foreach ($entityGroups as $entityGroup) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/ogmedia/ogmedia_audience_lock/src/AudienceLockHooks.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ogmedia_audience_lock;

+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\TypedData\Exception\MissingDataException;
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\Core\Url;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Entity\EntityFormInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * The selection plugin manager interface.
    *
-   * @var \Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManagerInterface
+   * @var SelectionPluginManagerInterface
    */
   protected $selectionPluginManager;

@@ @@
   /**
    * The group stub service, if exists.
    *
-   * @var \Drupal\ogmedia_group_stub\GroupStubService|null
+   * @var GroupStubService|null
    */
   protected $groupStubService;

@@ @@
   /**
    * AudienceLockHooks constructor.
    *
-   * @param \Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManagerInterface $selectionPluginManager
+   * @param SelectionPluginManagerInterface $selectionPluginManager
    * @param \Drupal\og\OgGroupAudienceHelperInterface $groupAudienceHelper
-   * @param \Drupal\ogmedia_group_stub\GroupStubService|null $groupStubService
+   * @param GroupStubService|null $groupStubService
    */
   public function __construct(SelectionPluginManagerInterface $selectionPluginManager, OgGroupAudienceHelperInterface $groupAudienceHelper, GroupStubService $groupStubService = NULL) {
     $this->selectionPluginManager = $selectionPluginManager;
@@ @@
   /**
    * Implements hook_entity_prepare_form().
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param $operation
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws EntityStorageException
+   * @throws MissingDataException
    */
   public function hookEntityPrepareForm(EntityInterface $entity, string $operation, FormStateInterface $form_state) {
     if ($entity->isNew() && !$form_state->get('ogmedia_audience_lock_step2')) {
@@ @@
       $groupAudienceFields = $this->groupAudienceHelper
         ->getAllGroupAudienceFields($entity->getEntityTypeId(), $entity->bundle());
       if ($groupAudienceFields) {
-        /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+        /** @var ContentEntityInterface $entity */
         $form['actions']['ogmedia_audience_lock_step1_next'] = [
           '#type' => 'submit',
           '#value' => $this->t('Next'),
@@ @@

   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityMalformedException
+   * @throws EntityStorageException
    */
   public function step1Next(array &$form, FormStateInterface $form_state) {
     if ($redirectUrl = $this->checkRedirectToStubEdit($form_state)) {
@@ @@
   }

   /**
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
-   * @return \Drupal\Core\Url|null
-   * @throws \Drupal\Core\Entity\EntityMalformedException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @return Url|null
+   * @throws EntityMalformedException
+   * @throws EntityStorageException
    */
   private function checkRedirectToStubEdit(FormStateInterface $form_state) {
     // @todo If someone needs this configurable, make it so.
@@ @@
     if ($shallTryToRedirectToStubEdit) {
       $formObject = $form_state->getFormObject();
       if ($formObject instanceof EntityFormInterface) {
-        /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+        /** @var ContentEntityInterface $entity */
         $entity = $formObject->getEntity();
         $redirectUrl = $this->groupStubService->makeStubEditUrl($entity);
         return $redirectUrl;
@@ @@
   /**
    * Check which group audience fields still have data to enter.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param bool $populate
    *   If true, populate the audience field if user has no choice.
    *
@@ @@
   private function groupAudienceChoices(EntityInterface $entity, $populate = FALSE) {
     $fieldsWithChoice = [];
     foreach ($this->groupAudienceHelper->getAllGroupAudienceFields($entity->getEntityTypeId(), $entity->bundle()) as $fieldName => $fieldDefinition) {
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       $selectionHandler = $this->selectionPluginManager->getSelectionHandler($fieldDefinition, $entity);
       $options = $this->ungroupOptions($selectionHandler->getReferenceableEntities());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


13) modules/contrib/ogmedia/ogmedia_audience_lock/ogmedia_audience_lock.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\ogmedia_audience_lock\AudienceLockHooks;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\TypedData\Exception\MissingDataException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
  * Implements hook_form_alter().
  */
 function ogmedia_audience_lock_form_alter(&$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\ogmedia_audience_lock\AudienceLockHooks $hooks */
+  /** @var AudienceLockHooks $hooks */
   $hooks = \Drupal::service('ogmedia_audience_lock.hooks');
   $hooks->hookFormAlter($form, $form_state, $form_id);
 }
@@ @@
 /**
  * Implements hook_entity_prepare_form().
  *
- * @throws \Drupal\Core\Entity\EntityStorageException
- * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+ * @throws EntityStorageException
+ * @throws MissingDataException
  */
 function ogmedia_audience_lock_entity_prepare_form(EntityInterface $entity, $operation, FormStateInterface $form_state) {
-  /** @var \Drupal\ogmedia_audience_lock\AudienceLockHooks $hooks */
+  /** @var AudienceLockHooks $hooks */
   $hooks = \Drupal::service('ogmedia_audience_lock.hooks');
   $hooks->hookEntityPrepareForm($entity, $operation, $form_state);
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 13 files have been changed by Rector                                      

