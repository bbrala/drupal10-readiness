modules/contrib/preview_graphql/modules/preview_graphql_jwt/preview_graphql_jwt.module
modules/contrib/preview_graphql/modules/preview_graphql_jwt/src/EventSubscriber/CarrierCallbackOptionSubscriber.php
modules/contrib/preview_graphql/modules/preview_graphql_jwt/src/EventSubscriber/ContextResolverCacheSubscriber.php
modules/contrib/preview_graphql/modules/preview_graphql_jwt/src/EventSubscriber/GenerateKeySubscriber.php
modules/contrib/preview_graphql/modules/preview_graphql_jwt/src/EventSubscriber/GetCidSubscriber.php
modules/contrib/preview_graphql/modules/preview_graphql_jwt/src/EventSubscriber/RedirectSubscriber.php
modules/contrib/preview_graphql/modules/preview_graphql_jwt/src/Services/PreviewGraphQlJwtManager.php
modules/contrib/preview_graphql/preview_graphql.install
modules/contrib/preview_graphql/preview_graphql.module
modules/contrib/preview_graphql/src/Entity/PreviewGraphQL.php
modules/contrib/preview_graphql/src/Entity/PreviewGraphQLInterface.php
modules/contrib/preview_graphql/src/Event/CarrierCallbackOptionEvent.php
modules/contrib/preview_graphql/src/Event/ContextResolverCacheEvent.php
modules/contrib/preview_graphql/src/Event/GenerateKeyEvent.php
modules/contrib/preview_graphql/src/Event/GetCidEvent.php
modules/contrib/preview_graphql/src/Event/PreviewGraphQlEventBase.php
modules/contrib/preview_graphql/src/Event/RedirectEvent.php
modules/contrib/preview_graphql/src/Form/PreviewGraphQLDeleteForm.php
modules/contrib/preview_graphql/src/Form/PreviewGraphQLForm.php
modules/contrib/preview_graphql/src/Form/SettingsForm.php
modules/contrib/preview_graphql/src/Plugin/Deriver/Fields/PreviewGraphQLDeriver.php
modules/contrib/preview_graphql/src/Plugin/GraphQL/Fields/PreviewGraphQLField.php
modules/contrib/preview_graphql/src/Plugin/GraphQL/Fields/PreviewGraphQLFieldDeriver.php
modules/contrib/preview_graphql/src/Plugin/GraphQL/Fields/PreviewGraphQLUrlCallback.php
modules/contrib/preview_graphql/src/Plugin/GraphQL/InputTypes/PreviewGraphQLInput.php
modules/contrib/preview_graphql/src/Plugin/GraphQL/Mutations/PreviewGraphQLCallback.php
modules/contrib/preview_graphql/src/PreviewGraphQLHtmlRouteProvider.php
modules/contrib/preview_graphql/src/PreviewGraphQLListBuilder.php
modules/contrib/preview_graphql/src/Services/PreviewGraphQlBackend.php
modules/contrib/preview_graphql/src/Services/PreviewGraphQlManager.php

16 files with changes
=====================

1) modules/contrib/preview_graphql/src/Services/PreviewGraphQlManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\preview_graphql\Services;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Core\TempStore\TempStoreException;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Component\Uuid\UuidInterface;
@@ @@
   /**
    * A entity type manager instance.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The preview graphql backend service.
    *
-   * @var \Drupal\preview_graphql\Services\PreviewGraphQlBackend
+   * @var PreviewGraphQlBackend
    */
   protected $previewGraphQlBackend;

@@ @@
   /**
    * The date time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $dateTime;

@@ @@
   /**
    * The uuid service.
    *
-   * @var Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuid;

@@ @@
   /**
    * The http client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;

@@ @@
   /**
    * Return the preview graphql backend service.
    *
-   * @return \Drupal\preview_graphql\Services\PreviewGraphQlBackend
+   * @return PreviewGraphQlBackend
    *   The preview graphql backend service.
    */
   public function getPreviewGraphQlBackend() {
@@ @@
   /**
    * Fill the form entity with the value before the preview.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current data form.
    *
    * @return bool
@@ @@
    * @param bool $load
    *   If true, load all preview graphql entity.
    *
-   * @return array|\Drupal\preview_graphql\Entity\PreviewGraphQL[]|int
+   * @return array|PreviewGraphQL[]|int
    *   The ids of preview graph ql entity or loaded entities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getPreviewGraphQlEntityByTypeBundle($entity_type, $bundle, $load = FALSE) {
     $query = $this->entityTypeManager
@@ @@
    * @return array
    *   The merged of deriver type.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getDeriverType() {

@@ @@
   /**
    * Return the preview graphql entity corresponding of an drupal entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which we search preview graphql entity.
    *
-   * @return bool|\Drupal\preview_graphql\Entity\PreviewGraphQL
+   * @return bool|PreviewGraphQL
    *   False ifno preview graphql entity found, else the entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getPreviewGraphQlEntity(EntityInterface $entity) {
     if (!empty($this->currentPreviewGraphqlEntity['entity']) && !empty($this->currentPreviewGraphqlEntity['preview_entity']) && $this->currentPreviewGraphqlEntity['entity']->uuid() == $entity->uuid()) {
@@ @@
   /**
    * Build the graphql query for entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to build query.
    *
    * @return bool|string
    *   False if error, else the graphql query.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function buildQueryByEntity(EntityInterface $entity) {
     $preview_graphql_entity = $this->getPreviewGraphQlEntity($entity);
@@ @@
   /**
    * Process the entity query into graphQL engine.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to process.
    *
    * @return bool|\Drupal\graphql\GraphQL\Execution\QueryResult
    *   False if error, else the query result of graph ql.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\TempStore\TempStoreException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginException
+   * @throws PluginNotFoundException
+   * @throws TempStoreException
    */
   public function processQueryEntity(EntityInterface $entity) {
     // Process the graphql query.
@@ @@
    *
    * @param string $key
    *   The key name config.
-   * @param \Drupal\Core\Entity\EntityInterface|null $entity
+   * @param EntityInterface|null $entity
    *   The entity doing the preview.
    *
    * @return array|mixed|string|null
    *   The value of settings.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getSettingByEntity($key, EntityInterface $entity = NULL) {
     if (empty($entity)) {
@@ @@
    *
    * Also return the default settings if not override.
    *
-   * @param \Drupal\preview_graphql\Entity\PreviewGraphQL $preview_graph_ql
+   * @param PreviewGraphQL $preview_graph_ql
    *   The preview graphql entity.
    * @param string $key
    *   The config name.
@@ @@
    *
    * @param string $cid
    *   The cache id where to save data.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The data form_state of entity form.
    * @param array $graph_ql_resut
    *   The graphql data result.
    * @param string $url_callback
    *   The url of entity form.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The old entity.
    *
    * @return array|bool
@@ @@
   /**
    * Return the preview graphql tag name for an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to build the tag name.
    *
    * @return string
@@ @@
    *
    * @param \Drupal\graphql\GraphQL\Execution\QueryResult $result
    *   The graphQL result of preview.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity doing the preview.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current data in form of preview.
    *
    * @return bool
    *   True if all has been completed.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function sendDataFront(QueryResult $result, EntityInterface $entity, FormStateInterface $form_state) {

@@ @@
     // Get the value to transmit (token or cache id).
     $event = new GenerateKeyEvent($carrier_callback, $uuid);
     $this->previewGraphQlBackend->getEventDispatcher()
-      ->dispatch(GenerateKeyEvent::EVENT_NAME, $event);
+      ->dispatch($event, GenerateKeyEvent::EVENT_NAME);
     $url_parameter_value = $event->getValueKey();
     $method = $this->previewGraphQlBackend->getConfig()->get('method');
     // POST data method.
@@ @@
     // Event alter response before redirect.
     $event = new RedirectEvent($carrier_callback, $response, $url_parameter_value);
     $this->previewGraphQlBackend->getEventDispatcher()
-      ->dispatch(RedirectEvent::EVENT_NAME, $event);
+      ->dispatch($event, RedirectEvent::EVENT_NAME);
     $response = $event->getResponse();
     $form_state->disableRedirect();
     $form_state->setResponse($response);
@@ @@
   /**
    * Build the front url by entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity doing the preview.
    *
    * @return bool|string
    *   False if error, elee the front url.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getUrlFrontByEntity(EntityInterface $entity) {
     // Get url front.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


2) modules/contrib/preview_graphql/src/Services/PreviewGraphQlBackend.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\preview_graphql\Services;

+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\TempStore\TempStoreException;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * The request instance.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|null
+   * @var Request|null
    */
   protected $request;

@@ @@
   /**
    * The cache factory instance.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;

@@ @@
   /**
    * The private temp store service.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $privateTempStore;

@@ @@
   /**
    * A messenger instance.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * A entity logger instance.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * A cache tag invalidator instance.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagInvalidator;

@@ @@
   /**
    * Return the request manager.
    *
-   * @return \Symfony\Component\HttpFoundation\Request|null
+   * @return Request|null
    *   An instance of request manager.
    */
   public function getRequest() {
@@ @@
   /**
    * Get service messenger.
    *
-   * @return \Drupal\Core\Messenger\MessengerInterface
+   * @return MessengerInterface
    *   An instance of messenger service.
    */
   public function getMessenger() {
@@ @@
   /**
    * Get service logger.
    *
-   * @return \Drupal\Core\Logger\LoggerChannelInterface
+   * @return LoggerChannelInterface
    *   An instance of logger service.
    */
   public function getLogger() {
@@ @@
   /**
    * Get service config preview graphql.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig
+   * @return ImmutableConfig
    *   The config preview graphql settings.
    */
   public function getConfig() {
@@ @@
   /**
    * Get service event dispatcher.
    *
-   * @return \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @return EventDispatcherInterface
    *   An instance of event dispatcher.
    */
   public function getEventDispatcher() {
@@ @@
   /**
    * Return the cache backend factory.
    *
-   * @return \Drupal\Core\Cache\CacheBackendInterface
+   * @return CacheBackendInterface
    *   An instance of cache backend factory.
    */
   public function getCacheBackend() {
@@ @@
   /**
    * Get service cache tag invalidator.
    *
-   * @return \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @return CacheTagsInvalidatorInterface
    *   An instance of cache tag invalidator.
    */
   public function getCacheTagInvalidator() {
@@ @@
    *
    * @param string $temp_id
    *   The id of temp store.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object to saved.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
+   * @throws TempStoreException
    */
   public function saveTempStore($temp_id, FormStateInterface $form_state) {
     $temp_store = $this->privateTempStore->get('preview_graphql');
@@ @@
    * @param string $temp_id
    *   The id of temp store.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
+   * @throws TempStoreException
    */
   public function deleteTempStore($temp_id) {
     $temp_store = $this->privateTempStore->get('preview_graphql');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/preview_graphql/src/Plugin/Deriver/Fields/PreviewGraphQLDeriver.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * An instance of preview graphql manager.
    *
-   * @var \Drupal\preview_graphql\Services\PreviewGraphQlManager
+   * @var PreviewGraphQlManager
    */
   protected $previewGraphQLManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/preview_graphql/src/Form/PreviewGraphQLForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * A entity type manager instance.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * A bundle manager instance.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityBundleInfo;

@@ @@
   /**
    * A preview graphQL manager instance.
    *
-   * @var \Drupal\preview_graphql\Services\PreviewGraphQlManager
+   * @var PreviewGraphQlManager
    */
   protected $previewGraphQlManager;

@@ @@
   /**
    * Return default value for element form.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
-   * @param \Drupal\preview_graphql\Entity\PreviewGraphQL $preview_graphql
+   * @param PreviewGraphQL $preview_graphql
    *   The current preview graphql entity.
    * @param string $key_value
    *   The field key searched.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/preview_graphql/src/Event/RedirectEvent.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The redirect response.
    *
-   * @var \Drupal\Core\Routing\TrustedRedirectResponse
+   * @var TrustedRedirectResponse
    */
   protected $response;

@@ @@
    *
    * @param string $carrier_callback
    *   The type carrier callback key.
-   * @param \Drupal\Core\Routing\TrustedRedirectResponse $response
+   * @param TrustedRedirectResponse $response
    *   The redirect response.
    * @param string $url_parameter_value
    *   The front url to redirect.
@@ @@
   /**
    * Set the redirect response.
    *
-   * @param \Drupal\Core\Routing\TrustedRedirectResponse $response
+   * @param TrustedRedirectResponse $response
    *   The redirect response.
    */
   public function setResponse(TrustedRedirectResponse $response) {
@@ @@
   /**
    * Get the redirect response.
    *
-   * @return \Drupal\Core\Routing\TrustedRedirectResponse
+   * @return TrustedRedirectResponse
    *   The redirect response.
    */
   public function getResponse() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/preview_graphql/src/Event/PreviewGraphQlEventBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\preview_graphql\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Event preview graphql Base.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/preview_graphql/src/Event/ContextResolverCacheEvent.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * GraphQL context resolver.
    *
-   * @var \Drupal\graphql\GraphQL\Execution\ResolveContext
+   * @var ResolveContext
    */
   protected $context;

@@ @@
    *
    * @param string $carrier_callback
    *   The type carrier callback key.
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
+   * @param ResolveContext $context
    *   The graphQL context resolver.
    */
   public function __construct($carrier_callback, ResolveContext $context) {
@@ @@
   /**
    * Set the graphQL context resolver.
    *
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
+   * @param ResolveContext $context
    *   GraphQL context resolver.
    */
   public function setContext(ResolveContext $context) {
@@ @@
   /**
    * Get the graphQL context resolver.
    *
-   * @return \Drupal\graphql\GraphQL\Execution\ResolveContext
+   * @return ResolveContext
    *   GraphQL context resolver.
    */
   public function getContext() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/preview_graphql/src/Event/CarrierCallbackOptionEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\preview_graphql\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Event that is fired when settings of carrier callback element is building.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/preview_graphql/preview_graphql.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\TempStore\TempStoreException;
 /**
  * @file
  * Contains preview_graphql.module.
@@ @@
         '#value' => $content,
       ];
       $output = '';
-      $output .= render($build);
+      $output .= \Drupal::service('renderer')->render($build);
       return $output;
   }
   return '';
@@ @@
  *
  * @param array $form
  *   The form of entity.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current data form.
  *
  * @return bool
  *   False if error.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
- * @throws \Drupal\Core\TempStore\TempStoreException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginException
+ * @throws PluginNotFoundException
+ * @throws TempStoreException
  */
 function _preview_graphql_front(array &$form, FormStateInterface $form_state) {
   /* @var  $entity \Drupal\Core\Entity\EntityInterface */
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector


10) modules/contrib/preview_graphql/modules/preview_graphql_jwt/src/Services/PreviewGraphQlJwtManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\preview_graphql_jwt\Services;

+use Drupal\Core\Logger\LoggerChannelInterface;
+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * A messenger instance.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * A entity logger instance.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * The request instance.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|null
+   * @var Request|null
    */
   protected $request;

@@ @@
   /**
    * Return the request manager.
    *
-   * @return \Symfony\Component\HttpFoundation\Request|null
+   * @return Request|null
    *   An instance of request manager.
    */
   public function getRequest() {
@@ @@
   /**
    * Return the messenger service.
    *
-   * @return \Drupal\Core\Messenger\MessengerInterface
+   * @return MessengerInterface
    *   The messenger service.
    */
   public function getMessenger() {
@@ @@
   /**
    * Return the logger service.
    *
-   * @return \Drupal\Core\Logger\LoggerChannelInterface
+   * @return LoggerChannelInterface
    *   The logger service.
    */
   public function getLogger() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/preview_graphql/modules/preview_graphql_jwt/src/EventSubscriber/RedirectSubscriber.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * Alter the redirection to front, to add JWT inside headers.
    *
-   * @param \Drupal\preview_graphql\Event\RedirectEvent $event
+   * @param RedirectEvent $event
    *   The redirect event.
    */
   public function redirect(RedirectEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/preview_graphql/modules/preview_graphql_jwt/src/EventSubscriber/GetCidSubscriber.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The preview graphql JWT manager.
    *
-   * @var \Drupal\preview_graphql_jwt\Services\PreviewGraphQlJwtManager
+   * @var PreviewGraphQlJwtManager
    */
   protected $previewGraphQlJwtManager;

@@ @@
   /**
    * GetCidSubscriber constructor.
    *
-   * @param \Drupal\preview_graphql_jwt\Services\PreviewGraphQlJwtManager $preview_graphql_jwt_manager
+   * @param PreviewGraphQlJwtManager $preview_graphql_jwt_manager
    *   The preview graphql JWT manager.
    */
   public function __construct(PreviewGraphQlJwtManager $preview_graphql_jwt_manager) {
@@ @@
   /**
    * Return the cid inside JWT.
    *
-   * @param \Drupal\preview_graphql\Event\GetCidEvent $event
+   * @param GetCidEvent $event
    *   The get cid event.
    */
   public function getCid(GetCidEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/preview_graphql/modules/preview_graphql_jwt/src/EventSubscriber/GenerateKeySubscriber.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The preview graphql JWT manager.
    *
-   * @var \Drupal\preview_graphql_jwt\Services\PreviewGraphQlJwtManager
+   * @var PreviewGraphQlJwtManager
    */
   protected $previewGraphQlJwtManager;

@@ @@
   /**
    * GenerateKeySubscriber constructor.
    *
-   * @param \Drupal\preview_graphql_jwt\Services\PreviewGraphQlJwtManager $preview_graphql_jwt_manager
+   * @param PreviewGraphQlJwtManager $preview_graphql_jwt_manager
    *   The preview graphql JWT manager.
    */
   public function __construct(PreviewGraphQlJwtManager $preview_graphql_jwt_manager) {
@@ @@
   /**
    * Generate the JWT token value with the cid inside.
    *
-   * @param \Drupal\preview_graphql\Event\GenerateKeyEvent $event
+   * @param GenerateKeyEvent $event
    *   The generate key event.
    */
   public function generateKey(GenerateKeyEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/preview_graphql/modules/preview_graphql_jwt/src/EventSubscriber/ContextResolverCacheSubscriber.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * Alter the cache context resolver to add cache context on headers.
    *
-   * @param \Drupal\preview_graphql\Event\ContextResolverCacheEvent $event
+   * @param ContextResolverCacheEvent $event
    *   The carrier callback option event.
    */
   public function alterContext(ContextResolverCacheEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/preview_graphql/modules/preview_graphql_jwt/src/EventSubscriber/CarrierCallbackOptionSubscriber.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * Add JWT option to carrier settings.
    *
-   * @param \Drupal\preview_graphql\Event\CarrierCallbackOptionEvent $event
+   * @param CarrierCallbackOptionEvent $event
    *   The carrier callback option event.
    */
   public function getCarrierCallbackOption(CarrierCallbackOptionEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/preview_graphql/modules/preview_graphql_jwt/preview_graphql_jwt.module:27

    ---------- begin diff ----------
@@ @@
         '#value' => $content,
       ];
       $output = '';
-      $output .= render($build);
+      $output .= \Drupal::service('renderer')->render($build);
       return $output;
   }
   return '';
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/preview_graphql/src/Plugin/GraphQL/Mutations/PreviewGrap
         hQLCallback.php" file, due to:                                         
         "Analyze error: "Class                                                 
         Drupal\graphql\Plugin\GraphQL\Mutations\MutationPluginBase not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/preview_graphql/src/Plugin/GraphQL/InputTypes/PreviewGra
         phQLInput.php" file, due to:                                           
         "Analyze error: "Class                                                 
         Drupal\graphql\Plugin\GraphQL\InputTypes\InputTypePluginBase not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/preview_graphql/src/Plugin/GraphQL/Fields/PreviewGraphQL
         UrlCallback.php" file, due to:                                         
         "Analyze error: "Class                                                 
         Drupal\graphql\Plugin\GraphQL\Fields\FieldPluginBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/preview_graphql/src/Plugin/GraphQL/Fields/PreviewGraphQL
         FieldDeriver.php" file, due to:                                        
         "Analyze error: "Class                                                 
         Drupal\graphql\Plugin\GraphQL\Fields\FieldPluginBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/preview_graphql/src/Plugin/GraphQL/Fields/PreviewGraphQL
         Field.php" file, due to:                                               
         "Analyze error: "Class                                                 
         Drupal\graphql\Plugin\GraphQL\Fields\FieldPluginBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [WARNING] 2 nodes were removed                                                 

