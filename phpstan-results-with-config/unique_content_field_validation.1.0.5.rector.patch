diff --git a/src/Plugin/Validation/Constraint/UniqueContentTitleValidator.php b/src/Plugin/Validation/Constraint/UniqueContentTitleValidator.php
index 7ddfeac..b63d62a 100644
--- a/src/Plugin/Validation/Constraint/UniqueContentTitleValidator.php
+++ b/src/Plugin/Validation/Constraint/UniqueContentTitleValidator.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\unique_content_field_validation\Plugin\Validation\Constraint;
 
+use Drupal\node\Entity\NodeType;
+use Drupal\taxonomy\Entity\Vocabulary;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -17,23 +19,23 @@ class UniqueContentTitleValidator extends ConstraintValidator implements Contain
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new UniqueContentTitleValidator instance.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   A configuration factory instance.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager) {
@@ -63,7 +65,7 @@ class UniqueContentTitleValidator extends ConstraintValidator implements Contain
     switch ($entity_type) {
       case 'node':
         $entity_bundle = $entity->getType();
-        /** @var \Drupal\node\Entity\NodeType $node_type */
+        /** @var NodeType $node_type */
         $node_type = $entity->type->entity;
         $unique_validation_enabled = $node_type->getThirdPartySetting('unique_content_field_validation', 'unique', FALSE);
         $custom_message = $node_type->getThirdPartySetting('unique_content_field_validation', 'unique_text', NULL);
@@ -74,7 +76,7 @@ class UniqueContentTitleValidator extends ConstraintValidator implements Contain
         break;
 
       case 'taxonomy_term':
-        /** @var \Drupal\taxonomy\Entity\Vocabulary $vocabulary */
+        /** @var Vocabulary $vocabulary */
         $vocabulary = $entity->vid->entity;
         $entity_bundle = $entity->bundle();
         $unique_validation_enabled = $vocabulary->getThirdPartySetting('unique_content_field_validation', 'unique', FALSE);
diff --git a/tests/src/Functional/EntityFieldUniqueMultipleValidationTest.php b/tests/src/Functional/EntityFieldUniqueMultipleValidationTest.php
index 27bb119..06b5439 100644
--- a/tests/src/Functional/EntityFieldUniqueMultipleValidationTest.php
+++ b/tests/src/Functional/EntityFieldUniqueMultipleValidationTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\unique_content_field_validation\Functional;
 
+use Drupal\user\UserInterface;
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ -33,7 +35,7 @@ class EntityFieldUniqueMultipleValidationTest extends BrowserTestBase {
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
@@ -57,7 +59,7 @@ class EntityFieldUniqueMultipleValidationTest extends BrowserTestBase {
     // Create Basic page node type.
     $this->drupalCreateContentType(['type' => 'page', 'name' => 'Basic page']);
 
-    /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display */
+    /** @var EntityViewDisplayInterface $display */
     $display = \Drupal::entityTypeManager()
       ->getStorage('entity_view_display')
       ->load('node.page.default');
@@ -101,17 +103,21 @@ class EntityFieldUniqueMultipleValidationTest extends BrowserTestBase {
   public function testUniqueFieldValidation() {
     $this->drupalGet('node/add');
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertUrl('node/add/page');
+    $this->assertSession()->addressEquals('node/add/page');
 
     // Create a node.
     $edit = [];
     $edit['title[0][value]'] = 'Multiple validation same field page';
     $edit['field_test[0][value]'] = 'test value';
     $edit['field_test[1][value]'] = 'test value';
-    $this->drupalPostForm('node/add/page', $edit, t('Save'));
+    $this->drupalGet('node/add/page');
+    $this->submitForm($edit, t('Save'));
 
     // Check that the Basic page has been created.
-    $this->assertText(t('Value is already set and each value needs to be unique'), 'Error message expected');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Value is already set and each value needs to be unique'));
   }
 
 }
diff --git a/tests/src/Functional/EntityFieldUniqueValidationTest.php b/tests/src/Functional/EntityFieldUniqueValidationTest.php
index 1a2874b..f1ce6b6 100644
--- a/tests/src/Functional/EntityFieldUniqueValidationTest.php
+++ b/tests/src/Functional/EntityFieldUniqueValidationTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\unique_content_field_validation\Functional;
 
+use Drupal\user\UserInterface;
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\Tests\BrowserTestBase;
@@ -32,7 +34,7 @@ class EntityFieldUniqueValidationTest extends BrowserTestBase {
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
@@ -56,7 +58,7 @@ class EntityFieldUniqueValidationTest extends BrowserTestBase {
     // Create Basic page node type.
     $this->drupalCreateContentType(['type' => 'page', 'name' => 'Basic page']);
 
-    /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display */
+    /** @var EntityViewDisplayInterface $display */
     $display = \Drupal::entityTypeManager()
       ->getStorage('entity_view_display')
       ->load('node.page.default');
@@ -107,7 +109,7 @@ class EntityFieldUniqueValidationTest extends BrowserTestBase {
   public function testUniqueFieldValidation() {
     $this->drupalGet('node/add');
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertUrl('node/add/page');
+    $this->assertSession()->addressEquals('node/add/page');
 
     // Check that the node exists in the database.
     $node = $this->drupalGetNodeByTitle('First page');
@@ -117,10 +119,14 @@ class EntityFieldUniqueValidationTest extends BrowserTestBase {
     $edit = [];
     $edit['title[0][value]'] = 'Second page';
     $edit['field_test[0][value]'] = 'test value';
-    $this->drupalPostForm('node/add/page', $edit, t('Save'));
+    $this->drupalGet('node/add/page');
+    $this->submitForm($edit, t('Save'));
 
     // Check that the Basic page has been created.
-    $this->assertText(t('@value is already set and each value needs to be unique.', ['@value' => $edit['field_test[0][value]']]), 'Error message expected');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('@value is already set and each value needs to be unique.', ['@value' => $edit['field_test[0][value]']]));
   }
 
 }
diff --git a/tests/src/Functional/LoadTest.php b/tests/src/Functional/LoadTest.php
index 1e47a2c..923a7a5 100644
--- a/tests/src/Functional/LoadTest.php
+++ b/tests/src/Functional/LoadTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\unique_content_field_validation\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
 
@@ -27,7 +28,7 @@ class LoadTest extends BrowserTestBase {
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
diff --git a/unique_content_field_validation.info.yml b/unique_content_field_validation.info.yml
index 02cc50a..365e28b 100644
--- a/unique_content_field_validation.info.yml
+++ b/unique_content_field_validation.info.yml
@@ -1,7 +1,7 @@
 name: 'Unique content field validation'
 description: 'Validate the uniqueness of the entities fields or title.'
 type: module
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.1 || ^10
 dependencies:
   - drupal:node
   - drupal:taxonomy
diff --git a/unique_content_field_validation.module b/unique_content_field_validation.module
index 5351fd6..7d517fb 100644
--- a/unique_content_field_validation.module
+++ b/unique_content_field_validation.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\taxonomy\Entity\Vocabulary;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 /**
  * @file
  * Allows administrators to set fields as unique.
@@ -32,7 +34,7 @@ function unique_content_field_validation_help($route_name, RouteMatchInterface $
  * Implements hook_form_FORM_ID_alter().
  */
 function unique_content_field_validation_form_field_config_edit_form_alter(array &$form, FormStateInterface $form_state) {
-  /** @var Drupal\field\Entity\FieldConfig $field */
+  /** @var FieldConfig $field */
   $field = $form_state->getFormObject()->getEntity();
   $field_types = [
     'email',
@@ -107,7 +109,7 @@ function unique_content_field_validation_form_field_config_edit_form_alter(array
  * Implements hook_form_FORM_ID_alter() for node_type_form.
  */
 function unique_content_field_validation_form_node_type_form_alter(array &$form, FormStateInterface $form_state) {
-  /** @var \Drupal\node\NodeTypeInterface $node_type */
+  /** @var NodeTypeInterface $node_type */
   $node_type = $form_state->getFormObject()->getEntity();
 
   $form['submission']['unique_content_field_validation'] = [
@@ -151,7 +153,7 @@ function unique_content_field_validation_form_node_type_form_builder($entity_typ
  * Implements hook_form_FORM_ID_alter() for taxonomy_vocabulary_form.
  */
 function unique_content_field_validation_form_taxonomy_vocabulary_form_alter(&$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\taxonomy\Entity\Vocabulary $vocabulary */
+  /** @var Vocabulary $vocabulary */
   $vocabulary = $form_state->getFormObject()->getEntity();
   $form['submission']['unique_content_field_validation'] = [
     '#type' => 'details',
@@ -186,7 +188,7 @@ function unique_content_field_validation_form_taxonomy_vocabulary_form_alter(&$f
  * @see unique_content_field_validation_form_taxonomy_vocabulary_form_alter()
  */
 function unique_content_field_validation_form_vocabulary_type_form_builder($entity_type, EntityInterface $entity, &$form, FormStateInterface $form_state) {
-  /** @var \Drupal\taxonomy\Entity\Vocabulary $entity */
+  /** @var Vocabulary $entity */
   $unique_settings = $form_state->getValue('unique_content_field_validation');
   $entity->setThirdPartySetting('unique_content_field_validation', 'unique', $unique_settings['unique']);
   $entity->setThirdPartySetting('unique_content_field_validation', 'unique_text', $unique_settings['unique_text']);
@@ -196,7 +198,7 @@ function unique_content_field_validation_form_vocabulary_type_form_builder($enti
  * Implements hook_field_widget_form_alter().
  */
 function unique_content_field_validation_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
-  /** @var Drupal\field\Entity\FieldConfig $field_definition */
+  /** @var FieldConfig $field_definition */
   $field_definition = $context['items']->getFieldDefinition();
   $name = $field_definition->getFieldStorageDefinition()->getName();
   if ($field_definition instanceof FieldConfig) {
@@ -327,7 +329,7 @@ function unique_content_field_validation_unique_multivalue($element, FormStateIn
  * @return bool
  *   Whether the entity is unique or not.
  *
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws PluginNotFoundException
  */
 function unique_content_field_validation_field_is_unique($entity_type, $langcode, $field_name, array $values, $bundle, $entity) {
   $valid = TRUE;
