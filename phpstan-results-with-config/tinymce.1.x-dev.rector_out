modules/contrib/tinymce/src/Controller/TinyMCEController.php
modules/contrib/tinymce/src/Form/TinymceSettingsForm.php
modules/contrib/tinymce/src/Plugin/Editor/TinyMCE.php
modules/contrib/tinymce/tests/src/Functional/TinyMCELoadingTest.php
modules/contrib/tinymce/tests/src/FunctionalJavascript/TinyMCEIntegrationTest.php
modules/contrib/tinymce/tests/src/Kernel/TinyMCETest.php
modules/contrib/tinymce/tinymce.module

7 files with changes
====================

1) modules/contrib/tinymce/tinymce.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Routing\RouteMatchInterface;
 /**
  * @file
  * Integrate the TinyMCE editor (https://www.tiny.cloud/) into Drupal.
@@ @@
 /**
  * Implementation of hook_help().
  */
-function tinymce_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match) {
+function tinymce_help($route_name, RouteMatchInterface $route_match) {
   switch ($route_name) {
     case 'help.page.tinymce' :
       $output = '';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/tinymce/tests/src/Kernel/TinyMCETest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tinymce\Kernel;

+use Drupal\tinymce\Plugin\Editor\TinyMCE;
+use Drupal\editor\Plugin\EditorManager;
 use Drupal\Component\Serialization\Json;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\editor\Entity\Editor;
@@ @@
   /**
    * An instance of the "TinyMCE" text editor plugin.
    *
-   * @var \Drupal\tinymce\Plugin\Editor\TinyMCE
+   * @var TinyMCE
    */
   protected $tinymce;

@@ @@
   /**
    * The Editor Plugin Manager.
    *
-   * @var \Drupal\editor\Plugin\EditorManager;
+   * @var EditorManager ;
    */
   protected $manager;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/tinymce/tests/src/FunctionalJavascript/TinyMCEIntegrationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tinymce\FunctionalJavascript;

+use Drupal\user\UserInterface;
+use Drupal\filter\FilterFormatInterface;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\editor\Entity\Editor;
 use Drupal\field\Entity\FieldConfig;
@@ @@
   /**
    * The account.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $account;

@@ @@
   /**
    * The FilterFormat config entity used for testing.
    *
-   * @var \Drupal\filter\FilterFormatInterface
+   * @var FilterFormatInterface
    */
   protected $filterFormat;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/tinymce/tests/src/Functional/TinyMCELoadingTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tinymce\Functional;

+use Drupal\user\UserInterface;
 use Drupal\editor\Entity\Editor;
 use Drupal\filter\Entity\FilterFormat;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   /**
    * An untrusted user with access to only the 'plain_text' format.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $untrustedUser;

@@ @@
   /**
    * A normal user with access to the 'plain_text' and 'filtered_html' formats.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $normalUser;

@@ @@
     $hidden_input = $this->xpath('//input[@type="hidden" and contains(@class, "editor")]');
     $this->assertCount(0, $hidden_input, 'A single text format hidden input does not exist on the page.');
     // Verify that TinyMCE glue JS is absent.
-    $this->assertSession()->responseNotContains(drupal_get_path('module', 'tinymce') . '/js/tinymce.js');
+    $this->assertSession()->responseNotContains(\Drupal::service('extension.list.module')->getPath('tinymce') . '/js/tinymce.js');

     // On pages where there would never be a text editor, TinyMCE JS is absent.
     $this->drupalGet('user');
-    $this->assertSession()->responseNotContains(drupal_get_path('module', 'tinymce') . '/js/tinymce.js');
+    $this->assertSession()->responseNotContains(\Drupal::service('extension.list.module')->getPath('tinymce') . '/js/tinymce.js');
     $this->drupalLogout();

     // The normal user:
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/tinymce/src/Plugin/Editor/TinyMCE.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/tinymce/src/Form/TinymceSettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tinymce\Form;

+use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;

@@ @@

     parent::submitForm($form, $form_state);

-    /** @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface $tagInvalidator */
+    /** @var CacheTagsInvalidatorInterface $tagInvalidator */
     $tagInvalidator = \Drupal::service('cache_tags.invalidator');
     $tagInvalidator->invalidateTags(['library_info']);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/tinymce/src/Controller/TinyMCEController.php:37

    ---------- begin diff ----------
@@ @@

     // Attempt to save the file and the folder if it does not exist.
     if (\Drupal::service('file_system')->prepareDirectory($destinationFolder, FileSystemInterface::CREATE_DIRECTORY)) {
-      $file = file_save_data($data, $destinationFile, FILE_EXISTS_REPLACE);
+      $file = \Drupal::service('file.repository')->writeData($data, $destinationFile, FileSystemInterface::EXISTS_REPLACE);
     }

     // Prepare the json output for the editor.
-    $path = file_create_url($destinationFile);
+    $path = \Drupal::service('file_url_generator')->generateAbsoluteString($destinationFile);
     $response['location'] = $path;

     return new JsonResponse($response);
    ----------- end diff -----------

Applied rules:
 * FileExistsReplaceRector
 * FileSaveDataRector
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 7 files have been changed by Rector                                       

