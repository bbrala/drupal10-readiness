modules/contrib/search_api_attachments/search_api_attachments.api.php
modules/contrib/search_api_attachments/search_api_attachments.install
modules/contrib/search_api_attachments/search_api_attachments.module
modules/contrib/search_api_attachments/search_api_attachments.views.inc
modules/contrib/search_api_attachments/src/Annotation/SearchApiAttachmentsTextExtractor.php
modules/contrib/search_api_attachments/src/ExtractFileValidator.php
modules/contrib/search_api_attachments/src/Form/TextExtractorFormSettings.php
modules/contrib/search_api_attachments/src/Plugin/Field/FieldFormatter/ExtractedText.php
modules/contrib/search_api_attachments/src/Plugin/QueueWorker/ExtractorQueue.php
modules/contrib/search_api_attachments/src/Plugin/search_api/processor/FilesExtractor.php
modules/contrib/search_api_attachments/src/Plugin/search_api_attachments/DocconvExtractor.php
modules/contrib/search_api_attachments/src/Plugin/search_api_attachments/PdftotextExtractor.php
modules/contrib/search_api_attachments/src/Plugin/search_api_attachments/PythonPdf2txtExtractor.php
modules/contrib/search_api_attachments/src/Plugin/search_api_attachments/SolrExtractor.php
modules/contrib/search_api_attachments/src/Plugin/search_api_attachments/TikaExtractor.php
modules/contrib/search_api_attachments/src/Plugin/search_api_attachments/TikaServerExtractor.php
modules/contrib/search_api_attachments/src/Plugin/views/filter/SearchApiAttachmentsFilterPlugin.php
modules/contrib/search_api_attachments/src/TextExtractorPluginBase.php
modules/contrib/search_api_attachments/src/TextExtractorPluginInterface.php
modules/contrib/search_api_attachments/src/TextExtractorPluginManager.php
modules/contrib/search_api_attachments/tests/src/Unit/ExtractBody.php

14 files with changes
=====================

1) modules/contrib/search_api_attachments/src/TextExtractorPluginInterface.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Extract method.
    *
-   * @param \Drupal\file\Entity\File $file
+   * @param File $file
    *   The file object.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


2) modules/contrib/search_api_attachments/src/TextExtractorPluginBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\search_api_attachments;

+use Symfony\Component\Mime\MimeTypesInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ @@
 use Drupal\Core\StreamWrapper\StreamWrapperManagerInterface;
 use Drupal\file\Entity\File;
 use Symfony\Component\DependencyInjection\ContainerInterface;
-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;

 /**
  * Base class for plugins able to extract file content.
@@ @@
   /**
    * Config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Stream wrapper manager service.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;

@@ @@
   /**
    * Mime type guesser service.
    *
-   * @var \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface
+   * @var MimeTypesInterface
    */
   protected $mimeTypeGuesser;

@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function __construct(array $configuration, $plugin_id, array $plugin_definition, ConfigFactoryInterface $config_factory, StreamWrapperManagerInterface $stream_wrapper_manager, MimeTypeGuesserInterface $mime_type_guesser, MessengerInterface $messenger) {
+  public function __construct(array $configuration, $plugin_id, array $plugin_definition, ConfigFactoryInterface $config_factory, StreamWrapperManagerInterface $stream_wrapper_manager, MimeTypesInterface $mime_type_guesser, MessengerInterface $messenger) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
     $this->configFactory = $config_factory;
     $this->streamWrapperManager = $stream_wrapper_manager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/search_api_attachments/src/Plugin/search_api_attachments/TikaServerExtractor.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\search_api_attachments\Plugin\search_api_attachments;

+use GuzzleHttp\Client;
+use Symfony\Component\Mime\MimeTypesInterface;
+use GuzzleHttp\Exception\GuzzleException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
 use Drupal\search_api_attachments\TextExtractorPluginBase;
 use GuzzleHttp\ClientInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;
 use Drupal\file\Entity\File;

 /**
@@ @@
   /**
    * The HTTP client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function __construct(array $configuration, $plugin_id, array $plugin_definition, ConfigFactoryInterface $config_factory, StreamWrapperManagerInterface $stream_wrapper_manager, MimeTypeGuesserInterface $mime_type_guesser, MessengerInterface $messenger, FileSystemInterface $file_system, ClientInterface $http_client) {
+  public function __construct(array $configuration, $plugin_id, array $plugin_definition, ConfigFactoryInterface $config_factory, StreamWrapperManagerInterface $stream_wrapper_manager, MimeTypesInterface $mime_type_guesser, MessengerInterface $messenger, FileSystemInterface $file_system, ClientInterface $http_client) {
     parent::__construct($configuration, $plugin_id, $plugin_definition, $config_factory, $stream_wrapper_manager, $mime_type_guesser, $messenger, $file_system);
     $this->httpClient = $http_client;
   }
@@ @@
   /**
    * Extract file with a Tika JAX-RS Server.
    *
-   * @param \Drupal\file\Entity\File $file
+   * @param File $file
    *   A file object.
    *
    * @return string
    *   The text extracted from the file.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function extract(File $file) {
     $data = NULL;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/search_api_attachments/src/Plugin/search_api_attachments/TikaExtractor.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Extract file with Tika library.
    *
-   * @param \Drupal\file\Entity\File $file
+   * @param File $file
    *   A file object.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/search_api_attachments/src/Plugin/search_api_attachments/SolrExtractor.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\search_api_attachments\Plugin\search_api_attachments;

+use Symfony\Component\Mime\MimeTypesInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\File\FileSystemInterface;
@@ @@
 use Drupal\search_api_attachments\TextExtractorPluginBase;
 use Drupal\search_api_solr\Plugin\search_api\backend\SearchApiSolrBackend;
 use Symfony\Component\DependencyInjection\ContainerInterface;
-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;
 use Drupal\file\Entity\File;

 /**
@@ @@
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function __construct(array $configuration, $plugin_id, array $plugin_definition, ConfigFactoryInterface $config_factory, StreamWrapperManagerInterface $stream_wrapper_manager, MimeTypeGuesserInterface $mime_type_guesser, MessengerInterface $messenger, FileSystemInterface $file_system, EntityTypeManagerInterface $entity_type_manager) {
+  public function __construct(array $configuration, $plugin_id, array $plugin_definition, ConfigFactoryInterface $config_factory, StreamWrapperManagerInterface $stream_wrapper_manager, MimeTypesInterface $mime_type_guesser, MessengerInterface $messenger, FileSystemInterface $file_system, EntityTypeManagerInterface $entity_type_manager) {
     parent::__construct($configuration, $plugin_id, $plugin_definition, $config_factory, $stream_wrapper_manager, $mime_type_guesser, $messenger, $file_system);
     $this->entityTypeManager = $entity_type_manager;
   }
@@ @@
   /**
    * Extract file with a search api solr backend.
    *
-   * @param \Drupal\file\Entity\File $file
+   * @param File $file
    *   A file object.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/search_api_attachments/src/Plugin/search_api_attachments/PythonPdf2txtExtractor.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Extract file with python Pdf2txt library.
    *
-   * @param \Drupal\file\Entity\File $file
+   * @param File $file
    *   A file object.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/search_api_attachments/src/Plugin/search_api_attachments/PdftotextExtractor.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Extract file with Pdftotext command line tool.
    *
-   * @param \Drupal\file\Entity\File $file
+   * @param File $file
    *   A file object.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/search_api_attachments/src/Plugin/search_api/processor/FilesExtractor.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\search_api_attachments\Plugin\search_api\processor;

+use Drupal\Core\Field\BaseFieldDefinition;
+use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Utility\Bytes;
@@ @@
   /**
    * The plugin manager for our text extractor.
    *
-   * @var \Drupal\search_api_attachments\TextExtractorPluginManager
+   * @var TextExtractorPluginManager
    */
   protected $textExtractorPluginManager;

@@ @@
   /**
    * The extract file validator service.
    *
-   * @var \Drupal\search_api_attachments\ExtractFileValidator
+   * @var ExtractFileValidator
    */
   protected $extractFileValidator;

@@ @@
   /**
    * Config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Key value service.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueFactoryInterface
+   * @var KeyValueFactoryInterface
    */
   protected $keyValue;

@@ @@
   /**
    * Module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Search API field helper.
    *
-   * @var \Drupal\search_api\Utility\FieldsHelperInterface
+   * @var FieldsHelperInterface
    */
   protected $fieldHelper;

@@ @@
   /**
    * The logger service.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
             // Get type to manage media entity reference case.
             $type = $entity->get($field_name)->getFieldDefinition()->getType();
             if ($type == 'entity_reference') {
-              /** @var \Drupal\Core\Field\BaseFieldDefinition $field_def */
+              /** @var BaseFieldDefinition $field_def */
               $field_def = $entity->get($field_name)->getFieldDefinition();
               if ($field_def->getItemDefinition()->getSetting('target_type') === 'media') {
                 // This is a media field.
@@ @@
                   if ($media !== NULL) {
                     $bundle_configuration = $media->getSource()->getConfiguration();
                     if (isset($bundle_configuration['source_field'])) {
-                      /** @var \Drupal\Core\Field\FieldItemListInterface $field_item */
+                      /** @var FieldItemListInterface $field_item */
                       foreach ($media->get($bundle_configuration['source_field'])->filterEmptyItems() as $field_item) {
                         if ($field_item->getFieldDefinition()->getType() === 'file') {
                           $value = $field_item->getValue();
@@ @@
   /**
    * Extract non text file data or get it from cache if available and cache it.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity the file is attached to.
-   * @param \Drupal\file\Entity\File $file
+   * @param File $file
    *   A file object.
-   * @param \Drupal\search_api_attachments\TextExtractorPluginInterface $extractor_plugin
+   * @param TextExtractorPluginInterface $extractor_plugin
    *   The plugin used to extract file content.
    *
    * @return string
@@ @@
   /**
    * Queue a failed extraction for later processing.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity the file is attached to.
-   * @param \Drupal\file\Entity\File $file
+   * @param File $file
    *   A file object.
    *
    * @return bool
@@ @@
    *
    * @param object $file
    *   A file object.
-   * @param \Drupal\search_api\Item\ItemInterface $item
+   * @param ItemInterface $item
    *   The item the file was referenced in.
    * @param string|null $field_name
    *   The name of the field the file was referenced in, if applicable.
@@ @@
    * @param array $form
    *   An associative array containing the structure of the plugin form as built
    *   by static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    *
    * @see \Drupal\Core\Plugin\PluginFormInterface::validateConfigurationForm()
@@ @@
    * @param array $form
    *   An associative array containing the structure of the plugin form as built
    *   by static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    *
    * @see \Drupal\Core\Plugin\PluginFormInterface::submitConfigurationForm()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/search_api_attachments/src/Plugin/QueueWorker/ExtractorQueue.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\search_api_attachments\Plugin\QueueWorker;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\TranslatableInterface;
 use Drupal\Core\KeyValueStore\KeyValueFactoryInterface;
@@ @@
   /**
    * Text extractor service.
    *
-   * @var \Drupal\search_api_attachments\TextExtractorPluginManager
+   * @var TextExtractorPluginManager
    */
   protected $textExtractorPluginManager;

@@ @@
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Key value service.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueFactoryInterface
+   * @var KeyValueFactoryInterface
    */
   protected $keyValue;

@@ @@
   /**
    * The logger service.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
    * @return object
    *   The plugin.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function getExtractorPlugin() {
     // Get extractor configuration.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/search_api_attachments/src/Plugin/Field/FieldFormatter/ExtractedText.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\search_api_attachments\Plugin\Field\FieldFormatter;

+use Drupal\search_api_attachments\TextExtractorPluginInterface;
 use Drupal\Core\Config\Config;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
   /**
    * Files extractor config.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;

@@ @@
   /**
    * Module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Search API Processor Plugin Manager.
    *
-   * @var \Drupal\search_api\Processor\ProcessorPluginManager
+   * @var ProcessorPluginManager
    */
   protected $processorPluginManager;

@@ @@
   /**
    * Search API Attachments Text Extractor Plugin Manager.
    *
-   * @var \Drupal\search_api_attachments\TextExtractorPluginManager
+   * @var TextExtractorPluginManager
    */
   protected $textExtractorPluginManager;

@@ @@
   /**
    * FilesExtractor processor plugin.
    *
-   * @var \Drupal\search_api_attachments\Plugin\search_api\processor\FilesExtractor
+   * @var FilesExtractor
    */
   protected $extractor;

@@ @@
   /**
    * Extraction plugin.
    *
-   * @var \Drupal\search_api_attachments\TextExtractorPluginInterface
+   * @var TextExtractorPluginInterface
    */
   protected $extractionMethod;

@@ @@
   /**
    * The extract file validator service.
    *
-   * @var \Drupal\search_api_attachments\ExtractFileValidator
+   * @var ExtractFileValidator
    */
   protected $extractFileValidator;

@@ @@
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $fieldDefinition
+   * @param FieldDefinitionInterface $fieldDefinition
    *   The field definitions.
    * @param array $settings
    *   The settings.
@@ @@
    *   The view mode.
    * @param array $thirdPartySettings
    *   The third party settings.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
-   * @param \Drupal\search_api\Processor\ProcessorPluginManager $processorPluginManager
+   * @param ProcessorPluginManager $processorPluginManager
    *   The processor plugin manager.
-   * @param \Drupal\search_api_attachments\TextExtractorPluginManager $textExtractorPluginManager
+   * @param TextExtractorPluginManager $textExtractorPluginManager
    *   The text extractor plugin manager.
-   * @param \Drupal\Core\Config\Config $config
+   * @param Config $config
    *   The configuration.
-   * @param \Drupal\search_api_attachments\ExtractFileValidator $extractFileValidator
+   * @param ExtractFileValidator $extractFileValidator
    *   The extract file validator.
    */
   public function __construct($pluginId, $pluginDefinition, FieldDefinitionInterface $fieldDefinition, array $settings, $label, $viewMode, array $thirdPartySettings, ModuleHandlerInterface $moduleHandler, ProcessorPluginManager $processorPluginManager, TextExtractorPluginManager $textExtractorPluginManager, Config $config, ExtractFileValidator $extractFileValidator) {
@@ @@
   /**
    * Extracts content of given file.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity the file is attached to.
-   * @param \Drupal\file\Entity\File $file
+   * @param File $file
    *   A file object.
    *
    * @return string|null
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/search_api_attachments/src/Form/TextExtractorFormSettings.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * Text extractor plugin Manager.
    *
-   * @var \Drupal\search_api_attachments\TextExtractorPluginManager
+   * @var TextExtractorPluginManager
    */
   private $textExtractorPluginManager;

@@ @@
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function buildTextExtractorConfigForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function buildTextExtractorTestResultForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array
@@ @@
     $file = $this->entityTypeManager->getStorage('file')->loadByProperties($values);
     if (empty($file)) {
       // Copy the source file to public directory.
-      $source = drupal_get_path('module', 'search_api_attachments');
+      $source = \Drupal::service('extension.list.module')->getPath('search_api_attachments');
       $source .= '/data/search_api_attachments_test_extraction.pdf';
       copy($source, $filepath);
       // Create the file object.
@@ @@
   /**
    * Returns the text extractor plugin manager.
    *
-   * @return \Drupal\search_api_attachments\TextExtractorPluginManager
+   * @return TextExtractorPluginManager
    *   The text extractor plugin manager.
    */
   protected function getTextExtractorPluginManager() {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/search_api_attachments/src/ExtractFileValidator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\search_api_attachments;

-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;
+use Symfony\Component\Mime\MimeTypesInterface;
 use Drupal\Component\Utility\Bytes;

 /**
@@ @@
   /**
    * The route match.
    *
-   * @var \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface
+   * @var MimeTypesInterface
    */
   protected $mimeTypeGuesser;

@@ @@
   /**
    * Constructs a new ExtractFileValidator class.
    *
-   * @param \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface $mimeTypeGuesser
+   * @param MimeTypesInterface $mimeTypeGuesser
    *   Mime type guesser service.
    */
-  public function __construct(MimeTypeGuesserInterface $mimeTypeGuesser) {
+  public function __construct(MimeTypesInterface $mimeTypeGuesser) {
     $this->mimeTypeGuesser = $mimeTypeGuesser;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector


13) modules/contrib/search_api_attachments/search_api_attachments.module:36

    ---------- begin diff ----------
@@ @@
 /**
  * Helper function to delete a file extracted data cache.
  *
- * @param \Drupal\file\Entity\File $file
+ * @param File $file
  *   The file object.
  */
 function _search_api_attachments_delete_cache(File $file) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


14) modules/contrib/search_api_attachments/search_api_attachments.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\search_api\Item\ItemInterface;
+use Drupal\Core\Entity\EntityInterface;
 /**
  * @file
  * Hooks provided by the "Search API attachments" module.
  */
-
 /**
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Determines whether an attachment should be indexed.
  *
  * @param object $file
  *   A file object.
- * @param \Drupal\search_api\Item\ItemInterface $item
+ * @param ItemInterface $item
  *   The item the file was referenced in.
  * @param string $field_name
  *   The name of the field the file was referenced in.
@@ @@
  * @return bool|null
  *   Return FALSE if the attachment should not be indexed.
  */
-function hook_search_api_attachments_indexable($file, \Drupal\search_api\Item\ItemInterface $item, $field_name) {
+function hook_search_api_attachments_indexable($file, ItemInterface $item, $field_name) {
   // Don't index files on entities owned by our bulk upload bot accounts.
   if (in_array($item->getOriginalObject()->uid, my_module_blocked_uids())) {
     return FALSE;
@@ @@
  *
  * @param object $file
  *   A file object.
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity where the file was referenced in.
  */
-function hook_search_api_attachments_content_extracted($file, \Drupal\Core\Entity\EntityInterface $entity) {
+function hook_search_api_attachments_content_extracted($file, EntityInterface $entity) {
   // Search for nodes using media item in specific fields.
   if ($entity->getEntityTypeId() === 'media') {
     $query = \Drupal::entityQuery('node')
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 14 files have been changed by Rector                                      

