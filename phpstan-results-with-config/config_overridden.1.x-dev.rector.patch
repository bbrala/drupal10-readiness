diff --git a/composer.json b/composer.json
index bdb072a..f9a339d 100644
--- a/composer.json
+++ b/composer.json
@@ -4,6 +4,6 @@
     "description": "Module to hightlight overridden configs",
     "license": "GPL-2.0+",
     "require": {
-        "drupal/core": "^8 || ^9"
+        "drupal/core": "^8 || ^9 || ^10"
     }
 }
diff --git a/config_overridden.info.yml b/config_overridden.info.yml
index e114ae3..dc51f2e 100644
--- a/config_overridden.info.yml
+++ b/config_overridden.info.yml
@@ -2,5 +2,4 @@ type: module
 name: Config Overriden
 description: 'Disables on admin forms the values that has been overridden in settings.php or somewhere else'
 package: Admin
-core: '8.x'
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
diff --git a/config_overridden.module b/config_overridden.module
index 7e789b8..9e2822a 100644
--- a/config_overridden.module
+++ b/config_overridden.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\config_overridden\Plugin\ConfigFormOverriderManager;
 /**
  * @file
  * Module file.
@@ -20,7 +21,7 @@ function config_overridden_form_alter(&$form, FormStateInterface $form_state, $f
 /**
  * Shortcut function to get overrider service.
  *
- * @return \Drupal\config_overridden\Plugin\ConfigFormOverriderManager
+ * @return ConfigFormOverriderManager
  *   Return Config Form Overrider Manager.
  */
 function config_overridden_service_overrider() {
diff --git a/src/Annotation/ConfigFormOverrider.php b/src/Annotation/ConfigFormOverrider.php
index f837a7c..c197627 100644
--- a/src/Annotation/ConfigFormOverrider.php
+++ b/src/Annotation/ConfigFormOverrider.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\config_overridden\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -21,7 +22,7 @@ class ConfigFormOverrider extends Plugin {
   /**
    * The name of the sms service plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Plugin/ConfigFormOverriderBase.php b/src/Plugin/ConfigFormOverriderBase.php
index 62d15f2..8090ced 100644
--- a/src/Plugin/ConfigFormOverriderBase.php
+++ b/src/Plugin/ConfigFormOverriderBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\config_overridden\Plugin;
 
+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -25,7 +26,7 @@ abstract class ConfigFormOverriderBase extends PluginBase implements ConfigFormO
   protected $form;
 
   /**
-   * @var \Drupal\Core\Form\FormStateInterface
+   * @var FormStateInterface
    */
   protected $form_state;
 
@@ -37,14 +38,14 @@ abstract class ConfigFormOverriderBase extends PluginBase implements ConfigFormO
   /**
    * Define variable for LoggerChannelInterface.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
   /**
    * Define variable for ConfigFactoryInterface.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -57,9 +58,9 @@ abstract class ConfigFormOverriderBase extends PluginBase implements ConfigFormO
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, LoggerChannelFactoryInterface $logger_factory, ConfigFactoryInterface $config_factory) {
@@ -94,7 +95,7 @@ abstract class ConfigFormOverriderBase extends PluginBase implements ConfigFormO
 
   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    * @param null $form_id
    */
   public function setForm(array &$form, FormStateInterface $form_state, $form_id = NULL) {
diff --git a/src/Plugin/ConfigFormOverriderInterface.php b/src/Plugin/ConfigFormOverriderInterface.php
index 5ef1de7..fab7aa2 100644
--- a/src/Plugin/ConfigFormOverriderInterface.php
+++ b/src/Plugin/ConfigFormOverriderInterface.php
@@ -26,7 +26,7 @@ interface ConfigFormOverriderInterface extends PluginInspectionInterface, Contai
 
   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    * @param null $form_id
    */
   public function setForm(array &$form, FormStateInterface $form_state, $form_id = NULL);
diff --git a/src/Plugin/ConfigFormOverriderManager.php b/src/Plugin/ConfigFormOverriderManager.php
index e19269a..06b7fd9 100644
--- a/src/Plugin/ConfigFormOverriderManager.php
+++ b/src/Plugin/ConfigFormOverriderManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\config_overridden\Plugin;
 
+use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\DefaultPluginManager;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ -18,11 +19,11 @@ class ConfigFormOverriderManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/tests/src/Functional/SiteInformationFormTest.php b/tests/src/Functional/SiteInformationFormTest.php
index 7f045a8..abff035 100644
--- a/tests/src/Functional/SiteInformationFormTest.php
+++ b/tests/src/Functional/SiteInformationFormTest.php
@@ -24,7 +24,7 @@ class SiteInformationFormTest extends BrowserTestBase {
    */
   protected $defaultTheme = 'stable';
 
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
   }
 
@@ -93,13 +93,13 @@ class SiteInformationFormTest extends BrowserTestBase {
 
 
       if (isset($element['#config_overridden_value'])) {
-        $this->assertEqual($element['#config_overridden_value'], $config->getOriginal($property, FALSE), 'Stored value is set correctly');
+        $this->assertEquals($element['#config_overridden_value'], $config->getOriginal($property, FALSE), 'Stored value is set correctly');
       }
       else {
         $this->fail("Element {$form_path} doesn't have #config_overridden_value");
       }
 
-      $this->assertEqual($element['#default_value'], $value_to_match, "Element {$property} old value {$old_element['#default_value']} and new value {$element['#default_value']}");
+      $this->assertEquals($element['#default_value'], $value_to_match, "Element {$property} old value {$old_element['#default_value']} and new value {$element['#default_value']}");
       $this->assertTrue(strpos($element['#title'], 'overrides') !== FALSE, 'Element ' . $form_path . ' title is changed?');
 
     }
