modules/contrib/api_ai_webhook/api_ai_webhook.install
modules/contrib/api_ai_webhook/api_ai_webhook.module
modules/contrib/api_ai_webhook/modules/chatbot_api_apiai/chatbot_api_apiai.module
modules/contrib/api_ai_webhook/modules/chatbot_api_apiai/src/ApiAiContextTrait.php
modules/contrib/api_ai_webhook/modules/chatbot_api_apiai/src/EventSubscriber/RequestSubscriber.php
modules/contrib/api_ai_webhook/modules/chatbot_api_apiai/src/IntentRequestApiAiProxy.php
modules/contrib/api_ai_webhook/modules/chatbot_api_apiai/src/IntentResponseApiAiProxy.php
modules/contrib/api_ai_webhook/modules/chatbot_api_apiai/tests/src/Unit/IntentAttributeSetGetTest.php
modules/contrib/api_ai_webhook/src/ApiAiEvent.php
modules/contrib/api_ai_webhook/src/Authentication/Provider/ApiAiAuth.php
modules/contrib/api_ai_webhook/src/Controller/ApiAiEndpointController.php
modules/contrib/api_ai_webhook/src/EventSubscriber/ResponseEventSubscriber.php
modules/contrib/api_ai_webhook/src/Form/ModuleConfigurationForm.php
modules/contrib/api_ai_webhook/src/Plugin/ChatbotApiEntities/PushHandler/ApiAiPushHandler.php
modules/contrib/api_ai_webhook/tests/modules/api_ai_webhook_test/src/Plugin/Chatbot/Intent/UserInfo.php
modules/contrib/api_ai_webhook/tests/src/Functional/ConfigurationTest.php
modules/contrib/api_ai_webhook/tests/src/Kernel/ChatbotIntentPluginTest.php
modules/contrib/api_ai_webhook/tests/src/Unit/ApiAiPushHandlerTest.php

8 files with changes
====================

1) modules/contrib/api_ai_webhook/tests/src/Kernel/ChatbotIntentPluginTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\api_ai_webhook\Kernel;

+use Symfony\Component\HttpKernel\HttpKernelInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\KernelTests\KernelTestBase;
@@ @@
   /**
    * Kernel.
    *
-   * @var \Symfony\Component\HttpKernel\HttpKernelInterface
+   * @var HttpKernelInterface
    */
   protected $httpKernel;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['filter', 'user']);
     $this->installSchema('system', ['sequences']);
@@ @@
         'name' => '',
       ]);
     $anonymous->save();
-    /** @var \Drupal\user\RoleInterface $anonymous_role */
+    /** @var RoleInterface $anonymous_role */
     $anonymous_role = $this->container->get('entity_type.manager')
       ->getStorage('user_role')
       ->load(RoleInterface::ANONYMOUS_ID);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/api_ai_webhook/tests/src/Functional/ConfigurationTest.php:38

    ---------- begin diff ----------
@@ @@
       'http_headers' => 'Lorem: ABC' . PHP_EOL . 'Ipsum: DEF',
     ];
     // Send the form.
-    $this->drupalPostForm(NULL, $edit, 'op');
+    $this->submitForm($edit, 'op');
     // Verify the saved message.
     $this->assertSession()->pageTextContains(t('The configuration options have been saved.'));
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/api_ai_webhook/src/Form/ModuleConfigurationForm.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * State Manager.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $stateManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/api_ai_webhook/src/EventSubscriber/ResponseEventSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\api_ai_webhook\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\JsonResponse;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;

 /**
  * Subscribe to the response in order to better handle Dialogflow errors.
@@ @@
    * This method is called whenever the kernel.response event is dispatched,
    * then we filter responses/requests coming form Dialogflow webhook.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The repose event.
    */
-  public function alterResponse(FilterResponseEvent $event) {
+  public function alterResponse(ResponseEvent $event) {
     if (rtrim($event->getRequest()->getPathInfo(), '/') === '/api.ai/webhook') {

       // Handle errors.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/api_ai_webhook/src/Controller/ApiAiEndpointController.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * The Symfony event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * ApiAiEndpointController constructor.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The Symfony event dispatcher to use.
    */
   public function __construct(EventDispatcherInterface $eventDispatcher) {
@@ @@
    * @param \Symfony\Component\HttpFoundation\Request $http_request
    *   The HTTP request that was received.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The response in JSON format.
    */
   public function callback(Request $http_request) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/api_ai_webhook/src/Authentication/Provider/ApiAiAuth.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * State Manager.
    *
-   * @var \Drupal\Core\State\StateInterface $stateManager
+   * @var StateInterface $stateManager
    */
   protected $stateManager;

@@ @@
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The flood service.
    *
-   * @var \Drupal\Core\Flood\FloodInterface
+   * @var FloodInterface
    */
   protected $flood;

@@ @@
   /**
    * Constructs a HTTP basic authentication provider object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The user authentication service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager service.
-   * @param \Drupal\Core\Flood\FloodInterface $flood
+   * @param FloodInterface $flood
    *   The flood service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, StateInterface $state, EntityTypeManagerInterface $entity_type_manager, FloodInterface $flood) {
@@ @@
   /**
    * Authenticates the user for 'basic' type.
    *
-   * @param \Symfony\Component\HttpFoundation\Request|null $request
+   * @param Request|null $request
    *   The request object.
    *
    * @return bool
@@ @@
   /**
    * Authenticates the user for 'headers' type.
    *
-   * @param \Symfony\Component\HttpFoundation\Request|null $request
+   * @param Request|null $request
    *   The request object.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/api_ai_webhook/src/ApiAiEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\api_ai_webhook;

+use Symfony\Contracts\EventDispatcher\Event;
 use DialogFlow\Model\Webhook\Request;
 use DialogFlow\Model\Webhook\Response;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Implements a new Symfony event.
@@ @@
   /**
    * The webhook request.
    *
-   * @var \DialogFlow\Model\Webhook\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * The response object.
    *
-   * @var \DialogFlow\Model\Webhook\Response
+   * @var Response
    */
   protected $response;

@@ @@
   /**
    * Constructor.
    *
-   * @param \DialogFlow\Model\Webhook\Request $request
+   * @param Request $request
    *   The request.
-   * @param \DialogFlow\Model\Webhook\Response $response
+   * @param Response $response
    *   An Alexa response object to use for any response.
    */
   public function __construct(Request $request, Response $response) {
@@ @@
   /**
    * Getter for the request object.
    *
-   * @return \DialogFlow\Model\Webhook\Request
+   * @return Request
    *   The associated webhook request.
    */
   public function getRequest() {
@@ @@
   /**
    * Setter for the request object.
    *
-   * @param \DialogFlow\Model\Webhook\Request $request
+   * @param Request $request
    *   The webhook request to associate with this event.
    */
   public function setRequest(Request $request) {
@@ @@
   /**
    * Getter for the response object.
    *
-   * @return \DialogFlow\Model\Webhook\Response
+   * @return Response
    *   The associated response.
    */
   public function getResponse() {
@@ @@
   /**
    * Setter for the response object.
    *
-   * @param \DialogFlow\Model\Webhook\Response $response
+   * @param Response $response
    *   The response to associate with this event.
    */
   public function setResponse(Response $response) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/api_ai_webhook/modules/chatbot_api_apiai/src/ApiAiContextTrait.php:73

    ---------- begin diff ----------
@@ @@
   /**
    * Check if context name matches the provided string.
    *
-   * @param \DialogFlow\Model\Context $context
+   * @param Context $context
    *   The context element we need to process.
    * @param string $context_name
    *   The string to match.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


 [ERROR] Could not process                                                      
         "modules/contrib/api_ai_webhook/tests/src/Unit/ApiAiPushHandlerTest.php"
         file, due to:                                                          
         "Analyze error: "Class                                                 
         Drupal\chatbot_api_entities\Plugin\PushHandlerInterface not found.".   
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/api_ai_webhook/tests/modules/api_ai_webhook_test/src/Plu
         gin/Chatbot/Intent/UserInfo.php" file, due to:                         
         "Analyze error: "Class Drupal\chatbot_api\Plugin\IntentPluginBase not  
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/api_ai_webhook/src/Plugin/ChatbotApiEntities/PushHandler
         /ApiAiPushHandler.php" file, due to:                                   
         "Analyze error: "Class                                                 
         Drupal\chatbot_api_entities\Plugin\PushHandlerInterface not found.".   
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/api_ai_webhook/modules/chatbot_api_apiai/tests/src/Unit/
         IntentAttributeSetGetTest.php" file, due to:                           
         "Analyze error: "Class Drupal\chatbot_api\IntentRequestInterface not   
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/api_ai_webhook/modules/chatbot_api_apiai/src/IntentRespo
         nseApiAiProxy.php" file, due to:                                       
         "Analyze error: "Class Drupal\chatbot_api\IntentResponseInterface not  
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/api_ai_webhook/modules/chatbot_api_apiai/src/IntentReque
         stApiAiProxy.php" file, due to:                                        
         "Analyze error: "Class Drupal\chatbot_api\IntentRequestInterface not   
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/api_ai_webhook/modules/chatbot_api_apiai/src/EventSubscr
         iber/RequestSubscriber.php" file, due to:                              
         "Analyze error: "Class Drupal\chatbot_api\IntentRequestInterface not   
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [WARNING] 1 nodes were removed                                                 

