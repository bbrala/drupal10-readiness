modules/contrib/library_field/library_field.module
modules/contrib/library_field/modules/library_field_entity/library_field_entity.install
modules/contrib/library_field/modules/library_field_entity/library_field_entity.module
modules/contrib/library_field/modules/library_field_entity/src/Access/LibraryFieldEntityAccessHandler.php
modules/contrib/library_field/modules/library_field_entity/src/Controller/LibraryFieldEntityController.php
modules/contrib/library_field/modules/library_field_entity/src/Entity/LibraryFieldEntity.php
modules/contrib/library_field/modules/library_field_entity/src/Entity/LibraryFieldEntityInterface.php
modules/contrib/library_field/modules/library_field_entity/src/Event/BaseLibraryLifecycleEvent.php
modules/contrib/library_field/modules/library_field_entity/src/Event/LibraryApprovalEvent.php
modules/contrib/library_field/modules/library_field_entity/src/Event/LibraryDeletionEvent.php
modules/contrib/library_field/modules/library_field_entity/src/EventSubscriber/LibraryLifecycleEventSubscriber.php
modules/contrib/library_field/modules/library_field_entity/src/Form/LibraryFieldEntityBeginReviewForm.php
modules/contrib/library_field/modules/library_field_entity/src/Form/LibraryFieldEntityForm.php
modules/contrib/library_field/modules/library_field_entity/src/Form/LibraryFieldEntityReviewForm.php
modules/contrib/library_field/modules/library_field_entity/src/Form/LibraryFieldEntitySettingsForm.php
modules/contrib/library_field/modules/library_field_entity/src/LibraryBuilderService.php
modules/contrib/library_field/modules/library_field_entity/src/LibraryFieldEntityHtmlRouteProvider.php
modules/contrib/library_field/modules/library_field_entity/src/LibraryFileService.php
modules/contrib/library_field/src/Controller/LibrariesController.php
modules/contrib/library_field/src/LibraryCacheTagUtil.php
modules/contrib/library_field/src/LibraryService.php
modules/contrib/library_field/src/Plugin/Field/FieldFormatter/LibraryFormatter.php
modules/contrib/library_field/src/Plugin/Field/FieldFormatter/LibraryPlainFormatter.php
modules/contrib/library_field/src/Plugin/Field/FieldType/LibraryItem.php
modules/contrib/library_field/src/Plugin/Field/FieldWidget/LibraryWidget.php

13 files with changes
=====================

1) modules/contrib/library_field/src/Plugin/Field/FieldWidget/LibraryWidget.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * The library service.
    *
-   * @var \Drupal\library_field\LibraryService
+   * @var LibraryService
    */
   protected $libraryService;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
    *   The plugin_id for the widget.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the widget is associated.
    * @param array $settings
    *   The widget settings.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\library_field\LibraryService $libraryService
+   * @param LibraryService $libraryService
    *   The library service.
-   * @param \Drupal\Core\Session\AccountInterface $currentUser
+   * @param AccountInterface $currentUser
    *   The current user.
    */
   public function __construct(
@@ @@
    *
    * @param array $element
    *   The element to validate.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function validate(array $element, FormStateInterface $form_state): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/library_field/src/Plugin/Field/FieldFormatter/LibraryFormatter.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * The library service.
    *
-   * @var \Drupal\library_field\LibraryService
+   * @var LibraryService
    */
   protected $libraryService;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\library_field\LibraryService $libraryService
+   * @param LibraryService $libraryService
    *   The library service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/library_field/src/LibraryService.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\library_field;

+use Drupal\Core\Extension\Extension;
 use Drupal\Core\Asset\LibraryDiscoveryInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Extension\ThemeHandlerInterface;
@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The theme handler service.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
   /**
    * The library discovery service.
    *
-   * @var \Drupal\Core\Asset\LibraryDiscoveryInterface
+   * @var LibraryDiscoveryInterface
    */
   protected $libraryDiscovery;

@@ @@
   /**
    * LibraryService constructor.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $themeHandler
+   * @param ThemeHandlerInterface $themeHandler
    *   The theme handler.
-   * @param \Drupal\Core\Asset\LibraryDiscoveryInterface $libraryDiscovery
+   * @param LibraryDiscoveryInterface $libraryDiscovery
    *   The library discovery service.
    */
   public function __construct(
@@ @@
     foreach ($this::getLibraryTypes() as $type) {
       $libraries[$type] = [];
     }
-    /** @var \Drupal\Core\Extension\Extension[] $extensions */
+    /** @var Extension[] $extensions */
     $extensions = array_merge(
       $this->moduleHandler->getModuleList(),
       $this->themeHandler->rebuildThemeData()
@@ @@
    * @param string $type
    *   The library type to get the label for.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The label of the library type.
    */
   public function getLibraryTypeReadable(string $type): TranslatableMarkup {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/library_field/src/Controller/LibrariesController.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The library service.
    *
-   * @var \Drupal\library_field\LibraryService
+   * @var LibraryService
    */
   protected $libraryService;

@@ @@
   /**
    * LibrariesController constructor.
    *
-   * @param \Drupal\library_field\LibraryService $libraryService
+   * @param LibraryService $libraryService
    *   The library service.
    */
   public function __construct(LibraryService $libraryService) {
@@ @@
   /**
    * Endpoint for getting all libraries as JSON response.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The libraries JSON response.
    */
   public function listLibraries(): JsonResponse {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/library_field/modules/library_field_entity/src/LibraryFileService.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The library service.
    *
-   * @var \Drupal\library_field\LibraryService
+   * @var LibraryService
    */
   protected $libraryService;

@@ @@
   /**
    * LibraryFileService constructor.
    *
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param FileSystemInterface $fileSystem
    *   File system.
-   * @param \Drupal\library_field\LibraryService $libraryService
+   * @param LibraryService $libraryService
    *   Library service.
    * @param string $appRoot
    *   Application root.
@@ @@
   /**
    * Writes and removes library files based on entity passed.
    *
-   * @param \Drupal\library_field_entity\Entity\LibraryFieldEntityInterface $library
+   * @param LibraryFieldEntityInterface $library
    *   Library entity.
    */
   public function writeLibraryFiles(LibraryFieldEntityInterface $library): void {
@@ @@
    *
    * @param string $type
    *   The asset type to delete.
-   * @param \Drupal\library_field_entity\Entity\LibraryFieldEntityInterface $library
+   * @param LibraryFieldEntityInterface $library
    *   The library entity to execute file deletion.
    */
   protected function deleteLibraryFile(string $type, LibraryFieldEntityInterface $library): void {
@@ @@
   /**
    * Deletes all assets associated with a library entity.
    *
-   * @param \Drupal\library_field_entity\Entity\LibraryFieldEntityInterface $library
+   * @param LibraryFieldEntityInterface $library
    *   The library entity to execute file deletion.
    */
   public function deleteAllLibraryFiles(LibraryFieldEntityInterface $library): void {
@@ @@
    *
    * @param string $type
    *   The asset type.
-   * @param \Drupal\library_field_entity\Entity\LibraryFieldEntityInterface $library
+   * @param LibraryFieldEntityInterface $library
    *   The library entity.
    * @param string $base
    *   The base path.
@@ @@
    *
    * @param string $type
    *   The asset type.
-   * @param \Drupal\library_field_entity\Entity\LibraryFieldEntityInterface $library
+   * @param LibraryFieldEntityInterface $library
    *   The library entity.
    *
    * @return string
@@ @@
    *
    * @param string $type
    *   The asset type.
-   * @param \Drupal\library_field_entity\Entity\LibraryFieldEntityInterface $library
+   * @param LibraryFieldEntityInterface $library
    *   The library entity.
    *
    * @return string
@@ @@
   /**
    * Builds the library information needed for library build info hook.
    *
-   * @param \Drupal\library_field_entity\Entity\LibraryFieldEntityInterface $library
+   * @param LibraryFieldEntityInterface $library
    *   The library entity.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/library_field/modules/library_field_entity/src/LibraryBuilderService.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\library_field_entity;

+use Drupal\Core\Entity\RevisionableStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\library_field_entity\Entity\LibraryFieldEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;

 /**
@@ @@
   /**
    * Library storage.
    *
-   * @var \Drupal\Core\Entity\RevisionableStorageInterface
+   * @var RevisionableStorageInterface
    */
   protected $libraryStorage;

@@ @@
    *
    * @param LibraryFileService $fileService
    *   The library file service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(LibraryFileService $fileService, EntityTypeManagerInterface $entityTypeManager) {
     $this->fileService = $fileService;
@@ @@
     $libraries = [];
     $allLibraries = $this->libraryStorage->loadMultiple();
     foreach ($allLibraries as $library) {
-      /** @var \Drupal\library_field_entity\Entity\LibraryFieldEntityInterface $library */
+      /** @var LibraryFieldEntityInterface $library */
       if (!$library->isApproved() && empty($library->getRecentApprovedRevision())) {
         continue;
       }
@@ @@
         $libraries[$library->getName()] = $this->fileService->getLibraryInfo($library);
       }
       else {
-        /** @var \Drupal\library_field_entity\Entity\LibraryFieldEntityInterface $currentActiveLibrary */
+        /** @var LibraryFieldEntityInterface $currentActiveLibrary */
         $currentActiveLibrary = $this->libraryStorage->loadRevision($library->getRecentApprovedRevision());
         if (empty($currentActiveLibrary)) {
           return [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/library_field/modules/library_field_entity/src/Form/LibraryFieldEntityReviewForm.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\library_field_entity\Form;

+use Drupal\library_field_entity\Entity\LibraryFieldEntity;
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * The library entity.
    *
-   * @var \Drupal\library_field_entity\Entity\LibraryFieldEntity
+   * @var LibraryFieldEntity
    */
   protected $library;

@@ @@
   /**
    * The library configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $dispatcher;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * LibraryFieldEntityReviewForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The configuration factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher
+   * @param EventDispatcherInterface $dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(
@@ @@
       $this->library
         ->setRecentApprovedRevision((int) $this->library->getRevisionId())
         ->save();
-      $this->dispatcher->dispatch(LibraryApprovalEvent::NAME, new LibraryApprovalEvent($this->library));
+      $this->dispatcher->dispatch(new LibraryApprovalEvent($this->library), LibraryApprovalEvent::NAME);
       $this->messenger()->addMessage(
         $this->t(
           "Successfully approved and activated Library: @name",
@@ @@
   /**
    * The access handler.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account checking access to form.
-   * @param \Drupal\library_field_entity\Entity\LibraryFieldEntityInterface $library_field_entity
+   * @param LibraryFieldEntityInterface $library_field_entity
    *   The library field entity.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   The access result.
    */
   public function access(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/library_field/modules/library_field_entity/src/Form/LibraryFieldEntityForm.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\library_field_entity\Form;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\library_field_entity\Entity\LibraryFieldEntity;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\ContentEntityForm;
@@ @@
   /**
    * The library entity settings config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * The Library storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $libraryStorage;

@@ @@
   /**
    * LibraryFieldEntityForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The configuration factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface|null $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface|null $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\Component\Datetime\TimeInterface|null $time
+   * @param TimeInterface|null $time
    *   The time service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(
     EntityRepositoryInterface $entity_repository,
@@ @@
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
     $form = parent::buildForm($form, $form_state);
-    /** @var \Drupal\library_field_entity\Entity\LibraryFieldEntityInterface $entity */
+    /** @var LibraryFieldEntityInterface $entity */
     $entity = $this->entity;

     $form['revision_log']['#weight'] = 40;
@@ @@
    * {@inheritdoc}
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\library_field_entity\Entity\LibraryFieldEntityInterface $entity */
+    /** @var LibraryFieldEntityInterface $entity */
     $entity = $this->entity;
     $name = $form_state->getValue([static::NAME_FIELD, 0, 'value']);
     if ($entity->isNew()) {
@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\library_field_entity\Entity\LibraryFieldEntity $entity */
+    /** @var LibraryFieldEntity $entity */
     $entity = $this->entity;
     $currentUserId = (int) $this->currentUser()->id();
     $entity
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/library_field/modules/library_field_entity/src/Form/LibraryFieldEntityBeginReviewForm.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\library_field_entity\Form;

+use Drupal\library_field_entity\Entity\LibraryFieldEntity;
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * The library entity.
    *
-   * @var \Drupal\library_field_entity\Entity\LibraryFieldEntity
+   * @var LibraryFieldEntity
    */
   protected $library;

@@ @@
   /**
    * The Library Field Entity settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * LibraryFieldEntityBeginReviewForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The Configuration Factory.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The Time service.
    */
   public function __construct(
@@ @@
   /**
    * Access handler for this form.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user accessing the form.
-   * @param \Drupal\library_field_entity\Entity\LibraryFieldEntityInterface $library_field_entity
+   * @param LibraryFieldEntityInterface $library_field_entity
    *   The library entity.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   The access result.
    */
   public function access(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/library_field/modules/library_field_entity/src/EventSubscriber/LibraryLifecycleEventSubscriber.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The library file service.
    *
-   * @var \Drupal\library_field_entity\LibraryFileService
+   * @var LibraryFileService
    */
   protected $fileService;

@@ @@
   /**
    * The library discovery service.
    *
-   * @var \Drupal\Core\Asset\LibraryDiscoveryInterface
+   * @var LibraryDiscoveryInterface
    */
   protected $libraryDiscovery;

@@ @@
   /**
    * LibraryLifecycleEventSubscriber constructor.
    *
-   * @param \Drupal\library_field_entity\LibraryFileService $fileService
+   * @param LibraryFileService $fileService
    *   The library file service.
-   * @param \Drupal\Core\Asset\LibraryDiscoveryInterface $libraryDiscovery
+   * @param LibraryDiscoveryInterface $libraryDiscovery
    *   The library discovery service.
    */
   public function __construct(
@@ @@
   /**
    * Handles when a library is approved; writes new files.
    *
-   * @param \Drupal\library_field_entity\Event\LibraryApprovalEvent $event
+   * @param LibraryApprovalEvent $event
    *   The Library approved event.
    */
   public function onApproval(LibraryApprovalEvent $event): void {
@@ @@
   /**
    * Handles when a library is removed; removes files.
    *
-   * @param \Drupal\library_field_entity\Event\LibraryDeletionEvent $event
+   * @param LibraryDeletionEvent $event
    *   The library deletion event.
    */
   public function onDeletion(LibraryDeletionEvent $event): void {
@@ @@
   /**
    * Clears the Library cache, and asset files.
    *
-   * @param \Drupal\library_field_entity\Entity\LibraryFieldEntityInterface $library
+   * @param LibraryFieldEntityInterface $library
    *   The library to clear cache for.
    */
   protected function clearCache(LibraryFieldEntityInterface $library): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/library_field/modules/library_field_entity/src/Event/BaseLibraryLifecycleEvent.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\library_field_entity\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\library_field_entity\Entity\LibraryFieldEntityInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * A Base Library Event.
@@ @@
   /**
    * The library entity.
    *
-   * @var \Drupal\library_field_entity\Entity\LibraryFieldEntityInterface
+   * @var LibraryFieldEntityInterface
    */
   protected $library;

@@ @@
   /**
    * BaseLibraryLifecycleEvent constructor.
    *
-   * @param \Drupal\library_field_entity\Entity\LibraryFieldEntityInterface $library
+   * @param LibraryFieldEntityInterface $library
    *   The library entity.
    */
   public function __construct(LibraryFieldEntityInterface $library) {
@@ @@
   /**
    * Getter for the Library Entity.
    *
-   * @return \Drupal\library_field_entity\Entity\LibraryFieldEntityInterface
+   * @return LibraryFieldEntityInterface
    *   The library entity.
    */
   public function getLibrary(): LibraryFieldEntityInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/library_field/modules/library_field_entity/src/Controller/LibraryFieldEntityController.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\library_field_entity\Controller;

+use Drupal\Core\Entity\RevisionableStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Library storage.
    *
-   * @var \Drupal\Core\Entity\RevisionableStorageInterface
+   * @var RevisionableStorageInterface
    */
   protected $libraryStorage;

@@ @@
   /**
    * LibraryFieldEntityController constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $dateFormatter
+   * @param DateFormatterInterface $dateFormatter
    *   The date formatter.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(
     EntityTypeManagerInterface $entityTypeManager,
@@ @@
    * @param int|string $library_field_entity_revision
    *   The revision ID.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The title.
    */
   public function revisionTitle($library_field_entity_revision) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/library_field/modules/library_field_entity/src/Access/LibraryFieldEntityAccessHandler.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\library_field_entity\Access;

+use Drupal\library_field_entity\Entity\LibraryFieldEntityInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
     $operation,
     AccountInterface $account
   ) {
-    /** @var \Drupal\library_field_entity\Entity\LibraryFieldEntityInterface $entity */
+    /** @var LibraryFieldEntityInterface $entity */
     $adminPermission = $this->entityType->getAdminPermission();
     if ($account->hasPermission($adminPermission)) {
       return AccessResult::allowed();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 13 files have been changed by Rector                                      

