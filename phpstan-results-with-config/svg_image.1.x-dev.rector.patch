diff --git a/modules/svg_image_responsive/src/Plugin/Field/FieldFormatter/SvgResponsiveImageFormatter.php b/modules/svg_image_responsive/src/Plugin/Field/FieldFormatter/SvgResponsiveImageFormatter.php
index cac8eab..5d8a414 100755
--- a/modules/svg_image_responsive/src/Plugin/Field/FieldFormatter/SvgResponsiveImageFormatter.php
+++ b/modules/svg_image_responsive/src/Plugin/Field/FieldFormatter/SvgResponsiveImageFormatter.php
@@ -38,7 +38,7 @@ class SvgResponsiveImageFormatter extends ResponsiveImageFormatter {
   /**
    * File logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannel
+   * @var LoggerChannel
    */
   private $logger;
 
@@ -75,7 +75,7 @@ class SvgResponsiveImageFormatter extends ResponsiveImageFormatter {
    */
   public function viewElements(FieldItemListInterface $items, $langcode) {
     $elements = [];
-    /** @var \Drupal\file\Entity\File[] $files */
+    /** @var File[] $files */
     $files = $this->getEntitiesToView($items, $langcode);
 
     // Early opt-out if the field is empty.
@@ -122,14 +122,14 @@ class SvgResponsiveImageFormatter extends ResponsiveImageFormatter {
       $cacheContexts = [];
       if (isset($linkFile)) {
         $imageUri = $file->getFileUri();
-        $url = Url::fromUri(file_create_url($imageUri));
+        $url = \Drupal::service('file_url_generator')->generate($imageUri);
         $cacheContexts[] = 'url.site';
       }
       $cacheTags = Cache::mergeTags($cacheTags, $file->getCacheTags());
 
       // Link the <picture> element to the original file.
       if (isset($linkFile)) {
-        $url = file_url_transform_relative(file_create_url($file->getFileUri()));
+        $url = \Drupal::service('file_url_generator')->generateString($file->getFileUri());
       }
       // Extract field item attributes for the theme function, and unset them
       // from the $item so that the field template does not re-render them.
@@ -237,7 +237,7 @@ class SvgResponsiveImageFormatter extends ResponsiveImageFormatter {
   /**
    * Provides content of the file.
    *
-   * @param \Drupal\file\Entity\File $file
+   * @param File $file
    *   File to handle.
    *
    * @return string
diff --git a/src/Plugin/Field/FieldFormatter/SvgImageFormatter.php b/src/Plugin/Field/FieldFormatter/SvgImageFormatter.php
index 9457677..f831b1d 100755
--- a/src/Plugin/Field/FieldFormatter/SvgImageFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/SvgImageFormatter.php
@@ -38,7 +38,7 @@ class SvgImageFormatter extends ImageFormatter {
   /**
    * File logger channel.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   private $logger;
 
@@ -73,7 +73,7 @@ class SvgImageFormatter extends ImageFormatter {
    */
   public function viewElements(FieldItemListInterface $items, $langcode) {
     $elements = [];
-    /** @var \Drupal\file\Entity\File[] $files */
+    /** @var File[] $files */
     $files = $this->getEntitiesToView($items, $langcode);
 
     // Early opt-out if the field is empty.
@@ -115,7 +115,7 @@ class SvgImageFormatter extends ImageFormatter {
       $cacheContexts = [];
       if (isset($linkFile)) {
         $imageUri = $file->getFileUri();
-        $url = Url::fromUri(file_create_url($imageUri));
+        $url = \Drupal::service('file_url_generator')->generate($imageUri);
         $cacheContexts[] = 'url.site';
       }
       $cacheTags = Cache::mergeTags($cacheTags, $file->getCacheTags());
@@ -230,7 +230,7 @@ class SvgImageFormatter extends ImageFormatter {
   /**
    * Provides content of the file.
    *
-   * @param \Drupal\file\Entity\File $file
+   * @param File $file
    *   File to handle.
    *
    * @return string
diff --git a/src/Plugin/Field/FieldFormatter/SvgImageUrlFormatter.php b/src/Plugin/Field/FieldFormatter/SvgImageUrlFormatter.php
index a7c261f..5a11b49 100644
--- a/src/Plugin/Field/FieldFormatter/SvgImageUrlFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/SvgImageUrlFormatter.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\svg_image\Plugin\Field\FieldFormatter;
 
+use Drupal\Core\Field\EntityReferenceFieldItemListInterface;
+use Drupal\image\ImageStyleInterface;
+use Drupal\file\FileInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\image\Plugin\Field\FieldFormatter\ImageUrlFormatter;
@@ -27,20 +30,20 @@ class SvgImageUrlFormatter extends ImageUrlFormatter {
   public function viewElements(FieldItemListInterface $items, $langcode) {
     $elements = [];
 
-    /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $items */
+    /** @var EntityReferenceFieldItemListInterface $items */
     if (empty($images = $this->getEntitiesToView($items, $langcode))) {
       // Early opt-out if the field is empty.
       return $elements;
     }
 
-    /** @var \Drupal\image\ImageStyleInterface $image_style */
+    /** @var ImageStyleInterface $image_style */
     $image_style = $this->imageStyleStorage->load($this->getSetting('image_style'));
-    /** @var \Drupal\file\FileInterface[] $images */
+    /** @var FileInterface[] $images */
     foreach ($images as $delta => $image) {
       $image_uri = $image->getFileUri();
       $isSvg = svg_image_is_file_svg($image);
-      $url = ($image_style && !$isSvg) ? $image_style->buildUrl($image_uri) : file_create_url($image_uri);
-      $url = file_url_transform_relative($url);
+      $url = ($image_style && !$isSvg) ? $image_style->buildUrl($image_uri) : \Drupal::service('file_url_generator')->generateAbsoluteString($image_uri);
+      $url = \Drupal::service('file_url_generator')->transformRelative($url);
 
       // Add cacheability metadata from the image and image style.
       $cacheability = CacheableMetadata::createFromObject($image);
diff --git a/src/Plugin/Field/FieldWidget/SvgImageWidget.php b/src/Plugin/Field/FieldWidget/SvgImageWidget.php
index fe5640d..0bf9636 100755
--- a/src/Plugin/Field/FieldWidget/SvgImageWidget.php
+++ b/src/Plugin/Field/FieldWidget/SvgImageWidget.php
@@ -2,6 +2,14 @@
 
 namespace Drupal\svg_image\Plugin\Field\FieldWidget;
 
+use Drupal\Core\Entity\EntityRepository;
+use Drupal\Core\Render\Renderer;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Image\ImageFactory;
+use Drupal\image\ImageStyleStorage;
+use Drupal\image\ImageStyleInterface;
+use Drupal\image\ImageStyleStorageInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Component\Utility\NestedArray;
@@ -29,42 +37,42 @@ class SvgImageWidget extends FileWidget {
   /**
    * Container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   private $container;
 
   /**
    * Entity repository service instance.
    *
-   * @var \Drupal\Core\Entity\EntityRepository
+   * @var EntityRepository
    */
   protected $entityRepository;
 
   /**
    * Renderer instance.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;
 
   /**
    * EntityType manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Image style storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $imageStyleStorage;
 
   /**
    * The image factory service.
    *
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   protected $imageFactory;
 
@@ -336,8 +344,7 @@ class SvgImageWidget extends FileWidget {
     $styleId = $this->getSetting('preview_image_style');
 
     if ($styleId) {
-      /** @var \Drupal\image\ImageStyleStorage $imageStyleStorage */
-
+      /** @var ImageStyleStorage $imageStyleStorage */
       $style = $this->imageStyleStorage->load($styleId);
       if ($style) {
         // If this widget uses a valid image style to display the preview of
@@ -357,12 +364,12 @@ class SvgImageWidget extends FileWidget {
     $changed = parent::onDependencyRemoval($dependencies);
     $styleId = $this->getSetting('preview_image_style');
 
-    /** @var \Drupal\image\ImageStyleInterface $style */
+    /** @var ImageStyleInterface $style */
     if ($styleId) {
       $style = $this->imageStyleStorage->load($styleId);
       if ($style) {
         if (!empty($dependencies[$style->getConfigDependencyKey()][$style->getConfigDependencyName()])) {
-          /** @var \Drupal\image\ImageStyleStorageInterface $storage */
+          /** @var ImageStyleStorageInterface $storage */
           $storage = $this->entityTypeManager->getStorage($style->getEntityTypeId());
 
           $replacementId = $storage->getReplacementId($styleId);
diff --git a/svg_image.module b/svg_image.module
index 6e6682c..fb90565 100644
--- a/svg_image.module
+++ b/svg_image.module
@@ -52,7 +52,7 @@ function svg_image_preprocess_image_style(array &$variables) {
 /**
  * Provides image file dimensions.
  *
- * @param \Drupal\file\Entity\File $file
+ * @param File $file
  *   SVG file.
  *
  * @return integer[]
@@ -99,7 +99,7 @@ function svg_image_get_image_file_dimensions(File $file) {
 /**
  * Checks if current file is SVG image.
  *
- * @param \Drupal\file\Entity\File $file
+ * @param File $file
  *   File to check.
  *
  * @return bool
