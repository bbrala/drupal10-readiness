diff --git a/modules/single_page_site_next_page/src/EventSubscriber/AlterSinglePageSiteOutput.php b/modules/single_page_site_next_page/src/EventSubscriber/AlterSinglePageSiteOutput.php
index dc2592e..46273b3 100644
--- a/modules/single_page_site_next_page/src/EventSubscriber/AlterSinglePageSiteOutput.php
+++ b/modules/single_page_site_next_page/src/EventSubscriber/AlterSinglePageSiteOutput.php
@@ -19,7 +19,7 @@ class AlterSinglePageSiteOutput implements EventSubscriberInterface {
   /**
    * The Single Page Site Manager.
    *
-   * @var \Drupal\single_page_site\Manager\SinglePageSiteManager
+   * @var SinglePageSiteManager
    */
   protected $manager;
 
@@ -41,7 +41,7 @@ class AlterSinglePageSiteOutput implements EventSubscriberInterface {
   /**
    * Alters the output of the single page item.
    *
-   * @param \Drupal\single_page_site\Event\EventSinglePageSiteAlterOutput $event
+   * @param EventSinglePageSiteAlterOutput $event
    *   Event value.
    */
   public function alterOutput(EventSinglePageSiteAlterOutput $event) {
diff --git a/single_page_site.module b/single_page_site.module
index 3a548b4..dda0632 100644
--- a/single_page_site.module
+++ b/single_page_site.module
@@ -15,7 +15,7 @@ use Drupal\Core\Form\FormStateInterface;
 function single_page_site_help($route_name, RouteMatchInterface $route_match) {
   switch ($route_name) {
     case 'help.page.single_page_site':
-      $output = file_get_contents(drupal_get_path('module', 'single_page_site') . '/README.txt');
+      $output = file_get_contents(\Drupal::service('extension.list.module')->getPath('single_page_site') . '/README.txt');
       return '<pre>' . $output . '</pre>';
   }
 }
diff --git a/src/Controller/SinglePageSiteController.php b/src/Controller/SinglePageSiteController.php
index 11706e0..e63f8dc 100644
--- a/src/Controller/SinglePageSiteController.php
+++ b/src/Controller/SinglePageSiteController.php
@@ -23,41 +23,41 @@ class SinglePageSiteController extends ControllerBase {
   /**
    * The Single Page Site Manager.
    *
-   * @var \Drupal\single_page_site\Manager\SinglePageSiteManager
+   * @var SinglePageSiteManager
    */
   protected $manager;
 
   /**
    * The core module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;
 
   /**
    * The core renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * Symphony Event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * SinglePageSiteController constructor.
    *
-   * @param \Drupal\single_page_site\Manager\SinglePageSiteManager $manager
+   * @param SinglePageSiteManager $manager
    *   Manager value.
-   * @param \Drupal\Core\Extension\ModuleHandler $module_handler
+   * @param ModuleHandler $module_handler
    *   Module handler value.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   Renderer value.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher value.
    */
   public function __construct(SinglePageSiteManager $manager, ModuleHandler $module_handler, RendererInterface $renderer, EventDispatcherInterface $event_dispatcher) {
@@ -122,9 +122,9 @@ class SinglePageSiteController extends ControllerBase {
 
           // Dispatch event to allow other modules to make changes to the
           // output.
-          /** @var \Drupal\single_page_site\Event\EventSinglePageSiteAlterOutput $event */
+          /** @var EventSinglePageSiteAlterOutput $event */
           $event = new EventSinglePageSiteAlterOutput($output, $current_item_count);
-          $event = $this->eventDispatcher->dispatch(SinglePageSiteEvents::SINGLE_PAGE_SITE_ALTER_OUTPUT, $event);
+          $event = $this->eventDispatcher->dispatch($event, SinglePageSiteEvents::SINGLE_PAGE_SITE_ALTER_OUTPUT);
 
           // Build renderable array.
           $item = [
diff --git a/src/Event/EventSinglePageSiteAlterOutput.php b/src/Event/EventSinglePageSiteAlterOutput.php
index 0e81ac2..45c1e43 100644
--- a/src/Event/EventSinglePageSiteAlterOutput.php
+++ b/src/Event/EventSinglePageSiteAlterOutput.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\single_page_site\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Class EventSinglePageSiteAlterOutput.
diff --git a/src/Form/SinglePageSiteConfigForm.php b/src/Form/SinglePageSiteConfigForm.php
index edc37da..8966b06 100644
--- a/src/Form/SinglePageSiteConfigForm.php
+++ b/src/Form/SinglePageSiteConfigForm.php
@@ -18,16 +18,16 @@ class SinglePageSiteConfigForm extends ConfigFormBase {
   /**
    * The core module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * SinglePageSiteConfigForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory to load/save config.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Core module handler.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler) {
diff --git a/src/Manager/SinglePageSiteManager.php b/src/Manager/SinglePageSiteManager.php
index f1bbad0..43218b5 100644
--- a/src/Manager/SinglePageSiteManager.php
+++ b/src/Manager/SinglePageSiteManager.php
@@ -38,25 +38,24 @@ class SinglePageSiteManager {
   protected $moduleHandler;
   protected $argumentResolver;
   // @codingStandardsIgnoreEnd
-
   /**
    * SinglePageSiteManager constructor.
    *
-   * @param \Symfony\Component\HttpKernel\HttpKernelInterface $http_kernel
+   * @param HttpKernelInterface $http_kernel
    *   Http kernel value.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory values.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher
+   * @param EventDispatcherInterface $dispatcher
    *   Dispatcher value.
-   * @param \Drupal\Core\Controller\ControllerResolverInterface $resolver
+   * @param ControllerResolverInterface $resolver
    *   Resolver value.
-   * @param \Drupal\Core\Menu\MenuLinkTree $menu_tree
+   * @param MenuLinkTree $menu_tree
    *   Menu tree value.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   Language manager value.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Module handler value.
-   * @param \Symfony\Component\HttpKernel\Controller\ArgumentResolverInterface $argument_resolver
+   * @param ArgumentResolverInterface $argument_resolver
    *   The argument resolver.
    */
   public function __construct(HttpKernelInterface $http_kernel,
@@ -208,7 +207,7 @@ class SinglePageSiteManager {
   /**
    * Fetches all children of given menu.
    *
-   * @return array|\Drupal\Core\Menu\MenuLinkTreeElement[]|mixed
+   * @return array|MenuLinkTreeElement[]|mixed
    *   Returns array with Menu Children values.
    */
   public function getMenuChildren() {
@@ -228,7 +227,7 @@ class SinglePageSiteManager {
   /**
    * Checks if a given menu items has to be rendered.
    *
-   * @param \Drupal\Core\Menu\MenuLinkTreeElement $menu_item
+   * @param MenuLinkTreeElement $menu_item
    *   MenuLinkTreeElement object with menu item value.
    *
    * @return bool|array
@@ -266,7 +265,7 @@ class SinglePageSiteManager {
    *   Return result of function call_user_func_array with $controller and
    *   $arguments.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
+   * @throws NotFoundHttpException
    */
   public function executeAndRenderSubRequest($href) {
     $type = HttpKernelInterface::SUB_REQUEST;
