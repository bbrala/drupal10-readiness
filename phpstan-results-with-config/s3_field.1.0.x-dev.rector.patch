diff --git a/src/Controller/S3FieldController.php b/src/Controller/S3FieldController.php
index 017fa1b..142f476 100644
--- a/src/Controller/S3FieldController.php
+++ b/src/Controller/S3FieldController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\s3_field\Controller;
 
+use Drupal\Core\Access\AccessResultInterface;
+use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
 use Aws\S3\S3Client;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityFieldManager;
@@ -23,23 +25,23 @@ class S3FieldController extends ControllerBase {
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;
 
   /**
    * The key repository.
    *
-   * @var \Drupal\key\KeyRepository
+   * @var KeyRepository
    */
   protected $keyRepository;
 
   /**
    * S3FieldController constructor.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManager $entityFieldManager
+   * @param EntityFieldManager $entityFieldManager
    *   The entity field manager.
-   * @param \Drupal\key\KeyRepository $keyRepository
+   * @param KeyRepository $keyRepository
    *   The key repository.
    */
   public function __construct(EntityFieldManager $entityFieldManager, KeyRepository $keyRepository) {
@@ -60,14 +62,14 @@ class S3FieldController extends ControllerBase {
   /**
    * Access check for the entity & field.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param string $field_name
    *   The field name.
    * @param int $delta
    *   The field value's delta.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function fieldAccess(ContentEntityInterface $entity, string $field_name, int $delta) {
@@ -95,18 +97,18 @@ class S3FieldController extends ControllerBase {
   /**
    * Redirect to S3 based on key in entity's field.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param string $field_name
    *   The field name.
    * @param int $delta
    *   The field value's delta.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
+   * @throws NotFoundHttpException
    *   Thrown when the requested file does not exist.
-   * @throws \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException
+   * @throws AccessDeniedHttpException
    *   Thrown when the user does not have access to the file.
    */
   public function download(Request $request, ContentEntityInterface $entity, string $field_name, int $delta) {
diff --git a/src/Plugin/Field/FieldFormatter/S3FormatterBase.php b/src/Plugin/Field/FieldFormatter/S3FormatterBase.php
index cff96ec..63cba48 100644
--- a/src/Plugin/Field/FieldFormatter/S3FormatterBase.php
+++ b/src/Plugin/Field/FieldFormatter/S3FormatterBase.php
@@ -56,12 +56,12 @@ abstract class S3FormatterBase extends FormatterBase {
   /**
    * Get Drupal URL for field.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    * @param int $delta
    *   The field value's delta.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   Drupal URL which will redirect to S3.
    */
   public function getUrl(EntityInterface $entity, int $delta = 0) {
diff --git a/src/Plugin/media/Source/S3File.php b/src/Plugin/media/Source/S3File.php
index 0ce421b..9f9bee1 100644
--- a/src/Plugin/media/Source/S3File.php
+++ b/src/Plugin/media/Source/S3File.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\s3_field\Plugin\media\Source;
 
+use Aws\Result;
 use Drupal\media\MediaInterface;
 use Drupal\media\MediaSourceBase;
 use Aws\S3\S3Client;
@@ -149,7 +150,7 @@ class S3File extends MediaSourceBase {
   /**
    * Returns metadata for the S3 object.
    *
-   * @return \Aws\Result|array
+   * @return Result|array
    */
   protected function getObjectMetadata($settings, $key) {
     $client = new S3Client([
