diff --git a/modules/pagedesigner_audio/tests/src/Kernel/HandlerTests/AudioHandlerTest.php b/modules/pagedesigner_audio/tests/src/Kernel/HandlerTests/AudioHandlerTest.php
index 8528b66..9568239 100644
--- a/modules/pagedesigner_audio/tests/src/Kernel/HandlerTests/AudioHandlerTest.php
+++ b/modules/pagedesigner_audio/tests/src/Kernel/HandlerTests/AudioHandlerTest.php
@@ -39,7 +39,7 @@ class AudioHandlerTest extends MediaHandlerTestBase {
    *
    * @todo Add the pagedesigner editor config to the environment.
    */
-  public function setUp() {
+  public function setUp(): void {
     self::$modules[] = 'pagedesigner_audio';
 
     parent::setUp();
diff --git a/modules/pagedesigner_block/src/Plugin/Condition/PagedesignerCondition.php b/modules/pagedesigner_block/src/Plugin/Condition/PagedesignerCondition.php
index 0e5044b..47056a7 100644
--- a/modules/pagedesigner_block/src/Plugin/Condition/PagedesignerCondition.php
+++ b/modules/pagedesigner_block/src/Plugin/Condition/PagedesignerCondition.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\pagedesigner_block\Plugin\Condition;
 
+use Drupal\Core\Menu\MenuActiveTrailInterface;
+use Drupal\Core\Menu\MenuParentFormSelectorInterface;
+use Drupal\Core\Menu\MenuLinkManagerInterface;
 use Drupal\Core\Condition\ConditionInterface;
 use Drupal\Core\Condition\ConditionPluginBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -32,11 +35,11 @@ class PagedesignerCondition extends ConditionPluginBase implements ConditionInte
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Menu\MenuActiveTrailInterface $menu_active_trail
+   * @param MenuActiveTrailInterface $menu_active_trail
    *   The menu active trail service.
-   * @param \Drupal\Core\Menu\MenuParentFormSelectorInterface $menu_parent_form_selector
+   * @param MenuParentFormSelectorInterface $menu_parent_form_selector
    *   The menu parent form selector service.
-   * @param \Drupal\Core\Menu\MenuLinkManagerInterface $plugin_manager_menu_link
+   * @param MenuLinkManagerInterface $plugin_manager_menu_link
    *   The plugin manager menu link service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition) {
diff --git a/modules/pagedesigner_block/tests/src/Kernel/HandlerTests/BlockHandlerTest.php b/modules/pagedesigner_block/tests/src/Kernel/HandlerTests/BlockHandlerTest.php
index 356cecd..fa6efdd 100644
--- a/modules/pagedesigner_block/tests/src/Kernel/HandlerTests/BlockHandlerTest.php
+++ b/modules/pagedesigner_block/tests/src/Kernel/HandlerTests/BlockHandlerTest.php
@@ -38,7 +38,7 @@ class BlockHandlerTest extends CompoundHandlerTestBase {
    *
    * @todo Add the pagedesigner editor config to the environment.
    */
-  public function setUp() {
+  public function setUp(): void {
     self::$modules[] = 'system';
     self::$modules[] = 'block';
     self::$modules[] = 'pagedesigner_block';
diff --git a/modules/pagedesigner_document/src/Plugin/Linkit/Substitution/FileDownload.php b/modules/pagedesigner_document/src/Plugin/Linkit/Substitution/FileDownload.php
index b68d40a..2f3e50e 100644
--- a/modules/pagedesigner_document/src/Plugin/Linkit/Substitution/FileDownload.php
+++ b/modules/pagedesigner_document/src/Plugin/Linkit/Substitution/FileDownload.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\pagedesigner_document\Plugin\Linkit\Substitution;
 
+use Drupal\media\Entity\MediaType;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -24,7 +25,7 @@ class FileDownload extends PluginBase implements SubstitutionInterface, Containe
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -37,7 +38,7 @@ class FileDownload extends PluginBase implements SubstitutionInterface, Containe
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
@@ -60,16 +61,16 @@ class FileDownload extends PluginBase implements SubstitutionInterface, Containe
   /**
    * Get the URL associated with a given entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to get a URL for.
    *
-   * @return \Drupal\Core\GeneratedUrl
+   * @return GeneratedUrl
    *   A url to replace.
    */
   public function getUrl(EntityInterface $entity) {
     $url = new GeneratedUrl();
 
-    /** @var \Drupal\media\Entity\MediaType $media_bundle */
+    /** @var MediaType $media_bundle */
     $media_bundle = $this->entityTypeManager->getStorage('media_type')->load($entity->bundle());
 
     // Default to the canonical URL if the bundle doesn't have a source field.
@@ -86,7 +87,7 @@ class FileDownload extends PluginBase implements SubstitutionInterface, Containe
       return $entity->toUrl('canonical')->toString(TRUE);
     }
 
-    $fileUrl = file_create_url($file->getFileUri());
+    $fileUrl = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
     if (empty($fileUrl)) {
       return $entity->toUrl('canonical')->toString(TRUE);
     }
diff --git a/modules/pagedesigner_document/tests/src/Kernel/HandlerTests/DocumentHandlerTest.php b/modules/pagedesigner_document/tests/src/Kernel/HandlerTests/DocumentHandlerTest.php
index b73027e..9d58662 100644
--- a/modules/pagedesigner_document/tests/src/Kernel/HandlerTests/DocumentHandlerTest.php
+++ b/modules/pagedesigner_document/tests/src/Kernel/HandlerTests/DocumentHandlerTest.php
@@ -39,7 +39,7 @@ class DocumentHandlerTest extends MediaHandlerTestBase {
    *
    * @todo Add the pagedesigner editor config to the environment.
    */
-  public function setUp() {
+  public function setUp(): void {
     self::$modules[] = 'pagedesigner_document';
 
     parent::setUp();
diff --git a/modules/pagedesigner_duplication/pagedesigner_duplication.module b/modules/pagedesigner_duplication/pagedesigner_duplication.module
index f8d4fc0..d70062a 100644
--- a/modules/pagedesigner_duplication/pagedesigner_duplication.module
+++ b/modules/pagedesigner_duplication/pagedesigner_duplication.module
@@ -32,7 +32,7 @@ function pagedesigner_duplication_help($route_name, RouteMatchInterface $route_m
  * Adds the copy form to copy content and layout.
  *
  * @param array $form
- * @param \Drupal\Core\Form\FormStateInterface $formState
+ * @param FormStateInterface $formState
  * @param string $form_id
  *
  * @return void
@@ -45,7 +45,7 @@ function pagedesigner_duplication_form_node_form_alter(&$form, FormStateInterfac
  * Helper function to add the copy form to copy content and layout.
  *
  * @param array $form
- * @param \Drupal\Core\Form\FormStateInterface $formState
+ * @param FormStateInterface $formState
  *
  * @return void
  */
@@ -146,7 +146,7 @@ function pagedesigner_duplication_preprocess_page_form(&$form, FormStateInterfac
  * Copies layout and content.
  *
  * @param array $form
- * @param \Drupal\Core\Form\FormStateInterface $formState
+ * @param FormStateInterface $formState
  *
  * @return void
  */
diff --git a/modules/pagedesigner_duplication/src/Service/DuplicationService.php b/modules/pagedesigner_duplication/src/Service/DuplicationService.php
index 5e64a00..c0a5dff 100644
--- a/modules/pagedesigner_duplication/src/Service/DuplicationService.php
+++ b/modules/pagedesigner_duplication/src/Service/DuplicationService.php
@@ -16,9 +16,9 @@ class DuplicationService extends PagedesignerService {
    * Clone the elements from on entity to another entity.
    * Only matching pagedesigner fields are taken into account.
    *
-   * @param \Drupal\Core\Entity\ContentEntityBase $source
+   * @param ContentEntityBase $source
    *   The source entity.
-   * @param \Drupal\Core\Entity\ContentEntityBase $target
+   * @param ContentEntityBase $target
    *   The target entity.
    */
   public function duplicate(ContentEntityBase $source, ContentEntityBase $target) {
diff --git a/modules/pagedesigner_embed/src/Plugin/Field/FieldFormatter/EmbedUrl.php b/modules/pagedesigner_embed/src/Plugin/Field/FieldFormatter/EmbedUrl.php
index 7b9c80b..f300e47 100644
--- a/modules/pagedesigner_embed/src/Plugin/Field/FieldFormatter/EmbedUrl.php
+++ b/modules/pagedesigner_embed/src/Plugin/Field/FieldFormatter/EmbedUrl.php
@@ -25,7 +25,7 @@ class EmbedUrl extends FormatterBase implements ContainerFactoryPluginInterface
   /**
    * The embed provider plugin manager.
    *
-   * @var \Drupal\video_embed_field\ProviderManagerInterface
+   * @var ProviderManagerInterface
    */
   protected $providerManager;
 
@@ -36,7 +36,7 @@ class EmbedUrl extends FormatterBase implements ContainerFactoryPluginInterface
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ -46,7 +46,7 @@ class EmbedUrl extends FormatterBase implements ContainerFactoryPluginInterface
    *   The view mode.
    * @param array $third_party_settings
    *   Third party settings.
-   * @param \Drupal\video_embed_field\ProviderManagerInterface $provider_manager
+   * @param ProviderManagerInterface $provider_manager
    *   The video embed provider manager.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, $settings, $label, $view_mode, $third_party_settings, ProviderManagerInterface $provider_manager) {
diff --git a/modules/pagedesigner_embed/src/Plugin/Field/FieldFormatter/Provider.php b/modules/pagedesigner_embed/src/Plugin/Field/FieldFormatter/Provider.php
index d6eed8e..2f5e618 100644
--- a/modules/pagedesigner_embed/src/Plugin/Field/FieldFormatter/Provider.php
+++ b/modules/pagedesigner_embed/src/Plugin/Field/FieldFormatter/Provider.php
@@ -25,7 +25,7 @@ class Provider extends FormatterBase implements ContainerFactoryPluginInterface
   /**
    * The embed provider plugin manager.
    *
-   * @var \Drupal\video_embed_field\ProviderManagerInterface
+   * @var ProviderManagerInterface
    */
   protected $providerManager;
 
@@ -36,7 +36,7 @@ class Provider extends FormatterBase implements ContainerFactoryPluginInterface
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ -46,7 +46,7 @@ class Provider extends FormatterBase implements ContainerFactoryPluginInterface
    *   The view mode.
    * @param array $third_party_settings
    *   Third party settings.
-   * @param \Drupal\video_embed_field\ProviderManagerInterface $provider_manager
+   * @param ProviderManagerInterface $provider_manager
    *   The video embed provider manager.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, $settings, $label, $view_mode, $third_party_settings, ProviderManagerInterface $provider_manager) {
diff --git a/modules/pagedesigner_embed/src/Plugin/Field/FieldFormatter/Thumbnail.php b/modules/pagedesigner_embed/src/Plugin/Field/FieldFormatter/Thumbnail.php
index 01765ce..c16a642 100644
--- a/modules/pagedesigner_embed/src/Plugin/Field/FieldFormatter/Thumbnail.php
+++ b/modules/pagedesigner_embed/src/Plugin/Field/FieldFormatter/Thumbnail.php
@@ -25,7 +25,7 @@ class Thumbnail extends FormatterBase implements ContainerFactoryPluginInterface
   /**
    * The embed provider plugin manager.
    *
-   * @var \Drupal\video_embed_field\ProviderManagerInterface
+   * @var ProviderManagerInterface
    */
   protected $providerManager;
 
@@ -36,7 +36,7 @@ class Thumbnail extends FormatterBase implements ContainerFactoryPluginInterface
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ -46,7 +46,7 @@ class Thumbnail extends FormatterBase implements ContainerFactoryPluginInterface
    *   The view mode.
    * @param array $third_party_settings
    *   Third party settings.
-   * @param \Drupal\video_embed_field\ProviderManagerInterface $provider_manager
+   * @param ProviderManagerInterface $provider_manager
    *   The video embed provider manager.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, $settings, $label, $view_mode, $third_party_settings, ProviderManagerInterface $provider_manager) {
diff --git a/modules/pagedesigner_embed/tests/src/Kernel/HandlerTests/EmbedHandlerTest.php b/modules/pagedesigner_embed/tests/src/Kernel/HandlerTests/EmbedHandlerTest.php
index 8ad78f1..8f53ffe 100644
--- a/modules/pagedesigner_embed/tests/src/Kernel/HandlerTests/EmbedHandlerTest.php
+++ b/modules/pagedesigner_embed/tests/src/Kernel/HandlerTests/EmbedHandlerTest.php
@@ -46,7 +46,7 @@ class EmbedHandlerTest extends MediaHandlerTestBase {
    *
    * @todo Add the pagedesigner editor config to the environment.
    */
-  public function setUp() {
+  public function setUp(): void {
     self::$modules[] = 'video_embed_field';
     self::$modules[] = 'video_embed_media';
     self::$modules[] = 'pagedesigner_embed';
diff --git a/modules/pagedesigner_image/tests/src/Kernel/HandlerTests/ImageHandlerTest.php b/modules/pagedesigner_image/tests/src/Kernel/HandlerTests/ImageHandlerTest.php
index a2f4c5f..c96a607 100644
--- a/modules/pagedesigner_image/tests/src/Kernel/HandlerTests/ImageHandlerTest.php
+++ b/modules/pagedesigner_image/tests/src/Kernel/HandlerTests/ImageHandlerTest.php
@@ -39,7 +39,7 @@ class ImageHandlerTest extends MediaHandlerTestBase {
    *
    * @todo Add the pagedesigner editor config to the environment.
    */
-  public function setUp() {
+  public function setUp(): void {
     self::$modules[] = 'pagedesigner_image';
 
     parent::setUp();
diff --git a/modules/pagedesigner_layout/src/Plugin/rest/resource/LayoutResource.php b/modules/pagedesigner_layout/src/Plugin/rest/resource/LayoutResource.php
index 67dd940..133c643 100644
--- a/modules/pagedesigner_layout/src/Plugin/rest/resource/LayoutResource.php
+++ b/modules/pagedesigner_layout/src/Plugin/rest/resource/LayoutResource.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\pagedesigner_layout\Plugin\rest\resource;
 
+use Symfony\Component\HttpKernel\Exception\HttpException;
 use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\pagedesigner\Entity\Element;
 use Drupal\pagedesigner\Service\Renderer;
@@ -30,21 +31,21 @@ class LayoutResource extends ResourceBase {
   /**
    * A current user instance.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The handler manager.
    *
-   * @var \Drupal\pagedesigner\Service\StateChanger
+   * @var StateChanger
    */
   protected $stateChanger;
 
   /**
    * The handler manager.
    *
-   * @var \Drupal\pagedesigner\Service\Renderer
+   * @var Renderer
    */
   protected $renderer;
 
@@ -59,13 +60,13 @@ class LayoutResource extends ResourceBase {
    *   The plugin implementation definition.
    * @param array $serializer_formats
    *   The available serialization formats.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   A current user instance.
-   * @param \Drupal\pagedesigner\Service\StateChanger $state_changer
+   * @param StateChanger $state_changer
    *   The state changer.
-   * @param \Drupal\pagedesigner\Service\Renderer $renderer
+   * @param Renderer $renderer
    *   The pagedesigner renderer.
    */
   public function __construct(
@@ -106,13 +107,13 @@ class LayoutResource extends ResourceBase {
    * @param int $id
    *   ID of the entity.
    *
-   * @return \Drupal\rest\ModifiedResourceResponse
+   * @return ModifiedResourceResponse
    *   The HTTP response object.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws exception expected.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\BadRequestHttpException
+   * @throws BadRequestHttpException
    *   If the request is malformed.
    */
   public function get($id) {
@@ -135,16 +136,16 @@ class LayoutResource extends ResourceBase {
   /**
    * Responds to POST requests.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Drupal\rest\ModifiedResourceResponse
+   * @return ModifiedResourceResponse
    *   The HTTP response object.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws exception expected.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\BadRequestHttpException
+   * @throws BadRequestHttpException
    *   If the request is malformed.
    */
   public function post(Request $request) {
@@ -178,13 +179,13 @@ class LayoutResource extends ResourceBase {
    * @param int $id
    *   ID of the entity.
    *
-   * @return \Drupal\rest\ModifiedResourceResponse
+   * @return ModifiedResourceResponse
    *   The HTTP response object.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws exception expected.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\BadRequestHttpException
+   * @throws BadRequestHttpException
    *   If the request is malformed.
    */
   public function delete($id) {
diff --git a/modules/pagedesigner_link/tests/src/Kernel/HandlerTests/LinkHandlerTest.php b/modules/pagedesigner_link/tests/src/Kernel/HandlerTests/LinkHandlerTest.php
index 71e26d4..5f996a6 100644
--- a/modules/pagedesigner_link/tests/src/Kernel/HandlerTests/LinkHandlerTest.php
+++ b/modules/pagedesigner_link/tests/src/Kernel/HandlerTests/LinkHandlerTest.php
@@ -40,7 +40,7 @@ class LinkHandlerTest extends PlainFieldHandlerTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     self::$modules[] = 'system';
     self::$modules[] = 'link';
     self::$modules[] = 'linkit';
diff --git a/modules/pagedesigner_link/tests/src/Kernel/HandlerTests/TargetHandlerTest.php b/modules/pagedesigner_link/tests/src/Kernel/HandlerTests/TargetHandlerTest.php
index 911aa85..e49a1b3 100644
--- a/modules/pagedesigner_link/tests/src/Kernel/HandlerTests/TargetHandlerTest.php
+++ b/modules/pagedesigner_link/tests/src/Kernel/HandlerTests/TargetHandlerTest.php
@@ -35,7 +35,7 @@ class TargetHandlerTest extends PlainFieldHandlerTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     self::$modules[] = 'system';
     self::$modules[] = 'link';
     self::$modules[] = 'linkit';
diff --git a/modules/pagedesigner_media/tests/src/Kernel/HandlerTests/MediaHandlerTestBase.php b/modules/pagedesigner_media/tests/src/Kernel/HandlerTests/MediaHandlerTestBase.php
index b01e36d..fd45fec 100644
--- a/modules/pagedesigner_media/tests/src/Kernel/HandlerTests/MediaHandlerTestBase.php
+++ b/modules/pagedesigner_media/tests/src/Kernel/HandlerTests/MediaHandlerTestBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\pagedesigner_media\Kernel\HandlerTests;
 
+use Drupal\file\Entity\File;
+use Drupal\media\Entity\Media;
 use Drupal\Tests\pagedesigner\Kernel\HandlerTests\PlainFieldHandlerTestBase;
 
 /**
@@ -16,21 +18,21 @@ abstract class MediaHandlerTestBase extends PlainFieldHandlerTestBase {
   /**
    * The file entity for the test.
    *
-   * @var Drupal\file\Entity\File
+   * @var File
    */
   protected $file = NULL;
 
   /**
    * The media entity for the test.
    *
-   * @var Drupal\media\Entity\Media
+   * @var Media
    */
   protected $media = NULL;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     self::$modules[] = 'system';
     self::$modules[] = 'file';
     self::$modules[] = 'image';
diff --git a/modules/pagedesigner_multitheme/src/EventSubscriber/FilterSubscriber.php b/modules/pagedesigner_multitheme/src/EventSubscriber/FilterSubscriber.php
index deaf6d2..e1ccb39 100644
--- a/modules/pagedesigner_multitheme/src/EventSubscriber/FilterSubscriber.php
+++ b/modules/pagedesigner_multitheme/src/EventSubscriber/FilterSubscriber.php
@@ -17,7 +17,7 @@ class FilterSubscriber implements EventSubscriberInterface {
   /**
    * Create the FilterSubscriber.
    *
-   * @param \Drupal\Core\Theme\ThemeManager $themeManager
+   * @param ThemeManager $themeManager
    *   The theme manager.
    */
   public function __construct(ThemeManager $themeManager) {
diff --git a/modules/pagedesigner_svg/tests/src/Kernel/HandlerTests/SVGHandlerTest.php b/modules/pagedesigner_svg/tests/src/Kernel/HandlerTests/SVGHandlerTest.php
index aed263c..facabe0 100644
--- a/modules/pagedesigner_svg/tests/src/Kernel/HandlerTests/SVGHandlerTest.php
+++ b/modules/pagedesigner_svg/tests/src/Kernel/HandlerTests/SVGHandlerTest.php
@@ -39,7 +39,7 @@ class SVGHandlerTest extends MediaHandlerTestBase {
    *
    * @todo Add the pagedesigner editor config to the environment.
    */
-  public function setUp() {
+  public function setUp(): void {
     self::$modules[] = 'pagedesigner_svg';
 
     parent::setUp();
diff --git a/modules/pagedesigner_video/tests/src/Kernel/HandlerTests/VideoHandlerTest.php b/modules/pagedesigner_video/tests/src/Kernel/HandlerTests/VideoHandlerTest.php
index 831420c..2dd1b34 100644
--- a/modules/pagedesigner_video/tests/src/Kernel/HandlerTests/VideoHandlerTest.php
+++ b/modules/pagedesigner_video/tests/src/Kernel/HandlerTests/VideoHandlerTest.php
@@ -39,7 +39,7 @@ class VideoHandlerTest extends MediaHandlerTestBase {
    *
    * @todo Add the pagedesigner editor config to the environment.
    */
-  public function setUp() {
+  public function setUp(): void {
     self::$modules[] = 'pagedesigner_video';
 
     parent::setUp();
diff --git a/modules/pagedesigner_webform/tests/src/Kernel/HandlerTests/WebformHandlerTest.php b/modules/pagedesigner_webform/tests/src/Kernel/HandlerTests/WebformHandlerTest.php
index fb29109..91a27c6 100644
--- a/modules/pagedesigner_webform/tests/src/Kernel/HandlerTests/WebformHandlerTest.php
+++ b/modules/pagedesigner_webform/tests/src/Kernel/HandlerTests/WebformHandlerTest.php
@@ -37,7 +37,7 @@ class WebformHandlerTest extends CompoundHandlerTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     self::$modules[] = 'system';
     self::$modules[] = 'path';
     self::$modules[] = 'webform';
diff --git a/modules/pagedesigner_yoast/pagedesigner_yoast.install b/modules/pagedesigner_yoast/pagedesigner_yoast.install
index 6a06640..084eb7d 100644
--- a/modules/pagedesigner_yoast/pagedesigner_yoast.install
+++ b/modules/pagedesigner_yoast/pagedesigner_yoast.install
@@ -1,10 +1,10 @@
 <?php
 
+use Drupal\Core\Entity\Entity\EntityFormDisplay;
 /**
  * @file
  * Contains pagedesigner_yoast update and install hooks.
  */
-
 /**
  * Update form displays to hide the body field if the pagedesigner yoast widget is used.
  */
@@ -19,7 +19,7 @@ function pagedesigner_yoast_update_8801(array &$sandbox) {
     ];
 
     if ($form_displays = \Drupal::entityTypeManager()->getStorage('entity_form_display')->loadByProperties($properties)) {
-      /** @var \Drupal\Core\Entity\Entity\EntityFormDisplay $form_display */
+      /** @var EntityFormDisplay $form_display */
       foreach ($form_displays as $form_display) {
         $components = $form_display->getComponents();
 
diff --git a/pagedesigner.module b/pagedesigner.module
index 9392ea0..e98017f 100644
--- a/pagedesigner.module
+++ b/pagedesigner.module
@@ -74,7 +74,7 @@ function pagedesigner_theme_suggestions_pagedesigner_element(array $variables) {
  *
  * @param array $build
  *   The render array.
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The current entity.
  * @param \Drupal\Core\Entity\EntityViewDisplayInterface $display
  *   The current entity view display.
@@ -144,7 +144,7 @@ function pagedesigner_search_api_field_type_mapping_alter(array &$mapping) {
 /**
  * Add/Create/Translate pagedesigner container on entity save.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *
  * @return void
  */
@@ -163,7 +163,7 @@ function pagedesigner_entity_presave(EntityInterface $entity) {
  * as the entity is saved as well on container save.
  *
  * @todo Investigate a method to both create and save container in presave.
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *
  * @return void
  */
@@ -176,7 +176,7 @@ function pagedesigner_entity_insert(EntityInterface $entity) {
 /**
  * Mark pagedesigner elements as deleted on entity delete.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity being deleted.
  */
 function pagedesigner_entity_delete(EntityInterface $entity) {
diff --git a/src/Annotation/PagedesignerAsset.php b/src/Annotation/PagedesignerAsset.php
index b1976a5..280d493 100644
--- a/src/Annotation/PagedesignerAsset.php
+++ b/src/Annotation/PagedesignerAsset.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\pagedesigner\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -21,7 +22,7 @@ class PagedesignerAsset extends Plugin {
   /**
    * The name of the form plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/PagedesignerHandler.php b/src/Annotation/PagedesignerHandler.php
index c4461c3..dd3b89c 100644
--- a/src/Annotation/PagedesignerHandler.php
+++ b/src/Annotation/PagedesignerHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\pagedesigner\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -21,7 +22,7 @@ class PagedesignerHandler extends Plugin {
   /**
    * The name of the form plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Controller/AssetController.php b/src/Controller/AssetController.php
index 7396a52..22eda75 100644
--- a/src/Controller/AssetController.php
+++ b/src/Controller/AssetController.php
@@ -16,7 +16,7 @@ class AssetController extends ControllerBase {
   /**
    * Drupal\pagedesigner\Service\AssetPluginManager definition.
    *
-   * @var \Drupal\pagedesigner\Service\AssetPluginManager
+   * @var AssetPluginManager
    */
   protected $assetManager;
 
@@ -39,7 +39,7 @@ class AssetController extends ControllerBase {
   /**
    * Getassetform.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Return Hello string.
    */
   public function getSearchForm($type) {
@@ -53,7 +53,7 @@ class AssetController extends ControllerBase {
   /**
    * Getassetform.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Return Hello string.
    */
   public function getCreateForm() {
diff --git a/src/Controller/ElementController.php b/src/Controller/ElementController.php
index e9aca96..5f0650d 100644
--- a/src/Controller/ElementController.php
+++ b/src/Controller/ElementController.php
@@ -49,7 +49,7 @@ class ElementController extends ControllerBase implements ContainerInjectionInte
   /**
    * Generates an overview table of older revisions of a Pagedesigner Element .
    *
-   * @param \Drupal\pagedesigner\Entity\ElementInterface $pagedesigner_element
+   * @param ElementInterface $pagedesigner_element
    *   A Pagedesigner Element  object.
    *
    * @return array
diff --git a/src/ElementAccessControlHandler.php b/src/ElementAccessControlHandler.php
index 1524579..8f06451 100644
--- a/src/ElementAccessControlHandler.php
+++ b/src/ElementAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\pagedesigner;
 
+use Drupal\pagedesigner\Entity\ElementInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -18,7 +19,7 @@ class ElementAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\pagedesigner\Entity\ElementInterface $entity */
+    /** @var ElementInterface $entity */
     switch ($operation) {
       case 'view':
         if (!$entity->isPublished()) {
diff --git a/src/ElementHtmlRouteProvider.php b/src/ElementHtmlRouteProvider.php
index 32372bb..c5a4309 100644
--- a/src/ElementHtmlRouteProvider.php
+++ b/src/ElementHtmlRouteProvider.php
@@ -52,10 +52,10 @@ class ElementHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ -76,10 +76,10 @@ class ElementHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ -100,10 +100,10 @@ class ElementHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ -124,10 +124,10 @@ class ElementHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ -148,10 +148,10 @@ class ElementHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type) {
@@ -172,10 +172,10 @@ class ElementHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/ElementStorageInterface.php b/src/ElementStorageInterface.php
index ea6ff5e..a771c31 100644
--- a/src/ElementStorageInterface.php
+++ b/src/ElementStorageInterface.php
@@ -20,7 +20,7 @@ interface ElementStorageInterface extends ContentEntityStorageInterface {
   /**
    * Gets a list of Pagedesigner Element revision IDs for a specific Pagedesigner Element.
    *
-   * @param \Drupal\pagedesigner\Entity\ElementInterface $entity
+   * @param ElementInterface $entity
    *   The Pagedesigner Element entity.
    *
    * @return int[]
@@ -31,7 +31,7 @@ interface ElementStorageInterface extends ContentEntityStorageInterface {
   /**
    * Gets a list of revision IDs having a given user as Pagedesigner Element author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ -42,7 +42,7 @@ interface ElementStorageInterface extends ContentEntityStorageInterface {
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\pagedesigner\Entity\ElementInterface $entity
+   * @param ElementInterface $entity
    *   The Pagedesigner Element entity.
    *
    * @return int
@@ -53,7 +53,7 @@ interface ElementStorageInterface extends ContentEntityStorageInterface {
   /**
    * Unsets the language for all Pagedesigner Element with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
diff --git a/src/Entity/ElementInterface.php b/src/Entity/ElementInterface.php
index f3cc5e6..eb7816d 100644
--- a/src/Entity/ElementInterface.php
+++ b/src/Entity/ElementInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\pagedesigner\Entity;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\RevisionLogInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
@@ -97,7 +98,7 @@ interface ElementInterface extends ContentEntityInterface, RevisionLogInterface,
   /**
    * Gets the Pagedesigner Element revision author.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity for the revision author.
    */
   public function getRevisionUser();
diff --git a/src/Event/ElementEvent.php b/src/Event/ElementEvent.php
index ada5625..534f1e9 100644
--- a/src/Event/ElementEvent.php
+++ b/src/Event/ElementEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\pagedesigner\Event;
 
-use Symfony\Component\EventDispatcher\Event;
-
+use Symfony\Contracts\EventDispatcher\Event;
+use Drupal\pagedesigner\Entity\Element;
 /**
  * Event that is fired when a pagedesigner is handled.
  */
@@ -25,9 +25,9 @@ class ElementEvent extends Event {
   /**
    * Constructs the object.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $entity
+   * @param Element $entity
    *   The original data.
-   * @param \Drupal\pagedesigner\Entity\Element $clone
+   * @param Element $clone
    *   The clone data.
    */
   public function __construct($eventName, &$data) {
diff --git a/src/EventSubscriber/InitSubscriber.php b/src/EventSubscriber/InitSubscriber.php
index cddd8e6..75366de 100644
--- a/src/EventSubscriber/InitSubscriber.php
+++ b/src/EventSubscriber/InitSubscriber.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\pagedesigner\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\Core\Routing\CurrentRouteMatch;
@@ -21,7 +21,7 @@ class InitSubscriber implements EventSubscriberInterface {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $user = NULL;
 
@@ -29,16 +29,16 @@ class InitSubscriber implements EventSubscriberInterface {
   /**
    * The current route.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $_currentRoute = NULL;
 
   /**
    * Create the InitSubscriber.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $user
+   * @param AccountProxyInterface $user
    *   The current user.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $route
+   * @param CurrentRouteMatch $route
    *   The current route.
    */
   public function __construct(AccountProxyInterface $user, CurrentRouteMatch $currentRoute) {
@@ -49,10 +49,10 @@ class InitSubscriber implements EventSubscriberInterface {
   /**
    * Redirect old pagedesigner url to new route.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The event.
    */
-  public function redirectOldUrl(GetResponseEvent $event) {
+  public function redirectOldUrl(RequestEvent $event) {
 
     if (!$this->user->isAnonymous() && \Drupal::request()->query->get('pd') == 1) {
       $nid = $this->_currentRoute->getRawParameter('node');
@@ -65,10 +65,10 @@ class InitSubscriber implements EventSubscriberInterface {
   /**
    * Disable aggregation in pagedesigner editing mode.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The event.
    */
-  public function disableAggregation(GetResponseEvent $event) {
+  public function disableAggregation(RequestEvent $event) {
     global $config;
     $editMode = \Drupal::request()->query->get('pd');
     if (!$this->user->isAnonymous() && $editMode == 1) {
diff --git a/src/Form/ElementRevisionDeleteForm.php b/src/Form/ElementRevisionDeleteForm.php
index 9f7d226..dbe4317 100644
--- a/src/Form/ElementRevisionDeleteForm.php
+++ b/src/Form/ElementRevisionDeleteForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\pagedesigner\Form;
 
+use Drupal\pagedesigner\Entity\ElementInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ -20,30 +21,30 @@ class ElementRevisionDeleteForm extends ConfirmFormBase {
   /**
    * The Pagedesigner Element revision.
    *
-   * @var \Drupal\pagedesigner\Entity\ElementInterface
+   * @var ElementInterface
    */
   protected $revision;
 
   /**
    * The Pagedesigner Element storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $ElementStorage;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * Constructs a new ElementRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection) {
diff --git a/src/Form/ElementRevisionRevertForm.php b/src/Form/ElementRevisionRevertForm.php
index 59c2284..5852ce8 100644
--- a/src/Form/ElementRevisionRevertForm.php
+++ b/src/Form/ElementRevisionRevertForm.php
@@ -21,30 +21,30 @@ class ElementRevisionRevertForm extends ConfirmFormBase {
   /**
    * The Pagedesigner Element revision.
    *
-   * @var \Drupal\pagedesigner\Entity\ElementInterface
+   * @var ElementInterface
    */
   protected $revision;
 
   /**
    * The Pagedesigner Element storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $ElementStorage;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * Constructs a new ElementRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Pagedesigner Element storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter) {
@@ -130,12 +130,12 @@ class ElementRevisionRevertForm extends ConfirmFormBase {
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\pagedesigner\Entity\ElementInterface $revision
+   * @param ElementInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\pagedesigner\Entity\ElementInterface
+   * @return ElementInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(ElementInterface $revision, FormStateInterface $form_state) {
diff --git a/src/Form/ElementRevisionRevertTranslationForm.php b/src/Form/ElementRevisionRevertTranslationForm.php
index 7109bf3..488e310 100644
--- a/src/Form/ElementRevisionRevertTranslationForm.php
+++ b/src/Form/ElementRevisionRevertTranslationForm.php
@@ -27,18 +27,18 @@ class ElementRevisionRevertTranslationForm extends ElementRevisionRevertForm {
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Constructs a new ElementRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Pagedesigner Element storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager) {
@@ -93,7 +93,7 @@ class ElementRevisionRevertTranslationForm extends ElementRevisionRevertForm {
   protected function prepareRevertedRevision(ElementInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');
 
-    /** @var \Drupal\pagedesigner\Entity\ElementInterface $default_revision */
+    /** @var ElementInterface $default_revision */
     $latest_revision = $this->ElementStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);
 
diff --git a/src/Form/ElementSettingsForm.php b/src/Form/ElementSettingsForm.php
index 82b8bd6..5bdf5bd 100644
--- a/src/Form/ElementSettingsForm.php
+++ b/src/Form/ElementSettingsForm.php
@@ -27,7 +27,7 @@ class ElementSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -39,7 +39,7 @@ class ElementSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/PagedesignerService.php b/src/PagedesignerService.php
index b701859..0a00f92 100644
--- a/src/PagedesignerService.php
+++ b/src/PagedesignerService.php
@@ -22,21 +22,21 @@ class PagedesignerService {
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManager
+   * @var LanguageManager
    */
   protected $languageManager = NULL;
 
   /**
    * The element handler.
    *
-   * @var \Drupal\pagedesigner\Service\ElementHandler
+   * @var ElementHandler
    */
   protected $elementHandler = NULL;
 
   /**
    * Create a new instance.
    *
-   * @param \Drupal\Core\Language\LanguageManager $language_manager
+   * @param LanguageManager $language_manager
    *   The language manager.
    * @param \Drupal\pagedesigner\Entity\ElementHandler $element_handler
    *   The element handler.
@@ -59,7 +59,7 @@ class PagedesignerService {
   /**
    * Get all pagedesigner fields of the entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityBase $entity
+   * @param ContentEntityBase $entity
    *   The entity to get the fields from.
    *
    * @return array
@@ -81,7 +81,7 @@ class PagedesignerService {
    *
    * If no container exists, a container will be created.
    *
-   * @param \Drupal\Core\Entity\ContentEntityBase $entity
+   * @param ContentEntityBase $entity
    *   The entity to add the containers to.
    */
   public function addContainer(ContentEntityBase &$entity) {
@@ -106,7 +106,7 @@ class PagedesignerService {
   /**
    * Replaces the container linked in the entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityBase $entity
+   * @param ContentEntityBase $entity
    *   The entity to replace the container in.
    */
   public function overrideContainers(ContentEntityBase &$entity) {
@@ -125,7 +125,7 @@ class PagedesignerService {
   /**
    * Saves the containers in all fields.
    *
-   * @param \Drupal\Core\Entity\ContentEntityBase $entity
+   * @param ContentEntityBase $entity
    */
   public function saveContainer(ContentEntityBase &$entity) {
     $entityFieldManager = \Drupal::service('entity_field.manager');
@@ -147,10 +147,10 @@ class PagedesignerService {
   /**
    * Loads or creates the container for the given entity in the language of the entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityBase $entity
+   * @param ContentEntityBase $entity
    *   The entity being rendered.
    *
-   * @return \Drupal\pagedesigner\Entity\Element
+   * @return Element
    *   The container.
    */
   public function getContainer(ContentEntityBase $entity, $fieldname = 'field_pagedesigner_content') {
@@ -173,7 +173,7 @@ class PagedesignerService {
    * @param Drupal\pagedesigner\ContentEntityBase $entity
    *   The entity for which to create the container (optional).
    *
-   * @return \Drupal\pagedesigner\Entity\Element
+   * @return Element
    *   The container.
    */
   public function createContainer(string $language, ContentEntityBase $entity = NULL) {
@@ -189,12 +189,12 @@ class PagedesignerService {
   /**
    * Gets or creates the translation of the given container.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $container
+   * @param Element $container
    *   The container.
    * @param string $language
    *   The language.
    *
-   * @return \Drupal\pagedesigner\Entity\Element
+   * @return Element
    *   The container in the given language.
    */
   public function getLanguage(Element $container, $language) {
@@ -212,8 +212,8 @@ class PagedesignerService {
    * and the entity (current or given) is editable
    * by the user (current or given).
    *
-   * @param \Drupal\Core\Entity\ContentEntityBase $entity
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param ContentEntityBase $entity
+   * @param AccountInterface $user
    *
    * @return bool
    */
@@ -233,8 +233,8 @@ class PagedesignerService {
   /**
    * Returns true if the given entity may be edited by the user.
    *
-   * @param \Drupal\Core\Entity\ContentEntityBase $entity
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param ContentEntityBase $entity
+   * @param AccountInterface $user
    *
    * @return bool
    */
@@ -256,7 +256,7 @@ class PagedesignerService {
   /**
    * Get the handler.
    *
-   * @return Drupal\pagedesigner\Service\ElementHandler
+   * @return ElementHandler
    */
   protected function getHandler() {
     return $this->elementHandler;
diff --git a/src/Plugin/CompoundHandlerBase.php b/src/Plugin/CompoundHandlerBase.php
index 0d32f29..a8cf7be 100644
--- a/src/Plugin/CompoundHandlerBase.php
+++ b/src/Plugin/CompoundHandlerBase.php
@@ -70,7 +70,7 @@ class CompoundHandlerBase extends HandlerPluginBase {
   /**
    * Add the styles of the given entity to the renderer.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $entity
+   * @param Element $entity
    *   The entity to add the styles of.
    */
   protected function addStyles(Element $entity, $public = TRUE) {
@@ -165,7 +165,7 @@ class CompoundHandlerBase extends HandlerPluginBase {
    *
    * @param string $markup
    *   The markup to alter.
-   * @param \Drupal\pagedesigner\Entity\Element $entity
+   * @param Element $entity
    *   The entity to use.
    * @param bool $edit
    *   Whether to add the edit attributes.
diff --git a/src/Plugin/HandlerPluginBase.php b/src/Plugin/HandlerPluginBase.php
index c3e99c3..86cd661 100644
--- a/src/Plugin/HandlerPluginBase.php
+++ b/src/Plugin/HandlerPluginBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\pagedesigner\Plugin;
 
+use Drupal\ui_patterns\Definition\PatternDefinition;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Language\LanguageManager;
@@ -23,28 +24,28 @@ abstract class HandlerPluginBase extends PluginBase implements HandlerPluginInte
   /**
    * The user to render the markup for.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $user = NULL;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManager
+   * @var LanguageManager
    */
   protected $languageManager = NULL;
 
   /**
    * The pattern manager.
    *
-   * @var \Drupal\ui_patterns\UiPatternsManager
+   * @var UiPatternsManager
    */
   protected $patternManager = NULL;
 
   /**
    * The element handler.
    *
-   * @var \Drupal\pagedesigner\Service\ElementHandler
+   * @var ElementHandler
    */
   protected $elementHandler = NULL;
 
@@ -313,7 +314,7 @@ abstract class HandlerPluginBase extends PluginBase implements HandlerPluginInte
    * @param string $id
    *   The id of the pattern.
    *
-   * @return \Drupal\ui_patterns\Definition\PatternDefinition|null
+   * @return PatternDefinition|null
    *   The pattern or null.
    */
   protected function getPatternDefinition($id) {
diff --git a/src/Plugin/pagedesigner/HandlerPluginInterface.php b/src/Plugin/pagedesigner/HandlerPluginInterface.php
index 283584f..f3d1956 100644
--- a/src/Plugin/pagedesigner/HandlerPluginInterface.php
+++ b/src/Plugin/pagedesigner/HandlerPluginInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\pagedesigner\Plugin\pagedesigner;
 
+use Drupal\ui_patterns\Definition\PatternDefinition;
 use Drupal\pagedesigner\Entity\Element;
 use Drupal\ui_patterns\Definition\PatternDefinitionField;
 
@@ -21,7 +22,7 @@ interface HandlerPluginInterface {
   /**
    * Allows to alter the list of patterns generated by the ui_pattern module.
    *
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition[] $patterns
+   * @param PatternDefinition[] $patterns
    *   The list of patterns.
    */
   public function collectPatterns(array &$patterns);
@@ -37,7 +38,7 @@ interface HandlerPluginInterface {
   /**
    * Processes a pattern field.
    *
-   * @param \Drupal\ui_patterns\Definition\PatternDefinitionField $field
+   * @param PatternDefinitionField $field
    *   The field definition.
    * @param array $fieldArray
    *   The field description to be sent to the frontend.
@@ -47,7 +48,7 @@ interface HandlerPluginInterface {
   /**
    * Get a textual representation of the entity.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $entity
+   * @param Element $entity
    *   The entity to process.
    * @param string $result
    *   The resulting text representation (inout).
@@ -62,7 +63,7 @@ interface HandlerPluginInterface {
    *
    * Each entity's textual representation will be in the array.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $entity
+   * @param Element $entity
    *   The entity to process.
    * @param array $list
    *   The resulting text representation (inout).
@@ -75,7 +76,7 @@ interface HandlerPluginInterface {
   /**
    * Serialize the content of an entity for edit mode.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $entity
+   * @param Element $entity
    *   The entity to process.
    * @param array $result
    *   The resulting serialized representation (inout).
@@ -88,7 +89,7 @@ interface HandlerPluginInterface {
   /**
    * Describe the structure of an entity for edit mode.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $entity
+   * @param Element $entity
    *   The entity to process.
    * @param array $result
    *   The resulting serialized representation (inout).
@@ -101,14 +102,14 @@ interface HandlerPluginInterface {
   /**
    * Generate a new entity.
    *
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition|array $definition
+   * @param PatternDefinition|array $definition
    *   The definition of the new entity.
    * @param array $data
    *   The data to create the entity with.
-   * @param \Drupal\pagedesigner\Entity\Element $entity
+   * @param Element $entity
    *   The created entity (inout).
    *
-   * @return \Drupal\pagedesigner\Entity\Element
+   * @return Element
    *   The created entity. Void if inout parameter is used.
    */
   public function generate($definition, array $data, Element &$entity = NULL);
@@ -116,7 +117,7 @@ interface HandlerPluginInterface {
   /**
    * Update the entity.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $entity
+   * @param Element $entity
    *   The entity to update.
    * @param array $data
    *   The data to update the entity with.
@@ -126,14 +127,14 @@ interface HandlerPluginInterface {
   /**
    * Copy an entity and return the cloned entity.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $entity
+   * @param Element $entity
    *   The entity to copy.
-   * @param \Drupal\pagedesigner\Entity\Element $container
+   * @param Element $container
    *   The container for the cloned entity.
-   * @param \Drupal\pagedesigner\Entity\Element $clone
+   * @param Element $clone
    *   The clone of the entity (inout).
    *
-   * @return \Drupal\pagedesigner\Entity\Element|void
+   * @return Element|void
    *   The clone of the entity. Void if inout parameter is used.
    */
   public function copy(Element $entity, Element $container = NULL, Element &$clone = NULL);
@@ -141,7 +142,7 @@ interface HandlerPluginInterface {
   /**
    * Delete an entity.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $entity
+   * @param Element $entity
    *   The entity to delete.
    * @param bool $remove
    *   Whether to delete the information from the database.
@@ -151,7 +152,7 @@ interface HandlerPluginInterface {
   /**
    * Restore an entity.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $entity
+   * @param Element $entity
    *   The entity to restore.
    */
   public function restore(Element $entity);
@@ -159,7 +160,7 @@ interface HandlerPluginInterface {
   /**
    * Render an entity for authenticated users.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $entity
+   * @param Element $entity
    *   The entity to update.
    * @param array $build
    *   The render array (inout).
@@ -172,7 +173,7 @@ interface HandlerPluginInterface {
   /**
    * Render an entity for anonymous users.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $entity
+   * @param Element $entity
    *   The entity to update.
    * @param array $build
    *   The render array (inout).
@@ -185,7 +186,7 @@ interface HandlerPluginInterface {
   /**
    * Render an entity for editing.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $entity
+   * @param Element $entity
    *   The entity to update.
    * @param array $build
    *   The render array (inout).
@@ -198,7 +199,7 @@ interface HandlerPluginInterface {
   /**
    * Publish the entity and all referenced elements.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $entity
+   * @param Element $entity
    *   The entity to publish.
    */
   public function publish(Element $entity);
@@ -206,7 +207,7 @@ interface HandlerPluginInterface {
   /**
    * Unpublish the entity and all referenced elements.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $entity
+   * @param Element $entity
    *   The entity to unpublish.
    */
   public function unpublish(Element $entity);
diff --git a/src/Plugin/rest/resource/AssetResource.php b/src/Plugin/rest/resource/AssetResource.php
index fa201a5..16797f3 100644
--- a/src/Plugin/rest/resource/AssetResource.php
+++ b/src/Plugin/rest/resource/AssetResource.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\pagedesigner\Plugin\rest\resource;
 
+use Symfony\Component\HttpKernel\Exception\HttpException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\rest\ModifiedResourceResponse;
@@ -27,7 +28,7 @@ class AssetResource extends ResourceBase {
   /**
    * A current user instance.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
@@ -42,9 +43,9 @@ class AssetResource extends ResourceBase {
    *   The plugin implementation definition.
    * @param array $serializer_formats
    *   The available serialization formats.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   A current user instance.
    */
   public function __construct(
@@ -76,13 +77,13 @@ class AssetResource extends ResourceBase {
   /**
    * Responds to GET requests.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    *
-   * @return \Drupal\rest\ResourceResponse
+   * @return ResourceResponse
    *   The HTTP response object.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws exception expected.
    */
   public function get($asset_type, EntityInterface $entity = NULL) {
@@ -132,13 +133,13 @@ class AssetResource extends ResourceBase {
   /**
    * Responds to POST requests.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    *
-   * @return \Drupal\rest\ModifiedResourceResponse
+   * @return ModifiedResourceResponse
    *   The HTTP response object.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws exception expected.
    */
   public function post(EntityInterface $entity) {
@@ -155,13 +156,13 @@ class AssetResource extends ResourceBase {
   /**
    * Responds to PATCH requests.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    *
-   * @return \Drupal\rest\ModifiedResourceResponse
+   * @return ModifiedResourceResponse
    *   The HTTP response object.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws exception expected.
    */
   public function patch(EntityInterface $entity) {
@@ -178,13 +179,13 @@ class AssetResource extends ResourceBase {
   /**
    * Responds to DELETE requests.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    *
-   * @return \Drupal\rest\ModifiedResourceResponse
+   * @return ModifiedResourceResponse
    *   The HTTP response object.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws exception expected.
    */
   public function delete(EntityInterface $entity) {
diff --git a/src/Plugin/rest/resource/CloneResource.php b/src/Plugin/rest/resource/CloneResource.php
index ebbf167..b765ce5 100644
--- a/src/Plugin/rest/resource/CloneResource.php
+++ b/src/Plugin/rest/resource/CloneResource.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\pagedesigner\Plugin\rest\resource;
 
+use Symfony\Component\HttpKernel\Exception\HttpException;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\pagedesigner\Entity\Element;
@@ -31,21 +32,21 @@ class CloneResource extends ResourceBase {
   /**
    * A current user instance.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The handler manager.
    *
-   * @var \Drupal\pagedesigner\Service\StateChanger
+   * @var StateChanger
    */
   protected $stateChanger;
 
   /**
    * The handler manager.
    *
-   * @var \Drupal\pagedesigner\Service\Renderer
+   * @var Renderer
    */
   protected $renderer;
 
@@ -60,13 +61,13 @@ class CloneResource extends ResourceBase {
    *   The plugin implementation definition.
    * @param array $serializer_formats
    *   The available serialization formats.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   A current user instance.
-   * @param \Drupal\pagedesigner\Service\StateChanger $state_changer
+   * @param StateChanger $state_changer
    *   The state changer.
-   * @param \Drupal\pagedesigner\Service\Renderer $renderer
+   * @param Renderer $renderer
    *   The pagedesigner renderer.
    */
   public function __construct(
@@ -104,16 +105,16 @@ class CloneResource extends ResourceBase {
   /**
    * Responds to POST requests.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Drupal\rest\ModifiedResourceResponse
+   * @return ModifiedResourceResponse
    *   The HTTP response object.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws exception expected.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\BadRequestHttpException
+   * @throws BadRequestHttpException
    *   If the request is malformed.
    */
   public function post(Request $request) {
diff --git a/src/Plugin/rest/resource/ElementResource.php b/src/Plugin/rest/resource/ElementResource.php
index 61157a9..f74f55d 100644
--- a/src/Plugin/rest/resource/ElementResource.php
+++ b/src/Plugin/rest/resource/ElementResource.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\pagedesigner\Plugin\rest\resource;
 
+use Symfony\Component\HttpKernel\Exception\HttpException;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Language\LanguageManager;
 use Drupal\Core\Session\AccountProxyInterface;
@@ -35,28 +36,28 @@ class ElementResource extends ResourceBase {
   /**
    * A current user instance.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The handler manager.
    *
-   * @var \Drupal\pagedesigner\Service\ElementHandler
+   * @var ElementHandler
    */
   protected $elementHandler;
 
   /**
    * The handler manager.
    *
-   * @var \Drupal\ui_patterns\UiPatternsManager
+   * @var UiPatternsManager
    */
   protected $patternManager;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManager
+   * @var LanguageManager
    */
   protected $languageManager = NULL;
 
@@ -71,11 +72,11 @@ class ElementResource extends ResourceBase {
    *   The plugin implementation definition.
    * @param array $serializer_formats
    *   The available serialization formats.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   A current user instance.
-   * @param \Drupal\pagedesigner\Service\ElementHandler $handler_manager
+   * @param ElementHandler $handler_manager
    *   The processor plugin manager.
    */
   public function __construct(
@@ -119,7 +120,7 @@ class ElementResource extends ResourceBase {
    * @param int $id
    *   ID of the entity.
    *
-   * @return \Drupal\rest\ResourceResponse
+   * @return ResourceResponse
    *   The HTTP response object.
    */
   public function get($id = NULL) {
@@ -154,16 +155,16 @@ class ElementResource extends ResourceBase {
   /**
    * Responds to POST requests.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Drupal\rest\ModifiedResourceResponse
+   * @return ModifiedResourceResponse
    *   The HTTP response object.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws exception expected.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\BadRequestHttpException
+   * @throws BadRequestHttpException
    *   If the request is malformed.
    */
   public function post(Request $request) {
@@ -220,13 +221,13 @@ class ElementResource extends ResourceBase {
    *
    * @param int $id
    *   The entity key.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Drupal\rest\ModifiedResourceResponse
+   * @return ModifiedResourceResponse
    *   The HTTP response object.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws exception expected.
    */
   public function patch($id, Request $request) {
@@ -260,10 +261,10 @@ class ElementResource extends ResourceBase {
    * @param int $id
    *   ID of the entity.
    *
-   * @return \Drupal\rest\ModifiedResourceResponse
+   * @return ModifiedResourceResponse
    *   The HTTP response object.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws exception expected.
    */
   public function delete($id) {
diff --git a/src/Plugin/rest/resource/LockResource.php b/src/Plugin/rest/resource/LockResource.php
index ace9670..09fec4a 100644
--- a/src/Plugin/rest/resource/LockResource.php
+++ b/src/Plugin/rest/resource/LockResource.php
@@ -33,7 +33,7 @@ class LockResource extends ResourceBase {
    * @param int $id
    *   The node id.
    *
-   * @return \Drupal\rest\ResourceResponse The responce containing the info.
+   * @return ResourceResponse The responce containing the info.
    */
   public function get($id = NULL) {
     $language = \Drupal::languageManager()->getcurrentLanguage(LanguageInterface::TYPE_CONTENT)->getId();
@@ -56,10 +56,10 @@ class LockResource extends ResourceBase {
    *
    * Create a new lock on the node.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Drupal\rest\ResourceResponse
+   * @return ResourceResponse
    *   The response containing either true on success of info about the existing lock.
    */
   public function post(Request $request) {
@@ -88,10 +88,10 @@ class LockResource extends ResourceBase {
    *
    * @param int $id
    *   The node id.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Drupal\rest\ResourceResponse
+   * @return ResourceResponse
    *   The response containing either true on success of info about the existing lock.
    */
   public function patch($id, Request $request) {
@@ -123,10 +123,10 @@ class LockResource extends ResourceBase {
    *
    * @param int $id
    *   The node id.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Drupal\rest\ModifiedResourceResponse
+   * @return ModifiedResourceResponse
    *   An empty response.
    */
   public function delete($id, Request $request) {
diff --git a/src/Plugin/rest/resource/PatternResource.php b/src/Plugin/rest/resource/PatternResource.php
index 80f7c6c..87bdaa5 100644
--- a/src/Plugin/rest/resource/PatternResource.php
+++ b/src/Plugin/rest/resource/PatternResource.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\pagedesigner\Plugin\rest\resource;
 
+use Symfony\Component\HttpKernel\Exception\HttpException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\pagedesigner\Service\ElementHandler;
@@ -28,21 +29,21 @@ class PatternResource extends ResourceBase {
   /**
    * A current user instance.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The pattern manager.
    *
-   * @var \Drupal\ui_patterns\UiPatternsManager
+   * @var UiPatternsManager
    */
   protected $patternManager;
 
   /**
    * The element handler.
    *
-   * @var Drupal\pagedesigner\Service\ElementHandler
+   * @var ElementHandler
    */
   protected $elementHandler;
 
@@ -57,11 +58,11 @@ class PatternResource extends ResourceBase {
    *   The plugin implementation definition.
    * @param array $serializer_formats
    *   The available serialization formats.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   A current user instance.
-   * @param \Drupal\ui_patterns\UiPatternsManager $pattern_manager
+   * @param UiPatternsManager $pattern_manager
    *   The pattern manager.
    */
   public function __construct(
@@ -100,13 +101,13 @@ class PatternResource extends ResourceBase {
   /**
    * Responds to GET requests.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    *
-   * @return \Drupal\rest\ResourceResponse
+   * @return ResourceResponse
    *   The HTTP response object.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws exception expected.
    */
   public function get(EntityInterface $entity = NULL) {
@@ -217,7 +218,7 @@ class PatternResource extends ResourceBase {
   /**
    * Get fields of pattern by definition.
    *
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition $definition
+   * @param PatternDefinition $definition
    *   The pattern defitiontion.
    */
   protected function getFields(PatternDefinition $definition) {
diff --git a/src/Service/AssetPluginManager.php b/src/Service/AssetPluginManager.php
index e37cec1..97bdccc 100644
--- a/src/Service/AssetPluginManager.php
+++ b/src/Service/AssetPluginManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\pagedesigner\Service;
 
+use Drupal\pagedesigner\Plugin\pagedesigner\AssetPluginInterface;
 use Drupal\Component\Plugin\FallbackPluginManagerInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -20,9 +21,9 @@ class AssetPluginManager extends DefaultPluginManager implements FallbackPluginM
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ -45,7 +46,7 @@ class AssetPluginManager extends DefaultPluginManager implements FallbackPluginM
    *   - id: The id of the plugin.
    *   - type: The type of the pattern field.
    *
-   * @return \Drupal\pagedesigner\Plugin\pagedesigner\AssetPluginInterface
+   * @return AssetPluginInterface
    *   A list of Render objects.
    */
   public function getInstance(array $options) {
diff --git a/src/Service/ElementHandler.php b/src/Service/ElementHandler.php
index ef3ff1c..5070cbd 100644
--- a/src/Service/ElementHandler.php
+++ b/src/Service/ElementHandler.php
@@ -21,23 +21,23 @@ class ElementHandler implements HandlerPluginInterface {
   /**
    * The element handler manager.
    *
-   * @var \Drupal\pagedesigner\Service\HandlerPluginManager
+   * @var HandlerPluginManager
    */
   protected $handlerManager = NULL;
 
   /**
    * The Event dispatcher.
    *
-   * @var Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher = NULL;
 
   /**
    * Create a new instance.
    *
-   * @param \Drupal\pagedesigner\Service\HandlerPluginManager $handler_manager
+   * @param HandlerPluginManager $handler_manager
    *   The handler manager from which to retrieve the element handlers.
-   * @param Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher to dispatch events.
    */
   public function __construct(HandlerPluginManager $handler_manager, EventDispatcherInterface $event_dispatcher) {
diff --git a/src/Service/HandlerPluginManager.php b/src/Service/HandlerPluginManager.php
index 81ee7da..8dac90a 100644
--- a/src/Service/HandlerPluginManager.php
+++ b/src/Service/HandlerPluginManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\pagedesigner\Service;
 
+use Drupal\pagedesigner\Plugin\pagedesigner\HandlerPluginInterface;
 use Drupal\Component\Plugin\FallbackPluginManagerInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -22,9 +23,9 @@ class HandlerPluginManager extends DefaultPluginManager implements FallbackPlugi
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ -47,7 +48,7 @@ class HandlerPluginManager extends DefaultPluginManager implements FallbackPlugi
    *   - id: The id of the plugin.
    *   - type: The type of the pattern field.
    *
-   * @return \Drupal\pagedesigner\Plugin\pagedesigner\HandlerPluginInterface[]
+   * @return HandlerPluginInterface[]
    *   A list of Handler objects.
    */
   public function getInstance(array $options) {
@@ -84,7 +85,7 @@ class HandlerPluginManager extends DefaultPluginManager implements FallbackPlugi
   /**
    * Returns all handlers.
    *
-   * @return \Drupal\pagedesigner\Plugin\pagedesigner\HandlerPluginInterface[]
+   * @return HandlerPluginInterface[]
    *   A list of Handler objects.
    */
   public function getHandlers() {
diff --git a/src/Service/Locker.php b/src/Service/Locker.php
index 371c7ae..4901e17 100644
--- a/src/Service/Locker.php
+++ b/src/Service/Locker.php
@@ -35,7 +35,7 @@ class Locker {
   /**
    * Set the lock key for the entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $id
+   * @param ContentEntityInterface $id
    *   The page id.
    * @param string $lang
    *   The page language.
diff --git a/src/Service/Renderer.php b/src/Service/Renderer.php
index 70f1f06..4342a7d 100644
--- a/src/Service/Renderer.php
+++ b/src/Service/Renderer.php
@@ -17,7 +17,7 @@ class Renderer extends PagedesignerService {
   /**
    * Style object to collect the styles during rendering.
    *
-   * @var Drupal\pagedesigner\Service\Render\Styles|null
+   * @var Styles|null
    */
   protected static $styles = NULL;
 
@@ -48,9 +48,9 @@ class Renderer extends PagedesignerService {
   /**
    * Publicly render a container for a certain entity.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $container
+   * @param Element $container
    *   The container to render.
-   * @param \Drupal\Core\Entity\ContentEntityBase $entity
+   * @param ContentEntityBase $entity
    *   The entity the container is rendered for.
    *
    * @return \Drupal\pagedesigner\Service\Renderer
@@ -78,9 +78,9 @@ class Renderer extends PagedesignerService {
   /**
    * Render a container for a certain entity.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $container
+   * @param Element $container
    *   The container to render.
-   * @param \Drupal\Core\Entity\ContentEntityBase $entity
+   * @param ContentEntityBase $entity
    *   The entity the container is rendered for.
    *
    * @return \Drupal\pagedesigner\Service\Renderer
@@ -117,9 +117,9 @@ class Renderer extends PagedesignerService {
   /**
    * Render a container for a certain entity in edit mode.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $container
+   * @param Element $container
    *   The container to render.
-   * @param \Drupal\Core\Entity\ContentEntityBase $entity
+   * @param ContentEntityBase $entity
    *   The entity the container is rendered for.
    *
    * @return \Drupal\pagedesigner\Service\Renderer
@@ -279,9 +279,9 @@ class Renderer extends PagedesignerService {
   /**
    * Adds the appropiate cache keys and context.
    *
-   * @param \Drupal\pagedesigner\Entity\Element $container
+   * @param Element $container
    *   The container being rendered.
-   * @param \Drupal\Core\Entity\ContentEntityBase $entity
+   * @param ContentEntityBase $entity
    *   The entity the output is rendered for.
    * @param string $mode
    *   The mode of rendering for cache key ("public", "internal" or "edit")
diff --git a/src/Service/StateChanger.php b/src/Service/StateChanger.php
index 1c21f2e..1f9d443 100644
--- a/src/Service/StateChanger.php
+++ b/src/Service/StateChanger.php
@@ -14,7 +14,7 @@ class StateChanger extends PagedesignerService {
   /**
    * Publish an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityBase $entity
+   * @param ContentEntityBase $entity
    *
    * @return void
    */
@@ -33,7 +33,7 @@ class StateChanger extends PagedesignerService {
   /**
    * Unpublish an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityBase $entity
+   * @param ContentEntityBase $entity
    *
    * @return void
    */
diff --git a/tests/src/Kernel/AbstractPagedesignerTest.php b/tests/src/Kernel/AbstractPagedesignerTest.php
index 851bb2d..b0a84de 100644
--- a/tests/src/Kernel/AbstractPagedesignerTest.php
+++ b/tests/src/Kernel/AbstractPagedesignerTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\pagedesigner\Kernel;
 
+use Drupal\pagedesigner\Entity\Element;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\user\Traits\UserCreationTrait;
 
@@ -38,7 +39,7 @@ abstract class AbstractPagedesignerTest extends KernelTestBase {
   /**
    * The base entity created by the test.
    *
-   * @var \Drupal\pagedesigner\Entity\Element
+   * @var Element
    */
   protected $entity = NULL;
 
@@ -47,7 +48,7 @@ abstract class AbstractPagedesignerTest extends KernelTestBase {
    *
    * Set up current user, install config and schema for pagedesigner elements.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->setUpCurrentUser();
     $this->installEntitySchema('pagedesigner_element');
diff --git a/tests/src/Kernel/HandlerTests/EditorHandlerTestCase.php b/tests/src/Kernel/HandlerTests/EditorHandlerTestCase.php
index eef6fd4..bc1f60c 100644
--- a/tests/src/Kernel/HandlerTests/EditorHandlerTestCase.php
+++ b/tests/src/Kernel/HandlerTests/EditorHandlerTestCase.php
@@ -12,7 +12,7 @@ abstract class EditorHandlerTestCase extends HandlerTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     self::$modules[] = 'editor';
     parent::setUp();
   }
diff --git a/tests/src/Kernel/HandlerTests/HandlerTestBase.php b/tests/src/Kernel/HandlerTests/HandlerTestBase.php
index f6dab58..3b50c26 100644
--- a/tests/src/Kernel/HandlerTests/HandlerTestBase.php
+++ b/tests/src/Kernel/HandlerTests/HandlerTestBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\pagedesigner\Kernel\HandlerTests;
 
+use Drupal\pagedesigner\Plugin\pagedesigner\HandlerPluginInterface;
+use Drupal\pagedesigner\Service\HandlerPluginManager;
 use Drupal\pagedesigner\Entity\Element;
 use Drupal\Tests\pagedesigner\Kernel\AbstractPagedesignerTest;
 use Drupal\ui_patterns\Definition\PatternDefinition;
@@ -17,21 +19,21 @@ abstract class HandlerTestBase extends AbstractPagedesignerTest {
   /**
    * The element handler.
    *
-   * @var \Drupal\pagedesigner\Plugin\pagedesigner\HandlerPluginInterface
+   * @var HandlerPluginInterface
    */
   protected $handlerId = '';
 
   /**
    * The element handler.
    *
-   * @var \Drupal\pagedesigner\Plugin\pagedesigner\HandlerPluginInterface
+   * @var HandlerPluginInterface
    */
   protected $handler = NULL;
 
   /**
    * The handler manager.
    *
-   * @var \Drupal\pagedesigner\Service\HandlerPluginManager
+   * @var HandlerPluginManager
    */
   protected $handlerManager = NULL;
 
@@ -59,7 +61,7 @@ abstract class HandlerTestBase extends AbstractPagedesignerTest {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->handlerManager = \Drupal::service('plugin.manager.pagedesigner_handler');
   }
diff --git a/tests/src/Kernel/PatternTests/ComponentPatternTest.php b/tests/src/Kernel/PatternTests/ComponentPatternTest.php
index 74f6774..3192c3a 100644
--- a/tests/src/Kernel/PatternTests/ComponentPatternTest.php
+++ b/tests/src/Kernel/PatternTests/ComponentPatternTest.php
@@ -23,7 +23,7 @@ class ComponentPatternTest extends PatternTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     self::$modules[] = 'system';
     self::$modules[] = 'editor';
     self::$modules[] = 'filter';
diff --git a/tests/src/Kernel/PatternTests/PatternTestBase.php b/tests/src/Kernel/PatternTests/PatternTestBase.php
index 4aa2fd1..52ec713 100644
--- a/tests/src/Kernel/PatternTests/PatternTestBase.php
+++ b/tests/src/Kernel/PatternTests/PatternTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\pagedesigner\Kernel\PatternTests;
 
+use Drupal\pagedesigner\Service\ElementHandler;
 use Drupal\Tests\pagedesigner\Kernel\AbstractPagedesignerTest;
 use Drupal\ui_patterns\UiPatterns;
 
@@ -13,7 +14,7 @@ abstract class PatternTestBase extends AbstractPagedesignerTest {
   /**
    * The element handler.
    *
-   * @var \Drupal\pagedesigner\Service\ElementHandler
+   * @var ElementHandler
    */
   protected $elementHandler = NULL;
 
@@ -59,7 +60,7 @@ abstract class PatternTestBase extends AbstractPagedesignerTest {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     self::$modules[] = 'ui_patterns_library';
     self::$modules[] = 'pagedesigner_pattern_test';
     parent::setUp();
diff --git a/tests/src/Kernel/PatternTests/RowPatternTest.php b/tests/src/Kernel/PatternTests/RowPatternTest.php
index eb04c7d..e6cdfa6 100644
--- a/tests/src/Kernel/PatternTests/RowPatternTest.php
+++ b/tests/src/Kernel/PatternTests/RowPatternTest.php
@@ -23,7 +23,7 @@ class RowPatternTest extends PatternTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $entity = Element::create(
       [
