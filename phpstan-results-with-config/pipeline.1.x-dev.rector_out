modules/contrib/pipeline/pipeline.behat.inc
modules/contrib/pipeline/pipeline.module
modules/contrib/pipeline/src/Annotation/PipelinePipeline.php
modules/contrib/pipeline/src/Annotation/PipelineStep.php
modules/contrib/pipeline/src/Controller/PipelineExecutionController.php
modules/contrib/pipeline/src/Event/PipelineErrorEvent.php
modules/contrib/pipeline/src/Event/PipelineSuccessEvent.php
modules/contrib/pipeline/src/Exception/PipelineStepExecutionLogicException.php
modules/contrib/pipeline/src/Exception/PipelineStepLogicExceptionBase.php
modules/contrib/pipeline/src/Exception/PipelineStepPrepareLogicException.php
modules/contrib/pipeline/src/Form/PipelineOrchestratorForm.php
modules/contrib/pipeline/src/Form/PipelineSelectForm.php
modules/contrib/pipeline/src/PipelineOrchestrator.php
modules/contrib/pipeline/src/PipelineOrchestratorInterface.php
modules/contrib/pipeline/src/PipelinePermissions.php
modules/contrib/pipeline/src/PipelineState.php
modules/contrib/pipeline/src/PipelineStateInterface.php
modules/contrib/pipeline/src/PipelineStateManager.php
modules/contrib/pipeline/src/PipelineStateManagerInterface.php
modules/contrib/pipeline/src/Plugin/PipelinePipelineInterface.php
modules/contrib/pipeline/src/Plugin/PipelinePipelinePluginBase.php
modules/contrib/pipeline/src/Plugin/PipelinePipelinePluginManager.php
modules/contrib/pipeline/src/Plugin/PipelineStepInterface.php
modules/contrib/pipeline/src/Plugin/PipelineStepPluginBase.php
modules/contrib/pipeline/src/Plugin/PipelineStepPluginManager.php
modules/contrib/pipeline/src/Plugin/PipelineStepWithBatchInterface.php
modules/contrib/pipeline/src/Plugin/PipelineStepWithBatchTrait.php
modules/contrib/pipeline/src/Plugin/PipelineStepWithClientRedirectResponseTrait.php
modules/contrib/pipeline/src/Plugin/PipelineStepWithFormInterface.php
modules/contrib/pipeline/src/Plugin/PipelineStepWithFormTrait.php
modules/contrib/pipeline/src/Plugin/PipelineStepWithRedirectResponseTrait.php
modules/contrib/pipeline/src/Plugin/PipelineStepWithResponseInterface.php
modules/contrib/pipeline/src/Traits/PipelineContextTrait.php
modules/contrib/pipeline/tests/src/Behat/PipelineContext.php
modules/contrib/pipeline/tests/src/Unit/PipelineOrchestratorTest.php

20 files with changes
=====================

1) modules/contrib/pipeline/tests/src/Unit/PipelineOrchestratorTest.php:6

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\pipeline\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
+use Drupal\Core\Render\RendererInterface;
+use Drupal\pipeline\PipelineOrchestratorInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Form\FormBuilder;
 use Drupal\Core\Messenger\Messenger;
@@ @@
  */
 class PipelineOrchestratorTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The data pipeline plugin manager.
    *
-   * @var \Drupal\pipeline\Plugin\PipelinePipelinePluginManager|\Prophecy\Prophecy\ObjectProphecy
+   * @var PipelinePipelinePluginManager|ObjectProphecy
    */
   protected $pipelinePluginManager;

@@ @@
   /**
    * The pipeline step plugin manager.
    *
-   * @var \Drupal\pipeline\Plugin\PipelineStepPluginManager|\Prophecy\Prophecy\ObjectProphecy
+   * @var PipelineStepPluginManager|ObjectProphecy
    */
   protected $stepPluginManager;

@@ @@
   /**
    * The state manager.
    *
-   * @var \Drupal\pipeline\PipelineStateManager|\Prophecy\Prophecy\ObjectProphecy
+   * @var PipelineStateManager|ObjectProphecy
    */
   protected $stateManager;

@@ @@
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilder|\Prophecy\Prophecy\ObjectProphecy
+   * @var FormBuilder|ObjectProphecy
    */
   protected $formBuilder;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger|\Prophecy\Prophecy\ObjectProphecy
+   * @var Messenger|ObjectProphecy
    */
   protected $messenger;

@@ @@
   /**
    * The current user service.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var AccountProxyInterface|ObjectProphecy
    */
   protected $currentUser;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->pipelinePluginManager = $this->prophesize(PipelinePipelinePluginManager::class);
     $this->stepPluginManager = $this->prophesize(PipelineStepPluginManager::class);
@@ @@
   /**
    * Initializes a new orchestrator object.
    *
-   * @return \Drupal\pipeline\PipelineOrchestratorInterface
+   * @return PipelineOrchestratorInterface
    *   The new orchestrator object.
    */
   protected function createOrchestrator() {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/pipeline/src/Plugin/PipelineStepWithResponseInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pipeline\Plugin;

+use Symfony\Component\HttpFoundation\RedirectResponse;
 /**
  * Provides an interface for pipeline steps returning a HTTP response.
  */
@@ @@
   /**
    * Returns a response as a render array or a redirect.
    *
-   * @return array|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return array|RedirectResponse
    *   The response.
    */
   public function getResponse();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/pipeline/src/Plugin/PipelineStepWithFormInterface.php:31

    ---------- begin diff ----------
@@ @@
    * }
    * @endcode
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/pipeline/src/Plugin/PipelineStepPluginManager.php:17

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/pipeline/src/Plugin/PipelineStepPluginBase.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The parent pipeline.
    *
-   * @var \Drupal\pipeline\Plugin\PipelinePipelineInterface
+   * @var PipelinePipelineInterface
    */
   protected $pipeline;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/pipeline/src/Plugin/PipelineStepInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pipeline\Plugin;

+use Drupal\pipeline\Exception\PipelineStepExecutionLogicException;
+use Drupal\pipeline\Exception\PipelineStepPrepareLogicException;
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;

 /**
@@ @@
   /**
    * Executes the business logic of the pipeline step.
    *
-   * @throws \Drupal\pipeline\Exception\PipelineStepExecutionLogicException
+   * @throws PipelineStepExecutionLogicException
    *   By throwing this exception, the step notifies the pipeline orchestrator
    *   that it should exit the pipeline with an error, in this step. Method
    *   implementations should use PipelineStepLogicalException::setError() in
@@ @@
   /**
    * Gives a chance to step plugins to perform some tasks just before executing.
    *
-   * @throws \Drupal\pipeline\Exception\PipelineStepPrepareLogicException
+   * @throws PipelineStepPrepareLogicException
    *   By throwing this exception, the step prepare method notifies the pipeline
    *   orchestrator that it should exit the pipeline with an error, in this
    *   step. Method implementations should pass the error markup to be displayed
@@ @@
   /**
    * Sets the pipeline where this step is instantiated.
    *
-   * @param \Drupal\pipeline\Plugin\PipelinePipelineInterface $pipeline
+   * @param PipelinePipelineInterface $pipeline
    *   The pipeline plugin instance.
    *
    * @return $this
@@ @@
   /**
    * Gets the pipeline where this step belongs.
    *
-   * @return \Drupal\pipeline\Plugin\PipelinePipelineInterface
+   * @return PipelinePipelineInterface
    *   The pipeline plugin instance.
    */
   public function getPipeline();
@@ @@
   /**
    * Returns the generic title to be used on pages.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   The page title.
    */
   public function getPageTitle();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/pipeline/src/Plugin/PipelinePipelinePluginManager.php:17

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/pipeline/src/Plugin/PipelinePipelinePluginBase.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * The step plugin manager service.
    *
-   * @var \Drupal\pipeline\Plugin\PipelineStepPluginManager
+   * @var PipelineStepPluginManager
    */
   protected $stepPluginManager;

@@ @@
   /**
    * The pipeline state manager service.
    *
-   * @var \Drupal\pipeline\PipelineStateManager
+   * @var PipelineStateManager
    */
   protected $stateManager;

@@ @@
   /**
    * The current pipeline state.
    *
-   * @var \Drupal\pipeline\PipelineStateInterface
+   * @var PipelineStateInterface
    */
   protected $state;

@@ @@
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\pipeline\Plugin\PipelineStepPluginManager $step_plugin_manager
+   * @param PipelineStepPluginManager $step_plugin_manager
    *   The step plugin manager service.
-   * @param \Drupal\pipeline\PipelineStateManager $state_manager
+   * @param PipelineStateManager $state_manager
    *   The pipeline state manager service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, PipelineStepPluginManager $step_plugin_manager, PipelineStateManager $state_manager, EventDispatcherInterface $event_dispatcher) {
@@ @@
    * {@inheritdoc}
    */
   public function createStepInstance($step_plugin_id) {
-    /** @var \Drupal\pipeline\Plugin\PipelineStepInterface $step */
+    /** @var PipelineStepInterface $step */
     $step = $this->stepPluginManager->createInstance($step_plugin_id, $this->getStepList()->offsetGet($step_plugin_id));
     return $step->setPipeline($this);
   }
@@ @@
   public function onSuccess() {
     // Ask each step if they want to take some action after pipeline execution.
     foreach ($this->getStepList() as $step_plugin_id => $step_plugin_config) {
-      /** @var \Drupal\pipeline\Plugin\PipelineStepInterface $step_plugin */
+      /** @var PipelineStepInterface $step_plugin */
       $step_plugin = $this->stepPluginManager->createInstance($step_plugin_id, $step_plugin_config);
       $step_plugin->onPipelineSuccess();
     }

     $event = new PipelineSuccessEvent($this);
-    $this->eventDispatcher->dispatch(PipelineSuccessEvent::class, $event);
+    $this->eventDispatcher->dispatch($event);

     // Reset the state manager.
     $this->stateManager->reset($this->getPluginId());
@@ @@
   public function onError() {
     // Ask each step if they want to take some action after pipeline error.
     foreach ($this->getStepList() as $step_plugin_id => $step_plugin_config) {
-      /** @var \Drupal\pipeline\Plugin\PipelineStepInterface $step_plugin */
+      /** @var PipelineStepInterface $step_plugin */
       $step_plugin = $this->stepPluginManager->createInstance($step_plugin_id, $step_plugin_config);
       $step_plugin->onPipelineError();
     }

     $event = new PipelineErrorEvent($this);
-    $this->eventDispatcher->dispatch(PipelineErrorEvent::class, $event);
+    $this->eventDispatcher->dispatch($event);

     // Reset the state manager.
     $this->stateManager->reset($this->getPluginId());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/pipeline/src/Plugin/PipelinePipelineInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pipeline\Plugin;

+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\pipeline\PipelineStateInterface;

@@ @@
   /**
    * Sets steps iterator pointer to a given step.
    *
-   * @param \Drupal\pipeline\PipelineStateInterface $state
+   * @param PipelineStateInterface $state
    *   The current state object.
    *
    * @return $this
@@ @@
   /**
    * The current pipeline state.
    *
-   * @return \Drupal\pipeline\PipelineStateInterface
+   * @return PipelineStateInterface
    *   The pipeline state object.
    */
   public function getCurrentState();
@@ @@
    * @param string $step_plugin_id
    *   The step plugin ID.
    *
-   * @return \Drupal\pipeline\Plugin\PipelineStepInterface
+   * @return PipelineStepInterface
    *   The step plugin instance.
    */
   public function createStepInstance($step_plugin_id);
@@ @@
   /**
    * Gives a chance to plugins to perform some tasks just before executing.
    *
-   * @return null|\Drupal\Component\Render\MarkupInterface|string
+   * @return null|MarkupInterface|string
    *   If no errors were encountered during the pipeline preparation, nothing
    *   should be returned. Return the error message as a translatable markup
    *   object.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/pipeline/src/PipelineStateManagerInterface.php:11

    ---------- begin diff ----------
@@ @@
    *
    * @param string $pipeline_id
    *   The pipeline plugin ID.
-   * @param \Drupal\pipeline\PipelineStateInterface $state
+   * @param PipelineStateInterface $state
    *   The pipeline state object.
    *
    * @return $this
@@ @@
    * @param string $pipeline_id
    *   The pipeline plugin ID.
    *
-   * @return \Drupal\pipeline\PipelineStateInterface|null
+   * @return PipelineStateInterface|null
    *   The state object or NULL.
    */
   public function getState($pipeline_id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/pipeline/src/PipelineStateManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pipeline;

+use Drupal\Core\TempStore\PrivateTempStore;
 use Drupal\Core\TempStore\PrivateTempStoreFactory;

 /**
@@ @@
   /**
    * The user private temp store factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $privateTempStoreFactory;

@@ @@
   /**
    * The user private temp store.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $privateTempStore;

@@ @@
   /**
    * Constructs a new pipeline state manager service.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $private_tempstore_factory
+   * @param PrivateTempStoreFactory $private_tempstore_factory
    *   The user private temp store factory.
    */
   public function __construct(PrivateTempStoreFactory $private_tempstore_factory) {
@@ @@
   /**
    * Returns the user private temp store.
    *
-   * @return \Drupal\Core\TempStore\PrivateTempStore
+   * @return PrivateTempStore
    *   The private tempstore.
    */
   protected function getPrivateTempStore() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/pipeline/src/PipelinePermissions.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pipeline;

+use Drupal\pipeline\Plugin\PipelinePipelineInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * The pipeline plugin manager service.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $pipelinePluginManager;

@@ @@
   /**
    * Constructs a new permission generator instance.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $pipeline_plugin_manager
+   * @param PluginManagerInterface $pipeline_plugin_manager
    *   The pipeline plugin manager service.
    */
   public function __construct(PluginManagerInterface $pipeline_plugin_manager) {
@@ @@
   public function buildPermissions() {
     $permissions = [];

-    /** @var \Drupal\pipeline\Plugin\PipelinePipelineInterface[] $definitions */
+    /** @var PipelinePipelineInterface[] $definitions */
     $definitions = $this->pipelinePluginManager->getDefinitions();
     foreach ($definitions as $plugin_id => $definition) {
       $arguments = ['%pipeline' => $definition['label']];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/pipeline/src/PipelineOrchestrator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pipeline;

+use Drupal\Core\Form\FormSubmitterInterface;
+use Drupal\pipeline\Plugin\PipelinePipelineInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Core\Form\EnforcedResponseException;
+use Drupal\Core\Form\FormAjaxException;
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Core\Form\FormBuilderInterface;
 use Drupal\Core\Form\FormState;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The form builder service.
    *
-   * @var \Drupal\Core\Form\FormSubmitterInterface
+   * @var FormSubmitterInterface
    */
   protected $formBuilder;

@@ @@
   /**
    * The active pipeline.
    *
-   * @var \Drupal\pipeline\Plugin\PipelinePipelineInterface
+   * @var PipelinePipelineInterface
    */
   protected $pipeline;

@@ @@
   /**
    * The pipeline plugin manager service.
    *
-   * @var \Drupal\pipeline\Plugin\PipelinePipelinePluginManager
+   * @var PipelinePipelinePluginManager
    */
   protected $pipelinePluginManager;

@@ @@
   /**
    * The persistent state of the importer.
    *
-   * @var \Drupal\pipeline\PipelineStateManager
+   * @var PipelineStateManager
    */
   protected $stateManager;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The request stack service.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * Constructs a new pipeline orchestrator object.
    *
-   * @param \Drupal\pipeline\Plugin\PipelinePipelinePluginManager $pipeline_plugin_manager
+   * @param PipelinePipelinePluginManager $pipeline_plugin_manager
    *   The pipeline plugin manager service.
-   * @param \Drupal\pipeline\PipelineStateManager $state_manager
+   * @param PipelineStateManager $state_manager
    *   The persistent state of the importer.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack service.
    */
   public function __construct(PipelinePipelinePluginManager $pipeline_plugin_manager, PipelineStateManager $state_manager, FormBuilderInterface $form_builder, MessengerInterface $messenger, AccountProxyInterface $current_user, RequestStack $request_stack) {
@@ @@
    * @param string $pipeline_id
    *   The pipeline to be used.
    *
-   * @return \Drupal\pipeline\PipelineStateInterface
+   * @return PipelineStateInterface
    *   The current pipeline state object.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
    */
   protected function getCurrentState($pipeline_id) {
@@ @@
   /**
    * Executes the current step and progresses the state machine with one step.
    *
-   * @param \Drupal\pipeline\PipelineStateInterface $state
+   * @param PipelineStateInterface $state
    *   The current pipeline state.
    *
    * @return bool
@@ @@
     }

     if ($is_batch = $step instanceof PipelineStepWithBatchInterface) {
-      /** @var \Drupal\pipeline\Plugin\PipelineStepWithBatchInterface $step */
+      /** @var PipelineStepWithBatchInterface $step */
       if ($state->batchProcessIsStarted() && $step->batchProcessIsCompleted()) {
         // We landed here after all batches were processed in the last request.
         if ($state->hasBatchProcessErrors()) {
@@ @@
   /**
    * Advances the pipeline to the next step.
    *
-   * @param \Drupal\pipeline\Plugin\PipelineStepInterface $step
+   * @param PipelineStepInterface $step
    *   The current step.
-   * @param \Drupal\pipeline\PipelineStateInterface $state
+   * @param PipelineStateInterface $state
    *   The pipeline state object.
    *
    * @return bool
@@ @@
   /**
    * Renders a batch progress bar screen or subsequent Json responses.
    *
-   * @param \Drupal\pipeline\Plugin\PipelineStepWithBatchInterface $step
+   * @param PipelineStepWithBatchInterface $step
    *   The current step.
-   * @param \Drupal\pipeline\PipelineStateInterface $state
+   * @param PipelineStateInterface $state
    *   The pipeline state object.
    */
   protected function batchResponse(PipelineStepWithBatchInterface $step, PipelineStateInterface $state) {
@@ @@
   /**
    * Builds the form and instructs the caller that it should render the form.
    *
-   * @param \Drupal\pipeline\Plugin\PipelineStepWithFormInterface $step
+   * @param PipelineStepWithFormInterface $step
    *   The active pipeline step.
-   * @param \Drupal\pipeline\PipelineStateInterface $state
+   * @param PipelineStateInterface $state
    *   The state.
    *
    * @return bool
@@ @@
   /**
    * Builds the form.
    *
-   * @param \Drupal\pipeline\Plugin\PipelineStepWithFormInterface $step
+   * @param PipelineStepWithFormInterface $step
    *   The step plugin instance.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
-   * @throws \Drupal\Core\Form\EnforcedResponseException
-   * @throws \Drupal\Core\Form\FormAjaxException
+   * @throws EnforcedResponseException
+   * @throws FormAjaxException
    *   If errors occurred during the form build.
    */
   protected function buildForm(PipelineStepWithFormInterface $step, FormStateInterface &$form_state) {
@@ @@
   /**
    * Reloads the page if the form needs to rebuild.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   protected function redirectForm(FormStateInterface $form_state): void {
@@ @@
   /**
    * Acts when the pipeline exits with error.
    *
-   * @param \Drupal\pipeline\Plugin\PipelineStepInterface $step
+   * @param PipelineStepInterface $step
    *   The step plugin instance.
    * @param array $error
    *   The error message as a render array.
@@ @@
   /**
    * Returns the status message when the pipeline exists with error.
    *
-   * @param \Drupal\pipeline\Plugin\PipelineStepInterface $step
+   * @param PipelineStepInterface $step
    *   The pipeline step plugin instance.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   The error message.
    */
   protected function getErrorStatusMessage(PipelineStepInterface $step) {
@@ @@
   /**
    * Returns the page title on error.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   The error message.
    */
   protected function getErrorPageTitle() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/pipeline/src/Form/PipelineSelectForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The pipeline plugin manager service.
    *
-   * @var \Drupal\pipeline\Plugin\PipelinePipelinePluginManager
+   * @var PipelinePipelinePluginManager
    */
   protected $pipelinePluginManager;

@@ @@
   /**
    * The state manager service.
    *
-   * @var \Drupal\pipeline\PipelineStateManager
+   * @var PipelineStateManager
    */
   protected $stateManager;

@@ @@
   /**
    * Constructs a new form class.
    *
-   * @param \Drupal\pipeline\Plugin\PipelinePipelinePluginManager $pipeline_plugin_manager
+   * @param PipelinePipelinePluginManager $pipeline_plugin_manager
    *   The pipeline plugin manager service.
-   * @param \Drupal\pipeline\PipelineStateManager $state_manager
+   * @param PipelineStateManager $state_manager
    *   The state manager service.
    */
   public function __construct(PipelinePipelinePluginManager $pipeline_plugin_manager, PipelineStateManager $state_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/pipeline/src/Form/PipelineOrchestratorForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pipeline\Form;

+use Drupal\pipeline\Plugin\PipelinePipelineInterface;
+use Drupal\pipeline\Plugin\PipelineStepWithFormInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Form\SubformState;
@@ @@
   /**
    * The pipeline plugin manager service.
    *
-   * @var \Drupal\pipeline\Plugin\PipelinePipelinePluginManager
+   * @var PipelinePipelinePluginManager
    */
   protected $pipelinePluginManager;

@@ @@
   /**
    * The step plugin manager service.
    *
-   * @var \Drupal\pipeline\Plugin\PipelineStepPluginManager
+   * @var PipelineStepPluginManager
    */
   protected $stepPluginManager;

@@ @@
   /**
    * Builds a new form object.
    *
-   * @param \Drupal\pipeline\Plugin\PipelinePipelinePluginManager $pipeline_plugin_manager
+   * @param PipelinePipelinePluginManager $pipeline_plugin_manager
    *   The pipeline plugin manager service.
-   * @param \Drupal\pipeline\Plugin\PipelineStepPluginManager $step_plugin_manager
+   * @param PipelineStepPluginManager $step_plugin_manager
    *   The step plugin manager service.
    */
   public function __construct(PipelinePipelinePluginManager $pipeline_plugin_manager, PipelineStepPluginManager $step_plugin_manager) {
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   Form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
    * @return array
@@ @@
   /**
    * Returns the current pipeline given the form state object.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
-   * @return \Drupal\pipeline\Plugin\PipelinePipelineInterface
+   * @return PipelinePipelineInterface
    *   The current pipeline.
    */
   protected function getCurrentPipeline(FormStateInterface $form_state) {
@@ @@
   /**
    * Returns the current step given the form state object.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
-   * @return \Drupal\pipeline\Plugin\PipelineStepWithFormInterface
+   * @return PipelineStepWithFormInterface
    *   An instance of the current pipeline step plugin.
    */
   protected function getCurrentStep(FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/pipeline/src/Event/PipelineSuccessEvent.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pipeline\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\pipeline\Plugin\PipelinePipelineInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * A successful pipeline completion event.
@@ @@
   /**
    * The pipeline that triggered this event.
    *
-   * @var \Drupal\pipeline\Plugin\PipelinePipelineInterface
+   * @var PipelinePipelineInterface
    */
   protected $pipeline;

@@ @@
   /**
    * Constructs a PipelineSuccessEvent object.
    *
-   * @param \Drupal\pipeline\Plugin\PipelinePipelineInterface $pipeline
+   * @param PipelinePipelineInterface $pipeline
    *   The pipeline.
    */
   public function __construct(PipelinePipelineInterface $pipeline) {
@@ @@
   /**
    * Retrieves the pipeline that triggered this event.
    *
-   * @return \Drupal\pipeline\Plugin\PipelinePipelineInterface
+   * @return PipelinePipelineInterface
    *   The pipeline.
    */
   public function getPipeline(): PipelinePipelineInterface {
@@ @@
   /**
    * Sets the pipeline that triggered this event.
    *
-   * @param \Drupal\pipeline\Plugin\PipelinePipelineInterface $pipeline
+   * @param PipelinePipelineInterface $pipeline
    *   The pipeline.
    */
   public function setPipeline(PipelinePipelineInterface $pipeline): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/pipeline/src/Event/PipelineErrorEvent.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pipeline\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\pipeline\Plugin\PipelinePipelineInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * A failed pipeline completion event.
@@ @@
   /**
    * The pipeline that triggered this event.
    *
-   * @var \Drupal\pipeline\Plugin\PipelinePipelineInterface
+   * @var PipelinePipelineInterface
    */
   protected $pipeline;

@@ @@
   /**
    * Constructs a PipelineErrorEvent object.
    *
-   * @param \Drupal\pipeline\Plugin\PipelinePipelineInterface $pipeline
+   * @param PipelinePipelineInterface $pipeline
    *   The pipeline.
    */
   public function __construct(PipelinePipelineInterface $pipeline) {
@@ @@
   /**
    * Retrieves the pipeline that triggered this event.
    *
-   * @return \Drupal\pipeline\Plugin\PipelinePipelineInterface
+   * @return PipelinePipelineInterface
    *   The pipeline.
    */
   public function getPipeline(): PipelinePipelineInterface {
@@ @@
   /**
    * Sets the pipeline that triggered this event.
    *
-   * @param \Drupal\pipeline\Plugin\PipelinePipelineInterface $pipeline
+   * @param PipelinePipelineInterface $pipeline
    *   The pipeline.
    */
   public function setPipeline(PipelinePipelineInterface $pipeline): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/pipeline/src/Controller/PipelineExecutionController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pipeline\Controller;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * The pipeline orchestrator service.
    *
-   * @var \Drupal\pipeline\PipelineOrchestratorInterface
+   * @var PipelineOrchestratorInterface
    */
   protected $orchestrator;

@@ @@
   /**
    * Constructs a new pipeline execution controller.
    *
-   * @param \Drupal\pipeline\PipelineOrchestratorInterface $orchestrator
+   * @param PipelineOrchestratorInterface $orchestrator
    *   The pipeline orchestrator service.
    */
   public function __construct(PipelineOrchestratorInterface $orchestrator) {
@@ @@
    * @param string $pipeline
    *   The pipeline to reset.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   A redirect response.
    */
   public function reset($pipeline) {
@@ @@
    *
    * @param string $pipeline
    *   The pipeline plugin ID.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current use account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result object.
    */
   public function allowExecute($pipeline, AccountInterface $account) {
@@ @@
    *
    * @param string $pipeline
    *   The pipeline plugin ID.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current use account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result object.
    */
   public function allowReset($pipeline, AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/pipeline/src/Annotation/PipelineStep.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pipeline\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


20) modules/contrib/pipeline/src/Annotation/PipelinePipeline.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pipeline\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


 [WARNING] 2 nodes were removed                                                 

 [OK] 20 files have been changed by Rector                                      

