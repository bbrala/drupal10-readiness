diff --git a/bat.api.php b/bat.api.php
index 9db611b..14a1cff 100644
--- a/bat.api.php
+++ b/bat.api.php
@@ -1,12 +1,13 @@
 <?php
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Session\AccountInterface;
 /**
  * @file
  * This file contains no working PHP code; it exists to provide additional
  * documentation for doxygen as well as to document hooks in the standard
  * Drupal manner.
  */
-
 /**
  * Allows modules to deny or provide access for a user to perform a non-view
  * operation on an entity before any other access check occurs.
@@ -20,17 +21,17 @@
  * If no modules return FALSE but none return TRUE either, normal permission
  * based checking will apply.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity to perform the operation on.
  * @param $operation
  *   The request operation: update, create, or delete.
- * @param \Drupal\Core\Session\AccountInterface $account
+ * @param AccountInterface $account
  *   The user account whose access should be determined.
  *
  * @return bool
  *   TRUE or FALSE indicating an explicit denial of permission or a grant in the
  *   presence of no other denials; NULL to not affect the access check at all.
  */
-function hook_bat_entity_access(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Session\AccountInterface $account) {
+function hook_bat_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
   // No example.
 }
diff --git a/bat.module b/bat.module
index b01882c..ad5b0f8 100644
--- a/bat.module
+++ b/bat.module
@@ -487,7 +487,7 @@ function template_preprocess_bat_type_group(array &$variables) {
  * @param bool $reset
  *   A boolean indicating whether the internal cache should be reset.
  *
- * @return \Drupal\bat\Entity\TypeGroup
+ * @return TypeGroup
  *   A fully-loaded $type_group object or FALSE if it cannot be loaded.
  *
  * @see bat_type_group_load_multiple()
@@ -538,7 +538,7 @@ function bat_type_group_load_multiple($group_ids = [], $conditions = [], $reset
 /**
  * Saves a type group to the database.
  *
- * @param \Drupal\bat\Entity\TypeGroup $group
+ * @param TypeGroup $group
  *   The TypeGroup object.
  */
 function bat_type_group_save(TypeGroup $group) {
@@ -548,7 +548,7 @@ function bat_type_group_save(TypeGroup $group) {
 /**
  * Deletes a type group.
  *
- * @param \Drupal\bat\Entity\TypeGroup $group
+ * @param TypeGroup $group
  *   The TypeGroup object that represents the group to delete.
  */
 function bat_type_group_delete(TypeGroup $group) {
@@ -577,7 +577,7 @@ function bat_type_group_delete_multiple(array $group_ids) {
  * @param bool $reset
  *   A boolean indicating that the internal cache should be reset.
  *
- * @return \Drupal\bat\Entity\TypeGroupBundle[]
+ * @return TypeGroupBundle[]
  *   Depending whether $bundle isset, an array of type group bundles or a single one.
  */
 function bat_type_group_get_bundles($bundle_name = NULL, $reset = FALSE) {
@@ -607,7 +607,7 @@ function bat_type_group_create($values = []) {
  * @param bool $reset
  *   A boolean indicating whether the internal cache should be reset.
  *
- * @return \Drupal\bat\Entity\TypeGroupBundle
+ * @return TypeGroupBundle
  *   A type group bundle array or FALSE if $bundle does not exist.
  */
 function bat_type_group_bundle_load($bundle, $reset = FALSE) {
diff --git a/modules/bat_booking/bat_booking.module b/modules/bat_booking/bat_booking.module
index b5717e6..16223bf 100644
--- a/modules/bat_booking/bat_booking.module
+++ b/modules/bat_booking/bat_booking.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Access\AccessResult;
 /**
  * @file
  */
@@ -19,13 +20,13 @@ use Drupal\bat_booking\Entity\BookingBundle;
  * @param string $op
  *   The operation being performed. One of 'view', 'update', 'create', 'delete'
  *   or just 'edit' (being the same as 'create' or 'update').
- * @param \Drupal\bat_booking\Entity\Booking $booking
+ * @param Booking $booking
  *   Optionally a booking to check access for. If nothing is
  *   given, access for all bookings is determined.
  * @param object $account
  *   The user to check for. Leave it to NULL to check for the global user.
  *
- * @return \Drupal\Core\Access\AccessResult
+ * @return AccessResult
  */
 function bat_booking_access(EntityInterface $entity, $operation, AccountInterface $account) {
   return bat_entity_access($entity, $operation, $account);
@@ -79,7 +80,7 @@ function bat_booking_type_load($bundle, $reset = FALSE) {
  * @param bool $reset
  *   A boolean indicating that the internal cache should be reset.
  *
- * @return \Drupal\bat_booking\Entity\BookingBundle[]
+ * @return BookingBundle[]
  *   Depending whether $type isset, an array of booking types or a single one.
  */
 function bat_booking_get_bundles($type_name = NULL, $reset = FALSE) {
@@ -94,7 +95,7 @@ function bat_booking_get_bundles($type_name = NULL, $reset = FALSE) {
 /**
  * Saves a booking type to the db.
  *
- * @param \Drupal\bat_booking\Entity\BookingBundle $booking_type
+ * @param BookingBundle $booking_type
  *   The booking type to save.
  */
 function bat_booking_type_save(BookingBundle $booking_type) {
@@ -115,7 +116,7 @@ function bat_booking_type_delete(BookingBundle $bundle) {
  *   Integer specifying the booking id.
  * @param bool $reset
  *   A boolean indicating whether the internal cache should be reset.
- * @return \Drupal\bat_booking\Entity\Booking|false
+ * @return Booking|false
  *   A fully-loaded $booking object or FALSE if it cannot be loaded.
  *
  * @see bat_booking_load_multiple()
@@ -163,7 +164,7 @@ function bat_booking_load_multiple($booking_ids = [], $conditions = [], $reset =
 /**
  * Deletes a Bat Booking.
  *
- * @param \Drupal\bat_booking\Entity\Booking $booking
+ * @param Booking $booking
  *   The Booking object that represents the booking to delete.
  */
 function bat_booking_delete(Booking $booking) {
diff --git a/modules/bat_booking/src/Access/BookingAddAccessCheck.php b/modules/bat_booking/src/Access/BookingAddAccessCheck.php
index 9a5f7a0..a542431 100644
--- a/modules/bat_booking/src/Access/BookingAddAccessCheck.php
+++ b/modules/bat_booking/src/Access/BookingAddAccessCheck.php
@@ -7,6 +7,7 @@
 
 namespace Drupal\bat_booking\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
@@ -21,14 +22,14 @@ class BookingAddAccessCheck implements AccessInterface {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a EntityCreateAccessCheck object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager) {
@@ -38,13 +39,13 @@ class BookingAddAccessCheck implements AccessInterface {
   /**
    * Checks access to the unit add page for the unit type.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
-   * @param \Drupal\bat_booking\BookingBundleInterface $booking_bundle
+   * @param BookingBundleInterface $booking_bundle
    *   (optional) The unit bundle. If not specified, access is allowed if there
    *   exists at least one unit bundle for which the user may create a unit.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $account, BookingBundleInterface $booking_bundle = NULL) {
diff --git a/modules/bat_booking/src/BookingBundleForm.php b/modules/bat_booking/src/BookingBundleForm.php
index be1ed7b..6310aae 100644
--- a/modules/bat_booking/src/BookingBundleForm.php
+++ b/modules/bat_booking/src/BookingBundleForm.php
@@ -21,14 +21,14 @@ class BookingBundleForm extends BundleEntityFormBase {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs the EventTypeForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager) {
diff --git a/modules/bat_booking/src/BookingListBuilder.php b/modules/bat_booking/src/BookingListBuilder.php
index 5e4bf14..9fea4da 100644
--- a/modules/bat_booking/src/BookingListBuilder.php
+++ b/modules/bat_booking/src/BookingListBuilder.php
@@ -24,9 +24,9 @@ class BookingListBuilder extends EntityListBuilder {
   /**
    * Constructs a new BookingListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage) {
diff --git a/modules/bat_booking/src/BookingPermissions.php b/modules/bat_booking/src/BookingPermissions.php
index 3ac9c7d..74fe236 100644
--- a/modules/bat_booking/src/BookingPermissions.php
+++ b/modules/bat_booking/src/BookingPermissions.php
@@ -22,14 +22,14 @@ class BookingPermissions implements ContainerInjectionInterface {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new FilterPermissions instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager) {
diff --git a/modules/bat_booking/src/Controller/BookingController.php b/modules/bat_booking/src/Controller/BookingController.php
index 89939aa..a94845b 100644
--- a/modules/bat_booking/src/Controller/BookingController.php
+++ b/modules/bat_booking/src/Controller/BookingController.php
@@ -7,6 +7,7 @@
 
 namespace Drupal\bat_booking\Controller;
 
+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\bat_booking\BookingBundleInterface;
@@ -27,7 +28,7 @@ class BookingController extends ControllerBase implements ContainerInjectionInte
    *
    * Redirects to admin/bat/config/unit_type/add/[type] if only one unit type bundle is available.
    *
-   * @return array|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return array|RedirectResponse
    *   A render array for a list of the type bundles that can be added; however,
    *   if there is only one type bundle defined for the site, the function
    *   will return a RedirectResponse to the type add page for that one type bundle.
@@ -61,7 +62,7 @@ class BookingController extends ControllerBase implements ContainerInjectionInte
   /**
    * Provides the unit type submission form.
    *
-   * @param \Drupal\bat_booking\BookingBundleInterface $booking_bundle
+   * @param BookingBundleInterface $booking_bundle
    *   The type bundle entity for the unit type.
    *
    * @return array
@@ -80,7 +81,7 @@ class BookingController extends ControllerBase implements ContainerInjectionInte
   /**
    * The _title_callback for the type.add route.
    *
-   * @param \Drupal\bat_booking\BookingBundleInterface $booking_bundle
+   * @param BookingBundleInterface $booking_bundle
    *   The current booking bundle.
    *
    * @return string
diff --git a/modules/bat_booking/src/Entity/Form/BookingForm.php b/modules/bat_booking/src/Entity/Form/BookingForm.php
index 604d26c..5a5d437 100644
--- a/modules/bat_booking/src/Entity/Form/BookingForm.php
+++ b/modules/bat_booking/src/Entity/Form/BookingForm.php
@@ -26,20 +26,20 @@ class BookingForm extends ContentEntityForm {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * Constructs a BookingForm object.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, DateFormatterInterface $date_formatter, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, TimeInterface $time = NULL) {
@@ -209,11 +209,11 @@ class BookingForm extends ContentEntityForm {
    *
    * @param string $entity_type_id
    *   The entity type identifier.
-   * @param \Drupal\bat_booking\BookingInterface $booking_type
+   * @param BookingInterface $booking_type
    *   The unit type updated with the submitted values.
    * @param array $form
    *   The complete form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function updateStatus($entity_type_id, BookingInterface $booking_type, array $form, FormStateInterface $form_state) {
diff --git a/modules/bat_calendar_reference/src/Controller/BatEventTypeAutocompleteController.php b/modules/bat_calendar_reference/src/Controller/BatEventTypeAutocompleteController.php
index 84cd622..b34f6cb 100644
--- a/modules/bat_calendar_reference/src/Controller/BatEventTypeAutocompleteController.php
+++ b/modules/bat_calendar_reference/src/Controller/BatEventTypeAutocompleteController.php
@@ -21,23 +21,23 @@ class BatEventTypeAutocompleteController extends ControllerBase {
   /**
    * The autocomplete matcher for entity references.
    *
-   * @var \Drupal\Core\Entity\EntityAutocompleteMatcher
+   * @var EntityAutocompleteMatcher
    */
   protected $matcher;
 
   /**
    * The key value store.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueStoreInterface
+   * @var KeyValueStoreInterface
    */
   protected $keyValue;
 
   /**
    * Constructs a EntityAutocompleteController object.
    *
-   * @param \Drupal\Core\Entity\EntityAutocompleteMatcher $matcher
+   * @param EntityAutocompleteMatcher $matcher
    *   The autocomplete matcher for entity references.
-   * @param \Drupal\Core\KeyValueStore\KeyValueStoreInterface $key_value
+   * @param KeyValueStoreInterface $key_value
    *   The key value factory.
    */
   public function __construct(EntityAutocompleteMatcher $matcher, KeyValueStoreInterface $key_value) {
@@ -58,7 +58,7 @@ class BatEventTypeAutocompleteController extends ControllerBase {
   /**
    * Autocomplete the label of an entity.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object that contains the typed tags.
    * @param string $target_type
    *   The ID of the target entity type.
@@ -68,10 +68,10 @@ class BatEventTypeAutocompleteController extends ControllerBase {
    *   The hashed key of the key/value entry that holds the selection handler
    *   settings.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The matched entity labels as a JSON response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException
+   * @throws AccessDeniedHttpException
    *   Thrown if the selection settings key is not found in the key/value store
    *   or if it does not match the stored data.
    */
diff --git a/modules/bat_calendar_reference/src/Controller/BatUnitAutocompleteController.php b/modules/bat_calendar_reference/src/Controller/BatUnitAutocompleteController.php
index fd914b5..9481ce0 100644
--- a/modules/bat_calendar_reference/src/Controller/BatUnitAutocompleteController.php
+++ b/modules/bat_calendar_reference/src/Controller/BatUnitAutocompleteController.php
@@ -21,23 +21,23 @@ class BatUnitAutocompleteController extends ControllerBase {
   /**
    * The autocomplete matcher for entity references.
    *
-   * @var \Drupal\Core\Entity\EntityAutocompleteMatcher
+   * @var EntityAutocompleteMatcher
    */
   protected $matcher;
 
   /**
    * The key value store.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueStoreInterface
+   * @var KeyValueStoreInterface
    */
   protected $keyValue;
 
   /**
    * Constructs a EntityAutocompleteController object.
    *
-   * @param \Drupal\Core\Entity\EntityAutocompleteMatcher $matcher
+   * @param EntityAutocompleteMatcher $matcher
    *   The autocomplete matcher for entity references.
-   * @param \Drupal\Core\KeyValueStore\KeyValueStoreInterface $key_value
+   * @param KeyValueStoreInterface $key_value
    *   The key value factory.
    */
   public function __construct(EntityAutocompleteMatcher $matcher, KeyValueStoreInterface $key_value) {
@@ -58,7 +58,7 @@ class BatUnitAutocompleteController extends ControllerBase {
   /**
    * Autocomplete the label of an entity.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object that contains the typed tags.
    * @param string $target_type
    *   The ID of the target entity type.
@@ -68,10 +68,10 @@ class BatUnitAutocompleteController extends ControllerBase {
    *   The hashed key of the key/value entry that holds the selection handler
    *   settings.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The matched entity labels as a JSON response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException
+   * @throws AccessDeniedHttpException
    *   Thrown if the selection settings key is not found in the key/value store
    *   or if it does not match the stored data.
    */
diff --git a/modules/bat_event/bat_event.module b/modules/bat_event/bat_event.module
index ba0b6c6..30e0513 100644
--- a/modules/bat_event/bat_event.module
+++ b/modules/bat_event/bat_event.module
@@ -314,7 +314,7 @@ function bat_event_types_ids() {
  * @param bool $reset
  *   A boolean indicating that the internal cache should be reset.
  *
- * @return \Drupal\bat_event\Entity\EventType[]
+ * @return EventType[]
  *   Depending whether $type isset, an array of event types or a single one.
  */
 function bat_event_get_types($type_name = NULL, $reset = FALSE) {
@@ -332,7 +332,7 @@ function bat_event_get_types($type_name = NULL, $reset = FALSE) {
  * @param string $type
  *   The machine-readable name of a event type to load.
  *
- * @return \Drupal\bat_event\Entity\EventType|null
+ * @return EventType|null
  *   An event type array or NULL if $type does not exist.
  */
 function bat_event_type_load($type) {
@@ -384,7 +384,7 @@ function bat_event_load_multiple(array $event_ids = NULL, $reset = FALSE) {
 /**
  * Deletes a event.
  *
- * @param \Drupal\bat_event\Entity\Event $event
+ * @param Event $event
  *   The Event object that represents the event to delete
  */
 function bat_event_delete(Event $event) {
@@ -415,7 +415,7 @@ function bat_event_create($values = []) {
 /**
  * Saves a event to the database.
  *
- * @param \Drupal\bat_event\Entity\Event $event
+ * @param Event $event
  *   The Event object.
  */
 function bat_event_save(Event $event) {
@@ -896,7 +896,7 @@ function bat_event_get_matching_units(DateTime $start_date, DateTime $end_date,
  * @param $type_id
  * @param $event_type
  *
- * @return \Roomify\Bat\Calendar\Calendar
+ * @return Calendar
  */
 function bat_event_get_calendar($type_id, $event_type, $drupal_units = []) {
   $database = Database::getConnectionInfo('default');
diff --git a/modules/bat_event/src/Access/EventAddAccessCheck.php b/modules/bat_event/src/Access/EventAddAccessCheck.php
index ca95d3d..1049b84 100644
--- a/modules/bat_event/src/Access/EventAddAccessCheck.php
+++ b/modules/bat_event/src/Access/EventAddAccessCheck.php
@@ -7,6 +7,7 @@
 
 namespace Drupal\bat_event\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
@@ -21,14 +22,14 @@ class EventAddAccessCheck implements AccessInterface {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a EntityCreateAccessCheck object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager) {
@@ -38,13 +39,13 @@ class EventAddAccessCheck implements AccessInterface {
   /**
    * Checks access to the event add page for the event type.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
-   * @param \Drupal\bat_event\EventTypeInterface $event_type
+   * @param EventTypeInterface $event_type
    *   (optional) The event type. If not specified, access is allowed if there
    *   exists at least one event type for which the user may create a event.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $account, EventTypeInterface $event_type = NULL) {
diff --git a/modules/bat_event/src/Controller/EventController.php b/modules/bat_event/src/Controller/EventController.php
index 525e231..9d321e6 100644
--- a/modules/bat_event/src/Controller/EventController.php
+++ b/modules/bat_event/src/Controller/EventController.php
@@ -7,6 +7,7 @@
 
 namespace Drupal\bat_event\Controller;
 
+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\bat_event\EventInterface;
@@ -22,14 +23,14 @@ class EventController extends ControllerBase implements ContainerInjectionInterf
   /**
    * The current Request object.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * Constructs a TypeController object.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    */
   public function __construct(Request $request) {
@@ -50,7 +51,7 @@ class EventController extends ControllerBase implements ContainerInjectionInterf
    *
    * Redirects to admin/bat/events/event/add/[type] if only one event type is available.
    *
-   * @return array|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return array|RedirectResponse
    *   A render array for a list of the event types that can be added; however,
    *   if there is only one event type defined for the site, the function
    *   will return a RedirectResponse to the event add page for that one event
@@ -88,7 +89,7 @@ class EventController extends ControllerBase implements ContainerInjectionInterf
   /**
    * Provides the event submission form.
    *
-   * @param \Drupal\bat_event\EventTypeInterface $event_type
+   * @param EventTypeInterface $event_type
    *   The event type entity for the event.
    *
    * @return array
@@ -107,7 +108,7 @@ class EventController extends ControllerBase implements ContainerInjectionInterf
   /**
    * The _title_callback for the event.add route.
    *
-   * @param \Drupal\bat_event\EventTypeInterface $event_type
+   * @param EventTypeInterface $event_type
    *   The current event type.
    *
    * @return string
@@ -120,7 +121,7 @@ class EventController extends ControllerBase implements ContainerInjectionInterf
   /**
    * Provides the event edit form.
    *
-   * @param \Drupal\bat_event\EventInterface $event
+   * @param EventInterface $event
    *   The event event for edit.
    *
    * @return array
diff --git a/modules/bat_event/src/Entity/Event.php b/modules/bat_event/src/Entity/Event.php
index a2e222e..6db0584 100644
--- a/modules/bat_event/src/Entity/Event.php
+++ b/modules/bat_event/src/Entity/Event.php
@@ -370,7 +370,7 @@ class Event extends ContentEntityBase implements EventInterface {
   /**
    * Handles saving to the BatStore
    *
-   * @param \Roomify\Bat\Unit\Unit $unit - The unit to save
+   * @param Unit $unit - The unit to save
    * @param \DateTime $start_date
    * @param \DateTime $end_date
    * @param $event_type
diff --git a/modules/bat_event/src/Entity/Form/EventForm.php b/modules/bat_event/src/Entity/Form/EventForm.php
index 70953c9..cf6dd16 100644
--- a/modules/bat_event/src/Entity/Form/EventForm.php
+++ b/modules/bat_event/src/Entity/Form/EventForm.php
@@ -32,29 +32,29 @@ class EventForm extends ContentEntityForm {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The current Request object.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * Constructs a EventForm object.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, DateFormatterInterface $date_formatter, Request $request, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, TimeInterface $time = NULL) {
diff --git a/modules/bat_event/src/EventListBuilder.php b/modules/bat_event/src/EventListBuilder.php
index 3479285..ddc60fc 100644
--- a/modules/bat_event/src/EventListBuilder.php
+++ b/modules/bat_event/src/EventListBuilder.php
@@ -24,18 +24,18 @@ class EventListBuilder extends EntityListBuilder {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Constructs a new EventListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, ConfigFactoryInterface $config_factory) {
diff --git a/modules/bat_event/src/EventPermissions.php b/modules/bat_event/src/EventPermissions.php
index 7287e35..da0c4b8 100644
--- a/modules/bat_event/src/EventPermissions.php
+++ b/modules/bat_event/src/EventPermissions.php
@@ -22,14 +22,14 @@ class EventPermissions implements ContainerInjectionInterface {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new FilterPermissions instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager) {
diff --git a/modules/bat_event/src/EventTypeForm.php b/modules/bat_event/src/EventTypeForm.php
index 35a0bdb..20a4446 100644
--- a/modules/bat_event/src/EventTypeForm.php
+++ b/modules/bat_event/src/EventTypeForm.php
@@ -23,23 +23,23 @@ class EventTypeForm extends BundleEntityFormBase {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * Constructs the EventTypeForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager, EntityFieldManagerInterface $entity_field_manager) {
diff --git a/modules/bat_event/src/Plugin/views/field/BatEventHandlerDurationField.php b/modules/bat_event/src/Plugin/views/field/BatEventHandlerDurationField.php
index 61649d5..a409ca0 100644
--- a/modules/bat_event/src/Plugin/views/field/BatEventHandlerDurationField.php
+++ b/modules/bat_event/src/Plugin/views/field/BatEventHandlerDurationField.php
@@ -19,7 +19,7 @@ class BatEventHandlerDurationField extends FieldPluginBase {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
@@ -32,7 +32,7 @@ class BatEventHandlerDurationField extends FieldPluginBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, DateFormatterInterface $date_formatter) {
diff --git a/modules/bat_event/src/StateListBuilder.php b/modules/bat_event/src/StateListBuilder.php
index 7fa0ca4..c4179e6 100644
--- a/modules/bat_event/src/StateListBuilder.php
+++ b/modules/bat_event/src/StateListBuilder.php
@@ -25,9 +25,9 @@ class StateListBuilder extends EntityListBuilder {
   /**
    * Constructs a new StateListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage) {
diff --git a/modules/bat_event/src/StatePermissions.php b/modules/bat_event/src/StatePermissions.php
index d0cd2ba..a872fc5 100644
--- a/modules/bat_event/src/StatePermissions.php
+++ b/modules/bat_event/src/StatePermissions.php
@@ -22,14 +22,14 @@ class StatePermissions implements ContainerInjectionInterface {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new FilterPermissions instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager) {
diff --git a/modules/bat_event_series/bat_event_series.module b/modules/bat_event_series/bat_event_series.module
index ac1acd0..3f439ca 100644
--- a/modules/bat_event_series/bat_event_series.module
+++ b/modules/bat_event_series/bat_event_series.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Database\Query\AlterableInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityFormInterface;
@@ -190,7 +191,7 @@ function bat_event_series_type_add_target_entity_field($bundle, $target_entity_t
  * @param object $account
  *   The user to check for. Leave it to NULL to check for the current user.
  *
- * @return \Drupal\Core\Access\AccessResult
+ * @return AccessResult
  */
 function bat_event_series_access(EntityInterface $entity, $operation, AccountInterface $account) {
   return bat_entity_access($entity, $operation, $account);
@@ -226,7 +227,7 @@ function bat_event_series_query_bat_event_series_access_alter(AlterableInterface
  * @param bool $reset
  *   A boolean indicating that the internal cache should be reset.
  *
- * @return \Drupal\bat_event_series\Entity\EventSeriesType[]
+ * @return EventSeriesType[]
  *   Depending whether $type isset, an array of event series types or a single one.
  */
 function bat_event_series_get_types($type_name = NULL, $reset = FALSE) {
@@ -241,7 +242,7 @@ function bat_event_series_get_types($type_name = NULL, $reset = FALSE) {
 /**
  * Deletes a event.
  *
- * @param \Drupal\bat_event_series\Entity\EventSeries $event
+ * @param EventSeries $event
  *   The Event object that represents the event to delete
  */
 function bat_event_series_delete(EventSeries $event) {
diff --git a/modules/bat_event_series/src/Access/EventSeriesAddAccessCheck.php b/modules/bat_event_series/src/Access/EventSeriesAddAccessCheck.php
index cb0f53b..8362b3e 100644
--- a/modules/bat_event_series/src/Access/EventSeriesAddAccessCheck.php
+++ b/modules/bat_event_series/src/Access/EventSeriesAddAccessCheck.php
@@ -7,6 +7,7 @@
 
 namespace Drupal\bat_event_series\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
@@ -21,14 +22,14 @@ class EventSeriesAddAccessCheck implements AccessInterface {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a EntityCreateAccessCheck object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager) {
@@ -38,13 +39,13 @@ class EventSeriesAddAccessCheck implements AccessInterface {
   /**
    * Checks access to the event add page for the event series type.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
-   * @param \Drupal\bat_event_series\EventSeriesTypeInterface $event_series_type
+   * @param EventSeriesTypeInterface $event_series_type
    *   (optional) The event series type. If not specified, access is allowed if there
    *   exists at least one event series type for which the user may create a event.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $account, EventSeriesTypeInterface $event_series_type = NULL) {
diff --git a/modules/bat_event_series/src/Controller/EventSeriesController.php b/modules/bat_event_series/src/Controller/EventSeriesController.php
index 6fa20a5..5c5b70b 100644
--- a/modules/bat_event_series/src/Controller/EventSeriesController.php
+++ b/modules/bat_event_series/src/Controller/EventSeriesController.php
@@ -7,6 +7,7 @@
 
 namespace Drupal\bat_event_series\Controller;
 
+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\bat_event\EventInterface;
@@ -29,7 +30,7 @@ class EventSeriesController extends ControllerBase implements ContainerInjection
    *
    * Redirects to admin/bat/events/event_series/add[type] if only one event series type is available.
    *
-   * @return array|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return array|RedirectResponse
    *   A render array for a list of the event series types that can be added; however,
    *   if there is only one event series type defined for the site, the function
    *   will return a RedirectResponse to the event add page for that one event
@@ -67,7 +68,7 @@ class EventSeriesController extends ControllerBase implements ContainerInjection
   /**
    * Provides the event submission form.
    *
-   * @param \Drupal\bat_event_series\EventSeriesTypeInterface $event_series_type
+   * @param EventSeriesTypeInterface $event_series_type
    *   The event series type entity for the event.
    *
    * @return array
@@ -86,7 +87,7 @@ class EventSeriesController extends ControllerBase implements ContainerInjection
   /**
    * The _title_callback for the event.add route.
    *
-   * @param \Drupal\bat_event_series\EventSeriesTypeInterface $event_series_type
+   * @param EventSeriesTypeInterface $event_series_type
    *   The current event series type.
    *
    * @return string
diff --git a/modules/bat_event_series/src/Entity/Form/EventSeriesDeleteEventsForm.php b/modules/bat_event_series/src/Entity/Form/EventSeriesDeleteEventsForm.php
index 1581f10..a55fe9a 100644
--- a/modules/bat_event_series/src/Entity/Form/EventSeriesDeleteEventsForm.php
+++ b/modules/bat_event_series/src/Entity/Form/EventSeriesDeleteEventsForm.php
@@ -25,11 +25,11 @@ class EventSeriesDeleteEventsForm extends ContentEntityConfirmFormBase {
   /**
    * Constructs a EventSeriesDeleteEventsForm object.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, TimeInterface $time = NULL) {
diff --git a/modules/bat_event_series/src/Entity/Form/EventSeriesDeleteForm.php b/modules/bat_event_series/src/Entity/Form/EventSeriesDeleteForm.php
index 1079643..93b71d0 100644
--- a/modules/bat_event_series/src/Entity/Form/EventSeriesDeleteForm.php
+++ b/modules/bat_event_series/src/Entity/Form/EventSeriesDeleteForm.php
@@ -25,11 +25,11 @@ class EventSeriesDeleteForm extends ContentEntityConfirmFormBase {
   /**
    * Constructs a EventSeriesDeleteForm object.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, TimeInterface $time = NULL) {
diff --git a/modules/bat_event_series/src/Entity/Form/EventSeriesForm.php b/modules/bat_event_series/src/Entity/Form/EventSeriesForm.php
index 31da400..8d460f4 100644
--- a/modules/bat_event_series/src/Entity/Form/EventSeriesForm.php
+++ b/modules/bat_event_series/src/Entity/Form/EventSeriesForm.php
@@ -38,21 +38,21 @@ class EventSeriesForm extends ContentEntityForm {
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilder
+   * @var FormBuilder
    */
   protected $formBuilder;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * Constructs a new EventSeriesForm object.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
    */
   public function __construct(PrivateTempStoreFactory $temp_store_factory, EntityRepositoryInterface $entity_repository, DateFormatterInterface $date_formatter, FormBuilder $formBuilder, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, TimeInterface $time = NULL) {
diff --git a/modules/bat_event_series/src/Entity/Form/EventSeriesUpdateConfirmForm.php b/modules/bat_event_series/src/Entity/Form/EventSeriesUpdateConfirmForm.php
index efff84b..3c72a3d 100644
--- a/modules/bat_event_series/src/Entity/Form/EventSeriesUpdateConfirmForm.php
+++ b/modules/bat_event_series/src/Entity/Form/EventSeriesUpdateConfirmForm.php
@@ -7,6 +7,7 @@
 
 namespace Drupal\bat_event_series\Entity\Form;
 
+use Drupal\bat_event_series\Entity\EventSeries;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\TempStore\PrivateTempStoreFactory;
@@ -19,21 +20,21 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class EventSeriesUpdateConfirmForm extends ConfirmFormBase {
 
   /**
-   * @var \Drupal\bat_event_series\Entity\EventSeries
+   * @var EventSeries
    */
   protected $bat_event_series;
 
   /**
    * The tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;
 
   /**
    * Constructs a DeleteMultiple form object.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
    */
   public function __construct(PrivateTempStoreFactory $temp_store_factory) {
diff --git a/modules/bat_event_series/src/EventSeriesListBuilder.php b/modules/bat_event_series/src/EventSeriesListBuilder.php
index 179bd16..335ceea 100644
--- a/modules/bat_event_series/src/EventSeriesListBuilder.php
+++ b/modules/bat_event_series/src/EventSeriesListBuilder.php
@@ -23,9 +23,9 @@ class EventSeriesListBuilder extends EntityListBuilder {
   /**
    * Constructs a new EventSeriesListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage) {
diff --git a/modules/bat_event_series/src/EventSeriesPermissions.php b/modules/bat_event_series/src/EventSeriesPermissions.php
index 027709e..e1da2d4 100644
--- a/modules/bat_event_series/src/EventSeriesPermissions.php
+++ b/modules/bat_event_series/src/EventSeriesPermissions.php
@@ -22,14 +22,14 @@ class EventSeriesPermissions implements ContainerInjectionInterface {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new FilterPermissions instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager) {
diff --git a/modules/bat_event_series/src/EventSeriesTypeForm.php b/modules/bat_event_series/src/EventSeriesTypeForm.php
index 64cfa19..e15d8c9 100644
--- a/modules/bat_event_series/src/EventSeriesTypeForm.php
+++ b/modules/bat_event_series/src/EventSeriesTypeForm.php
@@ -22,14 +22,14 @@ class EventSeriesTypeForm extends BundleEntityFormBase {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs the EventSeriesTypeForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager) {
diff --git a/modules/bat_event_series/src/Form/EditRepeatingRuleConfirmationModalForm.php b/modules/bat_event_series/src/Form/EditRepeatingRuleConfirmationModalForm.php
index 1112672..bf6d336 100644
--- a/modules/bat_event_series/src/Form/EditRepeatingRuleConfirmationModalForm.php
+++ b/modules/bat_event_series/src/Form/EditRepeatingRuleConfirmationModalForm.php
@@ -32,7 +32,7 @@ class EditRepeatingRuleConfirmationModalForm extends FormBase {
   /**
    * Event series object.
    *
-   * @var \Drupal\bat_event_series\Entity\EventSeries
+   * @var EventSeries
    */
   protected $event_series;
 
@@ -46,16 +46,16 @@ class EditRepeatingRuleConfirmationModalForm extends FormBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new EditRepeatingRuleModalForm object.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(PrivateTempStoreFactory $temp_store_factory, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/modules/bat_event_series/src/Form/EditRepeatingRuleModalForm.php b/modules/bat_event_series/src/Form/EditRepeatingRuleModalForm.php
index 4f73709..e6ca586 100644
--- a/modules/bat_event_series/src/Form/EditRepeatingRuleModalForm.php
+++ b/modules/bat_event_series/src/Form/EditRepeatingRuleModalForm.php
@@ -30,7 +30,7 @@ class EditRepeatingRuleModalForm extends FormBase {
   /**
    * Event series object.
    *
-   * @var \Drupal\bat_event_series\Entity\EventSeries
+   * @var EventSeries
    */
   protected $event_series;
 
@@ -44,7 +44,7 @@ class EditRepeatingRuleModalForm extends FormBase {
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilder
+   * @var FormBuilder
    */
   protected $formBuilder;
 
@@ -58,7 +58,7 @@ class EditRepeatingRuleModalForm extends FormBase {
   /**
    * Constructs a new EditRepeatingRuleModalForm object.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
    */
   public function __construct(PrivateTempStoreFactory $temp_store_factory, FormBuilder $formBuilder) {
diff --git a/modules/bat_event_ui/src/Controller/BatEventUIController.php b/modules/bat_event_ui/src/Controller/BatEventUIController.php
index 18da9eb..d7b5494 100644
--- a/modules/bat_event_ui/src/Controller/BatEventUIController.php
+++ b/modules/bat_event_ui/src/Controller/BatEventUIController.php
@@ -87,7 +87,7 @@ class BatEventUIController extends ControllerBase {
     }
 
     $page['calendar_page'] = [
-      '#markup' => render($render_array),
+      '#markup' => \Drupal::service('renderer')->render($render_array),
     ];
 
     return $page;
diff --git a/modules/bat_facets/src/Form/FacetsAvailabilityForm.php b/modules/bat_facets/src/Form/FacetsAvailabilityForm.php
index 6219b22..a7b9f93 100644
--- a/modules/bat_facets/src/Form/FacetsAvailabilityForm.php
+++ b/modules/bat_facets/src/Form/FacetsAvailabilityForm.php
@@ -22,14 +22,14 @@ class FacetsAvailabilityForm extends FormBase {
   /**
    * The current Request object.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * Constructs a FacetsAvailabilityForm object.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    */
   public function __construct(Request $request) {
diff --git a/modules/bat_fullcalendar/bat_fullcalendar.module b/modules/bat_fullcalendar/bat_fullcalendar.module
index 52702e3..95d6c36 100644
--- a/modules/bat_fullcalendar/bat_fullcalendar.module
+++ b/modules/bat_fullcalendar/bat_fullcalendar.module
@@ -281,7 +281,7 @@ function bat_fullcalendar_modal_style($style = 'default') {
     'width' => 520,
     'height' => 520,
     'title' => t('Loading...'),
-    'loading' => '<img class="loading" src="' . $base_path . drupal_get_path('module', 'bat_fullcalendar') . '/images/throbber.gif">',
+    'loading' => '<img class="loading" src="' . $base_path . \Drupal::service('extension.list.module')->getPath('bat_fullcalendar') . '/images/throbber.gif">',
   ];
 
   // Allow other modules to change the modal style.
diff --git a/modules/bat_fullcalendar/src/Access/EventManagementAccessCheck.php b/modules/bat_fullcalendar/src/Access/EventManagementAccessCheck.php
index a0e2b74..fb1ee0c 100644
--- a/modules/bat_fullcalendar/src/Access/EventManagementAccessCheck.php
+++ b/modules/bat_fullcalendar/src/Access/EventManagementAccessCheck.php
@@ -7,6 +7,7 @@
 
 namespace Drupal\bat_fullcalendar\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -19,14 +20,14 @@ class EventManagementAccessCheck implements AccessInterface {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a EntityCreateAccessCheck object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager) {
@@ -36,10 +37,10 @@ class EventManagementAccessCheck implements AccessInterface {
   /**
    * Checks access to the event add page for the event type.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $account, $entity_id, $event_type, $event_id, $start_date, $end_date) {
diff --git a/modules/bat_fullcalendar/src/Form/FullcalendarEventManagerForm.php b/modules/bat_fullcalendar/src/Form/FullcalendarEventManagerForm.php
index deb2ece..dedaf7b 100644
--- a/modules/bat_fullcalendar/src/Form/FullcalendarEventManagerForm.php
+++ b/modules/bat_fullcalendar/src/Form/FullcalendarEventManagerForm.php
@@ -25,32 +25,32 @@ class FullcalendarEventManagerForm extends FormBase {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * Constructs a new FullcalendarEventManagerForm.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager, EntityFieldManagerInterface $entity_field_manager, RendererInterface $renderer) {
diff --git a/modules/bat_fullcalendar/src/FullCalendarFixedStateEventFormatter.php b/modules/bat_fullcalendar/src/FullCalendarFixedStateEventFormatter.php
index 7bc25a2..5aa6531 100644
--- a/modules/bat_fullcalendar/src/FullCalendarFixedStateEventFormatter.php
+++ b/modules/bat_fullcalendar/src/FullCalendarFixedStateEventFormatter.php
@@ -22,7 +22,7 @@ class FullCalendarFixedStateEventFormatter extends AbstractEventFormatter {
   /**
    * The event type.
    *
-   * @var \Drupal\bat_event\EventTypeInterface
+   * @var EventTypeInterface
    */
   protected $eventType;
 
@@ -36,21 +36,21 @@ class FullCalendarFixedStateEventFormatter extends AbstractEventFormatter {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   Current user.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(AccountInterface $current_user, ModuleHandlerInterface $module_handler) {
@@ -60,7 +60,7 @@ class FullCalendarFixedStateEventFormatter extends AbstractEventFormatter {
   }
 
   /**
-   * @param \Drupal\bat_event\EventTypeInterface $event_type
+   * @param EventTypeInterface $event_type
    *   The event type.
    */
   public function setEventType(EventTypeInterface $event_type) {
diff --git a/modules/bat_fullcalendar/src/FullCalendarOpenStateEventFormatter.php b/modules/bat_fullcalendar/src/FullCalendarOpenStateEventFormatter.php
index 4103c9b..3bd8aea 100644
--- a/modules/bat_fullcalendar/src/FullCalendarOpenStateEventFormatter.php
+++ b/modules/bat_fullcalendar/src/FullCalendarOpenStateEventFormatter.php
@@ -24,7 +24,7 @@ class FullCalendarOpenStateEventFormatter extends AbstractEventFormatter {
   /**
    * The event type.
    *
-   * @var \Drupal\bat_event\EventTypeInterface
+   * @var EventTypeInterface
    */
   protected $eventType;
 
@@ -38,39 +38,39 @@ class FullCalendarOpenStateEventFormatter extends AbstractEventFormatter {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   Current user.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager.
    */
   public function __construct(AccountInterface $current_user, ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler, EntityTypeManagerInterface $entity_manager) {
@@ -82,7 +82,7 @@ class FullCalendarOpenStateEventFormatter extends AbstractEventFormatter {
   }
 
   /**
-   * @param \Drupal\bat_event\EventTypeInterface $event_type
+   * @param EventTypeInterface $event_type
    *   The event type.
    */
   public function setEventType(EventTypeInterface $event_type) {
diff --git a/modules/bat_options/bat_options.module b/modules/bat_options/bat_options.module
index b344f92..baa6a81 100644
--- a/modules/bat_options/bat_options.module
+++ b/modules/bat_options/bat_options.module
@@ -39,7 +39,7 @@ function bat_options_price_options() {
 /**
  * Returns available options given a Bat type.
  *
- * @param \Drupal\bat_unit\Entity\UnitType $type
+ * @param UnitType $type
  *   The type from which to retrieve options.
  *
  * @return array
diff --git a/modules/bat_options/src/Plugin/Field/FieldWidget/BatOptionsCombined.php b/modules/bat_options/src/Plugin/Field/FieldWidget/BatOptionsCombined.php
index ddeb464..f08e263 100644
--- a/modules/bat_options/src/Plugin/Field/FieldWidget/BatOptionsCombined.php
+++ b/modules/bat_options/src/Plugin/Field/FieldWidget/BatOptionsCombined.php
@@ -33,7 +33,7 @@ class BatOptionsCombined extends WidgetBase implements ContainerFactoryPluginInt
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
@@ -44,13 +44,13 @@ class BatOptionsCombined extends WidgetBase implements ContainerFactoryPluginInt
    *   The plugin_id for the widget.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the widget is associated.
    * @param array $settings
    *   The widget settings.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, Token $token) {
diff --git a/modules/bat_unit/bat_unit.module b/modules/bat_unit/bat_unit.module
index fd31167..1c77e22 100644
--- a/modules/bat_unit/bat_unit.module
+++ b/modules/bat_unit/bat_unit.module
@@ -224,7 +224,7 @@ function bat_unit_bat_entity_access_view_condition_bat_unit_alter(&$conditions,
  * @param bool $reset
  *   A boolean indicating that the internal cache should be reset.
  *
- * @return \Drupal\bat_unit\Entity\UnitBundle[]
+ * @return UnitBundle[]
  *   Depending whether $bundle isset, an array of unit bundles or a single one.
  */
 function bat_unit_get_bundles($bundle_name = NULL, $reset = FALSE) {
@@ -278,7 +278,7 @@ function bat_unit_types_ids() {
  * @param bool $reset
  *   A boolean indicating whether the internal cache should be reset.
  *
- * @return \Drupal\bat_unit\Entity\UnitBundle|null
+ * @return UnitBundle|null
  *   A unit bundle array or FALSE if $bundle does not exist.
  */
 function bat_unit_bundle_load($bundle, $reset = FALSE) {
@@ -296,7 +296,7 @@ function bat_unit_bundle_load($bundle, $reset = FALSE) {
  *   Integer specifying the unit id.
  * @param bool $reset
  *   A boolean indicating whether the internal cache should be reset.
- * @return \Drupal\bat_unit\Entity\Unit|null
+ * @return Unit|null
  *   A fully-loaded $unit object or NULL if it cannot be loaded.
  *
  * @see bat_unit_load_multiple()
@@ -347,7 +347,7 @@ function bat_unit_load_multiple($unit_ids = [], $conditions = [], $reset = FALSE
 /**
  * Deletes a unit.
  *
- * @param \Drupal\bat_unit\Entity\Unit $unit
+ * @param Unit $unit
  *   The Unit object that represents the unit to delete.
  */
 function bat_unit_delete(Unit $unit) {
@@ -381,7 +381,7 @@ function bat_unit_create($values = []) {
 /**
  * Saves a unit to the database.
  *
- * @param \Drupal\bat_unit\Entity\Unit $unit
+ * @param Unit $unit
  *   The Unit object.
  */
 function bat_unit_save(Unit $unit) {
@@ -401,7 +401,7 @@ function bat_unit_bundle_create($values = []) {
 /**
  * Saves a unit bundle to the db.
  *
- * @param \Drupal\bat_unit\Entity\UnitBundle $bundle
+ * @param UnitBundle $bundle
  *   The unit bundle to save.
  */
 function bat_unit_bundle_save(UnitBundle $bundle) {
@@ -542,7 +542,7 @@ function bat_type_bat_entity_access_view_condition_bat_type_alter(&$conditions,
  * @param string $bundle_name
  *   If set, the bundle with the given name is returned.
  *
- * @return \Drupal\bat_unit\Entity\TypeBundle[]
+ * @return TypeBundle[]
  *   Depending whether $bundle isset, an array of type bundles or a single one.
  */
 function bat_unit_get_type_bundles($bundle_name = NULL) {
@@ -555,7 +555,7 @@ function bat_unit_get_type_bundles($bundle_name = NULL) {
  * @param string $bundle_name
  *   If set, the bundle with the given name is returned.
  *
- * @return \Drupal\bat_unit\Entity\UnitType[]
+ * @return UnitType[]
  *   Depending whether $bundle isset, an array of types or a single one.
  */
 function bat_unit_get_types($bundle_name = NULL) {
@@ -586,7 +586,7 @@ function bat_type_bundles_ids() {
  * @param bool $reset
  *   A boolean indicating whether the internal cache should be reset.
  *
- * @return \Drupal\bat_unit\Entity\TypeBundle
+ * @return TypeBundle
  *   A type bundle array or FALSE if $bundle does not exist.
  */
 function bat_type_bundle_load($bundle, $reset = FALSE) {
@@ -605,7 +605,7 @@ function bat_type_bundle_load($bundle, $reset = FALSE) {
  * @param bool $reset
  *   A boolean indicating whether the internal cache should be reset.
  *
- * @return \Drupal\bat_unit\Entity\UnitType|null
+ * @return UnitType|null
  *   A fully-loaded $type object or NULL if it cannot be loaded.
  *
  * @see bat_type_load_multiple()
@@ -656,7 +656,7 @@ function bat_type_load_multiple($type_ids = [], $conditions = [], $reset = FALSE
 /**
  * Deletes a Bat Type.
  *
- * @param \Drupal\bat_unit\Entity\UnitType $type
+ * @param UnitType $type
  *   The UnitType object that represents the type to delete.
  */
 function bat_type_delete(UnitType $type) {
@@ -690,7 +690,7 @@ function bat_type_create($values = []) {
 /**
  * Saves a Bat Type to the database.
  *
- * @param \Drupal\bat_unit\Entity\UnitType $type
+ * @param UnitType $type
  *   The type object.
  */
 function bat_type_save(UnitType $type) {
@@ -710,7 +710,7 @@ function bat_type_bundle_create($values = []) {
 /**
  * Saves a Bat Type bundle to the db.
  *
- * @param \Drupal\bat_unit\Entity\TypeBundle $bundle
+ * @param TypeBundle $bundle
  *   The type bundle to save.
  */
 function bat_type_bundle_save(TypeBundle $bundle) {
diff --git a/modules/bat_unit/src/Access/UnitAddAccessCheck.php b/modules/bat_unit/src/Access/UnitAddAccessCheck.php
index 541ee54..8e1ddda 100644
--- a/modules/bat_unit/src/Access/UnitAddAccessCheck.php
+++ b/modules/bat_unit/src/Access/UnitAddAccessCheck.php
@@ -7,6 +7,7 @@
 
 namespace Drupal\bat_unit\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
@@ -21,14 +22,14 @@ class UnitAddAccessCheck implements AccessInterface {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a EntityCreateAccessCheck object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager) {
@@ -38,13 +39,13 @@ class UnitAddAccessCheck implements AccessInterface {
   /**
    * Checks access to the unit add page for the unit type.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
-   * @param \Drupal\bat_unit\UnitBundleInterface $unit_bundle
+   * @param UnitBundleInterface $unit_bundle
    *   (optional) The unit bundle. If not specified, access is allowed if there
    *   exists at least one unit bundle for which the user may create a unit.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $account, UnitBundleInterface $unit_bundle = NULL) {
diff --git a/modules/bat_unit/src/Access/UnitTypeAddAccessCheck.php b/modules/bat_unit/src/Access/UnitTypeAddAccessCheck.php
index eec14f0..15848bf 100644
--- a/modules/bat_unit/src/Access/UnitTypeAddAccessCheck.php
+++ b/modules/bat_unit/src/Access/UnitTypeAddAccessCheck.php
@@ -7,6 +7,7 @@
 
 namespace Drupal\bat_unit\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
@@ -21,14 +22,14 @@ class UnitTypeAddAccessCheck implements AccessInterface {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a EntityCreateAccessCheck object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager) {
@@ -38,13 +39,13 @@ class UnitTypeAddAccessCheck implements AccessInterface {
   /**
    * Checks access to the unit type add page for the type bundle.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
-   * @param \Drupal\bat_unit\TypeBundleInterface $type_bundle
+   * @param TypeBundleInterface $type_bundle
    *   (optional) The type bundle. If not specified, access is allowed if there
    *   exists at least one type bundle for which the user may create a unit type.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $account, TypeBundleInterface $type_bundle = NULL) {
diff --git a/modules/bat_unit/src/Controller/TypeController.php b/modules/bat_unit/src/Controller/TypeController.php
index 2ea95cc..4fbcb7d 100644
--- a/modules/bat_unit/src/Controller/TypeController.php
+++ b/modules/bat_unit/src/Controller/TypeController.php
@@ -7,6 +7,7 @@
 
 namespace Drupal\bat_unit\Controller;
 
+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\bat_unit\TypeBundleInterface;
@@ -27,7 +28,7 @@ class TypeController extends ControllerBase implements ContainerInjectionInterfa
    *
    * Redirects to admin/bat/config/unit_type/add/[type] if only one unit type bundle is available.
    *
-   * @return array|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return array|RedirectResponse
    *   A render array for a list of the type bundles that can be added; however,
    *   if there is only one type bundle defined for the site, the function
    *   will return a RedirectResponse to the type add page for that one type bundle.
@@ -64,7 +65,7 @@ class TypeController extends ControllerBase implements ContainerInjectionInterfa
   /**
    * Provides the unit type submission form.
    *
-   * @param \Drupal\bat_unit\TypeBundleInterface $type_bundle
+   * @param TypeBundleInterface $type_bundle
    *   The type bundle entity for the unit type.
    *
    * @return array
@@ -83,7 +84,7 @@ class TypeController extends ControllerBase implements ContainerInjectionInterfa
   /**
    * The _title_callback for the type.add route.
    *
-   * @param \Drupal\bat_unit\TypeBundleInterface $type_bundle
+   * @param TypeBundleInterface $type_bundle
    *   The current type bundle.
    *
    * @return string
diff --git a/modules/bat_unit/src/Controller/UnitController.php b/modules/bat_unit/src/Controller/UnitController.php
index aabdfae..a6460ea 100644
--- a/modules/bat_unit/src/Controller/UnitController.php
+++ b/modules/bat_unit/src/Controller/UnitController.php
@@ -7,6 +7,7 @@
 
 namespace Drupal\bat_unit\Controller;
 
+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\bat_unit\UnitBundleInterface;
@@ -28,7 +29,7 @@ class UnitController extends ControllerBase implements ContainerInjectionInterfa
    *
    * Redirects to admin/bat/config/unit/add/[type] if only one unit bundle is available.
    *
-   * @return array|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return array|RedirectResponse
    *   A render array for a list of the unit bundles that can be added; however,
    *   if there is only one unit bundle defined for the site, the function
    *   will return a RedirectResponse to the unit add page for that one unit bundle.
@@ -65,7 +66,7 @@ class UnitController extends ControllerBase implements ContainerInjectionInterfa
   /**
    * Provides the unit submission form.
    *
-   * @param \Drupal\bat_unit\UnitBundleInterface $unit_bundle
+   * @param UnitBundleInterface $unit_bundle
    *   The unit bundle entity for the unit.
    *
    * @return array
@@ -84,7 +85,7 @@ class UnitController extends ControllerBase implements ContainerInjectionInterfa
   /**
    * The _title_callback for the unit.add route.
    *
-   * @param \Drupal\bat_unit\UnitBundleInterface $unit_bundle
+   * @param UnitBundleInterface $unit_bundle
    *   The current unit bundle.
    *
    * @return string
diff --git a/modules/bat_unit/src/Entity/Form/UnitForm.php b/modules/bat_unit/src/Entity/Form/UnitForm.php
index 674df74..5e8182d 100644
--- a/modules/bat_unit/src/Entity/Form/UnitForm.php
+++ b/modules/bat_unit/src/Entity/Form/UnitForm.php
@@ -26,20 +26,20 @@ class UnitForm extends ContentEntityForm {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * Constructs a UnitForm object.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, DateFormatterInterface $date_formatter, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, TimeInterface $time = NULL) {
@@ -209,11 +209,11 @@ class UnitForm extends ContentEntityForm {
    *
    * @param string $entity_type_id
    *   The entity type identifier.
-   * @param \Drupal\bat_unit\UnitInterface $unit
+   * @param UnitInterface $unit
    *   The unit updated with the submitted values.
    * @param array $form
    *   The complete form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function updateStatus($entity_type_id, UnitInterface $unit, array $form, FormStateInterface $form_state) {
diff --git a/modules/bat_unit/src/Entity/Form/UnitTypeForm.php b/modules/bat_unit/src/Entity/Form/UnitTypeForm.php
index 0658c56..11e5c05 100644
--- a/modules/bat_unit/src/Entity/Form/UnitTypeForm.php
+++ b/modules/bat_unit/src/Entity/Form/UnitTypeForm.php
@@ -26,20 +26,20 @@ class UnitTypeForm extends ContentEntityForm {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * Constructs a UnitTypeForm object.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, DateFormatterInterface $date_formatter, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, TimeInterface $time = NULL) {
@@ -209,11 +209,11 @@ class UnitTypeForm extends ContentEntityForm {
    *
    * @param string $entity_type_id
    *   The entity type identifier.
-   * @param \Drupal\bat_unit\UnitTypeInterface $unit_type
+   * @param UnitTypeInterface $unit_type
    *   The unit type updated with the submitted values.
    * @param array $form
    *   The complete form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function updateStatus($entity_type_id, UnitTypeInterface $unit_type, array $form, FormStateInterface $form_state) {
diff --git a/modules/bat_unit/src/EntityUnitInterface.php b/modules/bat_unit/src/EntityUnitInterface.php
index 4143ed7..7124519 100644
--- a/modules/bat_unit/src/EntityUnitInterface.php
+++ b/modules/bat_unit/src/EntityUnitInterface.php
@@ -15,7 +15,7 @@ interface EntityUnitInterface {
   /**
    * Returns the entity's Unit entity.
    *
-   * @return \Drupal\bat_unit\UnitInterface
+   * @return UnitInterface
    *   The Unit entity.
    */
   public function getUnit();
@@ -23,7 +23,7 @@ interface EntityUnitInterface {
   /**
    * Sets the entity's Unit entity.
    *
-   * @param \Drupal\bat_unit\UnitInterface $unit
+   * @param UnitInterface $unit
    *   The Unit entity.
    *
    * @return $this
diff --git a/modules/bat_unit/src/EntityUnitTypeInterface.php b/modules/bat_unit/src/EntityUnitTypeInterface.php
index 8d03f25..5186eb3 100644
--- a/modules/bat_unit/src/EntityUnitTypeInterface.php
+++ b/modules/bat_unit/src/EntityUnitTypeInterface.php
@@ -17,7 +17,7 @@ interface EntityUnitTypeInterface {
   /**
    * Returns the entity's UnitType entity.
    *
-   * @return \Drupal\bat_unit\UnitTypeInterface
+   * @return UnitTypeInterface
    *   The UnitType entity.
    */
   public function getUnitType();
@@ -25,7 +25,7 @@ interface EntityUnitTypeInterface {
   /**
    * Sets the entity's UnitType entity.
    *
-   * @param \Drupal\bat_unit\UnitTypeInterface $property
+   * @param UnitTypeInterface $property
    *   The UnitType entity.
    *
    * @return $this
diff --git a/modules/bat_unit/src/Form/UnitDeleteMultiple.php b/modules/bat_unit/src/Form/UnitDeleteMultiple.php
index 791dc17..8a4f9e1 100644
--- a/modules/bat_unit/src/Form/UnitDeleteMultiple.php
+++ b/modules/bat_unit/src/Form/UnitDeleteMultiple.php
@@ -28,14 +28,14 @@ class UnitDeleteMultiple extends ConfirmFormBase {
   /**
    * The tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;
 
   /**
    * Constructs a DeleteMultiple form object.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
    */
   public function __construct(PrivateTempStoreFactory $temp_store_factory) {
diff --git a/modules/bat_unit/src/Form/UnitSetStateAction.php b/modules/bat_unit/src/Form/UnitSetStateAction.php
index 4e668c8..70ca000 100644
--- a/modules/bat_unit/src/Form/UnitSetStateAction.php
+++ b/modules/bat_unit/src/Form/UnitSetStateAction.php
@@ -27,14 +27,14 @@ class UnitSetStateAction extends FormBase {
   /**
    * The tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;
 
   /**
    * Constructs a UnitSetStateAction form object.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
    */
   public function __construct(PrivateTempStoreFactory $temp_store_factory) {
diff --git a/modules/bat_unit/src/Plugin/Action/DeleteUnit.php b/modules/bat_unit/src/Plugin/Action/DeleteUnit.php
index 7088e74..0a37f43 100644
--- a/modules/bat_unit/src/Plugin/Action/DeleteUnit.php
+++ b/modules/bat_unit/src/Plugin/Action/DeleteUnit.php
@@ -35,7 +35,7 @@ class DeleteUnit extends ActionBase implements ContainerFactoryPluginInterface {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
@@ -48,9 +48,9 @@ class DeleteUnit extends ActionBase implements ContainerFactoryPluginInterface {
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   Current user.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, PrivateTempStoreFactory $temp_store_factory, AccountInterface $current_user) {
diff --git a/modules/bat_unit/src/Plugin/Action/SetUnitState.php b/modules/bat_unit/src/Plugin/Action/SetUnitState.php
index 8fcbb7d..2e7e35a 100644
--- a/modules/bat_unit/src/Plugin/Action/SetUnitState.php
+++ b/modules/bat_unit/src/Plugin/Action/SetUnitState.php
@@ -35,7 +35,7 @@ class SetUnitState extends ActionBase implements ContainerFactoryPluginInterface
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
@@ -48,9 +48,9 @@ class SetUnitState extends ActionBase implements ContainerFactoryPluginInterface
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   Current user.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, PrivateTempStoreFactory $temp_store_factory, AccountInterface $current_user) {
diff --git a/modules/bat_unit/src/Plugin/views/field/BatTypeHandlerTypeCalendarsField.php b/modules/bat_unit/src/Plugin/views/field/BatTypeHandlerTypeCalendarsField.php
index 3222502..118c814 100644
--- a/modules/bat_unit/src/Plugin/views/field/BatTypeHandlerTypeCalendarsField.php
+++ b/modules/bat_unit/src/Plugin/views/field/BatTypeHandlerTypeCalendarsField.php
@@ -22,7 +22,7 @@ class BatTypeHandlerTypeCalendarsField extends FieldPluginBase {
   /**
    * The path validator.
    *
-   * @var \Drupal\Core\Path\PathValidatorInterface
+   * @var PathValidatorInterface
    */
   protected $pathValidator;
 
@@ -35,7 +35,7 @@ class BatTypeHandlerTypeCalendarsField extends FieldPluginBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Path\PathValidatorInterface $path_validator
+   * @param PathValidatorInterface $path_validator
    *   The path validator.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, PathValidatorInterface $path_validator) {
diff --git a/modules/bat_unit/src/TypeBundleForm.php b/modules/bat_unit/src/TypeBundleForm.php
index 1c2915f..1ce3385 100644
--- a/modules/bat_unit/src/TypeBundleForm.php
+++ b/modules/bat_unit/src/TypeBundleForm.php
@@ -21,14 +21,14 @@ class TypeBundleForm extends BundleEntityFormBase {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs the EventTypeForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager) {
diff --git a/modules/bat_unit/src/UnitBundleForm.php b/modules/bat_unit/src/UnitBundleForm.php
index 86398c1..8a0acd9 100644
--- a/modules/bat_unit/src/UnitBundleForm.php
+++ b/modules/bat_unit/src/UnitBundleForm.php
@@ -21,14 +21,14 @@ class UnitBundleForm extends BundleEntityFormBase {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs the EventTypeForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager) {
diff --git a/modules/bat_unit/src/UnitListBuilder.php b/modules/bat_unit/src/UnitListBuilder.php
index 2414db4..733d27a 100644
--- a/modules/bat_unit/src/UnitListBuilder.php
+++ b/modules/bat_unit/src/UnitListBuilder.php
@@ -25,9 +25,9 @@ class UnitListBuilder extends EntityListBuilder {
   /**
    * Constructs a new UnitListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage) {
diff --git a/modules/bat_unit/src/UnitPermissions.php b/modules/bat_unit/src/UnitPermissions.php
index 082c487..dc465e5 100644
--- a/modules/bat_unit/src/UnitPermissions.php
+++ b/modules/bat_unit/src/UnitPermissions.php
@@ -22,14 +22,14 @@ class UnitPermissions implements ContainerInjectionInterface {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new FilterPermissions instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager) {
diff --git a/modules/bat_unit/src/UnitTypeListBuilder.php b/modules/bat_unit/src/UnitTypeListBuilder.php
index 179ae66..52f6f5b 100644
--- a/modules/bat_unit/src/UnitTypeListBuilder.php
+++ b/modules/bat_unit/src/UnitTypeListBuilder.php
@@ -25,9 +25,9 @@ class UnitTypeListBuilder extends EntityListBuilder {
   /**
    * Constructs a new UnitTypeListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage) {
diff --git a/src/Access/TypeGroupAddAccessCheck.php b/src/Access/TypeGroupAddAccessCheck.php
index 516938e..1938657 100644
--- a/src/Access/TypeGroupAddAccessCheck.php
+++ b/src/Access/TypeGroupAddAccessCheck.php
@@ -7,6 +7,7 @@
 
 namespace Drupal\bat\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
@@ -21,14 +22,14 @@ class TypeGroupAddAccessCheck implements AccessInterface {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a EntityCreateAccessCheck object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager) {
@@ -38,13 +39,13 @@ class TypeGroupAddAccessCheck implements AccessInterface {
   /**
    * Checks access to the type group add page for the type group bundle.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
-   * @param \Drupal\bat\TypeGroupBundleInterface $type_group_bundle
+   * @param TypeGroupBundleInterface $type_group_bundle
    *   (optional) The type group bundle. If not specified, access is allowed if there
    *   exists at least one type group bundle for which the user may create a type group.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $account, TypeGroupBundleInterface $type_group_bundle = NULL) {
diff --git a/src/Controller/TypeGroupController.php b/src/Controller/TypeGroupController.php
index 86bf113..4870f83 100644
--- a/src/Controller/TypeGroupController.php
+++ b/src/Controller/TypeGroupController.php
@@ -7,6 +7,7 @@
 
 namespace Drupal\bat\Controller;
 
+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\bat\TypeGroupBundleInterface;
@@ -27,7 +28,7 @@ class TypeGroupController extends ControllerBase implements ContainerInjectionIn
    *
    * Redirects to admin/bat/config/type-group/add/[type] if only one type group bundle is available.
    *
-   * @return array|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return array|RedirectResponse
    *   A render array for a list of the type group bundles that can be added; however,
    *   if there is only one type group bundle defined for the site, the function
    *   will return a RedirectResponse to the type group add page for that one
@@ -65,7 +66,7 @@ class TypeGroupController extends ControllerBase implements ContainerInjectionIn
   /**
    * Provides the type group submission form.
    *
-   * @param \Drupal\bat\TypeGroupBundleInterface $type_group_bundle
+   * @param TypeGroupBundleInterface $type_group_bundle
    *   The type group bundle entity for the type group.
    *
    * @return array
@@ -84,7 +85,7 @@ class TypeGroupController extends ControllerBase implements ContainerInjectionIn
   /**
    * The _title_callback for the type_group.add route.
    *
-   * @param \Drupal\bat\TypeGroupBundleInterface $type_group_bundle
+   * @param TypeGroupBundleInterface $type_group_bundle
    *   The current type group bundle.
    *
    * @return string
diff --git a/src/Entity/Form/TypeGroupForm.php b/src/Entity/Form/TypeGroupForm.php
index f8f2b44..b363f2a 100644
--- a/src/Entity/Form/TypeGroupForm.php
+++ b/src/Entity/Form/TypeGroupForm.php
@@ -27,20 +27,20 @@ class TypeGroupForm extends ContentEntityForm {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * Constructs a TypeGroupForm object.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, DateFormatterInterface $date_formatter, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, TimeInterface $time = NULL) {
@@ -212,11 +212,11 @@ class TypeGroupForm extends ContentEntityForm {
    *
    * @param string $entity_type_id
    *   The entity type identifier.
-   * @param \Drupal\bat\TypeGroupInterface $type_group
+   * @param TypeGroupInterface $type_group
    *   The type group updated with the submitted values.
    * @param array $form
    *   The complete form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function updateStatus($entity_type_id, TypeGroupInterface $type_group, array $form, FormStateInterface $form_state) {
diff --git a/src/TypeGroupBundleForm.php b/src/TypeGroupBundleForm.php
index 4c8a720..5e551a1 100644
--- a/src/TypeGroupBundleForm.php
+++ b/src/TypeGroupBundleForm.php
@@ -21,14 +21,14 @@ class TypeGroupBundleForm extends BundleEntityFormBase {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs the EventTypeForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager) {
diff --git a/src/TypeGroupListBuilder.php b/src/TypeGroupListBuilder.php
index bda71b6..f01ec91 100644
--- a/src/TypeGroupListBuilder.php
+++ b/src/TypeGroupListBuilder.php
@@ -25,9 +25,9 @@ class TypeGroupListBuilder extends EntityListBuilder {
   /**
    * Constructs a new UnitListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage) {
diff --git a/src/TypeGroupPermissions.php b/src/TypeGroupPermissions.php
index 33a8e48..e68dbe8 100644
--- a/src/TypeGroupPermissions.php
+++ b/src/TypeGroupPermissions.php
@@ -22,14 +22,14 @@ class TypeGroupPermissions implements ContainerInjectionInterface {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new TypeGroupPermissions instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager) {
