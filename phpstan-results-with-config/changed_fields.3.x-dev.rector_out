modules/contrib/changed_fields/examples/changed_fields_basic_usage/changed_fields_basic_usage.module
modules/contrib/changed_fields/examples/changed_fields_basic_usage/src/BasicUsageObserver.php
modules/contrib/changed_fields/examples/changed_fields_extended_field_comparator/changed_fields_extended_field_comparator.module
modules/contrib/changed_fields/examples/changed_fields_extended_field_comparator/src/ExtendedFieldComparatorObserver.php
modules/contrib/changed_fields/examples/changed_fields_extended_field_comparator/src/Plugin/FieldComparator/ExtendedFieldComparator.php
modules/contrib/changed_fields/src/EntitySubject.php
modules/contrib/changed_fields/src/FieldComparatorPluginManager.php
modules/contrib/changed_fields/src/ObserverInterface.php
modules/contrib/changed_fields/src/Plugin/FieldComparator/DefaultFieldComparator.php
modules/contrib/changed_fields/tests/src/Unit/DefaultFieldComparatorTest.php
modules/contrib/changed_fields/tests/src/Unit/EntitySubjectTest.php

5 files with changes
====================

1) modules/contrib/changed_fields/tests/src/Unit/EntitySubjectTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\changed_fields\Unit;

+use Drupal\changed_fields\EntitySubject;
 use Drupal\Tests\UnitTestCase;

 /**
@@ @@
   /**
    * Content entity's subject.
    *
-   * @var Drupal\changed_fields\EntitySubject
+   * @var EntitySubject
    */
   private $entitySubject;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     $this->entitySubject = $this->getMockBuilder('\Drupal\changed_fields\EntitySubject')
       ->setMethods(NULL)
       ->disableOriginalConstructor()
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/changed_fields/tests/src/Unit/DefaultFieldComparatorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\changed_fields\Unit;

+use Drupal\field\Entity\FieldConfig;
 use Drupal\changed_fields\Plugin\FieldComparator\DefaultFieldComparator;
 use Drupal\Tests\UnitTestCase;

@@ @@
   /**
    * Field comparator plugin instance.
    *
-   * @var Drupal\changed_fields\Plugin\FieldComparator\DefaultFieldComparator
+   * @var DefaultFieldComparator
    */
   private $fieldComparator;

@@ @@
   /**
    * Mocked instance of field config.
    *
-   * @var Drupal\field\Entity\FieldConfig
+   * @var FieldConfig
    */
   private $fieldDefinitionMock;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     $this->fieldComparator = new DefaultFieldComparator([], '', []);
     $this->fieldDefinitionMock = $this->getMockBuilder('Drupal\field\Entity\FieldConfig')
       ->disableOriginalConstructor()
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/changed_fields/src/Plugin/FieldComparator/DefaultFieldComparator.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Method that returns comparable properties for existing field type.
    *
-   * @param Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   Field definition instance.
    *
    * @return array
@@ @@
    * Use it if you want to add comparison support
    * for extra or custom field types.
    *
-   * @param Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   Field definition instance.
    *
    * @return array
@@ @@
    *
    * Use it if you want to extend comparable properties for a given field type.
    *
-   * @param Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   Array contains field instance and field base information.
    * @param array $properties
    *   Array with properties that we need to use to compare two field values.
@@ @@
   /**
    * Method that compares old and new field values.
    *
-   * @param Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   Field definition instance.
    * @param array $old_value
    *   Old fields value.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/changed_fields/src/FieldComparatorPluginManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Module handler instance to use.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/changed_fields/src/EntitySubject.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\changed_fields;

+use Drupal\changed_fields\Plugin\FieldComparator\DefaultFieldComparator;
 use Drupal\Core\Entity\ContentEntityInterface;

 /**
@@ @@
   /**
    * Content entity to look at.
    *
-   * @var Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $entity;

@@ @@
   /**
    * Instance of field comparator plugin.
    *
-   * @var Drupal\changed_fields\Plugin\FieldComparator\DefaultFieldComparator
+   * @var DefaultFieldComparator
    */
   protected $fieldComparatorPlugin;

@@ @@
   /**
    * Constructs content entity subject.
    *
-   * @param Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Content entity to look at.
    * @param string $field_comparator_plugin_id
    *   Field comparator plugin id.
@@ @@
   /**
    * Returns entity object.
    *
-   * @return Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   Content entity to look at.
    */
   public function getEntity() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 5 files have been changed by Rector                                       

