modules/contrib/media_directories/media_directories.install
modules/contrib/media_directories/media_directories.module
modules/contrib/media_directories/media_directories.views.inc
modules/contrib/media_directories/modules/media_directories_editor/media_directories_editor.install
modules/contrib/media_directories/modules/media_directories_editor/media_directories_editor.module
modules/contrib/media_directories/modules/media_directories_editor/src/Plugin/Field/FieldFormatter/MediaDirectoriesImageDimensionsFormatter.php
modules/contrib/media_directories/modules/media_directories_ui/media_directories_ui.install
modules/contrib/media_directories/modules/media_directories_ui/media_directories_ui.module
modules/contrib/media_directories/modules/media_directories_ui/src/Ajax/LoadDirectoryContent.php
modules/contrib/media_directories/modules/media_directories_ui/src/Ajax/RefreshDirectoryTree.php
modules/contrib/media_directories/modules/media_directories_ui/src/Controller/MediaDirectoriesController.php
modules/contrib/media_directories/modules/media_directories_ui/src/Form/AddMediaFormBase.php
modules/contrib/media_directories/modules/media_directories_ui/src/Form/DirectoryDeleteForm.php
modules/contrib/media_directories/modules/media_directories_ui/src/Form/FileUploadForm.php
modules/contrib/media_directories/modules/media_directories_ui/src/Form/MediaCombinedUploadForm.php
modules/contrib/media_directories/modules/media_directories_ui/src/Form/MediaDeleteForm.php
modules/contrib/media_directories/modules/media_directories_ui/src/Form/MediaEditForm.php
modules/contrib/media_directories/modules/media_directories_ui/src/Form/OEmbedForm.php
modules/contrib/media_directories/modules/media_directories_ui/src/MediaDirectoriesUiHelper.php
modules/contrib/media_directories/modules/media_directories_ui/src/Plugin/EntityBrowser/Widget/DirectoryBrowser.php
modules/contrib/media_directories/modules/media_directories_ui/src/Plugin/EntityBrowser/WidgetValidation/TargetBundles.php
modules/contrib/media_directories/modules/media_directories_ui/src/Plugin/views/argument/StringContainsArgument.php
modules/contrib/media_directories/src/Form/MediaDirectoriesConfigForm.php
modules/contrib/media_directories/src/Plugin/EntityReferenceSelection/DirectorySelection.php
modules/contrib/media_directories/src/Plugin/views/argument/MediaDirectoryArgument.php
modules/contrib/media_directories/src/Plugin/views/filter/MediaDirectory.php

19 files with changes
=====================

1) modules/contrib/media_directories/src/Plugin/views/filter/MediaDirectory.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * The vocabulary storage.
    *
-   * @var \Drupal\taxonomy\VocabularyStorageInterface
+   * @var VocabularyStorageInterface
    */
   protected $vocabularyStorage;

@@ @@
   /**
    * The term storage.
    *
-   * @var \Drupal\taxonomy\TermStorageInterface
+   * @var TermStorageInterface
    */
   protected $termStorage;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\taxonomy\VocabularyStorageInterface $vocabulary_storage
+   * @param VocabularyStorageInterface $vocabulary_storage
    *   The vocabulary storage.
-   * @param \Drupal\taxonomy\TermStorageInterface $term_storage
+   * @param TermStorageInterface $term_storage
    *   The term storage.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory object.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, VocabularyStorageInterface $vocabulary_storage, TermStorageInterface $term_storage, ConfigFactoryInterface $configFactory, EntityRepositoryInterface $entity_repository) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/media_directories/src/Plugin/views/argument/MediaDirectoryArgument.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ConfigFactoryInterface $configFactory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/media_directories/src/Plugin/EntityReferenceSelection/DirectorySelection.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_directories\Plugin\EntityReferenceSelection;

+use Drupal\taxonomy\TermInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\taxonomy\Entity\Vocabulary;
 use Drupal\taxonomy\Plugin\EntityReferenceSelection\TermSelection;
@@ @@
     $unpublished_terms = [];
     foreach ($bundle_names as $bundle) {
       if ($vocabulary = Vocabulary::load($bundle)) {
-        /** @var \Drupal\taxonomy\TermInterface[] $terms */
+        /** @var TermInterface[] $terms */
         if ($terms = $this->entityTypeManager->getStorage('taxonomy_term')->loadTree($vocabulary->id(), 0, NULL, TRUE)) {
           foreach ($terms as $term) {
             if (!$has_admin_access && (!$term->isPublished() || in_array($term->parent->target_id, $unpublished_terms))) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/media_directories/src/Form/MediaDirectoriesConfigForm.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/media_directories/modules/media_directories_ui/src/Plugin/EntityBrowser/Widget/DirectoryBrowser.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_directories_ui\Plugin\EntityBrowser\Widget;

+use Drupal\media\Entity\MediaType;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The active route match object.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\entity_browser\WidgetValidationManager $validation_manager
+   * @param WidgetValidationManager $validation_manager
    *   The Widget Validation Manager service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The active route match object.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EventDispatcherInterface $event_dispatcher, EntityTypeManagerInterface $entity_type_manager, WidgetValidationManager $validation_manager, AccountInterface $current_user, RouteMatchInterface $route_match, ModuleHandlerInterface $module_handler, ConfigFactoryInterface $config_factory) {
@@ @@
       $enabled_bundles = $target_bundles['bundle'];
     }
     else {
-      /** @var \Drupal\media\Entity\MediaType[] $types */
+      /** @var MediaType[] $types */
       $types = $this->entityTypeManager->getStorage('media_type')->loadMultiple();

       foreach ($types as $type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/media_directories/modules/media_directories_ui/src/MediaDirectoriesUiHelper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_directories_ui;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\media\MediaTypeInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\media\Entity\MediaType;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\file\FileInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The media directories settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $settings;

@@ @@
   /**
    * Create an AdminToolbarToolsHelper object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory) {
@@ @@
   /**
    * Returns media type for specific file by mime type.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file of which the media type shall be guessed.
    *
-   * @return \Drupal\media\MediaTypeInterface|null
+   * @return MediaTypeInterface|null
    *   The media type if found, or NULL if not.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getMediaType(FileInterface $file = NULL) {
     if ($file === NULL) {
@@ @@
       return NULL;
     }

-    /** @var \Drupal\media\Entity\MediaType[] $types */
+    /** @var MediaType[] $types */
     $types = $this->entityTypeManager->getStorage('media_type')->loadMultiple();

     $extension = pathinfo($file->getFileUri(), PATHINFO_EXTENSION);
@@ @@
    * @return string
    *   Valid file extensions separated by comma.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getValidExtensions() {
     $valid_extensions = [];
     $combined_media_types = $this->settings->get('combined_upload_media_types');
-    /** @var \Drupal\media\Entity\MediaType[] $types */
+    /** @var MediaType[] $types */
     $types = $this->entityTypeManager->getStorage('media_type')->loadMultiple();

     foreach ($types as $type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/media_directories/modules/media_directories_ui/src/Form/OEmbedForm.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The oEmbed URL resolver service.
    *
-   * @var \Drupal\media\OEmbed\UrlResolverInterface
+   * @var UrlResolverInterface
    */
   protected $urlResolver;

@@ @@
   /**
    * The oEmbed resource fetcher service.
    *
-   * @var \Drupal\media\OEmbed\ResourceFetcherInterface
+   * @var ResourceFetcherInterface
    */
   protected $resourceFetcher;

@@ @@
   /**
    * Constructs a new OEmbedForm.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $theme_manager
+   * @param ThemeManagerInterface $theme_manager
    *   The theme manager.
-   * @param \Drupal\media\OEmbed\UrlResolverInterface $url_resolver
+   * @param UrlResolverInterface $url_resolver
    *   The oEmbed URL resolver service.
-   * @param \Drupal\media\OEmbed\ResourceFetcherInterface $resource_fetcher
+   * @param ResourceFetcherInterface $resource_fetcher
    *   The oEmbed resource fetcher service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, AccountProxyInterface $current_user, Token $token, ThemeManagerInterface $theme_manager, UrlResolverInterface $url_resolver, ResourceFetcherInterface $resource_fetcher) {
@@ @@
    *
    * @param array $form
    *   The complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    */
   public function validateUrl(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function addButtonSubmit(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/media_directories/modules/media_directories_ui/src/Form/MediaEditForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_directories_ui\Form;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\CloseModalDialogCommand;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
@@ @@
   /**
    * Temporary store of the media entity.
    *
-   * @var \Drupal\media\MediaInterface
+   * @var MediaInterface
    */
   public $media;

@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    *   The form structure.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
     $form = parent::buildForm($form, $form_state);
@@ @@
   /**
    * Builds the sub-form for setting required fields on a new media item.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   A new, unsaved media item.
    * @param array $form
    *   The complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    * @param int $delta
    *   The delta of the media item.
@@ @@
    * @return array
    *   The element containing the required fields sub-form.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityMalformedException
    */
   protected function buildEntityFormElement(MediaInterface $media, array $form, FormStateInterface $form_state, $delta) {
     // Set the media object to be used in overwritten methods.
@@ @@
   /**
    * Returns the name of the source field for a media type.
    *
-   * @param \Drupal\media\MediaTypeInterface $media_type
+   * @param MediaTypeInterface $media_type
    *   The media type to get the source field name for.
    *
    * @return string
@@ @@
    *
    * @param array $form
    *   The complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   An AJAX response.
    */
   public static function saveMedia(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/media_directories/modules/media_directories_ui/src/Form/MediaDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_directories_ui\Form;

+use Drupal\media\Entity\Media;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\CloseModalDialogCommand;
 use Drupal\Core\Form\ConfirmFormBase;
@@ @@
   /**
    * The medias to delete.
    *
-   * @var \Drupal\media\Entity\Media[]
+   * @var Media[]
    */
   protected $entities;

@@ @@
   /**
    * Close modal dialog.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   An AJAX response.
    */
   public function closeModalAjax() {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/media_directories/modules/media_directories_ui/src/Form/MediaCombinedUploadForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_directories_ui\Form;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\ReplaceCommand;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\media_directories_ui\MediaDirectoriesUiHelper
+   * @var MediaDirectoriesUiHelper
    */
   protected $mediaDirectoriesUiHelper;

@@ @@
   /**
    * AddMediaFormBase constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $theme_manager
+   * @param ThemeManagerInterface $theme_manager
    *   The theme manager.
-   * @param \Drupal\Core\Render\ElementInfoManagerInterface $element_info
+   * @param ElementInfoManagerInterface $element_info
    *   The element info service.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
-   * @param \Drupal\media_directories_ui\MediaDirectoriesUiHelper $media_directories_ui_helper
+   * @param MediaDirectoriesUiHelper $media_directories_ui_helper
    *   The media directories ui helper.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, AccountProxyInterface $current_user, Token $token, ThemeManagerInterface $theme_manager, ElementInfoManagerInterface $element_info, FileSystemInterface $file_system, MediaDirectoriesUiHelper $media_directories_ui_helper) {
@@ @@
    *   The values for source fields of the media items.
    * @param array $form
    *   The complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function processInputValues(array $source_field_values, array $form, FormStateInterface $form_state) {
     $media = [];
@@ @@
       $field_config = $this->entityTypeManager->getStorage('field_config')->load('media.' . $media_type->id() . '.' . $source_field_name);
       $destination = $this->getUploadLocation($field_config->getSettings());
       if ($this->fileSystem->prepareDirectory($destination, FileSystemInterface::CREATE_DIRECTORY)) {
-        $source_field_value = file_move($source_field_value, $destination);
+        $source_field_value = \Drupal::service('file.repository')->move($source_field_value, $destination);
       }

       $media[] = $this->createMediaFromValue($media_type, $media_storage, $source_field_name, $source_field_value, $form_state);
    ----------- end diff -----------

Applied rules:
 * FileMoveRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/media_directories/modules/media_directories_ui/src/Form/FileUploadForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_directories_ui\Form;

+use Drupal\media\MediaTypeInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\file\FileInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBuilderInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The element info discovery service.
    *
-   * @var \Drupal\Core\Render\ElementInfoManagerInterface
+   * @var ElementInfoManagerInterface
    */
   protected $elementInfo;

@@ @@
   /**
    * AddMediaFormBase constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $theme_manager
+   * @param ThemeManagerInterface $theme_manager
    *   The theme manager.
-   * @param \Drupal\Core\Render\ElementInfoManagerInterface $element_info
+   * @param ElementInfoManagerInterface $element_info
    *   The element info service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, AccountProxyInterface $current_user, Token $token, ThemeManagerInterface $theme_manager, ElementInfoManagerInterface $element_info) {
@@ @@
    *
    * @param array $element
    *   The upload element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
    *
    * @param array $element
    *   The upload element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
    */
   public function processUploadElement(array $element, FormStateInterface $form_state) {
     $element['upload_button']['#submit'] = ['::uploadButtonSubmit'];
-    /** @var \Drupal\media\MediaTypeInterface|string $media_type */
+    /** @var MediaTypeInterface|string $media_type */
     $media_type = $form_state->get('media_type');
     // Limit the validation errors to make sure
     // FormValidator::handleErrorsWithLimitedValidation doesn't remove the
@@ @@
    *
    * @param array $form
    *   The form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function uploadButtonSubmit(array $form, FormStateInterface $form_state) {
     $files = $this->entityTypeManager
@@ @@
   /**
    * Makes the file of a media permanent.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media entity.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function prepareMediaEntityForSave(MediaInterface $media) {
-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     $file = $media->get($this->getSourceFieldName($media->bundle->entity))->entity;
     $file->setPermanent();
     $file->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/media_directories/modules/media_directories_ui/src/Form/DirectoryDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_directories_ui\Form;

+use Drupal\taxonomy\Entity\Term;
+use Drupal\media\Entity\Media;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\CloseModalDialogCommand;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The direcory to delete.
    *
-   * @var \Drupal\taxonomy\Entity\Term
+   * @var Term
    */
   protected $directory;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * DirectoryDeleteForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
@@ @@

       // If directory has any media items, move them into root (remove value).
       if (!empty($media_ids)) {
-        /** @var \Drupal\media\Entity\Media[] $media_items */
+        /** @var Media[] $media_items */
         $media_items = $this->entityTypeManager->getStorage('media')->loadMultiple($media_ids);

         foreach ($media_items as $media_item) {
@@ @@
   /**
    * Close modal dialog.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   An AJAX response.
    */
   public function closeModalAjax() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/media_directories/modules/media_directories_ui/src/Form/AddMediaFormBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_directories_ui\Form;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\media\Entity\Media;
+use Drupal\media\Entity\MediaType;
 use Drupal\Component\Render\PlainTextOutput;
 use Drupal\Component\Utility\Environment;
 use Drupal\Core\Ajax\AjaxResponse;
@@ @@
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Current user service.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The token replacement instance.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;

@@ @@
   /**
    * The theme manager.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;

@@ @@
   /**
    * AddMediaFormBase constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $theme_manager
+   * @param ThemeManagerInterface $theme_manager
    *   The theme manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, AccountProxyInterface $current_user, Token $token, ThemeManagerInterface $theme_manager) {
@@ @@
   /**
    * Get the media type from the form state.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
-   * @return \Drupal\media\MediaTypeInterface
+   * @return MediaTypeInterface
    *   The media type.
    *
    * @throws \InvalidArgumentException
@@ @@
   /**
    * Gets the current active directory from the form state.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return int
@@ @@
   /**
    * Get the allowed target bundles from the form state.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
   /**
    * Get the current selection mode from the form state.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return string
@@ @@
   /**
    * Get the current cardinality from the form state.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return int
@@ @@
   /**
    * Returns the upload validators for a field.
    *
-   * @param \Drupal\media\MediaTypeInterface $media_type
+   * @param MediaTypeInterface $media_type
    *   The array of field settings.
    *
    * @return array
    *   The file fields upload validators argument.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getUploadValidators(MediaTypeInterface $media_type) {
     $upload_validators = $this->createFileItem($media_type)->getUploadValidators();
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
       'js-media-library-add-form',
     ];

-    /** @var \Drupal\media\Entity\Media[] $added_media */
+    /** @var Media[] $added_media */
     $added_media = $form_state->get('media');

     $form['active_directory'] = [
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
   /**
    * Builds the sub-form for setting required fields on a new media item.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   A new, unsaved media item.
    * @param array $form
    *   The complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    * @param int $delta
    *   The delta of the media item.
@@ @@
    * @return array
    *   The element containing the required fields sub-form.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function buildEntityFormElement(MediaInterface $media, array $form, FormStateInterface $form_state, $delta) {
     // We need to make sure each button has a unique name attribute. The default
@@ @@
     }
     $form_display->buildForm($media, $element['fields'], $form_state);

-    /** @var \Drupal\media\Entity\MediaType $type */
+    /** @var MediaType $type */
     $type = $this->entityTypeManager->getStorage('media_type')->load($media->bundle());
     $source_field_name = $this->getSourceFieldName($type);
     // Add a class and process function.
@@ @@
    *
    * @param array $element
    *   The entity form source field element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    * @param array $form
    *   The complete form.
@@ @@
   /**
    * Returns the name of the source field for a media type.
    *
-   * @param \Drupal\media\MediaTypeInterface $media_type
+   * @param MediaTypeInterface $media_type
    *   The media type to get the source field name for.
    *
    * @return string
@@ @@
   /**
    * Create a file field item.
    *
-   * @param \Drupal\media\MediaTypeInterface $media_type
+   * @param MediaTypeInterface $media_type
    *   The media type of the media item.
    *
-   * @return \Drupal\file\Plugin\Field\FieldType\FileItem
+   * @return FileItem
    *   A created file item.
    */
   protected function createFileItem(MediaTypeInterface $media_type) {
@@ @@
    *
    * @param array $form
    *   The complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   The complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|array
+   * @return AjaxResponse|array
    *   The form render array or an AJAX response object.
    */
   public function updateFormCallback(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function removeButtonSubmit(array $form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
-   * @return array|\Drupal\Core\Ajax\AjaxResponse
+   * @return array|AjaxResponse
    *   The form array if there are validation errors, or an AJAX response to add
    *   the created items to the current selection.
    */
@@ @@
    *   The values for source fields of the media items.
    * @param array $form
    *   The complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function processInputValues(array $source_field_values, array $form, FormStateInterface $form_state) {
     $media_type = $this->getMediaType($form_state);
@@ @@
   /**
    * Creates a new, unsaved media item from a source field value.
    *
-   * @param \Drupal\media\MediaTypeInterface $media_type
+   * @param MediaTypeInterface $media_type
    *   The media type of the media item.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $media_storage
+   * @param EntityStorageInterface $media_storage
    *   The media storage.
    * @param string $source_field_name
    *   The name of the media type's source field.
    * @param mixed $source_field_value
    *   The value for the source field of the media item.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
-   * @return \Drupal\media\MediaInterface
+   * @return MediaInterface
    *   An unsaved media entity.
    */
   protected function createMediaFromValue(MediaTypeInterface $media_type, EntityStorageInterface $media_storage, $source_field_name, $source_field_value, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/media_directories/modules/media_directories_ui/src/Controller/MediaDirectoriesController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_directories_ui\Controller;

+use Drupal\taxonomy\TermStorage;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\TypedData\Exception\ReadOnlyException;
+use Drupal\Core\Form\EnforcedResponseException;
+use Drupal\Core\Form\FormAjaxException;
+use Drupal\media\Entity\Media;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\HtmlCommand;
 use Drupal\Core\Ajax\OpenModalDialogCommand;
@@ @@
   /**
    * The term storage.
    *
-   * @var \Drupal\taxonomy\TermStorage
+   * @var TermStorage
    */
   protected $termStorage;

@@ @@
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilder
+   * @var FormBuilder
    */
   protected $formBuilder;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * MediaDirectoriesController constructor.
    *
-   * @param \Drupal\Core\Form\FormBuilder $formBuilder
+   * @param FormBuilder $formBuilder
    *   The form builder.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(FormBuilder $formBuilder, RendererInterface $renderer, ModuleHandlerInterface $module_handler, LanguageManagerInterface $language_manager) {
@@ @@
   /**
    * Return directory tree as JSON.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function directoryTree() {
     $tree = [];
@@ @@
    *
    * Inserts directory content into browser.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   An AJAX response.
    */
   public function directoryContent(Request $request) {
@@ @@
   /**
    * Create new directory.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function directoryAdd(Request $request) {
     $directory_id = (int) $request->request->get('parent_id');
@@ @@
   /**
    * Rename directory.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   An AJAX response.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function directoryRename(Request $request) {
     $directory_id = (int) $request->request->get('directory_id');
@@ @@
   /**
    * Move directory to different directory.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   An AJAX response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Core\TypedData\Exception\ReadOnlyException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
+   * @throws ReadOnlyException
    */
   public function directoryMove(Request $request) {
     $response = new AjaxResponse();
@@ @@
       return $response;
     }

-    /** @var \Drupal\taxonomy\Entity\Term $directory */
+    /** @var Term $directory */
     $directory = $this->entityTypeManager()->getStorage('taxonomy_term')->load($move_directory_id);
     if ($directory->access('update')) {
       $directory->get('parent')->setValue($to_directory_id === MEDIA_DIRECTORY_ROOT ? NULL : $to_directory_id);
@@ @@
   /**
    * Delete directory.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   An AJAX response.
    */
   public function directoryDelete(Request $request) {
@@ @@
   /**
    * New media entity add form.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   An AJAX response.
    */
   public function mediaAdd(Request $request) {
@@ @@
   /**
    * Media entity edit form.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   An AJAX response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Form\EnforcedResponseException
-   * @throws \Drupal\Core\Form\FormAjaxException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EnforcedResponseException
+   * @throws FormAjaxException
    */
   public function mediaEdit(Request $request) {
     $response = new AjaxResponse();
@@ @@
   /**
    * Move media to directory.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   An AJAX response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function mediaMove(Request $request) {
     $response = new AjaxResponse();
@@ @@
     $media_items = $request->request->get('media_items', []);
     $directory_id = (int) $request->request->get('directory_id');

-    /** @var \Drupal\media\Entity\Media $media_entities */
+    /** @var Media $media_entities */
     $media_entities = $this->entityTypeManager()->getStorage('media')->loadMultiple($media_items);

     foreach ($media_entities as $media_entity) {
@@ @@
   /**
    * Media entity delete confirmation form.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   An AJAX response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function mediaDelete(Request $request) {
     $response = new AjaxResponse();
@@ @@
   /**
    * Adds a PrependCommad to an ajax response rendering the current status messages.
    *
-   * @param \Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    *   The response.
    * @param string $selector
    *   A jQuery selector.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/media_directories/modules/media_directories_ui/media_directories_ui.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\media\Entity\Media;
+use Drupal\media\Entity\MediaType;
+use Drupal\Core\Field\EntityReferenceFieldItemList;
+use Drupal\media\MediaTypeInterface;
+use Drupal\Core\Asset\LibraryDiscoveryInterface;
 /**
  * @file
  * Main module file.
@@ @@
   $route = 'entity_browser.media_directories_overview';

   if (Drupal::routeMatch()->getRouteName() === $route) {
-    unset($css[drupal_get_path('module', 'entity_browser') . '/css/entity_browser.entity_browser.css']);
+    unset($css[\Drupal::service('extension.list.module')->getPath('entity_browser') . '/css/entity_browser.entity_browser.css']);
   }
 }

@@ @@
  */
 function media_directories_ui_preprocess_views_view_unformatted__media_directories_base(&$variables) {
   foreach ($variables['rows'] as &$row) {
-    /** @var \Drupal\media\Entity\Media $entity */
+    /** @var Media $entity */
     $entity = $row['content']['#row']->_entity;
     $entity_id = $entity->id();
     $row['attributes']->setAttribute('data-mid', $entity_id);
@@ @@
  */
 function media_directories_ui_preprocess_views_view_fields__media_directories_base(&$variables) {
   foreach ($variables['fields'] as $name => &$field) {
-    /** @var \Drupal\media\Entity\Media $entity */
+    /** @var Media $entity */
     $entity = $variables['row']->_entity;

     if ($name === 'thumbnail__target_id') {
@@ @@
   $ui_config = \Drupal::config('media_directories_ui.settings');
   $combined_upload_enabled = $ui_config->get('enable_combined_upload');
   $combined_media_types = $ui_config->get('combined_upload_media_types');
-  /** @var \Drupal\media\Entity\MediaType[] $types */
+  /** @var MediaType[] $types */
   $types = \Drupal::entityTypeManager()->getStorage('media_type')->loadMultiple();

   $variables['links'] = [
@@ @@
  */
 function media_directories_ui_field_widget_entity_browser_entity_reference_form_alter(&$element, FormStateInterface $form_state, $context) {
   if (isset($element['entity_browser']) && $element['entity_browser']['#entity_browser'] === 'media_directories_modal') {
-    /** @var \Drupal\Core\Field\EntityReferenceFieldItemList $items */
+    /** @var EntityReferenceFieldItemList $items */
     $items = $context['items'];
     $handler_settings = $items->getSetting('handler_settings');
     $target_bundles = $handler_settings['target_bundles'];
@@ @@
 /**
  * Wrapper validator callback to do the actual file validations.
  *
- * @param \Drupal\file\FileInterface $file
+ * @param FileInterface $file
  *   A file entity.
  * @param array $validators_by_media_type
  *   All validators per media type.
@@ @@
   $errors = [];

   $ui_helper = \Drupal::service('media_directories_ui.helper');
-  /** @var \Drupal\media\Entity\MediaType $media_type */
+  /** @var MediaType $media_type */
   $media_type = $ui_helper->getMediaType($file);
   if ($media_type != NULL) {
     $errors = file_validate($file, $validators_by_media_type[$media_type->getEntityTypeId()]);
@@ @@
     ];
   }

-  /** @var  \Drupal\media\MediaTypeInterface[] $media_types */
+  /** @var MediaTypeInterface[] $media_types */
   $media_types = \Drupal::entityTypeManager()
     ->getStorage('media_type')
     ->loadMultiple();
@@ @@
  *
  * @param array $form
  *   The form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state.
  */
 function media_directories_ui_config_form_submit(array &$form, FormStateInterface $form_state) {
@@ @@
     return TRUE;
   }

-  /** @var \Drupal\Core\Asset\LibraryDiscoveryInterface $library_discovery */
+  /** @var LibraryDiscoveryInterface $library_discovery */
   $library_discovery = \Drupal::service('library.discovery');
   $library = $library_discovery->getLibraryByName('media_directories_ui', $library_name);
   if ($library && file_exists($library['js'][0]['data'])) {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


16) modules/contrib/media_directories/modules/media_directories_editor/src/Plugin/Field/FieldFormatter/MediaDirectoriesImageDimensionsFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_directories_editor\Plugin\Field\FieldFormatter;

+use Drupal\media\Entity\Media;
+use Drupal\file\Entity\File;
+use Drupal\Core\Url;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\image\ImageStyleStorageInterface $image_style_storage
+   * @param ImageStyleStorageInterface $image_style_storage
    *   The image style entity storage handler.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, AccountInterface $current_user, ImageStyleStorageInterface $image_style_storage, RendererInterface $renderer) {
@@ @@

     if ($this->viewMode === '_entity_embed') {
       $storage = $form_state->getStorage();
-      /** @var \Drupal\media\Entity\Media $entity */
+      /** @var Media $entity */
       $entity = $storage['entity'];
       $element['#attached']['library'][] = 'media_directories_editor/image-resize';
       $element['image_style']['#access'] = FALSE;
@@ @@
       return $elements;
     }

-    /** @var \Drupal\media\MediaInterface[] $media_items */
+    /** @var MediaInterface[] $media_items */
     foreach ($media_items as $delta => $media) {
-      /** @var \Drupal\file\Entity\File $file */
+      /** @var File $file */
       $file = $media->get('thumbnail')->entity;

       $elements[$delta] = [
@@ @@
           'height' => $this->getSetting('dimensions')['image_height'],
           'class' => [],
         ],
-        '#uri' => file_create_url($file->getFileUri()),
+        '#uri' => \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri()),
       ];

       // Add cacheability of each item in the field.
@@ @@
   /**
    * Get the URL for the media thumbnail.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media item.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity that the field belongs to.
    *
-   * @return \Drupal\Core\Url|null
+   * @return Url|null
    *   The URL object for the media item or null if we don't want to add
    *   a link.
    */
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/media_directories/modules/media_directories_editor/media_directories_editor.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\media\Entity\Media;
+use Drupal\embed\Entity\EmbedButton;
+use Drupal\file\Entity\File;
 /**
  * @file
  * Main module file.
@@ @@
  */
 function media_directories_editor_form_entity_embed_dialog_alter(&$form, FormStateInterface $form_state, $form_id) {
   $storage = $form_state->getStorage();
-  /** @var \Drupal\media\Entity\Media $entity */
+  /** @var Media $entity */
   $entity = $storage['entity'];
-  /** @var \Drupal\embed\Entity\EmbedButton $embed_button */
+  /** @var EmbedButton $embed_button */
   $embed_button = $storage['embed_button'];

   if ($entity !== NULL) {
-    /** @var \Drupal\file\Entity\File $file */
+    /** @var File $file */
     $file = $entity->get('thumbnail')->entity;
     $image_style = ImageStyle::load('thumbnail');
     if ($image_style !== NULL) {
       $image_style_url = $image_style->buildUri($file->getFileUri());
-      $url = file_create_url($image_style_url);
+      $url = \Drupal::service('file_url_generator')->generateAbsoluteString($image_style_url);
       $image_style->createDerivative($file->getFileUri(), $image_style_url);
       // TODO it should be converted to render array.
       $form['entity']['#markup'] = '<a href="' . $entity->toUrl()->toString() . '" title="' . $entity->label() . '"><img src="' . $url . '" alt="' . $entity->label() . '" /></a>';
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector


18) modules/contrib/media_directories/media_directories.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Field\EntityReferenceFieldItemList;
 /**
  * @file
  * Main module file.
@@ @@
  * Implements hook_field_widget_WIDGET_TYPE_form_alter().
  */
 function media_directories_field_widget_options_select_form_alter(&$element, FormStateInterface $form_state, $context) {
-  /** @var \Drupal\Core\Field\EntityReferenceFieldItemList $items */
+  /** @var EntityReferenceFieldItemList $items */
   $items = $context['items'];

   if ($items->getName() === 'directory') {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


19) modules/contrib/media_directories/media_directories.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityStorageException;
 /**
  * @file
  * Installation and update impementations.
@@ @@
 /**
  * Implements hook_install().
  *
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws EntityStorageException
  */
 function media_directories_install() {
   $filter = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 19 files have been changed by Rector                                      

