modules/contrib/helpdesk_zendesk/src/Plugin/HelpdeskIntegration/Zendesk.php
modules/contrib/helpdesk_zendesk/src/Service.php
modules/contrib/helpdesk_zendesk/tests/src/Unit/ServiceTest.php

3 files with changes
====================

1) modules/contrib/helpdesk_zendesk/tests/src/Unit/ServiceTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\helpdesk_zendesk;

+use Drupal\helpdesk_integration\HelpdeskPluginException;
+use Zendesk\API\Exceptions\AuthException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\helpdesk_integration\HelpdeskInterface;
 use Drupal\helpdesk_integration\Service as BaseService;
@@ @@
   /**
    * Test getting a http client for an administrator.
    *
-   * @throws \Drupal\helpdesk_integration\HelpdeskPluginException
-   * @throws \Zendesk\API\Exceptions\AuthException
+   * @throws HelpdeskPluginException
+   * @throws AuthException
    */
   public function testGetClientForAdmin(): void {
     $service = new Service($this->createMock(EntityTypeManagerInterface::class),
@@ @@
   /**
    * Test getting a http client for a customer.
    *
-   * @throws \Drupal\helpdesk_integration\HelpdeskPluginException
-   * @throws \Zendesk\API\Exceptions\AuthException
+   * @throws HelpdeskPluginException
+   * @throws AuthException
    */
   public function testGetClientForCustomer(): void {
     $service = new Service($this->createMock(EntityTypeManagerInterface::class),
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/helpdesk_zendesk/src/Service.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\helpdesk_zendesk;

+use Drupal\file\Plugin\Field\FieldType\FileItem;
+use Drupal\file\FileInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;

@@ @@
   /**
    * Service constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    * @param \Drupal\helpdesk_integration\Service $service
    *   The helpdesk integration services.
@@ @@
   /**
    * Gets the API Client.
    *
-   * @param \Drupal\helpdesk_integration\HelpdeskInterface $helpdesk
+   * @param HelpdeskInterface $helpdesk
    *   The Helpdesk.
    * @param string|null $email
    *   The email.
    *
-   * @return \Zendesk\API\HttpClient
+   * @return HttpClient
    *   The HTTP Client.
    *
-   * @throws \Drupal\helpdesk_integration\HelpdeskPluginException
+   * @throws HelpdeskPluginException
    */
   public function getClient(HelpdeskInterface $helpdesk, string $email = NULL): HttpClient {
     $userName = $email ?? $helpdesk->get('admin_user');
@@ @@
   /**
    * Creates the http client.
    *
-   * @param \Drupal\helpdesk_integration\HelpdeskInterface $helpdesk
+   * @param HelpdeskInterface $helpdesk
    *   The helpdesk.
    * @param $userName
    *   The user name.
    *
-   * @return \Zendesk\API\HttpClient
+   * @return HttpClient
    *   The HTTP CLient.
    *
-   * @throws \Drupal\helpdesk_integration\HelpdeskPluginException
+   * @throws HelpdeskPluginException
    */
   private function doCreateClient(HelpdeskInterface $helpdesk, $userName): HttpClient {
     $subdomain = $helpdesk->get('subdomain');
@@ @@
   /**
    * Create the user.
    *
-   * @param \Zendesk\API\HttpClient $client
+   * @param HttpClient $client
    *   The Http client.
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The Drupal user.
    *
    * @return object|null
@@ @@
   /**
    * Updates the user.
    *
-   * @param \Zendesk\API\HttpClient $client
+   * @param HttpClient $client
    *   The HTTP client.
    * @param object $remoteUser
    *   The remote user.
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The Drupal user.
    *
-   * @throws \Drupal\helpdesk_integration\HelpdeskPluginException
+   * @throws HelpdeskPluginException
    */
   public function updateUser(HttpClient $client, object $remoteUser, UserInterface $user): void {
     $hasChanged = FALSE;
@@ @@
   /**
    * Gets the values of the user as array.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The Drupal user.
    *
    * @return array
@@ @@
   /**
    * Gets the phone number identities of a Zendesk user.
    *
-   * @param \Zendesk\API\HttpClient $client
+   * @param HttpClient $client
    *   The HTTP client.
    * @param string $remoteUserId
    *   The remot user.
@@ @@
    * @return array
    *   The phne identities.
    *
-   * @throws \Zendesk\API\Exceptions\ApiResponseException
-   * @throws \Zendesk\API\Exceptions\AuthException
+   * @throws ApiResponseException
+   * @throws AuthException
    */
   public function getUserPhoneIdentities(HttpClient $client, string $remoteUserId): array {
     $identities = [];
@@ @@
   /**
    * Creates a phone number identity for the given user.
    *
-   * @param \Zendesk\API\HttpClient $client
+   * @param HttpClient $client
    *   The http client.
    * @param string $remoteUserId
    *   The remote user id.
@@ @@
   /**
    * Sets a given phone number to shared.
    *
-   * @param \Zendesk\API\HttpClient $client
+   * @param HttpClient $client
    *   The http client.
    * @param string $remoteUserId
    *   The remote user id.
@@ @@
   /**
    * Delete all old email identities, but not the current one.
    *
-   * @param \Zendesk\API\HttpClient $client
+   * @param HttpClient $client
    *   The http client.
    * @param string $remoteUserId
    *   The remote user id.
@@ @@
    * @param string $currentEmail
    *   The current email.
    *
-   * @throws \Drupal\helpdesk_integration\HelpdeskPluginException
+   * @throws HelpdeskPluginException
    */
   private function deleteAllOldEmailIdentities(HttpClient $client, string $remoteUserId, string $currentEmail): void {
     try {
@@ @@
   /**
    * Gets the user identities by type.
    *
-   * @param \Zendesk\API\HttpClient $client
+   * @param HttpClient $client
    *   The http client.
    * @param string $remoteUserId
    *   The remote user id.
@@ @@
    * @return array
    *   The user identities.
    *
-   * @throws \Zendesk\API\Exceptions\ApiResponseException
-   * @throws \Zendesk\API\Exceptions\AuthException
+   * @throws ApiResponseException
+   * @throws AuthException
    */
   public function getUserIdentities(HttpClient $client, string $remoteUserId, string $identityType): array {
     $identities = [];
@@ @@
   /**
    * Creates an issue.
    *
-   * @param \Zendesk\API\HttpClient $client
+   * @param HttpClient $client
    *   The Http client.
    * @param string $subject
    *   The subject.
@@ @@
   /**
    * Gets the state ticket fields.
    *
-   * @throws \Drupal\helpdesk_integration\HelpdeskPluginException
+   * @throws HelpdeskPluginException
    */
   public function getStates(HttpClient $client): array {
     $states = [];
@@ @@
   /**
    * Uploads the given attachments and returns the tokens.
    *
-   * @param \Zendesk\API\HttpClient $client
+   * @param HttpClient $client
    *   The Http client.
    * @param array $attachments
    *   The attachments.
@@ @@
    * @return array
    *   The upload tokens.
    *
-   * @throws \Drupal\helpdesk_integration\HelpdeskPluginException
+   * @throws HelpdeskPluginException
    */
   public function uploadTokens(HttpClient $client, array $attachments): array {
     $uploadTokens = [];
-    /** @var \Drupal\file\Plugin\Field\FieldType\FileItem $attachment */
+    /** @var FileItem $attachment */
     foreach ($attachments as $attachment) {
       try {
-        /** @var \Drupal\file\FileInterface $file */
+        /** @var FileInterface $file */
         $file = $this->entityTypeManager->getStorage('file')
           ->load($attachment['target_id']);
       } catch (InvalidPluginDefinitionException|PluginNotFoundException $e) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/helpdesk_zendesk/src/Plugin/HelpdeskIntegration/Zendesk.php:56

    ---------- begin diff ----------
@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Http\ClientFactory $client_factory
+   * @param ClientFactory $client_factory
    *   HTTP client factory.
    * @param \Drupal\helpdesk_integration\Service $service
    *   Helpdesk services.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
-   * @param \Drupal\user\UserDataInterface $user_data
+   * @param UserDataInterface $user_data
    *   User data service to persistently store data for each user.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   Drupal's time service.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   Drupal's date formatter service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Drupal's logger service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The currently logged in user account session.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system interface.
-   * @param \Symfony\Component\Mime\MimeTypeGuesserInterface $mime_type_guesser
+   * @param MimeTypeGuesserInterface $mime_type_guesser
    *   The file type guesser.
-   * @param \Drupal\helpdesk_zendesk\Service $zendeskService
+   * @param Service $zendeskService
    *   The Zendesk service.
    */
   public function __construct(array $configuration, string $plugin_id, $plugin_definition, ClientFactory $client_factory, \Drupal\helpdesk_integration\Service $service, EntityTypeManagerInterface $entity_type_manager, UserDataInterface $user_data, TimeInterface $time, DateFormatterInterface $date_formatter, LoggerInterface $logger, AccountInterface $current_user, FileSystemInterface $file_system, MimeTypeGuesserInterface $mime_type_guesser, Service $zendeskService) {
@@ @@
         ->requests()
         ->findAll()->requests;
       foreach ($requests as $request) {
-        /** @var \Drupal\helpdesk_integration\IssueInterface $issue */
+        /** @var IssueInterface $issue */
         $issue = Issue::create([
           'helpdesk' => $helpdesk->id(),
           'extid' => $request->id,
@@ @@
    * Handles the attachments of the ticket comments.
    *
    * @param object $comment
-   * @param \Drupal\helpdesk_integration\IssueInterface $issue
+   * @param IssueInterface $issue
    * @param int $comment_id
    */
   private function handleCommentAttachments(object $comment, IssueInterface $issue, int $comment_id): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 3 files have been changed by Rector                                       

