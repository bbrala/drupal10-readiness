modules/contrib/drd/drd.install
modules/contrib/drd/drd.module
modules/contrib/drd/modules/drd_install_core/src/EventSubscriber/CreateProject.php
modules/contrib/drd/modules/drd_install_core/src/Plugin/WebformElement/Domain.php
modules/contrib/drd/modules/drd_install_core/src/Plugin/WebformHandler/InstallCore.php
modules/contrib/drd/modules/drd_migrate/src/Command/FromD7.php
modules/contrib/drd/modules/drd_migrate/src/Commands/Drush.php
modules/contrib/drd/modules/drd_migrate/src/Import.php
modules/contrib/drd/modules/drd_pi/drd_pi.module
modules/contrib/drd/modules/drd_pi/src/Command/Sync.php
modules/contrib/drd/modules/drd_pi/src/Commands/DrdPiCommands.php
modules/contrib/drd/modules/drd_pi/src/DrdPiAccount.php
modules/contrib/drd/modules/drd_pi/src/DrdPiAccountForm.php
modules/contrib/drd/modules/drd_pi/src/DrdPiAccountInterface.php
modules/contrib/drd/modules/drd_pi/src/DrdPiAccountListBuilder.php
modules/contrib/drd/modules/drd_pi/src/DrdPiCore.php
modules/contrib/drd/modules/drd_pi/src/DrdPiDomain.php
modules/contrib/drd/modules/drd_pi/src/DrdPiEntity.php
modules/contrib/drd/modules/drd_pi/src/DrdPiEntityInterface.php
modules/contrib/drd/modules/drd_pi/src/DrdPiHost.php
modules/contrib/drd/modules/drd_pi/src/Plugin/Action/Sync.php
modules/contrib/drd/modules/drd_pi/src/Plugin/Block/WidgetPlatforms.php
modules/contrib/drd/modules/drd_pi_acquia/src/Entity/Account.php
modules/contrib/drd/modules/drd_pi_acquia/src/Entity/AccountForm.php
modules/contrib/drd/modules/drd_pi_acquia/src/Entity/AccountInterface.php
modules/contrib/drd/modules/drd_pi_acquia/src/Form/Settings.php
modules/contrib/drd/modules/drd_pi_acquia/src/Plugin/Block/WidgetAcquia.php
modules/contrib/drd/modules/drd_pi_pantheon/src/Entity/Account.php
modules/contrib/drd/modules/drd_pi_pantheon/src/Entity/AccountForm.php
modules/contrib/drd/modules/drd_pi_pantheon/src/Entity/AccountInterface.php
modules/contrib/drd/modules/drd_pi_pantheon/src/Form/Settings.php
modules/contrib/drd/modules/drd_pi_pantheon/src/Plugin/Block/WidgetPantheon.php
modules/contrib/drd/modules/drd_pi_platformsh/src/Entity/Account.php
modules/contrib/drd/modules/drd_pi_platformsh/src/Entity/AccountForm.php
modules/contrib/drd/modules/drd_pi_platformsh/src/Entity/AccountInterface.php
modules/contrib/drd/modules/drd_pi_platformsh/src/Form/Settings.php
modules/contrib/drd/modules/drd_pi_platformsh/src/Plugin/Block/WidgetPlatformsh.php
modules/contrib/drd/src/ActionManager.php
modules/contrib/drd/src/ActionManagerInterface.php
modules/contrib/drd/src/ActionPermissions.php
modules/contrib/drd/src/ActionWidget.php
modules/contrib/drd/src/ActionWidgetInterface.php
modules/contrib/drd/src/Annotation/Auth.php
modules/contrib/drd/src/Annotation/Update.php
modules/contrib/drd/src/Cleanup.php
modules/contrib/drd/src/Command/Base.php
modules/contrib/drd/src/Command/BaseCore.php
modules/contrib/drd/src/Command/BaseDomain.php
modules/contrib/drd/src/Command/BaseEntity.php
modules/contrib/drd/src/Command/BaseEntitySelect.php
modules/contrib/drd/src/Command/BaseHost.php
modules/contrib/drd/src/Command/BaseSystem.php
modules/contrib/drd/src/Command/Blocks.php
modules/contrib/drd/src/Command/Cron.php
modules/contrib/drd/src/Command/Database.php
modules/contrib/drd/src/Command/DnsLookup.php
modules/contrib/drd/src/Command/DomainChange.php
modules/contrib/drd/src/Command/DomainMove.php
modules/contrib/drd/src/Command/DomainsEnableAll.php
modules/contrib/drd/src/Command/DomainsReceive.php
modules/contrib/drd/src/Command/Download.php
modules/contrib/drd/src/Command/ErrorLogs.php
modules/contrib/drd/src/Command/FlushCache.php
modules/contrib/drd/src/Command/Info.php
modules/contrib/drd/src/Command/JobScheduler.php
modules/contrib/drd/src/Command/ListCores.php
modules/contrib/drd/src/Command/ListDomains.php
modules/contrib/drd/src/Command/ListEntities.php
modules/contrib/drd/src/Command/ListHosts.php
modules/contrib/drd/src/Command/MaintenanceMode.php
modules/contrib/drd/src/Command/Php.php
modules/contrib/drd/src/Command/Ping.php
modules/contrib/drd/src/Command/Projects.php
modules/contrib/drd/src/Command/ProjectsStatus.php
modules/contrib/drd/src/Command/ProjectsUpdate.php
modules/contrib/drd/src/Command/ProjectsUpdateLog.php
modules/contrib/drd/src/Command/ReleaseLock.php
modules/contrib/drd/src/Command/ReleaseUnlock.php
modules/contrib/drd/src/Command/Session.php
modules/contrib/drd/src/Command/Update.php
modules/contrib/drd/src/Command/UpdateTranslations.php
modules/contrib/drd/src/Command/UserCredentials.php
modules/contrib/drd/src/Commands/DrdCommands.php
modules/contrib/drd/src/ContextProvider/RouteContext.php
modules/contrib/drd/src/ContextProvider/RouteContextCore.php
modules/contrib/drd/src/ContextProvider/RouteContextDomain.php
modules/contrib/drd/src/ContextProvider/RouteContextHost.php
modules/contrib/drd/src/ContextProvider/RouteContextInterface.php
modules/contrib/drd/src/Controller/Activity.php
modules/contrib/drd/src/Controller/Dashboard.php
modules/contrib/drd/src/Controller/Domain.php
modules/contrib/drd/src/Crypt/Base.php
modules/contrib/drd/src/Crypt/BaseInterface.php
modules/contrib/drd/src/Crypt/BaseMethod.php
modules/contrib/drd/src/Crypt/BaseMethodInterface.php
modules/contrib/drd/src/Crypt/Method/MCrypt.php
modules/contrib/drd/src/Crypt/Method/OpenSSL.php
modules/contrib/drd/src/Crypt/Method/TLS.php
modules/contrib/drd/src/DnsLookup.php
modules/contrib/drd/src/DomainLocalCopy.php
modules/contrib/drd/src/Encryption.php
modules/contrib/drd/src/EncryptionEntityInterface.php
modules/contrib/drd/src/EncryptionUpdate.php
modules/contrib/drd/src/Entity/AccessControlHandler/Core.php
modules/contrib/drd/src/Entity/AccessControlHandler/Domain.php
modules/contrib/drd/src/Entity/AccessControlHandler/Host.php
modules/contrib/drd/src/Entity/AccessControlHandler/Major.php
modules/contrib/drd/src/Entity/AccessControlHandler/Project.php
modules/contrib/drd/src/Entity/AccessControlHandler/Release.php
modules/contrib/drd/src/Entity/AccessControlHandler/Requirement.php
modules/contrib/drd/src/Entity/BaseFieldTrait.php
modules/contrib/drd/src/Entity/BaseInterface.php
modules/contrib/drd/src/Entity/Core.php
modules/contrib/drd/src/Entity/CoreInterface.php
modules/contrib/drd/src/Entity/Domain.php
modules/contrib/drd/src/Entity/DomainInterface.php
modules/contrib/drd/src/Entity/Form/Core.php
modules/contrib/drd/src/Entity/Form/CoreDelete.php
modules/contrib/drd/src/Entity/Form/CoreSettings.php
modules/contrib/drd/src/Entity/Form/CoreUpdateLog.php
modules/contrib/drd/src/Entity/Form/Domain.php
modules/contrib/drd/src/Entity/Form/DomainReset.php
modules/contrib/drd/src/Entity/Form/DomainSettings.php
modules/contrib/drd/src/Entity/Form/Host.php
modules/contrib/drd/src/Entity/Form/HostDelete.php
modules/contrib/drd/src/Entity/Form/HostSettings.php
modules/contrib/drd/src/Entity/Form/Major.php
modules/contrib/drd/src/Entity/Form/MajorSettings.php
modules/contrib/drd/src/Entity/Form/Project.php
modules/contrib/drd/src/Entity/Form/ProjectSettings.php
modules/contrib/drd/src/Entity/Form/Release.php
modules/contrib/drd/src/Entity/Form/ReleaseSettings.php
modules/contrib/drd/src/Entity/Form/Requirement.php
modules/contrib/drd/src/Entity/Form/RequirementSettings.php
modules/contrib/drd/src/Entity/Form/Script.php
modules/contrib/drd/src/Entity/Form/ScriptDelete.php
modules/contrib/drd/src/Entity/Form/ScriptType.php
modules/contrib/drd/src/Entity/Form/ScriptTypeDelete.php
modules/contrib/drd/src/Entity/Host.php
modules/contrib/drd/src/Entity/HostInterface.php
modules/contrib/drd/src/Entity/ListBuilder/Core.php
modules/contrib/drd/src/Entity/ListBuilder/Domain.php
modules/contrib/drd/src/Entity/ListBuilder/Host.php
modules/contrib/drd/src/Entity/ListBuilder/Major.php
modules/contrib/drd/src/Entity/ListBuilder/Project.php
modules/contrib/drd/src/Entity/ListBuilder/Release.php
modules/contrib/drd/src/Entity/ListBuilder/Requirement.php
modules/contrib/drd/src/Entity/ListBuilder/Script.php
modules/contrib/drd/src/Entity/ListBuilder/ScriptType.php
modules/contrib/drd/src/Entity/Major.php
modules/contrib/drd/src/Entity/MajorInterface.php
modules/contrib/drd/src/Entity/Project.php
modules/contrib/drd/src/Entity/ProjectInterface.php
modules/contrib/drd/src/Entity/Release.php
modules/contrib/drd/src/Entity/ReleaseInterface.php
modules/contrib/drd/src/Entity/Requirement.php
modules/contrib/drd/src/Entity/RequirementInterface.php
modules/contrib/drd/src/Entity/Script.php
modules/contrib/drd/src/Entity/ScriptInterface.php
modules/contrib/drd/src/Entity/ScriptType.php
modules/contrib/drd/src/Entity/ScriptTypeInterface.php
modules/contrib/drd/src/Entity/UpdateStatusInterface.php
modules/contrib/drd/src/Entity/ViewBuilder/Base.php
modules/contrib/drd/src/Entity/ViewBuilder/Core.php
modules/contrib/drd/src/Entity/ViewBuilder/Domain.php
modules/contrib/drd/src/Entity/ViewBuilder/Host.php
modules/contrib/drd/src/Entity/ViewsData/Core.php
modules/contrib/drd/src/Entity/ViewsData/Domain.php
modules/contrib/drd/src/Entity/ViewsData/Host.php
modules/contrib/drd/src/Entity/ViewsData/Major.php
modules/contrib/drd/src/Entity/ViewsData/Project.php
modules/contrib/drd/src/Entity/ViewsData/Release.php
modules/contrib/drd/src/Entity/ViewsData/Requirement.php
modules/contrib/drd/src/Form/Actions.php
modules/contrib/drd/src/Form/EntityActions.php
modules/contrib/drd/src/Form/Settings.php
modules/contrib/drd/src/Generators/ActionPlugin.php
modules/contrib/drd/src/HttpRequest.php
modules/contrib/drd/src/LibraryBuild.php
modules/contrib/drd/src/Logging.php
modules/contrib/drd/src/Plugin/Action/Base.php
modules/contrib/drd/src/Plugin/Action/BaseConfigurableInterface.php
modules/contrib/drd/src/Plugin/Action/BaseCoreRemote.php
modules/contrib/drd/src/Plugin/Action/BaseEntity.php
modules/contrib/drd/src/Plugin/Action/BaseEntityInterface.php
modules/contrib/drd/src/Plugin/Action/BaseEntityRemote.php
modules/contrib/drd/src/Plugin/Action/BaseGlobal.php
modules/contrib/drd/src/Plugin/Action/BaseGlobalInterface.php
modules/contrib/drd/src/Plugin/Action/BaseHost.php
modules/contrib/drd/src/Plugin/Action/BaseInterface.php
modules/contrib/drd/src/Plugin/Action/Blocks.php
modules/contrib/drd/src/Plugin/Action/Cron.php
modules/contrib/drd/src/Plugin/Action/Database.php
modules/contrib/drd/src/Plugin/Action/DnsLookup.php
modules/contrib/drd/src/Plugin/Action/DomainChange.php
modules/contrib/drd/src/Plugin/Action/DomainMove.php
modules/contrib/drd/src/Plugin/Action/DomainsEnableAll.php
modules/contrib/drd/src/Plugin/Action/DomainsReceive.php
modules/contrib/drd/src/Plugin/Action/Download.php
modules/contrib/drd/src/Plugin/Action/ErrorLogs.php
modules/contrib/drd/src/Plugin/Action/FlushCache.php
modules/contrib/drd/src/Plugin/Action/Info.php
modules/contrib/drd/src/Plugin/Action/JobScheduler.php
modules/contrib/drd/src/Plugin/Action/ListCores.php
modules/contrib/drd/src/Plugin/Action/ListDomains.php
modules/contrib/drd/src/Plugin/Action/ListEntities.php
modules/contrib/drd/src/Plugin/Action/ListHosts.php
modules/contrib/drd/src/Plugin/Action/MaintenanceMode.php
modules/contrib/drd/src/Plugin/Action/Php.php
modules/contrib/drd/src/Plugin/Action/Ping.php
modules/contrib/drd/src/Plugin/Action/Projects.php
modules/contrib/drd/src/Plugin/Action/ProjectsStatus.php
modules/contrib/drd/src/Plugin/Action/ProjectsUpdate.php
modules/contrib/drd/src/Plugin/Action/ProjectsUpdateLog.php
modules/contrib/drd/src/Plugin/Action/ReleaseLock.php
modules/contrib/drd/src/Plugin/Action/ReleaseUnlock.php
modules/contrib/drd/src/Plugin/Action/Session.php
modules/contrib/drd/src/Plugin/Action/Update.php
modules/contrib/drd/src/Plugin/Action/UpdateTranslations.php
modules/contrib/drd/src/Plugin/Action/UserCredentials.php
modules/contrib/drd/src/Plugin/AdvancedQueue/JobType/Action.php
modules/contrib/drd/src/Plugin/AdvancedQueue/JobType/ActionEntity.php
modules/contrib/drd/src/Plugin/AdvancedQueue/JobType/ActionGlobal.php
modules/contrib/drd/src/Plugin/AdvancedQueue/JobType/ActionInterface.php
modules/contrib/drd/src/Plugin/Auth/Base.php
modules/contrib/drd/src/Plugin/Auth/BaseInterface.php
modules/contrib/drd/src/Plugin/Auth/Manager.php
modules/contrib/drd/src/Plugin/Auth/SharedSecret.php
modules/contrib/drd/src/Plugin/Auth/UsernamePassword.php
modules/contrib/drd/src/Plugin/Block/Base.php
modules/contrib/drd/src/Plugin/Block/Remote.php
modules/contrib/drd/src/Plugin/Block/WidgetBase.php
modules/contrib/drd/src/Plugin/Block/WidgetCores.php
modules/contrib/drd/src/Plugin/Block/WidgetDomains.php
modules/contrib/drd/src/Plugin/Block/WidgetEntities.php
modules/contrib/drd/src/Plugin/Block/WidgetGlobalActions.php
modules/contrib/drd/src/Plugin/Block/WidgetHosts.php
modules/contrib/drd/src/Plugin/Block/WidgetIntro.php
modules/contrib/drd/src/Plugin/Block/WidgetProjects.php
modules/contrib/drd/src/Plugin/Block/WidgetQueue.php
modules/contrib/drd/src/Plugin/Block/WidgetSupport.php
modules/contrib/drd/src/Plugin/Derivative/RemoteBlock.php
modules/contrib/drd/src/Plugin/Field/FieldFormatter/IPv4.php
modules/contrib/drd/src/Plugin/Field/FieldFormatter/IPv6.php
modules/contrib/drd/src/Plugin/Field/FieldFormatter/Secure.php
modules/contrib/drd/src/Plugin/Menu/LocalAction/AddCoreAction.php
modules/contrib/drd/src/Plugin/Update/Build/Base.php
modules/contrib/drd/src/Plugin/Update/Build/Composer.php
modules/contrib/drd/src/Plugin/Update/Build/Direct.php
modules/contrib/drd/src/Plugin/Update/Build/DrushMake.php
modules/contrib/drd/src/Plugin/Update/Deploy/Base.php
modules/contrib/drd/src/Plugin/Update/Deploy/None.php
modules/contrib/drd/src/Plugin/Update/Deploy/Rsync.php
modules/contrib/drd/src/Plugin/Update/Finish/Base.php
modules/contrib/drd/src/Plugin/Update/Finish/None.php
modules/contrib/drd/src/Plugin/Update/Process/Base.php
modules/contrib/drd/src/Plugin/Update/Process/LakeDropsD8.php
modules/contrib/drd/src/Plugin/Update/Process/None.php
modules/contrib/drd/src/Plugin/Update/RsyncTrait.php
modules/contrib/drd/src/Plugin/Update/Storage/Base.php
modules/contrib/drd/src/Plugin/Update/Storage/Git.php
modules/contrib/drd/src/Plugin/Update/Storage/GitFlow.php
modules/contrib/drd/src/Plugin/Update/Storage/Local.php
modules/contrib/drd/src/Plugin/Update/Storage/Rsync.php
modules/contrib/drd/src/Plugin/Update/Test/Base.php
modules/contrib/drd/src/Plugin/Update/Test/None.php
modules/contrib/drd/src/Plugin/Update/UpdateBase.php
modules/contrib/drd/src/Plugin/views/field/Actions.php
modules/contrib/drd/src/Plugin/views/field/DomainName.php
modules/contrib/drd/src/Plugin/views/field/PingStatus.php
modules/contrib/drd/src/Plugin/views/field/ProjectName.php
modules/contrib/drd/src/Plugin/views/field/RequirementCategory.php
modules/contrib/drd/src/Plugin/views/field/Secure.php
modules/contrib/drd/src/Plugin/views/field/StatusBase.php
modules/contrib/drd/src/Plugin/views/field/StatusBaseInterface.php
modules/contrib/drd/src/Plugin/views/field/StatusCore.php
modules/contrib/drd/src/Plugin/views/field/StatusDomain.php
modules/contrib/drd/src/Plugin/views/field/StatusHost.php
modules/contrib/drd/src/Plugin/views/field/UpdateStatus.php
modules/contrib/drd/src/Plugin/views/filter/BaseManyToOne.php
modules/contrib/drd/src/Plugin/views/filter/CoreVersions.php
modules/contrib/drd/src/Plugin/views/filter/Cores.php
modules/contrib/drd/src/Plugin/views/filter/Hosts.php
modules/contrib/drd/src/Plugin/views/filter/ProjectTypes.php
modules/contrib/drd/src/Plugin/views/filter/UpdateStatus.php
modules/contrib/drd/src/QueueManager.php
modules/contrib/drd/src/SelectEntities.php
modules/contrib/drd/src/SelectEntitiesInterface.php
modules/contrib/drd/src/Ssh.php
modules/contrib/drd/src/SshCommand.php
modules/contrib/drd/src/SshInterface.php
modules/contrib/drd/src/SshLibSec.php
modules/contrib/drd/src/SshPhp.php
modules/contrib/drd/src/Update/Manager.php
modules/contrib/drd/src/Update/ManagerBuild.php
modules/contrib/drd/src/Update/ManagerDeploy.php
modules/contrib/drd/src/Update/ManagerFinish.php
modules/contrib/drd/src/Update/ManagerInterface.php
modules/contrib/drd/src/Update/ManagerProcess.php
modules/contrib/drd/src/Update/ManagerStorage.php
modules/contrib/drd/src/Update/ManagerStorageInterface.php
modules/contrib/drd/src/Update/ManagerTests.php
modules/contrib/drd/src/Update/PluginBuildInterface.php
modules/contrib/drd/src/Update/PluginDeployInterface.php
modules/contrib/drd/src/Update/PluginFinishInterface.php
modules/contrib/drd/src/Update/PluginInterface.php
modules/contrib/drd/src/Update/PluginProcessInterface.php
modules/contrib/drd/src/Update/PluginStorageInterface.php
modules/contrib/drd/src/Update/PluginTestInterface.php
modules/contrib/drd/src/UpdateFetcher.php
modules/contrib/drd/src/UpdateProcessor.php
modules/contrib/drd/src/Widgets.php

120 files with changes
======================

1) modules/contrib/drd/src/Widgets.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd;

+use Drupal\drd\Plugin\Block\Base;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Block\BlockManagerInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
 class Widgets {

   /**
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;

   /**
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Widgets constructor.
    *
-   * @param \Drupal\Core\Block\BlockManagerInterface $blockManager
-   * @param \Drupal\Core\Session\AccountInterface $currentUser
+   * @param BlockManagerInterface $blockManager
+   * @param AccountInterface $currentUser
    */
   public function __construct(BlockManagerInterface $blockManager, AccountInterface $currentUser) {
     $this->blockManager = $blockManager;
@@ @@
    * @param bool $render
    *   Whether to render the widget's content.
    *
-   * @return \Drupal\drd\Plugin\Block\Base[]
+   * @return Base[]
    *   List of widgets.
    */
   public function findWidgets($render): array {
@@ @@
           $definition['weight'] = 0;
         }
         if ($render) {
-          /** @var \Drupal\drd\Plugin\Block\Base $block */
+          /** @var Base $block */
           try {
             $block = $this->blockManager->createInstance($definition['id'], []);
             if ($block->access($this->currentUser)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/drd/src/UpdateProcessor.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd;

+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\KeyValueStore\KeyValueFactoryInterface;
@@ @@
 class UpdateProcessor extends CoreUpdateProcessor {

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * UpdateProcessor constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
-   * @param \Drupal\update\UpdateFetcherInterface $update_fetcher
-   * @param \Drupal\Core\State\StateInterface $state_store
-   * @param \Drupal\Core\PrivateKey $private_key
-   * @param \Drupal\Core\KeyValueStore\KeyValueFactoryInterface $key_value_factory
-   * @param \Drupal\Core\KeyValueStore\KeyValueFactoryInterface $key_value_expirable_factory
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param ConfigFactoryInterface $config_factory
+   * @param QueueFactory $queue_factory
+   * @param UpdateFetcherInterface $update_fetcher
+   * @param StateInterface $state_store
+   * @param PrivateKey $private_key
+   * @param KeyValueFactoryInterface $key_value_factory
+   * @param KeyValueFactoryInterface $key_value_expirable_factory
+   * @param EntityTypeManagerInterface $entityTypeManager
    */
   public function __construct(ConfigFactoryInterface $config_factory, QueueFactory $queue_factory, UpdateFetcherInterface $update_fetcher, StateInterface $state_store, PrivateKey $private_key, KeyValueFactoryInterface $key_value_factory, KeyValueFactoryInterface $key_value_expirable_factory, EntityTypeManagerInterface $entityTypeManager) {
     parent::__construct($config_factory, $queue_factory, $update_fetcher, $state_store, $private_key, $key_value_factory, $key_value_expirable_factory);
@@ @@
   /**
    * Calculate the project update status.
    *
-   * @param \Drupal\drd\Entity\ProjectInterface $project
+   * @param ProjectInterface $project
    *   The project entity.
-   * @param \Drupal\drd\Entity\MajorInterface $major
+   * @param MajorInterface $major
    *   The major entity.
-   * @param \Drupal\drd\Entity\ReleaseInterface $release
+   * @param ReleaseInterface $release
    *   The release entity.
    * @param array $available
    *   Available data from drupal.org.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   private function calculate(ProjectInterface $project, MajorInterface $major, ReleaseInterface $release, array $available) {
     $project_data = [
@@ @@

   /**
    * {@inheritdoc}
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function fetchData() {
     module_load_include('inc', 'update', 'update.compare');
@@ @@
       if (empty($ids)) {
         continue;
       }
-      /** @var \Drupal\drd\Entity\MajorInterface $major */
+      /** @var MajorInterface $major */
       foreach ($this->entityTypeManager->getStorage('drd_major')->loadMultiple($ids) as $major) {
         if ($project = $major->getProject()) {
           if (!isset($processed[$project->getName()])) {
@@ @@
               ->getQuery()
               ->condition('major', $major->id())
               ->execute();
-            /** @var \Drupal\drd\Entity\ReleaseInterface $release */
+            /** @var ReleaseInterface $release */
             foreach ($this->entityTypeManager->getStorage('drd_release')
                        ->loadMultiple($rids) as $release) {
               $this->calculate($project, $major, $release, $available);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/drd/src/Update/PluginStorageInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Update;

+use Drupal\drd\Entity\ReleaseInterface;
 use Drupal\drd\Entity\CoreInterface;

 /**
@@ @@
   /**
    * Start the update process.
    *
-   * @param \Drupal\drd\Entity\CoreInterface $core
+   * @param CoreInterface $core
    *   The core entity to update.
-   * @param \Drupal\drd\Entity\ReleaseInterface[] $releases
+   * @param ReleaseInterface[] $releases
    *   The list of releases that require updates.
    * @param bool $dry
    *   Whether to run the update in dry mode.
@@ @@
   /**
    * Get the core entity.
    *
-   * @return \Drupal\drd\Entity\CoreInterface
+   * @return CoreInterface
    *   The core entity.
    */
   public function getCore(): CoreInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/drd/src/Update/PluginBuildInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Update;

+use Drupal\drd\Entity\ReleaseInterface;
 /**
  * Defines the required interface for all DRD Update Build plugins.
  */
@@ @@
    *
    * @param PluginStorageInterface $storage
    *   The storage plugin.
-   * @param \Drupal\drd\Entity\ReleaseInterface[] $releases
+   * @param ReleaseInterface[] $releases
    *   The list of releases which need to be updated.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/drd/src/Update/ManagerStorageInterface.php:29

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    * @param array $settings
    *   The plugin settings.
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function validateGlobalForm(array &$form, FormStateInterface $form_state);
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/drd/src/Update/ManagerStorage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Update;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
 class ManagerStorage extends Manager implements ManagerStorageInterface {

   /**
-   * @var \Drupal\drd\Update\ManagerBuild
+   * @var ManagerBuild
    */
   protected $build;

   /**
-   * @var \Drupal\drd\Update\ManagerProcess
+   * @var ManagerProcess
    */
   protected $process;

   /**
-   * @var \Drupal\drd\Update\ManagerTests
+   * @var ManagerTests
    */
   protected $test;

   /**
-   * @var \Drupal\drd\Update\ManagerDeploy
+   * @var ManagerDeploy
    */
   protected $deploy;

   /**
-   * @var \Drupal\drd\Update\ManagerFinish
+   * @var ManagerFinish
    */
   protected $finish;

@@ @@
    * ManagerStorage constructor.
    *
    * @param \Traversable $namespaces
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
-   * @param \Drupal\drd\Update\ManagerBuild $build
-   * @param \Drupal\drd\Update\ManagerProcess $process
-   * @param \Drupal\drd\Update\ManagerTests $test
-   * @param \Drupal\drd\Update\ManagerDeploy $deploy
-   * @param \Drupal\drd\Update\ManagerFinish $finish
+   * @param CacheBackendInterface $cache_backend
+   * @param ModuleHandlerInterface $module_handler
+   * @param ManagerBuild $build
+   * @param ManagerProcess $process
+   * @param ManagerTests $test
+   * @param ManagerDeploy $deploy
+   * @param ManagerFinish $finish
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, ManagerBuild $build, ManagerProcess $process, ManagerTests $test, ManagerDeploy $deploy, ManagerFinish $finish) {
     parent::__construct($namespaces, $cache_backend, $module_handler);
@@ @@
    *
    * @return object|PluginBuildInterface|PluginDeployInterface|PluginFinishInterface|PluginProcessInterface|PluginStorageInterface|PluginTestInterface
    *   The update plugin.
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   private function instance($type, array $settings) {
     $id = $settings['current'][$type];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/drd/src/Update/Manager.php:23

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/drd/src/SshLibSec.php:53

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function exec($command): bool {
-    /** @var \phpseclib\Net\SSH2 $connection */
+    /** @var SSH2 $connection */
     $connection = $this->connection;
     $this->output = $connection->exec($command);
     if (empty($this->output)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/drd/src/SshCommand.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * DRD domain entity.
    *
-   * @var \Drupal\drd\Entity\DomainInterface
+   * @var DomainInterface
    */
   protected $domain;

@@ @@
   /**
    * Set the DRD domain entity.
    *
-   * @param \Drupal\drd\Entity\DomainInterface $domain
+   * @param DomainInterface $domain
    *   The domain entity.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/drd/src/SelectEntitiesInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd;

+use Drupal\drd\Entity\HostInterface;
+use Drupal\drd\Entity\CoreInterface;
+use Drupal\drd\Entity\DomainInterface;
 /**
  * Interface for DRD entities queries service.
  */
@@ @@
   /**
    * Get selected hosts.
    *
-   * @return \Drupal\drd\Entity\HostInterface[]|false
+   * @return HostInterface[]|false
    *   The selected hosts.
    */
   public function hosts();
@@ @@
   /**
    * Get selected cores.
    *
-   * @return \Drupal\drd\Entity\CoreInterface[]|false
+   * @return CoreInterface[]|false
    *   The selected cores.
    */
   public function cores();
@@ @@
   /**
    * Get selected domains.
    *
-   * @return \Drupal\drd\Entity\DomainInterface[]|false
+   * @return DomainInterface[]|false
    *   The selected domains.
    */
   public function domains();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/drd/src/SelectEntities.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd;

+use Drupal\Core\Database\StatementInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Database\Connection;
@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   protected $tagId;

   /**
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * Construct the Entity object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, Connection $database) {
     $this->entityTypeManager = $entity_type_manager;
@@ @@
       'installed' => 1,
     ];
     if ($this->hostId) {
-      /** @var \Drupal\drd\Entity\Host $host */
+      /** @var Host $host */
       if ($host = Host::load($this->hostId)) {
         $cores = $host->getCores();
         array_walk($cores, function (Core $core) {
@@ @@
       $query
         ->fields($alias, ['id'])
         ->condition($ids);
-      /** @var \Drupal\Core\Database\StatementInterface $query */
+      /** @var StatementInterface $query */
       $query->execute();
       return $query->fetchCol();
     }
@@ @@
    * @param int $id
    *   The id of the found entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Array containing one entity.
    */
   protected function oneEntity($id): array {
@@ @@
    * @param $id
    *   ID of the entity to search or NULL to find all.
    *
-   * @return bool|\Drupal\Core\Entity\EntityInterface[]
+   * @return bool|EntityInterface[]
    *   List of all found entities.
    */
   protected function search($id) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/drd/src/QueueManager.php:17

    ---------- begin diff ----------
@@ @@
 class QueueManager {

   /**
-   * @var \Drupal\advancedqueue\ProcessorInterface
+   * @var ProcessorInterface
    */
   protected $processor;

@@ @@
   /**
    * QueueManager constructor.
    *
-   * @param \Drupal\advancedqueue\ProcessorInterface $processor
+   * @param ProcessorInterface $processor
    */
   public function __construct(ProcessorInterface $processor) {
     $this->processor = $processor;
@@ @@
   /**
    * Get the DRD Queue.
    *
-   * @return \Drupal\advancedqueue\Entity\QueueInterface
+   * @return QueueInterface
    *   The DRD Queue.
    */
   private function getQueue(): QueueInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


13) modules/contrib/drd/src/Plugin/views/filter/BaseManyToOne.php:9

    ---------- begin diff ----------
@@ @@
 abstract class BaseManyToOne extends ManyToOne {

   /**
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, Connection $database) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/drd/src/Plugin/views/field/UpdateStatus.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * Render the update status for a release.
    *
-   * @param \Drupal\drd\Entity\UpdateStatusInterface $entity
+   * @param UpdateStatusInterface $entity
    *   The project or release entity.
    * @param string $status
    *   The status of the release.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/drd/src/Plugin/views/field/StatusHost.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Plugin\views\field;

+use Drupal\drd\Entity\HostInterface;
 use Drupal\drd\Entity\BaseInterface;

 /**
@@ @@
    * {@inheritdoc}
    */
   public function getDomains(BaseInterface $remote): array {
-    /** @var \Drupal\drd\Entity\HostInterface $remote */
+    /** @var HostInterface $remote */
     return $remote->getDomains();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/drd/src/Plugin/views/field/StatusCore.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Plugin\views\field;

+use Drupal\drd\Entity\CoreInterface;
 use Drupal\drd\Entity\BaseInterface;

 /**
@@ @@
    * {@inheritdoc}
    */
   public function getDomains(BaseInterface $remote): array {
-    /** @var \Drupal\drd\Entity\CoreInterface $remote */
+    /** @var CoreInterface $remote */
     return $remote->getDomains();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/drd/src/Plugin/views/field/StatusBaseInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Plugin\views\field;

+use Drupal\drd\Entity\DomainInterface;
 use Drupal\drd\Entity\BaseInterface;

 /**
@@ @@
    * For a domain entity that is the entity itself, for host and core entities
    * this contains a list of all domains attached to them.
    *
-   * @param \Drupal\drd\Entity\BaseInterface $remote
+   * @param BaseInterface $remote
    *   The remote entity.
    *
-   * @return \Drupal\drd\Entity\DomainInterface[]
+   * @return DomainInterface[]
    *   List of domains.
    */
   public function getDomains(BaseInterface $remote): array;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


18) modules/contrib/drd/src/Plugin/views/field/StatusBase.php:16

    ---------- begin diff ----------
@@ @@
 abstract class StatusBase extends FieldPluginBase implements StatusBaseInterface {

   /**
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
    * @param array $configuration
    * @param string $plugin_id
    * @param string $plugin_definition
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, Connection $database) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
@@ @@
    * {@inheritdoc}
    */
   public function render(ResultRow $values) {
-    /** @var \Drupal\drd\Entity\BaseInterface $remote */
+    /** @var BaseInterface $remote */
     if (!empty($this->options['relationship']) && !empty($values->_relationship_entities[$this->options['relationship']])) {
       $remote = $values->_relationship_entities[$this->options['relationship']];
     }
@@ @@
   /**
    * Get aggregated warnings and error for a remote entity.
    *
-   * @param \Drupal\drd\Entity\BaseInterface $remote
+   * @param BaseInterface $remote
    *   The remote DRD entity.
    * @param string $field
    *   Either "warnings" or "errors".
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/drd/src/Plugin/views/field/Actions.php:22

    ---------- begin diff ----------
@@ @@
 class Actions extends BulkForm {

   /**
-   * @var \Drupal\drd\ActionWidgetInterface
+   * @var ActionWidgetInterface
    */
   protected $actionWidget;

@@ @@
    * @param array $configuration
    * @param string $plugin_id
    * @param string $plugin_definition
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
-   * @param \Drupal\drd\ActionWidgetInterface $actionWidget
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param LanguageManagerInterface $language_manager
+   * @param MessengerInterface $messenger
+   * @param EntityRepositoryInterface $entity_repository
+   * @param ActionWidgetInterface $actionWidget
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager, MessengerInterface $messenger, EntityRepositoryInterface $entity_repository, ActionWidgetInterface $actionWidget) {
     try {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/drd/src/Plugin/Update/UpdateBase.php:45

    ---------- begin diff ----------
@@ @@
   protected $lastShellOutput = '';

   /**
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

   /**
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

   /**
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

   /**
-   * @var \Drupal\drd\DomainLocalCopy
+   * @var DomainLocalCopy
    */
   protected $domainLocalCopy;

   /**
-   * @var \Drupal\Core\Http\ClientFactory
+   * @var ClientFactory
    */
   protected $httpClientFactory;

@@ @@
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
-   * @param \Drupal\Component\Datetime\TimeInterface $time
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
-   * @param \Drupal\drd\DomainLocalCopy $domain_local_copy
-   * @param \Drupal\Core\Http\ClientFactory $client_factory
+   * @param FileSystemInterface $file_system
+   * @param TimeInterface $time
+   * @param DateFormatterInterface $date_formatter
+   * @param ConfigFactoryInterface $config_factory
+   * @param DomainLocalCopy $domain_local_copy
+   * @param ClientFactory $client_factory
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, FileSystemInterface $file_system, TimeInterface $time, DateFormatterInterface $date_formatter, ConfigFactoryInterface $config_factory, DomainLocalCopy $domain_local_copy, ClientFactory $client_factory) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
@@ @@
   /**
    * Get the value of a form element.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return mixed
@@ @@
   /**
    * Execute a shell command and capture the output.
    *
-   * @param \Drupal\drd\Update\PluginStorageInterface $storage
+   * @param PluginStorageInterface $storage
    *   The update storage plugin.
    * @param string $cmd
    *   The command to execute.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/drd/src/Plugin/Update/Storage/Git.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The git repository object.
    *
-   * @var \GitElephant\Repository
+   * @var Repository
    */
   protected $repository;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/drd/src/Plugin/Update/Storage/Base.php:42

    ---------- begin diff ----------
@@ @@
   /**
    * The build plugin.
    *
-   * @var \Drupal\drd\Update\PluginBuildInterface
+   * @var PluginBuildInterface
    */
   private $buildPlugin;

@@ @@
   /**
    * The processing plugin.
    *
-   * @var \Drupal\drd\Update\PluginProcessInterface
+   * @var PluginProcessInterface
    */
   private $processPlugin;

@@ @@
   /**
    * The test plugin.
    *
-   * @var \Drupal\drd\Update\PluginTestInterface
+   * @var PluginTestInterface
    */
   private $testPlugin;

@@ @@
   /**
    * The deploy plugin.
    *
-   * @var \Drupal\drd\Update\PluginDeployInterface
+   * @var PluginDeployInterface
    */
   private $deployPlugin;

@@ @@
   /**
    * The finish plugin.
    *
-   * @var \Drupal\drd\Update\PluginFinishInterface
+   * @var PluginFinishInterface
    */
   private $finishPlugin;

@@ @@
   /**
    * The core entity which will get updated.
    *
-   * @var \Drupal\drd\Entity\CoreInterface
+   * @var CoreInterface
    */
   private $core;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/drd/src/Plugin/Update/RsyncTrait.php:50

    ---------- begin diff ----------
@@ @@
   /**
    * Execute the RSync command.
    *
-   * @param \Drupal\drd\Update\PluginStorageInterface $storage
+   * @param PluginStorageInterface $storage
    *   The update storage plugin.
    * @param bool $fromRemote
    *   TRUE for downstream and FALSE for upstream.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


24) modules/contrib/drd/src/Plugin/Update/Process/Base.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Plugin\Update\Process;

+use Drupal\drd\Entity\DomainInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\drd\Plugin\Update\UpdateBase;
 use Drupal\drd\Update\PluginInterface;
@@ @@
   /**
    * All domains that need processing.
    *
-   * @var \Drupal\drd\Entity\DomainInterface[]
+   * @var DomainInterface[]
    */
   protected $domains = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/drd/src/Plugin/Derivative/RemoteBlock.php:14

    ---------- begin diff ----------
@@ @@
 class RemoteBlock extends DeriverBase implements ContainerDeriverInterface {

   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * RemoteBlock constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
     $this->configFactory = $config_factory;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/drd/src/Plugin/Block/WidgetBase.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * Get the title of the widget.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The title.
    */
   abstract protected function title(): TranslatableMarkup;
@@ @@
   /**
    * Get the content of the widget.
    *
-   * @return array|string|\Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return array|string|TranslatableMarkup
    *   The content.
    */
   abstract protected function content();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


27) modules/contrib/drd/src/Plugin/Block/Remote.php:42

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function build(): array {
-    /** @var \Drupal\drd\Entity\DomainInterface $entity */
+    /** @var DomainInterface $entity */
     $entity = $this->getEntity();
     list(, $module, $delta) = explode(':', $this->getPluginId());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/drd/src/Plugin/Block/Base.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Plugin\Block;

+use Drupal\drd\Entity\BaseInterface;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * Route context of current request.
    *
-   * @var \Drupal\drd\ContextProvider\RouteContext
+   * @var RouteContext
    */
   protected $context;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

   /**
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

   /**
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;

   /**
-   * @var \Drupal\Core\Utility\LinkGeneratorInterface
+   * @var LinkGeneratorInterface
    */
   protected $linkGenerator;

   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

   /**
-   * @var \Drupal\drd\QueueManager
+   * @var QueueManager
    */
   protected $queueManager;

   /**
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
-   * @param \Drupal\Core\Session\AccountInterface $current_user
-   * @param \Drupal\Core\Database\Connection $database
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
-   * @param \Drupal\Core\Utility\LinkGeneratorInterface $link_generator
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
-   * @param \Drupal\drd\QueueManager $queue_manager
-   * @param \Drupal\Core\State\StateInterface $state
-   * @param \Drupal\drd\ContextProvider\RouteContext|null $context
+   * @param AccountInterface $current_user
+   * @param Connection $database
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param FormBuilderInterface $form_builder
+   * @param LinkGeneratorInterface $link_generator
+   * @param ModuleHandlerInterface $module_handler
+   * @param QueueManager $queue_manager
+   * @param StateInterface $state
+   * @param RouteContext|null $context
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, AccountInterface $current_user, Connection $database, EntityTypeManagerInterface $entity_type_manager, FormBuilderInterface $form_builder, LinkGeneratorInterface $link_generator, ModuleHandlerInterface $module_handler, QueueManager $queue_manager, StateInterface $state, $context = NULL) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
@@ @@
   /**
    * Get the entity of the current context.
    *
-   * @return bool|\Drupal\drd\Entity\BaseInterface
+   * @return bool|BaseInterface
    *   The DRD entity if within an entity context or FALSE otherwise.
    */
   protected function getEntity() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/drd/src/Plugin/Auth/Manager.php:18

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/drd/src/Plugin/Auth/BaseInterface.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * Retrieve settings values.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


31) modules/contrib/drd/src/Plugin/Auth/Base.php:12

    ---------- begin diff ----------
@@ @@
 abstract class Base extends PluginBase implements BaseInterface, ContainerFactoryPluginInterface {

   /**
-   * @var \Drupal\drd\Encryption
+   * @var Encryption
    */
   protected $encryption;

@@ @@
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\drd\Encryption $encryption
+   * @param Encryption $encryption
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, Encryption $encryption) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/drd/src/Plugin/AdvancedQueue/JobType/ActionGlobal.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Plugin\AdvancedQueue\JobType;

+use Drupal\drd\Plugin\Action\BaseGlobalInterface;
 /**
  * Provides an AdvancedQueue JobType for DRD globally.
  *
@@ @@
    * {@inheritdoc}
    */
   public function processAction() {
-    /** @var \Drupal\drd\Plugin\Action\BaseGlobalInterface $action */
+    /** @var BaseGlobalInterface $action */
     $action = $this->action;

     return $action->executeAction();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


33) modules/contrib/drd/src/Plugin/AdvancedQueue/JobType/ActionEntity.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Plugin\AdvancedQueue\JobType;

+use Drupal\drd\Plugin\Action\BaseEntityInterface;
+use Drupal\drd\Entity\BaseInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;

@@ @@
    * {@inheritdoc}
    */
   public function processAction() {
-    /** @var \Drupal\drd\Plugin\Action\BaseEntityInterface $action */
+    /** @var BaseEntityInterface $action */
     $action = $this->action;
-    /** @var \Drupal\drd\Entity\BaseInterface $entity */
+    /** @var BaseInterface $entity */
     try {
       if ($entity = $this->entityTypeManager
         ->getStorage($this->payload['entity_type'])
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


34) modules/contrib/drd/src/Plugin/AdvancedQueue/JobType/Action.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Plugin\AdvancedQueue\JobType;

+use Drupal\drd\Plugin\Action\Base;
 use Drupal\advancedqueue\Job;
 use Drupal\advancedqueue\JobResult;
 use Drupal\advancedqueue\Plugin\AdvancedQueue\JobType\JobTypeBase;
@@ @@
   /**
    * Action plugin.
    *
-   * @var \Drupal\drd\Plugin\Action\Base
+   * @var Base
    */
   protected $action;

@@ @@
   protected $payload = [];

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\drd\ActionManagerInterface
+   * @var ActionManagerInterface
    */
   protected $actionManager;

@@ @@
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\drd\ActionManagerInterface $action_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param ActionManagerInterface $action_manager
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, ActionManagerInterface $action_manager) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/drd/src/Plugin/Action/ReleaseLock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Plugin\Action;

+use Drupal\drd\Entity\CoreInterface;
 use Drupal\drd\Entity\Release;

 /**
@@ @@
       return FALSE;
     }

-    /** @var \Drupal\drd\Entity\CoreInterface $core */
+    /** @var CoreInterface $core */
     foreach ($this->arguments['cores'] as $core) {
       $core
         ->{$this->function}($release)
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


36) modules/contrib/drd/src/Plugin/Action/Projects.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Plugin\Action;

+use Drupal\drd\Entity\ReleaseInterface;
 use Drupal\drd\Entity\BaseInterface as RemoteEntityInterface;
 use Drupal\drd\Entity\Project;
 use Drupal\drd\Entity\Release;
@@ @@
         if (empty($info['version'])) {
           $info['version'] = $info['core'] . '-0.x';
         }
-        /** @var \Drupal\drd\Entity\ReleaseInterface $release */
+        /** @var ReleaseInterface $release */
         $release = Release::findOrCreate($item['type'], $item['name'], $info['version']);
         if ($release->isJustCreated()) {
           $major = $release->getMajor();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/drd/src/Plugin/Action/ListHosts.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Plugin\Action;

+use Drupal\drd\Entity\HostInterface;
 /**
  * Provides a 'ListHosts' action.
  *
@@ @@
   public function executeAction() {
     $rows = [];

-    /** @var \Drupal\drd\Entity\HostInterface $host */
+    /** @var HostInterface $host */
     foreach ($this->prepareSelection()->hosts() as $host) {
       $rows[] = [
         'host-id' => $host->id(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


38) modules/contrib/drd/src/Plugin/Action/ListEntities.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Prepare the service to select entities.
    *
-   * @return \Drupal\drd\SelectEntitiesInterface
+   * @return SelectEntitiesInterface
    *   The service to select DRD entities from.
    */
   protected function prepareSelection(): SelectEntitiesInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


39) modules/contrib/drd/src/Plugin/Action/ListDomains.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Plugin\Action;

+use Drupal\drd\Entity\DomainInterface;
 /**
  * Provides a 'ListDomains' action.
  *
@@ @@
   public function executeAction() {
     $rows = [];

-    /** @var \Drupal\drd\Entity\DomainInterface $domain */
+    /** @var DomainInterface $domain */
     foreach ($this->prepareSelection()->domains() as $domain) {
       $rows[] = [
         'domain-id' => $domain->id(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


40) modules/contrib/drd/src/Plugin/Action/ListCores.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Plugin\Action;

+use Drupal\drd\Entity\CoreInterface;
 /**
  * Provides a 'ListCores' action.
  *
@@ @@
   public function executeAction() {
     $rows = [];

-    /** @var \Drupal\drd\Entity\CoreInterface $core */
+    /** @var CoreInterface $core */
     foreach ($this->prepareSelection()->cores() as $core) {
       $rows[] = [
         'core-id' => $core->id(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


41) modules/contrib/drd/src/Plugin/Action/DomainsEnableAll.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Plugin\Action;

+use Drupal\drd\Entity\DomainInterface;
 use Drupal\drd\Entity\BaseInterface as RemoteEntityInterface;
 use Drupal\drd\Entity\CoreInterface;

@@ @@
     $response = parent::executeAction($core);
     if ($response) {
       foreach ($response as $url) {
-        /** @var \Drupal\drd\Entity\DomainInterface $domain */
+        /** @var DomainInterface $domain */
         $domain = $local[$url];
         $domain->set('installed', 1);
         /** @noinspection PhpUnhandledExceptionInspection */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


42) modules/contrib/drd/src/Plugin/Action/DomainMove.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Plugin\Action;

+use Drupal\drd\Entity\CoreInterface;
+use Drupal\drd\Entity\DomainInterface;
 use Drupal\drd\Entity\BaseInterface as RemoteEntityInterface;
 use Drupal\drd\Entity\Core;

@@ @@
   /**
    * The destination core to which the domain should be moved.
    *
-   * @var \Drupal\drd\Entity\CoreInterface
+   * @var CoreInterface
    */
   protected $core;

@@ @@
    * {@inheritdoc}
    */
   public function executeAction(RemoteEntityInterface $domain) {
-    /** @var \Drupal\drd\Entity\DomainInterface $domain */
-
+    /** @var DomainInterface $domain */
     if (!isset($this->core)) {
       $this->core = Core::load($this->arguments['dest-core-id']);
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


43) modules/contrib/drd/src/Plugin/Action/DomainChange.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Plugin\Action;

+use Drupal\drd\Entity\DomainInterface;
 use Drupal\drd\Entity\BaseInterface as RemoteEntityInterface;
 use Drupal\drd\Entity\Domain;
 use Exception;
@@ @@
    * {@inheritdoc}
    */
   public function executeAction(RemoteEntityInterface $domain) {
-    /** @var \Drupal\drd\Entity\DomainInterface $domain */
+    /** @var DomainInterface $domain */
     if (isset($this->arguments['secure'])) {
       $domain->set('secure', $this->arguments['secure']);
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


44) modules/contrib/drd/src/Plugin/Action/BaseInterface.php:71

    ---------- begin diff ----------
@@ @@
   /**
    * Determine if the current action has the given term associated with it.
    *
-   * @param \Drupal\taxonomy\Entity\Term $term
+   * @param Term $term
    *   The term to check.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


45) modules/contrib/drd/src/Plugin/Action/BaseEntityRemote.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Plugin\Action;

+use Drupal\drd\Crypt\BaseMethodInterface;
 use Drupal\drd\Crypt\Base as CryptBase;
 use Drupal\drd\Entity\BaseInterface as RemoteEntityInterface;
 use Drupal\drd\Entity\DomainInterface;
@@ @@
   /**
    * Crypt object for the remote entity.
    *
-   * @var \Drupal\drd\Crypt\BaseMethodInterface
+   * @var BaseMethodInterface
    */
   protected $crypt;

@@ @@
    * overwrite this and add options to the request before this is being
    * submitted.
    *
-   * @param \Drupal\drd\HttpRequest $request
+   * @param HttpRequest $request
    *   The request object.
    */
   protected function setRequestOptions(HttpRequest $request) {}
@@ @@
    * Finally prepare and submit the request object and process the response.
    */
   protected function remoteRequest() {
-    /** @var \Drupal\drd\Entity\DomainInterface $domain */
+    /** @var DomainInterface $domain */
     $domain = $this->drdEntity;
     $class = explode('\\', get_class($this));

@@ @@
     }
     $body = base64_encode(json_encode($payload));

-    /** @var \Drupal\drd\HttpRequest $request */
+    /** @var HttpRequest $request */
     $request = $this->httpRequest;
     $request->setDomain($domain)
       ->setQuery('drd-agent')
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


46) modules/contrib/drd/src/Plugin/Action/BaseEntity.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Plugin\Action;

+use Drupal\drd\Entity\BaseInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Session\AccountInterface;

@@ @@
   /**
    * DRD entity.
    *
-   * @var \Drupal\drd\Entity\BaseInterface
+   * @var BaseInterface
    */
   protected $drdEntity;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


47) modules/contrib/drd/src/Plugin/Action/BaseConfigurableInterface.php:15

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function validateConfigurationForm(array &$form, FormStateInterface $form_state);
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function submitConfigurationForm(array &$form, FormStateInterface $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


48) modules/contrib/drd/src/Plugin/Action/Base.php:43

    ---------- begin diff ----------
@@ @@
   protected $output;

   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

   /**
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

   /**
-   * @var \Drupal\drd\SelectEntitiesInterface
+   * @var SelectEntitiesInterface
    */
   protected $entities;

   /**
-   * @var \Drupal\drd\HttpRequest
+   * @var HttpRequest
    */
   protected $httpRequest;

   /**
-   * @var \Drupal\drd\Logging
+   * @var Logging
    */
   protected $logging;

   /**
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

   /**
-   * @var \Drupal\drd\ActionManagerInterface
+   * @var ActionManagerInterface
    */
   protected $actionManager;

   /**
-   * @var \Drupal\drd\QueueManager
+   * @var QueueManager
    */
   protected $queueManager;

   /**
-   * @var \Drupal\drd\UpdateProcessor
+   * @var UpdateProcessor
    */
   protected $updateProcessor;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
-   * @param \Drupal\Core\Session\AccountInterface $current_user
-   * @param \Drupal\drd\SelectEntitiesInterface $entities
-   * @param \Drupal\drd\HttpRequest $http_request
-   * @param \Drupal\drd\Logging $logging
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
-   * @param \Drupal\drd\ActionManagerInterface $action_manager
-   * @param \Drupal\drd\QueueManager $queue_manager
-   * @param \Drupal\drd\UpdateProcessor $update_processor
+   * @param ConfigFactoryInterface $config_factory
+   * @param AccountInterface $current_user
+   * @param SelectEntitiesInterface $entities
+   * @param HttpRequest $http_request
+   * @param Logging $logging
+   * @param EntityTypeManagerInterface $entityTypeManager
+   * @param FileSystemInterface $file_system
+   * @param ModuleHandlerInterface $module_handler
+   * @param ActionManagerInterface $action_manager
+   * @param QueueManager $queue_manager
+   * @param UpdateProcessor $update_processor
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ConfigFactoryInterface $config_factory, AccountInterface $current_user, SelectEntitiesInterface $entities, HttpRequest $http_request, Logging $logging, EntityTypeManagerInterface $entityTypeManager, FileSystemInterface $file_system, ModuleHandlerInterface $module_handler, ActionManagerInterface $action_manager, QueueManager $queue_manager, UpdateProcessor $update_processor) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


49) modules/contrib/drd/src/Logging.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd;

+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
@@ @@
   protected $debug = FALSE;

   /**
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * The input-output console object for logging.
    *
-   * @var \Symfony\Component\Console\Style\SymfonyStyle
+   * @var SymfonyStyle
    */
   protected $io;

@@ @@
   /**
    * Logging constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerChannelFactory
+   * @param ConfigFactoryInterface $configFactory
+   * @param LoggerChannelFactoryInterface $loggerChannelFactory
    */
   public function __construct(ConfigFactoryInterface $configFactory, LoggerChannelFactoryInterface $loggerChannelFactory) {
     $this->debug = $configFactory->get('drd.general')->get('debug');
@@ @@
   /**
    * Set the input-output object for logging.
    *
-   * @param \Symfony\Component\Console\Style\SymfonyStyle $io
+   * @param SymfonyStyle $io
    *   The input-output object.
    */
   public function setIo(SymfonyStyle $io) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


50) modules/contrib/drd/src/HttpRequest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd;

+use Psr\Http\Message\ResponseInterface;
 use Drupal;
 use Drupal\drd\Entity\DomainInterface;
 use Exception;
@@ @@
   /**
    * The domain entity to communicate with.
    *
-   * @var \Drupal\drd\Entity\DomainInterface
+   * @var DomainInterface
    */
   protected $domain;

@@ @@
   /**
    * The response for the request.
    *
-   * @var \Psr\Http\Message\ResponseInterface
+   * @var ResponseInterface
    */
   protected $response;

@@ @@
   protected $remoteIsDrd;

   /**
-   * @var \Drupal\drd\Logging
+   * @var Logging
    */
   protected $logging;

@@ @@
   /**
    * HttpRequest constructor.
    *
-   * @param \Drupal\drd\Logging $logging
+   * @param Logging $logging
    */
   public function __construct(Logging $logging) {
     $this->logging = $logging;
@@ @@
   /**
    * Set the DRD domain entity.
    *
-   * @param \Drupal\drd\Entity\DomainInterface $domain
+   * @param DomainInterface $domain
    *   The domain entity.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


51) modules/contrib/drd/src/Form/Settings.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The path alias manager.
    *
-   * @var \Drupal\path_alias\AliasManagerInterface
+   * @var AliasManagerInterface
    */
   protected $aliasManager;

@@ @@
   /**
    * The path validator.
    *
-   * @var \Drupal\Core\Path\PathValidatorInterface
+   * @var PathValidatorInterface
    */
   protected $pathValidator;

@@ @@
   /**
    * The request context.
    *
-   * @var \Drupal\Core\Routing\RequestContext
+   * @var RequestContext
    */
   protected $requestContext;

   /**
-   * @var \Drupal\encrypt\EncryptionProfileManagerInterface
+   * @var EncryptionProfileManagerInterface
    */
   protected $encryptionProfileManager;

   /**
-   * @var \Drupal\drd\Encryption
+   * @var Encryption
    */
   protected $encryption;

   /**
-   * @var \Drupal\drd\EncryptionUpdate
+   * @var EncryptionUpdate
    */
   protected $encryptionUpdate;

@@ @@
   /**
    * Constructs a SiteInformationForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\path_alias\AliasManagerInterface $alias_manager
+   * @param AliasManagerInterface $alias_manager
    *   The path alias manager.
-   * @param \Drupal\Core\Path\PathValidatorInterface $path_validator
+   * @param PathValidatorInterface $path_validator
    *   The path validator.
-   * @param \Drupal\Core\Routing\RequestContext $request_context
+   * @param RequestContext $request_context
    *   The request context.
-   * @param \Drupal\encrypt\EncryptionProfileManagerInterface $encryption_profile_manager
-   * @param \Drupal\drd\Encryption $encryption
-   * @param \Drupal\drd\EncryptionUpdate $encryption_update
+   * @param EncryptionProfileManagerInterface $encryption_profile_manager
+   * @param Encryption $encryption
+   * @param EncryptionUpdate $encryption_update
    */
   public function __construct(ConfigFactoryInterface $config_factory, AliasManagerInterface $alias_manager, PathValidatorInterface $path_validator, RequestContext $request_context, EncryptionProfileManagerInterface $encryption_profile_manager, Encryption $encryption, EncryptionUpdate $encryption_update) {
     parent::__construct($config_factory);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


52) modules/contrib/drd/src/Form/EntityActions.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The route context object.
    *
-   * @var \Drupal\drd\ContextProvider\RouteContext
+   * @var RouteContext
    */
   private $context;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


53) modules/contrib/drd/src/Form/Actions.php:15

    ---------- begin diff ----------
@@ @@
 class Actions extends FormBase {

   /**
-   * @var \Drupal\drd\ActionWidgetInterface
+   * @var ActionWidgetInterface
    */
   protected $actionWidget;

@@ @@
   /**
    * Actions constructor.
    *
-   * @param \Drupal\drd\ActionWidgetInterface $actionWidget
+   * @param ActionWidgetInterface $actionWidget
    */
   public function __construct(ActionWidgetInterface $actionWidget) {
     $this->actionWidget = $actionWidget;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


54) modules/contrib/drd/src/Entity/ViewBuilder/Domain.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Entity\ViewBuilder;

+use Drupal\drd\Entity\DomainInterface;
 /**
  * View builder handler for drd_domain.
  *
@@ @@
    * {@inheritdoc}
    */
   public function buildComponents(array &$build, array $entities, array $displays, $view_mode) {
-    /** @var \Drupal\drd\Entity\DomainInterface[] $entities */
+    /** @var DomainInterface[] $entities */
     parent::buildComponents($build, $entities, $displays, $view_mode);

     if ($displays['drd_domain']->getComponent('monitoring')) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


55) modules/contrib/drd/src/Entity/ViewBuilder/Base.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Entity\ViewBuilder;

+use Drupal\drd\Entity\BaseInterface;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ @@
 abstract class Base extends EntityViewBuilder {

   /**
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;

   /**
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Base constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
-   * @param \Drupal\Core\Theme\Registry $theme_registry
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param EntityTypeInterface $entity_type
+   * @param EntityRepositoryInterface $entity_repository
+   * @param LanguageManagerInterface $language_manager
+   * @param Registry $theme_registry
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
+   * @param FormBuilderInterface $form_builder
+   * @param DateFormatterInterface $date_formatter
    */
   public function __construct(EntityTypeInterface $entity_type, EntityRepositoryInterface $entity_repository, LanguageManagerInterface $language_manager, Registry $theme_registry, EntityDisplayRepositoryInterface $entity_display_repository, FormBuilderInterface $form_builder, DateFormatterInterface $date_formatter) {
     parent::__construct($entity_type, $entity_repository, $language_manager, $theme_registry, $entity_display_repository);
@@ @@
    * {@inheritdoc}
    */
   public function buildComponents(array &$build, array $entities, array $displays, $view_mode) {
-    /** @var \Drupal\drd\Entity\BaseInterface[] $entities */
+    /** @var BaseInterface[] $entities */
     if (empty($entities)) {
       return;
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


56) modules/contrib/drd/src/Entity/ReleaseInterface.php:85

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the Release Major Version.
    *
-   * @return \Drupal\drd\Entity\MajorInterface|NULL
+   * @return MajorInterface|NULL
    *   Major Version of the Release.
    */
   public function getMajor();
@@ @@
   /**
    * Get the url that points to the project on drupal.org.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The Url.
    */
   public function getProjectLink(): Url;
@@ @@
   /**
    * Get the url that points to the release on drupal.org.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The Url.
    */
   public function getReleaseLink(): Url;
@@ @@
   /**
    * Get the url that points to the download on drupal.org.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The Url.
    */
   public function getDownloadLink(): Url;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


57) modules/contrib/drd/src/Entity/ProjectInterface.php:116

    ---------- begin diff ----------
@@ @@
   /**
    * Get project's URL on drupal.org.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The project url.
    */
   public function getProjectLink(): Url;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


58) modules/contrib/drd/src/Entity/MajorInterface.php:77

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the Major Version project.
    *
-   * @return \Drupal\drd\Entity\ProjectInterface|NULL
+   * @return ProjectInterface|NULL
    *   Project of the Major Version.
    */
   public function getProject();
@@ @@
   /**
    * Gets the Major Version parent project.
    *
-   * @return \Drupal\drd\Entity\ProjectInterface|NULL
+   * @return ProjectInterface|NULL
    *   Parent project of the Major Version.
    */
   public function getParentProject();
@@ @@
   /**
    * Gets the Major Version recommended release.
    *
-   * @return \Drupal\drd\Entity\ReleaseInterface|NULL
+   * @return ReleaseInterface|NULL
    *   Recommended release of the Major Version.
    */
   public function getRecommendedRelease();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


59) modules/contrib/drd/src/Entity/ListBuilder/ScriptType.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Entity\ListBuilder;

+use Drupal\drd\Entity\ScriptTypeInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;

@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity): array {
-    /** @var \Drupal\drd\Entity\ScriptTypeInterface $entity */
+    /** @var ScriptTypeInterface $entity */
     $row['label'] = $entity->label();
     $row['id'] = $entity->id();
     $row['interpreter'] = $entity->interpreter();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


60) modules/contrib/drd/src/Entity/ListBuilder/Script.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Entity\ListBuilder;

+use Drupal\drd\Entity\ScriptInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;

@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity): array {
-    /** @var \Drupal\drd\Entity\ScriptInterface $entity */
+    /** @var ScriptInterface $entity */
     $row['label'] = $entity->label();
     $row['id'] = $entity->id();
     $row['type'] = $entity->type();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


61) modules/contrib/drd/src/Entity/HostInterface.php:40

    ---------- begin diff ----------
@@ @@
    * @param array $properties
    *   Extra properties for selection.
    *
-   * @return \Drupal\drd\Entity\CoreInterface[]
+   * @return CoreInterface[]
    *   List of cores.
    */
   public function getCores(array $properties = []): array;
@@ @@
    * @param array $properties
    *   Extra properties for selection.
    *
-   * @return \Drupal\drd\Entity\DomainInterface[]
+   * @return DomainInterface[]
    *   List of domains.
    */
   public function getDomains(array $properties = []): array;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


62) modules/contrib/drd/src/Entity/Form/ScriptTypeDelete.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Entity\Form;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ @@

   /**
    * {@inheritdoc}
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $this->entity->delete();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


63) modules/contrib/drd/src/Entity/Form/ScriptType.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Entity\Form;

+use Drupal\drd\Entity\ScriptTypeInterface;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\drd\Entity\ScriptTypeInterface $scriptType */
+    /** @var ScriptTypeInterface $scriptType */
     $scriptType = $this->entity;
     $form['label'] = [
       '#type' => 'textfield',
@@ @@

   /**
    * {@inheritdoc}
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityStorageException
+   * @throws EntityMalformedException
    */
   public function save(array $form, FormStateInterface $form_state) {
     $scriptType = $this->entity;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


64) modules/contrib/drd/src/Entity/Form/ScriptDelete.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Entity\Form;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ @@

   /**
    * {@inheritdoc}
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $this->entity->delete();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


65) modules/contrib/drd/src/Entity/Form/Script.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Entity\Form;

+use Drupal\drd\Entity\ScriptInterface;
+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\drd\Entity\Script as ScriptEntity;
@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\drd\Entity\ScriptInterface $script */
+    /** @var ScriptInterface $script */
     $script = $this->entity;
     $form['label'] = [
       '#type' => 'textfield',
@@ @@

   /**
    * {@inheritdoc}
-   * @throws \Drupal\Core\Entity\EntityMalformedException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityMalformedException
+   * @throws EntityStorageException
    */
   public function save(array $form, FormStateInterface $form_state) {
     /** @noinspection DuplicatedCode */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


66) modules/contrib/drd/src/Entity/Form/RequirementSettings.php:28

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


67) modules/contrib/drd/src/Entity/Form/Requirement.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Entity\Form;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Language\Language;
@@ @@

   /**
    * {@inheritdoc}
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function save(array $form, FormStateInterface $form_state) {
     $requirement = $this->entity;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


68) modules/contrib/drd/src/Entity/Form/ReleaseSettings.php:28

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


69) modules/contrib/drd/src/Entity/Form/Release.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Entity\Form;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Language\Language;
@@ @@

   /**
    * {@inheritdoc}
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function save(array $form, FormStateInterface $form_state) {
     $entity = $this->entity;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


70) modules/contrib/drd/src/Entity/Form/ProjectSettings.php:28

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


71) modules/contrib/drd/src/Entity/Form/Project.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Entity\Form;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Language\Language;
@@ @@

   /**
    * {@inheritdoc}
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function save(array $form, FormStateInterface $form_state) {
     $entity = $this->entity;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


72) modules/contrib/drd/src/Entity/Form/MajorSettings.php:28

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


73) modules/contrib/drd/src/Entity/Form/HostSettings.php:28

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


74) modules/contrib/drd/src/Entity/Form/HostDelete.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Entity\Form;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ @@

   /**
    * {@inheritdoc}
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $this->entity->delete();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


75) modules/contrib/drd/src/Entity/Form/Host.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Entity\Form;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Language\Language;
@@ @@

   /**
    * {@inheritdoc}
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function save(array $form, FormStateInterface $form_state) {
     /* @var \Drupal\drd\Entity\HostInterface $entity */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


76) modules/contrib/drd/src/Entity/Form/DomainSettings.php:28

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


77) modules/contrib/drd/src/Entity/Form/DomainReset.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Entity\Form;

+use Drupal\drd\Entity\DomainInterface;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ @@
    * {@inheritdoc}
    */
   public function getCancelUrl(): Url {
-    /** @var \Drupal\drd\Entity\DomainInterface $domain */
+    /** @var DomainInterface $domain */
     $domain = $this->entity;
     return new Url('entity.drd_core.canonical', ['drd_core' => $domain->getCore()->id()]);
   }
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\drd\Entity\DomainInterface $domain */
+    /** @var DomainInterface $domain */
     $domain = $this->entity;
     if ($form_state->getValue('cryptsettings')) {
       $domain->resetCryptSettings();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


78) modules/contrib/drd/src/Entity/Form/Domain.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Entity\Form;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Language\Language;
@@ @@

   /**
    * {@inheritdoc}
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function save(array $form, FormStateInterface $form_state) {
     $entity = $this->entity;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


79) modules/contrib/drd/src/Entity/Form/CoreUpdateLog.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Entity\Form;

+use Drupal\drd\Entity\CoreInterface;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * DRD Core entity for which we handle update logs.
    *
-   * @var \Drupal\drd\Entity\CoreInterface
+   * @var CoreInterface
    */
   protected $core;

   /**
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * CoreUpdateLog constructor.
    *
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    */
   public function __construct(DateFormatterInterface $date_formatter) {
     $this->dateFormatter = $date_formatter;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


80) modules/contrib/drd/src/Entity/Form/CoreSettings.php:28

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


81) modules/contrib/drd/src/Entity/Form/CoreDelete.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Entity\Form;

+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\drd\Entity\CoreInterface;
+use Drupal\drd\Entity\DomainInterface;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ @@

   /**
    * {@inheritdoc}
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\drd\Entity\CoreInterface $core */
+    /** @var CoreInterface $core */
     $core = $this->entity;

     // Delete all domains first.
     foreach ($core->getDomains() as $domain) {
-      /** @var \Drupal\drd\Entity\DomainInterface $domain */
+      /** @var DomainInterface $domain */
       $domain->delete();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


82) modules/contrib/drd/src/Entity/Form/Core.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Entity\Form;

+use Drupal\drd\Entity\CoreInterface;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\drd\Entity\DomainInterface;
 use Drupal;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
@@ @@
 class Core extends ContentEntityForm {

   /**
-   * @var \Drupal\drd\Plugin\Auth\Manager
+   * @var Manager
    */
   protected $authManager;

   /**
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

   /**
-   * @var \Drupal\drd\Update\ManagerStorageInterface
+   * @var ManagerStorageInterface
    */
   protected $managerStorage;

@@ @@
   /**
    * Core constructor.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
-   * @param \Drupal\Component\Datetime\TimeInterface $time
-   * @param \Drupal\drd\Plugin\Auth\Manager $auth_manager
-   * @param \Symfony\Component\HttpFoundation\Request $request
-   * @param \Drupal\drd\Update\ManagerStorageInterface $manager_storage
+   * @param EntityRepositoryInterface $entity_repository
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param TimeInterface $time
+   * @param Manager $auth_manager
+   * @param Request $request
+   * @param ManagerStorageInterface $manager_storage
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeBundleInfoInterface $entity_type_bundle_info, TimeInterface $time, Manager $auth_manager, Request $request, ManagerStorageInterface $manager_storage) {
     parent::__construct($entity_repository, $entity_type_bundle_info, $time);
@@ @@
    *
    * @param array $form
    *   Form definition.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    *
    * @return bool|string|array
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Response object with instructions on how to adjust the form.
    */
   public function validateUrlAjax(array &$form, FormStateInterface $form_state): AjaxResponse {
@@ @@
    * {@inheritdoc}
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\drd\Entity\CoreInterface $core */
+    /** @var CoreInterface $core */
     $core = parent::validateForm($form, $form_state);
     if (!$form_state->hasAnyErrors() && $core->isNew()) {
       $error = $this->validateUrl($form, $form_state);
@@ @@

   /**
    * {@inheritdoc}
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\drd\Entity\CoreInterface $core */
+    /** @var CoreInterface $core */
     $core = $this->entity;

     $core->set('updsettings', $this->managerStorage->globalFormValues($form, $form_state));
@@ @@
         '%label' => $core->label(),
       ]));

-      /** @var \Drupal\drd\Entity\DomainInterface $domain */
+      /** @var DomainInterface $domain */
       $domain = $form_state->getTemporaryValue('drd_domain');
       $domain->setCore($core);
       $domain->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


83) modules/contrib/drd/src/Entity/DomainInterface.php:49

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the Domain core.
    *
-   * @return \Drupal\drd\Entity\CoreInterface|NULL
+   * @return CoreInterface|NULL
    *   Core of the Domain.
    */
   public function getCore();
@@ @@
    * @param string $query
    *   The query of the remote request.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   Fully setup URL object.
    */
   public function buildUrl($query = ''): Url;
@@ @@
    * @var string $label
    *   The label for the link.
    *
-   * @return \Drupal\Core\GeneratedLink
+   * @return GeneratedLink
    *   The rendered link.
    */
   public function getRemoteLoginLink($label): GeneratedLink;
@@ @@
    * @var bool $initial
    *   Whether this is the initial setup or not.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The redirect URL after remote configuration.
    */
   public function getRemoteSetupRedirect($initial = FALSE): Url;
@@ @@
    * @var bool $initial
    *   Whether this is the initial setup or not.
    *
-   * @return \Drupal\Core\GeneratedLink
+   * @return GeneratedLink
    *   The URL to get to the remote configuration form.
    */
   public function getRemoteSetupLink($label, $initial = FALSE): GeneratedLink;
@@ @@
   /**
    * Set project releases being used by this domain.
    *
-   * @param \Drupal\drd\Entity\ReleaseInterface[] $releases
+   * @param ReleaseInterface[] $releases
    *   List of release entities.
    *
    * @return $this
@@ @@
   /**
    * Get project releases being used by this domain.
    *
-   * @return \Drupal\drd\Entity\ReleaseInterface[]
+   * @return ReleaseInterface[]
    *   List of releases.
    */
   public function getReleases(): array;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


84) modules/contrib/drd/src/Entity/Domain.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Entity;

+use Drupal\drd\ActionManagerInterface;
+use Drupal\drd\HttpRequest;
 use Drupal\Core\Entity\EntityStorageException;
 use Drupal;
 use Drupal\Component\Render\FormattableMarkup;
@@ @@
   protected $cleanUrl = TRUE;

   /**
-   * @var \Drupal\drd\ActionManagerInterface
+   * @var ActionManagerInterface
    */
   protected $actionManager;

@@ @@
   public function getSupportedCryptMethods($cleanUrl = TRUE) {
     $this->cleanUrl = $cleanUrl;

-    /** @var \Drupal\drd\HttpRequest $request */
+    /** @var HttpRequest $request */
     $request = Drupal::service('drd.http_request');
     $request->setDomain($this)
       ->setQuery('drd-agent-crypt')
@@ @@
       $crypt = 'OpenSSL';
       $crypt_setting = ['cipher' => 'aes-128-cbc'];
     }
-    $crypt_setting['password'] = user_password(50);
+    $crypt_setting['password'] = \Drupal::service('password_generator')->generate(50);
     $this->set('auth', 'shared_secret');
     $this->set('crypt', $crypt);
     $this
-      ->setAuthSetting(['shared_secret' => ['secret' => user_password(50)]])
+      ->setAuthSetting(['shared_secret' => ['secret' => \Drupal::service('password_generator')->generate(50)]])
       ->setCryptSetting([$crypt => $crypt_setting]);
   }
    ----------- end diff -----------

Applied rules:
 * UserPasswordRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


85) modules/contrib/drd/src/Entity/CoreInterface.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the Core host.
    *
-   * @return \Drupal\drd\Entity\HostInterface|NULL
+   * @return HostInterface|NULL
    *   Host of the Core.
    */
   public function getHost();
@@ @@
   /**
    * Gets the Core drupal release.
    *
-   * @return \Drupal\drd\Entity\ReleaseInterface|NULL
+   * @return ReleaseInterface|NULL
    *   Drupal release of the Core.
    */
   public function getDrupalRelease();
@@ @@
   /**
    * Get the update plugin for the core.
    *
-   * @return \Drupal\drd\Update\PluginStorageInterface
+   * @return PluginStorageInterface
    *   The update plugin.
    * @throws \Exception
    */
@@ @@
    * @param array $properties
    *   Properties for the query.
    *
-   * @return \Drupal\drd\Entity\DomainInterface[]
+   * @return DomainInterface[]
    *   List of domains of this core.
    */
   public function getDomains(array $properties = []): array;
@@ @@
   /**
    * Get the first active domain for this core.
    *
-   * @return \Drupal\drd\Entity\DomainInterface|null
+   * @return DomainInterface|null
    *   A domain entity.
    */
   public function getFirstActiveDomain();
@@ @@
    * @param bool $forceLockedSecurity
    *   Whether to locked security releases or not.
    *
-   * @return \Drupal\drd\Entity\ReleaseInterface[]
+   * @return ReleaseInterface[]
    *   List of release entities.
    */
   public function getAvailableUpdates($includeLocked = FALSE, $securityOnly = FALSE, $forceLockedSecurity = FALSE): array;
@@ @@
   /**
    * Set project releases being locked for this core.
    *
-   * @param \Drupal\drd\Entity\ReleaseInterface[] $releases
+   * @param ReleaseInterface[] $releases
    *   List of locked release entities.
    *
    * @return $this
@@ @@
   /**
    * Get project releases being locked by this core.
    *
-   * @return \Drupal\drd\Entity\ReleaseInterface[]
+   * @return ReleaseInterface[]
    *   List of releases.
    */
   public function getLockedReleases(): array;
@@ @@
   /**
    * Check if a release is locked for this core.
    *
-   * @param \Drupal\drd\Entity\ReleaseInterface $release
+   * @param ReleaseInterface $release
    *   The release to ckeck.
    * @param bool $checkGlobal
    *   Set to True if you also want to check global lock status.
@@ @@
   /**
    * Lock a release for this core.
    *
-   * @param \Drupal\drd\Entity\ReleaseInterface $release
+   * @param ReleaseInterface $release
    *   The release which should be locked.
    *
    * @return $this
@@ @@
   /**
    * Unlock a release for this core.
    *
-   * @param \Drupal\drd\Entity\ReleaseInterface $release
+   * @param ReleaseInterface $release
    *   The release which should be unlocked.
    *
    * @return $this
@@ @@
   /**
    * Set project releases being hacked on this core.
    *
-   * @param \Drupal\drd\Entity\ReleaseInterface[] $releases
+   * @param ReleaseInterface[] $releases
    *   List of hacked release entities.
    *
    * @return $this
@@ @@
   /**
    * Get project releases being hacked on this core.
    *
-   * @return \Drupal\drd\Entity\ReleaseInterface[]
+   * @return ReleaseInterface[]
    *   List of releases.
    */
   public function getHackedReleases(): array;
@@ @@
   /**
    * Check if a release is hacked on this core.
    *
-   * @param \Drupal\drd\Entity\ReleaseInterface $release
+   * @param ReleaseInterface $release
    *   The release to ckeck.
    *
    * @return bool
@@ @@
   /**
    * Mark a release as hacked on this core.
    *
-   * @param \Drupal\drd\Entity\ReleaseInterface $release
+   * @param ReleaseInterface $release
    *   The release which should be marked as hacked.
    *
    * @return $this
@@ @@
   /**
    * Mark a release as unhacked on this core.
    *
-   * @param \Drupal\drd\Entity\ReleaseInterface $release
+   * @param ReleaseInterface $release
    *   The release which should be marked as unhacked.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


86) modules/contrib/drd/src/Entity/Core.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Entity;

+use Drupal\drd\Update\ManagerStorageInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal;
@@ @@
    * {@inheritdoc}
    */
   public function getUpdatePlugin(): PluginStorageInterface {
-    /** @var \Drupal\drd\Update\ManagerStorageInterface $updateManager */
+    /** @var ManagerStorageInterface $updateManager */
     $updateManager = Drupal::service('plugin.manager.drd_update.storage');
     return $updateManager->executableInstance($this->getUpdateSettings());
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


87) modules/contrib/drd/src/Entity/BaseInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Entity;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
    *   unpublished.
    *
    * @return $this
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function setPublished($published): self;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


88) modules/contrib/drd/src/EncryptionUpdate.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The encryption service.
    *
-   * @var \Drupal\drd\Encryption
+   * @var Encryption
    */
   protected $encryptionService;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * EncryptionUpdate constructor.
    *
-   * @param \Drupal\drd\Encryption $encryptionService
+   * @param Encryption $encryptionService
    *   DRD encryption service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
    */
   public function __construct(Encryption $encryptionService, ConfigFactoryInterface $configFactory, EntityTypeManagerInterface $entityTypeManager) {
@@ @@
           // TODO: Log this exception.
           continue;
         }
-        /** @var \Drupal\drd\EncryptionEntityInterface $entity */
+        /** @var EncryptionEntityInterface $entity */
         foreach ($storage->loadMultiple() as $entity) {
           foreach ($entity->getEncryptedFieldNames() as $encryptedFieldName) {
             if ($entity instanceof ContentEntityInterface) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


89) modules/contrib/drd/src/Encryption.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The encryption service.
    *
-   * @var \Drupal\encrypt\EncryptService
+   * @var EncryptService
    */
   protected $encryptionService;

@@ @@
   /**
    * The encryption profile.
    *
-   * @var \Drupal\encrypt\Entity\EncryptionProfile
+   * @var EncryptionProfile
    */
   protected $encryptionProfile;

@@ @@
   /**
    * The old encryption profile, only set if a profile change happened.
    *
-   * @var \Drupal\encrypt\Entity\EncryptionProfile
+   * @var EncryptionProfile
    */
   protected $oldEncryptionProfile;

@@ @@
   /**
    * Constructs an Encrypt.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\encrypt\EncryptService $encryptionService
+   * @param EncryptService $encryptionService
    *   The encryption service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EncryptService $encryptionService = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


90) modules/contrib/drd/src/DomainLocalCopy.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Database\Database;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * DRD settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $drdConfig;

@@ @@
   /**
    * DRD domain entity for which to create a local copy.
    *
-   * @var \Drupal\drd\Entity\DomainInterface
+   * @var DomainInterface
    */
   protected $domain;

@@ @@
   protected $coreVersion;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

   /**
-   * @var \Drupal\drd\Encryption
+   * @var Encryption
    */
   protected $encryption;

@@ @@
   /**
    * DomainLocalCopy constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
-   * @param \Drupal\drd\Encryption $encryption
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param FileSystemInterface $file_system
+   * @param ConfigFactoryInterface $config_factory
+   * @param Encryption $encryption
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, FileSystemInterface $file_system, ConfigFactoryInterface $config_factory, Encryption $encryption) {
     $this->entityTypeManager = $entity_type_manager;
@@ @@
   /**
    * Set the DRD domain entity.
    *
-   * @param \Drupal\drd\Entity\DomainInterface $domain
+   * @param DomainInterface $domain
    *   The domain entity.
    *
    * @return $this
@@ @@

     $this->mkdir($this->settingsDir);

-    $templatefilename = drupal_get_path('module', 'drd') . '/templates/DomainLocalCopy.v' . $this->coreVersion . '.settings.php.twig';
+    $templatefilename = \Drupal::service('extension.list.module')->getPath('drd') . '/templates/DomainLocalCopy.v' . $this->coreVersion . '.settings.php.twig';

     $twig_loader = new Twig_Loader_Array([]);
     $twig = new Twig_Environment($twig_loader);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


91) modules/contrib/drd/src/Crypt/BaseMethodInterface.php:78

    ---------- begin diff ----------
@@ @@
   /**
    * Retrieve values from settings form.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


92) modules/contrib/drd/src/Crypt/BaseMethod.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Crypt;

+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\Core\Messenger\Messenger;
+use Drupal\drd\Encryption;
+use Drupal\Core\Extension\ModuleHandler;
 use Exception;
 use Symfony\Component\DependencyInjection\ContainerInterface;

@@ @@
 abstract class BaseMethod implements BaseMethodInterface {

   /**
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected $container;

   /**
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

   /**
-   * @var \Drupal\Core\Messenger\Messenger|object|null
+   * @var Messenger|object|null
    */
   protected $messenger;

   /**
-   * @var \Drupal\drd\Encryption|object|null
+   * @var Encryption|object|null
    */
   protected $encryption;

   /**
-   * @var \Drupal\Core\Extension\ModuleHandler|object|null
+   * @var ModuleHandler|object|null
    */
   protected $moduleHandler;

@@ @@
   /**
    * BaseMethod constructor.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    */
   public function __construct(ContainerInterface $container) {
     $this->container = $container;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


93) modules/contrib/drd/src/Controller/Domain.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Controller;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Routing\TrustedRedirectResponse;
 use Drupal\drd\Entity\DomainInterface;
@@ @@
    * Return from remote after initially setting the configuration to then
    * retrieve core details and all other hosted domains.
    *
-   * @param \Drupal\drd\Entity\DomainInterface $domain
+   * @param DomainInterface $domain
    *   Domain entity which just has been configured.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Destination where to go next.
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    * @throws \Exception
    */
   public function returnFromRemote(DomainInterface $domain): RedirectResponse {
@@ @@
   /**
    * Redirect to the remote domain by opening a new session.
    *
-   * @param \Drupal\drd\Entity\DomainInterface $domain
+   * @param DomainInterface $domain
    *   Domain entity for which to start a remote user session.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Remote destination with the established session or local domain page if
    *   session couldn't be established.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


94) modules/contrib/drd/src/Controller/Dashboard.php:11

    ---------- begin diff ----------
@@ @@
 class Dashboard extends ControllerBase {

   /**
-   * @var \Drupal\drd\Widgets
+   * @var Widgets
    */
   protected $widgets;

@@ @@
   /**
    * Dashboard constructor.
    *
-   * @param \Drupal\drd\Widgets $widgets
+   * @param Widgets $widgets
    */
   public function __construct(Widgets $widgets) {
     $this->widgets = $widgets;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


95) modules/contrib/drd/src/Controller/Activity.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Controller;

+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Link;
@@ @@
   /**
    * Read the activity log and render that into a view.
    *
-   * @param \Drupal\drd\Entity\DomainInterface $drd_domain
+   * @param DomainInterface $drd_domain
    *   The domain for which to display the activity.
    *
    * @return array
    *   Renderable array of the domain's activity.
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function view(DomainInterface $drd_domain): array {
     $rows = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


96) modules/contrib/drd/src/ContextProvider/RouteContext.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\ContextProvider;

+use Drupal\drd\Entity\BaseInterface;
 use Drupal;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Plugin\Context\Context;
@@ @@
   /**
    * The route match object.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * The DRD entity if we are on a DRD entity context.
    *
-   * @var \Drupal\drd\Entity\BaseInterface
+   * @var BaseInterface
    */
   protected $entity;

@@ @@
   /**
    * Constructs a new DrdRouteContext.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match object.
    */
   public function __construct(RouteMatchInterface $route_match) {
@@ @@
   /**
    * Determine the entity of the current context.
    *
-   * @return \Drupal\drd\Entity\BaseInterface|bool
+   * @return BaseInterface|bool
    *   The entity if in DRD entity context or FALSE otherwise.
    */
   public function getEntity() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


97) modules/contrib/drd/src/Commands/DrdCommands.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Commands;

+use Drupal\Core\Entity\EntityInterface;
 use Consolidation\AnnotatedCommand\CommandData;
 use Consolidation\OutputFormatters\StructuredData\RowsOfFields;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
@@ @@
   /**
    * DRD action which will be executed.
    *
-   * @var \Drupal\drd\Plugin\Action\BaseInterface
+   * @var BaseInterface
    */
   protected $action;

@@ @@
   /**
    * List of entities for which the action will be executed.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]
+   * @var EntityInterface[]
    */
   protected $entities;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

   /**
-   * @var \Drupal\drd\Logging
+   * @var Logging
    */
   protected $logging;

   /**
-   * @var \Drupal\drd\QueueManager
+   * @var QueueManager
    */
   protected $queueManager;

   /**
-   * @var \Drupal\drd\Cleanup
+   * @var Cleanup
    */
   protected $cleanup;

   /**
-   * @var \Drupal\drd\SelectEntitiesInterface
+   * @var SelectEntitiesInterface
    */
   protected $entitiesService;

   /**
-   * @var \Drupal\drd\ActionManagerInterface
+   * @var ActionManagerInterface
    */
   protected $actionManager;

@@ @@
   /**
    * Constructor for Drush commands.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Session\AccountInterface $current_user
-   * @param \Drupal\drd\Logging $logging
-   * @param \Drupal\drd\SelectEntitiesInterface $entities_service
-   * @param \Drupal\drd\QueueManager $queue_manager
-   * @param \Drupal\drd\Cleanup $cleanup
-   * @param \Drupal\drd\ActionManagerInterface $actionManager
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param AccountInterface $current_user
+   * @param Logging $logging
+   * @param SelectEntitiesInterface $entities_service
+   * @param QueueManager $queue_manager
+   * @param Cleanup $cleanup
+   * @param ActionManagerInterface $actionManager
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, AccountInterface $current_user, Logging $logging, SelectEntitiesInterface $entities_service, QueueManager $queue_manager, Cleanup $cleanup, ActionManagerInterface $actionManager) {
     parent::__construct();
@@ @@
   /**
    * Callback to validate arguments from the command line.
    *
-   * @param \Consolidation\AnnotatedCommand\CommandData $commandData
+   * @param CommandData $commandData
    *   Source of the command data.
    * @param array $arguments
    *   List of argument ids that are expected from the command line.
@@ @@
   /**
    * Load and configure service to select entities.
    *
-   * @return \Drupal\drd\SelectEntitiesInterface
+   * @return SelectEntitiesInterface
    *   DRD service for entity selction.
    */
   protected function service(): SelectEntitiesInterface {
@@ @@
       return $this;
     }
     try {
-      /** @var \Drupal\Core\Session\AccountInterface $account */
+      /** @var AccountInterface $account */
       $account = $this->entityTypeManager->getStorage('user')->load(1);
       $this->currentUser->setAccount($account);
     }
@@ @@
   /**
    * Validation callback for the DomainMove command.
    *
-   * @param \Consolidation\AnnotatedCommand\CommandData $commandData
+   * @param CommandData $commandData
    *   The command data to validate.
    *
    * @hook validate drd:domainmove
@@ @@
   /**
    * Validation callback for the Download command.
    *
-   * @param \Consolidation\AnnotatedCommand\CommandData $commandData
+   * @param CommandData $commandData
    *   The command data to validate.
    *
    * @hook validate drd:download
@@ @@
    * @param string $tag
    *   The tag for which to list actions.
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return RowsOfFields
    *   The formatted rows with fields.
    * @command drd:list:actions
    * @table-style default
@@ @@
    *   type: Type
    *   label: Label
    * @default-fields id,type,label
-   *
    */
   public function listActions($tag): RowsOfFields {
     $this->actionKey = 'drd_action_list_action';
     $this->setOutput(new NullOutput());
     $rows = [];
-    /** @var \Drupal\drd\Plugin\Action\BaseInterface $action */
+    /** @var BaseInterface $action */
     foreach ($this->actionManager->getActionsByTerm($tag) as $action) {
       $rows[] = [
         'id' => $action->getPluginId(),
@@ @@
    *   host-label: Host
    * @default-fields core-id,core-label,host-label
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return RowsOfFields
    *   The formatted rows with fields.
    */
   public function listCores(array $options = [
@@ @@
    *   host-label: Host
    * @default-fields domain-id,domain-label,domain,core-label,host-label
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return RowsOfFields
    *   The formatted rows with fields.
    */
   public function listDomains(array $options = [
@@ @@
    *   host-label: Host
    * @default-fields host-id,host-label
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return RowsOfFields
    *   The formatted rows with fields.
    */
   public function listHosts(array $options = [
@@ @@
   /**
    * Validation callback for the MaintenanceMode command.
    *
-   * @param \Consolidation\AnnotatedCommand\CommandData $commandData
+   * @param CommandData $commandData
    *   The command data to validate.
    *
    * @hook validate drd:maintenancemode
@@ @@
   /**
    * Validation callback for the Php command.
    *
-   * @param \Consolidation\AnnotatedCommand\CommandData $commandData
+   * @param CommandData $commandData
    *   The command data to validate.
    *
    * @hook validate drd:php
@@ @@
   /**
    * Validation callback for the UserCredential command.
    *
-   * @param \Consolidation\AnnotatedCommand\CommandData $commandData
+   * @param CommandData $commandData
    *   The command data to validate.
    *
    * @hook validate drd:user:credentials
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


98) modules/contrib/drd/src/Command/BaseEntitySelect.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Load and configure service to select entities.
    *
-   * @param \Symfony\Component\Console\Input\InputInterface $input
+   * @param InputInterface $input
    *   The input interface from console.
    *
-   * @return \Drupal\drd\SelectEntitiesInterface
+   * @return SelectEntitiesInterface
    *   DRD service for entity selction.
    */
   protected function getService(InputInterface $input): SelectEntitiesInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


99) modules/contrib/drd/src/Cleanup.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd;

+use Drupal\drd\Entity\CoreInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * Cleanup constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection to be used.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory, Connection $database) {
@@ @@
     // Remember core versions.
     $cores = [];
     foreach (Core::loadMultiple() as $core) {
-      /** @var \Drupal\drd\Entity\CoreInterface $core */
+      /** @var CoreInterface $core */
       $cores[] = [
         'core' => $core,
         'version' => ($release = $core->getDrupalRelease()) ? $release->getVersion() : '',
@@ @@

     // Re-create Drupal core versions.
     foreach ($cores as $item) {
-      /** @var \Drupal\drd\Entity\CoreInterface $core */
+      /** @var CoreInterface $core */
       $core = $item['core'];
       $release = Release::findOrCreate('core', 'drupal', $item['version']);
       try {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


100) modules/contrib/drd/src/Annotation/Update.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The administrative label of the DRD Update.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


101) modules/contrib/drd/src/Annotation/Auth.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


102) modules/contrib/drd/src/ActionWidgetInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd;

+use Drupal\drd\Plugin\Action\BaseInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\system\ActionConfigEntityInterface;

@@ @@
   /**
    * Get all action plugins.
    *
-   * @return \Drupal\drd\Plugin\Action\BaseInterface[]
+   * @return BaseInterface[]
    *   All action plugins depending on mode and/or term.
    */
   public function getActionPlugins(): array;
@@ @@
   /**
    * Get the selected action.
    *
-   * @return \Drupal\system\ActionConfigEntityInterface
+   * @return ActionConfigEntityInterface
    *   The selected action.
    */
   public function getSelectedAction(): ActionConfigEntityInterface;
@@ @@
    *
    * @param array $form
    *   The form array .
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    * @param array $options
    *   Options for the form.
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function validateForm(array &$form, FormStateInterface $form_state);
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function submitForm(array &$form, FormStateInterface $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


103) modules/contrib/drd/src/ActionWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd;

+use Drupal\taxonomy\Entity\Term;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\drd\Entity\BaseInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Messenger\MessengerTrait;
@@ @@
   /**
    * Term for action manager.
    *
-   * @var \Drupal\taxonomy\Entity\Term
+   * @var Term
    */
   private $term;

@@ @@
   /**
    * Selected action entity.
    *
-   * @var \Drupal\system\ActionConfigEntityInterface
+   * @var ActionConfigEntityInterface
    */
   private $action;

@@ @@
   /**
    * An array of actions that can be executed.
    *
-   * @var \Drupal\system\ActionConfigEntityInterface[]
+   * @var ActionConfigEntityInterface[]
    */
   private $actions = [];

@@ @@
   /**
    * The action storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $actionStorage;

@@ @@
   /**
    * List of entities for which actions should be executed.
    *
-   * @var \Drupal\drd\Entity\BaseInterface[]
+   * @var BaseInterface[]
    */
   protected $entities;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\drd\QueueManager
+   * @var QueueManager
    */
   protected $queueManager;

@@ @@
   /**
    * ActionWidget constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
-   * @param \Drupal\drd\QueueManager $queueManager
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @param EntityTypeManagerInterface $entityTypeManager
+   * @param QueueManager $queueManager
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, QueueManager $queueManager) {
     $this->entityTypeManager = $entityTypeManager;
@@ @@
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $this->action = $this->actions[$form_state->getValue('action')];
-    /** @var \Drupal\drd\Plugin\Action\BaseEntityInterface $actionPlugin */
+    /** @var BaseEntityInterface $actionPlugin */
     $actionPlugin = $this->action->getPlugin();
     if ($actionPlugin instanceof BaseConfigurableInterface) {
       $actionPlugin->submitConfigurationForm($form, $form_state);
@@ @@

     if ($actionPlugin instanceof BaseEntityInterface) {
       $permittedEntities = [];
-      /** @var \Drupal\drd\Entity\BaseInterface $entity */
+      /** @var BaseInterface $entity */
       foreach ($this->entities as $entity) {
         // Skip execution if the user did not have access.
         if (!$actionPlugin->access($entity)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


104) modules/contrib/drd/src/ActionPermissions.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\system\ActionConfigEntityInterface;
+use Drupal\drd\Plugin\Action\BaseInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
 class ActionPermissions implements ContainerInjectionInterface {

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * ActionPermissions constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
     $this->entityTypeManager = $entity_type_manager;
@@ @@

   /**
    * @return array
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function permissions(): array {
     $actionStorage = $this->entityTypeManager->getStorage('action');
     $actions = array_filter($actionStorage->loadMultiple(),
       static function ($action) {
-        /** @var \Drupal\system\ActionConfigEntityInterface $action */
+        /** @var ActionConfigEntityInterface $action */
         return in_array($action->getType(), [
           'drd',
           'drd_host',
@@ @@
       });

     $permissions = [];
-    /** @var \Drupal\system\ActionConfigEntityInterface $action */
+    /** @var ActionConfigEntityInterface $action */
     foreach ($actions as $action) {
-      /** @var \Drupal\drd\Plugin\Action\BaseInterface $drdAction */
+      /** @var BaseInterface $drdAction */
       $drdAction = $action->getPlugin();
       $permissions[$drdAction->getPluginId()] = [
         'title' => t('Execute action @name', ['@name' => $action->getPlugin()->getPluginDefinition()['label']]),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


105) modules/contrib/drd/src/ActionManager.php:17

    ---------- begin diff ----------
@@ @@
 class ActionManager extends CoreActionManager implements ActionManagerInterface {

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


106) modules/contrib/drd/modules/drd_pi_platformsh/src/Entity/AccountForm.php:15

    ---------- begin diff ----------
@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\drd_pi_platformsh\Entity\AccountInterface $platformsh_account */
+    /** @var AccountInterface $platformsh_account */
     $platformsh_account = $this->entity;
     $form['api_token'] = [
       '#type' => 'textfield',
@@ @@
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     parent::submitForm($form, $form_state);
-    /** @var \Drupal\drd_pi_platformsh\Entity\AccountInterface $platformsh_account */
+    /** @var AccountInterface $platformsh_account */
     $platformsh_account = $this->entity;
     $platformsh_account->setApiToken($form_state->getValue('api_token'));
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


107) modules/contrib/drd/modules/drd_pi_platformsh/src/Entity/Account.php:53

    ---------- begin diff ----------
@@ @@
   /**
    * The client object to talk to the PlatformSH platform.
    *
-   * @var \Platformsh\Client\PlatformClient
+   * @var PlatformClient
    */
   protected $client;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


108) modules/contrib/drd/modules/drd_pi_pantheon/src/Entity/AccountForm.php:15

    ---------- begin diff ----------
@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\drd_pi_pantheon\Entity\AccountInterface $pantheon_account */
+    /** @var AccountInterface $pantheon_account */
     $pantheon_account = $this->entity;
     $form['machine_token'] = [
       '#type' => 'textfield',
@@ @@
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     parent::submitForm($form, $form_state);
-    /** @var \Drupal\drd_pi_pantheon\Entity\AccountInterface $pantheon_account */
+    /** @var AccountInterface $pantheon_account */
     $pantheon_account = $this->entity;
     $pantheon_account->setMachineToken($form_state->getValue('machine_token'));
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


109) modules/contrib/drd/modules/drd_pi_acquia/src/Entity/AccountForm.php:15

    ---------- begin diff ----------
@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\drd_pi_acquia\Entity\AccountInterface $acquia_account */
+    /** @var AccountInterface $acquia_account */
     $acquia_account = $this->entity;

     $form['email'] = [
@@ @@
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     parent::submitForm($form, $form_state);
-    /** @var \Drupal\drd_pi_acquia\Entity\AccountInterface $acquia_account */
+    /** @var AccountInterface $acquia_account */
     $acquia_account = $this->entity;
     $acquia_account->setPrivateKey($form_state->getValue('private_key'));
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


110) modules/contrib/drd/modules/drd_pi/src/Plugin/Block/WidgetPlatforms.php:90

    ---------- begin diff ----------
@@ @@
   /**
    * Render ths table with accounts and entities and how many of each exist.
    *
-   * @return \Drupal\Component\Render\FormattableMarkup
+   * @return FormattableMarkup
    *   The formattable markup with the content.
    */
   protected function entitiesTable(): FormattableMarkup {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


111) modules/contrib/drd/modules/drd_pi/src/Plugin/Action/Sync.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd_pi\Plugin\Action;

+use Drupal\drd_pi\DrdPiAccountInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\drd\Plugin\Action\BaseGlobal;
@@ @@
   /**
    * Return a list of all configured accounts of this type.
    *
-   * @return \Drupal\drd_pi\DrdPiAccountInterface[]
+   * @return DrdPiAccountInterface[]
    *   List of accounts.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getAccounts(): array {
     $accounts = [];
@@ @@
     foreach ($this->entityTypeManager->getDefinitions() as $definition) {
       if ($definition->entityClassImplements(DrdPiAccount::class)) {
         $storage = $this->entityTypeManager->getStorage($definition->id());
-        /** @var \Drupal\drd_pi\DrdPiAccountInterface $account */
+        /** @var DrdPiAccountInterface $account */
         foreach ($storage->loadMultiple() as $account) {
           if ($account->status()) {
             $accounts[] = $account;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


112) modules/contrib/drd/modules/drd_pi/src/DrdPiEntityInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd_pi;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\drd\Entity\BaseInterface;

 /**
@@ @@
   /**
    * Set the matching Drd entity.
    *
-   * @param \Drupal\drd\Entity\BaseInterface $entity
+   * @param BaseInterface $entity
    *   The DRD entity.
    *
    * @return $this
@@ @@
   /**
    * Get the matching DRD entity.
    *
-   * @return \Drupal\drd\Entity\BaseInterface
+   * @return BaseInterface
    *   The DRD entity.
    */
   public function getDrdEntity(): BaseInterface;
@@ @@
    * Create the matching DRD entity.
    *
    * @return $this
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    * @throws \Exception
    */
   public function create(): self;
@@ @@
    * Update the matching DRD entity.
    *
    * @return $this
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function update(): self;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


113) modules/contrib/drd/modules/drd_pi/src/DrdPiEntity.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd_pi;

+use Drupal\drd\Logging;
+use Drupal\Core\Http\ClientFactory;
 use Drupal;
 use Drupal\drd\Entity\BaseInterface;

@@ @@
   /**
    * DrdEntity which matches this DrdPiEntity.
    *
-   * @var \Drupal\drd\Entity\BaseInterface
+   * @var BaseInterface
    */
   protected $entity;

@@ @@
   /**
    * DRD logging service for console output.
    *
-   * @var \Drupal\drd\Logging
+   * @var Logging
    */
   protected $logging;

   /**
-   * @var \Drupal\Core\Http\ClientFactory
+   * @var ClientFactory
    */
   protected $httpClientFactory;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


114) modules/contrib/drd/modules/drd_pi/src/DrdPiDomain.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd_pi;

+use Drupal\drd\Entity\DomainInterface;
+use Drupal\drd\Entity\CoreInterface;
 use Drupal\drd\Entity\Domain;
 use Exception;

@@ @@
       'pi_id_domain' => $this->id,
     ]);

-    /** @var \Drupal\drd\Entity\DomainInterface $domain */
+    /** @var DomainInterface $domain */
     $domain = $this->getDrdEntity();
-    /** @var \Drupal\drd\Entity\CoreInterface $core */
+    /** @var CoreInterface $core */
     $core = $this->core->getDrdEntity();

     $domain->initValues('');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


115) modules/contrib/drd/modules/drd_pi/src/DrdPiAccountForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd_pi;

+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\drd_pi\DrdPiAccountInterface $account */
+    /** @var DrdPiAccountInterface $account */
     $account = $this->entity;

     $form['status'] = [
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityStorageException
+   * @throws EntityMalformedException
    */
   public function save(array $form, FormStateInterface $form_state) {
     $status = $this->entity->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


116) modules/contrib/drd/modules/drd_pi/src/DrdPiAccount.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd_pi;

+use Drupal\drd\Logging;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Http\ClientFactory;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\TypedData\Exception\MissingDataException;
+use Drupal\drd\Entity\BaseInterface;
 use Drupal;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use mikehaertl\shellcommand\Command as ShellCommand;
@@ @@
   /**
    * Logging service for output.
    *
-   * @var \Drupal\drd\Logging
+   * @var Logging
    */
   protected $logging;

@@ @@
   /**
    * Configuration of the acocunt plugin.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

   /**
-   * @var \Drupal\Core\Http\ClientFactory
+   * @var ClientFactory
    */
   protected $httpClientFactory;

@@ @@
    * @param DrdPiEntityInterface $parent
    *   The optional parent entity to which the list of entities are attached.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
+   * @throws MissingDataException
    */
   protected function syncEntities(array &$platform, $type, DrdPiEntityInterface $parent = NULL) {

@@ @@
       }
     }
     $storage = $this->entityTypeManager()->getStorage('drd_' . $type);
-    /** @var \Drupal\drd\Entity\BaseInterface[] $internal */
+    /** @var BaseInterface[] $internal */
     $internal = $storage->loadByProperties($properties);

     $ids_with_pi = [];
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
+   * @throws MissingDataException
    */
   public function sync(): DrdPiAccountInterface {
     $this->logging->log('info', 'Receiving hosts');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


117) modules/contrib/drd/modules/drd_pi/drd_pi.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\TypedData\Exception\MissingDataException;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\drd\Entity\BaseInterface;
@@ @@
 /**
  * Get value of a drd_pi field from a DRD entity.
  *
- * @param \Drupal\drd\Entity\BaseInterface $entity
+ * @param BaseInterface $entity
  *   The DRD entity.
  * @param string $type
  *   The field type.
@@ @@
  *
  * @return string
  *   The value.
- * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+ * @throws MissingDataException
  */
 function drd_pi_get_entity_value(BaseInterface $entity, $type) {
   return $entity->get('pi_id_' . $type)->get(0)->getValue()['value'];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


118) modules/contrib/drd/modules/drd_migrate/src/Import.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd_migrate;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\drd\Entity\Core;
 use Drupal\Component\Serialization\Json;
 use Drupal\Console\Core\Style\DrupalStyle;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
 class Import {

   /**
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Import constructor.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param AccountProxyInterface $current_user
+   * @param EntityTypeManagerInterface $entity_type_manager
    */
   public function __construct(AccountProxyInterface $current_user, EntityTypeManagerInterface $entity_type_manager) {
     $this->currentUser = $current_user;
@@ @@
    * @param \Drupal\Console\Core\Style\DrupalStyle $io
    *   The IO object from Drush or Console for output.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    * @throws \Exception
    */
   public function execute($filename, DrupalStyle $io = NULL) {
@@ @@
       $this->output($io, 'Inventory file can not be read!', TRUE);
       return;
     }
-    /** @var \Drupal\Core\Session\AccountInterface $account */
+    /** @var AccountInterface $account */
     $account = $this->entityTypeManager->getStorage('user')->load(1);
     $this->currentUser->setAccount($account);
     $storage = $this->entityTypeManager->getStorage('drd_core');
@@ @@

     foreach ($inventory as $id => $coredomains) {
       $this->output($io, 'Import core ' . $id);
-      /** @var \Drupal\drd\Entity\Core $core */
+      /** @var Core $core */
       $core = $storage->create([
         'name' => 'Migrate ' . $id,
       ]);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


119) modules/contrib/drd/modules/drd_migrate/src/Commands/Drush.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drd_migrate\Commands;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\drd_migrate\Import;
 use Drush\Commands\DrushCommands;

@@ @@
 class Drush extends DrushCommands {

   /**
-   * @var \Drupal\drd_migrate\Import
+   * @var Import
    */
   protected $service;

@@ @@
   /**
    * Drush constructor.
    *
-   * @param \Drupal\drd_migrate\Import $service
+   * @param Import $service
    */
   public function __construct(Import $service) {
     parent::__construct();
@@ @@
    * @param string $inventory
    *   Filename containing the json with you DRD 7 inventory.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    * @command drd:migratefromd7
    * @aliases drd-migrate-from-d7
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


120) modules/contrib/drd/drd.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\drd\Entity\ReleaseInterface;
+use Drupal\drd\Entity\DomainInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Serialization\Yaml;
@@ @@
 function drd_update_8001() {
   $majors = [];
   foreach (Release::loadMultiple() as $release) {
-    /** @var \Drupal\drd\Entity\ReleaseInterface $release */
+    /** @var ReleaseInterface $release */
     $major = $release->getMajor();
     if ($major === NULL) {
       continue;
@@ @@
  * Update view definitions.
  */
 function drd_update_8002() {
-  $config_path = drupal_get_path('module', 'drd') . '/config/optional/views.view.drd_';
+  $config_path = \Drupal::service('extension.list.module')->getPath('drd') . '/config/optional/views.view.drd_';
   foreach (['domains_per_project', 'project', 'releases_per_domain'] as $view) {
     $data = Yaml::decode(file_get_contents($config_path . $view . '.yml'));
     Drupal::configFactory()
@@ @@
 function drd_update_8003() {
   $n = 0;
   foreach (Domain::loadMultiple() as $domain) {
-    /** @var \Drupal\drd\Entity\DomainInterface $domain */
+    /** @var DomainInterface $domain */
     $domain->resetCryptSettings();
     $n++;
   }
@@ @@
 /**
  * Add new field "gitrepo" to core entities.
  *
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws PluginNotFoundException
  */
 function drd_update_8004() {
   if ($core_entity_type = Drupal::entityTypeManager()->getDefinition('drd_core')) {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [ERROR] Could not process "modules/contrib/drd/src/Generators/ActionPlugin.php"
         file, due to:                                                          
         "Analyze error: "Class DrupalCodeGenerator\Command\BaseGenerator not   
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/drd/src/Command/UserCredentials.php"
         file, due to:                                                          
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/drd/src/Command/UpdateTranslations.php" file, due to: 
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/drd/src/Command/Update.php" file, due
         to:                                                                    
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/drd/src/Command/Session.php" file, due
         to:                                                                    
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/drd/src/Command/ReleaseUnlock.php"  
         file, due to:                                                          
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/drd/src/Command/ReleaseLock.php" file,
         due to:                                                                
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/drd/src/Command/ProjectsUpdateLog.php"
         file, due to:                                                          
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/drd/src/Command/ProjectsUpdate.php" 
         file, due to:                                                          
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/drd/src/Command/ProjectsStatus.php" 
         file, due to:                                                          
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/drd/src/Command/Projects.php" file, 
         due to:                                                                
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/drd/src/Command/Ping.php" file, due 
         to:                                                                    
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/drd/src/Command/Php.php" file, due to:
                                                                                
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/drd/src/Command/MaintenanceMode.php"
         file, due to:                                                          
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/drd/src/Command/ListHosts.php" file,
         due to:                                                                
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/drd/src/Command/ListEntities.php"   
         file, due to:                                                          
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/drd/src/Command/ListDomains.php" file,
         due to:                                                                
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/drd/src/Command/ListCores.php" file,
         due to:                                                                
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/drd/src/Command/JobScheduler.php"   
         file, due to:                                                          
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/drd/src/Command/Info.php" file, due 
         to:                                                                    
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/drd/src/Command/FlushCache.php" file,
         due to:                                                                
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/drd/src/Command/ErrorLogs.php" file,
         due to:                                                                
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/drd/src/Command/Download.php" file, 
         due to:                                                                
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/drd/src/Command/DomainsReceive.php" 
         file, due to:                                                          
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/drd/src/Command/DomainsEnableAll.php"
         file, due to:                                                          
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/drd/src/Command/DomainMove.php" file,
         due to:                                                                
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/drd/src/Command/DomainChange.php"   
         file, due to:                                                          
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/drd/src/Command/DnsLookup.php" file,
         due to:                                                                
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/drd/src/Command/Database.php" file, 
         due to:                                                                
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/drd/src/Command/Cron.php" file, due 
         to:                                                                    
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/drd/src/Command/Blocks.php" file, due
         to:                                                                    
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/drd/src/Command/BaseSystem.php" file,
         due to:                                                                
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/drd/src/Command/BaseHost.php" file, 
         due to:                                                                
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/drd/src/Command/BaseEntity.php" file,
         due to:                                                                
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/drd/src/Command/BaseDomain.php" file,
         due to:                                                                
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/drd/src/Command/BaseCore.php" file, 
         due to:                                                                
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/drd/src/Command/Base.php" file, due 
         to:                                                                    
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/drd/modules/drd_pi/src/Command/Sync.php" file, due to: 
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/drd/modules/drd_migrate/src/Command/FromD7.php" file, 
         due to:                                                                
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/drd/modules/drd_install_core/src/Plugin/WebformHandler/I
         nstallCore.php" file, due to:                                          
         "Analyze error: "Class Drupal\webform\Plugin\WebformHandlerBase not    
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/drd/modules/drd_install_core/src/Plugin/WebformElement/D
         omain.php" file, due to:                                               
         "Analyze error: "Class Drupal\webform\Plugin\WebformElement\Url not    
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

