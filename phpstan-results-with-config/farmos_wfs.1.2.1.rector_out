modules/contrib/farmos_wfs/farmos_wfs/farmos_wfs.module
modules/contrib/farmos_wfs/farmos_wfs/src/Controller/FarmWfsController.php
modules/contrib/farmos_wfs/farmos_wfs/src/Exception/FarmWfsException.php
modules/contrib/farmos_wfs/farmos_wfs/src/FarmWfsFeatureType.php
modules/contrib/farmos_wfs/farmos_wfs/src/FarmWfsFeatureTypeBboxQuerier.php
modules/contrib/farmos_wfs/farmos_wfs/src/FarmWfsFeatureTypeFactoryValidator.php
modules/contrib/farmos_wfs/farmos_wfs/src/FarmWfsQueryFactory.php
modules/contrib/farmos_wfs/farmos_wfs/src/Handler/FarmWfsDescribeFeatureTypeHandler.php
modules/contrib/farmos_wfs/farmos_wfs/src/Handler/FarmWfsGetCapabilitiesHandler.php
modules/contrib/farmos_wfs/farmos_wfs/src/Handler/FarmWfsGetFeatureHandler.php
modules/contrib/farmos_wfs/farmos_wfs/src/Handler/FarmWfsTransactionHandler.php
modules/contrib/farmos_wfs/farmos_wfs/src/QueryResolver/FarmWfsBboxQueryResolver.php
modules/contrib/farmos_wfs/farmos_wfs/src/QueryResolver/FarmWfsFilterQueryResolver.php
modules/contrib/farmos_wfs/farmos_wfs/src/QueryResolver/FarmWfsSimpleQueryResolver.php

3 files with changes
====================

1) modules/contrib/farmos_wfs/farmos_wfs/src/Handler/FarmWfsGetCapabilitiesHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\farmos_wfs\Handler;

+use Drupal\Core\State\State;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfo;
@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

   /**
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfo
+   * @var EntityTypeBundleInfo
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Constructs a new FarmWfsController object.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *          The request stack.
-   * @param \Drupal\Core\State\State $state
+   * @param State $state
    *          The object State.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *          The config factory.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *          The current user.
    */
   public function __construct(RequestStack $request_stack, ConfigFactoryInterface $config_factory,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/farmos_wfs/farmos_wfs/src/FarmWfsQueryFactory.php:28

    ---------- begin diff ----------
@@ @@
     $asset_storage = $this->entityTypeManager->getStorage('asset');
     $log_storage = $this->entityTypeManager->getStorage('log');

-    if (! ($asset_storage instanceof \Drupal\Core\Entity\Sql\SqlContentEntityStorage) ||
-      ! ($log_storage instanceof \Drupal\Core\Entity\Sql\SqlContentEntityStorage)) {
+    if (! ($asset_storage instanceof SqlContentEntityStorage) ||
+      ! ($log_storage instanceof SqlContentEntityStorage)) {
       throw new \Exception(
         "WFS queries are not supported when the asset/log entity types are not backed by an SQL data store");
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/farmos_wfs/farmos_wfs/src/Controller/FarmWfsController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\farmos_wfs\Controller;

+use Drupal\Core\State\State;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Session\AccountProxyInterface;
@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The GetCapabilities handler
    *
-   * @var \Drupal\farmos_wfs\Handler\FarmWfsGetCapabilitiesHandler
+   * @var FarmWfsGetCapabilitiesHandler
    */
   protected $getCapabilitiesHandler;

@@ @@
   /**
    * The DescribeFeatureType handler
    *
-   * @var \Drupal\farmos_wfs\Handler\FarmWfsDescribeFeatureTypeHandler
+   * @var FarmWfsDescribeFeatureTypeHandler
    */
   protected $describeFeatureTypeHandler;

@@ @@
   /**
    * The GetFeature handler
    *
-   * @var \Drupal\farmos_wfs\Handler\FarmWfsGetFeatureHandler
+   * @var FarmWfsGetFeatureHandler
    */
   protected $getFeatureHandler;

@@ @@
   /**
    * The Transaction handler
    *
-   * @var \Drupal\farmos_wfs\Handler\FarmWfsTransactionHandler
+   * @var FarmWfsTransactionHandler
    */
   protected $transactionHandler;

@@ @@
   /**
    * Constructs a new FarmWfsController object.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *          The request stack.
-   * @param \Drupal\Core\State\State $state
+   * @param State $state
    *          The object State.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    */
   public function __construct(RequestStack $request_stack, ConfigFactoryInterface $config_factory,
     AccountProxyInterface $currentUser, FarmWfsGetCapabilitiesHandler $getCapabilitiesHandler,
@@ @@
   /**
    * Top-level handler for WFS requests.
    *
-   * @return \Symfony\Component\HttpFoundation\Response The XML encoded WFS Response.
+   * @return Response The XML encoded WFS Response.
    */
   public function content() {
     $status_code = 200;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 3 files have been changed by Rector                                       

