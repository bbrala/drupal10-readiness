diff --git a/lazyloader.info.yml b/lazyloader.info.yml
index 26fed79..c110ac9 100644
--- a/lazyloader.info.yml
+++ b/lazyloader.info.yml
@@ -1,7 +1,7 @@
 name: 'Image Lazyloader'
 package: Lazyloader
 description: 'Automatically lazyload images on windows scroll, makes sites with multiple images load faster.'
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.3 || ^10
 dependencies:
   - drupal:image
 type: module
diff --git a/lazyloader.module b/lazyloader.module
index 3eb802d..2a028b6 100644
--- a/lazyloader.module
+++ b/lazyloader.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\lazyloader\ThemePreprocess;
+use Drupal\lazyloader\VisibilityChecker;
 /**
  * @file
  * Lazyloader Module.
@@ -53,7 +55,7 @@ function lazyloader_preprocess_image(&$vars) {
     return;
   }
 
-  /** @var \Drupal\lazyloader\ThemePreprocess $preprocess */
+  /** @var ThemePreprocess $preprocess */
   $preprocess = \Drupal::service('lazyloader.preprocess');
   $vars = $preprocess->addCacheTags($vars);
   $vars = $preprocess->attachLibrary($vars);
@@ -74,7 +76,7 @@ function lazyloader_preprocess_image(&$vars) {
   unset($vars['attributes']['srcset']);
 
   if ($vars['theme_hook_original'] !== 'lazyloader_image') {
-    /** @var \Drupal\lazyloader\VisibilityChecker $checker */
+    /** @var VisibilityChecker $checker */
     $checker = \Drupal::service('lazyloader.visibility_checker');
     if (!$checker->isEnabled() || !$checker->isValidFilename($uri)
       || !$checker->isValidImageStyle($uri)) {
@@ -96,13 +98,13 @@ function lazyloader_preprocess_image(&$vars) {
   }
 
   $vars['attributes']['class'][] = 'lazyload';
-  $vars['attributes']['src'] = file_create_url($image_placeholder_src);
+  $vars['attributes']['src'] = \Drupal::service('file_url_generator')->generateAbsoluteString($image_placeholder_src);
 
   if (isset($responsive_image)) {
     $vars['attributes']['data-srcset'] = $responsive_image->__toString();
   }
   else {
-    $vars['attributes']['data-src'] = file_create_url($uri);
+    $vars['attributes']['data-src'] = \Drupal::service('file_url_generator')->generateAbsoluteString($uri);
   }
 
 }
@@ -114,18 +116,18 @@ function lazyloader_preprocess_responsive_image(&$vars) {
   if (_lazyloader_alter($vars)) {
     return;
   }
-  /** @var \Drupal\lazyloader\ThemePreprocess $preprocess */
+  /** @var ThemePreprocess $preprocess */
   $preprocess = \Drupal::service('lazyloader.preprocess');
   $vars = $preprocess->attachLibrary($vars);
   $vars = $preprocess->addCacheTags($vars);
 
-  /** @var \Drupal\lazyloader\VisibilityChecker $checker */
+  /** @var VisibilityChecker $checker */
   $checker = \Drupal::service('lazyloader.visibility_checker');
   if (!$checker->isEnabled()) {
     return;
   }
 
-  /** @var \Drupal\Core\Template\Attribute $image_attributes */
+  /** @var Attribute $image_attributes */
   foreach ($vars['sources'] as $key => $image_attributes) {
     if(empty($image_attributes['srcset'])){
       continue;
diff --git a/src/Form/AdminConfigure.php b/src/Form/AdminConfigure.php
index 9dd5b6e..6de9293 100644
--- a/src/Form/AdminConfigure.php
+++ b/src/Form/AdminConfigure.php
@@ -17,16 +17,16 @@ class AdminConfigure extends ConfigFormBase {
   /**
    * The theme registry.
    *
-   * @var \Drupal\Core\Theme\Registry
+   * @var Registry
    */
   protected $themeRegistry;
 
   /**
    * Constructs a \Drupal\lazyloader\Form\LazyLoaderAdminConfigure object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Theme\Registry $theme_registry
+   * @param Registry $theme_registry
    *   The theme registry.
    */
   public function __construct(ConfigFactoryInterface $config_factory, Registry $theme_registry) {
diff --git a/src/Form/AdminExclude.php b/src/Form/AdminExclude.php
index 46dc762..2aa7ae1 100644
--- a/src/Form/AdminExclude.php
+++ b/src/Form/AdminExclude.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\lazyloader\Form;
 
+use Drupal\Core\Config\Config;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Condition\ConditionInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\ConfigFormBase;
@@ -18,23 +21,23 @@ class AdminExclude extends ConfigFormBase {
   /**
    * The Lazyloader exclude configuration entity.
    *
-   * @var \Drupal\Core\Config\Config|\Drupal\Core\Config\ImmutableConfig
+   * @var Config|ImmutableConfig
    */
   protected $configuration;
 
   /**
    * The Plugin Manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $conditionManager;
 
   /**
    * Constructs a \Drupal\lazyloader\Form\LazyLoaderAdminConfigure object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $condition_manager
+   * @param PluginManagerInterface $condition_manager
    *   The condition manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, PluginManagerInterface $condition_manager) {
@@ -134,7 +137,7 @@ class AdminExclude extends ConfigFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ -155,7 +158,7 @@ class AdminExclude extends ConfigFormBase {
     //   https://www.drupal.org/node/2284687.
     $visibility = $this->config('lazyloader.exclude')->get('visibility');
     foreach ($this->conditionManager->getDefinitions() as $condition_id => $definition) {
-      /** @var \Drupal\Core\Condition\ConditionInterface $condition */
+      /** @var ConditionInterface $condition */
       $condition = $this->conditionManager->createInstance($condition_id, isset($visibility[$condition_id]) ? $visibility[$condition_id] : []);
       $form_state->set(['conditions', $condition_id], $condition);
       $condition_form = $condition->buildConfigurationForm([], $form_state);
@@ -200,7 +203,7 @@ class AdminExclude extends ConfigFormBase {
    *
    * @param array $form
    *   A nested array form elements comprising the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function validateVisibility(array $form, FormStateInterface $form_state) {
diff --git a/src/Hooks/ThemeRegistryAlter.php b/src/Hooks/ThemeRegistryAlter.php
index ec52607..adabf6e 100644
--- a/src/Hooks/ThemeRegistryAlter.php
+++ b/src/Hooks/ThemeRegistryAlter.php
@@ -13,23 +13,23 @@ class ThemeRegistryAlter {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   private $config;
 
   /**
    * Creates a new ThemeRegistryAlter instance.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The config factory.
    */
   public function __construct(ModuleHandlerInterface $moduleHandler, ConfigFactoryInterface $config) {
diff --git a/src/ThemePreprocess.php b/src/ThemePreprocess.php
index 849e904..4a18462 100644
--- a/src/ThemePreprocess.php
+++ b/src/ThemePreprocess.php
@@ -12,14 +12,14 @@ class ThemePreprocess {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Creates a new ThemePreprocess instance.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
diff --git a/src/VisibilityChecker.php b/src/VisibilityChecker.php
index 376fb7d..75dfefd 100644
--- a/src/VisibilityChecker.php
+++ b/src/VisibilityChecker.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lazyloader;
 
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Condition\ConditionAccessResolverTrait;
 use Drupal\Core\Condition\ConditionManager;
 use Drupal\Core\Condition\ConditionPluginCollection;
@@ -18,32 +19,32 @@ class VisibilityChecker {
   /**
    * The image style storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $imageStyleStorage;
 
   /**
    * The condition manager.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $conditionManager;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Creates a new VisibilityChecker instance.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Condition\ConditionManager $condition_manager
+   * @param ConditionManager $condition_manager
    *   The condition manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, ConditionManager $condition_manager) {
@@ -55,7 +56,7 @@ class VisibilityChecker {
   /**
    * Gets the condition list.
    *
-   * @return \Drupal\Core\Condition\ConditionPluginCollection
+   * @return ConditionPluginCollection
    *   The condition list.
    */
   protected function getConditionList() {
diff --git a/src/tests/TestBase.php b/src/tests/TestBase.php
index 5af271d..433a6d5 100644
--- a/src/tests/TestBase.php
+++ b/src/tests/TestBase.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\lazyloader\Tests;
 
+use Drupal\user\UserInterface;
+use Drupal\node\Entity\Node;
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\file\Entity\File;
@@ -15,14 +18,14 @@ abstract class TestBase extends BrowserTestBase {
   /**
    * The user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
   /**
    * The node.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $node;
 
@@ -34,7 +37,7 @@ abstract class TestBase extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->createContentType([
@@ -66,7 +69,7 @@ abstract class TestBase extends BrowserTestBase {
     ]);
     $field->save();
 
-    /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display */
+    /** @var EntityViewDisplayInterface $display */
     $display = \Drupal::service('entity_display.repository')->getViewDisplay('node', 'page', 'full');
     $display->setComponent('field_images', [
       'type' => 'image',
diff --git a/tests/src/Kernel/ThemeTest.php b/tests/src/Kernel/ThemeTest.php
index 8f35ca9..ec945a3 100644
--- a/tests/src/Kernel/ThemeTest.php
+++ b/tests/src/Kernel/ThemeTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\lazyloader\Kernel;
 
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
+use Drupal\Core\File\FileSystemInterface;
+use Drupal\Core\Render\RendererInterface;
 use Drupal\Core\StreamWrapper\PublicStream;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ -42,7 +45,7 @@ class ThemeTest extends KernelTestBase {
   /**
    * The node.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $node;
 
@@ -56,7 +59,7 @@ class ThemeTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installEntitySchema('node');
@@ -92,7 +95,7 @@ class ThemeTest extends KernelTestBase {
       'name' => 'medium',
     ])->save();
 
-    /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display */
+    /** @var EntityViewDisplayInterface $display */
     $display = \Drupal::service('entity_display.repository')->getViewDisplay('node', 'page');
     $display->setComponent('field_images', [
       'type' => 'image',
@@ -160,7 +163,7 @@ class ThemeTest extends KernelTestBase {
    *   List of files in public:// that match the filter(s).
    */
   protected function getTestFiles($type, $size = NULL) {
-    /** @var \Drupal\Core\File\FileSystemInterface $file_system */
+    /** @var FileSystemInterface $file_system */
     $file_system = \Drupal::service('file_system');
     if (empty($this->generatedTestFiles)) {
 
@@ -293,11 +296,11 @@ class ThemeTest extends KernelTestBase {
     $request->attributes->set(RouteObjectInterface::ROUTE_NAME, '<front>');
     \Drupal::requestStack()->push($request);
 
-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = \Drupal::service('renderer');
 
     $image = $this->node->field_images;
-    $path = file_url_transform_relative(file_create_url($image->entity->uri->value));
+    $path = \Drupal::service('file_url_generator')->generateString($image->entity->uri->value);
 
     \Drupal::configFactory()->getEditable('lazyloader.configuration')
       ->set('enabled', TRUE)
