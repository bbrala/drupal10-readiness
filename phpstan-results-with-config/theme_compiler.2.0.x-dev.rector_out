modules/contrib/theme_compiler/src/Compiler.php
modules/contrib/theme_compiler/src/CompilerException.php
modules/contrib/theme_compiler/src/Controller/ThemeCompilerController.php
modules/contrib/theme_compiler/src/Event/OnDemandCompileEvent.php
modules/contrib/theme_compiler/src/EventSubscriber/CompileSubscriber.php
modules/contrib/theme_compiler/src/Routing/RouteHelper.php
modules/contrib/theme_compiler/src/ThemeCompilerControllerInterface.php
modules/contrib/theme_compiler/theme_compiler.module

5 files with changes
====================

1) modules/contrib/theme_compiler/src/ThemeCompilerControllerInterface.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * Return a response containing the result of compiling the requested context.
    *
-   * @param \Drupal\compiler\CompilerContextInterface $theme_compiler_context
+   * @param CompilerContextInterface $theme_compiler_context
    *   A compiler context used to define a compilation.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   A response containing the result of the compiled context.
    */
   public function serve(CompilerContextInterface $theme_compiler_context): Response;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/theme_compiler/src/Routing/RouteHelper.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a RouteHelper object.
    *
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler service.
    */
   public function __construct(ThemeHandlerInterface $theme_handler) {
@@ @@
    *
    *   Keys that do not appear in this list will be ignored.
    *
-   * @return \Drupal\compiler\RefineableCompilerContext
+   * @return RefineableCompilerContext
    *   A compiler context used to define a compilation.
    */
   protected function getThemeCompilerContext(string $theme, string $compiler, string $path, array $config): RefineableCompilerContext {
@@ @@
     $options['theme_compiler']['theme'] = $theme;

     // Compute the target URI for this context and hash it for an ID.
-    $options['theme_compiler']['uri'] = '/' . drupal_get_path('theme', $theme) . '/' . $path;
+    $options['theme_compiler']['uri'] = '/' . \Drupal::service('extension.list.theme')->getPath($theme) . '/' . $path;
     $options['theme_compiler']['id'] = hash('sha384', $options['theme_compiler']['uri']);

     // Iterate over each defined theme-relative file path for processing.
     foreach ($files as $index => $file) {
-      if (empty($result = realpath(\DRUPAL_ROOT . '/' . drupal_get_path('theme', $theme) . '/' . $file))) {
+      if (empty($result = realpath(\DRUPAL_ROOT . '/' . \Drupal::service('extension.list.theme')->getPath($theme) . '/' . $file))) {
         throw new \InvalidArgumentException('Unable to resolve theme-relative file path at index ' . var_export($index, TRUE) . ': ' . var_export($file, TRUE));
       }

@@ @@
   /**
    * Generate a route to a specific theme-provided, compiled asset.
    *
-   * @param \Drupal\compiler\CompilerContextInterface $context
+   * @param CompilerContextInterface $context
    *   The source context which defines or configures the compilation.
    *
-   * @return \Symfony\Component\Routing\Route
+   * @return Route
    *   A route to a theme-provided, compiled assets.
    */
   protected function getThemeCompilerTargetRoute(CompilerContextInterface $context): Route {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/theme_compiler/src/EventSubscriber/CompileSubscriber.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * The compiler service.
    *
-   * @var \Drupal\theme_compiler\Compiler
+   * @var Compiler
    */
   protected $compiler;

@@ @@
   /**
    * The theme handler service.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
   /**
    * The typed config manager service.
    *
-   * @var \Drupal\Core\Config\TypedConfigManagerInterface
+   * @var TypedConfigManagerInterface
    */
   protected $typedConfigManager;

@@ @@
   /**
    * Constructs an CompileSubscriber object.
    *
-   * @param \Drupal\theme_compiler\Compiler $compiler
+   * @param Compiler $compiler
    *   The compiler service.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler service.
-   * @param \Drupal\Core\Config\TypedConfigManagerInterface $typed_config_manager
+   * @param TypedConfigManagerInterface $typed_config_manager
    *   The typed config manager service.
    */
   public function __construct(Compiler $compiler, ThemeHandlerInterface $theme_handler, TypedConfigManagerInterface $typed_config_manager) {
@@ @@
   /**
    * Compile all assets provided by this module on configuration changes.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The configuration change event.
    */
   public function onConfigChange(ConfigCrudEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/theme_compiler/src/Controller/ThemeCompilerController.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * The compiler service.
    *
-   * @var \Drupal\theme_compiler\Compiler
+   * @var Compiler
    */
   protected $compiler;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The theme manager service.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;

@@ @@
   /**
    * Constructs a ThemeCompilerController object.
    *
-   * @param \Drupal\theme_compiler\Compiler $compiler
+   * @param Compiler $compiler
    *   The compiler service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $theme_manager
+   * @param ThemeManagerInterface $theme_manager
    *   The theme manager service.
    */
   public function __construct(Compiler $compiler, ModuleHandlerInterface $module_handler, ThemeManagerInterface $theme_manager) {
@@ @@
   /**
    * Serve a theme compiler asset as a cacheable response.
    *
-   * @param \Drupal\compiler\CompilerContextInterface $theme_compiler_context
+   * @param CompilerContextInterface $theme_compiler_context
    *   A compiler context used to define a compilation.
    *
    * @see hook_theme_compiler_asset_alter()
    *   For more information about how to alter the asset response.
    *
-   * @return \Drupal\Core\Cache\CacheableResponse
+   * @return CacheableResponse
    *   A cacheable response for the requested resource.
    */
   public function serve(CompilerContextInterface $theme_compiler_context): CacheableResponse {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/theme_compiler/src/Compiler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\theme_compiler;

+use function Sabre\Uri\resolve;
+use function Sabre\Uri\normalize;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\File\FileSystemInterface;
@@ @@
   /**
    * The cache tags invalidator service.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;

@@ @@
   /**
    * The compiler plugin manager service.
    *
-   * @var \Drupal\compiler\Plugin\CompilerPluginManagerInterface
+   * @var CompilerPluginManagerInterface
    */
   protected $compilerManager;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The theme handler service.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
   /**
    * The theme initialization service.
    *
-   * @var \Drupal\Core\Theme\ThemeInitializationInterface
+   * @var ThemeInitializationInterface
    */
   protected $themeInitialization;

@@ @@
   /**
    * The theme manager service.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;

@@ @@
   /**
    * Constructs a CompilerController object.
    *
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The cache tags invalidator service.
-   * @param \Drupal\compiler\Plugin\CompilerPluginManagerInterface $compiler_plugin_manager
+   * @param CompilerPluginManagerInterface $compiler_plugin_manager
    *   The compiler plugin manager service.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider service.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler service.
-   * @param \Drupal\Core\Theme\ThemeInitializationInterface $theme_initialization
+   * @param ThemeInitializationInterface $theme_initialization
    *   The theme initialization service.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $theme_manager
+   * @param ThemeManagerInterface $theme_manager
    *   The theme manager service.
    */
   public function __construct(CacheTagsInvalidatorInterface $cache_tags_invalidator, CompilerPluginManagerInterface $compiler_plugin_manager, FileSystemInterface $file_system, MessengerInterface $messenger, ModuleHandlerInterface $module_handler, RouteProviderInterface $route_provider, ThemeHandlerInterface $theme_handler, ThemeInitializationInterface $theme_initialization, ThemeManagerInterface $theme_manager) {
@@ @@
    * to modify the compiler plugin instance and compiler context before the
    * compilation process has begun.
    *
-   * @param \Drupal\compiler\RefineableCompilerContextInterface $context
+   * @param RefineableCompilerContextInterface $context
    *   A compiler context used to define a compilation process.
    *
    * @see hook_theme_compiler_alter()
    * @see hook_theme_compiler_TYPE_alter()
    *
-   * @throws \Drupal\theme_compiler\CompilerException
+   * @throws CompilerException
    *   If an exception occurs during compilation. This exception will be
    *   constructed with the previous exception(s).
    *
@@ @@
    *
    * This is a destructive operation; the supplied target path will be replaced.
    *
-   * @param \Drupal\compiler\RefineableCompilerContextInterface $context
+   * @param RefineableCompilerContextInterface $context
    *   A compiler context used to define a compilation process.
    * @param string $target
    *   The target file used to save the result. This file path will be resolved
@@ @@
    * each route is then mapped to its compiler context (should one exist).
    * Finally, the list of values is reduced to contain only valid contexts.
    *
-   * @return \Drupal\compiler\RefineableCompilerContextInterface[]
+   * @return RefineableCompilerContextInterface[]
    *   A list of refineable compiler contexts.
    */
   public function getThemeCompilerRouteContexts(): array {
@@ @@
    */
   public function normalizeAndResolveTargetPath(string $target): string {
     // Attempt to resolve the supplied target path relative to the sandbox.
-    $target = \Sabre\Uri\resolve(self::SANDBOX, \Sabre\Uri\normalize($target));
+    $target = resolve(self::SANDBOX, normalize($target));

     // Ensure that the resulting target path is beneath the sandbox path.
     if (strpos($target, self::SANDBOX) !== 0 || $target === self::SANDBOX) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 5 files have been changed by Rector                                       

