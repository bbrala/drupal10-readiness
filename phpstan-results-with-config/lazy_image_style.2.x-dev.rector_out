modules/contrib/lazy_image_style/lazy_image_style.install
modules/contrib/lazy_image_style/lazy_image_style.module
modules/contrib/lazy_image_style/src/Commands/LazyImageStyleCommands.php
modules/contrib/lazy_image_style/src/Form/SettingsForm.php
modules/contrib/lazy_image_style/src/LazyImageStyleHelper.php
modules/contrib/lazy_image_style/src/Plugin/CKEditorPlugin/LazyImageStyle.php
modules/contrib/lazy_image_style/src/Plugin/Filter/LazyImageStyle.php
modules/contrib/lazy_image_style/src/TwigExtension.php

4 files with changes
====================

1) modules/contrib/lazy_image_style/src/Plugin/Filter/LazyImageStyle.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lazy_image_style\Plugin\Filter;

+use Drupal\lazy_image_style\LazyImageStyleHelper;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\filter\FilterProcessResult;
@@ @@
   /**
    * The lazy image style helper service.
    *
-   * @var \Drupal\lazy_image_style\LazyImageStyleHelper
+   * @var LazyImageStyleHelper
    */
   protected $helper;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/lazy_image_style/src/Plugin/CKEditorPlugin/LazyImageStyle.php:19

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function getFile() {
-    return drupal_get_path('module', 'lazy_image_style') . '/assets/js/plugins/lazy-image-style/plugin.js';
+    return \Drupal::service('extension.list.module')->getPath('lazy_image_style') . '/assets/js/plugins/lazy-image-style/plugin.js';
   }

   /**
@@ @@
    * {@inheritdoc}
    */
   public function getButtons() {
-    $module_path = drupal_get_path('module', 'lazy_image_style');
+    $module_path = \Drupal::service('extension.list.module')->getPath('lazy_image_style');
     return [
       'lazy-image-style' => [
         'label' => $this->t('Lazy image style'),
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/lazy_image_style/src/LazyImageStyleHelper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lazy_image_style;

+use Symfony\Component\Mime\MimeTypesInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Template\Attribute;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\image\ImageStyleInterface;
-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;

 /**
  * The helper service for alter build image.
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The MIME type guesser.
    *
-   * @var \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface
+   * @var MimeTypesInterface
    */
   protected $mimeTypeGuesser;

@@ @@
   /**
    * The image style storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $imageStyleStorage;

@@ @@
   /**
    * Constructs a lazyimagestylehelper object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface $mimeTypeGuesser
+   * @param MimeTypesInterface $mimeTypeGuesser
    *   The MIME type guesser.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(
     EntityTypeManagerInterface $entity_type_manager,
     ConfigFactoryInterface $config_factory,
-    MimeTypeGuesserInterface $mimeTypeGuesser
+    MimeTypesInterface $mimeTypeGuesser
   ) {

     $this->configFactory = $config_factory;
@@ @@
     }

     // Move source uri to data-src attribute.
-    $variables['attributes']['data-srcset'] = file_url_transform_relative($variables['attributes']['src']);
+    $variables['attributes']['data-srcset'] = \Drupal::service('file_url_generator')->transformRelative($variables['attributes']['src']);

     $variables['attributes']['srcset'] = $this->getTmpUrl($variables['uri']);
     $variables['attributes']['class'][] = 'lazyload';
@@ @@
     }

     // Move source uri to data-src attribute.
-    $variables['image']['#attributes']['data-srcset'] = file_url_transform_relative($variables['image']['#uri']);
+    $variables['image']['#attributes']['data-srcset'] = \Drupal::service('file_url_generator')->transformRelative($variables['image']['#uri']);

     $variables['image']['#attributes']['srcset'] = $this->getTmpUrl($variables['uri']);
     $variables['image']['#attributes']['class'][] = 'lazyload';
@@ @@
       return;
     }

-    /** @var \Drupal\Core\Template\Attribute $source */
+    /** @var Attribute $source */
     foreach ($variables['sources'] as $source) {
       $srcset = $source->offsetGet('srcset');
       $source->removeAttribute('srcset');
@@ @@
       $source->setAttribute('data-srcset', $srcset);
     }

-    $variables['img_element']['#attributes']['data-srcset'] = file_url_transform_relative($variables['img_element']['#uri']);
+    $variables['img_element']['#attributes']['data-srcset'] = \Drupal::service('file_url_generator')->transformRelative($variables['img_element']['#uri']);
     $variables['img_element']['#attributes']['srcset'] = $this->getTmpUrl($variables['uri']);
     $variables['img_element']['#attributes']['class'][] = 'lazyload';
     $variables['#attached'] = $this->addAttachments(isset($variables['#attached']) ? $variables['#attached'] : []);
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @see lazy_image_style_form_image_style_delete_form_alter
@@ @@
    * @param string $style_name
    *   The Style name.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|mixed|null
+   * @return EntityInterface|mixed|null
    *   The style entity.
    */
   protected function loadStyle($style_name) {
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector


4) modules/contrib/lazy_image_style/src/Form/SettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lazy_image_style\Form;

+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\Core\Cache\CacheTagsInvalidator;
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The entity_type.manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The cache_tags.invalidator service.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidator
+   * @var CacheTagsInvalidator
    */
   protected $cacheTagsInvalidator;

@@ @@
   /**
    * Returns the module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
    * @return array
    *   The all responsive image styles.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getResponsiveImageStyles() {
     $output = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 4 files have been changed by Rector                                       

