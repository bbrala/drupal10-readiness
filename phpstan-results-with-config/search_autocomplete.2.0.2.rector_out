modules/contrib/search_autocomplete/search_autocomplete.install
modules/contrib/search_autocomplete/search_autocomplete.module
modules/contrib/search_autocomplete/src/AutocompletionConfigurationAccessControlHandler.php
modules/contrib/search_autocomplete/src/AutocompletionConfigurationInterface.php
modules/contrib/search_autocomplete/src/Controller/AutocompletionConfigurationListBuilder.php
modules/contrib/search_autocomplete/src/Entity/AutocompletionConfiguration.php
modules/contrib/search_autocomplete/src/Form/AutocompletionConfigurationAddForm.php
modules/contrib/search_autocomplete/src/Form/AutocompletionConfigurationDeleteForm.php
modules/contrib/search_autocomplete/src/Form/AutocompletionConfigurationEditForm.php
modules/contrib/search_autocomplete/src/Form/AutocompletionConfigurationFormBase.php
modules/contrib/search_autocomplete/src/Plugin/views/display/AutocompletionCallback.php
modules/contrib/search_autocomplete/src/Plugin/views/row/CallbackFieldRow.php
modules/contrib/search_autocomplete/src/Plugin/views/style/CallbackSerializer.php
modules/contrib/search_autocomplete/src/Tests/Entity/BasicCRUDConfigTest.php
modules/contrib/search_autocomplete/src/Tests/Entity/DefaultConfigTest.php
modules/contrib/search_autocomplete/src/Tests/Entity/EditableDeletableConfigTest.php
modules/contrib/search_autocomplete/src/Tests/Entity/NoSelectorConfigTest.php
modules/contrib/search_autocomplete/src/Tests/Entity/UnicityConfigTest.php
modules/contrib/search_autocomplete/src/Tests/InstallTest.php
modules/contrib/search_autocomplete/src/Tests/SettingsTest.php
modules/contrib/search_autocomplete/src/Tests/Views/CallbackViewsTest.php

15 files with changes
=====================

1) modules/contrib/search_autocomplete/src/Tests/Views/CallbackViewsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\search_autocomplete\Tests\Views;

+use Drupal\user\Entity\User;
+use Drupal\node\NodeStorage;
 use Drupal;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Component\Utility\Html;
@@ @@
   /**
    * The admin user
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   public $adminUser;

@@ @@
   /**
    * The entity storage for nodes.
    *
-   * @var \Drupal\node\NodeStorage
+   * @var NodeStorage
    */
   protected $nodeStorage;

@@ @@
     $this->drupalGet("admin/structure/views");

     // Nodes callback view.
-    $this->assertRaw(t('Nodes Autocompletion Callbacks'));
-    $this->assertRaw(t('autocompletion_callbacks_nodes'));
+    $this->assertSession()->responseContains(t('Nodes Autocompletion Callbacks'));
+    $this->assertSession()->responseContains(t('autocompletion_callbacks_nodes'));

     // Words callback view.
-    $this->assertRaw(t('Words Autocompletion Callbacks'));
-    $this->assertRaw(t('autocompletion_callbacks_words'));
+    $this->assertSession()->responseContains(t('Words Autocompletion Callbacks'));
+    $this->assertSession()->responseContains(t('autocompletion_callbacks_words'));
   }

   /**
@@ @@
     // Retrieve node default view.
     $actual_json = $this->drupalGet("callback/nodes");
     $expected = [];
-    $this->assertIdentical($actual_json, json_encode($expected), 'The expected JSON output was found.');
+    $this->assertSame($actual_json, json_encode($expected), 'The expected JSON output was found.');

     // Create some published nodes of type article and page.
     $this->createNodes(5, "article", $expected);
@@ @@

     // Check the view result using serializer service.
     $expected_string = json_encode($expected);
-    $this->assertIdentical($actual_json, $expected_string);
+    $this->assertSame($actual_json, $expected_string);

     // Re-test as anonymous user.
     $actual_json = $this->drupalGet("callback/nodes");
-    $this->assertIdentical($actual_json, $expected_string);
+    $this->assertSame($actual_json, $expected_string);
   }

   /**
@@ @@
       ];
       $node = Node::create($settings);
       $status = $node->save();
-      $this->assertEqual($status, SAVED_NEW, new FormattableMarkup('Created node %title.', ['%title' => $node->label()]));
+      $this->assertEquals($status, SAVED_NEW, new FormattableMarkup('Created node %title.', ['%title' => $node->label()]));

       $result = [
         'value' => $type->id() . ' ' . $i,
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertRawRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/search_autocomplete/src/Tests/SettingsTest.php:50

    ---------- begin diff ----------
@@ @@
     // ----------------------------------------------------------------------
     // 1) Check the default settings value : configs are activated,
     // admin_helper is FALSE.
-    $this->assertFieldChecked('edit-configs-search-block-enabled', 'Default config search_block is activated.');
-    $this->assertNoFieldChecked('edit-admin-helper', 'Admin helper tool is disabled.');
+    $this->assertSession()->checkboxChecked('edit-configs-search-block-enabled', 'Default config search_block is activated.');
+    $this->assertSession()->checkboxNotChecked('edit-admin-helper', 'Admin helper tool is disabled.');

     // ----------------------------------------------------------------------
     // 2) Desactivate all available configurations and reverse settings.
@@ @@
       'configs[search_block][enabled]' => FALSE,
       'admin_helper' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save changes');
+    $this->submitForm($edit, 'Save changes');

     // 3) Check that all default configurations are desactivate,
     // and settings are toogled.
-    $this->assertNoFieldChecked('edit-configs-search-block-enabled', 'Default config search_block is disabled.');
-    $this->assertFieldChecked('edit-admin-helper', 'Admin helper tool is activated.');
+    $this->assertSession()->checkboxNotChecked('edit-configs-search-block-enabled', 'Default config search_block is disabled.');
+    $this->assertSession()->checkboxChecked('edit-admin-helper', 'Admin helper tool is activated.');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertFieldCheckedRector
 * AssertNoFieldCheckedRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/search_autocomplete/src/Tests/InstallTest.php:61

    ---------- begin diff ----------
@@ @@
     // we haven't logged in any users, so the client is anonymous.
     foreach ($admin_paths as $path) {
       $this->drupalGet($path);
-      $this->assertResponse(403, "Access denied to anonymous for path: $path");
+      $this->assertSession()->statusCodeEquals(403, "Access denied to anonymous for path: $path");
     }

     /* ----------------------------------------------------------------------
@@ @@
     // special permissions for these paths.
     foreach ($admin_paths as $path) {
       $this->drupalGet($path);
-      $this->assertResponse(403, "Access denied to generic user for path: $path");
+      $this->assertSession()->statusCodeEquals(403, "Access denied to generic user for path: $path");
     }

     /* ----------------------------------------------------------------------
@@ @@
     // Forbidden paths aren't forbidden any more.
     foreach ($admin_paths as $unforbidden) {
       $this->drupalGet($unforbidden);
-      $this->assertResponse(200, "Access not granted to admin user for path: $unforbidden");
+      $this->assertSession()->statusCodeEquals(200, "Access not granted to admin user for path: $unforbidden");
     }

     /* ----------------------------------------------------------------------
@@ @@
     $this->drupalLogin($admin_user);
     // Now that we have the admin user logged in, check the menu links.
     $this->drupalGet('/admin/config');
-    $this->assertLinkByHref("admin/config/search/search_autocomplete");
+    $this->assertSession()->linkByHrefExists("admin/config/search/search_autocomplete");
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertLinkByHrefRector
 * AssertResponseRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/search_autocomplete/src/Tests/Entity/UnicityConfigTest.php:50

    ---------- begin diff ----------
@@ @@
     ];

     // Click Add new button.
-    $this->drupalPostForm(
-      NULL,
-      [
-        'label' => $config['label'],
-        'id' => $config_name,
-        'selector' => $config['selector'],
-      ],
-      'Create Autocompletion Configuration'
-    );
+    $this->submitForm([
+      'label' => $config['label'],
+      'id' => $config_name,
+      'selector' => $config['selector'],
+    ], 'Create Autocompletion Configuration');

     // ----------------------------------------------------------------------
     // 2) Create the configuration again.
@@ @@
     ];

     // Click Add new button.
-    $this->drupalPostForm(
-      NULL,
-      [
-        'label' => $config['label'],
-        'id' => $config_name,
-        'selector' => $config['selector'],
-      ],
-      'Create Autocompletion Configuration'
-    );
-    $this->assertRaw(t('The machine-readable name is already in use. It must be unique.'));
+    $this->submitForm([
+      'label' => $config['label'],
+      'id' => $config_name,
+      'selector' => $config['selector'],
+    ], 'Create Autocompletion Configuration');
+    $this->assertSession()->responseContains(t('The machine-readable name is already in use. It must be unique.'));
   }

   /**
@@ @@
     ];

     // Click Add new button.
-    $this->drupalPostForm(
-      NULL,
-      [
-        'label' => $config['label'],
-        'id' => $config_name,
-        'selector' => $config['selector'],
-      ],
-      'Create Autocompletion Configuration'
-    );
+    $this->submitForm([
+      'label' => $config['label'],
+      'id' => $config_name,
+      'selector' => $config['selector'],
+    ], 'Create Autocompletion Configuration');

     // ----------------------------------------------------------------------
     // 2) Create the configuration again.
@@ @@
     ];

     // Click Add new button.
-    $this->drupalPostForm(
-      NULL,
-      [
-        'label' => $config['label'],
-        'id' => $config_name,
-        'selector' => $config['selector'],
-      ],
-      'Create Autocompletion Configuration'
-    );
-    $this->assertRaw('The selector ID must be unique.');
+    $this->submitForm([
+      'label' => $config['label'],
+      'id' => $config_name,
+      'selector' => $config['selector'],
+    ], 'Create Autocompletion Configuration');
+    $this->assertSession()->responseContains('The selector ID must be unique.');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertRawRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/search_autocomplete/src/Tests/Entity/NoSelectorConfigTest.php:65

    ---------- begin diff ----------
@@ @@
     ];

     // Check fields.
-    $this->assertFieldByName('label', $config['label']);
-    $this->assertFieldByName('selector', $config['selector']);
+    $this->assertSession()->fieldValueEquals('label', $config['label']);
+    $this->assertSession()->fieldValueEquals('selector', $config['selector']);

     // Click Add new button.
-    $this->drupalPostForm(
-      NULL,
-      [
-        'label' => $config['label'],
-        'id' => $config_name,
-        'selector' => $config['selector'],
-      ],
-      'Create Autocompletion Configuration'
-    );
+    $this->submitForm([
+      'label' => $config['label'],
+      'id' => $config_name,
+      'selector' => $config['selector'],
+    ], 'Create Autocompletion Configuration');

     // ----------------------------------------------------------------------
     // 2) Verify that add redirect to edit page.
-    $this->assertUrl('/admin/config/search/search_autocomplete/manage/' . $config_name);
+    $this->assertSession()->addressEquals('/admin/config/search/search_autocomplete/manage/' . $config_name);

     // ----------------------------------------------------------------------
     // 3) Verify that default add configuration values are inserted.
-    $this->assertFieldByName('label', $config['label']);
-    $this->assertFieldByName('selector', $config['selector']);
-    $this->assertFieldByName('minChar', $config['minChar']);
-    $this->assertFieldByName('maxSuggestions', $config['maxSuggestions']);
-    $this->assertFieldByName('autoSubmit', $config['autoSubmit']);
-    $this->assertFieldByName('autoRedirect', $config['autoRedirect']);
-    $this->assertFieldByName('noResultLabel', $config['noResultLabel']);
-    $this->assertFieldByName('noResultValue', $config['noResultValue']);
-    $this->assertFieldByName('noResultLink', $config['noResultLink']);
-    $this->assertFieldByName('moreResultsLabel', $config['moreResultsLabel']);
-    $this->assertFieldByName('moreResultsValue', $config['moreResultsValue']);
-    $this->assertFieldByName('moreResultsLink', $config['moreResultsLink']);
-    $this->assertFieldByName('source', $config['source']);
-    $this->assertOptionSelected('edit-theme', $config['theme']);
+    $this->assertSession()->fieldValueEquals('label', $config['label']);
+    $this->assertSession()->fieldValueEquals('selector', $config['selector']);
+    $this->assertSession()->fieldValueEquals('minChar', $config['minChar']);
+    $this->assertSession()->fieldValueEquals('maxSuggestions', $config['maxSuggestions']);
+    $this->assertSession()->fieldValueEquals('autoSubmit', $config['autoSubmit']);
+    $this->assertSession()->fieldValueEquals('autoRedirect', $config['autoRedirect']);
+    $this->assertSession()->fieldValueEquals('noResultLabel', $config['noResultLabel']);
+    $this->assertSession()->fieldValueEquals('noResultValue', $config['noResultValue']);
+    $this->assertSession()->fieldValueEquals('noResultLink', $config['noResultLink']);
+    $this->assertSession()->fieldValueEquals('moreResultsLabel', $config['moreResultsLabel']);
+    $this->assertSession()->fieldValueEquals('moreResultsValue', $config['moreResultsValue']);
+    $this->assertSession()->fieldValueEquals('moreResultsLink', $config['moreResultsLink']);
+    $this->assertSession()->fieldValueEquals('source', $config['source']);
+    $this->assertTrue($this->assertSession()->optionExists('edit-theme', $config['theme'])->hasAttribute('selected'));

   }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertOptionSelectedRector
 * AssertUrlRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/search_autocomplete/src/Tests/Entity/EditableDeletableConfigTest.php:49

    ---------- begin diff ----------
@@ @@

     // Check access permission to edit page for editable configurations.
     $this->drupalGet('/admin/config/search/search_autocomplete/manage/' . $config_id);
-    $this->assertResponse(200, "Editable configuration can be edited from GUI");
+    $this->assertSession()->statusCodeEquals(200, "Editable configuration can be edited from GUI");

     // Remove editability for this configuration.
     $config = AutocompletionConfiguration::load('search_block');
@@ @@

     // Check that none editable configurations cannot be edited.
     $this->drupalGet('/admin/config/search/search_autocomplete/manage/' . $config_id);
-    $this->assertResponse(403, "None editable configuration cannot be edited from GUI");
+    $this->assertSession()->statusCodeEquals(403, "None editable configuration cannot be edited from GUI");
   }

   /**
@@ @@

     // Check access permission to delete page for none deletable configurations.
     $this->drupalGet('/admin/config/search/search_autocomplete/manage/' . $config_id . '/delete');
-    $this->assertResponse(403, "None deletable configuration cannot be deleted from GUI");
+    $this->assertSession()->statusCodeEquals(403, "None deletable configuration cannot be deleted from GUI");

     // Remove editability for this configuration.
     $config->setDeletable(TRUE);
@@ @@

     // Check that deletable configurations can be deleted.
     $this->drupalGet('/admin/config/search/search_autocomplete/manage/' . $config_id . '/delete');
-    $this->assertResponse(200, "Deletable configuration can be deleted from GUI");
+    $this->assertSession()->statusCodeEquals(200, "Deletable configuration can be deleted from GUI");
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/search_autocomplete/src/Tests/Entity/DefaultConfigTest.php:65

    ---------- begin diff ----------
@@ @@
     $entity = AutocompletionConfiguration::load($config['id']);
     $this->assertNotNull($entity, 'Default configuration search_block created during installation process.');

-    $this->assertEqual($entity->id(), $config['id']);
-    $this->assertEqual($entity->label(), $config['label']);
-    $this->assertEqual($entity->getStatus(), $config['status']);
-    $this->assertEqual($entity->getSelector(), $config['selector']);
-    $this->assertEqual($entity->getMinChar(), $config['minChar']);
-    $this->assertEqual($entity->getMaxSuggestions(), $config['maxSuggestions']);
-    $this->assertEqual($entity->getAutoSubmit(), $config['autoSubmit']);
-    $this->assertEqual($entity->getAutoRedirect(), $config['autoRedirect']);
-    $this->assertEqual($entity->getNoResultLabel(), $config['noResultLabel']);
-    $this->assertEqual($entity->getNoResultValue(), $config['noResultValue']);
-    $this->assertEqual($entity->getNoResultLink(), $config['noResultLink']);
-    $this->assertEqual($entity->getMoreResultsLabel(), $config['moreResultsLabel']);
-    $this->assertEqual($entity->getMoreResultsValue(), $config['moreResultsValue']);
-    $this->assertEqual($entity->getMoreResultsLink(), $config['moreResultsLink']);
-    $this->assertEqual($entity->getSource(), $config['source']);
-    $this->assertEqual($entity->getTheme(), $config['theme']);
-    $this->assertEqual($entity->getEditable(), $config['editable']);
-    $this->assertEqual($entity->getDeletable(), $config['deletable']);
+    $this->assertEquals($entity->id(), $config['id']);
+    $this->assertEquals($entity->label(), $config['label']);
+    $this->assertEquals($entity->getStatus(), $config['status']);
+    $this->assertEquals($entity->getSelector(), $config['selector']);
+    $this->assertEquals($entity->getMinChar(), $config['minChar']);
+    $this->assertEquals($entity->getMaxSuggestions(), $config['maxSuggestions']);
+    $this->assertEquals($entity->getAutoSubmit(), $config['autoSubmit']);
+    $this->assertEquals($entity->getAutoRedirect(), $config['autoRedirect']);
+    $this->assertEquals($entity->getNoResultLabel(), $config['noResultLabel']);
+    $this->assertEquals($entity->getNoResultValue(), $config['noResultValue']);
+    $this->assertEquals($entity->getNoResultLink(), $config['noResultLink']);
+    $this->assertEquals($entity->getMoreResultsLabel(), $config['moreResultsLabel']);
+    $this->assertEquals($entity->getMoreResultsValue(), $config['moreResultsValue']);
+    $this->assertEquals($entity->getMoreResultsLink(), $config['moreResultsLink']);
+    $this->assertEquals($entity->getSource(), $config['source']);
+    $this->assertEquals($entity->getTheme(), $config['theme']);
+    $this->assertEquals($entity->getEditable(), $config['editable']);
+    $this->assertEquals($entity->getDeletable(), $config['deletable']);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/search_autocomplete/src/Tests/Entity/BasicCRUDConfigTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\search_autocomplete\Tests\Entity;

+use Drupal\user\Entity\User;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * Stores a user admin.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   public $adminUser;

@@ @@
       'theme' => 'basic-blue.css',
     ];

-    $this->drupalPostForm(
-      NULL,
-      [
-        'label' => $config['label'],
-        'id' => $config_name,
-        'selector' => $config['selector'],
-      ],
-      'Create Autocompletion Configuration'
-    );
+    $this->submitForm([
+      'label' => $config['label'],
+      'id' => $config_name,
+      'selector' => $config['selector'],
+    ], 'Create Autocompletion Configuration');

     // ----------------------------------------------------------------------
     // 2) Verify that add redirect to edit page.
-    $this->assertUrl('/admin/config/search/search_autocomplete/manage/' . $config_name);
+    $this->assertSession()->addressEquals('/admin/config/search/search_autocomplete/manage/' . $config_name);

     // ----------------------------------------------------------------------
     // 3) Verify that default add configuration values are inserted.
-    $this->assertFieldByName('label', $config['label']);
-    $this->assertFieldByName('selector', $config['selector']);
-    $this->assertFieldByName('minChar', $config['minChar']);
-    $this->assertFieldByName('maxSuggestions', $config['maxSuggestions']);
-    $this->assertFieldByName('autoSubmit', $config['autoSubmit']);
-    $this->assertFieldByName('autoRedirect', $config['autoRedirect']);
-    $this->assertFieldByName('noResultLabel', $config['noResultLabel']);
-    $this->assertFieldByName('noResultValue', $config['noResultValue']);
-    $this->assertFieldByName('noResultLink', $config['noResultLink']);
-    $this->assertFieldByName('moreResultsLabel', $config['moreResultsLabel']);
-    $this->assertFieldByName('moreResultsValue', $config['moreResultsValue']);
-    $this->assertFieldByName('moreResultsLink', $config['moreResultsLink']);
-    $this->assertFieldByName('source', $config['source']);
-    $this->assertOptionSelected('edit-theme', $config['theme']);
+    $this->assertSession()->fieldValueEquals('label', $config['label']);
+    $this->assertSession()->fieldValueEquals('selector', $config['selector']);
+    $this->assertSession()->fieldValueEquals('minChar', $config['minChar']);
+    $this->assertSession()->fieldValueEquals('maxSuggestions', $config['maxSuggestions']);
+    $this->assertSession()->fieldValueEquals('autoSubmit', $config['autoSubmit']);
+    $this->assertSession()->fieldValueEquals('autoRedirect', $config['autoRedirect']);
+    $this->assertSession()->fieldValueEquals('noResultLabel', $config['noResultLabel']);
+    $this->assertSession()->fieldValueEquals('noResultValue', $config['noResultValue']);
+    $this->assertSession()->fieldValueEquals('noResultLink', $config['noResultLink']);
+    $this->assertSession()->fieldValueEquals('moreResultsLabel', $config['moreResultsLabel']);
+    $this->assertSession()->fieldValueEquals('moreResultsValue', $config['moreResultsValue']);
+    $this->assertSession()->fieldValueEquals('moreResultsLink', $config['moreResultsLink']);
+    $this->assertSession()->fieldValueEquals('source', $config['source']);
+    $this->assertTrue($this->assertSession()->optionExists('edit-theme', $config['theme'])->hasAttribute('selected'));

     // Change default values.
     $config['minChar'] = 1;
@@ @@
     $config['moreResultsLink'] = 'http://google.com';
     $config['source'] = '/user/' . $this->adminUser->id();

-    $this->drupalPostForm(
-      NULL,
-      $config,
-      'Update'
-    );
+    $this->submitForm($config, 'Update');

     // ----------------------------------------------------------------------
     // 4) Verify that user is redirected to listing page.
-    $this->assertUrl('/admin/config/search/search_autocomplete');
+    $this->assertSession()->addressEquals('/admin/config/search/search_autocomplete');

     // ----------------------------------------------------------------------
     // 5) Verify that we can edit the configuration through admin UI.
     $this->drupalGet('/admin/config/search/search_autocomplete/manage/' . $config_name);
-    $this->assertFieldByName('label', $config['label']);
-    $this->assertFieldByName('selector', $config['selector']);
-    $this->assertFieldByName('minChar', $config['minChar']);
-    $this->assertFieldByName('maxSuggestions', $config['maxSuggestions']);
-    $this->assertFieldByName('autoSubmit', $config['autoSubmit']);
-    $this->assertFieldByName('autoRedirect', $config['autoRedirect']);
-    $this->assertFieldByName('noResultLabel', $config['noResultLabel']);
-    $this->assertFieldByName('noResultValue', $config['noResultValue']);
-    $this->assertFieldByName('noResultLink', $config['noResultLink']);
-    $this->assertFieldByName('moreResultsLabel', $config['moreResultsLabel']);
-    $this->assertFieldByName('moreResultsValue', $config['moreResultsValue']);
-    $this->assertFieldByName('moreResultsLink', $config['moreResultsLink']);
-    $this->assertFieldByName('source', $config['source']);
-    $this->assertOptionSelected('edit-theme', $config['theme']);
+    $this->assertSession()->fieldValueEquals('label', $config['label']);
+    $this->assertSession()->fieldValueEquals('selector', $config['selector']);
+    $this->assertSession()->fieldValueEquals('minChar', $config['minChar']);
+    $this->assertSession()->fieldValueEquals('maxSuggestions', $config['maxSuggestions']);
+    $this->assertSession()->fieldValueEquals('autoSubmit', $config['autoSubmit']);
+    $this->assertSession()->fieldValueEquals('autoRedirect', $config['autoRedirect']);
+    $this->assertSession()->fieldValueEquals('noResultLabel', $config['noResultLabel']);
+    $this->assertSession()->fieldValueEquals('noResultValue', $config['noResultValue']);
+    $this->assertSession()->fieldValueEquals('noResultLink', $config['noResultLink']);
+    $this->assertSession()->fieldValueEquals('moreResultsLabel', $config['moreResultsLabel']);
+    $this->assertSession()->fieldValueEquals('moreResultsValue', $config['moreResultsValue']);
+    $this->assertSession()->fieldValueEquals('moreResultsLink', $config['moreResultsLink']);
+    $this->assertSession()->fieldValueEquals('source', $config['source']);
+    $this->assertTrue($this->assertSession()->optionExists('edit-theme', $config['theme'])->hasAttribute('selected'));

   }

@@ @@
       'theme' => 'basic-blue.css',
     ];

-    $this->drupalPostForm(
-      NULL,
-      [
-        'label' => $config['label'],
-        'id' => $config_name,
-        'selector' => $config['selector'],
-      ],
-      'Create Autocompletion Configuration'
-    );
+    $this->submitForm([
+      'label' => $config['label'],
+      'id' => $config_name,
+      'selector' => $config['selector'],
+    ], 'Create Autocompletion Configuration');

     // ----------------------------------------------------------------------
     // 2) Verify that add redirect to edit page.
-    $this->assertUrl('/admin/config/search/search_autocomplete/manage/' . $config_name);
+    $this->assertSession()->addressEquals('/admin/config/search/search_autocomplete/manage/' . $config_name);

     // ----------------------------------------------------------------------
     // 3) Verify that default add configuration values are inserted.
-    $this->assertFieldByName('label', $config['label']);
-    $this->assertFieldByName('selector', $config['selector']);
-    $this->assertFieldByName('minChar', $config['minChar']);
-    $this->assertFieldByName('maxSuggestions', $config['maxSuggestions']);
-    $this->assertFieldByName('autoSubmit', $config['autoSubmit']);
-    $this->assertFieldByName('autoRedirect', $config['autoRedirect']);
-    $this->assertFieldByName('noResultLabel', $config['noResultLabel']);
-    $this->assertFieldByName('noResultValue', $config['noResultValue']);
-    $this->assertFieldByName('noResultLink', $config['noResultLink']);
-    $this->assertFieldByName('moreResultsLabel', $config['moreResultsLabel']);
-    $this->assertFieldByName('moreResultsValue', $config['moreResultsValue']);
-    $this->assertFieldByName('moreResultsLink', $config['moreResultsLink']);
-    $this->assertFieldByName('source', $config['source']);
-    $this->assertOptionSelected('edit-theme', $config['theme']);
+    $this->assertSession()->fieldValueEquals('label', $config['label']);
+    $this->assertSession()->fieldValueEquals('selector', $config['selector']);
+    $this->assertSession()->fieldValueEquals('minChar', $config['minChar']);
+    $this->assertSession()->fieldValueEquals('maxSuggestions', $config['maxSuggestions']);
+    $this->assertSession()->fieldValueEquals('autoSubmit', $config['autoSubmit']);
+    $this->assertSession()->fieldValueEquals('autoRedirect', $config['autoRedirect']);
+    $this->assertSession()->fieldValueEquals('noResultLabel', $config['noResultLabel']);
+    $this->assertSession()->fieldValueEquals('noResultValue', $config['noResultValue']);
+    $this->assertSession()->fieldValueEquals('noResultLink', $config['noResultLink']);
+    $this->assertSession()->fieldValueEquals('moreResultsLabel', $config['moreResultsLabel']);
+    $this->assertSession()->fieldValueEquals('moreResultsValue', $config['moreResultsValue']);
+    $this->assertSession()->fieldValueEquals('moreResultsLink', $config['moreResultsLink']);
+    $this->assertSession()->fieldValueEquals('source', $config['source']);
+    $this->assertTrue($this->assertSession()->optionExists('edit-theme', $config['theme'])->hasAttribute('selected'));

     // Change default values.
     $config['minChar'] = 1;
@@ @@
     $config['moreResultsLink'] = 'http://google.com';
     $config['source'] = '/user/' . $this->adminUser->id();

-    $this->drupalPostForm(
-      NULL,
-      $config,
-      'Update'
-    );
+    $this->submitForm($config, 'Update');

     // ----------------------------------------------------------------------
     // 4) Verify that user is redirected to listing page.
-    $this->assertUrl('/admin/config/search/search_autocomplete');
-    $this->assertRaw("<td>Unit testing configuration</td>");
+    $this->assertSession()->addressEquals('/admin/config/search/search_autocomplete');
+    $this->assertSession()->responseContains("<td>Unit testing configuration</td>");

     // ----------------------------------------------------------------------
     // 5) Verify that we can edit the configuration through admin UI.
     $this->drupalGet('/admin/config/search/search_autocomplete/manage/' . $config_name);
-    $this->assertFieldByName('label', $config['label']);
-    $this->assertFieldByName('selector', $config['selector']);
-    $this->assertFieldByName('minChar', $config['minChar']);
-    $this->assertFieldByName('maxSuggestions', $config['maxSuggestions']);
-    $this->assertFieldByName('autoSubmit', $config['autoSubmit']);
-    $this->assertFieldByName('autoRedirect', $config['autoRedirect']);
-    $this->assertFieldByName('noResultLabel', $config['noResultLabel']);
-    $this->assertFieldByName('noResultValue', $config['noResultValue']);
-    $this->assertFieldByName('noResultLink', $config['noResultLink']);
-    $this->assertFieldByName('moreResultsLabel', $config['moreResultsLabel']);
-    $this->assertFieldByName('moreResultsValue', $config['moreResultsValue']);
-    $this->assertFieldByName('moreResultsLink', $config['moreResultsLink']);
-    $this->assertFieldByName('source', $config['source']);
-    $this->assertOptionSelected('edit-theme', $config['theme']);
+    $this->assertSession()->fieldValueEquals('label', $config['label']);
+    $this->assertSession()->fieldValueEquals('selector', $config['selector']);
+    $this->assertSession()->fieldValueEquals('minChar', $config['minChar']);
+    $this->assertSession()->fieldValueEquals('maxSuggestions', $config['maxSuggestions']);
+    $this->assertSession()->fieldValueEquals('autoSubmit', $config['autoSubmit']);
+    $this->assertSession()->fieldValueEquals('autoRedirect', $config['autoRedirect']);
+    $this->assertSession()->fieldValueEquals('noResultLabel', $config['noResultLabel']);
+    $this->assertSession()->fieldValueEquals('noResultValue', $config['noResultValue']);
+    $this->assertSession()->fieldValueEquals('noResultLink', $config['noResultLink']);
+    $this->assertSession()->fieldValueEquals('moreResultsLabel', $config['moreResultsLabel']);
+    $this->assertSession()->fieldValueEquals('moreResultsValue', $config['moreResultsValue']);
+    $this->assertSession()->fieldValueEquals('moreResultsLink', $config['moreResultsLink']);
+    $this->assertSession()->fieldValueEquals('source', $config['source']);
+    $this->assertTrue($this->assertSession()->optionExists('edit-theme', $config['theme'])->hasAttribute('selected'));

     // ----------------------------------------------------------------------
     // 6) Verify that we can delete the configuration.
     $this->drupalGet("/admin/config/search/search_autocomplete/manage/" . $config_name . "/delete");
-    $this->assertText('This action cannot be undone.');
-    $this->drupalPostForm(NULL, [], 'Delete this configuration');
-    $this->assertRaw('The autocompletion configuration <em class="placeholder">' . $config['label'] . '</em> is deleted.');
-    $this->assertNoRaw("<td>Unit testing configuration</td>");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('This action cannot be undone.');
+    $this->submitForm([], 'Delete this configuration');
+    $this->assertSession()->responseContains('The autocompletion configuration <em class="placeholder">' . $config['label'] . '</em> is deleted.');
+    $this->assertSession()->responseNotContains("<td>Unit testing configuration</td>");
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertNoRawRector
 * AssertOptionSelectedRector
 * AssertRawRector
 * AssertTextRector
 * AssertUrlRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/search_autocomplete/src/Plugin/views/display/AutocompletionCallback.php:76

    ---------- begin diff ----------
@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state key value store.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, RouteProviderInterface $route_provider, StateInterface $state, RendererInterface $renderer) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/search_autocomplete/src/Form/AutocompletionConfigurationFormBase.php:22

    ---------- begin diff ----------
@@ @@
 class AutocompletionConfigurationFormBase extends EntityForm {

   /**
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $entityStorage;

@@ @@
    * factory to be injected into it from the container. We later use this query
    * factory to build an entity query for the exists() method.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   An entity query factory for the autocompletion_configuration entity type.
    */
   public function __construct(EntityStorageInterface $entity_storage) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    */
   public function save(array $form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/search_autocomplete/src/Form/AutocompletionConfigurationEditForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    *
    * @return array
@@ @@

     // Template to use.
     $themes = [];
-    $files = \Drupal::service('file_system')->scanDirectory(drupal_get_path('module', 'search_autocomplete') . '/css/themes', '/.*\.css\z/', ['recurse' => FALSE]);
+    $files = \Drupal::service('file_system')->scanDirectory(\Drupal::service('extension.list.module')->getPath('search_autocomplete') . '/css/themes', '/.*\.css\z/', ['recurse' => FALSE]);
     foreach ($files as $file) {
       $themes[$file->filename] = $file->name;
     }
@@ @@
   /**
    * Autocomplete the label of a view.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object that contains the typed tags.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The matched entity labels as a JSON response.
    */
   public function viewAutocomplete(Request $request) {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/search_autocomplete/src/Form/AutocompletionConfigurationDeleteForm.php:58

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    * delete forms, this is typically the route that points at the list
    * controller.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The URL to go to if the user cancels the deletion.
    */
   public function getCancelUrl() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/search_autocomplete/src/Form/AutocompletionConfigurationAddForm.php:87

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/search_autocomplete/src/Controller/AutocompletionConfigurationListBuilder.php:104

    ---------- begin diff ----------
@@ @@
   /**
    * Implements \Drupal\Core\Form\FormInterface::validateForm().
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
     // No validation.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/search_autocomplete/search_autocomplete.module:183

    ---------- begin diff ----------
@@ @@

   // Find all available themes.
   $themes = [];
-  $files = \Drupal::service('file_system')->scanDirectory(drupal_get_path('module', 'search_autocomplete') . '/css/themes', '/.*\.css\z/', ['recurse' => FALSE]);
+  $files = \Drupal::service('file_system')->scanDirectory(\Drupal::service('extension.list.module')->getPath('search_autocomplete') . '/css/themes', '/.*\.css\z/', ['recurse' => FALSE]);

   // Create a new library for all themes.
   foreach ($files as $file) {
@@ @@
 function search_autocomplete_library_info_alter(array &$libraries, $extension) {
   if ($extension == 'core' && isset($libraries['drupal.autocomplete'])) {
     $libraries['drupal.autocomplete']['js'] = array_merge($libraries['drupal.autocomplete']['js'], [
-      '/' . drupal_get_path('module', 'search_autocomplete') . '/js/jquery.autocomplete.js' => ['weight' => 0],
+      '/' . \Drupal::service('extension.list.module')->getPath('search_autocomplete') . '/js/jquery.autocomplete.js' => ['weight' => 0],
     ]);
   }
 }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [OK] 15 files have been changed by Rector                                      

