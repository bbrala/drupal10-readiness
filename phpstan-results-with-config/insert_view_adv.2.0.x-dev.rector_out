modules/contrib/insert_view_adv/insert_view_adv.install
modules/contrib/insert_view_adv/insert_view_adv.module
modules/contrib/insert_view_adv/modules/bueditor/src/Plugin/BUEditorPlugin/DrupalViews.php
modules/contrib/insert_view_adv/src/Ajax/InsertViewCommand.php
modules/contrib/insert_view_adv/src/Controller/AdvancedInsertViewController.php
modules/contrib/insert_view_adv/src/Form/InsertViewDialog.php
modules/contrib/insert_view_adv/src/Plugin/CKEditorPlugin/InsertView.php
modules/contrib/insert_view_adv/src/Plugin/Filter/InsertView.php

4 files with changes
====================

1) modules/contrib/insert_view_adv/src/Plugin/Filter/InsertView.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\insert_view_adv\Plugin\Filter;

+use Drupal\views\ViewExecutable;
+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Component\Serialization\Json;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
    *
    * @param string $text
    *   Text to process.
-   * @param \Drupal\filter\FilterProcessResult $result
+   * @param FilterProcessResult $result
    *   The result of filter processor.
    * @param int $count
    *   Counter of replacements.
@@ @@
         return ['#attached' => [], '#markup' => $plain];
       }
     }
-    /** @var \Drupal\views\ViewExecutable $view */
+    /** @var ViewExecutable $view */
     $view = Views::getView($view_name);
     if (empty($view)) {
       return ['#attached' => [], '#markup' => $plain];
@@ @@
       return ['#attached' => [], '#markup' => $plain];
     }
     $view->setDisplay($display_id);
-    /** @var \Symfony\Component\HttpFoundation\Request $request */
+    /** @var Request $request */
     $request = \Drupal::service('request_stack')->getCurrentRequest();
     $current_path = $request->getPathInfo();
     // Workaround for exposed filter reset button.
@@ @@
         '#type' => 'item_list',
         '#items' => $items,
       ];
-      return render($list);
+      return \Drupal::service('renderer')->render($list);
     }
     else {
       return $this->t('You may use [view:<em>name=display=args</em>] tags to display views.');
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/insert_view_adv/src/Plugin/CKEditorPlugin/InsertView.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The module extension list.
    *
-   * @var \Drupal\Core\Extension\ModuleExtensionList
+   * @var ModuleExtensionList
    */
   protected $moduleExtensionList;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Extension\ModuleExtensionList $extension_list_module
+   * @param ModuleExtensionList $extension_list_module
    *   The module extension list.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, ModuleExtensionList $extension_list_module) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/insert_view_adv/src/Form/InsertViewDialog.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * InsertViewDialog constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   The entity field manager service.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, EntityFieldManagerInterface $entityFieldManager) {
@@ @@
    *
    * @param array $form
    *   Form elements.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   Form elements.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    * @param string $view_block
    *   Name of the view block.
@@ @@
   /**
    * Get a value from the widget in the WYSIWYG.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state to extract values from.
    * @param string $key
    *   The key to get from the selected WYSIWYG element.
@@ @@
   /**
    * Get the values from the form required for the client.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state from the dialog submission.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   Form elements.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Response from ajax form submit.
    */
   public function ajaxSubmit(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/insert_view_adv/src/Controller/AdvancedInsertViewController.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * Constructs a ViewAjaxController object.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(RendererInterface $renderer) {
@@ @@
   /**
    * Loads and renders a view via AJAX.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request object.
-   * @param \Drupal\filter\Entity\FilterFormat|null $filter_format
+   * @param FilterFormat|null $filter_format
    *   The filter format object.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The view response as ajax response.
    */
   public function ajaxView(Request $request, FilterFormat $filter_format = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [ERROR] Could not process                                                      
         "modules/contrib/insert_view_adv/modules/bueditor/src/Plugin/BUEditorPlug
         in/DrupalViews.php" file, due to:                                      
         "Analyze error: "Class Drupal\bueditor\BUEditorPluginBase not found.". 
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

