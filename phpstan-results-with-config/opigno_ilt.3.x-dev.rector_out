modules/contrib/opigno_ilt/opigno_ilt.install
modules/contrib/opigno_ilt/opigno_ilt.module
modules/contrib/opigno_ilt/src/Controller/ILTController.php
modules/contrib/opigno_ilt/src/Entity/ILT.php
modules/contrib/opigno_ilt/src/Entity/ILTResult.php
modules/contrib/opigno_ilt/src/Form/ILTDeleteForm.php
modules/contrib/opigno_ilt/src/Form/ILTForm.php
modules/contrib/opigno_ilt/src/Form/ILTResultDeleteForm.php
modules/contrib/opigno_ilt/src/Form/ILTResultForm.php
modules/contrib/opigno_ilt/src/Form/ILTScoreForm.php
modules/contrib/opigno_ilt/src/ILTAccessControlHandler.php
modules/contrib/opigno_ilt/src/ILTInterface.php
modules/contrib/opigno_ilt/src/ILTListBuilder.php
modules/contrib/opigno_ilt/src/ILTResultAccessControlHandler.php
modules/contrib/opigno_ilt/src/ILTResultInterface.php
modules/contrib/opigno_ilt/src/ILTResultListBuilder.php
modules/contrib/opigno_ilt/src/ILTResultViewBuilder.php
modules/contrib/opigno_ilt/src/ILTViewBuilder.php
modules/contrib/opigno_ilt/src/Plugin/GroupContentEnabler/ILTGroup.php
modules/contrib/opigno_ilt/src/Plugin/OpignoGroupManagerContentType/ContentTypeILT.php
modules/contrib/opigno_ilt/tests/src/Functional/OpignoILTBrowserTestBase.php
modules/contrib/opigno_ilt/tests/src/Functional/OpignoILTTest.php

15 files with changes
=====================

1) modules/contrib/opigno_ilt/tests/src/Functional/OpignoILTBrowserTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\opigno_ilt\Functional;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\user\UserInterface;
+use Drupal\Core\Session\AccountSwitcherInterface;
+use Drupal\group\Entity\Group;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * A test user with group creation rights.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $groupCreator;

@@ @@
   /**
    * Account switcher.
    *
-   * @var \Drupal\Core\Session\AccountSwitcherInterface
+   * @var AccountSwitcherInterface
    */
   protected $accountSwitcher;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->entityTypeManager = $this->container->get('entity_type.manager');
     $this->accountSwitcher = $this->container->get('account_switcher');
@@ @@
    * @param array $values
    *   (optional) The values used to create the entity.
    *
-   * @return \Drupal\group\Entity\Group
+   * @return Group
    *   The created group entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   protected function createGroup(array $values = []) {
     /* @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/opigno_ilt/src/Plugin/OpignoGroupManagerContentType/ContentTypeILT.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_ilt\Plugin\OpignoGroupManagerContentType;

+use Drupal\opigno_ilt\ILTResultInterface;
+use Drupal\opigno_ilt\ILTInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Url;
 use Drupal\opigno_group_manager\ContentTypeBase;
@@ @@
    * {@inheritdoc}
    */
   public function getUserScore($user_id, $entity_id) {
-    /** @var \Drupal\opigno_ilt\ILTResultInterface[] $results */
+    /** @var ILTResultInterface[] $results */
     $results = \Drupal::entityTypeManager()
       ->getStorage('opigno_ilt_result')
       ->loadByProperties([
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @param int|\Drupal\opigno_ilt\ILTInterface $entity
+   * @param int|ILTInterface $entity
    *   The entity ID or entity instance.
    */
   public function getContent($entity) {
     // If the value is the ILT ID, load the ILT.
     if (is_numeric($entity) || is_string($entity)) {
-      /** @var \Drupal\opigno_ilt\ILTInterface $entity */
+      /** @var ILTInterface $entity */
       $entity = ILT::load($entity);
     }

@@ @@
    */
   public function getAllContents() {
     try {
-      /** @var \Drupal\opigno_ilt\ILTInterface[] $entities */
+      /** @var ILTInterface[] $entities */
       $entities = \Drupal::entityTypeManager()
         ->getStorage('opigno_ilt')
         ->loadMultiple();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/opigno_ilt/src/ILTViewBuilder.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Returns render array for the navigation.
    *
-   * @param \Drupal\opigno_ilt\ILTInterface $entity
+   * @param ILTInterface $entity
    *   ILT interface.
    *
    * @return array
@@ @@
     EntityViewDisplayInterface $display,
     $view_mode
   ) {
-    /** @var \Drupal\opigno_ilt\ILTInterface $entity */
+    /** @var ILTInterface $entity */
     $build[] = [
       '#type' => 'html_tag',
       '#tag' => 'h3',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/opigno_ilt/src/ILTResultViewBuilder.php:19

    ---------- begin diff ----------
@@ @@
     EntityViewDisplayInterface $display,
     $view_mode
   ) {
-    /** @var \Drupal\opigno_ilt\ILTResultInterface $entity */
+    /** @var ILTResultInterface $entity */
     $build[] = [
       '#markup' => $this->t('Instructor-Led Training: @ilt', [
         '@ilt' => $entity->getILT()->toLink(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/opigno_ilt/src/ILTResultInterface.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the ILT entity.
    *
-   * @return \Drupal\opigno_ilt\ILTInterface
+   * @return ILTInterface
    *   The ILT entity.
    */
   public function getILT();
@@ @@
   /**
    * Sets the ILT entity.
    *
-   * @param \Drupal\opigno_ilt\ILTInterface $opigno_ilt
+   * @param ILTInterface $opigno_ilt
    *   The ILT entity.
    *
    * @return $this
@@ @@
   /**
    * Returns the user entity.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity.
    */
   public function getUser();
@@ @@
   /**
    * Sets the user entity.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The user entity.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/opigno_ilt/src/ILTResultAccessControlHandler.php:21

    ---------- begin diff ----------
@@ @@
       return AccessResult::allowed();
     }

-    /** @var \Drupal\opigno_ilt\ILTResultInterface $entity */
+    /** @var ILTResultInterface $entity */
     switch ($operation) {
       case 'view':
         return AccessResult::allowedIfHasPermission($account, 'view ilt result entities');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/opigno_ilt/src/ILTInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_ilt;

+use Drupal\group\Entity\GroupInterface;
+use Drupal\user\Entity\User;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\opigno_calendar_event\Entity\CalendarEvent;
 use Drupal\user\EntityOwnerInterface;
@@ @@
   /**
    * Returns the related training.
    *
-   * @return \Drupal\group\Entity\GroupInterface|null
+   * @return GroupInterface|null
    *   The related training entity, or NULL in case training ID field
    *   has not been set on the entity.
    */
@@ @@
   /**
    * Sets the related training.
    *
-   * @param \Drupal\group\Entity\GroupInterface|null $training
+   * @param GroupInterface|null $training
    *   The related training entity.
    *
    * @return $this
@@ @@
   /**
    * Returns the entity of the related calendar event.
    *
-   * @return \Drupal\opigno_calendar_event\Entity\CalendarEvent|null
+   * @return CalendarEvent|null
    *   The entity of the related calendar event,
    *   or NULL in case calendar event field
    *   has not been set on the entity.
@@ @@
   /**
    * Sets the entity of the related calendar event.
    *
-   * @param \Drupal\opigno_calendar_event\Entity\CalendarEvent $event
+   * @param CalendarEvent $event
    *   The entity of the related calendar event.
    *
    * @return $this
@@ @@
   /**
    * Returns members of the ILT.
    *
-   * @return \Drupal\user\Entity\User[]
+   * @return User[]
    *   Array of users.
    */
   public function getMembers();
@@ @@
   /**
    * Returns the recipients for email notification to the ILT.
    *
-   * @return \Drupal\user\Entity\User[]
+   * @return User[]
    *   Array of users.
    */
   public function getNotifiedMembers();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/opigno_ilt/src/ILTAccessControlHandler.php:25

    ---------- begin diff ----------
@@ @@
       return AccessResult::allowed();
     }

-    /** @var \Drupal\opigno_ilt\ILTInterface $entity */
+    /** @var ILTInterface $entity */
     switch ($operation) {
       case 'view':
         // Allow view access if user is a platform-level student manager.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/opigno_ilt/src/Form/ILTScoreForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_ilt\Form;

+use Drupal\group\GroupMembership;
+use Drupal\user\Entity\User;
+use Drupal\opigno_ilt\ILTResultInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Opigno ILT.
    *
-   * @var \Drupal\opigno_ilt\ILTInterface
+   * @var ILTInterface
    */
   protected $opigno_ilt;

@@ @@
     if (empty($users)) {
       $members = $training->getMembers();
       $users = array_map(function ($member) {
-        /** @var \Drupal\group\GroupMembership $member */
+        /** @var GroupMembership $member */
         return $member->getUser();
       }, $members);
     }
     uasort($users, function ($user1, $user2) {
       /** @var \Drupal\user\Entity\User $user1 */
-      /** @var \Drupal\user\Entity\User $user2 */
+      /** @var User $user2 */
       return strcasecmp($user1->getDisplayName(), $user2->getDisplayName());
     });

     // Load the existing Instructor-Led Training results.
-    /** @var \Drupal\opigno_ilt\ILTResultInterface[] $results */
+    /** @var ILTResultInterface[] $results */
     $results = $this->entityTypeManager
       ->getStorage('opigno_ilt_result')
       ->loadByProperties(['opigno_ilt' => $opigno_ilt->id()]);
@@ @@
     // Reindex results by the user ID.
     $results_by_user = [];
     array_walk($results, function ($result) use (&$results_by_user) {
-      /** @var \Drupal\opigno_ilt\ILTResultInterface $result */
+      /** @var ILTResultInterface $result */
       $results_by_user[$result->getUserId()] = $result;
     });

@@ @@
       if (isset($results_by_user[$id])) {
         // If result for this Instructor-Led Training
         // and user is exists, use it.
-        /** @var \Drupal\opigno_ilt\ILTResultInterface $result */
+        /** @var ILTResultInterface $result */
         $result = $results_by_user[$id];
         $attendance = $result->getStatus();
         $score = $result->getScore();
@@ @@
       $score = $values['score'];

       // Try load existing result.
-      /** @var \Drupal\opigno_ilt\ILTResultInterface[] $results */
+      /** @var ILTResultInterface[] $results */
       $results = $this->entityTypeManager
         ->getStorage('opigno_ilt_result')
         ->loadByProperties([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/opigno_ilt/src/Form/ILTResultForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_ilt\Form;

+use Drupal\opigno_ilt\ILTResultInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
     $form = parent::buildForm($form, $form_state);
-    /** @var \Drupal\opigno_ilt\ILTResultInterface $entity */
+    /** @var ILTResultInterface $entity */
     $entity = $this->entity;

     $form['opigno_ilt'] = [
@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\opigno_ilt\ILTResultInterface $entity */
+    /** @var ILTResultInterface $entity */
     $entity = $this->entity;
     $status = parent::save($form, $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/opigno_ilt/src/Form/ILTForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_ilt\Form;

+use Drupal\opigno_ilt\ILTInterface;
+use Drupal\group\GroupMembership;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Datetime\DrupalDateTime;
@@ @@
   /**
    * The plugin manger.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $pluginManager;

@@ @@
   public function buildForm(array $form, FormStateInterface $form_state) {
     $form = parent::buildForm($form, $form_state);

-    /** @var \Drupal\opigno_ilt\ILTInterface $entity */
+    /** @var ILTInterface $entity */
     $entity = $this->entity;
     if ($entity->getTraining() === NULL) {
       $group = $this->getRequest()->get('group');
@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\opigno_ilt\ILTInterface $entity */
+    /** @var ILTInterface $entity */
     $entity = $this->entity;
     $date = $form_state->getValue('date');
     $current_members_ids = [];
@@ @@
     $classes = Group::loadMultiple($classes_ids);
     foreach ($classes as $class) {
       // Add class members to the users.
-      /** @var \Drupal\group\Entity\Group $class */
+      /** @var Group $class */
       $members = $class->getMembers();
       foreach ($members as $member) {
-        /** @var \Drupal\group\GroupMembership $member */
+        /** @var GroupMembership $member */
         $user = $member->getUser();
         $users_ids[] = $user->id();
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/opigno_ilt/src/Entity/ILT.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_ilt\Entity;

+use Drupal\group\GroupMembership;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityChangedTrait;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
       $training = $this->getTraining();
       if (isset($training)) {
         $members_ids = array_map(function ($member) {
-          /** @var \Drupal\group\GroupMembership $member */
+          /** @var GroupMembership $member */
           return $member->getUser()->id();
         }, $training->getMembers());
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/opigno_ilt/src/Controller/ILTController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_ilt\Controller;

+use Drupal\group\GroupMembership;
+use Drupal\user\UserInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\group\Entity\Group;
 use Symfony\Component\HttpFoundation\JsonResponse;
@@ @@
   /**
    * Returns response for the autocompletion.
    *
-   * @param \Drupal\group\Entity\Group $group
+   * @param Group $group
    *   Group object.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response containing the autocomplete suggestions.
    */
   public function membersAutocompleteSelect(Group $group) {
@@ @@
     if (isset($group)) {
       $training_members = $group->getMembers();
       $training_users = array_map(function ($member) {
-        /** @var \Drupal\group\GroupMembership $member */
+        /** @var GroupMembership $member */
         return $member->getUser();
       }, $training_members);
       foreach ($training_users as $user) {
-        /** @var \Drupal\user\UserInterface $user */
+        /** @var UserInterface $user */
         $id = $user->id();
         $name = $user->getDisplayName();
         $label = $this->t("@name (User #@id)", [
@@ @@
         ];
       }

-      /** @var \Drupal\group\Entity\Group[] $classes */
+      /** @var Group[] $classes */
       $classes = $group->getContentEntities('subgroup:opigno_class');
       foreach ($classes as $class) {
         $id = $class->id();
@@ @@
   /**
    * Returns response for the autocompletion.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    */
   public function membersAutocomplete(Group $group) {
     [$matches, $default] = $this->membersAutocompleteSelect($group);
@@ @@
   /**
    * Returns response for the autocompletion.
    *
-   * @param \Drupal\group\Entity\Group $group
+   * @param Group $group
    *   Group object.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response containing the autocomplete suggestions.
    */
   public function trainerAutocomplete(Group $group) {
@@ @@
     if (isset($group)) {
       $training_members = $group->getMembers();
       $training_users = array_map(function ($member) {
-        /** @var \Drupal\group\GroupMembership $member */
+        /** @var GroupMembership $member */
         return $member->getUser();
       }, $training_members);
       foreach ($training_users as $user) {
-        /** @var \Drupal\user\UserInterface $user */
+        /** @var UserInterface $user */
         $id = $user->id();
         $name = $user->getDisplayName();
         $label = $this->t("@name", [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/opigno_ilt/opigno_ilt.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\opigno_ilt\ILTInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Mail\MailManagerInterface;
+use Drupal\group\GroupMembership;
+use Drupal\group\Entity\GroupContentInterface;
+use Drupal\opigno_calendar_event\CalendarEventInterface;
+use Drupal\group\Entity\GroupInterface;
 /**
  * @file
  * Contains opigno_ilt.module.
@@ @@
 /**
  * Returns upcoming ILTs.
  *
- * @param \Drupal\user\UserInterface $user
+ * @param UserInterface $user
  *   User.
  *
- * @return \Drupal\opigno_ilt\ILTInterface[]
+ * @return ILTInterface[]
  *   Upcoming ILTs.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function _opigno_ilt_upcoming(UserInterface $user) {
   $timestamp = \Drupal::time()->getRequestTime();
@@ @@
  */
 function opigno_ilt_cron() {
   // Send the email notifications for the upcoming instructor-led training.
-  /** @var \Drupal\Core\Mail\MailManagerInterface $mail_service */
+  /** @var MailManagerInterface $mail_service */
   $mail_service = \Drupal::service('plugin.manager.mail');

   $timestamp = \Drupal::time()->getRequestTime();
@@ @@
     ], 'BETWEEN')
     ->execute();

-  /** @var \Drupal\opigno_ilt\ILTInterface[] $ilts */
+  /** @var ILTInterface[] $ilts */
   $ilts = ILT::loadMultiple($ilts_ids);
   foreach ($ilts as $ilt) {
     $members = $ilt->getMembers();
@@ @@
       $training = $ilt->getTraining();
       if ($training !== NULL) {
         $members = array_map(function ($member) {
-          /** @var \Drupal\group\GroupMembership $member */
+          /** @var GroupMembership $member */
           return $member->getUser();
         }, $training->getMembers());
       }
@@ @@
     }

     $notified = $ilt->getNotifiedMembers();
-    /** @var \Drupal\user\UserInterface[] $not_notified */
+    /** @var UserInterface[] $not_notified */
     $not_notified = array_udiff($members, $notified, function ($user1, $user2) {
       /** @var \Drupal\user\UserInterface $user1 */
-      /** @var \Drupal\user\UserInterface $user2 */
+      /** @var UserInterface $user2 */
       return $user2->id() - $user1->id();
     });

@@ @@
  * Removes the related training field in an instructor-led training.
  */
 function opigno_ilt_group_content_delete(EntityInterface $entity) {
-  /** @var \Drupal\group\Entity\GroupContentInterface $entity */
+  /** @var GroupContentInterface $entity */
   $content = $entity->getEntity();
   if (!isset($content)) {
     // If related entity is already deleted.
@@ @@

   $type = $content->getEntityTypeId();
   if ($type === 'opigno_ilt') {
-    /** @var \Drupal\opigno_ilt\ILTInterface $content */
+    /** @var ILTInterface $content */
     $content->setTrainingId(NULL);
     $content->save();
   }
@@ @@
  * Implements hook_ENTITY_TYPE_insert().
  */
 function opigno_ilt_group_content_insert(EntityInterface $entity) {
-  /** @var \Drupal\group\Entity\GroupContentInterface $entity */
+  /** @var GroupContentInterface $entity */
   $bundle = $entity->bundle();
   $type = $entity->getEntity()->getEntityTypeId();
   if ($bundle === 'learning_path-group_membership') {
@@ @@
   }
   elseif ($type === 'opigno_ilt') {
     // Updates the related training field in an instructor-led training.
-    /** @var \Drupal\opigno_ilt\ILTInterface $ilt */
+    /** @var ILTInterface $ilt */
     $ilt = $entity->getEntity();
     $training = $entity->getGroup();
     $ilt->setTraining($training);
@@ @@
  */
 function opigno_ilt_opigno_ilt_insert(EntityInterface $entity) {
   // Set instructor-led training reference on a related calendar event.
-  /** @var \Drupal\opigno_ilt\ILTInterface $entity */
+  /** @var ILTInterface $entity */
   $calendar_event = $entity->getCalendarEvent();
   if (isset($calendar_event)) {
     $calendar_event->set('field_ilt', $entity);
@@ @@
  */
 function opigno_ilt_opigno_ilt_presave(EntityInterface $entity) {
   /** @var \Drupal\opigno_ilt\ILTInterface $entity */
-  /** @var \Drupal\opigno_calendar_event\Entity\CalendarEvent $calendar_event */
+  /** @var CalendarEvent $calendar_event */
   $calendar_event = $entity->getCalendarEvent();
   if (!isset($calendar_event)) {
     $calendar_event = CalendarEvent::create([
@@ @@
     $training = $entity->getTraining();
     if (isset($training)) {
       $members = array_map(function ($member) {
-        /** @var \Drupal\group\GroupMembership $member */
+        /** @var GroupMembership $member */
         return $member->getUser()->id();
       }, $training->getMembers());
     }
@@ @@
  */
 function opigno_ilt_opigno_ilt_update(EntityInterface $entity) {
   // Set instructor-led training reference on a related calendar event.
-  /** @var \Drupal\opigno_ilt\ILTInterface $entity */
+  /** @var ILTInterface $entity */
   $calendar_event = $entity->getCalendarEvent();
   if (isset($calendar_event)) {
     $calendar_event->set('field_ilt', $entity);
@@ @@
   $id = $vars['view']->id();
   $field = $vars['field']->field;
   if ($id === 'opigno_calendar' && $field === 'title') {
-    /** @var \Drupal\opigno_calendar_event\CalendarEventInterface $entity */
+    /** @var CalendarEventInterface $entity */
     $entity = $vars['row']->_entity;
     $bundle = $entity->bundle();
     if ($bundle === 'ilt_calendar_event') {
       $title = $vars['field']->getValue($vars['row']);
-      /** @var \Drupal\opigno_ilt\ILTInterface $ilt */
+      /** @var ILTInterface $ilt */
       $ilt = $entity->get('field_ilt')->entity;
       if (isset($ilt)) {
         $link = Link::createFromRoute($title, 'entity.opigno_ilt.canonical', [
@@ @@
     return;
   }

-  /** @var \Drupal\group\Entity\GroupInterface $group */
+  /** @var GroupInterface $group */
   $group = $route->getParameter('group');
   if (!isset($group)) {
     $group_id = OpignoGroupContext::getCurrentGroupId();
@@ @@
   $ilt_ids = array_map(function ($step) {
     return $step['id'];
   }, $ilt_steps);
-  /** @var \Drupal\opigno_ilt\ILTInterface[] $ilts */
+  /** @var ILTInterface[] $ilts */
   $ilts = ILT::loadMultiple($ilt_ids);
   foreach ($ilts as $ilt) {
     if (!$ilt->isMember($user_id)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


15) modules/contrib/opigno_ilt/opigno_ilt.install:54

    ---------- begin diff ----------
@@ @@
  * Update display view.
  */
 function opigno_ilt_update_9001() {
-  $config_path = drupal_get_path('module', 'opigno_ilt') . '/config/install';
+  $config_path = \Drupal::service('extension.list.module')->getPath('opigno_ilt') . '/config/install';
   $storage = new FileStorage($config_path);

   $config_storage = \Drupal::service('config.storage');
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [OK] 15 files have been changed by Rector                                      

