modules/contrib/access_filter/src/AccessFilterLegacyMiddleware.php
modules/contrib/access_filter/src/AccessFilterListBuilder.php
modules/contrib/access_filter/src/AccessFilterMiddleware.php
modules/contrib/access_filter/src/AccessFilterServiceProvider.php
modules/contrib/access_filter/src/Annotation/AccessFilterCondition.php
modules/contrib/access_filter/src/Annotation/AccessFilterRule.php
modules/contrib/access_filter/src/Entity/Filter.php
modules/contrib/access_filter/src/FilterInterface.php
modules/contrib/access_filter/src/Form/DeleteForm.php
modules/contrib/access_filter/src/Form/EditForm.php
modules/contrib/access_filter/src/Plugin/AccessFilter/Condition/AndCondition.php
modules/contrib/access_filter/src/Plugin/AccessFilter/Condition/ArrayConditionBase.php
modules/contrib/access_filter/src/Plugin/AccessFilter/Condition/ChainConditionBase.php
modules/contrib/access_filter/src/Plugin/AccessFilter/Condition/ConditionBase.php
modules/contrib/access_filter/src/Plugin/AccessFilter/Condition/CookieCondition.php
modules/contrib/access_filter/src/Plugin/AccessFilter/Condition/OrCondition.php
modules/contrib/access_filter/src/Plugin/AccessFilter/Condition/PathCondition.php
modules/contrib/access_filter/src/Plugin/AccessFilter/Condition/ServerEnvironmentCondition.php
modules/contrib/access_filter/src/Plugin/AccessFilter/Condition/SessionCondition.php
modules/contrib/access_filter/src/Plugin/AccessFilter/Condition/UriCondition.php
modules/contrib/access_filter/src/Plugin/AccessFilter/Rule/IpRule.php
modules/contrib/access_filter/src/Plugin/AccessFilterPluginManager.php
modules/contrib/access_filter/src/Plugin/AccessFilterPluginManagerInterface.php
modules/contrib/access_filter/src/Plugin/ConditionInterface.php
modules/contrib/access_filter/src/Plugin/RuleInterface.php

13 files with changes
=====================

1) modules/contrib/access_filter/src/Plugin/RuleInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\access_filter\Plugin;

+use Drupal\Core\Access\AccessResult;
 use Symfony\Component\HttpFoundation\Request;

 /**
@@ @@
   /**
    * Checks the current access by the rule.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   A request instance.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   The access result.
    */
   public function check(Request $request);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/access_filter/src/Plugin/ConditionInterface.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * Checks the current access is matched to the condition.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   A request instance.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/access_filter/src/Plugin/AccessFilterPluginManager.php:24

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct($type, \Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/access_filter/src/Plugin/AccessFilter/Condition/PathCondition.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The path matcher.
    *
-   * @var \Drupal\Core\Path\PathMatcherInterface
+   * @var PathMatcherInterface
    */
   protected $pathMatcher;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Path\PathMatcherInterface $path_matcher
+   * @param PathMatcherInterface $path_matcher
    *   The path matcher.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, PathMatcherInterface $path_matcher) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/access_filter/src/Plugin/AccessFilter/Condition/ChainConditionBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\access_filter\Plugin\AccessFilter\Condition;

+use Drupal\access_filter\Plugin\ConditionInterface;
 use Drupal\access_filter\Plugin\AccessFilterPluginManagerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;

@@ @@
   /**
    * The access filter condition plugin manager.
    *
-   * @var \Drupal\access_filter\Plugin\AccessFilterPluginManagerInterface
+   * @var AccessFilterPluginManagerInterface
    */
   protected $conditionPluginManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\access_filter\Plugin\AccessFilterPluginManagerInterface $condition_plugin_manager
+   * @param AccessFilterPluginManagerInterface $condition_plugin_manager
    *   The access filter condition plugin manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, AccessFilterPluginManagerInterface $condition_plugin_manager) {
@@ @@
    * @param array $condition
    *   The array containing condition data.
    *
-   * @return \Drupal\access_filter\Plugin\ConditionInterface|bool
+   * @return ConditionInterface|bool
    *   Plugin instance or FALSE if failed.
    */
   protected function createPluginInstance(array $condition) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/access_filter/src/Form/EditForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The access filter condition plugin manager.
    *
-   * @var \Drupal\access_filter\Plugin\AccessFilterPluginManagerInterface
+   * @var AccessFilterPluginManagerInterface
    */
   protected $conditionPluginManager;

@@ @@
   /**
    * The access filter rule plugin manager.
    *
-   * @var \Drupal\access_filter\Plugin\AccessFilterPluginManagerInterface
+   * @var AccessFilterPluginManagerInterface
    */
   protected $rulePluginManager;

@@ @@
   /**
    * Constructs a new EditForm object.
    *
-   * @param \Drupal\access_filter\Plugin\AccessFilterPluginManagerInterface $condition_plugin_manager
+   * @param AccessFilterPluginManagerInterface $condition_plugin_manager
    *   The access filter condition plugin manager.
-   * @param \Drupal\access_filter\Plugin\AccessFilterPluginManagerInterface $rule_plugin_manager
+   * @param AccessFilterPluginManagerInterface $rule_plugin_manager
    *   The access filter rule plugin manager.
    */
   public function __construct(AccessFilterPluginManagerInterface $condition_plugin_manager, AccessFilterPluginManagerInterface $rule_plugin_manager) {
@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\access_filter\Entity\Filter $filter */
+    /** @var Filter $filter */
     $filter = $this->entity;

     $dumper = new Dumper();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/access_filter/src/FilterInterface.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Checks the current access is allowed using the filter.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   A request instance.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/access_filter/src/Entity/Filter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\access_filter\Entity;

+use Drupal\access_filter\Plugin\ConditionInterface;
+use Drupal\access_filter\Plugin\RuleInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\access_filter\FilterInterface;
 use Symfony\Component\HttpFoundation\Request;
@@ @@
   /**
    * Parsed conditions.
    *
-   * @var \Drupal\access_filter\Plugin\ConditionInterface[]
+   * @var ConditionInterface[]
    */
   protected $parsedConditions;

@@ @@
   /**
    * Parsed rules.
    *
-   * @var \Drupal\access_filter\Plugin\RuleInterface[]
+   * @var RuleInterface[]
    */
   protected $parsedRules;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/access_filter/src/Annotation/AccessFilterRule.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\access_filter\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The title of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


10) modules/contrib/access_filter/src/Annotation/AccessFilterCondition.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\access_filter\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


11) modules/contrib/access_filter/src/AccessFilterMiddleware.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The decorated kernel.
    *
-   * @var \Symfony\Component\HttpKernel\HttpKernelInterface
+   * @var HttpKernelInterface
    */
   protected $httpKernel;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructs a new AccessFilterMiddleware object.
    *
-   * @param \Symfony\Component\HttpKernel\HttpKernelInterface $http_kernel
+   * @param HttpKernelInterface $http_kernel
    *   The decorated kernel.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(HttpKernelInterface $http_kernel, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/access_filter/src/AccessFilterListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\access_filter;

+use Drupal\access_filter\Entity\Filter;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Config\Entity\DraggableListBuilder;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\access_filter\Entity\Filter $entity */
+    /** @var Filter $entity */
     $entity->parse();

     if (!$entity->status()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/access_filter/src/AccessFilterLegacyMiddleware.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The decorated kernel.
    *
-   * @var \Symfony\Component\HttpKernel\HttpKernelInterface
+   * @var HttpKernelInterface
    */
   protected $httpKernel;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructs a new AccessFilterLegacyMiddleware object.
    *
-   * @param \Symfony\Component\HttpKernel\HttpKernelInterface $http_kernel
+   * @param HttpKernelInterface $http_kernel
    *   The decorated kernel.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(HttpKernelInterface $http_kernel, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 13 files have been changed by Rector                                      

