diff --git a/field_tokens.tokens.inc b/field_tokens.tokens.inc
index 18e9129..01d70ab 100644
--- a/field_tokens.tokens.inc
+++ b/field_tokens.tokens.inc
@@ -1,5 +1,17 @@
 <?php
 
+use Drupal\Core\Field\FieldTypePluginManager;
+use Drupal\Core\Field\FormatterPluginManager;
+use Drupal\field\FieldConfigStorage;
+use Drupal\token\TokenEntityMapper;
+use Drupal\Core\TypedData\DataDefinition;
+use Drupal\Core\Entity\EntityTypeBundleInfo;
+use Drupal\Core\Entity\EntityFieldManager;
+use Drupal\token\Token;
+use Drupal\Core\Entity\ContentEntityBase;
+use Drupal\Core\Field\FieldItemList;
+use Drupal\Core\Field\FieldItemBase;
+use Drupal\Core\Entity\Entity\EntityViewDisplay;
 /**
  * @file
  * Token functions for Field tokens module.
@@ -16,20 +28,20 @@ use Drupal\field\Entity\FieldConfig;
  * Implements hook_token_info().
  */
 function field_tokens_token_info() {
-  /** @var \Drupal\Core\Field\FieldTypePluginManager $field_type_manager */
+  /** @var FieldTypePluginManager $field_type_manager */
   $field_type_manager = \Drupal::service('plugin.manager.field.field_type');
   $field_types = $field_type_manager->getDefinitions();
 
-  /** @var \Drupal\Core\Field\FormatterPluginManager $formatter_manager */
+  /** @var FormatterPluginManager $formatter_manager */
   $formatter_manager = \Drupal::service('plugin.manager.field.formatter');
   $formatters = $formatter_manager->getDefinitions();
 
-  /** @var \Drupal\field\FieldConfigStorage $field_config_storage */
+  /** @var FieldConfigStorage $field_config_storage */
   $field_config_storage = \Drupal::entityTypeManager()
     ->getStorage('field_config');
   $fields = $field_config_storage->loadMultiple();
 
-  /** @var \Drupal\token\TokenEntityMapper $token_entity_mapper */
+  /** @var TokenEntityMapper $token_entity_mapper */
   $token_entity_mapper = \Drupal::service('token.entity_mapper');
 
   $types = [];
@@ -72,13 +84,13 @@ function field_tokens_token_info() {
     }
 
     // Build tokens for each property of the current field type.
-    /** @var \Drupal\field\Entity\FieldConfig $field */
+    /** @var FieldConfig $field */
     foreach ($fields as $field) {
       if ($field->getType() == $field_type_name) {
         $properties = $field->getFieldStorageDefinition()
           ->getPropertyDefinitions();
 
-        /** @var \Drupal\Core\TypedData\DataDefinition $data_definition */
+        /** @var DataDefinition $data_definition */
         foreach ($properties as $property_name => $data_definition) {
           $tokens["field_property-{$field_type_name}"][$property_name] = [
             'name'        => $data_definition->getLabel(),
@@ -116,13 +128,13 @@ function field_tokens_token_info() {
  * Implements hook_token_info_alter().
  */
 function field_tokens_token_info_alter(&$data) {
-  /** @var \Drupal\Core\Entity\EntityTypeBundleInfo $bundle_info */
+  /** @var EntityTypeBundleInfo $bundle_info */
   $bundle_info = \Drupal::service('entity_type.bundle.info');
 
-  /** @var \Drupal\Core\Entity\EntityFieldManager $entity_field_manager */
+  /** @var EntityFieldManager $entity_field_manager */
   $entity_field_manager = \Drupal::service('entity_field.manager');
 
-  /** @var \Drupal\token\TokenEntityMapper $token_entity_mapper */
+  /** @var TokenEntityMapper $token_entity_mapper */
   $token_entity_mapper = \Drupal::service('token.entity_mapper');
   $token_entity_map = $token_entity_mapper->getEntityTypeMappings();
   foreach ($token_entity_map as $entity_type => $token_type) {
@@ -164,9 +176,9 @@ function field_tokens_token_info_alter(&$data) {
  * Implements hook_tokens().
  */
 function field_tokens_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
-  /** @var \Drupal\token\Token $token_service */
+  /** @var Token $token_service */
   $token_service = \Drupal::token();
-  /** @var \Drupal\Core\Field\FormatterPluginManager $formatter_manager */
+  /** @var FormatterPluginManager $formatter_manager */
   $formatter_manager = \Drupal::service('plugin.manager.field.formatter');
 
   $url_options = ['absolute' => TRUE];
@@ -191,10 +203,10 @@ function field_tokens_tokens($type, $tokens, array $data, array $options, Bubble
 
   // Entity tokens.
   if ($type == 'entity' && !empty($data['entity'])) {
-    /** @var \Drupal\Core\Entity\ContentEntityBase $entity */
+    /** @var ContentEntityBase $entity */
     $entity = $data['entity'];
     $fields = $entity->getFieldDefinitions();
-    /** @var \Drupal\field\Entity\FieldConfig $field */
+    /** @var FieldConfig $field */
     foreach ($fields as $field_name => $field) {
       if ($field instanceof FieldConfig) {
         foreach ($token_types as $token_type => $token_type_info) {
@@ -202,7 +214,7 @@ function field_tokens_tokens($type, $tokens, array $data, array $options, Bubble
           if ($field_tokens) {
             $token_data_type = $token_type_info['field_type'] ? "{$token_type_info['token_type']}-{$field->getType()}" : $token_type_info['token_type'];
             foreach ($field_tokens as $name => $original) {
-              /** @var \Drupal\Core\Field\FieldItemList $items */
+              /** @var FieldItemList $items */
               $items = $entity->{$field_name};
               if (!$items->isEmpty()) {
                 $parts = explode(':', $name);
@@ -215,7 +227,7 @@ function field_tokens_tokens($type, $tokens, array $data, array $options, Bubble
                     $token_items[] = $items[$delta];
                   }
 
-                  /** @var \Drupal\Core\Field\FieldItemBase $item */
+                  /** @var FieldItemBase $item */
                   foreach ($token_items as $item) {
                     if ($item->isEmpty()) {
                       continue(2);
@@ -239,15 +251,15 @@ function field_tokens_tokens($type, $tokens, array $data, array $options, Bubble
 
   // Formatted field tokens.
   elseif (strpos($type, 'formatted_field') === 0 && isset($data[$type]) && isset($data['entity_type']) && isset($data['entity'])) {
-    /** @var \Drupal\Core\Entity\ContentEntityBase $entity */
+    /** @var ContentEntityBase $entity */
     $entity = $data['entity'];
 
-    /** @var \Drupal\field\Entity\FieldConfig $field */
+    /** @var FieldConfig $field */
     $field = $data['field'];
     $field_type = \Drupal::service('plugin.manager.field.field_type')
       ->getDefinition($field->getType());
 
-    /** @var \Drupal\Core\Entity\Entity\EntityViewDisplay $display */
+    /** @var EntityViewDisplay $display */
     $view_mode = \Drupal::entityTypeManager()
       ->getStorage('entity_view_display')
       ->load($entity->getEntityTypeId() . '.' . $entity->getType() . '.default');
@@ -313,14 +325,14 @@ function field_tokens_tokens($type, $tokens, array $data, array $options, Bubble
 
       $args = explode(':', $args);
       $property = array_shift($args);
-      /** @var Drupal\Core\Field\FieldItemBase $item */
+      /** @var FieldItemBase $item */
       foreach ($data['field_property'] as $item) {
         $properties = $field->getFieldStorageDefinition()
           ->getPropertyDefinitions();
         if (isset($properties[$property]) && $properties[$property] instanceof DataReferenceDefinition && !empty($args)) {
           $reference = $item->get($property)->getValue();
           if ($reference instanceof EntityInterface) {
-            /** @var \Drupal\token\TokenEntityMapper $token_entity_mapper */
+            /** @var TokenEntityMapper $token_entity_mapper */
             $token_entity_mapper = \Drupal::service('token.entity_mapper');
 
             $token_type = $token_entity_mapper->getTokenTypeForEntityType($reference->getEntityTypeId());
diff --git a/src/Tests/FieldTokensFormattedTest.php b/src/Tests/FieldTokensFormattedTest.php
index 6229801..55e3448 100644
--- a/src/Tests/FieldTokensFormattedTest.php
+++ b/src/Tests/FieldTokensFormattedTest.php
@@ -36,7 +36,7 @@ class FieldTokensFormattedTest extends FieldTokensTestBase {
     $value = \Drupal::service('token')->replace($token, ['node' => $node]);
 
     // Check the token is rendered correctly.
-    $this->assertEqual($value, $output, $token . ' matches rendered Image formatter for provided Image field.');
+    $this->assertEquals($value, $output, $token . ' matches rendered Image formatter for provided Image field.');
   }
 
 }
