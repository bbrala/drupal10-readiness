diff --git a/modules/salesforce_example/salesforce_example-apex_endpoint.php b/modules/salesforce_example/salesforce_example-apex_endpoint.php
index 7390875c..574948a2 100644
--- a/modules/salesforce_example/salesforce_example-apex_endpoint.php
+++ b/modules/salesforce_example/salesforce_example-apex_endpoint.php
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\salesforce\Rest\RestClientInterface;
+use Psr\Http\Message\ResponseInterface;
 /**
  * @file
  * Examples.
@@ -26,8 +28,7 @@ $returnObject = FALSE;
 // Uncomment the following line to get Drupal\salesforce\Rest\RestResponse object instead of json-decoded value:
 // $returnObject = TRUE;.
 // Instantiate the client so we can reference the response later if necessary:
-
-/** @var \Drupal\salesforce\Rest\RestClientInterface $client */
+/** @var RestClientInterface $client */
 $client = \Drupal::service('salesforce.client');
 
 $method = 'POST';
@@ -50,7 +51,7 @@ catch (RestException $e) {
   // - SF response contains an 'error' element
   // - SF response contains an 'errorCode' element.
   /**
- * @var Psr\Http\Message\ResponseInterface **/
+   * @var ResponseInterface **/
   $response = $e->getResponse();
 
   // Convenience wrapper for $response->getBody()->getContents()
diff --git a/modules/salesforce_example/salesforce_example.module b/modules/salesforce_example/salesforce_example.module
index ccf85eb2..10327e71 100644
--- a/modules/salesforce_example/salesforce_example.module
+++ b/modules/salesforce_example/salesforce_example.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\salesforce_mapping\MappedObjectStorage;
+use Drupal\salesforce_mapping\Entity\MappedObject;
+use Drupal\salesforce\SObject;
 /**
  * @file
  * Contains salesforce_example.module.
@@ -76,7 +79,7 @@ function salesforce_example_entity_delete(EntityInterface $entity) {
  */
 function _salesforce_example_entity_manage(EntityInterface &$entity, $op) {
 
-  /** @var \Drupal\salesforce_mapping\MappedObjectStorage $mapped_object_storage */
+  /** @var MappedObjectStorage $mapped_object_storage */
   $mapped_object_storage = &drupal_static(__FUNCTION__);
 
   if (!isset($mapped_object_storage)) {
@@ -92,7 +95,7 @@ function _salesforce_example_entity_manage(EntityInterface &$entity, $op) {
   // objects.
   if ($entity->getEntityTypeId() == 'salesforce_mapped_object') {
 
-    /** @var \Drupal\salesforce_mapping\Entity\MappedObject $entity */
+    /** @var MappedObject $entity */
     $mapped_entity = $entity->getMappedEntity();
     if (!$mapped_entity) {
       return;
@@ -102,7 +105,7 @@ function _salesforce_example_entity_manage(EntityInterface &$entity, $op) {
     // with was a Commerce Product
     // Variation.
     if ($mapped_entity->getEntityTypeId() == 'commerce_product_variation') {
-      /** @var \Drupal\salesforce\SObject $sf */
+      /** @var SObject $sf */
       $sf = $entity->getSalesforceRecord();
 
       if ($sf != NULL) {
diff --git a/modules/salesforce_example/src/EventSubscriber/SalesforceExampleSubscriber.php b/modules/salesforce_example/src/EventSubscriber/SalesforceExampleSubscriber.php
index 88752223..91056b74 100644
--- a/modules/salesforce_example/src/EventSubscriber/SalesforceExampleSubscriber.php
+++ b/modules/salesforce_example/src/EventSubscriber/SalesforceExampleSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\salesforce_example\EventSubscriber;
 
+use Drupal\user\Entity\User;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\salesforce\Event\SalesforceEvents;
@@ -27,7 +28,7 @@ class SalesforceExampleSubscriber implements EventSubscriberInterface {
   /**
    * SalesforcePushAllowedEvent callback.
    *
-   * @param \Drupal\salesforce_mapping\Event\SalesforcePushAllowedEvent $event
+   * @param SalesforcePushAllowedEvent $event
    *   The push allowed event.
    */
   public function pushAllowed(SalesforcePushAllowedEvent $event) {
@@ -41,7 +42,7 @@ class SalesforceExampleSubscriber implements EventSubscriberInterface {
   /**
    * SalesforcePushParamsEvent callback.
    *
-   * @param \Drupal\salesforce_mapping\Event\SalesforcePushParamsEvent $event
+   * @param SalesforcePushParamsEvent $event
    *   The event.
    */
   public function pushParamsAlter(SalesforcePushParamsEvent $event) {
@@ -66,7 +67,7 @@ class SalesforceExampleSubscriber implements EventSubscriberInterface {
   /**
    * SalesforcePushParamsEvent push success callback.
    *
-   * @param \Drupal\salesforce_mapping\Event\SalesforcePushParamsEvent $event
+   * @param SalesforcePushParamsEvent $event
    *   The event.
    */
   public function pushSuccess(SalesforcePushParamsEvent $event) {
@@ -85,7 +86,7 @@ class SalesforceExampleSubscriber implements EventSubscriberInterface {
   /**
    * SalesforcePushParamsEvent push fail callback.
    *
-   * @param \Drupal\salesforce_mapping\Event\SalesforcePushOpEvent $event
+   * @param SalesforcePushOpEvent $event
    *   The event.
    */
   public function pushFail(SalesforcePushOpEvent $event) {
@@ -95,7 +96,7 @@ class SalesforceExampleSubscriber implements EventSubscriberInterface {
   /**
    * SalesforceQueryEvent pull query alter event callback.
    *
-   * @param \Drupal\salesforce_mapping\Event\SalesforceQueryEvent $event
+   * @param SalesforceQueryEvent $event
    *   The event.
    */
   public function pullQueryAlter(SalesforceQueryEvent $event) {
@@ -120,7 +121,7 @@ class SalesforceExampleSubscriber implements EventSubscriberInterface {
   /**
    * Pull presave event callback.
    *
-   * @param \Drupal\salesforce_mapping\Event\SalesforcePullEvent $event
+   * @param SalesforcePullEvent $event
    *   The event.
    */
   public function pullPresave(SalesforcePullEvent $event) {
@@ -165,7 +166,7 @@ class SalesforceExampleSubscriber implements EventSubscriberInterface {
 
         // Attach the new file id to the user entity.
         /* var \Drupal\file\FileInterface */
-        if ($file = file_save_data($file_data, $destination, FileSystemInterface::EXISTS_REPLACE)) {
+        if ($file = \Drupal::service('file.repository')->writeData($file_data, $destination, FileSystemInterface::EXISTS_REPLACE)) {
           $account->user_picture->target_id = $file->id();
         }
         else {
@@ -186,7 +187,7 @@ class SalesforceExampleSubscriber implements EventSubscriberInterface {
     switch ($mapping->id()) {
       case 'contact':
         $sf_data = $event->getMappedObject()->getSalesforceRecord();
-        /** @var \Drupal\user\Entity\User $account */
+        /** @var User $account */
         $account = $event->getEntity();
         try {
           if (!$sf_data->field('Inactive__c')) {
diff --git a/modules/salesforce_jwt/src/Plugin/SalesforceAuthProvider/SalesforceJWTGovCloudPlugin.php b/modules/salesforce_jwt/src/Plugin/SalesforceAuthProvider/SalesforceJWTGovCloudPlugin.php
index c08f0bc5..8ae52fd3 100644
--- a/modules/salesforce_jwt/src/Plugin/SalesforceAuthProvider/SalesforceJWTGovCloudPlugin.php
+++ b/modules/salesforce_jwt/src/Plugin/SalesforceAuthProvider/SalesforceJWTGovCloudPlugin.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\salesforce_jwt\Plugin\SalesforceAuthProvider;
 
+use OAuth\Common\Token\TokenInterface;
+use OAuth\Common\Http\Exception\TokenResponseException;
 use Drupal\Core\Form\FormStateInterface;
 use OAuth\Common\Http\Uri\Uri;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -68,10 +70,10 @@ class SalesforceJWTGovCloudPlugin extends SalesforceJWTPlugin {
    * @param string $state
    *   Not used.
    *
-   * @return \OAuth\Common\Token\TokenInterface
+   * @return TokenInterface
    *   Access Token.
    *
-   * @throws \OAuth\Common\Http\Exception\TokenResponseException
+   * @throws TokenResponseException
    */
   public function requestAccessToken($assertion, $state = NULL) {
     $data = [
diff --git a/modules/salesforce_jwt/src/Plugin/SalesforceAuthProvider/SalesforceJWTPlugin.php b/modules/salesforce_jwt/src/Plugin/SalesforceAuthProvider/SalesforceJWTPlugin.php
index 379c00b9..02d07a49 100644
--- a/modules/salesforce_jwt/src/Plugin/SalesforceAuthProvider/SalesforceJWTPlugin.php
+++ b/modules/salesforce_jwt/src/Plugin/SalesforceAuthProvider/SalesforceJWTPlugin.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\salesforce_jwt\Plugin\SalesforceAuthProvider;
 
+use Drupal\salesforce_jwt\Consumer\JWTCredentials;
+use OAuth\OAuth2\Service\Exception\InvalidScopeException;
+use OAuth\Common\Http\Exception\TokenResponseException;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
 use Drupal\key\KeyRepositoryInterface;
@@ -27,7 +30,7 @@ class SalesforceJWTPlugin extends SalesforceAuthProviderPluginBase {
   /**
    * The credentials for this auth plugin.
    *
-   * @var \Drupal\salesforce_jwt\Consumer\JWTCredentials
+   * @var JWTCredentials
    */
   protected $credentials;
 
@@ -47,14 +50,14 @@ class SalesforceJWTPlugin extends SalesforceAuthProviderPluginBase {
    *   Plugin id.
    * @param mixed $plugin_definition
    *   Plugin definition.
-   * @param \OAuth\Common\Http\Client\ClientInterface $httpClient
+   * @param ClientInterface $httpClient
    *   Http client wrapper.
-   * @param \Drupal\salesforce\Storage\SalesforceAuthTokenStorageInterface $storage
+   * @param SalesforceAuthTokenStorageInterface $storage
    *   Token storage.
    * @param \Drupal\key\KeyRepositoryInterface $keyRepository
    *   Key repository.
    *
-   * @throws \OAuth\OAuth2\Service\Exception\InvalidScopeException
+   * @throws InvalidScopeException
    *   On error.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ClientInterface $httpClient, SalesforceAuthTokenStorageInterface $storage, KeyRepositoryInterface $keyRepository) {
@@ -164,10 +167,10 @@ class SalesforceJWTPlugin extends SalesforceAuthProviderPluginBase {
    * @param string $state
    *   Not used.
    *
-   * @return \OAuth\Common\Token\TokenInterface
+   * @return TokenInterface
    *   Access Token.
    *
-   * @throws \OAuth\Common\Http\Exception\TokenResponseException
+   * @throws TokenResponseException
    */
   public function requestAccessToken($assertion, $state = NULL) {
     $data = [
diff --git a/modules/salesforce_jwt/tests/src/FunctionalJavascript/SalesforceJwtTest.php b/modules/salesforce_jwt/tests/src/FunctionalJavascript/SalesforceJwtTest.php
index da9d5087..f40c027c 100644
--- a/modules/salesforce_jwt/tests/src/FunctionalJavascript/SalesforceJwtTest.php
+++ b/modules/salesforce_jwt/tests/src/FunctionalJavascript/SalesforceJwtTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\salesforce_jwt\FunctionalJavascript;
 
+use Drupal\user\Entity\User;
+use Drupal\key\Entity\Key;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 
 /**
@@ -42,7 +44,7 @@ class SalesforceJwtTest extends WebDriverTestBase {
   /**
    * Admin user to test form.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $adminUser;
 
@@ -59,7 +61,7 @@ class SalesforceJwtTest extends WebDriverTestBase {
     $this->adminUser = $this->drupalCreateUser(['authorize salesforce']);
     $this->drupalLogin($this->adminUser);
     $this->createTestKey(self::KEY_ID, 'authentication', 'file');
-    \Drupal\key\Entity\Key::load(self::KEY_ID)
+    Key::load(self::KEY_ID)
       ->set('key_provider_settings', [
         'file_location' => __DIR__ . '/testKey.pem',
         'strip_line_breaks' => FALSE,
@@ -121,7 +123,7 @@ class SalesforceJwtTest extends WebDriverTestBase {
     if ($provider != NULL) {
       $keyArgs['key_provider'] = $provider;
     }
-    $this->testKey = \Drupal\key\Entity\Key::create($keyArgs);
+    $this->testKey = Key::create($keyArgs);
     $this->testKey->save();
     return $this->testKey;
   }
diff --git a/modules/salesforce_logger/src/EventSubscriber/SalesforceLoggerSubscriber.php b/modules/salesforce_logger/src/EventSubscriber/SalesforceLoggerSubscriber.php
index 47420ee0..335b1cf3 100644
--- a/modules/salesforce_logger/src/EventSubscriber/SalesforceLoggerSubscriber.php
+++ b/modules/salesforce_logger/src/EventSubscriber/SalesforceLoggerSubscriber.php
@@ -21,14 +21,14 @@ class SalesforceLoggerSubscriber implements EventSubscriberInterface {
   /**
    * Logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * Create a new Salesforce Logger Subscriber.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
    */
   public function __construct(LoggerInterface $logger) {
@@ -50,7 +50,7 @@ class SalesforceLoggerSubscriber implements EventSubscriberInterface {
   /**
    * SalesforceException event callback.
    *
-   * @param \Drupal\salesforce\Event\SalesforceExceptionEventInterface $event
+   * @param SalesforceExceptionEventInterface $event
    *   The event.
    */
   public function salesforceException(SalesforceExceptionEventInterface $event) {
diff --git a/modules/salesforce_mapping/salesforce_mapping.drush.inc b/modules/salesforce_mapping/salesforce_mapping.drush.inc
index 46069360..98c658e2 100644
--- a/modules/salesforce_mapping/salesforce_mapping.drush.inc
+++ b/modules/salesforce_mapping/salesforce_mapping.drush.inc
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\salesforce_mapping\MappedObjectStorage;
+use Drupal\salesforce_mapping\Entity\MappedObject;
+use Drupal\Core\Entity\EntityStorageException;
 /**
  * @file
  * Drush integration for Salesforce.
@@ -63,7 +66,7 @@ function drush_salesforce_mapping_sf_prune_revisions() {
     return;
   }
   $etm = \Drupal::service('entity_type.manager');
-  /** @var \Drupal\salesforce_mapping\MappedObjectStorage $storage */
+  /** @var MappedObjectStorage $storage */
   $storage = $etm
     ->getStorage('salesforce_mapped_object');
   $revision_table = $etm
@@ -91,7 +94,7 @@ function drush_salesforce_mapping_sf_prune_revisions() {
     if ($i++ % $buckets == 0) {
       drush_log("Pruned $i of $total records.", 'ok');
     }
-    /** @var \Drupal\salesforce_mapping\Entity\MappedObject $mapped_object */
+    /** @var MappedObject $mapped_object */
     if ($mapped_object = $storage->load($id)) {
       $mapped_object->pruneRevisions($storage);
     }
@@ -277,7 +280,7 @@ function drush_salesforce_mapping_sf_purge_all() {
 /**
  * Helper to fetch object types by prefix.
  *
- * @param \Drupal\salesforce\Rest\RestClientInterface $client
+ * @param RestClientInterface $client
  *   Client interface.
  *
  * @return array
@@ -297,12 +300,12 @@ function _drush_salesforce_mapping_object_types_by_prefix(RestClientInterface $c
  *
  * @param array $object_ids
  *   Records to be deleted.
- * @param \Drupal\Core\Entity\ContentEntityStorageInterface $storage
+ * @param ContentEntityStorageInterface $storage
  *   Storage.
  * @param string $extra
  *   Extra message parts.
  *
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws EntityStorageException
  */
 function _drush_salesforce_mapping_confirm_and_delete(array $object_ids, ContentEntityStorageInterface $storage, $extra = '') {
   if (empty($object_ids)) {
diff --git a/modules/salesforce_mapping/src/Commands/SalesforceMappingCommands.php b/modules/salesforce_mapping/src/Commands/SalesforceMappingCommands.php
index 3f8def96..44cced21 100644
--- a/modules/salesforce_mapping/src/Commands/SalesforceMappingCommands.php
+++ b/modules/salesforce_mapping/src/Commands/SalesforceMappingCommands.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\salesforce_mapping\Commands;
 
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\salesforce_mapping\Entity\MappedObject;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -29,35 +33,35 @@ class SalesforceMappingCommands extends SalesforceMappingCommandsBase {
   /**
    * Salesforce settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $salesforceConfig;
 
   /**
    * Database service.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * SalesforceMappingCommands constructor.
    *
-   * @param \Drupal\salesforce\Rest\RestClient $client
+   * @param RestClient $client
    *   The salesforce.client service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $etm
+   * @param EntityTypeManagerInterface $etm
    *   The entity_type.manager service.
-   * @param \Drupal\salesforce\SalesforceAuthProviderPluginManagerInterface $auth_man
+   * @param SalesforceAuthProviderPluginManagerInterface $auth_man
    *   Auth plugin manager.
-   * @param \Drupal\salesforce\Storage\SalesforceAuthTokenStorageInterface $token_storage
+   * @param SalesforceAuthTokenStorageInterface $token_storage
    *   Token storage.
-   * @param \Drupal\Core\Config\ConfigFactory $configFactory
+   * @param ConfigFactory $configFactory
    *   The config.factory service.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(RestClient $client, EntityTypeManagerInterface $etm, SalesforceAuthProviderPluginManagerInterface $auth_man, SalesforceAuthTokenStorageInterface $token_storage, ConfigFactory $configFactory, Connection $database) {
     parent::__construct($client, $etm, $auth_man, $token_storage);
@@ -100,7 +104,7 @@ class SalesforceMappingCommands extends SalesforceMappingCommandsBase {
    *   If $limit is not specified,
    *   salesforce.settings.limit_mapped_object_revisions is used.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *
    * @command salesforce_mapping:prune-revisions
    * @aliases sfprune,sf-prune-revisions
@@ -131,7 +135,7 @@ class SalesforceMappingCommands extends SalesforceMappingCommandsBase {
       if ($i++ % $buckets == 0) {
         $this->logger()->info(dt("Pruned !i of !total records.", ['!i' => $i, '!total' => $total]));
       }
-      /** @var \Drupal\salesforce_mapping\Entity\MappedObject $mapped_object */
+      /** @var MappedObject $mapped_object */
       if ($mapped_object = $this->mappedObjectStorage->load($id)) {
         $mapped_object->pruneRevisions($this->mappedObjectStorage);
       }
@@ -180,7 +184,7 @@ class SalesforceMappingCommands extends SalesforceMappingCommandsBase {
    * @param string $name
    *   Id of the salesforce mapping whose mapped objects should be purged.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *
    * @command salesforce_mapping:purge-drupal
    * @aliases sfpd,sf-purge-drupal
@@ -265,7 +269,7 @@ class SalesforceMappingCommands extends SalesforceMappingCommandsBase {
    * @param string $name
    *   Id of the salesforce mapping whose mapped objects should be purged.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *
    * @command salesforce_mapping:purge-salesforce
    * @aliases sfpsf,sf-purge-salesforce
@@ -340,7 +344,7 @@ class SalesforceMappingCommands extends SalesforceMappingCommandsBase {
    * @param string $name
    *   Mapping id.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *
    * @command sf:purge-mapping
    * @aliases sfpmap,sf-purge-mapping
@@ -394,7 +398,7 @@ class SalesforceMappingCommands extends SalesforceMappingCommandsBase {
    * @command salesforce_mapping:purge-all
    * @aliases sfpall,sf-purge-all
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function purgeAll($name) {
     $this->purgeDrupal($name);
diff --git a/modules/salesforce_mapping/src/Commands/SalesforceMappingCommandsBase.php b/modules/salesforce_mapping/src/Commands/SalesforceMappingCommandsBase.php
index 1641baa1..846e8d27 100644
--- a/modules/salesforce_mapping/src/Commands/SalesforceMappingCommandsBase.php
+++ b/modules/salesforce_mapping/src/Commands/SalesforceMappingCommandsBase.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\salesforce_mapping\Commands;
 
+use Drupal\salesforce_mapping\SalesforceMappingStorage;
+use Drupal\salesforce_mapping\MappedObjectStorage;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\salesforce_mapping\Entity\SalesforceMapping;
+use Drupal\salesforce_mapping\Entity\SalesforceMappingInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\salesforce\Rest\RestClient;
 use Drush\Drush;
@@ -22,45 +28,45 @@ abstract class SalesforceMappingCommandsBase extends SalesforceCommandsBase {
   /**
    * Salesforce Mapping storage handler.
    *
-   * @var \Drupal\salesforce_mapping\SalesforceMappingStorage
+   * @var SalesforceMappingStorage
    */
   protected $mappingStorage;
 
   /**
    * Mapped Object storage handler.
    *
-   * @var \Drupal\salesforce_mapping\MappedObjectStorage
+   * @var MappedObjectStorage
    */
   protected $mappedObjectStorage;
 
   /**
    * Salesforce Auth Provider plugin manager service.
    *
-   * @var \Drupal\salesforce\SalesforceAuthProviderPluginManagerInterface
+   * @var SalesforceAuthProviderPluginManagerInterface
    */
   protected $authMan;
 
   /**
    * Salesforce Auth Token Storage service.
    *
-   * @var \Drupal\salesforce\Storage\SalesforceAuthTokenStorageInterface
+   * @var SalesforceAuthTokenStorageInterface
    */
   protected $tokenStorage;
 
   /**
    * SalesforceMappingCommandsBase constructor.
    *
-   * @param \Drupal\salesforce\Rest\RestClient $client
+   * @param RestClient $client
    *   SF client.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $etm
+   * @param EntityTypeManagerInterface $etm
    *   Entity type manager.
-   * @param \Drupal\salesforce\SalesforceAuthProviderPluginManagerInterface $auth_man
+   * @param SalesforceAuthProviderPluginManagerInterface $auth_man
    *   Auth plugin manager.
-   * @param \Drupal\salesforce\Storage\SalesforceAuthTokenStorageInterface $token_storage
+   * @param SalesforceAuthTokenStorageInterface $token_storage
    *   Token storage.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(RestClient $client, EntityTypeManagerInterface $etm, SalesforceAuthProviderPluginManagerInterface $auth_man, SalesforceAuthTokenStorageInterface $token_storage) {
     parent::__construct($client, $etm, $auth_man, $token_storage);
@@ -78,7 +84,7 @@ abstract class SalesforceMappingCommandsBase extends SalesforceCommandsBase {
         $input->setArgument('name', 'ALL');
         return;
       }
-      /** @var \Drupal\salesforce_mapping\Entity\SalesforceMapping $mapping */
+      /** @var SalesforceMapping $mapping */
       $mapping = $this->mappingStorage->load($name);
       if (!$mapping) {
         $this->logger()->error(dt('Mapping %name does not exist.', ['%name' => $name]));
@@ -142,7 +148,7 @@ abstract class SalesforceMappingCommandsBase extends SalesforceCommandsBase {
    * @param string $dir
    *   'push'|'pull'|NULL to load limit mappings by push or pull types.
    *
-   * @return \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface[]
+   * @return SalesforceMappingInterface[]
    *   The mappings.
    *
    * @throws \Exception
@@ -187,7 +193,7 @@ abstract class SalesforceMappingCommandsBase extends SalesforceCommandsBase {
    * @param string $name
    *   The mapping name.
    *
-   * @return \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface[]
+   * @return SalesforceMappingInterface[]
    *   The matching mappings.
    *
    * @throws \Exception
@@ -202,7 +208,7 @@ abstract class SalesforceMappingCommandsBase extends SalesforceCommandsBase {
    * @param string $name
    *   The mapping name.
    *
-   * @return \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface[]
+   * @return SalesforceMappingInterface[]
    *   The pull mappings.
    *
    * @throws \Exception
@@ -214,10 +220,10 @@ abstract class SalesforceMappingCommandsBase extends SalesforceCommandsBase {
   /**
    * Pass-through helper to add appropriate formatters for a query result.
    *
-   * @param \Drupal\salesforce\Commands\QueryResult $query
+   * @param QueryResult $query
    *   The query result.
    *
-   * @return \Drupal\salesforce\Commands\QueryResult
+   * @return QueryResult
    *   The same, unchanged query result.
    */
   protected function returnQueryResult(QueryResult $query) {
diff --git a/modules/salesforce_mapping/src/Entity/MappedObject.php b/modules/salesforce_mapping/src/Entity/MappedObject.php
index 8cb2af9f..c0691b0d 100644
--- a/modules/salesforce_mapping/src/Entity/MappedObject.php
+++ b/modules/salesforce_mapping/src/Entity/MappedObject.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\salesforce_mapping\Entity;
 
+use Drupal\Core\Entity\FieldableEntityInterface;
+use Drupal\Core\Entity\RevisionableInterface;
+use Drupal\salesforce_mapping\SalesforceMappingFieldPluginInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
 use Drupal\Core\Entity\EntityChangedTrait;
 use Drupal\Core\Entity\EntityInterface;
@@ -70,14 +73,14 @@ class MappedObject extends RevisionableContentEntityBase implements MappedObject
   /**
    * Salesforce Object.
    *
-   * @var \Drupal\salesforce\SObject
+   * @var SObject
    */
   protected $sfObject = NULL;
 
   /**
    * Drupal entity stub, as its in the process of being created during pulls.
    *
-   * @var \Drupal\Core\Entity\FieldableEntityInterface
+   * @var FieldableEntityInterface
    */
   protected $drupalEntityStub = NULL;
 
@@ -172,7 +175,7 @@ class MappedObject extends RevisionableContentEntityBase implements MappedObject
       return $this;
     }
     foreach ($vids_to_delete as $vid => $dummy) {
-      /** @var \Drupal\Core\Entity\RevisionableInterface $revision */
+      /** @var RevisionableInterface $revision */
       if ($revision = $storage->loadRevision($vid)) {
         // Prevent deletion if this is the default revision.
         if ($revision->isDefaultRevision()) {
@@ -533,10 +536,10 @@ class MappedObject extends RevisionableContentEntityBase implements MappedObject
 
     // @TODO better way to handle push/pull:
     $fields = $mapping->getPullFields();
-    /** @var \Drupal\Core\Entity\FieldableEntityInterface $drupal_entity */
+    /** @var FieldableEntityInterface $drupal_entity */
     $drupal_entity = $this->getMappedEntity() ?: $this->getDrupalEntityStub();
 
-    /** @var \Drupal\salesforce_mapping\SalesforceMappingFieldPluginInterface $field */
+    /** @var SalesforceMappingFieldPluginInterface $field */
     foreach ($fields as $field) {
       try {
         $value = $field->pullValue($this->sfObject, $drupal_entity, $mapping);
diff --git a/modules/salesforce_mapping/src/Entity/MappedObjectInterface.php b/modules/salesforce_mapping/src/Entity/MappedObjectInterface.php
index 2f0d8a34..b3ae32bf 100644
--- a/modules/salesforce_mapping/src/Entity/MappedObjectInterface.php
+++ b/modules/salesforce_mapping/src/Entity/MappedObjectInterface.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\salesforce_mapping\Entity;
 
+use Drupal\salesforce\Rest\RestClientInterface;
+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
+use Drupal\salesforce\SalesforceAuthProviderPluginManagerInterface;
+use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
 use Drupal\Core\Entity\RevisionLogInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ -25,7 +29,7 @@ interface MappedObjectInterface extends EntityChangedInterface, RevisionLogInter
   /**
    * Get the mapped Drupal entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The mapped Drupal entity.
    */
   public function getMappedEntity();
@@ -41,7 +45,7 @@ interface MappedObjectInterface extends EntityChangedInterface, RevisionLogInter
   /**
    * Wrapper for salesforce.client service.
    *
-   * @return \Drupal\salesforce\Rest\RestClientInterface
+   * @return RestClientInterface
    *   The service.
    */
   public function client();
@@ -49,7 +53,7 @@ interface MappedObjectInterface extends EntityChangedInterface, RevisionLogInter
   /**
    * Wrapper for Drupal core event_dispatcher service.
    *
-   * @return \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @return EventDispatcherInterface
    *   Event dispatcher.
    */
   public function eventDispatcher();
@@ -62,7 +66,7 @@ interface MappedObjectInterface extends EntityChangedInterface, RevisionLogInter
   /**
    * Wrapper for salesforce auth provider plugin manager.
    *
-   * @return \Drupal\salesforce\SalesforceAuthProviderPluginManagerInterface
+   * @return SalesforceAuthProviderPluginManagerInterface
    *   The auth provider plugin manager.
    */
   public function authMan();
@@ -78,7 +82,7 @@ interface MappedObjectInterface extends EntityChangedInterface, RevisionLogInter
   /**
    * Attach a Drupal entity to the mapped object.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to be attached.
    *
    * @return $this
@@ -88,7 +92,7 @@ interface MappedObjectInterface extends EntityChangedInterface, RevisionLogInter
   /**
    * Wrapper for drupalEntityStub.
    *
-   * @return \Drupal\Core\Entity\FieldableEntityInterface
+   * @return FieldableEntityInterface
    *   The mapped entity.
    */
   public function getDrupalEntityStub();
@@ -96,7 +100,7 @@ interface MappedObjectInterface extends EntityChangedInterface, RevisionLogInter
   /**
    * Get the mapped Salesforce record, only available during pull.
    *
-   * @return \Drupal\salesforce\SObject
+   * @return SObject
    *   The SObject data, available only during pull.
    */
   public function getSalesforceRecord();
@@ -134,7 +138,7 @@ interface MappedObjectInterface extends EntityChangedInterface, RevisionLogInter
   /**
    * Assign Salesforce data to this mapped object, in preparation for saving.
    *
-   * @param \Drupal\salesforce\SObject $sfObject
+   * @param SObject $sfObject
    *   The sobject.
    *
    * @return $this
diff --git a/modules/salesforce_mapping/src/Entity/SalesforceMapping.php b/modules/salesforce_mapping/src/Entity/SalesforceMapping.php
index 5c768feb..b0b04dbe 100644
--- a/modules/salesforce_mapping/src/Entity/SalesforceMapping.php
+++ b/modules/salesforce_mapping/src/Entity/SalesforceMapping.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\salesforce_mapping\Entity;
 
+use Drupal\salesforce_mapping\SalesforceMappingFieldPluginInterface;
+use Drupal\salesforce_mapping\SalesforceMappingFieldPluginManager;
+use Drupal\salesforce\Rest\RestClient;
+use Drupal\Core\State\StateInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -180,7 +184,7 @@ class SalesforceMapping extends ConfigEntityBase implements SalesforceMappingInt
   /**
    * Mapped field plugins.
    *
-   * @var \Drupal\salesforce_mapping\SalesforceMappingFieldPluginInterface[]
+   * @var SalesforceMappingFieldPluginInterface[]
    */
   protected $field_mappings = [];
 
@@ -700,7 +704,7 @@ class SalesforceMapping extends ConfigEntityBase implements SalesforceMappingInt
   /**
    * Salesforce Mapping Field Manager service.
    *
-   * @return \Drupal\salesforce_mapping\SalesforceMappingFieldPluginManager
+   * @return SalesforceMappingFieldPluginManager
    *   The plugin.manager.salesforce_mapping_field service.
    */
   protected function fieldManager() {
@@ -710,7 +714,7 @@ class SalesforceMapping extends ConfigEntityBase implements SalesforceMappingInt
   /**
    * Salesforce API client service.
    *
-   * @return \Drupal\salesforce\Rest\RestClient
+   * @return RestClient
    *   The salesforce.client service.
    */
   protected function client() {
@@ -720,7 +724,7 @@ class SalesforceMapping extends ConfigEntityBase implements SalesforceMappingInt
   /**
    * State service.
    *
-   * @return \Drupal\Core\State\StateInterface
+   * @return StateInterface
    *   The state service.
    */
   protected function state() {
diff --git a/modules/salesforce_mapping/src/Entity/SalesforceMappingInterface.php b/modules/salesforce_mapping/src/Entity/SalesforceMappingInterface.php
index d0212087..1687403e 100644
--- a/modules/salesforce_mapping/src/Entity/SalesforceMappingInterface.php
+++ b/modules/salesforce_mapping/src/Entity/SalesforceMappingInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\salesforce_mapping\Entity;
 
+use Drupal\salesforce_mapping\SalesforceMappingFieldPluginInterface;
+use Drupal\salesforce\SelectQuery;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityWithPluginCollectionInterface;
@@ -25,7 +27,7 @@ interface SalesforceMappingInterface extends ConfigEntityInterface, EntityWithPl
   /**
    * Get all the mapped field plugins for this mapping.
    *
-   * @return \Drupal\salesforce_mapping\SalesforceMappingFieldPluginInterface[]
+   * @return SalesforceMappingFieldPluginInterface[]
    *   The fields.
    */
   public function getFieldMappings();
@@ -36,7 +38,7 @@ interface SalesforceMappingInterface extends ConfigEntityInterface, EntityWithPl
    * @param array $field
    *   Field plugin definition. Keys are "drupal_field_type" and "config".
    *
-   * @return \Drupal\salesforce_mapping\SalesforceMappingFieldPluginInterface
+   * @return SalesforceMappingFieldPluginInterface
    *   The field.
    */
   public function getFieldMapping(array $field);
@@ -68,7 +70,7 @@ interface SalesforceMappingInterface extends ConfigEntityInterface, EntityWithPl
   /**
    * Get all the field plugins which are configured to pull from Salesforce.
    *
-   * @return \Drupal\salesforce_mapping\SalesforceMappingFieldPluginInterface[]
+   * @return SalesforceMappingFieldPluginInterface[]
    *   Array of objects.
    */
   public function getPullFields();
@@ -216,7 +218,7 @@ interface SalesforceMappingInterface extends ConfigEntityInterface, EntityWithPl
    *   Timestamp of ending window from which to pull records. If omitted, use
    *   "now".
    *
-   * @return \Drupal\salesforce\SelectQuery
+   * @return SelectQuery
    *   The pull query.
    */
   public function getPullQuery(array $mapped_fields = [], $start = 0, $stop = 0);
diff --git a/modules/salesforce_mapping/src/Event/SalesforceDeleteAllowedEvent.php b/modules/salesforce_mapping/src/Event/SalesforceDeleteAllowedEvent.php
index cff80adb..4dd89d79 100644
--- a/modules/salesforce_mapping/src/Event/SalesforceDeleteAllowedEvent.php
+++ b/modules/salesforce_mapping/src/Event/SalesforceDeleteAllowedEvent.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\salesforce_mapping\Event;
 
+use Drupal\Core\Entity\FieldableEntityInterface;
+use Drupal\salesforce_mapping\Entity\SalesforceMappingInterface;
 use Drupal\salesforce_mapping\Entity\MappedObjectInterface;
 use Drupal\salesforce\Event\SalesforceBaseEvent;
 
@@ -20,21 +22,21 @@ class SalesforceDeleteAllowedEvent extends SalesforceBaseEvent {
   /**
    * The mapped object.
    *
-   * @var \Drupal\salesforce_mapping\Entity\MappedObjectInterface
+   * @var MappedObjectInterface
    */
   protected $mappedObject;
 
   /**
    * The Drupal entity.
    *
-   * @var \Drupal\Core\Entity\FieldableEntityInterface
+   * @var FieldableEntityInterface
    */
   protected $entity;
 
   /**
    * SalesforceDeleteAllowedEvent dispatched before deleting an entity.
    *
-   * @param \Drupal\salesforce_mapping\Entity\MappedObjectInterface $mapped_object
+   * @param MappedObjectInterface $mapped_object
    *   The mapped object.
    */
   public function __construct(MappedObjectInterface $mapped_object) {
@@ -46,7 +48,7 @@ class SalesforceDeleteAllowedEvent extends SalesforceBaseEvent {
   /**
    * Getter.
    *
-   * @return \Drupal\Core\Entity\FieldableEntityInterface
+   * @return FieldableEntityInterface
    *   The entity.
    */
   public function getEntity() {
@@ -56,7 +58,7 @@ class SalesforceDeleteAllowedEvent extends SalesforceBaseEvent {
   /**
    * Getter.
    *
-   * @return \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface
+   * @return SalesforceMappingInterface
    *   The mapping.
    */
   public function getMapping() {
@@ -66,7 +68,7 @@ class SalesforceDeleteAllowedEvent extends SalesforceBaseEvent {
   /**
    * Getter.
    *
-   * @return \Drupal\salesforce_mapping\Entity\MappedObjectInterface
+   * @return MappedObjectInterface
    *   The mapped object.
    */
   public function getMappedObject() {
diff --git a/modules/salesforce_mapping/src/Event/SalesforcePullEntityValueEvent.php b/modules/salesforce_mapping/src/Event/SalesforcePullEntityValueEvent.php
index ce813374..785e656f 100644
--- a/modules/salesforce_mapping/src/Event/SalesforcePullEntityValueEvent.php
+++ b/modules/salesforce_mapping/src/Event/SalesforcePullEntityValueEvent.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\salesforce_mapping\Event;
 
+use Drupal\salesforce_mapping\Entity\SalesforceMappingInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\salesforce\Event\SalesforceBaseEvent;
 use Drupal\salesforce_mapping\Entity\MappedObjectInterface;
 use Drupal\salesforce_mapping\SalesforceMappingFieldPluginInterface;
@@ -21,28 +23,28 @@ class SalesforcePullEntityValueEvent extends SalesforceBaseEvent {
   /**
    * The field plugin responsible for pulling the data.
    *
-   * @var \Drupal\salesforce_mapping\SalesforceMappingFieldPluginInterface
+   * @var SalesforceMappingFieldPluginInterface
    */
   protected $fieldPlugin;
 
   /**
    * The mapped object, or mapped object stub.
    *
-   * @var \Drupal\salesforce_mapping\Entity\MappedObjectInterface
+   * @var MappedObjectInterface
    */
   protected $mappedObject;
 
   /**
    * The mapping responsible for this pull.
    *
-   * @var \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface
+   * @var SalesforceMappingInterface
    */
   protected $mapping;
 
   /**
    * The Drupal entity, or entity stub.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;
 
@@ -51,9 +53,9 @@ class SalesforcePullEntityValueEvent extends SalesforceBaseEvent {
    *
    * @param mixed $value
    *   The value to be assigned.
-   * @param \Drupal\salesforce_mapping\SalesforceMappingFieldPluginInterface $fieldPlugin
+   * @param SalesforceMappingFieldPluginInterface $fieldPlugin
    *   The field plugin.
-   * @param \Drupal\salesforce_mapping\Entity\MappedObjectInterface $mappedObject
+   * @param MappedObjectInterface $mappedObject
    *   The mapped object.
    */
   public function __construct(&$value, SalesforceMappingFieldPluginInterface $fieldPlugin, MappedObjectInterface $mappedObject) {
@@ -77,7 +79,7 @@ class SalesforcePullEntityValueEvent extends SalesforceBaseEvent {
   /**
    * Getter.
    *
-   * @return \Drupal\salesforce_mapping\SalesforceMappingFieldPluginInterface
+   * @return SalesforceMappingFieldPluginInterface
    *   The field plugin.
    */
   public function getFieldPlugin() {
@@ -87,7 +89,7 @@ class SalesforcePullEntityValueEvent extends SalesforceBaseEvent {
   /**
    * Getter.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The entity.
    */
   public function getEntity() {
@@ -97,7 +99,7 @@ class SalesforcePullEntityValueEvent extends SalesforceBaseEvent {
   /**
    * Getter.
    *
-   * @return \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface
+   * @return SalesforceMappingInterface
    *   The mapping.
    */
   public function getMapping() {
@@ -107,7 +109,7 @@ class SalesforcePullEntityValueEvent extends SalesforceBaseEvent {
   /**
    * Getter.
    *
-   * @return \Drupal\salesforce_mapping\Entity\MappedObjectInterface
+   * @return MappedObjectInterface
    *   The mapped object.
    */
   public function getMappedObject() {
diff --git a/modules/salesforce_mapping/src/Event/SalesforcePullEvent.php b/modules/salesforce_mapping/src/Event/SalesforcePullEvent.php
index bb9c78cf..441ce8cd 100644
--- a/modules/salesforce_mapping/src/Event/SalesforcePullEvent.php
+++ b/modules/salesforce_mapping/src/Event/SalesforcePullEvent.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\salesforce_mapping\Event;
 
+use Drupal\salesforce_mapping\Entity\SalesforceMappingInterface;
+use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\salesforce_mapping\Entity\MappedObjectInterface;
 use Drupal\salesforce\Event\SalesforceBaseEvent;
 
@@ -13,21 +15,21 @@ class SalesforcePullEvent extends SalesforceBaseEvent {
   /**
    * The mapping responsible for this pull.
    *
-   * @var \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface
+   * @var SalesforceMappingInterface
    */
   protected $mapping;
 
   /**
    * The mapped object associated with this pull.
    *
-   * @var \Drupal\salesforce_mapping\Entity\MappedObjectInterface
+   * @var MappedObjectInterface
    */
   protected $mappedObject;
 
   /**
    * The Drupal entity into which the data is being pulled.
    *
-   * @var \Drupal\Core\Entity\FieldableEntityInterface
+   * @var FieldableEntityInterface
    */
   protected $entity;
 
@@ -53,7 +55,7 @@ class SalesforcePullEvent extends SalesforceBaseEvent {
   /**
    * SalesforcePullEvent constructor.
    *
-   * @param \Drupal\salesforce_mapping\Entity\MappedObjectInterface $mappedObject
+   * @param MappedObjectInterface $mappedObject
    *   The mapped object.
    * @param string $op
    *   The operation.
@@ -69,7 +71,7 @@ class SalesforcePullEvent extends SalesforceBaseEvent {
   /**
    * Getter.
    *
-   * @return \Drupal\Core\Entity\FieldableEntityInterface
+   * @return FieldableEntityInterface
    *   The entity.
    */
   public function getEntity() {
@@ -79,7 +81,7 @@ class SalesforcePullEvent extends SalesforceBaseEvent {
   /**
    * Getter.
    *
-   * @return \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface
+   * @return SalesforceMappingInterface
    *   The mapping interface.
    */
   public function getMapping() {
@@ -89,7 +91,7 @@ class SalesforcePullEvent extends SalesforceBaseEvent {
   /**
    * Getter.
    *
-   * @return \Drupal\salesforce_mapping\Entity\MappedObjectInterface
+   * @return MappedObjectInterface
    *   The mapped object.
    */
   public function getMappedObject() {
diff --git a/modules/salesforce_mapping/src/Event/SalesforcePushAllowedEvent.php b/modules/salesforce_mapping/src/Event/SalesforcePushAllowedEvent.php
index 57e323aa..0a17d8f9 100644
--- a/modules/salesforce_mapping/src/Event/SalesforcePushAllowedEvent.php
+++ b/modules/salesforce_mapping/src/Event/SalesforcePushAllowedEvent.php
@@ -19,7 +19,7 @@ class SalesforcePushAllowedEvent extends SalesforcePushOpEvent {
   /**
    * SalesforcePushAllowedEvent dispatched before building PushParams.
    *
-   * @param \Drupal\salesforce_mapping\Entity\MappedObjectInterface $mapped_object
+   * @param MappedObjectInterface $mapped_object
    *   The mapped object.
    * @param string $op
    *   One of
diff --git a/modules/salesforce_mapping/src/Event/SalesforcePushEvent.php b/modules/salesforce_mapping/src/Event/SalesforcePushEvent.php
index bbf0c910..16a14113 100644
--- a/modules/salesforce_mapping/src/Event/SalesforcePushEvent.php
+++ b/modules/salesforce_mapping/src/Event/SalesforcePushEvent.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\salesforce_mapping\Event;
 
+use Drupal\salesforce_mapping\Entity\SalesforceMappingInterface;
+use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\salesforce_mapping\Entity\MappedObjectInterface;
 use Drupal\salesforce\Event\SalesforceBaseEvent;
 
@@ -13,28 +15,28 @@ abstract class SalesforcePushEvent extends SalesforceBaseEvent {
   /**
    * The mapping.
    *
-   * @var \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface
+   * @var SalesforceMappingInterface
    */
   protected $mapping;
 
   /**
    * The mapped object.
    *
-   * @var \Drupal\salesforce_mapping\Entity\MappedObjectInterface
+   * @var MappedObjectInterface
    */
   protected $mappedObject;
 
   /**
    * The Drupal entity.
    *
-   * @var \Drupal\Core\Entity\FieldableEntityInterface
+   * @var FieldableEntityInterface
    */
   protected $entity;
 
   /**
    * SalesforcePushEvent constructor.
    *
-   * @param \Drupal\salesforce_mapping\Entity\MappedObjectInterface $mappedObject
+   * @param MappedObjectInterface $mappedObject
    *   The mapped object.
    */
   public function __construct(MappedObjectInterface $mappedObject) {
@@ -46,7 +48,7 @@ abstract class SalesforcePushEvent extends SalesforceBaseEvent {
   /**
    * Getter.
    *
-   * @return \Drupal\Core\Entity\FieldableEntityInterface
+   * @return FieldableEntityInterface
    *   The entity.
    */
   public function getEntity() {
@@ -56,7 +58,7 @@ abstract class SalesforcePushEvent extends SalesforceBaseEvent {
   /**
    * Getter.
    *
-   * @return \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface
+   * @return SalesforceMappingInterface
    *   The mapping.
    */
   public function getMapping() {
@@ -66,7 +68,7 @@ abstract class SalesforcePushEvent extends SalesforceBaseEvent {
   /**
    * Getter.
    *
-   * @return \Drupal\salesforce_mapping\Entity\MappedObjectInterface
+   * @return MappedObjectInterface
    *   The mapped object.
    */
   public function getMappedObject() {
diff --git a/modules/salesforce_mapping/src/Event/SalesforcePushOpEvent.php b/modules/salesforce_mapping/src/Event/SalesforcePushOpEvent.php
index aab37092..7f517265 100644
--- a/modules/salesforce_mapping/src/Event/SalesforcePushOpEvent.php
+++ b/modules/salesforce_mapping/src/Event/SalesforcePushOpEvent.php
@@ -24,7 +24,7 @@ class SalesforcePushOpEvent extends SalesforcePushEvent {
   /**
    * SalesforcePushOpEvent dispatched when PushParams are not available.
    *
-   * @param \Drupal\salesforce_mapping\Entity\MappedObjectInterface $mapped_object
+   * @param MappedObjectInterface $mapped_object
    *   The mapped object.
    * @param string $op
    *   One of
diff --git a/modules/salesforce_mapping/src/Event/SalesforcePushParamsEvent.php b/modules/salesforce_mapping/src/Event/SalesforcePushParamsEvent.php
index c7699094..b78bb6d1 100644
--- a/modules/salesforce_mapping/src/Event/SalesforcePushParamsEvent.php
+++ b/modules/salesforce_mapping/src/Event/SalesforcePushParamsEvent.php
@@ -13,16 +13,16 @@ class SalesforcePushParamsEvent extends SalesforcePushEvent {
   /**
    * Push params.
    *
-   * @var \Drupal\salesforce_mapping\PushParams
+   * @var PushParams
    */
   protected $params;
 
   /**
    * SalesforcePushParamsEvent constructor.
    *
-   * @param \Drupal\salesforce_mapping\Entity\MappedObjectInterface $mapped_object
+   * @param MappedObjectInterface $mapped_object
    *   Mapped object.
-   * @param \Drupal\salesforce_mapping\PushParams $params
+   * @param PushParams $params
    *   Push params.
    */
   public function __construct(MappedObjectInterface $mapped_object, PushParams $params) {
@@ -35,7 +35,7 @@ class SalesforcePushParamsEvent extends SalesforcePushEvent {
   /**
    * Getter.
    *
-   * @return \Drupal\salesforce_mapping\PushParams
+   * @return PushParams
    *   The push param data to be sent to Salesforce.
    */
   public function getParams() {
diff --git a/modules/salesforce_mapping/src/Event/SalesforceQueryEvent.php b/modules/salesforce_mapping/src/Event/SalesforceQueryEvent.php
index 10231dd3..831e0998 100644
--- a/modules/salesforce_mapping/src/Event/SalesforceQueryEvent.php
+++ b/modules/salesforce_mapping/src/Event/SalesforceQueryEvent.php
@@ -14,23 +14,23 @@ class SalesforceQueryEvent extends SalesforceBaseEvent {
   /**
    * The query to be issued.
    *
-   * @var \Drupal\salesforce\SelectQueryInterface
+   * @var SelectQueryInterface
    */
   protected $query;
 
   /**
    * The mapping.
    *
-   * @var \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface
+   * @var SalesforceMappingInterface
    */
   protected $mapping;
 
   /**
    * SalesforceQueryEvent constructor.
    *
-   * @param \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface $mapping
+   * @param SalesforceMappingInterface $mapping
    *   The mapping.
-   * @param \Drupal\salesforce\SelectQueryInterface $query
+   * @param SelectQueryInterface $query
    *   The query.
    */
   public function __construct(SalesforceMappingInterface $mapping, SelectQueryInterface $query) {
@@ -41,7 +41,7 @@ class SalesforceQueryEvent extends SalesforceBaseEvent {
   /**
    * Getter.
    *
-   * @return \Drupal\salesforce\SelectQueryInterface
+   * @return SelectQueryInterface
    *   The query.
    */
   public function getQuery() {
@@ -51,7 +51,7 @@ class SalesforceQueryEvent extends SalesforceBaseEvent {
   /**
    * Getter.
    *
-   * @return \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface
+   * @return SalesforceMappingInterface
    *   The mapping.
    */
   public function getMapping() {
diff --git a/modules/salesforce_mapping/src/MappedObjectStorage.php b/modules/salesforce_mapping/src/MappedObjectStorage.php
index 21bddea5..409880e9 100644
--- a/modules/salesforce_mapping/src/MappedObjectStorage.php
+++ b/modules/salesforce_mapping/src/MappedObjectStorage.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\salesforce_mapping;
 
+use Drupal\salesforce_mapping\Entity\MappedObject;
+use Drupal\salesforce_mapping\Entity\MappedObjectInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\salesforce\SFID;
 use Drupal\salesforce_mapping\Entity\SalesforceMappingInterface;
@@ -24,7 +26,7 @@ class MappedObjectStorage extends SqlContentEntityStorage {
    * @param int|string $entity_id
    *   Entity id.
    *
-   * @return \Drupal\salesforce_mapping\Entity\MappedObject[]
+   * @return MappedObject[]
    *   Mapped objects.
    *
    * @see loadByProperties()
@@ -39,10 +41,10 @@ class MappedObjectStorage extends SqlContentEntityStorage {
   /**
    * Load MappedObjects by Drupal Entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Drupal entity.
    *
-   * @return \Drupal\salesforce_mapping\Entity\MappedObject[]
+   * @return MappedObject[]
    *   Mapped objects.
    *
    * @see loadByProperties()
@@ -57,12 +59,12 @@ class MappedObjectStorage extends SqlContentEntityStorage {
   /**
    * Load a single MappedObject by Drupal Entity and Mapping.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Drupal entity.
-   * @param \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface $mapping
+   * @param SalesforceMappingInterface $mapping
    *   Salesforce Mapping.
    *
-   * @return \Drupal\salesforce_mapping\Entity\MappedObjectInterface|null
+   * @return MappedObjectInterface|null
    *   The matching Mapped Object, or null if none are found.
    *
    * @see loadByProperties()
@@ -79,10 +81,10 @@ class MappedObjectStorage extends SqlContentEntityStorage {
   /**
    * Load MappedObjects by Salesforce ID.
    *
-   * @param \Drupal\salesforce\SFID $salesforce_id
+   * @param SFID $salesforce_id
    *   Salesforce id.
    *
-   * @return \Drupal\salesforce_mapping\Entity\MappedObjectInterface[]
+   * @return MappedObjectInterface[]
    *   Matching mapped objects.
    *
    * @see loadByProperties()
@@ -96,12 +98,12 @@ class MappedObjectStorage extends SqlContentEntityStorage {
   /**
    * Load a single MappedObject by Mapping and SFID.
    *
-   * @param \Drupal\salesforce\SFID $salesforce_id
+   * @param SFID $salesforce_id
    *   Salesforce id.
-   * @param \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface $mapping
+   * @param SalesforceMappingInterface $mapping
    *   Salesforce mapping.
    *
-   * @return \Drupal\salesforce_mapping\Entity\MappedObjectInterface|null
+   * @return MappedObjectInterface|null
    *   Mapped object, or null if none are found.
    *
    * @see loadByProperties()
@@ -117,7 +119,7 @@ class MappedObjectStorage extends SqlContentEntityStorage {
   /**
    * Set "force_pull" column to TRUE for mapped objects of the given mapping.
    *
-   * @param \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface $mapping
+   * @param SalesforceMappingInterface $mapping
    *   Mapping.
    *
    * @return $this
diff --git a/modules/salesforce_mapping/src/Plugin/SalesforceMappingField/Properties.php b/modules/salesforce_mapping/src/Plugin/SalesforceMappingField/Properties.php
index 2382b0dc..e7207447 100644
--- a/modules/salesforce_mapping/src/Plugin/SalesforceMappingField/Properties.php
+++ b/modules/salesforce_mapping/src/Plugin/SalesforceMappingField/Properties.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\salesforce_mapping\Plugin\SalesforceMappingField;
 
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\TypedData\ListDataDefinitionInterface;
@@ -49,7 +50,7 @@ class Properties extends PropertiesBase {
    * Form options helper.
    */
   protected function getConfigurationOptions(SalesforceMappingInterface $mapping) {
-    /** @var \Drupal\Core\Field\FieldDefinitionInterface[] $field_definitions */
+    /** @var FieldDefinitionInterface[] $field_definitions */
     $field_definitions = $this->entityFieldManager->getFieldDefinitions(
       $mapping->get('drupal_entity_type'),
       $mapping->get('drupal_bundle')
diff --git a/modules/salesforce_mapping/src/Plugin/SalesforceMappingField/PropertiesBase.php b/modules/salesforce_mapping/src/Plugin/SalesforceMappingField/PropertiesBase.php
index 72bdbdf7..81d4f451 100644
--- a/modules/salesforce_mapping/src/Plugin/SalesforceMappingField/PropertiesBase.php
+++ b/modules/salesforce_mapping/src/Plugin/SalesforceMappingField/PropertiesBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\salesforce_mapping\Plugin\SalesforceMappingField;
 
+use Drupal\Core\TypedData\ListInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -158,21 +159,21 @@ abstract class PropertiesBase extends SalesforceMappingFieldPluginBase {
 
     }
 
-    /** @var \Drupal\Core\TypedData\ListInterface $list_data */
+    /** @var ListInterface $list_data */
     $list_data = $entity->get($field_name);
     // If the given delta has not been initialized, initialize it.
     if (!$list_data->get($delta) instanceof TypedDataInterface) {
       $list_data->set($delta, []);
     }
 
-    /** @var \Drupal\Core\TypedData\TypedDataInterface|\Drupal\Core\TypedData\ComplexDataInterface $typed_data */
+    /** @var TypedDataInterface|ComplexDataInterface $typed_data */
     $typed_data = $list_data->get($delta);
     if ($typed_data instanceof ComplexDataInterface && $property) {
       // If the given property has not been initialized, initialize it.
       if (!$typed_data->get($property) instanceof TypedDataInterface) {
         $typed_data->set($property, []);
       }
-      /** @var \Drupal\Core\TypedData\TypedDataInterface $typed_data */
+      /** @var TypedDataInterface $typed_data */
       $typed_data = $typed_data->get($property);
     }
 
@@ -205,7 +206,7 @@ abstract class PropertiesBase extends SalesforceMappingFieldPluginBase {
    * typed_data module's extension, use typed_data module's DataFetcher class
    * to retrieve the value.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to search the Typed Data for.
    * @param string $drupal_field_value
    *   The Typed Data property to get.
@@ -228,12 +229,12 @@ abstract class PropertiesBase extends SalesforceMappingFieldPluginBase {
    *
    * Same as getStringValue(), but returns the typed data prior to stringifying.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to search the Typed Data for.
    * @param string $drupal_field_value
    *   The Typed Data property to get.
    *
-   * @return \Drupal\Core\TypedData\TypedDataInterface|NULL
+   * @return TypedDataInterface|NULL
    *   The array representation of the Typed Data property value.
    */
   protected function getDataValue(EntityInterface $entity, $drupal_field_value) {
diff --git a/modules/salesforce_mapping/src/Plugin/SalesforceMappingField/Token.php b/modules/salesforce_mapping/src/Plugin/SalesforceMappingField/Token.php
index 4a3f0a14..119e5a1e 100644
--- a/modules/salesforce_mapping/src/Plugin/SalesforceMappingField/Token.php
+++ b/modules/salesforce_mapping/src/Plugin/SalesforceMappingField/Token.php
@@ -38,7 +38,7 @@ class Token extends SalesforceMappingFieldPluginBase {
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
diff --git a/modules/salesforce_mapping/src/PushParams.php b/modules/salesforce_mapping/src/PushParams.php
index d6a3e070..00cb5078 100644
--- a/modules/salesforce_mapping/src/PushParams.php
+++ b/modules/salesforce_mapping/src/PushParams.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\salesforce_mapping;
 
+use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\salesforce_mapping\Entity\SalesforceMappingInterface;
 use Drupal\Core\Entity\EntityInterface;
 
@@ -22,23 +23,23 @@ class PushParams {
   /**
    * Mapping for this push params.
    *
-   * @var \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface
+   * @var SalesforceMappingInterface
    */
   protected $mapping;
 
   /**
    * The Drupal entity being parameterized.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $drupalEntity;
 
   /**
    * Given a Drupal entity, return an array of Salesforce key-value pairs.
    *
-   * @param \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface $mapping
+   * @param SalesforceMappingInterface $mapping
    *   Salesforce Mapping.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Drupal entity.
    * @param array $params
    *   Initial params values (optional).
@@ -59,7 +60,7 @@ class PushParams {
   /**
    * Getter.
    *
-   * @return \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface
+   * @return SalesforceMappingInterface
    *   Mapping.
    */
   public function getMapping() {
@@ -69,7 +70,7 @@ class PushParams {
   /**
    * Getter.
    *
-   * @return \Drupal\Core\Entity\FieldableEntityInterface
+   * @return FieldableEntityInterface
    *   Drupal entity.
    */
   public function getDrupalEntity() {
diff --git a/modules/salesforce_mapping/src/SalesforceMappableEntityTypes.php b/modules/salesforce_mapping/src/SalesforceMappableEntityTypes.php
index e5438220..223648dd 100644
--- a/modules/salesforce_mapping/src/SalesforceMappableEntityTypes.php
+++ b/modules/salesforce_mapping/src/SalesforceMappableEntityTypes.php
@@ -13,7 +13,7 @@ class SalesforceMappableEntityTypes implements SalesforceMappableEntityTypesInte
   /**
    * Constructs a new SalesforceMappableEntities object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager) {
diff --git a/modules/salesforce_mapping/src/SalesforceMappableEntityTypesInterface.php b/modules/salesforce_mapping/src/SalesforceMappableEntityTypesInterface.php
index f2c8136d..b758a168 100644
--- a/modules/salesforce_mapping/src/SalesforceMappableEntityTypesInterface.php
+++ b/modules/salesforce_mapping/src/SalesforceMappableEntityTypesInterface.php
@@ -12,7 +12,7 @@ interface SalesforceMappableEntityTypesInterface {
   /**
    * Get an array of entity types that are mappable.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface[]
+   * @return EntityTypeInterface[]
    *   Objects which are exposed for mapping to Salesforce.
    */
   public function getMappableEntityTypes();
diff --git a/modules/salesforce_mapping/src/SalesforceMappingFieldPluginBase.php b/modules/salesforce_mapping/src/SalesforceMappingFieldPluginBase.php
index 69f4b5d5..95423a6b 100644
--- a/modules/salesforce_mapping/src/SalesforceMappingFieldPluginBase.php
+++ b/modules/salesforce_mapping/src/SalesforceMappingFieldPluginBase.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\salesforce_mapping;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityAutocompleteMatcher;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ -52,56 +55,56 @@ abstract class SalesforceMappingFieldPluginBase extends PluginBase implements Sa
   /**
    * Entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * Entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * Salesforce client service.
    *
-   * @var \Drupal\salesforce\Rest\RestClientInterface
+   * @var RestClientInterface
    */
   protected $salesforceClient;
 
   /**
    * Storage handler for SF mappings.
    *
-   * @var \Drupal\salesforce_mapping\SalesforceMappingStorage
+   * @var SalesforceMappingStorage
    */
   protected $mappingStorage;
 
   /**
    * Storage handler for Mapped Objects.
    *
-   * @var \Drupal\salesforce_mapping\MappedObjectStorage
+   * @var MappedObjectStorage
    */
   protected $mappedObjectStorage;
 
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The mapping to which this instance is attached.
    *
-   * @var \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface
+   * @var SalesforceMappingInterface
    */
   protected $mapping;
 
@@ -114,21 +117,21 @@ abstract class SalesforceMappingFieldPluginBase extends PluginBase implements Sa
    *   Plugin id.
    * @param array $plugin_definition
    *   Plugin definition.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   Entity type bundle info service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   Entity field manager.
-   * @param \Drupal\salesforce\Rest\RestClientInterface $rest_client
+   * @param RestClientInterface $rest_client
    *   Salesforce client.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $etm
+   * @param EntityTypeManagerInterface $etm
    *   ETM service.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $dateFormatter
+   * @param DateFormatterInterface $dateFormatter
    *   Date formatter service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, EntityTypeBundleInfoInterface $entity_type_bundle_info, EntityFieldManagerInterface $entity_field_manager, RestClientInterface $rest_client, EntityTypeManagerInterface $etm, DateFormatterInterface $dateFormatter, EventDispatcherInterface $event_dispatcher) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
@@ -540,7 +543,7 @@ abstract class SalesforceMappingFieldPluginBase extends PluginBase implements Sa
   /**
    * Return TRUE if the given field uses an entity reference handler.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $instance
+   * @param FieldDefinitionInterface $instance
    *   The field.
    *
    * @return bool
@@ -560,7 +563,7 @@ abstract class SalesforceMappingFieldPluginBase extends PluginBase implements Sa
   /**
    * Wraper for plugin.manager.entity_reference_selection service.
    *
-   * @return \Drupal\Core\Entity\EntityAutocompleteMatcher
+   * @return EntityAutocompleteMatcher
    *   Entity autocompleter service.
    */
   protected function selectionPluginManager() {
@@ -570,10 +573,10 @@ abstract class SalesforceMappingFieldPluginBase extends PluginBase implements Sa
   /**
    * Helper method to get the Data Definition for the current field.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The Entity to get the field from.
    *
-   * @return \Drupal\Core\TypedData\DataDefinitionInterface
+   * @return DataDefinitionInterface
    *   The Data Definition of the current field.
    */
   protected function getFieldDataDefinition(EntityInterface $entity) {
@@ -585,7 +588,7 @@ abstract class SalesforceMappingFieldPluginBase extends PluginBase implements Sa
   /**
    * Helper method to get the Field Type of the given Field Data Definition.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $data_definition
+   * @param DataDefinitionInterface $data_definition
    *   The Drupal Field Data Definition object.
    *
    * @return string|null
diff --git a/modules/salesforce_mapping/src/SalesforceMappingFieldPluginInterface.php b/modules/salesforce_mapping/src/SalesforceMappingFieldPluginInterface.php
index a27206e1..74340373 100644
--- a/modules/salesforce_mapping/src/SalesforceMappingFieldPluginInterface.php
+++ b/modules/salesforce_mapping/src/SalesforceMappingFieldPluginInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\salesforce_mapping;
 
+use Drupal\Core\TypedData\TypedDataInterface;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -48,9 +49,9 @@ interface SalesforceMappingFieldPluginInterface extends PluginFormInterface, Dep
   /**
    * Given a Drupal entity, return the outbound value.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity being mapped.
-   * @param \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface $mapping
+   * @param SalesforceMappingInterface $mapping
    *   The parent SalesforceMapping to which this plugin config belongs.
    */
   public function value(EntityInterface $entity, SalesforceMappingInterface $mapping);
@@ -62,9 +63,9 @@ interface SalesforceMappingFieldPluginInterface extends PluginFormInterface, Dep
    * validation against Salesforce field types to protect against basic data
    * errors.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity being pushed.
-   * @param \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface $mapping
+   * @param SalesforceMappingInterface $mapping
    *   The mapping.
    *
    * @return mixed
@@ -85,14 +86,14 @@ interface SalesforceMappingFieldPluginInterface extends PluginFormInterface, Dep
    *   will be issued to a SalesforceEvents::PULL_ENTITY_VALUE event, but will
    *   otherwise be ignored.
    *
-   * @param \Drupal\salesforce\SObject $sf_object
+   * @param SObject $sf_object
    *   The SFObject being pulled.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity being pulled.
-   * @param \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface $mapping
+   * @param SalesforceMappingInterface $mapping
    *   The mapping.
    *
-   * @return \Drupal\Core\TypedData\TypedDataInterface|mixed
+   * @return TypedDataInterface|mixed
    *   If a TypedDataInterface is returned, validate constraints and use
    *   TypedDataManager to set the value on the root entity. Otherwise, set the
    *   value directly via FieldableEntityInterface::set
@@ -106,7 +107,7 @@ interface SalesforceMappingFieldPluginInterface extends PluginFormInterface, Dep
    * added via UI. Not used for validation or any other constraints. This works
    * like a soft dependency.
    *
-   * @param \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface $mapping
+   * @param SalesforceMappingInterface $mapping
    *   The mapping.
    *
    * @return bool
diff --git a/modules/salesforce_mapping/src/SalesforceMappingFieldPluginManager.php b/modules/salesforce_mapping/src/SalesforceMappingFieldPluginManager.php
index d8b5b9df..1561717c 100644
--- a/modules/salesforce_mapping/src/SalesforceMappingFieldPluginManager.php
+++ b/modules/salesforce_mapping/src/SalesforceMappingFieldPluginManager.php
@@ -18,9 +18,9 @@ class SalesforceMappingFieldPluginManager extends DefaultPluginManager implement
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/modules/salesforce_mapping/src/SalesforceMappingStorage.php b/modules/salesforce_mapping/src/SalesforceMappingStorage.php
index d02aead2..6e36f2c1 100644
--- a/modules/salesforce_mapping/src/SalesforceMappingStorage.php
+++ b/modules/salesforce_mapping/src/SalesforceMappingStorage.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\salesforce_mapping;
 
+use Drupal\salesforce_mapping\Entity\SalesforceMappingInterface;
 use Drupal\Core\Config\Entity\ConfigEntityStorage;
 use Drupal\Core\Entity\EntityInterface;
 
@@ -37,7 +38,7 @@ class SalesforceMappingStorage extends ConfigEntityStorage {
    * @param string $entity_type_id
    *   The entity type id. If given, filter the mappings by only this type.
    *
-   * @return \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface[]
+   * @return SalesforceMappingInterface[]
    *   The Mappings.
    */
   public function loadPushMappings($entity_type_id = NULL) {
@@ -50,7 +51,7 @@ class SalesforceMappingStorage extends ConfigEntityStorage {
   /**
    * Get push Mappings to be processed during cron.
    *
-   * @return \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface[]
+   * @return SalesforceMappingInterface[]
    *   The Mappings to process.
    */
   public function loadCronPushMappings() {
@@ -64,7 +65,7 @@ class SalesforceMappingStorage extends ConfigEntityStorage {
   /**
    * Get pull Mappings to be processed during cron.
    *
-   * @return \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface[]
+   * @return SalesforceMappingInterface[]
    *   The pull Mappings.
    */
   public function loadCronPullMappings() {
@@ -80,7 +81,7 @@ class SalesforceMappingStorage extends ConfigEntityStorage {
    * @param array $properties
    *   Properties array for storage handler.
    *
-   * @return \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface[]
+   * @return SalesforceMappingInterface[]
    *   The push mappings.
    *
    * @see ::loadByProperties()
@@ -105,7 +106,7 @@ class SalesforceMappingStorage extends ConfigEntityStorage {
    * @param array $properties
    *   Properties array for storage handler.
    *
-   * @return \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface[]
+   * @return SalesforceMappingInterface[]
    *   The pull mappings.
    *
    * @see ::loadByProperties()
@@ -130,7 +131,7 @@ class SalesforceMappingStorage extends ConfigEntityStorage {
    * @param string $entity_type_id
    *   Optionally filter by entity type id.
    *
-   * @return \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface[]
+   * @return SalesforceMappingInterface[]
    *   The Mappings.
    */
   public function loadPullMappings($entity_type_id = NULL) {
diff --git a/modules/salesforce_mapping/tests/src/Unit/MappedObjectTest.php b/modules/salesforce_mapping/tests/src/Unit/MappedObjectTest.php
index 3622aeb3..0bc27a2c 100644
--- a/modules/salesforce_mapping/tests/src/Unit/MappedObjectTest.php
+++ b/modules/salesforce_mapping/tests/src/Unit/MappedObjectTest.php
@@ -57,7 +57,7 @@ class MappedObjectTest extends UnitTestCase {
       ->method('__toString')
       ->willReturn($this->salesforce_id);
 
-    $this->entityType = $this->getMockBuilder(EntityTypeInterface::class)->getMock();
+    $this->entityType = $this->createMock(EntityTypeInterface::class);
     $this->entityType->expects($this->any())
       ->method('getKeys')
       ->will($this->returnValue([
@@ -65,13 +65,13 @@ class MappedObjectTest extends UnitTestCase {
         'uuid' => 'uuid',
       ]));
 
-    $this->etm = $this->getMockBuilder(EntityTypeManagerInterface::class)->getMock();
+    $this->etm = $this->createMock(EntityTypeManagerInterface::class);
     $this->etm->expects($this->any())
       ->method('getDefinition')
       ->with($this->entityTypeId)
       ->will($this->returnValue($this->entityType));
 
-    $this->mappedObjectEntityType = $this->getMockBuilder(EntityTypeInterface::class)->getMock();
+    $this->mappedObjectEntityType = $this->createMock(EntityTypeInterface::class);
     $this->mappedObjectEntityType->expects($this->any())
       ->method('getKeys')
       ->will($this->returnValue([
@@ -85,13 +85,11 @@ class MappedObjectTest extends UnitTestCase {
       ->with('salesforce_mapped_object')
       ->will($this->returnValue($this->mappedObjectEntityType));
 
-    $this->event_dispatcher = $this->getMockBuilder(EventDispatcherInterface::class)->getMock();
+    $this->event_dispatcher = $this->createMock(EventDispatcherInterface::class);
 
-    $this->client = $this->getMockBuilder(RestClientInterface::CLASS)->getMock();
+    $this->client = $this->createMock(RestClientInterface::CLASS);
 
-    $this->fieldTypePluginManager = $this->getMockBuilder('\Drupal\Core\Field\FieldTypePluginManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->fieldTypePluginManager = $this->createMock('\Drupal\Core\Field\FieldTypePluginManager');
     $this->fieldTypePluginManager->expects($this->any())
       ->method('getDefaultStorageSettings')
       ->will($this->returnValue([]));
@@ -101,9 +99,9 @@ class MappedObjectTest extends UnitTestCase {
     $this->fieldTypePluginManager->expects($this->any())
       ->method('createFieldItemList')
       ->will($this->returnValue(
-        $this->getMockBuilder(FieldItemListInterface::class)->getMock()));
+        $this->createMock(FieldItemListInterface::class)));
 
-    $this->time = $this->getMockBuilder(TimeInterface::CLASS)->getMock();
+    $this->time = $this->createMock(TimeInterface::CLASS);
 
     $container = new ContainerBuilder();
     $container->set('entity_type.manager', $this->etm);
@@ -113,7 +111,7 @@ class MappedObjectTest extends UnitTestCase {
     $container->set('datetime.time', $this->time);
     \Drupal::setContainer($container);
 
-    $this->entity = $this->getMockBuilder(ContentEntityInterface::class)->getMock();
+    $this->entity = $this->createMock(ContentEntityInterface::class);
     $this->entity
       ->expects($this->any())
       ->method('id')
@@ -125,7 +123,7 @@ class MappedObjectTest extends UnitTestCase {
       ->willReturn(FALSE);
 
     // Mock salesforce mapping.
-    $this->mapping = $this->getMockBuilder(SalesforceMappingInterface::CLASS)->getMock();
+    $this->mapping = $this->createMock(SalesforceMappingInterface::CLASS);
     $this->mapping
       ->expects($this->any())
       ->method('getFieldMappings')
diff --git a/modules/salesforce_mapping/tests/src/Unit/SalesforceMappingStorageTest.php b/modules/salesforce_mapping/tests/src/Unit/SalesforceMappingStorageTest.php
index 35f68c0a..be387a7e 100644
--- a/modules/salesforce_mapping/tests/src/Unit/SalesforceMappingStorageTest.php
+++ b/modules/salesforce_mapping/tests/src/Unit/SalesforceMappingStorageTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\salesforce_mapping\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ProphecyInterface;
+use Drupal\Core\Entity\EntityTypeInterface;
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Component\Uuid\UuidInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\Entity\ConfigEntityType;
@@ -18,6 +22,7 @@ use Drupal\Tests\UnitTestCase;
  */
 class SalesforceMappingStorageTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The type ID of the entity under test.
    *
@@ -28,42 +33,42 @@ class SalesforceMappingStorageTest extends UnitTestCase {
   /**
    * The UUID service.
    *
-   * @var \Drupal\Component\Uuid\UuidInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var UuidInterface|ProphecyInterface
    */
   protected $uuidService;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var LanguageManagerInterface|ProphecyInterface
    */
   protected $languageManager;
 
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var ConfigFactoryInterface|ProphecyInterface
    */
   protected $configFactory;
 
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $etm;
 
   /**
    * Entity type under test.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface
+   * @var EntityTypeInterface
    */
   protected $entityType;
 
   /**
    * Mapping storage service mock.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject
+   * @var MockObject
    */
   protected $salesforceMappingStorage;
 
@@ -92,9 +97,7 @@ class SalesforceMappingStorageTest extends UnitTestCase {
     $this->uuidService = $this->createMock(UuidInterface::class);
     $this->languageManager = $this->createMock(LanguageManagerInterface::class);
     $this->configFactory = $this->createMock(ConfigFactoryInterface::class);
-    $this->etm = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->etm = $this->createMock(EntityTypeManagerInterface::class);
     $this->etm->expects($this->any())
       ->method('getDefinition')
       ->with($this->equalTo('test_entityType'))
diff --git a/modules/salesforce_mapping/tests/src/Unit/SalesforceMappingTest.php b/modules/salesforce_mapping/tests/src/Unit/SalesforceMappingTest.php
index 0ae99397..e6497d99 100644
--- a/modules/salesforce_mapping/tests/src/Unit/SalesforceMappingTest.php
+++ b/modules/salesforce_mapping/tests/src/Unit/SalesforceMappingTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\salesforce_mapping\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Config\Entity\ConfigEntityTypeInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -21,6 +22,7 @@ use Prophecy\Argument;
  */
 class SalesforceMappingTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Required modules.
    *
diff --git a/modules/salesforce_mapping_ui/src/Controller/AutocompleteController.php b/modules/salesforce_mapping_ui/src/Controller/AutocompleteController.php
index de6e1751..1257f4c4 100644
--- a/modules/salesforce_mapping_ui/src/Controller/AutocompleteController.php
+++ b/modules/salesforce_mapping_ui/src/Controller/AutocompleteController.php
@@ -18,7 +18,7 @@ class AutocompleteController extends ControllerBase {
   /**
    * Entity Field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $fieldManager;
 
@@ -32,7 +32,7 @@ class AutocompleteController extends ControllerBase {
   /**
    * Constructs a new AutocompleteController object.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager
+   * @param EntityFieldManagerInterface $field_manager
    *   Entity field manager.
    * @param \Drupal\typed_data\DataFetcherInterface $dataFetcher
    *   Data fetcher.
@@ -55,14 +55,14 @@ class AutocompleteController extends ControllerBase {
   /**
    * Autocomplete.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object providing the autocomplete query parameter.
    * @param string $entity_type_id
    *   The entity type filter options by.
    * @param string $bundle
    *   The bundle of the entity to filter options by.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON results.
    */
   public function autocomplete(Request $request, $entity_type_id, $bundle) {
diff --git a/modules/salesforce_mapping_ui/src/Controller/MappedObjectController.php b/modules/salesforce_mapping_ui/src/Controller/MappedObjectController.php
index 7e84254e..fc40ace5 100644
--- a/modules/salesforce_mapping_ui/src/Controller/MappedObjectController.php
+++ b/modules/salesforce_mapping_ui/src/Controller/MappedObjectController.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\salesforce_mapping_ui\Controller;
 
+use Drupal\salesforce_mapping\Entity\MappedObject;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ -41,10 +44,10 @@ class MappedObjectController extends ControllerBase {
   /**
    * Helper function to get entity from router path.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match service.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The Drupal entity mapped by the given mapped object.
    *
    * @throws \Exception
@@ -69,14 +72,14 @@ class MappedObjectController extends ControllerBase {
   /**
    * Helper function to fetch existing MappedObject or create a new one.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to be mapped.
    *
-   * @return \Drupal\salesforce_mapping\Entity\MappedObject[]
+   * @return MappedObject[]
    *   The Mapped Objects corresponding to the given entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function getMappedObjects(EntityInterface $entity) {
     // @TODO this probably belongs in a service
@@ -89,7 +92,7 @@ class MappedObjectController extends ControllerBase {
   /**
    * List mapped objects for the entity along the current route.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   A RouteMatch object.
    *
    * @return array
diff --git a/modules/salesforce_mapping_ui/src/Controller/SalesforceMappingController.php b/modules/salesforce_mapping_ui/src/Controller/SalesforceMappingController.php
index 6627399d..f99a5c81 100644
--- a/modules/salesforce_mapping_ui/src/Controller/SalesforceMappingController.php
+++ b/modules/salesforce_mapping_ui/src/Controller/SalesforceMappingController.php
@@ -14,9 +14,9 @@ class SalesforceMappingController extends EntityController {
   /**
    * Provides a callback for a mapping edit page Title.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
-   * @param \Drupal\Core\Entity\EntityInterface $_entity
+   * @param EntityInterface $_entity
    *   (optional) An entity, passed in directly from the request attributes.
    *
    * @return string|null
@@ -34,9 +34,9 @@ class SalesforceMappingController extends EntityController {
   /**
    * Provides a callback for a mapping field config page Title.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
-   * @param \Drupal\Core\Entity\EntityInterface $_entity
+   * @param EntityInterface $_entity
    *   (optional) An entity, passed in directly from the request attributes.
    *
    * @return string|null
diff --git a/modules/salesforce_mapping_ui/src/Form/MappedObjectForm.php b/modules/salesforce_mapping_ui/src/Form/MappedObjectForm.php
index 0933c707..648a9e6a 100644
--- a/modules/salesforce_mapping_ui/src/Form/MappedObjectForm.php
+++ b/modules/salesforce_mapping_ui/src/Form/MappedObjectForm.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\salesforce_mapping_ui\Form;
 
+use Drupal\salesforce_mapping\SalesforceMappingStorage;
+use Drupal\salesforce_mapping\MappedObjectStorage;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ -23,56 +27,56 @@ class MappedObjectForm extends ContentEntityForm {
   /**
    * Mapping entity storage service.
    *
-   * @var \Drupal\salesforce_mapping\SalesforceMappingStorage
+   * @var SalesforceMappingStorage
    */
   protected $mappingStorage;
 
   /**
    * Mapped object storage service.
    *
-   * @var \Drupal\salesforce_mapping\MappedObjectStorage
+   * @var MappedObjectStorage
    */
   protected $mappedObjectStorage;
 
   /**
    * Event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * Route matching service.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $request;
 
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * MappedObjectForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   Entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entityTypeBundleInfo
+   * @param EntityTypeBundleInfoInterface $entityTypeBundleInfo
    *   Bundle info service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   Time service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   Request stack.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $etm
+   * @param EntityTypeManagerInterface $etm
    *   Entity manager service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityRepositoryInterface $entityRepository, EntityTypeBundleInfoInterface $entityTypeBundleInfo, TimeInterface $time, EventDispatcherInterface $event_dispatcher, RequestStack $request_stack, EntityTypeManagerInterface $etm) {
     parent::__construct($entityRepository, $entityTypeBundleInfo, $time);
diff --git a/modules/salesforce_mapping_ui/src/Form/SalesforceMappingFormBase.php b/modules/salesforce_mapping_ui/src/Form/SalesforceMappingFormBase.php
index 9e4d0c2d..dba6de76 100644
--- a/modules/salesforce_mapping_ui/src/Form/SalesforceMappingFormBase.php
+++ b/modules/salesforce_mapping_ui/src/Form/SalesforceMappingFormBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\salesforce_mapping_ui\Form;
 
+use Drupal\salesforce_mapping\Entity\SalesforceMappingInterface;
+use Drupal\salesforce\Rest\RestResponseDescribe;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Url;
 use Drupal\salesforce_mapping\SalesforceMappingFieldPluginManager;
@@ -19,48 +21,48 @@ abstract class SalesforceMappingFormBase extends EntityForm {
   /**
    * Field plugin manager.
    *
-   * @var \Drupal\salesforce_mapping\SalesforceMappingFieldPluginManager
+   * @var SalesforceMappingFieldPluginManager
    */
   protected $mappingFieldPluginManager;
 
   /**
    * Salesforce client.
    *
-   * @var \Drupal\salesforce\Rest\RestClientInterface
+   * @var RestClientInterface
    */
   protected $client;
 
   /**
    * Mappable types service.
    *
-   * @var \Drupal\salesforce_mapping\SalesforceMappableEntityTypesInterface
+   * @var SalesforceMappableEntityTypesInterface
    */
   protected $mappableEntityTypes;
 
   /**
    * The mapping entity for this form.
    *
-   * @var \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface
+   * @var SalesforceMappingInterface
    */
   protected $entity;
 
   /**
    * Bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInfo;
 
   /**
    * SalesforceMappingFormBase constructor.
    *
-   * @param \Drupal\salesforce_mapping\SalesforceMappingFieldPluginManager $mappingFieldPluginManager
+   * @param SalesforceMappingFieldPluginManager $mappingFieldPluginManager
    *   Mapping plugin manager.
-   * @param \Drupal\salesforce\Rest\RestClientInterface $client
+   * @param RestClientInterface $client
    *   Rest client.
-   * @param \Drupal\salesforce_mapping\SalesforceMappableEntityTypesInterface $mappableEntityTypes
+   * @param SalesforceMappableEntityTypesInterface $mappableEntityTypes
    *   Mappable types.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundleInfo
+   * @param EntityTypeBundleInfoInterface $bundleInfo
    *   Bundle info service.
    */
   public function __construct(SalesforceMappingFieldPluginManager $mappingFieldPluginManager, RestClientInterface $client, SalesforceMappableEntityTypesInterface $mappableEntityTypes, EntityTypeBundleInfoInterface $bundleInfo) {
@@ -135,7 +137,7 @@ abstract class SalesforceMappingFormBase extends EntityForm {
    *
    * @TODO this should move to the Salesforce service
    *
-   * @return \Drupal\salesforce\Rest\RestResponseDescribe
+   * @return RestResponseDescribe
    *   Information about the Salesforce object as provided by Salesforce.
    *
    * @throws \Exception if $salesforce_object_type is not provided and
diff --git a/modules/salesforce_mapping_ui/src/MappedObjectList.php b/modules/salesforce_mapping_ui/src/MappedObjectList.php
index eb9720c4..abff75ce 100644
--- a/modules/salesforce_mapping_ui/src/MappedObjectList.php
+++ b/modules/salesforce_mapping_ui/src/MappedObjectList.php
@@ -19,7 +19,7 @@ class MappedObjectList extends EntityListBuilder {
   /**
    * The url generator.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;
 
@@ -44,11 +44,11 @@ class MappedObjectList extends EntityListBuilder {
   /**
    * Constructs a new MappedObjectList object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   The url generator.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, UrlGeneratorInterface $url_generator) {
diff --git a/modules/salesforce_mapping_ui/src/Plugin/Derivative/SalesforceMappingLocalTask.php b/modules/salesforce_mapping_ui/src/Plugin/Derivative/SalesforceMappingLocalTask.php
index fc336f0d..7c2c72d8 100644
--- a/modules/salesforce_mapping_ui/src/Plugin/Derivative/SalesforceMappingLocalTask.php
+++ b/modules/salesforce_mapping_ui/src/Plugin/Derivative/SalesforceMappingLocalTask.php
@@ -19,16 +19,16 @@ class SalesforceMappingLocalTask extends DeriverBase implements ContainerDeriver
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $etm;
 
   /**
    * Creates an SalesforceMappingLocalTask object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $etm
+   * @param EntityTypeManagerInterface $etm
    *   The entity manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The translation manager.
    */
   public function __construct(EntityTypeManagerInterface $etm, TranslationInterface $string_translation) {
diff --git a/modules/salesforce_mapping_ui/src/Routing/RouteSubscriber.php b/modules/salesforce_mapping_ui/src/Routing/RouteSubscriber.php
index 5deb30a3..20df10c3 100644
--- a/modules/salesforce_mapping_ui/src/Routing/RouteSubscriber.php
+++ b/modules/salesforce_mapping_ui/src/Routing/RouteSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\salesforce_mapping_ui\Routing;
 
+use Drupal\salesforce_mapping\SalesforceMappableEntityTypesInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\RouteSubscriberBase;
 use Drupal\Core\Routing\RoutingEvents;
@@ -16,20 +17,20 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
   /**
    * The mappable entity types service.
    *
-   * @var \Drupal\salesforce_mapping\SalesforceMappableEntityTypesInterface
+   * @var SalesforceMappableEntityTypesInterface
    */
   protected $mappable;
 
   /**
    * Constructs a new RouteSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager) {
diff --git a/modules/salesforce_mapping_ui/src/Tests/SalesforceMappingCrudFormTest.php b/modules/salesforce_mapping_ui/src/Tests/SalesforceMappingCrudFormTest.php
index b5c1a566..1b3211d8 100644
--- a/modules/salesforce_mapping_ui/src/Tests/SalesforceMappingCrudFormTest.php
+++ b/modules/salesforce_mapping_ui/src/Tests/SalesforceMappingCrudFormTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\salesforce_mapping_ui\Tests;
 
+use Drupal\user\Entity\User;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Tests\BrowserTestBase;
 
@@ -41,7 +42,7 @@ class SalesforceMappingCrudFormTest extends BrowserTestBase {
   /**
    * Admin user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $adminSalesforceUser;
 
diff --git a/modules/salesforce_oauth/src/Controller/SalesforceOAuthController.php b/modules/salesforce_oauth/src/Controller/SalesforceOAuthController.php
index 83fae418..23e190b0 100644
--- a/modules/salesforce_oauth/src/Controller/SalesforceOAuthController.php
+++ b/modules/salesforce_oauth/src/Controller/SalesforceOAuthController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\salesforce_oauth\Controller;
 
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Core\TempStore\PrivateTempStore;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\TempStore\PrivateTempStoreFactory;
@@ -21,21 +23,21 @@ class SalesforceOAuthController extends ControllerBase {
   /**
    * Request stack service.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Temp store factory service.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $tempStore;
 
@@ -73,7 +75,7 @@ class SalesforceOAuthController extends ControllerBase {
       return new RedirectResponse(Url::fromRoute('entity.salesforce_auth.collection')->toString());
     }
 
-    /** @var \Drupal\salesforce\SalesforceAuthProviderInterface $oauth */
+    /** @var SalesforceAuthProviderInterface $oauth */
     $oauth = $config->getPlugin();
     if (\Drupal::request()->get('code')) {
       try {
diff --git a/modules/salesforce_oauth/src/Plugin/SalesforceAuthProvider/SalesforceOAuthPlugin.php b/modules/salesforce_oauth/src/Plugin/SalesforceAuthProvider/SalesforceOAuthPlugin.php
index 5dd00c05..e48b38cb 100644
--- a/modules/salesforce_oauth/src/Plugin/SalesforceAuthProvider/SalesforceOAuthPlugin.php
+++ b/modules/salesforce_oauth/src/Plugin/SalesforceAuthProvider/SalesforceOAuthPlugin.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\salesforce_oauth\Plugin\SalesforceAuthProvider;
 
+use Drupal\salesforce_oauth\Consumer\SalesforceOAuthCredentials;
+use Drupal\Core\TempStore\PrivateTempStore;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Routing\TrustedRedirectResponse;
 use Drupal\Core\Url;
@@ -21,7 +23,7 @@ class SalesforceOAuthPlugin extends SalesforceAuthProviderPluginBase {
   /**
    * Credentials.
    *
-   * @var \Drupal\salesforce_oauth\Consumer\SalesforceOAuthCredentials
+   * @var SalesforceOAuthCredentials
    */
   protected $credentials;
 
@@ -73,7 +75,7 @@ class SalesforceOAuthPlugin extends SalesforceAuthProviderPluginBase {
 
     // Write the config id to private temp store, so that we can use the same
     // callback URL for all OAuth applications in Salesforce.
-    /** @var \Drupal\Core\TempStore\PrivateTempStore $tempstore */
+    /** @var PrivateTempStore $tempstore */
     $tempstore = \Drupal::service('tempstore.private')->get('salesforce_oauth');
     $tempstore->set('config_id', $form_state->getValue('id'));
 
diff --git a/modules/salesforce_oauth/tests/src/FunctionalJavascript/SalesforceOAuthTest.php b/modules/salesforce_oauth/tests/src/FunctionalJavascript/SalesforceOAuthTest.php
index 74897f26..8d978fe8 100644
--- a/modules/salesforce_oauth/tests/src/FunctionalJavascript/SalesforceOAuthTest.php
+++ b/modules/salesforce_oauth/tests/src/FunctionalJavascript/SalesforceOAuthTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\salesforce_oauth\FunctionalJavascript;
 
+use Drupal\user\Entity\User;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 
 /**
@@ -35,7 +36,7 @@ class SalesforceOAuthTest extends WebDriverTestBase {
   /**
    * Admin user to test form.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $adminUser;
 
@@ -88,6 +89,7 @@ class SalesforceOAuthTest extends WebDriverTestBase {
 
   /**
    * Test the oauth provider plugin callback.
+   * @doesNotPerformAssertions
    */
   public function testOAuthCallback() {
     // @todo
diff --git a/modules/salesforce_pull/salesforce_pull.drush.inc b/modules/salesforce_pull/salesforce_pull.drush.inc
index 067e49b0..478d00a9 100644
--- a/modules/salesforce_pull/salesforce_pull.drush.inc
+++ b/modules/salesforce_pull/salesforce_pull.drush.inc
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\salesforce_mapping\Entity\SalesforceMappingInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 /**
  * @file
  * Salesforce Pull drush 8 commands.
@@ -257,11 +260,11 @@ function drush_salesforce_pull_sf_pull_file($file, $name = NULL) {
  * @param string $name
  *   Mapping name.
  *
- * @return \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface[]
+ * @return SalesforceMappingInterface[]
  *   Mappings.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function _salesforce_pull_load_single_mapping_array_or_all_pull_mappings($name = NULL) {
   if ($name != NULL) {
diff --git a/modules/salesforce_pull/src/Commands/SalesforcePullCommands.php b/modules/salesforce_pull/src/Commands/SalesforcePullCommands.php
index 9d62425c..65239ea2 100644
--- a/modules/salesforce_pull/src/Commands/SalesforcePullCommands.php
+++ b/modules/salesforce_pull/src/Commands/SalesforcePullCommands.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\salesforce_pull\Commands;
 
+use Symfony\Component\EventDispatcher\EventDispatcher;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\salesforce_mapping\Entity\SalesforceMapping;
 use Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\salesforce_mapping\Commands\SalesforceMappingCommandsBase;
@@ -31,35 +35,35 @@ class SalesforcePullCommands extends SalesforceMappingCommandsBase {
   /**
    * Pull queue handler service.
    *
-   * @var \Drupal\salesforce_pull\QueueHandler
+   * @var QueueHandler
    */
   protected $pullQueue;
 
   /**
    * Event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcher
+   * @var EventDispatcher
    */
   protected $eventDispatcher;
 
   /**
    * SalesforcePullCommands constructor.
    *
-   * @param \Drupal\salesforce\Rest\RestClient $client
+   * @param RestClient $client
    *   Salesforce client.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $etm
+   * @param EntityTypeManagerInterface $etm
    *   Entity type manager.
-   * @param \Drupal\salesforce\SalesforceAuthProviderPluginManagerInterface $auth_man
+   * @param SalesforceAuthProviderPluginManagerInterface $auth_man
    *   Auth plugin manager.
-   * @param \Drupal\salesforce\Storage\SalesforceAuthTokenStorageInterface $token_storage
+   * @param SalesforceAuthTokenStorageInterface $token_storage
    *   Token storage.
-   * @param \Drupal\salesforce_pull\QueueHandler $pullQueue
+   * @param QueueHandler $pullQueue
    *   Pull queue handler service.
-   * @param \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher $eventDispatcher
+   * @param ContainerAwareEventDispatcher $eventDispatcher
    *   Event dispatcher service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(RestClient $client, EntityTypeManagerInterface $etm, SalesforceAuthProviderPluginManagerInterface $auth_man, SalesforceAuthTokenStorageInterface $token_storage, QueueHandler $pullQueue, ContainerAwareEventDispatcher $eventDispatcher) {
     parent::__construct($client, $etm, $auth_man, $token_storage);
@@ -222,7 +226,7 @@ class SalesforcePullCommands extends SalesforceMappingCommandsBase {
    * @aliases sfpf,sfif,sf-pull-file,salesforce_pull:file
    */
   public function pullFile($file, $name) {
-    /** @var \Drupal\salesforce_mapping\Entity\SalesforceMapping $mapping */
+    /** @var SalesforceMapping $mapping */
     if (!($mapping = $this->mappingStorage->load($name))) {
       $this->logger()->error(dt('Failed to load mapping "%name"', ['%name' => $name]));
       return;
@@ -317,8 +321,8 @@ class SalesforcePullCommands extends SalesforceMappingCommandsBase {
    *   An associative array of options whose values come from cli, aliases,
    *   config, etc.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    *
    * @option delete
    *   Reset delete date timestamp (instead of pull date timestamp)
diff --git a/modules/salesforce_pull/src/Controller/PullController.php b/modules/salesforce_pull/src/Controller/PullController.php
index 7b453adc..f6c623ce 100644
--- a/modules/salesforce_pull/src/Controller/PullController.php
+++ b/modules/salesforce_pull/src/Controller/PullController.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\salesforce_pull\Controller;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Datetime\Time;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Controller\ControllerBase;
@@ -34,64 +38,64 @@ class PullController extends ControllerBase {
   /**
    * Pull queue handler service.
    *
-   * @var \Drupal\salesforce_pull\QueueHandler
+   * @var QueueHandler
    */
   protected $queueHandler;
 
   /**
    * Pull delete handler service.
    *
-   * @var \Drupal\salesforce_pull\DeleteHandler
+   * @var DeleteHandler
    */
   protected $deleteHandler;
 
   /**
    * Mapping storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $mappingStorage;
 
   /**
    * Queue factory service.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueService;
 
   /**
    * Queue worker manager.
    *
-   * @var \Drupal\Core\Queue\QueueWorkerManagerInterface
+   * @var QueueWorkerManagerInterface
    */
   protected $queueWorkerManager;
 
   /**
    * Event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * Time.
    *
-   * @var \Drupal\Component\Datetime\Time
+   * @var Time
    */
   protected $time;
 
   /**
    * Current Request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * PushController constructor.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(QueueHandler $queueHandler, DeleteHandler $deleteHandler, EntityTypeManagerInterface $etm, ConfigFactoryInterface $configFactory, StateInterface $stateService, QueueFactory $queueService, QueueWorkerManagerInterface $queueWorkerManager, EventDispatcherInterface $eventDispatcher, Time $time, RequestStack $requestStack) {
     $this->queueHandler = $queueHandler;
diff --git a/modules/salesforce_pull/src/DeleteHandler.php b/modules/salesforce_pull/src/DeleteHandler.php
index 1fe0df0a..aa6577bb 100644
--- a/modules/salesforce_pull/src/DeleteHandler.php
+++ b/modules/salesforce_pull/src/DeleteHandler.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\salesforce_pull;
 
+use Drupal\salesforce_mapping\SalesforceMappingStorage;
+use Drupal\salesforce_mapping\MappedObjectStorage;
+use Drupal\Component\Datetime\TimeInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\State\StateInterface;
 use Drupal\salesforce\Event\SalesforceEvents;
@@ -24,66 +30,66 @@ class DeleteHandler {
   /**
    * Rest client service.
    *
-   * @var \Drupal\salesforce\Rest\RestClientInterface
+   * @var RestClientInterface
    */
   protected $sfapi;
 
   /**
    * Salesforce mapping storage service.
    *
-   * @var \Drupal\salesforce_mapping\SalesforceMappingStorage
+   * @var SalesforceMappingStorage
    */
   protected $mappingStorage;
 
   /**
    * Mapped Object storage service.
    *
-   * @var \Drupal\salesforce_mapping\MappedObjectStorage
+   * @var MappedObjectStorage
    */
   protected $mappedObjectStorage;
 
   /**
    * Entity tpye manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $etm;
 
   /**
    * State service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * Request service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * Event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\salesforce\Rest\RestClientInterface $sfapi
+   * @param RestClientInterface $sfapi
    *   RestClient object.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity Manager service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   State service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(RestClientInterface $sfapi, EntityTypeManagerInterface $entity_type_manager, StateInterface $state, EventDispatcherInterface $event_dispatcher) {
     $this->sfapi = $sfapi;
@@ -137,7 +143,7 @@ class DeleteHandler {
    * @param string $type
    *   Salesforce object type.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function handleDeletedRecords(array $deleted, $type) {
     if (empty($deleted['deletedRecords'])) {
@@ -164,7 +170,7 @@ class DeleteHandler {
    * @param string $type
    *   Salesforce object type.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function handleDeletedRecord(array $record, $type) {
     $mapped_objects = $this->mappedObjectStorage->loadBySfid(new SFID($record['id']));
diff --git a/modules/salesforce_pull/src/Plugin/QueueWorker/PullBase.php b/modules/salesforce_pull/src/Plugin/QueueWorker/PullBase.php
index 12231db3..f9b8ff07 100644
--- a/modules/salesforce_pull/src/Plugin/QueueWorker/PullBase.php
+++ b/modules/salesforce_pull/src/Plugin/QueueWorker/PullBase.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\salesforce_pull\Plugin\QueueWorker;
 
+use Drupal\salesforce_mapping\SalesforceMappingStorage;
+use Drupal\salesforce_mapping\MappedObjectStorage;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\salesforce_pull\PullQueueItem;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Queue\QueueWorkerBase;
@@ -29,50 +34,50 @@ abstract class PullBase extends QueueWorkerBase implements ContainerFactoryPlugi
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $etm;
 
   /**
    * The SF REST client.
    *
-   * @var \Drupal\salesforce\Rest\RestClientInterface
+   * @var RestClientInterface
    */
   protected $client;
 
   /**
    * Storage handler for SF mappings.
    *
-   * @var \Drupal\salesforce_mapping\SalesforceMappingStorage
+   * @var SalesforceMappingStorage
    */
   protected $mappingStorage;
 
   /**
    * Storage handler for Mapped Objects.
    *
-   * @var \Drupal\salesforce_mapping\MappedObjectStorage
+   * @var MappedObjectStorage
    */
   protected $mappedObjectStorage;
 
   /**
    * Event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * Creates a new PullBase object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\salesforce\Rest\RestClientInterface $client
+   * @param RestClientInterface $client
    *   Salesforce REST client.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, RestClientInterface $client, EventDispatcherInterface $event_dispatcher) {
     $this->etm = $entity_type_manager;
@@ -96,7 +101,7 @@ abstract class PullBase extends QueueWorkerBase implements ContainerFactoryPlugi
   /**
    * Queue item process callback.
    *
-   * @param \Drupal\salesforce_pull\PullQueueItem $item
+   * @param PullQueueItem $item
    *   Pull queue item. Note: typehint missing because we can't change the
    *   inherited API.
    *
@@ -134,11 +139,11 @@ abstract class PullBase extends QueueWorkerBase implements ContainerFactoryPlugi
   /**
    * Update an existing Drupal entity.
    *
-   * @param \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface $mapping
+   * @param SalesforceMappingInterface $mapping
    *   Object of field maps.
-   * @param \Drupal\salesforce_mapping\Entity\MappedObjectInterface $mapped_object
+   * @param MappedObjectInterface $mapped_object
    *   SF Mmapped object.
-   * @param \Drupal\salesforce\SObject $sf_object
+   * @param SObject $sf_object
    *   Current Salesforce record array.
    * @param bool $force_pull
    *   If true, ignore entity and SF timestamps.
@@ -228,9 +233,9 @@ abstract class PullBase extends QueueWorkerBase implements ContainerFactoryPlugi
   /**
    * Create a Drupal entity and mapped object.
    *
-   * @param \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface $mapping
+   * @param SalesforceMappingInterface $mapping
    *   Object of field maps.
-   * @param \Drupal\salesforce\SObject $sf_object
+   * @param SObject $sf_object
    *   Current Salesforce record array.
    *
    * @return string|null
diff --git a/modules/salesforce_pull/src/PullQueueItem.php b/modules/salesforce_pull/src/PullQueueItem.php
index 59cc0219..1c704f20 100644
--- a/modules/salesforce_pull/src/PullQueueItem.php
+++ b/modules/salesforce_pull/src/PullQueueItem.php
@@ -13,7 +13,7 @@ class PullQueueItem {
   /**
    * The salesforce object data.
    *
-   * @var \Drupal\salesforce\SObject
+   * @var SObject
    */
   protected $sobject;
 
@@ -34,9 +34,9 @@ class PullQueueItem {
   /**
    * Construct a pull queue item.
    *
-   * @param \Drupal\salesforce\SObject $sobject
+   * @param SObject $sobject
    *   Salesforce data.
-   * @param \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface $mapping
+   * @param SalesforceMappingInterface $mapping
    *   Mapping.
    * @param bool $force_pull
    *   Force data to be pulled, ignoring any timestamps.
@@ -50,7 +50,7 @@ class PullQueueItem {
   /**
    * Getter.
    *
-   * @return \Drupal\salesforce\SObject
+   * @return SObject
    *   Salesforce data.
    */
   public function getSobject() {
diff --git a/modules/salesforce_pull/src/QueueHandler.php b/modules/salesforce_pull/src/QueueHandler.php
index 1b49d3d1..e2e6fbab 100644
--- a/modules/salesforce_pull/src/QueueHandler.php
+++ b/modules/salesforce_pull/src/QueueHandler.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\salesforce_pull;
 
+use Drupal\Core\Queue\QueueInterface;
+use Drupal\salesforce_mapping\Entity\SalesforceMapping;
+use Drupal\Core\Config\Config;
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Queue\QueueDatabaseFactory;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -30,63 +36,63 @@ class QueueHandler {
   /**
    * Salesforce client.
    *
-   * @var \Drupal\salesforce\Rest\RestClientInterface
+   * @var RestClientInterface
    */
   protected $sfapi;
 
   /**
    * Queue service.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;
 
   /**
    * All pull mappings.
    *
-   * @var \Drupal\salesforce_mapping\Entity\SalesforceMapping[]
+   * @var SalesforceMapping[]
    */
   protected $mappings;
 
   /**
    * Config service.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;
 
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * Event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * QueueHandler constructor.
    *
-   * @param \Drupal\salesforce\Rest\RestClientInterface $sfapi
+   * @param RestClientInterface $sfapi
    *   Salesforce service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
-   * @param \Drupal\Core\Queue\QueueDatabaseFactory $queue_factory
+   * @param QueueDatabaseFactory $queue_factory
    *   Queue service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   Config service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   Time service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(RestClientInterface $sfapi, EntityTypeManagerInterface $entity_type_manager, QueueDatabaseFactory $queue_factory, ConfigFactoryInterface $config, EventDispatcherInterface $event_dispatcher, TimeInterface $time) {
     $this->sfapi = $sfapi;
@@ -144,7 +150,7 @@ class QueueHandler {
    * Given a mapping and optional timeframe, perform an API query for updated
    * records and enqueue them into the pull queue.
    *
-   * @param \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface $mapping
+   * @param SalesforceMappingInterface $mapping
    *   The salesforce mapping for which to query.
    * @param bool $force_pull
    *   Whether to force the queried records to be pulled.
@@ -181,9 +187,9 @@ class QueueHandler {
   /**
    * Given a single mapping/id pair, enqueue it.
    *
-   * @param \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface $mapping
+   * @param SalesforceMappingInterface $mapping
    *   The mapping.
-   * @param \Drupal\salesforce\SFID $id
+   * @param SFID $id
    *   The record id.
    * @param bool $force_pull
    *   Whether to force a pull. TRUE by default.
@@ -207,7 +213,7 @@ class QueueHandler {
   /**
    * Perform the SFO Query for a mapping and its mapped fields.
    *
-   * @param \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface $mapping
+   * @param SalesforceMappingInterface $mapping
    *   Mapping for which to execute pull.
    * @param array $mapped_fields
    *   Fetch only these fields, if given, otherwise fetch all mapped fields.
@@ -218,7 +224,7 @@ class QueueHandler {
    *   Timestamp of ending window from which to pull records. If omitted, use
    *   "now".
    *
-   * @return \Drupal\salesforce\SelectQueryResult
+   * @return SelectQueryResult
    *   returned result object from Salesforce
    *
    * @see SalesforceMappingInterface
@@ -244,9 +250,9 @@ class QueueHandler {
   /**
    * Inserts the given records into pull queue.
    *
-   * @param \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface $mapping
+   * @param SalesforceMappingInterface $mapping
    *   Mapping.
-   * @param \Drupal\salesforce\SelectQueryResult $results
+   * @param SelectQueryResult $results
    *   Results.
    * @param bool $force_pull
    *   Force flag.
@@ -269,9 +275,9 @@ class QueueHandler {
   /**
    * Enqueue a set of results into pull queue.
    *
-   * @param \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface $mapping
+   * @param SalesforceMappingInterface $mapping
    *   Mapping object currently being processed.
-   * @param \Drupal\salesforce\SelectQueryResult $results
+   * @param SelectQueryResult $results
    *   Result record set.
    * @param bool $force_pull
    *   Whether to force pull for enqueued items.
@@ -305,9 +311,9 @@ class QueueHandler {
   /**
    * Enqueue a single record for pull.
    *
-   * @param \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface $mapping
+   * @param SalesforceMappingInterface $mapping
    *   Mapping.
-   * @param \Drupal\salesforce\SObject $record
+   * @param SObject $record
    *   Salesforce data.
    * @param bool $force_pull
    *   If TRUE, ignore timestamps and force data to be pulled.
diff --git a/modules/salesforce_pull/tests/src/Functional/PullQueueTest.php b/modules/salesforce_pull/tests/src/Functional/PullQueueTest.php
index a388627a..942afe2b 100644
--- a/modules/salesforce_pull/tests/src/Functional/PullQueueTest.php
+++ b/modules/salesforce_pull/tests/src/Functional/PullQueueTest.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\Tests\salesforce_pull\Functional;
 
+use Drupal\Core\Queue\QueueFactory;
+use Drupal\Core\Queue\QueueWorkerManagerInterface;
+use Drupal\salesforce_mapping\MappedObjectStorage;
+use Drupal\salesforce_pull\PullQueueItem;
+use Drupal\salesforce_mapping\Entity\MappedObject;
+use Drupal\node\Entity\Node;
 use Drupal\salesforce\SFID;
 use Drupal\salesforce\Tests\TestRestClient;
 use Drupal\salesforce_mapping\Entity\SalesforceMapping;
@@ -45,33 +51,33 @@ class PullQueueTest extends BrowserTestBase {
 
     // Pulled from Cron.php in core.
     $queue_name = 'cron_salesforce_pull';
-    /** @var \Drupal\Core\Queue\QueueFactory $queueFactory */
+    /** @var QueueFactory $queueFactory */
     $queueFactory = \Drupal::service('queue');
     $queue = $queueFactory->get($queue_name);
     $this->assertEquals($items['totalSize'], $queue->numberOfItems());
 
-    /** @var \Drupal\Core\Queue\QueueWorkerManagerInterface $queueManager */
+    /** @var QueueWorkerManagerInterface $queueManager */
     $queueManager = \Drupal::service('plugin.manager.queue_worker');
     $queueFactory->get('cron_salesforce_pull')->createQueue();
     $queue_worker = $queueManager->createInstance($queue_name);
 
     // Process the queue.
     $mapping = SalesforceMapping::load('test_mapping');
-    /** @var \Drupal\salesforce_mapping\MappedObjectStorage $mappedObjectStorage */
+    /** @var MappedObjectStorage $mappedObjectStorage */
     $mappedObjectStorage = \Drupal::entityTypeManager()
       ->getStorage('salesforce_mapped_object');
     for ($i = 0; $i < $items['totalSize']; $i++) {
       $item = $queue->claimItem();
-      /** @var \Drupal\salesforce_pull\PullQueueItem $data */
+      /** @var PullQueueItem $data */
       $data = $item->data;
       $queue_worker->processItem($item->data);
       $queue->deleteItem($item);
       $this->assertEquals($items['totalSize'] - ($i + 1), $queue->numberOfItems());
       $sfid = $data->getSobject()->id();
-      /** @var \Drupal\salesforce_mapping\Entity\MappedObject $mappedObject */
+      /** @var MappedObject $mappedObject */
       $mappedObject = $mappedObjectStorage
         ->loadBySfidAndMapping($sfid, $mapping);
-      /** @var \Drupal\node\Entity\Node $createdEntity */
+      /** @var Node $createdEntity */
       $createdEntity = $mappedObject->getMappedEntity();
       $this->assertEquals('SALESFORCE TEST', $createdEntity->getTitle());
       $this->assertEquals($data->getSobject()
@@ -95,16 +101,16 @@ class PullQueueTest extends BrowserTestBase {
 
     for ($i = 0; $i < $items['totalSize']; $i++) {
       $item = $queue->claimItem();
-      /** @var \Drupal\salesforce_pull\PullQueueItem $data */
+      /** @var PullQueueItem $data */
       $data = $item->data;
       $queue_worker->processItem($data);
       $queue->deleteItem($item);
       $this->assertEquals($items['totalSize'] - ($i + 1), $queue->numberOfItems());
       $sfid = $data->getSobject()->id();
-      /** @var \Drupal\salesforce_mapping\Entity\MappedObject $mappedObject */
+      /** @var MappedObject $mappedObject */
       $mappedObject = $mappedObjectStorage
         ->loadBySfidAndMapping($sfid, $mapping);
-      /** @var \Drupal\node\Entity\Node $createdEntity */
+      /** @var Node $createdEntity */
       $createdEntity = $mappedObject->getMappedEntity();
 
       if (!empty($data->getSobject()->field('ReportsToId'))) {
diff --git a/modules/salesforce_pull/tests/src/Unit/DeleteHandlerTest.php b/modules/salesforce_pull/tests/src/Unit/DeleteHandlerTest.php
index cf531814..6f246f74 100644
--- a/modules/salesforce_pull/tests/src/Unit/DeleteHandlerTest.php
+++ b/modules/salesforce_pull/tests/src/Unit/DeleteHandlerTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\salesforce_pull\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher;
 use Drupal\Core\Entity\EntityStorageBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -24,6 +25,7 @@ use Prophecy\Argument;
  */
 class DeleteHandlerTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Required modules.
    *
@@ -54,14 +56,12 @@ class DeleteHandlerTest extends UnitTestCase {
     $this->sfapi = $prophecy->reveal();
 
     // Mock an atribtary Drupal entity.
-    $this->entity = $this->getMockBuilder(User::CLASS)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entity = $this->createMock(User::CLASS);
     $this->entity->expects($this->any())->method('delete')->willReturn(TRUE);
     $this->entity->expects($this->any())->method('id')->willReturn(1);
     $this->entity->expects($this->any())->method('label')->willReturn('foo');
 
-    $this->mapping = $this->getMockBuilder(SalesforceMappingInterface::CLASS)->getMock();
+    $this->mapping = $this->createMock(SalesforceMappingInterface::CLASS);
     $this->mapping->expects($this->any())
       ->method('__get')
       ->with($this->equalTo('id'))
@@ -89,7 +89,7 @@ class DeleteHandlerTest extends UnitTestCase {
     $this->entityId->value = '1';
     $this->entityRef->entity = $this->mapping;
 
-    $this->mappedObject = $this->getMockBuilder(MappedObjectInterface::CLASS)->getMock();
+    $this->mappedObject = $this->createMock(MappedObjectInterface::CLASS);
     $this->mappedObject
       ->expects($this->any())
       ->method('delete')
@@ -117,9 +117,7 @@ class DeleteHandlerTest extends UnitTestCase {
     $this->configStorage = $prophecy->reveal();
 
     // Mock mapped object EntityStorage object.
-    $this->entityStorage = $this->getMockBuilder(MappedObjectStorage::CLASS)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entityStorage = $this->createMock(MappedObjectStorage::CLASS);
     $this->entityStorage->expects($this->any())
       ->method('loadBySfid')
       ->willReturn([$this->mappedObject]);
diff --git a/modules/salesforce_pull/tests/src/Unit/PullBaseTest.php b/modules/salesforce_pull/tests/src/Unit/PullBaseTest.php
index 497760d3..3aad6b16 100644
--- a/modules/salesforce_pull/tests/src/Unit/PullBaseTest.php
+++ b/modules/salesforce_pull/tests/src/Unit/PullBaseTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\salesforce_pull\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Config\Entity\ConfigEntityStorage;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityStorageBase;
@@ -30,6 +31,7 @@ use Symfony\Component\DependencyInjection\ContainerBuilder;
  */
 class PullBaseTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Required modules.
    *
@@ -81,7 +83,7 @@ class PullBaseTest extends UnitTestCase {
       ->willReturn(TRUE);
 
     // Mock mapping object.
-    $this->mapping = $this->getMockBuilder(SalesforceMappingInterface::CLASS)->getMock();
+    $this->mapping = $this->createMock(SalesforceMappingInterface::CLASS);
     $this->mapping->expects($this->any())
       ->method('__get')
       ->with($this->equalTo('id'))
@@ -102,7 +104,7 @@ class PullBaseTest extends UnitTestCase {
       ->willReturn([]);
 
     // Mock mapped object.
-    $this->mappedObject = $this->getMockBuilder(MappedObjectInterface::CLASS)->getMock();
+    $this->mappedObject = $this->createMock(MappedObjectInterface::CLASS);
     $this->mappedObject->expects($this->any())
       ->method('getChanged')
       ->willReturn('1486490500');
@@ -186,7 +188,7 @@ class PullBaseTest extends UnitTestCase {
     $this->sqr = new SelectQueryResult($result);
 
     // Mock rest cient.
-    $this->sfapi = $this->getMockBuilder(RestClientInterface::CLASS)->getMock();
+    $this->sfapi = $this->createMock(RestClientInterface::CLASS);
     $this->sfapi
       ->expects($this->any())
       ->method('query')
@@ -201,7 +203,7 @@ class PullBaseTest extends UnitTestCase {
       ->willReturn($this->sfid);
 
     // Mock event dispatcher.
-    $this->ed = $this->getMockBuilder('\Symfony\Component\EventDispatcher\EventDispatcherInterface')->getMock();
+    $this->ed = $this->createMock('\Symfony\Component\EventDispatcher\EventDispatcherInterface');
     $this->ed
       ->expects($this->any())
       ->method('dispatch')
diff --git a/modules/salesforce_pull/tests/src/Unit/PullQueueItemTest.php b/modules/salesforce_pull/tests/src/Unit/PullQueueItemTest.php
index 6cd4999a..0023717b 100644
--- a/modules/salesforce_pull/tests/src/Unit/PullQueueItemTest.php
+++ b/modules/salesforce_pull/tests/src/Unit/PullQueueItemTest.php
@@ -27,7 +27,7 @@ class PullQueueItemTest extends UnitTestCase {
   public function testObject() {
     $sobject = new SObject(['id' => '1234567890abcde', 'attributes' => ['type' => 'dummy']]);
     // OF COURSE Prophesy doesn't do magic methods well.
-    $mapping = $this->getMockBuilder(SalesforceMappingInterface::CLASS)->getMock();
+    $mapping = $this->createMock(SalesforceMappingInterface::CLASS);
     $mapping->expects($this->any())
       ->method('__get')
       ->with($this->equalTo('id'))
diff --git a/modules/salesforce_pull/tests/src/Unit/QueueHandlerTest.php b/modules/salesforce_pull/tests/src/Unit/QueueHandlerTest.php
index 08667a88..4578659a 100644
--- a/modules/salesforce_pull/tests/src/Unit/QueueHandlerTest.php
+++ b/modules/salesforce_pull/tests/src/Unit/QueueHandlerTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\salesforce_pull\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Queue\QueueDatabaseFactory;
@@ -26,6 +27,7 @@ use Symfony\Component\EventDispatcher\EventDispatcherInterface;
  */
 class QueueHandlerTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Required modules.
    *
@@ -65,7 +67,7 @@ class QueueHandlerTest extends UnitTestCase {
       ->willReturn($this->sqrDone);
     $this->sfapi = $prophecy->reveal();
 
-    $this->mapping = $this->getMockBuilder(SalesforceMappingInterface::CLASS)->getMock();
+    $this->mapping = $this->createMock(SalesforceMappingInterface::CLASS);
     $this->mapping->expects($this->any())
       ->method('__get')
       ->with($this->equalTo('id'))
@@ -121,7 +123,7 @@ class QueueHandlerTest extends UnitTestCase {
     $prophecy->dispatch(Argument::any(), Argument::any())->willReturn();
     $this->ed = $prophecy->reveal();
 
-    $this->time = $this->getMockBuilder(TimeInterface::CLASS)->getMock();
+    $this->time = $this->createMock(TimeInterface::CLASS);
 
     $this->qh = $this->getMockBuilder(QueueHandler::CLASS)
       ->setMethods(['parseUrl'])
diff --git a/modules/salesforce_push/salesforce_push.module b/modules/salesforce_push/salesforce_push.module
index 90d9a444..c3824fa5 100644
--- a/modules/salesforce_push/salesforce_push.module
+++ b/modules/salesforce_push/salesforce_push.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\salesforce_mapping\Entity\SalesforceMapping;
+use Drupal\Core\Entity\EntityStorageException;
 /**
  * @file
  * Push updates to Salesforce when a Drupal entity is updated.
@@ -39,7 +41,7 @@ function salesforce_push_entity_delete(EntityInterface $entity) {
 /**
  * Push entities to Salesforce.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity object.
  * @param string $op
  *   The trigger being responded to.
@@ -68,7 +70,7 @@ function salesforce_push_entity_crud(EntityInterface $entity, $op) {
     $properties['drupal_bundle'] = $bundle;
   }
 
-  /** @var \Drupal\salesforce_mapping\Entity\SalesforceMapping[] $mappings */
+  /** @var SalesforceMapping[] $mappings */
   $mappings = \Drupal::service('entity_type.manager')
     ->getStorage('salesforce_mapping')
     ->loadPushMappingsByProperties($properties);
@@ -93,14 +95,14 @@ function salesforce_push_entity_crud(EntityInterface $entity, $op) {
 /**
  * Helper method for salesforce_push_entity_crud()
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity.
  * @param string $op
  *   The current CRUD operation.
- * @param \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface $mapping
+ * @param SalesforceMappingInterface $mapping
  *   The mapping.
  *
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws EntityStorageException
  */
 function salesforce_push_entity_crud_mapping(EntityInterface $entity, $op, SalesforceMappingInterface $mapping) {
   $mapped_object = NULL;
@@ -206,9 +208,9 @@ function salesforce_push_entity_crud_mapping(EntityInterface $entity, $op, Sales
 /**
  * Insert a new queue item into the async push queue for the given mapping.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity.
- * @param \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface $mapping
+ * @param SalesforceMappingInterface $mapping
  *   The mapping.
  * @param string $op
  *   The operation.
diff --git a/modules/salesforce_push/src/Commands/SalesforcePushCommands.php b/modules/salesforce_push/src/Commands/SalesforcePushCommands.php
index 7ef3ab91..7b93c87b 100644
--- a/modules/salesforce_push/src/Commands/SalesforcePushCommands.php
+++ b/modules/salesforce_push/src/Commands/SalesforcePushCommands.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\salesforce_push\Commands;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\salesforce_mapping\Commands\SalesforceMappingCommandsBase;
@@ -29,35 +31,35 @@ class SalesforcePushCommands extends SalesforceMappingCommandsBase {
   /**
    * Database service.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * Push queue service.
    *
-   * @var \Drupal\salesforce_push\PushQueue
+   * @var PushQueue
    */
   protected $pushQueue;
 
   /**
    * SalesforcePushCommands constructor.
    *
-   * @param \Drupal\salesforce\Rest\RestClient $client
+   * @param RestClient $client
    *   Salesforce service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $etm
+   * @param EntityTypeManagerInterface $etm
    *   ETM service.
-   * @param \Drupal\salesforce\SalesforceAuthProviderPluginManagerInterface $auth_man
+   * @param SalesforceAuthProviderPluginManagerInterface $auth_man
    *   Auth plugin manager.
-   * @param \Drupal\salesforce\Storage\SalesforceAuthTokenStorageInterface $token_storage
+   * @param SalesforceAuthTokenStorageInterface $token_storage
    *   Token storage.
-   * @param \Drupal\salesforce_push\PushQueue $pushQueue
+   * @param PushQueue $pushQueue
    *   Push queue service.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   Database service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(RestClient $client, EntityTypeManagerInterface $etm, SalesforceAuthProviderPluginManagerInterface $auth_man, SalesforceAuthTokenStorageInterface $token_storage, PushQueue $pushQueue, Connection $database) {
     parent::__construct($client, $etm, $auth_man, $token_storage);
@@ -179,8 +181,8 @@ class SalesforcePushCommands extends SalesforceMappingCommandsBase {
    *   An associative array of options whose values come from cli, aliases,
    *   config, etc.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    *
    * @option count
    *   The number of entities to try to sync. (Default is 50).
diff --git a/modules/salesforce_push/src/Plugin/SalesforcePushQueueProcessor/Rest.php b/modules/salesforce_push/src/Plugin/SalesforcePushQueueProcessor/Rest.php
index 675eb2e2..57f7e4c6 100644
--- a/modules/salesforce_push/src/Plugin/SalesforcePushQueueProcessor/Rest.php
+++ b/modules/salesforce_push/src/Plugin/SalesforcePushQueueProcessor/Rest.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\salesforce_push\Plugin\SalesforcePushQueueProcessor;
 
+use Drupal\salesforce_mapping\SalesforceMappingStorage;
+use Drupal\salesforce_mapping\MappedObjectStorage;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\salesforce_mapping\Entity\MappedObjectInterface;
 use Drupal\salesforce\SalesforceAuthProviderPluginManagerInterface;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -30,42 +36,42 @@ class Rest extends PluginBase implements PushQueueProcessorInterface {
   /**
    * Push queue service.
    *
-   * @var \Drupal\salesforce_push\PushQueueInterface
+   * @var PushQueueInterface
    */
   protected $queue;
 
   /**
    * Storage handler for SF mappings.
    *
-   * @var \Drupal\salesforce_mapping\SalesforceMappingStorage
+   * @var SalesforceMappingStorage
    */
   protected $mappingStorage;
 
   /**
    * Storage handler for Mapped Objects.
    *
-   * @var \Drupal\salesforce_mapping\MappedObjectStorage
+   * @var MappedObjectStorage
    */
   protected $mappedObjectStorage;
 
   /**
    * Event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * ETM service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $etm;
 
   /**
    * Auth manager.
    *
-   * @var \Drupal\salesforce\SalesforceAuthProviderPluginManagerInterface
+   * @var SalesforceAuthProviderPluginManagerInterface
    */
   protected $authMan;
 
@@ -78,17 +84,17 @@ class Rest extends PluginBase implements PushQueueProcessorInterface {
    *   Plugin id.
    * @param array $plugin_definition
    *   Plugin definition.
-   * @param \Drupal\salesforce_push\PushQueueInterface $queue
+   * @param PushQueueInterface $queue
    *   Push queue service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $etm
+   * @param EntityTypeManagerInterface $etm
    *   ETM service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   Event dispatcher service.
-   * @param \Drupal\salesforce\SalesforceAuthProviderPluginManagerInterface $authMan
+   * @param SalesforceAuthProviderPluginManagerInterface $authMan
    *   Auth manager.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, PushQueueInterface $queue, EntityTypeManagerInterface $etm, EventDispatcherInterface $eventDispatcher, SalesforceAuthProviderPluginManagerInterface $authMan) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
@@ -136,7 +142,7 @@ class Rest extends PluginBase implements PushQueueProcessorInterface {
    * @param object $item
    *   The push queue item.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function processItem(\stdClass $item) {
     // Allow exceptions to bubble up for PushQueue to sort things out.
@@ -203,10 +209,10 @@ class Rest extends PluginBase implements PushQueueProcessorInterface {
    *
    * @param object $item
    *   Push queue item.
-   * @param \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface $mapping
+   * @param SalesforceMappingInterface $mapping
    *   The mapping.
    *
-   * @return \Drupal\salesforce_mapping\Entity\MappedObject
+   * @return MappedObject
    *   The mapped object.
    */
   protected function getMappedObject(\stdClass $item, SalesforceMappingInterface $mapping) {
@@ -246,10 +252,10 @@ class Rest extends PluginBase implements PushQueueProcessorInterface {
    *
    * @param object $item
    *   Push queue item.
-   * @param \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface $mapping
+   * @param SalesforceMappingInterface $mapping
    *   The mapping.
    *
-   * @return \Drupal\salesforce_mapping\Entity\MappedObjectInterface
+   * @return MappedObjectInterface
    *   The new mapped object.
    */
   protected function createMappedObject(\stdClass $item, SalesforceMappingInterface $mapping) {
diff --git a/modules/salesforce_push/src/PushController.php b/modules/salesforce_push/src/PushController.php
index aa07d20b..1b873e4b 100644
--- a/modules/salesforce_push/src/PushController.php
+++ b/modules/salesforce_push/src/PushController.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\salesforce_push;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -16,27 +19,27 @@ class PushController extends ControllerBase {
   /**
    * Push queue service.
    *
-   * @var \Drupal\salesforce_push\PushQueue
+   * @var PushQueue
    */
   protected $pushQueue;
 
   /**
    * Mapping storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $mappingStorage;
 
   /**
    * PushController constructor.
    *
-   * @param \Drupal\salesforce_push\PushQueue $pushQueue
+   * @param PushQueue $pushQueue
    *   Push queue service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $etm
+   * @param EntityTypeManagerInterface $etm
    *   Entity type manager service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(PushQueue $pushQueue, EntityTypeManagerInterface $etm) {
     $this->pushQueue = $pushQueue;
diff --git a/modules/salesforce_push/src/PushQueue.php b/modules/salesforce_push/src/PushQueue.php
index a0702168..25d5f056 100644
--- a/modules/salesforce_push/src/PushQueue.php
+++ b/modules/salesforce_push/src/PushQueue.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\salesforce_push;
 
+use Drupal\salesforce_mapping\SalesforceMappingStorage;
+use Drupal\salesforce_mapping\MappedObjectStorage;
+use Drupal\Core\Config\Config;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Database\Connection;
@@ -68,28 +74,28 @@ class PushQueue extends DatabaseQueue implements PushQueueInterface {
   /**
    * Database service.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * State service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * Push queue plugin manager.
    *
-   * @var \Drupal\salesforce_push\PushQueueProcessorPluginManager
+   * @var PushQueueProcessorPluginManager
    */
   protected $queueManager;
 
   /**
    * Event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
@@ -103,58 +109,58 @@ class PushQueue extends DatabaseQueue implements PushQueueInterface {
   /**
    * Storage handler for SF mappings.
    *
-   * @var \Drupal\salesforce_mapping\SalesforceMappingStorage
+   * @var SalesforceMappingStorage
    */
   protected $mappingStorage;
 
   /**
    * Storage handler for Mapped Objects.
    *
-   * @var \Drupal\salesforce_mapping\MappedObjectStorage
+   * @var MappedObjectStorage
    */
   protected $mappedObjectStorage;
 
   /**
    * Time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * Config service.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;
 
   /**
    * ETM service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $etm;
 
   /**
    * PushQueue constructor.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   Database service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   State service.
-   * @param \Drupal\salesforce_push\PushQueueProcessorPluginManager $queue_manager
+   * @param PushQueueProcessorPluginManager $queue_manager
    *   Queue plugin manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $etm
+   * @param EntityTypeManagerInterface $etm
    *   ETM service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   Time service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   Config service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(Connection $connection, StateInterface $state, PushQueueProcessorPluginManager $queue_manager, EntityTypeManagerInterface $etm, EventDispatcherInterface $event_dispatcher, TimeInterface $time, ConfigFactoryInterface $config) {
     $this->connection = $connection;
@@ -421,14 +427,14 @@ class PushQueue extends DatabaseQueue implements PushQueueInterface {
   /**
    * Given a salesforce mapping, process all its push queue entries.
    *
-   * @param \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface $mapping
+   * @param SalesforceMappingInterface $mapping
    *   Salesforce mapping.
    *
    * @return int
    *   The number of items procesed, or -1 if there was any error, And also
    *   dispatches a SalesforceEvents::ERROR event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function processQueue(SalesforceMappingInterface $mapping) {
     if (!$this->connection->schema()->tableExists(static::TABLE_NAME)) {
@@ -577,7 +583,7 @@ class PushQueue extends DatabaseQueue implements PushQueueInterface {
   /**
    * For a given entity, delete its corresponding queue items.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity whose items should be deleted.
    *
    * @throws \Exception
diff --git a/modules/salesforce_push/src/PushQueueProcessorInterface.php b/modules/salesforce_push/src/PushQueueProcessorInterface.php
index 608821e5..e34192e0 100644
--- a/modules/salesforce_push/src/PushQueueProcessorInterface.php
+++ b/modules/salesforce_push/src/PushQueueProcessorInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\salesforce_push;
 
+use Drupal\Core\Queue\SuspendQueueException;
+use Drupal\Core\Queue\RequeueException;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 
 /**
@@ -23,12 +25,12 @@ interface PushQueueProcessorInterface extends ContainerFactoryPluginInterface {
    * @param array $items
    *   The items to process.
    *
-   * @throws \Drupal\Core\Queue\SuspendQueueException
+   * @throws SuspendQueueException
    *   Indicate that processing for this queue should not continue.
    *   Move on to the next queue.
    *   Items should be released.
    *
-   * @throws \Drupal\Core\Queue\RequeueException
+   * @throws RequeueException
    *   Indicate that processing for this set of items failed.
    *   Processing for this queue should continue.
    *   Items should be released.
diff --git a/modules/salesforce_push/src/PushQueueProcessorPluginManager.php b/modules/salesforce_push/src/PushQueueProcessorPluginManager.php
index cbf3a386..b5f4b2be 100644
--- a/modules/salesforce_push/src/PushQueueProcessorPluginManager.php
+++ b/modules/salesforce_push/src/PushQueueProcessorPluginManager.php
@@ -17,9 +17,9 @@ class PushQueueProcessorPluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Module handler service.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/modules/salesforce_push/tests/src/Functional/PushQueueTest.php b/modules/salesforce_push/tests/src/Functional/PushQueueTest.php
index bbedbd2f..da0bc17a 100644
--- a/modules/salesforce_push/tests/src/Functional/PushQueueTest.php
+++ b/modules/salesforce_push/tests/src/Functional/PushQueueTest.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\Tests\salesforce_push\Functional;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\salesforce_push\PushQueue;
+use Drupal\salesforce_mapping\MappedObjectStorage;
 use Drupal\node\Entity\Node;
 use Drupal\salesforce_mapping\Entity\SalesforceMapping;
 use Drupal\Tests\BrowserTestBase;
@@ -41,20 +47,20 @@ class PushQueueTest extends BrowserTestBase {
    * Test mocked push queue update and update of mapped objects.
    * Test deletion of entities and corresponding deletion of SF related records.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testQueue() {
-    /** @var \Drupal\salesforce_push\PushQueue $queue */
+    /** @var PushQueue $queue */
     $queue = \Drupal::service('queue.salesforce_push');
     $mapping = SalesforceMapping::load('test_mapping');
     // Set mapping to async, otherwise the push will be attempted immediately.
     $mapping->set('async', TRUE);
     $mapping->save();
 
-    /** @var \Drupal\salesforce_mapping\MappedObjectStorage $mappedObjectStorage */
+    /** @var MappedObjectStorage $mappedObjectStorage */
     $mappedObjectStorage = \Drupal::entityTypeManager()->getStorage('salesforce_mapped_object');
     $this->assertEquals(0, $queue->numberOfItems());
 
diff --git a/modules/salesforce_push/tests/src/Unit/PushQueueTest.php b/modules/salesforce_push/tests/src/Unit/PushQueueTest.php
index 04a56638..bfe80dc9 100644
--- a/modules/salesforce_push/tests/src/Unit/PushQueueTest.php
+++ b/modules/salesforce_push/tests/src/Unit/PushQueueTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\salesforce_push\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -31,45 +32,38 @@ use Prophecy\Argument;
  * @group salesforce_push
  */
 class PushQueueTest extends UnitTestCase {
+  use ProphecyTrait;
   static protected $modules = ['salesforce_push'];
 
   /**
    * {@inheritdoc}
    */
   protected function setUp(): void {
-    $this->schema = $this->getMockBuilder(Schema::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->schema = $this->createMock(Schema::class);
     $this->schema->expects($this->any())
       ->method('tableExists')
       ->willReturn(TRUE);
-    $this->database = $this->getMockBuilder(Connection::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->database = $this->createMock(Connection::class);
     $this->database->expects($this->any())
       ->method('schema')
       ->willReturn($this->schema);
-    $this->state = $this->getMockBuilder(StateInterface::class)->getMock();
+    $this->state = $this->createMock(StateInterface::class);
     $this->push_queue_processor_plugin_manager =
-      $this->getMockBuilder(PushQueueProcessorPluginManager::class)
-        ->disableOriginalConstructor()
-        ->getMock();
+      $this->createMock(PushQueueProcessorPluginManager::class);
     $this->entityTypeManager =
-      $this->getMockBuilder(EntityTypeManagerInterface::class)->getMock();
-    $this->eventDispatcher = $this->getMockBuilder(EventDispatcherInterface::CLASS)->getMock();
+      $this->createMock(EntityTypeManagerInterface::class);
+    $this->eventDispatcher = $this->createMock(EventDispatcherInterface::CLASS);
     $this->eventDispatcher->expects($this->any())
       ->method('dispatch')
       ->willReturn(NULL);
-    $this->string_translation = $this->getMockBuilder(TranslationInterface::class)->getMock();
-    $this->time = $this->getMockBuilder(TimeInterface::class)->getMock();
+    $this->string_translation = $this->createMock(TranslationInterface::class);
+    $this->time = $this->createMock(TimeInterface::class);
 
-    $this->mappingStorage = $this->getMockBuilder(SalesforceMappingStorage::CLASS)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->mappingStorage = $this->createMock(SalesforceMappingStorage::CLASS);
 
-    $this->mappedObjectStorage = $this->getMockBuilder(SqlEntityStorageInterface::CLASS)->getMock();
+    $this->mappedObjectStorage = $this->createMock(SqlEntityStorageInterface::CLASS);
 
-    $this->entityStorage = $this->getMockBuilder(SqlEntityStorageInterface::CLASS)->getMock();
+    $this->entityStorage = $this->createMock(SqlEntityStorageInterface::CLASS);
 
     $this->entityTypeManager->expects($this->exactly(2))
       ->method('getStorage')
@@ -116,7 +110,7 @@ class PushQueueTest extends UnitTestCase {
 
     // Test claiming items.
     $items = [1, 2, 3];
-    $this->queryRange = $this->getMockBuilder(StatementInterface::class)->getMock();
+    $this->queryRange = $this->createMock(StatementInterface::class);
     $this->queryRange->expects($this->once())
       ->method('fetchAllAssoc')
       ->willReturn($items);
@@ -124,9 +118,7 @@ class PushQueueTest extends UnitTestCase {
       ->method('queryRange')
       ->willReturn($this->queryRange);
 
-    $this->updateQuery = $this->getMockBuilder(Update::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->updateQuery = $this->createMock(Update::class);
     $this->updateQuery->expects($this->once())
       ->method('fields')
       ->willReturn($this->updateQuery);
@@ -147,7 +139,7 @@ class PushQueueTest extends UnitTestCase {
    * @covers ::processQueues
    */
   public function testProcessQueue() {
-    $mapping1 = $this->getMockBuilder(SalesforceMappingInterface::CLASS)->getMock();
+    $mapping1 = $this->createMock(SalesforceMappingInterface::CLASS);
     $mapping1->expects($this->any())
       ->method('getNextPushTime')
       ->willReturn(0);
@@ -157,7 +149,7 @@ class PushQueueTest extends UnitTestCase {
     $mapping1->push_limit = 1;
     $mapping1->push_retries = 1;
 
-    $this->worker = $this->getMockBuilder(PushQueueProcessorInterface::class)->getMock();
+    $this->worker = $this->createMock(PushQueueProcessorInterface::class);
     $this->worker->expects($this->any())
       ->method('process')
       ->willReturn(NULL);
diff --git a/modules/salesforce_push/tests/src/Unit/SalesforcePushQueueProcessorRestTest.php b/modules/salesforce_push/tests/src/Unit/SalesforcePushQueueProcessorRestTest.php
index ba3ae473..87f649ee 100644
--- a/modules/salesforce_push/tests/src/Unit/SalesforcePushQueueProcessorRestTest.php
+++ b/modules/salesforce_push/tests/src/Unit/SalesforcePushQueueProcessorRestTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\salesforce_push\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -30,6 +31,7 @@ use Drupal\Core\StringTranslation\TranslationInterface;
  */
 class SalesforcePushQueueProcessorRestTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Required modules.
    *
@@ -43,17 +45,17 @@ class SalesforcePushQueueProcessorRestTest extends UnitTestCase {
   protected function setUp(): void {
     $this->entityType = 'default';
 
-    $this->queue = $this->getMockBuilder(PushQueueInterface::CLASS)->getMock();
-    $this->client = $this->getMockBuilder(RestClientInterface::CLASS)->getMock();
-    $this->eventDispatcher = $this->getMockBuilder(EventDispatcherInterface::CLASS)->getMock();
+    $this->queue = $this->createMock(PushQueueInterface::CLASS);
+    $this->client = $this->createMock(RestClientInterface::CLASS);
+    $this->eventDispatcher = $this->createMock(EventDispatcherInterface::CLASS);
     $this->eventDispatcher->expects($this->any())
       ->method('dispatch')
       ->willReturn(NULL);
-    $this->entity_manager = $this->getMockBuilder(EntityTypeManagerInterface::class)->getMock();
+    $this->entity_manager = $this->createMock(EntityTypeManagerInterface::class);
 
-    $this->string_translation = $this->getMockBuilder(TranslationInterface::class)->getMock();
+    $this->string_translation = $this->createMock(TranslationInterface::class);
 
-    $this->mapping = $this->getMockBuilder(SalesforceMappingInterface::CLASS)->getMock();
+    $this->mapping = $this->createMock(SalesforceMappingInterface::CLASS);
 
     $this->mapping->expects($this->any())
       ->method('id')
@@ -64,12 +66,12 @@ class SalesforcePushQueueProcessorRestTest extends UnitTestCase {
       ->with($this->equalTo('drupal_entity_type'))
       ->willReturn($this->entityType);
 
-    $this->mappingStorage = $this->getMockBuilder(ConfigEntityStorageInterface::CLASS)->getMock();
+    $this->mappingStorage = $this->createMock(ConfigEntityStorageInterface::CLASS);
     $this->mappingStorage->expects($this->any())
       ->method('load')
       ->willReturn($this->mapping);
 
-    $this->mappedObjectStorage = $this->getMockBuilder(SqlEntityStorageInterface::CLASS)->getMock();
+    $this->mappedObjectStorage = $this->createMock(SqlEntityStorageInterface::CLASS);
 
     $prophecy = $this->prophesize(EntityTypeManagerInterface::class);
     $prophecy->getStorage('salesforce_mapping')
@@ -78,11 +80,9 @@ class SalesforcePushQueueProcessorRestTest extends UnitTestCase {
       ->willReturn($this->mappedObjectStorage);
     $this->entityTypeManager = $prophecy->reveal();
 
-    $this->authToken = $this->getMockBuilder(TokenInterface::CLASS)->getMock();
+    $this->authToken = $this->createMock(TokenInterface::CLASS);
     $this->authMan =
-      $this->getMockBuilder(SalesforceAuthProviderPluginManager::CLASS)
-        ->disableOriginalConstructor()
-        ->getMock();
+      $this->createMock(SalesforceAuthProviderPluginManager::CLASS);
     $this->authMan->expects($this->any())
       ->method('getToken')
       ->willReturn($this->authToken);
@@ -104,9 +104,7 @@ class SalesforcePushQueueProcessorRestTest extends UnitTestCase {
    */
   public function testProcessMissingAuth() {
     $this->authMan =
-      $this->getMockBuilder(SalesforceAuthProviderPluginManager::CLASS)
-        ->disableOriginalConstructor()
-        ->getMock();
+      $this->createMock(SalesforceAuthProviderPluginManager::CLASS);
     $this->authMan->expects($this->any())
       ->method('getToken')
       ->willReturn(NULL);
@@ -174,7 +172,7 @@ class SalesforcePushQueueProcessorRestTest extends UnitTestCase {
       ->setMethods(['getMappedObject'])
       ->getMock();
 
-    $mappedObject = $this->getMockBuilder(MappedObjectInterface::class)->getMock();
+    $mappedObject = $this->createMock(MappedObjectInterface::class);
     $mappedObject->expects($this->once())
       ->method('isNew')
       ->willReturn(TRUE);
@@ -201,7 +199,7 @@ class SalesforcePushQueueProcessorRestTest extends UnitTestCase {
       'name' => 'bar',
     ];
 
-    $this->mappedObject = $this->getMockBuilder(MappedObjectInterface::class)->getMock();
+    $this->mappedObject = $this->createMock(MappedObjectInterface::class);
 
     $this->mappedObject->expects($this->once())
       ->method('pushDelete')
@@ -234,15 +232,15 @@ class SalesforcePushQueueProcessorRestTest extends UnitTestCase {
    */
   public function testProcessItemPush() {
     // Test push on op == insert / update.
-    $this->mappedObject = $this->getMockBuilder(MappedObjectInterface::class)->getMock();
+    $this->mappedObject = $this->createMock(MappedObjectInterface::class);
     $this->queueItem = (object) [
       'entity_id' => 'foo',
       'op' => NULL,
       'mapped_object_id' => NULL,
       'name' => NULL,
     ];
-    $this->entity = $this->getMockBuilder(EntityInterface::class)->getMock();
-    $this->entityStorage = $this->getMockBuilder(SqlEntityStorageInterface::CLASS)->getMock();
+    $this->entity = $this->createMock(EntityInterface::class);
+    $this->entityStorage = $this->createMock(SqlEntityStorageInterface::CLASS);
     $this->entityStorage->expects($this->once())
       ->method('load')
       ->willReturn($this->entity);
@@ -296,12 +294,12 @@ class SalesforcePushQueueProcessorRestTest extends UnitTestCase {
       'entity_id' => 'foo',
     ];
 
-    $this->mappedObject = $this->getMockBuilder(MappedObjectInterface::class)->getMock();
+    $this->mappedObject = $this->createMock(MappedObjectInterface::class);
     $this->mappedObject->expects($this->any())
       ->method('isNew')
       ->willReturn(TRUE);
 
-    $this->entityStorage = $this->getMockBuilder(SqlEntityStorageInterface::CLASS)->getMock();
+    $this->entityStorage = $this->createMock(SqlEntityStorageInterface::CLASS);
     $prophecy = $this->prophesize(EntityTypeManagerInterface::class);
     $prophecy->getStorage($this->entityType)
       ->willReturn($this->entityStorage);
diff --git a/modules/salesforce_webform/salesforce_webform.module b/modules/salesforce_webform/salesforce_webform.module
index 0768ba45..9322afc9 100644
--- a/modules/salesforce_webform/salesforce_webform.module
+++ b/modules/salesforce_webform/salesforce_webform.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Url;
 /**
  * @file
  * Salesforce webform.
@@ -23,7 +24,7 @@ function salesforce_webform_menu_local_tasks_alter(&$data, $route_name) {
   if ($route_name === 'entity.webform_submission.salesforce') {
     foreach ($data['tabs'] as $tab_level) {
       foreach ($tab_level as $tab) {
-        /** @var Drupal\Core\Url $url */
+        /** @var Url $url */
         $url = $tab['#link']['url'];
         $tab_route_name = $url->getRouteName();
         $tab_route_parameters = $url->getRouteParameters();
diff --git a/salesforce.drush.inc b/salesforce.drush.inc
index 43b84333..1f3c8d67 100644
--- a/salesforce.drush.inc
+++ b/salesforce.drush.inc
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\salesforce_mapping\Entity\SalesforceMappingInterface;
 /**
  * @file
  * Drush integration for Salesforce.
@@ -456,7 +457,7 @@ function drush_salesforce_sf_execute_query($query = NULL) {
  * @param string $name
  *   The mapping name.
  *
- * @return \Drupal\salesforce_mapping\Entity\SalesforceMappingInterface|null
+ * @return SalesforceMappingInterface|null
  *   The mapping.
  */
 function _salesforce_drush_get_mapping($name = NULL) {
diff --git a/salesforce.install b/salesforce.install
index 2d75bbb4..c9ea1b0d 100644
--- a/salesforce.install
+++ b/salesforce.install
@@ -1,5 +1,9 @@
 <?php
 
+use Drupal\salesforce\SalesforceAuthProviderPluginManagerInterface;
+use Drupal\salesforce_oauth\Consumer\SalesforceOAuthCredentials;
+use Drupal\salesforce\Storage\SalesforceAuthTokenStorage;
+use Drupal\salesforce\Rest\RestClient;
 /**
  * @file
  * Salesforce install file.
@@ -64,7 +68,7 @@ function salesforce_get_auth_provider_requirements() {
     'title' => t('Salesforce Authentication Status'),
     'value' => t('Provider Status'),
   ];
-  /** @var \Drupal\salesforce\SalesforceAuthProviderPluginManagerInterface $authMan */
+  /** @var SalesforceAuthProviderPluginManagerInterface $authMan */
   $authMan = \Drupal::service('plugin.manager.salesforce.auth_providers');
   if (!$authMan->hasProviders()) {
     $requirements += [
@@ -286,7 +290,7 @@ function salesforce_update_8005() {
     $message = 'Existing "oauth_default" provider config detected. Refused to set legacy credentials.';
   }
   else {
-    /** @var \Drupal\salesforce\Entity\SalesforceAuthConfig $oauth */
+    /** @var SalesforceAuthConfig $oauth */
     $oauth = NULL;
     $config = \Drupal::configFactory()->getEditable('salesforce.settings');
     // Config to new plugin config system.
@@ -391,14 +395,14 @@ function salesforce_update_8402() {
   $encryption = \Drupal::service('encryption');
 
   // Encryption exists. Profile exists. Look for encrypted credentials.
-  /** @var \Drupal\salesforce\Entity\SalesforceAuthConfig $authConfig */
+  /** @var SalesforceAuthConfig $authConfig */
   $authConfig = SalesforceAuthConfig::load('oauth_default');
   if (!$authConfig) {
     // If we can't load the oauth_default config, we're done.
     return;
   }
   $credentials = $authConfig->getPlugin()->getCredentials();
-  if (!$credentials instanceof \Drupal\salesforce_oauth\Consumer\SalesforceOAuthCredentials) { // @codingStandardsIgnoreLine
+  if (!$credentials instanceof SalesforceOAuthCredentials) { // @codingStandardsIgnoreLine
     // If we're not using OAuth, we are done.
     return;
   }
@@ -422,7 +426,7 @@ function salesforce_update_8402() {
     return;
   }
 
-  /** @var \Drupal\salesforce\Storage\SalesforceAuthTokenStorage $tokenStorage */
+  /** @var SalesforceAuthTokenStorage $tokenStorage */
   $tokenStorage = \Drupal::service('salesforce.auth_token_storage');
   try {
     $token = $tokenStorage->retrieveAccessToken('oauth_default');
@@ -464,12 +468,12 @@ function salesforce_update_8800() {
   $settings = \Drupal::configFactory()->getEditable('salesforce.settings');
   $save = FALSE;
   if (!$settings->get('short_term_cache_lifetime')) {
-    $settings->set('short_term_cache_lifetime', \Drupal\salesforce\Rest\RestClient::CACHE_LIFETIME);
+    $settings->set('short_term_cache_lifetime', RestClient::CACHE_LIFETIME);
     $save = TRUE;
   }
   if (!$settings->get('long_term_cache_lifetime')) {
-    $settings->set('long_term_cache_lifetime', \Drupal\salesforce\Rest\RestClient::LONGTERM_CACHE_LIFETIME);
+    $settings->set('long_term_cache_lifetime', RestClient::LONGTERM_CACHE_LIFETIME);
     $save = TRUE;
   }
   $settings->save();
-}
\ No newline at end of file
+}
diff --git a/src/Annotation/SalesforceAuthProvider.php b/src/Annotation/SalesforceAuthProvider.php
index cb8fe8b3..af41ff2c 100644
--- a/src/Annotation/SalesforceAuthProvider.php
+++ b/src/Annotation/SalesforceAuthProvider.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\salesforce\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -19,7 +20,7 @@ class SalesforceAuthProvider extends Plugin {
   /**
    * The human-readable name of the key provider.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label;
 
diff --git a/src/Commands/QueryResult.php b/src/Commands/QueryResult.php
index 18b440f9..21cb6c5c 100644
--- a/src/Commands/QueryResult.php
+++ b/src/Commands/QueryResult.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\salesforce\Commands;
 
+use Drupal\salesforce\SelectQuery;
 use Consolidation\OutputFormatters\StructuredData\RowsOfFieldsWithMetadata;
 use Drupal\salesforce\SelectQueryInterface;
 use Drupal\salesforce\SelectQueryResult;
@@ -28,16 +29,16 @@ class QueryResult extends RowsOfFieldsWithMetadata {
   /**
    * The query.
    *
-   * @var \Drupal\salesforce\SelectQueryInterface
+   * @var SelectQueryInterface
    */
   protected $query;
 
   /**
    * QueryResult constructor.
    *
-   * @param \Drupal\salesforce\SelectQueryInterface $query
+   * @param SelectQueryInterface $query
    *   SOQL query.
-   * @param \Drupal\salesforce\SelectQueryResult $queryResult
+   * @param SelectQueryResult $queryResult
    *   SOQL result.
    */
   public function __construct(SelectQueryInterface $query, SelectQueryResult $queryResult) {
@@ -74,7 +75,7 @@ class QueryResult extends RowsOfFieldsWithMetadata {
   /**
    * Getter for query.
    *
-   * @return \Drupal\salesforce\SelectQuery
+   * @return SelectQuery
    *   The query.
    */
   public function getQuery() {
diff --git a/src/Commands/SalesforceCommands.php b/src/Commands/SalesforceCommands.php
index 137d7b1e..b5ebd69b 100644
--- a/src/Commands/SalesforceCommands.php
+++ b/src/Commands/SalesforceCommands.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\salesforce\Commands;
 
+use OAuth\OAuth2\Service\Exception\MissingRefreshTokenException;
 use Consolidation\OutputFormatters\StructuredData\PropertyList;
 use Consolidation\OutputFormatters\StructuredData\RowsOfFields;
 use Drupal\salesforce\Rest\RestException;
@@ -41,7 +42,7 @@ class SalesforceCommands extends SalesforceCommandsBase {
    *   latest: Latest Version?
    * @default-fields label,url,version,login_url,latest
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\PropertyList
+   * @return PropertyList
    *   The version info.
    */
   public function restVersion() {
@@ -89,7 +90,7 @@ class SalesforceCommands extends SalesforceCommandsBase {
    *   urls: URLs
    * @default-fields name,label,labelPlural
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return RowsOfFields
    *   The objects.
    *
    * @throws \Exception
@@ -179,7 +180,7 @@ class SalesforceCommands extends SalesforceCommandsBase {
    *
    * @command salesforce:describe-object-deprecated
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields|null
+   * @return RowsOfFields|null
    *   Describe result.
    *
    * @throws \Exception
@@ -214,7 +215,7 @@ class SalesforceCommands extends SalesforceCommandsBase {
    * @param string $object
    *   The object name in Salesforce.
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields|null
+   * @return RowsOfFields|null
    *   The record types, or null if the object was not found.
    *
    * @throws \Exception
@@ -257,7 +258,7 @@ class SalesforceCommands extends SalesforceCommandsBase {
    * @param string $object
    *   The object name in Salesforce.
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\PropertyList|null
+   * @return PropertyList|null
    *   The metadata, or null if object was not found.
    *
    * @throws \Exception
@@ -332,7 +333,7 @@ class SalesforceCommands extends SalesforceCommandsBase {
    * @param string $object
    *   The object name in Salesforce.
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields|null
+   * @return RowsOfFields|null
    *   The fields, or null if the object was not found.
    *
    * @throws \Exception
@@ -439,7 +440,7 @@ class SalesforceCommands extends SalesforceCommandsBase {
    *   url: URL
    * @default-fields resource,url
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields|null
+   * @return RowsOfFields|null
    *   The resources, or null if resources failed to load.
    */
   public function listResources() {
@@ -555,7 +556,7 @@ class SalesforceCommands extends SalesforceCommandsBase {
    *   errors: Errors
    * @default-fields status,id,errors
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\PropertyList
+   * @return PropertyList
    *   The create() response.
    *
    * @command salesforce:create-object
@@ -597,7 +598,7 @@ class SalesforceCommands extends SalesforceCommandsBase {
    *   An associative array of options whose values come from cli, aliases,
    *   config, etc.
    *
-   * @return \Drupal\salesforce\Commands\QueryResult
+   * @return QueryResult
    *   The query result.
    *
    * @throws \Exception
@@ -660,7 +661,7 @@ class SalesforceCommands extends SalesforceCommandsBase {
    * @param string $query
    *   The query to execute.
    *
-   * @return \Drupal\salesforce\Commands\QueryResult
+   * @return QueryResult
    *   The query result.
    *
    * @command salesforce:execute-query
@@ -683,7 +684,7 @@ class SalesforceCommands extends SalesforceCommandsBase {
    *   status: Token Status
    * @default-fields label,name,default,status
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return RowsOfFields
    *   The auth provider details.
    */
   public function listAuthProviders() {
@@ -713,7 +714,7 @@ class SalesforceCommands extends SalesforceCommandsBase {
    * @return string
    *   Message indicating success or failure.
    *
-   * @throws \OAuth\OAuth2\Service\Exception\MissingRefreshTokenException
+   * @throws MissingRefreshTokenException
    *   For missing token.
    */
   public function refreshToken($providerName = '') {
@@ -743,7 +744,7 @@ class SalesforceCommands extends SalesforceCommandsBase {
    * @return string
    *   Message indicating success or failure.
    *
-   * @throws \OAuth\OAuth2\Service\Exception\MissingRefreshTokenException
+   * @throws MissingRefreshTokenException
    *   For missing token.
    */
   public function revokeToken($providerName = '') {
diff --git a/src/Commands/SalesforceCommandsBase.php b/src/Commands/SalesforceCommandsBase.php
index 4734cbb7..57822437 100644
--- a/src/Commands/SalesforceCommandsBase.php
+++ b/src/Commands/SalesforceCommandsBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\salesforce\Commands;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\salesforce\Rest\RestClient;
 use Drupal\salesforce\SalesforceAuthProviderPluginManagerInterface;
@@ -20,45 +22,45 @@ abstract class SalesforceCommandsBase extends DrushCommands {
   /**
    * The Salesforce client.
    *
-   * @var \Drupal\salesforce\Rest\RestClient
+   * @var RestClient
    */
   protected $client;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $etm;
 
   /**
    * Salesforce Auth Provider plugin manager service.
    *
-   * @var \Drupal\salesforce\SalesforceAuthProviderPluginManagerInterface
+   * @var SalesforceAuthProviderPluginManagerInterface
    */
   protected $authMan;
 
   /**
    * Salesforce Auth Token Storage service.
    *
-   * @var \Drupal\salesforce\Storage\SalesforceAuthTokenStorageInterface
+   * @var SalesforceAuthTokenStorageInterface
    */
   protected $tokenStorage;
 
   /**
    * SalesforceCommandsBase constructor.
    *
-   * @param \Drupal\salesforce\Rest\RestClient $client
+   * @param RestClient $client
    *   SF client.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $etm
+   * @param EntityTypeManagerInterface $etm
    *   Entity type manager.
-   * @param \Drupal\salesforce\SalesforceAuthProviderPluginManagerInterface $authMan
+   * @param SalesforceAuthProviderPluginManagerInterface $authMan
    *   Auth plugin manager.
-   * @param \Drupal\salesforce\Storage\SalesforceAuthTokenStorageInterface $tokenStorage
+   * @param SalesforceAuthTokenStorageInterface $tokenStorage
    *   Token storage.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(RestClient $client, EntityTypeManagerInterface $etm, SalesforceAuthProviderPluginManagerInterface $authMan, SalesforceAuthTokenStorageInterface $tokenStorage) {
     $this->client = $client;
@@ -86,10 +88,10 @@ abstract class SalesforceCommandsBase extends DrushCommands {
   /**
    * Pass-through helper to add appropriate formatters for a query result.
    *
-   * @param \Drupal\salesforce\Commands\QueryResult $query
+   * @param QueryResult $query
    *   The query result.
    *
-   * @return \Drupal\salesforce\Commands\QueryResult
+   * @return QueryResult
    *   The same, unchanged query result.
    */
   protected function returnQueryResult(QueryResult $query) {
diff --git a/src/Controller/SalesforceAuthListBuilder.php b/src/Controller/SalesforceAuthListBuilder.php
index a4e02a44..9bd11338 100644
--- a/src/Controller/SalesforceAuthListBuilder.php
+++ b/src/Controller/SalesforceAuthListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\salesforce\Controller;
 
+use Drupal\salesforce\SalesforceAuthProviderInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\salesforce\Entity\SalesforceAuthConfig;
@@ -15,7 +16,7 @@ class SalesforceAuthListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\salesforce\SalesforceAuthProviderInterface $plugin */
+    /** @var SalesforceAuthProviderInterface $plugin */
     $plugin = $entity->getPlugin();
     $row['default'] = $entity->authManager()
       ->getConfig() && $entity->authManager()
diff --git a/src/Entity/SalesforceAuthConfig.php b/src/Entity/SalesforceAuthConfig.php
index 72f2559c..734c638c 100644
--- a/src/Entity/SalesforceAuthConfig.php
+++ b/src/Entity/SalesforceAuthConfig.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\salesforce\Entity;
 
+use Drupal\salesforce\SalesforceAuthProviderPluginManagerInterface;
+use Drupal\salesforce\SalesforceAuthProviderInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\salesforce\Consumer\SalesforceCredentialsInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityWithPluginCollectionInterface;
 use Drupal\Core\Plugin\DefaultSingleLazyPluginCollection;
@@ -76,14 +80,14 @@ class SalesforceAuthConfig extends ConfigEntityBase implements EntityWithPluginC
   /**
    * Auth manager.
    *
-   * @var \Drupal\salesforce\SalesforceAuthProviderPluginManagerInterface
+   * @var SalesforceAuthProviderPluginManagerInterface
    */
   protected $manager;
 
   /**
    * The plugin provider.
    *
-   * @var \Drupal\salesforce\SalesforceAuthProviderInterface
+   * @var SalesforceAuthProviderInterface
    */
   protected $plugin;
 
@@ -104,10 +108,10 @@ class SalesforceAuthConfig extends ConfigEntityBase implements EntityWithPluginC
   /**
    * Plugin getter.
    *
-   * @return \Drupal\salesforce\SalesforceAuthProviderInterface|null
+   * @return SalesforceAuthProviderInterface|null
    *   The auth provider plugin, or null.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function getPlugin() {
     if (!$this->plugin) {
@@ -139,10 +143,10 @@ class SalesforceAuthConfig extends ConfigEntityBase implements EntityWithPluginC
   /**
    * Get credentials.
    *
-   * @return \Drupal\salesforce\Consumer\SalesforceCredentialsInterface|false
+   * @return SalesforceCredentialsInterface|false
    *   Credentials or FALSE.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function getCredentials() {
     return $this->getPlugin() ? $this->getPlugin()->getCredentials() : FALSE;
@@ -151,7 +155,7 @@ class SalesforceAuthConfig extends ConfigEntityBase implements EntityWithPluginC
   /**
    * Auth manager wrapper.
    *
-   * @return \Drupal\salesforce\SalesforceAuthProviderPluginManagerInterface|mixed
+   * @return SalesforceAuthProviderPluginManagerInterface|mixed
    *   The auth provider plugin manager.
    */
   public function authManager() {
diff --git a/src/EntityNotFoundException.php b/src/EntityNotFoundException.php
index bc1b0e34..d1e18dc5 100644
--- a/src/EntityNotFoundException.php
+++ b/src/EntityNotFoundException.php
@@ -71,7 +71,7 @@ class EntityNotFoundException extends \RuntimeException {
   /**
    * Get a formattable message.
    *
-   * @return \Drupal\Component\Render\FormattableMarkup
+   * @return FormattableMarkup
    *   The message.
    */
   public function getFormattableMessage() {
diff --git a/src/Form/SalesforceAuthForm.php b/src/Form/SalesforceAuthForm.php
index 4521163e..2239cda9 100644
--- a/src/Form/SalesforceAuthForm.php
+++ b/src/Form/SalesforceAuthForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\salesforce\Form;
 
+use Drupal\salesforce\Entity\SalesforceAuthConfig;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -13,7 +16,7 @@ class SalesforceAuthForm extends EntityForm {
   /**
    * The config entity.
    *
-   * @var \Drupal\salesforce\Entity\SalesforceAuthConfig
+   * @var SalesforceAuthConfig
    */
   protected $entity;
 
@@ -105,7 +108,7 @@ class SalesforceAuthForm extends EntityForm {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ -170,8 +173,8 @@ class SalesforceAuthForm extends EntityForm {
    * @return bool
    *   TRUE if the config exists, FALSE otherwise.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function exists($id) {
     $action = \Drupal::entityTypeManager()->getStorage($this->entity->getEntityTypeId())->load($id);
diff --git a/src/Form/SalesforceAuthSettings.php b/src/Form/SalesforceAuthSettings.php
index 18e8fb8b..44ef9884 100644
--- a/src/Form/SalesforceAuthSettings.php
+++ b/src/Form/SalesforceAuthSettings.php
@@ -19,25 +19,25 @@ class SalesforceAuthSettings extends ConfigFormBase {
   /**
    * Auth provider plugin manager service.
    *
-   * @var \Drupal\salesforce\SalesforceAuthProviderPluginManagerInterface
+   * @var SalesforceAuthProviderPluginManagerInterface
    */
   protected $salesforceAuth;
 
   /**
    * Event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config.
-   * @param \Drupal\salesforce\SalesforceAuthProviderPluginManagerInterface $salesforceAuth
+   * @param SalesforceAuthProviderPluginManagerInterface $salesforceAuth
    *   Authman.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   Events.
    */
   public function __construct(ConfigFactoryInterface $config_factory, SalesforceAuthProviderPluginManagerInterface $salesforceAuth, EventDispatcherInterface $eventDispatcher) {
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index c80502f4..d44bff8c 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\salesforce\Form;
 
+use Drupal\Core\State\StateInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -18,25 +19,25 @@ class SettingsForm extends ConfigFormBase {
   /**
    * The Salesforce REST client.
    *
-   * @var \Drupal\salesforce\Rest\RestClientInterface
+   * @var RestClientInterface
    */
   protected $client;
 
   /**
    * The sevent dispatcher service..
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $eventDispatcher;
 
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\salesforce\Rest\RestClientInterface $salesforce_client
+   * @param RestClientInterface $salesforce_client
    *   The factory for configuration objects.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(ConfigFactoryInterface $config_factory, RestClientInterface $salesforce_client, EventDispatcherInterface $event_dispatcher) {
diff --git a/src/Rest/RestClient.php b/src/Rest/RestClient.php
index 73a98c4f..638ee446 100644
--- a/src/Rest/RestClient.php
+++ b/src/Rest/RestClient.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\salesforce\Rest;
 
+use GuzzleHttp\Psr7\Response;
+use Drupal\Core\Url;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\salesforce\SalesforceAuthProviderInterface;
+use Drupal\salesforce\Entity\SalesforceAuthConfig;
+use OAuth\OAuth2\Token\TokenInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ -29,84 +35,84 @@ class RestClient implements RestClientInterface {
   /**
    * Response object.
    *
-   * @var \GuzzleHttp\Psr7\Response
+   * @var Response
    */
   public $response;
 
   /**
    * GuzzleHttp client.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;
 
   /**
    * Config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Salesforce API URL.
    *
-   * @var \Drupal\Core\Url
+   * @var Url
    */
   protected $url;
 
   /**
    * Salesforce immutable config object.  Useful for gets.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $immutableConfig;
 
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * The cache service.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;
 
   /**
    * The JSON serializer service.
    *
-   * @var \Drupal\Component\Serialization\Json
+   * @var Json
    */
   protected $json;
 
   /**
    * Auth provider manager.
    *
-   * @var \Drupal\salesforce\SalesforceAuthProviderPluginManagerInterface
+   * @var SalesforceAuthProviderPluginManagerInterface
    */
   protected $authManager;
 
   /**
    * Active auth provider.
    *
-   * @var \Drupal\salesforce\SalesforceAuthProviderInterface
+   * @var SalesforceAuthProviderInterface
    */
   protected $authProvider;
 
   /**
    * Active auth provider config.
    *
-   * @var \Drupal\salesforce\Entity\SalesforceAuthConfig
+   * @var SalesforceAuthConfig
    */
   protected $authConfig;
 
   /**
    * Active auth token.
    *
-   * @var \OAuth\OAuth2\Token\TokenInterface
+   * @var TokenInterface
    */
   protected $authToken;
 
@@ -130,19 +136,19 @@ class RestClient implements RestClientInterface {
   /**
    * Constructor which initializes the consumer.
    *
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   The GuzzleHttp Client.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache service.
-   * @param \Drupal\Component\Serialization\Json $json
+   * @param Json $json
    *   The JSON serializer service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The Time service.
-   * @param \Drupal\salesforce\SalesforceAuthProviderPluginManagerInterface $authManager
+   * @param SalesforceAuthProviderPluginManagerInterface $authManager
    *   Auth manager service.
    */
   public function __construct(ClientInterface $http_client, ConfigFactoryInterface $config_factory, StateInterface $state, CacheBackendInterface $cache, Json $json, TimeInterface $time, SalesforceAuthProviderPluginManagerInterface $authManager) {
@@ -260,11 +266,11 @@ class RestClient implements RestClientInterface {
    * @param array $headers
    *   The http headers to merge into the request.
    *
-   * @return \GuzzleHttp\Psr7\Response
+   * @return Response
    *   Response object.
    *
    * @throws \Exception
-   * @throws \GuzzleHttp\Exception\RequestException
+   * @throws RequestException
    */
   protected function apiHttpRequest($url, $params, $method, array $headers = []) {
     if (!$this->authToken) {
@@ -308,10 +314,10 @@ class RestClient implements RestClientInterface {
    * @param string $method
    *   Method to initiate the call, such as GET or POST.  Defaults to GET.
    *
-   * @return \GuzzleHttp\Psr7\Response
+   * @return Response
    *   Response object.
    *
-   * @throws \GuzzleHttp\Exception\RequestException
+   * @throws RequestException
    *   Request exception.
    */
   protected function httpRequest($url, $data = NULL, array $headers = [], $method = 'GET') {
@@ -353,7 +359,7 @@ class RestClient implements RestClientInterface {
   /**
    * Extract normalized error information from a RequestException.
    *
-   * @param \GuzzleHttp\Exception\RequestException $e
+   * @param RequestException $e
    *   Exception object.
    *
    * @return array
@@ -410,7 +416,7 @@ class RestClient implements RestClientInterface {
   /**
    * Helper to extract API Usage info from response header and write to state.
    *
-   * @param \Drupal\salesforce\Rest\RestResponse $response
+   * @param RestResponse $response
    *   A REST API response.
    */
   protected function updateApiUsage(RestResponse $response) {
diff --git a/src/Rest/RestClientInterface.php b/src/Rest/RestClientInterface.php
index 0dd0d253..9a53a04c 100644
--- a/src/Rest/RestClientInterface.php
+++ b/src/Rest/RestClientInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\salesforce\Rest;
 
+use GuzzleHttp\Exception\RequestException;
+use Drupal\salesforce\SObject;
 use Drupal\salesforce\SelectQueryInterface;
 use Drupal\salesforce\SFID;
 use Drupal\salesforce\SelectQueryResult;
@@ -47,7 +49,7 @@ interface RestClientInterface {
    * @return mixed
    *   Response object or response data.
    *
-   * @throws \GuzzleHttp\Exception\RequestException
+   * @throws RequestException
    */
   public function apiCall($path, $params = [], $method = 'GET', $returnObject = FALSE, array $headers = []);
 
@@ -131,7 +133,7 @@ interface RestClientInterface {
    *   Array of all available Salesforce versions, or empty array if version
    *   info is not available.
    *
-   * @throws \GuzzleHttp\Exception\RequestException
+   * @throws RequestException
    */
   public function getVersions($reset = FALSE);
 
@@ -158,10 +160,10 @@ interface RestClientInterface {
   /**
    * Use SOQL to get objects based on query string.
    *
-   * @param \Drupal\salesforce\SelectQueryInterface $query
+   * @param SelectQueryInterface $query
    *   The constructed SOQL query.
    *
-   * @return \Drupal\salesforce\SelectQueryResult
+   * @return SelectQueryResult
    *   The query result.
    *
    * @addtogroup salesforce_apicalls
@@ -171,10 +173,10 @@ interface RestClientInterface {
   /**
    * Same as ::query(), but also returns deleted or archived records.
    *
-   * @param \Drupal\salesforce\SelectQueryInterface $query
+   * @param SelectQueryInterface $query
    *   The constructed SOQL query.
    *
-   * @return \Drupal\salesforce\SelectQueryResult
+   * @return SelectQueryResult
    *   The query result.
    *
    * @addtogroup salesforce_apicalls
@@ -184,10 +186,10 @@ interface RestClientInterface {
   /**
    * Given a select query result, fetch the next results set, if it exists.
    *
-   * @param \Drupal\salesforce\SelectQueryResult $results
+   * @param SelectQueryResult $results
    *   The query result which potentially has more records.
    *
-   * @return \Drupal\salesforce\SelectQueryResult
+   * @return SelectQueryResult
    *   If there are no more results, $results->records will be empty.
    */
   public function queryMore(SelectQueryResult $results);
@@ -200,7 +202,7 @@ interface RestClientInterface {
    * @param bool $reset
    *   Whether to reset the cache and retrieve a fresh version from Salesforce.
    *
-   * @return \Drupal\salesforce\Rest\RestResponseDescribe
+   * @return RestResponseDescribe
    *   The describe result.
    *
    * @addtogroup salesforce_apicalls
@@ -215,7 +217,7 @@ interface RestClientInterface {
    * @param array $params
    *   Values of the fields to set for the object.
    *
-   * @return \Drupal\salesforce\SFID
+   * @return SFID
    *   The new object's SFID.
    *
    * @addtogroup salesforce_apicalls
@@ -238,7 +240,7 @@ interface RestClientInterface {
    * @param array $params
    *   Values of the fields to set for the object.
    *
-   * @return \Drupal\salesforce\SFID
+   * @return SFID
    *   The new object's SFID, if created. NULL if updated. This is not ideal,
    *   but this is how Salesforce's API works. Go upvote this idea to fix it:
    *
@@ -271,7 +273,7 @@ interface RestClientInterface {
    * @param string $id
    *   Salesforce id of the object.
    *
-   * @return \Drupal\salesforce\SObject
+   * @return SObject
    *   Object of the requested Salesforce object.
    *
    * @addtogroup salesforce_apicalls
@@ -288,7 +290,7 @@ interface RestClientInterface {
    * @param string $value
    *   Value of external id.
    *
-   * @return \Drupal\salesforce\SObject
+   * @return SObject
    *   Object of the requested Salesforce object.
    *
    * @addtogroup salesforce_apicalls
@@ -334,7 +336,7 @@ interface RestClientInterface {
   /**
    * Return a list of available resources for the configured API version.
    *
-   * @return \Drupal\salesforce\Rest\RestResponseResources
+   * @return RestResponseResources
    *   The response.
    *
    * @addtogroup salesforce_apicalls
@@ -393,7 +395,7 @@ interface RestClientInterface {
    * @param bool $reset
    *   If true, clear the local cache and fetch record types from API.
    *
-   * @return \Drupal\salesforce\SFID|false
+   * @return SFID|false
    *   The Salesforce ID of the given Record Type, or FALSE if not found.
    */
   public function getRecordTypeIdByDeveloperName($name, $devname, $reset = FALSE);
@@ -401,7 +403,7 @@ interface RestClientInterface {
   /**
    * Utility function to determine object type for given SFID.
    *
-   * @param \Drupal\salesforce\SFID $id
+   * @param SFID $id
    *   The SFID.
    *
    * @return string|false
diff --git a/src/Rest/RestException.php b/src/Rest/RestException.php
index 1cf71e2f..63cff01e 100644
--- a/src/Rest/RestException.php
+++ b/src/Rest/RestException.php
@@ -15,7 +15,7 @@ class RestException extends \RuntimeException implements ExceptionInterface {
   /**
    * The current Response.
    *
-   * @var \Psr\Http\Message\ResponseInterface|null
+   * @var ResponseInterface|null
    */
   protected $response;
 
@@ -29,7 +29,7 @@ class RestException extends \RuntimeException implements ExceptionInterface {
   /**
    * RestException constructor.
    *
-   * @param \Psr\Http\Message\ResponseInterface|null $response
+   * @param ResponseInterface|null $response
    *   A response, if available.
    * @param string $message
    *   Message (optional).
@@ -47,7 +47,7 @@ class RestException extends \RuntimeException implements ExceptionInterface {
   /**
    * Getter.
    *
-   * @return null|\Psr\Http\Message\ResponseInterface
+   * @return null|ResponseInterface
    *   The response.
    */
   public function getResponse() {
diff --git a/src/Rest/RestResponse.php b/src/Rest/RestResponse.php
index 5ecdf270..a0f6e432 100644
--- a/src/Rest/RestResponse.php
+++ b/src/Rest/RestResponse.php
@@ -19,7 +19,7 @@ class RestResponse extends Response {
   /**
    * The original Response used to build this object.
    *
-   * @var \GuzzleHttp\Psr7\Response
+   * @var Response
    * @see __get()
    */
   protected $response;
@@ -35,7 +35,7 @@ class RestResponse extends Response {
   /**
    * RestResponse constructor.
    *
-   * @param \Psr\Http\Message\ResponseInterface $response
+   * @param ResponseInterface $response
    *   A response.
    */
   public function __construct(ResponseInterface $response) {
@@ -74,7 +74,7 @@ class RestResponse extends Response {
    *
    * @return $this
    *
-   * @throws \Drupal\salesforce\Rest\RestException
+   * @throws RestException
    */
   protected function handleJsonResponse() {
     $this->data = '';
@@ -119,7 +119,7 @@ class RestResponse extends Response {
    *
    * @return $this
    *
-   * @throws \Drupal\salesforce\Rest\RestException
+   * @throws RestException
    */
   protected function handleRawResponse() {
     $this->data = $this->getBody()->getContents();
diff --git a/src/Rest/RestResponseDescribe.php b/src/Rest/RestResponseDescribe.php
index 7d9b77a8..bbc28e5c 100644
--- a/src/Rest/RestResponseDescribe.php
+++ b/src/Rest/RestResponseDescribe.php
@@ -33,7 +33,7 @@ class RestResponseDescribe extends RestResponse {
   /**
    * See https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_sobject_describe.htm.
    *
-   * @param \Drupal\salesforce\Rest\RestResponse $response
+   * @param RestResponse $response
    *   The Response.
    */
   public function __construct(RestResponse $response) {
diff --git a/src/Rest/RestResponseResources.php b/src/Rest/RestResponseResources.php
index 4cd3d276..846a9e2e 100644
--- a/src/Rest/RestResponseResources.php
+++ b/src/Rest/RestResponseResources.php
@@ -23,7 +23,7 @@ class RestResponseResources extends RestResponse {
    *
    * See https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_discoveryresource.htm.
    *
-   * @param \Drupal\salesforce\Rest\RestResponse $response
+   * @param RestResponse $response
    *   The response.
    */
   public function __construct(RestResponse $response) {
diff --git a/src/Rest/SalesforceIdentity.php b/src/Rest/SalesforceIdentity.php
index ad032fee..89ad8ac5 100644
--- a/src/Rest/SalesforceIdentity.php
+++ b/src/Rest/SalesforceIdentity.php
@@ -14,7 +14,7 @@ class SalesforceIdentity implements SalesforceIdentityInterface {
    * @param string $responseBody
    *   JSON identity response from Salesforce.
    *
-   * @throws \OAuth\Common\Http\Exception\TokenResponseException
+   * @throws TokenResponseException
    *   If responseBody cannot be parsed, or contains an error.
    */
   public function __construct($responseBody) {
@@ -38,7 +38,7 @@ class SalesforceIdentity implements SalesforceIdentityInterface {
    * @return \Drupal\salesforce\Rest\SalesforceIdentity
    *   New identity.
    *
-   * @throws \OAuth\Common\Http\Exception\TokenResponseException
+   * @throws TokenResponseException
    */
   public static function create(array $data) {
     return new static(json_encode($data));
diff --git a/src/SObject.php b/src/SObject.php
index 0d77de8e..b039a193 100644
--- a/src/SObject.php
+++ b/src/SObject.php
@@ -26,7 +26,7 @@ class SObject {
   /**
    * The id.
    *
-   * @var \Drupal\salesforce\SFID
+   * @var SFID
    */
   protected $id;
 
@@ -89,7 +89,7 @@ class SObject {
   /**
    * SFID Getter.
    *
-   * @return \Drupal\salesforce\SFID
+   * @return SFID
    *   The record id.
    */
   public function id() {
diff --git a/src/SalesforceAuthProviderInterface.php b/src/SalesforceAuthProviderInterface.php
index 2a0c000d..7d6e10a6 100644
--- a/src/SalesforceAuthProviderInterface.php
+++ b/src/SalesforceAuthProviderInterface.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\salesforce;
 
+use OAuth\OAuth2\Service\Exception\MissingRefreshTokenException;
+use Drupal\salesforce\Rest\SalesforceIdentityInterface;
+use Drupal\salesforce\Consumer\SalesforceCredentialsInterface;
+use OAuth\Common\Storage\Exception\TokenNotFoundException;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -40,13 +44,13 @@ interface SalesforceAuthProviderInterface extends ServiceInterface, PluginFormIn
    *
    * NB: This method should also refresh any associated identity.
    *
-   * @param \OAuth\Common\Token\TokenInterface $token
+   * @param TokenInterface $token
    *   The token.
    *
-   * @return \OAuth\Common\Token\TokenInterface
+   * @return TokenInterface
    *   The refreshed token.
    *
-   * @throws \OAuth\OAuth2\Service\Exception\MissingRefreshTokenException
+   * @throws MissingRefreshTokenException
    *   Comment.
    */
   public function refreshAccessToken(TokenInterface $token);
@@ -54,13 +58,13 @@ interface SalesforceAuthProviderInterface extends ServiceInterface, PluginFormIn
   /**
    * Given a token, fetch the SF identity.
    *
-   * @param \OAuth\Common\Token\TokenInterface $token
+   * @param TokenInterface $token
    *   The token.
    *
-   * @return \Drupal\salesforce\Rest\SalesforceIdentityInterface
+   * @return SalesforceIdentityInterface
    *   The refreshed identity.
    *
-   * @throws \OAuth\OAuth2\Service\Exception\MissingRefreshTokenException
+   * @throws MissingRefreshTokenException
    *   Comment.
    */
   public function refreshIdentity(TokenInterface $token);
@@ -70,7 +74,7 @@ interface SalesforceAuthProviderInterface extends ServiceInterface, PluginFormIn
    *
    * Credentials contain consumer key, login url, secret, etc.
    *
-   * @return \Drupal\salesforce\Consumer\SalesforceCredentialsInterface
+   * @return SalesforceCredentialsInterface
    *   The credentials.
    */
   public function getCredentials();
@@ -81,17 +85,17 @@ interface SalesforceAuthProviderInterface extends ServiceInterface, PluginFormIn
    * @return \OAuth\OAuth2\Token\TokenInterface
    *   The Token.
    *
-   * @throws \OAuth\Common\Storage\Exception\TokenNotFoundException
+   * @throws TokenNotFoundException
    */
   public function getAccessToken();
 
   /**
    * Identify for this connection.
    *
-   * @return \Drupal\salesforce\Rest\SalesforceIdentityInterface
+   * @return SalesforceIdentityInterface
    *   Identity for this connection.
    *
-   * @throws \Drupal\salesforce\IdentityNotFoundException
+   * @throws IdentityNotFoundException
    *   If there is no identity.
    */
   public function getIdentity();
@@ -160,7 +164,7 @@ interface SalesforceAuthProviderInterface extends ServiceInterface, PluginFormIn
    * @return string
    *   Instance URL for this connection.
    *
-   * @throws \OAuth\Common\Storage\Exception\TokenNotFoundException
+   * @throws TokenNotFoundException
    */
   public function getInstanceUrl();
 
@@ -169,7 +173,7 @@ interface SalesforceAuthProviderInterface extends ServiceInterface, PluginFormIn
    *
    * @param array $form
    *   The configuration form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function save(array $form, FormStateInterface $form_state);
diff --git a/src/SalesforceAuthProviderPluginBase.php b/src/SalesforceAuthProviderPluginBase.php
index baf4ec60..7277edb8 100644
--- a/src/SalesforceAuthProviderPluginBase.php
+++ b/src/SalesforceAuthProviderPluginBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\salesforce;
 
+use Drupal\salesforce\Consumer\SalesforceCredentials;
+use OAuth\OAuth2\Service\Exception\InvalidScopeException;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Messenger\MessengerTrait;
@@ -27,7 +29,7 @@ abstract class SalesforceAuthProviderPluginBase extends Salesforce implements Sa
   /**
    * Credentials.
    *
-   * @var \Drupal\salesforce\Consumer\SalesforceCredentials
+   * @var SalesforceCredentials
    */
   protected $credentials;
 
@@ -41,7 +43,7 @@ abstract class SalesforceAuthProviderPluginBase extends Salesforce implements Sa
   /**
    * Token storage.
    *
-   * @var \Drupal\salesforce\Storage\SalesforceAuthTokenStorageInterface
+   * @var SalesforceAuthTokenStorageInterface
    */
   protected $storage;
 
@@ -75,12 +77,12 @@ abstract class SalesforceAuthProviderPluginBase extends Salesforce implements Sa
    *   Plugin id.
    * @param mixed $plugin_definition
    *   Plugin definition.
-   * @param \OAuth\Common\Http\Client\ClientInterface $httpClient
+   * @param ClientInterface $httpClient
    *   The oauth http client.
-   * @param \Drupal\salesforce\Storage\SalesforceAuthTokenStorageInterface $storage
+   * @param SalesforceAuthTokenStorageInterface $storage
    *   Auth token storage service.
    *
-   * @throws \OAuth\OAuth2\Service\Exception\InvalidScopeException
+   * @throws InvalidScopeException
    *   Comment.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ClientInterface $httpClient, SalesforceAuthTokenStorageInterface $storage) {
@@ -326,7 +328,7 @@ abstract class SalesforceAuthProviderPluginBase extends Salesforce implements Sa
   /**
    * Accessor to the storage adapter to be able to retrieve tokens.
    *
-   * @return \Drupal\salesforce\Storage\SalesforceAuthTokenStorageInterface
+   * @return SalesforceAuthTokenStorageInterface
    *   The token storage.
    */
   public function getStorage() {
diff --git a/src/SalesforceAuthProviderPluginManager.php b/src/SalesforceAuthProviderPluginManager.php
index 80771aa6..6a000df9 100644
--- a/src/SalesforceAuthProviderPluginManager.php
+++ b/src/SalesforceAuthProviderPluginManager.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\salesforce;
 
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Drupal\salesforce\Consumer\SalesforceCredentialsInterface;
+use OAuth\OAuth2\Token\TokenInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Plugin\DefaultPluginManager;
@@ -18,49 +24,49 @@ class SalesforceAuthProviderPluginManager extends DefaultPluginManager implement
   /**
    * Config from salesforce.settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $etm;
 
   /**
    * Salesforce Auth storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $authStorage;
 
   /**
    * Active auth config.
    *
-   * @var \Drupal\salesforce\Entity\SalesforceAuthConfig
+   * @var SalesforceAuthConfig
    */
   protected $authConfig;
 
   /**
    * Active auth provider.
    *
-   * @var \Drupal\salesforce\SalesforceAuthProviderInterface
+   * @var SalesforceAuthProviderInterface
    */
   protected $authProvider;
 
   /**
    * Active credentials.
    *
-   * @var \Drupal\salesforce\Consumer\SalesforceCredentialsInterface
+   * @var SalesforceCredentialsInterface
    */
   protected $authCredentials;
 
   /**
    * Active auth token.
    *
-   * @var \OAuth\OAuth2\Token\TokenInterface|null
+   * @var TokenInterface|null
    */
   protected $authToken;
 
@@ -70,11 +76,11 @@ class SalesforceAuthProviderPluginManager extends DefaultPluginManager implement
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $etm
+   * @param EntityTypeManagerInterface $etm
    *   Entity type manager service.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, EntityTypeManagerInterface $etm) {
@@ -87,11 +93,11 @@ class SalesforceAuthProviderPluginManager extends DefaultPluginManager implement
   /**
    * Wrapper for salesforce_auth storage service.
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @return ConfigEntityStorageInterface
    *   Storage for salesforce_auth.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function authStorage() {
     if (empty($this->authStorage)) {
@@ -193,7 +199,7 @@ class SalesforceAuthProviderPluginManager extends DefaultPluginManager implement
   /**
    * Wrapper for salesforce.settings config.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig
+   * @return ImmutableConfig
    *   Salesforce settings config.
    */
   protected function config() {
diff --git a/src/SalesforceAuthProviderPluginManagerInterface.php b/src/SalesforceAuthProviderPluginManagerInterface.php
index 49488660..127d6aae 100644
--- a/src/SalesforceAuthProviderPluginManagerInterface.php
+++ b/src/SalesforceAuthProviderPluginManagerInterface.php
@@ -2,6 +2,13 @@
 
 namespace Drupal\salesforce;
 
+use Drupal\salesforce\Entity\SalesforceAuthConfig;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\salesforce\Consumer\SalesforceCredentialsInterface;
+use OAuth\OAuth2\Token\TokenInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
+use OAuth\OAuth2\Service\Exception\MissingRefreshTokenException;
 use Drupal\Component\Plugin\Discovery\CachedDiscoveryInterface;
 use Drupal\Component\Plugin\FallbackPluginManagerInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
@@ -15,11 +22,11 @@ interface SalesforceAuthProviderPluginManagerInterface extends PluginManagerInte
   /**
    * All Salesforce auth providers.
    *
-   * @return \Drupal\salesforce\Entity\SalesforceAuthConfig[]
+   * @return SalesforceAuthConfig[]
    *   All auth provider plugins.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getProviders();
 
@@ -29,15 +36,15 @@ interface SalesforceAuthProviderPluginManagerInterface extends PluginManagerInte
    * @return bool
    *   TRUE if any auth providers are defined.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function hasProviders();
 
   /**
    * Get the active auth service provider, or null if it has not been assigned.
    *
-   * @return \Drupal\salesforce\Entity\SalesforceAuthConfig|null
+   * @return SalesforceAuthConfig|null
    *   The active service provider, or null if it has not been assigned.
    */
   public function getConfig();
@@ -45,7 +52,7 @@ interface SalesforceAuthProviderPluginManagerInterface extends PluginManagerInte
   /**
    * The auth provider plugin of the active service provider, or null.
    *
-   * @return \Drupal\salesforce\SalesforceAuthProviderInterface|null
+   * @return SalesforceAuthProviderInterface|null
    *   The auth provider plugin of the active service provider, or null.
    */
   public function getProvider();
@@ -53,7 +60,7 @@ interface SalesforceAuthProviderPluginManagerInterface extends PluginManagerInte
   /**
    * The credentials for the active auth provider plugin, or null.
    *
-   * @return \Drupal\salesforce\Consumer\SalesforceCredentialsInterface|null
+   * @return SalesforceCredentialsInterface|null
    *   The credentials for the active auth provider plugin, or null.
    */
   public function getCredentials();
@@ -61,7 +68,7 @@ interface SalesforceAuthProviderPluginManagerInterface extends PluginManagerInte
   /**
    * Get the active token, or null if it has not been assigned.
    *
-   * @return \OAuth\OAuth2\Token\TokenInterface|null
+   * @return TokenInterface|null
    *   The token of the plugin of the active config, or null.
    */
   public function getToken();
@@ -72,8 +79,8 @@ interface SalesforceAuthProviderPluginManagerInterface extends PluginManagerInte
    * @return \OAuth\Common\Token\TokenInterface
    *   The token.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \OAuth\OAuth2\Service\Exception\MissingRefreshTokenException
+   * @throws PluginException
+   * @throws MissingRefreshTokenException
    */
   public function refreshToken();
 
diff --git a/src/SelectQueryResult.php b/src/SelectQueryResult.php
index 95ffd48b..701a2c9f 100644
--- a/src/SelectQueryResult.php
+++ b/src/SelectQueryResult.php
@@ -60,7 +60,7 @@ class SelectQueryResult {
   /**
    * Convenience method a SelectQueryResult from a single SObject record.
    *
-   * @param \Drupal\salesforce\SObject $record
+   * @param SObject $record
    *   The record to be created.
    *
    * @return \Drupal\salesforce\SelectQueryResult
@@ -110,7 +110,7 @@ class SelectQueryResult {
   /**
    * The results.
    *
-   * @return \Drupal\salesforce\SObject[]
+   * @return SObject[]
    *   The result records.
    */
   public function records() {
@@ -120,10 +120,10 @@ class SelectQueryResult {
   /**
    * Fetch a particular record given its SFID.
    *
-   * @param \Drupal\salesforce\SFID $id
+   * @param SFID $id
    *   The SFID.
    *
-   * @return \Drupal\salesforce\SObject|false
+   * @return SObject|false
    *   The record, or FALSE if no record exists for given id.
    */
   public function record(SFID $id) {
diff --git a/src/Storage/SalesforceAuthTokenStorage.php b/src/Storage/SalesforceAuthTokenStorage.php
index 4936f97e..83046ed8 100644
--- a/src/Storage/SalesforceAuthTokenStorage.php
+++ b/src/Storage/SalesforceAuthTokenStorage.php
@@ -20,14 +20,14 @@ class SalesforceAuthTokenStorage implements SalesforceAuthTokenStorageInterface
   /**
    * State kv storage.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * SalesforceAuthTokenStorage constructor.
    *
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   State service.
    */
   public function __construct(StateInterface $state) {
diff --git a/src/Storage/SalesforceAuthTokenStorageInterface.php b/src/Storage/SalesforceAuthTokenStorageInterface.php
index be95bf74..5101eb0e 100644
--- a/src/Storage/SalesforceAuthTokenStorageInterface.php
+++ b/src/Storage/SalesforceAuthTokenStorageInterface.php
@@ -30,7 +30,7 @@ interface SalesforceAuthTokenStorageInterface extends TokenStorageInterface {
   /**
    * Identity for the given service.
    *
-   * @return \Drupal\salesforce\Rest\SalesforceIdentityInterface
+   * @return SalesforceIdentityInterface
    *   Identity.
    */
   public function retrieveIdentity($service);
diff --git a/src/Tests/TestHttpClientFactory.php b/src/Tests/TestHttpClientFactory.php
index 0604e130..8cf2d5ef 100644
--- a/src/Tests/TestHttpClientFactory.php
+++ b/src/Tests/TestHttpClientFactory.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\salesforce\Tests;
 
+use GuzzleHttp\Client;
+use function GuzzleHttp\default_user_agent;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Site\Settings;
 use Drupal\Core\Http\ClientFactory;
@@ -17,7 +19,7 @@ class TestHttpClientFactory extends ClientFactory {
    * @param array $config
    *   The config for the client.
    *
-   * @return \GuzzleHttp\Client
+   * @return Client
    *   The HTTP client.
    */
   public function fromOptions(array $config = []) {
@@ -31,7 +33,7 @@ class TestHttpClientFactory extends ClientFactory {
       'verify' => TRUE,
       'timeout' => 30,
       'headers' => [
-        'User-Agent' => 'Drupal/' . \Drupal::VERSION . ' (+https://www.drupal.org/) ' . \GuzzleHttp\default_user_agent(),
+        'User-Agent' => 'Drupal/' . \Drupal::VERSION . ' (+https://www.drupal.org/) ' . default_user_agent(),
       ],
       'handler' => $this->stack,
       // Security consideration: prevent Guzzle from using environment variables
diff --git a/src/Tests/TestHttpClientWrapper.php b/src/Tests/TestHttpClientWrapper.php
index 0d07746f..cc087dd9 100644
--- a/src/Tests/TestHttpClientWrapper.php
+++ b/src/Tests/TestHttpClientWrapper.php
@@ -39,7 +39,7 @@ class TestHttpClientWrapper implements ClientInterface {
   ) {
     // This method is only used to Salesforce OAuth. Based on the given args,
     // return a hard-coded version of the expected response.
-    $dir = drupal_get_path('module', 'salesforce') . '/src/Tests/';
+    $dir = \Drupal::service('extension.list.module')->getPath('salesforce') . '/src/Tests/';
     if ($endpoint->getPath() == '/services/oauth2/token') {
       switch ($requestBody['grant_type']) {
         case 'authorization_code':
diff --git a/src/Tests/TestRestClient.php b/src/Tests/TestRestClient.php
index 94ece12f..b9b32fed 100644
--- a/src/Tests/TestRestClient.php
+++ b/src/Tests/TestRestClient.php
@@ -87,7 +87,7 @@ class TestRestClient extends RestClient {
   /**
    * Helper callback for OAuth handshake, and refreshToken()
    *
-   * @param \GuzzleHttp\Psr7\Response $response
+   * @param Response $response
    *   Response object from refreshToken or authToken endpoints.
    *
    * @see SalesforceController::oauthCallback()
diff --git a/tests/src/Functional/StatusPageTest.php b/tests/src/Functional/StatusPageTest.php
index 4083fb3f..a72af5bc 100644
--- a/tests/src/Functional/StatusPageTest.php
+++ b/tests/src/Functional/StatusPageTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\salesforce\Functional;
 
+use Drupal\salesforce\Tests\TestSalesforceAuthProviderPluginManager;
+use OAuth\OAuth2\Token\TokenInterface;
+use Drupal\salesforce\SalesforceAuthProviderInterface;
+use Drupal\salesforce\Entity\SalesforceAuthConfig;
 use Drupal\Core\Url;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Tests\BrowserTestBase;
@@ -32,28 +36,28 @@ class StatusPageTest extends BrowserTestBase {
   /**
    * Auth provider manager service.
    *
-   * @var \Drupal\salesforce\Tests\TestSalesforceAuthProviderPluginManager
+   * @var TestSalesforceAuthProviderPluginManager
    */
   protected $authMan;
 
   /**
    * Token service.
    *
-   * @var \OAuth\OAuth2\Token\TokenInterface
+   * @var TokenInterface
    */
   protected $authToken;
 
   /**
    * Auth provider.
    *
-   * @var \Drupal\salesforce\SalesforceAuthProviderInterface
+   * @var SalesforceAuthProviderInterface
    */
   protected $authProvider;
 
   /**
    * Auth config.
    *
-   * @var \Drupal\salesforce\Entity\SalesforceAuthConfig
+   * @var SalesforceAuthConfig
    */
   protected $authConfig;
 
@@ -123,6 +127,7 @@ class StatusPageTest extends BrowserTestBase {
 
   /**
    * Need to do.
+   * @doesNotPerformAssertions
    */
   public function testTlsRequirements() {
     // @TODO write me.
@@ -130,6 +135,7 @@ class StatusPageTest extends BrowserTestBase {
 
   /**
    * Need to do.
+   * @doesNotPerformAssertions
    */
   public function testUsageRequirements() {
     // @TODO write me.
diff --git a/tests/src/Unit/RestClientTest.php b/tests/src/Unit/RestClientTest.php
index 2eff70c3..8d518d39 100644
--- a/tests/src/Unit/RestClientTest.php
+++ b/tests/src/Unit/RestClientTest.php
@@ -48,34 +48,24 @@ class RestClientTest extends UnitTestCase {
       'httpRequest',
     ];
 
-    $this->httpClient = $this->getMockBuilder(Client::CLASS)->getMock();
+    $this->httpClient = $this->createMock(Client::CLASS);
     $this->configFactory =
-      $this->getMockBuilder(ConfigFactory::CLASS)
-        ->disableOriginalConstructor()
-        ->getMock();
+      $this->createMock(ConfigFactory::CLASS);
     $this->state =
-      $this->getMockBuilder(State::CLASS)
-        ->disableOriginalConstructor()
-        ->getMock();
-    $this->cache = $this->getMockBuilder(CacheBackendInterface::CLASS)->getMock();
-    $this->json = $this->getMockBuilder(Json::CLASS)->getMock();
-    $this->time = $this->getMockBuilder(TimeInterface::CLASS)->getMock();
-    $this->authToken = $this->getMockBuilder(TokenInterface::CLASS)->getMock();
-    $this->authProvider = $this->getMockBuilder(SalesforceAuthProviderInterface::CLASS)
-      ->disableOriginalConstructor()
-      ->getMock();
+      $this->createMock(State::CLASS);
+    $this->cache = $this->createMock(CacheBackendInterface::CLASS);
+    $this->json = $this->createMock(Json::CLASS);
+    $this->time = $this->createMock(TimeInterface::CLASS);
+    $this->authToken = $this->createMock(TokenInterface::CLASS);
+    $this->authProvider = $this->createMock(SalesforceAuthProviderInterface::CLASS);
     $this->authProvider->expects($this->any())
       ->method('getApiEndpoint')
       ->willReturn('https://example.com');
     $this->authConfig =
-      $this->getMockBuilder(SalesforceAuthConfig::CLASS)
-        ->disableOriginalConstructor()
-        ->getMock();
+      $this->createMock(SalesforceAuthConfig::CLASS);
 
     $this->authMan =
-      $this->getMockBuilder(SalesforceAuthProviderPluginManager::CLASS)
-        ->disableOriginalConstructor()
-        ->getMock();
+      $this->createMock(SalesforceAuthProviderPluginManager::CLASS);
     $this->authMan->expects($this->any())
       ->method('getToken')
       ->willReturn($this->authToken);
