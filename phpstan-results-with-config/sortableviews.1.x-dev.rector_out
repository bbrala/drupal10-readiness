modules/contrib/sortableviews/sortableviews.module
modules/contrib/sortableviews/src/Access/SortableviewsAccess.php
modules/contrib/sortableviews/src/Controller/AjaxController.php
modules/contrib/sortableviews/src/Plugin/views/area/SaveSortableViewsChanges.php
modules/contrib/sortableviews/src/Plugin/views/field/SortableViewsHandle.php
modules/contrib/sortableviews/src/Plugin/views/style/SortableDefault.php
modules/contrib/sortableviews/src/Plugin/views/style/SortableHtmlList.php
modules/contrib/sortableviews/src/Plugin/views/style/SortableTable.php
modules/contrib/sortableviews/src/SortableViewsStyleTrait.php
modules/contrib/sortableviews/tests/src/Functional/SortableviewsTest.php
modules/contrib/sortableviews/tests/src/Unit/Access/SortableviewsAccessTest.php
modules/contrib/sortableviews/tests/src/Unit/Controller/AjaxControllerTest.php

6 files with changes
====================

1) modules/contrib/sortableviews/tests/src/Unit/Controller/AjaxControllerTest.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The instance of AjaxController to be tested.
    *
-   * @var \Drupal\sortableviews\Controller\AjaxController
+   * @var AjaxController
    */
   protected $ajaxController;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->initializeContainer();

     $entity_storage = $this->createMock('Drupal\Core\Entity\EntityStorageInterface');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/sortableviews/tests/src/Unit/Access/SortableviewsAccessTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\sortableviews\Unit\Access;

+use Drupal\Core\Session\AccountInterface;
 use Drupal\sortableviews\Access\SortableviewsAccess;
 use Drupal\Tests\UnitTestCase;
 use Drupal\Core\Access\AccessResultAllowed;
@@ @@
   /**
    * The instance of SortableviewsAccess to be tested.
    *
-   * @var \Drupal\sortableviews\Access\SortableviewsAccess
+   * @var SortableviewsAccess
    */
   protected $sortableViewsAccess;

@@ @@
   /**
    * An object mocked from AccountInterface.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
-    $view_style = $this->getMockBuilder('Drupal\views\Plugin\views\style\StylePluginBase')
-      ->disableOriginalConstructor()
-      ->getMock();
+  protected function setUp(): void {
+    $view_style = $this->createMock('Drupal\views\Plugin\views\style\StylePluginBase');
     $view_style->options['weight_field'] = 'some_field';

     $entity_type = $this->createMock('Drupal\Component\Plugin\Definition\PluginDefinitionInterface');
@@ @@
       ->method('id')
       ->willReturn('some_entity');

-    $view_executable = $this->getMockBuilder('Drupal\views\ViewExecutable')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $view_executable = $this->createMock('Drupal\views\ViewExecutable');
     $view_executable->expects($this->any())
       ->method('getBaseEntityType')
       ->willReturn($entity_type);
@@ @@

     $view_entity = $this->createMock('Drupal\views\ViewEntityInterface');

-    $executable_factory = $this->getMockBuilder('Drupal\views\ViewExecutableFactory')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $executable_factory = $this->createMock('Drupal\views\ViewExecutableFactory');
     $executable_factory->expects($this->any())
       ->method('get')
       ->with($view_entity)
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/sortableviews/tests/src/Functional/SortableviewsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\sortableviews\Functional;

+use Drupal\Core\Session\AccountInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
    *
    * @see https://www.drupal.org/node/3083055
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $defaultTheme = 'stark';

@@ @@
   /**
    * The privileged user performing the actions.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $user;

@@ @@
   /**
    * Required modules.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   public static $modules = [
     'node',
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser([
       'access content',
@@ @@
   public function testElements($path) {
     $this->drupalLogin($this->user);
     $this->drupalGet($path);
-    $this->assertElementPresent('.sortableviews-handle');
-    $this->assertElementPresent('.sortableviews-save-changes');
+    $this->assertSession()->elementExists('.sortableviews-handle');
+    $this->assertSession()->elementExists('.sortableviews-save-changes');
     $this->drupalLogout();
   }
    ----------- end diff -----------

Applied rules:
 * AssertElementPresentRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/sortableviews/src/SortableViewsStyleTrait.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * An instance of the entity manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityManager;

@@ @@
   /**
    * An URL generator service instance.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;

@@ @@
   /**
    * An instance of the Entity Field Manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager service.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   The URL generator service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The Entity Field Manager service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_manager, UrlGeneratorInterface $url_generator, EntityFieldManagerInterface $entity_field_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/sortableviews/src/Controller/AjaxController.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * An instance of the entity manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityManager;

@@ @@
   /**
    * Builds a new AjaxController object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager) {
@@ @@
   /**
    * Returns the entity order adjusted for the view pager.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request object.
    *
    * @return array
@@ @@
   /**
    * Saves new weights.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request object.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   An response with Ajax commands.
    */
   public function ajaxSave(Request $request) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/sortableviews/src/Access/SortableviewsAccess.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sortableviews\Access;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
@@ @@
   /**
    * An instance of the entity manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityManager;

@@ @@
   /**
    * An instance of ViewExecutableFactory.
    *
-   * @var \Drupal\views\ViewExecutableFactory
+   * @var ViewExecutableFactory
    */
   protected $viewsExecutableFactory;

@@ @@
   /**
    * Builds a new SortableViewsAccess object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager service.
-   * @param \Drupal\views\ViewExecutableFactory $views_executable_factory
+   * @param ViewExecutableFactory $views_executable_factory
    *   An instantiated ViewExecutableFactory object.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager, ViewExecutableFactory $views_executable_factory) {
@@ @@
   /**
    * Checks logged in user has access to ajax path.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(Request $request, AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 6 files have been changed by Rector                                       

