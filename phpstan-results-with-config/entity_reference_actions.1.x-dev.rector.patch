diff --git a/entity_reference_actions.install b/entity_reference_actions.install
index b255cd7..0dd896a 100644
--- a/entity_reference_actions.install
+++ b/entity_reference_actions.install
@@ -11,7 +11,7 @@
 function entity_reference_actions_requirements($phase) {
 
   $requirements = [];
-  $content = file_get_contents(DRUPAL_ROOT . '/' . drupal_get_path('module', 'field') . "/field.api.php");
+  $content = file_get_contents(DRUPAL_ROOT . '/' . \Drupal::service('extension.list.module')->getPath('field') . "/field.api.php");
   if (strpos($content, 'hook_field_widget_complete_form_alter') == FALSE) {
     $requirements['entity_reference_actions'] = [
       'title' => t('Entity Reference Actions'),
diff --git a/entity_reference_actions.module b/entity_reference_actions.module
index 911a213..ffe5584 100644
--- a/entity_reference_actions.module
+++ b/entity_reference_actions.module
@@ -17,14 +17,14 @@ use Drupal\entity_reference_actions\EntityReferenceActionsHandler;
  * Implements hook_field_widget_complete_form_alter().
  */
 function entity_reference_actions_field_widget_complete_form_alter(&$element, FormStateInterface $form_state, $context) {
-  /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */
+  /** @var FieldDefinitionInterface $field_definition */
   $field_definition = $context['items']->getFieldDefinition();
 
   if (is_a($field_definition->getClass(), EntityReferenceFieldItemListInterface::class, TRUE)) {
     $handler = \Drupal::classResolver(EntityReferenceActionsHandler::class);
     $entity_type = $field_definition->getSettings()['target_type'];
 
-    /** @var \Drupal\Core\Field\WidgetInterface $widget */
+    /** @var WidgetInterface $widget */
     $widget = $context['widget'];
 
     $handler->init($entity_type, $widget->getThirdPartySettings('entity_reference_actions'));
@@ -51,7 +51,7 @@ function entity_reference_actions_field_widget_third_party_settings_form(WidgetI
  * Implements hook_field_widget_settings_summary_alter().
  */
 function entity_reference_actions_field_widget_settings_summary_alter(&$summary, $context) {
-  /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */
+  /** @var FieldDefinitionInterface $field_definition */
   $field_definition = $context['field_definition'];
 
   if (is_a($field_definition->getClass(), EntityReferenceFieldItemListInterface::class, TRUE)) {
diff --git a/src/EntityReferenceActionsHandler.php b/src/EntityReferenceActionsHandler.php
index e7e9f64..0804ad6 100644
--- a/src/EntityReferenceActionsHandler.php
+++ b/src/EntityReferenceActionsHandler.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\entity_reference_actions;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\CloseModalDialogCommand;
@@ -38,35 +41,35 @@ class EntityReferenceActionsHandler implements ContainerInjectionInterface {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The HTTP kernel service.
    *
-   * @var \Symfony\Component\HttpKernel\HttpKernelInterface
+   * @var HttpKernelInterface
    */
   protected $httpKernel;
 
   /**
    * All available options for this entity_type.
    *
-   * @var \Drupal\system\ActionConfigEntityInterface[]
+   * @var ActionConfigEntityInterface[]
    */
   protected $actions = [];
 
@@ -87,13 +90,13 @@ class EntityReferenceActionsHandler implements ContainerInjectionInterface {
   /**
    * EntityReferenceActionsHandler constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
-   * @param \Symfony\Component\HttpKernel\HttpKernelInterface $httpKernel
+   * @param HttpKernelInterface $httpKernel
    *   The HTTP kernel service.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, AccountProxyInterface $currentUser, RequestStack $requestStack, HttpKernelInterface $httpKernel) {
@@ -118,8 +121,8 @@ class EntityReferenceActionsHandler implements ContainerInjectionInterface {
    * @param mixed[] $settings
    *   Third party settings.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function init($entity_type_id, array $settings) {
     $this->entityTypeId = $entity_type_id;
@@ -146,7 +149,7 @@ class EntityReferenceActionsHandler implements ContainerInjectionInterface {
    *
    * @param array $element
    *   The element with the attached action form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param array $context
    *   The context of this form.
@@ -155,7 +158,7 @@ class EntityReferenceActionsHandler implements ContainerInjectionInterface {
     if (!$this->settings['enabled']) {
       return;
     }
-    /** @var \Drupal\Core\Field\FieldItemListInterface $items */
+    /** @var FieldItemListInterface $items */
     $items = $context['items'];
     $field_definition = $items->getFieldDefinition();
 
@@ -202,11 +205,11 @@ class EntityReferenceActionsHandler implements ContainerInjectionInterface {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
 
@@ -256,7 +259,7 @@ class EntityReferenceActionsHandler implements ContainerInjectionInterface {
           $sub_request->setSession($request->getSession());
         }
 
-        /** @var \Drupal\Core\Ajax\AjaxResponse $response */
+        /** @var AjaxResponse $response */
         $response = $this->httpKernel->handle($sub_request, HttpKernelInterface::SUB_REQUEST);
 
         // We have to clear the response data, otherwise the new commands will
@@ -303,7 +306,7 @@ class EntityReferenceActionsHandler implements ContainerInjectionInterface {
   /**
    * The batch finish callback.
    *
-   * @throws \Drupal\Core\Form\EnforcedResponseException
+   * @throws EnforcedResponseException
    */
   public static function batchFinish() {
     $batch = &batch_get();
@@ -342,13 +345,13 @@ class EntityReferenceActionsHandler implements ContainerInjectionInterface {
    * @param string $action_id
    *   The action ID.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public static function batchCallback($entity_id, $entity_type_id, $action_id) {
     $entity_type_manager = \Drupal::entityTypeManager();
 
-    /** @var \Drupal\system\ActionConfigEntityInterface $action */
+    /** @var ActionConfigEntityInterface $action */
     $action = $entity_type_manager->getStorage('action')->load($action_id);
 
     $entity = $entity_type_manager->getStorage($entity_type_id)->load($entity_id);
@@ -361,7 +364,7 @@ class EntityReferenceActionsHandler implements ContainerInjectionInterface {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    * @param string $field_name
    *   The field name.
@@ -423,7 +426,7 @@ class EntityReferenceActionsHandler implements ContainerInjectionInterface {
   protected function getBulkOptions($filtered = TRUE) {
     $options = [];
     // Filter the action list.
-    /** @var \Drupal\system\ActionConfigEntityInterface $action */
+    /** @var ActionConfigEntityInterface $action */
     foreach ($this->actions as $id => $action) {
       if ($filtered) {
         $in_selected = in_array($id, array_filter($this->settings['options']['selected_actions']));
@@ -447,13 +450,13 @@ class EntityReferenceActionsHandler implements ContainerInjectionInterface {
   /**
    * Returns the label for an action.
    *
-   * @param \Drupal\system\ActionConfigEntityInterface $action
+   * @param ActionConfigEntityInterface $action
    *   The action.
    *
    * @return string
    *   The action label.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   protected function getActionLabel(ActionConfigEntityInterface $action) {
     $entity_type = $this->entityTypeManager->getDefinition($this->entityTypeId);
@@ -470,10 +473,10 @@ class EntityReferenceActionsHandler implements ContainerInjectionInterface {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   An AJAX response that display validation error messages or represents a
    *   successful submission.
    */
@@ -503,7 +506,7 @@ class EntityReferenceActionsHandler implements ContainerInjectionInterface {
    *   The context of this form.
    */
   protected function getVisibleStateConditions(array $element, array $context) {
-    /** @var \Drupal\Core\Field\FieldItemListInterface $items */
+    /** @var FieldItemListInterface $items */
     $items = $context['items'];
 
     $parents = $element['widget']['#parents'];
