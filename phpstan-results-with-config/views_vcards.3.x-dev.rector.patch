diff --git a/src/Plugin/views/display/ViewsVcardsDisplayPluginVcard.php b/src/Plugin/views/display/ViewsVcardsDisplayPluginVcard.php
index d53a236..a6d0512 100644
--- a/src/Plugin/views/display/ViewsVcardsDisplayPluginVcard.php
+++ b/src/Plugin/views/display/ViewsVcardsDisplayPluginVcard.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\views_vcards\Plugin\views\display;
 
+use Drupal\Component\Transliteration\TransliterationInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\RendererInterface;
 use Drupal\Core\Routing\RouteProviderInterface;
@@ -66,11 +67,11 @@ class ViewsVcardsDisplayPluginVcard extends PathPluginBase implements ResponseDi
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state key value store.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, RouteProviderInterface $route_provider, StateInterface $state, RendererInterface $renderer) {
@@ -128,10 +129,10 @@ class ViewsVcardsDisplayPluginVcard extends PathPluginBase implements ResponseDi
   /**
    * Builds a stream response of a multi vCard zip file.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The view to convert to a response.
    *
-   * @return \Symfony\Component\HttpFoundation\StreamedResponse
+   * @return StreamedResponse
    *   The streamed response.
    */
   private static function buildZippedItemResponse(ViewExecutable $view) {
@@ -152,10 +153,10 @@ class ViewsVcardsDisplayPluginVcard extends PathPluginBase implements ResponseDi
     // Set the response callback function.
     $response->setCallback(function () use ($view) {
 
-      /** @var \Drupal\Core\Render\RendererInterface $drupal_renderer */
+      /** @var RendererInterface $drupal_renderer */
       $drupal_renderer = \Drupal::service('renderer');
       $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
-      /** @var \Drupal\Component\Transliteration\TransliterationInterface $transliteration */
+      /** @var TransliterationInterface $transliteration */
       $transliteration = \Drupal::service('transliteration');
       $phpzip = new ZipStream();
 
@@ -188,17 +189,17 @@ class ViewsVcardsDisplayPluginVcard extends PathPluginBase implements ResponseDi
   /**
    * Builds a cacheable response of a vCard file.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The view to convert to a response.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The response.
    */
   private static function buildSingleItemResponse(ViewExecutable $view) {
-    /** @var \Drupal\Core\Render\RendererInterface $drupal_renderer */
+    /** @var RendererInterface $drupal_renderer */
     $drupal_renderer = \Drupal::service('renderer');
     $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
-    /** @var \Drupal\Component\Transliteration\TransliterationInterface $transliteration */
+    /** @var TransliterationInterface $transliteration */
     $transliteration = \Drupal::service('transliteration');
 
     // This should be only one.
diff --git a/src/Plugin/views/row/ViewsVcardsRowPluginVcard.php b/src/Plugin/views/row/ViewsVcardsRowPluginVcard.php
index e0142ca..280f826 100644
--- a/src/Plugin/views/row/ViewsVcardsRowPluginVcard.php
+++ b/src/Plugin/views/row/ViewsVcardsRowPluginVcard.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\views_vcards\Plugin\views\row;
 
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\views\Plugin\views\row\RowPluginBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\image\Entity\ImageStyle;
@@ -472,7 +473,7 @@ class ViewsVcardsRowPluginVcard extends RowPluginBase {
    * @param string $field_id
    *   The ID assigned to the required field in the display.
    *
-   * @return string|null|\Drupal\Component\Render\MarkupInterface
+   * @return string|null|MarkupInterface
    *   An empty string if there is no style plugin, or the field ID is empty.
    *   NULL if the field value is empty. If neither of these conditions apply,
    *   a MarkupInterface object containing the rendered field value.
diff --git a/tests/src/Functional/Plugin/ViewsVcardsDisplayPluginVcardTest.php b/tests/src/Functional/Plugin/ViewsVcardsDisplayPluginVcardTest.php
index 646b98c..f30c432 100644
--- a/tests/src/Functional/Plugin/ViewsVcardsDisplayPluginVcardTest.php
+++ b/tests/src/Functional/Plugin/ViewsVcardsDisplayPluginVcardTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\views_vcards\Functional\Plugin;
 
+use Drupal\Component\Transliteration\TransliterationInterface;
+use Drupal\Core\File\FileSystemInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\Tests\views\Functional\ViewTestBase;
@@ -116,7 +118,7 @@ class ViewsVcardsDisplayPluginVcardTest extends ViewTestBase {
    */
   public function testSingleVcardOutput() {
     $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
-    /** @var \Drupal\Component\Transliteration\TransliterationInterface $transliteration */
+    /** @var TransliterationInterface $transliteration */
     $transliteration = \Drupal::service('transliteration');
 
     // Pick a random name from the list and create the account.
@@ -220,7 +222,7 @@ class ViewsVcardsDisplayPluginVcardTest extends ViewTestBase {
     }
 
     $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
-    /** @var \Drupal\Component\Transliteration\TransliterationInterface $transliteration */
+    /** @var TransliterationInterface $transliteration */
     $transliteration = \Drupal::service('transliteration');
 
     // Get the executable view.
@@ -244,7 +246,7 @@ class ViewsVcardsDisplayPluginVcardTest extends ViewTestBase {
     $zip_content = ob_get_clean();
 
     // Save the zip as a temporary file and check its contents.
-    /** @var \Drupal\Core\File\FileSystemInterface $file_system */
+    /** @var FileSystemInterface $file_system */
     $file_system = \Drupal::service('file_system');
     $local_path = $file_system->saveData($zip_content, 'temporary://');
     // ZipArchive is incompatible with stream wrappers, so resolve local path.
