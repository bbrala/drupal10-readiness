modules/contrib/webform_jira/src/Access/WebformJiraAccess.php
modules/contrib/webform_jira/src/Form/WebformJiraConfigurationForm.php
modules/contrib/webform_jira/src/Form/WebformJiraFieldDeleteForm.php
modules/contrib/webform_jira/src/Form/WebformJiraFieldEditForm.php
modules/contrib/webform_jira/src/Form/WebformJiraFieldForm.php
modules/contrib/webform_jira/src/WebformJiraService.php
modules/contrib/webform_jira/webform_jira.module

6 files with changes
====================

1) modules/contrib/webform_jira/webform_jira.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\webform\WebformInterface;
+use Drupal\webform_jira\WebformJiraService;
+use JiraRestApi\Issue\Issue;
 use Drupal\webform_jira\Form\WebformJiraConfigurationForm;
 use Drupal\webform_jira\Form\WebformJiraFieldForm;
 use Drupal\webform_jira\Form\WebformJiraFieldEditForm;
@@ @@
 /**
  * Implements hook_ENTITY_TYPE_presave()
  *
- * @param \Drupal\webform\WebformSubmissionInterface $webform_submission
+ * @param WebformSubmissionInterface $webform_submission
  */
 function webform_jira_webform_submission_presave(WebformSubmissionInterface $webform_submission) {
-  /** @var \Drupal\webform\WebformInterface $webform */
+  /** @var WebformInterface $webform */
   $webform = $webform_submission->getWebform();
   if ($webform->getThirdPartySetting('webform_jira', 'status')) {
-    /** @var \Drupal\webform_jira\WebformJiraService $webform_jira_service */
+    /** @var WebformJiraService $webform_jira_service */
     $webform_jira_service = Drupal::service('webform_jira.jira_service');
-    /** @var \JiraRestApi\Issue\Issue $issue */
+    /** @var Issue $issue */
     $issue = $webform_jira_service->createJiraIssueBySubmission($webform_submission);
     $webform = $webform_submission->getWebform();
     if ($issue && $webform->getThirdPartySetting('webform_jira', 'save_issue_key')) {
@@ @@
       );
     }
   }
-}
+}
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/webform_jira/src/WebformJiraService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\webform_jira;

+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\webform\Plugin\WebformElementAttachmentInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\jira_rest\JiraRestWrapperService;
@@ @@
   use StringTranslationTrait;

   /**
-   * @var \Drupal\jira_rest\JiraRestWrapperService
+   * @var JiraRestWrapperService
    */
   protected $jiraService;

   /**
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $loggerWebformJira;

   /**
-   * @var \Drupal\webform\WebformTokenManagerInterface
+   * @var WebformTokenManagerInterface
    */
   protected $webformTokenManager;

   /**
-   * @var \Drupal\webform\Plugin\WebformElementManagerInterface
+   * @var WebformElementManagerInterface
    */
   protected $webformElementManager;

@@ @@
   /**
    * WebformJiraService constructor.
    *
-   * @param \Drupal\jira_rest\JiraRestWrapperService $jira_service
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
-   * @param \Drupal\webform\WebformTokenManagerInterface $webform_token_manager
+   * @param JiraRestWrapperService $jira_service
+   * @param LoggerChannelFactoryInterface $logger_factory
+   * @param WebformTokenManagerInterface $webform_token_manager
    */
   public function __construct(JiraRestWrapperService $jira_service, LoggerChannelFactoryInterface $logger_factory, WebformTokenManagerInterface $webform_token_manager, WebformElementManagerInterface $webform_element_manager) {
     $this->loggerWebformJira = $logger_factory->get('webform_jira');
@@ @@
   }

   /**
-   * @param \Drupal\webform\WebformSubmissionInterface $webform_submission
+   * @param WebformSubmissionInterface $webform_submission
    *
-   * @return \JiraRestApi\Issue\Issue|null
+   * @return Issue|null
    */
   public function createJiraIssueBySubmission(WebformSubmissionInterface $webform_submission) {
     $webform = $webform_submission->getWebform();
@@ @@
   }

   /**
-   * @param \JiraRestApi\Issue\IssueField $issue_field
+   * @param IssueField $issue_field
    * @param array $fields
-   * @param \Drupal\webform\WebformSubmissionInterface $webform_submission
+   * @param WebformSubmissionInterface $webform_submission
    *
-   * @return \JiraRestApi\Issue\IssueField
+   * @return IssueField
    * @throws \Exception
    */
   protected function setPrimaryFieldsToIssueField(IssueField $issue_field, array $fields, WebformSubmissionInterface $webform_submission) {
@@ @@
   }

   /**
-   * @param \JiraRestApi\Issue\IssueField $issue_field
+   * @param IssueField $issue_field
    * @param array $jira_fields
-   * @param \Drupal\webform\WebformSubmissionInterface $webform_submission
+   * @param WebformSubmissionInterface $webform_submission
    *
-   * @return \JiraRestApi\Issue\IssueField
+   * @return IssueField
    * @throws \Exception
    */
   protected function setCustomFieldsToIssueField(IssueField $issue_field, array $jira_fields, WebformSubmissionInterface $webform_submission) {
@@ @@

   /**
    * @param $field
-   * @param \Drupal\webform\WebformSubmissionInterface $webform_submission
+   * @param WebformSubmissionInterface $webform_submission
    *
    * @return array|null|string
    * @throws \Exception
@@ @@

   /**
    * @param $field
-   * @param \Drupal\webform\WebformSubmissionInterface $webform_submission
+   * @param WebformSubmissionInterface $webform_submission
    *
    * @return array|null|string
    */
@@ @@
   }

   /**
-   * @param \JiraRestApi\Issue\Issue $issue
-   * @param \Drupal\webform\WebformSubmissionInterface $webform_submission
+   * @param Issue $issue
+   * @param WebformSubmissionInterface $webform_submission
    *
-   * @throws \JiraRestApi\JiraException
+   * @throws JiraException
    * @throws \JsonMapper_Exception
    */
   protected function addAttachments(Issue $issue, WebformSubmissionInterface $webform_submission) {
@@ @@
     $attachments = [];
     foreach ($attachment_webform_elements as $attachment_webform_element) {
       $element = $webform->getElement($attachment_webform_element);
-      /** @var \Drupal\webform\Plugin\WebformElementAttachmentInterface $element_plugin */
+      /** @var WebformElementAttachmentInterface $element_plugin */
       $element_plugin = $this->webformElementManager->getElementInstance($element);
       $attachments = array_merge($attachments, $element_plugin->getAttachments($element, $webform_submission));
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/webform_jira/src/Form/WebformJiraFieldForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\webform_jira\Form;

+use Drupal\webform\WebformInterface;
 use Drupal\Component\Utility\Unicode;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Url;
@@ @@
   use WebformDialogFormTrait;

   /**
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

   /**
-   * @var \Drupal\webform\WebformTokenManagerInterface
+   * @var WebformTokenManagerInterface
    */
   protected $webformTokenManager;

@@ @@
   /**
    * WebformJiraFieldForm constructor.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
-   * @param \Drupal\webform\WebformTokenManagerInterface $webform_token_manager
+   * @param MessengerInterface $messenger
+   * @param WebformTokenManagerInterface $webform_token_manager
    */
   public function __construct(MessengerInterface $messenger, WebformTokenManagerInterface $webform_token_manager) {
     $this->messenger = $messenger;
@@ @@
    */
   public function save(array $form, FormStateInterface $form_state) {

-    /** @var \Drupal\webform\WebformInterface $webform */
+    /** @var WebformInterface $webform */
     $webform = $this->getEntity();

     $fields = $this->processField($form_state) + $this->getFields();
@@ @@
    */
   protected function getWebformElementOptions() {
     $element_options = [];
-    /** @var \Drupal\webform\WebformInterface $webform */
+    /** @var WebformInterface $webform */
     $webform = $this->getEntity();
     $decoded_elements = $webform->getElementsDecodedAndFlattened();
     if ($decoded_elements) {
@@ @@
    * @return array
    */
   protected function getFields() {
-    /** @var \Drupal\webform\WebformInterface $webform */
+    /** @var WebformInterface $webform */
     $webform = $this->getEntity();
     return (array) WebformYaml::decode($webform->getThirdPartySetting(
       'webform_jira',
@@ @@
   }

   /**
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return array
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/webform_jira/src/Form/WebformJiraFieldDeleteForm.php:16

    ---------- begin diff ----------
@@ @@
 class WebformJiraFieldDeleteForm extends WebformDeleteFormBase {

   /**
-   * @var \Drupal\webform\WebformInterface
+   * @var WebformInterface
    */
   protected $webform;

@@ @@
    * @return array
    */
   protected function getFields() {
-    /** @var \Drupal\webform\WebformInterface $webform */
+    /** @var WebformInterface $webform */
     $webform = $this->webform;
     return (array) WebformYaml::decode($webform->getThirdPartySetting(
       'webform_jira',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/webform_jira/src/Form/WebformJiraConfigurationForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\webform_jira\Form;

+use Drupal\webform\WebformInterface;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Entity\BundleEntityFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\webform\WebformInterface $webform */
+    /** @var WebformInterface $webform */
     $webform = $this->getEntity();

     $form['jira_configuration'] = [
@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\webform\WebformInterface $webform */
+    /** @var WebformInterface $webform */
     $webform = $this->getEntity();

     $webform->setThirdPartySetting(
@@ @@
    *   The header elements.
    */
   protected function getTableRows() {
-    /** @var \Drupal\webform\WebformInterface $webform */
+    /** @var WebformInterface $webform */
     $webform = $this->getEntity();
     $fields = (array) WebformYaml::decode($webform->getThirdPartySetting(
       'webform_jira',
@@ @@
    */
   protected function getWebformElementOptions() {
     $element_options = [];
-    /** @var \Drupal\webform\WebformInterface $webform */
+    /** @var WebformInterface $webform */
     $webform = $this->getEntity();
     $decoded_elements = $webform->getElementsDecodedAndFlattened();
     if ($decoded_elements) {
@@ @@
    * @return array
    */
   protected function getWebformElementsManagedFiles() {
-    /** @var \Drupal\webform\WebformInterface $webform */
+    /** @var WebformInterface $webform */
     $webform = $this->getEntity();
     $managed_files_elements = $webform->getElementsManagedFiles();
     $decoded_managed_files_elements = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/webform_jira/src/Access/WebformJiraAccess.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\webform_jira\Access;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\webform\WebformInterface;
@@ @@
   /**
    * Check that webform Jira can be updated by a user.
    *
-   * @param \Drupal\webform\WebformInterface $webform
+   * @param WebformInterface $webform
    *   A webform.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function checkWebformJiraAccess(WebformInterface $webform, AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


 [OK] 6 files have been changed by Rector                                       

