modules/contrib/ik_modals/ik_modals.api.php
modules/contrib/ik_modals/ik_modals.install
modules/contrib/ik_modals/ik_modals.module
modules/contrib/ik_modals/modal.page.inc
modules/contrib/ik_modals/src/Controller/ModalController.php
modules/contrib/ik_modals/src/Entity/Modal.php
modules/contrib/ik_modals/src/Entity/ModalInterface.php
modules/contrib/ik_modals/src/Entity/ModalType.php
modules/contrib/ik_modals/src/Entity/ModalTypeInterface.php
modules/contrib/ik_modals/src/Entity/ModalViewsData.php
modules/contrib/ik_modals/src/Form/ModalDeleteForm.php
modules/contrib/ik_modals/src/Form/ModalForm.php
modules/contrib/ik_modals/src/Form/ModalModuleSettingsForm.php
modules/contrib/ik_modals/src/Form/ModalRevisionDeleteForm.php
modules/contrib/ik_modals/src/Form/ModalRevisionRevertForm.php
modules/contrib/ik_modals/src/Form/ModalRevisionRevertTranslationForm.php
modules/contrib/ik_modals/src/Form/ModalSettingsForm.php
modules/contrib/ik_modals/src/Form/ModalTypeDeleteForm.php
modules/contrib/ik_modals/src/Form/ModalTypeForm.php
modules/contrib/ik_modals/src/ModalAccessControlHandler.php
modules/contrib/ik_modals/src/ModalHtmlRouteProvider.php
modules/contrib/ik_modals/src/ModalListBuilder.php
modules/contrib/ik_modals/src/ModalService.php
modules/contrib/ik_modals/src/ModalStorage.php
modules/contrib/ik_modals/src/ModalStorageInterface.php
modules/contrib/ik_modals/src/ModalTranslationHandler.php
modules/contrib/ik_modals/src/ModalTypeHtmlRouteProvider.php
modules/contrib/ik_modals/src/ModalTypeListBuilder.php
modules/contrib/ik_modals/src/Plugin/Block/ModalBlock.php

14 files with changes
=====================

1) modules/contrib/ik_modals/src/Plugin/Block/ModalBlock.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The entity storage for our entity type.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface;
+   * @var EntityStorageInterface ;
    */
   protected $entityStorage;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entityQuery
+   * @param EntityStorageInterface $entityQuery
    *   The entity type manager service.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, EntityTypeManagerInterface $entityTypeManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/ik_modals/src/ModalStorageInterface.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Gets a list of Modal revision IDs for a specific Modal.
    *
-   * @param \Drupal\ik_modals\Entity\ModalInterface $entity
+   * @param ModalInterface $entity
    *   The Modal entity.
    *
    * @return int[]
@@ @@
   /**
    * Gets a list of revision IDs having a given user as Modal author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ @@
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\ik_modals\Entity\ModalInterface $entity
+   * @param ModalInterface $entity
    *   The Modal entity.
    *
    * @return int
@@ @@
   /**
    * Unsets the language for all Modal with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/ik_modals/src/ModalService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ik_modals;

+use Drupal\Core\Logger\LoggerChannelFactory;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Datetime\DateFormatter;
@@ @@
   /**
    * Drupal\Core\Session\AccountInterface definition.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;

@@ @@
   /**
    * Drupal\Core\Cache\CacheBackendInterface.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    *   Drupal cache.
    */
   protected $cache;
@@ @@
   /**
    * Drupal\Core\Config\ConfigFactory.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    *   Drupal config.
    */
   protected $config;
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * GuzzleHttp\Client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    *   Guzzle HTTP Client.
    */
   protected $httpClient;
@@ @@
   /**
    * Drupal\Core\Logger\LoggerChannelFactory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactory
+   * @var LoggerChannelFactory
    *   Drupal logging.
    */
   protected $logger;
@@ @@
   /**
    * Symfony\Component\HttpFoundation\RequestStack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    *   The request object.
    */
   protected $requestStack;
@@ @@
   /**
    * Drupal\Core\TempStore\PrivateTempStoreFactory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    *   Temporary store user geoloation data.
    */
   protected $tempStore;
@@ @@
   /**
    * Drupal\Core\Extension\ModuleHandlerInterface.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    *   ModuleHandlerInterface to initialize custom hooks.
    */
   protected $moduleHandler;
@@ @@
   /**
    * Constructs a new ModalService object.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account interface.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The interface for cache implementations.
-   * @param \Drupal\Core\Config\ConfigFactory $configFactory
+   * @param ConfigFactory $configFactory
    *   The configuration object factory.
-   * @param \Drupal\Core\Datetime\DateFormatter $dateFormatter
+   * @param DateFormatter $dateFormatter
    *   The date formatter.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \GuzzleHttp\Client $httpClient
+   * @param Client $httpClient
    *   The client for sending HTTP requests.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerFactory
+   * @param LoggerChannelFactoryInterface $loggerFactory
    *   The factory for logging channels.
-   * @param Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request object.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $tempStore
+   * @param PrivateTempStoreFactory $tempStore
    *   The factory for storing temporary private user data.
    * @param \Drupal\Core\Extension\ModuleHandlerInterface
    *   The module handler interface.
@@ @@
       // GeoIP2
       elseif ($geoip2 === true) {
         $record = NULL;
-        $reader = new Reader(drupal_get_path('module', 'ik_modals') . '/includes/db/GeoLite2-City.mmdb');
+        $reader = new Reader(\Drupal::service('extension.list.module')->getPath('ik_modals') . '/includes/db/GeoLite2-City.mmdb');

         $ip = $this->requestStack->getCurrentRequest()->getClientIp();
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/ik_modals/src/ModalHtmlRouteProvider.php:51

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/ik_modals/src/ModalAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ik_modals;

+use Drupal\ik_modals\Entity\ModalInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\ik_modals\Entity\ModalInterface $entity */
+    /** @var ModalInterface $entity */
     switch ($operation) {
       case 'view':
         if (!$entity->isPublished()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/ik_modals/src/Form/ModalSettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/ik_modals/src/Form/ModalRevisionRevertTranslationForm.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Constructs a new ModalRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Modal storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager) {
@@ @@
   protected function prepareRevertedRevision(ModalInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');

-    /** @var \Drupal\ik_modals\Entity\ModalInterface $default_revision */
+    /** @var ModalInterface $default_revision */
     $latest_revision = $this->ModalStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/ik_modals/src/Form/ModalRevisionRevertForm.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The Modal revision.
    *
-   * @var \Drupal\ik_modals\Entity\ModalInterface
+   * @var ModalInterface
    */
   protected $revision;

@@ @@
   /**
    * The Modal storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $ModalStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The messanger interface.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Constructs a new ModalRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entityStorage
+   * @param EntityStorageInterface $entityStorage
    *   The Modal storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $dateFormatter
+   * @param DateFormatterInterface $dateFormatter
    *   The date formatter service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The message interface.
    */
   public function __construct(EntityStorageInterface $entityStorage, DateFormatterInterface $dateFormatter, MessengerInterface $messenger) {
@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\ik_modals\Entity\ModalInterface $revision
+   * @param ModalInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\ik_modals\Entity\ModalInterface
+   * @return ModalInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(ModalInterface $revision, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/ik_modals/src/Form/ModalRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ik_modals\Form;

+use Drupal\ik_modals\Entity\ModalInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ @@
   /**
    * The Modal revision.
    *
-   * @var \Drupal\ik_modals\Entity\ModalInterface
+   * @var ModalInterface
    */
   protected $revision;

@@ @@
   /**
    * The Modal storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $ModalStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Constructs a new ModalRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Datetime\DateFormatter $dateFormatter
+   * @param DateFormatter $dateFormatter
    *   The date formatter.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection, DateFormatter $dateFormatter) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/ik_modals/src/Form/ModalModuleSettingsForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Config\ConfigFactoryInterface.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    *   Config Factory Interface.
    */
   protected $configFactory;
@@ @@
   /**
    * Drupal\Core\Messenger\MessengerInterface.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    *   Messenger Interface.
    */
   protected $messenger;
@@ @@
   /**
    * Symfony\Component\HttpFoundation\RequestStack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * ModalModuleSettingsForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Drupal\Core\Config\ConfigFactoryInterface.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Drupal\Core\Messenger\MessengerInterface.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   Symfony\Component\HttpFoundation\RequestStack.
    */
   public function __construct(ConfigFactoryInterface $configFactory, MessengerInterface $messenger, RequestStack $requestStack) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/ik_modals/src/Form/ModalForm.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The account interface.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $accountInterface;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $timeInterface;

@@ @@
   /**
    * The messanger interface.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messengerInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/ik_modals/src/Entity/ModalInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ik_modals\Entity;

+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\RevisionLogInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
@@ @@
   /**
    * Gets the Modal revision author.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity for the revision author.
    */
   public function getRevisionUser();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/ik_modals/src/Controller/ModalController.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * Constructs a NodeController object.
    *
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
    */
   public function __construct(DateFormatterInterface $date_formatter, RendererInterface $renderer, EntityRepositoryInterface $entity_repository = NULL) {
@@ @@
   /**
    * Generates an overview table of older revisions of a Modal .
    *
-   * @param \Drupal\ik_modals\Entity\ModalInterface $modal
+   * @param ModalInterface $modal
    *   A Modal  object.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/ik_modals/ik_modals.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\ik_modals\Entity\Modal;
 /**
  * hook_ik_modals_alter_module_settings
  * Alters the modal module sitewide settings
@@ @@
  * hook_ik_modals_alter_modal_settings
  * Alters individual modal settings
  *
- * @param \Drupal\ik_modals\Entity\Modal $entity
+ * @param Modal $entity
  * @param [array] $settings
  * @param [array] $geolocationData - see ModalService::getGeoloationData and hook_ik_modals_alter_user_geolocation
  * @return [array] $settings
  */
-function hook_ik_modals_alter_modal_settings(\Drupal\ik_modals\Entity\Modal $entity, array &$settings, array $geolocationData) {
+function hook_ik_modals_alter_modal_settings(Modal $entity, array &$settings, array $geolocationData) {
   // Make all modals of a specific bundle inactive.
   if ($entity->bundle() === 'general') {
     $settings['active'] = false;
@@ @@
   // Add it to $returnData.
   $returnData['country_code'] = 'US';
   $returnData['region_code'] = 'NC';
-}
+}
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 14 files have been changed by Rector                                      

