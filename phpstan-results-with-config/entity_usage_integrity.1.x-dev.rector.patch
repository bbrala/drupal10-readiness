diff --git a/entity_usage_integrity.module b/entity_usage_integrity.module
index d50b30a..10fdb71 100644
--- a/entity_usage_integrity.module
+++ b/entity_usage_integrity.module
@@ -50,7 +50,7 @@ function entity_usage_integrity_form_alter(array &$form, FormStateInterface $for
  *
  * @param array &$form
  *   A reference to an associative array containing the structure of the form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current state of the form.
  *
  * @internal
diff --git a/src/EntityUsage.php b/src/EntityUsage.php
index 8da3f84..a577513 100644
--- a/src/EntityUsage.php
+++ b/src/EntityUsage.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\entity_usage_integrity;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\RevisionableInterface;
+use Drupal\Core\Field\FieldItemInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManager;
@@ -25,14 +28,14 @@ final class EntityUsage {
   /**
    * The database connection used to store entity usage information.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -60,10 +63,10 @@ final class EntityUsage {
   /**
    * Construct the EntityUsage object.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection which will be used to store the entity usage
    *   information.
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
+   * @param EntityTypeManager $entity_type_manager
    *   The entity type manager.
    * @param \Drupal\entity_usage\EntityUsageInterface $entity_usage
    *   The entity usage service.
@@ -92,7 +95,7 @@ final class EntityUsage {
    * Drupal\entity_usage\EntityUsage::listSources(), but it is assumed that
    * it is useful only for the module and won't be used anywhere else.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $target_entity
+   * @param EntityInterface $target_entity
    *   A target entity.
    *
    * @return array
@@ -132,7 +135,7 @@ final class EntityUsage {
           // reference. But entity usage integrity checks integrity only
           // for default revision, so further processing makes no
           // sense in that scenario.
-          /** @var \Drupal\Core\Entity\RevisionableInterface $source */
+          /** @var RevisionableInterface $source */
           foreach ($source_revisions as $entity_usage_source_revision) {
             if ($source->getRevisionId() === $entity_usage_source_revision['source_vid']
               && $target_entity->language()->getId() === $entity_usage_source_revision['source_langcode']
@@ -163,7 +166,7 @@ final class EntityUsage {
    * As original Drupal\entity_usage\EntityUsage::listTargets()
    * is not supporting that, we have to wrote new method.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $source_entity
+   * @param EntityInterface $source_entity
    *   The source entity to check for references.
    *
    * @return array
@@ -219,7 +222,7 @@ final class EntityUsage {
    * table and we can't get them this way (like on listTargets())
    * We have to get new relations directly from referencing fields.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $source_entity
+   * @param EntityInterface $source_entity
    *   The source entity before save to check for references.
    *
    * @return array
@@ -240,7 +243,7 @@ final class EntityUsage {
       $fields = array_keys($instance->getReferencingFields($source_entity, $trackable_field_types));
       foreach ($fields as $field_name) {
         if ($source_entity instanceof FieldableEntityInterface && $source_entity->hasField($field_name) && !$source_entity->{$field_name}->isEmpty()) {
-          /** @var \Drupal\Core\Field\FieldItemInterface $field_item */
+          /** @var FieldItemInterface $field_item */
           foreach ($source_entity->{$field_name} as $field_item) {
             $properties = $field_item->getProperties();
             // Fix for dynamic entity references where entity_type stores
diff --git a/src/EntityUsageIntegrityResource/RelationCollections.php b/src/EntityUsageIntegrityResource/RelationCollections.php
index ba903de..1e9e56b 100644
--- a/src/EntityUsageIntegrityResource/RelationCollections.php
+++ b/src/EntityUsageIntegrityResource/RelationCollections.php
@@ -14,21 +14,21 @@ class RelationCollections {
   /**
    * Storage for valid usage integrity relations.
    *
-   * @var \Drupal\entity_usage_integrity\EntityUsageIntegrityResource\RelationStatusCollection
+   * @var RelationStatusCollection
    */
   protected $validRelations;
 
   /**
    * Storage for invalid usage integrity relations.
    *
-   * @var \Drupal\entity_usage_integrity\EntityUsageIntegrityResource\RelationStatusCollection
+   * @var RelationStatusCollection
    */
   protected $invalidRelations;
 
   /**
    * Storage for broken usage integrity relations.
    *
-   * @var \Drupal\entity_usage_integrity\EntityUsageIntegrityResource\RelationStatusCollection
+   * @var RelationStatusCollection
    */
   protected $brokenRelations;
 
@@ -51,7 +51,7 @@ class RelationCollections {
    *
    *   Broken relation means that related_entity doesn't exists.
    *
-   * @return \Drupal\entity_usage_integrity\EntityUsageIntegrityResource\RelationStatusCollection
+   * @return RelationStatusCollection
    *   Collection of relations with given relation status.
    */
   public function getRelationCollectionWithStatus($relation_status) {
@@ -84,7 +84,7 @@ class RelationCollections {
    *   'invalid' if we would like to get number of invalid relations,
    *   'broken' if we would like to get number of broken relations.
    *
-   * @return \Drupal\entity_usage_integrity\EntityUsageIntegrityResource\RelationStatusCollection
+   * @return RelationStatusCollection
    *   Relation collection of given type.
    *
    * @throws \Exception
diff --git a/src/EntityUsageIntegrityResource/RelationStatusCollection.php b/src/EntityUsageIntegrityResource/RelationStatusCollection.php
index a2f820f..220e128 100644
--- a/src/EntityUsageIntegrityResource/RelationStatusCollection.php
+++ b/src/EntityUsageIntegrityResource/RelationStatusCollection.php
@@ -13,7 +13,7 @@ final class RelationStatusCollection implements \IteratorAggregate, \Countable {
   /**
    * Storage for relation items.
    *
-   * @var \Drupal\entity_usage_integrity\EntityUsageIntegrityResource\RelationStatusItem[]
+   * @var RelationStatusItem[]
    */
   protected $relations = [];
 
@@ -36,9 +36,9 @@ final class RelationStatusCollection implements \IteratorAggregate, \Countable {
   /**
    * Add new entity usage relation item.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $current_entity
+   * @param EntityInterface $current_entity
    *   Entity initializing integrity check.
-   * @param \Drupal\Core\Entity\EntityInterface $related_entity
+   * @param EntityInterface $related_entity
    *   Entity related to current entity.
    * @param string $relation_type
    *   Describes if current entity is 'source' or 'target' of relation.
@@ -58,7 +58,7 @@ final class RelationStatusCollection implements \IteratorAggregate, \Countable {
    */
   public function getRelatedEntitiesElement($relation_type) {
     $element = [];
-    /** @var \Drupal\entity_usage_integrity\EntityUsageIntegrityResource\RelationStatusItem[] $relation */
+    /** @var RelationStatusItem[] $relation */
     foreach ($this->relations as $relation) {
       if ($relation->getRelationType() == $relation_type) {
         $entity = $relation->getRelatedEntity();
diff --git a/src/EntityUsageIntegrityResource/RelationStatusItem.php b/src/EntityUsageIntegrityResource/RelationStatusItem.php
index 76d466b..c00b770 100644
--- a/src/EntityUsageIntegrityResource/RelationStatusItem.php
+++ b/src/EntityUsageIntegrityResource/RelationStatusItem.php
@@ -14,14 +14,14 @@ final class RelationStatusItem {
   /**
    * Entity initializing integrity check.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $currentEntity;
 
   /**
    * Entity related to current entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $relatedEntity;
 
@@ -38,9 +38,9 @@ final class RelationStatusItem {
   /**
    * Create RelationItem object.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $current_entity
+   * @param EntityInterface $current_entity
    *   Entity initializing integrity check.
-   * @param \Drupal\Core\Entity\EntityInterface $related_entity
+   * @param EntityInterface $related_entity
    *   Entity related to current entity.
    * @param string $relation_type
    *   Describes if current entity is 'source' or 'target' of relation.
@@ -61,7 +61,7 @@ final class RelationStatusItem {
   /**
    * Get related entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   Related entity.
    */
   public function getRelatedEntity() {
diff --git a/src/Event/EntityUsageIntegrityApplicabilityCheckEvent.php b/src/Event/EntityUsageIntegrityApplicabilityCheckEvent.php
index b97fad7..b6d60c6 100644
--- a/src/Event/EntityUsageIntegrityApplicabilityCheckEvent.php
+++ b/src/Event/EntityUsageIntegrityApplicabilityCheckEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\entity_usage_integrity\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Form\FormStateInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Defines an entity usage integrity applicability check event.
@@ -13,7 +13,7 @@ class EntityUsageIntegrityApplicabilityCheckEvent extends Event {
   /**
    * The form state.
    *
-   * @var \Drupal\Core\Form\FormStateInterface
+   * @var FormStateInterface
    */
   protected $formState;
 
@@ -27,7 +27,7 @@ class EntityUsageIntegrityApplicabilityCheckEvent extends Event {
   /**
    * Constructs an applicability check event object.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param bool $is_applicable
    *   The default applicability status. TRUE if an entity usage integrity check
@@ -41,7 +41,7 @@ class EntityUsageIntegrityApplicabilityCheckEvent extends Event {
   /**
    * Gets the form state.
    *
-   * @return \Drupal\Core\Form\FormStateInterface
+   * @return FormStateInterface
    *   The form state.
    */
   public function getFormState() {
diff --git a/src/FormIntegrityValidation/ModerationStateChangeConfirmDialog.php b/src/FormIntegrityValidation/ModerationStateChangeConfirmDialog.php
index f7ec2b8..530092d 100644
--- a/src/FormIntegrityValidation/ModerationStateChangeConfirmDialog.php
+++ b/src/FormIntegrityValidation/ModerationStateChangeConfirmDialog.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\entity_usage_integrity\FormIntegrityValidation;
 
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Entity\ContentEntityStorageInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\content_moderation\ModerationInformationInterface;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\OpenModalDialogCommand;
@@ -41,14 +44,14 @@ class ModerationStateChangeConfirmDialog implements ContainerInjectionInterface
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -56,40 +59,40 @@ class ModerationStateChangeConfirmDialog implements ContainerInjectionInterface
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The moderation information service.
    *
-   * @var \Drupal\content_moderation\ModerationInformationInterface
+   * @var ModerationInformationInterface
    */
   protected $moderationInformation;
 
   /**
    * Create SubmittedFormBase object.
    *
-   * @param \Drupal\entity_usage_integrity\IntegrityValidator $integrity_validator
+   * @param IntegrityValidator $integrity_validator
    *   The entity usage integrity validator service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\content_moderation\ModerationInformationInterface $moderation_information
+   * @param ModerationInformationInterface $moderation_information
    *   The moderation information service.
    */
   public function __construct(IntegrityValidator $integrity_validator, EntityTypeManagerInterface $entity_type_manager, MessengerInterface $messenger, ConfigFactoryInterface $config_factory, EntityTypeBundleInfoInterface $entity_type_bundle_info, EventDispatcherInterface $event_dispatcher, ModerationInformationInterface $moderation_information = NULL) {
@@ -134,7 +137,7 @@ class ModerationStateChangeConfirmDialog implements ContainerInjectionInterface
    *
    * @param array &$form
    *   A reference to an associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $form_id
    *   The form id.
@@ -177,10 +180,10 @@ class ModerationStateChangeConfirmDialog implements ContainerInjectionInterface
    *
    * @param array &$form
    *   A reference to an associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Response containing modal dialog with relations that will be broken
    *   if entity will be saved with selected content moderation state
    *   or empty ajax response if no errors found.
@@ -226,10 +229,10 @@ class ModerationStateChangeConfirmDialog implements ContainerInjectionInterface
    *
    * @param array &$form
    *   A reference to an associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The current entity with new values from form.
    */
   protected function buildEntity(array &$form, FormStateInterface $form_state) {
@@ -240,7 +243,7 @@ class ModerationStateChangeConfirmDialog implements ContainerInjectionInterface
     }
     elseif ($this->isContentModerationForm($form_state)) {
       $entity = $form_state->get('entity');
-      /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $storage */
+      /** @var ContentEntityStorageInterface $storage */
       $storage = $this->entityTypeManager->getStorage($entity->getEntityTypeId());
       $entity = $storage->createRevision($entity, $entity->isDefaultRevision());
       $new_state = $form_state->getValue('new_state');
@@ -254,7 +257,7 @@ class ModerationStateChangeConfirmDialog implements ContainerInjectionInterface
   /**
    * Check if a given generic form is applicable to be altered.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form object.
    *
    * @return bool
@@ -272,7 +275,7 @@ class ModerationStateChangeConfirmDialog implements ContainerInjectionInterface
 
     if ($is_applicable) {
       $event = new EntityUsageIntegrityApplicabilityCheckEvent($form_state, $is_applicable);
-      $this->eventDispatcher->dispatch(EntityUsageIntegrityEvents::APPLICABILITY_CHECK, $event);
+      $this->eventDispatcher->dispatch($event, EntityUsageIntegrityEvents::APPLICABILITY_CHECK);
       $is_applicable = $event->isApplicable();
     }
 
@@ -283,7 +286,7 @@ class ModerationStateChangeConfirmDialog implements ContainerInjectionInterface
   /**
    * Checks if current form is content entity form.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form object.
    *
    * @return bool
@@ -300,7 +303,7 @@ class ModerationStateChangeConfirmDialog implements ContainerInjectionInterface
    * content_moderation_info_block_form. These forms allows to change moderation
    * state without editing the entity.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form object.
    *
    * @return bool
@@ -316,7 +319,7 @@ class ModerationStateChangeConfirmDialog implements ContainerInjectionInterface
   /**
    * Get message to display.
    *
-   * @param \Drupal\entity_usage_integrity\EntityUsageIntegrityResource\RelationCollections $relation_collections
+   * @param RelationCollections $relation_collections
    *   Entity usage relation collections.
    *
    * @return array
@@ -353,7 +356,7 @@ class ModerationStateChangeConfirmDialog implements ContainerInjectionInterface
    * @param string $relation_type
    *   Describes if current entity is 'source' or 'target' of relation.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Message to display before list of related entities.
    */
   protected function getMessageHeader($relation_type) {
@@ -368,7 +371,7 @@ class ModerationStateChangeConfirmDialog implements ContainerInjectionInterface
   /**
    * Get message displayed after list of related entities.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Message to display before list of related entities.
    */
   protected function getMessageFooter() {
diff --git a/src/FormIntegrityValidation/SubmittedEditForm.php b/src/FormIntegrityValidation/SubmittedEditForm.php
index 90cc1bd..c276ad6 100644
--- a/src/FormIntegrityValidation/SubmittedEditForm.php
+++ b/src/FormIntegrityValidation/SubmittedEditForm.php
@@ -30,7 +30,7 @@ final class SubmittedEditForm extends SubmittedFormBase {
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
diff --git a/src/FormIntegrityValidation/SubmittedFormBase.php b/src/FormIntegrityValidation/SubmittedFormBase.php
index f46c177..a4cc19a 100644
--- a/src/FormIntegrityValidation/SubmittedFormBase.php
+++ b/src/FormIntegrityValidation/SubmittedFormBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_usage_integrity\FormIntegrityValidation;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -27,27 +29,27 @@ abstract class SubmittedFormBase implements ContainerInjectionInterface {
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Create SubmittedFormBase object.
    *
-   * @param \Drupal\entity_usage_integrity\IntegrityValidator $integrity_validator
+   * @param IntegrityValidator $integrity_validator
    *   The entity usage integrity validator service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function __construct(IntegrityValidator $integrity_validator, EntityTypeManagerInterface $entity_type_manager, MessengerInterface $messenger, ConfigFactoryInterface $config_factory) {
@@ -77,7 +79,7 @@ abstract class SubmittedFormBase implements ContainerInjectionInterface {
    *
    * @param array &$form
    *   A reference to an associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function validate(array &$form, FormStateInterface $form_state) {
@@ -108,7 +110,7 @@ abstract class SubmittedFormBase implements ContainerInjectionInterface {
   /**
    * Get message to display.
    *
-   * @param \Drupal\entity_usage_integrity\EntityUsageIntegrityResource\RelationCollections $relation_collections
+   * @param RelationCollections $relation_collections
    *   Entity usage relation collections.
    *
    * @return array
@@ -144,7 +146,7 @@ abstract class SubmittedFormBase implements ContainerInjectionInterface {
    * @param string $relation_type
    *   Describes if current entity is 'source' or 'target' of relation.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Message to display before list of related entities.
    */
   protected function getMessageHeader($relation_type) {
@@ -178,10 +180,10 @@ abstract class SubmittedFormBase implements ContainerInjectionInterface {
    *
    * @param array &$form
    *   A reference to an associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The current entity with new values from form.
    */
   abstract protected function buildEntity(array &$form, FormStateInterface $form_state);
@@ -189,7 +191,7 @@ abstract class SubmittedFormBase implements ContainerInjectionInterface {
   /**
    * Check if a given generic form is applicable to be altered.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form object.
    *
    * @return bool
diff --git a/src/FormIntegrityValidation/SubmittedModerationStateForm.php b/src/FormIntegrityValidation/SubmittedModerationStateForm.php
index ffd79f0..36bb713 100644
--- a/src/FormIntegrityValidation/SubmittedModerationStateForm.php
+++ b/src/FormIntegrityValidation/SubmittedModerationStateForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_usage_integrity\FormIntegrityValidation;
 
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Entity\ContentEntityStorageInterface;
 use Drupal\Core\Form\FormStateInterface;
 
 /**
@@ -24,9 +26,9 @@ final class SubmittedModerationStateForm extends SubmittedFormBase {
    * {@inheritdoc}
    */
   protected function buildEntity(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $form_state->get('entity');
-    /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $storage */
+    /** @var ContentEntityStorageInterface $storage */
     $storage = $this->entityTypeManager->getStorage($entity->getEntityTypeId());
     $entity = $storage->createRevision($entity, $entity->isDefaultRevision());
     $new_state = $form_state->getValue('moderation_state');
diff --git a/src/FormIntegrityValidation/ViewedDeleteForm.php b/src/FormIntegrityValidation/ViewedDeleteForm.php
index 587bb21..8b6c805 100644
--- a/src/FormIntegrityValidation/ViewedDeleteForm.php
+++ b/src/FormIntegrityValidation/ViewedDeleteForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_usage_integrity\FormIntegrityValidation;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\ContentEntityFormInterface;
@@ -36,36 +37,36 @@ final class ViewedDeleteForm implements ContainerInjectionInterface {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * Create ViewedDeleteForm object.
    *
-   * @param \Drupal\entity_usage_integrity\IntegrityValidator $integrity_validator
+   * @param IntegrityValidator $integrity_validator
    *   The entity usage integrity validator service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(IntegrityValidator $integrity_validator, EntityTypeManagerInterface $entity_type_manager, MessengerInterface $messenger, ConfigFactoryInterface $config_factory, EventDispatcherInterface $event_dispatcher) {
@@ -103,7 +104,7 @@ final class ViewedDeleteForm implements ContainerInjectionInterface {
    *
    * @param array &$form
    *   A reference to an associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $form_id
    *   The form id.
@@ -136,7 +137,7 @@ final class ViewedDeleteForm implements ContainerInjectionInterface {
   /**
    * Check if a given generic form is applicable to be altered.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form object.
    *
    * @return bool
@@ -150,7 +151,7 @@ final class ViewedDeleteForm implements ContainerInjectionInterface {
 
     if ($is_applicable) {
       $event = new EntityUsageIntegrityApplicabilityCheckEvent($form_state, $is_applicable);
-      $this->eventDispatcher->dispatch(EntityUsageIntegrityEvents::APPLICABILITY_CHECK, $event);
+      $this->eventDispatcher->dispatch($event, EntityUsageIntegrityEvents::APPLICABILITY_CHECK);
       $is_applicable = $event->isApplicable();
     }
 
@@ -160,7 +161,7 @@ final class ViewedDeleteForm implements ContainerInjectionInterface {
   /**
    * Get message to display.
    *
-   * @param \Drupal\entity_usage_integrity\EntityUsageIntegrityResource\RelationCollections $relation_collections
+   * @param RelationCollections $relation_collections
    *   Entity usage relation collections.
    *
    * @return array
@@ -195,7 +196,7 @@ final class ViewedDeleteForm implements ContainerInjectionInterface {
   /**
    * Get message displayed after list of related entities.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Message to display before list of related entities.
    */
   protected function getMessageFooter() {
diff --git a/src/FormIntegrityValidation/ViewedEditForm.php b/src/FormIntegrityValidation/ViewedEditForm.php
index 79c4766..9e33b0b 100644
--- a/src/FormIntegrityValidation/ViewedEditForm.php
+++ b/src/FormIntegrityValidation/ViewedEditForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_usage_integrity\FormIntegrityValidation;
 
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\ContentEntityFormInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -32,43 +34,43 @@ final class ViewedEditForm implements ContainerInjectionInterface {
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * Create EntityUsageIntegrityForm object.
    *
-   * @param \Drupal\entity_usage_integrity\IntegrityValidator $integrity_validator
+   * @param IntegrityValidator $integrity_validator
    *   The entity usage integrity validator service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request
+   * @param RequestStack $request
    *   The request stack.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(IntegrityValidator $integrity_validator, EntityTypeManagerInterface $entity_type_manager, MessengerInterface $messenger, RequestStack $request, EventDispatcherInterface $event_dispatcher) {
@@ -100,7 +102,7 @@ final class ViewedEditForm implements ContainerInjectionInterface {
    *
    * @param array &$form
    *   A reference to an associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $form_id
    *   The form id.
@@ -127,7 +129,7 @@ final class ViewedEditForm implements ContainerInjectionInterface {
    * is opened and default revision is displayed, we have to do extra check
    * to verify if form refers to current revision.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
    * @return bool
@@ -142,7 +144,7 @@ final class ViewedEditForm implements ContainerInjectionInterface {
   /**
    * Check if a given generic form is applicable to be altered.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form object.
    *
    * @return bool
@@ -157,7 +159,7 @@ final class ViewedEditForm implements ContainerInjectionInterface {
 
     if ($is_applicable) {
       $event = new EntityUsageIntegrityApplicabilityCheckEvent($form_state, $is_applicable);
-      $this->eventDispatcher->dispatch(EntityUsageIntegrityEvents::APPLICABILITY_CHECK, $event);
+      $this->eventDispatcher->dispatch($event, EntityUsageIntegrityEvents::APPLICABILITY_CHECK);
       $is_applicable = $event->isApplicable();
     }
 
@@ -167,7 +169,7 @@ final class ViewedEditForm implements ContainerInjectionInterface {
   /**
    * Get message to display.
    *
-   * @param \Drupal\entity_usage_integrity\EntityUsageIntegrityResource\RelationCollections $relation_collections
+   * @param RelationCollections $relation_collections
    *   Entity usage relation collections.
    *
    * @return array
@@ -203,7 +205,7 @@ final class ViewedEditForm implements ContainerInjectionInterface {
    * @param string $relation_type
    *   Describes if current entity is 'source' or 'target' of relation.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Message to display before list of related entities.
    */
   protected function getMessageHeader($relation_type) {
diff --git a/src/IntegrityValidationTrait.php b/src/IntegrityValidationTrait.php
index 50e6d80..0101c3e 100644
--- a/src/IntegrityValidationTrait.php
+++ b/src/IntegrityValidationTrait.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_usage_integrity;
 
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\entity_usage_integrity\EntityUsageIntegrityResource\RelationCollections;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Exception;
@@ -14,7 +16,7 @@ trait IntegrityValidationTrait {
   /**
    * The entity usage integrity validator service.
    *
-   * @var \Drupal\entity_usage_integrity\IntegrityValidator
+   * @var IntegrityValidator
    */
   protected $integrityValidator;
 
@@ -28,14 +30,14 @@ trait IntegrityValidationTrait {
   /**
    * The entity usage integrity configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $integrityConfig;
 
   /**
    * Injects the integrity validator service.
    *
-   * @param \Drupal\entity_usage_integrity\IntegrityValidator $integrity_validator
+   * @param IntegrityValidator $integrity_validator
    *   The entity usage integrity validator service.
    *
    * @return $this
@@ -61,7 +63,7 @@ trait IntegrityValidationTrait {
   /**
    * Set entity usage integrity configuration.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    *
    * @return $this
@@ -74,10 +76,10 @@ trait IntegrityValidationTrait {
   /**
    * Validate usage integrity for given entity and get validated relations.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $current_entity
+   * @param EntityInterface $current_entity
    *   Entity for which we are validating entity usage integrity.
    *
-   * @return \Drupal\entity_usage_integrity\EntityUsageIntegrityResource\RelationCollections
+   * @return RelationCollections
    *   Collection of relations for current entity with statuses.
    *
    * @throws \Exception
diff --git a/src/IntegrityValidator.php b/src/IntegrityValidator.php
index 1600dee..5f8789d 100644
--- a/src/IntegrityValidator.php
+++ b/src/IntegrityValidator.php
@@ -24,50 +24,50 @@ final class IntegrityValidator implements EntityHandlerInterface {
   /**
    * The entity usage service.
    *
-   * @var \Drupal\entity_usage_integrity\EntityUsage
+   * @var EntityUsage
    */
   protected $entityUsage;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity usage integrity logger channel.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;
 
   /**
    * Construct the IntegrityValidator object.
    *
-   * @param \Drupal\entity_usage_integrity\EntityUsage $entity_usage
+   * @param EntityUsage $entity_usage
    *   The entity usage service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The entity usage integrity logger channel.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Render\Renderer $renderer
+   * @param Renderer $renderer
    *   The renderer service.
    */
   public function __construct(EntityUsage $entity_usage, EntityTypeManagerInterface $entity_type_manager, LoggerInterface $logger, MessengerInterface $messenger, Renderer $renderer) {
@@ -105,12 +105,12 @@ final class IntegrityValidator implements EntityHandlerInterface {
    *    of entity usage, but we have to get relations directly from
    *    entity field.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $current_entity
+   * @param EntityInterface $current_entity
    *   Entity for which we are validating entity usage integrity.
    * @param string $context
    *   Context of validation.
    *
-   * @return \Drupal\entity_usage_integrity\EntityUsageIntegrityResource\RelationCollections
+   * @return RelationCollections
    *   Collection of relations for current entity with statuses.
    */
   public function getValidatedUsageRelations(EntityInterface $current_entity, $context) {
@@ -150,13 +150,13 @@ final class IntegrityValidator implements EntityHandlerInterface {
   /**
    * Validate relation between current entity and related entities.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $current_entity
+   * @param EntityInterface $current_entity
    *   Entity for which we are validating entity usage integrity.
    * @param array $related_entities_data
    *   Data about related entities to current entity.
    * @param string $relation_type
    *   Relation type between current entity and related entities.
-   * @param \Drupal\entity_usage_integrity\EntityUsageIntegrityResource\RelationCollections $relations
+   * @param RelationCollections $relations
    *   Collection of validated relations.
    */
   protected function validateEntityRelations(EntityInterface $current_entity, array $related_entities_data, $relation_type, RelationCollections $relations) {
@@ -227,9 +227,9 @@ final class IntegrityValidator implements EntityHandlerInterface {
    * Relation is 'broken' if target entity doesn't exists.
    * Relation is 'ignore' if it is valid, but source is unpublished.
    *
-   * @param \Drupal\Core\Entity\EntityInterface|null $source_entity
+   * @param EntityInterface|null $source_entity
    *   Source entity.
-   * @param \Drupal\Core\Entity\EntityInterface|null $target_entity
+   * @param EntityInterface|null $target_entity
    *   Target entity.
    *
    * @return string
@@ -260,7 +260,7 @@ final class IntegrityValidator implements EntityHandlerInterface {
   /**
    * Check if given entity is published.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity to check status.
    *
    * @return bool
