modules/contrib/scss/scss.drush.inc
modules/contrib/scss/scss.module
modules/contrib/scss/src/Commands/ScssCommands.php
modules/contrib/scss/src/Form/ScssSettingsForm.php
modules/contrib/scss/src/Services/ScssCompiler.php
modules/contrib/scss/src/Services/ScssCompilerInterface.php
modules/contrib/scss/src/Services/ScssMonitor.php

4 files with changes
====================

1) modules/contrib/scss/src/Services/ScssMonitor.php:2

    ---------- begin diff ----------
@@ @@
 namespace Drupal\scss\Services;

 // This is the interface we are going to implement.
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;

 /**
  * Listens to page loads and compiles if needed.
@@ @@
   /**
    * The injected config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   private $configFactory;

@@ @@
   /**
    * The injected compiler.
    *
-   * @var \Drupal\scss\Services\ScssCompilerInterface
+   * @var ScssCompilerInterface
    */
   private $compiler;

@@ @@
   /**
    * ScssMonitor constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The injected factory.
-   * @param \Drupal\scss\Services\ScssCompilerInterface $compiler
+   * @param ScssCompilerInterface $compiler
    *   The injected compiler.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ScssCompilerInterface $compiler) {
@@ @@
   /**
    * The function which runs on each page load to check if SCSS is active.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The event to which to respond. Not used.
    */
-  public function compileIfNeeded(GetResponseEvent $event) {
+  public function compileIfNeeded(RequestEvent $event) {

     // Don't compile if not logged in
     if (!\Drupal::currentUser()->isAuthenticated()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


2) modules/contrib/scss/src/Services/ScssCompilerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scss\Services;

+use Drupal\Core\Config\ConfigException;
 /**
  * An interface describing the methods that an SCSS Compiler should implement.
  */
@@ @@
   /**
    * Determines if the save config options are valid.
    *
-   * @throws \Drupal\Core\Config\ConfigException
+   * @throws ConfigException
    */
   public function checkConfiguration(): bool;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/scss/src/Services/ScssCompiler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scss\Services;

+use Drupal\Core\Config\ImmutableConfig;
+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Config\ConfigException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\State\StateInterface;
@@ @@
   /**
    * The Drupal config object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   private $settings;

@@ @@
   /**
    * The injected request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   private $request;

@@ @@
   /**
    * The injected state.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   private $state;

@@ @@
   /**
    * ScssCompiler constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The injected factory.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request
+   * @param RequestStack $request
    *   The injected request.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The injected state.
    */
   public function __construct(ConfigFactoryInterface $config_factory, RequestStack $request, StateInterface $state) {
@@ @@
     }

     $directory_list = [
-      drupal_get_path('theme', $this->settings->get('theme_to_watch')),
+      \Drupal::service('extension.list.theme')->getPath($this->settings->get('theme_to_watch')),
     ];

     $additional_paths = $this->settings->get('additional_paths_to_watch');
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/scss/src/Form/ScssSettingsForm.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The compiler for this settings form.
    *
-   * @var \Drupal\scss\Services\ScssCompilerInterface
+   * @var ScssCompilerInterface
    */
   protected $scssCompiler;

@@ @@
   /**
    * The injected state.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The injected theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
   /**
    * The injected config installer.
    *
-   * @var \Drupal\Core\Config\ConfigInstallerInterface
+   * @var ConfigInstallerInterface
    */
   protected $configInstaller;

@@ @@
   /**
    * Class constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The injected config factory.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The injected state.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The injected theme handler.
-   * @param \Drupal\Core\Config\ConfigInstallerInterface $config_installer
+   * @param ConfigInstallerInterface $config_installer
    *   The injected config installer.
-   * @param \Drupal\scss\Services\ScssCompilerInterface $scssCompiler
+   * @param ScssCompilerInterface $scssCompiler
    *   The object that will do the compiling.
    */
   public function __construct(ConfigFactoryInterface $config_factory, StateInterface $state, ThemeHandlerInterface $theme_handler, ConfigInstallerInterface $config_installer, ScssCompilerInterface $scssCompiler) {
@@ @@
     ];

     $theme = $config->get('theme_to_watch');
-    $theme_directory = drupal_get_path('theme', $theme);
+    $theme_directory = \Drupal::service('extension.list.theme')->getPath($theme);

     $form['additional_import_paths'] = [
       '#title' => $this->t('Additional import paths'),
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 4 files have been changed by Rector                                       

