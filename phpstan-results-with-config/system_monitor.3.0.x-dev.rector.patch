diff --git a/modules/sm_status_page/src/Access/StatusPageAccessCheck.php b/modules/sm_status_page/src/Access/StatusPageAccessCheck.php
index b620415..0b58269 100644
--- a/modules/sm_status_page/src/Access/StatusPageAccessCheck.php
+++ b/modules/sm_status_page/src/Access/StatusPageAccessCheck.php
@@ -16,23 +16,23 @@ class StatusPageAccessCheck implements AccessInterface {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * Constructs a SystemManager object.
    *
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   Current user.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
    */
   public function __construct(AccountInterface $current_user, RequestStack $request_stack) {
@@ -53,7 +53,7 @@ class StatusPageAccessCheck implements AccessInterface {
   /**
    * Access check to verify that the user has a company referenced.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   Whether or not the user is allowed to access the route.
    */
   public function access() {
diff --git a/modules/sm_status_page/src/EventSubscriber/StatusPageEventSubscriber.php b/modules/sm_status_page/src/EventSubscriber/StatusPageEventSubscriber.php
index ae19922..b167a5d 100644
--- a/modules/sm_status_page/src/EventSubscriber/StatusPageEventSubscriber.php
+++ b/modules/sm_status_page/src/EventSubscriber/StatusPageEventSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\sm_status_page\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\PageCache\ResponsePolicy\KillSwitch;
@@ -11,7 +12,6 @@ use Drupal\Core\Routing\UrlGeneratorInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\StringTranslation\TranslationInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -22,61 +22,61 @@ class StatusPageEventSubscriber implements EventSubscriberInterface {
   /**
    * The current account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
 
   /**
    * The bare HTML page renderer.
    *
-   * @var \Drupal\Core\Render\BareHtmlPageRendererInterface
+   * @var BareHtmlPageRendererInterface
    */
   protected $bareHtmlPageRenderer;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The page cache kill switch service.
    *
-   * @var \Drupal\Core\PageCache\ResponsePolicy\KillSwitch
+   * @var KillSwitch
    */
   protected $pageCacheKillSwitch;
 
   /**
    * The url generator.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;
 
   /**
    * Constructs a new MaintenanceModeSubscriber.
    *
-   * @param \Drupal\Core\Render\BareHtmlPageRendererInterface $bare_html_page_renderer
+   * @param BareHtmlPageRendererInterface $bare_html_page_renderer
    *   The bare HTML page renderer.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\PageCache\ResponsePolicy\KillSwitch $page_cache_kill_switch
+   * @param KillSwitch $page_cache_kill_switch
    *   The page cache kill switch service.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   The string translation.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   The url generator.
    */
   public function __construct(BareHtmlPageRendererInterface $bare_html_page_renderer, ConfigFactoryInterface $config_factory, AccountInterface $account, EntityTypeManagerInterface $entity_type_manager, KillSwitch $page_cache_kill_switch, TranslationInterface $translation, UrlGeneratorInterface $url_generator) {
@@ -92,10 +92,10 @@ class StatusPageEventSubscriber implements EventSubscriberInterface {
   /**
    * Returns a system monitor status page.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The event to process.
    */
-  public function onKernelRequestStatusPage(GetResponseEvent $event) {
+  public function onKernelRequestStatusPage(RequestEvent $event) {
     $request = $event->getRequest();
     $route_match = RouteMatch::createFromRequest($request);
     if (strpos($route_match->getRouteName(), 'sm_status_page') === 0) {
diff --git a/modules/sm_status_page/src/Form/StatusPageDeleteForm.php b/modules/sm_status_page/src/Form/StatusPageDeleteForm.php
index c7dbe69..56a5353 100644
--- a/modules/sm_status_page/src/Form/StatusPageDeleteForm.php
+++ b/modules/sm_status_page/src/Form/StatusPageDeleteForm.php
@@ -16,14 +16,14 @@ class StatusPageDeleteForm extends EntityConfirmFormBase {
   /**
    * The router builder service.
    *
-   * @var \Drupal\Core\Routing\RouteBuilderInterface
+   * @var RouteBuilderInterface
    */
   protected $routerBuilder;
 
   /**
    * Constructs a new StatusPageDeleteForm object.
    *
-   * @param \Drupal\Core\Routing\RouteBuilderInterface $router_builder
+   * @param RouteBuilderInterface $router_builder
    *   The router builder service.
    */
   public function __construct(RouteBuilderInterface $router_builder) {
diff --git a/modules/sm_status_page/src/Form/StatusPageForm.php b/modules/sm_status_page/src/Form/StatusPageForm.php
index 541478a..7a3418b 100644
--- a/modules/sm_status_page/src/Form/StatusPageForm.php
+++ b/modules/sm_status_page/src/Form/StatusPageForm.php
@@ -17,32 +17,32 @@ class StatusPageForm extends EntityForm {
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The router builder service.
    *
-   * @var \Drupal\Core\Routing\RouteBuilderInterface
+   * @var RouteBuilderInterface
    */
   protected $routerBuilder;
 
   /**
    * The system monitor utility service.
    *
-   * @var \Drupal\system_monitor\SystemMonitorUtility
+   * @var SystemMonitorUtility
    */
   protected $systemMonitorUtility;
 
   /**
    * Constructs a new StatusPageForm.
    *
-   * @param Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The site path.
-   * @param Drupal\Core\Routing\RouteBuilderInterface $router_builder
+   * @param RouteBuilderInterface $router_builder
    *   The router builder service.
-   * @param \Drupal\system_monitor\SystemMonitorUtility $system_monitor_utility
+   * @param SystemMonitorUtility $system_monitor_utility
    *   The system monitor utility.
    */
   public function __construct(RequestStack $request_stack, RouteBuilderInterface $router_builder, SystemMonitorUtility $system_monitor_utility) {
diff --git a/modules/sm_status_page/src/Routing/StatusPageRoutes.php b/modules/sm_status_page/src/Routing/StatusPageRoutes.php
index 75ae83a..a0cb024 100644
--- a/modules/sm_status_page/src/Routing/StatusPageRoutes.php
+++ b/modules/sm_status_page/src/Routing/StatusPageRoutes.php
@@ -16,14 +16,14 @@ class StatusPageRoutes implements ContainerInjectionInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new StatusPageRoutes object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -42,7 +42,7 @@ class StatusPageRoutes implements ContainerInjectionInterface {
   /**
    * Returns an array of route objects.
    *
-   * @return \Symfony\Component\Routing\Route[]
+   * @return Route[]
    *   An array of route objects.
    */
   public function routes() {
diff --git a/modules/sm_status_page/src/StatusPageUtility.php b/modules/sm_status_page/src/StatusPageUtility.php
index 5bfba0e..f56695a 100644
--- a/modules/sm_status_page/src/StatusPageUtility.php
+++ b/modules/sm_status_page/src/StatusPageUtility.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\sm_status_page;
 
+use Drupal\sm_status_page\Entity\StatusPage;
+use Drupal\system_monitor\SystemMonitorInterface;
 use DateInterval;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -22,84 +24,84 @@ class StatusPageUtility {
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The menu link overrides config object.
    *
-   * @var \Drupal\sm_status_page\StatusPageInterface
+   * @var StatusPageInterface
    */
   protected $statusPage;
 
   /**
    * Cache service object.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;
 
   /**
    * The config factory object.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The database connection object.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The logger interface.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $logger;
 
   /**
    * The system monitor logger.
    *
-   * @var \Drupal\system_monitor\Logger\SystemMonitorLogger
+   * @var SystemMonitorLogger
    */
   protected $systemMonitorLogger;
 
   /**
    * The system monitor utility service.
    *
-   * @var \Drupal\system_monitor\SystemMonitorUtility
+   * @var SystemMonitorUtility
    */
   protected $systemMonitorUtility;
 
   /**
    * Constructs a SystemMonitorUtility object.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache service.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection object.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory object.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger
+   * @param LoggerChannelFactoryInterface $logger
    *   The logger interface.
-   * @param \Drupal\system_monitor\Logger\SystemMonitorLogger $system_monitor_logger
+   * @param SystemMonitorLogger $system_monitor_logger
    *   The system monitor logger service.
-   * @param \Drupal\system_monitor\SystemMonitorUtility $system_monitor_utility
+   * @param SystemMonitorUtility $system_monitor_utility
    *   The utility service for system monitor.
    */
   public function __construct(CacheBackendInterface $cache, Connection $connection, ConfigFactoryInterface $config_factory, DateFormatterInterface $date_formatter, EntityTypeManagerInterface $entity_type_manager, LoggerChannelFactoryInterface $logger, SystemMonitorLogger $system_monitor_logger, SystemMonitorUtility $system_monitor_utility) {
@@ -166,7 +168,7 @@ class StatusPageUtility {
   /**
    * Sets the status page to use for the utility.
    *
-   * @param \Drupal\sm_status_page\Entity\StatusPage|string $status_page
+   * @param StatusPage|string $status_page
    *   The ID or the actual Status Page object to use with the utility.
    */
   public function setStatusPage($status_page) {
@@ -219,7 +221,7 @@ class StatusPageUtility {
    * @param bool $load_objects
    *   Whether or not the monitors should be loaded before being returned.
    *
-   * @return \Drupal\system_monitor\SystemMonitorInterface[]
+   * @return SystemMonitorInterface[]
    *   An array of the active configured system monitors for the status page.
    */
   protected function getConfiguredMonitors($load_objects = TRUE) {
diff --git a/modules/sm_status_page/src/StatusPageViewBuilder.php b/modules/sm_status_page/src/StatusPageViewBuilder.php
index 100e075..e5b1f67 100644
--- a/modules/sm_status_page/src/StatusPageViewBuilder.php
+++ b/modules/sm_status_page/src/StatusPageViewBuilder.php
@@ -24,51 +24,51 @@ class StatusPageViewBuilder extends EntityViewBuilder {
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The status page utility service.
    *
-   * @var \Drupal\sm_status_page\StatusPageUtility
+   * @var StatusPageUtility
    */
   protected $statusPageUtility;
 
   /**
    * Constructs a new FeedViewBuilder.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Datetime\DateFormatter $date_formatter
+   * @param DateFormatter $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\sm_status_page\StatusPageUtility $status_page_utility
+   * @param StatusPageUtility $status_page_utility
    *   The status page utility.
-   * @param \Drupal\Core\Theme\Registry $theme_registry
+   * @param Registry $theme_registry
    *   The theme registry.
    */
   public function __construct(EntityTypeInterface $entity_type, DateFormatter $date_formatter, EntityRepositoryInterface $entity_repository, EntityDisplayRepositoryInterface $entity_display_repository, EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager, RequestStack $request_stack, StatusPageUtility $status_page_utility, Registry $theme_registry) {
@@ -174,7 +174,7 @@ class StatusPageViewBuilder extends EntityViewBuilder {
   /**
    * Build the summary content for the main page.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $status_page
+   * @param EntityInterface $status_page
    *   The status page interface.
    *
    * @return array
diff --git a/src/Annotation/SystemMonitorTask.php b/src/Annotation/SystemMonitorTask.php
index a4eb2f7..6c89a13 100644
--- a/src/Annotation/SystemMonitorTask.php
+++ b/src/Annotation/SystemMonitorTask.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\system_monitor\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -26,7 +27,7 @@ class SystemMonitorTask extends Plugin {
   /**
    * The name of the system monitor task.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -35,7 +36,7 @@ class SystemMonitorTask extends Plugin {
   /**
    * The description of the system monitor task.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Commands/SystemMonitorCommands.php b/src/Commands/SystemMonitorCommands.php
index 7559f72..9bc2e8d 100644
--- a/src/Commands/SystemMonitorCommands.php
+++ b/src/Commands/SystemMonitorCommands.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\system_monitor\Commands;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\system_monitor\SystemMonitorTaskManager;
@@ -15,32 +19,32 @@ class SystemMonitorCommands extends DrushCommands {
   /**
    * The entity type manager interface.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The system monitor task manager.
    *
-   * @var \Drupal\system_monitor\SystemMonitorTaskManager
+   * @var SystemMonitorTaskManager
    */
   protected $systemMonitorManager;
 
   /**
    * The config factory interface.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * SystemMonitorCommands constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manger
+   * @param EntityTypeManagerInterface $entity_type_manger
    *   Entity Type manager.
-   * @param \Drupal\system_monitor\SystemMonitorTaskManager $system_monitor_manager
+   * @param SystemMonitorTaskManager $system_monitor_manager
    *   System monitor task manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manger, SystemMonitorTaskManager $system_monitor_manager, ConfigFactoryInterface $config_factory) {
@@ -99,9 +103,9 @@ class SystemMonitorCommands extends DrushCommands {
    * @command sm:monitor-enable
    * @aliases sm:mon-en,sm-monitor-enable
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function monitorEnable($system_monitor_id) {
     $this->setMonitorStatus($system_monitor_id, TRUE);
@@ -116,9 +120,9 @@ class SystemMonitorCommands extends DrushCommands {
    * @command sm:monitor-disable
    * @aliases sm:mon-dis,sm-monitor-disable
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function monitorDisable($system_monitor_id) {
     $this->setMonitorStatus($system_monitor_id, FALSE);
@@ -146,9 +150,9 @@ class SystemMonitorCommands extends DrushCommands {
    * @command sm:run
    * @aliases sm:run,sm-run
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginException
+   * @throws PluginNotFoundException
    */
   public function run($type = '', $list_to_run = '', array $options = ['tags' => NULL]) {
     $this->output()->writeln(dt('Let\'s begin...'));
@@ -209,9 +213,9 @@ class SystemMonitorCommands extends DrushCommands {
    * @param bool $status_value
    *   Value to set field to.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   private function setMonitorStatus($monitor_id, $status_value) {
 
diff --git a/src/Controller/SystemMonitorController.php b/src/Controller/SystemMonitorController.php
index f1bad5e..51b4ced 100644
--- a/src/Controller/SystemMonitorController.php
+++ b/src/Controller/SystemMonitorController.php
@@ -13,7 +13,7 @@ class SystemMonitorController extends ControllerBase {
   /**
    * System Monitor task configuration form title callback.
    *
-   * @param \Drupal\system_monitor\SystemMonitorInterface $system_monitor
+   * @param SystemMonitorInterface $system_monitor
    *   The system monitor.
    *
    * @return string
diff --git a/src/Event/MonitorEvent.php b/src/Event/MonitorEvent.php
index d8bd761..1ef7fd5 100644
--- a/src/Event/MonitorEvent.php
+++ b/src/Event/MonitorEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\system_monitor\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Wraps a system monitor report event for event subscribers.
diff --git a/src/EventSubscriber/SystemMonitorLogEventSubscriber.php b/src/EventSubscriber/SystemMonitorLogEventSubscriber.php
index 2b2c8f1..e26f5a4 100644
--- a/src/EventSubscriber/SystemMonitorLogEventSubscriber.php
+++ b/src/EventSubscriber/SystemMonitorLogEventSubscriber.php
@@ -30,7 +30,7 @@ class SystemMonitorLogEventSubscriber implements EventSubscriberInterface {
   /**
    * React to a OK notification.
    *
-   * @param \Drupal\system_monitor\Event\MonitorEvent $event
+   * @param MonitorEvent $event
    *   Notification event.
    */
   public function notificationOk(MonitorEvent $event) {
@@ -40,7 +40,7 @@ class SystemMonitorLogEventSubscriber implements EventSubscriberInterface {
   /**
    * React to a Warning notification.
    *
-   * @param \Drupal\system_monitor\Event\MonitorEvent $event
+   * @param MonitorEvent $event
    *   Notification event.
    */
   public function notificationWarning(MonitorEvent $event) {
@@ -50,7 +50,7 @@ class SystemMonitorLogEventSubscriber implements EventSubscriberInterface {
   /**
    * React to a Error notification.
    *
-   * @param \Drupal\system_monitor\Event\MonitorEvent $event
+   * @param MonitorEvent $event
    *   Notification event.
    */
   public function notificationError(MonitorEvent $event) {
diff --git a/src/Form/SystemMonitorConfigureTasksForm.php b/src/Form/SystemMonitorConfigureTasksForm.php
index 3c1fb96..23e308d 100644
--- a/src/Form/SystemMonitorConfigureTasksForm.php
+++ b/src/Form/SystemMonitorConfigureTasksForm.php
@@ -17,14 +17,14 @@ class SystemMonitorConfigureTasksForm extends ConfigFormBase {
   /**
    * The system monitor to use when configuring tasks.
    *
-   * @var \Drupal\system_monitor\SystemMonitorInterface
+   * @var SystemMonitorInterface
    */
   protected $systemMonitor;
 
   /**
    * System monitor utility object.
    *
-   * @var \Drupal\system_monitor\SystemMonitorTaskManager
+   * @var SystemMonitorTaskManager
    */
   protected $systemMonitorTaskManager;
 
diff --git a/src/Form/SystemMonitorForm.php b/src/Form/SystemMonitorForm.php
index 09f210b..bb66c4e 100644
--- a/src/Form/SystemMonitorForm.php
+++ b/src/Form/SystemMonitorForm.php
@@ -16,14 +16,14 @@ class SystemMonitorForm extends EntityForm {
   /**
    * The system monitor utility service.
    *
-   * @var \Drupal\system_monitor\SystemMonitorUtility
+   * @var SystemMonitorUtility
    */
   protected $systemMonitorUtility;
 
   /**
    * Constructs a new StatusPageForm.
    *
-   * @param \Drupal\system_monitor\SystemMonitorUtility $system_monitor_utility
+   * @param SystemMonitorUtility $system_monitor_utility
    *   The system monitor utility.
    */
   public function __construct(SystemMonitorUtility $system_monitor_utility) {
diff --git a/src/Form/SystemMonitorSettingsForm.php b/src/Form/SystemMonitorSettingsForm.php
index 369a168..c049727 100644
--- a/src/Form/SystemMonitorSettingsForm.php
+++ b/src/Form/SystemMonitorSettingsForm.php
@@ -22,14 +22,14 @@ class SystemMonitorSettingsForm extends ConfigFormBase {
   /**
    * State service object.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * The system monitor utility service.
    *
-   * @var \Drupal\system_monitor\SystemMonitorUtility
+   * @var SystemMonitorUtility
    */
   protected $systemMonitorUtility;
 
diff --git a/src/Logger/SystemMonitorDbLogger.php b/src/Logger/SystemMonitorDbLogger.php
index 74f9628..3ae0740 100644
--- a/src/Logger/SystemMonitorDbLogger.php
+++ b/src/Logger/SystemMonitorDbLogger.php
@@ -27,14 +27,14 @@ class SystemMonitorDbLogger implements LoggerInterface {
   /**
    * The database connection object.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * Constructs a SystemMonitorLogger object.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection object.
    */
   public function __construct(Connection $connection) {
diff --git a/src/Logger/SystemMonitorLogger.php b/src/Logger/SystemMonitorLogger.php
index 8515ec5..3e4ca9e 100644
--- a/src/Logger/SystemMonitorLogger.php
+++ b/src/Logger/SystemMonitorLogger.php
@@ -45,7 +45,7 @@ class SystemMonitorLogger implements SystemMonitorLoggerInterface, ContainerAwar
   /**
    * Get the primary logger for System Monitor and use it to build log records.
    *
-   * @return null|\Psr\Log\LoggerInterface
+   * @return null|LoggerInterface
    *   Either the primary logger interface, or null.
    */
   public function getPrimaryLogger() {
diff --git a/src/Logger/SystemMonitorLoggerInterface.php b/src/Logger/SystemMonitorLoggerInterface.php
index c6edfd2..e35b5d1 100644
--- a/src/Logger/SystemMonitorLoggerInterface.php
+++ b/src/Logger/SystemMonitorLoggerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\system_monitor\Logger;
 
+use Drupal\Core\Database\DatabaseException;
 use Psr\Log\LoggerInterface;
 
 /**
@@ -23,7 +24,7 @@ interface SystemMonitorLoggerInterface {
    * @param array $context
    *   The context array of associated values for the log entry.
    *
-   * @throws \Drupal\Core\Database\DatabaseException
+   * @throws DatabaseException
    */
   public function log($level, $message, array $context = []);
 
@@ -38,7 +39,7 @@ interface SystemMonitorLoggerInterface {
   /**
    * Adds a logger to all the channels.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The PSR-3 logger to add.
    * @param int $priority
    *   The priority of the logger being added.
@@ -50,7 +51,7 @@ interface SystemMonitorLoggerInterface {
   /**
    * Get the primary logger for System Monitor and use it to build log records.
    *
-   * @return null|\Psr\Log\LoggerInterface
+   * @return null|LoggerInterface
    *   Either the primary logger interface, or null.
    */
   public function getPrimaryLogger();
diff --git a/src/Plugin/SystemMonitorTask/SystemMonitorTaskBase.php b/src/Plugin/SystemMonitorTask/SystemMonitorTaskBase.php
index 528ff26..b6a9329 100644
--- a/src/Plugin/SystemMonitorTask/SystemMonitorTaskBase.php
+++ b/src/Plugin/SystemMonitorTask/SystemMonitorTaskBase.php
@@ -17,7 +17,7 @@ abstract class SystemMonitorTaskBase extends PluginBase implements SystemMonitor
   /**
    * The system monitor logger.
    *
-   * @var \Drupal\system_monitor\Logger\SystemMonitorLoggerInterface
+   * @var SystemMonitorLoggerInterface
    */
   protected $systemMonitorLogger;
 
@@ -30,7 +30,7 @@ abstract class SystemMonitorTaskBase extends PluginBase implements SystemMonitor
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\system_monitor\Logger\SystemMonitorLoggerInterface $system_monitor_logger
+   * @param SystemMonitorLoggerInterface $system_monitor_logger
    *   The system monitor logger.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, SystemMonitorLoggerInterface $system_monitor_logger) {
diff --git a/src/SystemMonitorListBuilder.php b/src/SystemMonitorListBuilder.php
index 071ae7c..7d4da67 100644
--- a/src/SystemMonitorListBuilder.php
+++ b/src/SystemMonitorListBuilder.php
@@ -41,7 +41,7 @@ class SystemMonitorListBuilder extends ConfigEntityListBuilder {
   /**
    * Gets this list's default operations.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity the operations are for.
    *
    * @return array
diff --git a/src/SystemMonitorTaskManager.php b/src/SystemMonitorTaskManager.php
index 0d2e08e..e2991a4 100644
--- a/src/SystemMonitorTaskManager.php
+++ b/src/SystemMonitorTaskManager.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\system_monitor;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -22,42 +25,42 @@ class SystemMonitorTaskManager extends DefaultPluginManager {
   /**
    * The cache data interface.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;
 
   /**
    * The cache tags invalidator interface.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;
 
   /**
    * The config factory interface.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The logger interface.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $logger;
 
   /**
    * Module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
@@ -67,19 +70,19 @@ class SystemMonitorTaskManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_data
+   * @param CacheBackendInterface $cache_data
    *   Cache data bin instance to use.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invaliator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invaliator
    *   The cache tags invalidator interface.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger
+   * @param LoggerChannelFactoryInterface $logger
    *   The logger interface.
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, CacheBackendInterface $cache_data, CacheTagsInvalidatorInterface $cache_tags_invalidator, ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, LoggerChannelFactoryInterface $logger) {
@@ -109,9 +112,9 @@ class SystemMonitorTaskManager extends DefaultPluginManager {
    * @param array $task_tags
    *   The tags to use when running tasks. If not set, run them all.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginException
+   * @throws PluginNotFoundException
    */
   public function runSystemMonitorTasks(array $monitor_ids = [], array $monitor_tags = [], array $task_tags = []) {
     $storage = $this->entityTypeManager->getStorage('system_monitor');
diff --git a/src/SystemMonitorUtility.php b/src/SystemMonitorUtility.php
index 1f70b99..4bd08dd 100644
--- a/src/SystemMonitorUtility.php
+++ b/src/SystemMonitorUtility.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\system_monitor;
 
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Database\DatabaseException;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -21,75 +25,75 @@ class SystemMonitorUtility {
   /**
    * Cache service object.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;
 
   /**
    * The menu link overrides config object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
    * The config factory object.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The database connection object.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The logger interface.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $logger;
 
   /**
    * The system monitor logger.
    *
-   * @var \Drupal\system_monitor\Logger\SystemMonitorLogger
+   * @var SystemMonitorLogger
    */
   protected $systemMonitorLogger;
 
   /**
    * The system monitor task manager.
    *
-   * @var \Drupal\system_monitor\SystemMonitorTaskManager
+   * @var SystemMonitorTaskManager
    */
   protected $systemMonitorTaskManager;
 
   /**
    * Constructs a SystemMonitorUtility object.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache service.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection object.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory object.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger
+   * @param LoggerChannelFactoryInterface $logger
    *   The logger interface.
-   * @param \Drupal\system_monitor\Logger\SystemMonitorLogger $system_monitor_logger
+   * @param SystemMonitorLogger $system_monitor_logger
    *   The system monitor logger service.
-   * @param \Drupal\system_monitor\SystemMonitorTaskManager $system_monitor_task_manager
+   * @param SystemMonitorTaskManager $system_monitor_task_manager
    *   The system monitor task manager.
    */
   public function __construct(CacheBackendInterface $cache, Connection $connection, ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, LoggerChannelFactoryInterface $logger, SystemMonitorLogger $system_monitor_logger, SystemMonitorTaskManager $system_monitor_task_manager) {
@@ -124,7 +128,7 @@ class SystemMonitorUtility {
   /**
    * Gathers status information for the identified monitors.
    *
-   * @param \Drupal\system_monitor\SystemMonitorInterface[] $monitors
+   * @param SystemMonitorInterface[] $monitors
    *   The array of monitor ids to use when gathering log data.
    * @param bool $use_state
    *   Whether to use or rebuild the state of the incident data in the system.
@@ -190,8 +194,8 @@ class SystemMonitorUtility {
    * @return array
    *   An array of monitor IDs.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getActiveMonitorIds() {
     return $this->entityTypeManager
@@ -207,8 +211,8 @@ class SystemMonitorUtility {
    * @return array
    *   An array of monitor values.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getActiveMonitorOptions() {
     $system_monitor_ids = $this->getActiveMonitorIds();
@@ -231,7 +235,7 @@ class SystemMonitorUtility {
    *   The full server path to the icon file.
    */
   public function getFullIconPath($partial_path) {
-    $module_path = drupal_get_path('module', 'system_monitor');
+    $module_path = \Drupal::service('extension.list.module')->getPath('system_monitor');
     return '/' . $module_path . '/assets/images/icons/' . $partial_path;
   }
 
@@ -265,7 +269,7 @@ class SystemMonitorUtility {
    * Loads the names and strucure of the system monitor icons for status pages.
    */
   public function loadIconData() {
-    $module_path = drupal_get_path('module', 'system_monitor');
+    $module_path = \Drupal::service('extension.list.module')->getPath('system_monitor');
     $icon_files = [];
     $this->findFilePaths($module_path . '/assets/images/icons', $icon_files);
     $icon_files = array_filter($icon_files, function ($a) {
@@ -326,7 +330,7 @@ class SystemMonitorUtility {
    * @param array $params
    *   Any additional values to log, such as a request payload.
    *
-   * @throws \Drupal\Core\Database\DatabaseException
+   * @throws DatabaseException
    */
   public function logDebugMessage($message, array $params = []) {
     if (!empty($this->config->get('debug'))) {
diff --git a/system_monitor.drush.inc b/system_monitor.drush.inc
index 86a34e6..61f8d7b 100644
--- a/system_monitor.drush.inc
+++ b/system_monitor.drush.inc
@@ -1,5 +1,11 @@
 <?php
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\system_monitor\SystemMonitorTaskManager;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\system_monitor\SystemMonitorInterface;
 /**
  * @file
  * Contains the code to generate the custom drush commands for system_monitor.
@@ -71,9 +77,9 @@ function system_monitor_drush_command() {
  * @param string $list
  *   List of machine ids.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginException
+ * @throws PluginNotFoundException
  */
 function drush_system_monitor_sm_run($type = '', $list = '') {
   $tags = drush_get_option('tags', '');
@@ -92,7 +98,7 @@ function drush_system_monitor_sm_run($type = '', $list = '') {
     return;
   }
 
-  /** @var \Drupal\system_monitor\SystemMonitorTaskManager $system_monitor_plugin_manager */
+  /** @var SystemMonitorTaskManager $system_monitor_plugin_manager */
   $system_monitor_plugin_manager = \Drupal::service('plugin.manager.system_monitor_task');
 
   switch ($type) {
@@ -160,11 +166,11 @@ function drush_system_monitor_sm_monitor_disable($monitor_id = '') {
  * @param string $status_value
  *   Value to set field to.
  *
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws EntityStorageException
  */
 function system_monitor_set_monitor_status($monitor_id, $status_value) {
 
-  /** @var \Drupal\system_monitor\SystemMonitorInterface $monitor */
+  /** @var SystemMonitorInterface $monitor */
   $monitor = \Drupal::service('entity_type.manager')
     ->getStorage('system_monitor')
     ->load($monitor_id);
diff --git a/tests/src/Functional/OverviewPageTest.php b/tests/src/Functional/OverviewPageTest.php
index b0df05d..d04a8b8 100644
--- a/tests/src/Functional/OverviewPageTest.php
+++ b/tests/src/Functional/OverviewPageTest.php
@@ -28,7 +28,7 @@ class OverviewPageTest extends SystemMonitorBrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Create the users used for the tests.
@@ -47,7 +47,7 @@ class OverviewPageTest extends SystemMonitorBrowserTestBase {
     $system_monitor = $this->getTestMonitor();
 
     $this->drupalGet($this->overviewPageUrl);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $url_params = [
       'system_monitor' => $system_monitor->id(),
     ];
@@ -79,11 +79,11 @@ class OverviewPageTest extends SystemMonitorBrowserTestBase {
     $this->assertSession()->pageTextContains('System Monitor');
 
     $this->drupalGet($this->overviewPageUrl);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $this->drupalLogin($this->unauthorizedUser);
     $this->drupalGet($this->overviewPageUrl);
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
   }
 
 }
diff --git a/tests/src/Functional/SystemMonitorBrowserTestBase.php b/tests/src/Functional/SystemMonitorBrowserTestBase.php
index d0ef453..5fc0262 100644
--- a/tests/src/Functional/SystemMonitorBrowserTestBase.php
+++ b/tests/src/Functional/SystemMonitorBrowserTestBase.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\system_monitor\Functional;
 
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\system_monitor\SystemMonitorInterface;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -21,7 +24,7 @@ abstract class SystemMonitorBrowserTestBase extends BrowserTestBase {
   /**
    * An admin user used for this test.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminUser;
 
@@ -53,28 +56,28 @@ abstract class SystemMonitorBrowserTestBase extends BrowserTestBase {
   /**
    * A user without Status Page admin permission.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $unauthorizedUser;
 
   /**
    * The anonymous user used for this test.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $anonymousUser;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Get the entity type manager class.
@@ -93,7 +96,7 @@ abstract class SystemMonitorBrowserTestBase extends BrowserTestBase {
   /**
    * Creates or loads a system monitor.
    *
-   * @return \Drupal\system_monitor\SystemMonitorInterface
+   * @return SystemMonitorInterface
    *   A system monitor.
    */
   public function getTestMonitor() {
diff --git a/tests/src/Unit/Logger/SystemMonitorDbLoggerTest.php b/tests/src/Unit/Logger/SystemMonitorDbLoggerTest.php
index 9217f42..de63eda 100644
--- a/tests/src/Unit/Logger/SystemMonitorDbLoggerTest.php
+++ b/tests/src/Unit/Logger/SystemMonitorDbLoggerTest.php
@@ -17,7 +17,7 @@ class SystemMonitorDbLoggerTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $container = new ContainerBuilder();
