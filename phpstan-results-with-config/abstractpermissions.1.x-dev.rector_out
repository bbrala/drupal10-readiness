modules/contrib/abstractpermissions/abstractpermissions.module
modules/contrib/abstractpermissions/src/AbstractPermissionsService.php
modules/contrib/abstractpermissions/src/AbstractPermissionsServiceInterface.php
modules/contrib/abstractpermissions/src/Entity/PermissionAbstraction.php
modules/contrib/abstractpermissions/src/Entity/PermissionAbstractionInterface.php
modules/contrib/abstractpermissions/src/Form/AbstractPermissionsCheckForm.php
modules/contrib/abstractpermissions/src/Form/PermissionAbstractionDeleteForm.php
modules/contrib/abstractpermissions/src/Form/PermissionAbstractionForm.php
modules/contrib/abstractpermissions/src/Form/PermissionAbstractionListBuilder.php
modules/contrib/abstractpermissions/src/Form/PermissionsForm.php
modules/contrib/abstractpermissions/src/Form/PermissionsFormInterface.php
modules/contrib/abstractpermissions/src/FormAlter/PermissionsFormAlterBase.php
modules/contrib/abstractpermissions/src/FormAlter/PermissionsFormMarkGoverned.php
modules/contrib/abstractpermissions/src/FormAlter/PermissionsFormOnlyGoverned.php
modules/contrib/abstractpermissions/src/FormAlter/PermissionsFormOnlyUngoverned.php
modules/contrib/abstractpermissions/src/PermissionGovernor.php
modules/contrib/abstractpermissions/src/PermissionGraph.php
modules/contrib/abstractpermissions/tests/src/Functional/AdminPageTest.php

10 files with changes
=====================

1) modules/contrib/abstractpermissions/tests/src/Functional/AdminPageTest.php:32

    ---------- begin diff ----------
@@ @@
   public function testAdminPage() {
     $this->drupalLogin($this->rootUser);
     $this->drupalGet('admin');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // Ensure that the test is not marked as risky because of no assertions.
     // see https://gitlab.com/weitzman/drupal-test-traits/-/commit/82bf5059908f9073b3468cb7313960da72176d9a
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/abstractpermissions/src/PermissionGraph.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\abstractpermissions;

+use Drupal\abstractpermissions\Entity\PermissionAbstractionInterface;
 class PermissionGraph {

   /**
    * The permission governors, keyed by permission ID.
    *
-   * @var \Drupal\abstractpermissions\PermissionGovernor[]
+   * @var PermissionGovernor[]
    */
   private $governors = [];

@@ @@
   /**
    * PermissionGraph constructor.
    *
-   * @param \Drupal\abstractpermissions\Entity\PermissionAbstractionInterface[] $permissionAbstractions
+   * @param PermissionAbstractionInterface[] $permissionAbstractions
    */
   public function __construct($permissionAbstractions) {
     foreach ($permissionAbstractions as $permissionAbstraction) {
@@ @@
   }

   /**
-   * @return \Drupal\abstractpermissions\PermissionGovernor
+   * @return PermissionGovernor
    */
   public function getGovernor($permissionId) {
     return isset($this->governors[$permissionId]) ? $this->governors[$permissionId] : NULL;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/abstractpermissions/src/PermissionGovernor.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The permission graph.
    *
-   * @var \Drupal\abstractpermissions\PermissionGraph
+   * @var PermissionGraph
    */
   private $graph;

@@ @@
    * PermissionGovernor constructor.
    *
    * @param string $permissionId
-   * @param \Drupal\abstractpermissions\PermissionGraph $graph
+   * @param PermissionGraph $graph
    */
   public function __construct($permissionId, PermissionGraph $graph) {
     $this->graph = $graph;
@@ @@
   /**
    * Add permission abstraction.
    *
-   * @param \Drupal\abstractpermissions\Entity\PermissionAbstractionInterface $permissionAbstraction
+   * @param PermissionAbstractionInterface $permissionAbstraction
    */
   public function addPermissionAbstraction(PermissionAbstractionInterface $permissionAbstraction) {
     $this->permissionAbstractions[$permissionAbstraction->id()] = $permissionAbstraction;
@@ @@
   /**
    * Get permission abstractions.
    *
-   * @return \Drupal\abstractpermissions\Entity\PermissionAbstractionInterface[]
+   * @return PermissionAbstractionInterface[]
    */
   public function getPermissionAbstractions() {
     return $this->permissionAbstractions;
@@ @@
   /**
    * Get permission value.
    *
-   * @param \Drupal\user\RoleInterface $role
+   * @param RoleInterface $role
    *   The role.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/abstractpermissions/src/FormAlter/PermissionsFormAlterBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\abstractpermissions\FormAlter;

+use Drupal\abstractpermissions\AbstractPermissionsServiceInterface;
 use Drupal\abstractpermissions\PermissionGovernor;

 abstract class PermissionsFormAlterBase {

   public static function alterForm(array &$form) {
-    /** @var \Drupal\abstractpermissions\AbstractPermissionsServiceInterface $abstractPermissionsService */
+    /** @var AbstractPermissionsServiceInterface $abstractPermissionsService */
     $abstractPermissionsService = \Drupal::service('abstractpermissions.service');
     $permissionGraph = $abstractPermissionsService->getPermissionGraph();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/abstractpermissions/src/Form/PermissionsForm.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * PermissionsForm constructor.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    */
   public function __construct(ModuleHandlerInterface $moduleHandler) {
     $this->moduleHandler = $moduleHandler;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/abstractpermissions/src/Form/PermissionAbstractionForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\abstractpermissions\Form;

+use Drupal\abstractpermissions\Entity\PermissionAbstractionInterface;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\abstractpermissions\AbstractPermissionsServiceInterface;
 use Drupal\abstractpermissions\FormAlter\PermissionsFormMarkGoverned;
 use Drupal\Core\Entity\EntityForm;
@@ @@
   /**
    * The permission handler.
    *
-   * @var \Drupal\user\PermissionHandlerInterface
+   * @var PermissionHandlerInterface
    */
   protected $permissionHandler;

@@ @@
   /**
    * The permissions form.
    *
-   * @var \Drupal\abstractpermissions\Form\PermissionsFormInterface
+   * @var PermissionsFormInterface
    */
   protected $permissionsForm;

@@ @@
     $form = parent::form($form, $form_state);
     $form['#tree'] = TRUE;

-    /** @var \Drupal\abstractpermissions\Entity\PermissionAbstractionInterface $entity */
+    /** @var PermissionAbstractionInterface $entity */
     $entity = $this->entity;
     $form['label'] = [
       '#type' => 'textfield',
@@ @@
    * @inheritDoc
    */
   public function buildEntity(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\abstractpermissions\Entity\PermissionAbstractionInterface $entity */
+    /** @var PermissionAbstractionInterface $entity */
     $entity = clone $this->entity;
     $entity->setId($form_state->getValue('id'));
     $entity->setLabel($form_state->getValue('label'));
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function save(array $form, FormStateInterface $form_state) {
     $status = parent::save($form, $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/abstractpermissions/src/Form/PermissionAbstractionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\abstractpermissions\Form;

+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@

   /**
    * {@inheritdoc}
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+    /** @var ConfigEntityInterface $entity */
     $entity = $this->entity;
     \Drupal::logger('permissionproof')->notice('%type: %id deleted', [
       '%type' => $entity->get('entityTypeId'),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/abstractpermissions/src/AbstractPermissionsServiceInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\abstractpermissions;

+use Drupal\abstractpermissions\Entity\PermissionAbstractionInterface;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\user\RoleInterface;

 interface AbstractPermissionsServiceInterface {
@@ @@
   /**
    * Get permission abstractions.
    *
-   * @return \Drupal\abstractpermissions\Entity\PermissionAbstractionInterface[]
-
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return PermissionAbstractionInterface[]
+   * @throws PluginNotFoundException
    *   Thrown if the entity type doesn't exist.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown if the storage handler couldn't be loaded.
    */
   public function getPermissionAbstractions();
@@ @@
   /**
    * Get permission graph.
    *
-   * @return \Drupal\abstractpermissions\PermissionGraph
+   * @return PermissionGraph
    */
   public function getPermissionGraph();

@@ @@
   /**
    * Denormalize a role.
    *
-   * @param \Drupal\user\RoleInterface $role
-
+   * @param RoleInterface $role
    * @return void
    */
   public function denormalizeRole(RoleInterface $role);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/abstractpermissions/src/AbstractPermissionsService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\abstractpermissions;

+use Drupal\abstractpermissions\Entity\PermissionAbstractionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\user\PermissionHandlerInterface;
@@ @@
   use StringTranslationTrait;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\user\PermissionHandlerInterface
+   * @var PermissionHandlerInterface
    */
   protected $permissionHandler;

   /**
-   * @var \Drupal\abstractpermissions\Entity\PermissionAbstractionInterface[]
+   * @var PermissionAbstractionInterface[]
    */
   protected $permissionAbstractions;

   /**
-   * @var \Drupal\abstractpermissions\PermissionGraph
+   * @var PermissionGraph
    */
   protected $permissionGraph;

@@ @@
   /**
    * AbstractPermissionsService constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
-   * @param \Drupal\user\PermissionHandlerInterface $permissionHandler
+   * @param EntityTypeManagerInterface $entityTypeManager
+   * @param PermissionHandlerInterface $permissionHandler
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, PermissionHandlerInterface $permissionHandler) {
     $this->entityTypeManager = $entityTypeManager;
@@ @@
   /**
    * Set all governed permissions to their should-be value.
    *
-   * @param \Drupal\user\RoleInterface $role
+   * @param RoleInterface $role
    */
   public function denormalizeRole(RoleInterface $role) {
     $permissionGraph = $this->getPermissionGraph();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/abstractpermissions/abstractpermissions.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\abstractpermissions\AbstractPermissionsServiceInterface;
 use Drupal\abstractpermissions\FormAlter\PermissionsFormOnlyUngoverned;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
 }

 /**
- * @return \Drupal\abstractpermissions\AbstractPermissionsServiceInterface
+ * @return AbstractPermissionsServiceInterface
  */
 function abstractpermissions_service() {
   return \Drupal::service('abstractpermissions.service');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 10 files have been changed by Rector                                      

