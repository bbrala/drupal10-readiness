modules/contrib/domino/domino.module
modules/contrib/domino/domino_core/domino_core.install
modules/contrib/domino/domino_core/domino_core.module
modules/contrib/domino/src/ApplicationInterface.php
modules/contrib/domino/src/TestUsers.php
modules/contrib/domino/src/TestUsersSubscriber.php

3 files with changes
====================

1) modules/contrib/domino/src/TestUsersSubscriber.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * Domino config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected ImmutableConfig $config;

@@ @@
   /**
    * State handler instance.
    *
-   * @var \Drupal\Core\State\StateInterface;
+   * @var StateInterface ;
    */
   protected StateInterface $state;

@@ @@
   /**
    * Time object instance.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected TimeInterface $time;

@@ @@
   /**
    * Test users handler.
    *
-   * @var \Drupal\domino\TestUsers
+   * @var TestUsers
    */
   protected TestUsers $testUsers;

@@ @@
   /**
    * Constructs a new TestUsersSubscriber instance.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory instance.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   State handler instance.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   Time object instance.
-   * @param \Drupal\domino\TestUsers $test_users
+   * @param TestUsers $test_users
    *   Test users object instance.
    */
   public function __construct(ConfigFactoryInterface $config_factory, StateInterface $state, TimeInterface $time, TestUsers $test_users) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


2) modules/contrib/domino/src/TestUsers.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\domino;

+use Drupal\user\UserInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * Domino config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected ImmutableConfig $config;

@@ @@
   /**
    * Config factory interface.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected ConfigFactoryInterface $configFactory;

@@ @@
   /**
    * Logger instance for Domino.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected LoggerInterface $logger;

@@ @@
   /**
    * Entity type manager instance.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;

@@ @@
   /**
    * Password checker instance.
    *
-   * @var \Drupal\Core\Password\PasswordInterface
+   * @var PasswordInterface
    */
   protected PasswordInterface $passwordChecker;

@@ @@
   /**
    * Creates a new instance of TestUsers.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory instance.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Logger instance for Domino.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager instance.
-   * @param \Drupal\Core\Password\PasswordInterface $password_checker
+   * @param PasswordInterface $password_checker
    *   Password checker instance.
    */
   public function __construct(ConfigFactoryInterface $config_factory, LoggerInterface $logger, EntityTypeManagerInterface $entity_type_manager, PasswordInterface $password_checker) {
@@ @@
         // automatically in production or another sensitive environment then
         // nobody can log in with this account by default. We set the defined
         // password later in $this->>ensureTestUsersPassword().
-        $account->setPassword(user_password());
+        $account->setPassword(\Drupal::service('password_generator')->generate());

         // Any role apart from the default authenticated role requires to be
         // added to the account.
@@ @@

     // Get only usernames of test users.
     $usernames = array_keys($test_usernames);
-    /** @var \Drupal\user\UserInterface[] $accounts */
+    /** @var UserInterface[] $accounts */
     $accounts = $this->entityTypeManager->getStorage('user')
       ->loadByProperties(['name' => $usernames]);

@@ @@

     // In the production mode we want to deactivate all test users apart
     // from the accounts which were explicitly set to remain active.
-    /** @var \Drupal\user\UserInterface[] $users_to_activate */
+    /** @var UserInterface[] $users_to_activate */
     $users_to_activate = [];
-    /** @var \Drupal\user\UserInterface[] $users_to_deactivate */
+    /** @var UserInterface[] $users_to_deactivate */
     $users_to_deactivate = [];
     if ($application_mode == ApplicationInterface::MODE_PRODUCTION) {
       $usernames_to_deactivate = [];
@@ @@
     // must be enabled.
     elseif (!empty($usernames)) {
       // Load only accounts which are blocked and must be activated.
-      /** @var \Drupal\user\UserInterface[] $users_to_activate */
+      /** @var UserInterface[] $users_to_activate */
       $users_to_activate = $users_manager->loadByProperties([
         'name' => $usernames,
         'status' => 0
    ----------- end diff -----------

Applied rules:
 * UserPasswordRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/domino/domino.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\domino\TestUsers;
 /**
  * @file
  * Hook implementations for the Domino module.
  */
-
 /**
  * Implements hook_cache_flush().
  */
@@ @@
   // - Each role has corresponding test user.
   // - Each test user has explicitly defined password.
   // - Each test user has correct activation status.
-  /** @var \Drupal\domino\TestUsers $test_users */
+  /** @var TestUsers $test_users */
   $test_users = \Drupal::service('domino.test_users');
   // Make sure test users for all roles defined in the system exist.
   $test_users->ensureTestUsersExistence();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 3 files have been changed by Rector                                       

