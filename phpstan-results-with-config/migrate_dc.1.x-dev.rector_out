modules/contrib/migrate_dc/src/Plugin/migrate/process/MigrateDcFileContent.php
modules/contrib/migrate_dc/src/Plugin/migrate/process/MigrateDcPlainPassword.php
modules/contrib/migrate_dc/src/Plugin/migrate/process/MigrateDcShipmentItem.php
modules/contrib/migrate_dc/src/Plugin/migrate/process/MigrateDcStrToTime.php
modules/contrib/migrate_dc/src/Plugin/migrate/process/MigrateDcUriTransformator.php
modules/contrib/migrate_dc/src/Plugin/migrate/source/MigrateDcJsonSource.php
modules/contrib/migrate_dc/src/Plugin/migrate/source/MigrateDcYamlSource.php
modules/contrib/migrate_dc/src/Plugin/migrate_plus/data_parser/MigrateDcYamlParser.php
modules/contrib/migrate_dc/tests/src/Kernel/Plugin/migrate/process/MigrateDcFileContentTest.php
modules/contrib/migrate_dc/tests/src/Kernel/Plugin/migrate/process/MigrateDcShipmentItemTest.php
modules/contrib/migrate_dc/tests/src/Kernel/Plugin/migrate/process/MigrateDcStrToTimeTest.php
modules/contrib/migrate_dc/tests/src/Kernel/Plugin/migrate/process/MigrateDcUriTransformatorTest.php
modules/contrib/migrate_dc/tests/src/Unit/Plugin/migrate/process/MigrateDcFileContentTest.php
modules/contrib/migrate_dc/tests/src/Unit/Plugin/migrate/process/MigrateDcPlainPasswordTest.php
modules/contrib/migrate_dc/tests/src/Unit/Plugin/migrate/process/MigrateDcShipmentItemTest.php
modules/contrib/migrate_dc/tests/src/Unit/Plugin/migrate/process/MigrateDcStrToTimeTest.php
modules/contrib/migrate_dc/tests/src/Unit/Plugin/migrate/process/MigrateDcUriTransformatorTest.php
modules/contrib/migrate_dc/tests/src/Unit/Plugin/migrate/source/MigrateDcJsonSourceTest.php
modules/contrib/migrate_dc/tests/src/Unit/Plugin/migrate/source/MigrateDcYamlSourceTest.php

16 files with changes
=====================

1) modules/contrib/migrate_dc/tests/src/Unit/Plugin/migrate/source/MigrateDcYamlSourceTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_dc\Unit\Plugin\migrate\source;

+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Component\Serialization\YamlSymfony as Yaml;
 use Drupal\migrate\Plugin\MigrateSourceInterface;
 use Drupal\migrate\Plugin\MigrationInterface;
@@ @@
     $pluginId = 'migrate_dc_yaml';
     $pluginDefinition = [];

-    /** @var \Drupal\migrate\Plugin\MigrationInterface|\PHPUnit\Framework\MockObject\MockObject $migration */
+    /** @var MigrationInterface|MockObject $migration */
     $migration = $this->createMock(MigrationInterface::class);

-    /** @var \Symfony\Component\DependencyInjection\ContainerInterface|\PHPUnit\Framework\MockObject\MockObject $container */
+    /** @var ContainerInterface|MockObject $container */
     $container = $this->createMock(ContainerInterface::class);
     $container
       ->method('get')
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/migrate_dc/tests/src/Unit/Plugin/migrate/source/MigrateDcJsonSourceTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_dc\Unit\Plugin\migrate\source;

+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Component\Serialization\Json;
 use Drupal\Component\Serialization\SerializationInterface;
 use Drupal\migrate\Plugin\MigrateSourceInterface;
@@ @@
   protected $serializerClass = Json::class;

   /**
-   * @var \Drupal\Component\Serialization\SerializationInterface
+   * @var SerializationInterface
    */
   protected $serializer;

@@ @@
     $pluginId = 'migrate_dc_json';
     $pluginDefinition = [];

-    /** @var \Drupal\migrate\Plugin\MigrationInterface|\PHPUnit\Framework\MockObject\MockObject $migration */
+    /** @var MigrationInterface|MockObject $migration */
     $migration = $this->createMock(MigrationInterface::class);

-    /** @var \Symfony\Component\DependencyInjection\ContainerInterface|\PHPUnit\Framework\MockObject\MockObject $container */
+    /** @var ContainerInterface|MockObject $container */
     $container = $this->createMock(ContainerInterface::class);
     $container
       ->method('get')
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/migrate_dc/tests/src/Unit/Plugin/migrate/process/MigrateDcUriTransformatorTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_dc\Unit\Plugin\migrate\process;

+use PHPUnit\Framework\MockObject\MockObject;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\migrate\MigrateExecutableInterface;
 use Drupal\Core\Entity\EntityType;
 use Drupal\Core\Entity\EntityTypeManager;
 use Drupal\migrate\MigrateExecutable;
@@ @@
   protected $pluginDefinition = [];

   /**
-   * @var \Drupal\Core\Entity\EntityType|\PHPUnit\Framework\MockObject\MockObject
+   * @var EntityType|MockObject
    */
   protected $entityType;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit\Framework\MockObject\MockObject
+   * @var EntityTypeManagerInterface|MockObject
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\migrate\MigrateExecutableInterface
+   * @var MigrateExecutableInterface
    */
   protected $migrateExecutable;

   /**
-   * @var \Drupal\migrate\Row
+   * @var Row
    */
   protected $row;

@@ @@
       ->method('getDefinition')
       ->willReturn($this->entityType);

-    /** @var \Drupal\migrate\MigrateExecutable $migrateExecutable */
+    /** @var MigrateExecutable $migrateExecutable */
     $this->migrateExecutable = $this->createMock(MigrateExecutable::class);
     $this->row = new Row();
   }
@@ @@
    * @dataProvider casesTransformOriginal()
    */
   public function testTransformOriginal(string $expected, string $value) {
-    /** @var \Symfony\Component\DependencyInjection\ContainerInterface|\PHPUnit\Framework\MockObject\MockObject $container */
+    /** @var ContainerInterface|MockObject $container */
     $container = $this->createMock(ContainerInterface::class);
     $container
       ->expects($this->once())
@@ @@
    * @dataProvider casesTransform()
    */
   public function testTransform(string $expected, string $value, ?string $entityId) {
-    /** @var \Drupal\migrate_dc\Plugin\migrate\process\MigrateDcUriTransformator|\PHPUnit\Framework\MockObject\MockObject $processor */
+    /** @var MigrateDcUriTransformator|MockObject $processor */
     $processor = $this
       ->getMockBuilder(MigrateDcUriTransformator::class)
       ->setConstructorArgs([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/migrate_dc/tests/src/Unit/Plugin/migrate/process/MigrateDcStrToTimeTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_dc\Unit\Plugin\migrate\process;

+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Component\Datetime\Time;
 use Drupal\Component\DependencyInjection\Container;
 use Drupal\Core\Datetime\DateFormatterInterface;
@@ @@
       'currentTime' => $expected['requestTime'],
     ];

-    /** @var \Drupal\Component\Datetime\Time|\PHPUnit\Framework\MockObject\MockObject $time */
+    /** @var Time|MockObject $time */
     $time = $this->createMock(Time::class);
     $time
       ->method('getRequestTime')
@@ @@
       ->method('getCurrentTime')
       ->willReturn($expected['currentTime']);

-    /** @var \Drupal\Core\Datetime\DateFormatterInterface|\PHPUnit\Framework\MockObject\MockObject $dateFormatter */
+    /** @var DateFormatterInterface|MockObject $dateFormatter */
     $dateFormatter = $this->createMock(DateFormatterInterface::class);
     $dateFormatter
       ->method('format')
@@ @@
       )
       ->willReturn('date-formatter-return');

-    /** @var \Symfony\Component\DependencyInjection\ContainerInterface|\PHPUnit\Framework\MockObject\MockObject $container */
+    /** @var ContainerInterface|MockObject $container */
     $container = $this->createMock(Container::class);
     $container
       ->method('get')
@@ @@
       $plugin_definition
     );

-    /** @var \Drupal\migrate\MigrateExecutable $migrateExecutable */
+    /** @var MigrateExecutable $migrateExecutable */
     $migrateExecutable = $this->createMock(MigrateExecutable::class);
     $row = new Row();
     $destinationProperty = NULL;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/migrate_dc/tests/src/Unit/Plugin/migrate/process/MigrateDcShipmentItemTest.php:69

    ---------- begin diff ----------
@@ @@
     $pluginDefinition = [];
     $configuration = [];

-    /** @var \Drupal\migrate\MigrateExecutable $migrateExecutable */
+    /** @var MigrateExecutable $migrateExecutable */
     $migrateExecutable = $this->createMock(MigrateExecutable::class);
     $row = new Row();
     $destinationProperty = NULL;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/migrate_dc/tests/src/Unit/Plugin/migrate/process/MigrateDcPlainPasswordTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_dc\Unit\Plugin\migrate\process;

+use Drupal\Component\Datetime\Time;
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\migrate\MigrateExecutable;
 use Drupal\migrate\Row;
 use Drupal\migrate_dc\Plugin\migrate\process\MigrateDcPlainPassword;
@@ @@
     $pluginId = '';
     $pluginDefinition = [];

-    /** @var \Drupal\Component\Datetime\Time|\PHPUnit\Framework\MockObject\MockObject $passwordChecker */
+    /** @var Time|MockObject $passwordChecker */
     $passwordChecker = $this->createMock(PasswordInterface::class);
     $map = [
       [
@@ @@
       ->method('hash')
       ->willReturnMap($map);

-    /** @var \Symfony\Component\DependencyInjection\ContainerInterface|\PHPUnit\Framework\MockObject\MockObject $container */
+    /** @var ContainerInterface|MockObject $container */
     $container = $this->createMock(ContainerInterface::class);
     $container
       ->expects($this->once())
@@ @@
       $pluginDefinition
     );

-    /** @var \Drupal\migrate\MigrateExecutable $migrateExecutable */
+    /** @var MigrateExecutable $migrateExecutable */
     $migrateExecutable = $this->createMock(MigrateExecutable::class);
     $row = new Row();
     $destinationProperty = NULL;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/migrate_dc/tests/src/Unit/Plugin/migrate/process/MigrateDcFileContentTest.php:56

    ---------- begin diff ----------
@@ @@
     $pluginDefinition = [];
     $value = '';

-    /** @var \Drupal\migrate\MigrateExecutable $migrateExecutable */
+    /** @var MigrateExecutable $migrateExecutable */
     $migrateExecutable = $this->createMock(MigrateExecutable::class);
     $row = new Row();
     $row->setDestinationProperty($destination, $destination);
@@ @@
     $pluginDefinition = [];
     $value = '';

-    /** @var \Drupal\migrate\MigrateExecutable $migrateExecutable */
+    /** @var MigrateExecutable $migrateExecutable */
     $migrateExecutable = $this->createMock(MigrateExecutable::class);
     $row = new Row();
     $row->setDestinationProperty($destination, $destination);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/migrate_dc/tests/src/Kernel/Plugin/migrate/process/MigrateDcUriTransformatorTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_dc\Kernel\Plugin\migrate\process;

+use Drupal\migrate\Plugin\MigrationPluginManager;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\node\NodeTypeInterface;
+use Drupal\migrate\Plugin\Migration;
 use Drupal;
 use Drupal\migrate\MigrateExecutable;
 use Drupal\migrate\MigrateMessageInterface;
@@ @@
   protected $bundle = 'page';

   /**
-   * @var \Drupal\migrate\Row
+   * @var Row
    */
   protected $row;

   /**
-   * @var \Drupal\migrate\MigrateExecutable
+   * @var MigrateExecutable
    */
   protected $migrateExecutable;

@@ @@
   protected $destinationProperty;

   /**
-   * @var \Drupal\migrate\Plugin\MigrationPluginManager
+   * @var MigrationPluginManager
    */
   protected $migrationPluginManager;

@@ @@
   protected $pluginDefinition = [];

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\node\NodeTypeInterface
+   * @var NodeTypeInterface
    */
   protected $nodeType;

@@ @@
     $this->entityTypeManager = $container->get('entity_type.manager');

     $this->migrationPluginManager = Drupal::service('plugin.manager.migration');
-    /** @var \Drupal\migrate\Plugin\Migration $migration */
+    /** @var Migration $migration */
     $migration = $this->migrationPluginManager->createStubMigration([]);
     $this->migrateExecutable = new MigrateExecutable(
       $migration,
@@ @@
   }

   public function testTransform() {
-    /** @var \Drupal\node\Entity\Node $node */
+    /** @var Node $node */
     $node = Node::create([
       'type' => $this->nodeType->bundle(),
       'title' => 'Test node',
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/migrate_dc/tests/src/Kernel/Plugin/migrate/process/MigrateDcStrToTimeTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_dc\Kernel\Plugin\migrate\process;

+use Drupal\migrate\Plugin\MigrationPluginManager;
+use Drupal\Component\Datetime\TimeInterface;
+use Drupal\Core\Datetime\DateFormatterInterface;
+use Drupal\migrate\Plugin\Migration;
 use Drupal;
 use Drupal\migrate\MigrateExecutable;
 use Drupal\migrate\MigrateMessageInterface;
@@ @@
   protected $pluginDefinition = [];

   /**
-   * @var \Drupal\migrate\Row
+   * @var Row
    */
   protected $row;

   /**
-   * @var \Drupal\migrate\Plugin\MigrationPluginManager
+   * @var MigrationPluginManager
    */
   protected $migrationPluginManager;

   /**
-   * @var \Drupal\migrate\MigrateExecutable
+   * @var MigrateExecutable
    */
   protected $migrateExecutable;

   /**
-   * @var \Drupal\migrate_dc\Plugin\migrate\process\MigrateDcStrToTime
+   * @var MigrateDcStrToTime
    */
   protected $processor;

@@ @@
   protected $configuration = [];

   /**
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

   /**
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
     $this->row = new Row();

     $this->migrationPluginManager = Drupal::service('plugin.manager.migration');
-    /** @var \Drupal\migrate\Plugin\Migration $migration */
+    /** @var Migration $migration */
     $migration = $this->migrationPluginManager->createStubMigration([]);
     $this->migrateExecutable = new MigrateExecutable(
       $migration,
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/migrate_dc/tests/src/Kernel/Plugin/migrate/process/MigrateDcShipmentItemTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_dc\Kernel\Plugin\migrate\process;

+use Drupal\migrate\Plugin\MigrationPluginManager;
+use Drupal\migrate\Plugin\Migration;
 use Drupal;
 use Drupal\commerce_price\Price;
 use Drupal\commerce_shipping\ShipmentItem;
@@ @@
   protected $pluginDefinition = [];

   /**
-   * @var \Drupal\migrate\Row
+   * @var Row
    */
   protected $row;

   /**
-   * @var \Drupal\migrate\Plugin\MigrationPluginManager
+   * @var MigrationPluginManager
    */
   protected $migrationPluginManager;

   /**
-   * @var \Drupal\migrate\MigrateExecutable
+   * @var MigrateExecutable
    */
   protected $migrateExecutable;

@@ @@
   protected $shipmentItem;

   /**
-   * @var \Drupal\migrate_dc\Plugin\migrate\process\MigrateDcShipmentItem
+   * @var MigrateDcShipmentItem
    */
   protected $migrateShipmentItem;

@@ @@
     $this->row = new Row();

     $this->migrationPluginManager = Drupal::service('plugin.manager.migration');
-    /** @var \Drupal\migrate\Plugin\Migration $migration */
+    /** @var Migration $migration */
     $migration = $this->migrationPluginManager->createStubMigration([]);
     $this->migrateExecutable = new MigrateExecutable(
       $migration,
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/migrate_dc/tests/src/Kernel/Plugin/migrate/process/MigrateDcFileContentTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_dc\Kernel\Plugin\migrate\process;

+use Drupal\migrate\Plugin\MigrationPluginManager;
+use Drupal\file\Entity\File;
+use Drupal\migrate\Plugin\Migration;
 use Drupal;
 use Drupal\migrate\MigrateException;
 use Drupal\migrate\MigrateExecutable;
@@ @@
   protected $pluginDefinition = [];

   /**
-   * @var \Drupal\migrate\Row
+   * @var Row
    */
   protected $row;

   /**
-   * @var \Drupal\migrate\MigrateExecutable
+   * @var MigrateExecutable
    */
   protected $migrateExecutable;

@@ @@
   protected $destinationProperty;

   /**
-   * @var \Drupal\migrate\Plugin\MigrationPluginManager
+   * @var MigrationPluginManager
    */
   protected $migrationPluginManager;

   /**
-   * @var \Drupal\file\Entity\File
+   * @var File
    */
   protected $file;

@@ @@
     $this->destinationProperty = NULL;

     $this->migrationPluginManager = Drupal::service('plugin.manager.migration');
-    /** @var \Drupal\migrate\Plugin\Migration $migration */
+    /** @var Migration $migration */
     $migration = $this->migrationPluginManager->createStubMigration([]);
     $this->migrateExecutable = new MigrateExecutable(
       $migration,
@@ @@
       $this
     );

-    file_save_data($this->fileContent, $this->filePath . $this->fileName);
+    \Drupal::service('file.repository')->writeData($this->fileContent, $this->filePath . $this->fileName);
   }

   public function casesTransformSuccess(): array {
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/migrate_dc/src/Plugin/migrate_plus/data_parser/MigrateDcYamlParser.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\migrate_dc\Plugin\migrate_plus\data_parser;

+use Drupal\Core\Annotation\Translation;
+use GuzzleHttp\Exception\RequestException;
 use ArrayIterator;
 use Drupal\Component\Serialization\SerializationInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   protected $iterator;

   /**
-   * @var \Drupal\Component\Serialization\SerializationInterface
+   * @var SerializationInterface
    */
   protected $serializer;

@@ @@
    * @return array
    *   The selected data to be iterated.
    *
-   * @throws \GuzzleHttp\Exception\RequestException
+   * @throws RequestException
    */
   protected function getSourceData($url) {
     $response = $this->getDataFetcherPlugin()->getResponseContent($url);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/migrate_dc/src/Plugin/migrate/source/MigrateDcJsonSource.php:56

    ---------- begin diff ----------
@@ @@
   protected $items = NULL;

   /**
-   * @var \Drupal\Component\Serialization\SerializationInterface
+   * @var SerializationInterface
    */
   protected $serializer;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/migrate_dc/src/Plugin/migrate/process/MigrateDcUriTransformator.php:18

    ---------- begin diff ----------
@@ @@
 class MigrateDcUriTransformator extends ProcessPluginBase implements ContainerFactoryPluginInterface {

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/migrate_dc/src/Plugin/migrate/process/MigrateDcStrToTime.php:21

    ---------- begin diff ----------
@@ @@
 class MigrateDcStrToTime extends ProcessPluginBase implements ContainerFactoryPluginInterface {

   /**
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

   /**
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/migrate_dc/src/Plugin/migrate/process/MigrateDcPlainPassword.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * Password manager.
    *
-   * @var \Drupal\Core\Password\PasswordInterface
+   * @var PasswordInterface
    */
   protected $passwordChecker = NULL;

@@ @@
    *   The plugin ID.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Password\PasswordInterface $password_checker
+   * @param PasswordInterface $password_checker
    *   The password manager instance.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, PasswordInterface $password_checker) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 16 files have been changed by Rector                                      

