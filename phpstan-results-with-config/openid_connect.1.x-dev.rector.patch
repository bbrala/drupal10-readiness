diff --git a/openid_connect.api.php b/openid_connect.api.php
index 3dd0177..3cf8420 100644
--- a/openid_connect.api.php
+++ b/openid_connect.api.php
@@ -127,7 +127,7 @@ function hook_openid_connect_userinfo_alter(array &$userinfo, array $context) {
  * be authorized, or checking certain constraints before authorization and
  * distinctively allowing/denying authorization for the given account.
  *
- * @param \Drupal\user\UserInterface|bool $account
+ * @param UserInterface|bool $account
  *   User account identified using the "sub" provided by the identity provider,
  *   or FALSE, if no such account exists.
  * @param array $context
@@ -138,7 +138,7 @@ function hook_openid_connect_userinfo_alter(array &$userinfo, array $context) {
  *   - plugin_id:      The plugin identifier.
  *   - sub:            The remote user identifier.
  *
- * @return \Drupal\user\UserInterface|false
+ * @return UserInterface|false
  *   A user account for a certain user to authorize, FALSE, if the user shall
  *   not be logged in, or TRUE for successful hook execution.
  *
@@ -168,7 +168,7 @@ function hook_openid_connect_pre_authorize($account, array $context) {
  * provider related information to the user's Drupal session (private temp
  * store).
  *
- * @param \Drupal\user\UserInterface $account
+ * @param UserInterface $account
  *   User account object of the authorized user.
  * @param array $context
  *   An associative array with context information:
@@ -232,7 +232,7 @@ function hook_openid_connect_userinfo_claim_alter(&$claim_value, array $context)
  * user roles or other complex claims provided by the identity provider, that
  * the OpenID Connect module has no mapping mechanisms for.
  *
- * @param \Drupal\user\UserInterface $account
+ * @param UserInterface $account
  *   A user account object.
  * @param array $context
  *   An associative array with context information:
@@ -272,7 +272,7 @@ function hook_openid_connect_userinfo_save(UserInterface $account, array $contex
  * user roles or other complex claims provided by the identity provider, that
  * the OpenID Connect module has no mapping mechanisms for.
  *
- * @param \Drupal\user\UserInterface $account
+ * @param UserInterface $account
  *   A user account object.
  * @param array $context
  *   An associative array with context information:
diff --git a/openid_connect.module b/openid_connect.module
index a905a18..db01fef 100644
--- a/openid_connect.module
+++ b/openid_connect.module
@@ -152,7 +152,7 @@ function openid_connect_form_user_pass_alter(array &$form, FormStateInterface &$
  *
  * @param array $form
  *   An associative array containing the structure of the form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current state of the form.
  */
 function _openid_connect_user_pass_form_validate(array &$form, FormStateInterface $form_state) {
@@ -208,7 +208,7 @@ function openid_connect_form_user_login_form_alter(&$form, FormStateInterface $f
 /**
  * Saves user profile information into a user account.
  *
- * @param \Drupal\user\UserInterface $account
+ * @param UserInterface $account
  *   An user account object.
  * @param array $userinfo
  *   An array with information about the user.
@@ -226,7 +226,7 @@ function openid_connect_save_userinfo(UserInterface $account, array $userinfo) {
 /**
  * Logs in a user.
  *
- * @param \Drupal\user\UserInterface $account
+ * @param UserInterface $account
  *   The user account.
  *
  * @deprecated in openid_connect:8.x-1.0-beta6 and is removed from openid_connect:8.x-2.0.
diff --git a/src/Annotation/OpenIDConnectClient.php b/src/Annotation/OpenIDConnectClient.php
index ede4881..d3c6260 100644
--- a/src/Annotation/OpenIDConnectClient.php
+++ b/src/Annotation/OpenIDConnectClient.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\openid_connect\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -24,7 +25,7 @@ class OpenIDConnectClient extends Plugin {
   /**
    * The human-readable name of the OpenID Connect Client plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Controller/OpenIDConnectRedirectController.php b/src/Controller/OpenIDConnectRedirectController.php
index 6433659..cc22cf8 100644
--- a/src/Controller/OpenIDConnectRedirectController.php
+++ b/src/Controller/OpenIDConnectRedirectController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\openid_connect\Controller;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
@@ -27,50 +28,50 @@ class OpenIDConnectRedirectController extends ControllerBase implements AccessIn
   /**
    * The OpenID client plugin manager.
    *
-   * @var \Drupal\openid_connect\Plugin\OpenIDConnectClientManager
+   * @var OpenIDConnectClientManager
    */
   protected $pluginManager;
 
   /**
    * The OpenID state token service.
    *
-   * @var \Drupal\openid_connect\OpenIDConnectStateTokenInterface
+   * @var OpenIDConnectStateTokenInterface
    */
   protected $stateToken;
 
   /**
    * The request stack used to access request globals.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The logger factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;
 
   /**
    * The OpenID Connect service.
    *
-   * @var \Drupal\openid_connect\OpenIDConnect
+   * @var OpenIDConnect
    */
   protected $openIDConnect;
 
   /**
    * The constructor.
    *
-   * @param \Drupal\openid_connect\Plugin\OpenIDConnectClientManager $plugin_manager
+   * @param OpenIDConnectClientManager $plugin_manager
    *   The OpenID client plugin manager.
-   * @param \Drupal\openid_connect\OpenIDConnect $openid_connect
+   * @param OpenIDConnect $openid_connect
    *   The OpenID Connect service.
-   * @param \Drupal\openid_connect\OpenIDConnectStateTokenInterface $state_token
+   * @param OpenIDConnectStateTokenInterface $state_token
    *   The OpenID state token service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory.
    */
   public function __construct(
@@ -103,7 +104,7 @@ class OpenIDConnectRedirectController extends ControllerBase implements AccessIn
   /**
    * Access callback: Redirect page.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   Whether the state token matches the previously created one that is stored
    *   in the session.
    */
@@ -124,7 +125,7 @@ class OpenIDConnectRedirectController extends ControllerBase implements AccessIn
    * @param string $client_name
    *   The client name.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The redirect response starting the authentication request.
    */
   public function authenticate($client_name) {
diff --git a/src/Form/OpenIDConnectAccountsForm.php b/src/Form/OpenIDConnectAccountsForm.php
index 3690600..0fd268d 100644
--- a/src/Form/OpenIDConnectAccountsForm.php
+++ b/src/Form/OpenIDConnectAccountsForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\openid_connect\Form;
 
+use Drupal\openid_connect\Plugin\OpenIDConnectClientInterface;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ -25,59 +27,59 @@ class OpenIDConnectAccountsForm extends FormBase implements ContainerInjectionIn
   /**
    * Drupal\Core\Session\AccountProxy definition.
    *
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    */
   protected $currentUser;
 
   /**
    * The OpenID Connect session service.
    *
-   * @var \Drupal\openid_connect\OpenIDConnectSession
+   * @var OpenIDConnectSession
    */
   protected $session;
 
   /**
    * The OpenID Connect authmap service.
    *
-   * @var \Drupal\openid_connect\OpenIDConnectAuthmap
+   * @var OpenIDConnectAuthmap
    */
   protected $authmap;
 
   /**
    * The OpenID Connect claims service.
    *
-   * @var \Drupal\openid_connect\OpenIDConnectClaims
+   * @var OpenIDConnectClaims
    */
   protected $claims;
 
   /**
    * The OpenID Connect client plugin manager.
    *
-   * @var \Drupal\openid_connect\Plugin\OpenIDConnectClientManager
+   * @var OpenIDConnectClientManager
    */
   protected $pluginManager;
 
   /**
    * Drupal\Core\Config\ConfigFactory definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;
 
   /**
    * The constructor.
    *
-   * @param \Drupal\Core\Session\AccountProxy $current_user
+   * @param AccountProxy $current_user
    *   The current user account.
-   * @param \Drupal\openid_connect\OpenIDConnectSession $session
+   * @param OpenIDConnectSession $session
    *   The OpenID Connect service.
-   * @param \Drupal\openid_connect\OpenIDConnectAuthmap $authmap
+   * @param OpenIDConnectAuthmap $authmap
    *   The authmap storage.
-   * @param \Drupal\openid_connect\OpenIDConnectClaims $claims
+   * @param OpenIDConnectClaims $claims
    *   The OpenID Connect claims.
-   * @param \Drupal\openid_connect\Plugin\OpenIDConnectClientManager $plugin_manager
+   * @param OpenIDConnectClientManager $plugin_manager
    *   The OpenID Connect client manager.
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The config factory.
    */
   public function __construct(
@@ -205,7 +207,7 @@ class OpenIDConnectAccountsForm extends FormBase implements ContainerInjectionIn
 
     $configuration = $this->config('openid_connect.settings.' . $client_name)
       ->get('settings');
-    /** @var \Drupal\openid_connect\Plugin\OpenIDConnectClientInterface $client */
+    /** @var OpenIDConnectClientInterface $client */
     $client = $this->pluginManager->createInstance(
       $client_name,
       $configuration
@@ -220,10 +222,10 @@ class OpenIDConnectAccountsForm extends FormBase implements ContainerInjectionIn
   /**
    * Checks access for the OpenID-Connect accounts form.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The user having accounts.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $user) {
diff --git a/src/Form/OpenIDConnectLoginForm.php b/src/Form/OpenIDConnectLoginForm.php
index d480b32..1a655d4 100644
--- a/src/Form/OpenIDConnectLoginForm.php
+++ b/src/Form/OpenIDConnectLoginForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\openid_connect\Form;
 
+use Drupal\openid_connect\Plugin\OpenIDConnectClientInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -20,32 +21,32 @@ class OpenIDConnectLoginForm extends FormBase implements ContainerInjectionInter
   /**
    * The OpenID Connect session service.
    *
-   * @var \Drupal\openid_connect\OpenIDConnectSession
+   * @var OpenIDConnectSession
    */
   protected $session;
 
   /**
    * Drupal\openid_connect\Plugin\OpenIDConnectClientManager definition.
    *
-   * @var \Drupal\openid_connect\Plugin\OpenIDConnectClientManager
+   * @var OpenIDConnectClientManager
    */
   protected $pluginManager;
 
   /**
    * The OpenID Connect claims.
    *
-   * @var \Drupal\openid_connect\OpenIDConnectClaims
+   * @var OpenIDConnectClaims
    */
   protected $claims;
 
   /**
    * The constructor.
    *
-   * @param \Drupal\openid_connect\OpenIDConnectSession $session
+   * @param OpenIDConnectSession $session
    *   The OpenID Connect session service.
-   * @param \Drupal\openid_connect\Plugin\OpenIDConnectClientManager $plugin_manager
+   * @param OpenIDConnectClientManager $plugin_manager
    *   The plugin manager.
-   * @param \Drupal\openid_connect\OpenIDConnectClaims $claims
+   * @param OpenIDConnectClaims $claims
    *   The OpenID Connect claims.
    */
   public function __construct(
@@ -109,7 +110,7 @@ class OpenIDConnectLoginForm extends FormBase implements ContainerInjectionInter
 
     $configuration = $this->config('openid_connect.settings.' . $client_name)
       ->get('settings');
-    /** @var \Drupal\openid_connect\Plugin\OpenIDConnectClientInterface $client */
+    /** @var OpenIDConnectClientInterface $client */
     $client = $this->pluginManager->createInstance(
       $client_name,
       $configuration
diff --git a/src/Form/OpenIDConnectSettingsForm.php b/src/Form/OpenIDConnectSettingsForm.php
index a8efd2e..44452ea 100644
--- a/src/Form/OpenIDConnectSettingsForm.php
+++ b/src/Form/OpenIDConnectSettingsForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\openid_connect\Form;
 
+use Drupal\openid_connect\Plugin\OpenIDConnectClientInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ -23,50 +25,50 @@ class OpenIDConnectSettingsForm extends ConfigFormBase implements ContainerInjec
   /**
    * The OpenID Connect service.
    *
-   * @var \Drupal\openid_connect\OpenIDConnect
+   * @var OpenIDConnect
    */
   protected $openIDConnect;
 
   /**
    * Drupal\openid_connect\Plugin\OpenIDConnectClientManager definition.
    *
-   * @var \Drupal\openid_connect\Plugin\OpenIDConnectClientManager
+   * @var OpenIDConnectClientManager
    */
   protected $pluginManager;
 
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The OpenID Connect claims.
    *
-   * @var \Drupal\openid_connect\OpenIDConnectClaims
+   * @var OpenIDConnectClaims
    */
   protected $claims;
 
   /**
    * OpenID Connect client plugins.
    *
-   * @var \Drupal\openid_connect\Plugin\OpenIDConnectClientInterface[]
+   * @var OpenIDConnectClientInterface[]
    */
   protected static $clients;
 
   /**
    * The constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\openid_connect\OpenIDConnect $openid_connect
+   * @param OpenIDConnect $openid_connect
    *   The OpenID Connect service.
-   * @param \Drupal\openid_connect\Plugin\OpenIDConnectClientManager $plugin_manager
+   * @param OpenIDConnectClientManager $plugin_manager
    *   The plugin manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\openid_connect\OpenIDConnectClaims $claims
+   * @param OpenIDConnectClaims $claims
    *   The claims.
    */
   public function __construct(
@@ -320,11 +322,11 @@ class OpenIDConnectSettingsForm extends ConfigFormBase implements ContainerInjec
    * we are using this little helper method and a static collection of
    * initialized client plugins for this form.
    *
-   * @return \Drupal\openid_connect\Plugin\OpenIDConnectClientInterface[]
+   * @return OpenIDConnectClientInterface[]
    *   Associative array of OpenID Connect client plugins with client IDs
    *   as keys and the corresponding initialized client plugins as values.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function getClients() {
     if (!isset(self::$clients)) {
@@ -338,7 +340,7 @@ class OpenIDConnectSettingsForm extends ConfigFormBase implements ContainerInjec
           ->getEditable('openid_connect.settings.' . $client_name)
           ->get('settings');
 
-        /** @var \Drupal\openid_connect\Plugin\OpenIDConnectClientInterface $client */
+        /** @var OpenIDConnectClientInterface $client */
         $client = $this->pluginManager->createInstance(
           $client_name,
           $configuration ?: []
diff --git a/src/OpenIDConnect.php b/src/OpenIDConnect.php
index c7323f3..a0934ee 100644
--- a/src/OpenIDConnect.php
+++ b/src/OpenIDConnect.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\openid_connect;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ -26,104 +28,104 @@ class OpenIDConnect {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The OpenID Connect authmap service.
    *
-   * @var \Drupal\openid_connect\OpenIDConnectAuthmap
+   * @var OpenIDConnectAuthmap
    */
   protected $authmap;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The user data service.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;
 
   /**
    * The User entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $userStorage;
 
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;
 
   /**
    * The email validator service.
    *
-   * @var \Drupal\Component\Utility\EmailValidatorInterface
+   * @var EmailValidatorInterface
    */
   protected $emailValidator;
 
   /**
    * The OpenID Connect logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
   /**
    * File system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   private $fileSystem;
 
   /**
    * Construct an instance of the OpenID Connect service.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\openid_connect\OpenIDConnectAuthmap $authmap
+   * @param OpenIDConnectAuthmap $authmap
    *   The OpenID Connect authmap service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   Account proxy for the currently logged-in user.
-   * @param \Drupal\user\UserDataInterface $user_data
+   * @param UserDataInterface $user_data
    *   The user data service.
-   * @param \Drupal\Component\Utility\EmailValidatorInterface $email_validator
+   * @param EmailValidatorInterface $email_validator
    *   The email validator service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Extension\ModuleHandler $module_handler
+   * @param ModuleHandler $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger
+   * @param LoggerChannelFactoryInterface $logger
    *   A logger channel factory instance.
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param FileSystemInterface $fileSystem
    *   The file system service.
    */
   public function __construct(
@@ -216,7 +218,7 @@ class OpenIDConnect {
   /**
    * Fill the context array.
    *
-   * @param \Drupal\openid_connect\Plugin\OpenIDConnectClientInterface $client
+   * @param OpenIDConnectClientInterface $client
    *   The client.
    * @param array $tokens
    *   The tokens as returned by OpenIDConnectClientInterface::retrieveTokens().
@@ -253,7 +255,7 @@ class OpenIDConnect {
       return FALSE;
     }
 
-    /** @var \Drupal\user\UserInterface|bool $account */
+    /** @var UserInterface|bool $account */
     $account = $this->authmap->userLoadBySub($sub, $provider);
     $context = [
       'tokens' => $tokens,
@@ -288,7 +290,7 @@ class OpenIDConnect {
   /**
    * Complete the authorization after tokens have been retrieved.
    *
-   * @param \Drupal\openid_connect\Plugin\OpenIDConnectClientInterface $client
+   * @param OpenIDConnectClientInterface $client
    *   The client.
    * @param array $tokens
    *   The tokens as returned by OpenIDConnectClientInterface::retrieveTokens().
@@ -330,7 +332,7 @@ class OpenIDConnect {
         'mail' => $email,
       ]);
       if ($accounts) {
-        /** @var \Drupal\user\UserInterface|bool $account */
+        /** @var UserInterface|bool $account */
         $account = reset($accounts);
         $connect_existing_users = $this->configFactory->get('openid_connect.settings')
           ->get('connect_existing_users');
@@ -409,7 +411,7 @@ class OpenIDConnect {
   /**
    * Connect the current user's account to an external provider.
    *
-   * @param \Drupal\openid_connect\Plugin\OpenIDConnectClientInterface $client
+   * @param OpenIDConnectClientInterface $client
    *   The client.
    * @param array $tokens
    *   The tokens as returned from
@@ -458,7 +460,7 @@ class OpenIDConnect {
   /**
    * Find whether a user is allowed to change the own password.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Optional: Account to check the access for.
    *   Defaults to the currently logged-in user.
    *
@@ -491,14 +493,14 @@ class OpenIDConnect {
    * @param int $status
    *   The initial user status.
    *
-   * @return \Drupal\user\UserInterface|false
+   * @return UserInterface|false
    *   The user object or FALSE on failure.
    */
   public function createUser($sub, array $userinfo, $client_name, $status = 1) {
-    /** @var \Drupal\user\UserInterface $account */
+    /** @var UserInterface $account */
     $account = $this->userStorage->create([
       'name' => $this->generateUsername($sub, $userinfo, $client_name),
-      'pass' => user_password(),
+      'pass' => \Drupal::service('password_generator')->generate(),
       'mail' => $userinfo['email'],
       'init' => $userinfo['email'],
       'status' => $status,
@@ -513,7 +515,7 @@ class OpenIDConnect {
   /**
    * Log in a user.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The user account to login.
    */
   protected function loginUser(UserInterface $account) {
@@ -571,7 +573,7 @@ class OpenIDConnect {
   /**
    * Save user profile information into a user account.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   An user account object.
    * @param array $context
    *   An associative array with context information:
@@ -631,11 +633,7 @@ class OpenIDConnect {
                 $basename = explode('?', $this->fileSystem->basename($claim_value))[0];
                 $data = file_get_contents($claim_value);
 
-                $file = file_save_data(
-                  $data,
-                  'public://user-picture-' . $account->id() . '-' . $basename,
-                  FileSystemInterface::EXISTS_RENAME
-                );
+                $file = \Drupal::service('file.repository')->writeData($data, 'public://user-picture-' . $account->id() . '-' . $basename, FileSystemInterface::EXISTS_RENAME);
 
                 // Cleanup the old file.
                 if ($file) {
diff --git a/src/OpenIDConnectAuthmap.php b/src/OpenIDConnectAuthmap.php
index a708db0..3a8e6d1 100644
--- a/src/OpenIDConnectAuthmap.php
+++ b/src/OpenIDConnectAuthmap.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\openid_connect;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\user\Entity\User;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 
@@ -15,23 +17,23 @@ class OpenIDConnectAuthmap {
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * The User entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $userStorage;
 
   /**
    * Constructs a OpenIDConnectAuthmap service object.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   A database connection.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   (optional) The entity manager. (deprecated) Will be mandatory in 2.0.
    */
   public function __construct(Connection $connection, EntityTypeManagerInterface $entity_type_manager = NULL) {
@@ -101,7 +103,7 @@ class OpenIDConnectAuthmap {
       ->condition('sub', $sub, '=')
       ->execute();
     foreach ($result as $record) {
-      /** @var \Drupal\user\Entity\User $account */
+      /** @var User $account */
       $account = $this->userStorage->load($record->uid);
       if (is_object($account)) {
         return $account;
diff --git a/src/OpenIDConnectClaims.php b/src/OpenIDConnectClaims.php
index 5bfde11..5f222e0 100644
--- a/src/OpenIDConnectClaims.php
+++ b/src/OpenIDConnectClaims.php
@@ -20,14 +20,14 @@ class OpenIDConnectClaims implements ContainerInjectionInterface {
   /**
    * Drupal\Core\Config\ConfigFactory definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;
 
   /**
    * Drupal\Core\Extension\ModuleHandler definition.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;
 
@@ -48,9 +48,9 @@ class OpenIDConnectClaims implements ContainerInjectionInterface {
   /**
    * The constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The configuration factory.
-   * @param \Drupal\Core\Extension\ModuleHandler $module_handler
+   * @param ModuleHandler $module_handler
    *   The module handler.
    */
   public function __construct(
@@ -109,7 +109,7 @@ class OpenIDConnectClaims implements ContainerInjectionInterface {
   /**
    * Returns scopes that have to be requested based on the configured claims.
    *
-   * @param \Drupal\openid_connect\Plugin\OpenIDConnectClientInterface|null $client
+   * @param OpenIDConnectClientInterface|null $client
    *   An optional client. If one is provided, it will be asked for scopes.
    *
    * @return string
diff --git a/src/OpenIDConnectSession.php b/src/OpenIDConnectSession.php
index 836d0e2..d9a133d 100644
--- a/src/OpenIDConnectSession.php
+++ b/src/OpenIDConnectSession.php
@@ -13,23 +13,23 @@ class OpenIDConnectSession {
   /**
    * The current path.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPath;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * Construct an instance of the OpenID Connect session service.
    *
-   * @param \Drupal\Core\Path\CurrentPathStack $current_path
+   * @param CurrentPathStack $current_path
    *   The current path.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
    */
   public function __construct(
diff --git a/src/Plugin/Block/OpenIDConnectLoginBlock.php b/src/Plugin/Block/OpenIDConnectLoginBlock.php
index b242f8b..3177c66 100644
--- a/src/Plugin/Block/OpenIDConnectLoginBlock.php
+++ b/src/Plugin/Block/OpenIDConnectLoginBlock.php
@@ -23,14 +23,14 @@ class OpenIDConnectLoginBlock extends BlockBase implements ContainerFactoryPlugi
   /**
    * Drupal\openid_connect\Plugin\OpenIDConnectClientManager definition.
    *
-   * @var \Drupal\openid_connect\Plugin\OpenIDConnectClientManager
+   * @var OpenIDConnectClientManager
    */
   protected $pluginManager;
 
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilder
+   * @var FormBuilder
    */
   protected $formBuilder;
 
@@ -43,9 +43,9 @@ class OpenIDConnectLoginBlock extends BlockBase implements ContainerFactoryPlugi
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\openid_connect\Plugin\OpenIDConnectClientManager $plugin_manager
+   * @param OpenIDConnectClientManager $plugin_manager
    *   The OpenID Connect client manager.
-   * @param \Drupal\Core\Form\FormBuilder $form_builder
+   * @param FormBuilder $form_builder
    *   The form builder.
    */
   public function __construct(
diff --git a/src/Plugin/OpenIDConnectClient/OpenIDConnectFacebookClient.php b/src/Plugin/OpenIDConnectClient/OpenIDConnectFacebookClient.php
index b1db4b3..ccdfbb3 100644
--- a/src/Plugin/OpenIDConnectClient/OpenIDConnectFacebookClient.php
+++ b/src/Plugin/OpenIDConnectClient/OpenIDConnectFacebookClient.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\openid_connect\Plugin\OpenIDConnectClient;
 
+use GuzzleHttp\Client;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\openid_connect\Plugin\OpenIDConnectClientBase;
 
@@ -111,7 +112,7 @@ class OpenIDConnectFacebookClient extends OpenIDConnectClientBase {
     ];
     $endpoints = $this->getEndpoints();
 
-    /** @var \GuzzleHttp\Client $client */
+    /** @var Client $client */
     $client = $this->httpClient;
     try {
       $response = $client->get($endpoints['userinfo'], $request_options);
diff --git a/src/Plugin/OpenIDConnectClientBase.php b/src/Plugin/OpenIDConnectClientBase.php
index e042091..18f985b 100644
--- a/src/Plugin/OpenIDConnectClientBase.php
+++ b/src/Plugin/OpenIDConnectClientBase.php
@@ -30,14 +30,14 @@ abstract class OpenIDConnectClientBase extends PluginBase implements OpenIDConne
   /**
    * The request stack used to access request globals.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The HTTP client to fetch the feed data with.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;
 
@@ -53,35 +53,35 @@ abstract class OpenIDConnectClientBase extends PluginBase implements OpenIDConne
   /**
    * The logger factory used for logging.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;
 
   /**
    * The datetime.time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $dateTime;
 
   /**
    * Page cache kill switch.
    *
-   * @var \Drupal\Core\PageCache\ResponsePolicy\KillSwitch
+   * @var KillSwitch
    */
   protected $pageCacheKillSwitch;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The OpenID state token service.
    *
-   * @var \Drupal\openid_connect\OpenIDConnectStateTokenInterface
+   * @var OpenIDConnectStateTokenInterface
    */
   protected $stateToken;
 
@@ -94,19 +94,19 @@ abstract class OpenIDConnectClientBase extends PluginBase implements OpenIDConne
    *   The plugin identifier.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   The http client.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory.
-   * @param \Drupal\Component\Datetime\TimeInterface $datetime_time
+   * @param TimeInterface $datetime_time
    *   The datetime.time service.
-   * @param \Drupal\Core\PageCache\ResponsePolicy\KillSwitch $page_cache_kill_switch
+   * @param KillSwitch $page_cache_kill_switch
    *   Policy evaluating to static::DENY when the kill switch was triggered.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\openid_connect\OpenIDConnectStateTokenInterface $state_token
+   * @param OpenIDConnectStateTokenInterface $state_token
    *   The OpenID state token service.
    */
   public function __construct(
@@ -276,7 +276,7 @@ abstract class OpenIDConnectClientBase extends PluginBase implements OpenIDConne
    *
    * @param string $scope
    *   A string of scopes.
-   * @param \Drupal\Core\GeneratedUrl $redirect_uri
+   * @param GeneratedUrl $redirect_uri
    *   URI to redirect for authorization.
    *
    * @return array
@@ -418,7 +418,7 @@ abstract class OpenIDConnectClientBase extends PluginBase implements OpenIDConne
    * @param array $options
    *   See \Drupal\Core\Url::fromRoute() for details.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   A new Url object for a routed (internal to Drupal) URL.
    *
    * @see \Drupal\Core\Url::fromRoute()
diff --git a/src/Plugin/OpenIDConnectClientInterface.php b/src/Plugin/OpenIDConnectClientInterface.php
index 0529b45..c14bbd8 100644
--- a/src/Plugin/OpenIDConnectClientInterface.php
+++ b/src/Plugin/OpenIDConnectClientInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\openid_connect\Plugin;
 
+use Symfony\Component\HttpFoundation\Response;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
@@ -45,7 +46,7 @@ interface OpenIDConnectClientInterface extends ConfigurableInterface, DependentP
    *   Name of scope(s) that with user consent will provide access to otherwise
    *   restricted user data. Defaults to "openid email".
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   A response object.
    */
   public function authorize($scope = 'openid email');
diff --git a/src/Plugin/OpenIDConnectClientManager.php b/src/Plugin/OpenIDConnectClientManager.php
index 935ee1a..8c5faec 100644
--- a/src/Plugin/OpenIDConnectClientManager.php
+++ b/src/Plugin/OpenIDConnectClientManager.php
@@ -17,9 +17,9 @@ class OpenIDConnectClientManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(
diff --git a/tests/src/Unit/OpenIDConnectAuthmapTest.php b/tests/src/Unit/OpenIDConnectAuthmapTest.php
index 917778e..a053774 100644
--- a/tests/src/Unit/OpenIDConnectAuthmapTest.php
+++ b/tests/src/Unit/OpenIDConnectAuthmapTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\openid_connect\Unit;
 
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Tests\UnitTestCase;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -31,35 +32,35 @@ class OpenIDConnectAuthmapTest extends UnitTestCase {
   /**
    * Mock of the EntityStorageInterface for User objects.
    *
-   * @var \PHPUnit\Framework\MockObject\MockObject
+   * @var MockObject
    */
   protected $userStorage;
 
   /**
    * Mock the database connection service.
    *
-   * @var \PHPUnit\Framework\MockObject\MockObject
+   * @var MockObject
    */
   protected $connection;
 
   /**
    * Mock of the current_user service.
    *
-   * @var \PHPUnit\Framework\MockObject\MockObject
+   * @var MockObject
    */
   protected $account;
 
   /**
    * Mock of the entity_type.manager service.
    *
-   * @var \PHPUnit\Framework\MockObject\MockObject
+   * @var MockObject
    */
   protected $entityTypeManager;
 
   /**
    * {@inheritDoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->account = $this
diff --git a/tests/src/Unit/OpenIDConnectStateTokenTest.php b/tests/src/Unit/OpenIDConnectStateTokenTest.php
index 9e49d8d..18f5f7e 100644
--- a/tests/src/Unit/OpenIDConnectStateTokenTest.php
+++ b/tests/src/Unit/OpenIDConnectStateTokenTest.php
@@ -18,7 +18,7 @@ class OpenIDConnectStateTokenTest extends UnitTestCase {
   /**
    * Mock of the openid_connect.state_token service.
    *
-   * @var \Drupal\openid_connect\OpenIDConnectStateToken
+   * @var OpenIDConnectStateToken
    */
   protected $stateTokenService;
 
diff --git a/tests/src/Unit/OpenIDConnectTest.php b/tests/src/Unit/OpenIDConnectTest.php
index 350bc4a..cf4fcf5 100644
--- a/tests/src/Unit/OpenIDConnectTest.php
+++ b/tests/src/Unit/OpenIDConnectTest.php
@@ -110,7 +110,7 @@ class OpenIDConnectTest extends UnitTestCase {
   /**
    * The OpenIDConnect class being tested.
    *
-   * @var \Drupal\openid_connect\OpenIDConnect
+   * @var OpenIDConnect
    */
   protected $openIdConnect;
 
@@ -138,7 +138,7 @@ class OpenIDConnectTest extends UnitTestCase {
   /**
    * {@inheritDoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $oldFileMock = $this->createMock(File::class);
diff --git a/tests/src/Unit/OpenIdConnectClaimsTest.php b/tests/src/Unit/OpenIdConnectClaimsTest.php
index 469c2cb..43253b4 100644
--- a/tests/src/Unit/OpenIdConnectClaimsTest.php
+++ b/tests/src/Unit/OpenIdConnectClaimsTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\openid_connect\Unit;
 
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
@@ -35,28 +36,28 @@ class OpenIdConnectClaimsTest extends UnitTestCase {
   /**
    * A mock of the config.factory service.
    *
-   * @var \PHPUnit\Framework\MockObject\MockObject
+   * @var MockObject
    */
   protected $configFactory;
 
   /**
    * A mock of the module_handler service.
    *
-   * @var \PHPUnit\Framework\MockObject\MockObject
+   * @var MockObject
    */
   protected $moduleHandler;
 
   /**
    * The OpenIdConnectClaims class being tested.
    *
-   * @var \Drupal\openid_connect\OpenIDConnectClaims
+   * @var OpenIDConnectClaims
    */
   protected $openIdConnectClaims;
 
   /**
    * Mock of the container for service calls.
    *
-   * @var \Drupal\Core\DependencyInjection\ContainerBuilder
+   * @var ContainerBuilder
    */
   protected $container;
 
diff --git a/tests/src/Unit/OpenIdConnectSessionTest.php b/tests/src/Unit/OpenIdConnectSessionTest.php
index 46fdb55..b87f1d7 100644
--- a/tests/src/Unit/OpenIdConnectSessionTest.php
+++ b/tests/src/Unit/OpenIdConnectSessionTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\openid_connect\Unit;
 
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Core\Path\CurrentPathStack;
 use Drupal\openid_connect\OpenIDConnectSession;
 use Drupal\Tests\UnitTestCase;
@@ -34,21 +35,21 @@ class OpenIdConnectSessionTest extends UnitTestCase {
   /**
    * A mock of the current_path service.
    *
-   * @var \PHPUnit\Framework\MockObject\MockObject
+   * @var MockObject
    */
   protected $currentPath;
 
   /**
    * A mock of the requestStack method for testing.
    *
-   * @var \PHPUnit\Framework\MockObject\MockObject
+   * @var MockObject
    */
   protected $requestStack;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Mock the currentPath service.
diff --git a/tests/src/Unit/UserPasswordFixture.php b/tests/src/Unit/UserPasswordFixture.php
index 197c17e..3034f4d 100644
--- a/tests/src/Unit/UserPasswordFixture.php
+++ b/tests/src/Unit/UserPasswordFixture.php
@@ -22,7 +22,7 @@ function user_password() {
 /**
  * Override the user_login_finalize function.
  *
- * @param \Drupal\user\UserInterface $account
+ * @param UserInterface $account
  *   The user account.
  */
 function user_login_finalize(UserInterface $account) {
@@ -39,7 +39,7 @@ function user_login_finalize(UserInterface $account) {
  * @param int $replace
  *   Whether to replace the file or not.
  *
- * @return \PHPUnit\Framework\MockObject\MockObject
+ * @return MockObject
  *   Return a mock object that mimics the file_save_data.
  */
 function file_save_data(
