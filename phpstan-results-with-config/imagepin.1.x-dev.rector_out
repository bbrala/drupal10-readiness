modules/contrib/imagepin/imagepin.api.php
modules/contrib/imagepin/imagepin.attach.inc
modules/contrib/imagepin/imagepin.forms.inc
modules/contrib/imagepin/imagepin.install
modules/contrib/imagepin/imagepin.module
modules/contrib/imagepin/imagepin.theme.inc
modules/contrib/imagepin/src/Annotation/Widget.php
modules/contrib/imagepin/src/Controller/ImagepinController.php
modules/contrib/imagepin/src/Form/PinWidgetsForm.php
modules/contrib/imagepin/src/ImagepinRender.php
modules/contrib/imagepin/src/Plugin/WidgetBase.php
modules/contrib/imagepin/src/Plugin/WidgetInterface.php
modules/contrib/imagepin/src/Plugin/WidgetManager.php
modules/contrib/imagepin/src/Plugin/imagepin/Widget/TextWidget.php
modules/contrib/imagepin/src/WidgetRepository.php

7 files with changes
====================

1) modules/contrib/imagepin/src/WidgetRepository.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The database connection instance.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * The serializer instance.
    *
-   * @var \Drupal\Component\Serialization\SerializationInterface
+   * @var SerializationInterface
    */
   protected $serializer;

@@ @@
   /**
    * The WidgetManager instance.
    *
-   * @var \Drupal\imagepin\Plugin\WidgetManager
+   * @var WidgetManager
    */
   protected $widgetManager;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    */
   protected $currentUser;

@@ @@
   /**
    * The EntityTypeManagerInterface instance.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructor method.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection instance.
-   * @param \Drupal\Component\Serialization\SerializationInterface $serializer
+   * @param SerializationInterface $serializer
    *   The serializer instance.
-   * @param \Drupal\imagepin\Plugin\WidgetManager $widget_manager
+   * @param WidgetManager $widget_manager
    *   The WidgetManager instance.
-   * @param \Drupal\Core\Session\AccountProxy $current_user
+   * @param AccountProxy $current_user
    *   The current user object.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The EntityTypeManagerInterface instance.
    */
   public function __construct(Connection $connection, SerializationInterface $serializer, WidgetManager $widget_manager, AccountProxy $current_user, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Saves the given widget value.
    *
-   * @param \Drupal\imagepin\Plugin\WidgetInterface $widget
+   * @param WidgetInterface $widget
    *   An instance of the widget plugin.
    * @param mixed $value
    *   The widget value. Because the value will be stored in the database,
@@ @@
   /**
    * Loads all available widget instances for the given entity field view.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity being viewed.
    * @param string $field_name
    *   The machine name of the field being viewed.
@@ @@
   /**
    * Permanently removes all widget records by the given entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    * @param string $langcode
    *   (Optional) When given, only all widget records
@@ @@
   /**
    * Adopts all widget records, which were attached to a new entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    */
   public function adoptFromNew(EntityInterface $entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/imagepin/src/Plugin/WidgetManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/imagepin/src/Plugin/WidgetInterface.php:16

    ---------- begin diff ----------
@@ @@
    *
    * @param array &$form
    *   The currently array build for the pin form.
-   * @param Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The corresponding form state.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/imagepin/src/ImagepinRender.php:45

    ---------- begin diff ----------
@@ @@
    * @see imagepin_attach()
    */
   public static function postRender($markup, $element) {
-    $widgets_html = render($element['#imagepin_widgets']);
+    $widgets_html = \Drupal::service('renderer')->render($element['#imagepin_widgets']);
     return $markup . $widgets_html;
   }
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/imagepin/src/Form/PinWidgetsForm.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The EntityTypeManagerInterface instance.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The EntityDisplayRepositoryInterface instance.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $displayRepository;

@@ @@
   /**
    * The WidgetManager instance.
    *
-   * @var \Drupal\imagepin\Plugin\WidgetManager
+   * @var WidgetManager
    */
   protected $widgetManager;

@@ @@
   /**
    * The WidgetRepository instance.
    *
-   * @var \Drupal\imagepin\WidgetRepository
+   * @var WidgetRepository
    */
   protected $widgetRepository;

@@ @@
   /**
    * The FormBuilder instance.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;

@@ @@
   /**
    * The JSON serializer.
    *
-   * @var \Drupal\Component\Serialization\Json
+   * @var Json
    */
   protected $jsonSerializer;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructor method.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The EntityTypeManagerInterface instance.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $display_repository
+   * @param EntityDisplayRepositoryInterface $display_repository
    *   The EntityDisplayRepositoryInterface instance.
-   * @param \Drupal\imagepin\Plugin\WidgetManager $widget_manager
+   * @param WidgetManager $widget_manager
    *   The WidgetManager instance.
-   * @param \Drupal\imagepin\WidgetRepository $widget_repository
+   * @param WidgetRepository $widget_repository
    *   The WidgetRepository instance.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The FormBuiderInterface instance.
-   * @param \Drupal\Component\Serialization\Json $json_serializer
+   * @param Json $json_serializer
    *   The JSON serializer.
-   * @param \Drupal\Core\Extension\ModuleHandler $module_handler
+   * @param ModuleHandler $module_handler
    *   The module handler.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityDisplayRepositoryInterface $display_repository, WidgetManager $widget_manager, WidgetRepository $widget_repository, FormBuilderInterface $form_builder, Json $json_serializer, ModuleHandler $module_handler) {
@@ @@
    *
    * @param array &$form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param string $plugin_id
    *   (Optional) The widget plugin id as string.
@@ @@
    *
    * @param array &$form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   (Optional) The current request object, usually delivered by the AJAX API.
    */
   public function addNewWidget(array &$form, FormStateInterface $form_state, Request $request = NULL) {
@@ @@
    *
    * @param array &$form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param string $view_mode
    *   The view mode as string.
@@ @@
    *
    * @param array &$form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   (Optional) The current request object, usually delivered by the AJAX API.
    */
   public function removeWidget(array &$form, FormStateInterface $form_state, Request $request = NULL) {
@@ @@
    *
    * @param array &$form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   (Optional) The current request object, usually delivered by the AJAX API.
    */
   public function savePositions(array &$form, FormStateInterface $form_state, Request $request = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/imagepin/src/Annotation/Widget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\imagepin\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


7) modules/contrib/imagepin/imagepin.forms.inc:13

    ---------- begin diff ----------
@@ @@
 /**
  * Builds the imagepin settings element for the given field formatter form.
  *
- * @param \Drupal\Core\Field\FormatterInterface $plugin
+ * @param FormatterInterface $plugin
  *   The field formatter plugin instance.
- * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+ * @param FieldDefinitionInterface $field_definition
  *   The corresponding field definition.
  * @param string $view_mode
  *   The entity view mode.
  * @param array $form
  *   The (entire) configuration form array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state.
  *
  * @return array
@@ @@
  *
  * @param array &$element
  *   The element array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state.
  * @param array $context
  *   The context array.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 7 files have been changed by Rector                                       

