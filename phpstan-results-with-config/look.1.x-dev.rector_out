modules/contrib/look/look.module
modules/contrib/look/look.page.inc
modules/contrib/look/src/Cache/Context/LookCacheContext.php
modules/contrib/look/src/Controller/LookController.php
modules/contrib/look/src/Entity/Look.php
modules/contrib/look/src/Entity/LookInterface.php
modules/contrib/look/src/Entity/LookViewsData.php
modules/contrib/look/src/Form/LookCollectionForm.php
modules/contrib/look/src/Form/LookDeleteForm.php
modules/contrib/look/src/Form/LookForm.php
modules/contrib/look/src/Form/LookRevisionDeleteForm.php
modules/contrib/look/src/Form/LookRevisionRevertForm.php
modules/contrib/look/src/Form/LookRevisionRevertTranslationForm.php
modules/contrib/look/src/Form/SettingsForm.php
modules/contrib/look/src/LookAccessControlHandler.php
modules/contrib/look/src/LookConfig.php
modules/contrib/look/src/LookStorage.php
modules/contrib/look/src/LookStorageInterface.php
modules/contrib/look/src/LookStorageSchema.php
modules/contrib/look/src/LookTranslationHandler.php
modules/contrib/look/src/Plugin/Block/LookSwitcher.php
modules/contrib/look/src/Plugin/Condition/Look.php
modules/contrib/look/src/Plugin/Derivative/ThemeLocalTask.php
modules/contrib/look/src/Plugin/Menu/ThemeDefaultTab.php
modules/contrib/look/src/Theme/LookThemeNegotiator.php
modules/contrib/look/tests/src/Unit/LookSwitcherTest.php

20 files with changes
=====================

1) modules/contrib/look/tests/src/Unit/LookSwitcherTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\look\Unit;

+use Drupal\Core\DependencyInjection\Container;
+use Drupal\Core\Database\Connection;
+use PHPUnit\Framework\MockObject\MockObject;
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Core\Database\Query\SelectInterface;
+use Drupal\Core\Path\PathValidatorInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Link;
 use Drupal\Core\Url;
@@ @@
   /**
    * The tested look switcher block.
    *
-   * @var \Drupal\look\Plugin\Block\LookSwitcher
+   * @var LookSwitcher
    */
   protected $lookSwitcher;

@@ @@
   /**
    * The container.
    *
-   * @var \Drupal\Core\DependencyInjection\Container
+   * @var Container
    */
   protected $container;

@@ @@
   /**
    * The mocked database connection.
    *
-   * @var \Drupal\Core\Database\Connection|\PHPUnit_Framework_MockObject_MockObject
+   * @var Connection|MockObject
    */
   protected $connection;

@@ @@
   /**
    * The mocked current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|\PHPUnit_Framework_MockObject_MockObject
+   * @var Request|MockObject
    */
   protected $request;

@@ @@
   /**
    * The mocked select query.
    *
-   * @var \Drupal\Core\Database\Query\SelectInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var SelectInterface|MockObject
    */
   protected $select;

@@ @@
   /**
    * The mocked current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|\PHPUnit_Framework_MockObject_MockObject
+   * @var Request|MockObject
    */
   protected $statement;

@@ @@
   /**
    * The mocked path validator.
    *
-   * @var \Drupal\Core\Path\PathValidatorInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var PathValidatorInterface|MockObject
    */
   protected $pathValidator;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

-    $this->connection = $this->getMockBuilder('Drupal\Core\Database\Connection')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->request = $this->getMockBuilder('Symfony\Component\HttpFoundation\Request')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->connection = $this->createMock('Drupal\Core\Database\Connection');
+    $this->request = $this->createMock('Symfony\Component\HttpFoundation\Request');
     $this->select = $this->createMock('Drupal\Core\Database\Query\SelectInterface');
     $this->statement = $this->createMock('Drupal\Core\Database\StatementInterface');
     $this->pathValidator = $this->createMock('Drupal\Core\Path\PathValidatorInterface');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/look/src/Theme/LookThemeNegotiator.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The look config.
    *
-   * @var \Drupal\look\LookConfig
+   * @var LookConfig
    */
   protected $lookConfig;

@@ @@
   /**
    * Constructs a new LookThemeNegotiator instance.
    *
-   * @param \Drupal\look\LookConfig $look_config
+   * @param LookConfig $look_config
    *   The look config service.
    */
   public function __construct(LookConfig $look_config) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/look/src/Plugin/Menu/ThemeDefaultTab.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ThemeHandlerInterface $theme_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/look/src/Plugin/Derivative/ThemeLocalTask.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
   /**
    * Constructs a new ThemeLocalTask instance.
    *
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
    */
   public function __construct(ThemeHandlerInterface $theme_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/look/src/Plugin/Condition/Look.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $entityStorage;

@@ @@
   /**
    * The look config.
    *
-   * @var \Drupal\look\LookConfig
+   * @var LookConfig
    */
   protected $lookConfig;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection service.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\look\LookConfig $look_config
+   * @param LookConfig $look_config
    *   The look config service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, Connection $connection, EntityStorageInterface $entity_storage, LookConfig $look_config) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/look/src/Plugin/Block/LookSwitcher.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection service.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, Connection $connection, Request $request) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/look/src/LookStorageInterface.php:22

    ---------- begin diff ----------
@@ @@
    * @param int $id
    *   Look ID to retrieve ancestors for.
    *
-   * @return \Drupal\look\Entity\LookInterface[]
+   * @return LookInterface[]
    *   An array of look objects which are the ancestors of the look $id.
    */
   public function loadParents($id);
@@ @@
    * @param int $id
    *   Look ID to retrieve children for.
    *
-   * @return \Drupal\look\Entity\LookInterface[]
+   * @return LookInterface[]
    *   An array of look objects that are the children of the look $id.
    */
   public function loadChildren($id);
@@ @@
   /**
    * Gets a list of Look revision IDs for a specific Look.
    *
-   * @param \Drupal\look\Entity\LookInterface $entity
+   * @param LookInterface $entity
    *   The Look entity.
    *
    * @return int[]
@@ @@
   /**
    * Gets a list of revision IDs having a given user as Look author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ @@
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\look\Entity\LookInterface $entity
+   * @param LookInterface $entity
    *   The Look entity.
    *
    * @return int
@@ @@
   /**
    * Unsets the language for all Look with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/look/src/LookStorage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\look;

+use Drupal\look\Entity\Look;
 use Drupal\Core\Entity\Sql\SqlContentEntityStorage;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Language\LanguageInterface;
@@ @@
   public function loadParents($id) {
     if (!isset($this->parents[$id])) {
       $parents = [];
-      /** @var \Drupal\look\Entity\Look $look */
+      /** @var Look $look */
       if ($look = $this->load($id)) {
         $parents[$look->id()] = $look;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/look/src/LookConfig.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\look;

+use Symfony\Component\HttpFoundation\Request;
+use Drupal\system\Plugin\Condition\RequestPath;
+use Drupal\look\Entity\Look;
+use Drupal\look\Entity\LookInterface;
+use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * The admin context.
    *
-   * @var \Drupal\Core\Routing\AdminContext
+   * @var AdminContext
    */
   protected $adminContext;

@@ @@
   /**
    * The condition manager.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $conditionManager;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The modifiers service.
    *
-   * @var \Drupal\modifiers\Modifiers
+   * @var Modifiers
    */
   protected $modifiers;

@@ @@
   /**
    * Constructs a new LookConfig instance.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory service.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack service.
-   * @param \Drupal\Core\Routing\AdminContext $admin_context
+   * @param AdminContext $admin_context
    *   The admin context service.
-   * @param \Drupal\Core\Condition\ConditionManager $condition_manager
+   * @param ConditionManager $condition_manager
    *   The condition manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\modifiers\Modifiers $modifiers
+   * @param Modifiers $modifiers
    *   The modifiers service.
    */
   public function __construct(Connection $connection, ConfigFactoryInterface $config_factory, CacheBackendInterface $cache, RequestStack $request_stack, AdminContext $admin_context, ConditionManager $condition_manager, EntityTypeManagerInterface $entity_type_manager, Modifiers $modifiers) {
@@ @@
       $paths = $query->execute()->fetchAllKeyed();

       if (!empty($paths)) {
-        /** @var \Drupal\system\Plugin\Condition\RequestPath $path_check */
+        /** @var RequestPath $path_check */
         $path_check = $this->conditionManager->createInstance('request_path');

         foreach ($paths as $id => $path) {
@@ @@
       $config = $cache->data;
     }
     else {
-      /** @var \Drupal\look\LookStorageInterface $storage */
+      /** @var LookStorageInterface $storage */
       $storage = $this->entityTypeManager->getStorage('look');
       $parents = $storage->loadParents($look_id);

@@ @@
         ];

         $tags = [];
-        /** @var \Drupal\look\Entity\Look $look */
+        /** @var Look $look */
         foreach ($parents as $look) {
           $tags[] = 'look:' . $look->id();
         }
@@ @@
   /**
    * Extracts configuration from look hierarchy.
    *
-   * @param array|\Drupal\look\Entity\LookInterface[] $parents
+   * @param array|LookInterface[] $parents
    *   The set of looks.
    *
    * @return array
@@ @@
       $fields = reset($parents)->getFields();

       foreach ($fields as $field_name => $field) {
-        /** @var \Drupal\Core\Field\FieldItemListInterface $field */
+        /** @var FieldItemListInterface $field */
         $storage = $field->getFieldDefinition()->getFieldStorageDefinition();

         if (!$storage->isBaseField()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/look/src/LookAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\look;

+use Drupal\look\Entity\LookInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\look\Entity\LookInterface $entity */
+    /** @var LookInterface $entity */
     switch ($operation) {
       case 'view':
         if (!$entity->isPublished()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/look/src/Form/SettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\look\Form;

+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
   /**
    * Constructs a new SettingsForm instance.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
    */
   public function __construct(ConfigFactoryInterface $config_factory, Connection $connection, EntityFieldManagerInterface $entity_field_manager, ThemeHandlerInterface $theme_handler) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $theme
    *   The theme name.
@@ @@
         $fields[$name] = $field;
       }

-      /** @var \Drupal\Core\Field\FieldDefinitionInterface $field */
+      /** @var FieldDefinitionInterface $field */
       foreach ($fields as $name => $field) {
         $definition = $field->getFieldStorageDefinition();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/look/src/Form/LookRevisionRevertTranslationForm.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Constructs a new LookRevisionRevertTranslationForm instance.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Look storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, TimeInterface $time, LanguageManagerInterface $language_manager) {
@@ @@
   protected function prepareRevertedRevision(LookInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');

-    /** @var \Drupal\look\Entity\LookInterface $default_revision */
+    /** @var LookInterface $default_revision */
     $latest_revision = $this->lookStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/look/src/Form/LookRevisionRevertForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The Look revision.
    *
-   * @var \Drupal\look\Entity\LookInterface
+   * @var LookInterface
    */
   protected $revision;

@@ @@
   /**
    * The Look storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $lookStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * Constructs a new LookRevisionRevertForm instance.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Look storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, TimeInterface $time) {
@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\look\Entity\LookInterface $revision
+   * @param LookInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\look\Entity\LookInterface
+   * @return LookInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(LookInterface $revision, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/look/src/Form/LookRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\look\Form;

+use Drupal\look\Entity\LookInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
   /**
    * The Look revision.
    *
-   * @var \Drupal\look\Entity\LookInterface
+   * @var LookInterface
    */
   protected $revision;

@@ @@
   /**
    * The Look storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $lookStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new LookRevisionDeleteForm instance.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection, DateFormatterInterface $date_formatter) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/look/src/Form/LookCollectionForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * Constructs a new LookCollectionForm instance.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(Connection $connection, RendererInterface $renderer) {
@@ @@

       // Update look entity only if parent or weight was changed.
       if ((int) $look->parent !== $parent || $look->weight !== $weight) {
-        /** @var \Drupal\look\Entity\Look $look */
+        /** @var Look $look */
         $look = Look::load($id);
         $look->setParent($parent);
         $look->setWeight($weight);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/look/src/Entity/LookInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\look\Entity;

+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\RevisionLogInterface;
 use Drupal\Core\Entity\RevisionableInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
@@ @@
   /**
    * Gets the Look revision author.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity for the revision author.
    */
   public function getRevisionUser();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


17) modules/contrib/look/src/Entity/Look.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\look\Entity;

+use Drupal\look\LookStorageInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Entity\RevisionableContentEntityBase;
@@ @@

     // Check if some deleted entity has children for reassigning.
     foreach ($entities as $entity) {
-      /** @var \Drupal\look\LookStorageInterface $storage */
+      /** @var LookStorageInterface $storage */
       $children = $storage->loadChildren($entity->id());

       /** @var \Drupal\look\Entity\Look $child */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/look/src/Controller/LookController.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new LookController instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, RendererInterface $renderer, DateFormatterInterface $date_formatter) {
@@ @@
   /**
    * Generates an overview table of older revisions of a Look .
    *
-   * @param \Drupal\look\Entity\LookInterface $look
+   * @param LookInterface $look
    *   A Look object.
    *
    * @return array
@@ @@
     $latest_revision = TRUE;

     foreach (array_reverse($vids) as $vid) {
-      /** @var \Drupal\look\Entity\LookInterface $revision */
+      /** @var LookInterface $revision */
       $revision = $look_storage->loadRevision($vid);
       // Only show revisions that are affected by the language that is being
       // displayed.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/look/src/Cache/Context/LookCacheContext.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The look config.
    *
-   * @var \Drupal\look\LookConfig
+   * @var LookConfig
    */
   protected $lookConfig;

@@ @@
   /**
    * Constructs a new LookCacheContext instance.
    *
-   * @param \Drupal\look\LookConfig $look_config
+   * @param LookConfig $look_config
    *   The look config service.
    */
   public function __construct(LookConfig $look_config) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


20) modules/contrib/look/look.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\modifiers\Modifiers;
 /**
  * @file
  * Look module.
@@ @@
   }

   // Initialize modifiers service.
-  /** @var \Drupal\modifiers\Modifiers $modifiers */
+  /** @var Modifiers $modifiers */
   $modifiers = \Drupal::service('modifiers');

   $modifications = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 20 files have been changed by Rector                                      

