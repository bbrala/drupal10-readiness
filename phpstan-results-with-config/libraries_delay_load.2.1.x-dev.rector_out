modules/contrib/libraries_delay_load/libraries_delay_load.module
modules/contrib/libraries_delay_load/modules/libraries_delay_load_rules_integration/src/Plugin/Condition/AdminRoute.php
modules/contrib/libraries_delay_load/modules/libraries_delay_load_rules_integration/src/Plugin/Condition/RouteCondition.php
modules/contrib/libraries_delay_load/modules/libraries_delay_load_rules_integration/src/Plugin/RulesAction/RemoveAllJsStrategies.php
modules/contrib/libraries_delay_load/modules/libraries_delay_load_rules_integration/src/Plugin/RulesAction/SetJsStrategy.php
modules/contrib/libraries_delay_load/src/Asset/JsDelayer.php
modules/contrib/libraries_delay_load/src/Controller/JsDelayStrategyListBuilder.php
modules/contrib/libraries_delay_load/src/Entity/JsDelayStrategy.php
modules/contrib/libraries_delay_load/src/Event/StrategiesOrderAlter.php
modules/contrib/libraries_delay_load/src/Form/JsDelayStrategyDeleteForm.php
modules/contrib/libraries_delay_load/src/Form/JsDelayStrategyDuplicateForm.php
modules/contrib/libraries_delay_load/src/Form/JsDelayStrategyForm.php
modules/contrib/libraries_delay_load/src/Form/ModuleConfigurationForm.php
modules/contrib/libraries_delay_load/src/JsDelayStrategyInterface.php
modules/contrib/libraries_delay_load/tests/modules/libraries_delay_load_strategies_test/src/EventSubscriber/StrategiesOrderTestSubscriber.php
modules/contrib/libraries_delay_load/tests/src/Kernel/JsDelayerStrategiesAlterTest.php
modules/contrib/libraries_delay_load/tests/src/Kernel/JsDelayerTest.php

9 files with changes
====================

1) modules/contrib/libraries_delay_load/tests/src/Kernel/JsDelayerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\libraries_delay_load\Kernel;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\File\FileSystemInterface;
 use Drupal\Component\Utility\Crypt;
 use Drupal\KernelTests\KernelTestBase;

@@ @@
   /**
    * The entity storage for JS Delay Load config entities.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $jsDelayLoadStorage;

@@ @@
   /**
    * The file system interface.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installConfig(['libraries_delay_load']);
@@ @@
     $this->jsDelayLoadStorage = $this->container->get('entity_type.manager')->getStorage('js_delay_strategy');
     $this->fileSystem = $this->container->get('file_system');

-    $this->jsPath = drupal_get_path('module', 'libraries_delay_load_javascript_test') . '/js/';
+    $this->jsPath = \Drupal::service('extension.list.module')->getPath('libraries_delay_load_javascript_test') . '/js/';
   }

   /**
@@ @@
     $randomJs = $this->jsPath . 'js_random.js';
     $this->assertArrayHasKey($randomJs, $resultJavascript);
     $this->assertArrayHasKey($this->jsPath . 'js6.js', $resultJavascript);
-    $selfJs = drupal_get_path('module', 'libraries_delay_load') . '/js/delayer.js';
+    $selfJs = \Drupal::service('extension.list.module')->getPath('libraries_delay_load') . '/js/delayer.js';
     $this->assertArrayHasKey($selfJs, $resultJavascript);

     // Check that a file containing the delayerSettings has been added.
@@ @@
     $randomJs = $this->jsPath . 'js_random.js';
     $this->assertArrayHasKey($randomJs, $resultJavascript);
     $this->assertArrayHasKey($this->jsPath . 'js6.js', $resultJavascript);
-    $selfJs = drupal_get_path('module', 'libraries_delay_load') . '/js/delayer.js';
+    $selfJs = \Drupal::service('extension.list.module')->getPath('libraries_delay_load') . '/js/delayer.js';
     $this->assertArrayHasKey($selfJs, $resultJavascript);

     // Check that a file containing the delayerSettings has been added.
@@ @@
     $this->jsDelayer->processAssetArray($resultJavascript);

     // Remove delayer.js, as should have been removed by the function.
-    $delayerJsFile = drupal_get_path('module', 'libraries_delay_load') . '/js/delayer.js';
+    $delayerJsFile = \Drupal::service('extension.list.module')->getPath('libraries_delay_load') . '/js/delayer.js';
     unset($inputJavascript[$delayerJsFile]);

     $this->assertEquals($resultJavascript, $inputJavascript);
@@ @@
     $inputJavascript[$externalJs2] = ['type' => 'external', 'data' => $externalJs2];

     // We need to add our javascript.
-    $selfJs = drupal_get_path('module', 'libraries_delay_load') . '/js/delayer.js';
+    $selfJs = \Drupal::service('extension.list.module')->getPath('libraries_delay_load') . '/js/delayer.js';
     $inputJavascript[$selfJs] = ['type' => 'file', 'data' => $selfJs];

     return $inputJavascript;
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/libraries_delay_load/tests/src/Kernel/JsDelayerStrategiesAlterTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\libraries_delay_load\Kernel;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\KernelTests\KernelTestBase;

 /**
@@ @@
   /**
    * The entity storage for JS Delay Load config entities.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $jsDelayLoadStorage;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installConfig(['libraries_delay_load']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/libraries_delay_load/tests/modules/libraries_delay_load_strategies_test/src/EventSubscriber/StrategiesOrderTestSubscriber.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * Set the last strategy as the one to use.
    *
-   * @param \Drupal\libraries_delay_load\Event\StrategiesOrderAlter $event
+   * @param StrategiesOrderAlter $event
    *   The event.
    */
   public function updateOrder(StrategiesOrderAlter $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/libraries_delay_load/src/Form/JsDelayStrategyForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The entity storage factory for querying.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $entityStorage;

@@ @@
   /**
    * Construct the JsDelayStrategyForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   An entity query factory for the entity type.
    */
   public function __construct(EntityStorageInterface $entity_storage) {
@@ @@
    *   The entity ID.
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return bool
@@ @@
    *
    * @param array $form
    *   From render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Current state of form.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   From render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Current state of form.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    */
   public function save(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/libraries_delay_load/src/Form/JsDelayStrategyDeleteForm.php:48

    ---------- begin diff ----------
@@ @@
    * delete forms, this is typically the route that points at the list
    * controller.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The URL to go to if the user cancels the deletion.
    */
   public function getCancelUrl() {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/libraries_delay_load/src/Event/StrategiesOrderAlter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\libraries_delay_load\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Event that is fired after we retrieve the collection of available strategies.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/libraries_delay_load/src/Controller/JsDelayStrategyListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\libraries_delay_load\Controller;

+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Config\Entity\DraggableListBuilder;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * Builds a row for an entity in the entity listing.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which to build the row.
    *
    * @return array
@@ @@
    * {@inheritdoc}
    */
   public function getDefaultOperations(EntityInterface $entity) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+    /** @var ConfigEntityInterface $entity */
     $operations = parent::getDefaultOperations($entity);

     if (!$entity->hasLinkTemplate('duplicate-form')) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/libraries_delay_load/src/Asset/JsDelayer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\libraries_delay_load\Asset;

+use Drupal\Core\Config\Config;
+use Drupal\Core\Asset\JsOptimizer;
 use Drupal\Component\Datetime\Time;
 use Drupal\libraries_delay_load\Event\StrategiesOrderAlter;
 use Drupal\Component\Utility\Crypt;
@@ @@
   /**
    * A config object for the libraries_delay_load configuration.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;

@@ @@
   /**
    * A JS asset optimizer.
    *
-   * @var \Drupal\Core\Asset\JsOptimizer
+   * @var JsOptimizer
    */
   protected $optimizer;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * System time service.
    *
-   * @var \Drupal\Component\Datetime\Time
+   * @var Time
    */
   protected $time;

@@ @@
   /**
    * Constructs the JsDelayer object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   A config factory for retrieving required config objects.
-   * @param \Drupal\Core\Asset\AssetOptimizerInterface $optimizer
+   * @param AssetOptimizerInterface $optimizer
    *   The optimizer for a single JS asset.
    * @param \Drupal\Core\Asset\FileSystemInterface $file_system
    *   The file system to write and delete files.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type sevice.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service.
-   * @param \Drupal\Component\Datetime\Time $time
+   * @param Time $time
    *    System time service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, AssetOptimizerInterface $optimizer, FileSystemInterface $file_system, EntityTypeManagerInterface $entity_type_manager, EventDispatcherInterface $event_dispatcher, Time $time) {
@@ @@

     if (!$strategy) {
       // Remove ourselves, as not useful on this page.
-      $delayerJsFile = drupal_get_path('module', 'libraries_delay_load') . '/js/delayer.js';
+      $delayerJsFile = \Drupal::service('extension.list.module')->getPath('libraries_delay_load') . '/js/delayer.js';
       unset($javascript[$delayerJsFile]);
       return;
     }
@@ @@
     $uri = $this->writeFile($fileContent, $cid);

     // Copy the js settings from libraries_delay_load.
-    $delayerJsFile = drupal_get_path('module', 'libraries_delay_load') . '/js/delayer.js';
+    $delayerJsFile = \Drupal::service('extension.list.module')->getPath('libraries_delay_load') . '/js/delayer.js';
     $settingsFile = $javascript[$delayerJsFile];
     $settingsFile['data'] = $uri;
     $javascript['delayerSettings'] = $settingsFile;
@@ @@
     $event = new StrategiesOrderAlter($strategies);

     // Get the event_dispatcher service and dispatch the event.
-    $this->eventDispatcher->dispatch(StrategiesOrderAlter::EVENT_NAME, $event);
+    $this->eventDispatcher->dispatch($event, StrategiesOrderAlter::EVENT_NAME);

     // Get updated strategies list.
     $strategies = $event->getStrategies();
@@ @@
       $uri = $this->writeFile($data, $cid);

       // Only workaround to get the URL from an URI with public://.
-      $url = file_create_url($uri);
+      $url = \Drupal::service('file_url_generator')->generateAbsoluteString($uri);

       // Sets the group at the right position.
       $group[$position] = ['type' => 'external', 'data' => $url];
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


9) modules/contrib/libraries_delay_load/libraries_delay_load.module:53

    ---------- begin diff ----------
@@ @@
 function libraries_delay_load_js_alter(&$javascript, AttachedAssetsInterface $assets) {
   // Only run if we have the delayer library added.
   // The library is currently only attached to pages.
-  $delayerJsFile = drupal_get_path('module', 'libraries_delay_load') . '/js/delayer.js';
+  $delayerJsFile = \Drupal::service('extension.list.module')->getPath('libraries_delay_load') . '/js/delayer.js';
   if (isset($javascript[$delayerJsFile])) {
     \Drupal::service('libraries_delay_load.delayer.js')->processAssetArray($javascript);
   }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/libraries_delay_load/modules/libraries_delay_load_rules_
         integration/src/Plugin/RulesAction/SetJsStrategy.php" file, due to:    
         "Analyze error: "Class Drupal\rules\Core\RulesActionBase not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/libraries_delay_load/modules/libraries_delay_load_rules_
         integration/src/Plugin/RulesAction/RemoveAllJsStrategies.php" file, due
         to:                                                                    
         "Analyze error: "Class Drupal\rules\Core\RulesActionBase not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/libraries_delay_load/modules/libraries_delay_load_rules_
         integration/src/Plugin/Condition/RouteCondition.php" file, due to:     
         "Analyze error: "Class Drupal\rules\Core\RulesConditionBase not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/libraries_delay_load/modules/libraries_delay_load_rules_
         integration/src/Plugin/Condition/AdminRoute.php" file, due to:         
         "Analyze error: "Class Drupal\rules\Core\RulesConditionBase not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [WARNING] 1 nodes were removed                                                 

