diff --git a/modules/warmer_cdn/src/Plugin/warmer/CdnWarmer.php b/modules/warmer_cdn/src/Plugin/warmer/CdnWarmer.php
index ca7f7b1..13caa17 100644
--- a/modules/warmer_cdn/src/Plugin/warmer/CdnWarmer.php
+++ b/modules/warmer_cdn/src/Plugin/warmer/CdnWarmer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\warmer_cdn\Plugin\warmer;
 
+use function GuzzleHttp\Promise\all;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Form\SubformStateInterface;
@@ -28,7 +29,7 @@ final class CdnWarmer extends WarmerPluginBase {
   /**
    * The HTTP client.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   private $httpClient;
 
@@ -80,7 +81,7 @@ final class CdnWarmer extends WarmerPluginBase {
       // Wait for all fired requests if max number is reached.
       $item_keys = array_keys($items);
       if ($key % $max_concurrent_requests == 0 || $key == end($item_keys)) {
-        \GuzzleHttp\Promise\all($promises)->wait();
+        all($promises)->wait();
         $promises = [];
       }
     }
@@ -178,7 +179,7 @@ final class CdnWarmer extends WarmerPluginBase {
   /**
    * Set the HTTP client.
    *
-   * @param \GuzzleHttp\ClientInterface $client
+   * @param ClientInterface $client
    *   The client.
    */
   public function setHttpClient(ClientInterface $client) {
diff --git a/modules/warmer_cdn/src/Plugin/warmer/SitemapWarmer.php b/modules/warmer_cdn/src/Plugin/warmer/SitemapWarmer.php
index 7819ce4..fff2d50 100644
--- a/modules/warmer_cdn/src/Plugin/warmer/SitemapWarmer.php
+++ b/modules/warmer_cdn/src/Plugin/warmer/SitemapWarmer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\warmer_cdn\Plugin\warmer;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use vipnytt\SitemapParser\Exceptions\SitemapParserException;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Form\SubformStateInterface;
@@ -27,21 +28,21 @@ final class SitemapWarmer extends WarmerPluginBase {
   /**
    * The sitemap parser.
    *
-   * @var \vipnytt\SitemapParser
+   * @var SitemapParser
    */
   private $sitemapParser;
 
   /**
    * The CDN warmer.
    *
-   * @var \Drupal\warmer_cdn\Plugin\warmer\CdnWarmer
+   * @var CdnWarmer
    */
   private $warmer;
 
   /**
    * The warmer manager.
    *
-   * @var \Drupal\warmer\Plugin\WarmerPluginManager
+   * @var WarmerPluginManager
    */
   private $warmerManager;
 
@@ -55,7 +56,7 @@ final class SitemapWarmer extends WarmerPluginBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
     $instance = parent::create($container, $configuration, $plugin_id, $plugin_definition);
@@ -173,7 +174,7 @@ final class SitemapWarmer extends WarmerPluginBase {
   /**
    * Set the sitemap parser.
    *
-   * @param \vipnytt\SitemapParser $parser
+   * @param SitemapParser $parser
    *   The client.
    */
   public function setSitemapParser(SitemapParser $parser) {
@@ -183,7 +184,7 @@ final class SitemapWarmer extends WarmerPluginBase {
   /**
    * Set the warmer manager.
    *
-   * @param \Drupal\warmer\Plugin\WarmerPluginManager $warmer_manager
+   * @param WarmerPluginManager $warmer_manager
    *   The warmer manager.
    */
   public function setWarmerManager(WarmerPluginManager $warmer_manager) {
@@ -240,10 +241,10 @@ final class SitemapWarmer extends WarmerPluginBase {
   /**
    * Lazily get the CDN warmer.
    *
-   * @return \Drupal\warmer_cdn\Plugin\warmer\CdnWarmer
+   * @return CdnWarmer
    *   The CDN warmer.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   private function cdnWarmer() {
     if ($this->warmer instanceof CdnWarmer) {
diff --git a/modules/warmer_cdn/src/Plugin/warmer/UserInputParserTrait.php b/modules/warmer_cdn/src/Plugin/warmer/UserInputParserTrait.php
index 6906a49..a994d46 100644
--- a/modules/warmer_cdn/src/Plugin/warmer/UserInputParserTrait.php
+++ b/modules/warmer_cdn/src/Plugin/warmer/UserInputParserTrait.php
@@ -38,7 +38,7 @@ trait UserInputParserTrait {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   private function validateHeaders(array $form, FormStateInterface $form_state) {
diff --git a/modules/warmer_cdn/tests/src/Functional/SitemapWarmerTest.php b/modules/warmer_cdn/tests/src/Functional/SitemapWarmerTest.php
index 48cf5f8..837f492 100644
--- a/modules/warmer_cdn/tests/src/Functional/SitemapWarmerTest.php
+++ b/modules/warmer_cdn/tests/src/Functional/SitemapWarmerTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\warmer_cdn\Functional;
 
+use Drupal\file\FileInterface;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\File\FileSystem;
 use Drupal\Core\Queue\QueueInterface;
 use Drupal\Core\Url;
@@ -31,25 +35,25 @@ final class SitemapWarmerTest extends BrowserTestBase {
   /**
    * The file entity containing the sitemap.
    *
-   * @var \Drupal\file\FileInterface
+   * @var FileInterface
    */
   private $sitemap;
 
   /**
    * The nodes.
    *
-   * @var \Drupal\node\NodeInterface[]
+   * @var NodeInterface[]
    */
   private $nodes = [];
 
   /**
    * The admin user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $adminUser;
 
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->adminUser = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->adminUser);
@@ -125,14 +129,14 @@ final class SitemapWarmerTest extends BrowserTestBase {
    *
    * Where only 2 of the items are valid and have priority higher than 0.7.
    *
-   * @param \Drupal\node\NodeInterface[] $nodes
+   * @param NodeInterface[] $nodes
    *   The nodes to add to the sitemap.
    *
-   * @return \Drupal\file\Entity\File
+   * @return File
    *   The file entity behind the sitemap.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityStorageException
+   * @throws EntityMalformedException
    */
   private function generateSitemaps(array $nodes) {
     $xml = new \DOMDocument('1.0', 'utf-8');
diff --git a/modules/warmer_entity/src/Plugin/warmer/EntityWarmer.php b/modules/warmer_entity/src/Plugin/warmer/EntityWarmer.php
index e548427..815b35c 100644
--- a/modules/warmer_entity/src/Plugin/warmer/EntityWarmer.php
+++ b/modules/warmer_entity/src/Plugin/warmer/EntityWarmer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\warmer_entity\Plugin\warmer;
 
+use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Annotation\Translation;
 use Drupal\Core\Cache\MemoryCache\MemoryCacheInterface;
@@ -25,14 +26,14 @@ final class EntityWarmer extends WarmerPluginBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
    * The in-memory static entity cache.
    *
-   * @var \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface
+   * @var MemoryCacheInterface
    */
   private $entityMemoryCache;
 
@@ -59,7 +60,7 @@ final class EntityWarmer extends WarmerPluginBase {
   /**
    * Injects the entity type manager.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function setEntityTypeManager(EntityTypeManagerInterface $entity_type_manager) {
@@ -69,7 +70,7 @@ final class EntityWarmer extends WarmerPluginBase {
   /**
    * Injects the entity memory cache.
    *
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface $memory_cache
+   * @param MemoryCacheInterface $memory_cache
    *   The memory cache.
    */
   public function setEntityMemoryCache(MemoryCacheInterface $memory_cache) {
@@ -162,7 +163,7 @@ final class EntityWarmer extends WarmerPluginBase {
    * {@inheritdoc}
    */
   public function addMoreConfigurationFormElements(array $form, SubformStateInterface $form_state) {
-    /** @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info */
+    /** @var EntityTypeBundleInfoInterface $bundle_info */
     $bundle_info = \Drupal::service('entity_type.bundle.info');
     $options = [];
     foreach ($this->entityTypeManager->getDefinitions() as $entity_type) {
diff --git a/modules/warmer_entity/tests/src/Functional/EnqueueFormTest.php b/modules/warmer_entity/tests/src/Functional/EnqueueFormTest.php
index 52e4b9f..a90aea7 100644
--- a/modules/warmer_entity/tests/src/Functional/EnqueueFormTest.php
+++ b/modules/warmer_entity/tests/src/Functional/EnqueueFormTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\warmer_entity\Functional;
 
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Queue\QueueInterface;
 use Drupal\Core\Url;
 use Drupal\node\Entity\Node;
@@ -29,11 +31,11 @@ class EnqueueFormTest extends BrowserTestBase {
   /**
    * The admin user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $adminUser;
 
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->adminUser = $this->createUser(['administer site configuration']);
     NodeType::create([
@@ -87,7 +89,7 @@ class EnqueueFormTest extends BrowserTestBase {
 
   /**
    * Creates test content for richer testing.
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   private function createTestContent() {
     Node::create([
diff --git a/src/Annotation/Warmer.php b/src/Annotation/Warmer.php
index 5285a28..2056386 100644
--- a/src/Annotation/Warmer.php
+++ b/src/Annotation/Warmer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\warmer\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -21,7 +22,7 @@ class Warmer extends Plugin {
   /**
    * The human-readable name of the formatter type.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -30,7 +31,7 @@ class Warmer extends Plugin {
   /**
    * A short description of the formatter type.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Commands/WarmerCommands.php b/src/Commands/WarmerCommands.php
index 03e685d..b0fee16 100644
--- a/src/Commands/WarmerCommands.php
+++ b/src/Commands/WarmerCommands.php
@@ -23,32 +23,32 @@ class WarmerCommands extends DrushCommands {
   /**
    * The warmer manager.
    *
-   * @var \Drupal\warmer\Plugin\WarmerPluginManager
+   * @var WarmerPluginManager
    */
   private $warmerManager;
 
   /**
    * The queue manager.
    *
-   * @var \Drupal\warmer\QueueManager
+   * @var QueueManager
    */
   private $queueManager;
 
   /**
    * The queue commands.
    *
-   * @var \Drush\Drupal\Commands\core\QueueCommands
+   * @var QueueCommands
    */
   private $queueCommands;
 
   /**
    * WarmerCommands constructor.
    *
-   * @param \Drupal\warmer\Plugin\WarmerPluginManager $warmer_manager
+   * @param WarmerPluginManager $warmer_manager
    *   The warmer manager.
-   * @param \Drupal\warmer\QueueManager $queue_manager
+   * @param QueueManager $queue_manager
    *   The queue manager.
-   * @param \Drush\Drupal\Commands\core\QueueCommands $queue_commands
+   * @param QueueCommands $queue_commands
    *   The service related to queue commands.
    */
   public function __construct(WarmerPluginManager $warmer_manager, QueueManager $queue_manager, QueueCommands $queue_commands) {
@@ -131,7 +131,7 @@ class WarmerCommands extends DrushCommands {
    * @command warmer:list
    * @aliases warmer-list
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return RowsOfFields
    */
   public function list($options = ['format' => 'table']) {
     $rows = array_map(function (WarmerPluginBase $warmer) {
@@ -153,8 +153,8 @@ class WarmerCommands extends DrushCommands {
    * Annotation value should be the name of the argument/option containing the name.
    *
    * @hook validate @validate-warmer
-   * @param \Consolidation\AnnotatedCommand\CommandData $commandData
-   * @return \Consolidation\AnnotatedCommand\CommandError|NULL
+   * @param CommandData $commandData
+   * @return CommandError|NULL
    */
   public function validateWarmerNames(CommandData $commandData) {
     $arg_name = $commandData->annotationData()->get('validate-warmer', null);
diff --git a/src/Form/EnqueueForm.php b/src/Form/EnqueueForm.php
index fcb3eac..b905aeb 100644
--- a/src/Form/EnqueueForm.php
+++ b/src/Form/EnqueueForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\warmer\Form;
 
+use Drupal\warmer\QueueManager;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Routing\RouteProviderInterface;
@@ -20,21 +21,21 @@ final class EnqueueForm extends FormBase {
   /**
    * The warmer plugin manager.
    *
-   * @var \Drupal\warmer\Plugin\WarmerPluginManager
+   * @var WarmerPluginManager
    */
   private $warmerManager;
 
   /**
    * The queue manager.
    *
-   * @var \Drupal\warmer\QueueManager
+   * @var QueueManager
    */
   private $queueManager;
 
   /**
    * The Route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   private $routeProvider;
 
@@ -55,7 +56,7 @@ final class EnqueueForm extends FormBase {
   /**
    * Set the warmer manager.
    *
-   * @param \Drupal\warmer\Plugin\WarmerPluginManager $warmer_manager
+   * @param WarmerPluginManager $warmer_manager
    *   The plugin manager.
    */
   public function setWarmerManager(WarmerPluginManager $warmer_manager) {
@@ -65,7 +66,7 @@ final class EnqueueForm extends FormBase {
   /**
    * Set the queue manager.
    *
-   * @param \Drupal\warmer\QueueManager $queue_manager
+   * @param QueueManager $queue_manager
    *   The queue manager.
    */
   public function setQueueManager($queue_manager) {
@@ -75,7 +76,7 @@ final class EnqueueForm extends FormBase {
   /**
    * Sets the Route provider.
    *
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
    */
   public function setRouteProvider(RouteProviderInterface $route_provider) {
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index 8f075b7..5d913a4 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -20,7 +20,7 @@ final class SettingsForm extends ConfigFormBase {
   /**
    * The plugin manager for the warmers.
    *
-   * @var \Drupal\warmer\Plugin\WarmerPluginManager
+   * @var WarmerPluginManager
    */
   private $warmerManager;
 
diff --git a/src/HookImplementations.php b/src/HookImplementations.php
index b3f6af0..b71483a 100644
--- a/src/HookImplementations.php
+++ b/src/HookImplementations.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\warmer;
 
+use Drupal\warmer\Plugin\WarmerPluginManager;
+use Drupal\warmer\Plugin\WarmerInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\warmer\Plugin\WarmerPluginBase;
 
@@ -14,7 +16,7 @@ class HookImplementations {
    * Helper function to implement hook_cron.
    */
   public static function enqueueWarmers() {
-    /** @var \Drupal\warmer\Plugin\WarmerPluginManager $warmer_manager */
+    /** @var WarmerPluginManager $warmer_manager */
     $warmer_manager = \Drupal::service('plugin.manager.warmer');
     // Instantiate all the plugin managers.
     $warmer_definitions = $warmer_manager->getDefinitions();
@@ -26,7 +28,7 @@ class HookImplementations {
         return NULL;
       }
     }, $warmer_definitions);
-    /** @var \Drupal\warmer\Plugin\WarmerPluginBase[] $warmers */
+    /** @var WarmerPluginBase[] $warmers */
     $warmers = array_filter($warmers, function ($warmer) {
       return $warmer instanceof WarmerPluginBase;
     });
@@ -42,9 +44,9 @@ class HookImplementations {
   /**
    * Executes one warmer.
    *
-   * @param \Drupal\warmer\Plugin\WarmerPluginBase $warmer
+   * @param WarmerPluginBase $warmer
    *   The warmer plugin.
-   * @param \Drupal\warmer\QueueManager $queue_manager
+   * @param QueueManager $queue_manager
    *   The queue manager.
    */
   private static function singleWarmer(WarmerPluginBase $warmer, QueueManager $queue_manager) {
@@ -65,12 +67,12 @@ class HookImplementations {
    * @return int
    *   The number of successfully warmed items.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public static function warmBatch(array $ids, $warmer_id) {
-    /** @var \Drupal\warmer\Plugin\WarmerPluginManager $warmer_manager */
+    /** @var WarmerPluginManager $warmer_manager */
     $warmer_manager = \Drupal::service('plugin.manager.warmer');
-    /** @var \Drupal\warmer\Plugin\WarmerInterface $warmer */
+    /** @var WarmerInterface $warmer */
     $warmer = $warmer_manager->createInstance($warmer_id);
     $items = $warmer->loadMultiple($ids);
     return $warmer->warmMultiple($items);
diff --git a/src/Plugin/WarmerInterface.php b/src/Plugin/WarmerInterface.php
index 1a65487..f19d783 100644
--- a/src/Plugin/WarmerInterface.php
+++ b/src/Plugin/WarmerInterface.php
@@ -73,7 +73,7 @@ interface WarmerInterface {
    *
    * @param array $form
    *   The configuration form to alter for the this plugin settings.
-   * @param \Drupal\Core\Form\SubformStateInterface $form_state
+   * @param SubformStateInterface $form_state
    *   The form state for the plugin settings.
    *
    * @return array
diff --git a/src/Plugin/WarmerPluginBase.php b/src/Plugin/WarmerPluginBase.php
index b05aa88..fd0627b 100644
--- a/src/Plugin/WarmerPluginBase.php
+++ b/src/Plugin/WarmerPluginBase.php
@@ -27,14 +27,14 @@ abstract class WarmerPluginBase extends PluginBase implements ContainerFactoryPl
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
diff --git a/src/Plugin/WarmerPluginManager.php b/src/Plugin/WarmerPluginManager.php
index 8479a67..6592a33 100644
--- a/src/Plugin/WarmerPluginManager.php
+++ b/src/Plugin/WarmerPluginManager.php
@@ -19,9 +19,9 @@ class WarmerPluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ -33,7 +33,7 @@ class WarmerPluginManager extends DefaultPluginManager {
   /**
    * Instantiates all the warmer plugins.
    *
-   * @return \Drupal\warmer\Plugin\WarmerPluginBase[]
+   * @return WarmerPluginBase[]
    *   The plugin instances.
    */
   public function getWarmers($plugin_ids = NULL) {
diff --git a/src/QueueManager.php b/src/QueueManager.php
index d86554a..aadfaee 100644
--- a/src/QueueManager.php
+++ b/src/QueueManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\warmer;
 
+use Drupal\Core\Queue\QueueInterface;
 use Drupal\Core\Queue\QueueFactory;
 use Drupal\warmer\Plugin\WarmerPluginBase;
 
@@ -15,7 +16,7 @@ class QueueManager {
   /**
    * The queue.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   private $queue;
 
@@ -39,7 +40,7 @@ class QueueManager {
    *   The operation to call when dequeuing.
    * @param array $ids
    *   The list of IDs.
-   * @param \Drupal\warmer\Plugin\WarmerPluginBase $warmer
+   * @param WarmerPluginBase $warmer
    *   The warmer plugin.
    */
   public function enqueueBatch(callable $callback, array $ids, WarmerPluginBase $warmer) {
diff --git a/tests/src/Unit/Plugin/QueueWorker/ItemWarmerTest.php b/tests/src/Unit/Plugin/QueueWorker/ItemWarmerTest.php
index b18f262..fc2c76e 100644
--- a/tests/src/Unit/Plugin/QueueWorker/ItemWarmerTest.php
+++ b/tests/src/Unit/Plugin/QueueWorker/ItemWarmerTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\warmer\Unit\Plugin\QueueWorker;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Tests\UnitTestCase;
 use Drupal\warmer\Plugin\QueueWorker\ItemWarmer;
 use Drupal\warmer\QueueData;
@@ -12,12 +13,13 @@ use Drupal\warmer\QueueData;
  */
 class ItemWarmerTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
-   * @var \Drupal\warmer\Plugin\QueueWorker\ItemWarmer
+   * @var ItemWarmer
    */
   protected $sut;
 
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->sut = new ItemWarmer([], 'warmer', []);
   }
