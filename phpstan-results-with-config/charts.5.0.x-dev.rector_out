modules/contrib/charts/charts.api.php
modules/contrib/charts/charts.install
modules/contrib/charts/charts.module
modules/contrib/charts/charts.post_update.php
modules/contrib/charts/modules/charts_api_example/charts_api_example.module
modules/contrib/charts/modules/charts_api_example/src/Controller/ChartsApiExample.php
modules/contrib/charts/modules/charts_billboard/charts_billboard.install
modules/contrib/charts/modules/charts_billboard/src/Plugin/chart/Library/Billboard.php
modules/contrib/charts/modules/charts_blocks/charts_blocks.module
modules/contrib/charts/modules/charts_blocks/src/Plugin/Block/ChartsBlock.php
modules/contrib/charts/modules/charts_c3/charts_c3.install
modules/contrib/charts/modules/charts_c3/src/Plugin/chart/Library/C3.php
modules/contrib/charts/modules/charts_chartjs/charts_chartjs.install
modules/contrib/charts/modules/charts_chartjs/src/Plugin/chart/Library/Chartjs.php
modules/contrib/charts/modules/charts_google/charts_google.install
modules/contrib/charts/modules/charts_google/src/Plugin/chart/Library/Google.php
modules/contrib/charts/modules/charts_highcharts/charts_highcharts.install
modules/contrib/charts/modules/charts_highcharts/src/Plugin/chart/Library/Highcharts.php
modules/contrib/charts/src/Annotation/Chart.php
modules/contrib/charts/src/ChartManager.php
modules/contrib/charts/src/ColorHelperTrait.php
modules/contrib/charts/src/Element/BaseSettings.php
modules/contrib/charts/src/Element/Chart.php
modules/contrib/charts/src/Element/ChartAxisBase.php
modules/contrib/charts/src/Element/ChartData.php
modules/contrib/charts/src/Element/ChartDataCollectorTable.php
modules/contrib/charts/src/Element/ChartDataItem.php
modules/contrib/charts/src/Element/ChartXaxis.php
modules/contrib/charts/src/Element/ChartYaxis.php
modules/contrib/charts/src/Element/ElementFormStateTrait.php
modules/contrib/charts/src/Event/ChartsEvents.php
modules/contrib/charts/src/Event/TypesInfoEvent.php
modules/contrib/charts/src/Form/ChartsConfigAdvancedForm.php
modules/contrib/charts/src/Form/ChartsConfigForm.php
modules/contrib/charts/src/Plugin/DataType/ChartConfigData.php
modules/contrib/charts/src/Plugin/Field/FieldFormatter/ChartConfigItemDefaultFormatter.php
modules/contrib/charts/src/Plugin/Field/FieldType/ChartConfigItem.php
modules/contrib/charts/src/Plugin/Field/FieldWidget/ChartConfigItemDefaultWidget.php
modules/contrib/charts/src/Plugin/chart/Library/ChartBase.php
modules/contrib/charts/src/Plugin/chart/Library/ChartInterface.php
modules/contrib/charts/src/Plugin/chart/Type/Type.php
modules/contrib/charts/src/Plugin/chart/Type/TypeInterface.php
modules/contrib/charts/src/Plugin/views/display/ChartsPluginDisplayChart.php
modules/contrib/charts/src/Plugin/views/field/BubbleField.php
modules/contrib/charts/src/Plugin/views/field/ExposedChartType.php
modules/contrib/charts/src/Plugin/views/field/ScatterField.php
modules/contrib/charts/src/Plugin/views/style/ChartsPluginStyleChart.php
modules/contrib/charts/src/TypeManager.php
modules/contrib/charts/src/Util/Util.php
modules/contrib/charts/tests/modules/charts_test/src/Form/DataCollectorTableTestForm.php
modules/contrib/charts/tests/src/FunctionalJavascript/DataCollectorTableTest.php

21 files with changes
=====================

1) modules/contrib/charts/tests/src/FunctionalJavascript/DataCollectorTableTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\charts\FunctionalJavascript;

+use Behat\Mink\Element\NodeElement;
+use Drupal\Core\GeneratedUrl;
 use Drupal\charts_test\Form\DataCollectorTableTestForm;
 use Drupal\Core\Url;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
@@ @@
    * @param array $inputs
    *   Input to fill.
    *
-   * @return \Behat\Mink\Element\NodeElement[]
+   * @return NodeElement[]
    *   The node element.
    */
   protected function fillInputs(array $inputs) {
-    /** @var \Behat\Mink\Element\NodeElement[] $inputs */
+    /** @var NodeElement[] $inputs */
     foreach ($inputs as $input) {
       $value = rand(0, count($inputs));
       $input->setValue($value);
@@ @@
   /**
    * Get url of ressources.
    *
-   * @return \Drupal\Core\GeneratedUrl|string
+   * @return GeneratedUrl|string
    *   The url.
    */
   protected function getResourcesUrl() {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/charts/src/Util/Util.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Views Data.
    *
-   * @param \Drupal\views\ViewExecutable|null $view
+   * @param ViewExecutable|null $view
    *   View.
    * @param array $labelValues
    *   Label Values.
@@ @@
   /**
    * Remove hidden fields.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The view.
    * @param array $fieldValues
    *   Field values.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/charts/src/TypeManager.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Constructs a new TypeManager object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache backend.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Even dispatcher.
    */
   public function __construct(ModuleHandlerInterface $module_handler, CacheBackendInterface $cache_backend, EventDispatcherInterface $event_dispatcher) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/charts/src/Plugin/views/style/ChartsPluginStyleChart.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\charts\Plugin\views\style;

+use Drupal\Component\Render\MarkupInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\charts\Plugin\chart\Library\ChartInterface;
 use Drupal\charts\ChartManager;
 use Drupal\charts\TypeManager;
@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected ConfigFactoryInterface $configFactory;

@@ @@
   /**
    * Fields.
    *
-   * @var \Drupal\views\Plugin\views\style\StylePluginBase
+   * @var StylePluginBase
    */
   protected $usesFields = TRUE;

@@ @@
   /**
    * RowPlugin.
    *
-   * @var \Drupal\views\Plugin\views\style\StylePluginBase
+   * @var StylePluginBase
    */
   protected $usesRowPlugin = TRUE;

@@ @@
   /**
    * The chart manager service.
    *
-   * @var \Drupal\charts\ChartManager
+   * @var ChartManager
    */
   protected ChartManager $chartManager;

@@ @@
   /**
    * The chart type manager.
    *
-   * @var \Drupal\charts\TypeManager
+   * @var TypeManager
    */
   protected TypeManager $chartTypeManager;

@@ @@
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected RouteMatchInterface $routeMatch;

@@ @@
   /**
    * The Twig environment.
    *
-   * @var \Drupal\Core\Template\TwigEnvironment
+   * @var TwigEnvironment
    */
   protected TwigEnvironment $twig;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\charts\ChartManager $chart_manager
+   * @param ChartManager $chart_manager
    *   The chart manager service.
-   * @param \Drupal\charts\TypeManager $chart_type_manager
+   * @param TypeManager $chart_type_manager
    *   The chart type manager.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
-   * @param \Drupal\Core\Template\TwigEnvironment $twig
+   * @param TwigEnvironment $twig
    *   The Twig environment.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ConfigFactoryInterface $config_factory, ChartManager $chart_manager, TypeManager $chart_type_manager, RouteMatchInterface $route_match, TwigEnvironment $twig) {
@@ @@
    * @param string $field
    *   The field.
    *
-   * @return \Drupal\Component\Render\MarkupInterface|float|null
+   * @return MarkupInterface|float|null
    *   The value.
    */
   public function processNumberValueFromField($number, $field) {
@@ @@
   /**
    * Returns the selected color.
    *
-   * @param \Drupal\views\Plugin\views\field\EntityField $view_entity_field
+   * @param EntityField $view_entity_field
    *   The view entity field.
-   * @param \Drupal\views\ResultRow $row
+   * @param ResultRow $row
    *   The result row.
    * @param string $group_field_name
    *   The grouping field name.
@@ @@
   private function extractGroupedSelectedColorByEntity(EntityField $view_entity_field, ResultRow $row, string $group_field_name) {
     $chart_settings = $this->options['chart_settings'];
     $colors_settings = $chart_settings['fields']['entity_grouping']['selected_method']['colors'] ?? [];
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $host_entity */
+    /** @var ContentEntityInterface $host_entity */
     $host_entity = $view_entity_field->getEntity($row);
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $referenced_entity */
+    /** @var ContentEntityInterface $referenced_entity */
     $referenced_entity = $host_entity->get($group_field_name)->entity;
     if (!$referenced_entity || !$colors_settings) {
       return '';
@@ @@
   /**
    * Returns the color from the referenced entity field.
    *
-   * @param \Drupal\views\Plugin\views\field\EntityField $view_entity_field
+   * @param EntityField $view_entity_field
    *   The view entity field.
-   * @param \Drupal\views\ResultRow $row
+   * @param ResultRow $row
    *   The result row.
    * @param string $group_field_name
    *   The grouping field name.
@@ @@
     if (!$color_field_name) {
       return '';
     }
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $host_entity */
+    /** @var ContentEntityInterface $host_entity */
     $host_entity = $view_entity_field->getEntity($row);
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $referenced_entity */
+    /** @var ContentEntityInterface $referenced_entity */
     $referenced_entity = $host_entity->get($group_field_name)->entity;
     $field_item_list = $referenced_entity ? $referenced_entity->get($color_field_name) : NULL;
     if (!$field_item_list || $field_item_list->isEmpty()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/charts/src/Plugin/views/field/ScatterField.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, MessengerInterface $messenger) {
@@ @@
   /**
    * Get the value of a simple math field.
    *
-   * @param \Drupal\views\ResultRow $values
+   * @param ResultRow $values
    *   Row results.
    * @param bool $xAxis
    *   Whether we are fetching field one's value.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/charts/src/Plugin/views/field/BubbleField.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, MessengerInterface $messenger) {
@@ @@
   /**
    * Get the value of a simple math field.
    *
-   * @param \Drupal\views\ResultRow $values
+   * @param ResultRow $values
    *   Row results.
    * @param string $fieldset
    *   The items fieldset.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/charts/src/Plugin/Field/FieldWidget/ChartConfigItemDefaultWidget.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
    *   The plugin_id for the widget.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the widget is associated.
    * @param array $settings
    *   The widget settings.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/charts/src/Plugin/Field/FieldFormatter/ChartConfigItemDefaultFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\charts\Plugin\Field\FieldFormatter;

+use Drupal\Core\TypedData\Exception\MissingDataException;
 use Drupal\charts\Element\Chart;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Field\FieldItemInterface;
@@ @@
   /**
    * Builds a renderable array for a single chart item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   The chart field item.
    * @param string $chart_id
    *   The chart id.
@@ @@
    * @return array
    *   A renderable array.
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    */
   protected function viewElement(FieldItemInterface $item, $chart_id) {
     $settings = $item->toArray()['config'];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/charts/src/Form/ChartsConfigForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The cache tags invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;

@@ @@
   /**
    * Constructs a new ChartsConfigForm.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   Cache tag invalidator.
    */
   public function __construct(ConfigFactoryInterface $config_factory, CacheTagsInvalidatorInterface $cache_tags_invalidator) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/charts/src/Element/ElementFormStateTrait.php:14

    ---------- begin diff ----------
@@ @@
    *
    * @param array $parents
    *   The element parents.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array|null
@@ @@
    *
    * @param array $parents
    *   The element parents.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $element_state
    *   The element state.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/charts/src/Element/ChartDataCollectorTable.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\charts\Element;

+use Symfony\Component\HttpFoundation\File\UploadedFile;
+use Drupal\charts\TypeManager;
 use Drupal\charts\ColorHelperTrait;
 use Drupal\charts\Plugin\chart\Library\ChartInterface;
 use Drupal\Component\Utility\Environment;
@@ @@
    *
    * @param array $element
    *   The element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param array $complete_form
    *   The complete form.
@@ @@
    *
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function validateDataCollectorTable(array $element, FormStateInterface $form_state) {
@@ @@
     $element_parents = array_slice($triggering_element['#parents'], 0, -2);
     $id_prefix = implode('-', $element_parents);
     $files = \Drupal::request()->files->get('files');
-    /** @var  \Symfony\Component\HttpFoundation\File\UploadedFile $file_upload */
+    /** @var UploadedFile $file_upload */
     $file_upload = $files[$id_prefix];

     if (!ini_get("auto_detect_line_endings")) {
@@ @@
    *
    * @param array $element_state
    *   The element state storage.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param string $op
    *   The operation.
@@ @@
    *
    * @param array $element_state
    *   The element state storage.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param string $op
    *   The operation.
@@ @@
     $table = $data['data_collector_table'];
     $categories_identifier = $data['table_categories_identifier'];

-    /** @var \Drupal\charts\TypeManager $chart_type_plugin_manager */
+    /** @var TypeManager $chart_type_plugin_manager */
     $chart_type_plugin_manager = \Drupal::service('plugin.manager.charts_type');
     $chart_type = $chart_type_plugin_manager->getDefinition($type);
     $is_single_axis = $chart_type['axis'] === ChartInterface::SINGLE_AXIS;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/charts/src/Element/Chart.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\charts\Element;

+use Drupal\charts\Plugin\chart\Type\TypeInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\charts\Plugin\chart\Library\ChartBase;
 use Drupal\charts\Plugin\chart\Library\ChartInterface;
 use Drupal\charts\ChartManager;
@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The chart plugin manager.
    *
-   * @var \Drupal\charts\ChartManager
+   * @var ChartManager
    */
   protected $chartsManager;

@@ @@
   /**
    * The chart type info service.
    *
-   * @var \Drupal\charts\Plugin\chart\Type\TypeInterface
+   * @var TypeInterface
    */
   protected $chartsTypeManager;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\charts\ChartManager $chart_manager
+   * @param ChartManager $chart_manager
    *   The chart plugin manager.
-   * @param \Drupal\charts\TypeManager $type_manager
+   * @param TypeManager $type_manager
    *   The chart type manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ConfigFactoryInterface $config_factory, ChartManager $chart_manager, TypeManager $type_manager, ModuleHandlerInterface $module_handler) {
@@ @@
    * @return array
    *   The chart element.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function preRender(array $element) {
-    /** @var \Drupal\charts\Plugin\chart\Library\ChartInterface[] $definitions */
+    /** @var ChartInterface[] $definitions */
     $definitions = $this->chartsManager->getDefinitions();

     if (!$definitions) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/charts/src/Element/BaseSettings.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\charts\Element;

+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Component\Plugin\PluginManagerInterface;
+use Drupal\charts\Plugin\chart\Library\ChartInterface;
+use Drupal\charts\Plugin\views\style\ChartsPluginStyleChart;
+use Drupal\charts\ChartManager;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\field\FieldConfigInterface;
+use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\charts\ColorHelperTrait;
 use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\NestedArray;
@@ @@
    *
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param array $complete_form
    *   The complete form.
@@ @@
    * @return array
    *   The element.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public static function processSettings(array &$element, FormStateInterface $form_state, array &$complete_form = []) {
     $supported_usage = ['basic_form', 'config_form', 'view_form'];
@@ @@
    *
    * @param array $element
    *   The chart base settings element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param array $complete_form
    *   The complete form.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public static function validateLibraryPluginConfiguration(array &$element, FormStateInterface $form_state, array &$complete_form) {
     $used_in = $element['#used_in'];
@@ @@
       if (!empty($settings['library'])) {
         $library = $settings['library'];
         $library_form = $library . '_settings';
-        /** @var \Drupal\Component\Plugin\PluginManagerInterface $plugin_manager */
+        /** @var PluginManagerInterface $plugin_manager */
         $plugin_manager = \Drupal::service('plugin.manager.charts');
-        /** @var \Drupal\charts\Plugin\chart\Library\ChartInterface $plugin */
+        /** @var ChartInterface $plugin */
         $plugin = $plugin_manager->createInstance($library);
         $plugin->validateConfigurationForm($element[$library_form], $form_state);
       }
@@ @@
    *
    * @param array $element
    *   An associative array containing the properties of the element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public static function submitLibraryPluginConfiguration(array &$element, FormStateInterface $form_state) {
     $used_in = $element['#used_in'];
@@ @@
       if (!empty($settings['library'])) {
         $library = $settings['library'];
         $library_form = $library . '_settings';
-        /** @var \Drupal\Component\Plugin\PluginManagerInterface $plugin_manager */
+        /** @var PluginManagerInterface $plugin_manager */
         $plugin_manager = \Drupal::service('plugin.manager.charts');
-        /** @var \Drupal\charts\Plugin\chart\Library\ChartInterface $plugin */
+        /** @var ChartInterface $plugin */
         $plugin = $plugin_manager->createInstance($library);
         $plugin->submitConfigurationForm($element[$library_form], $form_state);
         $form_state->setValueForElement($element[$library_form], $plugin->getConfiguration());
@@ @@
    *
    * @param array $element
    *   The form element being processed.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
@@ @@
    *
    * @param array &$form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function executeLibraryElementSubmitHandlers(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array &$element
    *   The current element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function doExecuteLibrarySubmitHandlers(array &$element, FormStateInterface $form_state) {
@@ @@
    *   The options.
    * @param array $complete_form
    *   The complete form where the element is attached to.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
     }

     // Check which selection method the user want to go with.
-    /** @var \Drupal\charts\Plugin\views\style\ChartsPluginStyleChart $style_plugin */
+    /** @var ChartsPluginStyleChart $style_plugin */
     $style_plugin = $element['#view_charts_style_plugin'];
     $view = $style_plugin->view;
     $selection_method_wrapper_id = $view->id() . '--' . $view->current_display . '--' . $style_plugin->getPluginId() . '--fields--entity-grouping--color-selection-method';
@@ @@
    *   The current element.
    * @param array $options
    *   Options.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
    *   The current element.
    * @param array $options
    *   The options.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
    *
    * @param array $element
    *   The element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param string $library
    *   The chart library.
@@ @@
    * @return array
    *   The configuration subform.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   private static function buildLibraryConfigurationForm(array $element, FormStateInterface $form_state, $library) {
     $library_form = $library . '_settings';
     $plugin_configuration = $element['#value'][$library_form] ?? [];
     // Using plugins to get the available installed libraries.
-    /** @var \Drupal\charts\ChartManager $plugin_manager */
+    /** @var ChartManager $plugin_manager */
     $plugin_manager = \Drupal::service('plugin.manager.charts');
-    /** @var \Drupal\charts\Plugin\chart\Library\ChartInterface $plugin */
+    /** @var ChartInterface $plugin */
     $plugin = $plugin_manager->createInstance($library, $plugin_configuration);
     $element[$library_form] = [
       '#type' => 'details',
@@ @@
    *
    * @param array $metadata
    *   The metadata information to use to retrieve the color options.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    *
    * @return array
@@ @@
    *   The color selection table or a markup message when the provided metadata
    *   are incomplete.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private static function buildColorsSelectionSubFormByEntities(array $metadata, EntityTypeManagerInterface $entity_type_manager): array {
     $empty_entity_colors = new TranslatableMarkup("No grouping by an entity reference field was detected or the selected field didnt have any entity or color field attached.");
@@ @@

     // Identifying the vocabulary this field could belong to.
     $field_config_storage = $entity_type_manager->getStorage('field_config');
-    /** @var \Drupal\field\FieldConfigInterface[] $grouping_field_configs */
+    /** @var FieldConfigInterface[] $grouping_field_configs */
     $grouping_field_configs = $field_config_storage->loadByProperties(['field_name' => $metadata['grouping_field_name']]);
     $entity_type_id = $metadata['entity_type_id'];
     $bundle_ids = [];
@@ @@
    *
    * @param array $metadata
    *   The metadata information to use to retrieve the color options.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    *
    * @return array
@@ @@
    *   The select element or the status message when no color options was
    *   found.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private static function buildColorsSelectionSubFormByFieldOnReferencedEntity(array $metadata, EntityTypeManagerInterface $entity_type_manager): array {
     // Identifying the vocabulary this field could belong to.
     $field_config_storage = $entity_type_manager->getStorage('field_config');
-    /** @var \Drupal\field\FieldConfigInterface[] $grouping_field_configs */
+    /** @var FieldConfigInterface[] $grouping_field_configs */
     $grouping_field_configs = $field_config_storage->loadByProperties(['field_name' => $metadata['grouping_field_name']]);
     $entity_type_id = $metadata['entity_type_id'];
     $processed_bundle_ids = [];
-    /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager */
+    /** @var EntityFieldManagerInterface $entity_field_manager */
     $entity_field_manager = \Drupal::service('entity_field.manager');
     $color_field_options = [];
     foreach ($grouping_field_configs as $key => $grouping_field_config) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/charts/src/ChartManager.php:19

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/charts/modules/charts_highcharts/src/Plugin/chart/Library/Highcharts.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The element info manager.
    *
-   * @var \Drupal\Core\Render\ElementInfoManagerInterface
+   * @var ElementInfoManagerInterface
    */
   protected $elementInfo;

@@ @@
   /**
    * The chart type manager.
    *
-   * @var \Drupal\charts\TypeManager
+   * @var TypeManager
    */
   protected $chartTypeManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Render\ElementInfoManagerInterface $element_info
+   * @param ElementInfoManagerInterface $element_info
    *   The element info manager.
-   * @param \Drupal\charts\TypeManager $chart_type_manager
+   * @param TypeManager $chart_type_manager
    *   The chart type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ElementInfoManagerInterface $element_info, TypeManager $chart_type_manager) {
@@ @@
    *
    * @param array $form
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/charts/modules/charts_google/src/Plugin/chart/Library/Google.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The element info manager.
    *
-   * @var \Drupal\Core\Render\ElementInfoManagerInterface
+   * @var ElementInfoManagerInterface
    */
   protected $elementInfo;

@@ @@
   /**
    * The chart type manager.
    *
-   * @var \Drupal\charts\TypeManager
+   * @var TypeManager
    */
   protected $chartTypeManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The element info manager.
-   * @param \Drupal\Core\Render\ElementInfoManagerInterface $element_info
+   * @param ElementInfoManagerInterface $element_info
    *   The element info manager.
-   * @param \Drupal\charts\TypeManager $chart_type_manager
+   * @param TypeManager $chart_type_manager
    *   The chart type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ModuleHandlerInterface $module_handler, ElementInfoManagerInterface $element_info, TypeManager $chart_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/charts/modules/charts_chartjs/src/Plugin/chart/Library/Chartjs.php:79

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/charts/modules/charts_c3/src/Plugin/chart/Library/C3.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The element info manager.
    *
-   * @var \Drupal\Core\Render\ElementInfoManagerInterface
+   * @var ElementInfoManagerInterface
    */
   protected $elementInfo;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Render\ElementInfoManagerInterface $element_info
+   * @param ElementInfoManagerInterface $element_info
    *   The element info manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ElementInfoManagerInterface $element_info) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/charts/modules/charts_blocks/src/Plugin/Block/ChartsBlock.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The UUID service.
    *
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuidService;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/charts/modules/charts_billboard/src/Plugin/chart/Library/Billboard.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The element info manager.
    *
-   * @var \Drupal\Core\Render\ElementInfoManagerInterface
+   * @var ElementInfoManagerInterface
    */
   protected $elementInfo;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Render\ElementInfoManagerInterface $element_info
+   * @param ElementInfoManagerInterface $element_info
    *   The element info manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ElementInfoManagerInterface $element_info) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/charts/modules/charts_api_example/src/Controller/ChartsApiExample.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The UUID service.
    *
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuidService;

@@ @@
   /**
    * The module extension list.
    *
-   * @var \Drupal\Core\Extension\ModuleExtensionList
+   * @var ModuleExtensionList
    */
   protected $moduleList;

@@ @@
   /**
    * Construct.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuidService
+   * @param UuidInterface $uuidService
    *   The UUID service.
-   * @param \Drupal\Core\Extension\ModuleExtensionList $module_list
+   * @param ModuleExtensionList $module_list
    *   The module list.
    */
   public function __construct(MessengerInterface $messenger, UuidInterface $uuidService, ModuleExtensionList $module_list) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 21 files have been changed by Rector                                      

