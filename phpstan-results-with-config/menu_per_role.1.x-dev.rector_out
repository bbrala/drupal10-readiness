modules/contrib/menu_per_role/menu_per_role.install
modules/contrib/menu_per_role/menu_per_role.module
modules/contrib/menu_per_role/src/Cache/Context/RouteIsAdminCacheContext.php
modules/contrib/menu_per_role/src/Form/MenuPerRoleAdminSettings.php
modules/contrib/menu_per_role/src/MenuPerRoleLinkTreeManipulator.php
modules/contrib/menu_per_role/tests/src/Functional/MenuPerRoleAccessTest.php
modules/contrib/menu_per_role/tests/src/Functional/MenuPerRoleAdminAccessTest.php
modules/contrib/menu_per_role/tests/src/Functional/MenuPerRoleFunctionalTestBase.php

8 files with changes
====================

1) modules/contrib/menu_per_role/tests/src/Functional/MenuPerRoleFunctionalTestBase.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\menu_per_role\Functional;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\menu_link_content\MenuLinkContentInterface;
 use Drupal\system\Entity\Menu;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The Drupal config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setUp(): void {
     parent::setUp();
@@ @@
    * @param string $menuId
    *   The menu machine name.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function createMenu(string $menuId): void {
     $menu = Menu::create([
@@ @@
    * @param array $hideMenuRoles
    *   The roles which can't see menu link.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function createOrUpdateMenuLink(string $menuLinkTitle, array $showMenuRoles, array $hideMenuRoles): void {
     $menu_link_storage = $this->entityTypeManager->getStorage('menu_link_content');

-    /** @var \Drupal\menu_link_content\MenuLinkContentInterface[] $existing_menu_links */
+    /** @var MenuLinkContentInterface[] $existing_menu_links */
     $existing_menu_links = $menu_link_storage->loadByProperties(['title' => $menuLinkTitle]);

     if (empty($existing_menu_links)) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/menu_per_role/tests/src/Functional/MenuPerRoleAdminAccessTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\menu_per_role\Functional;

+use Drupal\Core\Entity\EntityStorageException;
+use Behat\Mink\Exception\ExpectationException;
 use Drupal\Core\Session\AccountInterface;

 /**
@@ @@
   /**
    * Check if users have access to menu links.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws EntityStorageException
+   * @throws ExpectationException
+   * @doesNotPerformAssertions
    */
   public function testRoleAccess(): void {
     // Test "Show roles" by role.
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/menu_per_role/tests/src/Functional/MenuPerRoleAccessTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\menu_per_role\Functional;

+use Drupal\user\UserInterface;
+use Drupal\Core\Entity\EntityStorageException;
+use Behat\Mink\Exception\ExpectationException;
 use Drupal\Core\Session\AccountInterface;

 /**
@@ @@
   /**
    * User 1.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user1;

@@ @@
   /**
    * User 2.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user2;

@@ @@
   /**
    * User 3.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user3;

@@ @@
   /**
    * User 4.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user4;

@@ @@
   /**
    * Admin user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $admin;

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setUp(): void {
     parent::setUp();
@@ @@
   /**
    * Check if users have access to menu links.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws EntityStorageException
+   * @throws ExpectationException
+   * @doesNotPerformAssertions
    */
   public function testRoleAccess(): void {
     // Test "Show roles" by role.
@@ @@
   /**
    * Check the admin bypass feature in front.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws EntityStorageException
+   * @throws ExpectationException
+   * @doesNotPerformAssertions
    */
   public function testAdminBypass(): void {
     // No bypass.
@@ @@
    * @param array $expectationsPerUser
    *   The list of expectations for this menu link. Keyed by user property.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function prepareMenuLinkAndExpectations(string $menuLinkTitle, array $showMenuRoles, array $hideMenuRoles, array $expectationsPerUser): void {
     $this->createOrUpdateMenuLink($menuLinkTitle, $showMenuRoles, $hideMenuRoles);
@@ @@
   /**
    * Test if the users can see the expected links.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   protected function linksAccessTest(): void {
     foreach ($this->expectations as $userProperty => $expectations) {
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/menu_per_role/src/MenuPerRoleLinkTreeManipulator.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\menu_per_role;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\user\RoleStorageInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Menu\DefaultMenuLinkTreeManipulators;
@@ @@
   /**
    * The router admin context service.
    *
-   * @var \Drupal\Core\Routing\AdminContext
+   * @var AdminContext
    */
   protected $adminContext;

@@ @@
   /**
    * The config service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;

@@ @@
   /**
    * Sets the admin context.
    *
-   * @param \Drupal\Core\Routing\AdminContext $adminContext
+   * @param AdminContext $adminContext
    *   The router admin context service.
    */
   public function setAdminContext(AdminContext $adminContext): void {
@@ @@
   /**
    * Sets the config service.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The config service.
    */
   public function setConfigFactory(ConfigFactoryInterface $config): void {
@@ @@
   /**
    * Check if the user can bypass the access check.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    *
    * @return bool
    *   TRUE if the Menu Per Role access check should be bypassed.
@@ @@
   /**
    * Check if the current user is admin. Either due to uid 1 or admin roles.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    *
    * @return bool
    *   TRUE if the user admin. FALSE otherwise.
@@ @@

     // Get admin roles only one time.
     if (!$this->adminRoles) {
-      /** @var \Drupal\user\RoleStorageInterface $role_storage */
+      /** @var RoleStorageInterface $role_storage */
       $role_storage = $this->entityTypeManager->getStorage('user_role');
       /** @var string[] $admin_roles */
       $admin_roles = $role_storage->getQuery()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/menu_per_role/src/Form/MenuPerRoleAdminSettings.php:48

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/menu_per_role/src/Cache/Context/RouteIsAdminCacheContext.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The router admin context service.
    *
-   * @var \Drupal\Core\Routing\AdminContext
+   * @var AdminContext
    */
   protected $adminContext;

@@ @@
   /**
    * RouteIsAdminCacheContext constructor.
    *
-   * @param \Drupal\Core\Routing\AdminContext $adminContext
+   * @param AdminContext $adminContext
    *   The router admin context service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/menu_per_role/menu_per_role.module:5

    ---------- begin diff ----------
@@ @@
  */

 declare(strict_types=1);
+use Drupal\menu_link_content\Form\MenuLinkContentForm;
+use Drupal\menu_link_content\MenuLinkContentInterface;

 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
@@ @@
   // Check if content mode setting applies, and if fields should be hidden.
   $is_content = FALSE;
   if ($hide_on_content_mode != MenuPerRoleAdminSettings::MODE_DISPLAY_ON_CONTENT_ALWAYS) {
-    /** @var \Drupal\menu_link_content\Form\MenuLinkContentForm $form_obj */
+    /** @var MenuLinkContentForm $form_obj */
     $form_obj = $form_state->getFormObject();
-    /** @var \Drupal\menu_link_content\MenuLinkContentInterface $menu_link */
+    /** @var MenuLinkContentInterface $menu_link */
     $menu_link = $form_obj->getEntity();
     if (!$menu_link->isNew()) {
       $link_url = $menu_link->getUrlObject();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


8) modules/contrib/menu_per_role/menu_per_role.install:16

    ---------- begin diff ----------
@@ @@
   $admin_see_all = !is_null($config->get('admin_see_all')) ? $config->get('admin_see_all') : FALSE;

   if ($admin_see_all) {
-    /** @var \Drupal\user\Entity\Role[] $roles */
+    /** @var Role[] $roles */
     $roles = Role::loadMultiple();
     foreach ($roles as $role) {
       if ($role->hasPermission('administer menu_per_role')) {
@@ @@
  * Have distinct permissions for front and admin access bypass.
  */
 function menu_per_role_update_8103() : void {
-  /** @var \Drupal\user\Entity\Role[] $roles */
+  /** @var Role[] $roles */
   $roles = Role::loadMultiple();
   foreach ($roles as $role) {
     if ($role->hasPermission('bypass menu_per_role access')) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 8 files have been changed by Rector                                       

