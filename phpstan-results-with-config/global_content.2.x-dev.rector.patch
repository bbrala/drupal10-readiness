diff --git a/composer.json b/composer.json
index 08e2f20..e1a7519 100644
--- a/composer.json
+++ b/composer.json
@@ -22,6 +22,6 @@
         "source": "https://git.drupalcode.org/project/global_content"
     },
     "require": {
-        "drupal/core": "^8 || ^9"
+        "drupal/core": "^8 || ^9 || ^10"
     }
 }
diff --git a/global_content.info.yml b/global_content.info.yml
index 0b56dd9..7c3fd7a 100644
--- a/global_content.info.yml
+++ b/global_content.info.yml
@@ -2,4 +2,4 @@ name: Global Content
 type: module
 description: Allows you to create global content items which will be displayed across the site.
 configure: global_content.settings
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
diff --git a/global_content.module b/global_content.module
index 9d8249b..87702f6 100644
--- a/global_content.module
+++ b/global_content.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\EntityRepository;
 /**
  * @file
  * Contains global_content.module.
@@ -51,7 +52,7 @@ function global_content_create_global_variables(): array {
   $global_content_variables = [];
   $entityTypeManager = \Drupal::entityTypeManager();
 
-  /** @var \Drupal\Core\Entity\EntityRepository $entityRepository */
+  /** @var EntityRepository $entityRepository */
   $entityRepository = \Drupal::service('entity.repository');
 
   // Load the values.
diff --git a/src/Controller/GlobalContentController.php b/src/Controller/GlobalContentController.php
index 82647e4..64ecbc4 100644
--- a/src/Controller/GlobalContentController.php
+++ b/src/Controller/GlobalContentController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\global_content\Controller;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ -24,8 +26,8 @@ class GlobalContentController extends ControllerBase implements ContainerInjecti
    * @return array
    *   An array suitable for drupal_render().
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function revisionShow($global_content_revision) {
     $global_content = $this->entityTypeManager()
@@ -45,8 +47,8 @@ class GlobalContentController extends ControllerBase implements ContainerInjecti
    * @return string
    *   The page title.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function revisionPageTitle($global_content_revision) {
     $global_content = $this->entityTypeManager()
@@ -61,14 +63,14 @@ class GlobalContentController extends ControllerBase implements ContainerInjecti
   /**
    * Generates an overview table of older revisions of a Global Content .
    *
-   * @param \Drupal\global_content\Entity\GlobalContentInterface $global_content
+   * @param GlobalContentInterface $global_content
    *   A Global Content object.
    *
    * @return array
    *   An array as expected by drupal_render().
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function revisionOverview(GlobalContentInterface $global_content) {
     $account = $this->currentUser();
@@ -111,7 +113,9 @@ class GlobalContentController extends ControllerBase implements ContainerInjecti
           ]));
         }
         else {
-          $link = $global_content->link($date);
+          // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+          // Please confirm that `$global_content` is an instance of `\Drupal\Core\Entity\EntityInterface`. Only the method name and not the class name was checked for this replacement, so this may be a false positive.
+          $link = $global_content->toLink($date)->toString();
         }
 
         $row = [];
diff --git a/src/Entity/GlobalContentInterface.php b/src/Entity/GlobalContentInterface.php
index 8618d48..17ce90a 100644
--- a/src/Entity/GlobalContentInterface.php
+++ b/src/Entity/GlobalContentInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\global_content\Entity;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\RevisionLogInterface;
 use Drupal\Core\Entity\RevisionableInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
@@ -95,7 +96,7 @@ interface GlobalContentInterface extends RevisionableInterface, RevisionLogInter
   /**
    * Gets the Global Content revision author.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity for the revision author.
    */
   public function getRevisionUser();
diff --git a/src/Form/GlobalContentForm.php b/src/Form/GlobalContentForm.php
index 64b0eae..3b87713 100644
--- a/src/Form/GlobalContentForm.php
+++ b/src/Form/GlobalContentForm.php
@@ -42,7 +42,7 @@ class GlobalContentForm extends ContentEntityForm {
       $entity->setNewRevision();
 
       // If a new revision is created, save the current user as revision author.
-      $entity->setRevisionCreationTime(REQUEST_TIME);
+      $entity->setRevisionCreationTime(\Drupal::time()->getRequestTime());
       $entity->setRevisionUserId(\Drupal::currentUser()->id());
     }
     else {
diff --git a/src/Form/GlobalContentRevisionDeleteForm.php b/src/Form/GlobalContentRevisionDeleteForm.php
index a9b0a38..10585b4 100644
--- a/src/Form/GlobalContentRevisionDeleteForm.php
+++ b/src/Form/GlobalContentRevisionDeleteForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\global_content\Form;
 
+use Drupal\global_content\Entity\GlobalContentInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ -19,30 +20,30 @@ class GlobalContentRevisionDeleteForm extends ConfirmFormBase {
   /**
    * The Global Content revision.
    *
-   * @var \Drupal\global_content\Entity\GlobalContentInterface
+   * @var GlobalContentInterface
    */
   protected $revision;
 
   /**
    * The Global Content storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $GlobalContentStorage;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * Constructs a new GlobalContentRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection) {
@@ -72,7 +73,7 @@ class GlobalContentRevisionDeleteForm extends ConfirmFormBase {
    * {@inheritdoc}
    */
   public function getQuestion() {
-    return $this->t('Are you sure you want to delete the revision from %revision-date?', ['%revision-date' => format_date($this->revision->getRevisionCreationTime())]);
+    return $this->t('Are you sure you want to delete the revision from %revision-date?', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime())]);
   }
 
   /**
@@ -113,7 +114,7 @@ class GlobalContentRevisionDeleteForm extends ConfirmFormBase {
 
     $this->messenger()
       ->addMessage($this->t('Revision from %revision-date of Global Content %title has been deleted.', [
-        '%revision-date' => format_date($this->revision->getRevisionCreationTime()),
+        '%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()),
         '%title' => $this->revision->label(),
       ]));
 
diff --git a/src/Form/GlobalContentRevisionRevertForm.php b/src/Form/GlobalContentRevisionRevertForm.php
index 07ea7d2..90d9abc 100644
--- a/src/Form/GlobalContentRevisionRevertForm.php
+++ b/src/Form/GlobalContentRevisionRevertForm.php
@@ -20,30 +20,30 @@ class GlobalContentRevisionRevertForm extends ConfirmFormBase {
   /**
    * The Global Content revision.
    *
-   * @var \Drupal\global_content\Entity\GlobalContentInterface
+   * @var GlobalContentInterface
    */
   protected $revision;
 
   /**
    * The Global Content storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $GlobalContentStorage;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * Constructs a new GlobalContentRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Global Content storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter) {
@@ -138,18 +138,18 @@ class GlobalContentRevisionRevertForm extends ConfirmFormBase {
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\global_content\Entity\GlobalContentInterface $revision
+   * @param GlobalContentInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\global_content\Entity\GlobalContentInterface
+   * @return GlobalContentInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(GlobalContentInterface $revision, FormStateInterface $form_state) {
     $revision->setNewRevision();
     $revision->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());
 
     return $revision;
   }
diff --git a/src/Form/GlobalContentRevisionRevertTranslationForm.php b/src/Form/GlobalContentRevisionRevertTranslationForm.php
index d75e9b4..52a0f29 100644
--- a/src/Form/GlobalContentRevisionRevertTranslationForm.php
+++ b/src/Form/GlobalContentRevisionRevertTranslationForm.php
@@ -27,18 +27,18 @@ class GlobalContentRevisionRevertTranslationForm extends GlobalContentRevisionRe
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Constructs a new GlobalContentRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Global Content storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager) {
@@ -96,7 +96,7 @@ class GlobalContentRevisionRevertTranslationForm extends GlobalContentRevisionRe
   protected function prepareRevertedRevision(GlobalContentInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');
 
-    /** @var \Drupal\global_content\Entity\GlobalContentInterface $default_revision */
+    /** @var GlobalContentInterface $default_revision */
     $latest_revision = $this->GlobalContentStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);
 
@@ -110,7 +110,7 @@ class GlobalContentRevisionRevertTranslationForm extends GlobalContentRevisionRe
 
     $latest_revision_translation->setNewRevision();
     $latest_revision_translation->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());
 
     return $latest_revision_translation;
   }
diff --git a/src/Form/GlobalContentSettingsForm.php b/src/Form/GlobalContentSettingsForm.php
index d200449..e51810e 100644
--- a/src/Form/GlobalContentSettingsForm.php
+++ b/src/Form/GlobalContentSettingsForm.php
@@ -27,7 +27,7 @@ class GlobalContentSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -39,7 +39,7 @@ class GlobalContentSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/GlobalContentAccessControlHandler.php b/src/GlobalContentAccessControlHandler.php
index 02c7167..5ca0fe0 100644
--- a/src/GlobalContentAccessControlHandler.php
+++ b/src/GlobalContentAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\global_content;
 
+use Drupal\global_content\Entity\GlobalContentInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -18,7 +19,7 @@ class GlobalContentAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\global_content\Entity\GlobalContentInterface $entity */
+    /** @var GlobalContentInterface $entity */
     switch ($operation) {
       case 'view':
         if (!$entity->isPublished()) {
diff --git a/src/GlobalContentHtmlRouteProvider.php b/src/GlobalContentHtmlRouteProvider.php
index 1be0a50..423a9ad 100644
--- a/src/GlobalContentHtmlRouteProvider.php
+++ b/src/GlobalContentHtmlRouteProvider.php
@@ -52,10 +52,10 @@ class GlobalContentHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ -76,10 +76,10 @@ class GlobalContentHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ -100,10 +100,10 @@ class GlobalContentHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ -124,10 +124,10 @@ class GlobalContentHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ -148,10 +148,10 @@ class GlobalContentHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type) {
@@ -172,10 +172,10 @@ class GlobalContentHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/GlobalContentStorageInterface.php b/src/GlobalContentStorageInterface.php
index 32eb0e5..f139604 100644
--- a/src/GlobalContentStorageInterface.php
+++ b/src/GlobalContentStorageInterface.php
@@ -20,7 +20,7 @@ interface GlobalContentStorageInterface extends ContentEntityStorageInterface {
   /**
    * Gets a list of Global Content revision IDs for a specific Global Content.
    *
-   * @param \Drupal\global_content\Entity\GlobalContentInterface $entity
+   * @param GlobalContentInterface $entity
    *   The Global Content entity.
    *
    * @return int[]
@@ -31,7 +31,7 @@ interface GlobalContentStorageInterface extends ContentEntityStorageInterface {
   /**
    * Gets a list of revision IDs having a given user as Global Content author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ -42,7 +42,7 @@ interface GlobalContentStorageInterface extends ContentEntityStorageInterface {
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\global_content\Entity\GlobalContentInterface $entity
+   * @param GlobalContentInterface $entity
    *   The Global Content entity.
    *
    * @return int
@@ -53,7 +53,7 @@ interface GlobalContentStorageInterface extends ContentEntityStorageInterface {
   /**
    * Unsets the language for all Global Content with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
diff --git a/tests/src/Functional/LoadTest.php b/tests/src/Functional/LoadTest.php
index b6b2911..924391e 100644
--- a/tests/src/Functional/LoadTest.php
+++ b/tests/src/Functional/LoadTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\global_content\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
 
@@ -27,14 +28,14 @@ class LoadTest extends BrowserTestBase {
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
@@ -45,7 +46,7 @@ class LoadTest extends BrowserTestBase {
    */
   public function testLoad() {
     $this->drupalGet(Url::fromRoute('<front>'));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }
 
 }
