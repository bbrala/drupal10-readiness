diff --git a/oauth2_server.api.php b/oauth2_server.api.php
index 435f85c..11615c6 100644
--- a/oauth2_server.api.php
+++ b/oauth2_server.api.php
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\user\UserInterface;
 /**
  * @file
  * OAuth2 Server API documentation.
@@ -21,7 +22,7 @@ function hook_oauth2_server_pre_authorize() {
 /**
  * Allow modules to supply additional claims.
  *
- * @param \Drupal\user\UserInterface $account
+ * @param UserInterface $account
  *   The user account object.
  * @param array $requested_scopes
  *   An array of requested scopes.
@@ -29,7 +30,7 @@ function hook_oauth2_server_pre_authorize() {
  * @return array
  *   An array of additional claims.
  */
-function hook_oauth2_server_claims(\Drupal\user\UserInterface $account, array $requested_scopes) {
+function hook_oauth2_server_claims(UserInterface $account, array $requested_scopes) {
   $claims = [];
   if (in_array('phone', $requested_scopes)) {
     $claims = [
@@ -45,12 +46,12 @@ function hook_oauth2_server_claims(\Drupal\user\UserInterface $account, array $r
  *
  * @param array $claims
  *   An array of claims.
- * @param \Drupal\user\UserInterface $account
+ * @param UserInterface $account
  *   A user account object.
  * @param array $requested_scopes
  *   An array of requested scopes.
  */
-function hook_oauth2_server_user_claims_alter(array $claims, \Drupal\user\UserInterface $account, array $requested_scopes) {
+function hook_oauth2_server_user_claims_alter(array $claims, UserInterface $account, array $requested_scopes) {
   if (in_array('phone', $requested_scopes)) {
     $claims['phone_number'] = '123456';
     $claims['phone_number_verified'] = FALSE;
@@ -63,7 +64,7 @@ function hook_oauth2_server_user_claims_alter(array $claims, \Drupal\user\UserIn
  * Allow any hook_oauth2_server_default_scope() implementations to supply the
  * default scope. The first one to return a scope wins.
  *
- * @param \Drupal\oauth2_server\ServerInterface $server
+ * @param ServerInterface $server
  *   An OAuth2 Server instance.
  *
  * @return string[]
diff --git a/oauth2_server.module b/oauth2_server.module
index fe0deea..53ae028 100644
--- a/oauth2_server.module
+++ b/oauth2_server.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\oauth2_server\TokenInterface;
 /**
  * @file
  * The Oauth2 Server module.
@@ -23,7 +24,7 @@ function oauth2_server_cron() {
     $result = $query->execute();
 
     if ($result) {
-      /** @var \Drupal\oauth2_server\TokenInterface[] $tokens */
+      /** @var TokenInterface[] $tokens */
       $tokens = \Drupal::entityTypeManager()->getStorage($entity_type)
         ->loadMultiple(array_keys($result));
       \Drupal::entityTypeManager()->getStorage($entity_type)
diff --git a/src/Authentication/Provider/OAuth2DrupalAuthProvider.php b/src/Authentication/Provider/OAuth2DrupalAuthProvider.php
index 3506ffc..08e0d6b 100644
--- a/src/Authentication/Provider/OAuth2DrupalAuthProvider.php
+++ b/src/Authentication/Provider/OAuth2DrupalAuthProvider.php
@@ -2,13 +2,13 @@
 
 namespace Drupal\oauth2_server\Authentication\Provider;
 
+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Authentication\AuthenticationProviderInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Symfony\Component\HttpFoundation\Request;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException;
 use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
 use Drupal\oauth2_server\OAuth2HelperInterface;
@@ -24,59 +24,59 @@ class OAuth2DrupalAuthProvider implements AuthenticationProviderInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The OAuth2Storage.
    *
-   * @var \Drupal\oauth2_server\OAuth2StorageInterface
+   * @var OAuth2StorageInterface
    */
   protected $storage;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The logger factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;
 
   /**
    * The time object.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * The OAuth2Helper service.
    *
-   * @var \Drupal\oauth2_server\OAuth2HelperInterface
+   * @var OAuth2HelperInterface
    */
   protected $oauth2Helper;
 
   /**
    * OAuth2 Drupal Auth Provider constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\oauth2_server\OAuth2StorageInterface $oauth2_storage
+   * @param OAuth2StorageInterface $oauth2_storage
    *   The OAuth2 storage object.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time object.
-   * @param \Drupal\oauth2_server\OAuth2HelperInterface $oauth2_helper
+   * @param OAuth2HelperInterface $oauth2_helper
    *   The OAuth2Helper service.
    */
   public function __construct(
@@ -98,7 +98,7 @@ class OAuth2DrupalAuthProvider implements AuthenticationProviderInterface {
   /**
    * Checks whether suitable authentication credentials are on the request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    *
    * @return bool
@@ -173,7 +173,7 @@ class OAuth2DrupalAuthProvider implements AuthenticationProviderInterface {
    *
    * @todo Doesn't appear to be used.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    */
   public function cleanup(Request $request) {}
@@ -183,16 +183,16 @@ class OAuth2DrupalAuthProvider implements AuthenticationProviderInterface {
    *
    * @todo Doesn't appear to be used.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent $event
+   * @param ExceptionEvent $event
    *   The exception object.
    *
    * @return bool
    *   Whether the exception s valid or not.
    */
-  public function handleException(GetResponseForExceptionEvent $event) {
-    $exception = $event->getException();
+  public function handleException(ExceptionEvent $event) {
+    $exception = $event->getThrowable();
     if ($exception instanceof AccessDeniedHttpException) {
-      $event->setException(new UnauthorizedHttpException('Invalid consumer origin.', $exception));
+      $event->setThrowable(new UnauthorizedHttpException('Invalid consumer origin.', $exception));
       return TRUE;
     }
     return FALSE;
diff --git a/src/AuthorizationCodeInterface.php b/src/AuthorizationCodeInterface.php
index 4cb16f0..0bcb532 100644
--- a/src/AuthorizationCodeInterface.php
+++ b/src/AuthorizationCodeInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\oauth2_server;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 
 /**
@@ -14,7 +15,7 @@ interface AuthorizationCodeInterface extends ContentEntityInterface {
   /**
    * Return the user the code belongs to.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user object or FALSE.
    */
   public function getUser();
@@ -22,7 +23,7 @@ interface AuthorizationCodeInterface extends ContentEntityInterface {
   /**
    * Return the client the code belongs to.
    *
-   * @return \Drupal\oauth2_server\ClientInterface
+   * @return ClientInterface
    *   The client object or FALSE.
    */
   public function getClient();
diff --git a/src/ClientInterface.php b/src/ClientInterface.php
index b48202a..b5bdb83 100644
--- a/src/ClientInterface.php
+++ b/src/ClientInterface.php
@@ -14,7 +14,7 @@ interface ClientInterface extends ConfigEntityInterface {
   /**
    * Returns the server the client belongs to.
    *
-   * @return \Drupal\oauth2_server\ServerInterface
+   * @return ServerInterface
    *   Returns the server object the client belongs to.
    */
   public function getServer();
diff --git a/src/ClientListBuilder.php b/src/ClientListBuilder.php
index 70b7bbf..850db9e 100644
--- a/src/ClientListBuilder.php
+++ b/src/ClientListBuilder.php
@@ -51,7 +51,7 @@ class ClientListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+    /** @var ConfigEntityInterface $entity */
     $row = parent::buildRow($entity);
 
     return [
@@ -72,7 +72,7 @@ class ClientListBuilder extends ConfigEntityListBuilder {
   /**
    * {@inheritdoc}
    *
-   * @param \Drupal\oauth2_server\ServerInterface $oauth2_server
+   * @param ServerInterface $oauth2_server
    *   The server of which the clients should be limited to.
    *
    * @return array
@@ -98,12 +98,12 @@ class ClientListBuilder extends ConfigEntityListBuilder {
     ]);
 
     if ($oauth2_server) {
-      /** @var \Drupal\oauth2_server\ClientInterface[] $client */
+      /** @var ClientInterface[] $client */
       $clients = $this->storage
         ->loadByProperties(['server_id' => $oauth2_server->id()]);
     }
     else {
-      /** @var \Drupal\oauth2_server\ClientInterface[] $clients */
+      /** @var ClientInterface[] $clients */
       $clients = $this->storage->loadMultiple();
     }
 
@@ -125,7 +125,7 @@ class ClientListBuilder extends ConfigEntityListBuilder {
    *
    * Will preserve the key/value association of the array.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface[] $entities
+   * @param ConfigEntityInterface[] $entities
    *   An array of config entities.
    */
   protected function sortAlphabetically(array &$entities) {
diff --git a/src/Controller/OAuth2Controller.php b/src/Controller/OAuth2Controller.php
index 9c6d828..3829fbb 100644
--- a/src/Controller/OAuth2Controller.php
+++ b/src/Controller/OAuth2Controller.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\oauth2_server\Controller;
 
+use Drupal\Core\Logger\LoggerChannel;
+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\oauth2_server\ClientInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Logger\LoggerChannelFactory;
 use Drupal\Core\PrivateKey;
@@ -31,41 +36,41 @@ class OAuth2Controller extends ControllerBase {
   /**
    * The OAuth2Storage service.
    *
-   * @var \Drupal\oauth2_server\OAuth2StorageInterface
+   * @var OAuth2StorageInterface
    */
   protected $storage;
 
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\State
+   * @var State
    */
   protected $state;
 
   /**
    * The private key service.
    *
-   * @var \Drupal\Core\PrivateKey
+   * @var PrivateKey
    */
   protected $privateKey;
 
   /**
    * The logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannel|\Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannel|LoggerChannelInterface
    */
   protected $logger;
 
   /**
    * The class constructor.
    *
-   * @param \Drupal\oauth2_server\OAuth2StorageInterface $oauth2_storage
+   * @param OAuth2StorageInterface $oauth2_storage
    *   The oauth2 storage service.
-   * @param \Drupal\Core\State\State $state
+   * @param State $state
    *   The state service.
-   * @param \Drupal\Core\PrivateKey $private_key
+   * @param PrivateKey $private_key
    *   The private key service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactory $logger_factory
+   * @param LoggerChannelFactory $logger_factory
    *   The logger factory service.
    */
   public function __construct(
@@ -95,16 +100,16 @@ class OAuth2Controller extends ControllerBase {
   /**
    * Authorize.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match object.
    * @param \Symfony\Component\HttpFoundation\Request $request
    *   The request object.
    *
-   * @return array|\OAuth2\HttpFoundationBridge\Response|\Symfony\Component\HttpFoundation\JsonResponse|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return array|\OAuth2\HttpFoundationBridge\Response|JsonResponse|RedirectResponse
    *   A form array or a response object.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function authorize(RouteMatchInterface $route_match, Request $request) {
     $this->moduleHandler()->invokeAll('oauth2_server_pre_authorize');
@@ -136,7 +141,7 @@ class OAuth2Controller extends ControllerBase {
 
     $client = FALSE;
     if ($bridgeRequest->get('client_id')) {
-      /** @var \Drupal\oauth2_server\ClientInterface[] $clients */
+      /** @var ClientInterface[] $clients */
       $clients = $this->entityTypeManager()->getStorage('oauth2_server_client')
         ->loadByProperties([
           'client_id' => $bridgeRequest->get('client_id'),
@@ -200,16 +205,16 @@ class OAuth2Controller extends ControllerBase {
   /**
    * Token.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match object.
    * @param \Symfony\Component\HttpFoundation\Request $request
    *   The request object.
    *
-   * @return \OAuth2\HttpFoundationBridge\Response|\Symfony\Component\HttpFoundation\JsonResponse
+   * @return \OAuth2\HttpFoundationBridge\Response|JsonResponse
    *   A response object.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function token(RouteMatchInterface $route_match, Request $request) {
     $bridgeRequest = BridgeRequest::createFromRequest($request);
@@ -218,7 +223,7 @@ class OAuth2Controller extends ControllerBase {
     // Get the client and use it to load the server and initialize the server.
     $client = FALSE;
     if ($client_credentials) {
-      /** @var \Drupal\oauth2_server\ClientInterface[] $clients */
+      /** @var ClientInterface[] $clients */
       $clients = $this->entityTypeManager()->getStorage('oauth2_server_client')
         ->loadByProperties(['client_id' => $client_credentials['client_id']]);
       if ($clients) {
@@ -241,12 +246,12 @@ class OAuth2Controller extends ControllerBase {
   /**
    * Tokens.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match object.
    * @param \Symfony\Component\HttpFoundation\Request $request
    *   The request object.
    *
-   * @return \OAuth2\HttpFoundationBridge\Response|\Symfony\Component\HttpFoundation\JsonResponse
+   * @return \OAuth2\HttpFoundationBridge\Response|JsonResponse
    *   The response object.
    */
   public function tokens(RouteMatchInterface $route_match, Request $request) {
@@ -266,7 +271,7 @@ class OAuth2Controller extends ControllerBase {
   /**
    * User info.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match object.
    * @param \Symfony\Component\HttpFoundation\Request $request
    *   The request object.
@@ -274,8 +279,8 @@ class OAuth2Controller extends ControllerBase {
    * @return \OAuth2\HttpFoundationBridge\Response
    *   The response object.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function userInfo(RouteMatchInterface $route_match, Request $request) {
     $bridgeRequest = BridgeRequest::createFromRequest($request);
@@ -284,7 +289,7 @@ class OAuth2Controller extends ControllerBase {
     // Get the client and use it to load the server and initialize the server.
     $client = FALSE;
     if ($client_credentials) {
-      /** @var \Drupal\oauth2_server\ClientInterface[] $clients */
+      /** @var ClientInterface[] $clients */
       $clients = $this->entityTypeManager()->getStorage('oauth2_server_client')
         ->loadByProperties(['client_id' => $client_credentials['client_id']]);
       if ($clients) {
@@ -306,7 +311,7 @@ class OAuth2Controller extends ControllerBase {
   /**
    * Revoke.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match service.
    * @param \Symfony\Component\HttpFoundation\Request $request
    *   The current request object.
@@ -314,8 +319,8 @@ class OAuth2Controller extends ControllerBase {
    * @return \OAuth2\HttpFoundationBridge\Response
    *   A response object.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function revoke(RouteMatchInterface $route_match, Request $request) {
     $bridgeRequest = BridgeRequest::createFromRequest($request);
@@ -324,7 +329,7 @@ class OAuth2Controller extends ControllerBase {
     // Get the client and use it to load the server and initialize the server.
     $client = FALSE;
     if ($client_credentials) {
-      /** @var \Drupal\oauth2_server\ClientInterface[] $clients */
+      /** @var ClientInterface[] $clients */
       $clients = $this->entityTypeManager()->getStorage('oauth2_server_client')
         ->loadByProperties(['client_id' => $client_credentials['client_id']]);
       if ($clients) {
@@ -346,12 +351,12 @@ class OAuth2Controller extends ControllerBase {
   /**
    * Certificates.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match object.
    * @param \Symfony\Component\HttpFoundation\Request $request
    *   The request object.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The response object.
    */
   public function certificates(RouteMatchInterface $route_match, Request $request) {
@@ -367,12 +372,12 @@ class OAuth2Controller extends ControllerBase {
    * Output the public key as a JSON blob in JWK format, for ease of
    * consumption by clients that support it.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match object.
    * @param \Symfony\Component\HttpFoundation\Request $request
    *   The request object.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The response object.
    *
    * @see https://tools.ietf.org/html/rfc7517
diff --git a/src/Controller/ServerClientController.php b/src/Controller/ServerClientController.php
index b1199e9..10c0c7c 100644
--- a/src/Controller/ServerClientController.php
+++ b/src/Controller/ServerClientController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\oauth2_server\Controller;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\oauth2_server\ServerInterface;
 use Drupal\oauth2_server\ClientInterface;
@@ -16,7 +18,7 @@ class ServerClientController extends ControllerBase {
   /**
    * Return a list of clients for a OAuth2 server.
    *
-   * @param \Drupal\oauth2_server\ServerInterface $oauth2_server
+   * @param ServerInterface $oauth2_server
    *   The server to display the clients of.
    *
    * @return array
@@ -31,7 +33,7 @@ class ServerClientController extends ControllerBase {
   /**
    * Returns the page title for an server's "Clients" tab.
    *
-   * @param \Drupal\oauth2_server\ServerInterface $oauth2_server
+   * @param ServerInterface $oauth2_server
    *   The server that is displayed.
    *
    * @return string
@@ -44,14 +46,14 @@ class ServerClientController extends ControllerBase {
   /**
    * Returns the form for adding a client to a server.
    *
-   * @param \Drupal\oauth2_server\ServerInterface $oauth2_server
+   * @param ServerInterface $oauth2_server
    *   The server the client should belong to.
    *
    * @return array
    *   The renderable form array.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function serverAddClient(ServerInterface $oauth2_server) {
     $client = $this->entityTypeManager()
@@ -64,9 +66,9 @@ class ServerClientController extends ControllerBase {
   /**
    * Returns the form for editing a client to a server.
    *
-   * @param \Drupal\oauth2_server\ServerInterface $oauth2_server
+   * @param ServerInterface $oauth2_server
    *   The server the client should belong to.
-   * @param \Drupal\oauth2_server\ClientInterface $oauth2_server_client
+   * @param ClientInterface $oauth2_server_client
    *   The client entity.
    *
    * @return array
@@ -80,9 +82,9 @@ class ServerClientController extends ControllerBase {
   /**
    * Returns the form for deleting a client to a server.
    *
-   * @param \Drupal\oauth2_server\ServerInterface $oauth2_server
+   * @param ServerInterface $oauth2_server
    *   The server the client should belong to.
-   * @param \Drupal\oauth2_server\ClientInterface $oauth2_server_client
+   * @param ClientInterface $oauth2_server_client
    *   The client entity.
    *
    * @return array
diff --git a/src/Controller/ServerController.php b/src/Controller/ServerController.php
index 024683e..af2be1a 100644
--- a/src/Controller/ServerController.php
+++ b/src/Controller/ServerController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\oauth2_server\Controller;
 
+use Symfony\Component\HttpFoundation\Response;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\oauth2_server\ServerInterface;
 
@@ -15,13 +17,13 @@ class ServerController extends ControllerBase {
   /**
    * Enables a OAuth2 server without a confirmation form.
    *
-   * @param \Drupal\oauth2_server\ServerInterface $oauth2_server
+   * @param ServerInterface $oauth2_server
    *   The server to be enabled.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The response to send to the browser.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function serverBypassEnable(ServerInterface $oauth2_server) {
     $oauth2_server->setStatus(TRUE)->save();
diff --git a/src/Controller/ServerScopeController.php b/src/Controller/ServerScopeController.php
index 684e9a7..33b2b88 100644
--- a/src/Controller/ServerScopeController.php
+++ b/src/Controller/ServerScopeController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\oauth2_server\Controller;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\oauth2_server\ServerInterface;
 use Drupal\oauth2_server\ScopeInterface;
@@ -16,7 +18,7 @@ class ServerScopeController extends ControllerBase {
   /**
    * Return a list of scopes for a OAuth2 server.
    *
-   * @param \Drupal\oauth2_server\ServerInterface $oauth2_server
+   * @param ServerInterface $oauth2_server
    *   The server to display the scopes of.
    *
    * @return array
@@ -30,7 +32,7 @@ class ServerScopeController extends ControllerBase {
   /**
    * Returns the page title for an server's "Scopes" tab.
    *
-   * @param \Drupal\oauth2_server\ServerInterface $oauth2_server
+   * @param ServerInterface $oauth2_server
    *   The server that is displayed.
    *
    * @return string
@@ -43,14 +45,14 @@ class ServerScopeController extends ControllerBase {
   /**
    * Returns the form for adding a scope to a server.
    *
-   * @param \Drupal\oauth2_server\ServerInterface $oauth2_server
+   * @param ServerInterface $oauth2_server
    *   The server the scope should belong to.
    *
    * @return array
    *   The renderable form array.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function serverAddScope(ServerInterface $oauth2_server) {
     $scope = $this->entityTypeManager()
@@ -63,9 +65,9 @@ class ServerScopeController extends ControllerBase {
   /**
    * Returns the form for editing a scope to a server.
    *
-   * @param \Drupal\oauth2_server\ServerInterface $oauth2_server
+   * @param ServerInterface $oauth2_server
    *   The server the scope should belong to.
-   * @param \Drupal\oauth2_server\ScopeInterface $oauth2_server_scope
+   * @param ScopeInterface $oauth2_server_scope
    *   The scope entity.
    *
    * @return array
@@ -79,9 +81,9 @@ class ServerScopeController extends ControllerBase {
   /**
    * Returns the form for deleting a scope to a server.
    *
-   * @param \Drupal\oauth2_server\ServerInterface $oauth2_server
+   * @param ServerInterface $oauth2_server
    *   The server the scope should belong to.
-   * @param \Drupal\oauth2_server\ScopeInterface $oauth2_server_scope
+   * @param ScopeInterface $oauth2_server_scope
    *   The scope entity.
    *
    * @return array
diff --git a/src/Entity/Client.php b/src/Entity/Client.php
index 827880a..e7635c8 100644
--- a/src/Entity/Client.php
+++ b/src/Entity/Client.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\oauth2_server\Entity;
 
+use Drupal\oauth2_server\ServerInterface;
+use Drupal\Core\Password\PasswordInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\oauth2_server\ClientInterface;
 
@@ -63,7 +65,7 @@ class Client extends ConfigEntityBase implements ClientInterface {
   /**
    * The loaded server.
    *
-   * @var \Drupal\oauth2_server\ServerInterface
+   * @var ServerInterface
    */
   protected $server;
 
@@ -177,7 +179,7 @@ class Client extends ConfigEntityBase implements ClientInterface {
       return $client_secret;
     }
 
-    /** @var \Drupal\Core\Password\PasswordInterface $password_hasher */
+    /** @var PasswordInterface $password_hasher */
     $password_hasher = \Drupal::service('password');
     return $password_hasher->hash($client_secret);
   }
diff --git a/src/Entity/Scope.php b/src/Entity/Scope.php
index bcff032..a06f6e2 100644
--- a/src/Entity/Scope.php
+++ b/src/Entity/Scope.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\oauth2_server\Entity;
 
+use Drupal\oauth2_server\ServerInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\oauth2_server\ScopeInterface;
@@ -63,7 +64,7 @@ class Scope extends ConfigEntityBase implements ScopeInterface {
   /**
    * The loaded server.
    *
-   * @var \Drupal\oauth2_server\ServerInterface
+   * @var ServerInterface
    */
   protected $server;
 
diff --git a/src/Entity/Server.php b/src/Entity/Server.php
index 9156b05..bdc6fa2 100644
--- a/src/Entity/Server.php
+++ b/src/Entity/Server.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\oauth2_server\Entity;
 
+use Drupal\oauth2_server\ScopeInterface;
+use Drupal\oauth2_server\ClientInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\oauth2_server\ServerInterface;
@@ -130,7 +132,7 @@ class Server extends ConfigEntityBase implements ServerInterface {
         'profile' => 'View basic information about your account.',
       ];
       foreach ($openid_scopes as $id => $description) {
-        /** @var \Drupal\oauth2_server\ScopeInterface $scope */
+        /** @var ScopeInterface $scope */
         $scope = $this->entityTypeManager()->getStorage('oauth2_server_scope')
           ->load($this->id() . '_' . $id);
         if (!$scope) {
@@ -147,7 +149,7 @@ class Server extends ConfigEntityBase implements ServerInterface {
     // If OpenID Connect was just disabled, delete its scopes.
     if ($previous_value && !$current_value) {
       $scope_names = ['openid', 'offline_access', 'email', 'profile'];
-      /** @var \Drupal\oauth2_server\ScopeInterface[] $scopes */
+      /** @var ScopeInterface[] $scopes */
       $scopes = $this->entityTypeManager()->getStorage('oauth2_server_scope')
         ->loadByProperties([
           'server_id' => $this->id(),
@@ -171,7 +173,7 @@ class Server extends ConfigEntityBase implements ServerInterface {
     parent::delete();
 
     // Clean up scopes.
-    /** @var \Drupal\oauth2_server\ScopeInterface[] $scopes */
+    /** @var ScopeInterface[] $scopes */
     $scopes = $this->entityTypeManager()->getStorage('oauth2_server_scope')
       ->loadByProperties(['server_id' => $this->id()]);
     foreach ($scopes as $scope) {
@@ -179,7 +181,7 @@ class Server extends ConfigEntityBase implements ServerInterface {
     }
 
     // Clean up clients.
-    /** @var \Drupal\oauth2_server\ClientInterface[] $clients */
+    /** @var ClientInterface[] $clients */
     $clients = $this->entityTypeManager()->getStorage('oauth2_server_client')
       ->loadByProperties(['server_id' => $this->id()]);
     foreach ($clients as $client) {
diff --git a/src/Form/AuthorizeForm.php b/src/Form/AuthorizeForm.php
index 041c624..2335752 100644
--- a/src/Form/AuthorizeForm.php
+++ b/src/Form/AuthorizeForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\oauth2_server\Form;
 
+use Drupal\Core\Config\Config;
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -23,48 +25,48 @@ class AuthorizeForm extends FormBase {
   /**
    * The OAuth2Storage.
    *
-   * @var \Drupal\oauth2_server\OAuth2StorageInterface
+   * @var OAuth2StorageInterface
    */
   protected $storage;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    */
   protected $account;
 
   /**
    * The translation manager.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationManager
+   * @var TranslationManager
    */
   protected $translation;
 
   /**
    * Site config.
    *
-   * @var \Drupal\Core\Config\Config|\Drupal\Core\Config\ImmutableConfig
+   * @var Config|ImmutableConfig
    */
   protected $siteConfig;
 
   /**
    * Theme config.
    *
-   * @var \Drupal\Core\Config\Config|\Drupal\Core\Config\ImmutableConfig
+   * @var Config|ImmutableConfig
    */
   protected $themeConfig;
 
   /**
    * Authorize Form constructor.
    *
-   * @param \Drupal\oauth2_server\OAuth2StorageInterface $oauth2_storage
+   * @param OAuth2StorageInterface $oauth2_storage
    *   The OAuth2 storage object.
-   * @param \Drupal\Core\Session\AccountProxy $account
+   * @param AccountProxy $account
    *   The current user account object.
-   * @param \Drupal\Core\StringTranslation\TranslationManager $translation_manager
+   * @param TranslationManager $translation_manager
    *   The translation manager object.
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The config factory object.
    */
   public function __construct(
@@ -118,7 +120,7 @@ class AuthorizeForm extends FormBase {
           <img src="' . base_path() . 'core/misc/icons/73b355/check.svg" alt="" width="25" height="25">
         </div>
         <div class="item">
-          <img src="' . ($this->themeConfig->get('logo.path') ? file_create_url($this->themeConfig->get('logo.path')) : base_path() . 'core/misc/logo/drupal-logo.svg') . '" alt="" width="50" height="50">
+          <img src="' . ($this->themeConfig->get('logo.path') ? \Drupal::service('file_url_generator')->generateAbsoluteString($this->themeConfig->get('logo.path')) : base_path() . 'core/misc/logo/drupal-logo.svg') . '" alt="" width="50" height="50">
         </div>
     </div>',
       ];
diff --git a/src/Form/ClientForm.php b/src/Form/ClientForm.php
index 002c504..849c150 100644
--- a/src/Form/ClientForm.php
+++ b/src/Form/ClientForm.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\oauth2_server\Form;
 
+use Drupal\oauth2_server\ClientInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Entity\Query\QueryInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityTypeManager;
@@ -19,32 +24,32 @@ class ClientForm extends EntityForm {
   /**
    * The client entity.
    *
-   * @var \Drupal\oauth2_server\ClientInterface
+   * @var ClientInterface
    */
   protected $entity;
 
   /**
    * The client storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;
 
   /**
    * The entity query factory.
    *
-   * @var \Drupal\Core\Entity\Query\QueryInterface
+   * @var QueryInterface
    */
   protected $entityQuery;
 
   /**
    * ClientForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
+   * @param EntityTypeManager $entity_type_manager
    *   The entity type manager.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManager $entity_type_manager) {
     $this->storage = $entity_type_manager->getStorage('oauth2_server_client');
diff --git a/src/Form/ScopeForm.php b/src/Form/ScopeForm.php
index fc3fb3e..3cfa645 100644
--- a/src/Form/ScopeForm.php
+++ b/src/Form/ScopeForm.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\oauth2_server\Form;
 
+use Drupal\oauth2_server\ScopeInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -17,25 +21,25 @@ class ScopeForm extends EntityForm {
   /**
    * The scope entity.
    *
-   * @var \Drupal\oauth2_server\ScopeInterface
+   * @var ScopeInterface
    */
   protected $entity;
 
   /**
    * The scope storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;
 
   /**
    * Scope Form constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
     $this->storage = $entity_type_manager->getStorage('oauth2_server_scope');
diff --git a/src/Form/ServerDisableConfirmForm.php b/src/Form/ServerDisableConfirmForm.php
index 429bb01..f0cc8a1 100644
--- a/src/Form/ServerDisableConfirmForm.php
+++ b/src/Form/ServerDisableConfirmForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\oauth2_server\Form;
 
+use Drupal\oauth2_server\ServerInterface;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -45,7 +46,7 @@ class ServerDisableConfirmForm extends EntityConfirmFormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\oauth2_server\ServerInterface $server */
+    /** @var ServerInterface $server */
     $server = $this->entity;
     $server->setStatus(FALSE)->save();
 
diff --git a/src/Form/ServerForm.php b/src/Form/ServerForm.php
index 624f9a1..59e80fb 100644
--- a/src/Form/ServerForm.php
+++ b/src/Form/ServerForm.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\oauth2_server\Form;
 
+use Drupal\oauth2_server\ServerInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -18,25 +22,25 @@ class ServerForm extends EntityForm {
   /**
    * The server entity.
    *
-   * @var \Drupal\oauth2_server\ServerInterface
+   * @var ServerInterface
    */
   protected $entity;
 
   /**
    * The server storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;
 
   /**
    * ServerForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
     $this->storage = $entity_type_manager->getStorage('oauth2_server');
diff --git a/src/OAuth2Helper.php b/src/OAuth2Helper.php
index 89a181f..d3b1bb4 100644
--- a/src/OAuth2Helper.php
+++ b/src/OAuth2Helper.php
@@ -12,14 +12,14 @@ class OAuth2Helper implements OAuth2HelperInterface {
   /**
    * The OAuth2Storage.
    *
-   * @var \Drupal\oauth2_server\OAuth2StorageInterface
+   * @var OAuth2StorageInterface
    */
   protected $storage;
 
   /**
    * OAuth2Helper constructor.
    *
-   * @param \Drupal\oauth2_server\OAuth2StorageInterface $oauth2_storage
+   * @param OAuth2StorageInterface $oauth2_storage
    *   The OAuth2 storage service.
    */
   public function __construct(
diff --git a/src/OAuth2HelperInterface.php b/src/OAuth2HelperInterface.php
index 1675255..9828eac 100644
--- a/src/OAuth2HelperInterface.php
+++ b/src/OAuth2HelperInterface.php
@@ -12,7 +12,7 @@ interface OAuth2HelperInterface {
   /**
    * Checks whether suitable authentication credentials are on the request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    *
    * @return bool
@@ -27,7 +27,7 @@ interface OAuth2HelperInterface {
    * Will check both the authorization header as well as an access_token query
    * parameter for the token.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    *
    * @return string|null
@@ -50,7 +50,7 @@ interface OAuth2HelperInterface {
   /**
    * Returns the scopes that are authorized for the request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    *
    * @return array
diff --git a/src/OAuth2Storage.php b/src/OAuth2Storage.php
index 5f5315d..90cf082 100644
--- a/src/OAuth2Storage.php
+++ b/src/OAuth2Storage.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\oauth2_server;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\oauth2_server\Entity\Client;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -23,50 +28,50 @@ class OAuth2Storage implements OAuth2StorageInterface {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The password hasher.
    *
-   * @var \Drupal\Core\Password\PasswordInterface
+   * @var PasswordInterface
    */
   protected $passwordHasher;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The time object.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * Constructs a new OAuth2Storage.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Password\PasswordInterface $password_hasher
+   * @param PasswordInterface $password_hasher
    *   The password hasher.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time object.
    */
   public function __construct(
@@ -89,14 +94,14 @@ class OAuth2Storage implements OAuth2StorageInterface {
    * @param string $username
    *   The username or email address of the account.
    *
-   * @return \Drupal\user\UserInterface|bool
+   * @return UserInterface|bool
    *   The account loaded from the storage or false.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getStorageAccount($username) {
-    /** @var \Drupal\user\UserInterface[] $users */
+    /** @var UserInterface[] $users */
     $users = $this->entityTypeManager->getStorage('user')
       ->loadByProperties(['name' => $username]);
     if ($users) {
@@ -104,7 +109,7 @@ class OAuth2Storage implements OAuth2StorageInterface {
     }
     else {
       // An email address might have been supplied instead of the username.
-      /** @var \Drupal\user\UserInterface[] $users */
+      /** @var UserInterface[] $users */
       $users = $this->entityTypeManager->getStorage('user')
         ->loadByProperties(['mail' => $username]);
       if ($users) {
@@ -120,14 +125,14 @@ class OAuth2Storage implements OAuth2StorageInterface {
    * @param string $client_id
    *   The client id to find.
    *
-   * @return \Drupal\oauth2_server\ClientInterface|bool
+   * @return ClientInterface|bool
    *   A client entity or false.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getStorageClient($client_id) {
-    /** @var \Drupal\oauth2_server\ClientInterface[] $clients */
+    /** @var ClientInterface[] $clients */
     $clients = $this->entityTypeManager->getStorage('oauth2_server_client')
       ->loadByProperties(['client_id' => $client_id]);
     if ($clients) {
@@ -142,14 +147,14 @@ class OAuth2Storage implements OAuth2StorageInterface {
    * @param string $token
    *   The token to find.
    *
-   * @return \Drupal\oauth2_server\TokenInterface|bool
+   * @return TokenInterface|bool
    *   Returns the token or FALSE.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getStorageToken($token) {
-    /** @var \Drupal\oauth2_server\TokenInterface[] $tokens */
+    /** @var TokenInterface[] $tokens */
     $tokens = $this->entityTypeManager->getStorage('oauth2_server_token')
       ->loadByProperties(['token' => $token]);
     if ($tokens) {
@@ -163,7 +168,7 @@ class OAuth2Storage implements OAuth2StorageInterface {
       return FALSE;
     }
 
-    /** @var \Drupal\oauth2_server\TokenInterface[] $tokens */
+    /** @var TokenInterface[] $tokens */
     $tokens = $this->entityTypeManager->getStorage('oauth2_server_token')
       ->loadByProperties(['token' => $decoded_token['id']]);
     if ($tokens) {
@@ -179,14 +184,14 @@ class OAuth2Storage implements OAuth2StorageInterface {
    * @param string $code
    *   The authorization code string.
    *
-   * @return \Drupal\oauth2_server\AuthorizationCodeInterface|bool
+   * @return AuthorizationCodeInterface|bool
    *   Returns the code or FALSE.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getStorageAuthorizationCode($code) {
-    /** @var \Drupal\oauth2_server\AuthorizationCodeInterface[] $codes */
+    /** @var AuthorizationCodeInterface[] $codes */
     $codes = $this->entityTypeManager->getStorage('oauth2_server_authorization_code')
       ->loadByProperties(['code' => $code]);
     if ($codes) {
@@ -206,8 +211,8 @@ class OAuth2Storage implements OAuth2StorageInterface {
    * @return bool
    *   A boolean whether the credentials are correct.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function checkClientCredentials($client_id, $client_secret = NULL) {
     $client = $this->getClientDetails($client_id);
@@ -234,8 +239,8 @@ class OAuth2Storage implements OAuth2StorageInterface {
    * @return bool
    *   Whether this is a public client.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function isPublicClient($client_id) {
     $client = $this->getClientDetails($client_id);
@@ -248,14 +253,14 @@ class OAuth2Storage implements OAuth2StorageInterface {
    * @param string $client_id
    *   The client id string.
    *
-   * @return array|bool|\Drupal\oauth2_server\Entity\Client
+   * @return array|bool|Client
    *   An client array.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getClientDetails($client_id) {
-    /** @var \Drupal\oauth2_server\ClientInterface $client */
+    /** @var ClientInterface $client */
     $client = $this->getStorageClient($client_id);
     if ($client) {
       // Return a client array in the format expected by the library.
@@ -300,11 +305,11 @@ class OAuth2Storage implements OAuth2StorageInterface {
    * @return bool
    *   Whether the grant type is available.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function checkRestrictedGrantType($client_id, $grant_type) {
-    /** @var \Drupal\oauth2_server\ClientInterface $client */
+    /** @var ClientInterface $client */
     $client = $this->getStorageClient($client_id);
     $server = $client->getServer();
     if (!empty($client->settings['override_grant_types'])) {
@@ -334,11 +339,11 @@ class OAuth2Storage implements OAuth2StorageInterface {
    * @return array|bool
    *   An access token array or false.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getAccessToken($access_token) {
-    /** @var \Drupal\oauth2_server\TokenInterface $token */
+    /** @var TokenInterface $token */
     $token = $this->getStorageToken($access_token);
     if (!$token) {
       return FALSE;
@@ -356,7 +361,7 @@ class OAuth2Storage implements OAuth2StorageInterface {
     }
 
     $scopes = [];
-    /** @var \Drupal\oauth2_server\ScopeInterface[] $scope_entities */
+    /** @var ScopeInterface[] $scope_entities */
     $scope_entities = $token->scopes->referencedEntities();
     foreach ($scope_entities as $scope) {
       $scopes[] = $scope->scope_id;
@@ -382,7 +387,7 @@ class OAuth2Storage implements OAuth2StorageInterface {
   /**
    * Track the time the token was accessed.
    *
-   * @param \Drupal\oauth2_server\TokenInterface $token
+   * @param TokenInterface $token
    *   A token object.
    */
   protected function logAccessTime(TokenInterface $token) {
@@ -415,9 +420,9 @@ class OAuth2Storage implements OAuth2StorageInterface {
    * @return int
    *   Whether the access token could be saved or not.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function setAccessToken($access_token, $client_id, $uid, $expires, $scope = NULL) {
     $client = $this->getStorageClient($client_id);
@@ -457,18 +462,18 @@ class OAuth2Storage implements OAuth2StorageInterface {
    * @return array|bool
    *   An authorization code array or false.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getAuthorizationCode($code) {
-    /** @var \Drupal\oauth2_server\AuthorizationCodeInterface $code */
+    /** @var AuthorizationCodeInterface $code */
     $code = $this->getStorageAuthorizationCode($code);
     if (!$code) {
       return FALSE;
     }
 
     $scopes = [];
-    /** @var \Drupal\oauth2_server\ScopeInterface[] $scope_entities */
+    /** @var ScopeInterface[] $scope_entities */
     $scope_entities = $code->scopes->referencedEntities();
     foreach ($scope_entities as $scope) {
       $scopes[] = $scope->scope_id;
@@ -529,28 +534,28 @@ class OAuth2Storage implements OAuth2StorageInterface {
    * @return int
    *   Whether the authorization code could be saved or not.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function setAuthorizationCode($code, $client_id, $uid, $redirect_uri, $expires, $scope = NULL, $id_token = NULL) {
-    /** @var \Drupal\oauth2_server\ClientInterface $client */
+    /** @var ClientInterface $client */
     $client = $this->getStorageClient($client_id);
     if (!$client) {
       throw new \InvalidArgumentException("The supplied client couldn't be loaded.");
     }
 
     // If no code was found, start with a new entity.
-    /** @var \Drupal\oauth2_server\AuthorizationCodeInterface $authorization_code */
+    /** @var AuthorizationCodeInterface $authorization_code */
     $authorization_code = $this->getStorageAuthorizationCode($code);
     if (!$authorization_code) {
-      /** @var \Drupal\user\UserInterface $user */
+      /** @var UserInterface $user */
       $user = $this->entityTypeManager->getStorage('user')->load($uid);
       if (!$user) {
         throw new \InvalidArgumentException("The supplied user couldn't be loaded.");
       }
 
-      /** @var \Drupal\oauth2_server\AuthorizationCodeInterface $authorization_code */
+      /** @var AuthorizationCodeInterface $authorization_code */
       $authorization_code = $this->entityTypeManager->getStorage('oauth2_server_authorization_code')->create([]);
       $authorization_code->client_id = $client->id();
       $authorization_code->uid = $user->id();
@@ -571,12 +576,12 @@ class OAuth2Storage implements OAuth2StorageInterface {
    * @param string $code
    *   The authorization code.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function expireAuthorizationCode($code) {
-    /** @var \Drupal\oauth2_server\AuthorizationCodeInterface $authorization_code */
+    /** @var AuthorizationCodeInterface $authorization_code */
     $authorization_code = $this->getStorageAuthorizationCode($code);
     if ($authorization_code) {
       $authorization_code->delete();
@@ -584,7 +589,6 @@ class OAuth2Storage implements OAuth2StorageInterface {
   }
 
   /* JwtBearerInterface */
-
   /**
    * Get client key.
    *
@@ -596,8 +600,8 @@ class OAuth2Storage implements OAuth2StorageInterface {
    * @return string|bool
    *   The client id public key or false.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getClientKey($client_id, $subject) {
     // While the API supports a key per user (subject), the module only supports
@@ -623,8 +627,8 @@ class OAuth2Storage implements OAuth2StorageInterface {
    * @return array|void
    *   An Jti array.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getJti($client_id, $subject, $audience, $expires, $jti) {
     $client = $this->getStorageClient($client_id);
@@ -667,9 +671,9 @@ class OAuth2Storage implements OAuth2StorageInterface {
    * @param string $jti
    *   The jti string.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function setJti($client_id, $subject, $audience, $expires, $jti) {
     $client = $this->getStorageClient($client_id);
@@ -689,7 +693,6 @@ class OAuth2Storage implements OAuth2StorageInterface {
   }
 
   /* UserCredentialsInterface */
-
   /**
    * Check user credentials.
    *
@@ -701,8 +704,8 @@ class OAuth2Storage implements OAuth2StorageInterface {
    * @return bool
    *   Whether the credentials are valid or not.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function checkUserCredentials($username, $password) {
     $account = $this->getStorageAccount($username);
@@ -721,8 +724,8 @@ class OAuth2Storage implements OAuth2StorageInterface {
    * @return array|bool
    *   The user details array or false.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getUserDetails($username) {
     $account = $this->getStorageAccount($username);
@@ -733,7 +736,6 @@ class OAuth2Storage implements OAuth2StorageInterface {
   }
 
   /* UserClaimsInterface */
-
   /**
    * Get user claims.
    *
@@ -745,12 +747,12 @@ class OAuth2Storage implements OAuth2StorageInterface {
    * @return array
    *   An associative array of claim strings.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityMalformedException
    */
   public function getUserClaims($uid, $scope) {
-    /** @var \Drupal\user\UserInterface $account */
+    /** @var UserInterface $account */
     $account = $this->entityTypeManager->getStorage('user')
       ->load($uid);
     if (!$account) {
@@ -804,7 +806,6 @@ class OAuth2Storage implements OAuth2StorageInterface {
   }
 
   /* RefreshTokenInterface */
-
   /**
    * Get refresh token.
    *
@@ -814,11 +815,11 @@ class OAuth2Storage implements OAuth2StorageInterface {
    * @return array|bool
    *   The token array or false.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getRefreshToken($refresh_token) {
-    /** @var \Drupal\oauth2_server\TokenInterface $token */
+    /** @var TokenInterface $token */
     $token = $this->getStorageToken($refresh_token);
     if (!$token) {
       return FALSE;
@@ -831,7 +832,7 @@ class OAuth2Storage implements OAuth2StorageInterface {
     }
 
     $scopes = [];
-    /** @var \Drupal\oauth2_server\ScopeInterface $token */
+    /** @var ScopeInterface $token */
     $scope_entities = $token->scopes->referencedEntities();
     foreach ($scope_entities as $scope) {
       $scopes[] = $scope->scope_id;
@@ -866,19 +867,19 @@ class OAuth2Storage implements OAuth2StorageInterface {
    * @return int
    *   Whether the token was saved or not.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function setRefreshToken($refresh_token, $client_id, $uid, $expires, $scope = NULL) {
-    /** @var \Drupal\oauth2_server\ClientInterface $client */
+    /** @var ClientInterface $client */
     $client = $this->getStorageClient($client_id);
     if (!$client) {
       throw new \InvalidArgumentException("The supplied client couldn't be loaded.");
     }
 
     // If no token was found, start with a new entity.
-    /** @var \Drupal\oauth2_server\TokenInterface $token */
+    /** @var TokenInterface $token */
     $token = $this->getStorageToken($refresh_token);
     if (!$token) {
       $user = $this->entityTypeManager->getStorage('user')->load($uid);
@@ -904,12 +905,12 @@ class OAuth2Storage implements OAuth2StorageInterface {
    * @param string $refresh_token
    *   The refresh token string.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function unsetRefreshToken($refresh_token) {
-    /** @var \Drupal\oauth2_server\TokenInterface $token */
+    /** @var TokenInterface $token */
     $token = $this->getStorageToken($refresh_token);
 
     // Check token exists before trying to delete.
@@ -928,14 +929,14 @@ class OAuth2Storage implements OAuth2StorageInterface {
    * @param string $scope
    *   Scopes in a space-separated string.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function setScopeData($entity, $server, $scope) {
     $entity->scopes = [];
     if ($scope) {
       $scopes = preg_split('/\s+/', $scope);
-      /** @var \Drupal\oauth2_server\ScopeInterface[] $loaded_scopes */
+      /** @var ScopeInterface[] $loaded_scopes */
       $loaded_scopes = $this->entityTypeManager
         ->getStorage('oauth2_server_scope')
         ->loadByProperties([
@@ -999,13 +1000,13 @@ class OAuth2Storage implements OAuth2StorageInterface {
   /**
    * Get the user's picture to return as an OpenID Connect claim.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The user account object.
    *
    * @return string|null
    *   An absolute URL to the user picture, or NULL if none is found.
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   protected function getUserPicture(UserInterface $account) {
     if (!user_picture_enabled()) {
@@ -1022,7 +1023,7 @@ class OAuth2Storage implements OAuth2StorageInterface {
           $file->getEntityTypeId() === 'file'
           && $file->access('download')
         ) {
-          return Url::fromUri(file_create_url($file->getFileUri()))->toString();
+          return \Drupal::service('file_url_generator')->generate($file->getFileUri())->toString();
         }
       }
     }
diff --git a/src/PageCache/DisallowOauth2Requests.php b/src/PageCache/DisallowOauth2Requests.php
index 2fcce19..cc3ee90 100644
--- a/src/PageCache/DisallowOauth2Requests.php
+++ b/src/PageCache/DisallowOauth2Requests.php
@@ -15,14 +15,14 @@ class DisallowOauth2Requests implements Oauth2RequestPolicyInterface {
   /**
    * The authentication provider.
    *
-   * @var \Drupal\oauth2_server\Authentication\Provider\OAuth2DrupalAuthProvider
+   * @var OAuth2DrupalAuthProvider
    */
   private $authProvider;
 
   /**
    * DisallowOauth2Requests constructor.
    *
-   * @param \Drupal\oauth2_server\Authentication\Provider\OAuth2DrupalAuthProvider $auth_provider
+   * @param OAuth2DrupalAuthProvider $auth_provider
    *   The authentication provider.
    */
   public function __construct(OAuth2DrupalAuthProvider $auth_provider) {
diff --git a/src/PageCache/Oauth2RequestPolicyInterface.php b/src/PageCache/Oauth2RequestPolicyInterface.php
index 1b2c790..0164449 100644
--- a/src/PageCache/Oauth2RequestPolicyInterface.php
+++ b/src/PageCache/Oauth2RequestPolicyInterface.php
@@ -20,7 +20,7 @@ interface Oauth2RequestPolicyInterface extends RequestPolicyInterface {
   /**
    * Returns a state whether the request has an OAuth2 access token.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The incoming request object.
    *
    * @return bool
diff --git a/src/ScopeInterface.php b/src/ScopeInterface.php
index 16cbc8c..b422594 100644
--- a/src/ScopeInterface.php
+++ b/src/ScopeInterface.php
@@ -14,7 +14,7 @@ interface ScopeInterface extends ConfigEntityInterface {
   /**
    * Returns the server the scope belongs to.
    *
-   * @return \Drupal\oauth2_server\ServerInterface
+   * @return ServerInterface
    *   Returns the server object the scope belongs to.
    */
   public function getServer();
diff --git a/src/ScopeListBuilder.php b/src/ScopeListBuilder.php
index 8c7a2de..2827e80 100644
--- a/src/ScopeListBuilder.php
+++ b/src/ScopeListBuilder.php
@@ -51,7 +51,7 @@ class ScopeListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+    /** @var ConfigEntityInterface $entity */
     $row = parent::buildRow($entity);
     return [
       'data' => [
@@ -71,7 +71,7 @@ class ScopeListBuilder extends ConfigEntityListBuilder {
   /**
    * {@inheritdoc}
    *
-   * @param \Drupal\oauth2_server\ServerInterface $oauth2_server
+   * @param ServerInterface $oauth2_server
    *   The server of which the scopes should be limited to.
    *
    * @return array
@@ -96,11 +96,11 @@ class ScopeListBuilder extends ConfigEntityListBuilder {
     ]);
 
     if ($oauth2_server) {
-      /** @var \Drupal\oauth2_server\ScopeInterface[] $scopes */
+      /** @var ScopeInterface[] $scopes */
       $scopes = $this->storage->loadByProperties(['server_id' => $oauth2_server->id()]);
     }
     else {
-      /** @var \Drupal\oauth2_server\ScopeInterface[] $scopes */
+      /** @var ScopeInterface[] $scopes */
       $scopes = $this->storage->loadMultiple();
     }
 
@@ -122,7 +122,7 @@ class ScopeListBuilder extends ConfigEntityListBuilder {
    *
    * Will preserve the key/value association of the array.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface[] $entities
+   * @param ConfigEntityInterface[] $entities
    *   An array of config entities.
    */
   protected function sortAlphabetically(array &$entities) {
diff --git a/src/ScopeUtility.php b/src/ScopeUtility.php
index 342589e..1323be3 100644
--- a/src/ScopeUtility.php
+++ b/src/ScopeUtility.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\oauth2_server;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use OAuth2\ScopeInterface as OAuth2ScopeInterface;
 use Oauth2\RequestInterface;
 
@@ -15,14 +17,14 @@ class ScopeUtility implements OAuth2ScopeInterface {
   /**
    * The server.
    *
-   * @var \Drupal\oauth2_server\ServerInterface
+   * @var ServerInterface
    */
   private $server;
 
   /**
    * ScopeUtility constructor.
    *
-   * @param \Drupal\oauth2_server\ServerInterface $server
+   * @param ServerInterface $server
    *   The server.
    */
   public function __construct(ServerInterface $server) {
@@ -62,8 +64,8 @@ class ScopeUtility implements OAuth2ScopeInterface {
    * @return bool
    *   TRUE if it exists, FALSE otherwise.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function scopeExists($scope, $client_id = NULL) {
     $scope = explode(' ', trim($scope));
@@ -100,7 +102,7 @@ class ScopeUtility implements OAuth2ScopeInterface {
   /**
    * Get scope from request.
    *
-   * @param \Oauth2\RequestInterface $request
+   * @param RequestInterface $request
    *   The request object.
    *
    * @return string
@@ -120,8 +122,8 @@ class ScopeUtility implements OAuth2ScopeInterface {
    * @return string
    *   The scope string.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getDefaultScope($client_id = NULL) {
     // Allow any hook_oauth2_server_default_scope() implementations to supply
diff --git a/src/ServerListBuilder.php b/src/ServerListBuilder.php
index 5af0142..cab0709 100644
--- a/src/ServerListBuilder.php
+++ b/src/ServerListBuilder.php
@@ -53,7 +53,7 @@ class ServerListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+    /** @var ConfigEntityInterface $entity */
     $row = parent::buildRow($entity);
     $status_label = $entity->status() ? $this->t('Enabled') : $this->t('Disabled');
     $status_icon = [
@@ -105,7 +105,7 @@ class ServerListBuilder extends ConfigEntityListBuilder {
       '@link' => Url::fromRoute('entity.oauth2_server.add_form')->toString(),
     ]);
 
-    /** @var \Drupal\oauth2_server\ServerInterface[] $servers */
+    /** @var ServerInterface[] $servers */
     $servers = $this->storage->loadMultiple();
     $this->sortByStatusThenAlphabetically($servers);
     foreach ($servers as $entity) {
@@ -125,7 +125,7 @@ class ServerListBuilder extends ConfigEntityListBuilder {
    *
    * Will preserve the key/value association of the array.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface[] $entities
+   * @param ConfigEntityInterface[] $entities
    *   An array of config entities.
    */
   protected function sortByStatusThenAlphabetically(array &$entities) {
diff --git a/src/TokenInterface.php b/src/TokenInterface.php
index 858de37..9762521 100644
--- a/src/TokenInterface.php
+++ b/src/TokenInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\oauth2_server;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 
 /**
@@ -14,7 +15,7 @@ interface TokenInterface extends ContentEntityInterface {
   /**
    * Return the user the token belongs to.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user object or FALSE.
    */
   public function getUser();
@@ -22,7 +23,7 @@ interface TokenInterface extends ContentEntityInterface {
   /**
    * Return the client the token belongs to.
    *
-   * @return \Drupal\oauth2_server\ClientInterface
+   * @return ClientInterface
    *   The client object or FALSE.
    */
   public function getClient();
diff --git a/src/Utility.php b/src/Utility.php
index c4293b4..10c2ade 100644
--- a/src/Utility.php
+++ b/src/Utility.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\oauth2_server;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use OAuth2\ResponseInterface;
 use Drupal\Core\Url;
 use OAuth2\HttpFoundationBridge\Response as BridgeResponse;
 use OAuth2\HttpFoundationBridge\Request as BridgeRequest;
@@ -116,7 +119,7 @@ class Utility {
    *   - public_key: The generated public key certificate (PEM encoded X.509).
    */
   public static function generateKeys() {
-    $module_path = drupal_get_path('module', 'oauth2_server');
+    $module_path = \Drupal::service('extension.list.module')->getPath('oauth2_server');
     $module_realpath = \Drupal::service('file_system')->realpath($module_path);
     $config = [
       'config' => $module_realpath . DIRECTORY_SEPARATOR . 'oauth2_server.openssl.cnf',
@@ -150,14 +153,14 @@ class Utility {
   /**
    * Initializes and returns an OAuth2 server.
    *
-   * @param \Drupal\oauth2_server\ServerInterface|null $server
+   * @param ServerInterface|null $server
    *   The server entity to use for supplying settings to the server, and
    *   initializing the scope. NULL only when we expect the validation to
    *   fail due to an incomplete or invalid request.
-   * @param \Drupal\oauth2_server\OAuth2StorageInterface $storage
+   * @param OAuth2StorageInterface $storage
    *   The storage service to use for retrieving data.
    *
-   * @return \OAuth2\Server
+   * @return Server
    *   An instance of OAuth2\Server.
    */
   public static function startServer(ServerInterface $server = NULL, OAuth2StorageInterface $storage) {
@@ -216,7 +219,7 @@ class Utility {
    *
    * Used during token requests.
    *
-   * @param \OAuth2\RequestInterface $request
+   * @param RequestInterface $request
    *   An instance of \OAuth2\HttpFoundationBridge\Request.
    *
    * @return array|null
@@ -267,11 +270,11 @@ class Utility {
    *   TRUE if at least one server uses JWT Access Tokens or OpenID Connect,
    *   FALSE otherwise.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public static function siteNeedsKeys() {
-    /** @var \Drupal\oauth2_server\ServerInterface[] $servers */
+    /** @var ServerInterface[] $servers */
     $servers = \Drupal::entityTypeManager()->getStorage('oauth2_server')
       ->loadMultiple();
     foreach ($servers as $server) {
@@ -293,15 +296,15 @@ class Utility {
    * @param string|null $scope
    *   An optional string of space-separated scopes to check.
    *
-   * @return \OAuth2\ResponseInterface|array
+   * @return ResponseInterface|array
    *   A valid access token if found, otherwise an \OAuth2\Response object
    *   containing an appropriate response message and status code.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public static function checkAccess($server_name, $scope = NULL) {
-    /** @var \Drupal\oauth2_server\ServerInterface $server */
+    /** @var ServerInterface $server */
     $server = \Drupal::entityTypeManager()->getStorage('oauth2_server')
       ->load($server_name);
     $storage = \Drupal::service('oauth2_server.storage');
diff --git a/tests/modules/oauth2_server_test/src/Controller/ResourceController.php b/tests/modules/oauth2_server_test/src/Controller/ResourceController.php
index fcf0bdf..e50c185 100644
--- a/tests/modules/oauth2_server_test/src/Controller/ResourceController.php
+++ b/tests/modules/oauth2_server_test/src/Controller/ResourceController.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\oauth2_server_test\Controller;
 
+use OAuth2\Response;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Routing\RouteMatchInterface;
 use OAuth2\ResponseInterface;
@@ -17,16 +20,16 @@ class ResourceController extends ControllerBase {
   /**
    * Test resource.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match interface.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    *
-   * @return array|\OAuth2\Response|\Symfony\Component\HttpFoundation\JsonResponse
+   * @return array|Response|JsonResponse
    *   The json response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function test(RouteMatchInterface $route_match, Request $request) {
     $scope = $route_match->getRawParameter('oauth2_server_scope');
