diff --git a/lgpd.module b/lgpd.module
index 9530edd..20bc64a 100644
--- a/lgpd.module
+++ b/lgpd.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Render\RendererInterface;
 /**
  * @file
  * Module file.
@@ -51,7 +52,7 @@ function lgpd_checklistapi_checklist_items() {
   $contentLinks = \Drupal::config(ContentLinksForm::lgpd_CONTENT_CONF_KEY)
     ->get('links');
 
-  /** @var \Drupal\Core\Render\RendererInterface $renderer */
+  /** @var RendererInterface $renderer */
   $renderer = \Drupal::service('renderer');
 
   if (!empty($contentLinks[$langCode])) {
diff --git a/modules/anonymizer/src/Annotation/Anonymizer.php b/modules/anonymizer/src/Annotation/Anonymizer.php
index 650da80..3ac7179 100644
--- a/modules/anonymizer/src/Annotation/Anonymizer.php
+++ b/modules/anonymizer/src/Annotation/Anonymizer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\anonymizer\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -25,14 +26,14 @@ class Anonymizer extends Plugin {
   /**
    * Human-readable of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label;
 
   /**
    * Description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $description;
 
diff --git a/modules/anonymizer/src/Anonymizer/AnonymizerBase.php b/modules/anonymizer/src/Anonymizer/AnonymizerBase.php
index 4f77046..0cb97f5 100644
--- a/modules/anonymizer/src/Anonymizer/AnonymizerBase.php
+++ b/modules/anonymizer/src/Anonymizer/AnonymizerBase.php
@@ -20,14 +20,14 @@ abstract class AnonymizerBase extends PluginBase implements AnonymizerInterface,
   /**
    * The faker service.
    *
-   * @var \Drupal\anonymizer\Service\FakerServiceInterface
+   * @var FakerServiceInterface
    */
   protected $faker;
 
   /**
    * Creates an instance of the plugin.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container to pull out services used in the plugin.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
@@ -62,7 +62,7 @@ abstract class AnonymizerBase extends PluginBase implements AnonymizerInterface,
    *   The plugin ID.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\anonymizer\Service\FakerServiceInterface $faker
+   * @param FakerServiceInterface $faker
    *   The faker service.
    */
   public function __construct(
diff --git a/modules/anonymizer/src/Anonymizer/AnonymizerFactory.php b/modules/anonymizer/src/Anonymizer/AnonymizerFactory.php
index 4554165..fbacbc2 100644
--- a/modules/anonymizer/src/Anonymizer/AnonymizerFactory.php
+++ b/modules/anonymizer/src/Anonymizer/AnonymizerFactory.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\anonymizer\Anonymizer;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 /**
  * Class Anonymizer Factory.
  *
@@ -12,21 +13,21 @@ class AnonymizerFactory {
   /**
    * Anonymizer instances keyed by their ID.
    *
-   * @var \Drupal\anonymizer\Anonymizer\AnonymizerInterface[]
+   * @var AnonymizerInterface[]
    */
   protected $anonymizers = [];
 
   /**
    * The anonymizer plugin manager.
    *
-   * @var \Drupal\anonymizer\Anonymizer\AnonymizerPluginManager
+   * @var AnonymizerPluginManager
    */
   protected $pluginManager;
 
   /**
    * AnonymizerFactory constructor.
    *
-   * @param \Drupal\anonymizer\Anonymizer\AnonymizerPluginManager $pluginManager
+   * @param AnonymizerPluginManager $pluginManager
    *   The anonymizer plugin manager.
    */
   public function __construct(AnonymizerPluginManager $pluginManager) {
@@ -46,10 +47,10 @@ class AnonymizerFactory {
    * @param string $name
    *   Anonymizer name.
    *
-   * @return \Drupal\anonymizer\Anonymizer\AnonymizerInterface
+   * @return AnonymizerInterface
    *   The anonymizer instance.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function get($name) {
     if (!isset($this->anonymizers[$name])) {
diff --git a/modules/anonymizer/src/Anonymizer/AnonymizerInterface.php b/modules/anonymizer/src/Anonymizer/AnonymizerInterface.php
index 51aa930..31a4c51 100644
--- a/modules/anonymizer/src/Anonymizer/AnonymizerInterface.php
+++ b/modules/anonymizer/src/Anonymizer/AnonymizerInterface.php
@@ -16,7 +16,7 @@ interface AnonymizerInterface {
    *
    * @var int|string $input
    *   The input.
-   * @var \Drupal\Core\Field\FieldItemListInterface|null $field
+   * @var FieldItemListInterface|null $field
    *   The field being anonymized.
    *
    * @return int|string
diff --git a/modules/anonymizer/src/Anonymizer/AnonymizerPluginManager.php b/modules/anonymizer/src/Anonymizer/AnonymizerPluginManager.php
index fda695c..dbe44d2 100644
--- a/modules/anonymizer/src/Anonymizer/AnonymizerPluginManager.php
+++ b/modules/anonymizer/src/Anonymizer/AnonymizerPluginManager.php
@@ -25,9 +25,9 @@ class AnonymizerPluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
    */
   public function __construct(
diff --git a/modules/anonymizer/src/Plugin/Anonymizer/PasswordAnonymizer.php b/modules/anonymizer/src/Plugin/Anonymizer/PasswordAnonymizer.php
index 1419943..2a9b54a 100644
--- a/modules/anonymizer/src/Plugin/Anonymizer/PasswordAnonymizer.php
+++ b/modules/anonymizer/src/Plugin/Anonymizer/PasswordAnonymizer.php
@@ -27,7 +27,7 @@ class PasswordAnonymizer extends AnonymizerBase {
   /**
    * The password service.
    *
-   * @var \Drupal\Core\Password\PasswordInterface
+   * @var PasswordInterface
    */
   protected $password;
 
@@ -58,9 +58,9 @@ class PasswordAnonymizer extends AnonymizerBase {
    *   The plugin ID.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Password\PasswordInterface $password
+   * @param PasswordInterface $password
    *   The password service.
-   * @param \Drupal\anonymizer\Service\FakerServiceInterface $faker
+   * @param FakerServiceInterface $faker
    *   The faker service.
    */
   public function __construct(
diff --git a/modules/anonymizer/src/Service/FakerService.php b/modules/anonymizer/src/Service/FakerService.php
index de90617..1e0ebd8 100644
--- a/modules/anonymizer/src/Service/FakerService.php
+++ b/modules/anonymizer/src/Service/FakerService.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\anonymizer\Service;
 
+use Faker\Generator;
 use Faker\Factory;
 
 /**
@@ -14,7 +15,7 @@ class FakerService implements FakerServiceInterface {
   /**
    * The faker generator.
    *
-   * @var \Faker\Generator
+   * @var Generator
    */
   protected $generator;
 
@@ -28,7 +29,7 @@ class FakerService implements FakerServiceInterface {
   /**
    * Return the generator.
    *
-   * @return \Faker\Generator
+   * @return Generator
    *   The generator.
    */
   public function generator() {
diff --git a/modules/anonymizer/src/Service/FakerServiceInterface.php b/modules/anonymizer/src/Service/FakerServiceInterface.php
index c71031d..74666ec 100644
--- a/modules/anonymizer/src/Service/FakerServiceInterface.php
+++ b/modules/anonymizer/src/Service/FakerServiceInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\anonymizer\Service;
 
+use Faker\Generator;
 /**
  * Interface Faker Service Interface.
  *
@@ -12,7 +13,7 @@ interface FakerServiceInterface {
   /**
    * Return the generator.
    *
-   * @return \Faker\Generator
+   * @return Generator
    *   The generator.
    */
   public function generator();
diff --git a/modules/lgpd_consent/lgpd_consent.module b/modules/lgpd_consent/lgpd_consent.module
index d30c004..2c65711 100644
--- a/modules/lgpd_consent/lgpd_consent.module
+++ b/modules/lgpd_consent/lgpd_consent.module
@@ -1,5 +1,8 @@
 <?php
 
+use Symfony\Component\HttpFoundation\RequestStack;
+use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;
+use Drupal\lgpd_consent\ConsentUserResolver\ConsentUserResolverPluginManager;
 /**
  * @file
  * Module file for the lgpd Consent module.
@@ -19,7 +22,7 @@ function lgpd_consent_form_field_ui_field_storage_add_form_alter(&$form, FormSta
  *
  * @param array $form
  *   The form.
- * @param \Drupal\Core\Form\FormStateInterface $formState
+ * @param FormStateInterface $formState
  *   The form state.
  *
  * @throws \Exception
@@ -27,16 +30,16 @@ function lgpd_consent_form_field_ui_field_storage_add_form_alter(&$form, FormSta
 function _lgpd_consent_field_add_validation(array &$form, FormStateInterface $formState) {
   // @todo: Set up for existing fields.
   if ('lgpd_user_consent' === $formState->getValue('new_storage_type', FALSE)) {
-    /** @var \Symfony\Component\HttpFoundation\RequestStack $requestStack */
+    /** @var RequestStack $requestStack */
     $requestStack = \Drupal::service('request_stack');
-    /** @var \Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface $requestParameters */
+    /** @var ParameterBagInterface $requestParameters */
     $requestParameters = $requestStack->getCurrentRequest()->attributes;
 
     if ($requestParameters->has('entity_type_id') && $requestParameters->has('bundle')) {
       $entityTypeId = $requestParameters->get('entity_type_id');
       $entityBundle = $requestParameters->get('bundle');
 
-      /** @var \Drupal\lgpd_consent\ConsentUserResolver\ConsentUserResolverPluginManager $consentResolverManager */
+      /** @var ConsentUserResolverPluginManager $consentResolverManager */
       $consentResolverManager = \Drupal::service('plugin.manager.lgpd_consent_resolver');
       /** @var array|bool $resolver */
       $resolver = $consentResolverManager->getDefinitionForType($entityTypeId, $entityBundle);
diff --git a/modules/lgpd_consent/src/ConsentAgreementHtmlRouteProvider.php b/modules/lgpd_consent/src/ConsentAgreementHtmlRouteProvider.php
index 89a554c..2e588f9 100644
--- a/modules/lgpd_consent/src/ConsentAgreementHtmlRouteProvider.php
+++ b/modules/lgpd_consent/src/ConsentAgreementHtmlRouteProvider.php
@@ -53,10 +53,10 @@ class ConsentAgreementHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ -77,10 +77,10 @@ class ConsentAgreementHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ -101,10 +101,10 @@ class ConsentAgreementHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ -125,10 +125,10 @@ class ConsentAgreementHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ -149,10 +149,10 @@ class ConsentAgreementHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type) {
@@ -173,10 +173,10 @@ class ConsentAgreementHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
diff --git a/modules/lgpd_consent/src/ConsentAgreementStorageInterface.php b/modules/lgpd_consent/src/ConsentAgreementStorageInterface.php
index bece7ea..dbfe8b3 100644
--- a/modules/lgpd_consent/src/ConsentAgreementStorageInterface.php
+++ b/modules/lgpd_consent/src/ConsentAgreementStorageInterface.php
@@ -20,7 +20,7 @@ interface ConsentAgreementStorageInterface extends ContentEntityStorageInterface
   /**
    * Gets a list of Consent Agreement revision IDs for a specific Agreement.
    *
-   * @param \Drupal\lgpd_consent\Entity\ConsentAgreementInterface $entity
+   * @param ConsentAgreementInterface $entity
    *   The Consent Agreement entity.
    *
    * @return int[]
@@ -31,7 +31,7 @@ interface ConsentAgreementStorageInterface extends ContentEntityStorageInterface
   /**
    * Gets a list of revision IDs for a given user as Consent Agreement author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ -42,7 +42,7 @@ interface ConsentAgreementStorageInterface extends ContentEntityStorageInterface
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\lgpd_consent\Entity\ConsentAgreementInterface $entity
+   * @param ConsentAgreementInterface $entity
    *   The Consent Agreement entity.
    *
    * @return int
@@ -53,7 +53,7 @@ interface ConsentAgreementStorageInterface extends ContentEntityStorageInterface
   /**
    * Unsets the language for all Consent Agreement with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
diff --git a/modules/lgpd_consent/src/ConsentUserResolver/ConsentUserResolverPluginManager.php b/modules/lgpd_consent/src/ConsentUserResolver/ConsentUserResolverPluginManager.php
index 6b736aa..12d082b 100644
--- a/modules/lgpd_consent/src/ConsentUserResolver/ConsentUserResolverPluginManager.php
+++ b/modules/lgpd_consent/src/ConsentUserResolver/ConsentUserResolverPluginManager.php
@@ -27,9 +27,9 @@ class ConsentUserResolverPluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
    */
   public function __construct(
@@ -107,7 +107,7 @@ class ConsentUserResolverPluginManager extends DefaultPluginManager {
    * @param string $bundle
    *   The bundle.
    *
-   * @return \Drupal\lgpd_consent\ConsentUserResolver\lgpdConsentUserResolverInterface
+   * @return lgpdConsentUserResolverInterface
    *   The resolver that will be used to find the User for a specific entity.
    *
    * @throws \Exception
diff --git a/modules/lgpd_consent/src/ConsentUserResolver/LgpdConsentUserResolver.php b/modules/lgpd_consent/src/ConsentUserResolver/LgpdConsentUserResolver.php
index 30d9724..7d926ea 100644
--- a/modules/lgpd_consent/src/ConsentUserResolver/LgpdConsentUserResolver.php
+++ b/modules/lgpd_consent/src/ConsentUserResolver/LgpdConsentUserResolver.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lgpd_consent\ConsentUserResolver;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -25,14 +26,14 @@ class LgpdConsentUserResolver extends Plugin {
   /**
    * Human-readable of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label;
 
   /**
    * Description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $description;
 
diff --git a/modules/lgpd_consent/src/ConsentUserResolver/LgpdConsentUserResolverInterface.php b/modules/lgpd_consent/src/ConsentUserResolver/LgpdConsentUserResolverInterface.php
index 07a0ca3..e49cd3d 100644
--- a/modules/lgpd_consent/src/ConsentUserResolver/LgpdConsentUserResolverInterface.php
+++ b/modules/lgpd_consent/src/ConsentUserResolver/LgpdConsentUserResolverInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lgpd_consent\ConsentUserResolver;
 
+use Drupal\user\Entity\User;
 use Drupal\Core\Entity\EntityInterface;
 
 /**
@@ -12,10 +13,10 @@ interface LgpdConsentUserResolverInterface {
   /**
    * Gets the user reference from the specified entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to use when finding the user.
    *
-   * @return \Drupal\user\Entity\User
+   * @return User
    *   The user
    */
   public function resolve(EntityInterface $entity);
diff --git a/modules/lgpd_consent/src/Controller/ConsentAgreementController.php b/modules/lgpd_consent/src/Controller/ConsentAgreementController.php
index 0838c65..c8f7db4 100644
--- a/modules/lgpd_consent/src/Controller/ConsentAgreementController.php
+++ b/modules/lgpd_consent/src/Controller/ConsentAgreementController.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\lgpd_consent\Controller;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\lgpd_consent\ConsentAgreementStorageInterface;
+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\lgpd_consent\Entity\ConsentAgreementInterface;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Datetime\DateFormatterInterface;
@@ -24,34 +28,34 @@ class ConsentAgreementController extends ControllerBase {
   /**
    * The entity field manager for metadata.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   private $entityFieldManager;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   private $dateFormatter;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   private $renderer;
 
   /**
    * Constructs a ConsentAgreementController controller object.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager for metadata.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Render\Renderer $renderer
+   * @param Renderer $renderer
    *   The renderer service.
    */
   public function __construct(EntityFieldManagerInterface $entity_field_manager, EntityTypeManagerInterface $entity_type_manager, DateFormatterInterface $date_formatter, Renderer $renderer) {
@@ -82,7 +86,7 @@ class ConsentAgreementController extends ControllerBase {
    * @return array
    *   An array suitable for drupal_render().
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function revisionShow($lgpd_consent_agreement_revision) {
     $lgpdConsentAgreement = $this->entityTypeManager
@@ -103,7 +107,7 @@ class ConsentAgreementController extends ControllerBase {
    * @return string
    *   The page title.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function revisionPageTitle($lgpd_consent_agreement_revision) {
     $lgpdConsentAgreement = $this->entityTypeManager
@@ -118,17 +122,17 @@ class ConsentAgreementController extends ControllerBase {
   /**
    * Generates an overview table of older revisions of a Consent Agreement .
    *
-   * @param \Drupal\lgpd_consent\Entity\ConsentAgreement $lgpd_consent_agreement
+   * @param ConsentAgreement $lgpd_consent_agreement
    *   A Consent Agreement object.
    *
    * @return array
    *   An array as expected by drupal_render().
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function revisionOverview(ConsentAgreement $lgpd_consent_agreement) {
     $account = $this->currentUser();
-    /** @var \Drupal\lgpd_consent\ConsentAgreementStorageInterface $storage */
+    /** @var ConsentAgreementStorageInterface $storage */
     $storage = $this->entityTypeManager->getStorage('lgpd_consent_agreement');
 
     $build['#title'] = $this->t('Revisions for %title', ['%title' => $lgpd_consent_agreement->title->value]);
@@ -144,7 +148,7 @@ class ConsentAgreementController extends ControllerBase {
     $latest_revision = TRUE;
 
     foreach (\array_reverse($vids) as $vid) {
-      /** @var \Drupal\lgpd_consent\Entity\ConsentAgreement $revision */
+      /** @var ConsentAgreement $revision */
       $revision = $storage->loadRevision($vid);
 
       $username = [
@@ -162,7 +166,9 @@ class ConsentAgreementController extends ControllerBase {
         $link = $this->renderer->renderPlain($link);
       }
       else {
-        $link = $lgpd_consent_agreement->link($date);
+        // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+        // Please confirm that `$lgpd_consent_agreement` is an instance of `\Drupal\Core\Entity\EntityInterface`. Only the method name and not the class name was checked for this replacement, so this may be a false positive.
+        $link = $lgpd_consent_agreement->toLink($date)->toString();
       }
 
       $row = [];
@@ -241,14 +247,14 @@ class ConsentAgreementController extends ControllerBase {
   /**
    * Render My Agreements content.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The user to show agreements for.
    *
    * @return array
    *   Renderable table of user agreements.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws InvalidPluginDefinitionException
+   * @throws EntityMalformedException
    */
   public function myAgreements(AccountInterface $user) {
     $map = $this->entityFieldManager->getFieldMapByFieldType('lgpd_user_consent');
@@ -268,7 +274,7 @@ class ConsentAgreementController extends ControllerBase {
           ->loadMultiple($ids);
 
         foreach ($entities as $entity) {
-          /** @var \Drupal\lgpd_consent\Entity\ConsentAgreementInterface $agreement */
+          /** @var ConsentAgreementInterface $agreement */
           $agreement = $agreement_storage->loadRevision($entity->{$field_name}->target_revision_id);
 
           $link = $agreement->title->value;
diff --git a/modules/lgpd_consent/src/Entity/ConsentAgreementInterface.php b/modules/lgpd_consent/src/Entity/ConsentAgreementInterface.php
index 45382b0..a12d708 100644
--- a/modules/lgpd_consent/src/Entity/ConsentAgreementInterface.php
+++ b/modules/lgpd_consent/src/Entity/ConsentAgreementInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lgpd_consent\Entity;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\RevisionLogInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
@@ -95,7 +96,7 @@ interface ConsentAgreementInterface extends ContentEntityInterface, RevisionLogI
   /**
    * Gets the Consent Agreement revision author.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity for the revision author.
    */
   public function getRevisionUser();
diff --git a/modules/lgpd_consent/src/Form/ConsentAgreementForm.php b/modules/lgpd_consent/src/Form/ConsentAgreementForm.php
index 35f1bc5..8f8dbe7 100644
--- a/modules/lgpd_consent/src/Form/ConsentAgreementForm.php
+++ b/modules/lgpd_consent/src/Form/ConsentAgreementForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lgpd_consent\Form;
 
+use Drupal\lgpd_consent\Entity\ConsentAgreement;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Entity\EntityManagerInterface;
@@ -20,7 +21,7 @@ class ConsentAgreementForm extends ContentEntityForm {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
@@ -29,11 +30,11 @@ class ConsentAgreementForm extends ContentEntityForm {
    *
    * @param \Drupal\Core\Entity\EntityManagerInterface $entity_manager
    *   The entity manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(EntityManagerInterface $entity_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, TimeInterface $time = NULL, AccountInterface $current_user) {
@@ -60,7 +61,7 @@ class ConsentAgreementForm extends ContentEntityForm {
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
     /**
-     * @var \Drupal\lgpd_consent\Entity\ConsentAgreement $entity
+     * @var ConsentAgreement $entity
      */
     $form = parent::buildForm($form, $form_state);
 
@@ -87,7 +88,7 @@ class ConsentAgreementForm extends ContentEntityForm {
       $entity->setNewRevision();
 
       // If a new revision is created, save the current user as revision author.
-      $entity->setRevisionCreationTime(REQUEST_TIME);
+      $entity->setRevisionCreationTime(\Drupal::time()->getRequestTime());
       $entity->setRevisionUserId($this->currentUser->id());
     }
     else {
@@ -98,13 +99,13 @@ class ConsentAgreementForm extends ContentEntityForm {
 
     switch ($status) {
       case SAVED_NEW:
-        drupal_set_message($this->t('Created the %label Consent Agreement.', [
+        $this->messenger()->addStatus($this->t('Created the %label Consent Agreement.', [
           '%label' => $entity->label(),
         ]));
         break;
 
       default:
-        drupal_set_message($this->t('Saved the %label Consent Agreement.', [
+        $this->messenger()->addStatus($this->t('Saved the %label Consent Agreement.', [
           '%label' => $entity->label(),
         ]));
     }
diff --git a/modules/lgpd_consent/src/Form/ConsentAgreementRevisionRevertForm.php b/modules/lgpd_consent/src/Form/ConsentAgreementRevisionRevertForm.php
index 26dac0c..41dd3c6 100644
--- a/modules/lgpd_consent/src/Form/ConsentAgreementRevisionRevertForm.php
+++ b/modules/lgpd_consent/src/Form/ConsentAgreementRevisionRevertForm.php
@@ -21,21 +21,21 @@ class ConsentAgreementRevisionRevertForm extends ConfirmFormBase {
   /**
    * The Consent Agreement revision.
    *
-   * @var \Drupal\lgpd_consent\Entity\ConsentAgreementInterface
+   * @var ConsentAgreementInterface
    */
   protected $revision;
 
   /**
    * The Consent Agreement storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $consentAgreementStorage;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
@@ -52,9 +52,9 @@ class ConsentAgreementRevisionRevertForm extends ConfirmFormBase {
   /**
    * Constructs a new ConsentAgreementRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entityStorage
+   * @param EntityStorageInterface $entityStorage
    *   The Consent Agreement storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $dateFormatter
+   * @param DateFormatterInterface $dateFormatter
    *   The date formatter service.
    */
   public function __construct(EntityStorageInterface $entityStorage, DateFormatterInterface $dateFormatter) {
@@ -136,18 +136,18 @@ class ConsentAgreementRevisionRevertForm extends ConfirmFormBase {
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\lgpd_consent\Entity\ConsentAgreementInterface $revision
+   * @param ConsentAgreementInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\lgpd_consent\Entity\ConsentAgreementInterface
+   * @return ConsentAgreementInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(ConsentAgreementInterface $revision, FormStateInterface $form_state) {
     $revision->setNewRevision();
     $revision->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());
 
     return $revision;
   }
diff --git a/modules/lgpd_consent/src/Plugin/Block/LgpdMyAgreementsBlock.php b/modules/lgpd_consent/src/Plugin/Block/LgpdMyAgreementsBlock.php
index 66936dd..cfa94e6 100644
--- a/modules/lgpd_consent/src/Plugin/Block/LgpdMyAgreementsBlock.php
+++ b/modules/lgpd_consent/src/Plugin/Block/LgpdMyAgreementsBlock.php
@@ -25,14 +25,14 @@ class LgpdMyAgreementsBlock extends BlockBase implements ContainerFactoryPluginI
   /**
    * The class resolver.
    *
-   * @var \Drupal\Core\DependencyInjection\ClassResolverInterface
+   * @var ClassResolverInterface
    */
   protected $classResolver;
 
   /**
    * The user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
@@ -66,9 +66,9 @@ class LgpdMyAgreementsBlock extends BlockBase implements ContainerFactoryPluginI
    *   The plugin_id for the plugin instance.
    * @param mixed $pluginDefinition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\DependencyInjection\ClassResolverInterface $classResolver
+   * @param ClassResolverInterface $classResolver
    *   The class resolver service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The user.
    */
   public function __construct(
diff --git a/modules/lgpd_consent/src/Plugin/Field/FieldFormatter/ConsentFormatter.php b/modules/lgpd_consent/src/Plugin/Field/FieldFormatter/ConsentFormatter.php
index 85eb4f0..ca693c8 100644
--- a/modules/lgpd_consent/src/Plugin/Field/FieldFormatter/ConsentFormatter.php
+++ b/modules/lgpd_consent/src/Plugin/Field/FieldFormatter/ConsentFormatter.php
@@ -25,7 +25,7 @@ class ConsentFormatter extends FormatterBase implements ContainerFactoryPluginIn
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -36,7 +36,7 @@ class ConsentFormatter extends FormatterBase implements ContainerFactoryPluginIn
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ -46,7 +46,7 @@ class ConsentFormatter extends FormatterBase implements ContainerFactoryPluginIn
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/modules/lgpd_consent/src/Plugin/Field/FieldType/UserConsentItem.php b/modules/lgpd_consent/src/Plugin/Field/FieldType/UserConsentItem.php
index 3fab1bc..88799f6 100644
--- a/modules/lgpd_consent/src/Plugin/Field/FieldType/UserConsentItem.php
+++ b/modules/lgpd_consent/src/Plugin/Field/FieldType/UserConsentItem.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lgpd_consent\Plugin\Field\FieldType;
 
+use Drupal\lgpd_consent\ConsentUserResolver\ConsentUserResolverPluginManager;
 use Drupal\Core\Field\FieldItemBase;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -69,7 +70,7 @@ class UserConsentItem extends FieldItemBase {
     $definition = $this->getFieldDefinition();
 
     /**
-     * @var \Drupal\lgpd_consent\ConsentUserResolver\ConsentUserResolverPluginManager $plugin_manager
+     * @var ConsentUserResolverPluginManager $plugin_manager
      */
     $plugin_manager = \Drupal::service('plugin.manager.lgpd_consent_resolver');
     $resolver = $plugin_manager->getForEntityType($definition->getTargetEntityTypeId(), $definition->getTargetBundle());
diff --git a/modules/lgpd_consent/src/Plugin/Field/FieldWidget/ConsentWidget.php b/modules/lgpd_consent/src/Plugin/Field/FieldWidget/ConsentWidget.php
index 8d2e3df..4686cb9 100644
--- a/modules/lgpd_consent/src/Plugin/Field/FieldWidget/ConsentWidget.php
+++ b/modules/lgpd_consent/src/Plugin/Field/FieldWidget/ConsentWidget.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lgpd_consent\Plugin\Field\FieldWidget;
 
+use Drupal\user\Entity\User;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\WidgetBase;
@@ -31,14 +32,14 @@ class ConsentWidget extends WidgetBase implements ContainerFactoryPluginInterfac
   /**
    * The lgpd Consent Resolver manager.
    *
-   * @var \Drupal\lgpd_consent\ConsentUserResolver\ConsentUserResolverPluginManager
+   * @var ConsentUserResolverPluginManager
    */
   protected $lgpdConsentResolverManager;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
@@ -69,15 +70,15 @@ class ConsentWidget extends WidgetBase implements ContainerFactoryPluginInterfac
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\lgpd_consent\ConsentUserResolver\ConsentUserResolverPluginManager $lgpdConsentResolverManager
+   * @param ConsentUserResolverPluginManager $lgpdConsentResolverManager
    *   The lgpd Consent Resolver manager.
-   * @param \Drupal\Core\Session\AccountInterface $currentUser
+   * @param AccountInterface $currentUser
    *   The current user.
    */
   public function __construct(
@@ -208,10 +209,10 @@ class ConsentWidget extends WidgetBase implements ContainerFactoryPluginInterfac
   /**
    * Gets the user who the consent will be stored against.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   The field.
    *
-   * @return \Drupal\user\Entity\User
+   * @return User
    *   The user
    *
    * @throws \Exception
diff --git a/modules/lgpd_dump/lgpd_dump.drush.inc b/modules/lgpd_dump/lgpd_dump.drush.inc
index a3a719e..e5d4712 100644
--- a/modules/lgpd_dump/lgpd_dump.drush.inc
+++ b/modules/lgpd_dump/lgpd_dump.drush.inc
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\lgpd_dump\Service\lgpdSqlDump;
+use Drupal\lgpd_dump\Service\lgpdSanitize;
 /**
  * @file
  * This file contains the lgpd database dump command.
@@ -73,7 +75,7 @@ function lgpd_dump_drush_command() {
  * using mysqldump or equivalent.
  */
 function drush_lgpd_sql_dump() {
-  /** @var \Drupal\lgpd_dump\Service\lgpdSqlDump $service */
+  /** @var lgpdSqlDump $service */
   $service = \Drupal::service('lgpd_dump.sql_dump');
   try {
     return $service->dump();
@@ -89,7 +91,7 @@ function drush_lgpd_sql_dump() {
  * Sanitizes the current environment.
  */
 function drush_lgpd_sanitize() {
-  /** @var \Drupal\lgpd_dump\Service\lgpdSanitize $service */
+  /** @var lgpdSanitize $service */
   $service = \Drupal::service('lgpd_dump.sanitize');
   try {
     $service->sanitize();
diff --git a/modules/lgpd_dump/lgpd_dump.install b/modules/lgpd_dump/lgpd_dump.install
index b6a2bd5..31a64fa 100644
--- a/modules/lgpd_dump/lgpd_dump.install
+++ b/modules/lgpd_dump/lgpd_dump.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Extension\ModuleInstallerInterface;
 /**
  * @file
  * Install file for the lgpd_dump module.
@@ -23,7 +24,7 @@ function lgpd_dump_requirements() {
  * Enable the 'Anonymizer' module.
  */
 function lgpd_dump_update_8001() {
-  /** @var \Drupal\Core\Extension\ModuleInstallerInterface $installer */
+  /** @var ModuleInstallerInterface $installer */
   $installer = \Drupal::service('module_installer');
   $installer->install(['anonymizer']);
 }
diff --git a/modules/lgpd_dump/src/Commands/LgpdDumpCommands.php b/modules/lgpd_dump/src/Commands/LgpdDumpCommands.php
index 58ac712..5f0796f 100644
--- a/modules/lgpd_dump/src/Commands/LgpdDumpCommands.php
+++ b/modules/lgpd_dump/src/Commands/LgpdDumpCommands.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lgpd_dump\Commands;
 
+use Drupal\lgpd_dump\Sql\lgpdSqlBase;
 use Drupal\lgpd_dump\Service\lgpdSanitize;
 use Drupal\lgpd_dump\Service\lgpdSqlDump;
 use Drush\Commands\DrushCommands;
@@ -18,23 +19,23 @@ class LgpdDumpCommands extends DrushCommands {
   /**
    * The dump service.
    *
-   * @var \Drupal\lgpd_dump\Service\lgpdSqlDump
+   * @var lgpdSqlDump
    */
   protected $dumpService;
 
   /**
    * The sanitize service.
    *
-   * @var \Drupal\lgpd_dump\Service\lgpdSanitize
+   * @var lgpdSanitize
    */
   protected $sanitizeService;
 
   /**
    * Lgpd Dump Commands constructor.
    *
-   * @param \Drupal\lgpd_dump\Service\lgpdSqlDump $dump
+   * @param lgpdSqlDump $dump
    *   The dump service.
-   * @param \Drupal\lgpd_dump\Service\lgpdSanitize $sanitize
+   * @param lgpdSanitize $sanitize
    *   The sanitize service.
    */
   public function __construct(
@@ -89,7 +90,7 @@ class LgpdDumpCommands extends DrushCommands {
    *
    * @see \Drush\Commands\sql\SqlCommands::dump()
    *
-   * @return bool|\Drupal\lgpd_dump\Sql\lgpdSqlBase
+   * @return bool|lgpdSqlBase
    *   The result of the dump.
    *
    * @throws \Exception
diff --git a/modules/lgpd_dump/src/Form/SettingsForm.php b/modules/lgpd_dump/src/Form/SettingsForm.php
index eee45d5..01aeb0b 100644
--- a/modules/lgpd_dump/src/Form/SettingsForm.php
+++ b/modules/lgpd_dump/src/Form/SettingsForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lgpd_dump\Form;
 
+use Drupal\Core\Database\InvalidQueryException;
+use Drupal\Core\Config\ConfigValueException;
 use Drupal\anonymizer\Anonymizer\AnonymizerPluginManager;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -24,21 +26,21 @@ class SettingsForm extends ConfigFormBase {
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * Database manager.
    *
-   * @var \Drupal\lgpd_dump\Service\lgpdDatabaseManager
+   * @var lgpdDatabaseManager
    */
   protected $databaseManager;
 
   /**
    * The plugin manager for anonymizers.
    *
-   * @var \Drupal\anonymizer\Anonymizer\AnonymizerPluginManager
+   * @var AnonymizerPluginManager
    */
   protected $pluginManager;
 
@@ -57,13 +59,13 @@ class SettingsForm extends ConfigFormBase {
   /**
    * SettingsForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
-   * @param \Drupal\anonymizer\Anonymizer\AnonymizerPluginManager $pluginManager
+   * @param AnonymizerPluginManager $pluginManager
    *   The plugin manager for anonymizers.
-   * @param \Drupal\lgpd_dump\Service\lgpdDatabaseManager $lgpdDatabaseManager
+   * @param lgpdDatabaseManager $lgpdDatabaseManager
    *   Database manager service.
    */
   public function __construct(
@@ -97,7 +99,7 @@ class SettingsForm extends ConfigFormBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Database\InvalidQueryException
+   * @throws InvalidQueryException
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
     $form['#tree'] = TRUE;
@@ -246,7 +248,7 @@ class SettingsForm extends ConfigFormBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Config\ConfigValueException
+   * @throws ConfigValueException
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     if ($form_state->hasValue('tables')) {
diff --git a/modules/lgpd_dump/src/Service/LgpdDatabaseManager.php b/modules/lgpd_dump/src/Service/LgpdDatabaseManager.php
index 485117d..7e0a698 100644
--- a/modules/lgpd_dump/src/Service/LgpdDatabaseManager.php
+++ b/modules/lgpd_dump/src/Service/LgpdDatabaseManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lgpd_dump\Service;
 
+use Drupal\Core\Database\StatementInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Database\InvalidQueryException;
 
@@ -15,14 +16,14 @@ class LgpdDatabaseManager {
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * LgpdDatabaseManager constructor.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
    */
   public function __construct(
@@ -37,7 +38,7 @@ class LgpdDatabaseManager {
    * @return array
    *   The tables with their columns.
    *
-   * @throws \Drupal\Core\Database\InvalidQueryException
+   * @throws InvalidQueryException
    */
   public function getTableColumns() {
     $tables = $this->database->schema()->findTables('%');
@@ -59,10 +60,10 @@ class LgpdDatabaseManager {
    * @param string $table
    *   The table name.
    *
-   * @return \Drupal\Core\Database\StatementInterface|null
+   * @return StatementInterface|null
    *   An executed DB statement, or NULL.
    *
-   * @throws \Drupal\Core\Database\InvalidQueryException
+   * @throws InvalidQueryException
    */
   protected function getColumns($table) {
     // @todo How cross-driver is this?
@@ -82,7 +83,7 @@ class LgpdDatabaseManager {
    * @return array
    *   The columns.
    *
-   * @throws \Drupal\Core\Database\InvalidQueryException
+   * @throws InvalidQueryException
    */
   public function fetchColumnNames($table) {
     $query = $this->database->select('information_schema.columns', 'columns');
diff --git a/modules/lgpd_dump/src/Service/LgpdSqlDump.php b/modules/lgpd_dump/src/Service/LgpdSqlDump.php
index 00def72..14b1a71 100644
--- a/modules/lgpd_dump/src/Service/LgpdSqlDump.php
+++ b/modules/lgpd_dump/src/Service/LgpdSqlDump.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\lgpd_dump\Service;
 
+use Drush\Sql\SqlBase;
+use Drupal\Core\Database\TransactionNoActiveException;
+use Drupal\Core\Database\TransactionCommitFailedException;
+use Drupal\Core\Database\IntegrityConstraintViolationException;
+use Drupal\Core\Database\DatabaseExceptionWrapper;
 use Drupal\anonymizer\Anonymizer\AnonymizerFactory;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Database\Connection;
@@ -37,21 +42,21 @@ class LgpdSqlDump {
   /**
    * The database.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * Lgpd database manager.
    *
-   * @var \Drupal\lgpd_dump\Service\lgpdDatabaseManager
+   * @var lgpdDatabaseManager
    */
   protected $databaseManager;
 
   /**
    * The Sanitizer plugin factory.
    *
-   * @var \Drupal\anonymizer\Anonymizer\AnonymizerFactory
+   * @var AnonymizerFactory
    */
   protected $pluginFactory;
 
@@ -67,20 +72,20 @@ class LgpdSqlDump {
   /**
    * The SQL instance.
    *
-   * @var \Drush\Sql\SqlBase
+   * @var SqlBase
    */
   protected $sql;
 
   /**
    * LgpdSqlDump constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Config factory.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database.
-   * @param \Drupal\lgpd_dump\Service\lgpdDatabaseManager $lgpdDatabaseManager
+   * @param lgpdDatabaseManager $lgpdDatabaseManager
    *   The lgpd database manager.
-   * @param \Drupal\anonymizer\Anonymizer\AnonymizerFactory $pluginFactory
+   * @param AnonymizerFactory $pluginFactory
    *   The anonymizer plugin factory.
    */
   public function __construct(
@@ -123,7 +128,7 @@ class LgpdSqlDump {
    * @param array $options
    *   The command options, if known.
    *
-   * @return \Drush\Sql\SqlBase
+   * @return SqlBase
    *   The Sql instance.
    *
    * @throws \Exception
@@ -179,11 +184,11 @@ class LgpdSqlDump {
   /**
    * Creates table clones according to the config.
    *
-   * @throws \Drupal\Core\Database\TransactionNoActiveException
-   * @throws \Drupal\Core\Database\TransactionCommitFailedException
+   * @throws TransactionNoActiveException
+   * @throws TransactionCommitFailedException
    * @throws \InvalidArgumentException
-   * @throws \Drupal\Core\Database\IntegrityConstraintViolationException
-   * @throws \Drupal\Core\Database\DatabaseExceptionWrapper
+   * @throws IntegrityConstraintViolationException
+   * @throws DatabaseExceptionWrapper
    * @throws \Exception
    */
   protected function createTableClones() {
@@ -296,10 +301,10 @@ class LgpdSqlDump {
    * Prepare the database for the dump.
    *
    * @throws \InvalidArgumentException
-   * @throws \Drupal\Core\Database\IntegrityConstraintViolationException
-   * @throws \Drupal\Core\Database\DatabaseExceptionWrapper
-   * @throws \Drupal\Core\Database\TransactionNoActiveException
-   * @throws \Drupal\Core\Database\TransactionCommitFailedException
+   * @throws IntegrityConstraintViolationException
+   * @throws DatabaseExceptionWrapper
+   * @throws TransactionNoActiveException
+   * @throws TransactionCommitFailedException
    * @throws \Exception
    */
   protected function prepare() {
@@ -325,8 +330,8 @@ class LgpdSqlDump {
   /**
    * Cleanup the database after the dump.
    *
-   * @throws \Drupal\Core\Database\TransactionNoActiveException
-   * @throws \Drupal\Core\Database\TransactionCommitFailedException
+   * @throws TransactionNoActiveException
+   * @throws TransactionCommitFailedException
    */
   protected function cleanup() {
     $transaction = $this->database->startTransaction('lgpd_drop_table');
