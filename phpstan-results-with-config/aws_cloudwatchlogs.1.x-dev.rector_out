modules/contrib/aws_cloudwatchlogs/src/Form/AwsCloudwatchLogSettingsForm.php
modules/contrib/aws_cloudwatchlogs/src/Form/CreateLogGroupForm.php
modules/contrib/aws_cloudwatchlogs/src/Form/CreateLogStreamForm.php
modules/contrib/aws_cloudwatchlogs/src/Form/DeleteLogGroupForm.php
modules/contrib/aws_cloudwatchlogs/src/Form/DeleteLogStreamForm.php
modules/contrib/aws_cloudwatchlogs/src/Form/FilterLogForm.php
modules/contrib/aws_cloudwatchlogs/src/Form/GenerateLogForm.php
modules/contrib/aws_cloudwatchlogs/src/GetClientInterface.php
modules/contrib/aws_cloudwatchlogs/src/Services/CreateLogGroup.php
modules/contrib/aws_cloudwatchlogs/src/Services/CreateLogStream.php
modules/contrib/aws_cloudwatchlogs/src/Services/DeleteLogGroup.php
modules/contrib/aws_cloudwatchlogs/src/Services/DeleteLogStream.php
modules/contrib/aws_cloudwatchlogs/src/Services/DescribeLogGroups.php
modules/contrib/aws_cloudwatchlogs/src/Services/DescribeLogStreams.php
modules/contrib/aws_cloudwatchlogs/src/Services/Download.php
modules/contrib/aws_cloudwatchlogs/src/Services/FilterLogEvents.php
modules/contrib/aws_cloudwatchlogs/src/Services/GenerateCSV.php
modules/contrib/aws_cloudwatchlogs/src/Services/GetClient.php
modules/contrib/aws_cloudwatchlogs/src/Services/GetLogEvents.php
modules/contrib/aws_cloudwatchlogs/src/Services/PutLogEvents.php
modules/contrib/aws_cloudwatchlogs/src/Services/Utility.php
modules/contrib/aws_cloudwatchlogs/tests/src/Functional/CloudwatchClientConnectionTest.php
modules/contrib/aws_cloudwatchlogs/tests/src/Functional/CreateAndDeleteLogGroupTest.php
modules/contrib/aws_cloudwatchlogs/tests/src/Functional/SettingsPageTest.php

15 files with changes
=====================

1) modules/contrib/aws_cloudwatchlogs/tests/src/Functional/SettingsPageTest.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create administrative user.
@@ @@
     $config['version'] = 'latest';
     $config['access_key'] = $this->randomString('20');
     $config['secret'] = $this->randomString('40');
+    $this->drupalGet('/admin/reports/aws-cloudwatchlogs/settings');

-    $this->drupalPostForm('/admin/reports/aws-cloudwatchlogs/settings', $config, 'Save configuration');
+    $this->submitForm($config, 'Save configuration');
     $this->assertSession()->statusCodeEquals(200);
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/aws_cloudwatchlogs/tests/src/Functional/CreateAndDeleteLogGroupTest.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create administrative user.
@@ @@
     $config['version'] = 'latest';
     $config['access_key'] = $this->randomString('20');
     $config['secret'] = $this->randomString('40');
+    $this->drupalGet('/admin/reports/aws-cloudwatchlogs/settings');

     // Save values in settings form.
-    $this->drupalPostForm(
-      '/admin/reports/aws-cloudwatchlogs/settings',
-      $config,
-      'Save configuration'
-    );
+    $this->submitForm($config, 'Save configuration');
     $this->assertSession()->statusCodeEquals(200);

     // Returns a Drupal\aws_cloudwatchlogs\Services\GetClient object.
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/aws_cloudwatchlogs/tests/src/Functional/CloudwatchClientConnectionTest.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create administrative user.
@@ @@
     $config['version'] = 'latest';
     $config['access_key'] = $this->randomString('20');
     $config['secret'] = $this->randomString('40');
+    $this->drupalGet('/admin/reports/aws-cloudwatchlogs/settings');

     // Save values in settings form.
-    $this->drupalPostForm('/admin/reports/aws-cloudwatchlogs/settings', $config, 'Save configuration');
+    $this->submitForm($config, 'Save configuration');
     $this->assertSession()->statusCodeEquals(200);

     // Returns a Drupal\aws_cloudwatchlogs\Services\GetClient object.
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/aws_cloudwatchlogs/src/Services/PutLogEvents.php:68

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new instance.
    *
-   * @param \Drupal\aws_cloudwatchlogs\Services\GetClient $clientInstance
+   * @param GetClient $clientInstance
    *   GetClient instance for loading the existing client.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Object for logging in drupal application.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messanger
+   * @param MessengerInterface $messanger
    *   Object for showing status messages.
-   * @param \Drupal\aws_cloudwatchlogs\Services\CreateLogGroup $createLogGroup
+   * @param CreateLogGroup $createLogGroup
    *   For creating new log group.
-   * @param \Drupal\aws_cloudwatchlogs\Services\CreateLogStream $createLogStream
+   * @param CreateLogStream $createLogStream
    *   Service for creating new log group.
-   * @param \Drupal\aws_cloudwatchlogs\Services\DescribeLogStreams $describeLogStream
+   * @param DescribeLogStreams $describeLogStream
    *   Service to get information of an existing log stream.
-   * @param \Drupal\aws_cloudwatchlogs\Services\DescribeLogGroups $describelogGroup
+   * @param DescribeLogGroups $describelogGroup
    *   Service to get information of an existing log group.
-   * @param \Drupal\aws_cloudwatchlogs\Services\Utility $utility
+   * @param Utility $utility
    *   Object of service of basic utilities of this module.
    */
   public function __construct(
@@ @@
    *
    * @todo Enable KMS encryption while creating log group.
    *
-   * @param \Aws\CloudWatchLogs\CloudWatchLogsClient $client
+   * @param CloudWatchLogsClient $client
    *   Client for AWS Cloudwatch API.
    * @param string $message
    *   Message to log.
@@ @@
    *
    * It creates new log group/stream if does not exist and logs message in it.
    *
-   * @param \Aws\CloudWatchLogs\CloudWatchLogsClient $client
+   * @param CloudWatchLogsClient $client
    *   The client.
    * @param string $message
    *   The message to log.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/aws_cloudwatchlogs/src/Services/GetLogEvents.php:40

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new instance.
    *
-   * @param \Drupal\aws_cloudwatchlogs\Services\GetClient $clientInstance
+   * @param GetClient $clientInstance
    *   GetClient instance for loading the existing client.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Object for logging in drupal application.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messanger
+   * @param MessengerInterface $messanger
    *   Object for showing status messages.
    */
   public function __construct(
@@ @@
   /**
    * Retuns logs from AWS CloudwatchLogs.
    *
-   * @param \Aws\CloudWatchLogs\CloudWatchLogsClient $client
+   * @param CloudWatchLogsClient $client
    *   Client for AWS Cloudwatch API.
    * @param string $logGroupName
    *   The name of the log group to query.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/aws_cloudwatchlogs/src/Services/GetClient.php:60

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new instance.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config object for basic site information.
-   * @param \Drupal\key\KeyRepository $key_repo
+   * @param KeyRepository $key_repo
    *   Object for keyRepo service of Key module.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messanger
+   * @param MessengerInterface $messanger
    *   Object for showing status messages.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/aws_cloudwatchlogs/src/Services/GenerateCSV.php:62

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new instance.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Object for logging in drupal application.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messanger
+   * @param MessengerInterface $messanger
    *   Object for showing status messages.
-   * @param \Drupal\aws_cloudwatchlogs\Services\Utility $utility
+   * @param Utility $utility
    *   Object of general functionalities of this module.
-   * @param \Drupal\Core\File\FileSystem $fileSystem
+   * @param FileSystem $fileSystem
    *   Object of file_system service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/aws_cloudwatchlogs/src/Services/FilterLogEvents.php:40

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new instance.
    *
-   * @param \Drupal\aws_cloudwatchlogs\Services\GetClient $clientInstance
+   * @param GetClient $clientInstance
    *   GetClient instance for loading the existing client.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Object for logging in drupal application.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messanger
+   * @param MessengerInterface $messanger
    *   Object for showing status messages.
    */
   public function __construct(
@@ @@
   /**
    * Retuns matching logs from AWS CloudwatchLogs.
    *
-   * @param \Aws\CloudWatchLogs\CloudWatchLogsClient $client
+   * @param CloudWatchLogsClient $client
    *   Client for AWS Cloudwatch API.
    * @param string $logGroupName
    *   The name of the log group to query.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/aws_cloudwatchlogs/src/Services/Download.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new instance.
    *
-   * @param \Drupal\aws_cloudwatchlogs\Services\GenerateCSV $generateCSV
+   * @param GenerateCSV $generateCSV
    *   Service for generating csv file with given input.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Object for logging in drupal application.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messanger
+   * @param MessengerInterface $messanger
    *   Object for showing status messages.
    */
   public function __construct(
@@ @@
    * @param array $log
    *   Array of logs returned from aws cloudwatch logs.
    *
-   * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
+   * @return BinaryFileResponse
    *   Binary response of the file to download.
    */
   public function downloadLog(array $log) {
@@ @@
    * @param string $file_path
    *   File physical path.
    *
-   * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
+   * @return BinaryFileResponse
    *   Binary response of the file to download.
    */
   protected function streamFile(string $file_path) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/aws_cloudwatchlogs/src/Services/DescribeLogStreams.php:40

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new instance.
    *
-   * @param \Drupal\aws_cloudwatchlogs\Services\GetClient $clientInstance
+   * @param GetClient $clientInstance
    *   GetClient instance for loading the existing client.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Object for logging in drupal application.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messanger
+   * @param MessengerInterface $messanger
    *   Object for showing status messages.
    */
   public function __construct(
@@ @@
   /**
    * Retuns matching groups from AWS CloudwatchLogs.
    *
-   * @param \Aws\CloudWatchLogs\CloudWatchLogsClient $client
+   * @param CloudWatchLogsClient $client
    *   Client for AWS Cloudwatch API.
    * @param string $logGroupName
    *   The name of the log group.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/aws_cloudwatchlogs/src/Services/DescribeLogGroups.php:40

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new instance.
    *
-   * @param \Drupal\aws_cloudwatchlogs\Services\GetClient $clientInstance
+   * @param GetClient $clientInstance
    *   GetClient instance for loading the existing client.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Object for logging in drupal application.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messanger
+   * @param MessengerInterface $messanger
    *   Object for showing status messages.
    */
   public function __construct(
@@ @@
   /**
    * Retuns matching groups from AWS CloudwatchLogs.
    *
-   * @param \Aws\CloudWatchLogs\CloudWatchLogsClient $client
+   * @param CloudWatchLogsClient $client
    *   Client for AWS Cloudwatch API.
    * @param string $logGroupNamePrefix
    *   The prefix to match.
@@ @@
   /**
    * Check if Log a group exist.
    *
-   * @param \Aws\CloudWatchLogs\CloudWatchLogsClient $client
+   * @param CloudWatchLogsClient $client
    *   The client.
    * @param string $logGroupName
    *   The log group name.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/aws_cloudwatchlogs/src/Services/DeleteLogStream.php:40

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new instance.
    *
-   * @param \Drupal\aws_cloudwatchlogs\Services\GetClient $clientInstance
+   * @param GetClient $clientInstance
    *   GetClient instance for loading the existing client.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Object for logging in drupal application.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messanger
+   * @param MessengerInterface $messanger
    *   Object for showing status messages.
    */
   public function __construct(
@@ @@
   /**
    * Deletes log stream in AWS CloudwatchLogs.
    *
-   * @param \Aws\CloudWatchLogs\CloudWatchLogsClient $client
+   * @param CloudWatchLogsClient $client
    *   Client for AWS Cloudwatch API.
    * @param string $logGroupName
    *   The name of the log group to delete.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/aws_cloudwatchlogs/src/Services/DeleteLogGroup.php:40

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new instance.
    *
-   * @param \Drupal\aws_cloudwatchlogs\Services\GetClient $clientInstance
+   * @param GetClient $clientInstance
    *   GetClient instance for loading the existing client.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Object for logging in drupal application.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messanger
+   * @param MessengerInterface $messanger
    *   Object for showing status messages.
    */
   public function __construct(
@@ @@
   /**
    * Deletes log stream in AWS CloudwatchLogs.
    *
-   * @param \Aws\CloudWatchLogs\CloudWatchLogsClient $client
+   * @param CloudWatchLogsClient $client
    *   Client for AWS Cloudwatch API.
    * @param string $logGroupName
    *   The name of the log group to delete.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/aws_cloudwatchlogs/src/Services/CreateLogStream.php:40

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new instance.
    *
-   * @param \Drupal\aws_cloudwatchlogs\Services\GetClient $clientInstance
+   * @param GetClient $clientInstance
    *   GetClient instance for loading the existing client.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Object for logging in drupal application.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messanger
+   * @param MessengerInterface $messanger
    *   Object for showing status messages.
    */
   public function __construct(
@@ @@
   /**
    * Creates log stream in AWS CloudwatchLogs.
    *
-   * @param \Aws\CloudWatchLogs\CloudWatchLogsClient $client
+   * @param CloudWatchLogsClient $client
    *   Client for AWS Cloudwatch API.
    * @param string $logGroupName
    *   The name of the log group.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/aws_cloudwatchlogs/src/Services/CreateLogGroup.php:40

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new instance.
    *
-   * @param \Drupal\aws_cloudwatchlogs\Services\GetClient $clientInstance
+   * @param GetClient $clientInstance
    *   GetClient instance for loading the existing client.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Object for logging in drupal application.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messanger
+   * @param MessengerInterface $messanger
    *   Object for showing status messages.
    */
   public function __construct(
@@ @@
    *
    * @todo Enable KMS encryption while creating log group.
    *
-   * @param \Aws\CloudWatchLogs\CloudWatchLogsClient $client
+   * @param CloudWatchLogsClient $client
    *   Client for AWS Cloudwatch API.
    * @param string $logGroupName
    *   The name of the log group.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 15 files have been changed by Rector                                      

