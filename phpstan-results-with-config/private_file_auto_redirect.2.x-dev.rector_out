modules/contrib/private_file_auto_redirect/src/Controller/PfarDownloadController.php
modules/contrib/private_file_auto_redirect/src/Routing/RouteSubscriber.php
modules/contrib/private_file_auto_redirect/tests/src/Functional/PfarDownloadControllerTest.php

2 files with changes
====================

1) modules/contrib/private_file_auto_redirect/tests/src/Functional/PfarDownloadControllerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\private_file_auto_redirect\Functional;

+use Drupal\media\MediaTypeInterface;
+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\file\Entity\File;
 use Drupal\file\Plugin\Field\FieldType\FileItem;
 use Drupal\media\Entity\Media;
@@ @@
   /**
    * Default testing media type.
    *
-   * @var \Drupal\media\MediaTypeInterface
+   * @var MediaTypeInterface
    */
   private $mediaType;

@@ @@
   /**
    * Field definition of default testing media type source field.
    *
-   * @var \Drupal\Core\Field\FieldDefinitionInterface
+   * @var FieldDefinitionInterface
    */
   private $sourceField;

@@ @@
   /**
    * Test media entity creation.
    *
-   * @return \Drupal\media\Entity\Media
+   * @return Media
    *   The created media entity.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function createMediaEntity() {
     $value = FileItem::generateSampleValue($this->sourceField);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/private_file_auto_redirect/src/Controller/PfarDownloadController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\private_file_auto_redirect\Controller;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\file\FileInterface;
 use Drupal\media\MediaInterface;
 use Drupal\system\FileDownloadController;
@@ @@
    * @param string $uri
    *   The file uri.
    *
-   * @return \Drupal\file\FileInterface|null
+   * @return FileInterface|null
    *   The file, or null if one couldn't be found.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getFileFromUri(string $uri) {
     // Get the file record based on the URI. If not in the database just return.
-    /** @var \Drupal\file\FileInterface[] $files */
+    /** @var FileInterface[] $files */
     $files = $this->entityTypeManager()
       ->getStorage('file')
       ->loadByProperties(['uri' => $uri]);
@@ @@
   /**
    * Gets the referencing media entity of the file.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file.
    *
-   * @return \Drupal\media\MediaInterface|null
+   * @return MediaInterface|null
    *   The media entity, or null if there isn't one.
    */
   protected function getReferencingMediaFromFile(FileInterface $file) {
@@ @@
    * Multiple media entities shouldn't reference the same file, we just pick
    * the first revision we find.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file.
    *
-   * @return \Drupal\media\MediaInterface|null
+   * @return MediaInterface|null
    *   The media entity, or null if there isn't one.
    */
   protected function getReferencingMediaEntity(FileInterface $file) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 2 files have been changed by Rector                                       

