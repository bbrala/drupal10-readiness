modules/contrib/domain_group/domain_group.module
modules/contrib/domain_group/modules/domain_group_alias/domain_group_alias.module
modules/contrib/domain_group/modules/domain_group_alias/src/DomainGroupAliasHelper.php
modules/contrib/domain_group/modules/domain_group_alias/src/DomainGroupAliasServiceProvider.php
modules/contrib/domain_group/modules/domain_group_alias/src/Plugin/DomainGroupSettings/GroupDomainAlias.php
modules/contrib/domain_group/src/Annotation/DomainGroupSettings.php
modules/contrib/domain_group/src/EventSubscriber/LoginPageRedirect.php
modules/contrib/domain_group/src/Form/DomainGroupGeneralForm.php
modules/contrib/domain_group/src/Form/DomainGroupSettingsForm.php
modules/contrib/domain_group/src/Plugin/DomainGroupSettings/GroupDomain.php
modules/contrib/domain_group/src/Plugin/DomainGroupSettingsBase.php
modules/contrib/domain_group/src/Plugin/DomainGroupSettingsCollection.php
modules/contrib/domain_group/src/Plugin/DomainGroupSettingsInterface.php
modules/contrib/domain_group/src/Plugin/DomainGroupSettingsManager.php
modules/contrib/domain_group/tests/src/Functional/DomainGroupFormAccessTest.php
modules/contrib/domain_group/tests/src/Functional/DomainSettingsFormTest.php
modules/contrib/domain_group/tests/src/Functional/UniqueGroupAccessTest.php
modules/contrib/domain_group/tests/src/Traits/GroupCreationTrait.php
modules/contrib/domain_group/tests/src/Traits/InitializeGroupsTrait.php

14 files with changes
=====================

1) modules/contrib/domain_group/tests/src/Traits/InitializeGroupsTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\domain_group\Traits;

+use Drupal\group\Entity\GroupTypeInterface;
+use Drupal\group\Entity\GroupInterface;
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\node\NodeInterface;
 use Drupal\Tests\domain\Traits\DomainTestTrait;

 /**
@@ @@
   /**
    * A dummy group type with ID 'a'.
    *
-   * @var \Drupal\group\Entity\GroupTypeInterface
+   * @var GroupTypeInterface
    */
   protected $groupTypeA;

@@ @@
   /**
    * A dummy group type with ID 'b'.
    *
-   * @var \Drupal\group\Entity\GroupTypeInterface
+   * @var GroupTypeInterface
    */
   protected $groupTypeB;

@@ @@
   /**
    * Test group A1, of type 'a'.
    *
-   * @var \Drupal\group\Entity\GroupInterface
+   * @var GroupInterface
    */
   protected $groupA1;

@@ @@
   /**
    * Test group A2, of type 'a'.
    *
-   * @var \Drupal\group\Entity\GroupInterface
+   * @var GroupInterface
    */
   protected $groupA2;

@@ @@
   /**
    * Test group A3, of type 'a'.
    *
-   * @var \Drupal\group\Entity\GroupInterface
+   * @var GroupInterface
    */
   protected $groupA3;

@@ @@
   /**
    * Test group B1, of type 'b'.
    *
-   * @var \Drupal\group\Entity\GroupInterface
+   * @var GroupInterface
    */
   protected $groupB1;

@@ @@
   /**
    * Test group B2, of type 'b'.
    *
-   * @var \Drupal\group\Entity\GroupInterface
+   * @var GroupInterface
    */
   protected $groupB2;

@@ @@
   /**
    * Test group B3, of type 'b'.
    *
-   * @var \Drupal\group\Entity\GroupInterface
+   * @var GroupInterface
    */
   protected $groupB3;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Test node for group A1.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $nodeA1;

@@ @@
   /**
    * Test node for group A2.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $nodeA2;

@@ @@
   /**
    * Test node for group A3.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $nodeA3;

@@ @@
   protected function initializeTestGroupsDomains() {
     // Creating domains.
     $this->domains = [''];
-    /** @var \Drupal\group\Entity\GroupInterface $group */
+    /** @var GroupInterface $group */
     foreach ($this->allTestGroups as $group) {
       $this->domains[] = [
         'subdomain' => strtolower($group->label()),
@@ @@
   /**
    * Returns the config factory to use.
    *
-   * @return \Drupal\Core\Config\ConfigFactoryInterface
+   * @return ConfigFactoryInterface
    *   The config factory.
    */
   protected function getConfigFactory() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/domain_group/tests/src/Traits/GroupCreationTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\domain_group\Traits;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\group\Entity\Group;
+use Drupal\group\Entity\GroupType;
 /**
  * Provides methods to create groups and group types.
  *
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    * @param array $values
    *   (optional) The values used to create the entity.
    *
-   * @return \Drupal\group\Entity\Group
+   * @return Group
    *   The created group entity.
    */
   protected function createGroup(array $values = []) {
@@ @@
    * @param array $values
    *   (optional) The values used to create the entity.
    *
-   * @return \Drupal\group\Entity\GroupType
+   * @return GroupType
    *   The created group type entity.
    */
   protected function createGroupType(array $values = []) {
@@ @@
   /**
    * Returns the entity type manager service to use.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager service.
    */
   protected function getEntityTypeManager() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/domain_group/tests/src/Functional/UniqueGroupAccessTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\domain_group\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Tests\domain_group\Traits\GroupCreationTrait;
 use Drupal\Tests\domain_group\Traits\InitializeGroupsTrait;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   /**
    * Regular authenticated User for tests.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $testUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Setup the group types and test groups from the InitializeGroupsTrait.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/domain_group/tests/src/Functional/DomainSettingsFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\domain_group\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\domain_group\Traits\GroupCreationTrait;
 use Drupal\Tests\domain_group\Traits\InitializeGroupsTrait;
@@ @@
   /**
    * Regular authenticated User for tests.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/domain_group/tests/src/Functional/DomainGroupFormAccessTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\domain_group\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\domain_group\Traits\GroupCreationTrait;
 use Drupal\Tests\domain_group\Traits\InitializeGroupsTrait;
@@ @@
   /**
    * Regular authenticated User for tests.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * Regular authenticated User for tests.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $testUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->adminUser = $this->drupalCreateUser([
       'access administration pages',
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/domain_group/src/Plugin/DomainGroupSettingsManager.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * A collection of vanilla instances of all domain group settings plugins.
    *
-   * @var \Drupal\domain_group\Plugin\DomainGroupSettingsCollection
+   * @var DomainGroupSettingsCollection
    */
   protected $allPlugins;

@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/domain_group/src/Plugin/DomainGroupSettings/GroupDomain.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * The path validator.
    *
-   * @var \Drupal\Core\Path\PathValidatorInterface
+   * @var PathValidatorInterface
    */
   protected $pathValidator;

@@ @@
   /**
    * The domain validator.
    *
-   * @var \Drupal\domain\DomainValidatorInterface
+   * @var DomainValidatorInterface
    */
   protected $validator;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The domain entity storage.
    *
-   * @var \Drupal\domain\DomainStorageInterface
+   * @var DomainStorageInterface
    */
   protected $domainStorage;

@@ @@
   /**
    * The domain negotiator.
    *
-   * @var \Drupal\domain\DomainNegotiatorInterface
+   * @var DomainNegotiatorInterface
    */
   protected $domainNegotiator;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/domain_group/src/Form/DomainGroupSettingsForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The DomainGroupSettingsManager service.
    *
-   * @var \Drupal\domain_group\Plugin\DomainGroupSettingsManager
+   * @var DomainGroupSettingsManager
    */
   protected $pluginManagerDomainGroupSettings;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/domain_group/src/Form/DomainGroupGeneralForm.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The domain entity storage.
    *
-   * @var \Drupal\domain\DomainStorageInterface
+   * @var DomainStorageInterface
    */
   protected $domainStorage;

@@ @@
   /**
    * DomainGroupGeneralForm constructor.
    *
-   * @param Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The Config Factory.
-   * @param Drupal\domain\DomainStorageInterface $domain_storage
+   * @param DomainStorageInterface $domain_storage
    *   The domain entity storage.
    */
   public function __construct(ConfigFactoryInterface $config_factory, DomainStorageInterface $domain_storage) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/domain_group/src/EventSubscriber/LoginPageRedirect.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\domain_group\EventSubscriber;

+use Drupal\domain\DomainStorageInterface;
+use Drupal\Core\Config\Config;
+use Drupal\domain\DomainInterface;
 use Drupal\domain\DomainNegotiatorInterface;
 use Drupal\domain\DomainRedirectResponse;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The domain negotiator service.
    *
-   * @var \Drupal\domain\DomainNegotiatorInterface
+   * @var DomainNegotiatorInterface
    */
   protected $domainNegotiator;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The Domain storage handler service.
    *
-   * @var \Drupal\domain\DomainStorageInterface
+   * @var DomainStorageInterface
    */
   protected $domainStorage;

@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;

@@ @@
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * The domain_group.settings config object.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;

@@ @@
   /**
    * Constructs a LoginPageRedirect object.
    *
-   * @param \Drupal\domain\DomainNegotiatorInterface $negotiator
+   * @param DomainNegotiatorInterface $negotiator
    *   The domain negotiator service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user account.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function __construct(DomainNegotiatorInterface $negotiator, EntityTypeManagerInterface $entity_type_manager, AccountInterface $account, RouteMatchInterface $route_match, ConfigFactoryInterface $config_factory) {
@@ @@
   /**
    * Redirects user.login route to the Default Domain.
    *
-   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
+   * @param RequestEvent $event
    *   The RequestEvent to process.
    */
   public function loginRedirect(RequestEvent $event) {
     // Check if login is restricted to Default domain in the module config.
     if ($this->config->get('restricted_login')) {
-      /** @var \Drupal\domain\DomainInterface $default_domain */
+      /** @var DomainInterface $default_domain */
       $default_domain = $this->domainStorage->loadDefaultDomain();
       // Only redirect if there is a default domain.
       if (!$default_domain) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/domain_group/src/Annotation/DomainGroupSettings.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\domain_group\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


12) modules/contrib/domain_group/modules/domain_group_alias/src/Plugin/DomainGroupSettings/GroupDomainAlias.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\domain_group_alias\Plugin\DomainGroupSettings;

+use Drupal\group\Entity\Group;
+use Drupal\domain_alias\Entity\DomainAlias;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The domain validator.
    *
-   * @var \Drupal\domain\DomainValidatorInterface
+   * @var DomainValidatorInterface
    */
   protected $validator;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The token replacement instance.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;

@@ @@
    * {@inheritdoc}
    */
   public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\group\Entity\Group $group */
+    /** @var Group $group */
     $group = $form_state->get('group');
     $gid = $group->id();
     if ($domain = Domain::load('group_' . $gid)) {
@@ @@
                 ->loadByProperties($properties);
               // Check domain to update or create a new one.
               if ($domain_alias) {
-                /** @var \Drupal\domain_alias\Entity\DomainAlias $domain_alias */
+                /** @var DomainAlias $domain_alias */
                 $domain_alias = reset($domain_alias);
                 $domain_alias->set('alias', $domain_alias_token);
                 $domain_alias->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/domain_group/modules/domain_group_alias/domain_group_alias.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\group\Entity\Group;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\domain_alias\Entity\DomainAlias;
 /**
  * @file
  * Contains domain_group_alias.module.
@@ @@
       if ($form_state->has('group_wizard') && $form_state->get('group_wizard_id') == 'group_creator') {
         return;
       }
-      /** @var \Drupal\group\Entity\Group $group */
+      /** @var Group $group */
       $group = $entity->getGroup();
       $domain_id = 'group_' . $group->id();
       if (isset($form['path']['domain_path'])) {
@@ @@
 /**
  * Create or update the domain path alias entity.
  *
- * @param \Drupal\group\Entity\GroupContent $group_content
+ * @param GroupContent $group_content
  *   The Group content.
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The Source entity.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   Form State.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
+ * @throws EntityStorageException
  */
 function domain_group_alias_set_domain_alias(GroupContent $group_content, EntityInterface $entity, FormStateInterface $form_state = NULL) {
   $gid = $group_content->getGroup()->id();
@@ @@
         $is_custom_alias = \Drupal::keyValue('domain_group_alias_custom.' . $domain_id)
           ->get($group_content->id(), FALSE);
         if (!$is_custom_alias) {
-          /** @var \Drupal\domain_alias\Entity\DomainAlias $domain_alias */
+          /** @var DomainAlias $domain_alias */
           $domain_alias = reset($domain_alias);
           $domain_alias_token = ($domain_alias_custom) ? $domain_alias_custom : $domain_alias_token;
           $domain_alias->set('alias', $domain_alias_token);
@@ @@
  *
  * @param string $token_value
  *   The alias pattern.
- * @param \Drupal\group\Entity\GroupContent $group_content
+ * @param GroupContent $group_content
  *   The group content entity.
  * @param string $lang
  *   The source entity language.
@@ @@
  *
  * @param array $form
  *   The form array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state object.
  */
 function domain_group_alias_validate(array &$form, FormStateInterface $form_state) {
@@ @@
  *
  * @param array $form
  *   The form array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state object.
  */
 function domain_group_alias_submit(array &$form, FormStateInterface $form_state) {
   $entity = $form_state->getFormObject()->getEntity();
   $source_entity = $entity->getEntity();
-  /** @var Drupal\group\Entity\GroupContent $entity */
+  /** @var GroupContent $entity */
   domain_group_alias_set_domain_alias($entity, $source_entity, $form_state);
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


14) modules/contrib/domain_group/domain_group.module:45

    ---------- begin diff ----------
@@ @@
 function domain_group_node_grants(AccountInterface $account, $op) {
   $grants = [];

-  /** @var \Drupal\domain\Entity\Domain $active */
+  /** @var Domain $active */
   $active = \Drupal::service('domain.negotiator')->getActiveDomain();

   if (empty($active)) {
@@ @@

   $domains = domain_group_node_get_domains($node);

-  /** @var \Drupal\domain\Entity\Domain $active */
+  /** @var Domain $active */
   $active = \Drupal::service('domain.negotiator')->getActiveDomain();

   if (empty($active)) {
@@ @@
     return AccessResult::neutral();
   }

-  /** @var \Drupal\domain\Entity\Domain $active */
+  /** @var Domain $active */
   $active = \Drupal::service('domain.negotiator')->getActiveDomain();

   if (empty($active)) {
@@ @@
 /**
  * Get domains for the given node.
  *
- * @param \Drupal\node\NodeInterface $node
+ * @param NodeInterface $node
  *   The node.
  *
  * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/domain_group/modules/domain_group_alias/src/DomainGroupA
         liasHelper.php" file, due to:                                          
         "Analyze error: "Class Drupal\domain_path\DomainPathHelper not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

