modules/contrib/drupalmoduleupgrader/drupalmoduleupgrader.drush.inc
modules/contrib/drupalmoduleupgrader/drupalmoduleupgrader.module
modules/contrib/drupalmoduleupgrader/src/AnalyzerBase.php
modules/contrib/drupalmoduleupgrader/src/AnalyzerInterface.php
modules/contrib/drupalmoduleupgrader/src/Annotation/Analyzer.php
modules/contrib/drupalmoduleupgrader/src/Annotation/Converter.php
modules/contrib/drupalmoduleupgrader/src/Annotation/Fixer.php
modules/contrib/drupalmoduleupgrader/src/Annotation/Indexer.php
modules/contrib/drupalmoduleupgrader/src/Annotation/Rewriter.php
modules/contrib/drupalmoduleupgrader/src/ArrayIndexer.php
modules/contrib/drupalmoduleupgrader/src/Commands/DrupalmoduleupgraderCommands.php
modules/contrib/drupalmoduleupgrader/src/ConverterBase.php
modules/contrib/drupalmoduleupgrader/src/ConverterInterface.php
modules/contrib/drupalmoduleupgrader/src/DependencyCollectorTrait.php
modules/contrib/drupalmoduleupgrader/src/DeriverBase.php
modules/contrib/drupalmoduleupgrader/src/FixerBase.php
modules/contrib/drupalmoduleupgrader/src/FixerInterface.php
modules/contrib/drupalmoduleupgrader/src/IOException.php
modules/contrib/drupalmoduleupgrader/src/IndexerBase.php
modules/contrib/drupalmoduleupgrader/src/IndexerExecutionInterface.php
modules/contrib/drupalmoduleupgrader/src/IndexerInterface.php
modules/contrib/drupalmoduleupgrader/src/IndexerUsageInterface.php
modules/contrib/drupalmoduleupgrader/src/Issue.php
modules/contrib/drupalmoduleupgrader/src/IssueInterface.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Analyzer/DB.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Analyzer/DBDeriver.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Analyzer/FlagHook.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Analyzer/FlagHookDeriver.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Analyzer/FunctionCall.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Analyzer/FunctionCallDeriver.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Analyzer/Grep.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Analyzer/HookFormAlter.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Analyzer/HookPermission.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Analyzer/HookUninstall.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Analyzer/InfoFile.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Analyzer/PSR4.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Analyzer/Tests.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Blocks.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/EntityHooks.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/CToolsGetPlugins.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/CToolsObjectCacheGet.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/CToolsObjectCacheSet.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/CacheGet.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/CacheSet.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/CommentLoad.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/DB.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/DBDeriver.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/DbDelete.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/DbInsert.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/DbQuery.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/DbQueryRange.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/DbQueryTemporary.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/DbSelect.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/DbUpdate.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/Disable.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/DisableDeriver.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/DrupalGetTitle.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/DrupalIsCLI.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/DrupalMapAssoc.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/DrupalMessageGet.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/DrupalMessageSet.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/DrupalWriteRecord.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/EntityCreate.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/EntityGetInfo.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/EntityLoad.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/EntityOperation.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/EntityOperationDeriver.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/FieldInfoFieldTypes.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/FieldInfoFormatterTypes.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/FieldInfoWidgetTypes.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/FieldUpdateField.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/FieldUpdateInstance.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/FieldViewField.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/FieldViewValue.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/FormExecuteHandlers.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/FormLoadInclude.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/FormSetValue.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/FormStateDefaults.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/FormStateValuesClean.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/FunctionCallModifier.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/GetT.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/L.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/LoadMultiple.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/LoadMultipleDeriver.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/ModuleInvoke.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/ModuleInvokeAll.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/NodeLoad.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/St.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/ThemeGetRegistry.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/URL.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/UserAccess.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/UserLoad.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/UserSave.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/VariableAPI.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/VariableDel.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/VariableGet.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/VariableSet.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/Watchdog.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Grep.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/HookBoot.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/HookEntityInfo.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/HookEntityTypeView.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/HookExit.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/HookFieldAttachCreateBundle.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/HookFieldAttachDeleteBundle.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/HookFieldAttachRenameBundle.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/HookFieldFormatterInfo.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/HookFieldWidgetInfo.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/HookFormAlter.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/HookInit.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/HookLibrary.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/HookMenuAlter.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/HookNodePrepare.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/HookPermission.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/HookURLOutboundAlter.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/HookUserLogin.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/HookWatchdog.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/InfoToYAML.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Links.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/PSR4.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Routing.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Tests.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/UnitTests.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/UserHooks.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Fixer/CreateClass.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Fixer/Define.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Fixer/Delete.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Fixer/Disable.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Fixer/FormCallbackToMethod.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Fixer/HookToYAML.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Fixer/Implement.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Fixer/ImplementHook.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Fixer/NodeCollectorTrait.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Fixer/Notify.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Fixer/PSR4.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Indexer/Classes.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Indexer/Constants.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Indexer/FunctionCalls.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Indexer/Functions.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Rewriter/FormState.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Rewriter/Generic.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Rewriter/GenericDeriver.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Routing/ContentRoute.php
modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Routing/FormRoute.php
modules/contrib/drupalmoduleupgrader/src/PluginBase.php
modules/contrib/drupalmoduleupgrader/src/Report.php
modules/contrib/drupalmoduleupgrader/src/ReportInterface.php
modules/contrib/drupalmoduleupgrader/src/RewriterInterface.php
modules/contrib/drupalmoduleupgrader/src/Routing/Drupal7/RouteWrapper.php
modules/contrib/drupalmoduleupgrader/src/Routing/Drupal7/Router.php
modules/contrib/drupalmoduleupgrader/src/Routing/Drupal8/RouteWrapper.php
modules/contrib/drupalmoduleupgrader/src/Routing/HookMenu.php
modules/contrib/drupalmoduleupgrader/src/Routing/LinkBinding/LinkBinding.php
modules/contrib/drupalmoduleupgrader/src/Routing/LinkBinding/LinkBindingFactory.php
modules/contrib/drupalmoduleupgrader/src/Routing/LinkBinding/LocalActionLinkBinding.php
modules/contrib/drupalmoduleupgrader/src/Routing/LinkBinding/LocalTaskLinkBinding.php
modules/contrib/drupalmoduleupgrader/src/Routing/LinkBinding/MenuLinkBinding.php
modules/contrib/drupalmoduleupgrader/src/Routing/LinkIndex.php
modules/contrib/drupalmoduleupgrader/src/Routing/ParameterBinding.php
modules/contrib/drupalmoduleupgrader/src/Routing/ParameterMap.php
modules/contrib/drupalmoduleupgrader/src/Routing/RouteConverterInterface.php
modules/contrib/drupalmoduleupgrader/src/Routing/RouteWrapperInterface.php
modules/contrib/drupalmoduleupgrader/src/Routing/RouterBase.php
modules/contrib/drupalmoduleupgrader/src/Routing/RouterBuiltEvent.php
modules/contrib/drupalmoduleupgrader/src/Routing/RouterInterface.php
modules/contrib/drupalmoduleupgrader/src/Target.php
modules/contrib/drupalmoduleupgrader/src/TargetInterface.php
modules/contrib/drupalmoduleupgrader/src/Utility/Filter/ContainsLogicFilter.php
modules/contrib/drupalmoduleupgrader/src/Utility/Filter/FieldValueFilter.php
modules/contrib/drupalmoduleupgrader/src/Utility/Filter/FunctionCallArgumentFilter.php
modules/contrib/drupalmoduleupgrader/src/Utility/Filter/NodeAssignmentFilter.php
modules/contrib/drupalmoduleupgrader/src/Utility/FormConverter.php
modules/contrib/drupalmoduleupgrader/src/Utility/FormConverterFactory.php
modules/contrib/drupalmoduleupgrader/src/Utility/Path/Drupal7/PathComponent.php
modules/contrib/drupalmoduleupgrader/src/Utility/Path/Drupal7/PathUtility.php
modules/contrib/drupalmoduleupgrader/src/Utility/Path/Drupal8/PathComponent.php
modules/contrib/drupalmoduleupgrader/src/Utility/Path/Drupal8/PathUtility.php
modules/contrib/drupalmoduleupgrader/src/Utility/Path/PathComponentBase.php
modules/contrib/drupalmoduleupgrader/src/Utility/Path/PathComponentInterface.php
modules/contrib/drupalmoduleupgrader/src/Utility/Path/PathUtilityBase.php
modules/contrib/drupalmoduleupgrader/src/Utility/Path/PathUtilityInterface.php
modules/contrib/drupalmoduleupgrader/src/Utility/StringTransformTrait.php
modules/contrib/drupalmoduleupgrader/tests/bootstrap.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/ContainerMockTrait.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/IssueTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/ModuleMockerTrait.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Analyzer/AnalyzerTestBase.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Analyzer/DBTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Analyzer/FlagHookTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Analyzer/FunctionCallTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Analyzer/HookFormAlterTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Analyzer/HookPermissionTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Analyzer/HookUninstallTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Analyzer/InfoFileTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Analyzer/PSR4Test.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Analyzer/TestsTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/CToolsGetPluginsTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/CToolsObjectCacheGetTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/CToolsObjectCacheSetTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/CacheGetTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/CacheSetTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/CommentLoadTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/DBTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/DbDeleteTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/DbInsertTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/DbQueryRangeTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/DbQueryTemporaryTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/DbQueryTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/DbSelectTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/DbUpdateTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/DisableTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/DrupalGetMessageTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/DrupalGetTitleTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/DrupalIsCLITest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/DrupalMapAssocTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/DrupalSetMessageTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/DrupalWriteRecordTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/EntityCreateTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/EntityGetInfoTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/FieldInfoFieldTypesTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/FieldInfoFormatterTypesTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/FieldInfoWidgetTypesTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/FieldUpdateFieldTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/FieldUpdateInstanceTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/FieldViewFieldTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/FieldViewValueTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/FormExecuteHandlersTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/FormLoadIncludeTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/FormSetValueTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/FormStateValuesCleanTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/FunctionCallModifierTestBase.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/GetTTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/ModuleInvokeAllTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/ModuleInvokeTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/NodeLoadTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/StTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/ThemeGetRegistryTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/UserAccessTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/UserLoadTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/UserSaveTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/VariableDelTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/VariableGetTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/VariableSetTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/WatchdogTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Fixer/CreateClassTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Fixer/DefineTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Fixer/DeleteTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Fixer/DisableTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Fixer/FormCallbackToMethodTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Fixer/HookToYAMLTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Fixer/ImplementHookTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Fixer/ImplementTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Fixer/NotifyTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Fixer/PSR4Test.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Indexer/ClassesTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Indexer/FunctionsTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Indexer/IndexerTestBase.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Rewriter/FormStateTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Rewriter/GenericTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/ReportTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Routing/Drupal7/RouteWrapperTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Routing/Drupal7/RouterTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Routing/Drupal8/RouteWrapperTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Routing/LinkBinding/LinkBindingTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Routing/ParameterBindingTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Routing/RouterBaseTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/SQLiteDatabaseTrait.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/TargetTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/TestBase.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Utility/Filter/ContainsLogicFilterTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Utility/Filter/FieldValueFilterTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Utility/Filter/FunctionCallArgumentFilterTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Utility/Filter/NodeAssignmentFilterTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Utility/Path/Drupal7/PathComponentTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Utility/Path/Drupal7/PathUtilityTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Utility/Path/Drupal8/PathComponentTest.php
modules/contrib/drupalmoduleupgrader/tests/src/Unit/Utility/Path/Drupal8/PathUtilityTest.php

106 files with changes
======================

1) modules/contrib/drupalmoduleupgrader/tests/src/Unit/Utility/Path/Drupal8/PathUtilityTest.php:10

    ---------- begin diff ----------
@@ @@
  */
 class PathUtilityTest extends UnitTestCase {

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->path = new PathUtility('node/{node}/foo/{bar}');
   }
@@ @@
     $this->assertEquals('wambooli', $path->last()->__toString());
   }

-  /**
-   * @expectedException \InvalidArgumentException
-   */
   public function testAddArray() {
+    $this->expectException(\InvalidArgumentException::class);
     $this->path->add([]);
   }

-  /**
-   * @expectedException \InvalidArgumentException
-   */
   public function testAddObject() {
+    $this->expectException(\InvalidArgumentException::class);
     $this->path->add(new \StdClass());
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/drupalmoduleupgrader/tests/src/Unit/Utility/Path/Drupal7/PathUtilityTest.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->path = new PathUtility('node/%node/foo/%');
   }
@@ @@
     $this->assertEquals('wambooli', $path->last()->__toString());
   }

-  /**
-   * @expectedException \InvalidArgumentException
-   */
   public function testAddArray() {
+    $this->expectException(\InvalidArgumentException::class);
     $this->path->add([]);
   }

-  /**
-   * @expectedException \InvalidArgumentException
-   */
   public function testAddObject() {
+    $this->expectException(\InvalidArgumentException::class);
     $this->path->add(new \StdClass());
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/drupalmoduleupgrader/tests/src/Unit/Utility/Filter/NodeAssignmentFilterTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\drupalmoduleupgrader\Unit\Utility\Filter;

+use Pharborist\Operators\AssignNode;
 use Drupal\drupalmoduleupgrader\Utility\Filter\NodeAssignmentFilter;
 use Drupal\Tests\UnitTestCase;
 use Pharborist\Parser;
@@ @@
 class NodeAssignmentFilterTest extends UnitTestCase {

   /**
-   * @var \Drupal\drupalmoduleupgrader\Utility\Filter\NodeAssignmentFilter
+   * @var NodeAssignmentFilter
    */
   protected $filter;

-  public function setUp() {
+  public function setUp(): void {
     $this->filter = new NodeAssignmentFilter();
   }

   public function testLeftOperand() {
-    /** @var \Pharborist\Operators\AssignNode $expr */
+    /** @var AssignNode $expr */
     $expr = Parser::parseExpression('$foo = "bazzz"');
     $this->assertTrue($expr->getLeftOperand()->is($this->filter));
   }

   public function testRightOperand() {
-    /** @var \Pharborist\Operators\AssignNode $expr */
+    /** @var AssignNode $expr */
     $expr = Parser::parseExpression('$baz = $foo');
     $this->assertFalse($expr->getRightOperand()->is($this->filter));
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/drupalmoduleupgrader/tests/src/Unit/Utility/Filter/FunctionCallArgumentFilterTest.php:11

    ---------- begin diff ----------
@@ @@
 class FunctionCallArgumentFilterTest extends UnitTestCase {

   /**
-   * @var \Drupal\drupalmoduleupgrader\Utility\Filter\FunctionCallArgumentFilter
+   * @var FunctionCallArgumentFilter
    */
   protected $filter;

-  public function setUp() {
+  public function setUp(): void {
     $this->filter = new FunctionCallArgumentFilter('foo');
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/drupalmoduleupgrader/tests/src/Unit/Utility/Filter/FieldValueFilterTest.php:11

    ---------- begin diff ----------
@@ @@
 class FieldValueFilterTest extends UnitTestCase {

   /**
-   * @var \Drupal\drupalmoduleupgrader\Utility\Filter\FieldValueFilter
+   * @var FieldValueFilter
    */
   protected $filter;

-  public function setUp() {
+  public function setUp(): void {
     $this->filter = new FieldValueFilter('foo');
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/drupalmoduleupgrader/tests/src/Unit/Utility/Filter/ContainsLogicFilterTest.php:11

    ---------- begin diff ----------
@@ @@
 class ContainsLogicFilterTest extends UnitTestCase {

   /**
-   * @var \Drupal\drupalmoduleupgrader\Utility\Filter\ContainsLogicFilter
+   * @var ContainsLogicFilter
    */
   protected $filter;

-  public function setUp() {
+  public function setUp(): void {
     $this->filter = new ContainsLogicFilter();
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/drupalmoduleupgrader/tests/src/Unit/TestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\drupalmoduleupgrader\Unit;

+use org\bovigo\vfs\vfsStreamDirectory;
+use Drupal\drupalmoduleupgrader\TargetInterface;
 use Drupal\drupalmoduleupgrader\Target;
 use Drupal\Tests\UnitTestCase;
 use Drupal\Tests\PhpunitCompatibilityTrait;
@@ @@
   protected $info;

   /**
-   * @var \org\bovigo\vfs\vfsStreamDirectory
+   * @var vfsStreamDirectory
    */
   protected $dir;

   /**
-   * @var \Drupal\drupalmoduleupgrader\TargetInterface
+   * @var TargetInterface
    */
   protected $target;

@@ @@
   /**
    * Mocks an entire module, called foo, in a virtual file system.
    */
-  public function setUp() {
+  public function setUp(): void {
     $this->info = $this->getAnnotations();

     $this->dir = $this->mockModule('foo');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/drupalmoduleupgrader/tests/src/Unit/TargetTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\drupalmoduleupgrader\Unit;

+use Drupal\drupalmoduleupgrader\IndexerInterface;
 use Drupal\drupalmoduleupgrader\Target;

 /**
@@ @@
 class TargetTest extends TestBase {

   /**
-   * @var \Drupal\drupalmoduleupgrader\IndexerInterface
+   * @var IndexerInterface
    */
   protected $indexer;

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

-    $this->indexer = $this->getMockBuilder('\Drupal\drupalmoduleupgrader\Plugin\DMU\Indexer\Functions')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->indexer = $this->createMock('\Drupal\drupalmoduleupgrader\Plugin\DMU\Indexer\Functions');

     $this->container
       ->get('plugin.manager.drupalmoduleupgrader.indexer')
@@ @@
       ->willReturn($this->indexer);
   }

-  /**
-   * @expectedException \RuntimeException
-   */
   public function testInvalidBasePath() {
+    $this->expectException(\RuntimeException::class);
     // Trying to create a target with an invalid path should instantly
     // throw an exception.
     new Target('foobar', $this->container);
@@ @@
     $this->assertFalse($this->target->implementsHook('menu_alter'));
   }

-  /**
-   * @expectedException \InvalidArgumentException
-   */
   public function testExecuteUnimplementedHook() {
+    $this->expectException(\InvalidArgumentException::class);
     $this->indexer->method('has')->with('hook_menu')->willReturn(FALSE);
     $this->target->executeHook('menu');
   }
@@ @@
     $this->indexer->method('execute')->with('hook_menu')->willReturn($expected);

     $actual = $this->target->executeHook('menu');
-    $this->assertInternalType('array', $actual);
+    $this->assertIsArray($actual);
     $this->assertSame($expected, $actual);
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * GetMockBuilderGetMockToCreateMockRector
 * SpecificAssertInternalTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/drupalmoduleupgrader/tests/src/Unit/Routing/RouterBaseTest.php:14

    ---------- begin diff ----------
@@ @@

   private $userEdit, $userView, $userRoot, $routeProvider;

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->userEdit = new Route('/user/{user}/edit');
     $this->userView = new Route('/user/{user}');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/drupalmoduleupgrader/tests/src/Unit/Routing/ParameterBindingTest.php:13

    ---------- begin diff ----------
@@ @@
 class ParameterBindingTest extends UnitTestCase {

   /**
-   * @var \Pharborist\Functions\ParameterNode
+   * @var ParameterNode
    */
   private $parameter;

-  public function setUp() {
+  public function setUp(): void {
     // ParameterNode supports variadic parameters, which use the T_ELLIPSIS
     // token. Which will be undefined on any PHP older than 5.6. So this kludges
     // around that.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/drupalmoduleupgrader/tests/src/Unit/Routing/LinkBinding/LinkBindingTest.php:15

    ---------- begin diff ----------
@@ @@

   private $source, $destination;

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $item = [
       'title' => 'Diff',
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/drupalmoduleupgrader/tests/src/Unit/Routing/Drupal8/RouteWrapperTest.php:12

    ---------- begin diff ----------
@@ @@

   private $route, $wrapper;

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->route = new Route('user/{user}/edit');
     $this->wrapper = new RouteWrapper('user.edit', $this->route, $this->createMock('\Drupal\Core\Routing\RouteProviderInterface'));
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/drupalmoduleupgrader/tests/src/Unit/Routing/Drupal7/RouterTest.php:12

    ---------- begin diff ----------
@@ @@

   private $router;

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->router = new Router();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/drupalmoduleupgrader/tests/src/Unit/ReportTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\drupalmoduleupgrader\Unit;

+use Drupal\drupalmoduleupgrader\ReportInterface;
 use Drupal\drupalmoduleupgrader\Issue;
 use Drupal\drupalmoduleupgrader\Report;

@@ @@
 class ReportTest extends TestBase {

   /**
-   * @var \Drupal\drupalmoduleupgrader\ReportInterface
+   * @var ReportInterface
    */
   private $report;

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->report = new Report();
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Rewriter/GenericTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\drupalmoduleupgrader\Unit\Plugin\DMU\Rewriter;

+use Drupal\drupalmoduleupgrader\RewriterInterface;
+use Pharborist\Objects\ObjectPropertyNode;
+use Pharborist\Operators\AssignNode;
+use Pharborist\ArrayLookupNode;
+use Pharborist\Functions\FunctionDeclarationNode;
 use Drupal\drupalmoduleupgrader\Plugin\DMU\Rewriter\Generic as GenericRewriter;
 use Drupal\Tests\drupalmoduleupgrader\Unit\TestBase;
 use Pharborist\Parser;
@@ @@
 class GenericTest extends TestBase {

   /**
-   * @var \Drupal\drupalmoduleupgrader\RewriterInterface
+   * @var RewriterInterface
    */
   protected $plugin;

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $definition = [
@@ @@
   }

   public function testRewriteValidPropertyAsGetter() {
-    /** @var \Pharborist\Objects\ObjectPropertyNode $expr */
+    /** @var ObjectPropertyNode $expr */
     $expr = Parser::parseExpression('$node->nid');
     $rewritten = $this->plugin->rewriteAsGetter($expr, 'nid');
     $this->assertInstanceOf('\Pharborist\Objects\ObjectMethodCallNode', $rewritten);
@@ @@
   }

   public function testRewriteInvalidPropertyAsGetter() {
-    /** @var \Pharborist\Objects\ObjectPropertyNode $expr */
+    /** @var ObjectPropertyNode $expr */
     $expr = Parser::parseExpression('$node->baz');
     $rewritten = $this->plugin->rewriteAsGetter($expr, 'baz');
     $this->assertNull($rewritten);
@@ @@
   }

   public function testRewriteValidPropertyAsSetter() {
-    /** @var \Pharborist\Operators\AssignNode $expr */
+    /** @var AssignNode $expr */
     $expr = Parser::parseExpression('$node->title = "Foobaz"');
     $rewritten = $this->plugin->rewriteAsSetter($expr->getLeftOperand(), 'title', $expr);
     $this->assertInstanceOf('\Pharborist\Objects\ObjectMethodCallNode', $rewritten);
@@ @@
   }

   public function testRewriteInvalidPropertyAsSetter() {
-    /** @var \Pharborist\Operators\AssignNode $expr */
+    /** @var AssignNode $expr */
     $expr = Parser::parseExpression('$node->baz = "Blorf!"');
     $rewritten = $this->plugin->rewriteAsSetter($expr->getLeftOperand(), 'baz', $expr);
     $this->assertNull($rewritten);

-    /** @var \Pharborist\Operators\AssignNode $expr */
+    /** @var AssignNode $expr */
     $expr = Parser::parseExpression('$node->nid = 30');
     $rewritten = $this->plugin->rewriteAsSetter($expr->getLeftOperand(), 'nid', $expr);
     $this->assertNull($rewritten);
@@ @@
   }

   public function testRewriteFieldLookup() {
-    /** @var \Pharborist\ArrayLookupNode $lookup */
+    /** @var ArrayLookupNode $lookup */
     $lookup = Parser::parseExpression('$node->field_foo[LANGUAGE_NONE][0]["value"]');
     $rewritten = GenericRewriter::rewriteFieldLookup($lookup);
     $this->assertInstanceOf('\Pharborist\Objects\ObjectPropertyNode', $rewritten);
@@ @@
   }
 }
 END;
-    /** @var \Pharborist\Functions\FunctionDeclarationNode $func */
+    /** @var FunctionDeclarationNode $func */
     $func = Parser::parseSnippet($code);
     $this->plugin->rewrite($func->getParameterAtIndex(0));

@@ @@
   }
 }
 END;
-    /** @var \Pharborist\Functions\FunctionDeclarationNode $func */
+    /** @var FunctionDeclarationNode $func */
     $func = Parser::parseSnippet($code);
     $this->plugin->rewrite($func->getParameterAtIndex(0));
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Rewriter/FormStateTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\drupalmoduleupgrader\Unit\Plugin\DMU\Rewriter;

+use Drupal\drupalmoduleupgrader\RewriterInterface;
+use Pharborist\Operators\AssignNode;
 use Drupal\Tests\drupalmoduleupgrader\Unit\TestBase;
 use Pharborist\Parser;

@@ @@
 class FormStateTest extends TestBase {

   /**
-   * @var \Drupal\drupalmoduleupgrader\RewriterInterface
+   * @var RewriterInterface
    */
   protected $plugin;

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $definition = [
@@ @@
   }

   public function testRewriteValuesAsSetter() {
-    /** @var \Pharborist\Operators\AssignNode $expr */
+    /** @var AssignNode $expr */
     $expr = Parser::parseExpression('$form_state["values"]["foo"] = "baz"');
     $rewritten = $this->plugin->rewriteAsSetter($expr->getLeftOperand(), 'values', $expr);
     $this->assertInstanceOf('\Pharborist\Objects\ObjectMethodCallNode', $rewritten);
@@ @@
   }

   public function testRewriteKnownPropertyAsSetter() {
-    /** @var \Pharborist\Operators\AssignNode $expr */
+    /** @var AssignNode $expr */
     $expr = Parser::parseExpression('$form_state["input"] = array()');
     $rewritten = $this->plugin->rewriteAsSetter($expr->getLeftOperand(), 'input', $expr);
     $this->assertInstanceOf('\Pharborist\Objects\ObjectMethodCallNode', $rewritten);
@@ @@
   }

   public function testRewriteArbitraryKeyAsSetter() {
-    /** @var \Pharborist\Operators\AssignNode $expr */
+    /** @var AssignNode $expr */
     $expr = Parser::parseExpression('$form_state["foo"]["baz"] = "bar"');
     $rewritten = $this->plugin->rewriteAsSetter($expr->getLeftOperand(), 'foo', $expr);
     $this->assertInstanceOf('\Pharborist\Objects\ObjectMethodCallNode', $rewritten);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Indexer/IndexerTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\drupalmoduleupgrader\Unit\Plugin\DMU\Indexer;

+use Drupal\drupalmoduleupgrader\IndexerInterface;
 use Drupal\Tests\drupalmoduleupgrader\Unit\TestBase;

 /**
@@ @@
 abstract class IndexerTestBase extends TestBase {

   /**
-   * @var \Drupal\drupalmoduleupgrader\IndexerInterface
+   * @var IndexerInterface
    */
   protected $indexer;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


18) modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Indexer/FunctionsTest.php:12

    ---------- begin diff ----------
@@ @@
  */
 class FunctionsTest extends IndexerTestBase {

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $code = <<<'END'
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Indexer/ClassesTest.php:12

    ---------- begin diff ----------
@@ @@
  */
 class ClassesTest extends IndexerTestBase {

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $code = <<<'END'
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Fixer/HookToYAMLTest.php:17

    ---------- begin diff ----------
@@ @@
       ],
     ];

-    $indexer = $this->getMockBuilder('\Drupal\drupalmoduleupgrader\Plugin\DMU\Indexer\Functions')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $indexer = $this->createMock('\Drupal\drupalmoduleupgrader\Plugin\DMU\Indexer\Functions');
     $indexer->method('has')->with('hook_permission')->willReturn(TRUE);
     $indexer->method('hasExecutable')->with('hook_permission')->willReturn(TRUE);
     $indexer->method('execute')->with('hook_permission')->willReturn($permissions);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


21) modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Fixer/CreateClassTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\drupalmoduleupgrader\Unit\Plugin\DMU\Fixer;

+use Pharborist\Objects\ClassNode;
 use Drupal\drupalmoduleupgrader\Plugin\DMU\Fixer\CreateClass;
 use Drupal\drupalmoduleupgrader\Plugin\DMU\Indexer\Classes;
 use Drupal\Tests\drupalmoduleupgrader\Unit\TestBase;
@@ @@
     $this->assertTrue($indexer->has('MyBaz'));
     $classes = $indexer->getMultiple(['MyBaz']);
     $this->assertCount(1, $classes);
-    /** @var \Pharborist\Objects\ClassNode $class */
+    /** @var ClassNode $class */
     $class = $classes->get(0);
     $this->assertInstanceOf('\Pharborist\Objects\ClassNode', $class);
     $this->assertEquals('\Drupal\foo\MyBaz', $class->getName()->getAbsolutePath());
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


22) modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/StTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\drupalmoduleupgrader\Unit\Plugin\DMU\Converter\Functions;

+use Pharborist\Functions\FunctionCallNode;
 use Pharborist\Parser;

 /**
@@ @@

   public function testRewrite() {
     $function_call = Parser::parseExpression('st("I translate thee!")');
-    /** @var \Pharborist\Functions\FunctionCallNode $rewritten */
+    /** @var FunctionCallNode $rewritten */
     $rewritten = $this->plugin->rewrite($function_call, $this->target);
     $this->assertSame($function_call, $rewritten);
     $this->assertEquals('t("I translate thee!")', $rewritten->getText());
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


23) modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/GetTTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\drupalmoduleupgrader\Unit\Plugin\DMU\Converter\Functions;

+use Pharborist\Types\StringNode;
 use Pharborist\Parser;

 /**
@@ @@

   public function testRewrite() {
     $function_call = Parser::parseExpression('get_t()');
-    /** @var \Pharborist\Types\StringNode $rewritten */
+    /** @var StringNode $rewritten */
     $rewritten = $this->plugin->rewrite($function_call, $this->target);
     $this->assertInstanceOf('\Pharborist\Types\StringNode', $rewritten);
     $this->assertEquals('t', $rewritten->toValue());
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


24) modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/FunctionCallModifierTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\drupalmoduleupgrader\Unit\Plugin\DMU\Converter\Functions;

+use Drupal\drupalmoduleupgrader\Plugin\DMU\Converter\Functions\FunctionCallModifier;
 use Drupal\Tests\drupalmoduleupgrader\Unit\TestBase;

 /**
@@ @@
   /**
    * The plugin object under test.
    *
-   * @var \Drupal\drupalmoduleupgrader\Plugin\DMU\Converter\Functions\FunctionCallModifier
+   * @var FunctionCallModifier
    */
   protected $plugin;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->plugin = $this->getPlugin();
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/DrupalGetTitleTest.php:9

    ---------- begin diff ----------
@@ @@
  */
 class DrupalGetTitleTest extends FunctionCallModifierTestBase {

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->plugin = $this->getPlugin();
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/DisableTest.php:12

    ---------- begin diff ----------
@@ @@
  */
 class DisableTest extends FunctionCallModifierTestBase {

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->plugin = $this->getPlugin([], ['function' => 'field_create_field']);
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/DBTest.php:12

    ---------- begin diff ----------
@@ @@
  */
 class DBTest extends FunctionCallModifierTestBase {

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->plugin = $this->getPlugin([], ['function' => 'db_select']);
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Converter/Functions/CToolsGetPluginsTest.php:10

    ---------- begin diff ----------
@@ @@
  */
 class CToolsGetPluginsTest extends FunctionCallModifierTestBase {

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->plugin = CToolsGetPlugins::create($this->container, [], 'ctools_get_plugins', []);
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Analyzer/TestsTest.php:9

    ---------- begin diff ----------
@@ @@
  */
 class TestsTest extends AnalyzerTestBase {

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $code = <<<'END'
@@ @@

   public function test() {
     $issues = $this->analyzer->analyze($this->target);
-    $this->assertInternalType('array', $issues);
+    $this->assertIsArray($issues);
     $this->assertNotEmpty($issues);
     $this->assertIssueDefaults($issues[0]);
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * SpecificAssertInternalTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Analyzer/PSR4Test.php:9

    ---------- begin diff ----------
@@ @@
  */
 class PSR4Test extends AnalyzerTestBase {

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $code = <<<'END'
@@ @@

   public function test() {
     $issues = $this->analyzer->analyze($this->target);
-    $this->assertInternalType('array', $issues);
+    $this->assertIsArray($issues);
     $this->assertNotEmpty($issues);
     $this->assertIssueDefaults($issues[0]);
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * SpecificAssertInternalTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Analyzer/InfoFileTest.php:7

    ---------- begin diff ----------
@@ @@
  */
 class InfoFileTest extends AnalyzerTestBase {

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $info = <<<'END'
@@ @@

   public function test() {
     $issues = $this->analyzer->analyze($this->target);
-    $this->assertInternalType('array', $issues);
+    $this->assertIsArray($issues);
     $this->assertArrayHasKey('core', $issues);
     $this->assertArrayHasKey('type', $issues);
     $this->assertArrayNotHasKey('dependencies', $issues);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * SpecificAssertInternalTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Analyzer/HookUninstallTest.php:9

    ---------- begin diff ----------
@@ @@
  */
 class HookUninstalltest extends AnalyzerTestBase {

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $code = <<<'END'
@@ @@

   public function test() {
     $issues = $this->analyzer->analyze($this->target);
-    $this->assertInternalType('array', $issues);
+    $this->assertIsArray($issues);
     $this->assertNotEmpty($issues);
     $this->assertIssueDefaults($issues[0]);
     $this->assertCount(1, $issues[0]->getViolations());
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * SpecificAssertInternalTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Analyzer/HookPermissionTest.php:13

    ---------- begin diff ----------
@@ @@
  */
 class HookPermissionTest extends AnalyzerTestBase {

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $code = <<<'END'
@@ @@

   public function test() {
     $issues = $this->analyzer->analyze($this->target);
-    $this->assertInternalType('array', $issues);
+    $this->assertIsArray($issues);
     $this->assertNotEmpty($issues);
     $this->assertIssueDefaults($issues[0]);
     $this->assertCount(1, $issues[0]->getViolations());
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * SpecificAssertInternalTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Analyzer/HookFormAlterTest.php:9

    ---------- begin diff ----------
@@ @@
  */
 class HookFormAlterTest extends AnalyzerTestBase {

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $code = <<<'END'
@@ @@

   public function testHookFormAlter() {
     $issues = $this->analyzer->analyze($this->target);
-    $this->assertInternalType('array', $issues);
+    $this->assertIsArray($issues);
     $this->assertNotEmpty($issues);
     $this->assertIssueDefaults($issues[0]);
     $this->assertCount(2, $issues[0]->getViolations());
@@ @@

   public function testDerivedFormAlter() {
     $issues = $this->analyzer->analyze($this->target);
-    $this->assertInternalType('array', $issues);
+    $this->assertIsArray($issues);
     $this->assertNotEmpty($issues);
     $this->assertIssueDefaults($issues[0]);
     $this->assertCount(2, $issues[0]->getViolations());
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * SpecificAssertInternalTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Analyzer/FunctionCallTest.php:9

    ---------- begin diff ----------
@@ @@
  */
 class FunctionCallTest extends AnalyzerTestBase {

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $code = <<<'END'
@@ @@

   public function test() {
     $issues = $this->analyzer->analyze($this->target);
-    $this->assertInternalType('array', $issues);
+    $this->assertIsArray($issues);
     $this->assertNotEmpty($issues);
     $this->assertIssueDefaults($issues[0]);
     $this->assertCount(1, $issues[0]->getViolations());
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * SpecificAssertInternalTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Analyzer/FlagHookTest.php:9

    ---------- begin diff ----------
@@ @@
  */
 class FlagHookTest extends AnalyzerTestBase {

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $code = <<<'END'
@@ @@

   public function test() {
     $issues = $this->analyzer->analyze($this->target);
-    $this->assertInternalType('array', $issues);
+    $this->assertIsArray($issues);
     $this->assertNotEmpty($issues);
     $this->assertIssueDefaults($issues[0]);
     $this->assertCount(1, $issues[0]->getViolations());
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * SpecificAssertInternalTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Analyzer/DBTest.php:9

    ---------- begin diff ----------
@@ @@
  */
 class DBTest extends AnalyzerTestBase {

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $code = <<<'END'
@@ @@

   public function test() {
     $issues = $this->analyzer->analyze($this->target);
-    $this->assertInternalType('array', $issues);
+    $this->assertIsArray($issues);
     $this->assertNotEmpty($issues);
     $this->assertIssueDefaults($issues[0]);
     $this->assertCount(1, $issues[0]->getViolations());
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * SpecificAssertInternalTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/drupalmoduleupgrader/tests/src/Unit/Plugin/DMU/Analyzer/AnalyzerTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\drupalmoduleupgrader\Unit\Plugin\DMU\Analyzer;

+use Drupal\drupalmoduleupgrader\AnalyzerInterface;
 use Drupal\Tests\drupalmoduleupgrader\Unit\TestBase;

 abstract class AnalyzerTestBase extends TestBase {

   /**
-   * @var \Drupal\drupalmoduleupgrader\AnalyzerInterface
+   * @var AnalyzerInterface
    */
   protected $analyzer;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


39) modules/contrib/drupalmoduleupgrader/tests/src/Unit/IssueTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\drupalmoduleupgrader\Unit;

+use Drupal\drupalmoduleupgrader\IssueInterface;
 use Drupal\drupalmoduleupgrader\Issue;
 use Pharborist\Filter;

@@ @@
 class IssueTest extends TestBase {

   /**
-   * @var \Drupal\drupalmoduleupgrader\IssueInterface
+   * @var IssueInterface
    */
   private $issue;

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->issue = new Issue($this->target, 'Foobaz');
   }
@@ @@
   public function testDocumentation() {
     $this->issue->addDocumentation('http://www.google.com', 'Just Google it, baby!');
     $documentation = $this->issue->getDocumentation();
-    $this->assertInternalType('array', $documentation);
+    $this->assertIsArray($documentation);
     $this->assertCount(1, $documentation);
     $this->assertArrayHasKey('url', $documentation[0]);
     $this->assertArrayHasKey('title', $documentation[0]);
@@ @@
   }

   public function testViolationsAndDetectors() {
-    $analyzer = $this->getMockBuilder('\Drupal\drupalmoduleupgrader\AnalyzerBase')->disableOriginalConstructor()->getMock();
+    $analyzer = $this->createMock('\Drupal\drupalmoduleupgrader\AnalyzerBase');
     $analyzer->method('getPluginId')->willReturn('blarg');
     $this->issue->addAffectedFile($this->dir->getChild('foo.info')->url(), $analyzer);

@@ @@
     $this->issue->addViolation($node, $analyzer);

     $violations = $this->issue->getViolations();
-    $this->assertInternalType('array', $violations);
+    $this->assertIsArray($violations);
     $this->assertCount(2, $violations);
     $this->assertArrayHasKey('file', $violations[0]);
     $this->assertArrayNotHasKey('line_number', $violations[0]);
@@ @@
     $this->assertEquals($this->dir->getChild('foo.module')->url(), $violations[1]['file']);

     $detectors = $this->issue->getDetectors();
-    $this->assertInternalType('array', $detectors);
+    $this->assertIsArray($detectors);
     $this->assertCount(1, $detectors);
     $this->assertEquals($analyzer->getPluginId(), $detectors[0]);
   }
@@ @@
     $this->issue->addFix('baz', ['bar' => 'wambooli']);

     $fixes = $this->issue->getFixes();
-    $this->assertInternalType('array', $fixes);
+    $this->assertIsArray($fixes);
     $this->assertCount(2, $fixes);
     $this->assertEquals(['_plugin_id' => 'foo'], $fixes[0]);
     $this->assertEquals(['_plugin_id' => 'baz', 'bar' => 'wambooli'], $fixes[1]);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * SpecificAssertInternalTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/drupalmoduleupgrader/tests/src/Unit/ContainerMockTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\drupalmoduleupgrader\Unit;

+use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;

 /**
@@ @@
 trait ContainerMockTrait {

   /**
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected $container;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


41) modules/contrib/drupalmoduleupgrader/templates/EventSubscriber.html.twig:5

    ---------- begin diff ----------
@@ @@
 namespace Drupal\{{ module }}\EventSubscriber;

 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\EventDispatcher\EventSubscriberInterface;
+use Symfony\Contracts\EventDispatcher\EventSubscriberInterface;

 class {{ class }} implements EventSubscriberInterface {
    ----------- end diff -----------

42) modules/contrib/drupalmoduleupgrader/src/Utility/Path/PathUtilityInterface.php:24

    ---------- begin diff ----------
@@ @@
    * @param mixed $value
    *   The value to wrap.
    *
-   * @return \Drupal\drupalmoduleupgrader\Utility\Path\PathComponentInterface
+   * @return PathComponentInterface
    */
   public static function getComponent($value);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


43) modules/contrib/drupalmoduleupgrader/src/Utility/Path/PathUtilityBase.php:91

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the next wildcard, if any.
    *
-   * @return \Drupal\drupalmoduleupgrader\Utility\Path\PathComponentInterface|null
+   * @return PathComponentInterface|null
    */
   public function getNextWildcard() {
     $wildcards = $this->getWildcards()->slice($this->_wildcard, 1);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


44) modules/contrib/drupalmoduleupgrader/src/Utility/FormConverterFactory.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drupalmoduleupgrader\Utility;

+use Drupal\drupalmoduleupgrader\RewriterInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Core\StringTranslation\TranslationInterface;
@@ @@
   use StringTranslationTrait;

   /**
-   * @var \Drupal\drupalmoduleupgrader\RewriterInterface
+   * @var RewriterInterface
    */
   protected $rewriter;

@@ @@
   /**
    * Creates a FormConverter for a specific form.
    *
-   * @param \Drupal\drupalmoduleupgrader\TargetInterface $target
+   * @param TargetInterface $target
    *   The module which defines the form.
    * @param string $form_id
    *   The original form ID.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


45) modules/contrib/drupalmoduleupgrader/src/Utility/FormConverter.php:22

    ---------- begin diff ----------
@@ @@
   use StringTransformTrait;

   /**
-   * @var \Drupal\drupalmoduleupgrader\TargetInterface
+   * @var TargetInterface
    */
   protected $target;

@@ @@
   protected $formID;

   /**
-   * @var \Pharborist\Functions\FunctionDeclarationNode
+   * @var FunctionDeclarationNode
    */
   protected $builder;

   /**
-   * @var \Pharborist\Functions\FunctionDeclarationNode
+   * @var FunctionDeclarationNode
    */
   protected $validator;

   /**
-   * @var \Pharborist\Functions\FunctionDeclarationNode
+   * @var FunctionDeclarationNode
    */
   protected $submitHandler;

@@ @@
   protected $isConfig;

   /**
-   * @var \Drupal\drupalmoduleupgrader\RewriterInterface
+   * @var RewriterInterface
    */
   protected $formStateRewriter;

   /**
-   * @var \Pharborist\Objects\ClassNode
+   * @var ClassNode
    */
   protected $controller;

@@ @@
   }

   /**
-   * @return \Pharborist\Objects\ClassNode
+   * @return ClassNode
    */
   public function render() {
     if (empty($this->controller)) {
@@ @@
   }

   /**
-   * @return \Pharborist\Objects\ClassNode
+   * @return ClassNode
    */
   public function build() {
     $controller = $this->render();
@@ @@
   }

   /**
-   * @return \Pharborist\Objects\ClassMethodNode
+   * @return ClassMethodNode
    */
   protected function addMethod(FunctionDeclarationNode $function, ClassNode $class, $alias = NULL) {
     $method = ClassMethodNode::fromFunction($function);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


46) modules/contrib/drupalmoduleupgrader/src/Utility/Filter/NodeAssignmentFilter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drupalmoduleupgrader\Utility\Filter;

+use Pharborist\Operators\AssignNode;
 use Pharborist\Filter;
 use Pharborist\Node;

@@ @@
   /**
    * Tests if the given node is on the left side of an assignment.
    *
-   * @param \Pharborist\Node $node
+   * @param Node $node
    *   The node to test.
    *
    * @return bool
    */
   public function __invoke(Node $node) {
-    /** @var \Pharborist\Operators\AssignNode $assignment */
+    /** @var AssignNode $assignment */
     $assignment = $node->closest(Filter::isInstanceOf('\Pharborist\Operators\AssignNode'));
     return ($assignment ? $assignment->getLeftOperand() === $node : FALSE);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


47) modules/contrib/drupalmoduleupgrader/src/Utility/Filter/ContainsLogicFilter.php:43

    ---------- begin diff ----------
@@ @@
    * Tests if a function contains logic: any branching operator, function
    * call, or object instantiation.
    *
-   * @param \Pharborist\ParentNode $node
+   * @param ParentNode $node
    *   The node to test.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


48) modules/contrib/drupalmoduleupgrader/src/TargetInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drupalmoduleupgrader;

+use Symfony\Component\Finder\Finder;
+use Doctrine\Common\Collections\ArrayCollection;
+use Pharborist\RootNode;
 use Pharborist\Node;

 /**
@@ @@
    * module's code files. Any file type which doesn't contain PHP code
    * should be ignored.
    *
-   * @return \Symfony\Component\Finder\Finder
+   * @return Finder
    */
   public function getFinder();

@@ @@
   /**
    * Returns services defined by the target module.
    *
-   * @return \Doctrine\Common\Collections\ArrayCollection
+   * @return ArrayCollection
    */
   public function getServices();

@@ @@
    * @param string $file
    *   The path of the file to open, relative to the CWD.
    *
-   * @return \Pharborist\RootNode|null
+   * @return RootNode|null
    */
   public function open($file);

@@ @@
   /**
    * Saves the file in which a particular node appears.
    *
-   * @param \Pharborist\Node|null $node
+   * @param Node|null $node
    *   The node to save. This can be positioned anywhere in the
    *   syntax tree. If NULL, all open files will be saved.
    *
-   * @throws \Drupal\drupalmoduleupgrader\IOException
+   * @throws IOException
    */
   public function save(Node $node = NULL);

@@ @@
    * @param string $file
    *   The path of the file to create, relative to the CWD.
    *
-   * @return \Pharborist\RootNode
+   * @return RootNode
    */
   public function create($file);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


49) modules/contrib/drupalmoduleupgrader/src/Target.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drupalmoduleupgrader;

+use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Doctrine\Common\Collections\ArrayCollection;
 use Pharborist\Node;
@@ @@
   protected $id;

   /**
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $indexerManager;

@@ @@
   protected $indexers = [];

   /**
-   * @var \Doctrine\Common\Collections\ArrayCollection
+   * @var ArrayCollection
    */
   protected $services;

@@ @@
   /**
    * All open documents.
    *
-   * @var \Pharborist\RootNode[]
+   * @var RootNode[]
    */
   protected $documents = [];

@@ @@
    *
    * @param string $path
    *   The base path of the target module.
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The current container, to pull any dependencies out of.
    */
   public function __construct($path, ContainerInterface $container) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


50) modules/contrib/drupalmoduleupgrader/src/Routing/RouterBuiltEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drupalmoduleupgrader\Routing;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Event object fired when all routes have been added to a RouterInterface
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


51) modules/contrib/drupalmoduleupgrader/src/Routing/RouterBase.php:10

    ---------- begin diff ----------
@@ @@
 class RouterBase extends ArrayCollection implements RouterInterface {

   /**
-   * @var \Symfony\Component\EventDispatcher\EventDispatcher
+   * @var EventDispatcher
    */
   protected $dispatcher;

@@ @@
    * {@inheritdoc}
    */
   public function finalize() {
-    $this->dispatcher->dispatch('router.built', new RouterBuiltEvent($this));
+    $this->dispatcher->dispatch(new RouterBuiltEvent($this), 'router.built');
   }

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


52) modules/contrib/drupalmoduleupgrader/src/Routing/RouteWrapperInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drupalmoduleupgrader\Routing;

+use Drupal\drupalmoduleupgrader\Utility\Path\PathUtilityInterface;
 /**
  * Common interface implemented by classes which wrap around Drupal 7 or
  * Drupal 8 routes.
@@ @@
   /**
    * Returns a PathUtilityInterface implementation for the route.
    *
-   * @return \Drupal\drupalmoduleupgrader\Utility\Path\PathUtilityInterface
+   * @return PathUtilityInterface
    */
   public function getPath();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


53) modules/contrib/drupalmoduleupgrader/src/Routing/RouteConverterInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drupalmoduleupgrader\Routing;

+use Drupal\drupalmoduleupgrader\Utility\Path\PathUtilityInterface;
 use Drupal\drupalmoduleupgrader\Routing\Drupal7\RouteWrapper;
 use Drupal\drupalmoduleupgrader\TargetInterface;

@@ @@
    * to parameters of the callback method which can accept input from the path.
    * Parameters are matched to slugs by name and type hint.
    *
-   * @return \Drupal\drupalmoduleupgrader\Utility\Path\PathUtilityInterface
+   * @return PathUtilityInterface
    */
   public function buildPath(TargetInterface $target, RouteWrapper $route);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


54) modules/contrib/drupalmoduleupgrader/src/Routing/ParameterMap.php:14

    ---------- begin diff ----------
@@ @@
 class ParameterMap extends ArrayCollection {

   /**
-   * @var \Drupal\drupalmoduleupgrader\Utility\Path\PathUtilityInterface
+   * @var PathUtilityInterface
    */
   protected $path;

@@ @@
   /**
    * Applies the parameter map to a path, modifying it as needed.
    *
-   * @param \Drupal\drupalmoduleupgrader\Utility\Path\PathUtilityInterface $path
+   * @param PathUtilityInterface $path
    *   The path to modify (in-place).
    */
   public function applyPath(PathUtilityInterface $path) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


55) modules/contrib/drupalmoduleupgrader/src/Routing/ParameterBinding.php:13

    ---------- begin diff ----------
@@ @@
 class ParameterBinding {

   /**
-   * @var \Drupal\drupalmoduleupgrader\Utility\Path\PathUtilityInterface
+   * @var PathUtilityInterface
    */
   protected $path;

   /**
-   * @var \Pharborist\Functions\ParameterNode
+   * @var ParameterNode
    */
   protected $parameter;

@@ @@
   /**
    * The original parameter node.
    *
-   * @return \Pharborist\Functions\ParameterNode
+   * @return ParameterNode
    */
   public function getParameter() {
     return $this->parameter;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


56) modules/contrib/drupalmoduleupgrader/src/Routing/LinkIndex.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Adds a binding to this index.
    *
-   * @param \Drupal\drupalmoduleupgrader\Routing\LinkBinding\LinkBinding $binding
+   * @param LinkBinding $binding
    */
   public function addBinding(LinkBinding $binding) {
     $id = $binding->getIdentifier();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


57) modules/contrib/drupalmoduleupgrader/src/Routing/LinkBinding/LocalTaskLinkBinding.php:11

    ---------- begin diff ----------
@@ @@
 class LocalTaskLinkBinding extends LinkBinding {

   /**
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   private $linkManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


58) modules/contrib/drupalmoduleupgrader/src/Routing/LinkBinding/LinkBindingFactory.php:11

    ---------- begin diff ----------
@@ @@
 class LinkBindingFactory {

   /**
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   private $linkManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


59) modules/contrib/drupalmoduleupgrader/src/Routing/LinkBinding/LinkBinding.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * Index of all other links of this type.
    *
-   * @var \Drupal\drupalmoduleupgrader\Routing\LinkIndex
+   * @var LinkIndex
    */
   protected $index;

@@ @@
    *
    * @param string $id
    *   The link's plugin ID, sanitized to prevent collisions.
-   * @param \Drupal\drupalmoduleupgrader\Routing\LinkIndex $index
+   * @param LinkIndex $index
    *   The link index.
    */
   public function onIndexed($id, LinkIndex $index) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


60) modules/contrib/drupalmoduleupgrader/src/Routing/HookMenu.php:40

    ---------- begin diff ----------
@@ @@
   protected $routeMap = [];

   /**
-   * @var \Drupal\drupalmoduleupgrader\TargetInterface
+   * @var TargetInterface
    */
   protected $target;

@@ @@
   /**
    * The route converters' plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $routeConverters;

@@ @@
   /**
    * Constructs a HookMenu object.
    *
-   * @param \Drupal\drupalmoduleupgrader\TargetInterface $target
+   * @param TargetInterface $target
    *   The target module.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $route_converters
+   * @param PluginManagerInterface $route_converters
    *   The route converters.
    */
   public function __construct(TargetInterface $target, PluginManagerInterface $route_converters) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


61) modules/contrib/drupalmoduleupgrader/src/Routing/Drupal8/RouteWrapper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drupalmoduleupgrader\Routing\Drupal8;

+use Symfony\Component\Routing\RouteCollection;
 use Drupal\Core\Routing\RouteProviderInterface;
 use Drupal\drupalmoduleupgrader\Routing\RouterBuiltEvent;
 use Drupal\drupalmoduleupgrader\Routing\RouteWrapperInterface;
@@ @@
   protected $name;

   /**
-   * @var \Symfony\Component\Routing\Route
+   * @var Route
    */
   protected $route;

   /**
-   * @var \Drupal\drupalmoduleupgrader\Utility\Path\Drupal8\PathUtility
+   * @var PathUtility
    */
   protected $path;

   /**
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;

   /**
-   * @var \Symfony\Component\Routing\RouteCollection
+   * @var RouteCollection
    */
   protected $router;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


62) modules/contrib/drupalmoduleupgrader/src/Routing/Drupal7/RouteWrapper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drupalmoduleupgrader\Routing\Drupal7;

+use Drupal\drupalmoduleupgrader\Routing\RouterInterface;
 use Doctrine\Common\Collections\ArrayCollection;
 use Drupal\drupalmoduleupgrader\Routing\RouterBuiltEvent;
 use Drupal\drupalmoduleupgrader\Routing\RouteWrapperInterface;
@@ @@
 class RouteWrapper extends ArrayCollection implements RouteWrapperInterface {

   /**
-   * @var \Drupal\drupalmoduleupgrader\Utility\Path\Drupal7\PathUtility
+   * @var PathUtility
    */
   protected $path;

   /**
-   * @var \Drupal\drupalmoduleupgrader\Routing\RouterInterface
+   * @var RouterInterface
    */
   protected $router;

@@ @@
   protected $parent;

   /**
-   * @var \Drupal\drupalmoduleupgrader\Routing\Drupal7\Router
+   * @var Router
    */
   protected $children;

   /**
-   * @var \Drupal\drupalmoduleupgrader\Routing\Drupal7\Router
+   * @var Router
    */
   protected $siblings;

@@ @@
   /**
    * Returns the immediate children of this route.
    *
-   * @return \Drupal\drupalmoduleupgrader\Routing\Drupal7\Router
+   * @return Router
    */
   public function getChildren() {
     return $this->children;
@@ @@
   /**
    * Gets the siblings of this route.
    *
-   * @return \Drupal\drupalmoduleupgrader\Routing\Drupal7\Router
+   * @return Router
    */
   public function getSiblings() {
     return $this->siblings;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


63) modules/contrib/drupalmoduleupgrader/src/RewriterInterface.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Parametrically rewrites the function containing the given parameter.
    *
-   * @param \Pharborist\Functions\ParameterNode $parameter
+   * @param ParameterNode $parameter
    *   The parameter upon which to base the rewrite. The parameter must be
    *   attached to a function or method declaration node, or fatal errors will
    *   likely result.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


64) modules/contrib/drupalmoduleupgrader/src/Report.php:7

    ---------- begin diff ----------
@@ @@
 class Report implements ReportInterface {

   /**
-   * @var \Drupal\drupalmoduleupgrader\IssueInterface[]
+   * @var IssueInterface[]
    */
   protected $issues = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


65) modules/contrib/drupalmoduleupgrader/src/PluginBase.php:16

    ---------- begin diff ----------
@@ @@
 abstract class PluginBase extends CorePluginBase implements ContainerFactoryPluginInterface {

   /**
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $log;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


66) modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Routing/FormRoute.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Routing;

+use Drupal\drupalmoduleupgrader\Utility\FormConverter;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Routing\RouteProviderInterface;
 use Drupal\Core\StringTranslation\TranslationInterface;
@@ @@
 class FormRoute extends ContentRoute {

   /**
-   * @var \Drupal\drupalmoduleupgrader\Utility\FormConverter
+   * @var FormConverter
    */
   protected $formConverter;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


67) modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Routing/ContentRoute.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Routing;

+use Pharborist\Functions\FunctionDeclarationNode;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Routing\RouteProviderInterface;
@@ @@
   use StringTransformTrait;

   /**
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;

   /**
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $rewriters;

@@ @@
    * Builds a parameter map from the aggregated arguments of the title,
    * access, and page callbacks.
    *
-   * @return \Drupal\drupalmoduleupgrader\Routing\ParameterMap
+   * @return ParameterMap
    */
   protected function buildParameterMap(TargetInterface $target, Drupal7Route $route) {
     $map = new ParameterMap(clone $route->getPath(), []);
@@ @@

     foreach ($map->toArray() as $function_name => $parameters) {
       if ($parameters && $indexer->has($function_name)) {
-        /** @var \Pharborist\Functions\FunctionDeclarationNode $function */
+        /** @var FunctionDeclarationNode $function */
         $function = $indexer->get($function_name);
         foreach ($parameters as $parameter_name => $info) {
           $parameter = $function->getParameterByName($parameter_name)->setName($info['name'], TRUE);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


68) modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Rewriter/Generic.php:33

    ---------- begin diff ----------
@@ @@
 class Generic extends PluginBase implements RewriterInterface {

   /**
-   * @var \Drupal\drupalmoduleupgrader\Utility\Filter\NodeAssignmentFilter
+   * @var NodeAssignmentFilter
    */
   protected $isAssigned;

@@ @@
   /**
    * Finds every rewritable expression in the function body.
    *
-   * @param \Pharborist\Functions\ParameterNode $parameter
+   * @param ParameterNode $parameter
    *   The parameter on which the rewrite is based.
    *
-   * @return \Pharborist\NodeCollection
+   * @return NodeCollection
    */
   protected function getExpressions(ParameterNode $parameter) {
     $filter = Filter::isInstanceOf('\Pharborist\ArrayLookupNode', '\Pharborist\Objects\ObjectPropertyNode');
@@ @@
    * Returns the property used by a rewritable expression, or NULL if the
    * property cannot be determined.
    *
-   * @param \Pharborist\ExpressionNode $expr
+   * @param ExpressionNode $expr
    *   The rewritable expression.
    *
    * @return string|null
@@ @@
    * Rewrites the given expression as a property getter. Returns NULL if the
    * expression cannot be rewritten.
    *
-   * @param \Pharborist\ExpressionNode $expr
+   * @param ExpressionNode $expr
    *   The expression to rewrite.
    * @param string $property
    *   The property being used in the expression.
    *
-   * @return \Pharborist\ExpressionNode|null
+   * @return ExpressionNode|null
    */
   public function rewriteAsGetter(ExpressionNode $expr, $property) {
     if ($expr instanceof ObjectPropertyNode) {
@@ @@
    * Rewrites an assignment expression as a property setter. Returns NULL if
    * the expression cannot be rewritten.
    *
-   * @param \Pharborist\ExpressionNode $expr
+   * @param ExpressionNode $expr
    *   The expression to rewrite.
    * @param string $property
    *   The property being used in the expression.
-   * @param \Pharborist\Operators\AssignNode $assignment
+   * @param AssignNode $assignment
    *   The entire assignment expression being rewritten.
    *
-   * @return \Pharborist\ExpressionNode|null
+   * @return ExpressionNode|null
    */
   public function rewriteAsSetter(ExpressionNode $expr, $property, AssignNode $assignment) {
     if ($expr instanceof ObjectPropertyNode) {
@@ @@
   /**
    * Returns if the parameter is fully reassigned anywhere in the function.
    *
-   * @param \Pharborist\Functions\ParameterNode $parameter
+   * @param ParameterNode $parameter
    *   The parameter to check.
    *
    * @return bool
@@ @@
    * $node->body[LANGUAGE_NONE][0]['value'] --> $node->body[0]->value
    * $node->body['fr'][0]['value'] --> $node->getTranslation('fr')->body[0]->value
    *
-   * @param \Pharborist\ArrayLookupNode $node
+   * @param ArrayLookupNode $node
    *   The original field lookup.
    *
-   * @return \Pharborist\ExpressionNode
+   * @return ExpressionNode
    */
   public static function rewriteFieldLookup(ArrayLookupNode $node) {
     $keys = $node->getKeys();
-    /** @var \Pharborist\Objects\ObjectPropertyNode $root */
+    /** @var ObjectPropertyNode $root */
     $root = $node->getRootArray();
     $expr = $root->getObject()->getText();

@@ @@
     }
     $expr .= '->' . $root->getPropertyName() . '[' . $keys[1] . ']';

-    /** @var \Pharborist\Types\StringNode|\Pharborist\Node $column */
+    /** @var StringNode|Node $column */
     foreach (array_slice($keys, 2) as $column) {
       $expr .= '->';
       $expr .= $column instanceof StringNode ? $column->toValue() : $column->getText();
@@ @@
    * - The key is the LANGUAGE_NONE constant from Drupal 7.
    * - The key is the string 'und'.
    *
-   * @param \Pharborist\Node $key
+   * @param Node $key
    *   The key to check.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


69) modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Rewriter/FormState.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Rewriter;

+use Pharborist\Functions\FunctionCallNode;
+use Pharborist\ArrayLookupNode;
 use Pharborist\ExpressionNode;
 use Pharborist\Filter;
 use Pharborist\Functions\ParameterNode;
@@ @@
     $form_state = Token::variable('$' . $parameter->getName());

     $set_errors = $function->find(Filter::isFunctionCall('form_set_error', 'form_error'));
-    /** @var \Pharborist\Functions\FunctionCallNode $set_error */
+    /** @var FunctionCallNode $set_error */
     foreach ($set_errors as $set_error) {
       $arguments = $set_error->getArguments();
       $method = $set_error->getName()->getText() == 'form_set_error' ? 'setErrorByName' : 'setError';
@@ @@

     // form_get_error() --> $form_state->getError()
     $get_errors = $function->find(Filter::isFunctionCall('form_get_error'));
-    /** @var \Pharborist\Functions\FunctionCallNode $get_error */
+    /** @var FunctionCallNode $get_error */
     foreach ($get_errors as $get_error) {
       $rewrite = ObjectMethodCallNode::create(clone $form_state, 'getError')
         ->appendArgument($get_error->getArguments()->get(0));
@@ @@
    * {@inheritdoc}
    */
   public function rewriteAsGetter(ExpressionNode $expr, $property) {
-    /** @var \Pharborist\ArrayLookupNode $expr */
+    /** @var ArrayLookupNode $expr */
     $object = clone $expr->getRootArray();
     $keys = $expr->getKeys();

@@ @@
    * {@inheritdoc}
    */
   public function rewriteAsSetter(ExpressionNode $expr, $property, AssignNode $assignment) {
-    /** @var \Pharborist\ArrayLookupNode $expr */
+    /** @var ArrayLookupNode $expr */
     $object = clone $expr->getRootArray();
     $keys = $expr->getKeys();
     $value = clone $assignment->getRightOperand();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


70) modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Indexer/Functions.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Indexer;

+use Pharborist\Functions\FunctionCallNode;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\drupalmoduleupgrader\IndexerBase;
 use Drupal\drupalmoduleupgrader\IndexerExecutionInterface;
@@ @@
    * {@inheritdoc}
    */
   public function add(NodeInterface $node) {
-    /** @var \Pharborist\Functions\FunctionDeclarationNode|\Pharborist\Functions\FunctionCallNode $node */
+    /** @var FunctionDeclarationNode|FunctionCallNode $node */
     $fields = [
       'id' => (string) $node->getName(),
       'file' => $node->getFilename(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


71) modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Indexer/FunctionCalls.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Indexer;

+use Symfony\Component\Finder\SplFileInfo;
 use Drupal\drupalmoduleupgrader\IndexerBase;
 use Pharborist\Filter;
 use Pharborist\Parser;
@@ @@
    * {@inheritdoc}
    */
   public function build() {
-    /** @var \Symfony\Component\Finder\SplFileInfo $file */
+    /** @var SplFileInfo $file */
     foreach ($this->target->getFinder() as $file) {
       $path = $file->getPathname();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


72) modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Fixer/PSR4.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Fixer;

+use Pharborist\Objects\ClassNode;
 use Drupal\drupalmoduleupgrader\FixerBase;
 use Pharborist\Namespaces\NameNode;
 use Pharborist\Parser;
@@ @@
    * {@inheritdoc}
    */
   public function execute() {
-    /** @var \Pharborist\Objects\ClassNode $class */
+    /** @var ClassNode $class */
     $class = $this
       ->target
       ->getIndexer('class')
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


73) modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Fixer/Notify.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Fixer;

+use Pharborist\DocCommentTrait;
 use Drupal\drupalmoduleupgrader\FixerBase;
 use Pharborist\DocCommentNode;
 use Pharborist\LineCommentBlockNode;
@@ @@

   protected function getComment(NodeInterface $node) {
     if ($this->supportsDocComments($node)) {
-      /** @var \Pharborist\DocCommentTrait $node */
+      /** @var DocCommentTrait $node */
       $comment = $node->getDocComment() ?: DocCommentNode::create('');
       return $comment->getCommentText();
     }
@@ @@

   protected function setComment(NodeInterface $node, $comment_text) {
     if ($this->supportsDocComments($node)) {
-      /** @var \Pharborist\DocCommentTrait $node */
+      /** @var DocCommentTrait $node */
       $node->setDocComment(DocCommentNode::create($comment_text));
     }
     else {
@@ @@
    * Returns if a node supports doc comments by importing DocCommentTrait
    * anywhere in its lineage.
    *
-   * @param \Pharborist\NodeInterface $node
+   * @param NodeInterface $node
    *
    * @return bool
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


74) modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Fixer/NodeCollectorTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Fixer;

+use Pharborist\NodeCollection;
 /**
  * Trait used by fixers which loop through existing indexer objects and do
  * things with them.
@@ @@
 trait NodeCollectorTrait {

   protected function getObjects() {
-    /** @var \Pharborist\NodeCollection $objects */
+    /** @var NodeCollection $objects */
     $objects = $this->target->getIndexer($this->configuration['type'])->get($this->configuration['id']);

     if (isset($this->configuration['where'])) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


75) modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Fixer/Implement.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Fixer;

+use Pharborist\Objects\ClassNode;
 use Drupal\drupalmoduleupgrader\FixerBase;
 use Pharborist\DocCommentNode;
 use Pharborist\Objects\ClassMethodNode;
@@ @@
 class Implement extends FixerBase {

   public function execute() {
-    /** @var \Pharborist\Objects\ClassNode $class */
+    /** @var ClassNode $class */
     $class = $this
       ->target
       ->getIndexer('class')
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


76) modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Fixer/FormCallbackToMethod.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Fixer;

+use Pharborist\Functions\FunctionDeclarationNode;
+use Pharborist\Objects\ClassNode;
 use Drupal\drupalmoduleupgrader\FixerBase;

 /**
@@ @@
 class FormCallbackToMethod extends FixerBase {

   public function execute() {
-    /** @var \Pharborist\Functions\FunctionDeclarationNode $callback */
+    /** @var FunctionDeclarationNode $callback */
     $callback = $this
       ->target
       ->getIndexer('function')
@@ @@
       ->get($this->configuration['callback']);

     list ($class, $method_name) = explode('::', $this->configuration['destination']);
-    /** @var \Pharborist\Objects\ClassNode $class */
+    /** @var ClassNode $class */
     $class = $this
       ->target
       ->getIndexer('class')
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


77) modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Fixer/CreateClass.php:17

    ---------- begin diff ----------
@@ @@
 class CreateClass extends FixerBase {

   /**
-   * @var \Symfony\Component\Filesystem\Filesystem
+   * @var Filesystem
    */
   protected $fs;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


78) modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/UserHooks.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Converter;

+use Pharborist\Functions\FunctionDeclarationNode;
+use Pharborist\Functions\ParameterNode;
 use Drupal\Core\StringTranslation\TranslationInterface;
 use Drupal\drupalmoduleupgrader\ConverterBase;
 use Drupal\drupalmoduleupgrader\RewriterInterface;
@@ @@
 class UserHooks extends ConverterBase {

   /**
-   * @var \Drupal\drupalmoduleupgrader\RewriterInterface
+   * @var RewriterInterface
    */
   protected $rewriter;

@@ @@

     $hooks = array_filter($this->pluginDefinition['hook'], [$indexer, 'has']);
     foreach ($hooks as $hook) {
-      /** @var \Pharborist\Functions\FunctionDeclarationNode $function */
+      /** @var FunctionDeclarationNode $function */
       $function = $indexer->get($hook);
       // The $edit parameter is defunct in Drupal 8, but we'll leave it in
       // there as an empty array to prevent errors, and move it to the back
       // of the line.
-      /** @var \Pharborist\Functions\ParameterNode $edit */
+      /** @var ParameterNode $edit */
       $edit = $function->getParameterList()->shift()->setReference(FALSE)->setValue(NullNode::create());
       $function->appendParameter($edit);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


79) modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/UnitTests.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Converter;

+use Pharborist\Objects\Classnode;
+use Pharborist\Objects\ClassNode;
 use Drupal\drupalmoduleupgrader\ConverterBase;
 use Drupal\drupalmoduleupgrader\TargetInterface;
 use Pharborist\DocCommentNode;
@@ @@
     $unit_tests = [];
     $test_files = $target->getIndexer('class')->getQuery(['file'])->condition('parent', 'DrupalUnitTestCase')->execute()->fetchCol();
     foreach ($test_files as $test_file) {
-      /** @var \Pharborist\Objects\Classnode[] $tests */
+      /** @var Classnode[] $tests */
       $tests = $target->open($test_file)->find(Filter::isInstanceOf('\Pharborist\Objects\SingleInheritanceNode'))->toArray();
       foreach ($tests as $test) {
         if ((string) $test->getExtends() === 'DrupalUnitTestCase') {
@@ @@
       }
     }

-    /** @var \Pharborist\Objects\ClassNode $unit_test */
+    /** @var ClassNode $unit_test */
     foreach ($unit_tests as $unit_test) {
       $unit_test->setExtends('\Drupal\Tests\UnitTestCase');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


80) modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Tests.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Converter;

+use Pharborist\Objects\Classnode;
 use Drupal\drupalmoduleupgrader\ConverterBase;
 use Drupal\drupalmoduleupgrader\TargetInterface;
 use Drupal\drupalmoduleupgrader\Utility\Filter\ContainsLogicFilter;
@@ @@
     foreach ($mapping as $parent_class => $convert_method) {
       $test_files = $target->getIndexer('class')->getQuery(['file'])->condition('parent', $parent_class)->execute()->fetchCol();
       foreach ($test_files as $test_file) {
-        /** @var \Pharborist\Objects\Classnode[] $tests */
+        /** @var Classnode[] $tests */
         $tests = $target->open($test_file)->find(Filter::isInstanceOf('\Pharborist\Objects\SingleInheritanceNode'))->toArray();
         foreach ($tests as $test) {
           if ((string) $test->getExtends() === $parent_class) {
@@ @@
   /**
    * Converts a single web test.
    *
-   * @param \Pharborist\Objects\ClassNode $test
+   * @param ClassNode $test
    */
   public function convertWeb(ClassNode $test) {
     $test->setExtends('\Drupal\simpletest\WebTestBase');
@@ @@
   /**
    * Converts the test's getInfo() method to an annotation.
    *
-   * @param \Pharborist\Objects\ClassNode $test
+   * @param ClassNode $test
    */
   private function convertInfo(ClassNode $test) {
     $info = $this->extractInfo($test);
@@ @@
    * Extracts the return value of the test's getInfo() method, if there's no
    * logic in the method.
    *
-   * @param \Pharborist\Objects\ClassNode $test
+   * @param ClassNode $test
    *
    * @return array|null
    */
@@ @@
   /**
    * Sets the test's $modules property.
    *
-   * @param \Pharborist\Objects\ClassNode $test
+   * @param ClassNode $test
    */
   private function setModules(ClassNode $test) {
     $modules = $this->extractModules($test);
@@ @@
    * Extracts every module required by a web test by scanning its calls
    * to parent::setUp().
    *
-   * @param \Pharborist\Objects\ClassNode $test
+   * @param ClassNode $test
    *
    * @return string[]
    *   Array of modules set up by this module.
@@ @@
   /**
    * Sets the test's $profile property.
    *
-   * @param \Pharborist\Objects\ClassNode $test
+   * @param ClassNode $test
    */
   private function setProfile(ClassNode $test) {
     if (!$test->hasProperty('profile')) {
@@ @@
   /**
    * Converts a single Ajax test.
    *
-   * @param \Pharborist\Objects\ClassNode $test
+   * @param ClassNode $test
    */
   public function convertAjax(ClassNode $test) {
     $test->setExtends('\Drupal\system\Tests\Ajax\AjaxTestBase');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


81) modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Routing.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Converter;

+use Pharborist\Functions\FunctionDeclarationNode;
+use Drupal\drupalmoduleupgrader\Routing\Drupal7\RouteWrapper;
+use Drupal\drupalmoduleupgrader\Routing\RouteConverterInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\StringTranslation\TranslationInterface;
 use Drupal\drupalmoduleupgrader\ConverterBase;
@@ @@
   /**
    * The route converters' plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $routeConverters;

@@ @@
    * @param mixed $plugin_definition
    *   The plugin definition as derived from the annotations.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $route_converters
+   * @param PluginManagerInterface $route_converters
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, TranslationInterface $translator, LoggerInterface $log, PluginManagerInterface $route_converters) {
     parent::__construct($configuration, $plugin_id, $plugin_definition, $translator, $log);
@@ @@
   public function convert(TargetInterface $target) {
     // If the hook implementation contains logic, we cannot convert it and
     // that's that. So we'll leave a FIXME and bail out.
-    /** @var \Pharborist\Functions\FunctionDeclarationNode $hook */
+    /** @var FunctionDeclarationNode $hook */
     $hook = $target->getIndexer('function')->get('hook_menu');
     if ($hook->is(new ContainsLogicFilter)) {
       $hook->setDocComment(DocCommentNode::create($this->pluginDefinition['fixme']));
@@ @@

     $hook_menu = new HookMenu($target, $this->routeConverters);
     foreach ($hook_menu->getSourceRoutes() as $path => $route) {
-      /** @var \Drupal\drupalmoduleupgrader\Routing\Drupal7\RouteWrapper $route */
+      /** @var RouteWrapper $route */
       if ($route->containsKey('page callback')) {
         $plugin_id = $this->routeConverters->hasDefinition($route['page callback']) ? $route['page callback'] : 'default';
-        /** @var \Drupal\drupalmoduleupgrader\Routing\RouteConverterInterface $converter */
+        /** @var RouteConverterInterface $converter */
         $this->routeConverters->createInstance($plugin_id)->buildRoute($target, $route);
       }
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


82) modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/PSR4.php:40

    ---------- begin diff ----------
@@ @@
    * should clone it before calling this function if you want to make a PSR-4
    * *copy* of it.
    *
-   * @param \Drupal\drupalmoduleupgrader\TargetInterface $target
+   * @param TargetInterface $target
    *   The module which will own the class.
    * @param \Pharborist\ClassNode $class
    *   The class to modify.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


83) modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Links.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Converter;

+use Pharborist\Functions\FunctionDeclarationNode;
+use Drupal\drupalmoduleupgrader\Routing\LinkBinding\LinkBinding;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\StringTranslation\TranslationInterface;
 use Drupal\drupalmoduleupgrader\ConverterBase;
@@ @@
 class Links extends ConverterBase {

   /**
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $routeConverters;

   /**
-   * @var \Drupal\drupalmoduleupgrader\Routing\LinkBinding\LinkBindingFactory
+   * @var LinkBindingFactory
    */
   protected $linkBinding;

@@ @@
    *   The plugin ID, will be "Links".
    * @param string $plugin_definition
    *   The plugin definition as derived from the annotations.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $route_converters
+   * @param PluginManagerInterface $route_converters
    *   The plugin manager for route converters, used by HookMenu.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, TranslationInterface $translator, LoggerInterface $log, PluginManagerInterface $route_converters, LinkBindingFactory $link_binding) {
@@ @@
   public function convert(TargetInterface $target) {
     // If the hook implementation contains logic, we cannot convert it and
     // that's that. So we'll leave a FIXME and bail out.
-    /** @var \Pharborist\Functions\FunctionDeclarationNode $hook */
+    /** @var FunctionDeclarationNode $hook */
     $hook = $target->getIndexer('function')->get('hook_menu');
     if ($hook->is(new ContainsLogicFilter)) {
       $hook->setDocComment(DocCommentNode::create($this->pluginDefinition['fixme']));
@@ @@

     $hook_menu = new HookMenu($target, $this->routeConverters);
     foreach ($hook_menu->getSourceRoutes()->getAllLinks() as $path => $source) {
-      /** @var \Drupal\drupalmoduleupgrader\Routing\LinkBinding\LinkBinding $binding */
+      /** @var LinkBinding $binding */
       $binding = $this->linkBinding->create($source, $hook_menu->getDestinationRoute($path));

       // Skip if the converter wasn't able to find a destination.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


84) modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/HookUserLogin.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Converter;

+use Pharborist\Functions\FunctionDeclarationNode;
+use Pharborist\Functions\ParameterNode;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\StringTranslation\TranslationInterface;
 use Drupal\drupalmoduleupgrader\ConverterBase;
@@ @@
 class HookUserLogin extends ConverterBase {

   /**
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $rewriters;

@@ @@
    * {@inheritdoc}
    */
   public function convert(TargetInterface $target) {
-    /** @var \Pharborist\Functions\FunctionDeclarationNode $function */
+    /** @var FunctionDeclarationNode $function */
     $function = $target->getIndexer('function')->get('hook_user_login');
     // The $edit parameter is defunct in Drupal 8, but we'll leave it in
     // there as an empty array to prevent errors, and move it to the back
     // of the line.
-    /** @var \Pharborist\Functions\ParameterNode $edit */
+    /** @var ParameterNode $edit */
     $edit = $function->getParameterList()->shift()->setReference(FALSE)->setValue(ArrayNode::create([]));
     $function->appendParameter($edit);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


85) modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/HookNodePrepare.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Converter;

+use Pharborist\Functions\FunctionDeclarationNode;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\StringTranslation\TranslationInterface;
 use Drupal\drupalmoduleupgrader\ConverterBase;
@@ @@
 class HookNodePrepare extends ConverterBase {

   /**
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $rewriters;

@@ @@
    * {@inheritdoc}
    */
   public function convert(TargetInterface $target) {
-    /** @var \Pharborist\Functions\FunctionDeclarationNode $function */
+    /** @var FunctionDeclarationNode $function */
     $function = $target->getIndexer('function')->get('hook_node_prepare');

     // foo_node_prepare() --> foo_node_prepare_form().
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


86) modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/HookFormAlter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Converter;

+use Pharborist\Functions\FunctionDeclarationNode;
 use Drupal\Core\Database\Query\Condition;
 use Drupal\drupalmoduleupgrader\ConverterBase;
 use Drupal\drupalmoduleupgrader\TargetInterface;
@@ @@
     $alter_hooks = $query->execute();

     foreach ($alter_hooks as $alter_hook) {
-      /** @var \Pharborist\Functions\FunctionDeclarationNode $function */
+      /** @var FunctionDeclarationNode $function */
       $function = $indexer->get($alter_hook->id);

       $parameters = $function->getParameters();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


87) modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/HookEntityTypeView.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Converter;

+use Pharborist\Functions\FunctionDeclarationNode;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\StringTranslation\TranslationInterface;
 use Drupal\drupalmoduleupgrader\ConverterBase;
@@ @@
 class HookEntityTypeView extends ConverterBase {

   /**
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $rewriters;

@@ @@

     $hooks = array_filter($this->pluginDefinition['hook'], [$indexer, 'has']);
     foreach ($hooks as $hook) {
-      /** @var \Pharborist\Functions\FunctionDeclarationNode $function */
+      /** @var FunctionDeclarationNode $function */
       $function = $indexer->get($hook);
       $function->prependParameter(ParameterNode::create('build')->setTypeHint('array')->setReference(TRUE));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


88) modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/HookEntityInfo.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Converter;

+use Pharborist\Objects\ClassNode;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\drupalmoduleupgrader\ConverterBase;
 use Drupal\drupalmoduleupgrader\TargetInterface;
@@ @@
       unset($entity_type['entity keys']);

       if (isset($entity_type['controller class'])) {
-        /** @var \Pharborist\Objects\ClassNode $controller */
+        /** @var ClassNode $controller */
         $indexer = $target->getIndexer('class');
         if ($indexer->has($entity_type['controller class'])) {
           $controller = $indexer->get($entity_type['controller class']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


89) modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Grep.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Converter;

+use Symfony\Component\Finder\SplFileInfo;
 use Drupal\Core\StringTranslation\TranslationInterface;
 use Drupal\drupalmoduleupgrader\ConverterBase;
 use Drupal\drupalmoduleupgrader\TargetInterface;
@@ @@
       // Load in the entire contents of the module. This is criminally inefficient
       // and wasteful of memory and should eventually be refactored into something
       // a little more...I dunno, sustainable.
-      /** @var \Symfony\Component\Finder\SplFileInfo $file */
+      /** @var SplFileInfo $file */
       $search = array_keys($this->targets);
       $replace = array_values($this->targets);
       file_put_contents($file->getPathname(), str_replace($search, $replace, $file->getContents()));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


90) modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/URL.php:21

    ---------- begin diff ----------
@@ @@
 class URL extends FunctionCallModifier implements ContainerFactoryPluginInterface {

   /**
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


91) modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/FunctionCallModifier.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Converter\Functions;

+use Pharborist\Node;
 use Drupal\drupalmoduleupgrader\ConverterBase;
 use Drupal\drupalmoduleupgrader\TargetInterface;
 use Pharborist\Functions\FunctionCallNode;
@@ @@
   /**
    * Tries to rewrite the original function call.
    *
-   * @param \Pharborist\Functions\FunctionCallNode $call
+   * @param FunctionCallNode $call
    *   The original function call.
-   * @param \Drupal\drupalmoduleupgrader\TargetInterface $target
+   * @param TargetInterface $target
    *   The target module.
    *
-   * @return \Pharborist\Node|null
+   * @return Node|null
    *   If the original function call is returned (determined by object identity),
    *   the function call is not replaced. If a different node is returned, it
    *   will replace the original call. And if nothing is returned, the original
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


92) modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Functions/CToolsGetPlugins.php:19

    ---------- begin diff ----------
@@ @@
    * only if both arguments are strings, and the first argument is the machine
    * name of the target module.
    *
-   * @param \Pharborist\Functions\FunctionCallNode $call
+   * @param FunctionCallNode $call
    *   The function call to test.
-   * @param \Drupal\drupalmoduleupgrader\TargetInterface $target
+   * @param TargetInterface $target
    *   The target module.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


93) modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/EntityHooks.php:43

    ---------- begin diff ----------
@@ @@
 class EntityHooks extends ConverterBase {

   /**
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $rewriters;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


94) modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Converter/Blocks.php:79

    ---------- begin diff ----------
@@ @@
   /**
    * Slaps a translated FIXME notice above a block-related hook.
    *
-   * @param \Drupal\drupalmoduleupgrader\TargetInterface $target
+   * @param TargetInterface $target
    *   The target module.
    * @param string $hook
    *   The hook to put the FIXME on. It's up to the calling code to ensure
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


95) modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Analyzer/InfoFile.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Analyzer;

+use Drupal\drupalmoduleupgrader\IssueInterface;
 use Drupal\drupalmoduleupgrader\Plugin\DMU\Converter\InfoToYAML;
 use Drupal\drupalmoduleupgrader\AnalyzerBase;
 use Drupal\drupalmoduleupgrader\Issue;
@@ @@
       $issues['configure']->addDocumentation($doc['url'] . '#configure', $doc['title']);
     }

-    /** @var \Drupal\drupalmoduleupgrader\IssueInterface $issue */
+    /** @var IssueInterface $issue */
     foreach ($issues as $key => $issue) {
       $issue->setTag('error_level', 'error');
       $issue->setTag('category', ['info']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


96) modules/contrib/drupalmoduleupgrader/src/Plugin/DMU/Analyzer/HookUninstall.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drupalmoduleupgrader\Plugin\DMU\Analyzer;

+use Pharborist\NodeCollection;
 use Drupal\drupalmoduleupgrader\AnalyzerBase;
 use Drupal\drupalmoduleupgrader\TargetInterface;
 use Pharborist\Filter;
@@ @@
     $issues = [];

     if ($indexer->has('hook_uninstall')) {
-      /** @var \Pharborist\NodeCollection $variable_del */
+      /** @var NodeCollection $variable_del */
       $variable_del = $indexer->get('hook_uninstall')->find(Filter::isFunctionCall('variable_del'));

       if (sizeof($variable_del) > 0) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


97) modules/contrib/drupalmoduleupgrader/src/IssueInterface.php:62

    ---------- begin diff ----------
@@ @@
    *
    * @param string $file
    *   The path of the affected file.
-   * @param \Drupal\drupalmoduleupgrader\AnalyzerInterface $detector
+   * @param AnalyzerInterface $detector
    *   The plugin which detected the problem.
    *
    * @return $this
@@ @@
   /**
    * Flags a single violation of this issue in a particular syntax node.
    *
-   * @param \Pharborist\Node $node
+   * @param Node $node
    *   The offending syntax tree node.
-   * @param \Drupal\drupalmoduleupgrader\AnalyzerInterface $detector
+   * @param AnalyzerInterface $detector
    *   The plugin which detected the violation.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


98) modules/contrib/drupalmoduleupgrader/src/Issue.php:48

    ---------- begin diff ----------
@@ @@
   protected $fixes = [];

   /**
-   * @var \cebe\markdown\Markdown
+   * @var Markdown
    */
   protected $parser;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


99) modules/contrib/drupalmoduleupgrader/src/IndexerBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drupalmoduleupgrader;

+use Symfony\Component\Finder\SplFileInfo;
 use Drupal\Core\Database\Connection as DatabaseConnection;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Plugin\PluginBase as CorePluginBase;
@@ @@
    * {@inheritdoc}
    */
   public function build() {
-    /** @var \Symfony\Component\Finder\SplFileInfo $file */
+    /** @var SplFileInfo $file */
     foreach ($this->target->getFinder() as $file) {
       $this->addFile($file->getPathname());
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


100) modules/contrib/drupalmoduleupgrader/src/FixerInterface.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Sets the target module to operate on.
    *
-   * @param \Drupal\drupalmoduleupgrader\TargetInterface $target
+   * @param TargetInterface $target
    */
   public function setTarget(TargetInterface $target);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


101) modules/contrib/drupalmoduleupgrader/src/FixerBase.php:10

    ---------- begin diff ----------
@@ @@
 abstract class FixerBase extends CorePluginBase implements FixerInterface {

   /**
-   * @var \Drupal\drupalmoduleupgrader\TargetInterface
+   * @var TargetInterface
    */
   protected $target;

@@ @@
   /**
    * Returns if a node uses a specific trait anywhere in its lineage.
    *
-   * @param \Pharborist\NodeInterface $node
+   * @param NodeInterface $node
    *
    * @return bool
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


102) modules/contrib/drupalmoduleupgrader/src/ConverterBase.php:88

    ---------- begin diff ----------
@@ @@
    * @param string $hook
    *   The hook to implement, without the hook_ prefix.
    *
-   * @return \Pharborist\Functions\FunctionDeclarationNode
+   * @return FunctionDeclarationNode
    *   The hook implementation, appended to the main module file.
    */
   protected function implement(TargetInterface $target, $hook) {
@@ @@
    *
    * @param TargetInterface $target
    *   The target module.
-   * @param \Pharborist\Objects\ClassNode $class
+   * @param ClassNode $class
    *   The class to write. The path will be determined from the class'
    *   fully qualified name.
    *
@@ @@
    * @param string|array $class
    *   The class to parse, either as a string of PHP code or a renderable array.
    *
-   * @return \Pharborist\Objects\ClassNode
+   * @return ClassNode
    */
   protected function parse($class) {
     if (is_array($class)) {
@@ @@
   /**
    * Parametrically rewrites a function.
    *
-   * @param \Drupal\drupalmoduleupgrader\RewriterInterface $rewriter
+   * @param RewriterInterface $rewriter
    *   A fully configured parametric rewriter.
-   * @param \Pharborist\Functions\ParameterNode $parameter
+   * @param ParameterNode $parameter
    *   The parameter upon which to base the rewrite.
    * @param TargetInterface $target
    *   The target module.
@@ @@
         return $indexer->has($call->getName()->getText());
       });

-    /** @var \Pharborist\Functions\FunctionCallNode $call */
+    /** @var FunctionCallNode $call */
     foreach ($next as $call) {
-      /** @var \Pharborist\Functions\FunctionDeclarationNode $function */
+      /** @var FunctionDeclarationNode $function */
       $function = $indexer->get($call->getName()->getText());

       foreach ($call->getArguments() as $index => $argument) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


103) modules/contrib/drupalmoduleupgrader/src/Commands/DrupalmoduleupgraderCommands.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drupalmoduleupgrader\Commands;

+use Drupal\drupalmoduleupgrader\ConverterInterface;
 use Drush\Commands\DrushCommands;
 use Drupal\drupalmoduleupgrader\Report;
 use Drupal\drupalmoduleupgrader\Target;
@@ @@
   /**
    * Renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * Analyzer plugin manager.
    *
-   * @var \Drupal\Core\Plugin\DefaultPluginManager
+   * @var DefaultPluginManager
    */
   protected $analyzerPluginManager;

@@ @@
   /**
    * Converter plugin manager.
    *
-   * @var \Drupal\Core\Plugin\DefaultPluginManager
+   * @var DefaultPluginManager
    */
   protected $converterPluginManager;

@@ @@
   /**
    * DrupalmoduleupgraderCommands constructor.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   Renderer service.
-   * @param \Drupal\Core\Plugin\DefaultPluginManager $analyzer_plugin_manager
+   * @param DefaultPluginManager $analyzer_plugin_manager
    *   Analyzer plugin manager.
-   * @param \Drupal\Core\Plugin\DefaultPluginManager $converter_plugin_manager
+   * @param DefaultPluginManager $converter_plugin_manager
    *   Converter plugin manager.
    */
   public function __construct(RendererInterface $renderer,
@@ @@
     }

     foreach ($this->dmuPluginList('converter', $options) as $id) {
-      /** @var \Drupal\drupalmoduleupgrader\ConverterInterface $converter */
+      /** @var ConverterInterface $converter */
       $converter = $this->converterPluginManager->createInstance($id);

       if ($converter->isExecutable($target)) {
@@ @@
    * @param null $path
    *   Path of the module.
    *
-   * @return \Drupal\drupalmoduleupgrader\Target
+   * @return Target
    *   Target module.
    */
   protected function dmuBuildTarget(string $module, $path = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


104) modules/contrib/drupalmoduleupgrader/src/AnalyzerInterface.php:13

    ---------- begin diff ----------
@@ @@
    * @param TargetInterface $target
    *   The target module.
    *
-   * @return \Drupal\drupalmoduleupgrader\IssueInterface[]
+   * @return IssueInterface[]
    */
   public function analyze(TargetInterface $target);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


105) modules/contrib/drupalmoduleupgrader/drupalmoduleupgrader.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\drupalmoduleupgrader\IssueInterface;
 /**
  * @file
  * DMU module file.
@@ @@
 function template_preprocess_dmu_report(array &$variables) {
   $categories = \Drupal::config('drupalmoduleupgrader.tags')->get('category');

-  /** @var \Drupal\drupalmoduleupgrader\IssueInterface $issue */
+  /** @var IssueInterface $issue */
   foreach ($variables['report']->getIssues() as $issue) {
     $category = $categories[$issue->hasTag('category') ? $issue->getTag('category')[0] : 'misc'];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


106) modules/contrib/drupalmoduleupgrader/drupalmoduleupgrader.drush.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\drupalmoduleupgrader\ConverterInterface;
 /**
  * @file
  * Declarations for Drush.
@@ @@
  * @param string $module
  *   Module name.
  *
- * @return \Drupal\drupalmoduleupgrader\Target
+ * @return Target
  *   The target.
  */
 function _dmu_build_target($module) {
@@ @@

   $converters = \Drupal::service('plugin.manager.drupalmoduleupgrader.converter');
   foreach (_dmu_plugin_list('converter') as $id) {
-    /** @var \Drupal\drupalmoduleupgrader\ConverterInterface $converter */
+    /** @var ConverterInterface $converter */
     $converter = $converters->createInstance($id);

     if ($converter->isExecutable($target)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 106 files have been changed by Rector                                     

