modules/contrib/access_conditions/modules/entity/access_conditions_entity.module
modules/contrib/access_conditions/modules/entity/src/AbstractEnum.php
modules/contrib/access_conditions/modules/entity/src/EntityOperation.php
modules/contrib/access_conditions/modules/entity/src/Plugin/Field/FieldFormatter/AccessModelReferenceFormatter.php
modules/contrib/access_conditions/modules/entity/src/Plugin/Field/FieldType/AccessModelItem.php
modules/contrib/access_conditions/modules/entity/src/Plugin/Field/FieldWidget/AccessModelReferenceAutocompleteWidget.php
modules/contrib/access_conditions/src/AccessChecker.php
modules/contrib/access_conditions/src/AccessModelListBuilder.php
modules/contrib/access_conditions/src/Entity/AccessModel.php
modules/contrib/access_conditions/src/Entity/AccessModelInterface.php
modules/contrib/access_conditions/src/Form/AccessModelAddForm.php
modules/contrib/access_conditions/src/Form/AccessModelDeleteForm.php
modules/contrib/access_conditions/src/Form/AccessModelEditForm.php
modules/contrib/access_conditions/src/Form/ConditionAddForm.php
modules/contrib/access_conditions/src/Form/ConditionDeleteForm.php
modules/contrib/access_conditions/src/Form/ConditionEditForm.php
modules/contrib/access_conditions/src/Plugin/Condition/AccessModel.php

10 files with changes
=====================

1) modules/contrib/access_conditions/src/Plugin/Condition/AccessModel.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\access_conditions\Plugin\Condition;

+use Drupal\access_conditions\Entity\AccessModelInterface;
 use Drupal\access_conditions\AccessChecker;
 use Drupal\access_conditions\Entity\AccessModel as AccessModelEntity;
 use Drupal\Core\Cache\RefinableCacheableDependencyTrait;
@@ @@
   /**
    * The access model service.
    *
-   * @var \Drupal\access_conditions\AccessChecker
+   * @var AccessChecker
    */
   protected $accessChecker;

@@ @@
    * {@inheritdoc}
    */
   public function evaluate() {
-    /** @var \Drupal\access_conditions\Entity\AccessModelInterface[] $access_models */
+    /** @var AccessModelInterface[] $access_models */
     $access_models = AccessModelEntity::loadMultiple($this->configuration['access_models']);

     $result = [];
@@ @@
   /**
    * Sets the access model service.
    *
-   * @param \Drupal\access_conditions\AccessChecker $access_check
+   * @param AccessChecker $access_check
    *   The access model service.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/access_conditions/src/Form/ConditionDeleteForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The condition plugin manager.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $conditionManager;

@@ @@
   /**
    * The access model entity.
    *
-   * @var \Drupal\access_conditions\Entity\AccessModelInterface
+   * @var AccessModelInterface
    */
   protected $accessModel;

@@ @@
   /**
    * Constructs a ConditionAddForm object.
    *
-   * @param \Drupal\Core\Condition\ConditionManager $manager
+   * @param ConditionManager $manager
    *   The condition plugin manager.
    */
   public function __construct(ConditionManager $manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/access_conditions/src/Form/ConditionAddForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\access_conditions\Form;

+use Drupal\Core\Condition\ConditionInterface;
 use Drupal\Component\Uuid\Uuid;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\CloseModalDialogCommand;
@@ @@
   /**
    * The condition plugin manager.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $conditionManager;

@@ @@
   /**
    * The context repository service.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;

@@ @@
   /**
    * The access model entity.
    *
-   * @var \Drupal\access_conditions\Entity\AccessModelInterface
+   * @var AccessModelInterface
    */
   protected $accessModel;

@@ @@
   /**
    * Constructs a ConditionAddForm object.
    *
-   * @param \Drupal\Core\Condition\ConditionManager $condition_manager
+   * @param ConditionManager $condition_manager
    *   The condition plugin manager.
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $context_repository
+   * @param ContextRepositoryInterface $context_repository
    *   The lazy context repository service.
    */
   public function __construct(ConditionManager $condition_manager, ContextRepositoryInterface $context_repository) {
@@ @@
       $instance = $this->conditionManager->createInstance(str_replace('-', ":", $condition), []);
     }

-    /** @var \Drupal\Core\Condition\ConditionInterface $instance */
+    /** @var ConditionInterface $instance */
     $form = $instance->buildConfigurationForm($form, $form_state);

     if (isset($id)) {
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Condition\ConditionInterface $instance */
+    /** @var ConditionInterface $instance */
     $instance = $form_state->getValue('instance');
     $instance->submitConfigurationForm($form, $form_state);

     if ($instance instanceof ContextAwarePluginInterface) {
-      /** @var \Drupal\Core\Plugin\ContextAwarePluginInterface $instance */
+      /** @var ContextAwarePluginInterface $instance */
       $context_mapping = $form_state->hasValue('context_mapping') ? $form_state->getValue('context_mapping') : [];
       $instance->setContextMapping($context_mapping);
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/access_conditions/src/Form/AccessModelEditForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\access_conditions\Form;

+use Drupal\access_conditions\Entity\AccessModelInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\OpenModalDialogCommand;
@@ @@
   /**
    * The condition plugin manager.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $conditionManager;

@@ @@
   /**
    * The context repository service.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;

@@ @@
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;

@@ @@
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Constructs a AccessModelEditForm object.
    *
-   * @param \Drupal\Core\Condition\ConditionManager $condition_manager
+   * @param ConditionManager $condition_manager
    *   The ConditionManager for building the access conditions UI.
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $context_repository
+   * @param ContextRepositoryInterface $context_repository
    *   The lazy context repository service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language
+   * @param LanguageManagerInterface $language
    *   The language manager.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder.
    */
   public function __construct(ConditionManager $condition_manager, ContextRepositoryInterface $context_repository, LanguageManagerInterface $language, FormBuilderInterface $form_builder) {
@@ @@
    * {@inheritdoc}
    */
   public function form(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\access_conditions\Entity\AccessModelInterface $access_model */
+    /** @var AccessModelInterface $access_model */
     $access_model = $this->entity;

     $form = parent::form($form, $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/access_conditions/src/Form/AccessModelAddForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\access_conditions\Form;

+use Drupal\access_conditions\Entity\AccessModelInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
    * {@inheritdoc}
    */
   public function form(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\access_conditions\Entity\AccessModelInterface $access_model */
+    /** @var AccessModelInterface $access_model */
     $access_model = $this->entity;

     $form = parent::form($form, $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/access_conditions/src/Entity/AccessModelInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\access_conditions\Entity;

+use Drupal\Core\Condition\ConditionInterface;
+use Drupal\Core\Condition\ConditionPluginCollection;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityWithPluginCollectionInterface;

@@ @@
   /**
    * Returns the conditions used for determining access for this access model.
    *
-   * @return \Drupal\Core\Condition\ConditionInterface[]|\Drupal\Core\Condition\ConditionPluginCollection
+   * @return ConditionInterface[]|ConditionPluginCollection
    *   An array of configured condition plugins.
    */
   public function getAccessConditions();
@@ @@
    * @param string $condition_id
    *   The access model ID.
    *
-   * @return \Drupal\Core\Condition\ConditionInterface
+   * @return ConditionInterface
    *   The access model object.
    */
   public function getAccessCondition($condition_id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/access_conditions/src/Entity/AccessModel.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\access_conditions\Entity;

+use Drupal\Component\Plugin\LazyPluginCollection;
 use Drupal\Core\Condition\ConditionPluginCollection;
 use Drupal\Core\Config\Entity\ConfigEntityBase;

@@ @@
   /**
    * The plugin collection that holds the access conditions.
    *
-   * @var \Drupal\Component\Plugin\LazyPluginCollection
+   * @var LazyPluginCollection
    */
   protected $accessConditionCollection;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/access_conditions/src/AccessModelListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\access_conditions;

+use Drupal\access_conditions\Entity\AccessModelInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Url;
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\access_conditions\Entity\AccessModelInterface $entity */
+    /** @var AccessModelInterface $entity */
     $row['label'] = $entity->label();
     $row['id'] = $entity->id();
     $row['description'] = $entity->getDescription();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/access_conditions/src/AccessChecker.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\access_conditions;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Plugin\Exception\ContextException;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheableDependencyInterface;
@@ @@
   /**
    * The plugin context handler.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   * @var ContextHandlerInterface
    */
   protected $contextHandler;

@@ @@
   /**
    * The context manager service.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;

@@ @@
   /**
    * The current active user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a AccessChecker object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Plugin\Context\ContextHandlerInterface $context_handler
+   * @param ContextHandlerInterface $context_handler
    *   The ContextHandler for applying contexts to conditions properly.
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $context_repository
+   * @param ContextRepositoryInterface $context_repository
    *   The lazy context repository service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current active user.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ContextHandlerInterface $context_handler, ContextRepositoryInterface $context_repository, AccountProxyInterface $current_user) {
@@ @@
   /**
    * Checks access for a permission tree.
    *
-   * @param \Drupal\access_conditions\Entity\AccessModelInterface $access_model
+   * @param AccessModelInterface $access_model
    *   The access model that contain the conditions to be evaluated.
    *
    * @return bool
    *   TRUE if access is granted or FALSE if access is denied.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function checkAccess(AccessModelInterface $access_model) {
     $this->resetCache();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/access_conditions/modules/entity/access_conditions_entity.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\field\FieldConfigInterface;
+use Drupal\access_conditions\AccessChecker;
+use Drupal\access_conditions\Entity\AccessModelInterface;
 /**
  * @file
  * Code for the access conditions entity module.
@@ @@
  * Implements hook_ENTITY_TYPE_create() for case 'field_config'.
  */
 function access_conditions_entity_field_config_create(EntityInterface $entity) {
-  /** @var \Drupal\field\FieldConfigInterface $entity */
+  /** @var FieldConfigInterface $entity */
   if ($entity->getFieldStorageDefinition()->getType() != 'access_model_reference') {
     return;
   }
@@ @@
  * Implements hook_ENTITY_TYPE_delete() for case 'field_config'.
  */
 function access_conditions_entity_field_config_delete(EntityInterface $entity) {
-  /** @var \Drupal\field\FieldConfigInterface $entity */
+  /** @var FieldConfigInterface $entity */
   if ($entity->getFieldStorageDefinition()->getType() != 'access_model_reference') {
     return;
   }
@@ @@
   $restricted = FALSE;
   $forbidden_result = AccessResult::forbidden();
   if (!empty($entity_fields[$entity->getEntityTypeId() . '.' . $entity->bundle()])) {
-    /** @var \Drupal\access_conditions\AccessChecker $access_checker */
+    /** @var AccessChecker $access_checker */
     $access_checker = \Drupal::service('access_conditions.access_checker');

     foreach ($entity_fields[$entity->getEntityTypeId() . '.' . $entity->bundle()] as $field_name => $status) {
       $values = $entity->get($field_name)->getValue();
-      /** @var \Drupal\access_conditions\Entity\AccessModelInterface[] $access_models */
+      /** @var AccessModelInterface[] $access_models */
       $access_models = $entity->get($field_name)->referencedEntities();
       if (!empty($values)) {
         foreach ($values as $key => $value) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 10 files have been changed by Rector                                      

