diff --git a/graphql.install b/graphql.install
index c20ceab..a670ae0 100644
--- a/graphql.install
+++ b/graphql.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Config\ConfigFactoryInterface;
 /**
  * Implements hook_requirements().
  */
@@ -25,7 +26,7 @@ function graphql_requirements($phase) {
  */
 function graphql_uninstall() {
   // Remove the config keys set in GraphQLConfigOverrides::loadOverrides().
-  /** @var \Drupal\Core\Config\ConfigFactoryInterface $configFactory */
+  /** @var ConfigFactoryInterface $configFactory */
   $configFactory = \Drupal::getContainer()->get('config.factory');
   $languageTypes = $configFactory->getEditable('language.types');
   $negotiation = $languageTypes->get('negotiation');
diff --git a/modules/graphql_core/src/GraphQL/EntityCrudOutputWrapper.php b/modules/graphql_core/src/GraphQL/EntityCrudOutputWrapper.php
index 868aaec..b5bd0dd 100644
--- a/modules/graphql_core/src/GraphQL/EntityCrudOutputWrapper.php
+++ b/modules/graphql_core/src/GraphQL/EntityCrudOutputWrapper.php
@@ -9,14 +9,14 @@ class EntityCrudOutputWrapper {
   /**
    * The create entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface|null
+   * @var EntityInterface|null
    */
   protected $entity;
 
   /**
    * The constraint validation list.
    *
-   * @var \Symfony\Component\Validator\ConstraintViolationListInterface|null
+   * @var ConstraintViolationListInterface|null
    */
   protected $violations;
 
@@ -30,9 +30,9 @@ class EntityCrudOutputWrapper {
   /**
    * CreateEntityOutputWrapper constructor.
    *
-   * @param \Drupal\Core\Entity\EntityInterface|null $entity
+   * @param EntityInterface|null $entity
    *   The entity object that has been created or NULL if creation failed.
-   * @param \Symfony\Component\Validator\ConstraintViolationListInterface|null $violations
+   * @param ConstraintViolationListInterface|null $violations
    *   The validation errors that occurred during creation or NULL if validation
    *   succeeded.
    * @param array|null $errors
@@ -52,7 +52,7 @@ class EntityCrudOutputWrapper {
   /**
    * Returns the entity that was created.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The created entity object or NULL if creation failed.
    */
   public function getEntity() {
@@ -62,7 +62,7 @@ class EntityCrudOutputWrapper {
   /**
    * Returns the constraint violations.
    *
-   * @return \Symfony\Component\Validator\ConstraintViolationListInterface|null
+   * @return ConstraintViolationListInterface|null
    *   The constraint validations or NULL if validation passed.
    */
   public function getViolations() {
diff --git a/modules/graphql_core/src/Plugin/Deriver/EntityFieldDeriverBase.php b/modules/graphql_core/src/Plugin/Deriver/EntityFieldDeriverBase.php
index 78107a3..fa76125 100644
--- a/modules/graphql_core/src/Plugin/Deriver/EntityFieldDeriverBase.php
+++ b/modules/graphql_core/src/Plugin/Deriver/EntityFieldDeriverBase.php
@@ -22,7 +22,7 @@ abstract class EntityFieldDeriverBase extends DeriverBase implements ContainerDe
   /**
    * Provides plugin definition values from fields.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $fieldDefinition
+   * @param FieldDefinitionInterface $fieldDefinition
    *   Field definition object.
    * @param array $basePluginDefinition
    *   Base definition array.
@@ -35,21 +35,21 @@ abstract class EntityFieldDeriverBase extends DeriverBase implements ContainerDe
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The entity bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityBundleInfo;
 
@@ -75,11 +75,11 @@ abstract class EntityFieldDeriverBase extends DeriverBase implements ContainerDe
   /**
    * RawValueFieldItemDeriver constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   The entity field manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entityTypeBundleInfo
+   * @param EntityTypeBundleInfoInterface $entityTypeBundleInfo
    *   The bundle info service.
    * @param string $basePluginId
    *   The base plugin id.
diff --git a/modules/graphql_core/src/Plugin/Deriver/EntityTypeDeriverBase.php b/modules/graphql_core/src/Plugin/Deriver/EntityTypeDeriverBase.php
index c33f638..3ac377a 100644
--- a/modules/graphql_core/src/Plugin/Deriver/EntityTypeDeriverBase.php
+++ b/modules/graphql_core/src/Plugin/Deriver/EntityTypeDeriverBase.php
@@ -14,14 +14,14 @@ abstract class EntityTypeDeriverBase extends DeriverBase implements ContainerDer
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Bundle info manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
@@ -38,9 +38,9 @@ abstract class EntityTypeDeriverBase extends DeriverBase implements ContainerDer
   /**
    * EntityTypeDeriver constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Instance of an entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entityTypeBundleInfo
+   * @param EntityTypeBundleInfoInterface $entityTypeBundleInfo
    *   Instance of the entity bundle info service.
    */
   public function __construct(
@@ -54,7 +54,7 @@ abstract class EntityTypeDeriverBase extends DeriverBase implements ContainerDer
   /**
    * Retrieve the interfaces that the entity type should implement.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $type
+   * @param EntityTypeInterface $type
    *   The entity type to retrieve the interfaces for.
    * @param array $basePluginDefinition
    *   The base plugin definition array.
diff --git a/modules/graphql_core/src/Plugin/Deriver/Enums/DisplayModeIdDeriver.php b/modules/graphql_core/src/Plugin/Deriver/Enums/DisplayModeIdDeriver.php
index a5b5f59..dcc77dc 100644
--- a/modules/graphql_core/src/Plugin/Deriver/Enums/DisplayModeIdDeriver.php
+++ b/modules/graphql_core/src/Plugin/Deriver/Enums/DisplayModeIdDeriver.php
@@ -16,7 +16,7 @@ class DisplayModeIdDeriver extends DeriverBase implements ContainerDeriverInterf
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -30,7 +30,7 @@ class DisplayModeIdDeriver extends DeriverBase implements ContainerDeriverInterf
   /**
    * DisplayModeIdDeriver constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
diff --git a/modules/graphql_core/src/Plugin/Deriver/Fields/ContextDeriver.php b/modules/graphql_core/src/Plugin/Deriver/Fields/ContextDeriver.php
index 9b5bd26..25c0720 100644
--- a/modules/graphql_core/src/Plugin/Deriver/Fields/ContextDeriver.php
+++ b/modules/graphql_core/src/Plugin/Deriver/Fields/ContextDeriver.php
@@ -14,7 +14,7 @@ class ContextDeriver extends DeriverBase implements ContainerDeriverInterface {
   /**
    * The context repository service.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;
 
@@ -28,7 +28,7 @@ class ContextDeriver extends DeriverBase implements ContainerDeriverInterface {
   /**
    * ContextDeriver constructor.
    *
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $contextRepository
+   * @param ContextRepositoryInterface $contextRepository
    *   The context repository service.
    */
   public function __construct(ContextRepositoryInterface $contextRepository) {
diff --git a/modules/graphql_core/src/Plugin/Deriver/Fields/EntityByIdDeriver.php b/modules/graphql_core/src/Plugin/Deriver/Fields/EntityByIdDeriver.php
index 3fdec3a..9c0f178 100644
--- a/modules/graphql_core/src/Plugin/Deriver/Fields/EntityByIdDeriver.php
+++ b/modules/graphql_core/src/Plugin/Deriver/Fields/EntityByIdDeriver.php
@@ -17,7 +17,7 @@ class EntityByIdDeriver extends DeriverBase implements ContainerDeriverInterface
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -31,7 +31,7 @@ class EntityByIdDeriver extends DeriverBase implements ContainerDeriverInterface
   /**
    * EntityByIdDeriver constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
diff --git a/modules/graphql_core/src/Plugin/Deriver/Fields/EntityFieldItemDeriver.php b/modules/graphql_core/src/Plugin/Deriver/Fields/EntityFieldItemDeriver.php
index e40a580..062e19e 100644
--- a/modules/graphql_core/src/Plugin/Deriver/Fields/EntityFieldItemDeriver.php
+++ b/modules/graphql_core/src/Plugin/Deriver/Fields/EntityFieldItemDeriver.php
@@ -57,7 +57,7 @@ class EntityFieldItemDeriver extends EntityFieldDeriverBase {
   /**
    * Extracts the data type of a property's data definition.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $propertyDefinition
+   * @param DataDefinitionInterface $propertyDefinition
    *   The property's data definition.
    *
    * @return string
diff --git a/modules/graphql_core/src/Plugin/Deriver/Fields/EntityQueryDeriver.php b/modules/graphql_core/src/Plugin/Deriver/Fields/EntityQueryDeriver.php
index 8d13330..9749227 100644
--- a/modules/graphql_core/src/Plugin/Deriver/Fields/EntityQueryDeriver.php
+++ b/modules/graphql_core/src/Plugin/Deriver/Fields/EntityQueryDeriver.php
@@ -17,14 +17,14 @@ class EntityQueryDeriver extends DeriverBase implements ContainerDeriverInterfac
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The typed data manager service.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManager
+   * @var TypedDataManager
    */
   protected $typedDataManager;
 
@@ -41,9 +41,9 @@ class EntityQueryDeriver extends DeriverBase implements ContainerDeriverInterfac
   /**
    * EntityQueryDeriver constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\TypedData\TypedDataManager $typedDataManager
+   * @param TypedDataManager $typedDataManager
    *   The typed data manager service.
    */
   public function __construct(
diff --git a/modules/graphql_core/src/Plugin/Deriver/Fields/EntityReferenceQueryDeriver.php b/modules/graphql_core/src/Plugin/Deriver/Fields/EntityReferenceQueryDeriver.php
index b6d02e5..f4fef87 100644
--- a/modules/graphql_core/src/Plugin/Deriver/Fields/EntityReferenceQueryDeriver.php
+++ b/modules/graphql_core/src/Plugin/Deriver/Fields/EntityReferenceQueryDeriver.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql_core\Plugin\Deriver\Fields;
 
+use Drupal\Core\Entity\TypedData\EntityDataDefinitionInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -19,21 +20,21 @@ class EntityReferenceQueryDeriver extends DeriverBase implements ContainerDerive
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The typed data manager service.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;
 
@@ -51,11 +52,11 @@ class EntityReferenceQueryDeriver extends DeriverBase implements ContainerDerive
   /**
    * RawValueFieldItemDeriver constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   The entity field manager.
-   * @param \Drupal\Core\TypedData\TypedDataManagerInterface $typedDataManager
+   * @param TypedDataManagerInterface $typedDataManager
    *   The typed data manager service.
    */
   public function __construct(
@@ -115,7 +116,7 @@ class EntityReferenceQueryDeriver extends DeriverBase implements ContainerDerive
           'schema_cache_max_age' => $maxAge,
         ] + $basePluginDefinition;
 
-        /** @var \Drupal\Core\Entity\TypedData\EntityDataDefinitionInterface $definition */
+        /** @var EntityDataDefinitionInterface $definition */
         $this->derivatives["$entityTypeId-$fieldName"] = $derivative;
       }
     }
diff --git a/modules/graphql_core/src/Plugin/Deriver/Fields/EntityReferenceReverseDeriver.php b/modules/graphql_core/src/Plugin/Deriver/Fields/EntityReferenceReverseDeriver.php
index 98d880b..94824ad 100644
--- a/modules/graphql_core/src/Plugin/Deriver/Fields/EntityReferenceReverseDeriver.php
+++ b/modules/graphql_core/src/Plugin/Deriver/Fields/EntityReferenceReverseDeriver.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql_core\Plugin\Deriver\Fields;
 
+use Drupal\Core\Entity\TypedData\EntityDataDefinitionInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -18,21 +19,21 @@ class EntityReferenceReverseDeriver extends DeriverBase implements ContainerDeri
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The typed data manager service.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;
 
@@ -50,11 +51,11 @@ class EntityReferenceReverseDeriver extends DeriverBase implements ContainerDeri
   /**
    * RawValueFieldItemDeriver constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   The entity field manager.
-   * @param \Drupal\Core\TypedData\TypedDataManagerInterface $typedDataManager
+   * @param TypedDataManagerInterface $typedDataManager
    *   The typed data manager service.
    */
   public function __construct(
@@ -100,7 +101,7 @@ class EntityReferenceReverseDeriver extends DeriverBase implements ContainerDeri
           'schema_cache_max_age' => $maxAge,
         ] + $basePluginDefinition;
 
-        /** @var \Drupal\Core\Entity\TypedData\EntityDataDefinitionInterface $definition */
+        /** @var EntityDataDefinitionInterface $definition */
         $this->derivatives["$entityTypeId-$fieldName"] = $derivative;
       }
     }
diff --git a/modules/graphql_core/src/Plugin/Deriver/Fields/EntityRenderedDeriver.php b/modules/graphql_core/src/Plugin/Deriver/Fields/EntityRenderedDeriver.php
index 73f7b10..e60fbd7 100644
--- a/modules/graphql_core/src/Plugin/Deriver/Fields/EntityRenderedDeriver.php
+++ b/modules/graphql_core/src/Plugin/Deriver/Fields/EntityRenderedDeriver.php
@@ -17,14 +17,14 @@ class EntityRenderedDeriver extends DeriverBase implements ContainerDeriverInter
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity display repository service.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;
 
@@ -41,9 +41,9 @@ class EntityRenderedDeriver extends DeriverBase implements ContainerDeriverInter
   /**
    * EntityRenderedDeriver constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entityDisplayRepository
+   * @param EntityDisplayRepositoryInterface $entityDisplayRepository
    *   The entity display repository service.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, EntityDisplayRepositoryInterface $entityDisplayRepository) {
diff --git a/modules/graphql_core/src/Plugin/Deriver/Fields/EntityRevisionByIdDeriver.php b/modules/graphql_core/src/Plugin/Deriver/Fields/EntityRevisionByIdDeriver.php
index 4f9fe58..ef7f8dc 100644
--- a/modules/graphql_core/src/Plugin/Deriver/Fields/EntityRevisionByIdDeriver.php
+++ b/modules/graphql_core/src/Plugin/Deriver/Fields/EntityRevisionByIdDeriver.php
@@ -17,7 +17,7 @@ class EntityRevisionByIdDeriver extends DeriverBase implements ContainerDeriverI
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -31,7 +31,7 @@ class EntityRevisionByIdDeriver extends DeriverBase implements ContainerDeriverI
   /**
    * EntityRevisionByIdDeriver constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
diff --git a/modules/graphql_core/src/Plugin/Deriver/Scalars/TypedDataPrimitiveFallback.php b/modules/graphql_core/src/Plugin/Deriver/Scalars/TypedDataPrimitiveFallback.php
index de5df86..fdde28c 100644
--- a/modules/graphql_core/src/Plugin/Deriver/Scalars/TypedDataPrimitiveFallback.php
+++ b/modules/graphql_core/src/Plugin/Deriver/Scalars/TypedDataPrimitiveFallback.php
@@ -15,7 +15,7 @@ class TypedDataPrimitiveFallback extends DeriverBase implements ContainerDeriver
   /**
    * The typed data manager.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;
 
@@ -29,7 +29,7 @@ class TypedDataPrimitiveFallback extends DeriverBase implements ContainerDeriver
   /**
    * TypedDataPrimitiveFallback constructor.
    *
-   * @param \Drupal\Core\TypedData\TypedDataManagerInterface $typedDataManager
+   * @param TypedDataManagerInterface $typedDataManager
    *   The typed data manager.
    */
   public function __construct(TypedDataManagerInterface $typedDataManager) {
diff --git a/modules/graphql_core/src/Plugin/GraphQL/Enums/Images/ImageStyleId.php b/modules/graphql_core/src/Plugin/GraphQL/Enums/Images/ImageStyleId.php
index 2e7e99b..c1b4206 100644
--- a/modules/graphql_core/src/Plugin/GraphQL/Enums/Images/ImageStyleId.php
+++ b/modules/graphql_core/src/Plugin/GraphQL/Enums/Images/ImageStyleId.php
@@ -20,7 +20,7 @@ class ImageStyleId extends EnumPluginBase implements ContainerFactoryPluginInter
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -45,7 +45,7 @@ class ImageStyleId extends EnumPluginBase implements ContainerFactoryPluginInter
    *   The plugin id.
    * @param array $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $pluginId, $pluginDefinition, EntityTypeManagerInterface $entityTypeManager) {
diff --git a/modules/graphql_core/src/Plugin/GraphQL/Enums/Languages/LanguageId.php b/modules/graphql_core/src/Plugin/GraphQL/Enums/Languages/LanguageId.php
index 20d28be..6180327 100644
--- a/modules/graphql_core/src/Plugin/GraphQL/Enums/Languages/LanguageId.php
+++ b/modules/graphql_core/src/Plugin/GraphQL/Enums/Languages/LanguageId.php
@@ -20,7 +20,7 @@ class LanguageId extends EnumPluginBase implements ContainerFactoryPluginInterfa
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
@@ -45,7 +45,7 @@ class LanguageId extends EnumPluginBase implements ContainerFactoryPluginInterfa
    *   The plugin id.
    * @param array $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager service.
    */
   public function __construct(array $configuration, $pluginId, $pluginDefinition, LanguageManagerInterface $languageManager) {
diff --git a/modules/graphql_core/src/Plugin/GraphQL/Fields/Blocks/BlocksByRegion.php b/modules/graphql_core/src/Plugin/GraphQL/Fields/Blocks/BlocksByRegion.php
index 0602274..24827eb 100644
--- a/modules/graphql_core/src/Plugin/GraphQL/Fields/Blocks/BlocksByRegion.php
+++ b/modules/graphql_core/src/Plugin/GraphQL/Fields/Blocks/BlocksByRegion.php
@@ -37,28 +37,28 @@ class BlocksByRegion extends FieldPluginBase implements ContainerFactoryPluginIn
   /**
    * The theme manager.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * The subrequest buffer service.
    *
-   * @var \Drupal\graphql\GraphQL\Buffers\SubRequestBuffer
+   * @var SubRequestBuffer
    */
   protected $subRequestBuffer;
 
@@ -91,13 +91,13 @@ class BlocksByRegion extends FieldPluginBase implements ContainerFactoryPluginIn
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\graphql\GraphQL\Buffers\SubRequestBuffer $subRequestBuffer
+   * @param SubRequestBuffer $subRequestBuffer
    *   The sub-request buffer service.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $themeManager
+   * @param ThemeManagerInterface $themeManager
    *   The theme manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity repository service.
    */
   public function __construct(
@@ -141,7 +141,7 @@ class BlocksByRegion extends FieldPluginBase implements ContainerFactoryPluginIn
       });
 
       return function ($value, array $args, ResolveContext $context, ResolveInfo $info) use ($resolve) {
-        /** @var \Drupal\graphql\GraphQL\Cache\CacheableValue $response */
+        /** @var CacheableValue $response */
         $response = $resolve();
         $blocks = array_map(function (Block $block) {
           $plugin = $block->getPlugin();
diff --git a/modules/graphql_core/src/Plugin/GraphQL/Fields/Breadcrumbs/Breadcrumbs.php b/modules/graphql_core/src/Plugin/GraphQL/Fields/Breadcrumbs/Breadcrumbs.php
index 27db9bf..72ddf09 100644
--- a/modules/graphql_core/src/Plugin/GraphQL/Fields/Breadcrumbs/Breadcrumbs.php
+++ b/modules/graphql_core/src/Plugin/GraphQL/Fields/Breadcrumbs/Breadcrumbs.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql_core\Plugin\GraphQL\Fields\Breadcrumbs;
 
+use Drupal\Core\Breadcrumb\BreadcrumbBuilderInterface;
 use Drupal\Core\Breadcrumb\BreadcrumbManager;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ -29,21 +30,21 @@ class Breadcrumbs extends FieldPluginBase implements ContainerFactoryPluginInter
   /**
    * The subrequest buffer service.
    *
-   * @var \Drupal\graphql\GraphQL\Buffers\SubRequestBuffer
+   * @var SubRequestBuffer
    */
   protected $subRequestBuffer;
 
   /**
    * The breadcrumb manager service.
    *
-   * @var \Drupal\Core\Breadcrumb\BreadcrumbBuilderInterface
+   * @var BreadcrumbBuilderInterface
    */
   protected $breadcrumbManager;
 
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
@@ -70,11 +71,11 @@ class Breadcrumbs extends FieldPluginBase implements ContainerFactoryPluginInter
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\graphql\GraphQL\Buffers\SubRequestBuffer $subRequestBuffer
+   * @param SubRequestBuffer $subRequestBuffer
    *   The sub-request buffer service.
-   * @param \Drupal\Core\Breadcrumb\BreadcrumbManager $breadcrumbManager
+   * @param BreadcrumbManager $breadcrumbManager
    *   The breadcrumb manager service.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $routeMatch
+   * @param RouteMatchInterface $routeMatch
    *   The current route match.
    */
   public function __construct(
@@ -102,7 +103,7 @@ class Breadcrumbs extends FieldPluginBase implements ContainerFactoryPluginInter
       });
 
       return function ($value, array $args, ResolveContext $context, ResolveInfo $info) use ($resolve) {
-        /** @var \Drupal\graphql\GraphQL\Cache\CacheableValue $response */
+        /** @var CacheableValue $response */
         $response = $resolve();
         $links = $response->getValue();
 
diff --git a/modules/graphql_core/src/Plugin/GraphQL/Fields/Context/Context.php b/modules/graphql_core/src/Plugin/GraphQL/Fields/Context/Context.php
index 10cb675..a7c2b84 100644
--- a/modules/graphql_core/src/Plugin/GraphQL/Fields/Context/Context.php
+++ b/modules/graphql_core/src/Plugin/GraphQL/Fields/Context/Context.php
@@ -26,14 +26,14 @@ class Context extends FieldPluginBase implements ContainerFactoryPluginInterface
   /**
    * The context repository service.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;
 
   /**
    * The subrequest buffer service.
    *
-   * @var \Drupal\graphql\GraphQL\Buffers\SubRequestBuffer
+   * @var SubRequestBuffer
    */
   protected $subRequestBuffer;
 
@@ -59,9 +59,9 @@ class Context extends FieldPluginBase implements ContainerFactoryPluginInterface
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\graphql\GraphQL\Buffers\SubRequestBuffer $subRequestBuffer
+   * @param SubRequestBuffer $subRequestBuffer
    *   The sub-request buffer service.
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $contextRepository
+   * @param ContextRepositoryInterface $contextRepository
    *   The context repository service.
    */
   public function __construct(
diff --git a/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityById.php b/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityById.php
index 3db3554..eed71e8 100644
--- a/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityById.php
+++ b/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityById.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql_core\Plugin\GraphQL\Fields\Entity;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -31,21 +32,21 @@ class EntityById extends FieldPluginBase implements ContainerFactoryPluginInterf
   /**
    * The entity buffer service.
    *
-   * @var \Drupal\graphql\GraphQL\Buffers\EntityBuffer
+   * @var EntityBuffer
    */
   protected $entityBuffer;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
@@ -72,11 +73,11 @@ class EntityById extends FieldPluginBase implements ContainerFactoryPluginInterf
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity repository service.
-   * @param \Drupal\graphql\GraphQL\Buffers\EntityBuffer $entityBuffer
+   * @param EntityBuffer $entityBuffer
    *   The entity buffer service.
    */
   public function __construct(
@@ -107,7 +108,7 @@ class EntityById extends FieldPluginBase implements ContainerFactoryPluginInterf
         yield (new CacheableValue(NULL))->addCacheTags($entityType->getListCacheTags());
       }
       else {
-        /** @var \Drupal\Core\Entity\EntityInterface $entity */
+        /** @var EntityInterface $entity */
         $access = $entity->access('view', NULL, TRUE);
 
         if ($access->isAllowed()) {
diff --git a/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityField.php b/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityField.php
index 0be2a02..9106732 100644
--- a/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityField.php
+++ b/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityField.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql_core\Plugin\GraphQL\Fields\Entity;
 
+use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\graphql\GraphQL\Cache\CacheableValue;
 use Drupal\graphql\GraphQL\Execution\ResolveContext;
@@ -27,7 +28,7 @@ class EntityField extends EntityFieldBase {
       $name = $definition['field'];
 
       if ($value->hasField($name)) {
-        /** @var \Drupal\Core\Field\FieldItemListInterface $items */
+        /** @var FieldItemListInterface $items */
         $items = $value->get($name);
         $access = $items->access('view', NULL, TRUE);
 
diff --git a/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityQueryExclusive.php b/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityQueryExclusive.php
index c9fda9e..1130a08 100644
--- a/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityQueryExclusive.php
+++ b/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityQueryExclusive.php
@@ -63,18 +63,18 @@ class EntityQueryExclusive extends EntityQuery {
   }
 
   /**
-   * Apply the specified bundle filtering mode to the query.
-   *
-   * @param \Drupal\Core\Entity\Query\QueryInterface $query
-   *   The entity query object.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $value
-   *   The parent entity object.
-   * @param mixed $mode
-   *   The revision query mode.
-   *
-   * @return \Drupal\Core\Entity\Query\QueryInterface The entity query object.
-   * The entity query object.
-   */
+  * Apply the specified bundle filtering mode to the query.
+  *
+   * @param QueryInterface $query
+  *   The entity query object.
+   * @param ContentEntityInterface $value
+  *   The parent entity object.
+  * @param mixed $mode
+  *   The revision query mode.
+  *
+   * @return QueryInterface The entity query object.
+  The entity query object.
+  */
   protected function applyBundleMode(QueryInterface $query, ContentEntityInterface $value, $mode) {
     if ($mode === 'same') {
       $type = $value->getEntityType();
diff --git a/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityRendered.php b/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityRendered.php
index c03ec17..b19a9bc 100644
--- a/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityRendered.php
+++ b/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityRendered.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql_core\Plugin\GraphQL\Fields\Entity;
 
+use GraphQL\Executor\ExecutionResult;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -29,14 +30,14 @@ class EntityRendered extends FieldPluginBase implements ContainerFactoryPluginIn
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -62,9 +63,9 @@ class EntityRendered extends FieldPluginBase implements ContainerFactoryPluginIn
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    */
   public function __construct(
@@ -90,7 +91,7 @@ class EntityRendered extends FieldPluginBase implements ContainerFactoryPluginIn
       $view = $builder->view($value, $mode, $language);
 
       $context = new RenderContext();
-      /** @var \GraphQL\Executor\ExecutionResult|\GraphQL\Executor\ExecutionResult[] $result */
+      /** @var ExecutionResult|ExecutionResult[] $result */
       $result = $this->renderer->executeInRenderContext($context, function() use ($view) {
         return $this->renderer->render($view);
       });
diff --git a/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityRevisionById.php b/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityRevisionById.php
index a93926e..1c7c0c3 100644
--- a/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityRevisionById.php
+++ b/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityRevisionById.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql_core\Plugin\GraphQL\Fields\Entity;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ -31,14 +32,14 @@ class EntityRevisionById extends FieldPluginBase implements ContainerFactoryPlug
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
@@ -64,9 +65,9 @@ class EntityRevisionById extends FieldPluginBase implements ContainerFactoryPlug
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity repository service.
    */
   public function __construct(
diff --git a/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityTranslation.php b/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityTranslation.php
index 62ae586..ff21893 100644
--- a/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityTranslation.php
+++ b/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityTranslation.php
@@ -30,7 +30,7 @@ class EntityTranslation extends FieldPluginBase implements ContainerFactoryPlugi
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
@@ -55,7 +55,7 @@ class EntityTranslation extends FieldPluginBase implements ContainerFactoryPlugi
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity repository service.
    */
   public function __construct(array $configuration, $pluginId, $pluginDefinition, EntityRepositoryInterface $entityRepository) {
diff --git a/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityTranslations.php b/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityTranslations.php
index 5e86b02..5a59a43 100644
--- a/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityTranslations.php
+++ b/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/EntityTranslations.php
@@ -27,7 +27,7 @@ class EntityTranslations extends FieldPluginBase implements ContainerFactoryPlug
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
@@ -52,7 +52,7 @@ class EntityTranslations extends FieldPluginBase implements ContainerFactoryPlug
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity repository service.
    */
   public function __construct(
diff --git a/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/Fields/Image/ImageDerivative.php b/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/Fields/Image/ImageDerivative.php
index d93b8ac..ba62b23 100644
--- a/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/Fields/Image/ImageDerivative.php
+++ b/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/Fields/Image/ImageDerivative.php
@@ -37,7 +37,7 @@ class ImageDerivative extends FieldPluginBase implements ContainerFactoryPluginI
   /**
    * The image factory.
    *
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   protected $imageFactory;
 
@@ -57,7 +57,7 @@ class ImageDerivative extends FieldPluginBase implements ContainerFactoryPluginI
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Image\ImageFactory $imageFactory
+   * @param ImageFactory $imageFactory
    *   The image factory service.
    */
   public function __construct(array $configuration, $pluginId, $pluginDefinition, ImageFactory $imageFactory) {
diff --git a/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/Fields/Image/ImageUrl.php b/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/Fields/Image/ImageUrl.php
index 728211b..3219210 100644
--- a/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/Fields/Image/ImageUrl.php
+++ b/modules/graphql_core/src/Plugin/GraphQL/Fields/Entity/Fields/Image/ImageUrl.php
@@ -27,7 +27,7 @@ class ImageUrl extends FieldPluginBase {
    */
   protected function resolveValues($value, array $args, ResolveContext $context, ResolveInfo $info) {
     if ($value instanceof ImageItem && $value->entity && $value->entity->access('view')) {
-      yield file_create_url($value->entity->getFileUri());
+      yield \Drupal::service('file_url_generator')->generateAbsoluteString($value->entity->getFileUri());
     }
   }
 
diff --git a/modules/graphql_core/src/Plugin/GraphQL/Fields/EntityQuery/EntityQuery.php b/modules/graphql_core/src/Plugin/GraphQL/Fields/EntityQuery/EntityQuery.php
index ab7fddf..2c35b42 100644
--- a/modules/graphql_core/src/Plugin/GraphQL/Fields/EntityQuery/EntityQuery.php
+++ b/modules/graphql_core/src/Plugin/GraphQL/Fields/EntityQuery/EntityQuery.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql_core\Plugin\GraphQL\Fields\EntityQuery;
 
+use Drupal\Core\Entity\Query\ConditionInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Entity\EntityInterface;
@@ -48,7 +49,7 @@ class EntityQuery extends FieldPluginBase implements ContainerFactoryPluginInter
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -73,7 +74,7 @@ class EntityQuery extends FieldPluginBase implements ContainerFactoryPluginInter
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
    */
   public function __construct(array $configuration, $pluginId, $pluginDefinition, EntityTypeManagerInterface $entityTypeManager) {
@@ -109,9 +110,9 @@ class EntityQuery extends FieldPluginBase implements ContainerFactoryPluginInter
    *   The parent value.
    * @param array $args
    *   The field arguments array.
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
+   * @param ResolveContext $context
    *   The resolve context.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
    * @return null|string
@@ -137,12 +138,12 @@ class EntityQuery extends FieldPluginBase implements ContainerFactoryPluginInter
    *   The parent entity type.
    * @param array $args
    *   The field arguments array.
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
+   * @param ResolveContext $context
    *   The resolve context.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface|null
+   * @return QueryInterface|null
    *   The entity query object.
    */
   protected function getQuery($value, array $args, ResolveContext $context, ResolveInfo $info) {
@@ -174,12 +175,12 @@ class EntityQuery extends FieldPluginBase implements ContainerFactoryPluginInter
    *   The parent entity type.
    * @param array $args
    *   The field arguments array.
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
+   * @param ResolveContext $context
    *   The resolve context.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface|null
+   * @return QueryInterface|null
    *   The entity query object.
    */
   protected function getBaseQuery($value, array $args, ResolveContext $context, ResolveInfo $info) {
@@ -201,9 +202,9 @@ class EntityQuery extends FieldPluginBase implements ContainerFactoryPluginInter
    *   The parent value.
    * @param array $args
    *   The field arguments array.
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
+   * @param ResolveContext $context
    *   The resolve context.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
    * @return mixed
@@ -221,12 +222,12 @@ class EntityQuery extends FieldPluginBase implements ContainerFactoryPluginInter
   /**
    * Apply the specified revision filtering mode to the query.
    *
-   * @param \Drupal\Core\Entity\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   The entity query object.
    * @param mixed $mode
    *   The revision query mode.
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface
+   * @return QueryInterface
    *   The entity query object.
    */
   protected function applyRevisionsMode(QueryInterface $query, $mode) {
@@ -247,12 +248,12 @@ class EntityQuery extends FieldPluginBase implements ContainerFactoryPluginInter
   /**
    * Apply the specified sort directives to the query.
    *
-   * @param \Drupal\Core\Entity\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   The entity query object.
    * @param mixed $sort
    *   The sort definitions from the field arguments.
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface
+   * @return QueryInterface
    *   The entity query object.
    */
   protected function applySort(QueryInterface $query, $sort) {
@@ -273,12 +274,12 @@ class EntityQuery extends FieldPluginBase implements ContainerFactoryPluginInter
    * Recursively picks up all filters and aggregates them into condition groups
    * according to the nested structure of the filter argument.
    *
-   * @param \Drupal\Core\Entity\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   The entity query object.
    * @param mixed $filter
    *   The filter definitions from the field arguments.
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface
+   * @return QueryInterface
    *   The entity query object.
    */
   protected function applyFilter(QueryInterface $query, $filter) {
@@ -296,15 +297,15 @@ class EntityQuery extends FieldPluginBase implements ContainerFactoryPluginInter
   /**
    * Recursively builds the filter condition groups.
    *
-   * @param \Drupal\Core\Entity\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   The entity query object.
    * @param array $filter
    *   The filter definitions from the field arguments.
    *
-   * @return \Drupal\Core\Entity\Query\ConditionInterface
+   * @return ConditionInterface
    *   The generated condition group according to the given filter definitions.
    *
-   * @throws \GraphQL\Error\Error
+   * @throws Error
    *   If the given operator and value for a filter are invalid.
    */
   protected function buildFilterConditions(QueryInterface $query, array $filter) {
diff --git a/modules/graphql_core/src/Plugin/GraphQL/Fields/EntityQuery/EntityQueryEntities.php b/modules/graphql_core/src/Plugin/GraphQL/Fields/EntityQuery/EntityQueryEntities.php
index 6c6bb85..fb8c62f 100644
--- a/modules/graphql_core/src/Plugin/GraphQL/Fields/EntityQuery/EntityQueryEntities.php
+++ b/modules/graphql_core/src/Plugin/GraphQL/Fields/EntityQuery/EntityQueryEntities.php
@@ -38,21 +38,21 @@ class EntityQueryEntities extends FieldPluginBase implements ContainerFactoryPlu
   /**
    * The entity buffer service.
    *
-   * @var \Drupal\graphql\GraphQL\Buffers\EntityBuffer
+   * @var EntityBuffer
    */
   protected $entityBuffer;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
@@ -79,11 +79,11 @@ class EntityQueryEntities extends FieldPluginBase implements ContainerFactoryPlu
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity repository service.
-   * @param \Drupal\graphql\GraphQL\Buffers\EntityBuffer $entityBuffer
+   * @param EntityBuffer $entityBuffer
    *   The entity buffer service.
    */
   public function __construct(
@@ -136,9 +136,9 @@ class EntityQueryEntities extends FieldPluginBase implements ContainerFactoryPlu
    *   The query context.
    * @param array $args
    *   The field arguments array.
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
+   * @param ResolveContext $context
    *   The resolve context.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
    * @return \Closure
@@ -162,9 +162,9 @@ class EntityQueryEntities extends FieldPluginBase implements ContainerFactoryPlu
    *   The query context.
    * @param array $args
    *   The field arguments array.
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
+   * @param ResolveContext $context
    *   The resolve context.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
    * @return \Generator
@@ -188,9 +188,9 @@ class EntityQueryEntities extends FieldPluginBase implements ContainerFactoryPlu
    *   The query context.
    * @param array $args
    *   The field arguments array.
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
+   * @param ResolveContext $context
    *   The resolve context.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
    * @return \Generator
@@ -199,7 +199,7 @@ class EntityQueryEntities extends FieldPluginBase implements ContainerFactoryPlu
   protected function resolveEntities(array $entities, $metadata, array $args, ResolveContext $context, ResolveInfo $info) {
     $language = $this->negotiateLanguage($metadata, $args, $context, $info);
 
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     foreach ($entities as $entity) {
       // Translate the entity if it is translatable and a language was given.
       if ($language && $entity instanceof TranslatableInterface && $entity->isTranslatable()) {
@@ -225,9 +225,9 @@ class EntityQueryEntities extends FieldPluginBase implements ContainerFactoryPlu
    *   The query context.
    * @param array $args
    *   The field arguments array.
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
+   * @param ResolveContext $context
    *   The resolve context.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
    * @return string|null
diff --git a/modules/graphql_core/src/Plugin/GraphQL/Fields/File/FileUrl.php b/modules/graphql_core/src/Plugin/GraphQL/Fields/File/FileUrl.php
index 9702e99..7dc08ab 100644
--- a/modules/graphql_core/src/Plugin/GraphQL/Fields/File/FileUrl.php
+++ b/modules/graphql_core/src/Plugin/GraphQL/Fields/File/FileUrl.php
@@ -25,7 +25,7 @@ class FileUrl extends FieldPluginBase {
    */
   public function resolveValues($value, array $args, ResolveContext $context, ResolveInfo $info) {
     if ($value instanceof FileInterface) {
-      yield file_create_url($value->getFileUri());
+      yield \Drupal::service('file_url_generator')->generateAbsoluteString($value->getFileUri());
     }
   }
 
diff --git a/modules/graphql_core/src/Plugin/GraphQL/Fields/LanguageSwitch/LanguageSwitchLinkActive.php b/modules/graphql_core/src/Plugin/GraphQL/Fields/LanguageSwitch/LanguageSwitchLinkActive.php
index a10ae33..e65fda6 100644
--- a/modules/graphql_core/src/Plugin/GraphQL/Fields/LanguageSwitch/LanguageSwitchLinkActive.php
+++ b/modules/graphql_core/src/Plugin/GraphQL/Fields/LanguageSwitch/LanguageSwitchLinkActive.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql_core\Plugin\GraphQL\Fields\LanguageSwitch;
 
+use Drupal\Core\Language\LanguageInterface;
 use Drupal\graphql\GraphQL\Execution\ResolveContext;
 use Drupal\graphql\Plugin\GraphQL\Fields\FieldPluginBase;
 use GraphQL\Type\Definition\ResolveInfo;
@@ -21,9 +22,9 @@ class LanguageSwitchLinkActive extends FieldPluginBase {
    * {@inheritdoc}
    */
   protected function resolveValues($value, array $args, ResolveContext $context, ResolveInfo $info) {
-    /** @var \Drupal\Core\Language\LanguageInterface $context */
+    /** @var LanguageInterface $context */
     $context = $value['context'];
-    /** @var \Drupal\Core\Language\LanguageInterface $language */
+    /** @var LanguageInterface $language */
     $language = $value['link']['language'];
 
     // Check if the link's language code matches the language from the current
diff --git a/modules/graphql_core/src/Plugin/GraphQL/Fields/LanguageSwitch/LanguageSwitchLinkLanguage.php b/modules/graphql_core/src/Plugin/GraphQL/Fields/LanguageSwitch/LanguageSwitchLinkLanguage.php
index 773d5dc..0365347 100644
--- a/modules/graphql_core/src/Plugin/GraphQL/Fields/LanguageSwitch/LanguageSwitchLinkLanguage.php
+++ b/modules/graphql_core/src/Plugin/GraphQL/Fields/LanguageSwitch/LanguageSwitchLinkLanguage.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql_core\Plugin\GraphQL\Fields\LanguageSwitch;
 
+use Drupal\Core\Language\LanguageInterface;
 use Drupal\graphql\GraphQL\Execution\ResolveContext;
 use Drupal\graphql\Plugin\GraphQL\Fields\FieldPluginBase;
 use GraphQL\Type\Definition\ResolveInfo;
@@ -21,7 +22,7 @@ class LanguageSwitchLinkLanguage extends FieldPluginBase {
    * {@inheritdoc}
    */
   protected function resolveValues($value, array $args, ResolveContext $context, ResolveInfo $info) {
-    /** @var \Drupal\Core\Language\LanguageInterface $language */
+    /** @var LanguageInterface $language */
     $language = $value['link']['language'];
     yield $language;
   }
diff --git a/modules/graphql_core/src/Plugin/GraphQL/Fields/LanguageSwitch/LanguageSwitchLinkUrl.php b/modules/graphql_core/src/Plugin/GraphQL/Fields/LanguageSwitch/LanguageSwitchLinkUrl.php
index 048cf7f..217844f 100644
--- a/modules/graphql_core/src/Plugin/GraphQL/Fields/LanguageSwitch/LanguageSwitchLinkUrl.php
+++ b/modules/graphql_core/src/Plugin/GraphQL/Fields/LanguageSwitch/LanguageSwitchLinkUrl.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql_core\Plugin\GraphQL\Fields\LanguageSwitch;
 
+use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Url;
 use Drupal\graphql\GraphQL\Execution\ResolveContext;
 use Drupal\graphql\Plugin\GraphQL\Fields\FieldPluginBase;
@@ -22,10 +23,10 @@ class LanguageSwitchLinkUrl extends FieldPluginBase {
    * {@inheritdoc}
    */
   protected function resolveValues($value, array $args, ResolveContext $context, ResolveInfo $info) {
-    /** @var \Drupal\Core\Language\LanguageInterface $language */
+    /** @var LanguageInterface $language */
     $language = $value['link']['language'];
 
-    /** @var \Drupal\Core\Url $url */
+    /** @var Url $url */
     $url = $value['link']['url'];
     $url = Url::fromRoute($url->getRouteName(), $url->getRouteParameters(), [
       'language' => $language,
diff --git a/modules/graphql_core/src/Plugin/GraphQL/Fields/LanguageSwitch/LanguageSwitchLinks.php b/modules/graphql_core/src/Plugin/GraphQL/Fields/LanguageSwitch/LanguageSwitchLinks.php
index d8d4316..f75956a 100644
--- a/modules/graphql_core/src/Plugin/GraphQL/Fields/LanguageSwitch/LanguageSwitchLinks.php
+++ b/modules/graphql_core/src/Plugin/GraphQL/Fields/LanguageSwitch/LanguageSwitchLinks.php
@@ -35,21 +35,21 @@ class LanguageSwitchLinks extends FieldPluginBase implements ContainerFactoryPlu
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The subrequest buffer service.
    *
-   * @var \Drupal\graphql\GraphQL\Buffers\SubRequestBuffer
+   * @var SubRequestBuffer
    */
   protected $subRequestBuffer;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
diff --git a/modules/graphql_core/src/Plugin/GraphQL/Fields/Languages/AvailableLanguages.php b/modules/graphql_core/src/Plugin/GraphQL/Fields/Languages/AvailableLanguages.php
index 86c1a43..72f8be3 100644
--- a/modules/graphql_core/src/Plugin/GraphQL/Fields/Languages/AvailableLanguages.php
+++ b/modules/graphql_core/src/Plugin/GraphQL/Fields/Languages/AvailableLanguages.php
@@ -25,7 +25,7 @@ class AvailableLanguages extends FieldPluginBase implements ContainerFactoryPlug
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
@@ -50,7 +50,7 @@ class AvailableLanguages extends FieldPluginBase implements ContainerFactoryPlug
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager service.
    */
   public function __construct(array $configuration, $pluginId, $pluginDefinition, LanguageManagerInterface $languageManager) {
diff --git a/modules/graphql_core/src/Plugin/GraphQL/Fields/Menu/MenuByName.php b/modules/graphql_core/src/Plugin/GraphQL/Fields/Menu/MenuByName.php
index c9e143a..f097cfd 100644
--- a/modules/graphql_core/src/Plugin/GraphQL/Fields/Menu/MenuByName.php
+++ b/modules/graphql_core/src/Plugin/GraphQL/Fields/Menu/MenuByName.php
@@ -35,7 +35,7 @@ class MenuByName extends FieldPluginBase implements ContainerFactoryPluginInterf
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -55,7 +55,7 @@ class MenuByName extends FieldPluginBase implements ContainerFactoryPluginInterf
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
    */
   public function __construct(array $configuration, $pluginId, $pluginDefinition, EntityTypeManagerInterface $entityTypeManager) {
diff --git a/modules/graphql_core/src/Plugin/GraphQL/Fields/Menu/MenuLinks.php b/modules/graphql_core/src/Plugin/GraphQL/Fields/Menu/MenuLinks.php
index 77721ba..20e5df4 100644
--- a/modules/graphql_core/src/Plugin/GraphQL/Fields/Menu/MenuLinks.php
+++ b/modules/graphql_core/src/Plugin/GraphQL/Fields/Menu/MenuLinks.php
@@ -32,7 +32,7 @@ class MenuLinks extends FieldPluginBase implements ContainerFactoryPluginInterfa
   /**
    * The menu link tree.
    *
-   * @var \Drupal\Core\Menu\MenuLinkTreeInterface
+   * @var MenuLinkTreeInterface
    */
   protected $menuLinkTree;
 
@@ -52,7 +52,7 @@ class MenuLinks extends FieldPluginBase implements ContainerFactoryPluginInterfa
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Menu\MenuLinkTreeInterface $menuLinkTree
+   * @param MenuLinkTreeInterface $menuLinkTree
    *   The menu link tree service.
    */
   public function __construct(array $configuration, $pluginId, $pluginDefinition, MenuLinkTreeInterface $menuLinkTree) {
diff --git a/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/ExternalUrl/ExternalRequest.php b/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/ExternalUrl/ExternalRequest.php
index f8cc360..24ee935 100644
--- a/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/ExternalUrl/ExternalRequest.php
+++ b/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/ExternalUrl/ExternalRequest.php
@@ -25,7 +25,7 @@ class ExternalRequest extends FieldPluginBase implements ContainerFactoryPluginI
   use DependencySerializationTrait;
 
   /**
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;
 
@@ -55,7 +55,7 @@ class ExternalRequest extends FieldPluginBase implements ContainerFactoryPluginI
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition array.
-   * @param \GuzzleHttp\ClientInterface $httpClient
+   * @param ClientInterface $httpClient
    *   The http client service.
    */
   public function __construct(
diff --git a/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/InternalUrl/Alias.php b/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/InternalUrl/Alias.php
index 7fb3c45..d0836ae 100644
--- a/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/InternalUrl/Alias.php
+++ b/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/InternalUrl/Alias.php
@@ -29,7 +29,7 @@ class Alias extends FieldPluginBase implements ContainerFactoryPluginInterface {
   /**
    * Instance of an alias manager.
    *
-   * @var \Drupal\path_alias\AliasManagerInterface
+   * @var AliasManagerInterface
    */
   protected $aliasManager;
 
@@ -54,7 +54,7 @@ class Alias extends FieldPluginBase implements ContainerFactoryPluginInterface {
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\path_alias\AliasManagerInterface $aliasManager
+   * @param AliasManagerInterface $aliasManager
    *   The alias manager service
    */
   public function __construct(
diff --git a/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/InternalUrl/InternalRequest.php b/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/InternalUrl/InternalRequest.php
index e8f03d4..921021a 100644
--- a/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/InternalUrl/InternalRequest.php
+++ b/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/InternalUrl/InternalRequest.php
@@ -29,21 +29,21 @@ class InternalRequest extends FieldPluginBase implements ContainerFactoryPluginI
   /**
    * The http kernel service.
    *
-   * @var \Symfony\Component\HttpKernel\HttpKernelInterface
+   * @var HttpKernelInterface
    */
   protected $httpKernel;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The subrequest buffer service.
    *
-   * @var \Drupal\graphql\GraphQL\Buffers\SubRequestBuffer
+   * @var SubRequestBuffer
    */
   protected $subRequestBuffer;
 
@@ -70,11 +70,11 @@ class InternalRequest extends FieldPluginBase implements ContainerFactoryPluginI
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\graphql\GraphQL\Buffers\SubRequestBuffer $subRequestBuffer
+   * @param SubRequestBuffer $subRequestBuffer
    *   The sub-request buffer service.
-   * @param \Symfony\Component\HttpKernel\HttpKernelInterface $httpKernel
+   * @param HttpKernelInterface $httpKernel
    *   The http kernel.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
    */
   public function __construct(
@@ -115,7 +115,7 @@ class InternalRequest extends FieldPluginBase implements ContainerFactoryPluginI
       });
 
       return function ($value, array $args, ResolveContext $context, ResolveInfo $info) use ($resolve) {
-        /** @var \Drupal\graphql\GraphQL\Cache\CacheableValue $response */
+        /** @var CacheableValue $response */
         $response = $resolve();
         yield new CacheableValue($response->getValue(), [$response]);
       };
diff --git a/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/Route.php b/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/Route.php
index b122419..55b06dd 100644
--- a/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/Route.php
+++ b/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/Route.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\graphql_core\Plugin\GraphQL\Fields\Routing;
 
+use Drupal\language\LanguageNegotiator;
+use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Path\PathValidatorInterface;
 use Drupal\Core\PathProcessor\InboundPathProcessorInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -31,21 +33,21 @@ class Route extends FieldPluginBase implements ContainerFactoryPluginInterface {
   /**
    * The path validator service.
    *
-   * @var \Drupal\Core\Path\PathValidatorInterface
+   * @var PathValidatorInterface
    */
   protected $pathValidator;
 
   /**
    * The language negotiator service.
    *
-   * @var \Drupal\language\LanguageNegotiator
+   * @var LanguageNegotiator
    */
   protected $languageNegotiator;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
@@ -84,11 +86,11 @@ class Route extends FieldPluginBase implements ContainerFactoryPluginInterface {
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Path\PathValidatorInterface $pathValidator
+   * @param PathValidatorInterface $pathValidator
    *   The path validator service.
-   * @param \Drupal\language\LanguageNegotiator|null $languageNegotiator
+   * @param LanguageNegotiator|null $languageNegotiator
    *   The language negotiator.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
    * @param \Drupal\redirect\RedirectRepository $redirectRepository
    *   The redirect repository, if redirect module is active.
diff --git a/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/RouteEntity.php b/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/RouteEntity.php
index 970b1b7..fde5021 100644
--- a/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/RouteEntity.php
+++ b/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/RouteEntity.php
@@ -39,21 +39,21 @@ class RouteEntity extends FieldPluginBase implements ContainerFactoryPluginInter
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
@@ -80,11 +80,11 @@ class RouteEntity extends FieldPluginBase implements ContainerFactoryPluginInter
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity repository service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager service.
    */
   public function __construct(
@@ -123,13 +123,13 @@ class RouteEntity extends FieldPluginBase implements ContainerFactoryPluginInter
   }
 
   /**
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to resolve.
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   The url of the entity to resolve.
    * @param array $args
    *   The field arguments array.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
    * @return \Generator
@@ -147,13 +147,13 @@ class RouteEntity extends FieldPluginBase implements ContainerFactoryPluginInter
   /**
    * Resolves the entity translation from the given url context.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to resolve.
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   The url of the entity to resolve.
    * @param array $args
    *   The field arguments array.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
    * @return \Iterator
@@ -170,11 +170,11 @@ class RouteEntity extends FieldPluginBase implements ContainerFactoryPluginInter
   /**
    * m
    *
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   The url of the entity to resolve.
    * @param array $args
    *   The field arguments array.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
    * @return \Generator
diff --git a/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/Translate.php b/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/Translate.php
index 16b55f0..3f9e089 100644
--- a/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/Translate.php
+++ b/modules/graphql_core/src/Plugin/GraphQL/Fields/Routing/Translate.php
@@ -31,7 +31,7 @@ class Translate extends FieldPluginBase implements ContainerFactoryPluginInterfa
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
@@ -56,7 +56,7 @@ class Translate extends FieldPluginBase implements ContainerFactoryPluginInterfa
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager service.
    */
   public function __construct(
diff --git a/modules/graphql_core/src/Plugin/GraphQL/Mutations/Entity/CreateEntityBase.php b/modules/graphql_core/src/Plugin/GraphQL/Mutations/Entity/CreateEntityBase.php
index 1165787..84d7443 100644
--- a/modules/graphql_core/src/Plugin/GraphQL/Mutations/Entity/CreateEntityBase.php
+++ b/modules/graphql_core/src/Plugin/GraphQL/Mutations/Entity/CreateEntityBase.php
@@ -23,14 +23,14 @@ abstract class CreateEntityBase extends MutationPluginBase implements ContainerF
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -56,9 +56,9 @@ abstract class CreateEntityBase extends MutationPluginBase implements ContainerF
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    */
   public function __construct(array $configuration, $pluginId, $pluginDefinition, EntityTypeManagerInterface $entityTypeManager, RendererInterface $renderer) {
@@ -108,9 +108,9 @@ abstract class CreateEntityBase extends MutationPluginBase implements ContainerF
    *   The parent value.
    * @param array $args
    *   The entity values provided through the resolver args.
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
+   * @param ResolveContext $context
    *   The resolve context.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
    * @return array
@@ -125,11 +125,11 @@ abstract class CreateEntityBase extends MutationPluginBase implements ContainerF
    * transport possible error messages and constraint violations after applying
    * some access checks and input validation.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The created entity.
    * @param array $args
    *   The arguments array.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
    * @return mixed
diff --git a/modules/graphql_core/src/Plugin/GraphQL/Mutations/Entity/DeleteEntityBase.php b/modules/graphql_core/src/Plugin/GraphQL/Mutations/Entity/DeleteEntityBase.php
index 3689424..8e4249b 100644
--- a/modules/graphql_core/src/Plugin/GraphQL/Mutations/Entity/DeleteEntityBase.php
+++ b/modules/graphql_core/src/Plugin/GraphQL/Mutations/Entity/DeleteEntityBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql_core\Plugin\GraphQL\Mutations\Entity;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -22,14 +23,14 @@ abstract class DeleteEntityBase extends MutationPluginBase implements ContainerF
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -55,9 +56,9 @@ abstract class DeleteEntityBase extends MutationPluginBase implements ContainerF
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    */
   public function __construct(array $configuration, $pluginId, $pluginDefinition, EntityTypeManagerInterface $entityTypeManager, RendererInterface $renderer) {
@@ -79,7 +80,7 @@ abstract class DeleteEntityBase extends MutationPluginBase implements ContainerF
       $entityTypeId = $this->pluginDefinition['entity_type'];
       $storage = $this->entityTypeManager->getStorage($entityTypeId);
 
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       if (!$entity = $storage->load($args['id'])) {
         return new EntityCrudOutputWrapper(NULL, NULL, [
           $this->t('The requested entity could not be loaded.'),
diff --git a/modules/graphql_core/src/Plugin/GraphQL/Mutations/Entity/UpdateEntityBase.php b/modules/graphql_core/src/Plugin/GraphQL/Mutations/Entity/UpdateEntityBase.php
index 9a85082..c257c52 100644
--- a/modules/graphql_core/src/Plugin/GraphQL/Mutations/Entity/UpdateEntityBase.php
+++ b/modules/graphql_core/src/Plugin/GraphQL/Mutations/Entity/UpdateEntityBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql_core\Plugin\GraphQL\Mutations\Entity;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -21,14 +22,14 @@ abstract class UpdateEntityBase extends MutationPluginBase implements ContainerF
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -54,9 +55,9 @@ abstract class UpdateEntityBase extends MutationPluginBase implements ContainerF
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    */
   public function __construct(array $configuration, $pluginId, $pluginDefinition, EntityTypeManagerInterface $entityTypeManager, RendererInterface $renderer) {
@@ -79,7 +80,7 @@ abstract class UpdateEntityBase extends MutationPluginBase implements ContainerF
       $bundleName = $this->pluginDefinition['entity_bundle'];
       $storage = $this->entityTypeManager->getStorage($entityTypeId);
 
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       if (!$entity = $storage->load($args['id'])) {
         return new EntityCrudOutputWrapper(NULL, NULL, [
           $this->t('The requested @bundle could not be loaded.', ['@bundle' => $bundleName]),
@@ -135,9 +136,9 @@ abstract class UpdateEntityBase extends MutationPluginBase implements ContainerF
    *   The parent value.
    * @param array $args
    *   The entity values provided through the resolver args.
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
+   * @param ResolveContext $context
    *   The resolve context.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
    * @return array
diff --git a/modules/graphql_core/tests/modules/graphql_context_test/src/ContextProvider/RouteNameContext.php b/modules/graphql_core/tests/modules/graphql_context_test/src/ContextProvider/RouteNameContext.php
index 191e816..162a0dd 100644
--- a/modules/graphql_core/tests/modules/graphql_context_test/src/ContextProvider/RouteNameContext.php
+++ b/modules/graphql_core/tests/modules/graphql_context_test/src/ContextProvider/RouteNameContext.php
@@ -17,14 +17,14 @@ class RouteNameContext implements ContextProviderInterface {
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * The context definition.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextDefinition
+   * @var ContextDefinition
    */
   protected $contextDefinition;
 
diff --git a/modules/graphql_core/tests/src/Kernel/Blocks/BlockTest.php b/modules/graphql_core/tests/src/Kernel/Blocks/BlockTest.php
index b84c9e6..e03a142 100644
--- a/modules/graphql_core/tests/src/Kernel/Blocks/BlockTest.php
+++ b/modules/graphql_core/tests/src/Kernel/Blocks/BlockTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\graphql_core\Kernel\Blocks;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\Core\Extension\ThemeInstallerInterface;
 use Drupal\block_content\Entity\BlockContent;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Tests\block\Traits\BlockCreationTrait;
@@ -13,6 +15,7 @@ use Drupal\Tests\graphql_core\Kernel\GraphQLCoreTestBase;
  * @group graphql_core
  */
 class BlockTest extends GraphQLCoreTestBase {
+  use ProphecyTrait;
   use BlockCreationTrait;
 
   /**
@@ -33,10 +36,10 @@ class BlockTest extends GraphQLCoreTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
-    /** @var \Drupal\Core\Extension\ThemeInstallerInterface $themeInstaller */
+    /** @var ThemeInstallerInterface $themeInstaller */
     $themeInstaller = $this->container->get('theme_installer');
     $themeInstaller->install(['stark']);
 
diff --git a/modules/graphql_core/tests/src/Kernel/Breadcrumbs/BreadcrumbsTest.php b/modules/graphql_core/tests/src/Kernel/Breadcrumbs/BreadcrumbsTest.php
index dae3064..bc2f47b 100644
--- a/modules/graphql_core/tests/src/Kernel/Breadcrumbs/BreadcrumbsTest.php
+++ b/modules/graphql_core/tests/src/Kernel/Breadcrumbs/BreadcrumbsTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\graphql_core\Kernel\Breadcrumbs;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\Core\Routing\RouteMatch;
 use Drupal\Core\Breadcrumb\Breadcrumb;
 use Drupal\Core\Link;
 use Drupal\Core\Url;
@@ -15,6 +17,7 @@ use Prophecy\Argument;
  */
 class BreadcrumbsTest extends GraphQLCoreTestBase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ -25,13 +28,13 @@ class BreadcrumbsTest extends GraphQLCoreTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $breadcrumbManager = $this->prophesize('Drupal\Core\Breadcrumb\BreadcrumbManager');
     $breadcrumbManager->build(Argument::any())
       ->will(function ($args) {
-        /** @var \Drupal\Core\Routing\RouteMatch $routeMatch */
+        /** @var RouteMatch $routeMatch */
         $routeMatch = $args[0];
         $breadcrumb = new Breadcrumb();
         if ($routeMatch->getRouteName() == 'graphql_breadcrumbs_test.test') {
diff --git a/modules/graphql_core/tests/src/Kernel/Context/NodeContextTest.php b/modules/graphql_core/tests/src/Kernel/Context/NodeContextTest.php
index d20ee5b..33450b0 100644
--- a/modules/graphql_core/tests/src/Kernel/Context/NodeContextTest.php
+++ b/modules/graphql_core/tests/src/Kernel/Context/NodeContextTest.php
@@ -16,6 +16,7 @@ class NodeContextTest extends GraphQLContentTestBase {
    * Regression test for unhandled logic exceptions.
    *
    * Leaking cache metadata.
+   * @doesNotPerformAssertions
    */
   public function testNodeContext() {
     $nodeId = Node::create([
diff --git a/modules/graphql_core/tests/src/Kernel/Entity/BundleLessEntityTest.php b/modules/graphql_core/tests/src/Kernel/Entity/BundleLessEntityTest.php
index b29fa68..df0cd06 100644
--- a/modules/graphql_core/tests/src/Kernel/Entity/BundleLessEntityTest.php
+++ b/modules/graphql_core/tests/src/Kernel/Entity/BundleLessEntityTest.php
@@ -18,7 +18,7 @@ class BundleLessEntityTest extends GraphQLContentTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     FieldStorageConfig::create([
       'field_name' => 'field_test',
diff --git a/modules/graphql_core/tests/src/Kernel/Entity/EntityByIdTest.php b/modules/graphql_core/tests/src/Kernel/Entity/EntityByIdTest.php
index ab0f6b5..05a8d51 100644
--- a/modules/graphql_core/tests/src/Kernel/Entity/EntityByIdTest.php
+++ b/modules/graphql_core/tests/src/Kernel/Entity/EntityByIdTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\graphql_core\Kernel\Entity;
 
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal\Tests\graphql_core\Kernel\GraphQLContentTestBase;
 
 /**
@@ -28,10 +29,10 @@ class EntityByIdTest extends GraphQLContentTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $languageStorage */
+    /** @var ConfigEntityStorageInterface $languageStorage */
     $languageStorage = $this->container->get('entity_type.manager')->getStorage('configurable_language');
 
     $language = $languageStorage->create([
diff --git a/modules/graphql_core/tests/src/Kernel/Entity/EntityFieldValueTest.php b/modules/graphql_core/tests/src/Kernel/Entity/EntityFieldValueTest.php
index afd87d0..0c529f1 100644
--- a/modules/graphql_core/tests/src/Kernel/Entity/EntityFieldValueTest.php
+++ b/modules/graphql_core/tests/src/Kernel/Entity/EntityFieldValueTest.php
@@ -38,7 +38,7 @@ class EntityFieldValueTest extends GraphQLContentTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
   }
 
@@ -232,10 +232,10 @@ GQL;
     $node = $this->createNode($values + $actualFieldValues);
 
     // Workaround for public file urls.
-    $expectedFieldValues['fieldFile'][0]['entity']['url'] = file_create_url($this->testFile->getFileUri());
-    $expectedFieldValues['fieldFile'][1]['entity']['url'] = file_create_url($this->testImage->getFileUri());
-    $expectedFieldValues['fieldImage'][0]['entity']['url'] = file_create_url($this->testFile->getFileUri());
-    $expectedFieldValues['fieldImage'][1]['entity']['url'] = file_create_url($this->testImage->getFileUri());
+    $expectedFieldValues['fieldFile'][0]['entity']['url'] = \Drupal::service('file_url_generator')->generateAbsoluteString($this->testFile->getFileUri());
+    $expectedFieldValues['fieldFile'][1]['entity']['url'] = \Drupal::service('file_url_generator')->generateAbsoluteString($this->testImage->getFileUri());
+    $expectedFieldValues['fieldImage'][0]['entity']['url'] = \Drupal::service('file_url_generator')->generateAbsoluteString($this->testFile->getFileUri());
+    $expectedFieldValues['fieldImage'][1]['entity']['url'] = \Drupal::service('file_url_generator')->generateAbsoluteString($this->testImage->getFileUri());
 
     $metadata = $this->defaultCacheMetaData();
     $metadata->addCacheTags([
diff --git a/modules/graphql_core/tests/src/Kernel/Entity/EntityRevisionsTest.php b/modules/graphql_core/tests/src/Kernel/Entity/EntityRevisionsTest.php
index a74e7dd..8b6ccb7 100644
--- a/modules/graphql_core/tests/src/Kernel/Entity/EntityRevisionsTest.php
+++ b/modules/graphql_core/tests/src/Kernel/Entity/EntityRevisionsTest.php
@@ -16,6 +16,7 @@ class EntityRevisionsTest extends GraphQLContentTestBase {
    * Regression test for unhandled logic exceptions.
    *
    * Leaking cache metadata.
+   * @doesNotPerformAssertions
    */
   public function testNodeContext() {
     $node = Node::create([
diff --git a/modules/graphql_core/tests/src/Kernel/EntityMutation/EntityMutationTest.php b/modules/graphql_core/tests/src/Kernel/EntityMutation/EntityMutationTest.php
index e8ff2e6..c6c71a7 100644
--- a/modules/graphql_core/tests/src/Kernel/EntityMutation/EntityMutationTest.php
+++ b/modules/graphql_core/tests/src/Kernel/EntityMutation/EntityMutationTest.php
@@ -30,7 +30,7 @@ class EntityMutationTest extends GraphQLContentTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->mockInputType('node_input', [
       'name' => 'NodeInput',
diff --git a/modules/graphql_core/tests/src/Kernel/EntityQuery/EntityQueryTest.php b/modules/graphql_core/tests/src/Kernel/EntityQuery/EntityQueryTest.php
index 0566204..46ab056 100644
--- a/modules/graphql_core/tests/src/Kernel/EntityQuery/EntityQueryTest.php
+++ b/modules/graphql_core/tests/src/Kernel/EntityQuery/EntityQueryTest.php
@@ -15,7 +15,7 @@ class EntityQueryTest extends GraphQLContentTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->createContentType(['type' => 'a']);
     $this->createContentType(['type' => 'b']);
diff --git a/modules/graphql_core/tests/src/Kernel/GraphQLContentTestBase.php b/modules/graphql_core/tests/src/Kernel/GraphQLContentTestBase.php
index d1df9a0..4efc662 100644
--- a/modules/graphql_core/tests/src/Kernel/GraphQLContentTestBase.php
+++ b/modules/graphql_core/tests/src/Kernel/GraphQLContentTestBase.php
@@ -45,7 +45,7 @@ class GraphQLContentTestBase extends GraphQLCoreTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installConfig(['node', 'filter', 'text']);
diff --git a/modules/graphql_core/tests/src/Kernel/GraphQLCoreTestBase.php b/modules/graphql_core/tests/src/Kernel/GraphQLCoreTestBase.php
index b1f359e..e0537ca 100644
--- a/modules/graphql_core/tests/src/Kernel/GraphQLCoreTestBase.php
+++ b/modules/graphql_core/tests/src/Kernel/GraphQLCoreTestBase.php
@@ -21,7 +21,7 @@ class GraphQLCoreTestBase extends GraphQLTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // User entity schema is required for the currentUserContext field.
     $this->installEntitySchema('user');
diff --git a/modules/graphql_core/tests/src/Kernel/Images/ImageFieldTest.php b/modules/graphql_core/tests/src/Kernel/Images/ImageFieldTest.php
index ab81903..ad98dd1 100644
--- a/modules/graphql_core/tests/src/Kernel/Images/ImageFieldTest.php
+++ b/modules/graphql_core/tests/src/Kernel/Images/ImageFieldTest.php
@@ -23,7 +23,7 @@ class ImageFieldTest extends GraphQLContentTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig('image');
     $this->installSchema('file', 'file_usage');
diff --git a/modules/graphql_core/tests/src/Kernel/Languages/LanguageTest.php b/modules/graphql_core/tests/src/Kernel/Languages/LanguageTest.php
index 917a452..fb92fe0 100644
--- a/modules/graphql_core/tests/src/Kernel/Languages/LanguageTest.php
+++ b/modules/graphql_core/tests/src/Kernel/Languages/LanguageTest.php
@@ -22,7 +22,7 @@ class LanguageTest extends GraphQLCoreTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installConfig(['language']);
diff --git a/modules/graphql_core/tests/src/Kernel/Menu/MenuTest.php b/modules/graphql_core/tests/src/Kernel/Menu/MenuTest.php
index 0b7fe83..e73308e 100644
--- a/modules/graphql_core/tests/src/Kernel/Menu/MenuTest.php
+++ b/modules/graphql_core/tests/src/Kernel/Menu/MenuTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\graphql_core\Kernel\Menu;
 
+use Drupal\Core\Menu\MenuLinkManagerInterface;
+use Drupal\Core\Menu\MenuTreeStorageInterface;
+use Drupal\Core\Menu\MenuLinkTreeInterface;
+use Symfony\Component\HttpKernel\HttpKernelInterface;
 use Drupal\Core\Menu\MenuTreeParameters;
 use Drupal\menu_link_content\Entity\MenuLinkContent;
 use Drupal\Tests\graphql_core\Kernel\GraphQLCoreTestBase;
@@ -26,7 +30,7 @@ class MenuTest extends GraphQLCoreTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('menu_link_content');
     $this->installConfig('menu_link_content');
@@ -43,7 +47,7 @@ class MenuTest extends GraphQLCoreTestBase {
 
     $externalLink->save();
 
-    /** @var \Drupal\Core\Menu\MenuLinkManagerInterface $menuLinkManager */
+    /** @var MenuLinkManagerInterface $menuLinkManager */
     $menuLinkManager = $this->container->get('plugin.manager.menu.link');
     $menuLinkManager->rebuild();
   }
@@ -52,16 +56,16 @@ class MenuTest extends GraphQLCoreTestBase {
    * Test if the test setup itself is successful.
    */
   public function testTestSetup() {
-    /** @var \Drupal\Core\Menu\MenuTreeStorageInterface $menuStorage */
+    /** @var MenuTreeStorageInterface $menuStorage */
     $menuStorage = $this->container->get('entity_type.manager')->getStorage('menu');
     $menu = $menuStorage->load('test');
     $this->assertIsObject($menu);
 
-    /** @var \Drupal\Core\Menu\MenuLinkTreeInterface $menuTree */
+    /** @var MenuLinkTreeInterface $menuTree */
     $menuTree = $this->container->get('menu.link_tree');
     $this->assertEquals(count($menuTree->load('test', new MenuTreeParameters())), 3);
 
-    /** @var \Symfony\Component\HttpKernel\HttpKernelInterface $httpKernel */
+    /** @var HttpKernelInterface $httpKernel */
     $httpKernel = $this->container->get('http_kernel');
 
     $this->assertEquals($httpKernel->handle(Request::create('/graphql/test/accessible'))->getStatusCode(), 200);
diff --git a/modules/graphql_core/tests/src/Kernel/Routing/ExternalRequestTest.php b/modules/graphql_core/tests/src/Kernel/Routing/ExternalRequestTest.php
index 538cc17..18cb38c 100644
--- a/modules/graphql_core/tests/src/Kernel/Routing/ExternalRequestTest.php
+++ b/modules/graphql_core/tests/src/Kernel/Routing/ExternalRequestTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\graphql_core\Kernel\Routing;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Tests\graphql_core\Kernel\GraphQLCoreTestBase;
 use GuzzleHttp\ClientInterface;
 use GuzzleHttp\Psr7\Response;
@@ -13,6 +14,7 @@ use GuzzleHttp\Psr7\Response;
  */
 class ExternalRequestTest extends GraphQLCoreTestBase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ -21,7 +23,7 @@ class ExternalRequestTest extends GraphQLCoreTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('user');
   }
diff --git a/modules/graphql_core/tests/src/Kernel/Routing/InternalRequestTest.php b/modules/graphql_core/tests/src/Kernel/Routing/InternalRequestTest.php
index dd2a91f..06b9346 100644
--- a/modules/graphql_core/tests/src/Kernel/Routing/InternalRequestTest.php
+++ b/modules/graphql_core/tests/src/Kernel/Routing/InternalRequestTest.php
@@ -19,7 +19,7 @@ class InternalRequestTest extends GraphQLCoreTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('user');
   }
diff --git a/modules/graphql_core/tests/src/Kernel/Routing/RouteTest.php b/modules/graphql_core/tests/src/Kernel/Routing/RouteTest.php
index e113363..1f46949 100644
--- a/modules/graphql_core/tests/src/Kernel/Routing/RouteTest.php
+++ b/modules/graphql_core/tests/src/Kernel/Routing/RouteTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\graphql_core\Kernel\Routing;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\GeneratedUrl;
 use Drupal\path_alias\AliasManagerInterface;
 use Drupal\Core\Routing\UrlGeneratorInterface;
@@ -15,6 +16,7 @@ use Prophecy\Argument;
  */
 class RouteTest extends GraphQLCoreTestBase {
 
+  use ProphecyTrait;
   public static $modules = [
     'graphql_context_test',
   ];
@@ -22,7 +24,7 @@ class RouteTest extends GraphQLCoreTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $aliasManager = $this->prophesize(AliasManagerInterface::class);
diff --git a/modules/graphql_core/tests/src/Traits/RevisionsTestTrait.php b/modules/graphql_core/tests/src/Traits/RevisionsTestTrait.php
index 827f282..180c258 100644
--- a/modules/graphql_core/tests/src/Traits/RevisionsTestTrait.php
+++ b/modules/graphql_core/tests/src/Traits/RevisionsTestTrait.php
@@ -12,9 +12,9 @@ trait RevisionsTestTrait {
   /**
    * Returns a new, unpublished draft of given node.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *
-   * @return \Drupal\node\NodeInterface
+   * @return NodeInterface
    */
   protected function getNewDraft(NodeInterface $node) {
     $node->setNewRevision();
diff --git a/src/Access/QueryAccessCheck.php b/src/Access/QueryAccessCheck.php
index 4454184..e40adb7 100644
--- a/src/Access/QueryAccessCheck.php
+++ b/src/Access/QueryAccessCheck.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\graphql\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
+use GraphQL\Server\OperationParams;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -12,14 +14,14 @@ class QueryAccessCheck implements AccessInterface {
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * QueryAccessCheck constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
    */
   public function __construct(RequestStack $requestStack) {
@@ -29,10 +31,10 @@ class QueryAccessCheck implements AccessInterface {
   /**
    * Checks access.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $account) {
@@ -42,7 +44,7 @@ class QueryAccessCheck implements AccessInterface {
     }
 
     $request = $this->requestStack->getCurrentRequest();
-    /** @var \GraphQL\Server\OperationParams[] $operations */
+    /** @var OperationParams[] $operations */
     if (!$operations = $request->attributes->get('operations', [])) {
       return AccessResult::forbidden();
     }
diff --git a/src/Annotation/GraphQLAnnotationBase.php b/src/Annotation/GraphQLAnnotationBase.php
index 889125b..8692563 100644
--- a/src/Annotation/GraphQLAnnotationBase.php
+++ b/src/Annotation/GraphQLAnnotationBase.php
@@ -96,7 +96,7 @@ abstract class GraphQLAnnotationBase extends Plugin {
    * @param $values
    *   The plugin annotation values.
    *
-   * @throws \Doctrine\Common\Annotations\AnnotationException
+   * @throws AnnotationException
    *   In case of missing required annotation values.
    */
   public function __construct($values) {
diff --git a/src/Annotation/GraphQLSchema.php b/src/Annotation/GraphQLSchema.php
index e0ac19c..abef500 100644
--- a/src/Annotation/GraphQLSchema.php
+++ b/src/Annotation/GraphQLSchema.php
@@ -41,7 +41,7 @@ class GraphQLSchema extends Plugin {
    * @param mixed $values
    *   The plugin annotation values.
    *
-   * @throws \Doctrine\Common\Annotations\AnnotationException
+   * @throws AnnotationException
    *   In case of missing required values.
    */
   public function __construct($values) {
diff --git a/src/Config/GraphQLConfigOverrides.php b/src/Config/GraphQLConfigOverrides.php
index 8f4d4c1..bbc503f 100644
--- a/src/Config/GraphQLConfigOverrides.php
+++ b/src/Config/GraphQLConfigOverrides.php
@@ -17,23 +17,23 @@ class GraphQLConfigOverrides implements ConfigFactoryOverrideInterface {
   /**
    * The config storage service.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $baseStorage;
 
   /**
    * The negotiator manager service.
    *
-   * @var \Drupal\language\LanguageNegotiationMethodManager|null
+   * @var LanguageNegotiationMethodManager|null
    */
   protected $negotiatorManager;
 
   /**
    * GraphQLConfigOverrides constructor.
    *
-   * @param \Drupal\Core\Config\StorageInterface $storage
+   * @param StorageInterface $storage
    *   The config storage service.
-   * @param \Drupal\language\LanguageNegotiationMethodManager|null $negotiatorManager
+   * @param LanguageNegotiationMethodManager|null $negotiatorManager
    */
   public function __construct(StorageInterface $storage, LanguageNegotiationMethodManager $negotiatorManager = NULL) {
     $this->baseStorage = $storage;
diff --git a/src/Controller/ExplorerController.php b/src/Controller/ExplorerController.php
index 277d6d0..bb2031a 100644
--- a/src/Controller/ExplorerController.php
+++ b/src/Controller/ExplorerController.php
@@ -20,21 +20,21 @@ class ExplorerController implements ContainerInjectionInterface {
   /**
    * The URL generator service.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;
 
   /**
    * The introspection service.
    *
-   * @var \Drupal\graphql\GraphQL\Utility\Introspection
+   * @var Introspection
    */
   protected $introspection;
 
   /**
    * The schema plugin manager.
    *
-   * @var \Drupal\graphql\Plugin\SchemaPluginManager
+   * @var SchemaPluginManager
    */
   protected $pluginManager;
 
@@ -52,11 +52,11 @@ class ExplorerController implements ContainerInjectionInterface {
   /**
    * ExplorerController constructor.
    *
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $urlGenerator
+   * @param UrlGeneratorInterface $urlGenerator
    *   The url generator service.
-   * @param \Drupal\graphql\GraphQL\Utility\Introspection $introspection
+   * @param Introspection $introspection
    *   The introspection service.
-   * @param \Drupal\graphql\Plugin\SchemaPluginManager $pluginManager
+   * @param SchemaPluginManager $pluginManager
    *   The schema plugin manager.
    */
   public function __construct(UrlGeneratorInterface $urlGenerator, Introspection $introspection, SchemaPluginManager $pluginManager) {
@@ -70,7 +70,7 @@ class ExplorerController implements ContainerInjectionInterface {
    *
    * @param string $schema
    *   The name of the schema.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
    * @return array The render array.
diff --git a/src/Controller/QueryMapListBuilder.php b/src/Controller/QueryMapListBuilder.php
index 1c53d9a..17eafd3 100644
--- a/src/Controller/QueryMapListBuilder.php
+++ b/src/Controller/QueryMapListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql\Controller;
 
+use Drupal\field\FieldConfigInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 
@@ -29,7 +30,7 @@ class QueryMapListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function getDefaultOperations(EntityInterface $entity) {
-    /** @var \Drupal\field\FieldConfigInterface $entity */
+    /** @var FieldConfigInterface $entity */
     $operations = parent::getDefaultOperations($entity);
 
     $operations['inspect'] = [
diff --git a/src/Controller/RequestController.php b/src/Controller/RequestController.php
index 37302d1..3fa4362 100644
--- a/src/Controller/RequestController.php
+++ b/src/Controller/RequestController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\graphql\Controller;
 
+use GraphQL\Server\OperationParams;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Cache\CacheableJsonResponse;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\graphql\GraphQL\Execution\QueryProcessor;
@@ -15,7 +17,7 @@ class RequestController implements ContainerInjectionInterface {
   /**
    * The query processor.
    *
-   * @var \Drupal\graphql\GraphQL\Execution\QueryProcessor
+   * @var QueryProcessor
    */
   protected $processor;
 
@@ -39,7 +41,7 @@ class RequestController implements ContainerInjectionInterface {
   /**
    * RequestController constructor.
    *
-   * @param \Drupal\graphql\GraphQL\Execution\QueryProcessor $processor
+   * @param QueryProcessor $processor
    *   The query processor.
    * @param array $parameters
    *   The service configuration parameters.
@@ -54,13 +56,13 @@ class RequestController implements ContainerInjectionInterface {
    *
    * @param string $schema
    *   The name of the schema.
-   * @param \GraphQL\Server\OperationParams|\GraphQL\Server\OperationParams[] $operations
+   * @param OperationParams|OperationParams[] $operations
    *   The graphql operation(s) to execute.
    *
-   * @return \Drupal\Core\Cache\CacheableJsonResponse
+   * @return CacheableJsonResponse
    *   The JSON formatted response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function handleRequest($schema, $operations) {
     if (is_array($operations)) {
@@ -75,8 +77,8 @@ class RequestController implements ContainerInjectionInterface {
    * @param $operations
    * @param array $globals
    *
-   * @return \Drupal\Core\Cache\CacheableJsonResponse
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @return CacheableJsonResponse
+   * @throws PluginException
    */
   protected function handleSingle($schema, $operations) {
     $result = $this->processor->processQuery($schema, $operations);
@@ -90,8 +92,8 @@ class RequestController implements ContainerInjectionInterface {
    * @param $operations
    * @param array $globals
    *
-   * @return \Drupal\Core\Cache\CacheableJsonResponse
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @return CacheableJsonResponse
+   * @throws PluginException
    */
   protected function handleBatch($schema, $operations) {
     $result = $this->processor->processQuery($schema, $operations);
diff --git a/src/Controller/SchemaOverviewController.php b/src/Controller/SchemaOverviewController.php
index 86ee064..98aee2b 100644
--- a/src/Controller/SchemaOverviewController.php
+++ b/src/Controller/SchemaOverviewController.php
@@ -15,14 +15,14 @@ class SchemaOverviewController implements ContainerInjectionInterface {
   /**
    * The schema plugin manager service.
    *
-   * @var \Drupal\graphql\Plugin\SchemaPluginManager
+   * @var SchemaPluginManager
    */
   protected $schemaManager;
 
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
@@ -39,9 +39,9 @@ class SchemaOverviewController implements ContainerInjectionInterface {
   /**
    * SchemaOverviewController constructor.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler srevice.
-   * @param \Drupal\graphql\Plugin\SchemaPluginManager $schemaManager
+   * @param SchemaPluginManager $schemaManager
    *   The schema plugin manager service.
    */
   public function __construct(ModuleHandlerInterface $moduleHandler, SchemaPluginManager $schemaManager) {
diff --git a/src/Controller/SubrequestExtractionController.php b/src/Controller/SubrequestExtractionController.php
index 9f53da9..f027d45 100644
--- a/src/Controller/SubrequestExtractionController.php
+++ b/src/Controller/SubrequestExtractionController.php
@@ -18,14 +18,14 @@ class SubrequestExtractionController extends ControllerBase {
   /**
    * The symfony request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -43,11 +43,11 @@ class SubrequestExtractionController extends ControllerBase {
   /**
    * SubrequestExtractionController constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The rewnderer service.
    */
   public function __construct(RequestStack $requestStack, LanguageManagerInterface $languageManager, RendererInterface $renderer) {
@@ -59,7 +59,7 @@ class SubrequestExtractionController extends ControllerBase {
   /**
    * Extracts the sub-request callback response.
    *
-   * @return \Drupal\graphql\GraphQL\Buffers\SubRequestResponse
+   * @return SubRequestResponse
    *   The sub-request response object.
    */
   public function extract() {
diff --git a/src/Controller/VoyagerController.php b/src/Controller/VoyagerController.php
index 338ab3b..46733aa 100644
--- a/src/Controller/VoyagerController.php
+++ b/src/Controller/VoyagerController.php
@@ -13,7 +13,7 @@ class VoyagerController implements ContainerInjectionInterface {
   /**
    * The introspection service.
    *
-   * @var \Drupal\graphql\GraphQL\Utility\Introspection
+   * @var Introspection
    */
   protected $introspection;
 
@@ -27,7 +27,7 @@ class VoyagerController implements ContainerInjectionInterface {
   /**
    * VoyagerController constructor.
    *
-   * @param \Drupal\graphql\GraphQL\Utility\Introspection $introspection
+   * @param Introspection $introspection
    *   The GraphQL introspection service.
    */
   public function __construct(Introspection $introspection) {
diff --git a/src/EventSubscriber/ExplorerPageDisplayVariantSubscriber.php b/src/EventSubscriber/ExplorerPageDisplayVariantSubscriber.php
index 6a4adeb..a6d9eb6 100644
--- a/src/EventSubscriber/ExplorerPageDisplayVariantSubscriber.php
+++ b/src/EventSubscriber/ExplorerPageDisplayVariantSubscriber.php
@@ -14,7 +14,7 @@ class ExplorerPageDisplayVariantSubscriber implements EventSubscriberInterface {
   /**
    * Disables any display variant on the explorer page.
    *
-   * @param \Drupal\Core\Render\PageDisplayVariantSelectionEvent $event
+   * @param PageDisplayVariantSelectionEvent $event
    *   The event to process.
    */
   public function onSelectPageDisplayVariant(PageDisplayVariantSelectionEvent $event) {
diff --git a/src/EventSubscriber/SubrequestSubscriber.php b/src/EventSubscriber/SubrequestSubscriber.php
index 1f9a265..9179360 100644
--- a/src/EventSubscriber/SubrequestSubscriber.php
+++ b/src/EventSubscriber/SubrequestSubscriber.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\graphql\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -14,10 +14,10 @@ class SubrequestSubscriber implements EventSubscriberInterface {
   /**
    * Handle kernel request events.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The kernel event object.
    */
-  public function onKernelRequest(GetResponseEvent $event) {
+  public function onKernelRequest(RequestEvent $event) {
     $request = $event->getRequest();
     if ($request->attributes->has('_graphql_subrequest')) {
       $request->attributes->set('_graphql_controller', $request->attributes->get('_controller'));
diff --git a/src/EventSubscriber/VoyagerPageDisplayVariantSubscriber.php b/src/EventSubscriber/VoyagerPageDisplayVariantSubscriber.php
index 3a525a5..7e2d545 100644
--- a/src/EventSubscriber/VoyagerPageDisplayVariantSubscriber.php
+++ b/src/EventSubscriber/VoyagerPageDisplayVariantSubscriber.php
@@ -14,7 +14,7 @@ class VoyagerPageDisplayVariantSubscriber implements EventSubscriberInterface {
   /**
    * Disables any display variant on the voyager page.
    *
-   * @param \Drupal\Core\Render\PageDisplayVariantSelectionEvent $event
+   * @param PageDisplayVariantSelectionEvent $event
    *   The event to process.
    */
   public function onSelectPageDisplayVariant(PageDisplayVariantSelectionEvent $event) {
diff --git a/src/Form/EntityQueryMapForm.php b/src/Form/EntityQueryMapForm.php
index 7a80456..4575957 100644
--- a/src/Form/EntityQueryMapForm.php
+++ b/src/Form/EntityQueryMapForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql\Form;
 
+use Drupal\graphql\Entity\QueryMapInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -17,7 +18,7 @@ class EntityQueryMapForm extends EntityForm {
     $form = parent::buildForm($form, $formState);
     $form['#title'] = $this->t('Query map version %version', ['%version' => $this->entity->id()]);
 
-    /** @var \Drupal\graphql\Entity\QueryMapInterface $entity */
+    /** @var QueryMapInterface $entity */
     $entity = $this->entity;
 
     foreach ($entity->get('map') as $id => $query) {
diff --git a/src/Form/EntityQueryMapImportForm.php b/src/Form/EntityQueryMapImportForm.php
index 59fecfa..eafabe8 100644
--- a/src/Form/EntityQueryMapImportForm.php
+++ b/src/Form/EntityQueryMapImportForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql\Form;
 
+use Drupal\graphql\Entity\QueryMapInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\file\FileInterface;
@@ -44,7 +45,7 @@ class EntityQueryMapImportForm extends EntityForm {
       'file_validate_extensions' => ['json'], // Validate extensions.
     ]);
 
-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     if (empty($files) || !($file = reset($files)) || !($file instanceof FileInterface)) {
       $formState->setError($form['query_map_json'], $this->t('No file was uploaded.'));
     }
@@ -67,7 +68,7 @@ class EntityQueryMapImportForm extends EntityForm {
     $file = $formState->get('file');
     $json = file_get_contents($file->getFileUri());
 
-    /** @var \Drupal\graphql\Entity\QueryMapInterface $entity */
+    /** @var QueryMapInterface $entity */
     $entity = $this->entity;
     $entity->set('version', sha1($json));
     $entity->set('map', array_flip((array) json_decode($json)));
diff --git a/src/Form/JsonQueryMapConfigForm.php b/src/Form/JsonQueryMapConfigForm.php
index 4b10fa2..216fdb5 100644
--- a/src/Form/JsonQueryMapConfigForm.php
+++ b/src/Form/JsonQueryMapConfigForm.php
@@ -16,7 +16,7 @@ class JsonQueryMapConfigForm extends ConfigFormBase {
   /**
    * The default cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;
 
@@ -33,9 +33,9 @@ class JsonQueryMapConfigForm extends ConfigFormBase {
   /**
    * QueryMapConfigForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   The default cache backend.
    */
   public function __construct(ConfigFactoryInterface $configFactory, CacheBackendInterface $cacheBackend) {
diff --git a/src/GraphQL/Buffers/EntityBuffer.php b/src/GraphQL/Buffers/EntityBuffer.php
index 76caf5a..3d98abf 100644
--- a/src/GraphQL/Buffers/EntityBuffer.php
+++ b/src/GraphQL/Buffers/EntityBuffer.php
@@ -9,14 +9,14 @@ class EntityBuffer extends BufferBase {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * EntityBuffer constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
diff --git a/src/GraphQL/Buffers/SubRequestBuffer.php b/src/GraphQL/Buffers/SubRequestBuffer.php
index 601a7ca..0f1b3e5 100644
--- a/src/GraphQL/Buffers/SubRequestBuffer.php
+++ b/src/GraphQL/Buffers/SubRequestBuffer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql\GraphQL\Buffers;
 
+use Drupal\Core\GeneratedUrl;
 use Drupal\Core\Cache\CacheableDependencyInterface;
 use Drupal\Core\Url;
 use Drupal\Core\Routing\LocalRedirectResponse;
@@ -16,23 +17,23 @@ class SubRequestBuffer extends BufferBase {
   /**
    * The http kernel service.
    *
-   * @var \Symfony\Component\HttpKernel\HttpKernelInterface
+   * @var HttpKernelInterface
    */
   protected $httpKernel;
 
   /**
    * The request stack service.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * SubrequestBuffer constructor.
    *
-   * @param \Symfony\Component\HttpKernel\HttpKernelInterface $httpKernel
+   * @param HttpKernelInterface $httpKernel
    *   The http kernel service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack service.
    */
   public function __construct(HttpKernelInterface $httpKernel, RequestStack $requestStack) {
@@ -43,7 +44,7 @@ class SubRequestBuffer extends BufferBase {
   /**
    * Add an item to the buffer.
    *
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   The url object to run the subrequest on.
    * @param callable $extract
    *   The callback to run within the sub-request.
@@ -64,7 +65,7 @@ class SubRequestBuffer extends BufferBase {
    * {@inheritdoc}
    */
   protected function getBufferId($item) {
-    /** @var \Drupal\Core\GeneratedUrl $url */
+    /** @var GeneratedUrl $url */
     $url = $item['url']->toString(TRUE);
 
     return hash('sha256', json_encode([
@@ -78,14 +79,14 @@ class SubRequestBuffer extends BufferBase {
   /**
    * Create a sub-request for the given url.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $current
+   * @param Request $current
    *   The current main request.
    * @param string $url
    *   The url to run the subrequest on.
    * @param array $buffer
    *   The buffer.
    *
-   * @return \Symfony\Component\HttpFoundation\Request
+   * @return Request
    *   The request object.
    */
   protected function createRequest(Request $current, array $buffer, $url) {
@@ -115,14 +116,14 @@ class SubRequestBuffer extends BufferBase {
    * {@inheritdoc}
    */
   public function resolveBufferArray(array $buffer) {
-    /** @var \Drupal\Core\GeneratedUrl $url */
+    /** @var GeneratedUrl $url */
     $url = reset($buffer)['url']->toString(TRUE);
 
     $current = $this->requestStack->getCurrentRequest();
     $target = $url->getGeneratedUrl();
     $request = $this->createRequest($current, $buffer, $target);
     
-    /** @var \Drupal\graphql\GraphQL\Buffers\SubRequestResponse $response */
+    /** @var SubRequestResponse $response */
     $response = $this->httpKernel->handle($request, HttpKernelInterface::SUB_REQUEST);
     while ($response instanceof LocalRedirectResponse) {
       $target = $response->getTargetUrl();
diff --git a/src/GraphQL/Context/ContextRepository.php b/src/GraphQL/Context/ContextRepository.php
index 33e5a65..8a4eae6 100644
--- a/src/GraphQL/Context/ContextRepository.php
+++ b/src/GraphQL/Context/ContextRepository.php
@@ -16,14 +16,14 @@ class ContextRepository implements ContextRepositoryInterface {
   /**
    * The list of content providers.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextProviderInterface[]
+   * @var ContextProviderInterface[]
    */
   protected $contextProviders = [];
 
   /**
    * Add a context provider.
    *
-   * @param \Drupal\Core\Plugin\Context\ContextProviderInterface $contextProvider
+   * @param ContextProviderInterface $contextProvider
    *   The context provider to add.
    */
   public function addContextProvider(ContextProviderInterface $contextProvider) {
diff --git a/src/GraphQL/Execution/QueryProcessor.php b/src/GraphQL/Execution/QueryProcessor.php
index fb2ad50..eabfa67 100644
--- a/src/GraphQL/Execution/QueryProcessor.php
+++ b/src/GraphQL/Execution/QueryProcessor.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\graphql\GraphQL\Execution;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use GraphQL\Executor\Promise\Promise;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ -35,41 +37,41 @@ class QueryProcessor {
   /**
    * The schema plugin manager.
    *
-   * @var \Drupal\graphql\Plugin\SchemaPluginManager
+   * @var SchemaPluginManager
    */
   protected $pluginManager;
 
   /**
    * The cache backend for caching query results.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;
 
   /**
    * The cache contexts manager service.
    *
-   * @var \Drupal\Core\Cache\Context\CacheContextsManager
+   * @var CacheContextsManager
    */
   protected $contextsManager;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * Processor constructor.
    *
-   * @param \Drupal\Core\Cache\Context\CacheContextsManager $contextsManager
+   * @param CacheContextsManager $contextsManager
    *   The cache contexts manager service.
-   * @param \Drupal\graphql\Plugin\SchemaPluginManager $pluginManager
+   * @param SchemaPluginManager $pluginManager
    *   The schema plugin manager.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   The cache backend for caching query results.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
    */
   public function __construct(
@@ -89,13 +91,13 @@ class QueryProcessor {
    *
    * @param string $schema
    *   The plugin id of the schema to use.
-   * @param \GraphQL\Server\OperationParams|\GraphQL\Server\OperationParams[] $params
+   * @param OperationParams|OperationParams[] $params
    *   The graphql operation(s) to execute.
    *
-   * @return \Drupal\graphql\GraphQL\Execution\QueryResult|\Drupal\graphql\GraphQL\Execution\QueryResult[]
+   * @return QueryResult|QueryResult[]
    *   The query result.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function processQuery($schema, $params) {
     // Load the plugin from the schema manager.
@@ -110,8 +112,8 @@ class QueryProcessor {
   }
 
   /**
-   * @param \GraphQL\Server\ServerConfig $config
-   * @param \GraphQL\Server\OperationParams $params
+   * @param ServerConfig $config
+   * @param OperationParams $params
    *
    * @return mixed
    */
@@ -122,7 +124,7 @@ class QueryProcessor {
   }
 
   /**
-   * @param \GraphQL\Server\ServerConfig $config
+   * @param ServerConfig $config
    * @param array $params
    *
    * @return mixed
@@ -138,12 +140,12 @@ class QueryProcessor {
   }
 
   /**
-   * @param \GraphQL\Executor\Promise\PromiseAdapter $adapter
-   * @param \GraphQL\Server\ServerConfig $config
-   * @param \GraphQL\Server\OperationParams $params
+   * @param PromiseAdapter $adapter
+   * @param ServerConfig $config
+   * @param OperationParams $params
    * @param bool $batching
    *
-   * @return \GraphQL\Executor\Promise\Promise
+   * @return Promise
    */
   protected function executeOperationWithReporting(PromiseAdapter $adapter, ServerConfig $config, OperationParams $params, $batching = FALSE) {
     $result = $this->executeOperation($adapter, $config, $params, $batching);
@@ -163,12 +165,12 @@ class QueryProcessor {
   }
 
   /**
-   * @param \GraphQL\Executor\Promise\PromiseAdapter $adapter
-   * @param \GraphQL\Server\ServerConfig $config
-   * @param \GraphQL\Server\OperationParams $params
+   * @param PromiseAdapter $adapter
+   * @param ServerConfig $config
+   * @param OperationParams $params
    * @param bool $batching
    *
-   * @return \GraphQL\Executor\Promise\Promise
+   * @return Promise
    */
   protected function executeOperation(PromiseAdapter $adapter, ServerConfig $config, OperationParams $params, $batching = FALSE) {
     try {
@@ -220,13 +222,13 @@ class QueryProcessor {
   }
 
   /**
-   * @param \GraphQL\Executor\Promise\PromiseAdapter $adapter
-   * @param \GraphQL\Server\ServerConfig $config
-   * @param \GraphQL\Server\OperationParams $params
-   * @param \GraphQL\Language\AST\DocumentNode $document
+   * @param PromiseAdapter $adapter
+   * @param ServerConfig $config
+   * @param OperationParams $params
+   * @param DocumentNode $document
    * @param bool $validate
    *
-   * @return \GraphQL\Executor\Promise\Promise|mixed
+   * @return Promise|mixed
    */
   protected function executeCacheableOperation(PromiseAdapter $adapter, ServerConfig $config, OperationParams $params, DocumentNode $document, $validate = TRUE) {
     $contextCacheId = 'ccid:' . $this->cacheIdentifier($params, $document);
@@ -255,13 +257,13 @@ class QueryProcessor {
   }
 
   /**
-   * @param \GraphQL\Executor\Promise\PromiseAdapter $adapter
-   * @param \GraphQL\Server\ServerConfig $config
-   * @param \GraphQL\Server\OperationParams $params
-   * @param \GraphQL\Language\AST\DocumentNode $document
+   * @param PromiseAdapter $adapter
+   * @param ServerConfig $config
+   * @param OperationParams $params
+   * @param DocumentNode $document
    * @param bool $validate
    *
-   * @return \GraphQL\Executor\Promise\Promise
+   * @return Promise
    */
   protected function executeUncachableOperation(PromiseAdapter $adapter, ServerConfig $config, OperationParams $params, DocumentNode $document, $validate = TRUE) {
     $result = $this->doExecuteOperation($adapter, $config, $params, $document, $validate);
@@ -273,13 +275,13 @@ class QueryProcessor {
   }
 
   /**
-   * @param \GraphQL\Executor\Promise\PromiseAdapter $adapter
-   * @param \GraphQL\Server\ServerConfig $config
-   * @param \GraphQL\Server\OperationParams $params
-   * @param \GraphQL\Language\AST\DocumentNode $document
+   * @param PromiseAdapter $adapter
+   * @param ServerConfig $config
+   * @param OperationParams $params
+   * @param DocumentNode $document
    * @param bool $validate
    *
-   * @return \GraphQL\Executor\Promise\Promise
+   * @return Promise
    */
   protected function doExecuteOperation(PromiseAdapter $adapter, ServerConfig $config, OperationParams $params, DocumentNode $document, $validate = TRUE) {
     // If one of the validation rules found any problems, do not resolve the
@@ -322,7 +324,7 @@ class QueryProcessor {
   }
 
   /**
-   * @param \GraphQL\Server\OperationParams $params
+   * @param OperationParams $params
    *
    * @return array
    */
@@ -334,11 +336,11 @@ class QueryProcessor {
   }
 
   /**
-   * @param \GraphQL\Server\ServerConfig $config
-   * @param \GraphQL\Server\OperationParams $params
-   * @param \GraphQL\Language\AST\DocumentNode $document
+   * @param ServerConfig $config
+   * @param OperationParams $params
+   * @param DocumentNode $document
    *
-   * @return \GraphQL\Error\Error[]
+   * @return Error[]
    * @throws \Exception
    */
   protected function validateOperation(ServerConfig $config, OperationParams $params, DocumentNode $document) {
@@ -369,9 +371,9 @@ class QueryProcessor {
   }
 
   /**
-   * @param \GraphQL\Server\ServerConfig $config
-   * @param \GraphQL\Server\OperationParams $params
-   * @param \GraphQL\Language\AST\DocumentNode $document
+   * @param ServerConfig $config
+   * @param OperationParams $params
+   * @param DocumentNode $document
    * @param $operation
    *
    * @return mixed
@@ -386,9 +388,9 @@ class QueryProcessor {
   }
 
   /**
-   * @param \GraphQL\Server\ServerConfig $config
-   * @param \GraphQL\Server\OperationParams $params
-   * @param \GraphQL\Language\AST\DocumentNode $document
+   * @param ServerConfig $config
+   * @param OperationParams $params
+   * @param DocumentNode $document
    * @param $operation
    *
    * @return mixed
@@ -403,13 +405,13 @@ class QueryProcessor {
   }
 
   /**
-   * @param \GraphQL\Server\ServerConfig $config
-   * @param \GraphQL\Server\OperationParams $params
-   * @param \GraphQL\Language\AST\DocumentNode $document
+   * @param ServerConfig $config
+   * @param OperationParams $params
+   * @param DocumentNode $document
    * @param $operation
    *
    * @return array
-   * @throws \GraphQL\Server\RequestError
+   * @throws RequestError
    */
   protected function resolveValidationRules(ServerConfig $config, OperationParams $params, DocumentNode $document, $operation) {
     // Allow customizing validation rules per operation:
@@ -425,11 +427,11 @@ class QueryProcessor {
   }
 
   /**
-   * @param \GraphQL\Server\ServerConfig $config
-   * @param \GraphQL\Server\OperationParams $params
+   * @param ServerConfig $config
+   * @param OperationParams $params
    *
    * @return mixed
-   * @throws \GraphQL\Server\RequestError
+   * @throws RequestError
    */
   protected function loadPersistedQuery(ServerConfig $config, OperationParams $params) {
     if (!$loader = $config->getPersistentQueryLoader()) {
@@ -445,7 +447,7 @@ class QueryProcessor {
   }
 
   /**
-   * @param \GraphQL\Language\AST\DocumentNode $document
+   * @param DocumentNode $document
    *
    * @return array
    */
@@ -471,8 +473,8 @@ class QueryProcessor {
   }
 
   /**
-   * @param \GraphQL\Server\OperationParams $params
-   * @param \GraphQL\Language\AST\DocumentNode $document
+   * @param OperationParams $params
+   * @param DocumentNode $document
    * @param array $contexts
    *
    * @return string
diff --git a/src/GraphQL/Execution/QueryResult.php b/src/GraphQL/Execution/QueryResult.php
index 9bf18e0..d88281a 100644
--- a/src/GraphQL/Execution/QueryResult.php
+++ b/src/GraphQL/Execution/QueryResult.php
@@ -19,7 +19,7 @@ class QueryResult extends ExecutionResult implements RefinableCacheableDependenc
    *   Errors collected during execution.
    * @param array $extensions
    *   User specified array of extensions.
-   * @param \Drupal\Core\Cache\CacheableDependencyInterface $metadata
+   * @param CacheableDependencyInterface $metadata
    *   The cache metadata collected during query execution.
    */
   public function __construct(array $data = null, array $errors = [], array $extensions = [], CacheableDependencyInterface $metadata = NULL) {
diff --git a/src/GraphQL/Execution/ResolveContext.php b/src/GraphQL/Execution/ResolveContext.php
index e11500d..8218479 100644
--- a/src/GraphQL/Execution/ResolveContext.php
+++ b/src/GraphQL/Execution/ResolveContext.php
@@ -50,7 +50,7 @@ class ResolveContext implements RefinableCacheableDependencyInterface {
    *
    * @param string $name
    *   The name of the context.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    * @param mixed $default
    *   An arbitrary default value in case the context is not set.
@@ -88,7 +88,7 @@ class ResolveContext implements RefinableCacheableDependencyInterface {
    *   The name of the context.
    * @param $value
    *   The value of the context.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
    * @return $this
diff --git a/src/GraphQL/QueryProvider/EntityQueryMapQueryProvider.php b/src/GraphQL/QueryProvider/EntityQueryMapQueryProvider.php
index 0c703b1..53fbde6 100644
--- a/src/GraphQL/QueryProvider/EntityQueryMapQueryProvider.php
+++ b/src/GraphQL/QueryProvider/EntityQueryMapQueryProvider.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql\GraphQL\QueryProvider;
 
+use Drupal\graphql\Entity\QueryMapInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use GraphQL\Server\OperationParams;
 
@@ -10,14 +11,14 @@ class EntityQueryMapQueryProvider implements QueryProviderInterface {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * QueryProvider constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
@@ -36,7 +37,7 @@ class EntityQueryMapQueryProvider implements QueryProviderInterface {
     }
 
     $storage = $this->entityTypeManager->getStorage('graphql_query_map');
-    /** @var \Drupal\graphql\Entity\QueryMapInterface $map */
+    /** @var QueryMapInterface $map */
     if ($map = $storage->load($version)) {
       return $map->getQuery($id);
     }
diff --git a/src/GraphQL/QueryProvider/JsonQueryMapQueryProvider.php b/src/GraphQL/QueryProvider/JsonQueryMapQueryProvider.php
index 6240643..af6496b 100644
--- a/src/GraphQL/QueryProvider/JsonQueryMapQueryProvider.php
+++ b/src/GraphQL/QueryProvider/JsonQueryMapQueryProvider.php
@@ -12,7 +12,7 @@ class JsonQueryMapQueryProvider implements QueryProviderInterface {
   /**
    * The cache backend for storing query map file paths.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;
 
@@ -26,9 +26,9 @@ class JsonQueryMapQueryProvider implements QueryProviderInterface {
   /**
    * QueryProvider constructor.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   The cache backend for storing query map file paths.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
    */
   public function __construct(CacheBackendInterface $cacheBackend, ConfigFactoryInterface $configFactory) {
diff --git a/src/GraphQL/QueryProvider/QueryProvider.php b/src/GraphQL/QueryProvider/QueryProvider.php
index e9af509..2489dfb 100644
--- a/src/GraphQL/QueryProvider/QueryProvider.php
+++ b/src/GraphQL/QueryProvider/QueryProvider.php
@@ -9,14 +9,14 @@ class QueryProvider implements QueryProviderInterface {
   /**
    * Unsorted list of query providers nested and keyed by priority.
    *
-   * @var \Drupal\graphql\GraphQL\QueryProvider\QueryProviderInterface[]
+   * @var QueryProviderInterface[]
    */
   protected $providers = [];
 
   /**
    * Sorted list of query providers.
    *
-   * @var \Drupal\graphql\GraphQL\QueryProvider\QueryProviderInterface[]
+   * @var QueryProviderInterface[]
    */
   protected $sortedProviders;
 
@@ -36,7 +36,7 @@ class QueryProvider implements QueryProviderInterface {
   /**
    * Adds a query provider.
    *
-   * @param \Drupal\graphql\GraphQL\QueryProvider\QueryProviderInterface $provider
+   * @param QueryProviderInterface $provider
    *   The query provider to add.
    * @param int $priority
    *   Priority of the query provider.
@@ -49,7 +49,7 @@ class QueryProvider implements QueryProviderInterface {
   /**
    * Returns the sorted array of query providers.
    *
-   * @return \Drupal\graphql\GraphQL\QueryProvider\QueryProviderInterface[]
+   * @return QueryProviderInterface[]
    *   An array of query provider objects.
    */
   protected function getSortedProviders() {
diff --git a/src/GraphQL/QueryProvider/QueryProviderInterface.php b/src/GraphQL/QueryProvider/QueryProviderInterface.php
index 7b149a2..d61dec9 100644
--- a/src/GraphQL/QueryProvider/QueryProviderInterface.php
+++ b/src/GraphQL/QueryProvider/QueryProviderInterface.php
@@ -15,7 +15,7 @@ interface QueryProviderInterface {
    *
    * @param string $id
    *   The query id.
-   * @param \GraphQL\Server\OperationParams $operation
+   * @param OperationParams $operation
    *   The operation parameters.
    *
    * @return string|null
diff --git a/src/GraphQL/Utility/Introspection.php b/src/GraphQL/Utility/Introspection.php
index a43960d..bce5b96 100644
--- a/src/GraphQL/Utility/Introspection.php
+++ b/src/GraphQL/Utility/Introspection.php
@@ -9,14 +9,14 @@ use GraphQL\Type\Introspection as IntrospectionType;
 class Introspection {
 
   /**
-   * @var \Drupal\graphql\GraphQL\Execution\QueryProcessor
+   * @var QueryProcessor
    */
   protected $queryProcessor;
 
   /**
    * Constructs an Introspection object.
    *
-   * @param \Drupal\graphql\GraphQL\Execution\QueryProcessor $queryProcessor
+   * @param QueryProcessor $queryProcessor
    *   The query processor srevice.
    */
   public function __construct(QueryProcessor $queryProcessor) {
diff --git a/src/GraphQLLanguageContext.php b/src/GraphQLLanguageContext.php
index 0b5e190..8005a8f 100644
--- a/src/GraphQLLanguageContext.php
+++ b/src/GraphQLLanguageContext.php
@@ -33,21 +33,21 @@ class GraphQLLanguageContext {
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The string translation service
    *
-   * @var \Drupal\Core\StringTranslation\TranslationManager
+   * @var TranslationManager
    */
   protected $translationManager;
 
   /**
    * GraphQLLanguageContext constructor.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager service.
    */
   public function __construct(LanguageManagerInterface $languageManager, TranslationManager $translationManager) {
diff --git a/src/Plugin/Deriver/PluggableSchemaDeriver.php b/src/Plugin/Deriver/PluggableSchemaDeriver.php
index 946d3fb..7651c5c 100644
--- a/src/Plugin/Deriver/PluggableSchemaDeriver.php
+++ b/src/Plugin/Deriver/PluggableSchemaDeriver.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql\Plugin\Deriver;
 
+use Drupal\graphql\Plugin\TypePluginInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Component\Utility\SortArray;
@@ -26,28 +27,28 @@ class PluggableSchemaDeriver extends DeriverBase implements ContainerDeriverInte
   /**
    * The field manager service.
    *
-   * @var \Drupal\graphql\Plugin\FieldPluginManager
+   * @var FieldPluginManager
    */
   protected $fieldManager;
 
   /**
    * The mutation manager service.
    *
-   * @var \Drupal\graphql\Plugin\MutationPluginManager
+   * @var MutationPluginManager
    */
   protected $mutationManager;
 
   /**
    * The subscription manager service.
    *
-   * @var \Drupal\graphql\Plugin\SubscriptionPluginManager
+   * @var SubscriptionPluginManager
    */
   protected $subscriptionManager;
 
   /**
    * The type manager aggregator service.
    *
-   * @var \Drupal\graphql\Plugin\TypePluginManagerAggregator
+   * @var TypePluginManagerAggregator
    */
   protected $typeManagers;
 
@@ -69,13 +70,13 @@ class PluggableSchemaDeriver extends DeriverBase implements ContainerDeriverInte
    *
    * @param $basePluginId
    *   The base plugin id.
-   * @param \Drupal\graphql\Plugin\FieldPluginManager $fieldManager
+   * @param FieldPluginManager $fieldManager
    *   The field plugin manager.
-   * @param \Drupal\graphql\Plugin\MutationPluginManager $mutationManager
+   * @param MutationPluginManager $mutationManager
    *   The mutation plugin manager.
-   * @param \Drupal\graphql\Plugin\SubscriptionPluginManager $subscriptionManager
+   * @param SubscriptionPluginManager $subscriptionManager
    *   The mutation plugin manager.
-   * @param \Drupal\graphql\Plugin\TypePluginManagerAggregator $typeManagers
+   * @param TypePluginManagerAggregator $typeManagers
    *   The type manager aggregator service.
    */
   public function __construct(
@@ -177,7 +178,7 @@ class PluggableSchemaDeriver extends DeriverBase implements ContainerDeriverInte
     // instantiate their plugin instances during schema composition.
     return array_map(function ($type) use ($managers) {
       $manager = $managers[$type['type']];
-      /** @var \Drupal\graphql\Plugin\TypePluginInterface $instance */
+      /** @var TypePluginInterface $instance */
       $instance = $manager->getInstance(['id' => $type['id']]);
 
       return $type + [
@@ -218,7 +219,7 @@ class PluggableSchemaDeriver extends DeriverBase implements ContainerDeriverInte
   /**
    * Builds an optimized representation of fields keyed by their parent types.
    *
-   * @param \Drupal\graphql\Plugin\FieldPluginManager $manager
+   * @param FieldPluginManager $manager
    *   The field plugin manager.
    * @param $types
    *   The optimized list of types.
@@ -349,7 +350,7 @@ class PluggableSchemaDeriver extends DeriverBase implements ContainerDeriverInte
   /**
    * Builds an optimization representation of all registered fields.
    *
-   * @param \Drupal\graphql\Plugin\FieldPluginManager $manager
+   * @param FieldPluginManager $manager
    *   The field plugin manager.
    * @param $association
    *   The type/field association map.
@@ -379,7 +380,7 @@ class PluggableSchemaDeriver extends DeriverBase implements ContainerDeriverInte
   /**
    * Builds an optimized representation of all registered mutations.
    *
-   * @param \Drupal\graphql\Plugin\MutationPluginManager $manager
+   * @param MutationPluginManager $manager
    *   The mutation plugin manager.
    *
    * @return array
@@ -415,7 +416,7 @@ class PluggableSchemaDeriver extends DeriverBase implements ContainerDeriverInte
   /**
    * Builds an optimized representation of all registered subscriptions.
    *
-   * @param \Drupal\graphql\Plugin\SubscriptionPluginManager $manager
+   * @param SubscriptionPluginManager $manager
    *   The subscription plugin manager.
    *
    * @return array
diff --git a/src/Plugin/FieldPluginInterface.php b/src/Plugin/FieldPluginInterface.php
index 2047941..e45f8e2 100644
--- a/src/Plugin/FieldPluginInterface.php
+++ b/src/Plugin/FieldPluginInterface.php
@@ -8,8 +8,8 @@ use Drupal\Component\Plugin\DerivativeInspectionInterface;
 interface FieldPluginInterface extends PluginInspectionInterface, DerivativeInspectionInterface {
 
   /**
-   * @param \Drupal\graphql\Plugin\SchemaBuilderInterface $builder
-   * @param \Drupal\graphql\Plugin\FieldPluginManager $manager
+   * @param SchemaBuilderInterface $builder
+   * @param FieldPluginManager $manager
    * @param $definition
    * @param $id
    *
diff --git a/src/Plugin/FieldPluginManager.php b/src/Plugin/FieldPluginManager.php
index 4269f91..394e0f9 100644
--- a/src/Plugin/FieldPluginManager.php
+++ b/src/Plugin/FieldPluginManager.php
@@ -12,7 +12,7 @@ class FieldPluginManager extends DefaultPluginManager {
   /**
    * Static cache of plugin instances.
    *
-   * @var \Drupal\graphql\Plugin\FieldPluginInterface[]
+   * @var FieldPluginInterface[]
    */
   protected $instances;
 
@@ -24,9 +24,9 @@ class FieldPluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   The cache backend.
    * @param string|null $pluginInterface
    *   The interface each plugin should implement.
diff --git a/src/Plugin/GraphQL/Fields/FieldPluginBase.php b/src/Plugin/GraphQL/Fields/FieldPluginBase.php
index ff27b0a..a013190 100644
--- a/src/Plugin/GraphQL/Fields/FieldPluginBase.php
+++ b/src/Plugin/GraphQL/Fields/FieldPluginBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\graphql\Plugin\GraphQL\Fields;
 
+use Drupal\graphql\GraphQLLanguageContext;
+use Drupal\Core\Render\RendererInterface;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Component\Render\MarkupInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
@@ -32,14 +34,14 @@ abstract class FieldPluginBase extends PluginBase implements FieldPluginInterfac
   /**
    * The language context service.
    *
-   * @var \Drupal\graphql\GraphQLLanguageContext
+   * @var GraphQLLanguageContext
    */
   protected $languageContext;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -70,7 +72,7 @@ abstract class FieldPluginBase extends PluginBase implements FieldPluginInterfac
   /**
    * Get the language context instance.
    *
-   * @return \Drupal\graphql\GraphQLLanguageContext
+   * @return GraphQLLanguageContext
    *   The language context service.
    */
   protected function getLanguageContext() {
@@ -83,7 +85,7 @@ abstract class FieldPluginBase extends PluginBase implements FieldPluginInterfac
   /**
    * Get the renderer service.
    *
-   * @return \Drupal\Core\Render\RendererInterface
+   * @return RendererInterface
    */
   protected function getRenderer() {
     if (!isset($this->renderer)) {
@@ -208,7 +210,7 @@ abstract class FieldPluginBase extends PluginBase implements FieldPluginInterfac
    *
    * @param array $result
    *   The resolved values.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
    * @return mixed
@@ -242,9 +244,9 @@ abstract class FieldPluginBase extends PluginBase implements FieldPluginInterfac
    *   The parent value.
    * @param array $args
    *   The arguments passed to the field.
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
+   * @param ResolveContext $context
    *   The resolve context.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
    * @return array
@@ -282,7 +284,7 @@ abstract class FieldPluginBase extends PluginBase implements FieldPluginInterfac
    *   Field arguments.
    * @param $context
    *   The resolve context.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
    * @return \Generator
diff --git a/src/Plugin/GraphQL/Schemas/SchemaPluginBase.php b/src/Plugin/GraphQL/Schemas/SchemaPluginBase.php
index dc60dd9..ceae294 100644
--- a/src/Plugin/GraphQL/Schemas/SchemaPluginBase.php
+++ b/src/Plugin/GraphQL/Schemas/SchemaPluginBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\graphql\Plugin\GraphQL\Schemas;
 
+use GraphQL\Error\Error;
+use GraphQL\Type\Definition\Type;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Cache\CacheableDependencyInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
@@ -31,28 +33,28 @@ abstract class SchemaPluginBase extends PluginBase implements SchemaPluginInterf
   /**
    * The field plugin manager.
    *
-   * @var \Drupal\graphql\Plugin\FieldPluginManager
+   * @var FieldPluginManager
    */
   protected $fieldManager;
 
   /**
    * The mutation plugin manager.
    *
-   * @var \Drupal\graphql\Plugin\MutationPluginManager
+   * @var MutationPluginManager
    */
   protected $mutationManager;
 
   /**
    * The subscription plugin manager.
    *
-   * @var \Drupal\graphql\Plugin\SubscriptionPluginManager
+   * @var SubscriptionPluginManager
    */
   protected $subscriptionManager;
 
   /**
    * The type manager aggregator service.
    *
-   * @var \Drupal\graphql\Plugin\TypePluginManagerAggregator
+   * @var TypePluginManagerAggregator
    */
   protected $typeManagers;
 
@@ -94,26 +96,26 @@ abstract class SchemaPluginBase extends PluginBase implements SchemaPluginInterf
   /**
    * The query provider service.
    *
-   * @var \Drupal\graphql\GraphQL\QueryProvider\QueryProviderInterface
+   * @var QueryProviderInterface
    */
   protected $queryProvider;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The logger service.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
@@ -146,21 +148,21 @@ abstract class SchemaPluginBase extends PluginBase implements SchemaPluginInterf
    *   The plugin id.
    * @param array $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\graphql\Plugin\FieldPluginManager $fieldManager
+   * @param FieldPluginManager $fieldManager
    *   The field plugin manager.
-   * @param \Drupal\graphql\Plugin\MutationPluginManager $mutationManager
+   * @param MutationPluginManager $mutationManager
    *   The mutation plugin manager.
-   * @param \Drupal\graphql\Plugin\SubscriptionPluginManager $subscriptionManager
+   * @param SubscriptionPluginManager $subscriptionManager
    *   The subscription plugin manager.
-   * @param \Drupal\graphql\Plugin\TypePluginManagerAggregator $typeManagers
+   * @param TypePluginManagerAggregator $typeManagers
    *   The type manager aggregator service.
-   * @param \Drupal\graphql\GraphQL\QueryProvider\QueryProviderInterface $queryProvider
+   * @param QueryProviderInterface $queryProvider
    *   The query provider service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager service.
    * @param array $parameters
    *   The service parameters.
@@ -293,7 +295,7 @@ abstract class SchemaPluginBase extends PluginBase implements SchemaPluginInterf
 
     // Always log the errors.
     $config->setErrorsHandler(function (array $errors, callable $formatter) {
-      /** @var \GraphQL\Error\Error $error */
+      /** @var Error $error */
       foreach ($errors as $error) {
         $this->logger->error($error->getMessage());
       }
@@ -483,7 +485,7 @@ abstract class SchemaPluginBase extends PluginBase implements SchemaPluginInterf
    * @param array $type
    *   The type reference.
    *
-   * @return \GraphQL\Type\Definition\Type
+   * @return Type
    *   The type instance.
    */
   protected function buildType($type) {
diff --git a/src/Plugin/GraphQL/Types/TypePluginBase.php b/src/Plugin/GraphQL/Types/TypePluginBase.php
index f18adb5..3fee67d 100644
--- a/src/Plugin/GraphQL/Types/TypePluginBase.php
+++ b/src/Plugin/GraphQL/Types/TypePluginBase.php
@@ -100,9 +100,9 @@ abstract class TypePluginBase extends PluginBase implements TypePluginInterface
    *
    * @param mixed $object
    *   The object to check against.
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
+   * @param ResolveContext $context
    *   The resolve context.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
    * @return null|bool
diff --git a/src/Plugin/LanguageNegotiation/LanguageNegotiationGraphQL.php b/src/Plugin/LanguageNegotiation/LanguageNegotiationGraphQL.php
index f9d0071..593ff13 100644
--- a/src/Plugin/LanguageNegotiation/LanguageNegotiationGraphQL.php
+++ b/src/Plugin/LanguageNegotiation/LanguageNegotiationGraphQL.php
@@ -23,7 +23,7 @@ class LanguageNegotiationGraphQL extends LanguageNegotiationMethodBase implement
   /**
    * The graphql language context.
    *
-   * @var \Drupal\graphql\GraphQLLanguageContext
+   * @var GraphQLLanguageContext
    */
   protected $languageContext;
 
@@ -42,7 +42,7 @@ class LanguageNegotiationGraphQL extends LanguageNegotiationMethodBase implement
   /**
    * LanguageNegotiationGraphQL constructor.
    *
-   * @param \Drupal\graphql\GraphQLLanguageContext $languageContext
+   * @param GraphQLLanguageContext $languageContext
    *   Instance of the GraphQL language context.
    */
   public function __construct(GraphQLLanguageContext $languageContext) {
diff --git a/src/Plugin/MenuLink/Deriver/ExplorerMenuLinkDeriver.php b/src/Plugin/MenuLink/Deriver/ExplorerMenuLinkDeriver.php
index 9b9b7c2..7401964 100644
--- a/src/Plugin/MenuLink/Deriver/ExplorerMenuLinkDeriver.php
+++ b/src/Plugin/MenuLink/Deriver/ExplorerMenuLinkDeriver.php
@@ -12,7 +12,7 @@ class ExplorerMenuLinkDeriver extends DeriverBase implements ContainerDeriverInt
   /**
    * The schema plugin manager service.
    *
-   * @var \Drupal\graphql\Plugin\SchemaPluginManager
+   * @var SchemaPluginManager
    */
   protected $schemaManager;
 
@@ -26,7 +26,7 @@ class ExplorerMenuLinkDeriver extends DeriverBase implements ContainerDeriverInt
   /**
    * ExplorerMenuLinkDeriver constructor.
    *
-   * @param \Drupal\graphql\Plugin\SchemaPluginManager $schemaManager
+   * @param SchemaPluginManager $schemaManager
    *   The schema plugin manager service.
    */
   public function __construct(SchemaPluginManager $schemaManager) {
diff --git a/src/Plugin/MenuLink/Deriver/VoyagerMenuLinkDeriver.php b/src/Plugin/MenuLink/Deriver/VoyagerMenuLinkDeriver.php
index aea4865..e2a6b59 100644
--- a/src/Plugin/MenuLink/Deriver/VoyagerMenuLinkDeriver.php
+++ b/src/Plugin/MenuLink/Deriver/VoyagerMenuLinkDeriver.php
@@ -12,7 +12,7 @@ class VoyagerMenuLinkDeriver extends DeriverBase implements ContainerDeriverInte
   /**
    * The schema plugin manager service.
    *
-   * @var \Drupal\graphql\Plugin\SchemaPluginManager
+   * @var SchemaPluginManager
    */
   protected $schemaManager;
 
@@ -26,7 +26,7 @@ class VoyagerMenuLinkDeriver extends DeriverBase implements ContainerDeriverInte
   /**
    * VoyagerMenuLinkDeriver constructor.
    *
-   * @param \Drupal\graphql\Plugin\SchemaPluginManager $schemaManager
+   * @param SchemaPluginManager $schemaManager
    *   The schema plugin manager service.
    */
   public function __construct(SchemaPluginManager $schemaManager) {
diff --git a/src/Plugin/MutationPluginInterface.php b/src/Plugin/MutationPluginInterface.php
index 2b86002..0aa1237 100644
--- a/src/Plugin/MutationPluginInterface.php
+++ b/src/Plugin/MutationPluginInterface.php
@@ -8,8 +8,8 @@ use Drupal\Component\Plugin\DerivativeInspectionInterface;
 interface MutationPluginInterface extends PluginInspectionInterface, DerivativeInspectionInterface {
 
   /**
-   * @param \Drupal\graphql\Plugin\SchemaBuilderInterface $builder
-   * @param \Drupal\graphql\Plugin\MutationPluginManager $manager
+   * @param SchemaBuilderInterface $builder
+   * @param MutationPluginManager $manager
    * @param $definition
    * @param $id
    *
diff --git a/src/Plugin/MutationPluginManager.php b/src/Plugin/MutationPluginManager.php
index 4eaf162..6316f9e 100644
--- a/src/Plugin/MutationPluginManager.php
+++ b/src/Plugin/MutationPluginManager.php
@@ -12,7 +12,7 @@ class MutationPluginManager extends DefaultPluginManager {
   /**
    * Static cache of plugin instances.
    *
-   * @var \Drupal\graphql\Plugin\MutationPluginInterface[]
+   * @var MutationPluginInterface[]
    */
   protected $instances;
 
@@ -24,9 +24,9 @@ class MutationPluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   The cache backend.
    * @param string|null $pluginInterface
    *   The interface each plugin should implement.
diff --git a/src/Plugin/SchemaBuilderInterface.php b/src/Plugin/SchemaBuilderInterface.php
index f21a0f7..2293f3d 100644
--- a/src/Plugin/SchemaBuilderInterface.php
+++ b/src/Plugin/SchemaBuilderInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\graphql\Plugin;
 
+use Drupal\graphql\Plugin\GraphQL\Types\TypePluginBase;
+use GraphQL\Type\Definition\Type;
 use Drupal\graphql\GraphQL\Execution\ResolveContext;
 use GraphQL\Type\Definition\ResolveInfo;
 
@@ -98,12 +100,12 @@ interface SchemaBuilderInterface {
    *   The name of the interface or union type.
    * @param mixed $value
    *   The value to resolve the concrete type for.
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
+   * @param ResolveContext $context
    *   The resolve context object.
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    *
-   * @return \Drupal\graphql\Plugin\GraphQL\Types\TypePluginBase|null
+   * @return TypePluginBase|null
    *   The object type that applies to the given value.
    */
   public function resolveType($name, $value, ResolveContext $context, ResolveInfo $info);
@@ -114,7 +116,7 @@ interface SchemaBuilderInterface {
    * @param string $name
    *   The name of the type to retrieve the type instance for.
    *
-   * @return \GraphQL\Type\Definition\Type
+   * @return Type
    *   The type instance corresponding to the given type name.
    */
   public function getType($name);
@@ -171,7 +173,7 @@ interface SchemaBuilderInterface {
    *   the type and the second array element representing the list of decorators
    *   to apply to the type.
    *
-   * @return \GraphQL\Type\Definition\Type
+   * @return Type
    *   The decorated type instance corresponding to the given type definition.
    */
   public function processType(array $type);
diff --git a/src/Plugin/SchemaPluginInterface.php b/src/Plugin/SchemaPluginInterface.php
index b9e3211..381e93e 100644
--- a/src/Plugin/SchemaPluginInterface.php
+++ b/src/Plugin/SchemaPluginInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql\Plugin;
 
+use GraphQL\Type\Schema;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Component\Plugin\DerivativeInspectionInterface;
 
@@ -10,7 +11,7 @@ interface SchemaPluginInterface extends PluginInspectionInterface, DerivativeIns
   /**
    * Retrieves the schema.
    *
-   * @return \GraphQL\Type\Schema
+   * @return Schema
    *   The schema.
    */
   public function getSchema();
diff --git a/src/Plugin/SchemaPluginManager.php b/src/Plugin/SchemaPluginManager.php
index 0f6ca24..f02faa6 100644
--- a/src/Plugin/SchemaPluginManager.php
+++ b/src/Plugin/SchemaPluginManager.php
@@ -17,9 +17,9 @@ class SchemaPluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   The cache backend.
    * @param string|null $pluginInterface
    *   The interface each plugin should implement.
diff --git a/src/Plugin/SubscriptionPluginInterface.php b/src/Plugin/SubscriptionPluginInterface.php
index 043275d..1f895c0 100644
--- a/src/Plugin/SubscriptionPluginInterface.php
+++ b/src/Plugin/SubscriptionPluginInterface.php
@@ -8,8 +8,8 @@ use Drupal\Component\Plugin\DerivativeInspectionInterface;
 interface SubscriptionPluginInterface extends PluginInspectionInterface, DerivativeInspectionInterface {
 
   /**
-   * @param \Drupal\graphql\Plugin\SchemaBuilderInterface $builder
-   * @param \Drupal\graphql\Plugin\SubscriptionPluginManager $manager
+   * @param SchemaBuilderInterface $builder
+   * @param SubscriptionPluginManager $manager
    * @param $definition
    * @param $id
    *
diff --git a/src/Plugin/SubscriptionPluginManager.php b/src/Plugin/SubscriptionPluginManager.php
index 6ea3c50..f4f496f 100644
--- a/src/Plugin/SubscriptionPluginManager.php
+++ b/src/Plugin/SubscriptionPluginManager.php
@@ -12,7 +12,7 @@ class SubscriptionPluginManager extends DefaultPluginManager {
   /**
    * Static cache of plugin instances.
    *
-   * @var \Drupal\graphql\Plugin\SubscriptionPluginInterface[]
+   * @var SubscriptionPluginInterface[]
    */
   protected $instances;
 
@@ -24,9 +24,9 @@ class SubscriptionPluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   The cache backend.
    * @param string|null $pluginInterface
    *   The interface each plugin should implement.
diff --git a/src/Plugin/TypePluginInterface.php b/src/Plugin/TypePluginInterface.php
index 4455d14..ec71e01 100644
--- a/src/Plugin/TypePluginInterface.php
+++ b/src/Plugin/TypePluginInterface.php
@@ -11,8 +11,8 @@ use Drupal\Component\Plugin\DerivativeInspectionInterface;
 interface TypePluginInterface extends PluginInspectionInterface, DerivativeInspectionInterface {
 
   /**
-   * @param \Drupal\graphql\Plugin\SchemaBuilderInterface $builder
-   * @param \Drupal\graphql\Plugin\TypePluginManager $manager
+   * @param SchemaBuilderInterface $builder
+   * @param TypePluginManager $manager
    * @param $definition
    * @param $id
    *
diff --git a/src/Plugin/TypePluginManager.php b/src/Plugin/TypePluginManager.php
index a3cd7df..8e1f147 100644
--- a/src/Plugin/TypePluginManager.php
+++ b/src/Plugin/TypePluginManager.php
@@ -12,7 +12,7 @@ class TypePluginManager extends DefaultPluginManager implements TypePluginManage
   /**
    * Static cache of plugin instances.
    *
-   * @var \Drupal\graphql\Plugin\TypePluginInterface[]
+   * @var TypePluginInterface[]
    */
   protected $instances;
 
@@ -24,9 +24,9 @@ class TypePluginManager extends DefaultPluginManager implements TypePluginManage
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   The cache backend.
    * @param string|null $pluginInterface
    *   The interface each plugin should implement.
diff --git a/src/Plugin/TypePluginManagerAggregator.php b/src/Plugin/TypePluginManagerAggregator.php
index fc8f3b9..4664484 100644
--- a/src/Plugin/TypePluginManagerAggregator.php
+++ b/src/Plugin/TypePluginManagerAggregator.php
@@ -7,14 +7,14 @@ class TypePluginManagerAggregator implements \IteratorAggregate {
   /**
    * List of registered plugin managers.
    *
-   * @var \Drupal\graphql\Plugin\TypePluginManagerInterface[]
+   * @var TypePluginManagerInterface[]
    */
   protected $pluginManagers = [];
 
   /**
    * Registers a plugin manager.
    *
-   * @param \Drupal\graphql\Plugin\TypePluginManagerInterface $pluginManager
+   * @param TypePluginManagerInterface $pluginManager
    *   The plugin manager to register.
    * @param $id
    *   The id of the service.
@@ -32,7 +32,7 @@ class TypePluginManagerAggregator implements \IteratorAggregate {
    * @param string $type
    *   The plugin type.
    *
-   * @return \Drupal\graphql\Plugin\TypePluginManagerInterface
+   * @return TypePluginManagerInterface
    *   The plugin managers for the given plugin type.
    */
   public function getTypeManager($type) {
diff --git a/src/Routing/ConfigurationRoutes.php b/src/Routing/ConfigurationRoutes.php
index 9557c9b..8401c1c 100644
--- a/src/Routing/ConfigurationRoutes.php
+++ b/src/Routing/ConfigurationRoutes.php
@@ -15,14 +15,14 @@ class ConfigurationRoutes extends RouteSubscriberBase {
   /**
    * The graphql schema plugin manager.
    *
-   * @var \Drupal\graphql\Plugin\SchemaPluginManager
+   * @var SchemaPluginManager
    */
   protected $schemaManager;
 
   /**
    * ConfigurationRoutes constructor.
    *
-   * @param \Drupal\graphql\Plugin\SchemaPluginManager $schemaManager
+   * @param SchemaPluginManager $schemaManager
    *   The graphql schema plugin manager.
    */
   public function __construct(SchemaPluginManager $schemaManager) {
@@ -32,7 +32,7 @@ class ConfigurationRoutes extends RouteSubscriberBase {
   /**
    * Alters existing routes for a specific collection.
    *
-   * @param \Symfony\Component\Routing\RouteCollection $collection
+   * @param RouteCollection $collection
    *   The route collection for adding routes.
    */
   protected function alterRoutes(RouteCollection $collection) {
diff --git a/src/Routing/ExplorerRoutes.php b/src/Routing/ExplorerRoutes.php
index ef8d344..bdf0cd3 100644
--- a/src/Routing/ExplorerRoutes.php
+++ b/src/Routing/ExplorerRoutes.php
@@ -15,14 +15,14 @@ class ExplorerRoutes extends RouteSubscriberBase {
   /**
    * The graphql schema plugin manager.
    *
-   * @var \Drupal\graphql\Plugin\SchemaPluginManager
+   * @var SchemaPluginManager
    */
   protected $schemaManager;
 
   /**
    * ExplorerRoutes constructor.
    *
-   * @param \Drupal\graphql\Plugin\SchemaPluginManager $schemaManager
+   * @param SchemaPluginManager $schemaManager
    *   The graphql schema plugin manager.
    */
   public function __construct(SchemaPluginManager $schemaManager) {
@@ -32,7 +32,7 @@ class ExplorerRoutes extends RouteSubscriberBase {
   /**
    * Alters existing routes for a specific collection.
    *
-   * @param \Symfony\Component\Routing\RouteCollection $collection
+   * @param RouteCollection $collection
    *   The route collection for adding routes.
    */
   protected function alterRoutes(RouteCollection $collection) {
diff --git a/src/Routing/QueryRouteEnhancer.php b/src/Routing/QueryRouteEnhancer.php
index 1bfe27f..21e8ce9 100644
--- a/src/Routing/QueryRouteEnhancer.php
+++ b/src/Routing/QueryRouteEnhancer.php
@@ -39,7 +39,7 @@ class QueryRouteEnhancer implements EnhancerInterface {
   /**
    * Extracts the query parameters from a request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The http request object.
    *
    * @return array
@@ -52,7 +52,7 @@ class QueryRouteEnhancer implements EnhancerInterface {
   /**
    * Extracts the body parameters from a request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The http request object.
    *
    * @return array
diff --git a/src/Routing/QueryRoutes.php b/src/Routing/QueryRoutes.php
index 094b594..8939b18 100644
--- a/src/Routing/QueryRoutes.php
+++ b/src/Routing/QueryRoutes.php
@@ -16,23 +16,23 @@ class QueryRoutes extends RouteSubscriberBase {
   /**
    * The graphql schema plugin manager.
    *
-   * @var \Drupal\graphql\Plugin\SchemaPluginManager
+   * @var SchemaPluginManager
    */
   protected $schemaManager;
 
   /**
    * The authentication collector.
    *
-   * @var \Drupal\Core\Authentication\AuthenticationCollectorInterface
+   * @var AuthenticationCollectorInterface
    */
   protected $authenticationCollector;
 
   /**
    * QueryRoutes constructor.
    *
-   * @param \Drupal\graphql\Plugin\SchemaPluginManager $schemaManager
+   * @param SchemaPluginManager $schemaManager
    *   The graphql schema plugin manager.
-   * @param \Drupal\Core\Authentication\AuthenticationCollectorInterface $authenticationCollector
+   * @param AuthenticationCollectorInterface $authenticationCollector
    *   The authentication collector.
    */
   public function __construct(SchemaPluginManager $schemaManager, AuthenticationCollectorInterface $authenticationCollector) {
@@ -43,7 +43,7 @@ class QueryRoutes extends RouteSubscriberBase {
   /**
    * Alters existing routes for a specific collection.
    *
-   * @param \Symfony\Component\Routing\RouteCollection $collection
+   * @param RouteCollection $collection
    *   The route collection for adding routes.
    */
   protected function alterRoutes(RouteCollection $collection) {
diff --git a/src/Routing/VoyagerRoutes.php b/src/Routing/VoyagerRoutes.php
index c022528..fcd03c9 100644
--- a/src/Routing/VoyagerRoutes.php
+++ b/src/Routing/VoyagerRoutes.php
@@ -15,14 +15,14 @@ class VoyagerRoutes extends RouteSubscriberBase {
   /**
    * The graphql schema plugin manager.
    *
-   * @var \Drupal\graphql\Plugin\SchemaPluginManager
+   * @var SchemaPluginManager
    */
   protected $schemaManager;
 
   /**
    * VoyagerRoutes constructor.
    *
-   * @param \Drupal\graphql\Plugin\SchemaPluginManager $schemaManager
+   * @param SchemaPluginManager $schemaManager
    *   The graphql schema plugin manager.
    */
   public function __construct(SchemaPluginManager $schemaManager) {
@@ -32,7 +32,7 @@ class VoyagerRoutes extends RouteSubscriberBase {
   /**
    * Alters existing routes for a specific collection.
    *
-   * @param \Symfony\Component\Routing\RouteCollection $collection
+   * @param RouteCollection $collection
    *   The route collection for adding routes.
    */
   protected function alterRoutes(RouteCollection $collection) {
diff --git a/tests/modules/graphql_plugin_test/src/Plugin/GraphQL/Fields/Garage.php b/tests/modules/graphql_plugin_test/src/Plugin/GraphQL/Fields/Garage.php
index ee5f222..2cd05f9 100644
--- a/tests/modules/graphql_plugin_test/src/Plugin/GraphQL/Fields/Garage.php
+++ b/tests/modules/graphql_plugin_test/src/Plugin/GraphQL/Fields/Garage.php
@@ -26,7 +26,7 @@ class Garage extends FieldPluginBase implements ContainerFactoryPluginInterface
   /**
    * The garage instance.
    *
-   * @var \Drupal\graphql_plugin_test\GarageInterface
+   * @var GarageInterface
    */
   protected $garage;
 
@@ -46,7 +46,7 @@ class Garage extends FieldPluginBase implements ContainerFactoryPluginInterface
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\graphql_plugin_test\GarageInterface $garage
+   * @param GarageInterface $garage
    *   The garaga service.
    */
   public function __construct(array $configuration, $pluginId, $pluginDefinition, GarageInterface $garage) {
diff --git a/tests/modules/graphql_plugin_test/src/Plugin/GraphQL/Mutations/BuyCar.php b/tests/modules/graphql_plugin_test/src/Plugin/GraphQL/Mutations/BuyCar.php
index a2f2960..c782507 100644
--- a/tests/modules/graphql_plugin_test/src/Plugin/GraphQL/Mutations/BuyCar.php
+++ b/tests/modules/graphql_plugin_test/src/Plugin/GraphQL/Mutations/BuyCar.php
@@ -29,7 +29,7 @@ class BuyCar extends MutationPluginBase implements ContainerFactoryPluginInterfa
   /**
    * The garage.
    *
-   * @var \Drupal\graphql_plugin_test\GarageInterface
+   * @var GarageInterface
    */
   protected $garage;
 
@@ -49,7 +49,7 @@ class BuyCar extends MutationPluginBase implements ContainerFactoryPluginInterfa
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\graphql_plugin_test\GarageInterface $garage
+   * @param GarageInterface $garage
    *   The garage service.
    */
   public function __construct(array $configuration, $pluginId, $pluginDefinition, GarageInterface $garage) {
diff --git a/tests/src/Kernel/Extension/MutationTest.php b/tests/src/Kernel/Extension/MutationTest.php
index 3d14d3d..f2cae3a 100644
--- a/tests/src/Kernel/Extension/MutationTest.php
+++ b/tests/src/Kernel/Extension/MutationTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\graphql\Kernel\Extension;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\graphql_plugin_test\GarageInterface;
 use Drupal\Tests\graphql\Kernel\GraphQLTestBase;
 
@@ -11,6 +12,7 @@ use Drupal\Tests\graphql\Kernel\GraphQLTestBase;
  * @group graphql
  */
 class MutationTest extends GraphQLTestBase {
+  use ProphecyTrait;
   public static $modules = [
     'graphql_plugin_test',
   ];
diff --git a/tests/src/Kernel/Extension/OverrideTypeTest.php b/tests/src/Kernel/Extension/OverrideTypeTest.php
index 9f189b5..87c03b7 100644
--- a/tests/src/Kernel/Extension/OverrideTypeTest.php
+++ b/tests/src/Kernel/Extension/OverrideTypeTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\graphql\Kernel\Extension;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\graphql_plugin_test\GarageInterface;
 use Drupal\Tests\graphql\Kernel\GraphQLTestBase;
 
@@ -11,6 +12,7 @@ use Drupal\Tests\graphql\Kernel\GraphQLTestBase;
  * @group graphql
  */
 class OverrideTypeTest extends GraphQLTestBase {
+  use ProphecyTrait;
   public static $modules = [
     'graphql_plugin_test',
     'graphql_override_test',
diff --git a/tests/src/Kernel/Extension/RecursiveTypeTest.php b/tests/src/Kernel/Extension/RecursiveTypeTest.php
index 200a20c..d36fc8d 100644
--- a/tests/src/Kernel/Extension/RecursiveTypeTest.php
+++ b/tests/src/Kernel/Extension/RecursiveTypeTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\graphql\Kernel\Extension;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\graphql_plugin_test\GarageInterface;
 use Drupal\Tests\graphql\Kernel\GraphQLTestBase;
 
@@ -11,6 +12,7 @@ use Drupal\Tests\graphql\Kernel\GraphQLTestBase;
  * @group graphql
  */
 class RecursiveTypeTest extends GraphQLTestBase {
+  use ProphecyTrait;
   public static $modules = [
     'graphql_plugin_test',
   ];
diff --git a/tests/src/Kernel/Extension/TypeTest.php b/tests/src/Kernel/Extension/TypeTest.php
index 00b17da..6040f31 100644
--- a/tests/src/Kernel/Extension/TypeTest.php
+++ b/tests/src/Kernel/Extension/TypeTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\graphql\Kernel\Extension;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\graphql_plugin_test\GarageInterface;
 use Drupal\Tests\graphql\Kernel\GraphQLTestBase;
 
@@ -11,6 +12,7 @@ use Drupal\Tests\graphql\Kernel\GraphQLTestBase;
  * @group graphql
  */
 class TypeTest extends GraphQLTestBase {
+  use ProphecyTrait;
   public static $modules = [
     'graphql_plugin_test',
   ];
diff --git a/tests/src/Kernel/Framework/DisabledResultCacheTest.php b/tests/src/Kernel/Framework/DisabledResultCacheTest.php
index 7acb355..7a54d9d 100644
--- a/tests/src/Kernel/Framework/DisabledResultCacheTest.php
+++ b/tests/src/Kernel/Framework/DisabledResultCacheTest.php
@@ -26,6 +26,7 @@ class DisabledResultCacheTest extends GraphQLTestBase {
 
   /**
    * Test if disabling the result cache has the desired effect.
+   * @doesNotPerformAssertions
    */
   public function testDisabledCache() {
     $this->mockField('root', [
diff --git a/tests/src/Kernel/Framework/InvalidPayloadTest.php b/tests/src/Kernel/Framework/InvalidPayloadTest.php
index 5e6720a..3fa905d 100644
--- a/tests/src/Kernel/Framework/InvalidPayloadTest.php
+++ b/tests/src/Kernel/Framework/InvalidPayloadTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\graphql\Kernel\Framework;
 
+use Symfony\Component\HttpFoundation\Response;
 use Drupal\Tests\graphql\Kernel\GraphQLTestBase;
 use Symfony\Component\HttpFoundation\Request;
 
@@ -13,7 +14,7 @@ use Symfony\Component\HttpFoundation\Request;
 class InvalidPayloadTest extends GraphQLTestBase {
 
   public function testEmptyPayload() {
-    /** @var \Symfony\Component\HttpFoundation\Response $result */
+    /** @var Response $result */
     $result = $this->container->get('http_kernel')
       ->handle(Request::create('/graphql', 'POST', [], [], [], [], '{ invalid'));
     $this->assertJson($result->getContent(), json_encode([
diff --git a/tests/src/Kernel/Framework/LanguageContextTest.php b/tests/src/Kernel/Framework/LanguageContextTest.php
index 90191a5..8e40a61 100644
--- a/tests/src/Kernel/Framework/LanguageContextTest.php
+++ b/tests/src/Kernel/Framework/LanguageContextTest.php
@@ -23,7 +23,7 @@ class LanguageContextTest extends GraphQLTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->mockType('node', ['name' => 'Node']);
diff --git a/tests/src/Kernel/Framework/PermissionsTest.php b/tests/src/Kernel/Framework/PermissionsTest.php
index 01340a7..34c4a66 100644
--- a/tests/src/Kernel/Framework/PermissionsTest.php
+++ b/tests/src/Kernel/Framework/PermissionsTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\graphql\Kernel\Framework;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\graphql\GraphQL\QueryProvider\QueryProviderInterface;
 use Drupal\Tests\graphql\Kernel\GraphQLTestBase;
 use PhpParser\Node\Arg;
@@ -14,6 +15,7 @@ use Prophecy\Argument;
  */
 class PermissionsTest extends GraphQLTestBase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ -24,7 +26,7 @@ class PermissionsTest extends GraphQLTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->mockField('root', [
diff --git a/tests/src/Kernel/Framework/ResultCacheTest.php b/tests/src/Kernel/Framework/ResultCacheTest.php
index bbe0fec..910eb43 100644
--- a/tests/src/Kernel/Framework/ResultCacheTest.php
+++ b/tests/src/Kernel/Framework/ResultCacheTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\graphql\Kernel\Framework;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\MethodProphecy;
+use Drupal\Core\Render\RendererInterface;
 use Drupal\Core\Cache\Context\CacheContextsManager;
 use Drupal\Core\Cache\Context\ContextCacheKeys;
 use Drupal\graphql\GraphQL\Cache\CacheableValue;
@@ -16,8 +19,10 @@ use Prophecy\Argument;
  */
 class ResultCacheTest extends GraphQLTestBase {
 
+  use ProphecyTrait;
   /**
    * Check basic result caching.
+   * @doesNotPerformAssertions
    */
   public function testCacheableResult() {
     $this->mockField('root', [
@@ -43,6 +48,7 @@ class ResultCacheTest extends GraphQLTestBase {
 
   /**
    * Verify that uncacheable results are not cached.
+   * @doesNotPerformAssertions
    */
   public function testUncacheableResult() {
     $this->mockField('root', [
@@ -70,6 +76,7 @@ class ResultCacheTest extends GraphQLTestBase {
 
   /**
    * Verify that fields with uncacheable annotations are not cached.
+   * @doesNotPerformAssertions
    */
   public function testUncacheableResultAnnotation() {
     $this->mockField('root', [
@@ -96,6 +103,7 @@ class ResultCacheTest extends GraphQLTestBase {
 
   /**
    * Test if caching properly handles variabels.
+   * @doesNotPerformAssertions
    */
   public function testVariables() {
     $this->mockField('root', [
@@ -144,7 +152,7 @@ class ResultCacheTest extends GraphQLTestBase {
       ->willReturn(new ContextCacheKeys([]));
 
     // Store the method prophecy so we can replace the result on the fly.
-    /** @var \Prophecy\Prophecy\MethodProphecy $contextKeys */
+    /** @var MethodProphecy $contextKeys */
     $contextKeys = $contextManager->convertTokensToKeys($hasContext);
 
     $this->mockField('root', [
@@ -179,6 +187,7 @@ class ResultCacheTest extends GraphQLTestBase {
 
   /**
    * Test if results cache properly acts on cache tag clears.
+   * @doesNotPerformAssertions
    */
   public function testTags() {
     $this->mockField('root', [
@@ -266,7 +275,7 @@ class ResultCacheTest extends GraphQLTestBase {
    */
   public function testLeakingCacheMetadata() {
 
-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = $this->container->get('renderer');
 
     $this->mockField('leakA', [
diff --git a/tests/src/Kernel/Framework/ResultTest.php b/tests/src/Kernel/Framework/ResultTest.php
index ed5d9cb..04289e0 100644
--- a/tests/src/Kernel/Framework/ResultTest.php
+++ b/tests/src/Kernel/Framework/ResultTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\graphql\Kernel\Framework;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\graphql\GraphQL\QueryProvider\QueryProviderInterface;
 use Drupal\Tests\graphql\Kernel\GraphQLTestBase;
 use GraphQL\Server\OperationParams;
@@ -14,10 +15,11 @@ use Prophecy\Argument;
  */
 class ResultTest extends GraphQLTestBase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->mockField('root', [
       'name' => 'root',
diff --git a/tests/src/Kernel/Framework/SecureFieldTest.php b/tests/src/Kernel/Framework/SecureFieldTest.php
index 48ca0f1..e6b1517 100644
--- a/tests/src/Kernel/Framework/SecureFieldTest.php
+++ b/tests/src/Kernel/Framework/SecureFieldTest.php
@@ -27,7 +27,7 @@ class SecureFieldTest extends GraphQLTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->mockField('secure', [
diff --git a/tests/src/Kernel/Framework/UploadMutationTest.php b/tests/src/Kernel/Framework/UploadMutationTest.php
index 1509a94..7fc4bf8 100644
--- a/tests/src/Kernel/Framework/UploadMutationTest.php
+++ b/tests/src/Kernel/Framework/UploadMutationTest.php
@@ -3,6 +3,7 @@
 namespace Drupal\Tests\graphql\Kernel\Framework;
 
 
+use Symfony\Component\HttpFoundation\File\UploadedFile;
 use Drupal\Tests\graphql\Kernel\GraphQLTestBase;
 use Symfony\Component\HttpFoundation\Request;
 
@@ -29,7 +30,7 @@ class UploadMutationTest extends GraphQLTestBase {
       'arguments' => ['file' => 'Upload!'],
       'type' => 'String',
     ], function ($value, $args) {
-      /** @var \Symfony\Component\HttpFoundation\File\UploadedFile $file */
+      /** @var UploadedFile $file */
       $file = $args['file'];
       return $file->getClientOriginalName();
     });
diff --git a/tests/src/Kernel/GraphQLFileTestBase.php b/tests/src/Kernel/GraphQLFileTestBase.php
index 040ed34..5060234 100644
--- a/tests/src/Kernel/GraphQLFileTestBase.php
+++ b/tests/src/Kernel/GraphQLFileTestBase.php
@@ -28,7 +28,7 @@ abstract class GraphQLFileTestBase extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig('system');
     $this->installConfig('graphql');
diff --git a/tests/src/Kernel/GraphQLTestBase.php b/tests/src/Kernel/GraphQLTestBase.php
index 306c9c4..2f6f29b 100644
--- a/tests/src/Kernel/GraphQLTestBase.php
+++ b/tests/src/Kernel/GraphQLTestBase.php
@@ -96,7 +96,7 @@ abstract class GraphQLTestBase extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->injectTypeSystemPluginManagers($this->container);
 
diff --git a/tests/src/Traits/GraphQLFileTestTrait.php b/tests/src/Traits/GraphQLFileTestTrait.php
index a68ce72..cbbc887 100644
--- a/tests/src/Traits/GraphQLFileTestTrait.php
+++ b/tests/src/Traits/GraphQLFileTestTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\graphql\Traits;
 
+use Symfony\Component\HttpKernel\HttpKernelInterface;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
@@ -18,7 +19,7 @@ trait GraphQLFileTestTrait {
    *   The path to the collection of test query files.
    */
   protected function getQueriesDirectory() {
-    return drupal_get_path('module', explode('\\', get_class($this))[2]) . '/tests/queries';
+    return \Drupal::service('extension.list.module')->getPath(explode('\\', get_class($this))[2]) . '/tests/queries';
   }
 
   /**
@@ -68,7 +69,7 @@ trait GraphQLFileTestTrait {
       'variables' => $variables,
     ];
 
-    /** @var \Symfony\Component\HttpKernel\HttpKernelInterface $httpKernel */
+    /** @var HttpKernelInterface $httpKernel */
     $httpKernel = \Drupal::service('http_kernel');
     $response = $httpKernel->handle(Request::create('/graphql', 'POST', [], [], [], [], json_encode($content)));
     $data = json_decode($response->getContent(), TRUE);
diff --git a/tests/src/Traits/HttpRequestTrait.php b/tests/src/Traits/HttpRequestTrait.php
index 19a75ae..bf69350 100644
--- a/tests/src/Traits/HttpRequestTrait.php
+++ b/tests/src/Traits/HttpRequestTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\graphql\Traits;
 
+use Symfony\Component\HttpFoundation\Response;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
@@ -17,7 +18,7 @@ trait HttpRequestTrait {
    * @param array $variables
    *   Query variables.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The http response object.
    */
   protected function query($query, array $variables = []) {
@@ -35,7 +36,7 @@ trait HttpRequestTrait {
    * @param array $variables
    *   Query variables.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The http response object.
    */
   protected function persistedQuery($id, array $variables = []) {
@@ -51,7 +52,7 @@ trait HttpRequestTrait {
    * @param string[] $queries
    *   A set of queries to be executed in one go.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The http response object.
    */
   protected function batchedQueries($queries) {
diff --git a/tests/src/Traits/MockGraphQLPluginTrait.php b/tests/src/Traits/MockGraphQLPluginTrait.php
index 1d6f86e..83961d2 100644
--- a/tests/src/Traits/MockGraphQLPluginTrait.php
+++ b/tests/src/Traits/MockGraphQLPluginTrait.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\graphql\Traits;
 
+use PHPUnit\Framework\MockObject\Stub\ReturnCallback;
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Component\Plugin\Discovery\DerivativeDiscoveryDecorator;
 use Drupal\Component\Plugin\Discovery\DiscoveryInterface;
 use Drupal\Component\Plugin\Factory\FactoryInterface;
@@ -86,7 +88,7 @@ trait MockGraphQLPluginTrait {
    * Injects the mocked schema managers into the drupal container. Has to be
    * invoked during the KernelTest's register callback.
    *
-   * @param \Drupal\Core\DependencyInjection\ContainerBuilder $container
+   * @param ContainerBuilder $container
    *   The container instance.
    *
    * @throws \Exception
@@ -95,7 +97,7 @@ trait MockGraphQLPluginTrait {
   protected function injectTypeSystemPluginManagers(ContainerBuilder $container) {
     foreach ($this->graphQLPluginClassMap as $id => $class) {
       $this->graphQLPlugins[$class] = [];
-      /** @var \Drupal\Core\Plugin\DefaultPluginManager $manager */
+      /** @var DefaultPluginManager $manager */
       $manager = $container->get($id);
 
       $this->graphQLPluginManagers[$id] = $manager;
@@ -226,7 +228,7 @@ trait MockGraphQLPluginTrait {
   /**
    * Add a new plugin to the GraphQL type system.
    *
-   * @param \Drupal\Component\Plugin\PluginInspectionInterface $plugin
+   * @param PluginInspectionInterface $plugin
    *   The plugin to add.
    *
    * @internal
@@ -245,7 +247,7 @@ trait MockGraphQLPluginTrait {
    * @param mixed $value
    *   The return value. Can also be a value callback.
    *
-   * @return \PHPUnit_Framework_MockObject_Stub_ReturnCallback
+   * @return ReturnCallback
    *   The return callback promise.
    */
   protected function toPromise($value) {
@@ -262,7 +264,7 @@ trait MockGraphQLPluginTrait {
    * @param mixed $scope
    *   The resolver's bound object and class scope.
    *
-   * @return \PHPUnit_Framework_MockObject_Stub_ReturnCallback
+   * @return ReturnCallback
    *   The return callback promise.
    */
   protected function toBoundPromise($value, $scope) {
@@ -372,7 +374,7 @@ trait MockGraphQLPluginTrait {
    * @param mixed|null $applies
    *   A result for the types "applies" method. Defaults to `TRUE`.
    *
-   * @return \PHPUnit\Framework\MockObject\MockObject
+   * @return MockObject
    *   The type mock object.
    */
   protected function mockType($id, array $definition, $applies = TRUE, $builder = NULL) {
@@ -463,7 +465,7 @@ trait MockGraphQLPluginTrait {
    *   A result for this mutation. Can be a value or a callback. If omitted, no
    *   resolve method mock will be attached.
    *
-   * @return \PHPUnit\Framework\MockObject\MockObject
+   * @return MockObject
    *   The mutation mock object.
    */
   protected function mockMutation($id, array $definition, $result = NULL, $builder = NULL) {
@@ -513,7 +515,7 @@ trait MockGraphQLPluginTrait {
    * @param array $definition
    *   The plugin definition. Will be merged with the interface defaults.
    *
-   * @return \PHPUnit\Framework\MockObject\MockObject
+   * @return MockObject
    *   The interface mock object.
    */
   protected function mockInterface($id, array $definition, $builder = NULL) {
@@ -555,7 +557,7 @@ trait MockGraphQLPluginTrait {
    * @param array $definition
    *   The plugin definition. Will be merged with the union defaults.
    *
-   * @return \PHPUnit\Framework\MockObject\MockObject
+   * @return MockObject
    *   The union mock object.
    */
   protected function mockUnion($id, array $definition, $builder = NULL) {
diff --git a/tests/src/Traits/QueryFileTrait.php b/tests/src/Traits/QueryFileTrait.php
index e1e5310..baaa342 100644
--- a/tests/src/Traits/QueryFileTrait.php
+++ b/tests/src/Traits/QueryFileTrait.php
@@ -14,7 +14,7 @@ trait QueryFileTrait {
    *   The path to the collection of test query files.
    */
   protected function getQueriesDirectory() {
-    return drupal_get_path('module', explode('\\', get_class($this))[2]) . '/tests/queries';
+    return \Drupal::service('extension.list.module')->getPath(explode('\\', get_class($this))[2]) . '/tests/queries';
   }
 
   /**
diff --git a/tests/src/Traits/QueryResultAssertionTrait.php b/tests/src/Traits/QueryResultAssertionTrait.php
index afe9d12..4e5e122 100644
--- a/tests/src/Traits/QueryResultAssertionTrait.php
+++ b/tests/src/Traits/QueryResultAssertionTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\graphql\Traits;
 
+use Drupal\graphql\GraphQL\Execution\QueryProcessor;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\graphql\GraphQL\Execution\QueryResult;
 use GraphQL\Error\Error;
@@ -48,7 +49,7 @@ trait QueryResultAssertionTrait {
   /**
    * Retrieve the graphql processor.
    *
-   * @return \Drupal\graphql\GraphQL\Execution\QueryProcessor
+   * @return QueryProcessor
    *   The graphql processor service.
    */
   protected function graphQlProcessor() {
@@ -58,7 +59,7 @@ trait QueryResultAssertionTrait {
   /**
    * The default cache metadata object.
    *
-   * @return \Drupal\Core\Cache\CacheableMetadata
+   * @return CacheableMetadata
    *   The cache metadata object.
    */
   protected function defaultCacheMetaData() {
@@ -72,7 +73,7 @@ trait QueryResultAssertionTrait {
   /**
    * The default mutation cache metadata object.
    *
-   * @return \Drupal\Core\Cache\CacheableMetadata
+   * @return CacheableMetadata
    *   The cache metadata object.
    */
   protected function defaultMutationCacheMetaData() {
@@ -92,7 +93,7 @@ trait QueryResultAssertionTrait {
    *   The query variables.
    * @param array $expected
    *   The expected result.
-   * @param \Drupal\Core\Cache\CacheableMetadata $metadata
+   * @param CacheableMetadata $metadata
    *   The expected cache metadata object.
    */
   protected function assertResults($query, $variables, $expected, CacheableMetadata $metadata) {
@@ -118,7 +119,7 @@ trait QueryResultAssertionTrait {
    *   The query variables.
    * @param mixed $expected
    *   The expected error messages.
-   * @param \Drupal\Core\Cache\CacheableMetadata $metadata
+   * @param CacheableMetadata $metadata
    *   The expected cache metadata object.
    */
   protected function assertErrors($query, $variables, $expected, CacheableMetadata $metadata) {
@@ -137,7 +138,7 @@ trait QueryResultAssertionTrait {
   /**
    * Assert a certain result data set on a query result.
    *
-   * @param \Drupal\graphql\GraphQL\Execution\QueryResult $result
+   * @param QueryResult $result
    *   The query result object.
    * @param mixed $expected
    *   The expected result data set.
@@ -153,7 +154,7 @@ trait QueryResultAssertionTrait {
   /**
    * Assert that the result contains contains a certain set of errors.
    *
-   * @param \Drupal\graphql\GraphQL\Execution\QueryResult $result
+   * @param QueryResult $result
    *   The query result object.
    * @param array $expected
    *   The list of expected error messages. Also allows regular expressions.
@@ -204,9 +205,9 @@ trait QueryResultAssertionTrait {
   /**
    * Assert a certain set of result metadata on a query result.
    *
-   * @param \Drupal\graphql\GraphQL\Execution\QueryResult $result
+   * @param QueryResult $result
    *   The query result object.
-   * @param \Drupal\Core\Cache\CacheableMetadata $expected
+   * @param CacheableMetadata $expected
    *   The expected metadata object.
    *
    * @internal
diff --git a/tests/src/Unit/StringFormattingTest.php b/tests/src/Unit/StringFormattingTest.php
index 73ae563..1837e5e 100644
--- a/tests/src/Unit/StringFormattingTest.php
+++ b/tests/src/Unit/StringFormattingTest.php
@@ -12,11 +12,9 @@ use Drupal\Tests\UnitTestCase;
  */
 class StringFormattingTest extends UnitTestCase {
 
-  /**
-   * @expectedException \InvalidArgumentException
-   * @expectedExceptionMessageRegExp /Failed to create a specification compliant string representation for '.+'\./
-   */
   public function testFailureOnInvalidInput() {
+    $this->expectException(\InvalidArgumentException::class);
+    $this->expectExceptionMessageRegExp('/Failed to create a specification compliant string representation for \'.+\'\./');
     StringHelper::camelCase('^%!@#&');
   }
 
