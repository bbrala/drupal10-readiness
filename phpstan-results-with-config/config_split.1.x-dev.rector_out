modules/contrib/config_split/config_split.drush.inc
modules/contrib/config_split/config_split.install
modules/contrib/config_split/config_split.module
modules/contrib/config_split/src/Command/ExportCommand.php
modules/contrib/config_split/src/Command/ImportCommand.php
modules/contrib/config_split/src/Command/SplitCommandBase.php
modules/contrib/config_split/src/Commands/ConfigSplitCommands.php
modules/contrib/config_split/src/Config/GhostStorage.php
modules/contrib/config_split/src/ConfigSplitCliService.php
modules/contrib/config_split/src/ConfigSplitEntityHtmlRouteProvider.php
modules/contrib/config_split/src/ConfigSplitEntityListBuilder.php
modules/contrib/config_split/src/ConfigSplitEntityViewBuilder.php
modules/contrib/config_split/src/Controller/ConfigSplitController.php
modules/contrib/config_split/src/Entity/ConfigSplitEntity.php
modules/contrib/config_split/src/Entity/ConfigSplitEntityInterface.php
modules/contrib/config_split/src/Form/ConfigSplitEntityDeleteForm.php
modules/contrib/config_split/src/Form/ConfigSplitEntityForm.php
modules/contrib/config_split/src/Plugin/ConfigFilter/SplitFilter.php
modules/contrib/config_split/src/Plugin/ConfigFilter/SplitFilterDeriver.php
modules/contrib/config_split/src/Tests/GhostStorageTest.php
modules/contrib/config_split/src/Tests/SplitFilterTest.php
modules/contrib/config_split/tests/src/Kernel/ConfigSplitCliServiceTest.php
modules/contrib/config_split/tests/src/Kernel/ConfigSplitKernelTest.php
modules/contrib/config_split/tests/src/Kernel/IndividualExportImportTest.php
modules/contrib/config_split/tests/src/Kernel/SplitMergeTest.php
modules/contrib/config_split/tests/src/Kernel/SplitTestTrait.php

16 files with changes
=====================

1) modules/contrib/config_split/tests/src/Kernel/SplitTestTrait.php:20

    ---------- begin diff ----------
@@ @@
    * @param array $data
    *   The split config data.
    *
-   * @return \Drupal\Core\Config\Config
+   * @return Config
    *   The split config object.
    */
   protected function createSplitConfig(string $name, array $data): Config {
@@ @@
   /**
    * Get the storage for a split.
    *
-   * @param \Drupal\Core\Config\Config $config
+   * @param Config $config
    *   The split config.
    *
-   * @return \Drupal\Core\Config\StorageInterface
+   * @return StorageInterface
    *   The storage.
    */
   protected function getSplitSourceStorage(Config $config): StorageInterface {
@@ @@
   /**
    * Get the preview storage for a split.
    *
-   * @param \Drupal\Core\Config\Config $config
+   * @param Config $config
    *   The split config.
    *
-   * @return \Drupal\Core\Config\StorageInterface
+   * @return StorageInterface
    *   The storage.
    */
   protected function getSplitPreviewStorage(Config $config): StorageInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/config_split/tests/src/Kernel/IndividualExportImportTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\config_split\Kernel;

+use Drupal\Core\Config\Config;
 use Drupal\Core\Config\MemoryStorage;
 use Drupal\Core\Config\StorageInterface;
 use Drupal\KernelTests\KernelTestBase;
@@ @@
   /**
    * The split config.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $split;

@@ @@
   /**
    * Get the config which is expected to be split off.
    *
-   * @return \Drupal\Core\Config\StorageInterface
+   * @return StorageInterface
    *   The config storage with the data the split should have.
    */
   protected function getSplitExpectationStorage(): StorageInterface {
@@ @@
   /**
    * Get random data in a config storage.
    *
-   * @return \Drupal\Core\Config\StorageInterface
+   * @return StorageInterface
    *   The storage witrh random data.
    */
   protected function getRandomDataStorage(): StorageInterface {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/config_split/tests/src/Kernel/ConfigSplitKernelTest.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['config_test']);
   }
@@ @@
    * This method is the copy of how it worked prior to Drupal 9.4.
    * See https://www.drupal.org/node/3273823 for more details.
    *
-   * @param \Drupal\Core\Config\StorageInterface $source
+   * @param StorageInterface $source
    *   The configuration storage to copy from.
-   * @param \Drupal\Core\Config\StorageInterface $target
+   * @param StorageInterface $target
    *   The configuration storage to copy to.
    */
   private static function replaceAllStorageContents(StorageInterface $source, StorageInterface &$target) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/config_split/tests/src/Kernel/ConfigSplitCliServiceTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\config_split\Kernel;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\config\Controller\ConfigController;
 use Drupal\config_filter\Config\FilteredStorage;
 use Drupal\Core\Archiver\Tar;
@@ @@
  */
 class ConfigSplitCliServiceTest extends KernelTestBase {

+  use ProphecyTrait;
   /**
    * Modules to enable.
    *
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('user');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/config_split/src/Tests/SplitFilterTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\config_split\Tests;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\Core\Config\ConfigManagerInterface;
 use Drupal\config_split\Plugin\ConfigFilter\SplitFilter;
 use Drupal\Core\Config\DatabaseStorage;
 use Drupal\Core\Config\FileStorage;
@@ @@
  */
 class SplitFilterTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Test that the blacklist is correctly calculated.
    */
@@ @@
   /**
    * Returns a SplitFilter that can be used to test its behaviour.
    *
-   * @param \Drupal\Core\Config\StorageInterface|null $storage
+   * @param StorageInterface|null $storage
    *   The Storage interface the filter can use as its alternative storage.
    * @param string[] $blacklist
    *   The blacklisted configuration that is filtered out.
@@ @@
    * @param bool $skip_equal
    *   The flag to skip equal config in graylist exports.
    *
-   * @return \Drupal\config_split\Plugin\ConfigFilter\SplitFilter
+   * @return SplitFilter
    *   The filter to test.
    */
   protected function getFilter(StorageInterface $storage = NULL, array $blacklist = [], array $modules = [], array $themes = [], array $graylist = [], $name = 'config_split.config_split.test', $skip_equal = FALSE) {
@@ @@
    * @param array $themes
    *   The array of themes.
    *
-   * @return \Drupal\Core\Config\ConfigManagerInterface
+   * @return ConfigManagerInterface
    *   The mocked config manager.
    */
   protected function getConfigManagerMock(array $blacklist = [], array $graylist = [], array $modules = [], array $themes = []) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/config_split/src/Tests/GhostStorageTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\config_split\Tests;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\config_filter\Tests\ReadonlyStorageTest;
 use Drupal\config_split\Config\GhostStorage;
 use Drupal\Core\Config\StorageInterface;
@@ @@
  */
 class GhostStorageTest extends ReadonlyStorageTest {

+  use ProphecyTrait;
   /**
    * Override the storage decorating.
    *
-   * @param \Drupal\Core\Config\StorageInterface $source
+   * @param StorageInterface $source
    *   The storage to decorate.
    *
-   * @return \Drupal\config_split\Config\GhostStorage
+   * @return GhostStorage
    *   The storage to test.
    */
   protected function getStorage(StorageInterface $source) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/config_split/src/Plugin/ConfigFilter/SplitFilterDeriver.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The menu storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $entityStorage;

@@ @@
   /**
    * The config Factory to load the overridden configuration.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * SplitFilter constructor.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage to load the split entities from.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory to load the configuration including overrides from.
    */
   public function __construct(EntityStorageInterface $entity_storage, ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/config_split/src/Plugin/ConfigFilter/SplitFilter.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * The Configuration manager to calculate the dependencies.
    *
-   * @var \Drupal\Core\Config\ConfigManagerInterface
+   * @var ConfigManagerInterface
    */
   protected $manager;

@@ @@
   /**
    * The storage for the config which is not part of the directory to sync.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $secondaryStorage;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ConfigManagerInterface $manager
+   * @param ConfigManagerInterface $manager
    *   The config manager for retrieving dependent config.
-   * @param \Drupal\Core\Config\StorageInterface|null $secondary
+   * @param StorageInterface|null $secondary
    *   The config storage for the blacklisted config.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ConfigManagerInterface $manager, StorageInterface $secondary = NULL) {
@@ @@
    */
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
     // Get the configuration including overrides.
-    /** @var \Drupal\Core\Config\ImmutableConfig $config */
+    /** @var ImmutableConfig $config */
     $config = $container->get('config.factory')->get($configuration['config_name']);
     // Transfer the configuration values to the configuration array.
     $fields = [
@@ @@
   /**
    * Get the Secondary config storage that the split manages.
    *
-   * @param \Drupal\Core\Config\ImmutableConfig $config
+   * @param ImmutableConfig $config
    *   The configuration for the split.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection for creating a database storage.
    *
-   * @return \Drupal\Core\Config\StorageInterface
+   * @return StorageInterface
    *   The secondary storage to split to and from.
    */
   protected static function getSecondaryStorage(ImmutableConfig $config, Connection $connection) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/config_split/src/Form/ConfigSplitEntityForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\config_split\Form;

+use Drupal\config_split\Entity\ConfigSplitEntityInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Extension\ThemeHandlerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The drupal state.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * Drupal\Core\Extension\ThemeHandler definition.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
   /**
    * Constructs a new class instance.
    *
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The drupal state.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $themeHandler
+   * @param ThemeHandlerInterface $themeHandler
    *   The theme handler.
    */
   public function __construct(StateInterface $state, ThemeHandlerInterface $themeHandler) {
@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\config_split\Entity\ConfigSplitEntityInterface $config */
+    /** @var ConfigSplitEntityInterface $config */
     $config = $this->entity;
     $form['label'] = [
       '#type' => 'textfield',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/config_split/src/Controller/ConfigSplitController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\config_split\Controller;

+use Symfony\Component\HttpFoundation\RedirectResponse;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Controller\ControllerBase;

 /**
@@ @@
    * @param string $config_split
    *   The split name.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function enableEntity($config_split) {
     $entity = $this->entityTypeManager()->getStorage('config_split')->load($config_split);
@@ @@
    * @param string $config_split
    *   The split name.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function disableEntity($config_split) {
     $entity = $this->entityTypeManager()->getStorage('config_split')->load($config_split);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/config_split/src/ConfigSplitEntityViewBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\config_split;

+use Drupal\config_filter\Plugin\ConfigFilterPluginManager;
+use Drupal\config_split\Entity\ConfigSplitEntityInterface;
+use Drupal\config_split\Plugin\ConfigFilter\SplitFilter;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityViewBuilder;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The plugin manager for config filter plugins.
    *
-   * @var \Drupal\config_filter\Plugin\ConfigFilterPluginManager
+   * @var ConfigFilterPluginManager
    */
   protected $filterPluginManager;

@@ @@
    * {@inheritdoc}
    */
   public function viewMultiple(array $entities = [], $view_mode = 'full', $langcode = NULL) {
-    /** @var \Drupal\config_split\Entity\ConfigSplitEntityInterface[] $entities */
+    /** @var ConfigSplitEntityInterface[] $entities */
     $build = [];

     foreach ($entities as $entity_id => $entity) {
-      /** @var \Drupal\config_split\Plugin\ConfigFilter\SplitFilter $filter */
+      /** @var SplitFilter $filter */
       $filter = $this->filterPluginManager->getFilterInstance('config_split:' . $entity->id());

       // @todo: make this prettier.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/config_split/src/ConfigSplitEntityListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\config_split;

+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * The config factory that knows what is overwritten.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Constructs a new EntityListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, ConfigFactoryInterface $config_factory) {
@@ @@
    * {@inheritdoc}
    */
   public function getDefaultOperations(EntityInterface $entity) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+    /** @var ConfigEntityInterface $entity */
     $operations = parent::getDefaultOperations($entity);
     if (!$entity->get('status') && $entity->hasLinkTemplate('enable')) {
       $operations['enable'] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/config_split/src/ConfigSplitEntityHtmlRouteProvider.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/config_split/src/ConfigSplitCliService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\config_split;

+use Drupal\Core\Config\ConfigManager;
+use Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher;
+use Drupal\Core\ProxyClass\Lock\DatabaseLockBackend;
+use Drupal\Core\Config\TypedConfigManager;
+use Drupal\Core\Extension\ModuleHandler;
+use Drupal\Core\ProxyClass\Extension\ModuleInstaller;
+use Drupal\Core\Extension\ThemeHandler;
+use Drupal\Core\StringTranslation\TranslationManager;
+use Symfony\Component\Console\Style\StyleInterface;
 use Drupal\config_filter\Config\FilteredStorage;
 use Drupal\config_filter\Config\FilteredStorageInterface;
 use Drupal\config_filter\ConfigFilterManagerInterface;
@@ @@
   /**
    * The filter manager.
    *
-   * @var \Drupal\config_filter\ConfigFilterManagerInterface
+   * @var ConfigFilterManagerInterface
    */
   protected $configFilterManager;

@@ @@
   /**
    * The config filter storage factory.
    *
-   * @var \Drupal\config_filter\ConfigFilterStorageFactory
+   * @var ConfigFilterStorageFactory
    */
   protected $storageFactory;

@@ @@
   /**
    * Drupal\Core\Config\ConfigManager definition.
    *
-   * @var \Drupal\Core\Config\ConfigManager
+   * @var ConfigManager
    */
   protected $configManager;

@@ @@
   /**
    * Active Config Storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $activeStorage;

@@ @@
   /**
    * Sync Config Storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $syncStorage;

@@ @@
   /**
    * Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher definition.
    *
-   * @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher
+   * @var ContainerAwareEventDispatcher
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Drupal\Core\ProxyClass\Lock\DatabaseLockBackend definition.
    *
-   * @var \Drupal\Core\ProxyClass\Lock\DatabaseLockBackend
+   * @var DatabaseLockBackend
    */
   protected $lock;

@@ @@
   /**
    * Drupal\Core\Config\TypedConfigManager definition.
    *
-   * @var \Drupal\Core\Config\TypedConfigManager
+   * @var TypedConfigManager
    */
   protected $configTyped;

@@ @@
   /**
    * Drupal\Core\Extension\ModuleHandler definition.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;

@@ @@
   /**
    * Drupal\Core\ProxyClass\Extension\ModuleInstaller definition.
    *
-   * @var \Drupal\Core\ProxyClass\Extension\ModuleInstaller
+   * @var ModuleInstaller
    */
   protected $moduleInstaller;

@@ @@
   /**
    * Drupal\Core\Extension\ThemeHandler definition.
    *
-   * @var \Drupal\Core\Extension\ThemeHandler
+   * @var ThemeHandler
    */
   protected $themeHandler;

@@ @@
   /**
    * Drupal\Core\StringTranslation\TranslationManager definition.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationManager
+   * @var TranslationManager
    */
   protected $stringTranslation;

@@ @@
   /**
    * The ModuleExtensionList to be passed to the config importer.
    *
-   * @var \Drupal\Core\Extension\ModuleExtensionList
+   * @var ModuleExtensionList
    */
   protected $moduleExtensionList;

@@ @@
    *
    * @param string|null $split
    *   The split name to export, null for standard export.
-   * @param \Symfony\Component\Console\Style\StyleInterface|\ConfigSplitDrush8Io $io
+   * @param StyleInterface|\ConfigSplitDrush8Io $io
    *   The io interface of the cli tool calling the method.
    * @param callable $t
    *   The translation function akin to t().
@@ @@
    *
    * @param string|null $split
    *   The split name to import, null for standard import.
-   * @param \Symfony\Component\Console\Style\StyleInterface|\ConfigSplitDrush8Io $io
+   * @param StyleInterface|\ConfigSplitDrush8Io $io
    *   The $io interface of the cli tool calling.
    * @param callable $t
    *   The translation function akin to t().
@@ @@
    *
    * This is the quintessential config export.
    *
-   * @param \Drupal\Core\Config\StorageInterface $storage
+   * @param StorageInterface $storage
    *   The config storage to export to.
-   * @param \Drupal\Core\Config\StorageInterface|null $active
+   * @param StorageInterface|null $active
    *   The config storage to export from (optional).
    */
   public function export(StorageInterface $storage, StorageInterface $active = NULL) {
@@ @@
    *
    * This is the quintessential config import.
    *
-   * @param \Drupal\Core\Config\StorageInterface $storage
+   * @param StorageInterface $storage
    *   The config storage to import from.
    *
    * @return string
@@ @@
    * This method is the copy of how it worked prior to Drupal 9.4.
    * See https://www.drupal.org/node/3273823 for more details.
    *
-   * @param \Drupal\Core\Config\StorageInterface $source
+   * @param StorageInterface $source
    *   The configuration storage to copy from.
-   * @param \Drupal\Core\Config\StorageInterface $target
+   * @param StorageInterface $target
    *   The configuration storage to copy to.
    */
   protected static function replaceStorageContents(StorageInterface $source, StorageInterface &$target) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


15) modules/contrib/config_split/src/Commands/ConfigSplitCommands.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The interoperability cli service.
    *
-   * @var \Drupal\config_split\ConfigSplitCliService
+   * @var ConfigSplitCliService
    */
   protected $cliService;

@@ @@
   /**
    * ConfigSplitCommands constructor.
    *
-   * @param \Drupal\config_split\ConfigSplitCliService $cliService
+   * @param ConfigSplitCliService $cliService
    *   The CLI service which allows interoperability.
    */
   public function __construct(ConfigSplitCliService $cliService) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/config_split/config_split.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\config_split\Entity\ConfigSplitEntityInterface;
 /**
  * @file
  * Configuration split module functions.
@@ @@
   $active_filters = array_filter($active_filters, function ($filter) {
     return $filter['status'];
   });
-  /** @var \Drupal\config_split\Entity\ConfigSplitEntityInterface $config_split_entity */
+  /** @var ConfigSplitEntityInterface $config_split_entity */
   foreach ($config_split_entities as $config_split_entity) {
     if (in_array('config_split:' . $config_split_entity->id(), array_keys($active_filters))) {
       $enabled[] = Link::fromTextAndUrl($config_split_entity->label(), $config_split_entity->toUrl())->toString();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/config_split/src/Command/SplitCommandBase.php" file, due
         to:                                                                    
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/config_split/src/Command/ImportCommand.php" file, due 
         to:                                                                    
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/config_split/src/Command/ExportCommand.php" file, due 
         to:                                                                    
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

