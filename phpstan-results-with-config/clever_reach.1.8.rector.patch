diff --git a/lib/BusinessLogic/DTO/RecipientDTO.php b/lib/BusinessLogic/DTO/RecipientDTO.php
index 8d163ad..2aae79e 100644
--- a/lib/BusinessLogic/DTO/RecipientDTO.php
+++ b/lib/BusinessLogic/DTO/RecipientDTO.php
@@ -2,6 +2,8 @@
 
 namespace CleverReach\BusinessLogic\DTO;
 
+use CleverReach\BusinessLogic\Entity\Recipient;
+use CleverReach\BusinessLogic\Entity\TagCollection;
 /**
  * Class RecipientDTO.
  *
@@ -11,13 +13,13 @@ class RecipientDTO {
   /**
    * Recipient entity object.
    *
-   * @var \CleverReach\BusinessLogic\Entity\Recipient
+   * @var Recipient
    */
   private $recipientEntity;
   /**
    * Collection of tags for delete.
    *
-   * @var \CleverReach\BusinessLogic\Entity\TagCollection
+   * @var TagCollection
    */
   private $tagsForDelete;
   /**
@@ -42,9 +44,9 @@ class RecipientDTO {
   /**
    * RecipientDTO constructor.
    *
-   * @param \CleverReach\BusinessLogic\Entity\Recipient|null $recipientEntity
+   * @param Recipient|null $recipientEntity
    *   Recipient entity object.
-   * @param \CleverReach\BusinessLogic\Entity\TagCollection|null $tagsForDelete
+   * @param TagCollection|null $tagsForDelete
    *   Collection of tags for delete.
    * @param bool $shouldIncludeOrders
    *   Flag that indicates whether orders should sent or not.
@@ -70,7 +72,7 @@ class RecipientDTO {
   /**
    * Gets recipient entity.
    *
-   * @return \CleverReach\BusinessLogic\Entity\Recipient
+   * @return Recipient
    *   Recipient entity.
    */
   public function getRecipientEntity() {
@@ -80,7 +82,7 @@ class RecipientDTO {
   /**
    * Gets tags for delete.
    *
-   * @return \CleverReach\BusinessLogic\Entity\TagCollection
+   * @return TagCollection
    *   TagCollection entity.
    */
   public function getTagsForDelete() {
diff --git a/lib/BusinessLogic/Entity/AbstractTag.php b/lib/BusinessLogic/Entity/AbstractTag.php
index 1cd1173..44885b1 100644
--- a/lib/BusinessLogic/Entity/AbstractTag.php
+++ b/lib/BusinessLogic/Entity/AbstractTag.php
@@ -79,7 +79,7 @@ abstract class AbstractTag implements \Serializable {
    *
    * Does not compare object instances.
    *
-   * @param \CleverReach\BusinessLogic\Entity\Tag|string $tag
+   * @param Tag|string $tag
    *   Tag that needs to be compared.
    *
    * @return bool
diff --git a/lib/BusinessLogic/Entity/Recipient.php b/lib/BusinessLogic/Entity/Recipient.php
index 3f05eea..4409a65 100644
--- a/lib/BusinessLogic/Entity/Recipient.php
+++ b/lib/BusinessLogic/Entity/Recipient.php
@@ -648,7 +648,7 @@ class Recipient {
   /**
    * Get recipient integration tags.
    *
-   * @return \CleverReach\BusinessLogic\Entity\TagCollection
+   * @return TagCollection
    *   Integration specific tags.
    */
   public function getTags() {
@@ -658,7 +658,7 @@ class Recipient {
   /**
    * Set recipient integration tags.
    *
-   * @param \CleverReach\BusinessLogic\Entity\TagCollection|null $tags
+   * @param TagCollection|null $tags
    *   Integration specific tags.
    *
    * @see \CleverReach\BusinessLogic\Interfaces\Recipients
@@ -670,7 +670,7 @@ class Recipient {
   /**
    * Set recipient special tags.
    *
-   * @param \CleverReach\BusinessLogic\Entity\SpecialTagCollection|null $tags
+   * @param SpecialTagCollection|null $tags
    *   Special tags applicable to recipient.
    *
    * @see \CleverReach\BusinessLogic\Interfaces\Recipients
@@ -682,7 +682,7 @@ class Recipient {
   /**
    * Get recipient order item list.
    *
-   * @return \CleverReach\BusinessLogic\Entity\OrderItem[]
+   * @return OrderItem[]
    *   Order item list.
    */
   public function getOrders() {
@@ -692,7 +692,7 @@ class Recipient {
   /**
    * Recipient order item list.
    *
-   * @param \CleverReach\BusinessLogic\Entity\OrderItem[] $orders
+   * @param OrderItem[] $orders
    *   Order item list.
    */
   public function setOrders(array $orders) {
diff --git a/lib/BusinessLogic/Entity/SpecialTag.php b/lib/BusinessLogic/Entity/SpecialTag.php
index fb20662..460da02 100644
--- a/lib/BusinessLogic/Entity/SpecialTag.php
+++ b/lib/BusinessLogic/Entity/SpecialTag.php
@@ -89,7 +89,7 @@ class SpecialTag extends AbstractTag {
   /**
    * Gets collection of all valid special tags.
    *
-   * @return \CleverReach\BusinessLogic\Entity\SpecialTagCollection
+   * @return SpecialTagCollection
    *   Collection of all supported special tags.
    */
   public static function all() {
diff --git a/lib/BusinessLogic/Entity/SpecialTagCollection.php b/lib/BusinessLogic/Entity/SpecialTagCollection.php
index d8d0b8d..d078cbe 100644
--- a/lib/BusinessLogic/Entity/SpecialTagCollection.php
+++ b/lib/BusinessLogic/Entity/SpecialTagCollection.php
@@ -12,7 +12,7 @@ class SpecialTagCollection extends TagCollection {
   /**
    * SpecialTagCollection constructor.
    *
-   * @param \CleverReach\BusinessLogic\Entity\SpecialTag[] $tags
+   * @param SpecialTag[] $tags
    *   List of special tags.
    */
   public function __construct(array $tags = []) {
@@ -28,10 +28,10 @@ class SpecialTagCollection extends TagCollection {
   /**
    * Adds tag to collection if it does not exist.
    *
-   * @param \CleverReach\BusinessLogic\Entity\SpecialTag|AbstractTag $tag
+   * @param SpecialTag|AbstractTag $tag
    *   Special tag.
    *
-   * @return \CleverReach\BusinessLogic\Entity\TagCollection
+   * @return TagCollection
    *   List of special tags.
    */
   public function addTag($tag) {
diff --git a/lib/BusinessLogic/Entity/TagCollection.php b/lib/BusinessLogic/Entity/TagCollection.php
index 5b3bfe4..33900b1 100644
--- a/lib/BusinessLogic/Entity/TagCollection.php
+++ b/lib/BusinessLogic/Entity/TagCollection.php
@@ -11,7 +11,7 @@ class TagCollection implements \Iterator, \Countable, \Serializable {
   /**
    * List of tag objects.
    *
-   * @var \CleverReach\BusinessLogic\Entity\AbstractTag[]
+   * @var AbstractTag[]
    */
   private $tags;
   /**
@@ -27,7 +27,7 @@ class TagCollection implements \Iterator, \Countable, \Serializable {
    * Accepts list of @see \CleverReach\BusinessLogic\Entity\AbstractTag
    * instances to start with.
    *
-   * @param \CleverReach\BusinessLogic\Entity\AbstractTag[] $tags
+   * @param AbstractTag[] $tags
    *   List of tag objects.
    */
   public function __construct(array $tags = []) {
@@ -38,7 +38,7 @@ class TagCollection implements \Iterator, \Countable, \Serializable {
   /**
    * Adds tag to collection if it does not exist.
    *
-   * @param \CleverReach\BusinessLogic\Entity\AbstractTag|null $tag
+   * @param AbstractTag|null $tag
    *   Tag that needs to be added to a list.
    *
    * @return $this
@@ -73,7 +73,7 @@ class TagCollection implements \Iterator, \Countable, \Serializable {
   /**
    * Checks whether tag is already in this collection.
    *
-   * @param \CleverReach\BusinessLogic\Entity\AbstractTag|string $needle
+   * @param AbstractTag|string $needle
    *   The searched tag.
    *
    * @return bool
@@ -123,7 +123,7 @@ class TagCollection implements \Iterator, \Countable, \Serializable {
             $tagCollection->toArray(),
             function ($first, $second) {
                 /** @var \CleverReach\BusinessLogic\Entity\AbstractTag $first */
-                /** @var \CleverReach\BusinessLogic\Entity\AbstractTag $second */
+              /** @var AbstractTag $second */
               if ($first->isEqual($second)) {
                 return 0;
               }
@@ -167,7 +167,7 @@ class TagCollection implements \Iterator, \Countable, \Serializable {
   /**
    * Gets all tags as an array.
    *
-   * @return \CleverReach\BusinessLogic\Entity\AbstractTag[]
+   * @return AbstractTag[]
    *   Array representation of this collection.
    */
   public function toArray() {
diff --git a/lib/BusinessLogic/Interfaces/Attributes.php b/lib/BusinessLogic/Interfaces/Attributes.php
index 433ec3e..760edd5 100644
--- a/lib/BusinessLogic/Interfaces/Attributes.php
+++ b/lib/BusinessLogic/Interfaces/Attributes.php
@@ -2,6 +2,7 @@
 
 namespace CleverReach\BusinessLogic\Interfaces;
 
+use CleverReach\BusinessLogic\Entity\RecipientAttribute;
 /**
  * Interface Attributes.
  *
@@ -16,7 +17,7 @@ interface Attributes {
    *
    * It should set name, description, preview_value and default_value for each attribute available in system.
    *
-   * @return \CleverReach\BusinessLogic\Entity\RecipientAttribute[]
+   * @return RecipientAttribute[]
    *   List of available attributes in the system.
    */
   public function getAttributes();
diff --git a/lib/BusinessLogic/Interfaces/OrderItems.php b/lib/BusinessLogic/Interfaces/OrderItems.php
index 8dcb50f..90db1b3 100644
--- a/lib/BusinessLogic/Interfaces/OrderItems.php
+++ b/lib/BusinessLogic/Interfaces/OrderItems.php
@@ -2,6 +2,7 @@
 
 namespace CleverReach\BusinessLogic\Interfaces;
 
+use CleverReach\BusinessLogic\Entity\OrderItem;
 /**
  * Interface OrderItems.
  *
@@ -16,7 +17,7 @@ interface OrderItems {
    * @param string[]|null $orderItemsIds
    *   Array of order item IDs that needs to be fetched.
    *
-   * @return \CleverReach\BusinessLogic\Entity\OrderItem[]
+   * @return OrderItem[]
    *   Array of OrderItems that matches passed IDs.
    */
   public function getOrderItems($orderItemsIds);
diff --git a/lib/BusinessLogic/Interfaces/Proxy.php b/lib/BusinessLogic/Interfaces/Proxy.php
index 550d664..6ea6ae6 100644
--- a/lib/BusinessLogic/Interfaces/Proxy.php
+++ b/lib/BusinessLogic/Interfaces/Proxy.php
@@ -2,6 +2,7 @@
 
 namespace CleverReach\BusinessLogic\Interfaces;
 
+use CleverReach\Infrastructure\Utility\HttpResponse;
 /**
  * Interface Proxy.
  *
@@ -22,7 +23,7 @@ interface Proxy {
    * @param string $accessToken
    *   User access token.
    *
-   * @return \CleverReach\Infrastructure\Utility\HttpResponse
+   * @return HttpResponse
    *   Response object that contains status, headers and body.
    */
   public function call($method, $endpoint, $body = [], $accessToken = '');
diff --git a/lib/BusinessLogic/Interfaces/Recipients.php b/lib/BusinessLogic/Interfaces/Recipients.php
index 9612e35..32280e5 100644
--- a/lib/BusinessLogic/Interfaces/Recipients.php
+++ b/lib/BusinessLogic/Interfaces/Recipients.php
@@ -2,6 +2,10 @@
 
 namespace CleverReach\BusinessLogic\Interfaces;
 
+use CleverReach\BusinessLogic\Entity\TagCollection;
+use CleverReach\BusinessLogic\Entity\SpecialTagCollection;
+use CleverReach\BusinessLogic\Entity\Recipient;
+use CleverReach\Infrastructure\TaskExecution\Exceptions\RecipientsGetException;
 /**
  * Interface Recipients.
  *
@@ -13,7 +17,7 @@ interface Recipients {
   /**
    * Gets all tags as a collection.
    *
-   * @return \CleverReach\BusinessLogic\Entity\TagCollection
+   * @return TagCollection
    *   Collection of integration tags.
    */
   public function getAllTags();
@@ -21,7 +25,7 @@ interface Recipients {
   /**
    * Gets all special tags as a collection.
    *
-   * @return \CleverReach\BusinessLogic\Entity\SpecialTagCollection
+   * @return SpecialTagCollection
    *   Collection of integration supported special tags.
    */
   public function getAllSpecialTags();
@@ -38,12 +42,12 @@ interface Recipients {
    *   If includeOrders flag is set to true, orders should
    *   also be returned with other recipient data, otherwise not.
    *
-   * @return \CleverReach\BusinessLogic\Entity\Recipient[]
+   * @return Recipient[]
    *   Objects based on passed IDs.
    *
    * @see \CleverReach\BusinessLogic\Entity\Recipient
    *
-   * @throws \CleverReach\Infrastructure\TaskExecution\Exceptions\RecipientsGetException
+   * @throws RecipientsGetException
    *   When recipients can't be fetched.
    */
   public function getRecipientsWithTags(array $batchRecipientIds, $includeOrders);
@@ -54,7 +58,7 @@ interface Recipients {
    * @return string[]
    *   Array of recipient IDs.
    *
-   * @throws \CleverReach\Infrastructure\TaskExecution\Exceptions\RecipientsGetException
+   * @throws RecipientsGetException
    *   When recipients can't be fetched.
    */
   public function getAllRecipientsIds();
diff --git a/lib/BusinessLogic/Proxy.php b/lib/BusinessLogic/Proxy.php
index 016ab3f..45d09ba 100644
--- a/lib/BusinessLogic/Proxy.php
+++ b/lib/BusinessLogic/Proxy.php
@@ -2,6 +2,10 @@
 
 namespace CleverReach\BusinessLogic;
 
+use CleverReach\BusinessLogic\Entity\OrderItem;
+use CleverReach\Infrastructure\Utility\HttpResponse;
+use CleverReach\BusinessLogic\DTO\RecipientDTO;
+use CleverReach\BusinessLogic\Entity\TagCollection;
 use CleverReach\BusinessLogic\Entity\AuthInfo;
 use CleverReach\BusinessLogic\Entity\Recipient;
 use CleverReach\BusinessLogic\Entity\SpecialTag;
@@ -35,13 +39,13 @@ class Proxy implements ProxyInterface {
   /**
    * Instance of HttpClient service.
    *
-   * @var \CleverReach\Infrastructure\Interfaces\Required\HttpClient
+   * @var HttpClient
    */
   private $client;
   /**
    * Instance of Configuration service.
    *
-   * @var \CleverReach\Infrastructure\Interfaces\Required\Configuration
+   * @var Configuration
    */
   private $configService;
   /**
@@ -66,14 +70,14 @@ class Proxy implements ProxyInterface {
    *
    * @param string $recipientEmail
    *   email of recipient for update.
-   * @param \CleverReach\BusinessLogic\Entity\OrderItem[] $orderItems
+   * @param OrderItem[] $orderItems
    *   Order item that needs to be uploaded.
    *
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpAuthenticationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
+   * @throws InvalidConfigurationException
+   * @throws HttpAuthenticationException
+   * @throws HttpCommunicationException
+   * @throws HttpRequestException
+   * @throws RefreshTokenExpiredException
    */
   public function uploadOrderItems($recipientEmail, $orderItems) {
     $formattedRecipientForUpdate = [
@@ -90,14 +94,14 @@ class Proxy implements ProxyInterface {
   /**
    * Exchanges old access token for new refresh and access tokens.
    *
-   * @return \CleverReach\BusinessLogic\Entity\AuthInfo
+   * @return AuthInfo
    *   Authentication information object.
    *
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpAuthenticationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
+   * @throws HttpAuthenticationException
+   * @throws HttpCommunicationException
+   * @throws HttpRequestException
+   * @throws RefreshTokenExpiredException
+   * @throws InvalidConfigurationException
    */
   public function exchangeToken() {
     $uri = 'debug/exchange.json';
@@ -123,9 +127,9 @@ class Proxy implements ProxyInterface {
    * @return string
    *   If registration succeeds, returns call token.
    *
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
+   * @throws InvalidConfigurationException
+   * @throws HttpRequestException
+   * @throws RefreshTokenExpiredException
    */
   public function registerEventHandler($eventParameters) {
     $e = NULL;
@@ -167,11 +171,11 @@ class Proxy implements ProxyInterface {
    *   * event: entity name of events
    *   * verify: token for URL verification.
    *
-   * @return \CleverReach\Infrastructure\Utility\HttpResponse|null
+   * @return HttpResponse|null
    *   HTTP response of a call if successful; otherwise, null.
    *
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
+   * @throws InvalidConfigurationException
+   * @throws RefreshTokenExpiredException
    */
   protected function tryToRegisterNewEventHandler($eventParameters) {
     try {
@@ -197,8 +201,8 @@ class Proxy implements ProxyInterface {
    * @return bool
    *   True if call succeeded; otherwise, false.
    *
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
+   * @throws InvalidConfigurationException
+   * @throws RefreshTokenExpiredException
    */
   public function deleteReceiverEvent() {
     return $this->deleteEventHandler('receiver');
@@ -213,8 +217,8 @@ class Proxy implements ProxyInterface {
    * @return bool
    *   True if call succeeded; otherwise, false.
    *
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
+   * @throws InvalidConfigurationException
+   * @throws RefreshTokenExpiredException
    */
   protected function deleteEventHandler($eventName) {
     try {
@@ -245,14 +249,14 @@ class Proxy implements ProxyInterface {
    * @param array $body
    *   Associative array with request data that will be sent as body or query string.
    *
-   * @return \CleverReach\Infrastructure\Utility\HttpResponse
+   * @return HttpResponse
    *   HTTP response of a call.
    *
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpAuthenticationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
+   * @throws InvalidConfigurationException
+   * @throws HttpAuthenticationException
+   * @throws HttpCommunicationException
+   * @throws HttpRequestException
+   * @throws RefreshTokenExpiredException
    */
   protected function callWithoutApiVersion($method, $endpoint, array $body = []) {
     $apiVersion = $this->apiVersion;
@@ -271,14 +275,14 @@ class Proxy implements ProxyInterface {
    * @param string $poolId
    *   Recipient email or ID.
    *
-   * @return \CleverReach\BusinessLogic\Entity\Recipient
+   * @return Recipient
    *   Recipient object with data from CleverReach.
    *
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpAuthenticationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
+   * @throws HttpAuthenticationException
+   * @throws HttpCommunicationException
+   * @throws HttpRequestException
+   * @throws RefreshTokenExpiredException
+   * @throws InvalidConfigurationException
    */
   public function getRecipient($groupId, $poolId) {
     $sourceRecipient = $this->getRecipientAsArray($groupId, $poolId);
@@ -302,11 +306,11 @@ class Proxy implements ProxyInterface {
    * @return array
    *   Recipient fetched from CleverReach.
    *
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpAuthenticationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
+   * @throws InvalidConfigurationException
+   * @throws HttpAuthenticationException
+   * @throws HttpCommunicationException
+   * @throws HttpRequestException
+   * @throws RefreshTokenExpiredException
    */
   public function getRecipientAsArray($groupId, $poolId) {
     $response = $this->call('GET', 'groups.json/' . $groupId . '/receivers/' . $poolId);
@@ -329,11 +333,11 @@ class Proxy implements ProxyInterface {
    * @return bool
    *   True if request succeeded; otherwise, false.
    *
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpAuthenticationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
+   * @throws InvalidConfigurationException
+   * @throws HttpAuthenticationException
+   * @throws HttpCommunicationException
+   * @throws HttpRequestException
+   * @throws RefreshTokenExpiredException
    */
   public function deleteRecipient($groupId, $poolId) {
     $response = $this->call('DELETE', 'groups.json/' . $groupId . '/receivers/' . $poolId);
@@ -354,11 +358,11 @@ class Proxy implements ProxyInterface {
    *   If found returns group ID, otherwise null.
    *
    * @throws \InvalidArgumentException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpAuthenticationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
+   * @throws HttpAuthenticationException
+   * @throws HttpCommunicationException
+   * @throws HttpRequestException
+   * @throws RefreshTokenExpiredException
+   * @throws InvalidConfigurationException
    */
   public function getGroupId($serviceName) {
     $response = $this->call('GET', 'groups.json');
@@ -389,11 +393,11 @@ class Proxy implements ProxyInterface {
    *   Group ID on CleverReach.
    *
    * @throws \InvalidArgumentException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpAuthenticationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
+   * @throws HttpAuthenticationException
+   * @throws HttpCommunicationException
+   * @throws HttpRequestException
+   * @throws RefreshTokenExpiredException
+   * @throws InvalidConfigurationException
    */
   public function createGroup($name) {
     if (empty($name)) {
@@ -413,7 +417,7 @@ class Proxy implements ProxyInterface {
   /**
    * Creates new filter on CleverReach.
    *
-   * @param \CleverReach\BusinessLogic\Utility\Filter $filter
+   * @param Filter $filter
    *   Filter that needs to be created.
    * @param int $integrationID
    *   CleverReach integration ID.
@@ -422,11 +426,11 @@ class Proxy implements ProxyInterface {
    *   Associative array that contains ID of created filter.
    *
    * @throws \InvalidArgumentException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpAuthenticationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
+   * @throws HttpAuthenticationException
+   * @throws HttpCommunicationException
+   * @throws HttpRequestException
+   * @throws RefreshTokenExpiredException
+   * @throws InvalidConfigurationException
    */
   public function createFilter(Filter $filter, $integrationID) {
     if (!is_numeric($integrationID)) {
@@ -456,11 +460,11 @@ class Proxy implements ProxyInterface {
    *   On success return true, otherwise false.
    *
    * @throws \InvalidArgumentException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpAuthenticationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
+   * @throws HttpAuthenticationException
+   * @throws HttpCommunicationException
+   * @throws HttpRequestException
+   * @throws RefreshTokenExpiredException
+   * @throws InvalidConfigurationException
    */
   public function deleteFilter($filterID, $integrationID) {
     if (!is_numeric($filterID) || !is_numeric($integrationID)) {
@@ -482,15 +486,15 @@ class Proxy implements ProxyInterface {
    * @param int $integrationId
    *   CleverReach integration ID.
    *
-   * @return \CleverReach\BusinessLogic\Utility\Filter[]
+   * @return Filter[]
    *   List of filter objects.
    *
    * @throws \InvalidArgumentException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpAuthenticationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
+   * @throws HttpAuthenticationException
+   * @throws HttpCommunicationException
+   * @throws HttpRequestException
+   * @throws RefreshTokenExpiredException
+   * @throws InvalidConfigurationException
    */
   public function getAllFilters($integrationId) {
     $response = $this->call('GET', 'groups.json/' . $integrationId . '/filters');
@@ -505,7 +509,7 @@ class Proxy implements ProxyInterface {
    * @param array|null $allSegments
    *   Segments retrieved from CleverReach.
    *
-   * @return \CleverReach\BusinessLogic\Utility\Filter[]
+   * @return Filter[]
    *   List of filter objects.
    */
   private function formatAllFilters($allSegments) {
@@ -551,11 +555,11 @@ class Proxy implements ProxyInterface {
    *   Associative array where key is attribute name and value is attribute ID.
    *
    * @throws \InvalidArgumentException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpAuthenticationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
+   * @throws HttpAuthenticationException
+   * @throws HttpCommunicationException
+   * @throws HttpRequestException
+   * @throws RefreshTokenExpiredException
+   * @throws InvalidConfigurationException
    */
   public function getAllGlobalAttributes() {
     $response = $this->call('GET', 'attributes.json');
@@ -588,11 +592,11 @@ class Proxy implements ProxyInterface {
    *   Attribute that needs to be created.
    *
    * @throws \InvalidArgumentException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpAuthenticationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
+   * @throws HttpAuthenticationException
+   * @throws HttpCommunicationException
+   * @throws HttpRequestException
+   * @throws RefreshTokenExpiredException
+   * @throws InvalidConfigurationException
    */
   public function createGlobalAttribute($attribute) {
     try {
@@ -633,11 +637,11 @@ class Proxy implements ProxyInterface {
    *   Attribute data to be updated.
    *
    * @throws \InvalidArgumentException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpAuthenticationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
+   * @throws HttpAuthenticationException
+   * @throws HttpCommunicationException
+   * @throws HttpRequestException
+   * @throws RefreshTokenExpiredException
+   * @throws InvalidConfigurationException
    */
   public function updateGlobalAttribute($id, $attribute) {
     $response = $this->call('PUT', 'attributes.json/' . $id, $attribute);
@@ -667,11 +671,11 @@ class Proxy implements ProxyInterface {
    *   ID of registered content.
    *
    * @throws \InvalidArgumentException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpAuthenticationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
+   * @throws HttpCommunicationException
+   * @throws HttpRequestException
+   * @throws HttpAuthenticationException
+   * @throws RefreshTokenExpiredException
+   * @throws InvalidConfigurationException
    */
   public function addOrUpdateProductSearch($data) {
     try {
@@ -714,11 +718,11 @@ class Proxy implements ProxyInterface {
    *
    * @return string ID of registered content.
    *
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpAuthenticationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
+   * @throws InvalidConfigurationException
+   * @throws HttpAuthenticationException
+   * @throws HttpCommunicationException
+   * @throws HttpRequestException
+   * @throws RefreshTokenExpiredException
    */
   private function resolveProductSearchEndpointConflict($data) {
     $response = $this->call('GET', 'mycontent.json');
@@ -752,10 +756,10 @@ class Proxy implements ProxyInterface {
    * @return bool
    *   On success return true, otherwise false.
    *
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpAuthenticationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
+   * @throws InvalidConfigurationException
+   * @throws HttpAuthenticationException
+   * @throws HttpCommunicationException
+   * @throws RefreshTokenExpiredException
    */
   public function deleteProductSearchEndpoint($id) {
     try {
@@ -777,12 +781,12 @@ class Proxy implements ProxyInterface {
    *   Array of objects @see \CleverReach\BusinessLogic\DTO\RecipientDTO.
    *
    * @throws \InvalidArgumentException
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpAuthenticationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpBatchSizeTooBigException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
+   * @throws InvalidConfigurationException
+   * @throws HttpAuthenticationException
+   * @throws HttpBatchSizeTooBigException
+   * @throws HttpCommunicationException
+   * @throws HttpRequestException
+   * @throws RefreshTokenExpiredException
    */
   public function recipientsMassUpdate(array $recipients) {
     $formattedRecipients = $this->prepareRecipientsForApiCall($recipients);
@@ -806,11 +810,11 @@ class Proxy implements ProxyInterface {
    *   Array of recipient emails.
    *
    * @throws \InvalidArgumentException
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpAuthenticationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
+   * @throws InvalidConfigurationException
+   * @throws HttpAuthenticationException
+   * @throws HttpCommunicationException
+   * @throws HttpRequestException
+   * @throws RefreshTokenExpiredException
    *
    * @deprecated
    */
@@ -824,16 +828,16 @@ class Proxy implements ProxyInterface {
   /**
    * Deactivates recipients.
    *
-   * @param \CleverReach\BusinessLogic\Entity\Recipient[] $recipients
+   * @param Recipient[] $recipients
    *   Array of recipient entities.
    *
    * @throws \InvalidArgumentException
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpAuthenticationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
+   * @throws InvalidConfigurationException
+   * @throws InvalidConfigurationException
+   * @throws HttpAuthenticationException
+   * @throws HttpCommunicationException
+   * @throws HttpRequestException
+   * @throws RefreshTokenExpiredException
    */
   public function deactivateRecipients($recipients) {
     $receiversForDeactivation = $this->getReceiversForDeactivation($recipients);
@@ -848,7 +852,7 @@ class Proxy implements ProxyInterface {
   /**
    * Prepares all recipients in a format needed for API call.
    *
-   * @param \CleverReach\BusinessLogic\DTO\RecipientDTO[] $recipientDTOs
+   * @param RecipientDTO[] $recipientDTOs
    *   Array of objects @see \CleverReach\BusinessLogic\DTO\RecipientDTO.
    *
    * @return array
@@ -857,9 +861,9 @@ class Proxy implements ProxyInterface {
   private function prepareRecipientsForApiCall(array $recipientDTOs) {
     $formattedRecipients = [];
 
-    /** @var \CleverReach\BusinessLogic\DTO\RecipientDTO $recipientDTO */
+    /** @var RecipientDTO $recipientDTO */
     foreach ($recipientDTOs as $recipientDTO) {
-      /** @var \CleverReach\BusinessLogic\Entity\Recipient $recipientEntity */
+      /** @var Recipient $recipientEntity */
       $recipientEntity = $recipientDTO->getRecipientEntity();
       $registered = $recipientEntity->getRegistered();
 
@@ -925,7 +929,7 @@ class Proxy implements ProxyInterface {
   /**
    * Formats recipient global attributes to appropriate format for sending.
    *
-   * @param \CleverReach\BusinessLogic\Entity\Recipient $recipient
+   * @param Recipient $recipient
    *   Recipient object.
    *
    * @return array
@@ -962,7 +966,7 @@ class Proxy implements ProxyInterface {
   /**
    * Formats list of order objects to CleverReach API format.
    *
-   * @param \CleverReach\BusinessLogic\Entity\OrderItem[] $orders
+   * @param OrderItem[] $orders
    *   List of order objects.
    *
    * @return array
@@ -971,7 +975,7 @@ class Proxy implements ProxyInterface {
   private function formatOrdersForApiCall(array $orders) {
     $formattedOrders = [];
 
-    /** @var \CleverReach\BusinessLogic\Entity\OrderItem $order */
+    /** @var OrderItem $order */
     foreach ($orders as $order) {
       $formattedOrders[] = $this->getOrderFormattedForRequest($order);
     }
@@ -982,7 +986,7 @@ class Proxy implements ProxyInterface {
   /**
    * Formats single order object to CleverReach API format.
    *
-   * @param \CleverReach\BusinessLogic\Entity\OrderItem|null $orderItem
+   * @param OrderItem|null $orderItem
    *   Order object.
    *
    * @return array
@@ -1017,9 +1021,9 @@ class Proxy implements ProxyInterface {
   /**
    * Format and merge tags that already exist with tags for delete.
    *
-   * @param \CleverReach\BusinessLogic\Entity\TagCollection|null $recipientTags
+   * @param TagCollection|null $recipientTags
    *   Existing tags.
-   * @param \CleverReach\BusinessLogic\Entity\TagCollection|null $tagsForDelete
+   * @param TagCollection|null $tagsForDelete
    *   Tags for delete.
    *
    * @return array
@@ -1034,12 +1038,12 @@ class Proxy implements ProxyInterface {
   /**
    * Validates if update was successful.
    *
-   * @param \CleverReach\Infrastructure\Utility\HttpResponse|null $response
+   * @param HttpResponse|null $response
    *   Http response object.
    * @param array|null $recipientDTOs
    *   List of recipient DTOs.
    *
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
+   * @throws HttpRequestException
    */
   private function checkMassUpdateRequestSuccess($response, $recipientDTOs) {
     $responseBody = json_decode($response->getBody(), TRUE);
@@ -1055,13 +1059,13 @@ class Proxy implements ProxyInterface {
   /**
    * Checks if request is successful for passed batch size.
    *
-   * @param \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException $ex
+   * @param HttpRequestException $ex
    *   Exception object.
    * @param int $batchSize
    *   Test batch size.
    *
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpBatchSizeTooBigException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpBatchSizeTooBigException
+   * @throws HttpBatchSizeTooBigException
+   * @throws HttpBatchSizeTooBigException
    */
   private function checkMassUpdateBatchSizeValidity($ex, $batchSize) {
     if ($ex->getCode() === self::HTTP_STATUS_CODE_NOT_SUCCESSFUL_FOR_DEFINED_BATCH_SIZE) {
@@ -1083,10 +1087,10 @@ class Proxy implements ProxyInterface {
    *   Associative array that contains CleverReach user information.
    *
    * @throws \InvalidArgumentException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
+   * @throws HttpCommunicationException
+   * @throws HttpRequestException
+   * @throws RefreshTokenExpiredException
+   * @throws InvalidConfigurationException
    */
   public function getUserInfo($accessToken) {
     try {
@@ -1130,12 +1134,12 @@ class Proxy implements ProxyInterface {
   /**
    * Validates response for newsletter status update.
    *
-   * @param \CleverReach\Infrastructure\Utility\HttpResponse|null $response
+   * @param HttpResponse|null $response
    *   Http response object.
    * @param array|null $emails
    *   List of recipient emails for update.
    *
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
+   * @throws HttpRequestException
    */
   private function checkUpdateNewsletterStatusRecipientsResponse($response, $emails) {
     $responseBody = json_decode($response->getBody(), TRUE);
@@ -1150,7 +1154,7 @@ class Proxy implements ProxyInterface {
   /**
    * Prepares request data for deactivating recipients.
    *
-   * @param \CleverReach\BusinessLogic\Entity\Recipient[] $recipients
+   * @param Recipient[] $recipients
    *   List of recipients.
    *
    * @return array
@@ -1176,12 +1180,12 @@ class Proxy implements ProxyInterface {
   /**
    * Checks if operation executed successfully.
    *
-   * @param \CleverReach\Infrastructure\Utility\HttpResponse|null $response
+   * @param HttpResponse|null $response
    *   Http response object.
    * @param array|null $recipients
    *   List of recipients.
    *
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
+   * @throws HttpRequestException
    */
   private function checkDeactivateRecipientsResponse($response, $recipients) {
     $responseBody = json_decode($response->getBody(), TRUE);
@@ -1206,11 +1210,11 @@ class Proxy implements ProxyInterface {
    * @inheritdoc
    *
    * @throws \InvalidArgumentException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpAuthenticationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
+   * @throws HttpAuthenticationException
+   * @throws HttpCommunicationException
+   * @throws HttpRequestException
+   * @throws RefreshTokenExpiredException
+   * @throws InvalidConfigurationException
    */
   public function call($method, $endpoint, $body = [], $accessToken = '') {
     $accessToken = $this->getValidAccessToken($accessToken);
@@ -1248,10 +1252,10 @@ class Proxy implements ProxyInterface {
    * @param string $redirectUrl
    *   Url for callback.
    *
-   * @return \CleverReach\BusinessLogic\Entity\AuthInfo Authentication information object.
+   * @return AuthInfo Authentication information object.
    *
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException
-   * @throws \CleverReach\Infrastructure\Exceptions\BadAuthInfoException
+   * @throws HttpCommunicationException
+   * @throws BadAuthInfoException
    */
   public function getAuthInfo($code, $redirectUrl) {
     $header = [
@@ -1317,11 +1321,11 @@ class Proxy implements ProxyInterface {
   /**
    * Validate response.
    *
-   * @param \CleverReach\Infrastructure\Utility\HttpResponse|null $response
+   * @param HttpResponse|null $response
    *   Http response.
    *
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpAuthenticationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
+   * @throws HttpAuthenticationException
+   * @throws HttpRequestException
    */
   protected function validateResponse($response) {
     $httpCode = $response->getStatus();
@@ -1358,15 +1362,15 @@ class Proxy implements ProxyInterface {
    * @param array|null $receivers
    *   CleverReach receivers.
    *
-   * @return \CleverReach\Infrastructure\Utility\HttpResponse
+   * @return HttpResponse
    *   Http response object.
    *
    * @throws \InvalidArgumentException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpAuthenticationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
+   * @throws HttpAuthenticationException
+   * @throws HttpCommunicationException
+   * @throws HttpRequestException
+   * @throws RefreshTokenExpiredException
+   * @throws InvalidConfigurationException
    */
   private function upsertPlus($receivers) {
     return $this->call(
@@ -1379,7 +1383,7 @@ class Proxy implements ProxyInterface {
   /**
    * Get instance of http client.
    *
-   * @return \CleverReach\Infrastructure\Interfaces\Required\HttpClient
+   * @return HttpClient
    *   Http client object.
    *
    * @throws \InvalidArgumentException
@@ -1427,12 +1431,12 @@ class Proxy implements ProxyInterface {
   /**
    * Process deleting failed response.
    *
-   * @param \CleverReach\Infrastructure\Utility\HttpResponse|null $response
+   * @param HttpResponse|null $response
    *   Http response.
    * @param string $entity
    *   Entity code.
    *
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
+   * @throws HttpRequestException
    */
   private function processDeletingFailedResponse($response, $entity) {
     // Invalid API response.
@@ -1459,9 +1463,9 @@ class Proxy implements ProxyInterface {
    * @return string
    *   Valid access token.
    *
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException
+   * @throws RefreshTokenExpiredException
+   * @throws InvalidConfigurationException
+   * @throws HttpCommunicationException
    */
   private function getValidAccessToken($token) {
     if (empty($token)) {
@@ -1500,9 +1504,9 @@ class Proxy implements ProxyInterface {
    * @return array
    *   An associative array with tokens
    *
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
+   * @throws RefreshTokenExpiredException
+   * @throws HttpCommunicationException
+   * @throws InvalidConfigurationException
    */
   private function refreshAccessToken() {
     $refreshToken = $this->configService->getRefreshToken();
@@ -1545,7 +1549,7 @@ class Proxy implements ProxyInterface {
    *   Status code.
    * @param null $previousException
    *
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
+   * @throws HttpRequestException
    */
   private function logAndThrowHttpRequestException($message, $code = 0, $previousException = NULL) {
     Logger::logError($message);
diff --git a/lib/BusinessLogic/Sync/AttributesSyncTask.php b/lib/BusinessLogic/Sync/AttributesSyncTask.php
index fe67196..de4d603 100644
--- a/lib/BusinessLogic/Sync/AttributesSyncTask.php
+++ b/lib/BusinessLogic/Sync/AttributesSyncTask.php
@@ -2,6 +2,11 @@
 
 namespace CleverReach\BusinessLogic\Sync;
 
+use CleverReach\Infrastructure\Exceptions\InvalidConfigurationException;
+use CleverReach\Infrastructure\Utility\Exceptions\HttpAuthenticationException;
+use CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException;
+use CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException;
+use CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException;
 use CleverReach\BusinessLogic\Entity\RecipientAttribute;
 use CleverReach\BusinessLogic\Interfaces\Attributes;
 use CleverReach\BusinessLogic\Utility\Helper;
@@ -67,11 +72,11 @@ class AttributesSyncTask extends BaseSyncTask {
   /**
    * Runs task execution.
    *
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpAuthenticationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
+   * @throws InvalidConfigurationException
+   * @throws HttpAuthenticationException
+   * @throws HttpCommunicationException
+   * @throws HttpRequestException
+   * @throws RefreshTokenExpiredException
    */
   public function execute() {
     $globalAttributes = $this->getGlobalAttributesIdsFromCleverReach();
@@ -111,11 +116,11 @@ class AttributesSyncTask extends BaseSyncTask {
    * @return array
    *   Array of global attribute IDs on CleverReach.
    *
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpAuthenticationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
+   * @throws InvalidConfigurationException
+   * @throws HttpAuthenticationException
+   * @throws HttpCommunicationException
+   * @throws HttpRequestException
+   * @throws RefreshTokenExpiredException
    */
   private function getGlobalAttributesIdsFromCleverReach() {
     if (empty($this->globalAttributesIdsFromCR)) {
@@ -144,7 +149,7 @@ class AttributesSyncTask extends BaseSyncTask {
    *   Array of global attributes supported by integration.
    */
   private function getAllAttributes() {
-    /** @var \CleverReach\BusinessLogic\Interfaces\Attributes $attributesService */
+    /** @var Attributes $attributesService */
     $attributesService = ServiceRegister::getService(Attributes::CLASS_NAME);
     $integrationAttributes = $attributesService->getAttributes();
     $attributesToSend = [];
@@ -162,7 +167,7 @@ class AttributesSyncTask extends BaseSyncTask {
   /**
    * Return formatted attribute.
    *
-   * @param \CleverReach\BusinessLogic\Entity\RecipientAttribute $attribute
+   * @param RecipientAttribute $attribute
    *   Attribute entity returned from AttributeService.
    *
    * @return array
diff --git a/lib/BusinessLogic/Sync/BaseSyncTask.php b/lib/BusinessLogic/Sync/BaseSyncTask.php
index b7bffe0..d39805a 100644
--- a/lib/BusinessLogic/Sync/BaseSyncTask.php
+++ b/lib/BusinessLogic/Sync/BaseSyncTask.php
@@ -15,7 +15,7 @@ abstract class BaseSyncTask extends Task {
   /**
    * Instance of proxy class.
    *
-   * @var \CleverReach\BusinessLogic\Interfaces\Proxy
+   * @var Proxy
    */
   private $proxy;
 
diff --git a/lib/BusinessLogic/Sync/CampaignOrderSync.php b/lib/BusinessLogic/Sync/CampaignOrderSync.php
index 907ec9a..47dd159 100644
--- a/lib/BusinessLogic/Sync/CampaignOrderSync.php
+++ b/lib/BusinessLogic/Sync/CampaignOrderSync.php
@@ -2,6 +2,12 @@
 
 namespace CleverReach\BusinessLogic\Sync;
 
+use CleverReach\Infrastructure\Exceptions\InvalidConfigurationException;
+use CleverReach\Infrastructure\Utility\Exceptions\HttpAuthenticationException;
+use CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException;
+use CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException;
+use CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException;
+use CleverReach\BusinessLogic\Entity\OrderItem;
 use CleverReach\BusinessLogic\Interfaces\OrderItems;
 use CleverReach\Infrastructure\ServiceRegister;
 
@@ -51,11 +57,11 @@ class CampaignOrderSync extends BaseSyncTask {
   /**
    * Runs task execution.
    *
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpAuthenticationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
+   * @throws InvalidConfigurationException
+   * @throws HttpAuthenticationException
+   * @throws HttpCommunicationException
+   * @throws HttpRequestException
+   * @throws RefreshTokenExpiredException
    */
   public function execute() {
     $this->reportProgress(self::INITIAL_PROGRESS_PERCENT);
@@ -76,7 +82,7 @@ class CampaignOrderSync extends BaseSyncTask {
   /**
    * Iterate through passed OrderItems and sets mailing ID.
    *
-   * @param \CleverReach\BusinessLogic\Entity\OrderItem[]|null $orderItems
+   * @param OrderItem[]|null $orderItems
    *   array of Order item object.
    */
   private function setMailingIds($orderItems) {
@@ -92,14 +98,14 @@ class CampaignOrderSync extends BaseSyncTask {
   /**
    * Update recipient with with purchase information.
    *
-   * @param \CleverReach\BusinessLogic\Entity\OrderItem[] $orderItems
+   * @param OrderItem[] $orderItems
    *   array of OrderItem objects fetched from OrderItemsService.
    *
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpAuthenticationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
+   * @throws InvalidConfigurationException
+   * @throws HttpAuthenticationException
+   * @throws HttpCommunicationException
+   * @throws HttpRequestException
+   * @throws RefreshTokenExpiredException
    */
   private function updateRecipientWithOrderItemsInformation($orderItems) {
     $firstItem = $this->getFirstOrderItem($orderItems);
@@ -111,10 +117,10 @@ class CampaignOrderSync extends BaseSyncTask {
   /**
    * Returns first item from array.
    *
-   * @param \CleverReach\BusinessLogic\Entity\OrderItem[] $orderItems
+   * @param OrderItem[] $orderItems
    *   array of OrderItem objects fetched from OrderItemsService.
    *
-   * @return \CleverReach\BusinessLogic\Entity\OrderItem|null
+   * @return OrderItem|null
    */
   private function getFirstOrderItem($orderItems) {
     foreach ($orderItems as $orderItem) {
diff --git a/lib/BusinessLogic/Sync/DeletePrefixedFilterSyncTask.php b/lib/BusinessLogic/Sync/DeletePrefixedFilterSyncTask.php
index eabc221..6bf0f47 100644
--- a/lib/BusinessLogic/Sync/DeletePrefixedFilterSyncTask.php
+++ b/lib/BusinessLogic/Sync/DeletePrefixedFilterSyncTask.php
@@ -2,6 +2,12 @@
 
 namespace CleverReach\BusinessLogic\Sync;
 
+use CleverReach\Infrastructure\Exceptions\InvalidConfigurationException;
+use CleverReach\Infrastructure\Utility\Exceptions\HttpAuthenticationException;
+use CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException;
+use CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException;
+use CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException;
+use CleverReach\BusinessLogic\Utility\Filter;
 /**
  * Class DeletePrefixedFilterSyncTask.
  *
@@ -60,11 +66,11 @@ class DeletePrefixedFilterSyncTask extends BaseSyncTask {
   /**
    * Runs task execution.
    *
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpAuthenticationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
+   * @throws InvalidConfigurationException
+   * @throws HttpAuthenticationException
+   * @throws HttpCommunicationException
+   * @throws HttpRequestException
+   * @throws RefreshTokenExpiredException
    */
   public function execute() {
     if (empty($this->prefixedShopTags)) {
@@ -90,16 +96,16 @@ class DeletePrefixedFilterSyncTask extends BaseSyncTask {
   /**
    * Deletes filter on CleverReach side.
    *
-   * @param \CleverReach\BusinessLogic\Utility\Filter[]|null $allCRFilters
+   * @param Filter[]|null $allCRFilters
    *   List of all filters from CleverReach.
    * @param string $integrationId
    *   CleverReach integration ID.
    *
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpAuthenticationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
+   * @throws InvalidConfigurationException
+   * @throws HttpAuthenticationException
+   * @throws HttpCommunicationException
+   * @throws HttpRequestException
+   * @throws RefreshTokenExpiredException
    */
   private function deleteFilters($allCRFilters, $integrationId) {
     foreach ($allCRFilters as $filter) {
diff --git a/lib/BusinessLogic/Sync/ExchangeAccessTokenTask.php b/lib/BusinessLogic/Sync/ExchangeAccessTokenTask.php
index 07be066..86bfa90 100644
--- a/lib/BusinessLogic/Sync/ExchangeAccessTokenTask.php
+++ b/lib/BusinessLogic/Sync/ExchangeAccessTokenTask.php
@@ -2,6 +2,11 @@
 
 namespace CleverReach\BusinessLogic\Sync;
 
+use CleverReach\Infrastructure\Utility\Exceptions\HttpAuthenticationException;
+use CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException;
+use CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException;
+use CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException;
+use CleverReach\Infrastructure\Exceptions\InvalidConfigurationException;
 /**
  *
  */
@@ -10,11 +15,11 @@ class ExchangeAccessTokenTask extends BaseSyncTask {
   /**
    * Refreshes CleverReach tokens.
    *
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpAuthenticationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
+   * @throws HttpAuthenticationException
+   * @throws HttpCommunicationException
+   * @throws HttpRequestException
+   * @throws RefreshTokenExpiredException
+   * @throws InvalidConfigurationException
    */
   public function execute() {
     $this->reportProgress(5);
diff --git a/lib/BusinessLogic/Sync/FilterSyncTask.php b/lib/BusinessLogic/Sync/FilterSyncTask.php
index 277424f..9bb8350 100644
--- a/lib/BusinessLogic/Sync/FilterSyncTask.php
+++ b/lib/BusinessLogic/Sync/FilterSyncTask.php
@@ -2,6 +2,12 @@
 
 namespace CleverReach\BusinessLogic\Sync;
 
+use CleverReach\Infrastructure\Utility\Exceptions\HttpAuthenticationException;
+use CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException;
+use CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException;
+use CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException;
+use CleverReach\BusinessLogic\Entity\TagCollection;
+use CleverReach\BusinessLogic\Entity\Tag;
 use CleverReach\BusinessLogic\Entity\AbstractTag;
 use CleverReach\BusinessLogic\Interfaces\Recipients;
 use CleverReach\BusinessLogic\Utility\Filter;
@@ -19,7 +25,7 @@ class FilterSyncTask extends BaseSyncTask {
   /**
    * Instance of recipient service.
    *
-   * @var \CleverReach\BusinessLogic\Interfaces\Recipients
+   * @var Recipients
    */
   private $recipientsService;
   /**
@@ -44,11 +50,11 @@ class FilterSyncTask extends BaseSyncTask {
   /**
    * Runs task execution.
    *
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpAuthenticationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
+   * @throws InvalidConfigurationException
+   * @throws HttpAuthenticationException
+   * @throws HttpCommunicationException
+   * @throws HttpRequestException
+   * @throws RefreshTokenExpiredException
    */
   public function execute() {
     $this->integrationId = $this->getConfigService()->getIntegrationId();
@@ -58,13 +64,13 @@ class FilterSyncTask extends BaseSyncTask {
     }
 
     // Take both regular and special tags.
-    /** @var \CleverReach\BusinessLogic\Entity\TagCollection $shopTags */
+    /** @var TagCollection $shopTags */
     $shopTags = $this->getRecipientsService()->getAllTags()
       ->add($this->getRecipientsService()->getAllSpecialTags());
 
     $this->reportAlive();
 
-    /** @var \CleverReach\BusinessLogic\Utility\Filter[] $allCRFilters */
+    /** @var Filter[] $allCRFilters */
     $allCRFilters = $this->getProxy()->getAllFilters($this->integrationId);
 
     $totalNumberOfFilters = count($shopTags) + count($allCRFilters);
@@ -89,16 +95,16 @@ class FilterSyncTask extends BaseSyncTask {
   /**
    * Creates new filter on CleverReach if necessary.
    *
-   * @param \CleverReach\BusinessLogic\Utility\Filter[]|null $allCRFilters
+   * @param Filter[]|null $allCRFilters
    *   List of all filters from CleverReach.
-   * @param \CleverReach\BusinessLogic\Entity\TagCollection|null $shopTags
+   * @param TagCollection|null $shopTags
    *   Collection of all tags in integration.
    *
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpAuthenticationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
+   * @throws InvalidConfigurationException
+   * @throws HttpAuthenticationException
+   * @throws HttpCommunicationException
+   * @throws HttpRequestException
+   * @throws RefreshTokenExpiredException
    */
   private function createNewFilters($allCRFilters, $shopTags) {
     // Convert array of filter to array of strings.
@@ -119,16 +125,16 @@ class FilterSyncTask extends BaseSyncTask {
   /**
    * Deletes filter on CleverReach if necessary.
    *
-   * @param \CleverReach\BusinessLogic\Utility\Filter[]|null $allCRFilters
+   * @param Filter[]|null $allCRFilters
    *   List of all filters from CleverReach.
-   * @param \CleverReach\BusinessLogic\Entity\TagCollection|null $shopTags
+   * @param TagCollection|null $shopTags
    *   Collection of all tags in integration.
    *
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpAuthenticationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
+   * @throws InvalidConfigurationException
+   * @throws HttpAuthenticationException
+   * @throws HttpCommunicationException
+   * @throws HttpRequestException
+   * @throws RefreshTokenExpiredException
    */
   private function deleteFilters($allCRFilters, $shopTags) {
     if (empty($allCRFilters)) {
@@ -173,14 +179,14 @@ class FilterSyncTask extends BaseSyncTask {
   /**
    * Creates new filter on CleverReach.
    *
-   * @param \CleverReach\BusinessLogic\Entity\Tag|null $tag
+   * @param Tag|null $tag
    *   Tag that needs to be created on CleverReach.
    *
-   * @throws \CleverReach\Infrastructure\Exceptions\InvalidConfigurationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpAuthenticationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpCommunicationException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\HttpRequestException
-   * @throws \CleverReach\Infrastructure\Utility\Exceptions\RefreshTokenExpiredException
+   * @throws InvalidConfigurationException
+   * @throws HttpAuthenticationException
+   * @throws HttpCommunicationException
+   * @throws HttpRequestException
+   * @throws RefreshTokenExpiredException
    */
   private function createFilter($tag) {
     $rule = new Rule('tags', 'contains', (string) $tag);
@@ -200,7 +206,7 @@ class FilterSyncTask extends BaseSyncTask {
   /**
    * Gets instance of recipients service.
    *
-   * @return \CleverReach\BusinessLogic\Interfaces\Recipients
+   * @return Recipients
    *   Instance of recipients service.
    */
   private function getRecipientsService() {
