modules/contrib/tweet_reference/src/Form/TwitterSettingsForm.php
modules/contrib/tweet_reference/src/Plugin/Field/FieldFormatter/TweetReferenceFormatter.php
modules/contrib/tweet_reference/src/Plugin/Field/FieldType/TweetReferenceFieldItemList.php
modules/contrib/tweet_reference/src/Plugin/Field/FieldType/TweetReferenceItem.php
modules/contrib/tweet_reference/src/Plugin/Field/FieldWidget/TweetReferenceWidget.php
modules/contrib/tweet_reference/src/Plugin/media/Source/TweetReferenceSource.php
modules/contrib/tweet_reference/src/TweetStorage.php
modules/contrib/tweet_reference/src/TweetSync.php
modules/contrib/tweet_reference/src/TwitterProvider.php
modules/contrib/tweet_reference/tweet_reference.install
modules/contrib/tweet_reference/tweet_reference.module

7 files with changes
====================

1) modules/contrib/tweet_reference/src/TwitterProvider.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tweet_reference;

+use Drupal\Core\Config\Config;
+use GuzzleHttp\Client;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ @@
   /**
    * The configuration object.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;

@@ @@
   /**
    * The HTTP client to fetch the feed data with.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The cache backend to use.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * Constructs a new TwitterPostsBlock object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   The HTTP client.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   Date Formatter.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache backend to use.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ClientInterface $http_client, DateFormatterInterface $date_formatter, CacheBackendInterface $cache_backend, TimeInterface $time) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/tweet_reference/src/TweetSync.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tweet_reference;

+use Drupal\Core\Config\Config;
+use Drupal\file\FileUsage\FileUsageInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\File\FileSystemInterface;
@@ @@
   /**
    * The configuration object.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;

@@ @@
   /**
    * The tweet storage service.
    *
-   * @var \Drupal\tweet_reference\TweetStorage
+   * @var TweetStorage
    */
   protected $tweetStorage;

@@ @@
   /**
    * The tweet storage service.
    *
-   * @var \Drupal\tweet_reference\TwitterProvider
+   * @var TwitterProvider
    */
   protected $twitterProvider;

@@ @@
   /**
    * Constructs a new TweetStorage object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\tweet_reference\TweetStorage $tweet_storage
+   * @param TweetStorage $tweet_storage
    *   The tweet storage service.
-   * @param \Drupal\tweet_reference\TwitterProvider $twitter_provider
+   * @param TwitterProvider $twitter_provider
    *   The tweet storage service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, TweetStorage $tweet_storage, TwitterProvider $twitter_provider) {
@@ @@
       return '[]';
     }

-    /** @var \Drupal\Core\File\FileSystemInterface $fileSystem */
+    /** @var FileSystemInterface $fileSystem */
     $fileSystem = \Drupal::service('file_system');

-    /** @var \Drupal\file\FileUsage\FileUsageInterface $file_usage */
+    /** @var FileUsageInterface $file_usage */
     $file_usage = \Drupal::service('file.usage');

     $hash = $id % 100;
@@ @@
       }

       $fileSystem->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);
-      $file = file_save_data($file_data, $directory . $filename, FileSystemInterface::EXISTS_RENAME);
+      $file = \Drupal::service('file.repository')->writeData($file_data, $directory . $filename, FileSystemInterface::EXISTS_RENAME);
       unset($file_data);

       if (empty($file)) {
@@ @@
       return 0;
     }

-    /** @var \Drupal\Core\File\FileSystemInterface $fileSystem */
+    /** @var FileSystemInterface $fileSystem */
     $fileSystem = \Drupal::service('file_system');

-    /** @var \Drupal\file\FileUsage\FileUsageInterface $file_usage */
+    /** @var FileUsageInterface $file_usage */
     $file_usage = \Drupal::service('file.usage');

     $user_id = $remote_user['id_str'];
@@ @@
     }

     $fileSystem->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);
-    $file = file_save_data($file_data, $directory . $filename, FileSystemInterface::EXISTS_RENAME);
+    $file = \Drupal::service('file.repository')->writeData($file_data, $directory . $filename, FileSystemInterface::EXISTS_RENAME);
     unset($file_data);

     if (empty($file)) {
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/tweet_reference/src/TweetStorage.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * Constructs a new TweetStorage object.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
    */
   public function __construct(Connection $database) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/tweet_reference/src/Plugin/Field/FieldType/TweetReferenceItem.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tweet_reference\Plugin\Field\FieldType;

+use Drupal\Core\Entity\SynchronizableInterface;
+use Drupal\tweet_reference\TweetStorage;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Core\Field\FieldItemBase;
@@ @@
   public function postSave($update) {
     parent::postSave($update);

-    /** @var \Drupal\Core\Entity\SynchronizableInterface $entity */
+    /** @var SynchronizableInterface $entity */
     $entity = $this->getEntity();
     $settings = $this->getSettings();

@@ @@
   /**
    * Returns the tweet storage service.
    *
-   * @return \Drupal\tweet_reference\TweetStorage
+   * @return TweetStorage
    */
   protected static function getTweetStorage() {
     return \Drupal::service('tweet_reference.tweet_storage');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/tweet_reference/src/Plugin/Field/FieldType/TweetReferenceFieldItemList.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tweet_reference\Plugin\Field\FieldType;

+use Drupal\Core\Entity\FieldableEntityInterface;
+use Drupal\tweet_reference\TweetStorage;
 use Drupal\Core\Field\FieldItemList;

 /**
@@ @@
       return;
     }

-    /** @var \Drupal\Core\Entity\FieldableEntityInterface $original */
+    /** @var FieldableEntityInterface $original */
     $original = $entity->original;
     $langcode = $this->getLangcode();

@@ @@
   /**
    * Returns the tweet storage service.
    *
-   * @return \Drupal\tweet_reference\TweetStorage
+   * @return TweetStorage
    */
   protected static function getTweetStorage() {
     return \Drupal::service('tweet_reference.tweet_storage');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/tweet_reference/src/Plugin/Field/FieldFormatter/TweetReferenceFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tweet_reference\Plugin\Field\FieldFormatter;

+use Drupal\tweet_reference\TweetStorage;
 use Drupal\Core\Field\FormatterBase;
 use Drupal\Core\Field\FieldItemListInterface;

@@ @@
   /**
    * Returns the tweet storage service.
    *
-   * @return \Drupal\tweet_reference\TweetStorage
+   * @return TweetStorage
    */
   protected static function getTweetStorage() {
     return \Drupal::service('tweet_reference.tweet_storage');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/tweet_reference/src/Form/TwitterSettingsForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a TwitterSettingsForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, DateFormatterInterface $date_formatter) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 7 files have been changed by Rector                                       

