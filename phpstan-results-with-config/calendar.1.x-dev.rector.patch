diff --git a/calendar.module b/calendar.module
index fede725..cfc7f96 100644
--- a/calendar.module
+++ b/calendar.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\views\Plugin\views\argument\ArgumentPluginBase;
 /**
  * @file
  */
@@ -67,9 +68,9 @@ function calendar_views_pre_render(ViewExecutable $view) {
  * Track the current date as the user moves from calendar display to calendar
  * display.
  *
- * @param \Drupal\views\ViewExecutable $view
+ * @param ViewExecutable $view
  *
- * @return \Drupal\views\Plugin\views\argument\ArgumentPluginBase
+ * @return ArgumentPluginBase
  */
 function _calendar_views_track_current_date(ViewExecutable $view) {
   $user = \Drupal::currentUser();
@@ -216,7 +217,7 @@ function calendar_groupby_times($type = '') {
 /**
  * Find the path for the calendar display that has a specific granularity.
  *
- * @param \Drupal\views\ViewExecutable $view
+ * @param ViewExecutable $view
  *   The current view.
  * @param string $granularity
  *   The granularity to find.
diff --git a/calendar.theme.inc b/calendar.theme.inc
index 1496abf..9d30007 100644
--- a/calendar.theme.inc
+++ b/calendar.theme.inc
@@ -1,5 +1,9 @@
 <?php
 
+use Drupal\calendar\CalendarStyleInfo;
+use Drupal\calendar\CalendarEvent;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 /**
  * @file
  * Theme functions for the Calendar module.
@@ -149,7 +153,7 @@ function template_preprocess_calendar_day(&$vars) {
 
   $item_count = 0;
   $by_hour_count = 0;
-  /** @var \Drupal\calendar\CalendarStyleInfo $styleInfo */
+  /** @var CalendarStyleInfo $styleInfo */
   $styleInfo = $view->styleInfo;
   $grouping_field = !empty($styleInfo->getCustomGroupByField()) ? ($styleInfo->getCustomGroupByField()) : NULL;
   $display_overlap = !empty($styleInfo->getThemeStyle()) && !empty($styleInfo->getGroupByTimes());
@@ -211,7 +215,7 @@ function template_preprocess_calendar_day(&$vars) {
 
   $grouped_items = [];
   foreach ($rows['items'] as &$items) {
-    /** @var \Drupal\calendar\CalendarEvent $item */
+    /** @var CalendarEvent $item */
     foreach ($items as &$item) {
       $time = date_format($item->getStartDate(), 'H:i:s');
       if (!empty($item->rendered_fields[$grouping_field])) {
@@ -569,7 +573,7 @@ function template_preprocess_calendar_week(&$vars) {
 function template_preprocess_calendar_item(&$vars) {
   // At the last possible minute we fix the values in rendered_fields so it
   // contains the correct rendered content for the type of item and item display.
-  /** @var \Drupal\calendar\CalendarEvent $item */
+  /** @var CalendarEvent $item */
   $item = $vars['item'];
 
   $multiday_hidden = !empty($vars['view']->style_options['multiday_hidden']) ? $vars['view']->style_options['multiday_hidden'] : [];
@@ -721,8 +725,8 @@ function template_preprocess_calendar_time_row_heading($vars) {
  * @return string
  *   The HTML output of the legend.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function template_preprocess_calendar_stripe_legend(array &$vars) {
 
diff --git a/calendar_datetime/src/Plugin/views/argument_default/Date.php b/calendar_datetime/src/Plugin/views/argument_default/Date.php
index 360f48b..0254506 100644
--- a/calendar_datetime/src/Plugin/views/argument_default/Date.php
+++ b/calendar_datetime/src/Plugin/views/argument_default/Date.php
@@ -23,14 +23,14 @@ class Date extends ArgumentDefaultPluginBase implements CacheableDependencyInter
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The current Request object.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
@@ -43,9 +43,9 @@ class Date extends ArgumentDefaultPluginBase implements CacheableDependencyInter
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, DateFormatterInterface $date_formatter, Request $request) {
diff --git a/src/CalendarEvent.php b/src/CalendarEvent.php
index 9d1cc2b..f4ec52e 100644
--- a/src/CalendarEvent.php
+++ b/src/CalendarEvent.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\calendar;
 
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Entity\ContentEntityInterface;
 
 /**
@@ -76,7 +77,7 @@ class CalendarEvent {
   /**
    * The content entity interface object.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $entity;
 
@@ -112,7 +113,7 @@ class CalendarEvent {
   /**
    * Function to get entity.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    */
   public function getEntity() {
     return $this->entity;
@@ -251,7 +252,7 @@ class CalendarEvent {
    * @return string
    *   The public url to this event.
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function getUrl() {
     return $this->entity->toUrl();
diff --git a/src/CalendarHelper.php b/src/CalendarHelper.php
index 315b4df..94d11cd 100644
--- a/src/CalendarHelper.php
+++ b/src/CalendarHelper.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\calendar;
 
+use Drupal\views\Plugin\ViewsHandlerManager;
+use Drupal\Core\Routing\RouteProvider;
 use Drupal\Core\Datetime\DateHelper;
 use Drupal\Core\Url;
 use Drupal\views\Plugin\views\argument\ArgumentPluginBase;
@@ -700,7 +702,7 @@ class CalendarHelper extends DateHelper {
   /**
    * Argument can be used as calendar argument.
    *
-   * @param \Drupal\views\Plugin\views\argument\ArgumentPluginBase $arg
+   * @param ArgumentPluginBase $arg
    *   The argument base object.
    *
    * @return bool
@@ -712,18 +714,18 @@ class CalendarHelper extends DateHelper {
   /**
    * Helper function to find the first date argument handler for this view.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The view executable object.
    * @param null $display_id
    *
-   * @return \Drupal\calendar\DateArgumentWrapper|false
+   * @return DateArgumentWrapper|false
    *   Returns the Date handler if one is found, or FALSE otherwise.
    */
   public static function getDateArgumentHandler(ViewExecutable $view, $display_id = NULL) {
     $all_arguments = [];
     if ($display_id) {
       // If we aren't dealing with current display we have to load the argument handlers.
-      /** @var \Drupal\views\Plugin\ViewsHandlerManager $argument_manager */
+      /** @var ViewsHandlerManager $argument_manager */
       $argument_manager = \Drupal::getContainer()->get('plugin.manager.views.argument');
 
       $argument_configs = $view->getHandlers('argument', $display_id);
@@ -739,7 +741,7 @@ class CalendarHelper extends DateHelper {
       $current_position = 0;
       /**
        * @var  $name
-       * @var \Drupal\views\Plugin\views\argument\ArgumentPluginBase $handler
+       * @var ArgumentPluginBase $handler
        */
       foreach ($all_arguments as $name => $handler) {
         if (static::isCalendarArgument($handler)) {
@@ -849,7 +851,7 @@ class CalendarHelper extends DateHelper {
   /**
    * Get the display that handles a given granularity.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The view executable service.
    * @param $granularity
    *
@@ -887,17 +889,17 @@ class CalendarHelper extends DateHelper {
    *
    * @todo Allow a View to link to other Views by itself for a certain granularity.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The view executable service.
    * @param $granularity
    * @param $arguments
    *
-   * @return \Drupal\Core\Url|null
+   * @return Url|null
    */
   public static function getURLForGranularity(ViewExecutable $view, $granularity, $arguments) {
     $granularity_links = $view->getStyle()->options['granularity_links'];
     if ($granularity_links[$granularity]) {
-      /** @var \Drupal\Core\Routing\RouteProvider $router */
+      /** @var RouteProvider $router */
       $router = \Drupal::getContainer()->get('router.route_provider');
       $route_name = $granularity_links[$granularity];
       // Check if route exists. $router->getRoutesByName will throw error if no match.
@@ -918,12 +920,12 @@ class CalendarHelper extends DateHelper {
   /**
    * Get the Url object to link to a View display with given arguments.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The view executable service.
    * @param $display_id
    * @param array $args
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   Returns url.
    */
   public static function getViewsURL(ViewExecutable $view, $display_id, array $args = []) {
@@ -950,7 +952,7 @@ class CalendarHelper extends DateHelper {
   /**
    * @param array $args
    *   The provided arguments.
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The view.
    *
    * @return array
@@ -986,11 +988,11 @@ class CalendarHelper extends DateHelper {
   /**
    * Returns all the argument values for the specified view's current display.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   An executed view.
    * @param string $value
    *   The date argument value.
-   * @param \Drupal\calendar\DateArgumentWrapper|null $argument_handler
+   * @param DateArgumentWrapper|null $argument_handler
    *   (optional) A date argument wrapper object. If not specified it will be
    *   derived from the view.
    *
@@ -1005,7 +1007,7 @@ class CalendarHelper extends DateHelper {
     }
     $current_position = 0;
 
-    /** @var \Drupal\views\Plugin\views\argument\ArgumentPluginBase $handler */
+    /** @var ArgumentPluginBase $handler */
     foreach ($view->argument as $name => $handler) {
       if ($current_position != $argument_handler->getPosition()) {
         $arg_values["arg_$current_position"] = $handler->getValue();
diff --git a/src/CalendarViewsTrait.php b/src/CalendarViewsTrait.php
index 4c8b9ce..c76755a 100644
--- a/src/CalendarViewsTrait.php
+++ b/src/CalendarViewsTrait.php
@@ -38,7 +38,7 @@ trait CalendarViewsTrait {
    * @todo Change to a more generic is Content Entity Reference.
    *
    * @param $field_info
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager
+   * @param EntityFieldManagerInterface $field_manager
    *   The entity field manager service.
    */
   protected function isTermReferenceField($field_info, EntityFieldManagerInterface $field_manager) {
diff --git a/src/DateArgumentWrapper.php b/src/DateArgumentWrapper.php
index 3a0c0bc..6e37607 100644
--- a/src/DateArgumentWrapper.php
+++ b/src/DateArgumentWrapper.php
@@ -12,7 +12,7 @@ class DateArgumentWrapper {
   /**
    * The date object.
    *
-   * @var \Drupal\views\Plugin\views\argument\Date
+   * @var Date
    */
   protected $dateArg;
 
@@ -60,7 +60,7 @@ class DateArgumentWrapper {
   /**
    * The function to return date.
    *
-   * @return \Drupal\views\Plugin\views\argument\Date
+   * @return Date
    *   Returns date.
    */
   public function getDateArg() {
diff --git a/src/Plugin/Derivative/ViewsFieldTemplate.php b/src/Plugin/Derivative/ViewsFieldTemplate.php
index 172998b..4368ca1 100644
--- a/src/Plugin/Derivative/ViewsFieldTemplate.php
+++ b/src/Plugin/Derivative/ViewsFieldTemplate.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\calendar\Plugin\Derivative;
 
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -31,21 +32,21 @@ class ViewsFieldTemplate implements ContainerDeriverInterface {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityManager;
 
   /**
    * The views data service.
    *
-   * @var \Drupal\views\ViewsData
+   * @var ViewsData
    */
   protected $viewsData;
 
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $fieldManager;
 
@@ -67,11 +68,11 @@ class ViewsFieldTemplate implements ContainerDeriverInterface {
    *
    * @param string $base_plugin_id
    *   The base plugin ID.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $manager
+   * @param EntityTypeManagerInterface $manager
    *   The entity type manager service.
-   * @param \Drupal\views\ViewsData $views_data
+   * @param ViewsData $views_data
    *   The entity storage to load views.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager
+   * @param EntityFieldManagerInterface $field_manager
    *   The entity field manager interface.
    */
   public function __construct($base_plugin_id, EntityTypeManagerInterface $manager, ViewsData $views_data, EntityFieldManagerInterface $field_manager) {
@@ -97,7 +98,7 @@ class ViewsFieldTemplate implements ContainerDeriverInterface {
    */
   public function getDerivativeDefinitions($base_plugin_definition) {
     /**
-     * @var \Drupal\Core\Entity\EntityTypeInterface $entity_type
+     * @var EntityTypeInterface $entity_type
      */
     foreach ($this->entityManager->getDefinitions() as $entity_type_id => $entity_type) {
       // Just add support for entity types which have a views integration.
@@ -137,13 +138,13 @@ class ViewsFieldTemplate implements ContainerDeriverInterface {
   /**
    * Set all derivatives for an entity type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type service.
    * @param array $base_plugin_definition
    *   The array.
    */
   protected function setConfigurableFieldsDerivatives(EntityTypeInterface $entity_type, array $base_plugin_definition) {
-    /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface $field_storage */
+    /** @var FieldStorageDefinitionInterface $field_storage */
     $field_storages = $this->fieldManager->getFieldStorageDefinitions($entity_type->id());
 
     foreach ($field_storages as $field_id => $field_storage) {
diff --git a/src/Plugin/ViewsTemplateBuilder/ViewsFieldTemplate.php b/src/Plugin/ViewsTemplateBuilder/ViewsFieldTemplate.php
index 76d814d..acfc3e2 100644
--- a/src/Plugin/ViewsTemplateBuilder/ViewsFieldTemplate.php
+++ b/src/Plugin/ViewsTemplateBuilder/ViewsFieldTemplate.php
@@ -22,7 +22,7 @@ class ViewsFieldTemplate extends ViewsDuplicateBuilderBase {
   /**
    * The entity field manager object.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $fieldManager;
 
diff --git a/src/Plugin/views/argument_validator/CalendarValidator.php b/src/Plugin/views/argument_validator/CalendarValidator.php
index 83cebaf..023e2c3 100644
--- a/src/Plugin/views/argument_validator/CalendarValidator.php
+++ b/src/Plugin/views/argument_validator/CalendarValidator.php
@@ -24,14 +24,14 @@ class CalendarValidator extends ArgumentValidatorPluginBase {
   /**
    * The date argument wrapper object.
    *
-   * @var \Drupal\calendar\DateArgumentWrapper
+   * @var DateArgumentWrapper
    */
   protected $argumentWrapper;
 
   /**
    * The dateformatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
diff --git a/src/Plugin/views/pager/CalendarPager.php b/src/Plugin/views/pager/CalendarPager.php
index d98a0ab..45722bf 100644
--- a/src/Plugin/views/pager/CalendarPager.php
+++ b/src/Plugin/views/pager/CalendarPager.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\calendar\Plugin\views\pager;
 
+use Drupal\calendar\DateArgumentWrapper;
+use Drupal\views\Plugin\views\argument\ArgumentPluginBase;
 use Drupal\calendar\CalendarHelper;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\views\Plugin\views\display\DisplayPluginBase;
@@ -30,7 +32,7 @@ class CalendarPager extends PagerPluginBase {
   /**
    * The Date argument wrapper object.
    *
-   * @var \Drupal\calendar\DateArgumentWrapper
+   * @var DateArgumentWrapper
    */
   protected $argument;
 
@@ -96,7 +98,7 @@ class CalendarPager extends PagerPluginBase {
     $current_position = 0;
     $arg_vals = [];
     /**
-     * @var \Drupal\views\Plugin\views\argument\ArgumentPluginBase $handler
+     * @var ArgumentPluginBase $handler
      */
     foreach ($this->view->argument as $name => $handler) {
       if ($current_position != $this->argument->getPosition()) {
diff --git a/src/Plugin/views/row/Calendar.php b/src/Plugin/views/row/Calendar.php
index 183c698..94d4f6d 100644
--- a/src/Plugin/views/row/Calendar.php
+++ b/src/Plugin/views/row/Calendar.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\calendar\Plugin\views\row;
 
+use Drupal\views\Plugin\views\argument\Formula;
+use Drupal\views\ResultRow;
+use Drupal\calendar\CalendarDateInfo;
+use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\calendar\CalendarEvent;
 use Drupal\calendar\CalendarHelper;
 use Drupal\calendar\CalendarViewsTrait;
@@ -40,7 +44,7 @@ class Calendar extends RowPluginBase {
   /**
    * The data formatter object.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    *   The date formatter service.
    */
   protected $dateFormatter;
@@ -72,14 +76,14 @@ class Calendar extends RowPluginBase {
   /**
    * The formula object.
    *
-   * @var \Drupal\views\Plugin\views\argument\Formula
+   * @var Formula
    */
   protected $dateArgument;
 
   /**
    * The entity field manager object.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $fieldManager;
 
@@ -103,9 +107,9 @@ class Calendar extends RowPluginBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Datetime\DateFormatter $date_formatter
+   * @param DateFormatter $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager
+   * @param EntityFieldManagerInterface $field_manager
    *   The entity field manager service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, DateFormatter $date_formatter, EntityFieldManagerInterface $field_manager) {
@@ -313,7 +317,7 @@ class Calendar extends RowPluginBase {
    *
    * @param array $element
    *   Element to validate.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   State of the form.
    */
   public function validateHexColor(array $element, FormStateInterface $form_state) {
@@ -338,7 +342,7 @@ class Calendar extends RowPluginBase {
     // repeatedly for the same entity if there are multiple results for one
     // entity.
     $ids = [];
-    /** @var \Drupal\views\ResultRow $row */
+    /** @var ResultRow $row */
     foreach ($result as $row) {
       // Use the entity id as the key so we don't create more than one value per
       // entity.
@@ -375,7 +379,7 @@ class Calendar extends RowPluginBase {
 
     $data = $data['name'];
     $date_fields = [];
-    /** @var \Drupal\views\Plugin\views\argument\Formula $handler */
+    /** @var Formula $handler */
     foreach ($this->view->getDisplay()->getHandlers('argument') as $handler) {
       if ($handler instanceof Date) {
         // Strip "_calendar" from the field name.
@@ -403,7 +407,7 @@ class Calendar extends RowPluginBase {
    * {@inheritdoc}
    */
   public function render($row) {
-    /** @var \Drupal\calendar\CalendarDateInfo $dateInfo */
+    /** @var CalendarDateInfo $dateInfo */
     $dateInfo = $this->dateArgument->view->dateInfo;
     $id = $row->_entity->id();
     $rows = [];
@@ -430,7 +434,7 @@ class Calendar extends RowPluginBase {
       // Clone this entity so we can change it's values without altering other
       // occurrences of this entity on the same page, for example in an
       // "Upcoming" block.
-      /** @var \Drupal\Core\Entity\ContentEntityBase $entity */
+      /** @var ContentEntityBase $entity */
       $entity = clone($this->entities[$id]);
 
       if (empty($entity)) {
@@ -537,7 +541,7 @@ class Calendar extends RowPluginBase {
         // 'row' => $row,
         // 'field_alias' => isset($this->field_alias) ? $this->field_alias : '',
         // ]);
-        /** @var \Drupal\calendar\CalendarEvent[] $events */
+        /** @var CalendarEvent[] $events */
         $events = $this->explodeValues($event);
         foreach ($events as $event) {
           switch ($this->options['colors']['legend']) {
@@ -561,7 +565,7 @@ class Calendar extends RowPluginBase {
   }
 
   /**
-   * @param \Drupal\calendar\CalendarEvent $event
+   * @param CalendarEvent $event
    *   A calendar event to explode date values.
    *
    * @return array
@@ -602,7 +606,7 @@ class Calendar extends RowPluginBase {
     // All three were limited by the min-max date range of the view.
     $position = 0;
     while (!empty($now) && $now <= $to) {
-      /** @var \Drupal\calendar\CalendarEvent $entity */
+      /** @var CalendarEvent $entity */
       $entity = clone($event);
 
       // Get start and end of current day.
@@ -651,7 +655,7 @@ class Calendar extends RowPluginBase {
   /**
    * Create a stripe base on node type.
    *
-   * @param \Drupal\calendar\CalendarEvent $event
+   * @param CalendarEvent $event
    *   The event result object.
    */
   public function nodeTypeStripe(CalendarEvent &$event) {
@@ -678,7 +682,7 @@ class Calendar extends RowPluginBase {
   /**
    * Create a stripe based on a taxonomy term.
    *
-   * @param \Drupal\calendar\CalendarEvent $event
+   * @param CalendarEvent $event
    *   A calendar event.
    */
   public function calendarTaxonomyStripe(CalendarEvent &$event) {
diff --git a/src/Plugin/views/style/Calendar.php b/src/Plugin/views/style/Calendar.php
index ccc173d..6f32605 100644
--- a/src/Plugin/views/style/Calendar.php
+++ b/src/Plugin/views/style/Calendar.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\calendar\Plugin\views\style;
 
+use Drupal\calendar\CalendarEvent;
 use Drupal\calendar\CalendarDateInfo;
 use Drupal\calendar\CalendarHelper;
 use Drupal\calendar\CalendarStyleInfo;
@@ -61,7 +62,7 @@ class Calendar extends StylePluginBase {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;
 
@@ -115,14 +116,14 @@ class Calendar extends StylePluginBase {
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The time interface.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
@@ -153,11 +154,11 @@ class Calendar extends StylePluginBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Datetime\DateFormatter $date_formatter
+   * @param DateFormatter $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time interface.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, DateFormatter $date_formatter, MessengerInterface $messenger, TimeInterface $time) {
@@ -606,7 +607,7 @@ class Calendar extends StylePluginBase {
       $this->view->row_index = $row_index;
       $events = $this->view->rowPlugin->render($row);
       // @todo Check what comes out here.
-      /** @var \Drupal\calendar\CalendarEvent $event_info */
+      /** @var CalendarEvent $event_info */
       foreach ($events as $event_info) {
         $item_start = $event_info->calendar_start_date->format('Y-m-d');
         $item_end = $event_info->calendar_end_date->format('Y-m-d');
@@ -1192,7 +1193,7 @@ class Calendar extends StylePluginBase {
         if ($date == $current_day_date) {
           ksort($day);
           foreach ($day as $time => $hour) {
-            /** @var \Drupal\calendar\CalendarEvent $item */
+            /** @var CalendarEvent $item */
             foreach ($hour as $key => $item) {
               $all_day = $item->isAllDay();
 
@@ -1360,7 +1361,7 @@ class Calendar extends StylePluginBase {
         $selected = TRUE;
         ksort($day);
         foreach ($day as $time => $hour) {
-          /** @var \Drupal\calendar\CalendarEvent $item */
+          /** @var CalendarEvent $item */
           foreach ($hour as $key => $item) {
             $count++;
             $ids[$item->getType()] = $item;
diff --git a/src/Template/TwigExtension.php b/src/Template/TwigExtension.php
index 8d89857..40a91a3 100644
--- a/src/Template/TwigExtension.php
+++ b/src/Template/TwigExtension.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\calendar\Template;
 
+use Drupal\calendar\CalendarEvent;
 /**
  * A class providing Calendar Twig extensions.
  */
@@ -26,7 +27,7 @@ class TwigExtension extends \Twig_Extension {
   /**
    * Adds a striped background to the passed event.
    *
-   * @param \Drupal\calendar\CalendarEvent $event
+   * @param CalendarEvent $event
    *
    * @return string
    *   A HTML output string.
