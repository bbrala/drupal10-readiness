modules/contrib/website_feedback/src/Entity/WebsiteFeedback.php
modules/contrib/website_feedback/src/Form/ConfirmDeleteMultiple.php
modules/contrib/website_feedback/src/Form/SettingsForm.php
modules/contrib/website_feedback/src/Form/WebsiteFeedbackForm.php
modules/contrib/website_feedback/src/Plugin/Action/ResolveWebsiteFeedback.php
modules/contrib/website_feedback/src/Plugin/Action/UnresolveWebsiteFeedback.php
modules/contrib/website_feedback/src/Plugin/Field/FieldWidget/ScreenshotWidget.php
modules/contrib/website_feedback/src/Plugin/views/field/WebsiteFeedbackBulkForm.php
modules/contrib/website_feedback/src/WebsiteFeedbackAccessControlHandler.php
modules/contrib/website_feedback/src/WebsiteFeedbackInterface.php
modules/contrib/website_feedback/src/WebsiteFeedbackListBuilder.php
modules/contrib/website_feedback/src/WebsiteFeedbackViewsData.php
modules/contrib/website_feedback/website_feedback.install
modules/contrib/website_feedback/website_feedback.module

4 files with changes
====================

1) modules/contrib/website_feedback/src/WebsiteFeedbackListBuilder.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;

@@ @@
   /**
    * Constructs a new WebsiteFeedbackListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\website_feedback\WebsiteFeedbackInterface $entity */
+    /** @var WebsiteFeedbackInterface $entity */
     $row['id'] = $entity->id();
     $row['summary'] = $entity->toLink();
     $row['status'] = $entity->isEnabled() ? $this->t('Enabled') : $this->t('Disabled');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/website_feedback/src/Plugin/Field/FieldWidget/ScreenshotWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\website_feedback\Plugin\Field\FieldWidget;

+use Drupal\Core\StreamWrapper\StreamWrapperManagerInterface;
 use Drupal\Component\Utility\Crypt;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\File\FileSystemInterface;
@@ @@
         if (empty($destination)) {
           $destination = \Drupal::config('system.file')->get('default_scheme') . '://';
         }
-        /** @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager */
+        /** @var StreamWrapperManagerInterface $stream_wrapper_manager */
         $stream_wrapper_manager = \Drupal::service('stream_wrapper_manager');
         if (!$stream_wrapper_manager->isValidUri($destination)) {
           \Drupal::logger('file')->notice('The data could not be saved because the destination %destination is invalid. This may be caused by improper use of file_save_data() or a missing stream wrapper.', ['%destination' => $destination]);
@@ @@
             'status' => 1,
           ]);
           if ($replace == FileSystemInterface::EXISTS_RENAME && is_file($destination)) {
-            /** @var \Drupal\Core\File\FileSystemInterface $file_system */
+            /** @var FileSystemInterface $file_system */
             $file_system = \Drupal::service('file_system');
             $file->setFilename($file_system->basename($destination));
           }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/website_feedback/src/Form/WebsiteFeedbackForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\website_feedback\Form;

+use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * Constructs a WebsiteFeedbackForm object.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeBundleInfoInterface $entity_type_bundle_info, TimeInterface $time, RendererInterface $renderer) {
@@ @@
     $link = $entity->toLink($this->t('View'))->toRenderable();

     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];

     if ($result == SAVED_NEW) {
       $this->logger('website_feedback')->notice('Created new website feedback %label', $logger_arguments);
@@ @@
    *
    * @param array $form
    *   Nested array of form elements that comprise the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return array|\Drupal\Core\Ajax\AjaxResponse
+   * @return array|AjaxResponse
    *   Render array or Response object
    */
   public function ajaxFormSubmit(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/website_feedback/src/Form/SettingsForm.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
    *
    * @param string $root
    *   The app root.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct($root, EntityFieldManagerInterface $entity_field_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 4 files have been changed by Rector                                       

