diff --git a/private_file_token.info.yml b/private_file_token.info.yml
index 1472368..770e6e4 100644
--- a/private_file_token.info.yml
+++ b/private_file_token.info.yml
@@ -2,4 +2,4 @@ name: Private file token
 description: Allow to access private files by an authentication token in the URL.
 package: auth
 type: module
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.3 || ^10
diff --git a/private_file_token.module b/private_file_token.module
index ed6860c..45f9b96 100644
--- a/private_file_token.module
+++ b/private_file_token.module
@@ -6,6 +6,8 @@
  */
 
 declare(strict_types = 1);
+use Drupal\Core\StreamWrapper\StreamWrapperManager;
+use Drupal\private_file_token\Access\PrivateFileTokenGenerator;
 
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Access\AccessResult;
@@ -17,7 +19,7 @@ use Drupal\Core\Session\AccountInterface;
  * Implements hook_file_url_alter().
  */
 function private_file_token_file_url_alter(string &$uri): void {
-  /** @var \Drupal\Core\StreamWrapper\StreamWrapperManager $stream_wrapper_manager */
+  /** @var StreamWrapperManager $stream_wrapper_manager */
   $stream_wrapper_manager = \Drupal::service('stream_wrapper_manager');
   if ($stream_wrapper_manager::getScheme($uri) == 'private') {
     // Alter happens in "file_create_url". If returned uri with query strings
@@ -28,10 +30,10 @@ function private_file_token_file_url_alter(string &$uri): void {
     $private_wrapper = $stream_wrapper_manager->getViaUri($uri);
     $uri = $private_wrapper->getExternalUrl();
 
-    $uri_without_scheme = file_url_transform_relative($uri);
+    $uri_without_scheme = \Drupal::service('file_url_generator')->transformRelative($uri);
     $timestamp = \Drupal::time()->getRequestTime();
 
-    /** @var \Drupal\private_file_token\Access\PrivateFileTokenGenerator $private_file_token */
+    /** @var PrivateFileTokenGenerator $private_file_token */
     $private_file_token_generator = \Drupal::service('private_file_token');
     $token_query = [
       'token' => $private_file_token_generator->get($uri_without_scheme, $timestamp),
@@ -69,7 +71,7 @@ function private_file_token_file_access(EntityInterface $entity, string $operati
     return AccessResult::neutral();
   }
 
-  /** @var \Drupal\private_file_token\Access\PrivateFileTokenGenerator $private_file_token_generator */
+  /** @var PrivateFileTokenGenerator $private_file_token_generator */
   $private_file_token_generator = \Drupal::service('private_file_token');
 
   // Grant access if token is valid.
diff --git a/src/Access/PrivateFileTokenGenerator.php b/src/Access/PrivateFileTokenGenerator.php
index 4ae8ccd..e4801f2 100644
--- a/src/Access/PrivateFileTokenGenerator.php
+++ b/src/Access/PrivateFileTokenGenerator.php
@@ -18,7 +18,7 @@ class PrivateFileTokenGenerator {
   /**
    * The private key service.
    *
-   * @var \Drupal\Core\PrivateKey
+   * @var PrivateKey
    */
   protected $privateKey;
 
@@ -32,18 +32,18 @@ class PrivateFileTokenGenerator {
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * Constructs the private file token generator.
    *
-   * @param \Drupal\Core\PrivateKey $private_key
+   * @param PrivateKey $private_key
    *   The private key service.
-   * @param \Drupal\Core\Config\ImmutableConfig $config
+   * @param ImmutableConfig $config
    *   The private file token config.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(PrivateKey $private_key, ImmutableConfig $config, TimeInterface $time) {
diff --git a/tests/src/Functional/PrivateFileTokenTest.php b/tests/src/Functional/PrivateFileTokenTest.php
index 599ce21..e5e2bab 100644
--- a/tests/src/Functional/PrivateFileTokenTest.php
+++ b/tests/src/Functional/PrivateFileTokenTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\private_file_token\Functional;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\file\FileInterface;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\image\Entity\ImageStyle;
 use Drupal\Tests\BrowserTestBase;
@@ -32,21 +34,21 @@ class PrivateFileTokenTest extends BrowserTestBase {
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The private file token generator.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $tokenGenerator;
 
@@ -66,7 +68,7 @@ class PrivateFileTokenTest extends BrowserTestBase {
   public function testPrivateImageAccess(): void {
     // Copy source test image into private files directory.
     $image_filename = 'private-file-token-test-image.png';
-    $source_image_path = drupal_get_path('module', 'private_file_token') . '/tests/image/test-image.png';
+    $source_image_path = \Drupal::service('extension.list.module')->getPath('private_file_token') . '/tests/image/test-image.png';
     $this->fileSystem->copy($source_image_path, 'private://' . $image_filename, FileSystemInterface::EXISTS_REPLACE);
     // Create a test image file entity.
     $values = [
@@ -76,7 +78,7 @@ class PrivateFileTokenTest extends BrowserTestBase {
       'filesize' => filesize($source_image_path),
     ];
     $storage = $this->entityTypeManager->getStorage('file');
-    /** @var \Drupal\file\FileInterface $fileEntity */
+    /** @var FileInterface $fileEntity */
     $image_entity = $storage->create($values);
     $image_entity->save();
 
@@ -100,7 +102,7 @@ class PrivateFileTokenTest extends BrowserTestBase {
       ->set('expiration_time', 0)
       ->save();
     $content = $this->drupalGet($image_style_url);
-    $this->assertContains('Access denied', $content);
+    $this->assertStringContainsString('Access denied', $content);
   }
 
 }
diff --git a/tests/src/Functional/PrivateFileTokenTestHelperTrait.php b/tests/src/Functional/PrivateFileTokenTestHelperTrait.php
index 169b1b1..5c2109c 100644
--- a/tests/src/Functional/PrivateFileTokenTestHelperTrait.php
+++ b/tests/src/Functional/PrivateFileTokenTestHelperTrait.php
@@ -21,7 +21,7 @@ trait PrivateFileTokenTestHelperTrait {
     // Checks that generated url has expected path and contains expected query
     // string arguments.
     $image_style_url_parts = UrlHelper::parse($image_style_url);
-    $path_part = file_url_transform_relative($image_style_url_parts['path']);
+    $path_part = \Drupal::service('file_url_generator')->transformRelative($image_style_url_parts['path']);
 
     $this->assertEquals($expected_image_style_uri, $path_part);
     $this->assertTrue(!empty($image_style_url_parts['query']['token']) && !empty($image_style_url_parts['query']['token']));
