diff --git a/src/Annotation/BlockFieldSelection.php b/src/Annotation/BlockFieldSelection.php
index b20c30b..bcd2fab 100644
--- a/src/Annotation/BlockFieldSelection.php
+++ b/src/Annotation/BlockFieldSelection.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\block_field\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -24,7 +25,7 @@ class BlockFieldSelection extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/BlockFieldItemInterface.php b/src/BlockFieldItemInterface.php
index 734424d..5fa696e 100644
--- a/src/BlockFieldItemInterface.php
+++ b/src/BlockFieldItemInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\block_field;
 
+use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\Core\Field\FieldItemInterface;
 
 /**
@@ -12,7 +13,7 @@ interface BlockFieldItemInterface extends FieldItemInterface {
   /**
    * Get block instance.
    *
-   * @return null|\Drupal\Core\Block\BlockPluginInterface
+   * @return null|BlockPluginInterface
    *   Return the block instance or NULL if the block does not exist.
    */
   public function getBlock();
diff --git a/src/BlockFieldManager.php b/src/BlockFieldManager.php
index 4dc1fde..94b284c 100644
--- a/src/BlockFieldManager.php
+++ b/src/BlockFieldManager.php
@@ -13,23 +13,23 @@ class BlockFieldManager implements BlockFieldManagerInterface {
   /**
    * The block plugin manager.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;
 
   /**
    * The context repository.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;
 
   /**
    * Constructs a new BlockFieldManager.
    *
-   * @param \Drupal\Core\Block\BlockManagerInterface $block_manager
+   * @param BlockManagerInterface $block_manager
    *   The block plugin manager.
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $context_repository
+   * @param ContextRepositoryInterface $context_repository
    *   The context repository.
    */
   public function __construct(BlockManagerInterface $block_manager, ContextRepositoryInterface $context_repository) {
diff --git a/src/BlockFieldSelectionManager.php b/src/BlockFieldSelectionManager.php
index c9ddafe..9a657fd 100644
--- a/src/BlockFieldSelectionManager.php
+++ b/src/BlockFieldSelectionManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\block_field;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Plugin\DefaultPluginManager;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ -18,9 +19,9 @@ class BlockFieldSelectionManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ -48,13 +49,13 @@ class BlockFieldSelectionManager extends DefaultPluginManager {
   /**
    * Returns an instance of BlockFieldSelectionInterface from $field.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field
+   * @param FieldDefinitionInterface $field
    *   The 'block_field' field definition.
    *
-   * @return \Drupal\block_field\BlockFieldSelectionInterface
+   * @return BlockFieldSelectionInterface
    *   The BlockFieldSelectionInterface instance.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function getSelectionHandler(FieldDefinitionInterface $field) {
     $settings = $field->getSetting('selection_settings') ? $field->getSetting('selection_settings') : [];
@@ -64,13 +65,13 @@ class BlockFieldSelectionManager extends DefaultPluginManager {
   /**
    * Returns an key => value array based on allowed referenceable blocks.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field
+   * @param FieldDefinitionInterface $field
    *   The 'block_field' field definition.
    *
    * @return array
    *   Array of options from definitions.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function getWidgetOptions(FieldDefinitionInterface $field) {
     $handler = $this->getSelectionHandler($field);
diff --git a/src/Plugin/Field/FieldFormatter/BlockFieldFormatter.php b/src/Plugin/Field/FieldFormatter/BlockFieldFormatter.php
index e6f119b..34148b3 100644
--- a/src/Plugin/Field/FieldFormatter/BlockFieldFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/BlockFieldFormatter.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\block_field\Plugin\Field\FieldFormatter;
 
+use Drupal\Core\Session\AccountProxy;
+use Drupal\block_field\BlockFieldItemInterface;
 use Drupal\Component\Plugin\Exception\ContextException;
 use Drupal\Core\Block\TitleBlockPluginInterface;
 use Drupal\Core\Cache\CacheableMetadata;
@@ -43,21 +45,21 @@ class BlockFieldFormatter extends FormatterBase implements TrustedCallbackInterf
   /**
    * The plugin context handler.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   * @var ContextHandlerInterface
    */
   protected $contextHandler;
 
   /**
    * Drupal\Core\Session\AccountProxy definition.
    *
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    */
   protected $currentUser;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
@@ -71,14 +73,14 @@ class BlockFieldFormatter extends FormatterBase implements TrustedCallbackInterf
   /**
    * The title resolver.
    *
-   * @var \Drupal\Core\Controller\TitleResolverInterface
+   * @var TitleResolverInterface
    */
   protected $titleResolver;
 
   /**
    * The route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
@@ -89,7 +91,7 @@ class BlockFieldFormatter extends FormatterBase implements TrustedCallbackInterf
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ -99,19 +101,19 @@ class BlockFieldFormatter extends FormatterBase implements TrustedCallbackInterf
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $contextRepository
+   * @param ContextRepositoryInterface $contextRepository
    *   The context repository service.
-   * @param \Drupal\Core\Plugin\Context\ContextHandlerInterface $contextHandler
+   * @param ContextHandlerInterface $contextHandler
    *   The ContextHandler for applying contexts to conditions properly.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
    *   A request stack symfony instance.
-   * @param \Drupal\Core\Controller\TitleResolverInterface $title_resolver
+   * @param TitleResolverInterface $title_resolver
    *   The title resolver.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   Current Route Matcher.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, ContextRepositoryInterface $contextRepository, ContextHandlerInterface $contextHandler, AccountProxyInterface $current_user, ModuleHandlerInterface $module_handler, RequestStack $request_stack, TitleResolverInterface $title_resolver, RouteMatchInterface $route_match) {
@@ -153,7 +155,7 @@ class BlockFieldFormatter extends FormatterBase implements TrustedCallbackInterf
   public function viewElements(FieldItemListInterface $items, $langcode) {
     $elements = [];
     foreach ($items as $delta => $item) {
-      /** @var \Drupal\block_field\BlockFieldItemInterface $item */
+      /** @var BlockFieldItemInterface $item */
       $block_instance = $item->getBlock();
 
       // Inject runtime contexts.
diff --git a/src/Plugin/Field/FieldFormatter/BlockFieldLabelFormatter.php b/src/Plugin/Field/FieldFormatter/BlockFieldLabelFormatter.php
index e5fd934..abeed73 100644
--- a/src/Plugin/Field/FieldFormatter/BlockFieldLabelFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/BlockFieldLabelFormatter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\block_field\Plugin\Field\FieldFormatter;
 
+use Drupal\block_field\BlockFieldItemInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\FormatterBase;
@@ -29,7 +30,7 @@ class BlockFieldLabelFormatter extends FormatterBase {
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ -58,7 +59,7 @@ class BlockFieldLabelFormatter extends FormatterBase {
   public function viewElements(FieldItemListInterface $items, $langcode) {
     $elements = [];
     foreach ($items as $delta => $item) {
-      /** @var \Drupal\block_field\BlockFieldItemInterface $item */
+      /** @var BlockFieldItemInterface $item */
       $block_instance = $item->getBlock();
       // Make sure the block exists and is accessible.
       if (!$block_instance) {
diff --git a/src/Plugin/Field/FieldType/BlockFieldItem.php b/src/Plugin/Field/FieldType/BlockFieldItem.php
index 6e66084..53a5520 100644
--- a/src/Plugin/Field/FieldType/BlockFieldItem.php
+++ b/src/Plugin/Field/FieldType/BlockFieldItem.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\block_field\Plugin\Field\FieldType;
 
+use Drupal\block_field\BlockFieldSelectionManager;
+use Drupal\Core\Block\BlockManagerInterface;
+use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\block_field\BlockFieldItemInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Field\FieldItemBase;
@@ -84,7 +87,7 @@ class BlockFieldItem extends FieldItemBase implements BlockFieldItemInterface {
   public function fieldSettingsForm(array $form, FormStateInterface $form_state) {
     $field = $form_state->getFormObject()->getEntity();
 
-    /** @var \Drupal\block_field\BlockFieldSelectionManager $block_field_selection_manager */
+    /** @var BlockFieldSelectionManager $block_field_selection_manager */
     $block_field_selection_manager = \Drupal::service('plugin.manager.block_field_selection');
     $options = $block_field_selection_manager->getOptions();
     $form = [
@@ -168,10 +171,10 @@ class BlockFieldItem extends FieldItemBase implements BlockFieldItemInterface {
       return NULL;
     }
 
-    /** @var \Drupal\Core\Block\BlockManagerInterface $block_manager */
+    /** @var BlockManagerInterface $block_manager */
     $block_manager = \Drupal::service('plugin.manager.block');
 
-    /** @var \Drupal\Core\Block\BlockPluginInterface $block_instance */
+    /** @var BlockPluginInterface $block_instance */
     $block_instance = $block_manager->createInstance($this->plugin_id, $this->settings);
 
     $plugin_definition = $block_instance->getPluginDefinition();
@@ -265,7 +268,7 @@ class BlockFieldItem extends FieldItemBase implements BlockFieldItemInterface {
    *
    * @param array $form
    *   The form where the settings form is being included in.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the (entire) configuration form.
    */
   public static function fieldSettingsFormValidate(array $form, FormStateInterface $form_state) {
diff --git a/src/Plugin/Field/FieldWidget/BlockFieldWidget.php b/src/Plugin/Field/FieldWidget/BlockFieldWidget.php
index 5652c27..cc9f263 100644
--- a/src/Plugin/Field/FieldWidget/BlockFieldWidget.php
+++ b/src/Plugin/Field/FieldWidget/BlockFieldWidget.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\block_field\Plugin\Field\FieldWidget;
 
+use Drupal\block_field\BlockFieldItemInterface;
+use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\block_field\BlockFieldSelectionManager;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Block\BlockManagerInterface;
@@ -32,21 +34,21 @@ class BlockFieldWidget extends WidgetBase implements ContainerFactoryPluginInter
   /**
    * The Drupal context repository.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;
 
   /**
    * The block manager.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;
 
   /**
    * The block field selection manager.
    *
-   * @var \Drupal\block_field\BlockFieldSelectionManager
+   * @var BlockFieldSelectionManager
    */
   protected $blockFieldSelectionManager;
 
@@ -118,7 +120,7 @@ class BlockFieldWidget extends WidgetBase implements ContainerFactoryPluginInter
    * {@inheritdoc}
    */
   public function formElement(FieldItemListInterface $items, $delta, array $element, array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\block_field\BlockFieldItemInterface $item */
+    /** @var BlockFieldItemInterface $item */
     $item =& $items[$delta];
 
     $field_name = $this->fieldDefinition->getName();
@@ -215,7 +217,7 @@ class BlockFieldWidget extends WidgetBase implements ContainerFactoryPluginInter
 
     // Set the label #value to the default block instance's label.
     $plugin_id = $trigger_element['#value'];
-    /** @var \Drupal\Core\Block\BlockPluginInterface $block_instance */
+    /** @var BlockPluginInterface $block_instance */
     if ($block_instance = $this->blockManager->createInstance($plugin_id)) {
       $settings_element['label']['#value'] = $block_instance->label();
     }
@@ -227,7 +229,7 @@ class BlockFieldWidget extends WidgetBase implements ContainerFactoryPluginInter
    * Form element validation handler.
    */
   public static function validate($element, FormStateInterface $form_state, $form) {
-    /** @var \Drupal\Core\Block\BlockManagerInterface $block_manager */
+    /** @var BlockManagerInterface $block_manager */
     $block_manager = \Drupal::service('plugin.manager.block');
 
     $values = $form_state->getValues();
diff --git a/src/Plugin/block_field/BlockFieldSelection/Blocks.php b/src/Plugin/block_field/BlockFieldSelection/Blocks.php
index aced345..127ca68 100644
--- a/src/Plugin/block_field/BlockFieldSelection/Blocks.php
+++ b/src/Plugin/block_field/BlockFieldSelection/Blocks.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\block_field\Plugin\block_field\BlockFieldSelection;
 
+use Drupal\block_field\BlockFieldManagerInterface;
 use Drupal\block_field\BlockFieldSelectionBase;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Form\FormStateInterface;
@@ -34,7 +35,7 @@ class Blocks extends BlockFieldSelectionBase {
    */
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
     $form = parent::buildConfigurationForm($form, $form_state);
-    /** @var \Drupal\block_field\BlockFieldManagerInterface $block_field_manager */
+    /** @var BlockFieldManagerInterface $block_field_manager */
     $block_field_manager = \Drupal::service('block_field.manager');
     $definitions = $block_field_manager->getBlockDefinitions();
     foreach ($definitions as $plugin_id => $definition) {
@@ -74,7 +75,7 @@ class Blocks extends BlockFieldSelectionBase {
    *
    * @param array $element
    *   A form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The $form_state from complete form.
    * @param array $complete_form
    *   Complete parent form.
diff --git a/src/Plugin/block_field/BlockFieldSelection/Categories.php b/src/Plugin/block_field/BlockFieldSelection/Categories.php
index 61c390c..fbc2d18 100755
--- a/src/Plugin/block_field/BlockFieldSelection/Categories.php
+++ b/src/Plugin/block_field/BlockFieldSelection/Categories.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\block_field\Plugin\block_field\BlockFieldSelection;
 
+use Drupal\block_field\BlockFieldManagerInterface;
 use Drupal\block_field\BlockFieldSelectionBase;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Form\FormStateInterface;
@@ -34,7 +35,7 @@ class Categories extends BlockFieldSelectionBase {
    */
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
     $form = parent::buildConfigurationForm($form, $form_state);
-    /** @var \Drupal\block_field\BlockFieldManagerInterface $block_field_manager */
+    /** @var BlockFieldManagerInterface $block_field_manager */
     $block_field_manager = \Drupal::service('block_field.manager');
     $categories = $block_field_manager->getBlockCategories();
     $options = [];
diff --git a/tests/modules/block_field_test/src/Plugin/Block/BlockFieldTestAuthenticatedBlock.php b/tests/modules/block_field_test/src/Plugin/Block/BlockFieldTestAuthenticatedBlock.php
index 9bb7655..87e3fb6 100644
--- a/tests/modules/block_field_test/src/Plugin/Block/BlockFieldTestAuthenticatedBlock.php
+++ b/tests/modules/block_field_test/src/Plugin/Block/BlockFieldTestAuthenticatedBlock.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\block_field_test\Plugin\Block;
 
+use Drupal\Core\Session\AccountProxy;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -23,7 +24,7 @@ class BlockFieldTestAuthenticatedBlock extends BlockBase implements ContainerFac
   /**
    * Drupal\Core\Session\AccountProxy definition.
    *
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    */
   protected $currentUser;
 
diff --git a/tests/src/Functional/WidgetTest.php b/tests/src/Functional/WidgetTest.php
index 3beee0d..dac01ec 100644
--- a/tests/src/Functional/WidgetTest.php
+++ b/tests/src/Functional/WidgetTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\block_field\Functional;
 
+use Drupal\node\NodeInterface;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -32,7 +33,7 @@ class WidgetTest extends BrowserTestBase {
   /**
    * The test block node.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $blockNode;
 
@@ -173,7 +174,7 @@ class WidgetTest extends BrowserTestBase {
    * @param int $numberOfNodes
    *   The number of nodes to create.
    *
-   * @return \Drupal\node\NodeInterface[]
+   * @return NodeInterface[]
    *   And array of created nodes.
    */
   private function createDummyNodes($bundle, $numberOfNodes) {
diff --git a/tests/src/Kernel/BlockFieldSelectionTest.php b/tests/src/Kernel/BlockFieldSelectionTest.php
index 3e3d63d..168512a 100644
--- a/tests/src/Kernel/BlockFieldSelectionTest.php
+++ b/tests/src/Kernel/BlockFieldSelectionTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\block_field\Kernel;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\block_field\BlockFieldSelectionInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Core\StringTranslation\TranslationInterface;
 
@@ -11,6 +14,7 @@ use Drupal\Core\StringTranslation\TranslationInterface;
  * @group block_field
  */
 class BlockFieldSelectionTest extends KernelTestBase {
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ -24,10 +28,10 @@ class BlockFieldSelectionTest extends KernelTestBase {
    * @param array $settings
    *   A configuration settings array.
    *
-   * @return \Drupal\block_field\BlockFieldSelectionInterface
+   * @return BlockFieldSelectionInterface
    *   Returns an instance of the plugin with passed settings.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function setUpSelectionInstance($plugin_id = 'blocks', array $settings = []) {
     return $this->container->get('plugin.manager.block_field_selection')->createInstance($plugin_id, $settings);
