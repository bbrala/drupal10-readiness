diff --git a/field_formatter.info.yml b/field_formatter.info.yml
index 17fbf6b..18b0a07 100644
--- a/field_formatter.info.yml
+++ b/field_formatter.info.yml
@@ -1,4 +1,4 @@
 name: 'Field formatter'
 description: 'Collection of general formatters that display a single field from the referenced entity.'
 type: module
-core_version_requirement: ^8.9 || ^9
+core_version_requirement: ^9.1 || ^10
diff --git a/field_formatter.module b/field_formatter.module
index 71e916a..cff9802 100644
--- a/field_formatter.module
+++ b/field_formatter.module
@@ -1,15 +1,15 @@
 <?php
 
+use Drupal\Core\Field\FieldTypePluginManagerInterface;
 /**
  * @file
  * Hook implementations for the Field formatter module.
  */
-
 /**
  * Implements hook_field_formatter_info_alter().
  */
 function field_formatter_field_formatter_info_alter(array &$info) {
-  /** @var \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_manager */
+  /** @var FieldTypePluginManagerInterface $field_type_manager */
   $field_type_manager = \Drupal::service('plugin.manager.field.field_type');
   $field_types = array_keys($field_type_manager->getDefinitions());
 
diff --git a/src/Plugin/Field/FieldFormatter/FieldFormatterBase.php b/src/Plugin/Field/FieldFormatter/FieldFormatterBase.php
index 38d514a..d792b2d 100644
--- a/src/Plugin/Field/FieldFormatter/FieldFormatterBase.php
+++ b/src/Plugin/Field/FieldFormatter/FieldFormatterBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\field_formatter\Plugin\Field\FieldFormatter;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
@@ -20,35 +22,35 @@ abstract class FieldFormatterBase extends EntityReferenceFormatterBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Entity view display.
    *
-   * @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface
+   * @var EntityViewDisplayInterface
    */
   protected $viewDisplay;
 
   /**
    * The entity bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The language manager object for retrieving the correct language code.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
@@ -59,7 +61,7 @@ abstract class FieldFormatterBase extends EntityReferenceFormatterBase {
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ -69,11 +71,11 @@ abstract class FieldFormatterBase extends EntityReferenceFormatterBase {
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager object for retrieving the correct language code.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, LanguageManagerInterface $language_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, EntityFieldManagerInterface $entity_field_manager) {
@@ -107,7 +109,7 @@ abstract class FieldFormatterBase extends EntityReferenceFormatterBase {
    * @param string $bundle_id
    *   The bundle ID.
    *
-   * @return \Drupal\Core\Entity\Display\EntityViewDisplayInterface
+   * @return EntityViewDisplayInterface
    *   Entity view display.
    */
   abstract protected function getViewDisplay($bundle_id);
@@ -163,7 +165,7 @@ abstract class FieldFormatterBase extends EntityReferenceFormatterBase {
    * {@inheritdoc}
    */
   public function viewElements(FieldItemListInterface $items, $langcode) {
-    /** @var \Drupal\Core\Entity\FieldableEntityInterface $entity */
+    /** @var FieldableEntityInterface $entity */
     $entities = $this->getEntitiesToView($items, $langcode);
 
     $build = [];
@@ -218,7 +220,7 @@ abstract class FieldFormatterBase extends EntityReferenceFormatterBase {
     $field_names = [];
     $entity_type_id = $this->fieldDefinition->getSetting('target_type');
 
-    /** @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info */
+    /** @var EntityTypeBundleInfoInterface $bundle_info */
     $bundle_info = $this->entityTypeBundleInfo;
     $fieldDefinitionHandlerSettings = $this->fieldDefinition->getSetting('handler_settings');
     $target_bundles = empty($fieldDefinitionHandlerSettings['target_bundles']) ? array_keys($bundle_info->getBundleInfo($entity_type_id)) : $fieldDefinitionHandlerSettings['target_bundles'];
@@ -246,7 +248,7 @@ abstract class FieldFormatterBase extends EntityReferenceFormatterBase {
   /**
    * Helper function to retrieve the $setting from the $form_state.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    * @param string $setting
    *   The setting key to retrieve.
diff --git a/src/Plugin/Field/FieldFormatter/FieldFormatterFromViewDisplay.php b/src/Plugin/Field/FieldFormatter/FieldFormatterFromViewDisplay.php
index 3bc6471..511cebe 100644
--- a/src/Plugin/Field/FieldFormatter/FieldFormatterFromViewDisplay.php
+++ b/src/Plugin/Field/FieldFormatter/FieldFormatterFromViewDisplay.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\field_formatter\Plugin\Field\FieldFormatter;
 
+use Drupal\Core\Entity\EntityDisplayRepository;
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Entity\Entity\EntityViewDisplay;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ -29,7 +31,7 @@ class FieldFormatterFromViewDisplay extends FieldFormatterBase implements Contai
   /**
    * The display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepository
+   * @var EntityDisplayRepository
    */
   protected $entityDisplayRepository;
 
@@ -40,7 +42,7 @@ class FieldFormatterFromViewDisplay extends FieldFormatterBase implements Contai
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ -50,15 +52,15 @@ class FieldFormatterFromViewDisplay extends FieldFormatterBase implements Contai
    *   The view mode.
    * @param array $third_party_settings
    *   Third party settings.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager object for retrieving the correct language code.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, LanguageManagerInterface $language_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, EntityFieldManagerInterface $entity_field_manager, EntityTypeManagerInterface $entity_type_manager, EntityDisplayRepositoryInterface $entity_display_repository) {
@@ -151,7 +153,7 @@ class FieldFormatterFromViewDisplay extends FieldFormatterBase implements Contai
       $field_name = $this->getSetting('field_name');
       $entity_type_id = $this->fieldDefinition->getSetting('target_type');
       if (($view_mode = $this->getSetting('view_mode')) && $view_display = EntityViewDisplay::load($entity_type_id . '.' . $bundle_id . '.' . $view_mode)) {
-        /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $view_display */
+        /** @var EntityViewDisplayInterface $view_display */
         $components = $view_display->getComponents();
         foreach ($components as $component_name => $component) {
           if ($component_name != $field_name) {
diff --git a/src/Plugin/Field/FieldFormatter/FieldFormatterWithInlineSettings.php b/src/Plugin/Field/FieldFormatter/FieldFormatterWithInlineSettings.php
index 9abdd7d..7c4d279 100644
--- a/src/Plugin/Field/FieldFormatter/FieldFormatterWithInlineSettings.php
+++ b/src/Plugin/Field/FieldFormatter/FieldFormatterWithInlineSettings.php
@@ -33,14 +33,14 @@ class FieldFormatterWithInlineSettings extends FieldFormatterBase implements Con
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The formatter plugin manager.
    *
-   * @var \Drupal\Core\Field\FormatterPluginManager
+   * @var FormatterPluginManager
    */
   protected $formatterPluginManager;
 
@@ -51,7 +51,7 @@ class FieldFormatterWithInlineSettings extends FieldFormatterBase implements Con
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ -61,16 +61,16 @@ class FieldFormatterWithInlineSettings extends FieldFormatterBase implements Con
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager object for retrieving the correct language code.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    *   The entity field manager.
-   * @param \Drupal\Core\Field\FormatterPluginManager $formatter_plugin_manager
+   * @param FormatterPluginManager $formatter_plugin_manager
    *   The formatter plugin manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, LanguageManagerInterface $language_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, EntityFieldManagerInterface $entity_field_manager, FormatterPluginManager $formatter_plugin_manager, EntityTypeManagerInterface $entity_type_manager) {
@@ -115,10 +115,10 @@ class FieldFormatterWithInlineSettings extends FieldFormatterBase implements Con
   /**
    * Get field definition for given field storage definition.
    *
-   * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $field_storage_definition
+   * @param FieldStorageDefinitionInterface $field_storage_definition
    *   The field storage definition.
    *
-   * @return \Drupal\Core\Field\BaseFieldDefinition
+   * @return BaseFieldDefinition
    *   The field definition.
    */
   protected function getFieldDefinition(FieldStorageDefinitionInterface $field_storage_definition) {
@@ -128,7 +128,7 @@ class FieldFormatterWithInlineSettings extends FieldFormatterBase implements Con
   /**
    * Get all available formatters by loading available ones and filtering out.
    *
-   * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $field_storage_definition
+   * @param FieldStorageDefinitionInterface $field_storage_definition
    *   The field storage definition.
    *
    * @return string[]
@@ -163,7 +163,7 @@ class FieldFormatterWithInlineSettings extends FieldFormatterBase implements Con
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ -188,7 +188,7 @@ class FieldFormatterWithInlineSettings extends FieldFormatterBase implements Con
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
diff --git a/src/Plugin/Field/FieldFormatter/FieldLink.php b/src/Plugin/Field/FieldFormatter/FieldLink.php
index fa77105..6f8275f 100644
--- a/src/Plugin/Field/FieldFormatter/FieldLink.php
+++ b/src/Plugin/Field/FieldFormatter/FieldLink.php
@@ -24,7 +24,7 @@ class FieldLink extends FieldWrapperBase {
   /**
    * The language manager object for retrieving the correct language code.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
@@ -35,7 +35,7 @@ class FieldLink extends FieldWrapperBase {
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ -45,9 +45,9 @@ class FieldLink extends FieldWrapperBase {
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\Core\Field\FormatterPluginManager $formatter_plugin_manager
+   * @param FormatterPluginManager $formatter_plugin_manager
    *   The formatter plugin manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager object for retrieving the correct language code.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, FormatterPluginManager $formatter_plugin_manager, LanguageManagerInterface $language_manager) {
diff --git a/src/Plugin/Field/FieldFormatter/FieldWrapperBase.php b/src/Plugin/Field/FieldFormatter/FieldWrapperBase.php
index 7e14801..0be3991 100644
--- a/src/Plugin/Field/FieldFormatter/FieldWrapperBase.php
+++ b/src/Plugin/Field/FieldFormatter/FieldWrapperBase.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\field_formatter\Plugin\Field\FieldFormatter;
 
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
+use Drupal\Core\Entity\EntityFieldManagerInterface;
+use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Core\Entity\Entity\EntityViewDisplay;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ -23,21 +26,21 @@ abstract class FieldWrapperBase extends FormatterBase implements ContainerFactor
   /**
    * Entity view display.
    *
-   * @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface
+   * @var EntityViewDisplayInterface
    */
   protected $viewDisplay;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The formatter plugin manager.
    *
-   * @var \Drupal\Core\Field\FormatterPluginManager
+   * @var FormatterPluginManager
    */
   protected $formatterPluginManager;
 
@@ -48,7 +51,7 @@ abstract class FieldWrapperBase extends FormatterBase implements ContainerFactor
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ -58,7 +61,7 @@ abstract class FieldWrapperBase extends FormatterBase implements ContainerFactor
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\Core\Field\FormatterPluginManager $formatter_plugin_manager
+   * @param FormatterPluginManager $formatter_plugin_manager
    *   The formatter plugin manager.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, FormatterPluginManager $formatter_plugin_manager) {
@@ -95,10 +98,10 @@ abstract class FieldWrapperBase extends FormatterBase implements ContainerFactor
   /**
    * Get field definition for given field storage definition.
    *
-   * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $field_storage_definition
+   * @param FieldStorageDefinitionInterface $field_storage_definition
    *   The field storage definition.
    *
-   * @return \Drupal\Core\Field\BaseFieldDefinition
+   * @return BaseFieldDefinition
    *   The field definition.
    */
   protected function getFieldDefinition(FieldStorageDefinitionInterface $field_storage_definition) {
@@ -108,7 +111,7 @@ abstract class FieldWrapperBase extends FormatterBase implements ContainerFactor
   /**
    * Get all available formatters by loading available ones and filtering out.
    *
-   * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $field_storage_definition
+   * @param FieldStorageDefinitionInterface $field_storage_definition
    *   The field storage definition.
    *
    * @return string[]
@@ -154,7 +157,7 @@ abstract class FieldWrapperBase extends FormatterBase implements ContainerFactor
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ -251,7 +254,7 @@ abstract class FieldWrapperBase extends FormatterBase implements ContainerFactor
    * @param string $bundle_id
    *   The bundle ID.
    *
-   * @return \Drupal\Core\Entity\Display\EntityViewDisplayInterface
+   * @return EntityViewDisplayInterface
    *   Entity view display.
    */
   protected function getViewDisplay($bundle_id) {
@@ -275,7 +278,7 @@ abstract class FieldWrapperBase extends FormatterBase implements ContainerFactor
    * Returns the wrapped field output.
    */
   protected function getFieldOutput(FieldItemListInterface $items, $langcode) {
-    /** @var \Drupal\Core\Entity\FieldableEntityInterface $entity */
+    /** @var FieldableEntityInterface $entity */
     $entity = $items->getEntity();
 
     $build = $this->getViewDisplay($entity->bundle())->build($entity);
@@ -285,7 +288,7 @@ abstract class FieldWrapperBase extends FormatterBase implements ContainerFactor
   /**
    * Helper function to retrieve the $setting from the $form_state.
    *
-   * @param Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    * @param string $setting
    *   The setting key to retrieve.
diff --git a/src/Tests/FieldFormatterFromViewDisplayUITest.php b/src/Tests/FieldFormatterFromViewDisplayUITest.php
index f63538a..031127a 100644
--- a/src/Tests/FieldFormatterFromViewDisplayUITest.php
+++ b/src/Tests/FieldFormatterFromViewDisplayUITest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\field_formatter\Tests;
 
+use Drupal\User\UserInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Tests\BrowserTestBase;
 
@@ -16,7 +17,7 @@ class FieldFormatterFromViewDisplayUITest extends BrowserTestBase {
   /**
    * The test user.
    *
-   * @var \Drupal\User\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
@@ -36,7 +37,7 @@ class FieldFormatterFromViewDisplayUITest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->adminUser = $this->drupalCreateUser([
@@ -58,8 +59,11 @@ class FieldFormatterFromViewDisplayUITest extends BrowserTestBase {
       'name[0][value]' => $term_name,
       'field_test_field[0][value]' => $field,
     ];
-    $this->drupalPostForm(NULL, $edit_term, $this->t('Save'));
-    $this->assertText("Created new term $term_name.", 'Created term.');
+    $this->submitForm($edit_term, $this->t('Save'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Created new term $term_name.");
 
     // Add content.
     $this->drupalGet('node/add/test_content_type');
@@ -68,9 +72,9 @@ class FieldFormatterFromViewDisplayUITest extends BrowserTestBase {
       'title[0][value]' => $content_name,
       'field_field_test_ref[0][target_id]' => $term_name,
     ];
-    $this->drupalPostForm(NULL, $edit_content, $this->t('Save'));
-    $this->assertRaw('<div class="field__label">test_field</div>', 'Field is correctly displayed on node page.');
-    $this->assertRaw('<div class="field__item">' . $field . '</div>', "Field's content was found.");
+    $this->submitForm($edit_content, $this->t('Save'));
+    $this->assertSession()->responseContains('<div class="field__label">test_field</div>');
+    $this->assertSession()->responseContains('<div class="field__item">' . $field . '</div>');
   }
 
   /**
@@ -81,10 +85,10 @@ class FieldFormatterFromViewDisplayUITest extends BrowserTestBase {
     $this->drupalLogin($account);
 
     $this->drupalGet('admin/structure/types/manage/test_content_type/display');
-    $this->drupalPostForm(NULL, [], 'field_field_test_ref_settings_edit');
-    $this->assertFieldByName('fields[field_field_test_ref][settings_edit_form][settings][view_mode]', NULL, 'Field to select the view mode is available.');
-    $this->assertRaw('<option value="default">Default</option>', 'Default view mode can be selected.');
-    $this->assertFieldByName('fields[field_field_test_ref][settings_edit_form][settings][field_name]', NULL, 'Field to select the field name is available.');
+    $this->submitForm([], 'field_field_test_ref_settings_edit');
+    $this->assertSession()->fieldExists('fields[field_field_test_ref][settings_edit_form][settings][view_mode]');
+    $this->assertSession()->responseContains('<option value="default">Default</option>');
+    $this->assertSession()->fieldExists('fields[field_field_test_ref][settings_edit_form][settings][field_name]');
   }
 
 }
diff --git a/src/Tests/FieldFormatterWithInlineSettingsUITest.php b/src/Tests/FieldFormatterWithInlineSettingsUITest.php
index 1463b10..5444d26 100644
--- a/src/Tests/FieldFormatterWithInlineSettingsUITest.php
+++ b/src/Tests/FieldFormatterWithInlineSettingsUITest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\field_formatter\Tests;
 
+use Drupal\User\UserInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Tests\BrowserTestBase;
 
@@ -16,7 +17,7 @@ class FieldFormatterWithInlineSettingsUITest extends BrowserTestBase {
   /**
    * The test user.
    *
-   * @var \Drupal\User\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
@@ -36,7 +37,7 @@ class FieldFormatterWithInlineSettingsUITest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->adminUser = $this->drupalCreateUser([
@@ -60,8 +61,11 @@ class FieldFormatterWithInlineSettingsUITest extends BrowserTestBase {
       'name[0][value]' => $term_name,
       'field_test_field[0][value]' => $field,
     ];
-    $this->drupalPostForm(NULL, $edit_term, $this->t('Save'));
-    $this->assertText("Created new term $term_name.", 'Created term.');
+    $this->submitForm($edit_term, $this->t('Save'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Created new term $term_name.");
 
     // Add content.
     $this->drupalGet('node/add/test_content_type');
@@ -70,21 +74,21 @@ class FieldFormatterWithInlineSettingsUITest extends BrowserTestBase {
       'title[0][value]' => $content_name,
       'field_field_test_ref_inline[0][target_id]' => $term_name,
     ];
-    $this->drupalPostForm(NULL, $edit_content, $this->t('Save'));
-    $this->assertRaw('<div class="field__label">test_field</div>', 'Field is correctly displayed on node page.');
-    $this->assertRaw('<div class="field__item">' . $field . '</div>', "Field's content was found.");
+    $this->submitForm($edit_content, $this->t('Save'));
+    $this->assertSession()->responseContains('<div class="field__label">test_field</div>');
+    $this->assertSession()->responseContains('<div class="field__item">' . $field . '</div>');
 
     // Check that on display management all fields of the destination entity
     // are available (all bundles).
     $this->drupalGet('admin/structure/types/manage/test_content_type/display');
     // Open the formatter settings.
-    $this->drupalPostForm(NULL, [], 'field_field_test_ref_inline_settings_edit');
-    $this->assertFieldByName('fields[field_field_test_ref_inline][settings_edit_form][settings][field_name]', NULL, 'Destination fields dropdown element found.');
+    $this->submitForm([], 'field_field_test_ref_inline_settings_edit');
+    $this->assertSession()->fieldExists('fields[field_field_test_ref_inline][settings_edit_form][settings][field_name]');
     $field_select_element = $this->xpath('//*[@name="fields[field_field_test_ref_inline][settings_edit_form][settings][field_name]"]');
     $field_select_id = $field_select_element[0]->getAttribute('id');
-    $this->assertOption($field_select_id, 'field_test_field', 'First target field is an available option.');
-    $this->assertOption($field_select_id, 'field_test_field2', 'Second target field is an available option.');
-    $this->assertFieldByName('fields[field_field_test_ref_inline][settings_edit_form][settings][label]', 'above', 'The "Label" dropdown element exists and is set to "Above".');
+    $this->assertSession()->optionExists($field_select_id, 'field_test_field', 'First target field is an available option.');
+    $this->assertSession()->optionExists($field_select_id, 'field_test_field2', 'Second target field is an available option.');
+    $this->assertSession()->fieldValueEquals('fields[field_field_test_ref_inline][settings_edit_form][settings][label]', 'above');
 
   }
 
diff --git a/tests/src/Functional/FieldFormatterFunctionalTest.php b/tests/src/Functional/FieldFormatterFunctionalTest.php
index 56dab58..e372368 100644
--- a/tests/src/Functional/FieldFormatterFunctionalTest.php
+++ b/tests/src/Functional/FieldFormatterFunctionalTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\field_formatter\Functional;
 
+use Drupal\Core\Session\AccountInterface;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -22,14 +23,14 @@ class FieldFormatterFunctionalTest extends BrowserTestBase {
   /**
    * A user with authenticated permissions.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $user;
 
   /**
    * A user with admin permissions.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminUser;
 
diff --git a/tests/src/Kernel/Plugin/Field/FieldFormatter/FieldFormatterFromViewDisplayTest.php b/tests/src/Kernel/Plugin/Field/FieldFormatter/FieldFormatterFromViewDisplayTest.php
index 25fce69..9612ec2 100644
--- a/tests/src/Kernel/Plugin/Field/FieldFormatter/FieldFormatterFromViewDisplayTest.php
+++ b/tests/src/Kernel/Plugin/Field/FieldFormatter/FieldFormatterFromViewDisplayTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\field_formatter\Kernel\Plugin\Field\FieldFormatter;
 
+use Drupal\User\UserInterface;
 use Drupal\Core\Entity\Entity\EntityViewDisplay;
 use Drupal\Core\Entity\Entity\EntityViewMode;
 use Drupal\entity_test\Entity\EntityTest;
@@ -20,7 +21,7 @@ class FieldFormatterFromViewDisplayTest extends KernelTestBase {
   /**
    * Admin user.
    *
-   * @var \Drupal\User\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
diff --git a/tests/src/Kernel/Plugin/Field/FieldFormatter/FieldFormatterWithInlineSettingsTest.php b/tests/src/Kernel/Plugin/Field/FieldFormatter/FieldFormatterWithInlineSettingsTest.php
index 27c3544..92745d5 100644
--- a/tests/src/Kernel/Plugin/Field/FieldFormatter/FieldFormatterWithInlineSettingsTest.php
+++ b/tests/src/Kernel/Plugin/Field/FieldFormatter/FieldFormatterWithInlineSettingsTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\field_formatter\Kernel\Plugin\Field\FieldFormatter;
 
+use Drupal\User\UserInterface;
 use Drupal\Core\Entity\Entity\EntityViewDisplay;
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\field\Entity\FieldConfig;
@@ -19,7 +20,7 @@ class FieldFormatterWithInlineSettingsTest extends KernelTestBase {
   /**
    * Admin user.
    *
-   * @var \Drupal\User\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
diff --git a/tests/src/Kernel/Plugin/Field/FieldFormatter/FieldLinkTest.php b/tests/src/Kernel/Plugin/Field/FieldFormatter/FieldLinkTest.php
index 8505893..0b2a26b 100644
--- a/tests/src/Kernel/Plugin/Field/FieldFormatter/FieldLinkTest.php
+++ b/tests/src/Kernel/Plugin/Field/FieldFormatter/FieldLinkTest.php
@@ -19,7 +19,7 @@ class FieldLinkTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installEntitySchema('entity_test');
@@ -32,7 +32,7 @@ class FieldLinkTest extends KernelTestBase {
    * @covers ::getViewDisplay
    */
   public function testFieldLinkFormatter() {
-    /** @var \Drupal\entity_test\Entity\EntityTest $entity */
+    /** @var EntityTest $entity */
     $entity = EntityTest::create([
       'name' => 'test name',
     ]);
