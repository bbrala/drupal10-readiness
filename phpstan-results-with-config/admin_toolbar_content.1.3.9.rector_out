modules/contrib/admin_toolbar_content/admin_toolbar_content.api.php
modules/contrib/admin_toolbar_content/admin_toolbar_content.install
modules/contrib/admin_toolbar_content/admin_toolbar_content.module
modules/contrib/admin_toolbar_content/src/AdminToolbarContentHelper.php
modules/contrib/admin_toolbar_content/src/AlternativeContentView.php
modules/contrib/admin_toolbar_content/src/Form/AdminToolbarContentSettingsForm.php
modules/contrib/admin_toolbar_content/src/Plugin/Derivative/CategoriesMenuLinkDerivative.php
modules/contrib/admin_toolbar_content/src/Plugin/Derivative/ContentMenuLinkDerivative.php
modules/contrib/admin_toolbar_content/src/Plugin/Derivative/DrupalMenuLinkDerivative.php
modules/contrib/admin_toolbar_content/src/Plugin/Derivative/MediaMenuLinkDerivative.php
modules/contrib/admin_toolbar_content/src/Plugin/Derivative/WebformsMenuLinkDerivative.php

7 files with changes
====================

1) modules/contrib/admin_toolbar_content/src/Plugin/Derivative/WebformsMenuLinkDerivative.php:0

    ---------- begin diff ----------
@@ @@
 <?php
 namespace Drupal\admin_toolbar_content\Plugin\Derivative;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

-  /** @var \Drupal\Core\Language\LanguageManagerInterface $languageManager */
+  /** @var LanguageManagerInterface $languageManager */
   private $languageManager;

   /**
    * Create an AdminToolbarToolsHelper object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    */
   public function __construct(ModuleHandlerInterface $moduleHandler, LanguageManagerInterface $languageManager) {
     $this->moduleHandler = $moduleHandler;
@@ @@
           'weight' => -7,
         ] + $base_plugin_definition;

-      /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager */
+      /** @var EntityTypeManagerInterface $entityTypeManager */
       $entityTypeManager = \Drupal::service('entity_type.manager');

       $webforms = $entityTypeManager->getStorage('webform')->loadMultiple(NULL);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/admin_toolbar_content/src/Plugin/Derivative/MediaMenuLinkDerivative.php:0

    ---------- begin diff ----------
@@ @@
 <?php
 namespace Drupal\admin_toolbar_content\Plugin\Derivative;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;

-  /** @var \Drupal\Core\Language\LanguageManagerInterface $languageManager */
+  /** @var LanguageManagerInterface $languageManager */
   private $languageManager;

   /**
    * Create an AdminToolbarToolsHelper object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
-   * @param \Drupal\Core\Routing\RouteProviderInterface $routeProvider
+   * @param ModuleHandlerInterface $moduleHandler
+   * @param RouteProviderInterface $routeProvider
    */
   public function __construct(ModuleHandlerInterface $moduleHandler, RouteProviderInterface $routeProvider, LanguageManagerInterface $languageManager) {
     $this->moduleHandler = $moduleHandler;
@@ @@
         ] + $base_plugin_definition;
       }

-      /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager */
+      /** @var EntityTypeManagerInterface $entityTypeManager */
       $entityTypeManager = \Drupal::service('entity_type.manager');

       // Add a list terms for each vocabulary.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/admin_toolbar_content/src/Plugin/Derivative/DrupalMenuLinkDerivative.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;

-  /** @var \Drupal\Core\Language\LanguageManagerInterface $languageManager */
+  /** @var LanguageManagerInterface $languageManager */
   private $languageManager;

   /**
    * Create an AdminToolbarToolsHelper object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
-   * @param \Drupal\Core\Routing\RouteProviderInterface $routeProvider
+   * @param ModuleHandlerInterface $moduleHandler
+   * @param RouteProviderInterface $routeProvider
    */
   public function __construct(ModuleHandlerInterface $moduleHandler, RouteProviderInterface $routeProvider, LanguageManagerInterface $languageManager) {
     $this->moduleHandler = $moduleHandler;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/admin_toolbar_content/src/Plugin/Derivative/ContentMenuLinkDerivative.php:0

    ---------- begin diff ----------
@@ @@
 <?php
 namespace Drupal\admin_toolbar_content\Plugin\Derivative;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\node\NodeTypeInterface;
+use Drupal\node\NodeInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

-  /** @var \Drupal\Core\Language\LanguageManagerInterface $languageManager */
+  /** @var LanguageManagerInterface $languageManager */
   private $languageManager;

   /**
    * Create an AdminToolbarToolsHelper object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    */
   public function __construct(ModuleHandlerInterface $moduleHandler, LanguageManagerInterface $languageManager) {
     $this->moduleHandler = $moduleHandler;
@@ @@

     if ($enhance_content_item && $this->moduleHandler->moduleExists('node')) {

-      /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager */
+      /** @var EntityTypeManagerInterface $entityTypeManager */
       $entityTypeManager = \Drupal::service('entity_type.manager');

       $content_type_collections = \Drupal::service('module_handler')
         ->invokeAll('content_type_collections');

-      /** @var \Drupal\node\NodeTypeInterface[] $contentTypes */
+      /** @var NodeTypeInterface[] $contentTypes */
       $contentTypes = $entityTypeManager->getStorage('node_type')
         ->loadMultiple();

@@ @@
   }

   /**
-   * @param \Drupal\node\NodeTypeInterface $content_type
+   * @param NodeTypeInterface $content_type
    * @param string $collection
    * @param array $links
    * @param array $base_plugin_definition
    */
-  protected function addContentTypeLink(\Drupal\node\NodeTypeInterface $content_type, $collection, &$links, $base_plugin_definition) {
+  protected function addContentTypeLink(NodeTypeInterface $content_type, $collection, &$links, $base_plugin_definition) {

     $link_name = $collection . '.' . $content_type->id();

@@ @@
           break;
         }

-        /** @var \Drupal\node\NodeInterface $entity */
+        /** @var NodeInterface $entity */
         $entity = $entity_storage->load($id);
         if ($entity === null) continue; // HACK fix, getQuery can return results which load can't load???
         $links[$link_name . '.entity.' . $entity->id()] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/admin_toolbar_content/src/Plugin/Derivative/CategoriesMenuLinkDerivative.php:0

    ---------- begin diff ----------
@@ @@
 <?php
 namespace Drupal\admin_toolbar_content\Plugin\Derivative;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

-  /** @var \Drupal\Core\Language\LanguageManagerInterface $languageManager */
+  /** @var LanguageManagerInterface $languageManager */
   private $languageManager;

   /**
    * Create an AdminToolbarToolsHelper object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    */
   public function __construct(ModuleHandlerInterface $moduleHandler, LanguageManagerInterface $languageManager) {
     $this->moduleHandler = $moduleHandler;
@@ @@
           'weight' => -9,
         ] + $base_plugin_definition;

-      /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager */
+      /** @var EntityTypeManagerInterface $entityTypeManager */
       $entityTypeManager = \Drupal::service('entity_type.manager');

       // Add a list terms for each vocabulary.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/admin_toolbar_content/src/AdminToolbarContentHelper.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Create an AdminToolbarToolsHelper object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/admin_toolbar_content/admin_toolbar_content.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Menu\MenuLinkDefault;
+use Drupal\Core\Menu\MenuLinkBase;
+use Drupal\Core\Routing\RouteProviderInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Url;
 use Symfony\Component\Routing\Exception\RouteNotFoundException;
@@ @@
  *
  * @param array $links
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function admin_toolbar_content_menu_links_discovered_alter(array &$links) {
   $moduleHandler = \Drupal::moduleHandler();
@@ @@
     // In rare cases (for unknown reasons) menu_name may not be set.
     // As fallback, we can fetch it from the first menu item.
     $first_link = reset($variables['items']);
-    /** @var Drupal\Core\Menu\MenuLinkDefault $original_link */
+    /** @var MenuLinkDefault $original_link */
     // Fetch the menu_name from the original link.
     $original_link = $first_link['original_link'];
     $variables['menu_name'] = $original_link->getMenuName();
@@ @@
   $route_name = $route;
   $route_params = [];
   if (!empty($item['original_link'])) {
-    /** @var \Drupal\Core\Menu\MenuLinkBase $original_link */
+    /** @var MenuLinkBase $original_link */
     $original_link = $item['original_link'];
     $route_name = $original_link->getRouteName();
     $route_params = $original_link->getRouteParameters();
@@ @@
  *   FALSE otherwise.
  */
 function admin_toolbar_content_is_overview_page($route_name) {
-  /** @var \Drupal\Core\Routing\RouteProviderInterface $route_provider */
+  /** @var RouteProviderInterface $route_provider */
   $route_provider = \Drupal::service('router.route_provider');
   $overview_page_controllers = [
     '\Drupal\system\Controller\AdminController::index',
@@ @@

   $type = \Drupal::request()->get('type');

-  /** @var \Drupal\Core\Url $url */
+  /** @var Url $url */
   $url = $variables['element']['#link']['url'];
   $route = $url->getRouteName();
   $cache = false;
@@ @@
   }

   if ($type) {
-    /** @var \Drupal\Core\Entity\EntityStorageInterface $storage */
+    /** @var EntityStorageInterface $storage */
     $storage = \Drupal::service('entity_type.manager')->getStorage($entity_type_id);

     $url = Url::fromRoute($route_name, [$entity_type_id => $type]);
@@ @@
         $variables['link']['#url'] = $url;
       }
       else {
-        $variables['element']['#access'] = \Drupal\Core\Access\AccessResult::forbidden();
-        $variables['link']['#access'] = \Drupal\Core\Access\AccessResult::forbidden();
+        $variables['element']['#access'] = AccessResult::forbidden();
+        $variables['link']['#access'] = AccessResult::forbidden();
       }
     }
   }
@@ @@

       if ($content_type) {

-        /** @var \Drupal\Core\Entity\EntityStorageInterface $storage */
+        /** @var EntityStorageInterface $storage */
         $storage = \Drupal::service('entity_type.manager')->getStorage('node_type');
         $contentType = $storage->load($content_type);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 7 files have been changed by Rector                                       

