modules/contrib/userpoints/src/Access/UserpointsNodeTabAccess.php
modules/contrib/userpoints/src/Access/UserpointsTabAccess.php
modules/contrib/userpoints/src/Access/UserpointsUserTabAccess.php
modules/contrib/userpoints/src/Controller/UserPointsController.php
modules/contrib/userpoints/src/Entity/UserPoints.php
modules/contrib/userpoints/src/Entity/UserPointsInterface.php
modules/contrib/userpoints/src/Entity/UserPointsType.php
modules/contrib/userpoints/src/Entity/UserPointsTypeInterface.php
modules/contrib/userpoints/src/Entity/UserPointsViewsData.php
modules/contrib/userpoints/src/Exception/UserPointsException.php
modules/contrib/userpoints/src/Form/UserPointsDeleteForm.php
modules/contrib/userpoints/src/Form/UserPointsForm.php
modules/contrib/userpoints/src/Form/UserPointsRevisionDeleteForm.php
modules/contrib/userpoints/src/Form/UserPointsRevisionRevertForm.php
modules/contrib/userpoints/src/Form/UserPointsSettingsForm.php
modules/contrib/userpoints/src/Form/UserPointsTypeDeleteForm.php
modules/contrib/userpoints/src/Form/UserPointsTypeForm.php
modules/contrib/userpoints/src/Form/UserpointsEntityTabForm.php
modules/contrib/userpoints/src/Form/UserpointsNodeTabForm.php
modules/contrib/userpoints/src/Form/UserpointsUserTabForm.php
modules/contrib/userpoints/src/Plugin/Derivative/DynamicLocalTasks.php
modules/contrib/userpoints/src/Plugin/rest/resource/UserpointsRestResource.php
modules/contrib/userpoints/src/Routing/UserpointsRoutes.php
modules/contrib/userpoints/src/Service/UserPointsService.php
modules/contrib/userpoints/src/Service/UserPointsServiceInterface.php
modules/contrib/userpoints/src/UserPointsAccessControlHandler.php
modules/contrib/userpoints/src/UserPointsHtmlRouteProvider.php
modules/contrib/userpoints/src/UserPointsPermissions.php
modules/contrib/userpoints/src/UserPointsStorage.php
modules/contrib/userpoints/src/UserPointsStorageInterface.php
modules/contrib/userpoints/src/UserPointsTypeHtmlRouteProvider.php
modules/contrib/userpoints/src/UserPointsTypeListBuilder.php
modules/contrib/userpoints/tests/src/Functional/UserpointsTest.php
modules/contrib/userpoints/userpoints.module

18 files with changes
=====================

1) modules/contrib/userpoints/src/UserPointsStorageInterface.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Gets a list of User points revision IDs for a specific User points.
    *
-   * @param \Drupal\userpoints\Entity\UserPointsInterface $entity
+   * @param UserPointsInterface $entity
    *   The User points entity.
    *
    * @return int[]
@@ @@
   /**
    * Gets a list of revision IDs having a given user as User points author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


2) modules/contrib/userpoints/src/UserPointsPermissions.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * Returns a list of node permissions for a given node type.
    *
-   * @param \Drupal\userpoints\Entity\UserPointsType $type
+   * @param UserPointsType $type
    *   The UserPoints type.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/userpoints/src/UserPointsHtmlRouteProvider.php:47

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/userpoints/src/Service/UserPointsServiceInterface.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Get points entity for a referencing (owner) entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to check.
    * @param string $points_type
    *   Type of points.
    *
-   * @return \Drupal\userpoints\Entity\UserPoints|null
+   * @return UserPoints|null
    *   User points entity.
    */
   public function getPointsEntity(EntityInterface $entity, $points_type);
@@ @@
   /**
    * Get points for an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to check.
    * @param string $points_type
    *   Type of points to get.
@@ @@
   /**
    * Gets points revisions data for an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to check.
    * @param string $points_type
    *   Type of points to get log for.
@@ @@
    *   The number of points (can be negative to subtract).
    * @param string $points_type
    *   Type of points to add.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to check.
    * @param string $log
    *   Revision log messsage for the operation.
@@ @@
    *   The number of points to transfer (must be positive).
    * @param string $points_type
    *   Type of points to get.
-   * @param \Drupal\Core\Entity\EntityInterface $source
+   * @param EntityInterface $source
    *   The source entity.
-   * @param \Drupal\Core\Entity\EntityInterface $target
+   * @param EntityInterface $target
    *   The target entity.
    * @param string $log
    *   Revision log messsage for the operation.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/userpoints/src/Service/UserPointsService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\userpoints\Service;

+use Drupal\Core\Entity\Sql\SqlEntityStorageInterface;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ @@
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\userpoints\Entity\UserPointsInterface;
 use Drupal\userpoints\Exception\UserPointsException;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Defines the User Points service.
@@ @@
   /**
    * Userpoints storage.
    *
-   * @var \Drupal\Core\Entity\Sql\SqlEntityStorageInterface
+   * @var SqlEntityStorageInterface
    */
   protected $userPointsStorage;

@@ @@
   /**
    * The Event Dispatcher service.
    *
-   * @var Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The current user object.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The config factory service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundleInfo
+   * @param EntityTypeBundleInfoInterface $bundleInfo
    *   The bundle info service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The Event Dispatcher service.
-   * @param \Drupal\Core\Session\AccountInterface $currentUser
+   * @param AccountInterface $currentUser
    *   The current user instance.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/userpoints/src/Routing/UserpointsRoutes.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\userpoints\Routing;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The module config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new UserpointsRoutes object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory object.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    *   The stream wrapper manager service.
    */
@@ @@
   /**
    * Returns an array of route objects.
    *
-   * @return \Symfony\Component\Routing\Route[]
+   * @return Route[]
    *   An array of route objects.
    */
   public function routes() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/userpoints/src/Plugin/rest/resource/UserpointsRestResource.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * The current user instance.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Entity Type Manager instance.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The userpoints service.
    *
-   * @var \Drupal\userpoints\Service\UserPointsServiceInterface
+   * @var UserPointsServiceInterface
    */
   protected $userpointsService;

@@ @@
    *   The plugin implementation definition.
    * @param array $serializer_formats
    *   The available serialization formats.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   A current user instance.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
-   * @param \Drupal\userpoints\Service\UserPointsServiceInterface $userpointsService
+   * @param UserPointsServiceInterface $userpointsService
    *   The userpoints service.
    */
   public function __construct(
@@ @@
    * @param array $data
    *   The request data.
    *
-   * @return \Drupal\rest\ModifiedResourceResponse
+   * @return ModifiedResourceResponse
    *   The HTTP response object.
    */
   public function post(array $data) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/userpoints/src/Plugin/Derivative/DynamicLocalTasks.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\userpoints\Plugin\Derivative;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * The module config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new DynamicLocalTasks object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory object.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    *   The stream wrapper manager service.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/userpoints/src/Form/UserpointsUserTabForm.php:21

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
-   * @param Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The account for which points are edited.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/userpoints/src/Form/UserpointsNodeTabForm.php:21

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
-   * @param Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The account for which points are edited.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/userpoints/src/Form/UserpointsEntityTabForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The userpoints service.
    *
-   * @var \Drupal\userpoints\Service\UserPointsServiceInterface
+   * @var UserPointsServiceInterface
    */
   protected $userpointsService;

@@ @@
   /**
    * The current user object.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new UserpointsUserEditTabForm object.
    *
-   * @param \Drupal\userpoints\Service\UserPointsServiceInterface $userpointsService
+   * @param UserPointsServiceInterface $userpointsService
    *   The userpoints service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundleInfo
+   * @param EntityTypeBundleInfoInterface $bundleInfo
    *   The bundle info service.
-   * @param \Drupal\Core\Session\AccountInterface $currentUser
+   * @param AccountInterface $currentUser
    *   The current user instance.
-   * @param \Drupal\Core\Datetime\DateFormatter $dateFormatter
+   * @param DateFormatter $dateFormatter
    *   The date formatter.
    */
   public function __construct(
@@ @@
   /**
    * Helper function to get view and edit access for different point types.
    *
-   * @param Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The account for which points are edited.
    */
   protected function getTypesAccess(EntityInterface $entity) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
-   * @param Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The account for which points are edited.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/userpoints/src/Form/UserPointsSettingsForm.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The route builder service.
    *
-   * @var \Drupal\Core\Routing\RouteBuilderInterface
+   * @var RouteBuilderInterface
    */
   protected $routeBuilder;

@@ @@
   /**
    * Creates a new UserPointsSettingsForm.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entityTypeBundleInfo
+   * @param EntityTypeBundleInfoInterface $entityTypeBundleInfo
    *   The entity type bundle info service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/userpoints/src/Form/UserPointsRevisionRevertForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The User points revision.
    *
-   * @var \Drupal\userpoints\Entity\UserPointsInterface
+   * @var UserPointsInterface
    */
   protected $revision;

@@ @@
   /**
    * The User points storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $UserPointsStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new UserPointsRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The User points storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter) {
@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\userpoints\Entity\UserPointsInterface $revision
+   * @param UserPointsInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\userpoints\Entity\UserPointsInterface
+   * @return UserPointsInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(UserPointsInterface $revision, FormStateInterface $form_state) {
     $revision->setNewRevision();
     $revision->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $revision;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/userpoints/src/Form/UserPointsRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\userpoints\Form;

+use Drupal\userpoints\Entity\UserPointsInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ @@
   /**
    * The User points revision.
    *
-   * @var \Drupal\userpoints\Entity\UserPointsInterface
+   * @var UserPointsInterface
    */
   protected $revision;

@@ @@
   /**
    * The User points storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $UserPointsStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Constructs a new UserPointsRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection) {
@@ @@
    */
   public function getQuestion() {
     return $this->t('Are you sure you want to delete the revision from %revision-date?', [
-      '%revision-date' => format_date($this->revision->getRevisionCreationTime()),
+      '%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()),
     ]);
   }

@@ @@
     $this->UserPointsStorage->deleteRevision($this->revision->getRevisionId());

     $this->logger('content')->notice('User points: deleted %title revision %revision.', ['%title' => $this->revision->label(), '%revision' => $this->revision->getRevisionId()]);
-    $this->messenger()->addMessage(t('Revision from %revision-date of User points %title has been deleted.', ['%revision-date' => format_date($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
+    $this->messenger()->addMessage(t('Revision from %revision-date of User points %title has been deleted.', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
     $form_state->setRedirect(
       'entity.userpoints.canonical',
        ['userpoints' => $this->revision->id()]
    ----------- end diff -----------

Applied rules:
 * FormatDateRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/userpoints/src/Form/UserPointsForm.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;

@@ @@
   /**
    * Constructs a new UserPointsForm.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The current user account.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, TimeInterface $time = NULL, AccountProxyInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/userpoints/src/Entity/UserPointsInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\userpoints\Entity;

+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\RevisionLogInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
@@ @@
   /**
    * Gets the User points revision author.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity for the revision author.
    */
   public function getRevisionUser();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


17) modules/contrib/userpoints/src/Controller/UserPointsController.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;

@@ @@
   /**
    * Constructs a new UserPointsController.
    *
-   * @param \Drupal\Core\Datetime\DateFormatter $date_formatter
+   * @param DateFormatter $date_formatter
    *   The date formatter.
-   * @param \Drupal\Core\Render\Renderer $renderer
+   * @param Renderer $renderer
    *   The renderer.
    */
   public function __construct(DateFormatter $date_formatter, Renderer $renderer) {
@@ @@
   /**
    * Generates an overview table of older revisions of a User points.
    *
-   * @param \Drupal\userpoints\Entity\UserPointsInterface $userpoints
+   * @param UserPointsInterface $userpoints
    *   A User points object.
    *
    * @return array
@@ @@
         ]));
       }
       else {
-        $link = $userpoints->link($date);
+        // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+        // Please confirm that `$userpoints` is an instance of `\Drupal\Core\Entity\EntityInterface`. Only the method name and not the class name was checked for this replacement, so this may be a false positive.
+        $link = $userpoints->toLink($date)->toString();
       }

       $row = [];
    ----------- end diff -----------

Applied rules:
 * EntityInterfaceLinkRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/userpoints/src/Access/UserpointsTabAccess.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\userpoints\Access;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * Checks access to the given entity's userpoints page.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The account being viewed / edited.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function checkAccess(AccountInterface $account, EntityInterface $entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [WARNING] 2 nodes were removed                                                 

 [OK] 18 files have been changed by Rector                                      

