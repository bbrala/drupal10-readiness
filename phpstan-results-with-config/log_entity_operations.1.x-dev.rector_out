modules/contrib/log_entity_operations/log_entity_operations.module
modules/contrib/log_entity_operations/log_entity_operations_entity/log_entity_operations_entity.install
modules/contrib/log_entity_operations/log_entity_operations_entity/log_entity_operations_entity.module
modules/contrib/log_entity_operations/log_entity_operations_entity/src/Entity/EntityOperationLog.php
modules/contrib/log_entity_operations/log_entity_operations_entity/src/Entity/EntityOperationLogViewsData.php
modules/contrib/log_entity_operations/log_entity_operations_entity/src/Form/EntityLogDeleteForm.php
modules/contrib/log_entity_operations/log_entity_operations_entity/src/Form/PrepareLogEntityUninstallForm.php
modules/contrib/log_entity_operations/log_entity_operations_entity/src/Form/SettingsForm.php
modules/contrib/log_entity_operations/log_entity_operations_entity/src/Logger/EntityOperationEntityLogger.php
modules/contrib/log_entity_operations/log_entity_operations_entity/src/Plugin/Field/FieldFormatter/LogEntityOperationsJSONCollapsibleFormatter.php
modules/contrib/log_entity_operations/log_entity_operations_entity/src/Plugin/QueueWorker/LogEntityOperationsCleanup.php
modules/contrib/log_entity_operations/src/ArrayDiff.php
modules/contrib/log_entity_operations/src/Form/LogEntityOperationsSettingsForm.php
modules/contrib/log_entity_operations/src/Logger/DrupalLogger.php
modules/contrib/log_entity_operations/src/Logger/EntityOperationsLoggerInterface.php
modules/contrib/log_entity_operations/src/Service/LogEntityOperationsManager.php

11 files with changes
=====================

1) modules/contrib/log_entity_operations/src/Service/LogEntityOperationsManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\log_entity_operations\Service;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
   /**
    * Config Factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   private $configFactory;

@@ @@
   /**
    * Module Handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   private $moduleHandler;

@@ @@
   /**
    * Drupal Logger.
    *
-   * @var \Drupal\log_entity_operations\Logger\DrupalLogger
+   * @var DrupalLogger
    */
   private $drupalLogger;

@@ @@
   /**
    * LogEntityOperationsManager constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity Type Manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config Factory.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\log_entity_operations\Logger\DrupalLogger $drupal_logger
+   * @param DrupalLogger $drupal_logger
    *   Config Factory.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager,
@@ @@
    * and prepares the information to be logged. Furthermore it decides which
    * logging routine will be used to store the logs.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity on which operations is performed.
    * @param string $operation
    *   Operation which is performed.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function dispatchLog(EntityInterface $entity, string $operation) {
     $type = $entity->getEntityTypeId();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/log_entity_operations/src/Logger/EntityOperationsLoggerInterface.php:16

    ---------- begin diff ----------
@@ @@
    *
    * @param string $operation
    *   The operation which is performed on $entity_id.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The manipulated entity.
-   * @param \Drupal\Core\Session\AccountProxyInterface $user
+   * @param AccountProxyInterface $user
    *   The user object that performed the $operation.
    * @param string $diff
    *   If configured, the diff is provided when $operation is update.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/log_entity_operations/src/Logger/DrupalLogger.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Logger.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   private $logger;

@@ @@
   /**
    * LogEntityOperationsManager constructor.
    *
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   Logger.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
    */
   public function __construct(LoggerChannelInterface $logger,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/log_entity_operations/src/Form/LogEntityOperationsSettingsForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
   /**
    * Entity Type Bundle Info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   private $entityTypeBundleInfo;

@@ @@
   /**
    * Constructs a new LogEntityOperationsSettingsForm.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity Type Manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   Entity Type Bundle Info.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/log_entity_operations/log_entity_operations_entity/src/Plugin/QueueWorker/LogEntityOperationsCleanup.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * Loads and delete the logs.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/log_entity_operations/log_entity_operations_entity/src/Plugin/Field/FieldFormatter/LogEntityOperationsJSONCollapsibleFormatter.php:6

    ---------- begin diff ----------
@@ @@
  */
 namespace Drupal\log_entity_operations_entity\Plugin\Field\FieldFormatter;

+use Drupal\Core\Field\Plugin\Field\FieldType\StringLongItem;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\FormatterBase;
 use Drupal\Component\Utility\Html;
@@ @@
   public function viewElements(FieldItemListInterface $items, $langcode) {
     $elements = [];
     if ($this->isPrettyCollapsibleFormattingEnabled()) {
-      /** @var \Drupal\Core\Field\Plugin\Field\FieldType\StringLongItem $item */
+      /** @var StringLongItem $item */
       foreach ($items as $item) {
         $jsonValue = $item->getValue()['value'];
         $jsonArray = json_decode($jsonValue, TRUE);
@@ @@
     }
     else {
       // Fallback to plain text JSON Formatting.
-      /** @var \Drupal\Core\Field\Plugin\Field\FieldType\StringLongItem $item */
+      /** @var StringLongItem $item */
       foreach ($items as $item) {
         $elements[] = [
           '#type' => 'markup',
@@ @@
    *
    * @param array $jsonData
    *
-   * @return array|\Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return array|TranslatableMarkup
    */
   private function prepareRecursiveData(array $jsonData) {
     if (is_countable($jsonData) && count($jsonData)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/log_entity_operations/log_entity_operations_entity/src/Logger/EntityOperationEntityLogger.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
   /**
    * LogEntityOperationsManager constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity Type Manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/log_entity_operations/log_entity_operations_entity/src/Form/EntityLogDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\log_entity_operations_entity\Form;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
@@ @@
   /**
    * Returns the route to go to if the user cancels the action.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   A URL object.
    */
   public function getCancelUrl() {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   The Form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The Form State.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    * @param int $id
    *   The ID of the log entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The loaded Entity Log Entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function getLogEntity($id) {
     return \Drupal::entityTypeManager()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/log_entity_operations/log_entity_operations_entity/src/Entity/EntityOperationLog.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * Get Base Field Definition of EntityOperationLog Entity.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The Entity Type.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/log_entity_operations/log_entity_operations_entity/log_entity_operations_entity.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Access\AccessResultForbidden;
+use Drupal\Core\Access\AccessResultNeutral;
 /**
  * @file
  * Module file.
@@ @@
  *
  * @param string $operation
  *   The Operation, e.g. update, insert or delete.
- * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+ * @param FieldDefinitionInterface $field_definition
  *   The Field Definition.
- * @param \Drupal\Core\Session\AccountInterface $account
+ * @param AccountInterface $account
  *   The Account Interface of the current user.
- * @param \Drupal\Core\Field\FieldItemListInterface|null $items
+ * @param FieldItemListInterface|null $items
  *   The Field Item List Interface.
  *
- * @return \Drupal\Core\Access\AccessResultForbidden|\Drupal\Core\Access\AccessResultNeutral
+ * @return AccessResultForbidden|AccessResultNeutral
  *   The Access Result which is either neutral or forbidden.
  */
 function log_entity_operations_entity_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL) {
@@ @@
  *
  * Implements hook_views_pre_view().
  *
- * @param \Drupal\views\ViewExecutable $view
+ * @param ViewExecutable $view
  *   The View Object.
  * @param string $display_id
  *   The ID of the current display of the view.
@@ @@
  *   The View Arguments.
  */
 function log_entity_operations_entity_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
-  /** @var \Drupal\views\ViewExecutable $view */
+  /** @var ViewExecutable $view */
   if ($view->id() === 'entity_operation_logs') {
     if (!\Drupal::currentUser()->hasPermission('view entity log diff field')) {
       $filters = $view->display_handler->getOption('filters');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


11) modules/contrib/log_entity_operations/log_entity_operations.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\log_entity_operations\Service\LogEntityOperationsManager;
 /**
  * @file
  * Module file.
@@ @@
  * Implements hook_entity_insert().
  */
 function log_entity_operations_entity_insert(EntityInterface $entity) {
-  /** @var \Drupal\log_entity_operations\Service\LogEntityOperationsManager $manager */
+  /** @var LogEntityOperationsManager $manager */
   $manager = \Drupal::service('log_entity_operations.manager');
   $manager->dispatchLog($entity, 'insert');
 }
@@ @@
  * Implements hook_entity_update().
  */
 function log_entity_operations_entity_update(EntityInterface $entity) {
-  /** @var \Drupal\log_entity_operations\Service\LogEntityOperationsManager $manager */
+  /** @var LogEntityOperationsManager $manager */
   $manager = \Drupal::service('log_entity_operations.manager');
   $manager->dispatchLog($entity, 'update');
 }
@@ @@
  * Implements hook_entity_delete().
  */
 function log_entity_operations_entity_delete(EntityInterface $entity) {
-  /** @var \Drupal\log_entity_operations\Service\LogEntityOperationsManager $manager */
+  /** @var LogEntityOperationsManager $manager */
   $manager = \Drupal::service('log_entity_operations.manager');
   $manager->dispatchLog($entity, 'delete');
 }
@@ @@
  * Implements hook_entity_translation_insert().
  */
 function log_entity_operations_entity_translation_insert(EntityInterface $translation) {
-  /** @var \Drupal\log_entity_operations\Service\LogEntityOperationsManager $manager */
+  /** @var LogEntityOperationsManager $manager */
   $manager = \Drupal::service('log_entity_operations.manager');
   $manager->dispatchLog($translation, 'insert');
 }
@@ @@
  * Implements hook_entity_translation_delete().
  */
 function log_entity_operations_entity_translation_delete(EntityInterface $translation) {
-  /** @var \Drupal\log_entity_operations\Service\LogEntityOperationsManager $manager */
+  /** @var LogEntityOperationsManager $manager */
   $manager = \Drupal::service('log_entity_operations.manager');
   $manager->dispatchLog($translation, 'delete');
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 11 files have been changed by Rector                                      

