diff --git a/lazy.info.yml b/lazy.info.yml
index 59b591d..637fa4f 100644
--- a/lazy.info.yml
+++ b/lazy.info.yml
@@ -1,7 +1,7 @@
 name: 'Lazy-load'
 type: module
 description: 'This module enables lazy-loading images and iframes via text-filters and image-fields. Requires lazysizes library.'
-core_version_requirement: ^8.8 || ^9
+core_version_requirement: ^9.3 || ^10
 package: 'Input filters'
 configure: lazy.config_form
 dependencies:
diff --git a/lazy.module b/lazy.module
index 6e23418..9c6b26a 100644
--- a/lazy.module
+++ b/lazy.module
@@ -193,10 +193,10 @@ function lazy_process_variables(array &$variables) {
       $placeholder_data_uri = $lazy['data_uri'] ?? FALSE;
 
       if ($placeholder_style && ($image_file_id > 0)) {
-        /** @var \Drupal\file\Entity\File $file */
+        /** @var File $file */
         $file = File::load($image_file_id);
 
-        /** @var \Drupal\image\Entity\ImageStyle $style */
+        /** @var ImageStyle $style */
         $style = ImageStyle::load($placeholder_style);
 
         // Build the derivative image URL.
@@ -211,7 +211,7 @@ function lazy_process_variables(array &$variables) {
           $placeholder_image_url = "data:${mime_type};base64," . base64_encode($content);
         }
         else {
-          $placeholder_image_url = file_url_transform_relative($placeholder_image_url);
+          $placeholder_image_url = \Drupal::service('file_url_generator')->transformRelative($placeholder_image_url);
         }
         $variables['attributes']['src'] = $placeholder_image_url;
       }
diff --git a/src/Form/LazyForm.php b/src/Form/LazyForm.php
index 383a01f..fd39687 100644
--- a/src/Form/LazyForm.php
+++ b/src/Form/LazyForm.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\lazy\Form;
 
+use Drupal\lazy\Lazy;
+use Drupal\Core\Extension\ModuleHandler;
+use Drupal\system\Plugin\Condition\RequestPath;
+use Drupal\Core\Form\FormBase;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Condition\ConditionManager;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -24,21 +28,21 @@ class LazyForm extends ConfigFormBase {
   /**
    * The Lazy-load service.
    *
-   * @var \Drupal\lazy\Lazy
+   * @var Lazy
    */
   protected $lazyLoad;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;
 
   /**
    * The condition plugin manager.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $conditionManager;
 
@@ -46,20 +50,20 @@ class LazyForm extends ConfigFormBase {
   /**
    * The 'request_path' condition.
    *
-   * @var \Drupal\system\Plugin\Condition\RequestPath
+   * @var RequestPath
    */
   protected $condition;
 
   /**
    * Constructs a LazyForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\lazy\LazyInterface $lazy_load
+   * @param LazyInterface $lazy_load
    *   The Lazy-load service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Condition\ConditionManager $condition_manager
+   * @param ConditionManager $condition_manager
    *   The condition plugin manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, LazyInterface $lazy_load, ModuleHandlerInterface $module_handler, ConditionManager $condition_manager) {
@@ -72,10 +76,10 @@ class LazyForm extends ConfigFormBase {
   /**
    * Instantiates a new instance of this class.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The service container this instance should use.
    *
-   * @return \Drupal\Core\Form\ConfigFormBase|\Drupal\Core\Form\FormBase|static
+   * @return ConfigFormBase|FormBase|static
    *   A static class.
    */
   public static function create(ContainerInterface $container) {
@@ -201,7 +205,7 @@ class LazyForm extends ConfigFormBase {
    *   The array of links.
    * @param string $type
    *   Can be 'filters' or 'fields'.
-   * @param \Drupal\Core\StringTranslation\TranslatableMarkup $message
+   * @param TranslatableMarkup $message
    *   The message.
    */
   private function addLazyStatusMessage(array $links, string $type, TranslatableMarkup $message): void {
diff --git a/src/Lazy.php b/src/Lazy.php
index 91b4e33..cf01ccb 100644
--- a/src/Lazy.php
+++ b/src/Lazy.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lazy;
 
+use Drupal\system\Plugin\Condition\RequestPath;
 use Drupal\Core\Condition\ConditionManager;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Extension\ModuleHandler;
@@ -18,50 +19,50 @@ class Lazy implements LazyInterface {
   /**
    * A config object for the module configuration.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $lazySettings;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The condition plugin manager.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $conditionManager;
 
   /**
    * The route admin context to determine whether a route is an admin one.
    *
-   * @var \Drupal\Core\Routing\AdminContext
+   * @var AdminContext
    */
   protected $adminContext;
 
   /**
    * The module manager.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;
 
   /**
    * Lazy constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Condition\ConditionManager $condition_manager
+   * @param ConditionManager $condition_manager
    *   The condition plugins manager.
-   * @param \Drupal\Core\Routing\AdminContext $admin_context
+   * @param AdminContext $admin_context
    *   The route admin context service.
-   * @param \Drupal\Core\Extension\ModuleHandler $module_handler
+   * @param ModuleHandler $module_handler
    *   The module manager.
    */
   public function __construct(
@@ -141,7 +142,7 @@ class Lazy implements LazyInterface {
       return FALSE;
     }
 
-    /** @var \Drupal\system\Plugin\Condition\RequestPath $condition */
+    /** @var RequestPath $condition */
     $condition = $this->conditionManager->createInstance('request_path');
     if (is_null($condition)) {
       return FALSE;
diff --git a/src/Plugin/Filter/LazyFilter.php b/src/Plugin/Filter/LazyFilter.php
index 7fc3578..2f1780d 100644
--- a/src/Plugin/Filter/LazyFilter.php
+++ b/src/Plugin/Filter/LazyFilter.php
@@ -31,14 +31,14 @@ class LazyFilter extends FilterBase implements ContainerFactoryPluginInterface {
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The Lazy-load service.
    *
-   * @var \Drupal\lazy\Lazy
+   * @var Lazy
    */
   protected $lazyLoad;
 
@@ -51,9 +51,9 @@ class LazyFilter extends FilterBase implements ContainerFactoryPluginInterface {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\lazy\Lazy $lazy_load
+   * @param Lazy $lazy_load
    *   The Lazy-load service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ConfigFactoryInterface $config_factory, Lazy $lazy_load) {
