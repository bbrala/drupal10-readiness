diff --git a/entityconnect.install b/entityconnect.install
index c64cbbc..105cff7 100644
--- a/entityconnect.install
+++ b/entityconnect.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\user\RoleInterface;
 /**
  * @file
  * Install, update and uninstall functions for the entityconnect module.
@@ -13,7 +14,7 @@ use Drupal\user\Entity\Role;
 function entityconnect_update_8001() {
   $roles_changed = [];
 
-  /** @var \Drupal\user\RoleInterface[] $roles */
+  /** @var RoleInterface[] $roles */
   $roles = Role::loadMultiple();
   foreach ($roles as $roleObj) {
     if ($roleObj->hasPermission('access administration pages')) {
diff --git a/entityconnect.module b/entityconnect.module
index 542b22f..fb68544 100644
--- a/entityconnect.module
+++ b/entityconnect.module
@@ -14,7 +14,7 @@ use Drupal\entityconnect\EntityconnectFormUtils;
  * Implements hook_help().
  */
 function entityconnect_help($route_name, RouteMatchInterface $route_match) {
-  $module_path = drupal_get_path('module', 'entityconnect');
+  $module_path = \Drupal::service('extension.list.module')->getPath('entityconnect');
   switch ($route_name) {
     // Main module help for the entityconnect module.
     case 'help.page.entityconnect':
diff --git a/src/Access/CustomAccessCheck.php b/src/Access/CustomAccessCheck.php
index a6578ab..e28e497 100644
--- a/src/Access/CustomAccessCheck.php
+++ b/src/Access/CustomAccessCheck.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entityconnect\Access;
 
+use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Access\AccessCheckInterface;
 use Drupal\Core\Access\AccessResultAllowed;
 use Drupal\Core\Session\AccountInterface;
@@ -22,10 +23,10 @@ class CustomAccessCheck implements AccessCheckInterface {
   /**
    * A custom access check.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   If the account has the permissions, isAllowed() will be TRUE,
    *   otherwise isNeutral() will be TRUE.
    */
diff --git a/src/Controller/EntityconnectController.php b/src/Controller/EntityconnectController.php
index 429b5f2..892aa9e 100644
--- a/src/Controller/EntityconnectController.php
+++ b/src/Controller/EntityconnectController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entityconnect\Controller;
 
+use Symfony\Component\Routing\Route;
+use Drupal\Core\Routing\RouteProvider;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\Element\EntityAutocomplete;
@@ -21,32 +23,32 @@ class EntityconnectController extends ControllerBase implements ContainerInjecti
   /**
    * Temporary session storage for entityconnect.
    *
-   * @var \Drupal\entityconnect\EntityconnectCache
+   * @var EntityconnectCache
    */
   protected $entityconnectCache;
 
   /**
    * Drupal renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * Drupal\Core\Messenger\MessengerInterface definition.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Constructs a new EntityconnectController.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   Renderer object.
-   * @param \Drupal\entityconnect\EntityconnectCache $entityconnectCache
+   * @param EntityconnectCache $entityconnectCache
    *   Entityconnect Cache object.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Messenger object.
    */
   public function __construct(RendererInterface $renderer, EntityconnectCache $entityconnectCache, MessengerInterface $messenger) {
@@ -76,7 +78,7 @@ class EntityconnectController extends ControllerBase implements ContainerInjecti
    * @param bool $cancel
    *   Whether or not the request was cancelled.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The url of the parent page.
    */
   public function returnTo($cache_id, $cancel = FALSE) {
@@ -322,7 +324,7 @@ class EntityconnectController extends ControllerBase implements ContainerInjecti
 
     if (!empty($routes)) {
       $route_name = key($routes);
-      /** @var \Symfony\Component\Routing\Route $route */
+      /** @var Route $route */
       $route = current($routes);
       // If no parameters just try to get the url from route name.
       if (empty($params = $route->getOption('parameters'))) {
@@ -364,7 +366,7 @@ class EntityconnectController extends ControllerBase implements ContainerInjecti
    * @param string $cache_id
    *   Cache id of the parent.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The parent page to go back to.
    */
   private function returnWithMessage($msg, $status, $cache_id) {
@@ -404,7 +406,7 @@ class EntityconnectController extends ControllerBase implements ContainerInjecti
    *   An array of add page routes for the given entity type.
    */
   public static function getAddRoute($entity_type) {
-    /** @var \Drupal\Core\Routing\RouteProvider $route_provider */
+    /** @var RouteProvider $route_provider */
     $route_provider = \Drupal::getContainer()->get('router.route_provider');
 
     $route_name = [];
diff --git a/src/Element/EntityconnectSubmit.php b/src/Element/EntityconnectSubmit.php
index fd556b1..50750e2 100644
--- a/src/Element/EntityconnectSubmit.php
+++ b/src/Element/EntityconnectSubmit.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entityconnect\Element;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Url;
 use Drupal\entityconnect\EntityconnectNestedArray;
 use Drupal\Core\Form\FormStateInterface;
@@ -86,7 +87,7 @@ class EntityconnectSubmit extends Submit {
    *
    * @param array $form
    *   The parent form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    */
   public static function validateSubmit(array $form, FormStateInterface $form_state) {
@@ -102,7 +103,7 @@ class EntityconnectSubmit extends Submit {
    *
    * @param array $form
    *   Buttons will be added to this form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function addEditButtonSubmit(array $form, FormStateInterface $form_state) {
@@ -114,7 +115,7 @@ class EntityconnectSubmit extends Submit {
     $entityType = $triggeringElement['#entity_type_target'];
     $acceptableTypes = isset($triggeringElement['#acceptable_types']) ? $triggeringElement['#acceptable_types'] : NULL;
 
-    /** @var \Drupal\Core\Entity\EntityInterface $source_entity */
+    /** @var EntityInterface $source_entity */
     $source_entity = $form_state->getFormObject()->getEntity();
     $fieldInfo = FieldStorageConfig::loadByName($source_entity->getEntityTypeId(), $field);
 
diff --git a/src/EntityconnectCache.php b/src/EntityconnectCache.php
index 5ce7a0c..aa7e4cb 100644
--- a/src/EntityconnectCache.php
+++ b/src/EntityconnectCache.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entityconnect;
 
+use Drupal\Core\TempStore\PrivateTempStore;
+use Drupal\Core\TempStore\TempStoreException;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Session\SessionManager;
 use Drupal\Core\TempStore\PrivateTempStoreFactory;
@@ -17,33 +19,32 @@ class EntityconnectCache {
   /**
    * The private temporary storage.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   private $store;
 
   /**
    * The session manager object.
    *
-   * @var \Drupal\Core\Session\SessionManager
+   * @var SessionManager
    */
-
   private $sessionManager;
 
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $account;
 
   /**
    * Saves our dependencies.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $store
+   * @param PrivateTempStoreFactory $store
    *   The private storage object.
-   * @param \Drupal\Core\Session\SessionManager $sessionManager
+   * @param SessionManager $sessionManager
    *   The session manager.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user account object.
    */
   public function __construct(PrivateTempStoreFactory $store, SessionManager $sessionManager, AccountInterface $account) {
@@ -91,7 +92,7 @@ class EntityconnectCache {
    * @param mixed $data
    *   The cache data.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
+   * @throws TempStoreException
    */
   public function set($key, $data) {
     $this->store->set($key, $data);
@@ -103,7 +104,7 @@ class EntityconnectCache {
    * @param string $key
    *   The cache key.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
+   * @throws TempStoreException
    */
   public function delete($key) {
     $this->store->delete($key);
diff --git a/src/EntityconnectFormUtils.php b/src/EntityconnectFormUtils.php
index d9842fd..8ecd710 100644
--- a/src/EntityconnectFormUtils.php
+++ b/src/EntityconnectFormUtils.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\entityconnect;
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Url;
+use Drupal\field\FieldStorageConfigInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\Element;
@@ -18,7 +21,7 @@ class EntityconnectFormUtils {
    *
    * @param array $form
    *   The form to add to.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The state of the form.
    */
   public static function fieldConfigEditFormAlter(array &$form, FormStateInterface $form_state) {
@@ -43,7 +46,7 @@ class EntityconnectFormUtils {
    *
    * @param array $form
    *   The form to add to.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The state of the form.
    */
   public static function entityFormAlter(array &$form, FormStateInterface $form_state) {
@@ -84,7 +87,7 @@ class EntityconnectFormUtils {
    *
    * @param array $form
    *   The form to validate.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The state of the form.
    */
   public static function validateForm(array &$form, FormStateInterface $form_state) {
@@ -111,7 +114,7 @@ class EntityconnectFormUtils {
    *
    * @param array $form
    *   The form to extract fields from.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The state of the form.
    *
    * @return array
@@ -120,7 +123,7 @@ class EntityconnectFormUtils {
   public static function getReferenceFields(array &$form, FormStateInterface $form_state) {
 
     $ref_fields = [];
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = NULL;
 
     // Get the entity if this is an entity form.
@@ -163,7 +166,7 @@ class EntityconnectFormUtils {
    *
    * @param array $form
    *   The child form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Child form state.
    * @param string $form_id
    *   Child form id.
@@ -221,7 +224,7 @@ class EntityconnectFormUtils {
      && strpos($form_id, '_confirm_delete') === FALSE && strpos($form_id, 'delete_form') === FALSE) {
       $delete_button = &$form['actions']['delete'];
       if ($delete_button['#type'] == 'link') {
-        /** @var \Drupal\Core\Url $url */
+        /** @var Url $url */
         $url = &$delete_button['#url'];
         $url->setOption('query', [
           'build_cache_id' => $cache_id,
@@ -255,7 +258,7 @@ class EntityconnectFormUtils {
    *
    * @param array $form
    *   Parent form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Parent form state.
    * @param array $cache_data
    *   Parent cache data.
@@ -263,7 +266,7 @@ class EntityconnectFormUtils {
   public static function returnFormAlter(array &$form, FormStateInterface $form_state, array $cache_data) {
     if (empty($form_state->get('#entityconnect_processed'))) {
       $old_form = $cache_data['form'];
-      /** @var \Drupal\Core\Form\FormStateInterface $old_form_state */
+      /** @var FormStateInterface $old_form_state */
       $old_form_state = $cache_data['form_state'];
 
       // Save the storage and input from the original form state.
@@ -295,7 +298,7 @@ class EntityconnectFormUtils {
 
       $widget_container_type = isset($widget_container['#type']) ? $widget_container['#type'] : 'autocomplete';
 
-      /** @var \Drupal\field\FieldStorageConfigInterface $field_info */
+      /** @var FieldStorageConfigInterface $field_info */
       $field_info = $cache_data['field_info'];
 
       if (isset($cache_data['target_id']) && empty($cache_data['cancel'])) {
@@ -392,7 +395,7 @@ class EntityconnectFormUtils {
    *
    * @param array $form
    *   Child form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Child form state.
    */
   public static function childFormCancel(array $form, FormStateInterface $form_state) {
@@ -414,7 +417,7 @@ class EntityconnectFormUtils {
    *
    * @param array $form
    *   Child form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Child form state.
    */
   public static function childFormSubmit(array $form, FormStateInterface $form_state) {
@@ -449,7 +452,7 @@ class EntityconnectFormUtils {
    *
    * @param array $form
    *   Child form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Child form state.
    */
   public static function childFormDeleteSubmit(array $form, FormStateInterface $form_state) {
diff --git a/src/EntityconnectWidgetProcessor.php b/src/EntityconnectWidgetProcessor.php
index 3a00234..5fbcc85 100644
--- a/src/EntityconnectWidgetProcessor.php
+++ b/src/EntityconnectWidgetProcessor.php
@@ -17,7 +17,7 @@ class EntityconnectWidgetProcessor {
   /**
    * The entity reference field definition.
    *
-   * @var \Drupal\field\Entity\FieldConfig
+   * @var FieldConfig
    */
   protected $fieldDefinition;
 
@@ -52,7 +52,7 @@ class EntityconnectWidgetProcessor {
   /**
    * Constructs a EntityconnectWidgetProcessor object.
    *
-   * @param \Drupal\field\Entity\FieldConfig $field_definition
+   * @param FieldConfig $field_definition
    *   The entity reference field definition.
    * @param array $widget
    *   The entity reference field widget form element.
@@ -82,7 +82,7 @@ class EntityconnectWidgetProcessor {
    *
    * @param array $element
    *   The widget container element to attach the buttons.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The parent entity form state.
    * @param array $form
    *   The parent entity form.
diff --git a/tests/src/Functional/EntityconnectAddTest.php b/tests/src/Functional/EntityconnectAddTest.php
index 9aa0369..0852cae 100644
--- a/tests/src/Functional/EntityconnectAddTest.php
+++ b/tests/src/Functional/EntityconnectAddTest.php
@@ -15,7 +15,7 @@ class EntityconnectAddTest extends EntityconnectTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Grant the add button permission for the ecUser.
@@ -47,7 +47,7 @@ class EntityconnectAddTest extends EntityconnectTestBase {
     $this->assertSession()->fieldValueEquals('title[0][value]', '');
 
     // Test Cancel.
-    $this->drupalPostForm(NULL, [], 'Cancel');
+    $this->submitForm([], 'Cancel');
     $this->assertSession()->fieldValueEquals('title[0][value]', 'Base ' . $this->testContentType->label());
 
     // Test Create reference Node.
diff --git a/tests/src/Functional/EntityconnectAdminTest.php b/tests/src/Functional/EntityconnectAdminTest.php
index 7369ae3..0ec8149 100644
--- a/tests/src/Functional/EntityconnectAdminTest.php
+++ b/tests/src/Functional/EntityconnectAdminTest.php
@@ -16,7 +16,7 @@ class EntityconnectAdminTest extends EntityconnectTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // EC user needs both EC roles.
@@ -76,7 +76,7 @@ class EntityconnectAdminTest extends EntityconnectTestBase {
       'third_party_settings[entityconnect][buttons][button_add]' => '0',
       'third_party_settings[entityconnect][buttons][button_edit]' => '0',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save settings');
+    $this->submitForm($edit, 'Save settings');
     $this->drupalLogout();
 
     // Open the create test page.
diff --git a/tests/src/Functional/EntityconnectEditTest.php b/tests/src/Functional/EntityconnectEditTest.php
index c7ca639..1d4abf7 100644
--- a/tests/src/Functional/EntityconnectEditTest.php
+++ b/tests/src/Functional/EntityconnectEditTest.php
@@ -15,7 +15,7 @@ class EntityconnectEditTest extends EntityconnectTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Grant the edit button permission for the ecUser.
diff --git a/tests/src/Functional/EntityconnectTestBase.php b/tests/src/Functional/EntityconnectTestBase.php
index b0cfab8..e1e024b 100644
--- a/tests/src/Functional/EntityconnectTestBase.php
+++ b/tests/src/Functional/EntityconnectTestBase.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\entityconnect\Functional;
 
+use Drupal\user\UserInterface;
+use Drupal\node\Entity\NodeType;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\Tests\BrowserTestBase;
@@ -33,35 +37,35 @@ abstract class EntityconnectTestBase extends BrowserTestBase {
   /**
    * User with permission to administer entityconnect.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
   /**
    * User with permission to use entityconnect buttons.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $ecUser;
 
   /**
    * The node type object to test with.
    *
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   protected $testContentType;
 
   /**
    * The test reference field.
    *
-   * @var \Drupal\field\Entity\FieldConfig
+   * @var FieldConfig
    */
   protected $testRefField;
 
   /**
    * {@inheritDoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create a test content type.
@@ -99,10 +103,10 @@ abstract class EntityconnectTestBase extends BrowserTestBase {
    * @param array|null $target_bundles
    *   The target bundle(s) of the reference field.
    *
-   * @return \Drupal\field\Entity\FieldConfig
+   * @return FieldConfig
    *   The created/existing field config object.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function addContentEntityReferenceField($field_name = 'entity_reference', $field_bundle = NULL, $target_bundles = NULL) {
     $field_storage = FieldStorageConfig::loadByName('node', $field_name);
@@ -124,7 +128,7 @@ abstract class EntityconnectTestBase extends BrowserTestBase {
         'settings' => ['handler_settings' => ['target_bundles' => $target_bundles ?? [$this->testContentType->id()]]],
       ]);
       $field->save();
-      /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+      /** @var EntityFormDisplayInterface $form_display */
       $form_display = \Drupal::service('entity_display.repository')->getFormDisplay('node', $field_bundle ?? $this->testContentType->id(), 'default');
       $form_display->setComponent($field_name, [
         'type' => 'options_select',
@@ -149,7 +153,7 @@ abstract class EntityconnectTestBase extends BrowserTestBase {
    * @param array $target_bundles
    *   The target bundles.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function updateEntityReferenceFieldTargets(array $target_bundles = []) {
     if (!$this->testRefField) {
@@ -169,7 +173,7 @@ abstract class EntityconnectTestBase extends BrowserTestBase {
    * @param bool $edit
    *   Whether edit button should be on or off.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setEcButtons($add = TRUE, $edit = TRUE) {
     $this->testRefField->setThirdPartySetting('entityconnect', 'buttons', [
