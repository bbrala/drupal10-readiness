modules/contrib/token/src/Commands/TokenCommands.php
modules/contrib/token/src/Controller/TokenCacheController.php
modules/contrib/token/src/Controller/TokenDevelController.php
modules/contrib/token/src/Controller/TokenTreeController.php
modules/contrib/token/src/Element/TokenTreeTable.php
modules/contrib/token/src/MenuLinkFieldItemList.php
modules/contrib/token/src/Plugin/Derivative/DevelLocalTask.php
modules/contrib/token/src/Routing/RouteSubscriber.php
modules/contrib/token/src/Token.php
modules/contrib/token/src/TokenEntityMapper.php
modules/contrib/token/src/TokenEntityMapperInterface.php
modules/contrib/token/src/TokenFieldRender.php
modules/contrib/token/src/TokenInterface.php
modules/contrib/token/src/TokenServiceProvider.php
modules/contrib/token/src/TreeBuilder.php
modules/contrib/token/src/TreeBuilderInterface.php
modules/contrib/token/tests/modules/token_module_test/src/Controller/TokenTreeBrowseController.php
modules/contrib/token/tests/modules/token_module_test/token_module_test.module
modules/contrib/token/tests/modules/token_module_test/token_module_test.tokens.inc
modules/contrib/token/tests/src/Functional/TokenBlockTest.php
modules/contrib/token/tests/src/Functional/TokenCurrentPageTest.php
modules/contrib/token/tests/src/Functional/TokenFieldUiTest.php
modules/contrib/token/tests/src/Functional/TokenMenuTest.php
modules/contrib/token/tests/src/Functional/TokenMenuUiContentModerationTest.php
modules/contrib/token/tests/src/Functional/TokenTestBase.php
modules/contrib/token/tests/src/Functional/TokenTestTrait.php
modules/contrib/token/tests/src/Functional/TokenURLTest.php
modules/contrib/token/tests/src/Functional/TokenUserTest.php
modules/contrib/token/tests/src/Functional/Tree/HelpPageTest.php
modules/contrib/token/tests/src/Functional/Tree/TokenTreeTestTrait.php
modules/contrib/token/tests/src/Functional/Tree/TreeTest.php
modules/contrib/token/tests/src/Functional/UrlTest.php
modules/contrib/token/tests/src/Kernel/ArrayTest.php
modules/contrib/token/tests/src/Kernel/BookTest.php
modules/contrib/token/tests/src/Kernel/CommentTest.php
modules/contrib/token/tests/src/Kernel/DateTest.php
modules/contrib/token/tests/src/Kernel/EntityTest.php
modules/contrib/token/tests/src/Kernel/FieldTest.php
modules/contrib/token/tests/src/Kernel/FileTest.php
modules/contrib/token/tests/src/Kernel/KernelTestBase.php
modules/contrib/token/tests/src/Kernel/LanguageTest.php
modules/contrib/token/tests/src/Kernel/MockLanguageManager.php
modules/contrib/token/tests/src/Kernel/NodeTest.php
modules/contrib/token/tests/src/Kernel/RandomTest.php
modules/contrib/token/tests/src/Kernel/TaxonomyTest.php
modules/contrib/token/tests/src/Kernel/UnitTest.php
modules/contrib/token/tests/src/Kernel/UrlTest.php
modules/contrib/token/tests/src/Kernel/ValidateD6MigrationStateTest.php
modules/contrib/token/tests/src/Kernel/ValidateD7MigrationStateTest.php
modules/contrib/token/tests/src/Kernel/ViewsTest.php
modules/contrib/token/token.drush.inc
modules/contrib/token/token.install
modules/contrib/token/token.module
modules/contrib/token/token.pages.inc
modules/contrib/token/token.tokens.inc

21 files with changes
=====================

1) modules/contrib/token/token.tokens.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\taxonomy\TermStorageInterface;
+use Drupal\Core\Render\RendererInterface;
+use Drupal\Core\Menu\MenuLinkInterface;
+use Drupal\Core\Menu\MenuLinkManagerInterface;
+use Drupal\system\MenuInterface;
+use Drupal\Core\Field\FieldTypePluginManager;
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 /**
  * @file
  * Token callbacks for the token module.
@@ @@
     /* @var \Drupal\taxonomy\TermInterface $term */
     $term = $data['term'];

-    /** @var \Drupal\taxonomy\TermStorageInterface $term_storage */
+    /** @var TermStorageInterface $term_storage */
     $term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');

     foreach ($tokens as $name => $original) {
@@ @@
       switch ($name) {
         case 'picture':
           if ($account instanceof UserInterface && $account->hasField('user_picture')) {
-            /** @var \Drupal\Core\Render\RendererInterface $renderer */
+            /** @var RendererInterface $renderer */
             $renderer = \Drupal::service('renderer');
             $output = [
               '#theme' => 'user_picture',
@@ @@

   // Menu link tokens.
   if ($type == 'menu-link' && !empty($data['menu-link'])) {
-    /** @var \Drupal\Core\Menu\MenuLinkInterface $link */
+    /** @var MenuLinkInterface $link */
     $link = $data['menu-link'];
-    /** @var \Drupal\Core\Menu\MenuLinkManagerInterface $menu_link_manager */
+    /** @var MenuLinkManagerInterface $menu_link_manager */
     $menu_link_manager = \Drupal::service('plugin.manager.menu.link');

     if ($link instanceof MenuLinkContentInterface) {
@@ @@
           break;

         case 'parent':
-          /** @var \Drupal\Core\Menu\MenuLinkInterface $parent */
+          /** @var MenuLinkInterface $parent */
           if ($link->getParent() && $parent = $menu_link_manager->createInstance($link->getParent())) {
             $replacements[$original] = token_menu_link_translated_title($parent, $langcode);
           }
@@ @@
     }

     // Chained token relationships.
-    /** @var \Drupal\Core\Menu\MenuLinkInterface $parent */
+    /** @var MenuLinkInterface $parent */
     if ($link->getParent() && ($parent_tokens = \Drupal::token()->findWithPrefix($tokens, 'parent')) && $parent = $menu_link_manager->createInstance($link->getParent())) {
       $replacements += \Drupal::token()->generate('menu-link', $parent_tokens, ['menu-link' => $parent], $options, $bubbleable_metadata);
     }
@@ @@

   // URL tokens.
   if ($type == 'url' && !empty($data['url'])) {
-    /** @var \Drupal\Core\Url $url */
+    /** @var Url $url */
     $url = $data['url'];
     // To retrieve the correct path, modify a copy of the Url object.
     $path_url = clone $url;
@@ @@
     $sort = isset($options['array sort']) ? $options['array sort'] : TRUE;
     $keys = token_element_children($array, $sort);

-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = \Drupal::service('renderer');

     foreach ($tokens as $name => $original) {
@@ @@
 function menu_ui_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
   $replacements = [];

-  /** @var \Drupal\Core\Menu\MenuLinkManagerInterface $menu_link_manager */
+  /** @var MenuLinkManagerInterface $menu_link_manager */
   $menu_link_manager = \Drupal::service('plugin.manager.menu.link');

   $url_options = ['absolute' => TRUE];
@@ @@

   // Node tokens.
   if ($type == 'node' && !empty($data['node'])) {
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = $data['node'];

     foreach ($tokens as $name => $original) {
@@ @@
           // references.
           // @see token_node_menu_link_submit()
           if ($node->getFieldDefinition('menu_link') && $menu_link = $node->menu_link->entity) {
-            /** @var \Drupal\menu_link_content\MenuLinkContentInterface $menu_link */
+            /** @var MenuLinkContentInterface $menu_link */
             $replacements[$original] = $menu_link->getTitle();
           }
           else {
@@ @@
       // Chained token relationships.
       if ($menu_tokens = \Drupal::token()->findWithPrefix($tokens, 'menu-link')) {
         if ($node->getFieldDefinition('menu_link') && $menu_link = $node->menu_link->entity) {
-          /** @var \Drupal\menu_link_content\MenuLinkContentInterface $menu_link */
+          /** @var MenuLinkContentInterface $menu_link */
           $replacements += \Drupal::token()->generate('menu-link', $menu_tokens, ['menu-link' => $menu_link], $options, $bubbleable_metadata);
         }
         else {
@@ @@

   // Menu link tokens.
   if ($type == 'menu-link' && !empty($data['menu-link'])) {
-    /** @var \Drupal\Core\Menu\MenuLinkInterface $link */
+    /** @var MenuLinkInterface $link */
     $link = $data['menu-link'];

     if ($link instanceof MenuLinkContentInterface) {
@@ @@

   // Menu tokens.
   if ($type == 'menu' && !empty($data['menu'])) {
-    /** @var \Drupal\system\MenuInterface $menu */
+    /** @var MenuInterface $menu */
     $menu = $data['menu'];

     foreach ($tokens as $name => $original) {
@@ @@
  * If the url exists in multiple menus, default to the one set on the node
  * itself.
  *
- * @param \Drupal\node\NodeInterface $node
+ * @param NodeInterface $node
  *   The node to look up the default menu settings from.
  * @param array $links
  *   An array of instances keyed by plugin ID.
  *
- * @return \Drupal\Core\Menu\MenuLinkInterface
+ * @return MenuLinkInterface
  *   A Link instance.
  */
 function _token_menu_link_best_match(NodeInterface $node, array $links) {
@@ @@

     $fields = \Drupal::service('entity_field.manager')->getFieldStorageDefinitions($entity_type_id);
     foreach ($fields as $field_name => $field) {
-      /** @var \Drupal\field\FieldStorageConfigInterface $field */
-
+      /** @var FieldStorageConfigInterface $field */
       // Ensure the token implements FieldStorageConfigInterface or is defined
       // in token module.
       $provider = '';
@@ @@
           // default formatters. If the field has specified a specific formatter
           // to be used by default with tokens, use that, otherwise use the
           // default formatter.
-          /** @var \Drupal\Core\Field\FieldTypePluginManager $field_type_manager */
+          /** @var FieldTypePluginManager $field_type_manager */
           $field_type_manager = \Drupal::service('plugin.manager.field.field_type');
           $field_type_definition = $field_type_manager->getDefinition($entity->getFieldDefinition($field_name)->getType());
           $display_options = [
@@ @@
 /**
  * Returns the token view display for the given entity if enabled.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity.
  *
- * @return \Drupal\Core\Entity\Display\EntityViewDisplayInterface|null
+ * @return EntityViewDisplayInterface|null
  *   The view display or null.
  */
 function token_get_token_view_display(EntityInterface $entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/token/token.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Render\RendererInterface;
+use Drupal\Core\Menu\MenuLinkManagerInterface;
+use Drupal\taxonomy\TermStorageInterface;
 /**
  * @file
  * Enhances the token API in core: adds a browseable UI, missing tokens, etc.
@@ @@
 function token_render_array(array $array, array $options = []) {
   $rendered = [];

-  /** @var \Drupal\Core\Render\RendererInterface $renderer */
+  /** @var RendererInterface $renderer */
   $renderer = \Drupal::service('renderer');

   foreach (token_element_children($array) as $key) {
@@ @@
  * Do not use this function yet. Its API has not been finalized.
  */
 function token_render_array_value($value, array $options = []) {
-  /** @var \Drupal\Core\Render\RendererInterface $renderer */
+  /** @var RendererInterface $renderer */
   $renderer = \Drupal::service('renderer');

   $rendered = is_array($value) ? $renderer->renderPlain($value) : (string) $value;
@@ @@

   if (!isset($cache[$plugin_id][$langcode])) {
     $cache[$plugin_id][$langcode] = [];
-    /** @var \Drupal\Core\Menu\MenuLinkManagerInterface $menu_link_manager */
+    /** @var MenuLinkManagerInterface $menu_link_manager */
     $menu_link_manager = \Drupal::service('plugin.manager.menu.link');
     $parent_ids = $menu_link_manager->getParentIds($plugin_id);
     // Remove the current plugin ID from the parents.
@@ @@
  * @todo Remove this when there is a better way to get a translated menu
  *   item title in core: https://www.drupal.org/node/2795143
  *
- * @param \Drupal\Core\Menu\MenuLinkInterface $menu_link
+ * @param MenuLinkInterface $menu_link
  *   The menu link.
  * @param string|null $langcode
  *   (optional) The langcode, defaults to the current language.
@@ @@
 function token_menu_link_translated_title(MenuLinkInterface $menu_link, $langcode = NULL) {
   $metadata = $menu_link->getMetaData();
   if (isset($metadata['entity_id']) && $menu_link->getProvider() == 'menu_link_content') {
-    /** @var \Drupal\menu_link_content\MenuLinkContentInterface $entity */
+    /** @var MenuLinkContentInterface $entity */
     $entity = \Drupal::entityTypeManager()->getStorage('menu_link_content')->load($metadata['entity_id']);
     if (!empty($entity)) {
       $entity = \Drupal::service('entity.repository')->getTranslationFromContext($entity, $langcode);
@@ @@

   if (!isset($cache[$langcode][$tid])) {
     $cache[$langcode][$tid] = [];
-    /** @var \Drupal\taxonomy\TermStorageInterface $term_storage */
+    /** @var TermStorageInterface $term_storage */
     $term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
     $parents = $term_storage->loadAllParents($tid);
     // Remove this term from the array.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


3) modules/contrib/token/tests/src/Kernel/UrlTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\token\Kernel;

+use Drupal\Core\Utility\Token;
+use Symfony\Component\HttpFoundation\RequestStack;
+use Drupal\Core\Routing\CurrentRouteMatch;
 use Drupal\Core\Url;
 use Symfony\Component\HttpFoundation\Request;

@@ @@
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;

@@ @@
   /**
    * The current request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $currentRouteMatch;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/token/tests/src/Kernel/UnitTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\token\Kernel;

+use Drupal\token\Token;
 /**
  * Test basic, low-level token functions.
  *
@@ @@
 class UnitTest extends KernelTestBase {

   /**
-   * @var \Drupal\token\Token
+   * @var Token
    */
   protected $tokenService;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/token/tests/src/Kernel/MockLanguageManager.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * List of current languages used in the test.
    *
-   * @var \Drupal\Core\Language\LanguageInterface[]
+   * @var LanguageInterface[]
    */
   protected $currentLanguages;

@@ @@
    *
    * @param string $type
    *   The language type.
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language.
    */
   public function setCurrentLanguage($type, LanguageInterface $language) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/token/tests/src/Kernel/LanguageTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\token\Kernel;

+use Drupal\Core\Utility\Token;
 use Drupal\Core\Language\Language;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Render\BubbleableMetadata;
@@ @@
   /**
    * An array of languages used during the test, keyed by language code.
    *
-   * @var \Drupal\language\Entity\ConfigurableLanguage[]
+   * @var ConfigurableLanguage[]
    */
   protected $languages = [];

@@ @@
   /**
    * The token replacement service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;

@@ @@
   /**
    * The mock language manager service.
    *
-   * @var \Drupal\Tests\token\Kernel\MockLanguageManager
+   * @var MockLanguageManager
    */
   protected $languageManager;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/token/tests/src/Kernel/FieldTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\token\Kernel;

+use Drupal\filter\FilterFormatInterface;
+use Drupal\taxonomy\VocabularyInterface;
+use Drupal\token\Token;
+use Drupal\field\FieldStorageConfigInterface;
+use Drupal\node\NodeInterface;
 use Drupal\Component\Utility\Unicode;
 use Drupal\contact\Entity\ContactForm;
 use Drupal\Core\Entity\Entity\EntityViewMode;
@@ @@
   use TaxonomyTestTrait;

   /**
-   * @var \Drupal\filter\FilterFormatInterface
+   * @var FilterFormatInterface
    */
   protected $testFormat;

@@ @@
   /**
    * Vocabulary for testing chained token support.
    *
-   * @var \Drupal\taxonomy\VocabularyInterface
+   * @var VocabularyInterface
    */
   protected $vocabulary;

@@ @@
    * Tests the token metadata for a field token.
    */
   public function testFieldTokenInfo() {
-    /** @var \Drupal\token\Token $tokenService */
+    /** @var Token $tokenService */
     $tokenService = \Drupal::service('token');

     // Test the token info of the text field of the artcle content type.
@@ @@
       'non_existing_field:entity:title',
     ]);

-    /** @var \Drupal\token\Token $token_service */
+    /** @var Token $token_service */
     $token_service = \Drupal::service('token');

     $token_info = $token_service->getTokenInfo('node', 'test_reference');
@@ @@
    * Tests support for cardinality > 1 for entity reference tokens.
    */
   public function testEntityReferenceTokensCardinality() {
-    /** @var \Drupal\field\FieldStorageConfigInterface $storage */
+    /** @var FieldStorageConfigInterface $storage */
     $storage = FieldStorageConfig::load('node.test_term_reference');
     $storage->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED);
     $storage->save();
@@ @@
    */
   public function testDatetimeRangeFieldTokens() {

-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = Node::create([
         'title' => 'Node for daterange field',
         'type' => 'article',
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/token/tests/src/Kernel/EntityTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\token\Kernel;

+use Drupal\token\TokenEntityMapperInterface;
 use Drupal\node\Entity\Node;
 use Drupal\taxonomy\Entity\Term;
 use Drupal\taxonomy\Entity\Vocabulary;
@@ @@
   }

   function testEntityMapping() {
-    /** @var \Drupal\token\TokenEntityMapperInterface $mapper */
+    /** @var TokenEntityMapperInterface $mapper */
     $mapper = \Drupal::service('token.entity_mapper');
     $this->assertSame('node', $mapper->getEntityTypeForTokenType('node'));
     $this->assertSame('taxonomy_term', $mapper->getEntityTypeForTokenType('term'));
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/token/tests/src/Functional/UrlTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\token\Functional;

+use Drupal\node\NodeInterface;
+use Behat\Mink\Exception\ElementHtmlException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\block\Entity\Block;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;
@@ @@
   /**
    * The first testing node.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node1;

@@ @@
   /**
    * The second testing node.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node2;

@@ @@
   /**
    * Creates a block with token for title and tests cache contexts.
    *
-   * @throws \Behat\Mink\Exception\ElementHtmlException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ElementHtmlException
+   * @throws EntityStorageException
    */
   public function testBlockUrlTokenReplacement() {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/token/tests/src/Functional/Tree/TreeTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\token\Functional\Tree;

+use Drupal\Core\Session\AccountInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Tests\token\Functional\TokenTestBase;

@@ @@
   use TokenTreeTestTrait;

   /**
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/token/tests/src/Functional/Tree/HelpPageTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\token\Functional\Tree;

+use Drupal\Core\Session\AccountInterface;
 use Drupal\Tests\token\Functional\TokenTestBase;

 /**
@@ @@
   use TokenTreeTestTrait;

   /**
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/token/tests/src/Functional/TokenUserTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\token\Functional;

+use Drupal\Core\Render\RendererInterface;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Session\AnonymousUserSession;
@@ @@
   /**
    * The user account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account = NULL;

@@ @@
       '#theme' => 'user_picture',
       '#account' => $this->account,
     ];
-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = \Drupal::service('renderer');
     $user_tokens = [
       'picture' => $renderer->renderPlain($picture),
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/token/tests/src/Functional/TokenMenuTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\token\Functional;

+use Drupal\menu_link_content\MenuLinkContentInterface;
+use Drupal\Core\Menu\MenuLinkManagerInterface;
 use Behat\Mink\Element\NodeElement;
 use Drupal\Core\Url;
 use Drupal\language\Entity\ConfigurableLanguage;
@@ @@

     // Allow main menu for this node type.
     //$this->config('menu.entity.node.' . $node->getType())->set('available_menus', ['main-menu'])->save();
-
     // Add a node menu link.
-    /** @var \Drupal\menu_link_content\MenuLinkContentInterface $node_link */
+    /** @var MenuLinkContentInterface $node_link */
     $node_link = MenuLinkContent::create([
       'link' => ['uri' => 'entity:node/' . $node->id()],
       'title' => 'Node link',
@@ @@
     // Get the menu link and create a child menu link to assert parent and root
     // tokens.
     $url = $node->toUrl();
-    /** @var \Drupal\Core\Menu\MenuLinkManagerInterface $menu_link_manager */
+    /** @var MenuLinkManagerInterface $menu_link_manager */
     $menu_link_manager = \Drupal::service('plugin.manager.menu.link');
     $links = $menu_link_manager->loadLinksByRoute($url->getRouteName(), $url->getRouteParameters());
     $link = reset($links);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


14) modules/contrib/token/tests/src/Functional/TokenFieldUiTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\token\Functional;

+use Drupal\Core\Session\AccountInterface;
+use Drupal\token\Token;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\node\Entity\NodeType;
@@ @@
 class TokenFieldUiTest extends TokenTestBase {

   /**
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminUser;

@@ @@
     $image2->resize(500, 500);
     $image2->save();

-    /** @var \Drupal\file\Entity\File $image1 */
+    /** @var File $image1 */
     $image1 = File::create(['uri' => 'public://example1.png']);
     $image1->save();
-    /** @var \Drupal\file\Entity\File $image2 */
+    /** @var File $image2 */
     $image2 = File::create(['uri' => 'public://example2.gif']);
     $image2->save();

@@ @@
     ];
     $this->assertTokens('node', ['node' => $node], $tokens);

-    /** @var \Drupal\token\Token $token_service */
+    /** @var Token $token_service */
     $token_service = \Drupal::service('token');

     // Test one of the image style's token info for cardinality 1 image field.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/token/tests/modules/token_module_test/src/Controller/TokenTreeBrowseController.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Service to retrieve token information.
    *
-   * @var \Drupal\token\TokenInterface
+   * @var TokenInterface
    */
   protected $token;

@@ @@
   /**
    * The construct method.
    *
-   * @param \Drupal\token\TokenInterface $token
+   * @param TokenInterface $token
    *   The token.
    */
   public function __construct(TokenInterface $token) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/token/src/TreeBuilder.php:12

    ---------- begin diff ----------
@@ @@
   use StringTranslationTrait;

   /**
-   * @var \Drupal\token\Token
+   * @var Token
    */
   protected $tokenService;

   /**
-   * @var \Drupal\token\TokenEntityMapperInterface
+   * @var TokenEntityMapperInterface
    */
   protected $entityMapper;

   /**
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

   /**
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


17) modules/contrib/token/src/TokenEntityMapper.php:14

    ---------- begin diff ----------
@@ @@
 class TokenEntityMapper implements TokenEntityMapperInterface {

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


18) modules/contrib/token/src/Routing/RouteSubscriber.php:14

    ---------- begin diff ----------
@@ @@
 class RouteSubscriber extends RouteSubscriberBase {

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/token/src/Controller/TokenTreeController.php:13

    ---------- begin diff ----------
@@ @@
 class TokenTreeController extends ControllerBase {

   /**
-   * @var \Drupal\token\TreeBuilderInterface
+   * @var TreeBuilderInterface
    */
   protected $treeBuilder;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/token/src/Controller/TokenDevelController.php:14

    ---------- begin diff ----------
@@ @@
 class TokenDevelController extends ControllerBase {

   /**
-   * @var \Drupal\token\TreeBuilderInterface
+   * @var TreeBuilderInterface
    */
   protected $treeBuilder;

   /**
-   * @var \Drupal\token\TokenEntityMapperInterface
+   * @var TokenEntityMapperInterface
    */
   protected $entityMapper;

@@ @@
   /**
    * Prints the loaded structure of the current entity.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *    A RouteMatch object.
    *
    * @return array
@@ @@
   /**
    * Render the token tree for the specified entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which the token tree should be rendered.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/token/src/Commands/TokenCommands.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The module_handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * TokenCommands constructor.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module_handler service.
    */
   public function __construct(ModuleHandlerInterface $moduleHandler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 21 files have been changed by Rector                                      

