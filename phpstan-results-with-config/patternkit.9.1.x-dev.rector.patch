diff --git a/modules/patternkit_media_library/patternkit_media_library.install b/modules/patternkit_media_library/patternkit_media_library.install
index 91ed4f6..c0e2396 100644
--- a/modules/patternkit_media_library/patternkit_media_library.install
+++ b/modules/patternkit_media_library/patternkit_media_library.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Config\ConfigInstaller;
 /**
  * @file
  * Functions run when the module is installed by Drupal.
@@ -32,7 +33,7 @@ function patternkit_media_library_update_8001(&$sandbox) {
   $config_current = \Drupal::configFactory()->getEditable($config_key);
   // Installs the default config only if this config is not already set.
   if (is_null($config_current->get('use_styles'))) {
-    /** @var \Drupal\Core\Config\ConfigInstaller $config_installer_service */
+    /** @var ConfigInstaller $config_installer_service */
     $config_installer_service = \Drupal::service('config.installer');
     $config_installer_service->installDefaultConfig('module', 'patternkit_media_library');
   }
diff --git a/modules/patternkit_media_library/src/Controller/PatternkitMediaLibraryController.php b/modules/patternkit_media_library/src/Controller/PatternkitMediaLibraryController.php
index 0b41c37..62a8218 100644
--- a/modules/patternkit_media_library/src/Controller/PatternkitMediaLibraryController.php
+++ b/modules/patternkit_media_library/src/Controller/PatternkitMediaLibraryController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\patternkit_media_library\Controller;
 
+use Drupal\media_library\MediaLibraryUiBuilder;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\media_library\MediaLibraryState;
 use Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException;
@@ -15,13 +16,13 @@ class PatternkitMediaLibraryController extends ControllerBase {
   /**
    * Returns a media library display especially for Patternkit.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The Symfony request object.
    *
    * @return array
    *   A Drupal render array.
    *
-   * @throws \Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException
+   * @throws ServiceNotFoundException
    */
   public function mediaLibrary(Request $request): array {
     $query = $request->query;
@@ -35,7 +36,7 @@ class PatternkitMediaLibraryController extends ControllerBase {
     if (!\Drupal::hasService('media_library.ui_builder')) {
       throw new ServiceNotFoundException('media_library.ui_builder');
     }
-    /** @var \Drupal\media_library\MediaLibraryUiBuilder $ml_ui_builder */
+    /** @var MediaLibraryUiBuilder $ml_ui_builder */
     $ml_ui_builder = \Drupal::service('media_library.ui_builder');
 
     return $ml_ui_builder->buildUi($ml_state);
diff --git a/modules/patternkit_media_library/src/MediaLibraryJSONLibraryOpener.php b/modules/patternkit_media_library/src/MediaLibraryJSONLibraryOpener.php
index b2e7bd3..1bcfd68 100644
--- a/modules/patternkit_media_library/src/MediaLibraryJSONLibraryOpener.php
+++ b/modules/patternkit_media_library/src/MediaLibraryJSONLibraryOpener.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\patternkit_media_library;
 
+use Drupal\media\Entity\Media;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -18,14 +19,14 @@ class MediaLibraryJSONLibraryOpener implements MediaLibraryOpenerInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * MediaLibraryFieldWidgetOpener constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -55,7 +56,7 @@ class MediaLibraryJSONLibraryOpener implements MediaLibraryOpenerInterface {
       return $response;
     }
     try {
-      /** @var \Drupal\media\Entity\Media $media */
+      /** @var Media $media */
       $media = $this->entityTypeManager->getStorage('media')->load($mid);
       $fid = $media->getSource()->getSourceFieldValue($media);
       $file = $this->entityTypeManager->getStorage('file')->load($fid);
@@ -71,7 +72,7 @@ class MediaLibraryJSONLibraryOpener implements MediaLibraryOpenerInterface {
         $url = $file->toUrl()->setAbsolute(FALSE);
       }
       elseif ($file->access('download')) {
-        $url = file_url_transform_relative(file_create_url($file->getFileUri()));
+        $url = \Drupal::service('file_url_generator')->generateString($file->getFileUri());
       }
       else {
         $url = $file->label();
diff --git a/patternkit.install b/patternkit.install
index 1670922..62d703a 100644
--- a/patternkit.install
+++ b/patternkit.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\Exception\EntityTypeIdLengthException;
 /**
  * @file
  * Install file for patternkit module.
@@ -40,7 +41,7 @@ function patternkit_requirements($phase) {
 /**
  * Allows upgrading from dev version automatically.
  *
- * @throws \Drupal\Core\Entity\Exception\EntityTypeIdLengthException
+ * @throws EntityTypeIdLengthException
  */
 function patternkit_update_8001(&$sandbox) {
   // Installs new entities if necessary.
@@ -163,7 +164,7 @@ function patternkit_update_8003(&$sandbox) {
  */
 function patternkit_update_8004(&$sandbox) {
   $config_key = 'patternkit.settings';
-  $source = new FileStorage(drupal_get_path('module', 'patternkit') . '/config/install');
+  $source = new FileStorage(\Drupal::service('extension.list.module')->getPath('patternkit') . '/config/install');
   $config_install = $source->read($config_key);
   $config_current = \Drupal::configFactory()->getEditable($config_key);
 
diff --git a/src/Asset/Library.php b/src/Asset/Library.php
index 2899119..a40105f 100644
--- a/src/Asset/Library.php
+++ b/src/Asset/Library.php
@@ -2,6 +2,14 @@
 
 namespace Drupal\patternkit\Asset;
 
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Extension\Extension;
+use Drupal\Core\Asset\Exception\IncompleteLibraryDefinitionException;
+use Drupal\Core\StreamWrapper\StreamWrapperManagerInterface;
+use Symfony\Component\DependencyInjection\Exception\ServiceCircularReferenceException;
+use Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException;
+use Drupal\patternkit\PatternLibraryPluginInterface;
+use Drupal\patternkit\Entity\Pattern;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Serialization\Exception\InvalidDataTypeException;
 use Drupal\Component\Utility\NestedArray;
@@ -49,10 +57,10 @@ class Library extends CacheCollector implements LibraryInterface, ContainerInjec
   /** @var string */
   const PERSISTENT_CACHE_ID = 'patternkit.library.cache';
 
-  /** @var \Drupal\Core\Config\ImmutableConfig */
+  /** @var ImmutableConfig */
   protected $config;
 
-  /** @var \Drupal\Core\Extension\Extension[] */
+  /** @var Extension[] */
   protected $extensionList;
 
   /** @var array */
@@ -68,38 +76,38 @@ class Library extends CacheCollector implements LibraryInterface, ContainerInjec
    */
   protected $libraryDefinitions = [];
 
-  /** @var \Drupal\patternkit\PatternLibraryPluginManager */
+  /** @var PatternLibraryPluginManager */
   protected $libraryPluginManager;
 
-  /** @var \Drupal\Core\Extension\ModuleHandlerInterface */
+  /** @var ModuleHandlerInterface */
   protected $moduleHandler;
 
   /** @var string */
   protected $root;
 
-  /** @var \Drupal\Core\Theme\ThemeManagerInterface */
+  /** @var ThemeManagerInterface */
   protected $themeManager;
 
   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The Symfony app container.
    *
    * @return self
    */
   public static function create(ContainerInterface $container): self {
-    /** @var \Drupal\Core\Cache\CacheBackendInterface $cache */
+    /** @var CacheBackendInterface $cache */
     $cache = $container->get('cache.discovery');
-    /** @var \Drupal\Core\Config\ConfigFactoryInterface $config_factory */
+    /** @var ConfigFactoryInterface $config_factory */
     $config_factory = $container->get('config.factory');
-    /** @var \Drupal\patternkit\PatternLibraryPluginManager $library_plugin_manager */
+    /** @var PatternLibraryPluginManager $library_plugin_manager */
     $library_plugin_manager = $container->get('plugin.manager.library.pattern');
-    /** @var \Drupal\Core\Lock\LockBackendInterface $lock */
+    /** @var LockBackendInterface $lock */
     $lock = $container->get('lock');
-    /** @var \Drupal\Core\Extension\ModuleHandlerInterface $module_handler */
+    /** @var ModuleHandlerInterface $module_handler */
     $module_handler = $container->get('module_handler');
     /** @var string $root */
     $root = $container->get('app.root');
-    /** @var \Drupal\Core\Theme\ThemeManagerInterface $theme_manager */
+    /** @var ThemeManagerInterface $theme_manager */
     $theme_manager = $container->get('theme.manager');
     return new static(
       $cache,
@@ -114,19 +122,19 @@ class Library extends CacheCollector implements LibraryInterface, ContainerInjec
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   Provide a default cache.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Provide the factory for configuration objects.
-   * @param \Drupal\Core\Lock\LockBackendInterface $lock
+   * @param LockBackendInterface $lock
    *   Provide the lock backend.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Provide a module handler.
-   * @param \Drupal\patternkit\PatternLibraryPluginManager $library_plugin_manager
+   * @param PatternLibraryPluginManager $library_plugin_manager
    *   Provide a plugin manager for pattern libraries.
    * @param string $root
    *   The app root path.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $theme_manager
+   * @param ThemeManagerInterface $theme_manager
    *   Provide a theme manager.
    */
   public function __construct(
@@ -161,7 +169,7 @@ class Library extends CacheCollector implements LibraryInterface, ContainerInjec
    *
    * @see \Drupal\Core\Asset\LibraryDiscoveryParser::applyLibrariesOverride
    *
-   * @throws \Drupal\Core\Asset\Exception\InvalidLibrariesOverrideSpecificationException
+   * @throws InvalidLibrariesOverrideSpecificationException
    */
   protected function applyLibrariesOverride($libraries, $extension): array {
     $active_theme = $this->themeManager->getActiveTheme();
@@ -171,7 +179,7 @@ class Library extends CacheCollector implements LibraryInterface, ContainerInjec
     foreach ($all_libraries_overrides as $theme_path => $libraries_overrides) {
       /**
        * @var string $library_name
-       * @var \Drupal\patternkit\PatternLibrary $library
+       * @var PatternLibrary $library
        */
       foreach ($libraries as $library_name => $library) {
         if (!is_subclass_of($library, PatternLibrary::class)) {
@@ -234,10 +242,10 @@ class Library extends CacheCollector implements LibraryInterface, ContainerInjec
    * @param string $extension
    *   The name of the extension that registered a library.
    *
-   * @return \Drupal\patternkit\PatternLibrary[]
+   * @return PatternLibrary[]
    *   All library definitions of the passed extension.
    *
-   * @throws \Drupal\Core\Asset\Exception\IncompleteLibraryDefinitionException
+   * @throws IncompleteLibraryDefinitionException
    *   Thrown when a library has no js/css/setting.
    * @throws \UnexpectedValueException
    *   Thrown when a js file defines a positive weight.
@@ -323,7 +331,7 @@ class Library extends CacheCollector implements LibraryInterface, ContainerInjec
 
   /**
    * {@inheritDoc}
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function getAssets(): array {
     $assets = [];
@@ -341,7 +349,7 @@ class Library extends CacheCollector implements LibraryInterface, ContainerInjec
    * @param bool $reset
    *   TRUE if the library cache should be re-parsed.
    *
-   * @return \Drupal\patternkit\PatternLibrary[]
+   * @return PatternLibrary[]
    *   An array of libraries and information.
    */
   public function getLibraries($reset = FALSE): array {
@@ -383,7 +391,7 @@ class Library extends CacheCollector implements LibraryInterface, ContainerInjec
    */
   public function getLibraryAsset($key) {
     $library_name = substr($key, 0, strpos($key, '/'));
-    /** @var \Drupal\patternkit\PatternLibrary $library */
+    /** @var PatternLibrary $library */
     $library = $this->get(trim($library_name, '@'));
     return $library->patterns[substr($key, strlen($library_name . '/'))] ?? NULL;
   }
@@ -391,11 +399,11 @@ class Library extends CacheCollector implements LibraryInterface, ContainerInjec
   /**
    * Returns the specified Patternkit module metadata.
    *
-   * @return \Drupal\patternkit\PatternLibrary[]
+   * @return PatternLibrary[]
    *   Array of metadata objects found or object if specific pattern requested.
    *   Keyed by library name in the format.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function getLibraryDefinitions(): array {
     if (!empty($this->libraryDefinitions)) {
@@ -459,7 +467,9 @@ class Library extends CacheCollector implements LibraryInterface, ContainerInjec
    *   found.
    */
   protected function drupalGetPath($type, $name): string {
-    return drupal_get_path($type, $name);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Unsupported extension type encountered, using extension.path.resolver instead of extension.list
+    return \Drupal::service('extension.path.resolver')->getPath($type, $name);
   }
 
   /**
@@ -479,7 +489,7 @@ class Library extends CacheCollector implements LibraryInterface, ContainerInjec
    */
   protected function fileValidUri($uri): bool {
     // Assert that the URI has an allowed scheme. Bare paths are not allowed.
-    /** @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager */
+    /** @var StreamWrapperManagerInterface $stream_wrapper_manager */
     $stream_wrapper_manager = \Drupal::service('stream_wrapper_manager');
     $uri_scheme = $stream_wrapper_manager::getScheme($uri);
     if (!$stream_wrapper_manager->isValidScheme($uri_scheme)) {
@@ -497,7 +507,7 @@ class Library extends CacheCollector implements LibraryInterface, ContainerInjec
    *
    * @todo Replace with Symfony tag methods when they become available.
    *
-   * @return \Drupal\Core\Extension\Extension[]
+   * @return Extension[]
    */
   protected function getExtensionList(): array {
     if (isset($this->extensionList)) {
@@ -537,18 +547,18 @@ class Library extends CacheCollector implements LibraryInterface, ContainerInjec
   }
 
   /**
-   * Utility function to get all Patternkit module metadata.
-   *
-   * @return array
-   *   Array of metadata objects found.
-   *
-   * @throws \Symfony\Component\DependencyInjection\Exception\ServiceCircularReferenceException
-   *   When a circular reference is detected.
-   * @throws \Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException;
-   *   When the service is not defined.
-   * @throws \Drupal\Core\Asset\Exception\InvalidLibraryFileException
-   *   Thrown if an invalid library path was passed to the parser.
-   */
+  * Utility function to get all Patternkit module metadata.
+  *
+  * @return array
+  *   Array of metadata objects found.
+  *
+   * @throws ServiceCircularReferenceException
+  *   When a circular reference is detected.
+   * @throws ServiceNotFoundException ;
+    When the service is not defined.
+   * @throws InvalidLibraryFileException
+  *   Thrown if an invalid library path was passed to the parser.
+  */
   protected function getLibraryMetadata(): array {
     $metadata = [];
     $plugin_default = self::DEFAULT_LIBRARY_PLUGIN_ID;
@@ -576,7 +586,7 @@ class Library extends CacheCollector implements LibraryInterface, ContainerInjec
         }
         $lib_info[$path] = $info;
         $library->setPatternInfo($lib_info);
-        /** @var \Drupal\patternkit\PatternLibraryPluginInterface $plugin */
+        /** @var PatternLibraryPluginInterface $plugin */
         try {
           $plugin = $this->libraryPluginManager->createInstance($info['plugin']);
         }
@@ -593,7 +603,7 @@ class Library extends CacheCollector implements LibraryInterface, ContainerInjec
             throw new InvalidLibraryFileException("Error loading pattern libraries via $plugin_id: " . $exception->getMessage());
           }
         }
-        /** @var \Drupal\patternkit\Entity\Pattern $pattern */
+        /** @var Pattern $pattern */
         $library->patterns = array_merge($library->patterns, $plugin->getMetadata($library->getExtension(), $library, $path));
         if (empty($library->patterns)) {
           \Drupal::logger('patternkit')->info(
@@ -689,10 +699,10 @@ class Library extends CacheCollector implements LibraryInterface, ContainerInjec
    * @param string $path
    *   The relative path to the extension.
    *
-   * @return \Drupal\patternkit\PatternLibrary[]
+   * @return PatternLibrary[]
    *   An array of parsed library data.
    *
-   * @throws \Drupal\Core\Asset\Exception\InvalidLibraryFileException
+   * @throws InvalidLibraryFileException
    *   Thrown when a parser exception got thrown.
    */
   protected function parseLibraryInfo($extension_type, $extension, $path): array {
@@ -724,7 +734,7 @@ class Library extends CacheCollector implements LibraryInterface, ContainerInjec
       $library['extension'] = $extension;
       $library['id'] = $id;
       $serializer = new Serializer([new PropertyNormalizer()]);
-      /** @var \Drupal\patternkit\PatternLibrary $library */
+      /** @var PatternLibrary $library */
       $libraries[$id] = $serializer->denormalize($library, PatternLibrary::class);
     }
 
@@ -734,7 +744,7 @@ class Library extends CacheCollector implements LibraryInterface, ContainerInjec
   /**
    * {@inheritDoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function resolveCacheMiss($key) {
     $definitions = $this->getLibraryDefinitions();
diff --git a/src/Asset/LibraryInterface.php b/src/Asset/LibraryInterface.php
index 3e7b129..08604d8 100644
--- a/src/Asset/LibraryInterface.php
+++ b/src/Asset/LibraryInterface.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\patternkit\Asset;
 
+use Drupal\Core\Asset\Exception\IncompleteLibraryDefinitionException;
+use Drupal\Core\Asset\Exception\InvalidLibraryFileException;
+use Drupal\patternkit\PatternLibrary;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Cache\CacheCollectorInterface;
 
 /**
@@ -30,8 +34,8 @@ interface LibraryInterface extends CacheCollectorInterface {
    * @return array
    *   An array of library assets.
    *
-   * @throws \Drupal\Core\Asset\Exception\IncompleteLibraryDefinitionException
-   * @throws \Drupal\Core\Asset\Exception\InvalidLibraryFileException
+   * @throws IncompleteLibraryDefinitionException
+   * @throws InvalidLibraryFileException
    */
   public function getAssets(): array;
 
@@ -47,15 +51,15 @@ interface LibraryInterface extends CacheCollectorInterface {
    * @return mixed|null
    *   The specific asset requested or NULL if not found.
    *
-   * @throws \Drupal\Core\Asset\Exception\IncompleteLibraryDefinitionException
-   * @throws \Drupal\Core\Asset\Exception\InvalidLibraryFileException
+   * @throws IncompleteLibraryDefinitionException
+   * @throws InvalidLibraryFileException
    */
   public function getLibraryAsset($key);
 
   /**
    * Returns an array of all libraries.
    *
-   * @return \Drupal\patternkit\PatternLibrary[]
+   * @return PatternLibrary[]
    *   All libraries as definitions, keyed by library name.
    */
   public function getLibraries(): array;
@@ -91,11 +95,11 @@ interface LibraryInterface extends CacheCollectorInterface {
   /**
    * Returns the specified Patternkit module metadata.
    *
-   * @return \Drupal\patternkit\PatternLibrary[]
+   * @return PatternLibrary[]
    *   Array of metadata objects found or object if specific pattern requested.
    *   Keyed by library name in the format.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function getLibraryDefinitions(): array;
 
diff --git a/src/Asset/PatternLibraryParser/FilePatternLibraryParser.php b/src/Asset/PatternLibraryParser/FilePatternLibraryParser.php
index cebfa71..7d39b5f 100644
--- a/src/Asset/PatternLibraryParser/FilePatternLibraryParser.php
+++ b/src/Asset/PatternLibraryParser/FilePatternLibraryParser.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\patternkit\Asset\PatternLibraryParser;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Serialization\SerializationInterface;
 use Drupal\Core\Asset\Exception\InvalidLibraryFileException;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -22,15 +23,15 @@ class FilePatternLibraryParser extends PatternLibraryParserBase {
   /**
    * FilePatternLibraryParser constructor.
    *
-   * @param \Drupal\Component\Serialization\SerializationInterface $serializer
+   * @param SerializationInterface $serializer
    *   Serializes and de-serializes data.
    * @param string $root
    *   The application root path.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Allows modules to alter library parsing.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $theme_manager
+   * @param ThemeManagerInterface $theme_manager
    *   Allows themes to alter library parsing.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper
+   * @param StreamWrapperManagerInterface $stream_wrapper
    *   The stream wrapper manager.
    */
   public function __construct(
@@ -90,7 +91,7 @@ class FilePatternLibraryParser extends PatternLibraryParserBase {
    * See https://www.drupal.org/node/2274843#define-library for more
    * information.
    *
-   * @param \Drupal\patternkit\PatternLibrary $library
+   * @param PatternLibrary $library
    *   The data of the library that was registered.
    * @param string $path
    *   The relative path to the extension.
@@ -98,8 +99,8 @@ class FilePatternLibraryParser extends PatternLibraryParserBase {
    * @return array
    *   An array of parsed library data.
    *
-   * @throws \Drupal\Core\Asset\Exception\InvalidLibraryFileException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws InvalidLibraryFileException
+   * @throws PluginException
    */
   public function parsePatternLibraryInfo(PatternLibrary $library, $path): array {
     if (!file_exists($path)) {
diff --git a/src/Asset/PatternLibraryParser/JSONPatternLibraryParser.php b/src/Asset/PatternLibraryParser/JSONPatternLibraryParser.php
index 9301b6a..edbc1a4 100644
--- a/src/Asset/PatternLibraryParser/JSONPatternLibraryParser.php
+++ b/src/Asset/PatternLibraryParser/JSONPatternLibraryParser.php
@@ -20,15 +20,15 @@ class JSONPatternLibraryParser extends PatternLibraryParserBase {
   /**
    * Attaches required services.
    *
-   * @param \Drupal\Component\Serialization\SerializationInterface $serializer
+   * @param SerializationInterface $serializer
    *   Serializes and de-serializes data.
    * @param string $root
    *   The application root path.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Allows modules to alter library parsing.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $theme_manager
+   * @param ThemeManagerInterface $theme_manager
    *   Allows themes to alter library parsing.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper
+   * @param StreamWrapperManagerInterface $stream_wrapper
    *   The stream wrapper manager.
    */
   public function __construct(
diff --git a/src/Asset/PatternLibraryParser/RESTPatternLibraryParser.php b/src/Asset/PatternLibraryParser/RESTPatternLibraryParser.php
index 1a52765..743b99a 100644
--- a/src/Asset/PatternLibraryParser/RESTPatternLibraryParser.php
+++ b/src/Asset/PatternLibraryParser/RESTPatternLibraryParser.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\patternkit\Asset\PatternLibraryParser;
 
+use GuzzleHttp\Exception\GuzzleException;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\File\FileSystemInterface;
@@ -15,17 +16,17 @@ use Symfony\Component\Serializer\SerializerInterface;
  */
 class RESTPatternLibraryParser {
 
-  /** @var \GuzzleHttp\ClientInterface */
+  /** @var ClientInterface */
   protected $client;
 
-  /** @var \Drupal\Core\File\FileSystemInterface */
+  /** @var FileSystemInterface */
   protected $fs;
 
   /**
    * PatternkitRESTLib constructor.
    *
    * {@inheritDoc}
-   * @param \GuzzleHttp\ClientInterface $client
+   * @param ClientInterface $client
    *   The HTTP client for rest API library retrieval.
    */
   public function __construct(ConfigFactoryInterface $config_factory,
@@ -41,15 +42,15 @@ class RESTPatternLibraryParser {
   /**
    * Fetches all assets for a pattern.
    *
-   * @param \Drupal\patternkit\Entity\PatternInterface $pattern
+   * @param PatternInterface $pattern
    *   The pattern to use for asset retrieval.
-   * @param \Drupal\patternkit\PatternEditorConfig $config
+   * @param PatternEditorConfig $config
    *   The configuration object to use for provisioning the pattern.
    *
-   * @return \Drupal\patternkit\Entity\PatternInterface
+   * @return PatternInterface
    *   The pattern parameter with updated asset references.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function fetchPatternAssets(PatternInterface $pattern,
     PatternEditorConfig $config) :PatternInterface {
diff --git a/src/Asset/PatternLibraryParser/TwigPatternLibraryParser.php b/src/Asset/PatternLibraryParser/TwigPatternLibraryParser.php
index 514788b..6e6ad19 100644
--- a/src/Asset/PatternLibraryParser/TwigPatternLibraryParser.php
+++ b/src/Asset/PatternLibraryParser/TwigPatternLibraryParser.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\patternkit\Asset\PatternLibraryParser;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Serialization\SerializationInterface;
 use Drupal\Core\Asset\Exception\InvalidLibraryFileException;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -23,15 +25,15 @@ class TwigPatternLibraryParser extends PatternLibraryParserBase {
   /**
    * TwigPatternLibraryParser constructor.
    *
-   * @param \Drupal\Component\Serialization\SerializationInterface $serializer
+   * @param SerializationInterface $serializer
    *   Serializes and de-serializes data.
    * @param string $root
    *   The application root path.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Allows modules to alter library parsing.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $theme_manager
+   * @param ThemeManagerInterface $theme_manager
    *   Allows themes to alter library parsing.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper
+   * @param StreamWrapperManagerInterface $stream_wrapper
    *   The stream wrapper manager.
    */
   public function __construct(
@@ -53,11 +55,11 @@ class TwigPatternLibraryParser extends PatternLibraryParserBase {
    * @param array|object $data
    *   The optional data for the pattern.
    *
-   * @return \Drupal\patternkit\Entity\PatternInterface
+   * @return PatternInterface
    *   A fully-instantiated Patternkit Pattern.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function createPattern($name, $data): PatternInterface {
     // Pattern schemas contain values needed for Pattern fields.
@@ -123,7 +125,7 @@ class TwigPatternLibraryParser extends PatternLibraryParserBase {
    * See https://www.drupal.org/node/2274843#define-library for more
    * information.
    *
-   * @param \Drupal\patternkit\PatternLibrary $library
+   * @param PatternLibrary $library
    *   The data of the library that was registered.
    * @param string $path
    *   The relative path to the extension.
@@ -131,8 +133,8 @@ class TwigPatternLibraryParser extends PatternLibraryParserBase {
    * @return array
    *   An array of parsed library data.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function parsePatternLibraryInfo(PatternLibrary $library, $path): array {
     if (!file_exists($path)) {
diff --git a/src/Asset/PatternLibraryParser/WebcomponentPatternLibraryParser.php b/src/Asset/PatternLibraryParser/WebcomponentPatternLibraryParser.php
index 3850c28..5bb94fb 100644
--- a/src/Asset/PatternLibraryParser/WebcomponentPatternLibraryParser.php
+++ b/src/Asset/PatternLibraryParser/WebcomponentPatternLibraryParser.php
@@ -19,7 +19,7 @@ class WebcomponentPatternLibraryParser extends PatternLibraryParserBase {
    * @param object $config
    *   Configuration object for this instance of the pattern.
    *
-   * @return \Drupal\patternkit\Entity\PatternInterface
+   * @return PatternInterface
    *   The patternkit object representing the pattern.
    *
    * @todo Finish implementation.
diff --git a/src/Asset/PatternLibraryParserBase.php b/src/Asset/PatternLibraryParserBase.php
index 8666fa9..e799a9b 100644
--- a/src/Asset/PatternLibraryParserBase.php
+++ b/src/Asset/PatternLibraryParserBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\patternkit\Asset;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Asset\LibraryDiscoveryParser;
 use Drupal\Core\File\FileSystem;
 use Drupal\Core\File\FileSystemInterface;
@@ -24,11 +26,11 @@ abstract class PatternLibraryParserBase extends LibraryDiscoveryParser implement
    * @param array|object $data
    *   The optional data for the pattern.
    *
-   * @return \Drupal\patternkit\Entity\PatternInterface
+   * @return PatternInterface
    *   A fully-instantiated Patternkit Pattern.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function createPattern($name, $data): PatternInterface {
     // Pattern schemas contain values needed for Pattern fields.
@@ -188,7 +190,7 @@ abstract class PatternLibraryParserBase extends LibraryDiscoveryParser implement
    *
    * @param \Drupal\patternkit\entity\PatternInterface $pattern
    *   The pattern to use for asset retrieval.
-   * @param \Drupal\patternkit\PatternEditorConfig|null $config
+   * @param PatternEditorConfig|null $config
    *   The configuration object to use for provisioning the pattern.
    *
    * @return array
diff --git a/src/Asset/PatternLibraryParserInterface.php b/src/Asset/PatternLibraryParserInterface.php
index a439c97..d0e7c08 100644
--- a/src/Asset/PatternLibraryParserInterface.php
+++ b/src/Asset/PatternLibraryParserInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\patternkit\Asset;
 
+use Drupal\Core\Asset\Exception\InvalidLibraryFileException;
 use Drupal\patternkit\Entity\PatternInterface;
 use Drupal\patternkit\PatternEditorConfig;
 use Drupal\patternkit\PatternLibrary;
@@ -19,7 +20,7 @@ interface PatternLibraryParserInterface {
    * @param array|object $schema
    *   The optional schema for the pattern.
    *
-   * @return \Drupal\patternkit\Entity\PatternInterface
+   * @return PatternInterface
    *   A fully-instantiated Patternkit Pattern.
    */
   public function createPattern($name, $schema): PatternInterface;
@@ -46,7 +47,7 @@ interface PatternLibraryParserInterface {
    * @param object $config
    *   Configuration object for this instance of the pattern.
    *
-   * @return \Drupal\patternkit\Entity\PatternInterface
+   * @return PatternInterface
    *   The patternkit object of interest.
    */
   public static function fetchAssets($subtype, $config): PatternInterface;
@@ -61,7 +62,7 @@ interface PatternLibraryParserInterface {
    * @param object $pk_obj
    *   The patternkit pattern object to extend.
    *
-   * @return \Drupal\patternkit\Entity\PatternInterface
+   * @return PatternInterface
    *   The patternkit object representing the pattern..
    */
   public function fetchFragmentAssets($subtype, $config, &$pk_obj): PatternInterface;
@@ -84,9 +85,9 @@ interface PatternLibraryParserInterface {
   /**
    * Fetches all assets for a pattern.
    *
-   * @param \Drupal\patternkit\Entity\PatternInterface $pattern
+   * @param PatternInterface $pattern
    *   The pattern to use for asset retrieval.
-   * @param \Drupal\patternkit\PatternEditorConfig|null $config
+   * @param PatternEditorConfig|null $config
    *   The configuration object to use for provisioning the pattern.
    *
    * @return array
@@ -131,7 +132,7 @@ interface PatternLibraryParserInterface {
    * See https://www.drupal.org/node/2274843#define-library for more
    * information.
    *
-   * @param \Drupal\patternkit\PatternLibrary $library
+   * @param PatternLibrary $library
    *   The data of the library that was registered.
    * @param string $path
    *   The relative path to the extension.
@@ -139,7 +140,7 @@ interface PatternLibraryParserInterface {
    * @return array
    *   An array of parsed library data.
    *
-   * @throws \Drupal\Core\Asset\Exception\InvalidLibraryFileException
+   * @throws InvalidLibraryFileException
    *   Thrown when a parser exception was thrown.
    */
   public function parsePatternLibraryInfo(PatternLibrary $library, $path): array;
diff --git a/src/Commands/PatternkitCommands.php b/src/Commands/PatternkitCommands.php
index 369d1f2..81d3a8f 100644
--- a/src/Commands/PatternkitCommands.php
+++ b/src/Commands/PatternkitCommands.php
@@ -2,6 +2,19 @@
 
 namespace Drupal\patternkit\Commands;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\patternkit\Asset\LibraryInterface;
+use Drupal\Core\Block\BlockManager;
+use Drupal\layout_builder\SectionStorage\SectionStorageManagerInterface;
+use Drupal\layout_builder\LayoutTempstoreRepositoryInterface;
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Drupal\Core\KeyValueStore\KeyValueExpirableFactoryInterface;
+use Drupal\Patternkit\entity\PatternInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\layout_builder\SectionComponent;
 use Drupal\block\BlockInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Plugin\Context\Context;
@@ -22,21 +35,21 @@ class PatternkitCommands extends DrushCommands {
   /**
    * Block storage manager.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $blockStorage;
 
   /**
    * Asset Library manager.
    *
-   * @var \Drupal\patternkit\Asset\LibraryInterface
+   * @var LibraryInterface
    */
   protected $library;
 
   /**
    * Pattern storage manager.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $patternStorage;
 
@@ -71,12 +84,12 @@ class PatternkitCommands extends DrushCommands {
     $block_count = 0;
 
     $entity_type_manager = \Drupal::entityTypeManager();
-    /** @var \Drupal\Core\Block\BlockManager $block_manager */
+    /** @var BlockManager $block_manager */
     $block_manager = \Drupal::service('plugin.manager.block');
-    /** @var \Drupal\layout_builder\SectionStorage\SectionStorageManagerInterface $section_storage_manager */
+    /** @var SectionStorageManagerInterface $section_storage_manager */
     $section_storage_manager = \Drupal::service('plugin.manager.layout_builder.section_storage');
     $storage_definitions = $section_storage_manager->getDefinitions();
-    /** @var \Drupal\layout_builder\LayoutTempstoreRepositoryInterface $tempstore_repository */
+    /** @var LayoutTempstoreRepositoryInterface $tempstore_repository */
     $tempstore_repository = \Drupal::service('layout_builder.tempstore_repository');
     $block_storage = $this->blockStorage;
     $library = $this->library;
@@ -84,10 +97,10 @@ class PatternkitCommands extends DrushCommands {
 
     $section_storages = [];
     // Gather section storages from all entities and entity type layouts.
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $view_mode_storage */
+    /** @var ConfigEntityStorageInterface $view_mode_storage */
     $display_storage = $entity_type_manager->getStorage('entity_view_display');
     $displays = $display_storage->loadMultiple();
-    /** @var \Drupal\layout_builder\Entity\LayoutBuilderEntityViewDisplay $display */
+    /** @var LayoutBuilderEntityViewDisplay $display */
     foreach ($displays as $display) {
       if (!$display instanceof LayoutBuilderEntityViewDisplay) {
         continue;
@@ -115,7 +128,7 @@ class PatternkitCommands extends DrushCommands {
     }
 
     // Gather section storages from the tempstore, to update layout drafts.
-    /** @var \Drupal\Core\KeyValueStore\KeyValueExpirableFactoryInterface $key_value_factory */
+    /** @var KeyValueExpirableFactoryInterface $key_value_factory */
     $key_value_factory = \Drupal::service('keyvalue.expirable');
     foreach (array_keys($storage_definitions) as $section_storage_type) {
       $key_value = $key_value_factory->get("tempstore.shared.layout_builder.section_storage.$section_storage_type");
@@ -159,7 +172,7 @@ class PatternkitCommands extends DrushCommands {
             continue;
           }
           try {
-            /** @var \Drupal\Patternkit\entity\PatternInterface $pattern */
+            /** @var PatternInterface $pattern */
             $pattern = Pattern::create($pattern_asset);
           }
           catch (\Exception $exception) {
@@ -174,7 +187,7 @@ class PatternkitCommands extends DrushCommands {
             'library' => $pattern->getLibrary(),
             'path' => $pattern->getPath(),
           ]);
-          /** @var \Drupal\Patternkit\entity\PatternInterface $pattern_loaded */
+          /** @var PatternInterface $pattern_loaded */
           $pattern_loaded = end($pattern_cache);
           if ($pattern_loaded !== NULL) {
             if ($pattern_loaded->getHash() !== $pattern->getHash()) {
@@ -217,10 +230,10 @@ class PatternkitCommands extends DrushCommands {
    * @return array|bool
    *   Drush expected command result.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function libUpdate() {
     $logger = $this->logger();
@@ -234,22 +247,22 @@ class PatternkitCommands extends DrushCommands {
     $block_count = 0;
 
     $entity_type_manager = \Drupal::entityTypeManager();
-    /** @var \Drupal\Core\Block\BlockManager $block_manager */
+    /** @var BlockManager $block_manager */
     $block_manager = \Drupal::service('plugin.manager.block');
     $block_storage = $this->blockStorage;
 
     if ($lb_enabled) {
-      /** @var \Drupal\layout_builder\SectionStorage\SectionStorageManagerInterface $section_storage_manager */
+      /** @var SectionStorageManagerInterface $section_storage_manager */
       $section_storage_manager = \Drupal::service('plugin.manager.layout_builder.section_storage');
       $storage_definitions = $section_storage_manager->getDefinitions();
-      /** @var \Drupal\layout_builder\LayoutTempstoreRepositoryInterface $tempstore_repository */
+      /** @var LayoutTempstoreRepositoryInterface $tempstore_repository */
       $tempstore_repository = \Drupal::service('layout_builder.tempstore_repository');
       $section_storages = [];
       // Gather section storages from all entities and entity type layouts.
-      /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $view_mode_storage */
+      /** @var ConfigEntityStorageInterface $view_mode_storage */
       $display_storage = $entity_type_manager->getStorage('entity_view_display');
       $displays = $display_storage->loadMultiple();
-      /** @var \Drupal\layout_builder\Entity\LayoutBuilderEntityViewDisplay $display */
+      /** @var LayoutBuilderEntityViewDisplay $display */
       foreach ($displays as $display) {
         if (!$display instanceof LayoutBuilderEntityViewDisplay) {
           continue;
@@ -277,7 +290,7 @@ class PatternkitCommands extends DrushCommands {
       }
 
       // Gather section storages from the tempstore, to update layout drafts.
-      /** @var \Drupal\Core\KeyValueStore\KeyValueExpirableFactoryInterface $key_value_factory */
+      /** @var KeyValueExpirableFactoryInterface $key_value_factory */
       $key_value_factory = \Drupal::service('keyvalue.expirable');
       foreach (array_keys($storage_definitions) as $section_storage_type) {
         $key_value = $key_value_factory->get("tempstore.shared.layout_builder.section_storage.$section_storage_type");
@@ -295,7 +308,7 @@ class PatternkitCommands extends DrushCommands {
 
       foreach ($section_storages as $section_storage) {
         foreach ($section_storage->getSections() as $section_delta => $section) {
-          /** @var \Drupal\block\BlockInterface $component */
+          /** @var BlockInterface $component */
           foreach ($section->getComponents() as $component_delta => $component) {
             if (!$configuration = $this->updateBlockComponentPluginPattern($component)) {
               continue;
@@ -312,7 +325,7 @@ class PatternkitCommands extends DrushCommands {
         }
       }
     }
-    /** @var \Drupal\block\BlockInterface $block */
+    /** @var BlockInterface $block */
     foreach ($block_storage->loadMultiple() as $block) {
       if (!$block instanceof BlockInterface) {
         continue;
@@ -333,16 +346,16 @@ class PatternkitCommands extends DrushCommands {
   /**
    * Updates a Patternkit Block Component Plugin's Pattern to latest.
    *
-   * @param \Drupal\block\BlockInterface|\Drupal\layout_builder\SectionComponent $component
+   * @param BlockInterface|SectionComponent $component
    *   The block plugin or component to update.
    * @param null|string $library_name
    *   The name of the library to match against, or NULL to skip matching.
    *
    * @return false|array The updated configuration, or FALSE if it failed.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   private function updateBlockComponentPluginPattern($component, $library_name = NULL) {
     $logger = $this->logger();
diff --git a/src/Controller/PatternkitController.php b/src/Controller/PatternkitController.php
index 52ca181..28151d1 100644
--- a/src/Controller/PatternkitController.php
+++ b/src/Controller/PatternkitController.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\patternkit\Controller;
 
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Extension\ThemeHandlerInterface;
@@ -23,32 +26,32 @@ class PatternkitController extends ControllerBase {
   /**
    * The custom block storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $patternkitStorage;
 
   /**
    * The pattern library.
    *
-   * @var \Drupal\patternkit\Asset\LibraryInterface
+   * @var LibraryInterface
    */
   protected $library;
 
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
   /**
    * Constructs a Patternkit Controller.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $patternkit_storage
+   * @param EntityStorageInterface $patternkit_storage
    *   The Patternkit storage.
-   * @param \Drupal\patternkit\Asset\LibraryInterface $library
+   * @param LibraryInterface $library
    *   The Pattern Library.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
    */
   public function __construct(
@@ -63,17 +66,17 @@ class PatternkitController extends ControllerBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Thrown if the entity type doesn't exist.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown if the storage handler couldn't be loaded.
    */
   public static function create(ContainerInterface $container) {
-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager */
+    /** @var EntityTypeManagerInterface $entity_manager */
     $entity_manager = $container->get('entity_type.manager');
-    /** @var \Drupal\patternkit\Asset\LibraryInterface $library */
+    /** @var LibraryInterface $library */
     $library = $container->get('patternkit.asset.library');
-    /** @var \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler */
+    /** @var ThemeHandlerInterface $theme_handler */
     $theme_handler = $container->get('theme_handler');
     return new static(
       $entity_manager->getStorage('patternkit_block'),
@@ -134,7 +137,7 @@ class PatternkitController extends ControllerBase {
    *
    * @param string $pattern_id
    *   The pattern to add.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request object.
    *
    * @return array
@@ -158,12 +161,12 @@ class PatternkitController extends ControllerBase {
   /**
    * Returns the JSON-encoded Patternkit schema for the provided pattern.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    * @param string $pattern_id
    *   The name of the pattern to use for retrieving the schema.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The schema response.
    */
   public function apiPattern(Request $request, $pattern_id = NULL): Response {
@@ -194,7 +197,7 @@ class PatternkitController extends ControllerBase {
    * @param string $pattern_id
    *   The name of the pattern to use for retrieving the schema.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The schema response.
    */
   public function apiPatternSchema($pattern_id): JsonResponse {
diff --git a/src/Entity/Pattern.php b/src/Entity/Pattern.php
index af7b15e..167db1c 100644
--- a/src/Entity/Pattern.php
+++ b/src/Entity/Pattern.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\patternkit\Entity;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Core\Field\FieldItemListInterface;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\patternkit\PatternLibraryPluginManager;
+use Drupal\patternkit\PatternLibraryPluginInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Annotation\PluralTranslation;
@@ -79,9 +84,9 @@ class Pattern extends ContentEntityBase implements PatternInterface {
    * @return static
    *   The Pattern object.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Thrown if the entity type doesn't exist.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown if the storage handler couldn't be loaded.
    */
   public static function create(array $values = []) {
@@ -157,7 +162,7 @@ class Pattern extends ContentEntityBase implements PatternInterface {
    * Asset groups can be used for override purposes, as they will replace lower
    * weighted assets.
    *
-   * @return \Drupal\Core\Field\FieldItemListInterface|mixed
+   * @return FieldItemListInterface|mixed
    */
   public function getAssets() {
     return array_merge([], ...$this->get('assets')->getValue());
@@ -215,7 +220,7 @@ class Pattern extends ContentEntityBase implements PatternInterface {
    * Calls all getters for lazy-loaded values.
    *
    * @return int
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *
    * @todo Should be a way to hook into ContentEntity lazy loading instead.
    */
@@ -270,14 +275,14 @@ class Pattern extends ContentEntityBase implements PatternInterface {
    *
    * Schema and Template are always stored as assets when fetched.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginException
+   * @throws PluginNotFoundException
    */
   protected function fetchAssets() {
     $plugin_id = $this->getLibraryPluginId();
-    /** @var \Drupal\patternkit\PatternLibraryPluginManager $plugin_manager */
+    /** @var PatternLibraryPluginManager $plugin_manager */
     $plugin_manager = \Drupal::service('plugin.manager.library.pattern');
-    /** @var \Drupal\patternkit\PatternLibraryPluginInterface $plugin */
+    /** @var PatternLibraryPluginInterface $plugin */
     try {
       $plugin = $plugin_manager->createInstance($plugin_id);
     }
diff --git a/src/Entity/PatternkitBlock.php b/src/Entity/PatternkitBlock.php
index 6ed7667..aafa19c 100644
--- a/src/Entity/PatternkitBlock.php
+++ b/src/Entity/PatternkitBlock.php
@@ -80,7 +80,7 @@ class PatternkitBlock extends BlockContent {
    * {@inheritdoc}
    */
   public static function baseFieldDefinitions(EntityTypeInterface $entity_type) {
-    /** @var \Drupal\Core\Field\BaseFieldDefinition[] $fields */
+    /** @var BaseFieldDefinition[] $fields */
     $fields = EditorialContentEntityBase::baseFieldDefinitions($entity_type);
 
     $fields['id']->setLabel(t('Custom block ID'))
diff --git a/src/Form/PatternLibraryJSONForm.php b/src/Form/PatternLibraryJSONForm.php
index 0a1984d..d643e3f 100644
--- a/src/Form/PatternLibraryJSONForm.php
+++ b/src/Form/PatternLibraryJSONForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\patternkit\Form;
 
+use Drupal\Core\Entity\EntityTypeManager;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -12,7 +13,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class PatternLibraryJSONForm extends ConfigFormBase {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityStorage;
 
diff --git a/src/Form/PatternkitForm.php b/src/Form/PatternkitForm.php
index f59c217..5f1eb70 100644
--- a/src/Form/PatternkitForm.php
+++ b/src/Form/PatternkitForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\patternkit\Form;
 
+use Drupal\patternkit\entity\PatternkitBlock;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ -16,7 +17,7 @@ class PatternkitForm extends ContentEntityForm {
   /**
    * The block content entity.
    *
-   * @var \Drupal\patternkit\entity\PatternkitBlock
+   * @var PatternkitBlock
    */
   protected $entity;
 
diff --git a/src/Form/PatternkitSettingsForm.php b/src/Form/PatternkitSettingsForm.php
index 7ca8742..ce4b4c1 100644
--- a/src/Form/PatternkitSettingsForm.php
+++ b/src/Form/PatternkitSettingsForm.php
@@ -13,7 +13,7 @@ class PatternkitSettingsForm extends ConfigFormBase {
   /** @var string */
   const SETTINGS = 'patternkit.settings';
 
-  /** @var \Drupal\patternkit\Asset\LibraryInterface */
+  /** @var LibraryInterface */
   protected $library;
 
   public function __construct(ConfigFactoryInterface $config_factory, LibraryInterface $library) {
@@ -22,9 +22,9 @@ class PatternkitSettingsForm extends ConfigFormBase {
   }
 
   public static function create(ContainerInterface $container) {
-    /** @var \Drupal\Core\Config\ConfigFactoryInterface $config_factory */
+    /** @var ConfigFactoryInterface $config_factory */
     $config_factory = $container->get('config.factory');
-    /** @var \Drupal\patternkit\Asset\LibraryInterface $library */
+    /** @var LibraryInterface $library */
     $library = $container->get('patternkit.asset.library');
     return new static($config_factory, $library);
   }
diff --git a/src/JSONSchemaEditorTrait.php b/src/JSONSchemaEditorTrait.php
index 22d16a9..1a40821 100644
--- a/src/JSONSchemaEditorTrait.php
+++ b/src/JSONSchemaEditorTrait.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\patternkit;
 
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Component\Serialization\SerializationInterface;
+use Drupal\Core\State\StateInterface;
+use Drupal\editor\Plugin\EditorManager;
 use Drupal\ckeditor\Plugin\Editor\CKEditor;
 use Drupal\Core\Logger\LoggerChannelTrait;
 use Drupal\Core\Messenger\MessengerTrait;
@@ -20,21 +24,21 @@ trait JSONSchemaEditorTrait {
   /**
    * Patternkit config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
    * Encodes and decodes strings.
    *
-   * @var \Drupal\Component\Serialization\SerializationInterface
+   * @var SerializationInterface
    */
   protected $serializer;
 
   /**
    * Application static state.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
@@ -52,11 +56,11 @@ trait JSONSchemaEditorTrait {
    * @todo Eval if this belongs in PatternkitLibraryDiscovery instead.
    */
   public function getLibraryAssetUrlFromUri($uri): string {
-    $url = file_create_url($uri);
+    $url = \Drupal::service('file_url_generator')->generateAbsoluteString($uri);
     if ($url !== $uri) {
       $query_string = $this->state->get('system.css_js_query_string') ?: '0';
       $query_string_separator = (strpos($url, '?') !== FALSE) ? '&' : '?';
-      $url = file_url_transform_relative($url) . $query_string_separator . $query_string;
+      $url = \Drupal::service('file_url_generator')->transformRelative($url) . $query_string_separator . $query_string;
     }
     return $url;
   }
@@ -66,7 +70,7 @@ trait JSONSchemaEditorTrait {
    *
    * @param string $schema
    *   JSON Schema to display.
-   * @param \Drupal\patternkit\PatternEditorConfig $config
+   * @param PatternEditorConfig $config
    *   Editor configuration settings.
    *
    * @return array
@@ -129,7 +133,7 @@ trait JSONSchemaEditorTrait {
         // The following code builds a CKEditor toolbar. Code stolen from
         // \Drupal\editor\Element::preRenderTextFormat.
         $ckeditor_instance = CKEditor::create(\Drupal::getContainer(), [], 'ckeditor', ['provider' => 'patternkit']);
-        /** @var \Drupal\editor\Entity\Editor $ckeditor_config */
+        /** @var Editor $ckeditor_config */
         $ckeditor_entity = Editor::load($selected_toolbar);
         if ($ckeditor_entity && $ckeditor_entity->status()) {
           $editor_settings['patternkitCKEditorConfig'] = $ckeditor_instance->getJSSettings($ckeditor_entity);
@@ -168,7 +172,7 @@ trait JSONSchemaEditorTrait {
 
     // Attaches attachments for selected editor.
     if (!empty($selected_toolbar)) {
-      /** @var \Drupal\editor\Plugin\EditorManager $editor_plugin_manager */
+      /** @var EditorManager $editor_plugin_manager */
       $editor_plugin_manager = \Drupal::service('plugin.manager.editor');
       $element['#attached'] = BubbleableMetadata::mergeAttachments($element['#attached'], $editor_plugin_manager->getAttachments([$selected_toolbar]));
     }
diff --git a/src/Loader/PatternLibraryLoader.php b/src/Loader/PatternLibraryLoader.php
index 2e25af3..645244f 100644
--- a/src/Loader/PatternLibraryLoader.php
+++ b/src/Loader/PatternLibraryLoader.php
@@ -16,9 +16,9 @@ class PatternLibraryLoader extends FilesystemLoader {
    *
    * @param string|array $paths
    *   Paths to pass to the Filesystem loader.
-   * @param Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Logs to the patternkit channel.
-   * @param \Drupal\patternkit\Asset\LibraryInterface $library
+   * @param LibraryInterface $library
    *   Provides library names and paths.
    */
   public function __construct($paths,
diff --git a/src/PatternEditorConfig.php b/src/PatternEditorConfig.php
index 7bbcb58..a0f90ce 100644
--- a/src/PatternEditorConfig.php
+++ b/src/PatternEditorConfig.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\patternkit;
 
+use Drupal\patternkit\Entity\Pattern;
 /**
  * Class PatternkitEditorConfig.
  */
@@ -64,7 +65,7 @@ class PatternEditorConfig {
   /**
    * Optional pattern to use for configuring the editor.
    *
-   * @var \Drupal\patternkit\Entity\Pattern
+   * @var Pattern
    */
   public $pkdata;
 
diff --git a/src/PatternLibrary.php b/src/PatternLibrary.php
index 29f54eb..7f8c941 100644
--- a/src/PatternLibrary.php
+++ b/src/PatternLibrary.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\patternkit;
 
+use Drupal\Core\Extension\Extension;
+use Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException;
+use Drupal\Core\Extension\ExtensionList;
 use Drupal\Core\Asset\Exception\LibraryDefinitionMissingLicenseException;
 
 /**
@@ -191,13 +194,13 @@ class PatternLibrary {
   /**
    * Returns the Extension that owns the library.
    *
-   * @return \Drupal\Core\Extension\Extension
+   * @return Extension
    *   The extension name.
    *
-   * @throws \Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException
+   * @throws ServiceNotFoundException
    */
   public function getExtension() {
-    /** @var \Drupal\Core\Extension\ExtensionList $extension_list */
+    /** @var ExtensionList $extension_list */
     $extension_list = \Drupal::service("extension.list." . $this->extensionType);
     return $extension_list->get($this->extension);
   }
diff --git a/src/PatternLibraryJSONParserTrait.php b/src/PatternLibraryJSONParserTrait.php
index d2241de..3c10bbf 100644
--- a/src/PatternLibraryJSONParserTrait.php
+++ b/src/PatternLibraryJSONParserTrait.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\patternkit;
 
+use Drupal\Component\Serialization\Json;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\patternkit\Asset\Library;
+use Drupal\Core\StreamWrapper\StreamWrapperManagerInterface;
 use Drupal\patternkit\Entity\PatternInterface;
 
 /**
@@ -12,7 +16,7 @@ trait PatternLibraryJSONParserTrait {
   /**
    * Serializes and de-serializes data.
    *
-   * @var \Drupal\Component\Serialization\Json
+   * @var Json
    */
   protected $serializer;
 
@@ -34,13 +38,13 @@ trait PatternLibraryJSONParserTrait {
    *
    * @param object $properties
    *   The properties to parse.
-   * @param \Drupal\patternkit\Entity\PatternInterface $pattern
+   * @param PatternInterface $pattern
    *   Pattern for retrieving schema data and pathing.
    *
    * @return object
    *   The updated schema properties object.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *
    * @example JSON Schema technically allows the following valid refs:
    *   - URI "example.json" "../../example.json" "./example.json"
@@ -55,7 +59,7 @@ trait PatternLibraryJSONParserTrait {
   public static function schemaDereference($properties, PatternInterface $pattern) {
     $ext = '.json';
     $ext_len = strlen($ext);
-    /** @var \Drupal\patternkit\Asset\Library $library */
+    /** @var Library $library */
     $library = \Drupal::service('patternkit.asset.library');
     foreach ($properties as $property => $value) {
       if (!is_scalar($value)) {
@@ -74,7 +78,7 @@ trait PatternLibraryJSONParserTrait {
       if (strpos($value, '#/') === 0) {
         continue;
       }
-      /** @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_manager */
+      /** @var StreamWrapperManagerInterface $stream_manager */
       $stream_manager = \Drupal::service('stream_wrapper_manager');
       if ($stream_manager->isValidScheme($stream_manager->getViaUri($value))) {
         continue;
diff --git a/src/PatternLibraryPluginDefault.php b/src/PatternLibraryPluginDefault.php
index cccec87..de7d160 100644
--- a/src/PatternLibraryPluginDefault.php
+++ b/src/PatternLibraryPluginDefault.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\patternkit;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -30,14 +31,14 @@ abstract class PatternLibraryPluginDefault extends PluginBase implements Pattern
   /**
    * Stores patternkit configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
    * Parses library files into a Patternkit Library.
    *
-   * @var \Drupal\patternkit\Asset\PatternLibraryParserInterface
+   * @var PatternLibraryParserInterface
    */
   protected $parser;
 
@@ -56,9 +57,9 @@ abstract class PatternLibraryPluginDefault extends PluginBase implements Pattern
    * @param string $root
    *   The application root path.
    *   e.g. '/var/www/docroot'.
-   * @param \Drupal\patternkit\Asset\PatternLibraryParserInterface $parser
+   * @param PatternLibraryParserInterface $parser
    *   Pattern library parser service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Extension config retrieval.
    * @param array $configuration
    *   Plugin config.
@@ -94,8 +95,8 @@ abstract class PatternLibraryPluginDefault extends PluginBase implements Pattern
   }
 
   /**
-   * @param \Drupal\patternkit\Entity\PatternInterface $pattern
-   * @param \Drupal\patternkit\PatternEditorConfig|null $config
+   * @param PatternInterface $pattern
+   * @param PatternEditorConfig|null $config
    *
    * @return array
    */
diff --git a/src/PatternLibraryPluginDefinition.php b/src/PatternLibraryPluginDefinition.php
index 84a8fc1..5c9032f 100644
--- a/src/PatternLibraryPluginDefinition.php
+++ b/src/PatternLibraryPluginDefinition.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\patternkit;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Plugin\Definition\DerivablePluginDefinitionInterface;
 use Drupal\Component\Plugin\Definition\PluginDefinition;
 use Drupal\Core\Plugin\Definition\DependentPluginDefinitionInterface;
@@ -103,7 +104,7 @@ class PatternLibraryPluginDefinition extends PluginDefinition implements Derivab
   /**
    * Gets the human-readable name of the definition.
    *
-   * @return string|\Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return string|TranslatableMarkup
    *   The human-readable name of the definition.
    */
   public function getLabel() {
@@ -113,7 +114,7 @@ class PatternLibraryPluginDefinition extends PluginDefinition implements Derivab
   /**
    * Sets the human-readable name of the definition.
    *
-   * @param string|\Drupal\Core\StringTranslation\TranslatableMarkup $label
+   * @param string|TranslatableMarkup $label
    *   The human-readable name of the definition.
    *
    * @return $this
@@ -126,7 +127,7 @@ class PatternLibraryPluginDefinition extends PluginDefinition implements Derivab
   /**
    * Gets the description of the definition.
    *
-   * @return string|\Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return string|TranslatableMarkup
    *   The description of the definition.
    */
   public function getDescription() {
@@ -136,7 +137,7 @@ class PatternLibraryPluginDefinition extends PluginDefinition implements Derivab
   /**
    * Sets the description of the definition.
    *
-   * @param string|\Drupal\Core\StringTranslation\TranslatableMarkup $description
+   * @param string|TranslatableMarkup $description
    *   The description of the definition.
    *
    * @return $this
@@ -149,7 +150,7 @@ class PatternLibraryPluginDefinition extends PluginDefinition implements Derivab
   /**
    * Gets the human-readable category of the definition.
    *
-   * @return string|\Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return string|TranslatableMarkup
    *   The human-readable category of the definition.
    */
   public function getCategory() {
@@ -159,7 +160,7 @@ class PatternLibraryPluginDefinition extends PluginDefinition implements Derivab
   /**
    * Sets the human-readable category of the definition.
    *
-   * @param string|\Drupal\Core\StringTranslation\TranslatableMarkup $category
+   * @param string|TranslatableMarkup $category
    *   The human-readable category of the definition.
    *
    * @return $this
diff --git a/src/PatternLibraryPluginInterface.php b/src/PatternLibraryPluginInterface.php
index 495a77e..e121a56 100644
--- a/src/PatternLibraryPluginInterface.php
+++ b/src/PatternLibraryPluginInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\patternkit;
 
+use Drupal\patternkit\Entity\Pattern;
 use Drupal\Core\Extension\Extension;
 use Drupal\patternkit\Entity\PatternInterface;
 
@@ -13,8 +14,8 @@ interface PatternLibraryPluginInterface {
   /**
    * Fetches and loads all assets for a provided Pattern
    *
-   * @param \Drupal\patternkit\Entity\PatternInterface $pattern
-   * @param \Drupal\patternkit\PatternEditorConfig|null $config
+   * @param PatternInterface $pattern
+   * @param PatternEditorConfig|null $config
    *
    * @return array
    *   The loaded assets for the pattern. Should have the following keys:
@@ -28,7 +29,7 @@ interface PatternLibraryPluginInterface {
   /**
    * Returns renderable data or markup for a pattern editor.
    *
-   * @param \Drupal\patternkit\Entity\PatternInterface|null $pattern
+   * @param PatternInterface|null $pattern
    *   If specified, return an editor customized for this pattern.
    * @param PatternEditorConfig $config
    *   Optional configuration settings for the editor.
@@ -43,12 +44,12 @@ interface PatternLibraryPluginInterface {
    *
    * @param Extension $extension
    *   The extension to retrieve pattern metadata from.
-   * @param \Drupal\patternkit\PatternLibrary $library
+   * @param PatternLibrary $library
    *   The metadata for the library that is being retrieved.
    * @param string $path
    *   The path to the pattern library collection.
    *
-   * @return \Drupal\patternkit\Entity\Pattern[]
+   * @return Pattern[]
    *   The resulting pattern metadata.
    */
   public function getMetadata(Extension $extension, PatternLibrary $library, $path): array;
@@ -56,7 +57,7 @@ interface PatternLibraryPluginInterface {
   /**
    * Returns renderable data or markup for a provided array of patterns.
    *
-   * @param \Drupal\patternkit\Entity\PatternInterface[] $assets
+   * @param PatternInterface[] $assets
    *   An array of \Drupal\patternkit\Entity\PatternInterface to render.
    *
    * @return array
diff --git a/src/PatternLibraryPluginManager.php b/src/PatternLibraryPluginManager.php
index 78f18a9..3efbc6a 100644
--- a/src/PatternLibraryPluginManager.php
+++ b/src/PatternLibraryPluginManager.php
@@ -21,7 +21,7 @@ class PatternLibraryPluginManager extends DefaultPluginManager {
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
@@ -31,11 +31,11 @@ class PatternLibraryPluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler to invoke the alter hook with.
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, ThemeHandlerInterface $theme_handler) {
@@ -77,7 +77,7 @@ class PatternLibraryPluginManager extends DefaultPluginManager {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function processDefinition(&$definition, $plugin_id) {
     parent::processDefinition($definition, $plugin_id);
@@ -114,7 +114,7 @@ class PatternLibraryPluginManager extends DefaultPluginManager {
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\patternkit\PatternLibraryPluginDefinition[]
+   * @return PatternLibraryPluginDefinition[]
    */
   public function getSortedDefinitions(array $definitions = NULL, $label_key = 'label'): array {
     // Sort the plugins first by category, then by label.
@@ -133,7 +133,7 @@ class PatternLibraryPluginManager extends DefaultPluginManager {
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\patternkit\PatternLibraryPluginDefinition[][]
+   * @return PatternLibraryPluginDefinition[][]
    */
   public function getGroupedDefinitions(array $definitions = NULL, $label_key = 'label'): array {
     $definitions = $this->getSortedDefinitions($definitions ?? $this->getDefinitions(), $label_key);
diff --git a/src/Plugin/Block/PatternkitBlock.php b/src/Plugin/Block/PatternkitBlock.php
index 5e57676..ae82a02 100644
--- a/src/Plugin/Block/PatternkitBlock.php
+++ b/src/Plugin/Block/PatternkitBlock.php
@@ -2,6 +2,15 @@
 
 namespace Drupal\patternkit\Plugin\Block;
 
+use Drupal\Core\Block\BlockManager;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\patternkit\entity\PatternInterface;
+use Drupal\Core\Entity\ContentEntityStorageInterface;
+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\patternkit\PatternLibraryPluginInterface;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Component\Plugin\Context\Context;
 use Drupal\Component\Serialization\SerializationInterface;
 use Drupal\Component\Utility\Xss;
@@ -42,68 +51,68 @@ class PatternkitBlock extends BlockBase implements ContainerFactoryPluginInterfa
   /**
    * Controls the block cache.
    *
-   * @var \Drupal\Core\Block\BlockManager
+   * @var BlockManager
    */
   protected $blockManager;
 
   /**
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   * @var ContextHandlerInterface
    */
   protected $contextHandler;
 
   /**
    * Allows adding all current contexts to the block plugin.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;
 
   /**
    * Loads and saves the attached patternkit data content entity.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Loads pattern information.
    *
-   * @var \Drupal\patternkit\Asset\LibraryInterface
+   * @var LibraryInterface
    */
   protected $library;
 
   /**
    * Loads plugins for parsing and rendering patterns.
    *
-   * @var \Drupal\patternkit\PatternLibraryPluginManager
+   * @var PatternLibraryPluginManager
    */
   protected $patternLibraryPluginManager;
 
   /**
    * Encodes and decodes configuration for storage.
    *
-   * @var \Drupal\Component\Serialization\SerializationInterface
+   * @var SerializationInterface
    */
   protected $serializer;
 
   /**
    * Parses and replaces Drupal tokens.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
   /**
    * Renders strings using the Twig template engine.
    *
-   * @var \Drupal\Core\Template\TwigEnvironment
+   * @var TwigEnvironment
    */
   protected $twig;
 
   /**
    * Returns a new PatternkitBlock instance.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The global project container.
    * @param array $configuration
    *   Configuration array.
@@ -121,23 +130,23 @@ class PatternkitBlock extends BlockBase implements ContainerFactoryPluginInterfa
     $plugin_id,
     $plugin_definition): PatternkitBlock {
 
-    /** @var \Drupal\Core\Block\BlockManagerInterface $block_plugin_manager */
+    /** @var BlockManagerInterface $block_plugin_manager */
     $block_plugin_manager = $container->get('plugin.manager.block');
-    /** @var \Drupal\Core\Plugin\Context\ContextHandlerInterface $context_handler */
+    /** @var ContextHandlerInterface $context_handler */
     $context_handler = $container->get('context.handler');
-    /** @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface $context_repository */
+    /** @var ContextRepositoryInterface $context_repository */
     $context_repository = $container->get('context.repository');
-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
+    /** @var EntityTypeManagerInterface $entity_type_manager */
     $entity_type_manager = $container->get('entity_type.manager');
-    /** @var \Drupal\patternkit\Asset\LibraryInterface $library */
+    /** @var LibraryInterface $library */
     $library = $container->get('patternkit.asset.library');
-    /** @var \Drupal\patternkit\PatternLibraryPluginManager $pattern_plugin_manager */
+    /** @var PatternLibraryPluginManager $pattern_plugin_manager */
     $pattern_plugin_manager = $container->get('plugin.manager.library.pattern');
-    /** @var \Drupal\Component\Serialization\SerializationInterface $serializer */
+    /** @var SerializationInterface $serializer */
     $serializer = $container->get('serialization.json');
-    /** @var \Drupal\Core\Utility\Token $token */
+    /** @var Token $token */
     $token = $container->get('token');
-    /** @var \Drupal\Core\Template\TwigEnvironment $twig */
+    /** @var TwigEnvironment $twig */
     $twig = $container->get('twig');
     return new static(
       $block_plugin_manager,
@@ -159,29 +168,29 @@ class PatternkitBlock extends BlockBase implements ContainerFactoryPluginInterfa
    *
    * Adds services to allow Patternkit to load and display library patterns.
    *
-   * @param \Drupal\Core\Block\BlockManagerInterface $block_manager
+   * @param BlockManagerInterface $block_manager
    *   Block manager service.
    * @param array $configuration
    *   Default configuration for the block plugin instance.
-   * @param \Drupal\Core\Plugin\Context\ContextHandlerInterface $context_handler
+   * @param ContextHandlerInterface $context_handler
    *   The ContextHandler allows mapping provided contexts to definitions.
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $context_repository
+   * @param ContextRepositoryInterface $context_repository
    *   The repository of available contexts for the current route.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
-   * @param \Drupal\patternkit\Asset\LibraryInterface $library
+   * @param LibraryInterface $library
    *   Pattern discovery service.
-   * @param \Drupal\patternkit\PatternLibraryPluginManager $pattern_plugin_manager
+   * @param PatternLibraryPluginManager $pattern_plugin_manager
    *   Pattern library plugin manager service.
    * @param string $plugin_id
    *   Plugin ID.
    * @param array $plugin_definition
    *   Plugin definition.
-   * @param \Drupal\Component\Serialization\SerializationInterface $serializer
+   * @param SerializationInterface $serializer
    *   Serialization service.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   Token service.
-   * @param \Drupal\Core\Template\TwigEnvironment $twig
+   * @param TwigEnvironment $twig
    *   The Twig rendering environment wrapper.
    */
   public function __construct(
@@ -232,10 +241,10 @@ class PatternkitBlock extends BlockBase implements ContainerFactoryPluginInterfa
    *
    * @param array $form
    *   PatternkitBlock form Drupal render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The relevant Drupal FormState for the form render array.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   An AJAX response to update the current pattern based on the form.
    */
   public function ajaxUpdatePattern(array &$form, FormStateInterface $form_state): AjaxResponse {
@@ -249,14 +258,14 @@ class PatternkitBlock extends BlockBase implements ContainerFactoryPluginInterfa
    *
    * {@inheritDoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function blockForm($form, FormStateInterface $form_state): array {
     $form += parent::blockForm($form, $form_state);
 
     $configuration = $this->getConfiguration();
     $plugin = $this->getPluginDefinition();
-    /** @var \Drupal\patternkit\entity\PatternInterface $pattern */
+    /** @var PatternInterface $pattern */
     try {
       $pattern = $form_state->get('pattern');
     }
@@ -279,7 +288,7 @@ class PatternkitBlock extends BlockBase implements ContainerFactoryPluginInterfa
 
     $form_state->set('pattern', $pattern);
 
-    /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $block_storage */
+    /** @var ContentEntityStorageInterface $block_storage */
     $block_storage = $this->entityTypeManager->getStorage('patternkit_block');
     if (isset($configuration['patternkit_block_id'])
       && (int) $configuration['patternkit_block_id'] > 0) {
@@ -336,7 +345,7 @@ class PatternkitBlock extends BlockBase implements ContainerFactoryPluginInterfa
       }
     }
     catch (\Exception $exception) {
-      /** @var \Drupal\Core\Logger\LoggerChannelInterface $logger */
+      /** @var LoggerChannelInterface $logger */
       $logger = \Drupal::service('logger.channel.patternkit');
       $logger->info($this->t('Unable to show update UI for pattern in filesystem: @id', ['@id' => $pattern_id]));
     }
@@ -398,7 +407,7 @@ class PatternkitBlock extends BlockBase implements ContainerFactoryPluginInterfa
 
     $form['configuration_description']['#markup'] = $this->t('Provide context for your pattern. You can use tokens and Twig in your values.');
 
-    /** @var \Drupal\patternkit\PatternLibraryPluginInterface $library */
+    /** @var PatternLibraryPluginInterface $library */
     $library = $this->patternLibraryPluginManager->createInstance($pattern->getLibraryPluginId());
     $editor = $library->getEditor($pattern, $editor_config);
     if (!is_array($editor)) {
@@ -421,17 +430,17 @@ class PatternkitBlock extends BlockBase implements ContainerFactoryPluginInterfa
    *
    * @param array $form
    *   The form definition array for the full block configuration form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @see \Drupal\Core\Block\BlockPluginInterface::blockForm()
    * @see \Drupal\Core\Block\BlockPluginInterface::blockValidate()
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Thrown if the entity type doesn't exist.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown if the storage handler couldn't be loaded.
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   In case of failures an exception is thrown.
    */
   public function blockSubmit($form, FormStateInterface $form_state) {
@@ -439,7 +448,7 @@ class PatternkitBlock extends BlockBase implements ContainerFactoryPluginInterfa
     $configuration = $this->getConfiguration();
     $pattern_id = \Drupal\patternkit\Plugin\Derivative\PatternkitBlock::derivativeToAssetId($this->getDerivativeId());
 
-    /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $block_storage */
+    /** @var ContentEntityStorageInterface $block_storage */
     $block_storage = $this->entityTypeManager->getStorage('patternkit_block');
     $values = [
       'data' => $form_state->getValue('instance_config'),
@@ -469,15 +478,15 @@ class PatternkitBlock extends BlockBase implements ContainerFactoryPluginInterfa
     $patternkit_block->isDefaultRevision(TRUE);
     $patternkit_block->save();
 
-    /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $pattern_storage */
+    /** @var ContentEntityStorageInterface $pattern_storage */
     $pattern_storage = $this->entityTypeManager->getStorage('patternkit_pattern');
-    /** @var \Drupal\patternkit\entity\PatternInterface $pattern */
+    /** @var PatternInterface $pattern */
     $pattern = $form_state->get('pattern') ?? Pattern::create($this->library->getLibraryAsset($pattern_id));
     $pattern_cache = $pattern_storage->loadByProperties([
       'library' => $pattern->getLibrary(),
       'path' => $pattern->getPath(),
     ]);
-    /** @var \Drupal\patternkit\entity\PatternInterface|null $pattern_loaded */
+    /** @var PatternInterface|null $pattern_loaded */
     $pattern_loaded = $pattern_cache ? end($pattern_cache) : NULL;
     if ($pattern_loaded !== NULL) {
       if ($pattern_loaded->getHash() !== $pattern->getHash()) {
@@ -517,7 +526,7 @@ class PatternkitBlock extends BlockBase implements ContainerFactoryPluginInterfa
    *
    * @param array $form
    *   Drupal PatternkitBlock form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Relevant Drupal Form state.
    */
   public function blockValidate($form, FormStateInterface $form_state) {
@@ -540,7 +549,7 @@ class PatternkitBlock extends BlockBase implements ContainerFactoryPluginInterfa
   /**
    * Build the content for PatternKit block.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
    */
   public function build() {
@@ -567,7 +576,7 @@ class PatternkitBlock extends BlockBase implements ContainerFactoryPluginInterfa
     $instance_id = $configuration['instance_uuid'] ?? $pattern_id;
 
     // Load module specific config.
-    /** @var \Drupal\patternkit\entity\PatternInterface $pattern */
+    /** @var PatternInterface $pattern */
     if (!empty($configuration['pattern'])) {
       $pattern_storage = $this->entityTypeManager->getStorage('patternkit_pattern');
       $pattern = $pattern_storage->loadRevision($configuration['pattern']);
@@ -643,7 +652,7 @@ class PatternkitBlock extends BlockBase implements ContainerFactoryPluginInterfa
     // @todo Revisit twig default hard-coding.
     $pattern_plugin = $pattern->getLibraryPluginId();
     $library_plugin_id = !empty($pattern_plugin) ? $pattern_plugin : 'twig';
-    /** @var \Drupal\patternkit\PatternLibraryPluginInterface $library_plugin */
+    /** @var PatternLibraryPluginInterface $library_plugin */
     $library_plugin = $this->patternLibraryPluginManager->createInstance($library_plugin_id);
     $elements = $library_plugin->render([$pattern]);
 
@@ -749,7 +758,7 @@ class PatternkitBlock extends BlockBase implements ContainerFactoryPluginInterfa
 
   /**
    * @param $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @see \Drupal\views\Plugin\views\PluginBase
    */
diff --git a/src/Plugin/Derivative/PatternkitBlock.php b/src/Plugin/Derivative/PatternkitBlock.php
index d80cd11..2ce9685 100644
--- a/src/Plugin/Derivative/PatternkitBlock.php
+++ b/src/Plugin/Derivative/PatternkitBlock.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\patternkit\Plugin\Derivative;
 
+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -14,28 +19,28 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 
 class PatternkitBlock extends DeriverBase implements ContainerDeriverInterface {
 
-  /** @var \Drupal\Core\Config\ImmutableConfig */
+  /** @var ImmutableConfig */
   protected $config;
 
-  /** @var Psr\Log\LoggerInterface */
+  /** @var LoggerInterface */
   protected $logger;
 
-    /** @var \Drupal\Core\Entity\EntityStorageInterface */
+    /** @var EntityStorageInterface */
   protected $patternkitStorage;
 
-  /** @var \Drupal\patternkit\Asset\LibraryInterface */
+  /** @var LibraryInterface */
   protected $library;
 
   /**
    * Used to populate all of the types of Patternkit blocks based on libraries.
    *
-   * @param \Drupal\Core\Config\ImmutableConfig $config
+   * @param ImmutableConfig $config
    *   Provides patternkit configurable settings.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   Generates and provides log channels.
-   * @param \Drupal\patternkit\Asset\LibraryInterface $library
+   * @param LibraryInterface $library
    *   Provides a list of pattern libraries with metadata.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   Loads and saves entities to storage.
    */
   public function __construct(
@@ -52,20 +57,20 @@ class PatternkitBlock extends DeriverBase implements ContainerDeriverInterface {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Thrown if the entity type doesn't exist.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown if the storage handler couldn't be loaded.
    */
   public static function create(ContainerInterface $container, $base_plugin_id): PatternkitBlock {
-    /** @var \Drupal\Core\Config\ConfigFactoryInterface $config_factory */
+    /** @var ConfigFactoryInterface $config_factory */
     $config_factory = $container->get('config.factory');
     $config = $config_factory->get(PatternkitSettingsForm::SETTINGS);
-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager */
+    /** @var EntityTypeManagerInterface $entity_manager */
     $entity_manager = $container->get('entity_type.manager');
-    /** @var \Drupal\Core\Logger\LoggerChannelInterface $logger */
+    /** @var LoggerChannelInterface $logger */
     $logger = $container->get('logger.channel.patternkit');
-    /** @var \Drupal\patternkit\Asset\LibraryInterface $library */
+    /** @var LibraryInterface $library */
     $library = $container->get('patternkit.asset.library');
     return new static(
       $config,
diff --git a/src/Plugin/PatternLibrary/PatternLibraryFile.php b/src/Plugin/PatternLibrary/PatternLibraryFile.php
index b8c6b0b..5c8dd8a 100644
--- a/src/Plugin/PatternLibrary/PatternLibraryFile.php
+++ b/src/Plugin/PatternLibrary/PatternLibraryFile.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\patternkit\Plugin\PatternLibrary;
 
+use Drupal\Core\Template\TwigEnvironment;
+use Twig\Loader\FilesystemLoader;
+use Drupal\patternkit\Asset\PatternLibraryParser\FilePatternLibraryParser;
+use Drupal\patternkit\Asset\PatternLibraryParserInterface;
+use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\patternkit\Entity\PatternInterface;
 use Drupal\patternkit\PatternEditorConfig;
@@ -21,21 +26,21 @@ class PatternLibraryFile extends PatternLibraryPluginDefault implements Containe
   /**
    * Twig environment service.
    *
-   * @var \Drupal\Core\Template\TwigEnvironment
+   * @var TwigEnvironment
    */
   protected $twig;
 
   /**
    * Twig file loader.
    *
-   * @var \Twig\Loader\FilesystemLoader
+   * @var FilesystemLoader
    */
   protected $twigLoader;
 
   /**
    * File pattern library parser service.
    *
-   * @var \Drupal\patternkit\Asset\PatternLibraryParser\FilePatternLibraryParser
+   * @var FilePatternLibraryParser
    */
   protected $fileParser;
 
@@ -46,9 +51,9 @@ class PatternLibraryFile extends PatternLibraryPluginDefault implements Containe
    */
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition): PatternLibraryPluginInterface {
     $root = $container->get('app.root');
-    /** @var \Drupal\patternkit\Asset\PatternLibraryParserInterface $file_parser */
+    /** @var PatternLibraryParserInterface $file_parser */
     $file_parser = $container->get('patternkit.asset.library.parser.file');
-    /** @var \Drupal\Core\Config\ConfigFactoryInterface $config_factory */
+    /** @var ConfigFactoryInterface $config_factory */
     $config_factory = $container->get('config.factory');
     return new static($root, $file_parser, $config_factory, $configuration, $plugin_id, $plugin_definition);
   }
@@ -57,7 +62,7 @@ class PatternLibraryFile extends PatternLibraryPluginDefault implements Containe
    * Returns the editor for the generic file plugin.
    *
    * @param \Drupal\patternkit\entity\PatternInterface|null $pattern
-   * @param \Drupal\patternkit\PatternEditorConfig|null $config
+   * @param PatternEditorConfig|null $config
    *
    * @return mixed|void
    *   An editor render array or nothing if not present.
@@ -96,7 +101,7 @@ class PatternLibraryFile extends PatternLibraryPluginDefault implements Containe
         [$namespace, $file] = explode('#', $template);
       }
       $bare       = basename($file);
-      /** @var \Drupal\Core\Template\TwigEnvironment $twig */
+      /** @var TwigEnvironment $twig */
       $twig       = \Drupal::service('twig');
       $template   = $twig->load("$namespace/$pattern->filename");
       $elements[] = $template->render($pattern->config ?? []);
diff --git a/src/Plugin/PatternLibrary/PatternLibraryJSON.php b/src/Plugin/PatternLibrary/PatternLibraryJSON.php
index 6211bce..568c017 100644
--- a/src/Plugin/PatternLibrary/PatternLibraryJSON.php
+++ b/src/Plugin/PatternLibrary/PatternLibraryJSON.php
@@ -30,13 +30,13 @@ class PatternLibraryJSON extends PatternLibraryPluginDefault implements Containe
    * @param string $root
    *   The application root path.
    *   e.g. '/var/www/docroot'.
-   * @param \Drupal\Component\Serialization\SerializationInterface $serializer
+   * @param SerializationInterface $serializer
    *   Serialization service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   Static state of the application.
-   * @param \Drupal\patternkit\Asset\PatternLibraryParserInterface $parser
+   * @param PatternLibraryParserInterface $parser
    *   Pattern library parser service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Extension config retrieval.
    * @param array $configuration
    *   Config.
@@ -67,13 +67,13 @@ class PatternLibraryJSON extends PatternLibraryPluginDefault implements Containe
    */
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition): PatternLibraryPluginInterface {
     $root = $container->get('app.root');
-    /** @var \Drupal\Component\Serialization\SerializationInterface $serializer */
+    /** @var SerializationInterface $serializer */
     $serializer = $container->get('serialization.json');
-    /** @var \Drupal\Core\State\StateInterface $state */
+    /** @var StateInterface $state */
     $state = $container->get('state');
-    /** @var \Drupal\patternkit\Asset\PatternLibraryParserInterface $json_parser */
+    /** @var PatternLibraryParserInterface $json_parser */
     $json_parser = $container->get('patternkit.asset.library.parser.json');
-    /** @var \Drupal\Core\Config\ConfigFactoryInterface $config_factory */
+    /** @var ConfigFactoryInterface $config_factory */
     $config_factory = $container->get('config.factory');
     return new static($root, $serializer, $state, $json_parser, $config_factory, $configuration, $plugin_id, $plugin_definition);
   }
diff --git a/src/Plugin/PatternLibrary/PatternLibraryREST.php b/src/Plugin/PatternLibrary/PatternLibraryREST.php
index 8d8ad24..7cb2cb9 100644
--- a/src/Plugin/PatternLibrary/PatternLibraryREST.php
+++ b/src/Plugin/PatternLibrary/PatternLibraryREST.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\patternkit\Plugin\PatternLibrary;
 
+use Drupal\patternkit\Asset\PatternLibraryParserInterface;
+use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Extension\Extension;
 use Drupal\Core\State\StateInterface;
 use Drupal\patternkit\Entity\PatternInterface;
@@ -21,7 +23,7 @@ class PatternLibraryREST extends PatternLibraryPluginDefault {
   /**
    * The state key/value store.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
@@ -31,9 +33,9 @@ class PatternLibraryREST extends PatternLibraryPluginDefault {
    * @param string $root
    *   The application root path.
    *   e.g. '/var/www/docroot'.
-   * @param \Drupal\patternkit\Asset\PatternLibraryParserInterface $parser
+   * @param PatternLibraryParserInterface $parser
    *   Pattern library parser service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Extension config retrieval.
    * @param array $configuration
    *   Plugin config.
@@ -41,7 +43,7 @@ class PatternLibraryREST extends PatternLibraryPluginDefault {
    *   Plugin ID.
    * @param mixed $plugin_definition
    *   Plugin Definition.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state key/value store.
    */
   public function __construct($root, $parser, $config_factory, array $configuration, $plugin_id, $plugin_definition, StateInterface $state) {
diff --git a/src/Plugin/PatternLibrary/PatternLibraryTwig.php b/src/Plugin/PatternLibrary/PatternLibraryTwig.php
index 8ff870c..789be3d 100644
--- a/src/Plugin/PatternLibrary/PatternLibraryTwig.php
+++ b/src/Plugin/PatternLibrary/PatternLibraryTwig.php
@@ -2,6 +2,14 @@
 
 namespace Drupal\patternkit\Plugin\PatternLibrary;
 
+use Drupal\Core\Template\TwigEnvironment;
+use Twig\Loader\FilesystemLoader;
+use Drupal\patternkit\Asset\PatternLibraryParser\TwigPatternLibraryParser;
+use Drupal\Component\Serialization\SerializationInterface;
+use Drupal\Core\State\StateInterface;
+use Drupal\patternkit\Asset\PatternLibraryParserInterface;
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\patternkit\Entity\Pattern;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\patternkit\Entity\PatternInterface;
@@ -23,21 +31,21 @@ class PatternLibraryTwig extends PatternLibraryJSON {
   /**
    * Twig environment service.
    *
-   * @var \Drupal\Core\Template\TwigEnvironment
+   * @var TwigEnvironment
    */
   protected $twig;
 
   /**
    * Twig file loader.
    *
-   * @var \Twig\Loader\FilesystemLoader
+   * @var FilesystemLoader
    */
   protected $twigLoader;
 
   /**
    * Twig pattern library parser service.
    *
-   * @var \Drupal\patternkit\Asset\PatternLibraryParser\TwigPatternLibraryParser
+   * @var TwigPatternLibraryParser
    */
   protected $twigParser;
 
@@ -48,13 +56,13 @@ class PatternLibraryTwig extends PatternLibraryJSON {
    */
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition): PatternLibraryPluginInterface {
     $root = $container->get('app.root');
-    /** @var \Drupal\Component\Serialization\SerializationInterface $serializer */
+    /** @var SerializationInterface $serializer */
     $serializer = $container->get('serialization.json');
-    /** @var \Drupal\Core\State\StateInterface $state */
+    /** @var StateInterface $state */
     $state = $container->get('state');
-    /** @var \Drupal\patternkit\Asset\PatternLibraryParserInterface $twig_parser */
+    /** @var PatternLibraryParserInterface $twig_parser */
     $twig_parser = $container->get('patternkit.asset.library.parser.twig');
-    /** @var \Drupal\Core\Config\ConfigFactoryInterface $config_factory */
+    /** @var ConfigFactoryInterface $config_factory */
     $config_factory = $container->get('config.factory');
     return new static($root, $serializer, $state, $twig_parser, $config_factory, $configuration, $plugin_id, $plugin_definition);
   }
@@ -80,7 +88,7 @@ class PatternLibraryTwig extends PatternLibraryJSON {
       $this->twig = \Drupal::service('twig');
     }
     $elements = [];
-    /** @var \Drupal\patternkit\Entity\Pattern $pattern */
+    /** @var Pattern $pattern */
     foreach ($assets as $pattern) {
       $template = $pattern->getTemplate();
       if (empty($template)) {
diff --git a/src/StreamWrapper/LibraryStream.php b/src/StreamWrapper/LibraryStream.php
index 74d337a..7a12e6f 100644
--- a/src/StreamWrapper/LibraryStream.php
+++ b/src/StreamWrapper/LibraryStream.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\patternkit\StreamWrapper;
 
+use Drupal\Core\Asset\AssetResolverInterface;
 use Drupal\Core\Asset\AttachedAssets;
 use Drupal\Core\StreamWrapper\PublicStream;
 
@@ -27,7 +28,7 @@ class LibraryStream extends PublicStream {
     // Remove erroneous leading or trailing, forward-slashes and backslashes.
     $uri = trim($path, '\/');
 
-    /** @var \Drupal\Core\Asset\AssetResolverInterface $asset_resolver */
+    /** @var AssetResolverInterface $asset_resolver */
     $asset_resolver = \Drupal::service('asset.resolver');
     [$extension, $library, $type_level] = explode('/', $uri);
     // @todo Allow retrieving specific filenames and css levels.
diff --git a/tests/src/Functional/PatternkitTest.php b/tests/src/Functional/PatternkitTest.php
index 7eee77b..451f408 100644
--- a/tests/src/Functional/PatternkitTest.php
+++ b/tests/src/Functional/PatternkitTest.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\Tests\patternkit\Functional;
 
+use Behat\Mink\Exception\ExpectationException;
+use Behat\Mink\Exception\ResponseTextException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\ContentEntityStorageInterface;
+use Drupal\patternkit\Entity\PatternInterface;
 use Drupal\patternkit\Entity\Pattern;
 use Drupal\patternkit\Plugin\Derivative\PatternkitBlock;
 use Drupal\Tests\BrowserTestBase;
@@ -37,9 +42,9 @@ class PatternkitTest extends BrowserTestBase {
   /**
    * Verify that the toolbar tab and tray are showing and functioning.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Behat\Mink\Exception\ResponseTextException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws ResponseTextException
+   * @throws EntityStorageException
    */
   public function testPatternkitExampleBlock() {
     // @todo Remove this when
@@ -53,16 +58,16 @@ class PatternkitTest extends BrowserTestBase {
       'published' => TRUE,
     ]);
     $patternkit_block->save();
-    /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $pattern_storage */
+    /** @var ContentEntityStorageInterface $pattern_storage */
     $pattern_storage = \Drupal::entityTypeManager()->getStorage('patternkit_pattern');
     $pattern_id = PatternkitBlock::derivativeToAssetId('patternkit_atoms_example_src_example');
-    /** @var \Drupal\patternkit\Entity\PatternInterface $pattern */
+    /** @var PatternInterface $pattern */
     $pattern = Pattern::create(\Drupal::service('patternkit.asset.library')->getLibraryAsset($pattern_id));
     $pattern_cache = $pattern_storage->loadByProperties([
       'library' => $pattern->getLibrary(),
       'path' => $pattern->getPath(),
     ]);
-    /** @var \Drupal\patternkit\Entity\PatternInterface $pattern_loaded */
+    /** @var PatternInterface $pattern_loaded */
     $pattern_loaded = end($pattern_cache);
     if (!empty($pattern_loaded)) {
       if ($pattern_loaded->getHash() !== $pattern->getHash()) {
