diff --git a/src/Controller/KanbanController.php b/src/Controller/KanbanController.php
index 8b71556..062da3c 100644
--- a/src/Controller/KanbanController.php
+++ b/src/Controller/KanbanController.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\views_kanban\Controller;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Url;
 use Drupal\views\Views;
 use Drupal\workflows\State;
@@ -26,12 +30,12 @@ class KanbanController extends ControllerBase {
    * @param string $state_value
    *   State value.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   Return json.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function updateState($view_id, $display_id, $entity_id = 0, $state_value = '') {
     $message = NULL;
@@ -160,8 +164,8 @@ class KanbanController extends ControllerBase {
    * @return array
    *   Allow values.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getAllowedValues($entity, $fieldName) {
     $extractStatus = explode(':', $fieldName);
@@ -204,11 +208,11 @@ class KanbanController extends ControllerBase {
    * @param string $newStatus
    *   New status.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Array text history status.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getHistoryMessage($entity, $status_field, $newStatus) {
     $statusName = $this->getStatusName($entity, $status_field, $newStatus);
diff --git a/src/Event/KanbanNodeInsertEvent.php b/src/Event/KanbanNodeInsertEvent.php
index f2f15b9..de4d53f 100644
--- a/src/Event/KanbanNodeInsertEvent.php
+++ b/src/Event/KanbanNodeInsertEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\views_kanban\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\EntityInterface;
 
 /**
@@ -15,14 +15,14 @@ class KanbanNodeInsertEvent extends Event {
   /**
    * Node entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;
 
   /**
    * Constructs a node insertion demo event object.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity.
    */
   public function __construct(EntityInterface $entity) {
@@ -32,7 +32,7 @@ class KanbanNodeInsertEvent extends Event {
   /**
    * Get the inserted entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   Return Entity.
    */
   public function getEntity() {
diff --git a/src/EventSubscriber/KanbanNodeInsertSubscriber.php b/src/EventSubscriber/KanbanNodeInsertSubscriber.php
index e6d7c13..ae73330 100644
--- a/src/EventSubscriber/KanbanNodeInsertSubscriber.php
+++ b/src/EventSubscriber/KanbanNodeInsertSubscriber.php
@@ -13,7 +13,7 @@ class KanbanNodeInsertSubscriber implements EventSubscriberInterface {
   /**
    * Log the creation of a new node.
    *
-   * @param \Drupal\views_kanban\Event\KanbanNodeInsertEvent $event
+   * @param KanbanNodeInsertEvent $event
    *   Event.
    */
   public function onKanbanNodeInsert(KanbanNodeInsertEvent $event) {
diff --git a/views_kanban.module b/views_kanban.module
index df8a37d..9e8e5d0 100644
--- a/views_kanban.module
+++ b/views_kanban.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\EntityInterface;
 /**
  * @file
  * Kanban Views module help and theme functions.
@@ -36,10 +37,10 @@ function views_kanban_theme($existing, $type, $theme, $path) {
 
 /**
  * Subscriber event.
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   Entity.
  */
-function event_subscriber_kanban_node_insert(Drupal\Core\Entity\EntityInterface $entity) {
+function event_subscriber_kanban_node_insert(EntityInterface $entity) {
   // Dispatch the node insert kanban event so that subscribers can act accordingly.
   \Drupal::service('event_dispatcher')
     ->dispatch(KanbanNodeInsertEvent::KANBAN_NODE_INSERT, new KanbanNodeInsertEvent($entity));
diff --git a/views_kanban.theme.inc b/views_kanban.theme.inc
index c5d5d1a..1e29cfb 100644
--- a/views_kanban.theme.inc
+++ b/views_kanban.theme.inc
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\workflow\Entity\WorkflowState;
 /**
  * @file
  * Theme for Kanban views.
@@ -101,7 +102,7 @@ function template_preprocess_views_view_kanban(array &$variables) {
     $field_type = $status_field->getFieldDefinition()->getType();
     if ($field_type == 'workflow' && !empty($field_status_settings['workflow_type'])) {
       $workflow_type = $field_status_settings['workflow_type'];
-      $states = \Drupal\workflow\Entity\WorkflowState::loadMultiple([], $workflow_type);
+      $states = WorkflowState::loadMultiple([], $workflow_type);
       $status_values = [];
       foreach ($states as $state) {
         if ($state->isActive() && strpos($state->id(), 'creation') === FALSE) {
@@ -269,7 +270,7 @@ function template_preprocess_views_view_kanban(array &$variables) {
             ->generateAbsoluteString($thumbnailAvatar);
         }
         else {
-          $assign['avatar'] = file_create_url($thumbnailAvatar);
+          $assign['avatar'] = \Drupal::service('file_url_generator')->generateAbsoluteString($thumbnailAvatar);
         }
       }
       $variables['rows'][$id]['assign'][] = $assign;
