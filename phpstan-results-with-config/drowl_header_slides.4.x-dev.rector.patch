diff --git a/drowl_header_slides.install b/drowl_header_slides.install
index 6240ad1..746709e 100644
--- a/drowl_header_slides.install
+++ b/drowl_header_slides.install
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\views\Entity\View;
+use Symfony\Component\Yaml\Yaml;
 /**
  * Set main menu as default source in settings.
  */
@@ -40,7 +42,7 @@ function drowl_header_slides_update_8003(&$sandbox) {
   $message = '';
   $old_view_id = 'admin_media_slideshow_overview';
   // Only delete the old view, if it is existing.
-  if (\Drupal::moduleHandler()->moduleExists('views') && \Drupal\views\Entity\View::load($old_view_id)) {
+  if (\Drupal::moduleHandler()->moduleExists('views') && View::load($old_view_id)) {
     // Delete the old view
     $oldViewConfig = \Drupal::service('config.factory')->getEditable('views.view.' . $old_view_id);
     $oldViewConfig->delete();
@@ -53,9 +55,9 @@ function drowl_header_slides_update_8003(&$sandbox) {
 
   // Only create if the new view doesn't exist and views is enabled.
   $new_view_id = 'drowl_header_slides_admin_media_slideshow';
-  if (\Drupal::moduleHandler()->moduleExists('views') && !\Drupal\views\Entity\View::load($new_view_id)) {
+  if (\Drupal::moduleHandler()->moduleExists('views') && !View::load($new_view_id)) {
     $config_path = \Drupal::service('extension.list.module')->getPath('drowl_header_slides') . '/config/install/views.view.' . $new_view_id .'.yml';
-    $data = \Symfony\Component\Yaml\Yaml::parseFile($config_path);
+    $data = Yaml::parseFile($config_path);
     \Drupal::configFactory()->getEditable('views.view.' . $new_view_id)->setData($data)->save(TRUE);
     $message .= 'The new "' . $new_view_id . '" view has been created.';
   }
diff --git a/src/Plugin/Block/MenuSlideshowRefSlidesBlock.php b/src/Plugin/Block/MenuSlideshowRefSlidesBlock.php
index 1cf3225..6524378 100644
--- a/src/Plugin/Block/MenuSlideshowRefSlidesBlock.php
+++ b/src/Plugin/Block/MenuSlideshowRefSlidesBlock.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\drowl_header_slides\Plugin\Block;
 
+use Drupal\menu_link_content\MenuLinkContentInterface;
+use Drupal\menu_link_content\Entity\MenuLinkContent;
 use \Drupal\Core\Block\BlockBase;
 use \Drupal\Core\Cache\Cache;
 
@@ -49,10 +51,10 @@ class MenuSlideshowRefSlidesBlock extends BlockBase
   /**
    * Returns the Media slideshow entity from the given menu link
    *
-   * @param \Drupal\menu_link_content\MenuLinkContentInterface $menuActiveLinkEntity
+   * @param MenuLinkContentInterface $menuActiveLinkEntity
    * @return \Drupal\media_entity\Entity\Media
    */
-  protected function determineMenuLinkMediaSlideshowEntity(\Drupal\menu_link_content\Entity\MenuLinkContent $menuLinkEntity = null)
+  protected function determineMenuLinkMediaSlideshowEntity(MenuLinkContent $menuLinkEntity = null)
   {
     if (empty($menuLinkEntity)) {
       return null;
@@ -73,10 +75,10 @@ class MenuSlideshowRefSlidesBlock extends BlockBase
   /**
    * Returns the parent menu item from the given $menuLinkEntity
    *
-   * @param \Drupal\menu_link_content\MenuLinkContentInterface $menuLinkEntity
-   * @return \Drupal\menu_link_content\MenuLinkContentInterface
+   * @param MenuLinkContentInterface $menuLinkEntity
+   * @return MenuLinkContentInterface
    */
-  protected function determineParentMenuLink(\Drupal\menu_link_content\Entity\MenuLinkContent $menuLinkEntity = null)
+  protected function determineParentMenuLink(MenuLinkContent $menuLinkEntity = null)
   {
     if (empty($menuLinkEntity)) {
       return null;
@@ -124,7 +126,7 @@ class MenuSlideshowRefSlidesBlock extends BlockBase
   /**
    * Returns the currently active MenuLinkContent entity.
    *
-   * @return \Drupal\menu_link_content\MenuLinkContentInterface
+   * @return MenuLinkContentInterface
    */
   protected function determineActiveTrailMenuLinkEntity()
   {
