diff --git a/modules/select2_facets/src/Controller/FacetApiAutocompleteController.php b/modules/select2_facets/src/Controller/FacetApiAutocompleteController.php
index 0cbee8a..087e108 100644
--- a/modules/select2_facets/src/Controller/FacetApiAutocompleteController.php
+++ b/modules/select2_facets/src/Controller/FacetApiAutocompleteController.php
@@ -30,28 +30,28 @@ class FacetApiAutocompleteController extends ControllerBase {
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The current path stack.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPathStack;
 
   /**
    * The current router.
    *
-   * @var \Drupal\Core\Routing\AccessAwareRouterInterface
+   * @var AccessAwareRouterInterface
    */
   protected $router;
 
   /**
    * The processor manager.
    *
-   * @var \Drupal\Core\PathProcessor\InboundPathProcessorInterface
+   * @var InboundPathProcessorInterface
    */
   protected $pathProcessor;
 
@@ -91,7 +91,7 @@ class FacetApiAutocompleteController extends ControllerBase {
   /**
    * Set the request stack.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack object.
    */
   protected function setRequestStack(RequestStack $requestStack): void {
@@ -101,7 +101,7 @@ class FacetApiAutocompleteController extends ControllerBase {
   /**
    * Set the current path stack.
    *
-   * @param \Drupal\Core\Path\CurrentPathStack $currentPathStack
+   * @param CurrentPathStack $currentPathStack
    *   Current path stack object.
    */
   protected function setCurrentPathStack(CurrentPathStack $currentPathStack): void {
@@ -111,7 +111,7 @@ class FacetApiAutocompleteController extends ControllerBase {
   /**
    * Set the router.
    *
-   * @param \Drupal\Core\Routing\AccessAwareRouterInterface $router
+   * @param AccessAwareRouterInterface $router
    *   The router object.
    */
   protected function setRouter(AccessAwareRouterInterface $router): void {
@@ -121,7 +121,7 @@ class FacetApiAutocompleteController extends ControllerBase {
   /**
    * Set the path processor service.
    *
-   * @param \Drupal\Core\PathProcessor\InboundPathProcessorInterface $pathProcessor
+   * @param InboundPathProcessorInterface $pathProcessor
    *   The path processor service object.
    */
   protected function setPathProcessor(InboundPathProcessorInterface $pathProcessor): void {
@@ -131,7 +131,7 @@ class FacetApiAutocompleteController extends ControllerBase {
   /**
    * Autocomplete the label of an entity.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object that contains the typed tags.
    * @param string $facetsource_id
    *   The ID of the facet source.
@@ -141,10 +141,10 @@ class FacetApiAutocompleteController extends ControllerBase {
    *   The hashed key of the key/value entry that holds the selection handler
    *   settings.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The matched entity labels as a JSON response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException
+   * @throws AccessDeniedHttpException
    *   Thrown if the selection settings key is not found in the key/value store
    *   or if it does not match the stored data.
    * @throws \Drupal\facets\Exception\InvalidProcessorException
@@ -205,7 +205,7 @@ class FacetApiAutocompleteController extends ControllerBase {
    * @param string $path
    *   A path with facet arguments.
    *
-   * @return \Symfony\Component\HttpFoundation\Request
+   * @return Request
    *   A new request object.
    */
   protected function createRequestFromPath(string $path): Request {
@@ -219,7 +219,7 @@ class FacetApiAutocompleteController extends ControllerBase {
   /**
    * Resets the request stack and adds one request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The one and only request.
    */
   protected function overwriteRequestStack(Request $request): void {
diff --git a/modules/select2_publish/select2_publish.module b/modules/select2_publish/select2_publish.module
index ebc648f..94f05c4 100644
--- a/modules/select2_publish/select2_publish.module
+++ b/modules/select2_publish/select2_publish.module
@@ -29,7 +29,7 @@ function select2_publish_select2_autocomplete_matches_alter(array &$matches, arr
   }
 
   $entities = $entity_manager->getStorage($options['target_type'])->loadMultiple(array_keys($matches));
-  /** @var \Drupal\Core\Entity\EntityPublishedInterface $entity */
+  /** @var EntityPublishedInterface $entity */
   foreach ($entities as $id => $entity) {
     $matches[$id]['published'] = $entity->isPublished();
   }
diff --git a/modules/select2_publish/src/Element/StatusProperties.php b/modules/select2_publish/src/Element/StatusProperties.php
index 2c53cf2..3afaf0a 100644
--- a/modules/select2_publish/src/Element/StatusProperties.php
+++ b/modules/select2_publish/src/Element/StatusProperties.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\select2_publish\Element;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityPublishedInterface;
 use Drupal\Core\Security\TrustedCallbackInterface;
 
@@ -26,8 +28,8 @@ class StatusProperties implements TrustedCallbackInterface {
    * @return array
    *   The select2 render element.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public static function preRender(array $element): array {
     if ($element['#target_type']) {
@@ -39,14 +41,14 @@ class StatusProperties implements TrustedCallbackInterface {
       }
 
       $entity_storage = $entity_manager->getStorage($element['#target_type']);
-      /** @var \Drupal\Core\Entity\EntityPublishedInterface $entity */
+      /** @var EntityPublishedInterface $entity */
       foreach ($entity_storage->loadMultiple(array_keys($element['#options'])) as $id => $entity) {
         $element['#options_attributes'][$id]['data-published'] = $entity->isPublished() ? 'true' : 'false';
       }
 
       $default_status = 'true';
       if ($element['#autocreate']) {
-        /** @var \Drupal\Core\Entity\EntityPublishedInterface $entity */
+        /** @var EntityPublishedInterface $entity */
         $entity = $entity_storage->create([$entity_definition->getKey('bundle') => $element['#autocreate']['bundle']]);
         $default_status = $entity->isPublished() ? 'true' : 'false';
       }
diff --git a/src/Controller/EntityAutocompleteController.php b/src/Controller/EntityAutocompleteController.php
index 6dc172d..be1bef8 100644
--- a/src/Controller/EntityAutocompleteController.php
+++ b/src/Controller/EntityAutocompleteController.php
@@ -19,7 +19,7 @@ class EntityAutocompleteController extends ControllerBase {
   /**
    * The autocomplete matcher for entity references.
    *
-   * @var \Drupal\select2\EntityAutocompleteMatcher
+   * @var EntityAutocompleteMatcher
    */
   protected $matcher;
 
@@ -37,7 +37,7 @@ class EntityAutocompleteController extends ControllerBase {
   /**
    * Set the entity autocomplete matcher.
    *
-   * @param \Drupal\select2\EntityAutocompleteMatcher $matcher
+   * @param EntityAutocompleteMatcher $matcher
    *   The autocomplete matcher for entity references.
    */
   protected function setMatcher(EntityAutocompleteMatcher $matcher): void {
@@ -47,7 +47,7 @@ class EntityAutocompleteController extends ControllerBase {
   /**
    * Autocomplete the label of an entity.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object that contains the typed tags.
    * @param string $target_type
    *   The ID of the target entity type.
@@ -57,10 +57,10 @@ class EntityAutocompleteController extends ControllerBase {
    *   The hashed key of the key/value entry that holds the selection handler
    *   settings.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The matched entity labels as a JSON response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException
+   * @throws AccessDeniedHttpException
    *   Thrown if the selection settings key is not found in the key/value store
    *   or if it does not match the stored data.
    */
diff --git a/src/Element/Select2.php b/src/Element/Select2.php
index 8fb2af8..e0f3b2b 100644
--- a/src/Element/Select2.php
+++ b/src/Element/Select2.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\select2\Element;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Access\AccessManagerInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Entity\Element\EntityAutocomplete;
 use Drupal\Core\Form\FormState;
@@ -140,7 +143,7 @@ class Select2 extends Select {
    *
    * @param array $element
    *   The render element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    * @param array $complete_form
    *   The form array.
@@ -218,14 +221,14 @@ class Select2 extends Select {
    *
    * @param array $element
    *   The render element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array
    *   Key => entity ID, Value => entity label.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected static function getValidSelectedOptions(array $element, FormStateInterface $form_state): array {
     $handler_settings = $element['#selection_settings'] + [
@@ -323,7 +326,7 @@ class Select2 extends Select {
       }
     }
 
-    /** @var \Drupal\Core\Access\AccessManagerInterface $access_manager */
+    /** @var AccessManagerInterface $access_manager */
     $access_manager = \Drupal::service('access_manager');
     $access = $access_manager->checkNamedRoute($element['#autocomplete_route_name'], $element['#autocomplete_route_parameters'], \Drupal::currentUser(), TRUE);
 
diff --git a/src/EntityAutocompleteMatcher.php b/src/EntityAutocompleteMatcher.php
index 954b024..111a074 100644
--- a/src/EntityAutocompleteMatcher.php
+++ b/src/EntityAutocompleteMatcher.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\select2;
 
+use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
+use Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -14,23 +16,23 @@ class EntityAutocompleteMatcher {
   /**
    * The entity reference selection handler plugin manager.
    *
-   * @var \Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManagerInterface
+   * @var SelectionPluginManagerInterface
    */
   protected $selectionManager;
 
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Constructs a EntityAutocompleteMatcher object.
    *
-   * @param \Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManagerInterface $selection_manager
+   * @param SelectionPluginManagerInterface $selection_manager
    *   The entity reference selection handler plugin manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
    */
   public function __construct(SelectionPluginManagerInterface $selection_manager, ModuleHandlerInterface $module_handler) {
@@ -56,7 +58,7 @@ class EntityAutocompleteMatcher {
    *   An array of matched entity labels, in the format required by the AJAX
    *   autocomplete API (e.g. array('value' => $value, 'label' => $label)).
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException
+   * @throws AccessDeniedHttpException
    *   Thrown when the current user doesn't have access to the specified entity.
    *
    * @see \Drupal\system\Controller\EntityAutocompleteController
@@ -68,7 +70,7 @@ class EntityAutocompleteMatcher {
       'target_type' => $target_type,
       'handler' => $selection_handler,
     ];
-    /** @var \Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface $handler */
+    /** @var SelectionInterface $handler */
     $handler = $this->selectionManager->getInstance($options);
 
     if ($string) {
diff --git a/src/Plugin/Field/FieldWidget/Select2EntityReferenceWidget.php b/src/Plugin/Field/FieldWidget/Select2EntityReferenceWidget.php
index 0f1c065..1f46847 100644
--- a/src/Plugin/Field/FieldWidget/Select2EntityReferenceWidget.php
+++ b/src/Plugin/Field/FieldWidget/Select2EntityReferenceWidget.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\select2\Plugin\Field\FieldWidget;
 
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface;
 use Drupal\Core\Entity\EntityReferenceSelection\SelectionWithAutocreateInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
@@ -31,7 +33,7 @@ class Select2EntityReferenceWidget extends Select2Widget {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -47,7 +49,7 @@ class Select2EntityReferenceWidget extends Select2Widget {
   /**
    * Set the entity type manager service.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
    */
   protected function setEntityTypeManager(EntityTypeManagerInterface $entityTypeManager): void {
@@ -193,7 +195,7 @@ class Select2EntityReferenceWidget extends Select2Widget {
    * @return array
    *   Selection settings.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   protected function getSelectionSettings(): array {
     $label_field = $this->entityTypeManager->getDefinition($this->getFieldSetting('target_type'))->getKey('label') ?: '_none';
@@ -216,7 +218,7 @@ class Select2EntityReferenceWidget extends Select2Widget {
       'target_type' => $element['#target_type'],
       'handler' => $element['#selection_handler'],
     ];
-    /** @var \Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface $handler */
+    /** @var SelectionInterface $handler */
     $handler = \Drupal::service('plugin.manager.entity_reference_selection')->getInstance($handler_settings);
 
     $options = empty($element['#options']) ? [] : static::getValidReferenceableEntities(array_keys(OptGroup::flattenOptions($element['#options'])), $handler_settings);
@@ -242,7 +244,7 @@ class Select2EntityReferenceWidget extends Select2Widget {
   /**
    * Returns the name of the bundle which will be used for autocreated entities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *
    * @uses \Drupal\Core\Field\Plugin\Field\FieldWidget\EntityReferenceAutocompleteWidget::getAutocreateBundle().
    *   This is copied from core.
diff --git a/src/Select2Trait.php b/src/Select2Trait.php
index 2cf6a21..fc9ecfd 100644
--- a/src/Select2Trait.php
+++ b/src/Select2Trait.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\select2;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface;
 use Drupal\Component\Utility\Html;
 
 /**
@@ -20,12 +23,12 @@ trait Select2Trait {
    * @return array
    *   Key => entity ID, Value => entity label.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected static function getValidReferenceableEntities(array $ids, array $handler_settings) {
     $options = [];
-    /** @var \Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface $selection_handler */
+    /** @var SelectionInterface $selection_handler */
     $selection_handler = \Drupal::service('plugin.manager.entity_reference_selection')->getInstance($handler_settings);
     $valid_ids = $selection_handler->validateReferenceableEntities($ids);
     $entities = \Drupal::entityTypeManager()->getStorage($handler_settings['target_type'])->loadMultiple($valid_ids);
diff --git a/tests/src/FunctionalJavascript/FieldWidget/Select2EntityReferenceWidgetTest.php b/tests/src/FunctionalJavascript/FieldWidget/Select2EntityReferenceWidgetTest.php
index 53281e6..854444d 100644
--- a/tests/src/FunctionalJavascript/FieldWidget/Select2EntityReferenceWidgetTest.php
+++ b/tests/src/FunctionalJavascript/FieldWidget/Select2EntityReferenceWidgetTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\select2\FunctionalJavascript\FieldWidget;
 
+use Drupal\Core\Field\FieldConfigInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Url;
 use Drupal\entity_test\Entity\EntityTestBundle;
@@ -256,7 +257,7 @@ class Select2EntityReferenceWidgetTest extends Select2JavascriptTestBase {
     $this->assertNotEmpty($entity);
     $this->assertSame('test2', $entity->bundle());
 
-    /** @var \Drupal\Core\Field\FieldConfigInterface $field */
+    /** @var FieldConfigInterface $field */
     $field = FieldConfig::loadByName('node', 'test', 'select2');
     $field->setSetting('handler_settings', [
       'target_bundles' => ['test1' => 'test1', 'test2' => 'test2'],
diff --git a/tests/src/FunctionalJavascript/Select2JavascriptTestBase.php b/tests/src/FunctionalJavascript/Select2JavascriptTestBase.php
index 5d1c9df..f870b78 100644
--- a/tests/src/FunctionalJavascript/Select2JavascriptTestBase.php
+++ b/tests/src/FunctionalJavascript/Select2JavascriptTestBase.php
@@ -75,7 +75,7 @@ abstract class Select2JavascriptTestBase extends WebDriverTestBase {
   /**
    * Drag element in document with defined offset position.
    *
-   * @param \Behat\Mink\Element\NodeElement $element
+   * @param NodeElement $element
    *   Element that will be dragged.
    * @param int $offsetX
    *   Vertical offset for element drag in pixels.
diff --git a/tests/src/Traits/Select2TestTrait.php b/tests/src/Traits/Select2TestTrait.php
index db7dab3..a4364ab 100644
--- a/tests/src/Traits/Select2TestTrait.php
+++ b/tests/src/Traits/Select2TestTrait.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\select2\Traits;
 
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 
@@ -30,7 +32,7 @@ trait Select2TestTrait {
    * @param array $widget_settings
    *   A list of widget settings that will be added to the widget defaults.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function createField(string $name, string $entity_type, string $bundle, string $field_type, array $storage_settings = [], array $field_settings = [], string $widget_type = 'string', array $widget_settings = []): void {
     $field_storage = FieldStorageConfig::create([
@@ -52,7 +54,7 @@ trait Select2TestTrait {
     ];
     FieldConfig::create($field)->save();
 
-    /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository */
+    /** @var EntityDisplayRepositoryInterface $entity_display_repository */
     $entity_display_repository = \Drupal::service('entity_display.repository');
     $entity_display_repository->getFormDisplay($entity_type, $bundle, 'default')
       ->setComponent($name, [
