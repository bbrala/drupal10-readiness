modules/contrib/entity_pager/entity_pager.install
modules/contrib/entity_pager/entity_pager.module
modules/contrib/entity_pager/src/EntityPager.php
modules/contrib/entity_pager/src/EntityPagerAnalyzer.php
modules/contrib/entity_pager/src/EntityPagerAnalyzerInterface.php
modules/contrib/entity_pager/src/EntityPagerFactory.php
modules/contrib/entity_pager/src/EntityPagerInterface.php
modules/contrib/entity_pager/src/EntityPagerLink.php
modules/contrib/entity_pager/src/EntityPagerLinkInterface.php
modules/contrib/entity_pager/src/Event/EntityPagerAnalyzeEvent.php
modules/contrib/entity_pager/src/Event/EntityPagerEvents.php
modules/contrib/entity_pager/src/EventSubscriber/EntityAnalyzerSubscriber.php
modules/contrib/entity_pager/src/EventSubscriber/ViewsPerformanceAnalyzerSubscriber.php
modules/contrib/entity_pager/src/Plugin/views/style/EntityPager.php
modules/contrib/entity_pager/tests/src/Functional/EntityPagerTest.php
modules/contrib/entity_pager/tests/src/Kernel/EntityPagerLinkTest.php
modules/contrib/entity_pager/tests/src/Unit/EntityAnalyzerSubscriberTest.php
modules/contrib/entity_pager/tests/src/Unit/EntityPagerAnalyzeEventTest.php
modules/contrib/entity_pager/tests/src/Unit/EntityPagerAnalyzerTest.php

13 files with changes
=====================

1) modules/contrib/entity_pager/tests/src/Unit/EntityPagerAnalyzerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_pager\Unit;

+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\Logger\LoggerChannelInterface;
@@ @@
   /**
    * Entity pager stub.
    *
-   * @var \Drupal\entity_pager\EntityPagerInterface|\PHPUnit\Framework\MockObject\MockObject
+   * @var EntityPagerInterface|MockObject
    */
   protected $entityPager;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->entityPager = $this->createMock(EntityPagerInterface::class);

     for ($i = 0; $i < random_int(3, 6); $i++) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/entity_pager/tests/src/Kernel/EntityPagerLinkTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_pager\Kernel;

+use Drupal\Core\Render\RendererInterface;
 use Drupal\entity_pager\EntityPagerLink;
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\KernelTests\Core\Entity\EntityKernelTestBase;
@@ @@
   /**
    * Renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->renderer = $this->container->get('renderer');
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/entity_pager/tests/src/Functional/EntityPagerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_pager\Functional;

+use Drupal\node\NodeInterface;
+use Drupal\views\ViewExecutable;
 use Drupal\Core\Url;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;
@@ @@
   /**
    * The nodes used in tests.
    *
-   * @var \Drupal\node\NodeInterface[]
+   * @var NodeInterface[]
    */
   protected $nodes;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp($import_test_views);

     $view = View::load('entity_pager_example');
@@ @@
    * Tests handling on non-entity pages.
    *
    * @see https://www.drupal.org/project/entity_pager/issues/3111423
+   * @doesNotPerformAssertions
    */
   public function testNonEntityPage() {
     $this->drupalPlaceBlock('views_block:entity_pager_example-entity_pager_example_block');
@@ @@
    * @param array $options
    *   Style options to update.
    *
-   * @return \Drupal\views\ViewExecutable
+   * @return ViewExecutable
    *   The updated view executable.
    */
   protected function updateExampleView(array $options) {
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/entity_pager/src/EventSubscriber/ViewsPerformanceAnalyzerSubscriber.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * Analyzes the entity pager view for performance issues and provide feedback.
    *
-   * @param \Drupal\entity_pager\Event\EntityPagerAnalyzeEvent $event
+   * @param EntityPagerAnalyzeEvent $event
    *   The Entity Pager Analyze event.
    */
   public function onEntityPagerAnalyze(EntityPagerAnalyzeEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/entity_pager/src/EventSubscriber/EntityAnalyzerSubscriber.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * Checks if there is a valid entity for the pager.
    *
-   * @param \Drupal\entity_pager\Event\EntityPagerAnalyzeEvent $event
+   * @param EntityPagerAnalyzeEvent $event
    *   The analyze event.
    */
   public function onEntityPagerAnalyze(EntityPagerAnalyzeEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/entity_pager/src/Event/EntityPagerAnalyzeEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_pager\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\entity_pager\EntityPagerInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Analyze event object.
@@ @@
   /**
    * The entity pager being analyzed.
    *
-   * @var \Drupal\entity_pager\EntityPagerInterface
+   * @var EntityPagerInterface
    */
   protected $entityPager;

@@ @@
   /**
    * Constructs a new EntityPagerAnalyzeEvent.
    *
-   * @param \Drupal\entity_pager\EntityPagerInterface $entity_pager
+   * @param EntityPagerInterface $entity_pager
    *   The entity pager.
    */
   public function __construct(EntityPagerInterface $entity_pager) {
@@ @@
   /**
    * Gets the entity pager.
    *
-   * @return \Drupal\entity_pager\EntityPagerInterface
+   * @return EntityPagerInterface
    *   The entity pager.
    */
   public function getEntityPager() {
@@ @@
   /**
    * Sets the entity pager.
    *
-   * @param \Drupal\entity_pager\EntityPagerInterface $entity_pager
+   * @param EntityPagerInterface $entity_pager
    *   The entity pager.
    */
   public function setEntityPager(EntityPagerInterface $entity_pager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/entity_pager/src/EntityPagerLink.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The entity that this link is for.
    *
-   * @var \Drupal\Core\Entity\EntityInterface|null
+   * @var EntityInterface|null
    */
   public $entity;

@@ @@
    *
    * @param string $text
    *   The text of the link.
-   * @param \Drupal\Core\Entity\EntityInterface|null $entity
+   * @param EntityInterface|null $entity
    *   The result row in the view to link to.
    */
   public function __construct($text, EntityInterface $entity = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/entity_pager/src/EntityPagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_pager;

+use Drupal\views\ViewExecutable;
+use Drupal\Core\Entity\EntityInterface;
 /**
  * Defines an interface for an entity pager.
  */
@@ @@
   /**
    * Gets the view for the entity pager.
    *
-   * @return \Drupal\views\ViewExecutable
+   * @return ViewExecutable
    *   The view object.
    */
   public function getView();
@@ @@
   /**
    * Gets the entity object this entity pager is for.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The entity object or NULL if no entity found.
    */
   public function getEntity();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/entity_pager/src/EntityPagerFactory.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;

@@ @@
   /**
    * EntityPagerFactory constructor.
    *
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
    */
   public function __construct(Token $token) {
@@ @@
   /**
    * Returns a newly constructed entity pager.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The executable to construct an entity pager for.
    *
-   * @return \Drupal\entity_pager\EntityPagerInterface
+   * @return EntityPagerInterface
    *   The entity pager object.
    */
   public function get(ViewExecutable $view) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/entity_pager/src/EntityPagerAnalyzerInterface.php:9

    ---------- begin diff ----------
@@ @@
   /**
    * Analyzes the given entity pager.
    *
-   * @param \Drupal\entity_pager\EntityPagerInterface $entity_pager
+   * @param EntityPagerInterface $entity_pager
    *   The entity pager to analyze.
    */
   public function analyze(EntityPagerInterface $entity_pager);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/entity_pager/src/EntityPagerAnalyzer.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Constructs a new EntityPagerAnalyzer object.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(EventDispatcherInterface $event_dispatcher) {
@@ @@
    */
   public function analyze(EntityPagerInterface $entity_pager) {
     $event = new EntityPagerAnalyzeEvent($entity_pager);
-    $this->eventDispatcher->dispatch(EntityPagerEvents::ENTITY_PAGER_ANALYZE, $event);
+    $this->eventDispatcher->dispatch($event, EntityPagerEvents::ENTITY_PAGER_ANALYZE);
     $logs = $event->getLogs();

     foreach ($logs as $message) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/entity_pager/src/EntityPager.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The executable for the view that the pager is attached to.
    *
-   * @var \Drupal\views\ViewExecutable
+   * @var ViewExecutable
    */
   protected $view;

@@ @@
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;

@@ @@
   /**
    * EntityPager constructor.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The view object.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
    */
   public function __construct(ViewExecutable $view, Token $token) {
@@ @@
   protected function getCurrentRow() {
     $entity = $this->getEntity();

-    /** @var \Drupal\views\ResultRow $result */
+    /** @var ResultRow $result */
     foreach ($this->getView()->result as $index => $result) {
       $result_entity = $this->getResultEntity($result);

@@ @@
    * @param int $index
    *   The index of the result row to return from the view.
    *
-   * @return \Drupal\views\ResultRow|null
+   * @return ResultRow|null
    *   The result row, or NULL.
    */
   protected function getResultRow($index) {
@@ @@
    *
    * @param string $string
    *   The string to de-tokenize.
-   * @param \Drupal\Core\Entity\EntityInterface|null $entity
+   * @param EntityInterface|null $entity
    *   The entity to use for de-tokenization.
    *
    * @return string
@@ @@
   /**
    * Get the entity from the current views row.
    *
-   * @param \Drupal\views\ResultRow $row
+   * @param ResultRow $row
    *   The views result row object.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The content entity from the result.
    */
   protected function getResultEntity(ResultRow $row) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/entity_pager/entity_pager.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\entity_pager\EntityPagerInterface;
 /**
  * @file
  * Provides Next and Previous navigation on entities.
@@ @@
  *   - view: The view of the entity pager.
  */
 function template_preprocess_entity_pager(array &$variables) {
-  /** @var \Drupal\entity_pager\EntityPagerInterface $entity_pager */
+  /** @var EntityPagerInterface $entity_pager */
   $entity_pager = \Drupal::service('entity_pager.factory')->get($variables['view']);

   $variables['links'] = $entity_pager->getLinks();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 13 files have been changed by Rector                                      

