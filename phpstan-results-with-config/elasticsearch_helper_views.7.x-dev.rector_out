modules/contrib/elasticsearch_helper_views-elasticsearch_helper_views/elasticsearch_helper_views.module
modules/contrib/elasticsearch_helper_views-elasticsearch_helper_views/src/Ajax/ElasticsearchDebugCommand.php
modules/contrib/elasticsearch_helper_views-elasticsearch_helper_views/src/Annotation/ElasticsearchQueryBuilder.php
modules/contrib/elasticsearch_helper_views-elasticsearch_helper_views/src/ElasticsearchQueryBuilderInterface.php
modules/contrib/elasticsearch_helper_views-elasticsearch_helper_views/src/ElasticsearchQueryBuilderManager.php
modules/contrib/elasticsearch_helper_views-elasticsearch_helper_views/src/EventSubscriber/AjaxResponseSubscriber.php
modules/contrib/elasticsearch_helper_views-elasticsearch_helper_views/src/Plugin/ElasticsearchQueryBuilder/DefaultElasticsearchQueryBuilder.php
modules/contrib/elasticsearch_helper_views-elasticsearch_helper_views/src/Plugin/ElasticsearchQueryBuilder/ElasticsearchQueryBuilderPluginBase.php
modules/contrib/elasticsearch_helper_views-elasticsearch_helper_views/src/Plugin/views/display/ElasticsearchBlock.php
modules/contrib/elasticsearch_helper_views-elasticsearch_helper_views/src/Plugin/views/field/RenderedEntity.php
modules/contrib/elasticsearch_helper_views-elasticsearch_helper_views/src/Plugin/views/field/Source.php
modules/contrib/elasticsearch_helper_views-elasticsearch_helper_views/src/Plugin/views/query/Elasticsearch.php
modules/contrib/elasticsearch_helper_views-elasticsearch_helper_views/src/Plugin/views/relationship/EntityRelationship.php

5 files with changes
====================

1) modules/contrib/elasticsearch_helper_views-elasticsearch_helper_views/src/Plugin/views/query/Elasticsearch.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\elasticsearch_helper_views\Plugin\views\query;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /** @var  EntityTypeManagerInterface $entityTypeManager */
   protected $entityTypeManager;

-  /** @var \Drupal\elasticsearch_helper_views\ElasticsearchQueryBuilderManager $elasticsearchQueryBuilderManager */
+  /** @var ElasticsearchQueryBuilderManager $elasticsearchQueryBuilderManager */
   protected $elasticsearchQueryBuilderManager;

-  /** @var \Drupal\elasticsearch_helper_views\ElasticsearchQueryBuilderInterface $queryBuilder */
+  /** @var ElasticsearchQueryBuilderInterface $queryBuilder */
   protected $queryBuilder;

   /**
@@ @@
    * @param string $plugin_id
    * @param mixed $plugin_definition
    * @param \Elasticsearch\Client $elasticsearch_client
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\elasticsearch_helper_views\ElasticsearchQueryBuilderManager $query_builder_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param ElasticsearchQueryBuilderManager $query_builder_manager
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, Client $elasticsearch_client, EntityTypeManagerInterface $entity_type_manager, ElasticsearchQueryBuilderManager $query_builder_manager) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
@@ @@
    * Provides query options form.
    *
    * @param $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function buildOptionsForm(&$form, FormStateInterface $form_state) {
     parent::buildOptionsForm($form, $form_state);
@@ @@
   /**
    * Returns instance of a query builder plugin.
    *
-   * @return \Drupal\elasticsearch_helper_views\ElasticsearchQueryBuilderInterface|null
+   * @return ElasticsearchQueryBuilderInterface|null
    */
   public function getQueryBuilder() {
     if ($this->options['query_builder'] && !isset($this->queryBuilder)) {
@@ @@
    * @param array $hit
    * @param $index
    *
-   * @return \Drupal\views\ResultRow
+   * @return ResultRow
    */
   protected function createResultRowFromHit(array $hit, $index) {
     return new ResultRow($hit);
@@ @@
   /**
    * Indexes the result set.
    *
-   * @param \Drupal\views\ResultRow[] $result
+   * @param ResultRow[] $result
    */
   protected function indexResult(array &$result) {
     array_walk($result, function(ResultRow $row, $index) {
@@ @@
    * Entities defined by a "entity_relationship" relationship are stored in
    * $result->_relationship_entities[$relationship_id];
    *
-   * @param \Drupal\views\ResultRow[] $results
+   * @param ResultRow[] $results
    *   The result of the SQL query.
    */
   public function loadEntities(&$results) {
@@ @@
    *
    * @param mixed[] $ids
    *   An array of identifiers (entity ID / revision ID).
-   * @param \Drupal\Core\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   An array of entities keyed by their identified (entity ID / revision ID).
-   * @param \Drupal\views\ResultRow[] $results
+   * @param ResultRow[] $results
    *   The entire views result.
    *
-   * @return \Drupal\views\ResultRow[]
+   * @return ResultRow[]
    *   The changed views results.
    */
   protected function assignEntitiesToResult($ids, array $entities, array $results) {
@@ @@
   /**
    * Gets all the involved entities of the view.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    */
   protected function getAllEntities() {
     $entities = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/elasticsearch_helper_views-elasticsearch_helper_views/src/Plugin/views/field/RenderedEntity.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\elasticsearch_helper_views\Plugin\views\field;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Component\Serialization\Yaml;
 use Drupal\Core\Cache\CacheableDependencyInterface;
 use Drupal\Core\Cache\CacheableMetadata;
@@ @@

   use EntityTranslationRenderTrait;

-  /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager */
+  /** @var EntityTypeManagerInterface $entityTypeManager */
   protected $entityTypeManager;

-  /** @var \Drupal\Core\Language\LanguageManagerInterface $languageManager */
+  /** @var LanguageManagerInterface $languageManager */
   protected $languageManager;

   /** @var EntityDisplayRepositoryInterface $entityDisplayRepository */
@@ @@
    * @param array $configuration
    * @param string $plugin_id
    * @param array $plugin_definition
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityTypeManagerInterface $entity_manager
+   * @param LanguageManagerInterface $language_manager
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, EntityTypeManagerInterface $entity_manager, LanguageManagerInterface $language_manager, EntityDisplayRepositoryInterface $entity_display_repository) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
@@ @@
   /**
    * Returns access result object for given entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param array $build
    *
-   * @return bool|\Drupal\Core\Access\AccessResultInterface
+   * @return bool|AccessResultInterface
    */
   protected function getAccess(EntityInterface $entity, array $build) {
     return $entity->access('view', NULL, TRUE);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/elasticsearch_helper_views-elasticsearch_helper_views/src/Plugin/ElasticsearchQueryBuilder/ElasticsearchQueryBuilderPluginBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\elasticsearch_helper_views\Plugin\ElasticsearchQueryBuilder;

+use Drupal\views\Plugin\views\filter\FilterPluginBase;
+use Drupal\views\Plugin\views\argument\ArgumentPluginBase;
+use Drupal\views\Plugin\views\sort\SortPluginBase;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\elasticsearch_helper_views\ElasticsearchQueryBuilderInterface;
@@ @@
     $values = [];

     if (!empty($this->view->filter)) {
-      /** @var \Drupal\views\Plugin\views\filter\FilterPluginBase $filter */
+      /** @var FilterPluginBase $filter */
       foreach ($this->view->filter as $filter) {
         $values[$filter->realField] = $filter->value;
       }
@@ @@
     $values = [];

     if (!empty($this->view->argument)) {
-      /** @var \Drupal\views\Plugin\views\argument\ArgumentPluginBase $argument */
+      /** @var ArgumentPluginBase $argument */
       foreach ($this->view->argument as $argument) {
         $values[$argument->realField] = $argument->getValue();
       }
@@ @@
     $values = [];

     if (!empty($this->view->sort)) {
-      /** @var \Drupal\views\Plugin\views\sort\SortPluginBase $sort */
+      /** @var SortPluginBase $sort */
       foreach ($this->view->sort as $sort) {
         $values[$sort->realField] = strtolower($sort->options['order']);
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/elasticsearch_helper_views-elasticsearch_helper_views/src/EventSubscriber/AjaxResponseSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\elasticsearch_helper_views\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
 use Drupal\views\Ajax\ViewAjaxResponse;
 use Drupal\views\ViewExecutable;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
  */
 class AjaxResponseSubscriber implements EventSubscriberInterface {

-  /** @var \Drupal\Core\Session\AccountInterface $currentUser */
+  /** @var AccountInterface $currentUser */
   protected $currentUser;

-  /** @var \Drupal\Core\Config\ConfigFactoryInterface $configFactory */
+  /** @var ConfigFactoryInterface $configFactory */
   protected $configFactory;

   /**
    * AjaxResponseSubscriber constructor.
    *
-   * @param \Drupal\Core\Session\AccountInterface $current_user
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param AccountInterface $current_user
+   * @param ConfigFactoryInterface $config_factory
    */
   public function __construct(AccountInterface $current_user, ConfigFactoryInterface $config_factory) {
     $this->currentUser = $current_user;
@@ @@
   /**
    * Prints Elasticsearch query to console for debugging.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    */
-  public function onResponse(FilterResponseEvent $event) {
+  public function onResponse(ResponseEvent $event) {
     // Do nothing if use does not have permission to administer views.
     if (!$this->currentUser->hasPermission('administer views')) {
       return;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/elasticsearch_helper_views-elasticsearch_helper_views/src/Annotation/ElasticsearchQueryBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\elasticsearch_helper_views\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


 [OK] 5 files have been changed by Rector                                       

