modules/contrib/opigno_group_manager/opigno_group_manager.install
modules/contrib/opigno_group_manager/opigno_group_manager.module
modules/contrib/opigno_group_manager/src/Annotation/OpignoGroupManagerContentType.php
modules/contrib/opigno_group_manager/src/ContentTypeBase.php
modules/contrib/opigno_group_manager/src/ContentTypeInterface.php
modules/contrib/opigno_group_manager/src/Controller/InfoCardController.php
modules/contrib/opigno_group_manager/src/Controller/OpignoGroupManagerController.php
modules/contrib/opigno_group_manager/src/Entity/OpignoGroupManagedContent.php
modules/contrib/opigno_group_manager/src/Entity/OpignoGroupManagedLink.php
modules/contrib/opigno_group_manager/src/OpignoGroupContent.php
modules/contrib/opigno_group_manager/src/OpignoGroupContentTypesManager.php
modules/contrib/opigno_group_manager/src/OpignoGroupContext.php

9 files with changes
====================

1) modules/contrib/opigno_group_manager/src/OpignoGroupContext.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_group_manager;

+use Drupal\Core\TempStore\TempStoreException;
+use Drupal\Core\TempStore\PrivateTempStore;
 use Drupal\Core\Cache\Cache;

 // TODO: Not sure the learning path ID is very useful... Maybe can be removed.
@@ @@
    * @param int $group_id
    *   Group ID.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
+   * @throws TempStoreException
    */
   public static function setGroupId($group_id) {
     static::ensureSession();

-    /** @var \Drupal\Core\TempStore\PrivateTempStore $store */
+    /** @var PrivateTempStore $store */
     $store = \Drupal::service('tempstore.private')
       ->get('opigno_group_manager');
     $store->set(self::GROUP_ID, $group_id);
@@ @@
    * @param int $current_content_id
    *   Content ID.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
+   * @throws TempStoreException
    */
   public static function setCurrentContentId($current_content_id) {
     static::ensureSession();

-    /** @var \Drupal\Core\TempStore\PrivateTempStore $store */
+    /** @var PrivateTempStore $store */
     $store = \Drupal::service('tempstore.private')
       ->get('opigno_group_manager');
     if ($store->get(self::CURRENT_CONTENT_ID) != $current_content_id) {
@@ @@
    * @param string $activity_link_type
    *   Type of activity link.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
+   * @throws TempStoreException
    */
   public static function setActivityLinkType($activity_link_type) {
     static::ensureSession();

-    /** @var \Drupal\Core\TempStore\PrivateTempStore $store */
+    /** @var PrivateTempStore $store */
     $store = \Drupal::service('tempstore.private')->get('opigno_group_manager');
     $store->set(self::ACTIVITY_LINK_TYPE, $activity_link_type);
   }
@@ @@
   public static function removeContext() {
     static::ensureSession();

-    /** @var \Drupal\Core\TempStore\PrivateTempStore $store */
+    /** @var PrivateTempStore $store */
     $store = \Drupal::service('tempstore.private')
       ->get('opigno_group_manager');
     $store->delete(self::GROUP_ID);
@@ @@
   public static function removeActivityLinkType() {
     static::ensureSession();

-    /** @var \Drupal\Core\TempStore\PrivateTempStore $store */
+    /** @var PrivateTempStore $store */
     $store = \Drupal::service('tempstore.private')->get('opigno_group_manager');
     $store->delete(self::ACTIVITY_LINK_TYPE);
     self::rebuildActions();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/opigno_group_manager/src/OpignoGroupContentTypesManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_group_manager;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Plugin\DefaultPluginManager;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
    * @return object|ContentTypeBase
    *   Instance.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function createInstance($plugin_id, array $configuration = []) {
     return parent::createInstance($plugin_id, $configuration);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/opigno_group_manager/src/OpignoGroupContent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_group_manager;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\opigno_group_manager\Entity\OpignoGroupManagedContent;

 /**
@@ @@
   /**
    * Returns OpignoGroupContent params.
    *
-   * @param \Drupal\opigno_group_manager\Entity\OpignoGroupManagedContent|null $content
+   * @param OpignoGroupManagedContent|null $content
    *   Content.
    *
    * @return array
    *   OpignoGroupContent params.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function toManagerArray(OpignoGroupManagedContent $content = NULL) {
     if ($content === NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/opigno_group_manager/src/Entity/OpignoGroupManagedLink.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_group_manager\Entity;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
    * @param int $required_score
    *   The required score to go from the parent to the child content.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|self
+   * @return EntityInterface|self
    *   OpignoGroupManagedLink object.
    */
   public static function createWithValues(
@@ @@
   /**
    * Returns group entity.
    *
-   * @return \Drupal\group\Entity\Group
+   * @return Group
    *   The group entity object.
    */
   public function getGroup() {
@@ @@
   /**
    * Sets group entity.
    *
-   * @param \Drupal\group\Entity\Group $group
+   * @param Group $group
    *   The group entity object.
    *
    * @return $this
@@ @@
    * @param array $properties
    *   The properties to search for.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]|self[]
+   * @return EntityInterface[]|self[]
    *   LPManagedLink objects.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    *
    * @see LPManagedContent::loadByLearningPathId()
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/opigno_group_manager/src/Entity/OpignoGroupManagedContent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_group_manager\Entity;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\opigno_group_manager\ContentTypeBase;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Entity\ContentEntityBase;
@@ @@
    * @param int $in_skills_system
    *   Check if the content in the skills system.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|self
+   * @return EntityInterface|self
    *   LPManagedContent object.
    */
   public static function createWithValues(
@@ @@
   /**
    * Returns group.
    *
-   * @return \Drupal\group\Entity\Group
+   * @return Group
    *   Group.
    */
   public function getGroup() {
@@ @@
   /**
    * Sets group ID.
    *
-   * @param \Drupal\group\Entity\Group $group
+   * @param Group $group
    *   The group entity.
    *
    * @return $this
@@ @@
   /**
    * Returns parents links.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]|OpignoGroupManagedLink[]
+   * @return EntityInterface[]|OpignoGroupManagedLink[]
    *   Parents links.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getParentsLinks() {
     return OpignoGroupManagedLink::loadByProperties([
@@ @@
   /**
    * Returns children links.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]|OpignoGroupManagedLink[]
+   * @return EntityInterface[]|OpignoGroupManagedLink[]
    *   Children links.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function getChildrenLinks() {
     return OpignoGroupManagedLink::loadByProperties([
@@ @@
   /**
    * Get the content type object of this content.
    *
-   * @return \Drupal\opigno_group_manager\ContentTypeBase|object
+   * @return ContentTypeBase|object
    *   Group content type.
    */
   public function getGroupContentType() {
@@ @@
    * @param array $properties
    *   The properties to search for.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]|self[]
+   * @return EntityInterface[]|self[]
    *   LPManagedContent objects.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    *
    * @see LPManagedContent::loadByLearningPathId()
    */
@@ @@
    * @param int $group_id
    *   The Group entity ID.
    *
-   * @return array|\Drupal\Core\Entity\EntityInterface[]|self[]
+   * @return array|EntityInterface[]|self[]
    *   Group managed content object.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public static function loadByGroupId($group_id) {
     try {
@@ @@
   /**
    * Deletes the content from database.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws EntityStorageException
    */
   public function delete() {
     // First, delete all the links associated to this content.
@@ @@
    *   FALSE if no next content.
    *   The next OpignoGroupManagedContent if there is a next content.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getNextStep($user_score, $attempts = NULL, $module = NULL, $guidedNavigation = NULL, $type_id = NULL) {
     if ($type_id != 'ContentTypeCourse') {
@@ @@
    * @return array
    *   Successful required activities array.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getSuccessfulRequiredActvities($required_activities, $last_attempt_id) {
     $successful_activities = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/opigno_group_manager/src/Controller/OpignoGroupManagerController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_group_manager\Controller;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Serialization\Json;
@@ @@
   /**
    * Opigno group content type manager.
    *
-   * @var \Drupal\opigno_group_manager\OpignoGroupContentTypesManager
+   * @var OpignoGroupContentTypesManager
    */
   private $content_types_manager;

@@ @@
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
       '#base_path' => $request->getBasePath(),
       '#base_href' => $request->getPathInfo(),
       '#group_id' => $group->id(),
-      '#next_link' => isset($next_link) ? render($next_link) : NULL,
+      '#next_link' => isset($next_link) ? \Drupal::service('renderer')->render($next_link) : NULL,
       '#user_has_info_card' => $tempstore->get('hide_info_card') ? FALSE : TRUE,
       '#text_add_a_link' => $this->t('add a link')->render(),
       '#text_add_your_first_item' => $this->t('Add your first item')->render(),
@@ @@
     elseif ($type === 'ContentTypeCourse'
       && $item !== NULL
       && ($group = Group::load($item)) !== NULL) {
-      /** @var \Drupal\group\Entity\GroupInterface $group */
+      /** @var GroupInterface $group */
       if (!$group->access('update')) {
         throw new AccessDeniedHttpException();
       }
@@ @@
     $item['entityId'] = $entity->id();
     $item['entityBundle'] = \Drupal::routeMatch()->getParameter('type');
     $item['title'] = $entity->label();
-    $item['imageUrl'] = (isset($file) && $file) ? file_create_url($file->getFileUri()) :
+    $item['imageUrl'] = (isset($file) && $file) ? \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri()) :
       self::getDefaultBundleImageUrl($entity->bundle());
     $item['in_skills_system'] = FALSE;
     $item['isMandatory'] = FALSE;
@@ @@
    *
    * It return the coordinates of every steps.
    *
-   * @param \Drupal\group\Entity\Group $group
+   * @param Group $group
    *   Group object.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   Response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function getPositions(Group $group) {
     // Get the positions from DB.
@@ @@
    * @param int $mainItem
    *   The main level content ID.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   Response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function getAvailableItems($mainItem = NULL) {
     // Init the return array and get all the content types available.
@@ @@
   /**
    * Return content types available for learning paths.
    *
-   * @param \Drupal\group\Entity\Group $group
+   * @param Group $group
    *   Group object.
    * @param bool $json_output
    *   JSON format flag.
    *
-   * @return array|\Symfony\Component\HttpFoundation\JsonResponse
+   * @return array|JsonResponse
    *   Response.
    */
   public function getItemTypes(Group $group, $json_output = TRUE) {
@@ @@
   /**
    * Update Learning Path guided navigation field.
    *
-   * @param \Drupal\group\Entity\Group $group
+   * @param Group $group
    *   Group object.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Request array.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   Response array.
    */
   public function updateGuidedNavigation(Group $group, Request $request) {
@@ @@
   /**
    * Return Learning Path guided navigation field.
    *
-   * @param \Drupal\group\Entity\Group $group
+   * @param Group $group
    *   Group object.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   Response array.
    */
   public function getGuidedNavigationResponse(Group $group) {
@@ @@
   /**
    * Get Learning Path guided navigation field.
    *
-   * @param \Drupal\group\Entity\Group $group
+   * @param Group $group
    *   Group object.
    *
    * @return bool
@@ @@
   /**
    * Duplicate course.
    *
-   * @param \Drupal\group\Entity\Group $group
+   * @param Group $group
    *   Group object.
    */
   public function courseDuplicate(Group $group) {
@@ @@
   /**
    * Export course.
    *
-   * @param \Drupal\group\Entity\Group $group
+   * @param Group $group
    *   Group object.
    */
   public function courseExport(Group $group) {
@@ @@
   /**
    * Export training.
    *
-   * @param \Drupal\group\Entity\Group $group
+   * @param Group $group
    *   Group object.
    */
   public function trainingExport(Group $group) {
@@ @@
         $content = $serializer->serialize($data_structure, $format);
         $filename_path = "{$dir}/{$filename}";

-        \Drupal::service('file_system')->saveData($content, $filename_path, \Drupal\Core\File\FileSystemInterface::EXISTS_REPLACE);
+        \Drupal::service('file_system')->saveData($content, $filename_path, FileSystemInterface::EXISTS_REPLACE);

         $zip->addFile($filename_path, $filename);

@@ @@
           }

           $content = $serializer->serialize($data_structure, $format);
-          $context['results']['file'] = \Drupal::service('file_system')->saveData($content, $filename_path, \Drupal\Core\File\FileSystemInterface::EXISTS_REPLACE);
+          $context['results']['file'] = \Drupal::service('file_system')->saveData($content, $filename_path, FileSystemInterface::EXISTS_REPLACE);

           $zip->addFile($filename_path, $filename);
         }
@@ @@
         $files_to_export['files'][$item['id']]['media'] = $filename;

         $content = $serializer->serialize($media, $format);
-        $context['results']['file'] = \Drupal::service('file_system')->saveData($content, $filename_path, \Drupal\Core\File\FileSystemInterface::EXISTS_REPLACE);
+        $context['results']['file'] = \Drupal::service('file_system')->saveData($content, $filename_path, FileSystemInterface::EXISTS_REPLACE);
         $zip->addFile($filename_path, 'library/' . $filename);

         $file_id = $media->get('tft_file')->getValue()[0]['target_id'];
@@ @@
           $files_to_export['files'][$item['id']]['file'] = $filename;
           $filename_path = "{$folder_library}/{$filename}";
           $content = $serializer->serialize($file, $format);
-          $context['results']['file'] = \Drupal::service('file_system')->saveData($content, $filename_path, \Drupal\Core\File\FileSystemInterface::EXISTS_REPLACE);
+          $context['results']['file'] = \Drupal::service('file_system')->saveData($content, $filename_path, FileSystemInterface::EXISTS_REPLACE);
           $zip->addFile($filename_path, 'library/' . $filename);
         }
       }
@@ @@
           $files_to_export['terms'][] = $filename;

           $content = $serializer->serialize($term, $format);
-          $context['results']['file'] = \Drupal::service('file_system')->saveData($content, $filename_path, \Drupal\Core\File\FileSystemInterface::EXISTS_REPLACE);
+          $context['results']['file'] = \Drupal::service('file_system')->saveData($content, $filename_path, FileSystemInterface::EXISTS_REPLACE);

           $zip->addFile($filename_path, 'library/' . $filename);
         }
@@ @@
     $filename_path = "{$dir}/{$filename}";
     $files_to_export['activities'][] = $filename;

-    \Drupal::service('file_system')->saveData($content, $filename_path, \Drupal\Core\File\FileSystemInterface::EXISTS_REPLACE);
+    \Drupal::service('file_system')->saveData($content, $filename_path, FileSystemInterface::EXISTS_REPLACE);

     $zip->addFile($filename_path, $filename);

@@ @@
   /**
    * Duplicate training.
    *
-   * @param \Drupal\group\Entity\Group $group
+   * @param Group $group
    *   Group object.
    */
   protected function getMaxScore($module, $activity) {
@@ @@
   /**
    * Duplicate training.
    *
-   * @param \Drupal\group\Entity\Group $group
+   * @param Group $group
    *   Group object.
    */
   public function trainingDuplicate(Group $group) {
@@ @@
    * @param array $step
    *  Step options.
    *
-   * @param \Drupal\group\Entity\Group $group
+   * @param Group $group
    *   Group object.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/opigno_group_manager/src/ContentTypeInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_group_manager;

+use Drupal\Core\Url;
+use Drupal\Core\Entity\EntityFormInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Symfony\Component\HttpFoundation\Request;

@@ @@
    * @param int $entity_id
    *   The entity ID.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The tool entity URL.
    */
   public function getViewContentUrl($entity_id);
@@ @@
   /**
    * Try to get the content from a Request object.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    *
    * @return LearningPathContent|false
@@ @@
    * @param int $entity_id
    *   The entity ID.
    *
-   * @return \Drupal\Core\Entity\EntityFormInterface
+   * @return EntityFormInterface
    *   Form.
    */
   public function getFormObject($entity_id = NULL);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/opigno_group_manager/src/ContentTypeBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_group_manager;

+use Drupal\Core\Url;
 use Drupal\Core\Plugin\PluginBase;

 /**
@@ @@
    * @param int $group_id
    *   The group ID (optional).
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The URL to use to start the "test" for a student.
    */
   public function getStartContentUrl($content_id, $group_id = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/opigno_group_manager/opigno_group_manager.module:208

    ---------- begin diff ----------
@@ @@
 /**
  * Implements hook_entity_operation().
  */
-function opigno_group_manager_entity_operation(\Drupal\Core\Entity\EntityInterface $entity) {
+function opigno_group_manager_entity_operation(EntityInterface $entity) {
   if (!(\Drupal::currentUser()->hasPermission('access content'))) {
     return [];
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 9 files have been changed by Rector                                       

