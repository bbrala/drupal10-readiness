modules/contrib/page_manager/page_manager.install
modules/contrib/page_manager/page_manager.module
modules/contrib/page_manager/page_manager.post_update.php
modules/contrib/page_manager/page_manager_ui/page_manager_ui.module
modules/contrib/page_manager/page_manager_ui/page_manager_ui.post_update.php
modules/contrib/page_manager/page_manager_ui/src/Access/PageManagerPluginAccess.php
modules/contrib/page_manager/page_manager_ui/src/ConfigTranslation/PageConfigMapper.php
modules/contrib/page_manager/page_manager_ui/src/ConfigTranslation/PageVariantConfigMapper.php
modules/contrib/page_manager/page_manager_ui/src/Controller/PageManagerController.php
modules/contrib/page_manager/page_manager_ui/src/Entity/PageListBuilder.php
modules/contrib/page_manager/page_manager_ui/src/Form/AccessConfigure.php
modules/contrib/page_manager/page_manager_ui/src/Form/AccessDelete.php
modules/contrib/page_manager/page_manager_ui/src/Form/AddVariantContextsForm.php
modules/contrib/page_manager/page_manager_ui/src/Form/AddVariantSelectionConfigure.php
modules/contrib/page_manager/page_manager_ui/src/Form/AddVariantSelectionDelete.php
modules/contrib/page_manager/page_manager_ui/src/Form/AddVariantSelectionForm.php
modules/contrib/page_manager/page_manager_ui/src/Form/AddVariantStaticContextConfigure.php
modules/contrib/page_manager/page_manager_ui/src/Form/AddVariantStaticContextDeleteForm.php
modules/contrib/page_manager/page_manager_ui/src/Form/PageAccessForm.php
modules/contrib/page_manager/page_manager_ui/src/Form/PageDeleteForm.php
modules/contrib/page_manager/page_manager_ui/src/Form/PageGeneralForm.php
modules/contrib/page_manager/page_manager_ui/src/Form/PageParametersForm.php
modules/contrib/page_manager/page_manager_ui/src/Form/PageReorderVariantsForm.php
modules/contrib/page_manager/page_manager_ui/src/Form/PageVariantAddForm.php
modules/contrib/page_manager/page_manager_ui/src/Form/PageVariantConfigureForm.php
modules/contrib/page_manager/page_manager_ui/src/Form/PageVariantContextsForm.php
modules/contrib/page_manager/page_manager_ui/src/Form/PageVariantDeleteForm.php
modules/contrib/page_manager/page_manager_ui/src/Form/PageVariantSelectionForm.php
modules/contrib/page_manager/page_manager_ui/src/Form/ParameterEditForm.php
modules/contrib/page_manager/page_manager_ui/src/Form/SelectionConfigure.php
modules/contrib/page_manager/page_manager_ui/src/Form/SelectionDelete.php
modules/contrib/page_manager/page_manager_ui/src/Form/StaticContextConfigure.php
modules/contrib/page_manager/page_manager_ui/src/Form/StaticContextDeleteForm.php
modules/contrib/page_manager/page_manager_ui/src/Form/VariantPluginAddBlockForm.php
modules/contrib/page_manager/page_manager_ui/src/Form/VariantPluginConfigureBlockFormBase.php
modules/contrib/page_manager/page_manager_ui/src/Form/VariantPluginContentForm.php
modules/contrib/page_manager/page_manager_ui/src/Form/VariantPluginDeleteBlockForm.php
modules/contrib/page_manager/page_manager_ui/src/Form/VariantPluginEditBlockForm.php
modules/contrib/page_manager/page_manager_ui/src/Wizard/PageAddWizard.php
modules/contrib/page_manager/page_manager_ui/src/Wizard/PageEditWizard.php
modules/contrib/page_manager/page_manager_ui/src/Wizard/PageVariantAddWizard.php
modules/contrib/page_manager/page_manager_ui/src/Wizard/PageWizardBase.php
modules/contrib/page_manager/page_manager_ui/tests/src/Functional/AddVariantSelectionTest.php
modules/contrib/page_manager/page_manager_ui/tests/src/Functional/PageManagerAdminTest.php
modules/contrib/page_manager/page_manager_ui/tests/src/Functional/PageParametersTest.php
modules/contrib/page_manager/page_manager_ui/tests/src/Functional/StaticContextTest.php
modules/contrib/page_manager/page_manager_ui/tests/src/FunctionalJavascript/PageManagerAdminTest.php
modules/contrib/page_manager/src/Context/ContextDefinitionFactory.php
modules/contrib/page_manager/src/Context/EntityLazyLoadContext.php
modules/contrib/page_manager/src/ContextMapper.php
modules/contrib/page_manager/src/ContextMapperInterface.php
modules/contrib/page_manager/src/Entity/LayoutBuilderStorage.php
modules/contrib/page_manager/src/Entity/Page.php
modules/contrib/page_manager/src/Entity/PageAccess.php
modules/contrib/page_manager/src/Entity/PageAccessCheck.php
modules/contrib/page_manager/src/Entity/PageVariant.php
modules/contrib/page_manager/src/Entity/PageVariantAccess.php
modules/contrib/page_manager/src/Entity/PageVariantViewBuilder.php
modules/contrib/page_manager/src/Event/PageManagerContextEvent.php
modules/contrib/page_manager/src/Event/PageManagerEvents.php
modules/contrib/page_manager/src/EventSubscriber/CurrentUserContext.php
modules/contrib/page_manager/src/EventSubscriber/LanguageInterfaceContext.php
modules/contrib/page_manager/src/EventSubscriber/RouteNameResponseSubscriber.php
modules/contrib/page_manager/src/EventSubscriber/RouteParamContext.php
modules/contrib/page_manager/src/Form/LayoutBuilderForm.php
modules/contrib/page_manager/src/PageInterface.php
modules/contrib/page_manager/src/PageVariantInterface.php
modules/contrib/page_manager/src/Plugin/DisplayVariant/HttpStatusCodeDisplayVariant.php
modules/contrib/page_manager/src/Plugin/DisplayVariant/LayoutBuilderDisplayVariant.php
modules/contrib/page_manager/src/Plugin/DisplayVariant/PageBlockDisplayVariant.php
modules/contrib/page_manager/src/Plugin/LayoutBuilderStorage/PageManagerLayoutBuilderStorage.php
modules/contrib/page_manager/src/Plugin/SectionStorage/PageManagerSectionStorage.php
modules/contrib/page_manager/src/Routing/PageManagerRoutes.php
modules/contrib/page_manager/src/Routing/RouteAttributes.php
modules/contrib/page_manager/src/Routing/RouteEnhancerCollectorTrait.php
modules/contrib/page_manager/src/Routing/VariantRouteFilter.php
modules/contrib/page_manager/tests/fixtures/update/page_manager.2960739.php
modules/contrib/page_manager/tests/modules/page_manager_routing_test/src/Plugin/Condition/EntityTestCondition.php
modules/contrib/page_manager/tests/modules/page_manager_routing_test/src/Routing/RouteSubscriber.php
modules/contrib/page_manager/tests/modules/page_manager_test/page_manager_test.module
modules/contrib/page_manager/tests/modules/page_manager_test/src/Controller/PageManagerTestController.php
modules/contrib/page_manager/tests/modules/page_manager_test/src/Plugin/Block/TestBlock.php
modules/contrib/page_manager/tests/src/Functional/FrontPageTest.php
modules/contrib/page_manager/tests/src/Functional/PageManagerConfigTranslationTest.php
modules/contrib/page_manager/tests/src/Functional/PageManagerTranslationIntegrationTest.php
modules/contrib/page_manager/tests/src/Functional/PageNodeAccessTest.php
modules/contrib/page_manager/tests/src/Functional/PageNodeSelectionTest.php
modules/contrib/page_manager/tests/src/Functional/PagePlaceholderTest.php
modules/contrib/page_manager/tests/src/Functional/PageTestHelperTrait.php
modules/contrib/page_manager/tests/src/Functional/Update/UpdateContextName.php
modules/contrib/page_manager/tests/src/FunctionalJavascript/LayoutBuilderDisplayVariantTest.php
modules/contrib/page_manager/tests/src/FunctionalJavascript/PageBlockDisplayVariantContextualLinksTest.php
modules/contrib/page_manager/tests/src/Kernel/PageConfigSchemaTest.php
modules/contrib/page_manager/tests/src/Kernel/PageManagerRoutingTest.php
modules/contrib/page_manager/tests/src/Kernel/PageVariantPageEntityTest.php
modules/contrib/page_manager/tests/src/Kernel/SerializationTest.php
modules/contrib/page_manager/tests/src/Unit/ContextMapperTest.php
modules/contrib/page_manager/tests/src/Unit/CurrentUserContextTest.php
modules/contrib/page_manager/tests/src/Unit/LanguageInterfaceContextTest.php
modules/contrib/page_manager/tests/src/Unit/PageAccessTest.php
modules/contrib/page_manager/tests/src/Unit/PageBlockDisplayVariantTest.php
modules/contrib/page_manager/tests/src/Unit/PageContextTestBase.php
modules/contrib/page_manager/tests/src/Unit/PageManagerRoutesTest.php
modules/contrib/page_manager/tests/src/Unit/PageTest.php
modules/contrib/page_manager/tests/src/Unit/PageVariantTest.php
modules/contrib/page_manager/tests/src/Unit/RouteAttributesTest.php
modules/contrib/page_manager/tests/src/Unit/RouteNameResponseSubscriberTest.php
modules/contrib/page_manager/tests/src/Unit/RouteParamContextTest.php
modules/contrib/page_manager/tests/src/Unit/VariantRouteFilterTest.php

84 files with changes
=====================

1) modules/contrib/page_manager/tests/src/Unit/VariantRouteFilterTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\page_manager\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ProphecyInterface;
 use Drupal\Component\Plugin\Exception\ContextException;
 use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
  */
 class VariantRouteFilterTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The mocked entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var EntityTypeManagerInterface|ProphecyInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The mocked page storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var ConfigEntityStorageInterface|ProphecyInterface
    */
   protected $pageVariantStorage;

@@ @@
   /**
    * The mocked current path stack.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack|\Prophecy\Prophecy\ProphecyInterface
+   * @var CurrentPathStack|ProphecyInterface
    */
   protected $currentPath;

@@ @@
   /**
    * The route filter under test.
    *
-   * @var \Drupal\page_manager\Routing\VariantRouteFilter
+   * @var VariantRouteFilter
    */
   protected $routeFilter;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->pageVariantStorage = $this->prophesize(ConfigEntityStorageInterface::class);

     $this->entityTypeManager = $this->prophesize(EntityTypeManagerInterface::class);
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     // The request stack begins empty, ensure it is empty after filtering.
     $this->assertNull($this->requestStack->getCurrentRequest());
     parent::tearDown();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/page_manager/tests/src/Unit/RouteParamContextTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\page_manager\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Plugin\Context\Context;
 use Drupal\Core\Routing\RouteProviderInterface;
 use Drupal\Core\TypedData\DataDefinition;
@@ @@
  */
 class RouteParamContextTest extends PageContextTestBase {

+  use ProphecyTrait;
   /**
    * @covers ::onPageContext
    */
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/page_manager/tests/src/Unit/RouteNameResponseSubscriberTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\page_manager\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Cache\CacheableResponse;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\Routing\StackedRouteMatchInterface;
@@ @@
 use Drupal\Tests\UnitTestCase;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\HttpKernelInterface;

 /**
@@ @@
  */
 class RouteNameResponseSubscriberTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * @covers ::onResponse
    */
@@ @@
   /**
    * Builds an event to wrap a response.
    *
-   * @param \Symfony\Component\HttpFoundation\Response $response
+   * @param Response $response
    *   The response to be sent as the event payload.
    *
-   * @return \Symfony\Component\HttpKernel\Event\FilterResponseEvent
+   * @return ResponseEvent
    *   An event suitable for a KernelEvents::RESPONSE subscriber to process.
    */
   protected function buildEvent(Response $response) {
     $kernel = $this->prophesize(HttpKernelInterface::class);
     $request = Request::create('');
-    return new FilterResponseEvent($kernel->reveal(), $request, HttpKernelInterface::SUB_REQUEST, $response);
+    return new ResponseEvent($kernel->reveal(), $request, HttpKernelInterface::SUB_REQUEST, $response);
   }

 }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/page_manager/tests/src/Unit/PageVariantTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\page_manager\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ProphecyInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
  */
 class PageVariantTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
-   * @var \Drupal\page_manager\Entity\PageVariant
+   * @var PageVariant
    */
   protected $pageVariant;

   /**
-   * @var \Drupal\page_manager\PageInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var PageInterface|ProphecyInterface
    */
   protected $page;

   /**
-   * @var \Drupal\page_manager\ContextMapperInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var ContextMapperInterface|ProphecyInterface
    */
   protected $contextMapper;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->pageVariant = new PageVariant(['id' => 'the_page_variant', 'page' => 'the_page'], 'page_variant');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/page_manager/tests/src/Unit/PageTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\page_manager\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
  */
 class PageTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
-   * @var \Drupal\page_manager\Entity\Page
+   * @var Page
    */
   protected $page;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->page = new Page(['id' => 'the_page'], 'page');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/page_manager/tests/src/Unit/PageManagerRoutesTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\page_manager\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use PHPUnit\Framework\MockObject\MockObject;
+use Prophecy\Prophecy\ProphecyInterface;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
  */
 class PageManagerRoutesTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The mocked entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var EntityTypeManagerInterface|MockObject
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The mocked page storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var ConfigEntityStorageInterface|MockObject
    */
   protected $pageStorage;

@@ @@
   /**
    * The cache tags invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var CacheTagsInvalidatorInterface|ProphecyInterface
    */
   protected $cacheTagsInvalidator;

@@ @@
   /**
    * The tested page route subscriber.
    *
-   * @var \Drupal\page_manager\Routing\PageManagerRoutes
+   * @var PageManagerRoutes
    */
   protected $routeSubscriber;

@@ @@
    *
    * @covers ::__construct
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->pageStorage = $this->prophesize(ConfigEntityStorageInterface::class);

     $this->entityTypeManager = $this->prophesize(EntityTypeManagerInterface::class);
@@ @@
    */
   public function testAlterRoutesWithStatus() {
     // Set up a valid page.
-    /** @var \Drupal\page_manager\PageInterface|\Prophecy\Prophecy\ProphecyInterface $page1 */
+    /** @var PageInterface|ProphecyInterface $page1 */
     $page1 = $this->prophesize(PageInterface::class);
     $page1->status()
       ->willReturn(TRUE)
@@ @@
     $pages['page1'] = $page1->reveal();

     // Set up a disabled page.
-    /** @var \Drupal\page_manager\PageInterface|\Prophecy\Prophecy\ProphecyInterface $page2 */
+    /** @var PageInterface|ProphecyInterface $page2 */
     $page2 = $this->prophesize(PageInterface::class);
     $page2->status()
       ->willReturn(FALSE)
@@ @@
   public function testAlterRoutesOverrideExisting($page_path, $existing_route_path, $requirements = []) {
     $route_name = 'test_route';
     // Set up a page with the same path as an existing route.
-    /** @var \Drupal\page_manager\PageInterface|\Prophecy\Prophecy\ProphecyInterface $page */
+    /** @var PageInterface|ProphecyInterface $page */
     $page = $this->prophesize(PageInterface::class);
     $page->status()
       ->willReturn(TRUE)
@@ @@
   public function testAlterRoutesOverrideExistingWithConfiguredParameters($page_path, $existing_route_path, $requirements = []) {
     $route_name = 'test_route';
     // Set up a page with the same path as an existing route.
-    /** @var \Drupal\page_manager\PageInterface|\Prophecy\Prophecy\ProphecyInterface $page */
+    /** @var PageInterface|ProphecyInterface $page */
     $page = $this->prophesize(PageInterface::class);
     $page->status()->willReturn(TRUE);
     $page->getPath()->willReturn($page_path);
@@ @@
   /**
    * Asserts that a route object has the expected properties.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to test.
    * @param string $expected_path
    *   The expected path for the route.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/page_manager/tests/src/Unit/PageContextTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\page_manager\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ProphecyInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\TypedData\TypedDataManager;
 use Drupal\page_manager\Event\PageManagerContextEvent;
@@ @@
  */
 abstract class PageContextTestBase extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The typed data manager.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManager|\Prophecy\Prophecy\ProphecyInterface
+   * @var TypedDataManager|ProphecyInterface
    */
   protected $typedDataManager;

@@ @@
   /**
    * The page entity.
    *
-   * @var \Drupal\page_manager\PageInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var PageInterface|ProphecyInterface
    */
   protected $page;

@@ @@
   /**
    * The event.
    *
-   * @var \Drupal\page_manager\Event\PageManagerContextEvent
+   * @var PageManagerContextEvent
    */
   protected $event;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->typedDataManager = $this->prophesize(TypedDataManager::class);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/page_manager/tests/src/Unit/PageBlockDisplayVariantTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\page_manager\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\Uuid\UuidInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Block\BlockManager;
@@ @@
  */
 class PageBlockDisplayVariantTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Tests the build() method when a block is empty.
    *
@@ @@
         'block2' => $block2->reveal(),
       ],
     ];
-    $block_collection = $this->getMockBuilder(BlockPluginCollection::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $block_collection = $this->createMock(BlockPluginCollection::class);
     $block_collection->expects($this->once())
       ->method('getAllByRegion')
       ->willReturn($blocks);
@@ @@
     $module_handler->alter();
     $uuid_generator = $this->prophesize(UuidInterface::class);
     $page_title = 'Page title';
-    $token = $this->getMockBuilder(Token::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $token = $this->createMock(Token::class);
     $block_manager = $this->prophesize(BlockManager::class);
     $condition_manager = $this->prophesize(ConditionManager::class);
     $variant_plugin = $this->getMockBuilder(PageBlockDisplayVariant::class)
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


9) modules/contrib/page_manager/tests/src/Unit/PageAccessTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\page_manager\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use PHPUnit\Framework\MockObject\MockObject;
+use Prophecy\Prophecy\ProphecyInterface;
+use Drupal\Core\Entity\EntityAccessControlHandlerInterface;
 use Drupal\Core\Cache\Context\CacheContextsManager;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
  */
 class PageAccessTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The context handler.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var ContextHandlerInterface|MockObject
    */
   protected $contextHandler;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var EntityTypeInterface|MockObject
    */
   protected $entityType;

   /**
-   * @var \Drupal\Core\Cache\Context\CacheContextsManager|\Prophecy\Prophecy\ProphecyInterface
+   * @var CacheContextsManager|ProphecyInterface
    */
   protected $cacheContextsManager;

   /**
-   * @var \Drupal\Core\Entity\EntityAccessControlHandlerInterface
+   * @var EntityAccessControlHandlerInterface
    */
   protected $pageAccess;

@@ @@
   /**
    * @covers ::__construct
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->contextHandler = $this->prophesize(ContextHandlerInterface::class);
     $this->entityType = $this->prophesize(EntityTypeInterface::class);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/page_manager/tests/src/Unit/LanguageInterfaceContextTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\page_manager\Unit;

+use Drupal\Core\Plugin\Context\ContextRepositoryInterface;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Plugin\Context\Context;
 use Drupal\Core\Plugin\Context\ContextDefinition;
@@ @@
   /**
    * The context repository service.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

-    $language_manager = $this->getMockBuilder('\Drupal\Core\Language\LanguageManagerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $language_manager = $this->createMock('\Drupal\Core\Language\LanguageManagerInterface');

     $context = new Context(new ContextDefinition('language', 'current_language_context'), $language_manager->getCurrentLanguage(LanguageInterface::TYPE_INTERFACE));

-    $this->contextRepository = $this->getMockBuilder('\Drupal\Core\Plugin\Context\ContextRepositoryInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->contextRepository = $this->createMock('\Drupal\Core\Plugin\Context\ContextRepositoryInterface');
     $this->contextRepository->expects($this->once())
       ->method('getRunTimeContexts')
       ->willReturn(['@language.current_language_context:language_interface' => $context]);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/page_manager/tests/src/Unit/CurrentUserContextTest.php:22

    ---------- begin diff ----------
@@ @@
    * @covers ::onPageContext
    */
   public function testOnPageContext() {
-    $currentUser = $this->getMockBuilder(AccountProxyInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $currentUser = $this->createMock(AccountProxyInterface::class);

-    $contextRepository = $this->getMockBuilder(LazyContextRepository::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $contextRepository = $this->createMock(LazyContextRepository::class);
     $currentUserContext = new EntityContext(new EntityContextDefinition('user', 'current_user_context'), $currentUser->getAccount());
     $contextRepository->expects($this->once())
       ->method('getRunTimeContexts')
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


12) modules/contrib/page_manager/tests/src/Unit/ContextMapperTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\page_manager\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ProphecyInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Plugin\Context\Context;
@@ @@
  */
 class ContextMapperTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The typed data manager.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManager|\Prophecy\Prophecy\ProphecyInterface
+   * @var TypedDataManager|ProphecyInterface
    */
   protected $typedDataManager;

   /**
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var EntityRepositoryInterface|ProphecyInterface
    */
   protected $entityRepository;

   /**
-   * @var \Drupal\page_manager\ContextMapper
+   * @var ContextMapper
    */
   protected $staticContext;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->typedDataManager = $this->prophesize(TypedDataManager::class);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/page_manager/tests/src/Kernel/SerializationTest.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // @todo: Remove the silent dependency on user.
@@ @@
   /**
    * Create a basic page.
    *
-   * @return \Drupal\page_manager\Entity\Page
+   * @return Page
    */
   protected function createPage() {
     return Page::create([
@@ @@
   /**
    * Create a basic page variant.
    *
-   * @return \Drupal\page_manager\Entity\PageVariant
+   * @return PageVariant
    */
   protected function createPageVariant() {
     return PageVariant::create([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/page_manager/tests/src/Kernel/PageManagerRoutingTest.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // If we are on Drupal 8.8 or later, we need to install the path_alias
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/page_manager/tests/src/Kernel/PageConfigSchemaTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\page_manager\Kernel;

+use Drupal\page_manager\PageInterface;
+use Drupal\page_manager\Plugin\DisplayVariant\PageBlockDisplayVariant;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\page_manager\Entity\Page;
 use Drupal\page_manager\Entity\PageVariant;
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['page_manager']);
   }
@@ @@
     $label = 'Node view';
     $description = 'When enabled, this overrides the default Drupal behavior for displaying nodes at <em>/node/{node}</em>. If you add variants, you may use selection criteria such as node type or language or user access to provide different views of nodes. If no variant is selected, the default Drupal node view will be used. This page only affects nodes viewed as pages, it will not affect nodes viewed in lists or at other locations.';

-    /** @var \Drupal\page_manager\PageInterface $page */
+    /** @var PageInterface $page */
     $page = Page::load($id);

     // Add an access condition.
@@ @@
     ]);
     $page_variant->save();
     $page->addVariant($page_variant);
-    /** @var \Drupal\page_manager\Plugin\DisplayVariant\PageBlockDisplayVariant $variant_plugin */
+    /** @var PageBlockDisplayVariant $variant_plugin */
     $variant_plugin = $page_variant->getVariantPlugin();

     // Add a selection condition.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/page_manager/tests/src/FunctionalJavascript/PageBlockDisplayVariantContextualLinksTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\page_manager\FunctionalJavascript;

+use Drupal\block_content\BlockContentInterface;
 use Drupal\block_content\Entity\BlockContent;
 use Drupal\block_content\Entity\BlockContentType;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
@@ @@
   /**
    * Testing content block.
    *
-   * @var \Drupal\block_content\BlockContentInterface
+   * @var BlockContentInterface
    */
   protected $contentBlock;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     BlockContentType::create(['id' => 'test_block_type'])->save();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/page_manager/tests/src/FunctionalJavascript/LayoutBuilderDisplayVariantTest.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalLogin($this->createUser(array_keys($this->container->get('user.permissions')
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/page_manager/tests/src/Functional/Update/UpdateContextName.php:31

    ---------- begin diff ----------
@@ @@
       ->load('test_page-block_display-0');

     $selection_criteria = $pageVariant->get('selection_criteria');
-    $this->assertEqual($selection_criteria[0]['context_mapping']['user'], '@user.current_user_context:current_user');
+    $this->assertEquals($selection_criteria[0]['context_mapping']['user'], '@user.current_user_context:current_user');

     $variant_settings = $pageVariant->get('variant_settings');
-    $this->assertEqual($variant_settings['blocks']['29550d0e-39f1-4fb9-bad6-c390dda5bd00']['context_mapping']['entity'], '@user.current_user_context:current_user');
+    $this->assertEquals($variant_settings['blocks']['29550d0e-39f1-4fb9-bad6-c390dda5bd00']['context_mapping']['entity'], '@user.current_user_context:current_user');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


19) modules/contrib/page_manager/tests/src/Functional/PagePlaceholderTest.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalLogin($this->drupalCreateUser(['administer pages']));
   }
@@ @@
     // Access the page callback and check whether string is printed.
     $page_string = 'test-page';
     $this->drupalGet('page-manager-test/' . $page_string);
-    $this->assertResponse(200);
-    $this->assertCacheTag('page_manager_route_name:page_manager_test.page_view');
-    $this->assertText('Hello World! Page ' . $page_string);
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'page_manager_route_name:page_manager_test.page_view');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Hello World! Page ' . $page_string);

     // Create a new page entity with the same path as in the test module.
     $page = Page::create([
@@ @@

     // Access the page callback again and check that now the text is not there.
     $this->drupalGet('page-manager-test/' . $page_string);
-    $this->assertResponse(200);
-    $this->assertCacheTag('page_manager_route_name:page_manager_test.page_view');
-    $this->assertNoText('Hello World! Page ' . $page_string);
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'page_manager_route_name:page_manager_test.page_view');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Hello World! Page ' . $page_string);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertCacheTagRector
 * AssertNoTextRector
 * AssertResponseRector
 * AssertTextRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/page_manager/tests/src/Functional/PageNodeSelectionTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\page_manager\Functional;

+use Drupal\page_manager\PageVariantInterface;
+use Drupal\page_manager\Plugin\DisplayVariant\PageBlockDisplayVariant;
 use Drupal\page_manager\Entity\PageVariant;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalCreateContentType(['type' => 'article', 'name' => 'Article']);
@@ @@
     $node2 = $this->drupalCreateNode(['title' => '<em>First</em> & <Second>', 'type' => 'article']);
     $node3 = $this->drupalCreateNode(['type' => 'article']);
     $this->drupalGet('node/' . $node1->id());
-    $this->assertResponse(200);
-    $this->assertText($node1->label());
-    $this->assertTitle($node1->label() . ' | Drupal');
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($node1->label());
+    $this->assertSession()->titleEquals($node1->label() . ' | Drupal');
     $this->drupalGet('node/' . $node2->id());
-    $this->assertResponse(200);
-    $this->assertCacheTag('page_manager_route_name:entity.node.canonical');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'page_manager_route_name:entity.node.canonical');
     $expected_title = '&lt;em&gt;First&lt;/em&gt; &amp; &lt;Second&gt;';
-    $this->assertRaw($expected_title);
-    $this->assertTitle(html_entity_decode($expected_title) . ' | Drupal');
+    $this->assertSession()->responseContains($expected_title);
+    $this->assertSession()->titleEquals(html_entity_decode($expected_title) . ' | Drupal');

     // Create a new variant to always return 404, the node_view page exists by
     // default.
@@ @@
     $this->triggerRouterRebuild();

     $this->drupalGet('node/' . $node1->id());
-    $this->assertResponse(404);
-    $this->assertCacheTag('page_manager_route_name:entity.node.canonical');
-    $this->assertNoText($node1->label());
+    $this->assertSession()->statusCodeEquals(404);
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'page_manager_route_name:entity.node.canonical');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($node1->label());
     $this->drupalGet('node/' . $node2->id());
-    $this->assertResponse(404);
-    $this->assertNoText($node2->label());
+    $this->assertSession()->statusCodeEquals(404);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($node2->label());

     // Add a new variant.
-    /** @var \Drupal\page_manager\PageVariantInterface $block_page_variant */
+    /** @var PageVariantInterface $block_page_variant */
     $block_page_variant = PageVariant::create([
       'variant' => 'block_display',
       'id' => 'block_page_first',
@@ @@
     $uuid = $block_page_plugin->getConfiguration()['uuid'];
     $block_page_plugin->setConfiguration(['page_title' => '[node:title]']);
     $second_uuid = $block_page_plugin->getConfiguration()['uuid'];
-    $this->assertEqual($uuid, $second_uuid);
-    /** @var \Drupal\page_manager\Plugin\DisplayVariant\PageBlockDisplayVariant $block_page_plugin */
+    $this->assertEquals($uuid, $second_uuid);
+    /** @var PageBlockDisplayVariant $block_page_plugin */
     $block_page_plugin->addBlock([
       'id' => 'entity_view:node',
       'label' => 'Entity view (Content)',
@@ @@

     // The page node will 404, but the article node will display the variant.
     $this->drupalGet('node/' . $node1->id());
-    $this->assertResponse(404);
-    $this->assertNoText($node1->label());
+    $this->assertSession()->statusCodeEquals(404);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($node1->label());

     $this->drupalGet('node/' . $node2->id());
-    $this->assertResponse(200);
-    $this->assertTitle(html_entity_decode($expected_title) . ' | Drupal');
-    $this->assertText($node2->body->value);
-    $this->assertRaw('<h1 class="page-title">' . $expected_title . '</h1>');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->titleEquals(html_entity_decode($expected_title) . ' | Drupal');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($node2->body->value);
+    $this->assertSession()->responseContains('<h1 class="page-title">' . $expected_title . '</h1>');

     // Test cacheability metadata.
     $this->drupalGet('node/' . $node3->id());
-    $this->assertTitle($node3->label() . ' | Drupal');
-    $this->assertText($node3->body->value);
-    $this->assertNoText($node2->label());
+    $this->assertSession()->titleEquals($node3->label() . ' | Drupal');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($node3->body->value);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($node2->label());

     // Ensure that setting the same title directly in the block display results
     // in the same output.
@@ @@
     $block_page_plugin->setConfiguration(['page_title' => '<em>First</em> & <Second>']);
     $block_page_variant->save();
     $this->drupalGet('node/' . $node2->id());
-    $this->assertResponse(200);
-    $this->assertTitle(html_entity_decode($expected_title) . ' | Drupal');
-    $this->assertRaw('<h1 class="page-title">' . $expected_title . '</h1>');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->titleEquals(html_entity_decode($expected_title) . ' | Drupal');
+    $this->assertSession()->responseContains('<h1 class="page-title">' . $expected_title . '</h1>');

     // Ensure this doesn't affect the /node/add page.
     $this->drupalGet('node/add');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertCacheTagRector
 * AssertEqualRector
 * AssertNoTextRector
 * AssertRawRector
 * AssertResponseRector
 * AssertTextRector
 * AssertTitleRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/page_manager/tests/src/Functional/PageNodeAccessTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\page_manager\Functional;

+use Drupal\page_manager\PageInterface;
 use Drupal\page_manager\Entity\Page;
 use Drupal\page_manager\Entity\PageVariant;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   public static $modules = ['page_manager', 'node', 'user'];

   /**
-   * @var \Drupal\page_manager\PageInterface
+   * @var PageInterface
    */
   protected $page;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Remove the 'access content' permission from anonymous and auth users.
@@ @@

     $this->drupalLogin($this->drupalCreateUser(['access content']));
     $this->drupalGet('node/' . $node1->id());
-    $this->assertResponse(200);
-    $this->assertText($node1->label());
-    $this->assertTitle($node1->label() . ' | Drupal');
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($node1->label());
+    $this->assertSession()->titleEquals($node1->label() . ' | Drupal');

     // Add a variant and an access condition.
-    /** @var \Drupal\page_manager\Entity\PageVariant $page_variant */
+    /** @var PageVariant $page_variant */
     $page_variant = PageVariant::create([
       'variant' => 'block_display',
       'id' => 'block_page',
@@ @@

     $this->drupalLogout();
     $this->drupalGet('node/' . $node1->id());
-    $this->assertResponse(403);
-    $this->assertNoText($node1->label());
-    $this->assertTitle('Access denied | Drupal');
+    $this->assertSession()->statusCodeEquals(403);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($node1->label());
+    $this->assertSession()->titleEquals('Access denied | Drupal');

     $this->drupalLogin($this->drupalCreateUser());
     $this->drupalGet('node/' . $node1->id());
-    $this->assertResponse(403);
-    $this->assertNoText($node1->label());
-    $this->assertTitle('Access denied | Drupal');
+    $this->assertSession()->statusCodeEquals(403);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($node1->label());
+    $this->assertSession()->titleEquals('Access denied | Drupal');

     $this->drupalLogin($this->drupalCreateUser(['access content']));
     $this->drupalGet('node/' . $node1->id());
-    $this->assertResponse(200);
-    $this->assertNoText($node1->label());
-    $this->assertTitle('The overridden page | Drupal');
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($node1->label());
+    $this->assertSession()->titleEquals('The overridden page | Drupal');

     $this->drupalGet('node/' . $node2->id());
-    $this->assertResponse(403);
-    $this->assertNoText($node2->label());
-    $this->assertTitle('Access denied | Drupal');
+    $this->assertSession()->statusCodeEquals(403);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($node2->label());
+    $this->assertSession()->titleEquals('Access denied | Drupal');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertResponseRector
 * AssertTextRector
 * AssertTitleRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/page_manager/tests/src/Functional/PageManagerTranslationIntegrationTest.php:57

    ---------- begin diff ----------
@@ @@

     $node = $this->drupalCreateNode(['type' => 'article']);
     $this->drupalGet('node/' . $node->id());
-    $this->assertResponse(200);
-    $this->assertText($node->label());
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($node->label());
     $this->clickLink('Translate');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // Create a new variant.
     $http_status_variant = PageVariant::create([
@@ @@
     $this->triggerRouterRebuild();

     $this->drupalGet('node/' . $node->id());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->clickLink('Translate');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * AssertTextRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


23) modules/contrib/page_manager/tests/src/Functional/PageManagerConfigTranslationTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     ConfigurableLanguage::createFromLangcode('de')->save();
@@ @@
    */
   public function testTranslation() {
     $this->drupalGet('admin/config/regional/config-translation');
-    $this->assertLinkByHref('admin/config/regional/config-translation/page');
-    $this->assertLinkByHref('admin/config/regional/config-translation/page_variant');
+    $this->assertSession()->linkByHrefExists('admin/config/regional/config-translation/page');
+    $this->assertSession()->linkByHrefExists('admin/config/regional/config-translation/page_variant');

     $this->drupalGet('admin/config/regional/config-translation/page');
-    $this->assertText('Node view');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Node view');
     $this->clickLink('Translate');
     $this->clickLink('Add');
-    $this->assertField('translation[config_names][page_manager.page.node_view][label]');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldExists('translation[config_names][page_manager.page.node_view][label]');

     $this->drupalGet('admin/config/regional/config-translation/page_variant');
-    $this->assertText('HTTP status code');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('HTTP status code');
     $this->clickLink('Translate');
     $this->clickLink('Add');
-    $this->assertField('translation[config_names][page_manager.page_variant.http_status_code][label]');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldExists('translation[config_names][page_manager.page_variant.http_status_code][label]');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldRector
 * AssertLinkByHrefRector
 * AssertTextRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/page_manager/tests/src/Functional/FrontPageTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\page_manager\Functional;

+use Drupal\page_manager\PageVariantInterface;
 use Drupal\block\Entity\Block;
 use Drupal\page_manager\Entity\Page;
 use Drupal\page_manager\Entity\PageVariant;
@@ @@
       'path' => '/myfront',
     ]);
     $page->save();
-    /** @var \Drupal\page_manager\PageVariantInterface $page_variant */
+    /** @var PageVariantInterface $page_variant */
     $page_variant = PageVariant::create([
       'variant' => 'block_display',
       'id' => 'block_page',
@@ @@
     // The title should default to "Home" on the front page.
     // @todo This gives 404 :(
     $this->drupalGet('');
-    $this->assertTitle('Home | Drupal');
+    $this->assertSession()->titleEquals('Home | Drupal');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertTitleRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


25) modules/contrib/page_manager/tests/modules/page_manager_routing_test/src/Routing/RouteSubscriber.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Alters the existing route collection.
    *
-   * @param \Drupal\Core\Routing\RouteBuildEvent $event
+   * @param RouteBuildEvent $event
    *   The route build event.
    */
   public function beforePageManagerRoutes(RouteBuildEvent $event) {
@@ @@
   /**
    * Alters the existing route collection.
    *
-   * @param \Drupal\Core\Routing\RouteBuildEvent $event
+   * @param RouteBuildEvent $event
    *   The route build event.
    */
   public function afterPageManagerRoutes(RouteBuildEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


26) modules/contrib/page_manager/src/Routing/VariantRouteFilter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager\Routing;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\page_manager\PageVariantInterface;
 use Drupal\Component\Plugin\Exception\ContextException;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The page variant storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $pageVariantStorage;

@@ @@
   /**
    * The current path stack.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPath;

@@ @@
   /**
    * The current request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * Constructs a new VariantRouteFilter.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Path\CurrentPathStack $current_path
+   * @param CurrentPathStack $current_path
    *   The current path stack.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The current request stack.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, CurrentPathStack $current_path, RequestStack $request_stack) {
@@ @@
   /**
    * Gets the route name of the first valid variant.
    *
-   * @param \Symfony\Component\Routing\Route[] $routes
+   * @param Route[] $routes
    *   An array of sorted routes.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   A current request.
    *
    * @return string|null
@@ @@
   /**
    * Sorts routes based on the variant weight.
    *
-   * @param \Symfony\Component\Routing\Route[] $unsorted_routes
+   * @param Route[] $unsorted_routes
    *   An array of unsorted routes.
    *
-   * @return \Symfony\Component\Routing\Route[]
+   * @return Route[]
    *   An array of sorted routes.
    */
   protected function sortRoutes(array $unsorted_routes) {
@@ @@
    *   TRUE if the route is valid, FALSE otherwise.
    */
   protected function checkPageVariantAccess($page_variant_id) {
-    /** @var \Drupal\page_manager\PageVariantInterface $variant */
+    /** @var PageVariantInterface $variant */
     $variant = $this->pageVariantStorage->load($page_variant_id);

     try {
@@ @@
    * This is be done because route filters run before request attributes are
    * populated.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route.
    * @param string $name
    *   The route name.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
    * @return array|false
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


27) modules/contrib/page_manager/src/Routing/RouteEnhancerCollectorTrait.php:11

    ---------- begin diff ----------
@@ @@
 trait RouteEnhancerCollectorTrait {

   /**
-   * @var \Drupal\Core\Routing\EnhancerInterface[]
+   * @var EnhancerInterface[]
    */
   protected $enhancers = [];

@@ @@
   /**
    * Cached sorted list of enhancers.
    *
-   * @var \Drupal\Core\Routing\EnhancerInterface[]
+   * @var EnhancerInterface[]
    */
   protected $sortedEnhancers = [];

@@ @@
    * The order of the enhancers is determined by the priority, the higher the
    * value, the earlier the enhancer is run.
    *
-   * @param \Drupal\Core\Routing\EnhancerInterface $enhancer
+   * @param EnhancerInterface $enhancer
    * @param int $priority
    *
    * @return $this
@@ @@
   /**
    * Sorts the enhancers and flattens them.
    *
-   * @return \Drupal\Core\Routing\EnhancerInterface[]
+   * @return EnhancerInterface[]
    *   The enhancers ordered by priority.
    */
   protected function getRouteEnhancers() {
@@ @@
    *
    * The highest priority number is the highest priority (reverse sorting).
    *
-   * @return \Drupal\Core\Routing\EnhancerInterface[]
+   * @return EnhancerInterface[]
    *   The sorted enhancers.
    */
   protected function sortRouteEnhancers() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


28) modules/contrib/page_manager/src/Routing/RouteAttributes.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Extracts all of the raw attributes from a path for a given route.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route object.
    * @param string $name
    *   The route name.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


29) modules/contrib/page_manager/src/Routing/PageManagerRoutes.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager\Routing;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\RouteCompiler;
@@ @@
   /**
    * The entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $entityStorage;

@@ @@
   /**
    * The cache tags invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;

@@ @@
   /**
    * Constructs a new PageManagerRoutes.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The cache tags invalidator.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, CacheTagsInvalidatorInterface $cache_tags_invalidator) {
@@ @@
    */
   protected function alterRoutes(RouteCollection $collection) {
     foreach ($this->entityStorage->loadMultiple() as $entity_id => $entity) {
-      /** @var \Drupal\page_manager\PageInterface $entity */
-
+      /** @var PageInterface $entity */
       // If the page is disabled skip making a route for it.
       if (!$entity->status() || !$entity->getVariants()) {
         continue;
@@ @@
   /**
    * Finds the overridden route name.
    *
-   * @param \Drupal\page_manager\PageInterface $entity
+   * @param PageInterface $entity
    *   The page entity.
-   * @param \Symfony\Component\Routing\RouteCollection $collection
+   * @param RouteCollection $collection
    *   The route collection.
    *
    * @return string|null
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/page_manager/src/Plugin/SectionStorage/PageManagerSectionStorage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager\Plugin\SectionStorage;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The sample entity generator.
    *
-   * @var \Drupal\layout_builder\Entity\SampleEntityGeneratorInterface
+   * @var SampleEntityGeneratorInterface
    */
   protected $sampleEntityGenerator;

@@ @@
   /**
    * The tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @var SharedTempStoreFactory
    */
   protected $tempstore;

@@ @@
   /**
    * The entity bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\layout_builder\Entity\SampleEntityGeneratorInterface $sample_entity_generator
+   * @param SampleEntityGeneratorInterface $sample_entity_generator
    *   The sample entity generator.
-   * @param \Drupal\Core\TempStore\SharedTempStoreFactory $tempstore
+   * @param SharedTempStoreFactory $tempstore
    *   The tempstore factory.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity bundle information.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, SampleEntityGeneratorInterface $sample_entity_generator, SharedTempStoreFactory $tempstore, EntityTypeBundleInfoInterface $entity_type_bundle_info) {
@@ @@
   /**
    * Gets the page variant entity.
    *
-   * @return \Drupal\page_manager\Entity\PageVariant
+   * @return PageVariant
    *   The page variant entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function getPageVariant() {
     return $this->getContextValue('entity');
@@ @@
    * @return bool
    *   TRUE if Layout Builder is enabled, FALSE otherwise.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function isLayoutBuilderEnabled() {
     return $this->getContextValue('entity')->getVariantPlugin() instanceof LayoutBuilderDisplayVariant;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/page_manager/src/Plugin/LayoutBuilderStorage/PageManagerLayoutBuilderStorage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager\Plugin\LayoutBuilderStorage;

+use Drupal\page_manager\PageVariantInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
    * @param string $id
    *   The page variant entity's id.
    *
-   * @return \Drupal\page_manager\PageVariantInterface
+   * @return PageVariantInterface
    *   The variant object.
    *
    * @throws \Exception
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/page_manager/src/Plugin/DisplayVariant/PageBlockDisplayVariant.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager\Plugin\DisplayVariant;

+use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\Component\Render\HtmlEscapedText;
 use Drupal\Component\Uuid\UuidInterface;
 use Drupal\Component\Utility\Html;
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Plugin\Context\ContextHandlerInterface $context_handler
+   * @param ContextHandlerInterface $context_handler
    *   The context handler.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid_generator
+   * @param UuidInterface $uuid_generator
    *   The UUID generator.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
-   * @param \Drupal\Core\Block\BlockManager $block_manager
+   * @param BlockManager $block_manager
    *   The block manager.
-   * @param \Drupal\Core\Condition\ConditionManager $condition_manager
+   * @param ConditionManager $condition_manager
    *   The condition manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ContextHandlerInterface $context_handler, AccountInterface $account, UuidInterface $uuid_generator, Token $token, BlockManager $block_manager, ConditionManager $condition_manager, ModuleHandlerInterface $module_handler) {
@@ @@
       $build[$region]['#prefix'] = '<div class="' . $region_name . '">';
       $build[$region]['#suffix'] = '</div>';

-      /** @var \Drupal\Core\Block\BlockPluginInterface[] $blocks */
+      /** @var BlockPluginInterface[] $blocks */
       $weight = 0;
       foreach ($blocks as $block_id => $block) {
         if ($block instanceof ContextAwarePluginInterface) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/page_manager/src/Plugin/DisplayVariant/LayoutBuilderDisplayVariant.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager\Plugin\DisplayVariant;

+use Drupal\Component\Plugin\Context\ContextInterface;
+use Drupal\Core\Layout\LayoutInterface;
 use Drupal\Core\Display\ContextAwareVariantInterface;
 use Drupal\Core\Display\VariantBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
    *
    * This is only used on runtime, and is not stored.
    *
-   * @var \Drupal\Component\Plugin\Context\ContextInterface[]
+   * @var ContextInterface[]
    */
   protected $contexts = [];

@@ @@
   /**
    * Returns instance of the layout plugin used by this page variant.
    *
-   * @return \Drupal\Core\Layout\LayoutInterface
+   * @return LayoutInterface
    *   A layout plugin instance.
    */
   public function getLayout() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/page_manager/src/Plugin/DisplayVariant/HttpStatusCodeDisplayVariant.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager\Plugin\DisplayVariant;

+use Drupal\Component\Plugin\Context\ContextInterface;
 use Drupal\Core\Display\ContextAwareVariantInterface;
 use Drupal\Core\Display\VariantBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The alias manager.
    *
-   * @var \Drupal\path_alias\AliasManagerInterface
+   * @var AliasManagerInterface
    */
   protected $aliasManager;

@@ @@
    *
    * This is only used on runtime, and is not stored.
    *
-   * @var \Drupal\Component\Plugin\Context\ContextInterface[]
+   * @var ContextInterface[]
    */
   protected $contexts = [];

@@ @@
   /**
    * Gets the contexts.
    *
-   * @return \Drupal\Component\Plugin\Context\ContextInterface[]
+   * @return ContextInterface[]
    *   An array of set contexts, keyed by context name.
    */
   public function getContexts() {
@@ @@
   /**
    * Sets the contexts.
    *
-   * @param \Drupal\Component\Plugin\Context\ContextInterface[] $contexts
+   * @param ContextInterface[] $contexts
    *   An array of contexts, keyed by context name.
    */
   public function setContexts(array $contexts) {
@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\path_alias\AliasManagerInterface $alias_manager
+   * @param AliasManagerInterface $alias_manager
    *   The alias manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, AliasManagerInterface $alias_manager) {
@@ @@
           continue;
         }

-        /** @var \Drupal\Component\Plugin\Context\ContextInterface $context */
+        /** @var ContextInterface $context */
         $context = $contexts[$param];
         $value = $this->variableToString($context->getContextValue());
         if ($value === FALSE) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/page_manager/src/PageVariantInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager;

+use Drupal\Core\Display\VariantInterface;
+use Drupal\Core\Plugin\Context\ContextInterface;
+use Drupal\Core\Condition\ConditionInterface;
+use Drupal\Core\Condition\ConditionPluginCollection;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityWithPluginCollectionInterface;

@@ @@
   /**
    * Gets the variant plugin.
    *
-   * @return \Drupal\Core\Display\VariantInterface
+   * @return VariantInterface
    */
   public function getVariantPlugin();

@@ @@
   /**
    * Gets the page this variant is on.
    *
-   * @return \Drupal\page_manager\PageInterface
+   * @return PageInterface
    */
   public function getPage();

@@ @@
    * This is mainly useful for setting an unsaved page on a page variant so you
    * can continue to work with it prior to saving.
    *
-   * @param \Drupal\page_manager\PageInterface $page
+   * @param PageInterface $page
    *   The page entity object this variant is associated with.
    *
    * @return $this
@@ @@
   /**
    * Gets the values for all defined contexts.
    *
-   * @return \Drupal\Core\Plugin\Context\ContextInterface[]
+   * @return ContextInterface[]
    *   An array of set context values, keyed by context name.
    */
   public function getContexts();
@@ @@
   /**
    * Gets the selection condition collection.
    *
-   * @return \Drupal\Core\Condition\ConditionInterface[]|\Drupal\Core\Condition\ConditionPluginCollection
+   * @return ConditionInterface[]|ConditionPluginCollection
    */
   public function getSelectionConditions();

@@ @@
    * @param string $condition_id
    *   The ID of the condition.
    *
-   * @return \Drupal\Core\Condition\ConditionInterface
+   * @return ConditionInterface
    */
   public function getSelectionCondition($condition_id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


36) modules/contrib/page_manager/src/PageInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager;

+use Drupal\Core\Condition\ConditionInterface;
+use Drupal\Core\Condition\ConditionPluginCollection;
 use Drupal\Component\Plugin\Context\ContextInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityWithPluginCollectionInterface;
@@ @@
   /**
    * Adds a variant to this page.
    *
-   * @param \Drupal\page_manager\PageVariantInterface $variant
+   * @param PageVariantInterface $variant
    *   A page variant entity.
    *
    * @return $this
@@ @@
    * @param string $variant_id
    *   The variant ID.
    *
-   * @return \Drupal\page_manager\PageVariantInterface
+   * @return PageVariantInterface
    *   The variant object.
    */
   public function getVariant($variant_id);
@@ @@
   /**
    * Returns the variants available for the entity.
    *
-   * @return \Drupal\page_manager\PageVariantInterface[]
+   * @return PageVariantInterface[]
    *   An array of the variants.
    */
   public function getVariants();
@@ @@
   /**
    * Returns the conditions used for determining access for this page entity.
    *
-   * @return \Drupal\Core\Condition\ConditionInterface[]|\Drupal\Core\Condition\ConditionPluginCollection
+   * @return ConditionInterface[]|ConditionPluginCollection
    *   An array of configured condition plugins.
    */
   public function getAccessConditions();
@@ @@
    * @param string $condition_id
    *   The access condition ID.
    *
-   * @return \Drupal\Core\Condition\ConditionInterface
+   * @return ConditionInterface
    *   The access condition object.
    */
   public function getAccessCondition($condition_id);
@@ @@
    *
    * @param string $name
    *   The name of the context.
-   * @param \Drupal\Component\Plugin\Context\ContextInterface $value
+   * @param ContextInterface $value
    *   The context to add.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


37) modules/contrib/page_manager/src/Form/LayoutBuilderForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager\Form;

+use Drupal\layout_builder\SectionStorageInterface;
+use Drupal\page_manager\PageVariantInterface;
+use Drupal\page_manager\Entity\PageVariant;
+use Drupal\page_manager\Plugin\DisplayVariant\LayoutBuilderDisplayVariant;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\Context\EntityContext;
@@ @@
   /**
    * Layout tempstore repository.
    *
-   * @var \Drupal\layout_builder\LayoutTempstoreRepositoryInterface
+   * @var LayoutTempstoreRepositoryInterface
    */
   protected $layoutTempstoreRepository;

@@ @@
   /**
    * The Section Storage Manager.
    *
-   * @var \Drupal\layout_builder\SectionStorage\SectionStorageManager
+   * @var SectionStorageManager
    */
   protected $sectionStorageManager;

@@ @@
   /**
    * The section storage.
    *
-   * @var \Drupal\layout_builder\SectionStorageInterface
+   * @var SectionStorageInterface
    */
   protected $sectionStorage;

@@ @@
   /**
    * The tempstore directory.
    *
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @var SharedTempStoreFactory
    */
   protected $tempstore;

@@ @@
   /**
    * Constructs a new LayoutBuilderForm.
    *
-   * @param \Drupal\layout_builder\LayoutTempstoreRepositoryInterface $layout_tempstore_repository
+   * @param LayoutTempstoreRepositoryInterface $layout_tempstore_repository
    *   The layout tempstore repository.
-   * @param \Drupal\layout_builder\SectionStorage\SectionStorageManager $section_storage_manager
+   * @param SectionStorageManager $section_storage_manager
    *   The section storage manager.
-   * @param \Drupal\Core\TempStore\SharedTempStoreFactory $tempstore
+   * @param SharedTempStoreFactory $tempstore
    *   The tempstore factory.
    */
   public function __construct(LayoutTempstoreRepositoryInterface $layout_tempstore_repository, SectionStorageManager $section_storage_manager, SharedTempStoreFactory $tempstore) {
@@ @@
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
     $cached_values = $form_state->getTemporaryValue('wizard');
-    /** @var \Drupal\page_manager\PageVariantInterface $page_variant */
+    /** @var PageVariantInterface $page_variant */
     $page_variant = $cached_values['page_variant'];

     // If this is a new variant, put it in the tempstore so that we can
@@ @@
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $cached_values = $form_state->getTemporaryValue('wizard');

-    /** @var \Drupal\page_manager\Entity\PageVariant $page_variant */
+    /** @var PageVariant $page_variant */
     $page_variant = $this->sectionStorage->getContextValue('entity');

     // Pass down the variant settings and let the plugin handle saving it.
-    /** @var \Drupal\page_manager\Plugin\DisplayVariant\LayoutBuilderDisplayVariant $variant_plugin */
+    /** @var LayoutBuilderDisplayVariant $variant_plugin */
     $variant_plugin = $cached_values['plugin'];
     $variant_plugin->setConfiguration($page_variant->get('variant_settings'));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/page_manager/src/EventSubscriber/RouteParamContext.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * Constructs a new CurrentUserContext.
    *
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
    */
   public function __construct(RouteProviderInterface $route_provider, RequestStack $request_stack) {
@@ @@
   /**
    * Adds in the current user as a context.
    *
-   * @param \Drupal\page_manager\Event\PageManagerContextEvent $event
+   * @param PageManagerContextEvent $event
    *   The page entity context event.
    */
   public function onPageContext(PageManagerContextEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


39) modules/contrib/page_manager/src/EventSubscriber/RouteNameResponseSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager\EventSubscriber;

+use Drupal\Core\Routing\RouteMatchInterface;
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Cache\CacheableResponseInterface;
 use Drupal\Core\Routing\StackedRouteMatchInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * The master route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * Constructs a new RouteNameResponseSubscriber.
    *
-   * @param \Drupal\Core\Routing\StackedRouteMatchInterface $route_match
+   * @param StackedRouteMatchInterface $route_match
    *   The current route match.
    */
   public function __construct(StackedRouteMatchInterface $route_match) {
@@ @@
   /**
    * Adds the route name as a cache tag to all cacheable responses.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The event to process.
    */
-  public function onResponse(FilterResponseEvent $event) {
+  public function onResponse(ResponseEvent $event) {
     $response = $event->getResponse();
     if ($response instanceof CacheableResponseInterface) {
       $cacheability_metadata = $response->getCacheableMetadata();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


40) modules/contrib/page_manager/src/EventSubscriber/LanguageInterfaceContext.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The context repository service.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;

@@ @@
   /**
    * Creates LanguageInterfaceContext object.
    *
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $context_repository
+   * @param ContextRepositoryInterface $context_repository
    *   The context repository service.
    */
   public function __construct(ContextRepositoryInterface $context_repository) {
@@ @@
   /**
    * Add the language_interface context onPageContext event.
    *
-   * @param \Drupal\page_manager\Event\PageManagerContextEvent $event
+   * @param PageManagerContextEvent $event
    *   The page entity context event.
    */
   public function onPageContext(PageManagerContextEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


41) modules/contrib/page_manager/src/EventSubscriber/CurrentUserContext.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager\EventSubscriber;

+use Drupal\Core\Plugin\Context\ContextRepositoryInterface;
 use Drupal\Core\Plugin\Context\LazyContextRepository;
 use Drupal\page_manager\Event\PageManagerContextEvent;
 use Drupal\page_manager\Event\PageManagerEvents;
@@ @@
   /**
    * Constructs a new CurrentUserContext.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;

@@ @@
   /**
    * Creates LanguageInterfaceContext object.
    *
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $context_repository
+   * @param ContextRepositoryInterface $context_repository
    *   The context repository service.
    */
   public function __construct(LazyContextRepository $context_repository) {
@@ @@
   /**
    * Adds in the current user as a context.
    *
-   * @param \Drupal\page_manager\Event\PageManagerContextEvent $event
+   * @param PageManagerContextEvent $event
    *   The page entity context event.
    */
   public function onPageContext(PageManagerContextEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


42) modules/contrib/page_manager/src/Event/PageManagerContextEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\page_manager\PageInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Wraps a page entity for event subscribers.
@@ @@
   /**
    * The page entity the context is gathered for.
    *
-   * @var \Drupal\page_manager\PageInterface
+   * @var PageInterface
    */
   protected $page;

@@ @@
   /**
    * Creates a new PageManagerContextEvent.
    *
-   * @param \Drupal\page_manager\PageInterface $page
+   * @param PageInterface $page
    *   The page entity.
    */
   public function __construct(PageInterface $page) {
@@ @@
   /**
    * Returns the page entity for this event.
    *
-   * @return \Drupal\page_manager\PageInterface
+   * @return PageInterface
    *   The page entity.
    */
   public function getPage() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


43) modules/contrib/page_manager/src/Entity/PageVariantViewBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager\Entity;

+use Drupal\page_manager\PageVariantInterface;
 use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
 use Drupal\Core\Display\ContextAwareVariantInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
    * {@inheritdoc}
    */
   public function view(EntityInterface $entity, $view_mode = 'full', $langcode = NULL) {
-    /** @var \Drupal\page_manager\PageVariantInterface $entity */
+    /** @var PageVariantInterface $entity */
     $variant_plugin = $entity->getVariantPlugin();
     if ($variant_plugin instanceof ContextAwareVariantInterface) {
       $variant_plugin->setContexts($entity->getContexts());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


44) modules/contrib/page_manager/src/Entity/PageVariantAccess.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager\Entity;

+use Drupal\page_manager\PageVariantInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Condition\ConditionAccessResolverTrait;
 use Drupal\Core\Entity\EntityAccessControlHandler;
@@ @@
   /**
    * The context handler.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   * @var ContextHandlerInterface
    */
   protected $contextHandler;

@@ @@
   /**
    * Constructs an access control handler instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Plugin\Context\ContextHandlerInterface $context_handler
+   * @param ContextHandlerInterface $context_handler
    *   The context handler.
    */
   public function __construct(EntityTypeInterface $entity_type, ContextHandlerInterface $context_handler) {
@@ @@
   /**
    * Wraps the context handler.
    *
-   * @return \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   * @return ContextHandlerInterface
    */
   protected function contextHandler() {
     return $this->contextHandler;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\page_manager\PageVariantInterface $entity */
+    /** @var PageVariantInterface $entity */
     if ($operation === 'view') {
       $contexts = $entity->getContexts();
       $conditions = $entity->getSelectionConditions();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


45) modules/contrib/page_manager/src/Entity/PageVariant.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager\Entity;

+use Drupal\Component\Plugin\Context\ContextInterface;
+use Drupal\Component\Plugin\LazyPluginCollection;
+use Drupal\Core\Routing\RouteBuilderInterface;
+use Drupal\Core\Condition\ConditionManager;
+use Drupal\page_manager\ContextMapperInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Condition\ConditionPluginCollection;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
@@ @@
   /**
    * The loaded page entity this page variant entity belongs to.
    *
-   * @var \Drupal\page_manager\PageInterface
+   * @var PageInterface
    */
   protected $pageEntity;

@@ @@
   /**
    * An array of collected contexts.
    *
-   * @var \Drupal\Component\Plugin\Context\ContextInterface[]|null
+   * @var ContextInterface[]|null
    */
   protected $contexts = NULL;

@@ @@
   /**
    * The plugin collection that holds the single variant plugin instance.
    *
-   * @var \Drupal\Core\Plugin\DefaultSingleLazyPluginCollection
+   * @var DefaultSingleLazyPluginCollection
    */
   protected $variantPluginCollection;

@@ @@
   /**
    * The plugin collection that holds the selection condition plugins.
    *
-   * @var \Drupal\Component\Plugin\LazyPluginCollection
+   * @var LazyPluginCollection
    */
   protected $selectionConditionCollection;

@@ @@
   /**
    * Get the plugin collection that holds the single variant plugin instance.
    *
-   * @return \Drupal\Core\Plugin\DefaultSingleLazyPluginCollection
+   * @return DefaultSingleLazyPluginCollection
    *   The plugin collection that holds the single variant plugin instance.
    */
   protected function getVariantPluginCollection() {
@@ @@
   /**
    * Wraps the route builder.
    *
-   * @return \Drupal\Core\Routing\RouteBuilderInterface
+   * @return RouteBuilderInterface
    *   An object for state storage.
    */
   protected static function routeBuilder() {
@@ @@
   /**
    * Wraps the condition plugin manager.
    *
-   * @return \Drupal\Core\Condition\ConditionManager
+   * @return ConditionManager
    *   The condition manager service.
    */
   protected function getConditionManager() {
@@ @@
   /**
    * Wraps the context mapper.
    *
-   * @return \Drupal\page_manager\ContextMapperInterface
+   * @return ContextMapperInterface
    *   The context mapper service.
    */
   protected function getContextMapper() {
@@ @@
   /**
    * Wraps the page entity storage.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   The Page entity storage service.
    */
   protected function getPageStorage() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


46) modules/contrib/page_manager/src/Entity/PageAccess.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager\Entity;

+use Drupal\page_manager\PageInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Condition\ConditionAccessResolverTrait;
 use Drupal\Core\Entity\EntityAccessControlHandler;
@@ @@
   /**
    * The context handler.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   * @var ContextHandlerInterface
    */
   protected $contextHandler;

@@ @@
   /**
    * Constructs an access control handler instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Plugin\Context\ContextHandlerInterface $context_handler
+   * @param ContextHandlerInterface $context_handler
    *   The context handler.
    */
   public function __construct(EntityTypeInterface $entity_type, ContextHandlerInterface $context_handler) {
@@ @@
   /**
    * Wraps the context handler.
    *
-   * @return \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   * @return ContextHandlerInterface
    */
   protected function contextHandler() {
     return $this->contextHandler;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\page_manager\PageInterface $entity */
+    /** @var PageInterface $entity */
     if ($operation == 'view') {
       if (!$entity->status()) {
         return AccessResult::forbidden()->addCacheableDependency($entity);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


47) modules/contrib/page_manager/src/Entity/Page.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager\Entity;

+use Drupal\Component\Plugin\LazyPluginCollection;
+use Drupal\Core\Routing\RouteBuilderInterface;
+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Drupal\Component\Plugin\Context\ContextInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Plugin\Context\Context;
@@ @@
   /**
    * The page variant entities.
    *
-   * @var \Drupal\page_manager\PageVariantInterface[]
+   * @var PageVariantInterface[]
    */
   protected $variants;

@@ @@
   /**
    * An array of collected contexts.
    *
-   * @var \Drupal\Component\Plugin\Context\ContextInterface[]
+   * @var ContextInterface[]
    */
   protected $contexts = [];

@@ @@
   /**
    * The plugin collection that holds the access conditions.
    *
-   * @var \Drupal\Component\Plugin\LazyPluginCollection
+   * @var LazyPluginCollection
    */
   protected $accessConditionCollection;

@@ @@
   /**
    * Wraps the route builder.
    *
-   * @return \Drupal\Core\Routing\RouteBuilderInterface
+   * @return RouteBuilderInterface
    *   An object for state storage.
    */
   protected static function routeBuilder() {
@@ @@
   /**
    * Wraps the entity storage for page variants.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    */
   protected function variantStorage() {
     return \Drupal::service('entity_type.manager')->getStorage('page_variant');
@@ @@
       'current_user',
     ];
     if (!$this->contexts) {
-      $this->eventDispatcher()->dispatch(PageManagerEvents::PAGE_CONTEXT, new PageManagerContextEvent($this));
+      $this->eventDispatcher()->dispatch(new PageManagerContextEvent($this), PageManagerEvents::PAGE_CONTEXT);
       foreach ($this->getParameters() as $machine_name => $configuration) {
         // Parameters can be updated in the UI, so unless it's a global context
         // we'll need to rely on the current settings in the tempstore instead
@@ @@
   public function getVariants() {
     if (!isset($this->variants)) {
       $this->variants = [];
-      /** @var \Drupal\page_manager\PageVariantInterface $variant */
+      /** @var PageVariantInterface $variant */
       foreach ($this->variantStorage()->loadByProperties(['page' => $this->id()]) as $variant) {
         $this->variants[$variant->id()] = $variant;
       }
@@ @@
   /**
    * Wraps the event dispatcher.
    *
-   * @return \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @return EventDispatcherInterface
    *   The event dispatcher.
    */
   protected function eventDispatcher() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


48) modules/contrib/page_manager/src/ContextMapperInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager;

+use Drupal\Component\Plugin\Context\ContextInterface;
 /**
  * Provides an interface for mapping context configurations to context objects.
  */
@@ @@
    * @param array[] $static_context_configurations
    *   An array of static context configurations.
    *
-   * @return \Drupal\Component\Plugin\Context\ContextInterface[]
+   * @return ContextInterface[]
    *   An array of set context values, keyed by context name.
    */
   public function getContextValues(array $static_context_configurations);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


49) modules/contrib/page_manager/src/ContextMapper.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * Constructs a new ContextMapper.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
    */
   public function __construct(EntityRepositoryInterface $entity_repository) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


50) modules/contrib/page_manager/src/Context/EntityLazyLoadContext.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * Construct an EntityLazyLoadContext object.
    *
-   * @param \Drupal\Core\Plugin\Context\ContextDefinitionInterface $context_definition
+   * @param ContextDefinitionInterface $context_definition
    *   The context definition.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
    * @param string $uuid
    *   The UUID of the entity.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


51) modules/contrib/page_manager/src/Context/ContextDefinitionFactory.php:14

    ---------- begin diff ----------
@@ @@
    * @param string $data_type
    *   The context's data type, as known to the core Typed Data system.
    *
-   * @return \Drupal\Core\Plugin\Context\ContextDefinition
+   * @return ContextDefinition
    *   The context definition.
    */
   public static function create($data_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


52) modules/contrib/page_manager/page_manager_ui/tests/src/FunctionalJavascript/PageManagerAdminTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalPlaceBlock('local_tasks_block');
@@ @@
       'wizard_options[access]' => TRUE,
       'wizard_options[selection]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');

     // Test the 'Page access' step.
     $this->assertTitle('Page access | Drupal');
     $access_path = 'admin/structure/page_manager/add/foo/access';
-    $this->assertUrl($access_path . '?js=nojs');
-    $this->drupalPostForm(NULL, [], 'Next');
+    $this->assertSession()->addressEquals($access_path . '?js=nojs');
+    $this->submitForm([], 'Next');

     // Test the 'Selection criteria' step.
     $this->assertTitle('Selection criteria | Drupal');
     $selection_path = 'admin/structure/page_manager/add/foo/selection';
-    $this->assertUrl($selection_path . '?js=nojs');
-    $this->drupalPostForm(NULL, [], 'Next');
+    $this->assertSession()->addressEquals($selection_path . '?js=nojs');
+    $this->submitForm([], 'Next');

     // Configure the variant.
     $edit = [
@@ @@
       'page_variant_label' => 'Status Code',
       'variant_settings[status_code]' => 200,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Finish');
-    $this->assertRaw(new FormattableMarkup('The page %label has been added.', ['%label' => 'Foo']));
+    $this->submitForm($edit, 'Finish');
+    $this->assertSession()->responseContains(new FormattableMarkup('The page %label has been added.', ['%label' => 'Foo']));
     // We've gone from the add wizard to the edit wizard.
     $this->drupalGet('admin/structure/page_manager/manage/foo/general');

@@ @@
     $edit = [
       'variant_settings[status_code]' => 403,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Update and save');
+    $this->submitForm($edit, 'Update and save');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertRawRector
 * AssertUrlRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


53) modules/contrib/page_manager/page_manager_ui/tests/src/Functional/StaticContextTest.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalCreateContentType(['type' => 'article', 'name' => 'Article']);
@@ @@
     $node = $this->drupalCreateNode(['type' => 'article']);
     $node2 = $this->drupalCreateNode(['type' => 'article']);
     $this->drupalGet('node/' . $node->id());
-    $this->assertResponse(200);
-    $this->assertText($node->label());
-    $this->assertTitle($node->label() . ' | Drupal');
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($node->label());
+    $this->assertSession()->titleEquals($node->label() . ' | Drupal');

     // Create a new page entity.
     $edit_page = [
@@ @@
       'variant_plugin_id' => 'block_display',
       'wizard_options[contexts]' => TRUE,
     ];
-    $this->drupalPostForm('admin/structure/page_manager/add', $edit_page, 'Next');
+    $this->drupalGet('admin/structure/page_manager/add');
+    $this->submitForm($edit_page, 'Next');

     // Add a static context for each node to the page variant.
     $contexts = [
@@ @@
       $edit = [
         'context' => 'entity:node',
       ];
-      $this->drupalPostForm(NULL, $edit, 'Add new context');
+      $this->submitForm($edit, 'Add new context');
       $edit = [
         'label' => $context['title'],
         'machine_name' => $context['machine_name'],
@@ @@
         'description' => $context['description'],
         'context_value' => $context['node']->getTitle() . ' (' . $context['node']->id() . ')',
       ];
-      $this->drupalPostForm(NULL, $edit, 'Save');
-      $this->assertText($context['title']);
+      $this->submitForm($edit, 'Save');
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains($context['title']);
     }
-    $this->drupalPostForm(NULL, [], 'Next');
+    $this->submitForm([], 'Next');

     // Add a new variant.
     $variant_edit = [
       'variant_settings[page_title]' => 'Static context test page',
     ];
-    $this->drupalPostForm(NULL, $variant_edit, 'Next');
+    $this->submitForm($variant_edit, 'Next');

     // Add a block that renders the node from the first static context.
     $this->clickLink('Add new block');
@@ @@
       'settings[view_mode]' => 'default',
       'region' => 'top',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Add block');
-    $this->assertText($edit['settings[label]']);
+    $this->submitForm($edit, 'Add block');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($edit['settings[label]']);

     // Add a block that renders the node from the second static context.
     $this->clickLink('Add new block');
@@ @@
       'region' => 'bottom',
       'context_mapping[entity]' => $contexts[1]['machine_name'],
     ];
-    $this->drupalPostForm(NULL, $edit, 'Add block');
-    $this->assertText($edit['settings[label]']);
-    $this->drupalPostForm(NULL, [], 'Finish');
+    $this->submitForm($edit, 'Add block');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($edit['settings[label]']);
+    $this->submitForm([], 'Finish');

     // Open the page and verify that the node from the static context is there.
     $this->drupalGet($edit_page['path']);
-    $this->assertText($node->label());
-    $this->assertText($node->get('body')->getValue()[0]['value']);
-    $this->assertText($node2->label());
-    $this->assertText($node2->get('body')->getValue()[0]['value']);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($node->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($node->get('body')->getValue()[0]['value']);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($node2->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($node2->get('body')->getValue()[0]['value']);

     // Change the second static context to the first node.
     $this->drupalGet('admin/structure/page_manager/manage/static_node_context/page_variant__static_node_context-block_display-0__contexts');
@@ @@
       'label' => 'Static Node 2 edited',
       'context_value' => $node->getTitle(),
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
-    $this->assertText("Static Node 2 edited");
-    $this->drupalPostForm(NULL, [], 'Update and save');
+    $this->submitForm($edit, 'Save');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Static Node 2 edited");
+    $this->submitForm([], 'Update and save');

     // Open the page and verify that the node from the static context is there.
     $this->drupalGet($edit_page['path']);
-    $this->assertText($node->label());
-    $this->assertText($node->get('body')->getValue()[0]['value']);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($node->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($node->get('body')->getValue()[0]['value']);
     // Also make sure the second node is NOT there.
-    $this->assertNoText($node2->label());
-    $this->assertNoText($node2->get('body')->getValue()[0]['value']);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($node2->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($node2->get('body')->getValue()[0]['value']);

     // Change the first static context to the second node.
     $this->drupalGet('admin/structure/page_manager/manage/static_node_context/page_variant__static_node_context-block_display-0__contexts');
@@ @@
       'label' => 'Static Node edited',
       'context_value' => $node2->getTitle(),
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
-    $this->assertText("Static Node 2 edited");
+    $this->submitForm($edit, 'Save');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Static Node 2 edited");

     // Remove the second static context view block from the variant.
     $this->drupalGet('admin/structure/page_manager/manage/static_node_context/page_variant__static_node_context-block_display-0__content');
     $this->clickLink('Delete', 1);
-    $this->drupalPostForm(NULL, [], t('Delete'));
-    $this->drupalPostForm(NULL, [], 'Update and save');
+    $this->submitForm([], t('Delete'));
+    $this->submitForm([], 'Update and save');

     // Make sure only the second static context's node is rendered on the page.
     $this->drupalGet($edit_page['path']);
-    $this->assertNoText($node->label());
-    $this->assertNoText($node->get('body')->getValue()[0]['value']);
-    $this->assertText($node2->label());
-    $this->assertText($node2->get('body')->getValue()[0]['value']);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($node->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($node->get('body')->getValue()[0]['value']);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($node2->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($node2->get('body')->getValue()[0]['value']);

     // Delete a static context and verify that it was deleted.
     $this->drupalGet('admin/structure/page_manager/manage/static_node_context/page_variant__static_node_context-block_display-0__contexts');
     $this->clickLink('Delete');
-    $this->drupalPostForm(NULL, [], t('Delete'));
-    $this->assertText("The static context Static Node edited has been removed.");
+    $this->submitForm([], t('Delete'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("The static context Static Node edited has been removed.");
     // Reload the page to clear the message.
     $this->drupalGet($this->getUrl());
-    $this->assertNoText($edit['label']);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($edit['label']);

     // Test contexts in a new variant.
     $this->drupalGet('admin/structure/page_manager/manage/static_node_context/general');
@@ @@
       'variant_plugin_id' => 'block_display',
       'wizard_options[contexts]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');
     foreach ($contexts as $context) {
       $edit = [
         'context' => 'entity:node',
       ];
-      $this->drupalPostForm(NULL, $edit, 'Add new context');
+      $this->submitForm($edit, 'Add new context');
       $edit = [
         'label' => $context['title'],
         'machine_name' => $context['machine_name'],
@@ @@
         'description' => $context['description'],
         'context_value' => $context['node']->getTitle() . ' (' . $context['node']->id() . ')',
       ];
-      $this->drupalPostForm(NULL, $edit, 'Save');
-      $this->assertText($context['title']);
+      $this->submitForm($edit, 'Save');
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains($context['title']);
     }
-    $this->drupalPostForm(NULL, [], 'Next');
+    $this->submitForm([], 'Next');

     // Configure the new variant.
     $variant_edit = [
       'variant_settings[page_title]' => 'Variant two static context test',
     ];
-    $this->drupalPostForm(NULL, $variant_edit, 'Next');
+    $this->submitForm($variant_edit, 'Next');

     // Add a block that renders the node from the first static context.
     $this->clickLink('Add new block');
@@ @@
       'settings[view_mode]' => 'default',
       'region' => 'top',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Add block');
-    $this->assertText($edit['settings[label]']);
+    $this->submitForm($edit, 'Add block');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($edit['settings[label]']);

     // Add a block that renders the node from the second static context.
     $this->clickLink('Add new block');
@@ @@
       'region' => 'bottom',
       'context_mapping[entity]' => $contexts[1]['machine_name'],
     ];
-    $this->drupalPostForm(NULL, $edit, 'Add block');
-    $this->assertText($edit['settings[label]']);
-    $this->drupalPostForm(NULL, [], 'Finish');
+    $this->submitForm($edit, 'Add block');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($edit['settings[label]']);
+    $this->submitForm([], 'Finish');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertResponseRector
 * AssertTextRector
 * AssertTitleRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


54) modules/contrib/page_manager/page_manager_ui/tests/src/Functional/PageParametersTest.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalCreateContentType(['type' => 'article', 'name' => 'Article']);
@@ @@
       'use_admin_theme' => TRUE,
       'description' => 'Sample test page.',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');

     // Test the 'Parameters' step.
-    $this->assertTitle('Page parameters | Drupal');
+    $this->assertSession()->titleEquals('Page parameters | Drupal');
     $access_path = 'admin/structure/page_manager/add/foo/parameters';
-    $this->assertUrl($access_path . '?js=nojs');
-    $this->assertNoText('There are no parameters defined for this page.');
+    $this->assertSession()->addressEquals($access_path . '?js=nojs');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('There are no parameters defined for this page.');

     // Edit the node parameter.
     $this->clickLink('Edit');
-    $this->assertTitle('Edit parameter | Drupal');
+    $this->assertSession()->titleEquals('Edit parameter | Drupal');
     $edit = [
       'type' => 'entity:node',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Update parameter');
-    $this->assertText('The node parameter has been updated.');
+    $this->submitForm($edit, 'Update parameter');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The node parameter has been updated.');

     // Skip the variant General configuration step.
-    $this->drupalPostForm(NULL, [], 'Next');
+    $this->submitForm([], 'Next');

     // Add the Node block to the top region.
-    $this->drupalPostForm(NULL, [], 'Next');
+    $this->submitForm([], 'Next');
     $this->clickLink('Add new block');
     $this->clickLink('Entity view (Content)');
     $edit = [
       'region' => 'top',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Add block');
+    $this->submitForm($edit, 'Add block');

     // Finish the wizard.
-    $this->drupalPostForm(NULL, [], 'Finish');
-    $this->assertRaw(new FormattableMarkup('The page %label has been added.', ['%label' => 'Foo']));
+    $this->submitForm([], 'Finish');
+    $this->assertSession()->responseContains(new FormattableMarkup('The page %label has been added.', ['%label' => 'Foo']));

     // Check that the node's title is visible at the page.
     $this->drupalGet('admin/foo/' . $node->id());
-    $this->assertResponse(200);
-    $this->assertText($node->getTitle());
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($node->getTitle());
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertRawRector
 * AssertResponseRector
 * AssertTextRector
 * AssertTitleRector
 * AssertUrlRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


55) modules/contrib/page_manager/page_manager_ui/tests/src/Functional/PageManagerAdminTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\page_manager_ui\Functional;

+use Drupal\Core\Block\BlockPluginInterface;
+use Drupal\ctools\Plugin\BlockVariantInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Url;
 use Drupal\page_manager\Entity\Page;
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalPlaceBlock('local_tasks_block');
@@ @@
   protected function doTestAddPage() {
     $this->drupalGet('admin/structure');
     $this->clickLink('Pages');
-    $this->assertText('Add a new page.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Add a new page.');

     // Add a new page without a label.
     $this->clickLink('Add page');
@@ @@
       'wizard_options[access]' => TRUE,
       'wizard_options[selection]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
-    $this->assertText('Administrative title field is required.');
+    $this->submitForm($edit, 'Next');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Administrative title field is required.');

     // Add a new page with a label.
     $edit += ['label' => 'Foo'];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');

     // Test the 'Page access' step.
-    $this->assertTitle('Page access | Drupal');
+    $this->assertSession()->titleEquals('Page access | Drupal');
     $access_path = 'admin/structure/page_manager/add/foo/access';
-    $this->assertUrl($access_path . '?js=nojs');
+    $this->assertSession()->addressEquals($access_path . '?js=nojs');
     $this->doTestAccessConditions($access_path, FALSE);
-    $this->drupalPostForm(NULL, [], 'Next');
+    $this->submitForm([], 'Next');

     // Test the 'Selection criteria' step.
-    $this->assertTitle('Selection criteria | Drupal');
+    $this->assertSession()->titleEquals('Selection criteria | Drupal');
     $selection_path = 'admin/structure/page_manager/add/foo/selection';
-    $this->assertUrl($selection_path . '?js=nojs');
+    $this->assertSession()->addressEquals($selection_path . '?js=nojs');
     $this->doTestSelectionCriteria($selection_path, FALSE);
-    $this->drupalPostForm(NULL, [], 'Next');
+    $this->submitForm([], 'Next');

     // Configure the variant.
     $edit = [
@@ @@
       'page_variant_label' => 'Status Code',
       'variant_settings[status_code]' => 200,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Finish');
-    $this->assertRaw(new FormattableMarkup('The page %label has been added.', ['%label' => 'Foo']));
+    $this->submitForm($edit, 'Finish');
+    $this->assertSession()->responseContains(new FormattableMarkup('The page %label has been added.', ['%label' => 'Foo']));
     // We've gone from the add wizard to the edit wizard.
     $this->drupalGet('admin/structure/page_manager/manage/foo/general');

     $this->drupalGet('admin/foo');
-    $this->assertResponse(200);
-    $this->assertTitle('Foo | Drupal');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->titleEquals('Foo | Drupal');

     // Change the status code to 403.
     $this->drupalGet('admin/structure/page_manager/manage/foo/page_variant__foo-http_status_code-0__general');
@@ @@
     $edit = [
       'variant_settings[status_code]' => 403,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Update');
+    $this->submitForm($edit, 'Update');

     // Set the weight of the 'Status Code' variant to 10.
     $this->drupalGet('admin/structure/page_manager/manage/foo/reorder_variants');
@@ @@
     $edit = [
       'variants[foo-http_status_code-0][weight]' => 10,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Update');
-    $this->drupalPostForm(NULL, [], 'Update and save');
+    $this->submitForm($edit, 'Update');
+    $this->submitForm([], 'Update and save');
   }

   /**
@@ @@
       $this->drupalGet($path);
     }

-    $this->assertRaw('No required conditions have been configured.');
+    $this->assertSession()->responseContains('No required conditions have been configured.');

     // Configure a new condition.
     $edit = [
       'conditions' => 'user_role',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Add Condition');
-    $this->assertTitle('Add access condition | Drupal');
+    $this->submitForm($edit, 'Add Condition');
+    $this->assertSession()->titleEquals('Add access condition | Drupal');
     $edit = [
       'roles[authenticated]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
-    $this->assertRaw('The user is a member of Authenticated user');
+    $this->submitForm($edit, 'Save');
+    $this->assertSession()->responseContains('The user is a member of Authenticated user');
     // Make sure we're still on the same wizard.
-    $this->assertUrl($path);
+    $this->assertSession()->addressEquals($path);

     // Edit the condition.
     $this->clickLink('Edit');
-    $this->assertTitle('Edit access condition | Drupal');
+    $this->assertSession()->titleEquals('Edit access condition | Drupal');
     $edit = [
       'roles[anonymous]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
-    $this->assertRaw('The user is a member of Anonymous user, Authenticated user');
-    $this->assertUrl($path);
+    $this->submitForm($edit, 'Save');
+    $this->assertSession()->responseContains('The user is a member of Anonymous user, Authenticated user');
+    $this->assertSession()->addressEquals($path);

     // Delete the condition.
     $this->clickLink('Delete');
-    $this->assertTitle('Are you sure you want to delete the user_role condition? | Drupal');
-    $this->drupalPostForm(NULL, [], 'Delete');
-    $this->assertRaw('No required conditions have been configured.');
-    $this->assertUrl($path);
+    $this->assertSession()->titleEquals('Are you sure you want to delete the user_role condition? | Drupal');
+    $this->submitForm([], 'Delete');
+    $this->assertSession()->responseContains('No required conditions have been configured.');
+    $this->assertSession()->addressEquals($path);
   }

   /**
@@ @@
     if ($this->getUrl() !== $path && $redirect) {
       $this->drupalGet($path);
     }
-    $this->assertRaw('No required conditions have been configured.');
+    $this->assertSession()->responseContains('No required conditions have been configured.');

     // Configure a new condition.
     $edit = [
       'conditions' => 'user_role',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Add Condition');
-    $this->assertTitle('Add new selection condition | Drupal');
+    $this->submitForm($edit, 'Add Condition');
+    $this->assertSession()->titleEquals('Add new selection condition | Drupal');
     $edit = [
       'roles[authenticated]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
-    $this->assertRaw('The user is a member of Authenticated user');
+    $this->submitForm($edit, 'Save');
+    $this->assertSession()->responseContains('The user is a member of Authenticated user');
     // Make sure we're still on the add wizard (not the edit wizard).
-    $this->assertUrl($path);
+    $this->assertSession()->addressEquals($path);

     // Edit the condition.
     $this->clickLink('Edit');
-    $this->assertTitle('Edit selection condition | Drupal');
+    $this->assertSession()->titleEquals('Edit selection condition | Drupal');
     $edit = [
       'roles[anonymous]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
-    $this->assertRaw('The user is a member of Anonymous user, Authenticated user');
-    $this->assertUrl($path);
+    $this->submitForm($edit, 'Save');
+    $this->assertSession()->responseContains('The user is a member of Anonymous user, Authenticated user');
+    $this->assertSession()->addressEquals($path);

     // Delete the condition.
     $this->clickLink('Delete');
-    $this->assertTitle('Are you sure you want to delete the user_role condition? | Drupal');
-    $this->drupalPostForm(NULL, [], 'Delete');
-    $this->assertRaw('No required conditions have been configured.');
-    $this->assertUrl($path);
+    $this->assertSession()->titleEquals('Are you sure you want to delete the user_role condition? | Drupal');
+    $this->submitForm([], 'Delete');
+    $this->assertSession()->responseContains('No required conditions have been configured.');
+    $this->assertSession()->addressEquals($path);
   }

   /**
@@ @@
    */
   protected function doTestDisablePage() {
     $this->drupalGet('admin/foo');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     $this->drupalGet('admin/structure/page_manager');
     $this->clickLink('Disable');
     $this->drupalGet('admin/foo');
     // The page should not be found if the page is enabled.
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);

     $this->drupalGet('admin/structure/page_manager');
     $this->clickLink('Enable');
     $this->drupalGet('admin/foo');
     // Re-enabling the page should make this path available.
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
   }

   /**
@@ @@
       'variant_plugin_id' => 'block_display',
       'label' => 'First',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');

     // Set the page title.
     $edit = [
       'variant_settings[page_title]' => 'Example title',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');

     // Finish variant wizard without adding blocks.
-    $this->drupalPostForm(NULL, [], 'Finish');
+    $this->submitForm([], 'Finish');

     // Save page to apply variant changes.
-    $this->drupalPostForm(NULL, [], 'Update and save');
+    $this->submitForm([], 'Update and save');

     // Test that the variant is still used but empty.
     $this->drupalGet('admin/foo');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Tests that the content region has no content at all.
     $elements = $this->getSession()->getPage()->findAll('css', 'div.region.region-content *');
     // From Drupal 8.7, fallback area for messages is added by default.
@@ @@
     $this->clickLink('Add new block');

     // Assert that the broken/missing block is not visible.
-    $this->assertNoText('Broken/Missing');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Broken/Missing');

     $this->clickLink('User account menu');
     $edit = [
       'region' => 'top',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Add block');
-    $this->drupalPostForm(NULL, [], 'Update and save');
+    $this->submitForm($edit, 'Add block');
+    $this->submitForm([], 'Update and save');

     // Test that the block is displayed.
     $this->drupalGet('admin/foo');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $elements = $this->xpath('//div[@class="block-region-top"]/nav/ul[@class="menu"]/li/a');
-    $this->assertTitle('Example title | Drupal');
+    $this->assertSession()->titleEquals('Example title | Drupal');
     $expected = ['My account', 'Log out'];
     $links = [];
     foreach ($elements as $element) {
       $links[] = $element->getText();
     }
-    $this->assertEqual($expected, $links);
+    $this->assertEquals($expected, $links);
     // Check the block label.
-    $this->assertRaw('User account menu');
+    $this->assertSession()->responseContains('User account menu');
   }

   /**
@@ @@
       'path' => 'second',
       'variant_plugin_id' => 'block_display',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');

     // Configure the variant.
     $edit = [
@@ @@
       'page_variant_label' => 'Second variant',
       'variant_settings[page_title]' => 'Second title',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');

     // We're now on the content step, but we don't need to add any blocks.
-    $this->drupalPostForm(NULL, [], 'Finish');
-    $this->assertRaw(new FormattableMarkup('The page %label has been added.', ['%label' => 'Second']));
+    $this->submitForm([], 'Finish');
+    $this->assertSession()->responseContains(new FormattableMarkup('The page %label has been added.', ['%label' => 'Second']));

     // Visit both pages, make sure that they do not interfere with each other.
     $this->drupalGet('admin/foo');
-    $this->assertTitle('Example title | Drupal');
+    $this->assertSession()->titleEquals('Example title | Drupal');
     $this->drupalGet('second');
-    $this->assertTitle('Second title | Drupal');
+    $this->assertSession()->titleEquals('Second title | Drupal');
   }

   /**
@@ @@
       'variant_settings[page_title]' => 'Updated block label',
       'page_variant_label' => 'Updated block label',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Update and save');
+    $this->submitForm($edit, 'Update and save');
     // Test that the block is displayed.
     $this->drupalGet('admin/foo');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check the block label.
-    $this->assertRaw($edit['variant_settings[page_title]']);
+    $this->assertSession()->responseContains($edit['variant_settings[page_title]']);
   }

   /**
@@ @@
     $block_config = $block->getConfiguration();
     $this->drupalGet('admin/structure/page_manager/manage/foo/page_variant__foo-block_display-0__content');

-    $this->assertOptionSelected('edit-blocks-' . $block_config['uuid'] . '-region', 'top');
-    $this->assertOptionSelected('edit-blocks-' . $block_config['uuid'] . '-weight', 0);
+    $this->assertTrue($this->assertSession()->optionExists('edit-blocks-' . $block_config['uuid'] . '-region', 'top')->hasAttribute('selected'));
+    $this->assertTrue($this->assertSession()->optionExists('edit-blocks-' . $block_config['uuid'] . '-weight', 0)->hasAttribute('selected'));

     $form_name = 'blocks[' . $block_config['uuid'] . ']';
     $edit = [
@@ @@
       $form_name . '[region]' => 'bottom',
       $form_name . '[weight]' => -10,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Update');
-    $this->assertOptionSelected('edit-blocks-' . $block_config['uuid'] . '-region', 'bottom');
-    $this->assertOptionSelected('edit-blocks-' . $block_config['uuid'] . '-weight', -10);
-    $this->drupalPostForm(NULL, [], 'Update and save');
+    $this->submitForm($edit, 'Update');
+    $this->assertTrue($this->assertSession()->optionExists('edit-blocks-' . $block_config['uuid'] . '-region', 'bottom')->hasAttribute('selected'));
+    $this->assertTrue($this->assertSession()->optionExists('edit-blocks-' . $block_config['uuid'] . '-weight', -10)->hasAttribute('selected'));
+    $this->submitForm([], 'Update and save');
   }

   /**
@@ @@
    */
   protected function doTestReorderVariants() {
     $this->drupalGet('admin/foo');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $elements = $this->xpath('//div[@class="block-region-bottom"]/nav/ul[@class="menu"]/li/a');
     $expected = ['My account', 'Log out'];
     $links = [];
@@ @@
     foreach ($elements as $element) {
       $links[] = $element->getText();
     }
-    $this->assertEqual($expected, $links);
+    $this->assertEquals($expected, $links);

     $this->drupalGet('admin/structure/page_manager/manage/foo/general');
     $this->clickLink('Reorder variants');
@@ @@
     $edit = [
       'variants[foo-http_status_code-0][weight]' => -10,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Update');
-    $this->drupalPostForm(NULL, [], 'Update and save');
+    $this->submitForm($edit, 'Update');
+    $this->submitForm([], 'Update and save');
     $this->drupalGet('admin/foo');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
   }

   /**
@@ @@
       'id' => 'bar',
       'path' => 'admin/foo',
     ];
-    $this->drupalPostForm('admin/structure/page_manager/add', $edit, 'Next');
-    $this->assertText('The page path must be unique.');
+    $this->drupalGet('admin/structure/page_manager/add');
+    $this->submitForm($edit, 'Next');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The page path must be unique.');
     $this->drupalGet('admin/structure/page_manager');
-    $this->assertNoText('Bar');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Bar');
   }

   /**
@@ @@
     $edit = [
       'use_admin_theme' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Update and save');
+    $this->submitForm($edit, 'Update and save');
     $this->drupalGet('admin/foo');
     $this->assertTheme('bartik');

@@ @@
   protected function doTestRemoveVariant() {
     $this->drupalGet('admin/structure/page_manager/manage/foo/page_variant__foo-http_status_code-0__general');
     $this->clickLink('Delete this variant');
-    $this->assertRaw('Are you sure you want to delete this variant?');
-    $this->drupalPostForm(NULL, [], 'Delete');
-    $this->assertRaw(new FormattableMarkup('The variant %label has been removed.', ['%label' => 'Status Code']));
-    $this->drupalPostForm(NULL, [], 'Update and save');
+    $this->assertSession()->responseContains('Are you sure you want to delete this variant?');
+    $this->submitForm([], 'Delete');
+    $this->assertSession()->responseContains(new FormattableMarkup('The variant %label has been removed.', ['%label' => 'Status Code']));
+    $this->submitForm([], 'Update and save');
   }

   /**
@@ @@
   protected function doTestRemoveBlock() {
     // Assert that the block is displayed.
     $this->drupalGet('admin/foo');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $elements = $this->xpath('//div[@class="block-region-bottom"]/nav/ul[@class="menu"]/li/a');
     $expected = ['My account', 'Log out'];
     $links = [];
@@ @@
     foreach ($elements as $element) {
       $links[] = $element->getText();
     }
-    $this->assertEqual($expected, $links);
+    $this->assertEquals($expected, $links);

     $this->drupalGet('admin/structure/page_manager/manage/foo/page_variant__foo-block_display-0__content');
     $this->clickLink('Delete');
-    $this->assertRaw(new FormattableMarkup('Are you sure you want to delete the block %label?', ['%label' => 'User account menu']));
-    $this->drupalPostForm(NULL, [], 'Delete');
-    $this->assertRaw(new FormattableMarkup('The block %label has been removed.', ['%label' => 'User account menu']));
-    $this->drupalPostForm(NULL, [], 'Update and save');
+    $this->assertSession()->responseContains(new FormattableMarkup('Are you sure you want to delete the block %label?', ['%label' => 'User account menu']));
+    $this->submitForm([], 'Delete');
+    $this->assertSession()->responseContains(new FormattableMarkup('The block %label has been removed.', ['%label' => 'User account menu']));
+    $this->submitForm([], 'Update and save');

     // Assert that the block is now gone.
     $this->drupalGet('admin/foo');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $elements = $this->xpath('//div[@class="block-region-bottom"]/nav/ul[@class="menu"]/li/a');
     $this->assertTrue(empty($elements));
   }
@@ @@
     $edit = [
       'region' => 'top',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Add block');
-    $this->drupalPostForm(NULL, [], 'Update and save');
+    $this->submitForm($edit, 'Add block');
+    $this->submitForm([], 'Update and save');

     // Test that the block is displayed.
     $this->drupalGet('admin/foo');
-    $this->assertResponse(200);
-    $this->assertText(t('Example output'));
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Example output'));
     // Check the block label.
-    $this->assertRaw('Page Manager Test Block');
+    $this->assertSession()->responseContains('Page Manager Test Block');
   }

   /**
@@ @@
   protected function doTestExistingPathWithoutParameters() {
     // Test an existing path.
     $this->drupalGet('admin');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     $this->drupalGet('admin/structure/page_manager');
     // Add a new page with existing path 'admin'.
@@ @@
       'path' => 'admin',
       'variant_plugin_id' => 'http_status_code',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');

     // Configure the variant.
     $edit = [
@@ @@
       'page_variant_label' => 'Status Code',
       'variant_settings[status_code]' => 404,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Finish');
+    $this->submitForm($edit, 'Finish');

     // Ensure the existing path leads to the new page.
     $this->drupalGet('admin');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
   }

   /**
@@ @@
       'variant_plugin_id' => 'block_display',
       'label' => 'First',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');

     // Set the page title.
     $edit = [
       'variant_settings[page_title]' => 'Example title',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');

     // Finish variant wizard without adding blocks.
-    $this->drupalPostForm(NULL, [], 'Finish');
+    $this->submitForm([], 'Finish');

     // Update the description and click on Update.
     $edit = [
@@ @@
       'page_variant_label' => 'First updated',
       'variant_settings[page_title]' => 'Example title updated',
     ];
-    $this->drupalPostForm('admin/structure/page_manager/manage/foo/page_variant__foo-block_display-0__general', $edit, 'Update');
-    $this->assertFieldByName('page_variant_label', 'First updated');
-    $this->assertFieldByName('variant_settings[page_title]', 'Example title updated');
+    $this->drupalGet('admin/structure/page_manager/manage/foo/page_variant__foo-block_display-0__general');
+    $this->submitForm($edit, 'Update');
+    $this->assertSession()->fieldValueEquals('page_variant_label', 'First updated');
+    $this->assertSession()->fieldValueEquals('variant_settings[page_title]', 'Example title updated');
+    $this->drupalGet('admin/structure/page_manager/manage/foo/page_variant__foo-block_display-0__contexts');

     // Click on Update at Contexts. Nothing should happen.
-    $this->drupalPostForm('admin/structure/page_manager/manage/foo/page_variant__foo-block_display-0__contexts', [], 'Update');
-    $this->assertUrl('admin/structure/page_manager/manage/foo/page_variant__foo-block_display-0__contexts');
+    $this->submitForm([], 'Update');
+    $this->assertSession()->addressEquals('admin/structure/page_manager/manage/foo/page_variant__foo-block_display-0__contexts');
+    $this->drupalGet('admin/structure/page_manager/manage/foo/page_variant__foo-block_display-0__selection');

     // Click on Update at Selection criteria. Nothing should happen.
-    $this->drupalPostForm('admin/structure/page_manager/manage/foo/page_variant__foo-block_display-0__selection', [], 'Update');
-    $this->assertUrl('admin/structure/page_manager/manage/foo/page_variant__foo-block_display-0__selection');
+    $this->submitForm([], 'Update');
+    $this->assertSession()->addressEquals('admin/structure/page_manager/manage/foo/page_variant__foo-block_display-0__selection');
+    $this->drupalGet('admin/structure/page_manager/manage/foo/page_variant__foo-block_display-0__content');

     // Click on Update at Content. Nothing should happen.
-    $this->drupalPostForm('admin/structure/page_manager/manage/foo/page_variant__foo-block_display-0__content', [], 'Update');
-    $this->assertUrl('admin/structure/page_manager/manage/foo/page_variant__foo-block_display-0__content');
+    $this->submitForm([], 'Update');
+    $this->assertSession()->addressEquals('admin/structure/page_manager/manage/foo/page_variant__foo-block_display-0__content');
   }

   /**
@@ @@
   protected function doTestDeletePage() {
     $this->drupalGet('admin/structure/page_manager');
     $this->clickLink('Delete');
-    $this->drupalPostForm(NULL, [], 'Delete');
-    $this->assertRaw(new FormattableMarkup('The page %name has been removed.', ['%name' => 'existing']));
+    $this->submitForm([], 'Delete');
+    $this->assertSession()->responseContains(new FormattableMarkup('The page %name has been removed.', ['%name' => 'existing']));
     $this->drupalGet('admin');
     // The overridden page is back to its default.
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     $this->drupalGet('admin/structure/page_manager');
     $this->clickLink('Delete');
-    $this->drupalPostForm(NULL, [], 'Delete');
-    $this->assertRaw(new FormattableMarkup('The page %name has been removed.', ['%name' => 'Foo']));
+    $this->submitForm([], 'Delete');
+    $this->assertSession()->responseContains(new FormattableMarkup('The page %name has been removed.', ['%name' => 'Foo']));
     $this->drupalGet('admin/foo');
     // The custom page is no longer found.
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
   }

   /**
@@ @@
       'path' => '/page-manager-test',
       'variant_plugin_id' => 'http_status_code',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');

     $edit = [
       'variant_settings[status_code]' => 418,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Finish');
+    $this->submitForm($edit, 'Finish');
     $this->drupalGet('page-manager-test');
-    $this->assertResponse(418);
+    $this->assertSession()->statusCodeEquals(418);

     // Test that the page test is accessible.
     $page_string = 'test-page';
     $this->drupalGet('page-manager-test/' . $page_string);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // Without a single variant, it will fall through to the original.
     $this->drupalGet('admin/structure/page_manager/manage/placeholder2/page_variant__placeholder2-http_status_code-0__general');
     $this->clickLink('Delete this variant');
-    $this->drupalPostForm(NULL, [], 'Delete');
-    $this->drupalPostForm(NULL, [], 'Update and save');
+    $this->submitForm([], 'Delete');
+    $this->submitForm([], 'Update and save');
     $this->drupalGet('page-manager-test');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }

   /**
@@ @@
   protected function assertTheme($theme_name) {
     $url = Url::fromUri('base:core/themes/' . $theme_name . '/logo.svg')->toString();
     $elements = $this->xpath('//img[contains(@src, :url)]', [':url' => $url]);
-    $this->assertEqual(count($elements), 1, new FormattableMarkup('Page is rendered in @theme', ['@theme' => $theme_name]));
+    $this->assertEquals(count($elements), 1, new FormattableMarkup('Page is rendered in @theme', ['@theme' => $theme_name]));
   }

   /**
@@ @@
    * @param string $block_label
    *   The label of the block.
    *
-   * @return \Drupal\Core\Block\BlockPluginInterface|null
+   * @return BlockPluginInterface|null
    *   Either a block plugin, or NULL.
    */
   protected function findBlockByLabel($page_variant_id, $block_label) {
-    /** @var \Drupal\page_manager\Entity\PageVariant $page_variant */
+    /** @var PageVariant $page_variant */
     if ($page_variant = PageVariant::load($page_variant_id)) {
-      /** @var \Drupal\ctools\Plugin\BlockVariantInterface $variant_plugin */
+      /** @var BlockVariantInterface $variant_plugin */
       $variant_plugin = $page_variant->getVariantPlugin();
       foreach ($variant_plugin->getRegionAssignments() as $blocks) {
-        /** @var \Drupal\Core\Block\BlockPluginInterface[] $blocks */
+        /** @var BlockPluginInterface[] $blocks */
         foreach ($blocks as $block) {
           if ($block->label() == $block_label) {
             return $block;
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertNoTextRector
 * AssertOptionSelectedRector
 * AssertRawRector
 * AssertResponseRector
 * AssertTextRector
 * AssertTitleRector
 * AssertUrlRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


56) modules/contrib/page_manager/page_manager_ui/tests/src/Functional/AddVariantSelectionTest.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalCreateContentType(['type' => 'article', 'name' => 'Article']);
@@ @@
     $node = $this->drupalCreateNode(['type' => 'article']);
     $node2 = $this->drupalCreateNode(['type' => 'article']);
     $this->drupalGet('node/' . $node->id());
-    $this->assertResponse(200);
-    $this->assertText($node->label());
-    $this->assertTitle($node->label() . ' | Drupal');
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($node->label());
+    $this->assertSession()->titleEquals($node->label() . ' | Drupal');

     // Create a new page entity.
     $edit_page = [
@@ @@
       'path' => 'selection-criteria',
       'variant_plugin_id' => 'block_display',
     ];
-    $this->drupalPostForm('admin/structure/page_manager/add', $edit_page, 'Next');
-    $this->drupalPostForm(NULL, [], 'Next');
-    $this->drupalPostForm(NULL, [], 'Finish');
+    $this->drupalGet('admin/structure/page_manager/add');
+    $this->submitForm($edit_page, 'Next');
+    $this->submitForm([], 'Next');
+    $this->submitForm([], 'Finish');
     $this->clickLink('Add variant');
     $edit = [
       'label' => 'Variant two',
@@ @@
       'wizard_options[contexts]' => TRUE,
       'wizard_options[selection]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');
     // Add a static context for each node to the page variant.
     $contexts = [
       [
@@ @@
       $edit = [
         'context' => 'entity:node',
       ];
-      $this->drupalPostForm(NULL, $edit, 'Add new context');
+      $this->submitForm($edit, 'Add new context');
       $edit = [
         'label' => $context['title'],
         'machine_name' => $context['machine_name'],
@@ @@
         'description' => $context['description'],
         'context_value' => $context['node']->getTitle() . ' (' . $context['node']->id() . ')',
       ];
-      $this->drupalPostForm(NULL, $edit, 'Save');
-      $this->assertText($context['title']);
+      $this->submitForm($edit, 'Save');
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains($context['title']);
     }
-    $this->drupalPostForm(NULL, [], 'Next');
+    $this->submitForm([], 'Next');

     // Configure selection criteria.
     $edit = [
       'conditions' => 'entity_bundle:node',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Add Condition');
+    $this->submitForm($edit, 'Add Condition');

     $edit = [
       'bundles[article]' => TRUE,
@@ @@
       'bundles[page]' => TRUE,
       'context_mapping[node]' => 'static_node_2',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
-    $this->assertText('Content type is article or page');
+    $this->submitForm($edit, 'Save');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Content type is article or page');
     $this->clickLink('Edit');
     $edit = [
       'bundles[article]' => TRUE,
       'context_mapping[node]' => 'static_node_2',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
-    $this->assertText('Content type is article');
+    $this->submitForm($edit, 'Save');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Content type is article');
     $this->clickLink('Delete');
-    $this->drupalPostForm(NULL, [], 'Delete');
-    $this->assertNoText('Content type is article');
-    $this->drupalPostForm(NULL, [], 'Next');
+    $this->submitForm([], 'Delete');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Content type is article');
+    $this->submitForm([], 'Next');

     // Configure the new variant.
     $variant_edit = [
       'variant_settings[page_title]' => 'Variant two criteria test',
     ];
-    $this->drupalPostForm(NULL, $variant_edit, 'Next');
+    $this->submitForm($variant_edit, 'Next');

     // Add a block that renders the node from the first static context.
     $this->clickLink('Add new block');
@@ @@
       'settings[view_mode]' => 'default',
       'region' => 'top',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Add block');
-    $this->assertText($edit['settings[label]']);
+    $this->submitForm($edit, 'Add block');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($edit['settings[label]']);

     // Add a block that renders the node from the second static context.
     $this->clickLink('Add new block');
@@ @@
       'region' => 'bottom',
       'context_mapping[entity]' => $contexts[1]['machine_name'],
     ];
-    $this->drupalPostForm(NULL, $edit, 'Add block');
-    $this->assertText($edit['settings[label]']);
-    $this->drupalPostForm(NULL, [], 'Finish');
+    $this->submitForm($edit, 'Add block');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($edit['settings[label]']);
+    $this->submitForm([], 'Finish');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertResponseRector
 * AssertTextRector
 * AssertTitleRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


57) modules/contrib/page_manager/page_manager_ui/src/Wizard/PageWizardBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager_ui\Wizard;

+use Drupal\page_manager\PageVariantInterface;
+use Drupal\Core\Display\VariantInterface;
+use Drupal\page_manager\Entity\Page;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
 use Drupal\ctools\Wizard\EntityFormWizardBase;
@@ @@
    */
   public function submitVariantStep(array &$form, FormStateInterface $form_state) {
     $cached_values = $form_state->getTemporaryValue('wizard');
-    /** @var \Drupal\page_manager\PageVariantInterface $page_variant */
+    /** @var PageVariantInterface $page_variant */
     $page_variant = $cached_values['page_variant'];
-    /** @var \Drupal\Core\Display\VariantInterface $plugin */
+    /** @var VariantInterface $plugin */
     $plugin = $cached_values['plugin'];

     // Make sure the variant plugin on the page variant gets the configuration
@@ @@
     parent::finish($form, $form_state);

     $cached_values = $form_state->getTemporaryValue('wizard');
-    /** @var \Drupal\page_manager\Entity\Page $page */
+    /** @var Page $page */
     $page = $cached_values['page'];
     foreach ($page->getVariants() as $variant) {
       $variant->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


58) modules/contrib/page_manager/page_manager_ui/src/Wizard/PageVariantAddWizard.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager_ui\Wizard;

+use Drupal\page_manager\PageVariantInterface;
 use Drupal\Core\Display\ContextAwareVariantInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@

     // Add any wizard operations from the plugin itself.
     if (!empty($cached_values['page_variant']) && !empty($cached_values['variant_plugin_id'])) {
-      /** @var \Drupal\page_manager\PageVariantInterface $page_variant */
+      /** @var PageVariantInterface $page_variant */
       $page_variant = $cached_values['page_variant'];
       $variant_plugin = $page_variant->getVariantPlugin();
       if ($variant_plugin instanceof PluginWizardInterface) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


59) modules/contrib/page_manager/page_manager_ui/src/Wizard/PageEditWizard.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager_ui\Wizard;

+use Drupal\page_manager\Entity\Page;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Display\ContextAwareVariantInterface;
 use Drupal\Core\Form\FormBuilderInterface;
@@ @@
   /**
    * Get operations for the variant.
    *
-   * @param \Drupal\page_manager\PageVariantInterface $page_variant
+   * @param PageVariantInterface $page_variant
    *   The page variant entity.
    * @param mixed $cached_values
    *   The cached values.
@@ @@
   public function finish(array &$form, FormStateInterface $form_state) {
     // Delete any of the variants marked for deletion.
     $cached_values = $form_state->getTemporaryValue('wizard');
-    /** @var \Drupal\page_manager\Entity\Page $page */
+    /** @var Page $page */
     $page = $cached_values['page'];
     if (!empty($cached_values['deleted_variants'])) {
       foreach (array_keys($cached_values['deleted_variants']) as $page_variant_id) {
@@ @@
    * Clears the temporary store.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function clearTempstore(array &$form, FormStateInterface $form_state) {
     $this->getTempstore()->delete($this->getMachineName());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


60) modules/contrib/page_manager/page_manager_ui/src/Wizard/PageAddWizard.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager_ui\Wizard;

+use Drupal\page_manager\PageVariantInterface;
 use Drupal\Core\Display\ContextAwareVariantInterface;
 use Drupal\ctools\Plugin\PluginWizardInterface;
 use Drupal\page_manager_ui\Form\PageVariantContextsForm;
@@ @@

     // Add any wizard operations from the plugin itself.
     if (!empty($cached_values['page_variant'])) {
-      /** @var \Drupal\page_manager\PageVariantInterface $page_variant */
+      /** @var PageVariantInterface $page_variant */
       $page_variant = $cached_values['page_variant'];
       $variant_plugin = $page_variant->getVariantPlugin();
       if ($variant_plugin instanceof PluginWizardInterface) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


61) modules/contrib/page_manager/page_manager_ui/src/Form/VariantPluginDeleteBlockForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager_ui\Form;

+use Drupal\ctools\Plugin\BlockVariantInterface;
+use Drupal\Core\Block\BlockPluginInterface;
+use Drupal\Core\TempStore\SharedTempStore;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
   /**
    * The block variant.
    *
-   * @var \Drupal\ctools\Plugin\BlockVariantInterface
+   * @var BlockVariantInterface
    */
   protected $plugin;

@@ @@
   /**
    * The plugin being configured.
    *
-   * @var \Drupal\Core\Block\BlockPluginInterface
+   * @var BlockPluginInterface
    */
   protected $block;

@@ @@
   /**
    * Get the tempstore.
    *
-   * @return \Drupal\Core\TempStore\SharedTempStore
+   * @return SharedTempStore
    *   The shared temp store.
    */
   protected function getTempstore() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


62) modules/contrib/page_manager/page_manager_ui/src/Form/VariantPluginContentForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager_ui\Form;

+use Drupal\Core\TempStore\SharedTempStore;
+use Drupal\page_manager\Plugin\DisplayVariant\PageBlockDisplayVariant;
+use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * Tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @var SharedTempStoreFactory
    */
   protected $tempstore;

@@ @@
   /**
    * Constructs a new VariantPluginContentForm.
    *
-   * @param \Drupal\Core\TempStore\SharedTempStoreFactory $tempstore
+   * @param SharedTempStoreFactory $tempstore
    *   The tempstore factory.
    */
   public function __construct(SharedTempStoreFactory $tempstore) {
@@ @@
   /**
    * Get the tempstore.
    *
-   * @return \Drupal\Core\TempStore\SharedTempStore
+   * @return SharedTempStore
    *   The temp store.
    */
   protected function getTempstore() {
@@ @@
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
     $cached_values = $form_state->getTemporaryValue('wizard');
-    /** @var \Drupal\page_manager\Plugin\DisplayVariant\PageBlockDisplayVariant $variant_plugin */
+    /** @var PageBlockDisplayVariant $variant_plugin */
     $variant_plugin = $cached_values['plugin'];

     // Store the block display plugin so we can get it in our dialogs.
@@ @@
           ],
         ];

-        /** @var \Drupal\Core\Block\BlockPluginInterface[] $blocks */
+        /** @var BlockPluginInterface[] $blocks */
         foreach ($blocks as $block_id => $block) {
           $row = [
             '#attributes' => [
@@ @@
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $cached_values = $form_state->getTemporaryValue('wizard');
-    /** @var \Drupal\page_manager\Plugin\DisplayVariant\PageBlockDisplayVariant $variant_plugin */
+    /** @var PageBlockDisplayVariant $variant_plugin */
     $variant_plugin = $cached_values['plugin'];

     // If the blocks were rearranged, update their values.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


63) modules/contrib/page_manager/page_manager_ui/src/Form/VariantPluginConfigureBlockFormBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager_ui\Form;

+use Drupal\page_manager\Plugin\DisplayVariant\PageBlockDisplayVariant;
+use Drupal\Core\Block\BlockPluginInterface;
+use Drupal\Core\TempStore\SharedTempStore;
+use Drupal\Core\Plugin\Context\ContextDefinitionInterface;
+use Drupal\ctools\Plugin\BlockVariantInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormState;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @var SharedTempStoreFactory
    */
   protected $tempstore;

@@ @@
   /**
    * The variant plugin.
    *
-   * @var \Drupal\page_manager\Plugin\DisplayVariant\PageBlockDisplayVariant
+   * @var PageBlockDisplayVariant
    */
   protected $variantPlugin;

@@ @@
   /**
    * The plugin being configured.
    *
-   * @var \Drupal\Core\Block\BlockPluginInterface
+   * @var BlockPluginInterface
    */
   protected $block;

@@ @@
   /**
    * Constructs a new VariantPluginConfigureBlockFormBase.
    *
-   * @param \Drupal\Core\TempStore\SharedTempStoreFactory $tempstore
+   * @param SharedTempStoreFactory $tempstore
    *   The tempstore factory.
    */
   public function __construct(SharedTempStoreFactory $tempstore) {
@@ @@
   /**
    * Get the tempstore.
    *
-   * @return \Drupal\Core\TempStore\SharedTempStore
+   * @return SharedTempStore
    *   The shared temp store.
    */
   protected function getTempstore() {
@@ @@
    * @param string $block_id
    *   Either a block ID, or the plugin ID used to create a new block.
    *
-   * @return \Drupal\Core\Block\BlockPluginInterface
+   * @return BlockPluginInterface
    *   The block plugin.
    */
   abstract protected function prepareBlock($block_id);
@@ @@
    */
   public function buildForm(array $form, FormStateInterface $form_state, $block_display = NULL, $block_id = NULL) {
     $cached_values = $this->tempstore->get('page_manager.block_display')->get($block_display);
-    /** @var \Drupal\page_manager\Plugin\DisplayVariant\PageBlockDisplayVariant $variant_plugin */
+    /** @var PageBlockDisplayVariant $variant_plugin */
     $this->variantPlugin = $cached_values['plugin'];

     // Rehydrate the contexts on this end.
@@ @@
     $contexts = [];
     /**
      * @var string $context_name
-     * @var \Drupal\Core\Plugin\Context\ContextDefinitionInterface $context_definition
+     * @var ContextDefinitionInterface $context_definition
      */
     foreach ($cached_values['contexts'] as $context_name => $context_definition) {
       $contexts[$context_name] = new Context($context_definition);
@@ @@
   /**
    * Gets the variant plugin for this page variant entity.
    *
-   * @return \Drupal\ctools\Plugin\BlockVariantInterface
+   * @return BlockVariantInterface
    *   The variant plugin.
    */
   protected function getVariantPlugin() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


64) modules/contrib/page_manager/page_manager_ui/src/Form/VariantPluginAddBlockForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The block manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $blockManager;

@@ @@
   /**
    * Constructs a new VariantPluginFormBase.
    *
-   * @param \Drupal\Core\TempStore\SharedTempStoreFactory $tempstore
+   * @param SharedTempStoreFactory $tempstore
    *   The shared temp store.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $block_manager
+   * @param PluginManagerInterface $block_manager
    *   The block manager.
    */
   public function __construct(SharedTempStoreFactory $tempstore, PluginManagerInterface $block_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


65) modules/contrib/page_manager/page_manager_ui/src/Form/StaticContextDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager_ui\Form;

+use Drupal\page_manager\PageVariantInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
 use Drupal\ctools\Form\ContextDelete;
@@ @@
    * @param array $cached_values
    *   The cached values from the wizard.
    *
-   * @return \Drupal\page_manager\PageVariantInterface
+   * @return PageVariantInterface
    */
   protected function getPageVariant($cached_values) {
     if (isset($cached_values['page_variant'])) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


66) modules/contrib/page_manager/page_manager_ui/src/Form/StaticContextConfigure.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager_ui\Form;

+use Drupal\page_manager\PageVariantInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\Context\ContextInterface;
 use Drupal\ctools\Form\ContextConfigure;
@@ @@
    * @param array $cached_values
    *   The cached values from the wizard.
    *
-   * @return \Drupal\page_manager\PageVariantInterface
+   * @return PageVariantInterface
    */
   protected function getPageVariant($cached_values) {
     if (isset($cached_values['page_variant'])) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


67) modules/contrib/page_manager/page_manager_ui/src/Form/SelectionDelete.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager_ui\Form;

+use Drupal\page_manager\PageVariantInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\ctools\Form\ConditionDelete;

@@ @@
    * @param array $cached_values
    *   The cached values from the wizard.
    *
-   * @return \Drupal\page_manager\PageVariantInterface
+   * @return PageVariantInterface
    */
   protected function getPageVariant($cached_values) {
     if (isset($cached_values['page_variant'])) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


68) modules/contrib/page_manager/page_manager_ui/src/Form/SelectionConfigure.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager_ui\Form;

+use Drupal\page_manager\PageVariantInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\ctools\Form\ConditionConfigure;

@@ @@
    * @param array $cached_values
    *   The cached values from the wizard.
    *
-   * @return \Drupal\page_manager\PageVariantInterface
+   * @return PageVariantInterface
    */
   protected function getPageVariant($cached_values) {
     if (isset($cached_values['page_variant'])) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


69) modules/contrib/page_manager/page_manager_ui/src/Form/ParameterEditForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager_ui\Form;

+use Drupal\page_manager\PageInterface;
 use Drupal\Core\Entity\EntityTypeRepositoryInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The page entity this static context belongs to.
    *
-   * @var \Drupal\page_manager\PageInterface
+   * @var PageInterface
    */
   protected $page;

@@ @@
   /**
    * The entity type repository.
    *
-   * @var \Drupal\Core\Entity\EntityTypeRepositoryInterface
+   * @var EntityTypeRepositoryInterface
    */
   protected $entityTypeRepository;

@@ @@
   /**
    * The typed data manager.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;

@@ @@
   /**
    * The shared temp store.
    *
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @var SharedTempStoreFactory
    */
   protected $tempstore;

@@ @@
   /**
    * Constructs a new ParameterEditForm.
    *
-   * @param \Drupal\Core\Entity\EntityTypeRepositoryInterface $entity_type_repository
+   * @param EntityTypeRepositoryInterface $entity_type_repository
    *   The entity type repository.
-   * @param \Drupal\Core\TypedData\TypedDataManagerInterface $typed_data_manager
+   * @param TypedDataManagerInterface $typed_data_manager
    *   The typed data manager.
-   * @param \Drupal\Core\TempStore\SharedTempStoreFactory $tempstore
+   * @param SharedTempStoreFactory $tempstore
    *   The temporary store.
    */
   public function __construct(EntityTypeRepositoryInterface $entity_type_repository, TypedDataManagerInterface $typed_data_manager, SharedTempStoreFactory $tempstore) {
@@ @@
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $cache_values = $this->getTempstore();
-    /** @var \Drupal\page_manager\PageInterface $page */
+    /** @var PageInterface $page */
     $page = $cache_values['page'];
     $name = $form_state->getValue('machine_name');
     $type = $form_state->getValue('type');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


70) modules/contrib/page_manager/page_manager_ui/src/Form/PageVariantSelectionForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager_ui\Form;

+use Drupal\page_manager\PageVariantInterface;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\OpenModalDialogCommand;
 use Drupal\Core\Form\FormBuilderInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function getOperationsRouteInfo($cached_values, $machine_name, $row) {
-    /** @var \Drupal\page_manager\PageVariantInterface $page_variant */
+    /** @var PageVariantInterface $page_variant */
     $page_variant = $cached_values['page_variant'];
     return ['entity.page_variant.condition', [
       'machine_name' => $machine_name,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


71) modules/contrib/page_manager/page_manager_ui/src/Form/PageVariantDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager_ui\Form;

+use Drupal\page_manager\PageInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * Tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @var SharedTempStoreFactory
    */
   protected $tempstore;

@@ @@
   /**
    * Constructs a PageVariantDeleteForm.
    *
-   * @param \Drupal\Core\TempStore\SharedTempStoreFactory $tempstore
+   * @param SharedTempStoreFactory $tempstore
    *   The tempstore factory.
    */
   public function __construct(SharedTempStoreFactory $tempstore) {
@@ @@
     $machine_name = $this->getRouteMatch()->getParameter('machine_name');
     $variant_machine_name = $this->getRouteMatch()->getParameter('variant_machine_name');
     $cached_values = $this->tempstore->get($this->getTempstoreId())->get($machine_name);
-    /** @var \Drupal\page_manager\PageInterface $page */
+    /** @var PageInterface $page */
     $page = $cached_values['page'];
     $page_variant = $page->getVariant($variant_machine_name);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


72) modules/contrib/page_manager/page_manager_ui/src/Form/PageVariantContextsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager_ui\Form;

+use Drupal\page_manager\PageVariantInterface;
+use Drupal\page_manager\PageInterface;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\OpenModalDialogCommand;
 use Drupal\Core\Form\FormBuilderInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function getContextOperationsRouteInfo($cached_values, $machine_name, $row) {
-    /** @var \Drupal\page_manager\PageVariantInterface $page_variant */
+    /** @var PageVariantInterface $page_variant */
     $page_variant = $cached_values['page_variant'];
     return ['entity.page_variant.context', [
       'machine_name' => $machine_name,
@@ @@
    * {@inheritdoc}
    */
   protected function getRelationshipOperationsRouteInfo($cached_values, $machine_name, $row) {
-    /** @var \Drupal\page_manager\PageVariantInterface $page_variant */
+    /** @var PageVariantInterface $page_variant */
     $page_variant = $cached_values['page_variant'];
     return ['entity.page_variant.relationship', [
       'machine_name' => $machine_name,
@@ @@


   protected function isEditableContext($cached_values, $row) {
-    /** @var \Drupal\page_manager\PageInterface $page */
+    /** @var PageInterface $page */
     $page = $cached_values['page'];
-    /** @var \Drupal\page_manager\PageVariantInterface $page_variant */
+    /** @var PageVariantInterface $page_variant */
     $page_variant = $cached_values['page_variant'];
     return empty($page->getContexts()[$row]) && !empty($page_variant->getContexts()[$row]);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


73) modules/contrib/page_manager/page_manager_ui/src/Form/PageVariantConfigureForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager_ui\Form;

+use Drupal\page_manager\PageInterface;
+use Drupal\page_manager\PageVariantInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormState;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
     $cached_values = $form_state->getTemporaryValue('wizard');
-    /** @var \Drupal\page_manager\PageInterface $page */
+    /** @var PageInterface $page */
     $page = $cached_values['page'];
-    /** @var \Drupal\page_manager\PageVariantInterface $page_variant */
+    /** @var PageVariantInterface $page_variant */
     $page_variant = $cached_values['page_variant'];

     $form['page_variant_label'] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


74) modules/contrib/page_manager/page_manager_ui/src/Form/PageVariantAddForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager_ui\Form;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Display\VariantManager;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The variant manager.
    *
-   * @var \Drupal\Core\Display\VariantManager
+   * @var VariantManager
    */
   protected $variantManager;

@@ @@
   /**
    * Tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @var SharedTempStoreFactory
    */
   protected $tempstore;

@@ @@
   /**
    * Constructs a new DisplayVariantAddForm.
    *
-   * @param \Drupal\Core\Display\VariantManager $variant_manager
+   * @param VariantManager $variant_manager
    *   The variant manager.
-   * @param \Drupal\Core\TempStore\SharedTempStoreFactory $tempstore
+   * @param SharedTempStoreFactory $tempstore
    *   The shared temp store factory.
    */
   public function __construct(VariantManager $variant_manager, SharedTempStoreFactory $tempstore) {
@@ @@
   /**
    * Check if a variant id is taken.
    *
-   * @param \Drupal\page_manager\PageInterface $page
+   * @param PageInterface $page
    *   The page entity.
    * @param string $variant_id
    *   The page variant id to check.
@@ @@
       /** @var $page_variant \Drupal\page_manager\Entity\PageVariant */
       $page_variant = $cached_values['page_variant'];
       $plugin = $page_variant->getVariantPlugin();
-      /** @var \Drupal\Core\StringTranslation\TranslatableMarkup $admin_label */
+      /** @var TranslatableMarkup $admin_label */
       $admin_label = $plugin->getPluginDefinition()['admin_label'];
       $form_state->setValue('label', (string) $admin_label);
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


75) modules/contrib/page_manager/page_manager_ui/src/Form/PageReorderVariantsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager_ui\Form;

+use Drupal\page_manager\PageVariantInterface;
+use Drupal\page_manager\Entity\Page;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\TempStore\SharedTempStoreFactory;
@@ @@
   /**
    * Tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @var SharedTempStoreFactory
    */
   protected $tempstore;

@@ @@
   /**
    * Constructs a new DisplayVariantAddForm.
    *
-   * @param \Drupal\Core\TempStore\SharedTempStoreFactory $tempstore
+   * @param SharedTempStoreFactory $tempstore
    *   The tempstore factory.
    */
   public function __construct(SharedTempStoreFactory $tempstore) {
@@ @@
         unset($variants[$page_variant->id()]);
       }
     }
-    /** @var \Drupal\page_manager\PageVariantInterface $page_variant */
+    /** @var PageVariantInterface $page_variant */
     foreach ($variants as $page_variant) {
       $row = [
         '#attributes' => [
@@ @@
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $cached_values = $form_state->getTemporaryValue('wizard');
-    /** @var \Drupal\page_manager\Entity\Page $page */
+    /** @var Page $page */
     $page = $cached_values['page'];

     foreach ($form_state->getValue('variants') as $id => $values) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


76) modules/contrib/page_manager/page_manager_ui/src/Form/PageGeneralForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager_ui\Form;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Display\VariantManager;
 use Drupal\Core\Form\FormBase;
@@ @@
   /**
    * The variant manager.
    *
-   * @var \Drupal\Core\Display\VariantManager
+   * @var VariantManager
    */
   protected $variantManager;

@@ @@
   /**
    * The page entity storage handler.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $pageStorage;

@@ @@
   /**
    * Constructs a new PageGeneralForm.
    *
-   * @param \Drupal\Core\Display\VariantManager $variant_manager
+   * @param VariantManager $variant_manager
    *   The variant manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(VariantManager $variant_manager, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


77) modules/contrib/page_manager/page_manager_ui/src/Form/AddVariantStaticContextDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager_ui\Form;

+use Drupal\page_manager\PageVariantInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
 use Drupal\ctools\Form\ContextDelete;
@@ @@
    * @param array $cached_values
    *   The cached values from the wizard.
    *
-   * @return \Drupal\page_manager\PageVariantInterface
+   * @return PageVariantInterface
    */
   protected function getPageVariant($cached_values) {
     return $cached_values['page_variant'];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


78) modules/contrib/page_manager/page_manager_ui/src/Form/AddVariantStaticContextConfigure.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager_ui\Form;

+use Drupal\page_manager\PageVariantInterface;
 use Drupal\Core\Plugin\Context\ContextInterface;
 use Drupal\ctools\Form\ContextConfigure;

@@ @@
    * @param array $cached_values
    *   The cached values from the wizard.
    *
-   * @return \Drupal\page_manager\PageVariantInterface
+   * @return PageVariantInterface
    */
   protected function getPageVariant($cached_values) {
     return $cached_values['page_variant'];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


79) modules/contrib/page_manager/page_manager_ui/src/Form/AddVariantSelectionForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager_ui\Form;

+use Drupal\page_manager\PageVariantInterface;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\OpenModalDialogCommand;
 use Drupal\Core\Form\FormBuilderInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function getOperationsRouteInfo($cached_values, $machine_name, $row) {
-    /** @var \Drupal\page_manager\PageVariantInterface $page_variant */
+    /** @var PageVariantInterface $page_variant */
     $page_variant = $cached_values['page_variant'];
     return ['entity.page_variant.add_step_form.condition',
       [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


80) modules/contrib/page_manager/page_manager_ui/src/Form/AddVariantSelectionDelete.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager_ui\Form;

+use Drupal\page_manager\PageVariantInterface;
 use Drupal\ctools\Form\ConditionDelete;

 class AddVariantSelectionDelete extends ConditionDelete {
@@ @@
    * @param array $cached_values
    *   The cached values from the wizard.
    *
-   * @return \Drupal\page_manager\PageVariantInterface
+   * @return PageVariantInterface
    */
   protected function getPageVariant($cached_values) {
     return $cached_values['page_variant'];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


81) modules/contrib/page_manager/page_manager_ui/src/Form/AddVariantSelectionConfigure.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager_ui\Form;

+use Drupal\page_manager\PageVariantInterface;
 use Drupal\ctools\Form\ConditionConfigure;

 class AddVariantSelectionConfigure extends ConditionConfigure {
@@ @@
    * @param array $cached_values
    *   The cached values from the wizard.
    *
-   * @return \Drupal\page_manager\PageVariantInterface
+   * @return PageVariantInterface
    */
   protected function getPageVariant($cached_values) {
     return $cached_values['page_variant'];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


82) modules/contrib/page_manager/page_manager_ui/src/Form/AddVariantContextsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager_ui\Form;

+use Drupal\page_manager\PageVariantInterface;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\OpenModalDialogCommand;
 use Drupal\Core\Form\FormBuilderInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function getContextOperationsRouteInfo($cached_values, $machine_name, $row) {
-    /** @var \Drupal\page_manager\PageVariantInterface $page_variant */
+    /** @var PageVariantInterface $page_variant */
     $page_variant = $cached_values['page_variant'];
     return ['entity.page_variant.add_step_form.context', [
       'page' => $page_variant->getPage()->id(),
@@ @@
    * {@inheritdoc}
    */
   protected function getRelationshipOperationsRouteInfo($cached_values, $machine_name, $row) {
-    /** @var \Drupal\page_manager\PageVariantInterface $page_variant */
+    /** @var PageVariantInterface $page_variant */
     $page_variant = $cached_values['page_variant'];
     return ['entity.page_variant.add_step_form.context', [
       'page' => $page_variant->getPage()->id(),
@@ @@


   protected function isEditableContext($cached_values, $row) {
-    /** @var \Drupal\page_manager\PageVariantInterface $page_variant */
+    /** @var PageVariantInterface $page_variant */
     $page_variant = $cached_values['page_variant'];
     $page = $page_variant->getPage();
     return empty($page->getContexts()[$row]) && !empty($page_variant->getContexts()[$row]);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


83) modules/contrib/page_manager/page_manager_ui/src/Entity/PageListBuilder.php:25

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\page_manager\PageInterface $entity */
+    /** @var PageInterface $entity */
     $row['label'] = $entity->label();
     $row['id'] = $entity->id();
     $row['path'] = $this->getPath($entity);
@@ @@
   /**
    * Gets the displayable path of a page entity.
    *
-   * @param \Drupal\page_manager\PageInterface $entity
+   * @param PageInterface $entity
    *   The page entity.
    *
    * @return array|string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


84) modules/contrib/page_manager/page_manager_ui/src/Controller/PageManagerController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\page_manager_ui\Controller;

+use Drupal\Core\Plugin\Context\ContextAwarePluginManagerInterface;
+use Symfony\Component\HttpFoundation\RedirectResponse;
+use Drupal\page_manager\Plugin\DisplayVariant\PageBlockDisplayVariant;
+use Drupal\Core\Plugin\Context\ContextDefinitionInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Block\BlockManagerInterface;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
   /**
    * The block manager.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;

@@ @@
   /**
    * The condition manager.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextAwarePluginManagerInterface
+   * @var ContextAwarePluginManagerInterface
    */
   protected $conditionManager;

@@ @@
   /**
    * The variant manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $variantManager;

@@ @@
   /**
    * The context handler.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   * @var ContextHandlerInterface
    */
   protected $contextHandler;

@@ @@
   /**
    * Tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @var SharedTempStoreFactory
    */
   protected $tempstore;

@@ @@
   /**
    * Constructs a new VariantPluginEditForm.
    *
-   * @param \Drupal\Core\Block\BlockManagerInterface $block_manager
+   * @param BlockManagerInterface $block_manager
    *   The block manager.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $condition_manager
+   * @param PluginManagerInterface $condition_manager
    *   The condition manager.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $variant_manager
+   * @param PluginManagerInterface $variant_manager
    *   The variant manager.
-   * @param \Drupal\Core\Plugin\Context\ContextHandlerInterface $context_handler
+   * @param ContextHandlerInterface $context_handler
    *   The context handler.
-   * @param \Drupal\Core\TempStore\SharedTempStoreFactory $tempstore
+   * @param SharedTempStoreFactory $tempstore
    *   The tempstore factory.
    */
   public function __construct(BlockManagerInterface $block_manager, PluginManagerInterface $condition_manager, PluginManagerInterface $variant_manager, ContextHandlerInterface $context_handler, SharedTempStoreFactory $tempstore) {
@@ @@
    */
   public function editPageTitle($machine_name, $tempstore_id) {
     $cached_values = $this->tempstore->get($tempstore_id)->get($machine_name);
-    /** @var \Drupal\page_manager\PageInterface $page */
+    /** @var PageInterface $page */
     $page = $cached_values['page'];
     return $this->t('Edit %label page', ['%label' => $page->label()]);
   }
@@ @@
   /**
    * Route title callback.
    *
-   * @param \Drupal\page_manager\PageVariantInterface $page_variant
+   * @param PageVariantInterface $page_variant
    *   The page variant entity.
    *
    * @return string
@@ @@
   /**
    * Route title callback.
    *
-   * @param \Drupal\page_manager\PageInterface $page
+   * @param PageInterface $page
    *   The page entity.
    * @param string $condition_id
    *   The access condition ID.
@@ @@
   /**
    * Route title callback.
    *
-   * @param \Drupal\page_manager\PageVariantInterface $page_variant
+   * @param PageVariantInterface $page_variant
    *   The page variant entity.
    * @param string $condition_id
    *   The selection condition ID.
@@ @@
   /**
    * Route title callback.
    *
-   * @param \Drupal\page_manager\PageInterface $page
+   * @param PageInterface $page
    *   The page entity.
    * @param string $name
    *   The parameter context name.
@@ @@
   /**
    * Enables or disables a Page.
    *
-   * @param \Drupal\page_manager\PageInterface $page
+   * @param PageInterface $page
    *   The page entity.
    * @param string $op
    *   The operation to perform, usually 'enable' or 'disable'.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   A redirect back to the pages list page.
    */
   public function performPageOperation(PageInterface $page, $op) {
@@ @@
   /**
    * Presents a list of variants to add to the page entity.
    *
-   * @param \Drupal\page_manager\PageInterface $page
+   * @param PageInterface $page
    *   The page entity.
    *
    * @return array
@@ @@
   /**
    * Presents a list of access conditions to add to the page entity.
    *
-   * @param \Drupal\page_manager\PageInterface $page
+   * @param PageInterface $page
    *   The page entity.
    *
    * @return array
@@ @@
   /**
    * Presents a list of selection conditions to add to the page entity.
    *
-   * @param \Drupal\page_manager\PageVariantInterface $page_variant
+   * @param PageVariantInterface $page_variant
    *   The page variant entity.
    *
    * @return array
@@ @@
   /**
    * Presents a list of blocks to add to the variant.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    * @param string $block_display
    *   The identifier of the block display variant.
@@ @@
    */
   public function selectBlock(Request $request, $block_display, $tempstore_id) {
     $cached_values = $this->tempstore->get($tempstore_id)->get($block_display);
-    /** @var \Drupal\page_manager\Plugin\DisplayVariant\PageBlockDisplayVariant $variant_plugin */
+    /** @var PageBlockDisplayVariant $variant_plugin */
     $variant_plugin = $cached_values['plugin'];

     // Rehydrate the contexts on this end.
@@ @@
     $contexts = [];
     /**
      * @var string $context_name
-     * @var \Drupal\Core\Plugin\Context\ContextDefinitionInterface $context_definition
+     * @var ContextDefinitionInterface $context_definition
      */
     foreach ($cached_values['contexts'] as $context_name => $context_definition) {
       $contexts[$context_name] = new Context($context_definition);
@@ @@
   /**
    * Build the page variant entity add form.
    *
-   * @param \Drupal\page_manager\PageInterface $page
+   * @param PageInterface $page
    *   The page this page variant belongs to.
    * @param string $variant_plugin_id
    *   The variant plugin ID.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 84 files have been changed by Rector                                      

