diff --git a/modules/purge_drush/src/Commands/DebugCommands.php b/modules/purge_drush/src/Commands/DebugCommands.php
index c10b59f..8f39c0c 100644
--- a/modules/purge_drush/src/Commands/DebugCommands.php
+++ b/modules/purge_drush/src/Commands/DebugCommands.php
@@ -15,14 +15,14 @@ class DebugCommands extends DrushCommands {
   /**
    * The 'purge.logger' service.
    *
-   * @var \Drupal\purge\Logger\LoggerServiceInterface
+   * @var LoggerServiceInterface
    */
   protected $purgeLogger;
 
   /**
    * Construct a DebugCommands object.
    *
-   * @param \Drupal\purge\Logger\LoggerServiceInterface $purge_logger
+   * @param LoggerServiceInterface $purge_logger
    *   The purge logger service.
    */
   public function __construct(LoggerServiceInterface $purge_logger) {
diff --git a/modules/purge_drush/src/Commands/DiagnosticsCommand.php b/modules/purge_drush/src/Commands/DiagnosticsCommand.php
index 0e6f07a..66fccf7 100644
--- a/modules/purge_drush/src/Commands/DiagnosticsCommand.php
+++ b/modules/purge_drush/src/Commands/DiagnosticsCommand.php
@@ -17,14 +17,14 @@ class DiagnosticsCommand extends DrushCommands {
   /**
    * The 'purge.diagnostics' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\DiagnosticCheck\DiagnosticsServiceInterface
+   * @var DiagnosticsServiceInterface
    */
   protected $purgeDiagnostics;
 
   /**
    * Construct a DiagnosticsCommand object.
    *
-   * @param \Drupal\purge\Plugin\Purge\DiagnosticCheck\DiagnosticsServiceInterface $purge_diagnostics
+   * @param DiagnosticsServiceInterface $purge_diagnostics
    *   The purge diagnostics service.
    */
   public function __construct(DiagnosticsServiceInterface $purge_diagnostics) {
@@ -68,7 +68,7 @@ class DiagnosticsCommand extends DrushCommands {
    *   severity_int: SevInt
    *   blocks_processing: Blocking?
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return RowsOfFields
    *   Row-based structure of data.
    */
   public function diagnostics(array $options = ['format' => 'table']) {
diff --git a/modules/purge_drush/src/Commands/InvalidateCommand.php b/modules/purge_drush/src/Commands/InvalidateCommand.php
index 6a24220..7403c68 100644
--- a/modules/purge_drush/src/Commands/InvalidateCommand.php
+++ b/modules/purge_drush/src/Commands/InvalidateCommand.php
@@ -24,32 +24,32 @@ class InvalidateCommand extends DrushCommands {
   /**
    * The 'purge.processors' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Processor\ProcessorsServiceInterface
+   * @var ProcessorsServiceInterface
    */
   protected $purgeProcessors;
 
   /**
    * The 'purge.purgers' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface
+   * @var PurgersServiceInterface
    */
   protected $purgePurgers;
 
   /**
    * The 'purge.invalidation.factory' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Invalidation\InvalidationsServiceInterface
+   * @var InvalidationsServiceInterface
    */
   protected $purgeInvalidationFactory;
 
   /**
    * Construct a Invalidatecommand object.
    *
-   * @param \Drupal\purge\Plugin\Purge\Invalidation\InvalidationsServiceInterface $purge_invalidation_factory
+   * @param InvalidationsServiceInterface $purge_invalidation_factory
    *   The purge invalidation factory service.
-   * @param \Drupal\purge\Plugin\Purge\Processor\ProcessorsServiceInterface $purge_processors
+   * @param ProcessorsServiceInterface $purge_processors
    *   The purge processors service.
-   * @param \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface $purge_purgers
+   * @param PurgersServiceInterface $purge_purgers
    *   The purge purgers service.
    */
   public function __construct(InvalidationsServiceInterface $purge_invalidation_factory, ProcessorsServiceInterface $purge_processors, PurgersServiceInterface $purge_purgers) {
diff --git a/modules/purge_drush/src/Commands/ProcessorCommands.php b/modules/purge_drush/src/Commands/ProcessorCommands.php
index 07547d9..94f3b24 100644
--- a/modules/purge_drush/src/Commands/ProcessorCommands.php
+++ b/modules/purge_drush/src/Commands/ProcessorCommands.php
@@ -14,14 +14,14 @@ class ProcessorCommands extends DrushCommands {
   /**
    * The 'purge.processors' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Processor\ProcessorsServiceInterface
+   * @var ProcessorsServiceInterface
    */
   protected $purgeProcessors;
 
   /**
    * Construct a ProcessorCommands object.
    *
-   * @param \Drupal\purge\Plugin\Purge\Processor\ProcessorsServiceInterface $purge_processors
+   * @param ProcessorsServiceInterface $purge_processors
    *   The purge processors service.
    */
   public function __construct(ProcessorsServiceInterface $purge_processors) {
@@ -89,7 +89,7 @@ class ProcessorCommands extends DrushCommands {
    *   label: Label
    *   description: Description
    *
-   * @return array|\Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return array|RowsOfFields
    *   Row-based structure of data.
    */
   public function processorList(array $options = ['format' => 'table']) {
@@ -134,7 +134,7 @@ class ProcessorCommands extends DrushCommands {
    *   label: Label
    *   description: Description
    *
-   * @return array|\Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return array|RowsOfFields
    *   Row-based structure of data.
    */
   public function processorListAvailable(array $options = ['format' => 'table']) {
diff --git a/modules/purge_drush/src/Commands/PurgerCommands.php b/modules/purge_drush/src/Commands/PurgerCommands.php
index df765f7..ad87a7e 100644
--- a/modules/purge_drush/src/Commands/PurgerCommands.php
+++ b/modules/purge_drush/src/Commands/PurgerCommands.php
@@ -14,14 +14,14 @@ class PurgerCommands extends DrushCommands {
   /**
    * The 'purge.purgers' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface
+   * @var PurgersServiceInterface
    */
   protected $purgePurgers;
 
   /**
    * Construct a PurgerCommands object.
    *
-   * @param \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface $purge_purgers
+   * @param PurgersServiceInterface $purge_purgers
    *   The purge purgers service.
    */
   public function __construct(PurgersServiceInterface $purge_purgers) {
@@ -104,7 +104,7 @@ class PurgerCommands extends DrushCommands {
    *   label: Label
    *   description: Description
    *
-   * @return array|\Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return array|RowsOfFields
    *   Row-based structure of data.
    */
   public function purgerList(array $options = ['format' => 'table']) {
@@ -154,7 +154,7 @@ class PurgerCommands extends DrushCommands {
    *   label: Label
    *   description: Description
    *
-   * @return array|\Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return array|RowsOfFields
    *   Row-based structure of data.
    */
   public function purgerListAvailable(array $options = ['format' => 'table']) {
diff --git a/modules/purge_drush/src/Commands/QueueCommands.php b/modules/purge_drush/src/Commands/QueueCommands.php
index 1f913af..02414dd 100644
--- a/modules/purge_drush/src/Commands/QueueCommands.php
+++ b/modules/purge_drush/src/Commands/QueueCommands.php
@@ -37,59 +37,59 @@ class QueueCommands extends DrushCommands implements SiteAliasManagerAwareInterf
   /**
    * The 'purge.processors' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Processor\ProcessorsServiceInterface
+   * @var ProcessorsServiceInterface
    */
   protected $purgeProcessors;
 
   /**
    * The 'purge.purgers' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface
+   * @var PurgersServiceInterface
    */
   protected $purgePurgers;
 
   /**
    * The 'purge.invalidation.factory' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Invalidation\InvalidationsServiceInterface
+   * @var InvalidationsServiceInterface
    */
   protected $purgeInvalidationFactory;
 
   /**
    * The 'purge.queue' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Queue\QueueServiceInterface
+   * @var QueueServiceInterface
    */
   protected $purgeQueue;
 
   /**
    * The 'purge.queue.stats' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Queue\StatsTrackerInterface
+   * @var StatsTrackerInterface
    */
   protected $purgeQueueStats;
 
   /**
    * The 'purge.queuers' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Queuer\QueuersServiceInterface
+   * @var QueuersServiceInterface
    */
   protected $purgeQueuers;
 
   /**
    * Construct a QueueCommands object.
    *
-   * @param \Drupal\purge\Plugin\Purge\Processor\ProcessorsServiceInterface $purge_processors
+   * @param ProcessorsServiceInterface $purge_processors
    *   The purge processors service.
-   * @param \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface $purge_purgers
+   * @param PurgersServiceInterface $purge_purgers
    *   The purge purgers service.
-   * @param \Drupal\purge\Plugin\Purge\Invalidation\InvalidationsServiceInterface $purge_invalidation_factory
+   * @param InvalidationsServiceInterface $purge_invalidation_factory
    *   The purge invalidation factory service.
-   * @param \Drupal\purge\Plugin\Purge\Queue\QueueServiceInterface $purge_queue
+   * @param QueueServiceInterface $purge_queue
    *   The purge queue service.
-   * @param \Drupal\purge\Plugin\Purge\Queue\StatsTrackerInterface $purge_queue_stats
+   * @param StatsTrackerInterface $purge_queue_stats
    *   The purge queue statistics service.
-   * @param \Drupal\purge\Plugin\Purge\Queuer\QueuersServiceInterface $purge_queuers
+   * @param QueuersServiceInterface $purge_queuers
    *   The purge queuers service.
    */
   public function __construct(ProcessorsServiceInterface $purge_processors, PurgersServiceInterface $purge_purgers, InvalidationsServiceInterface $purge_invalidation_factory, QueueServiceInterface $purge_queue, StatsTrackerInterface $purge_queue_stats, QueuersServiceInterface $purge_queuers) {
@@ -230,7 +230,7 @@ class QueueCommands extends DrushCommands implements SiteAliasManagerAwareInterf
    * @command p:queue-browse
    * @aliases pqb,p-queue-browse
    *
-   * @return null|\Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return null|RowsOfFields
    *   Row-based structure of data.
    */
   public function queueBrowse(array $options = [
diff --git a/modules/purge_drush/src/Commands/QueuerCommands.php b/modules/purge_drush/src/Commands/QueuerCommands.php
index 289bc00..230342d 100644
--- a/modules/purge_drush/src/Commands/QueuerCommands.php
+++ b/modules/purge_drush/src/Commands/QueuerCommands.php
@@ -14,14 +14,14 @@ class QueuerCommands extends DrushCommands {
   /**
    * The 'purge.queuers' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Queuer\QueuersServiceInterface
+   * @var QueuersServiceInterface
    */
   protected $purgeQueuers;
 
   /**
    * Construct a QueuerCommands object.
    *
-   * @param \Drupal\purge\Plugin\Purge\Queuer\QueuersServiceInterface $purge_queuers
+   * @param QueuersServiceInterface $purge_queuers
    *   The purge queuers service.
    */
   public function __construct(QueuersServiceInterface $purge_queuers) {
@@ -89,7 +89,7 @@ class QueuerCommands extends DrushCommands {
    *   label: Label
    *   description: Description
    *
-   * @return array|\Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return array|RowsOfFields
    *   Row-based structure of data.
    */
   public function queuerList(array $options = ['format' => 'table']) {
@@ -134,7 +134,7 @@ class QueuerCommands extends DrushCommands {
    *   label: Label
    *   description: Description
    *
-   * @return array|\Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return array|RowsOfFields
    *   Row-based structure of data.
    */
   public function queuerListAvailable(array $options = ['format' => 'table']) {
diff --git a/modules/purge_drush/src/Commands/TypesCommand.php b/modules/purge_drush/src/Commands/TypesCommand.php
index 128820d..730df90 100644
--- a/modules/purge_drush/src/Commands/TypesCommand.php
+++ b/modules/purge_drush/src/Commands/TypesCommand.php
@@ -18,23 +18,23 @@ class TypesCommand extends DrushCommands {
   /**
    * The 'purge.purgers' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface
+   * @var PurgersServiceInterface
    */
   protected $purgePurgers;
 
   /**
    * The 'purge.invalidation.factory' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Invalidation\InvalidationsServiceInterface
+   * @var InvalidationsServiceInterface
    */
   protected $purgeInvalidationFactory;
 
   /**
    * Construct a TypesCommand object.
    *
-   * @param \Drupal\purge\Plugin\Purge\Invalidation\InvalidationsServiceInterface $purge_invalidation_factory
+   * @param InvalidationsServiceInterface $purge_invalidation_factory
    *   The purge invalidation factory service.
-   * @param \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface $purge_purgers
+   * @param PurgersServiceInterface $purge_purgers
    *   The purge purgers service.
    */
   public function __construct(InvalidationsServiceInterface $purge_invalidation_factory, PurgersServiceInterface $purge_purgers) {
@@ -77,7 +77,7 @@ class TypesCommand extends DrushCommands {
    *   type: Type
    *   supported: Supported
    *
-   * @return array|\Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return array|RowsOfFields
    *   Row-based structure of data.
    */
   public function types(array $options = ['format' => 'table']) {
diff --git a/modules/purge_processor_lateruntime/src/EventSubscriber/LateRuntimeProcessor.php b/modules/purge_processor_lateruntime/src/EventSubscriber/LateRuntimeProcessor.php
index d9af426..b84259e 100644
--- a/modules/purge_processor_lateruntime/src/EventSubscriber/LateRuntimeProcessor.php
+++ b/modules/purge_processor_lateruntime/src/EventSubscriber/LateRuntimeProcessor.php
@@ -2,13 +2,15 @@
 
 namespace Drupal\purge_processor_lateruntime\EventSubscriber;
 
+use Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface;
+use Drupal\purge\Plugin\Purge\Queue\QueueServiceInterface;
+use Symfony\Component\HttpKernel\Event\TerminateEvent;
 use Drupal\purge\Plugin\Purge\Purger\Exception\CapacityException;
 use Drupal\purge\Plugin\Purge\Purger\Exception\DiagnosticsException;
 use Drupal\purge\Plugin\Purge\Purger\Exception\LockException;
 use Symfony\Component\DependencyInjection\ContainerAwareInterface;
 use Symfony\Component\DependencyInjection\ContainerAwareTrait;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\PostResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -27,14 +29,14 @@ class LateRuntimeProcessor implements EventSubscriberInterface, ContainerAwareIn
   /**
    * The purge executive service, which wipes content from external caches.
    *
-   * @var \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface
+   * @var PurgersServiceInterface
    */
   protected $purgePurgers;
 
   /**
    * The queue in which to store, claim and release invalidation objects from.
    *
-   * @var \Drupal\purge\Plugin\Purge\Queue\QueueServiceInterface
+   * @var QueueServiceInterface
    */
   protected $purgeQueue;
 
@@ -73,10 +75,10 @@ class LateRuntimeProcessor implements EventSubscriberInterface, ContainerAwareIn
   /**
    * Invoked by the TERMINATE kernel event.
    *
-   * @param \Symfony\Component\HttpKernel\Event\PostResponseEvent $event
+   * @param TerminateEvent $event
    *   The event object.
    */
-  public function onKernelTerminate(PostResponseEvent $event) {
+  public function onKernelTerminate(TerminateEvent $event) {
 
     // Immediately stop if our plugin is disabled.
     if (!$this->initialize()) {
diff --git a/modules/purge_queuer_coretags/src/CacheTagsQueuer.php b/modules/purge_queuer_coretags/src/CacheTagsQueuer.php
index 9925aa2..9f7308b 100644
--- a/modules/purge_queuer_coretags/src/CacheTagsQueuer.php
+++ b/modules/purge_queuer_coretags/src/CacheTagsQueuer.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\purge_queuer_coretags;
 
+use Drupal\purge\Plugin\Purge\Invalidation\InvalidationsServiceInterface;
+use Drupal\purge\Plugin\Purge\Queue\QueueServiceInterface;
+use Drupal\purge_queuer_coretags\Plugin\Purge\Queuer\CoreTagsQueuer;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\purge\Plugin\Purge\Invalidation\Exception\TypeUnsupportedException;
@@ -33,21 +36,21 @@ class CacheTagsQueuer implements CacheTagsInvalidatorInterface, ContainerAwareIn
   /**
    * The 'purge.invalidation.factory' service.
    *
-   * @var null|\Drupal\purge\Plugin\Purge\Invalidation\InvalidationsServiceInterface
+   * @var null|InvalidationsServiceInterface
    */
   protected $purgeInvalidationFactory;
 
   /**
    * The 'purge.queue' service.
    *
-   * @var null|\Drupal\purge\Plugin\Purge\Queue\QueueServiceInterface
+   * @var null|QueueServiceInterface
    */
   protected $purgeQueue;
 
   /**
    * The queuer plugin or FALSE when disabled.
    *
-   * @var false|\Drupal\purge_queuer_coretags\Plugin\Purge\Queuer\CoreTagsQueuer
+   * @var false|CoreTagsQueuer
    */
   protected $queuer;
 
diff --git a/modules/purge_queuer_coretags/src/Form/ConfigurationForm.php b/modules/purge_queuer_coretags/src/Form/ConfigurationForm.php
index 7fb2e60..770ec14 100644
--- a/modules/purge_queuer_coretags/src/Form/ConfigurationForm.php
+++ b/modules/purge_queuer_coretags/src/Form/ConfigurationForm.php
@@ -86,7 +86,7 @@ class ConfigurationForm extends QueuerConfigFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function addMoreSubmit(array &$form, FormStateInterface $form_state) {
@@ -101,7 +101,7 @@ class ConfigurationForm extends QueuerConfigFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function addMoreCallback(array &$form, FormStateInterface $form_state) {
diff --git a/modules/purge_queuer_coretags/tests/src/Unit/CacheTagsQueuerTest.php b/modules/purge_queuer_coretags/tests/src/Unit/CacheTagsQueuerTest.php
index 9170aef..1e8deca 100644
--- a/modules/purge_queuer_coretags/tests/src/Unit/CacheTagsQueuerTest.php
+++ b/modules/purge_queuer_coretags/tests/src/Unit/CacheTagsQueuerTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\purge_queuer_coretags\Unit;
 
+use PHPUnit\Framework\MockObject\MockObject;
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface;
 use Drupal\purge\Plugin\Purge\Invalidation\InvalidationsServiceInterface;
@@ -23,42 +26,42 @@ class CacheTagsQueuerTest extends UnitTestCase {
   /**
    * The tested cache tags queuer.
    *
-   * @var \Drupal\purge_queuer_coretags\CacheTagsQueuer
+   * @var CacheTagsQueuer
    */
   protected $cacheTagsQueuer;
 
   /**
    * The mocked config factory.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject|\Drupal\Core\Config\ConfigFactoryInterface
+   * @var MockObject|ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected $container;
 
   /**
    * The mocked queue service.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject|\Drupal\purge\Plugin\Purge\Queue\QueueServiceInterface
+   * @var MockObject|QueueServiceInterface
    */
   protected $purgeQueue;
 
   /**
    * The mocked queuers service.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject|\Drupal\purge\Plugin\Purge\Queuers\QueuersServiceInterface
+   * @var MockObject|\Drupal\purge\Plugin\Purge\Queuers\QueuersServiceInterface
    */
   protected $purgeQueuers;
 
   /**
    * The mocked invalidations factory.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject|\Drupal\purge\Plugin\Purge\Invalidation\InvalidationsServiceInterface
+   * @var MockObject|InvalidationsServiceInterface
    */
   protected $purgeInvalidationFactory;
 
@@ -109,7 +112,7 @@ class CacheTagsQueuerTest extends UnitTestCase {
       ->expects($this->once())
       ->method('get')
       ->with('coretags')
-      ->willReturn($this->getMockBuilder(QueuerBase::class)->disableOriginalConstructor()->getMock()
+      ->willReturn($this->createMock(QueuerBase::class)
     );
     // Assert how InvalidationsServiceInterface::get() is called.
     $invs_added_total = array_sum(array_map(
diff --git a/modules/purge_ui/src/Controller/DashboardController.php b/modules/purge_ui/src/Controller/DashboardController.php
index 43780fb..e684fdb 100644
--- a/modules/purge_ui/src/Controller/DashboardController.php
+++ b/modules/purge_ui/src/Controller/DashboardController.php
@@ -23,49 +23,49 @@ class DashboardController extends ControllerBase {
   /**
    * The 'purge.diagnostics' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\DiagnosticCheck\DiagnosticsServiceInterface
+   * @var DiagnosticsServiceInterface
    */
   protected $purgeDiagnostics;
 
   /**
    * The 'purge.invalidation.factory' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Invalidation\InvalidationsServiceInterface
+   * @var InvalidationsServiceInterface
    */
   protected $purgeInvalidationFactory;
 
   /**
    * The 'purge.processors' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Processor\ProcessorsServiceInterface
+   * @var ProcessorsServiceInterface
    */
   protected $purgeProcessors;
 
   /**
    * The 'purge.purgers' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface
+   * @var PurgersServiceInterface
    */
   protected $purgePurgers;
 
   /**
    * The 'purge.queue' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Queue\QueueServiceInterface
+   * @var QueueServiceInterface
    */
   protected $purgeQueue;
 
   /**
    * The 'purge.queuers' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Queuer\QueuersServiceInterface
+   * @var QueuersServiceInterface
    */
   protected $purgeQueuers;
 
   /**
    * The current request from the request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
@@ -102,19 +102,19 @@ class DashboardController extends ControllerBase {
   /**
    * Construct a DashboardController object.
    *
-   * @param \Drupal\purge\Plugin\Purge\DiagnosticCheck\DiagnosticsServiceInterface $purge_diagnostics
+   * @param DiagnosticsServiceInterface $purge_diagnostics
    *   Diagnostics service that reports any preliminary issues regarding purge.
-   * @param \Drupal\purge\Plugin\Purge\Invalidation\InvalidationsServiceInterface $purge_invalidation_factory
+   * @param InvalidationsServiceInterface $purge_invalidation_factory
    *   The invalidation objects factory service.
-   * @param \Drupal\purge\Plugin\Purge\Processor\ProcessorsServiceInterface $purge_processors
+   * @param ProcessorsServiceInterface $purge_processors
    *   The purge processors service.
-   * @param \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface $purge_purgers
+   * @param PurgersServiceInterface $purge_purgers
    *   The purgers service.
-   * @param \Drupal\purge\Plugin\Purge\Queue\QueueServiceInterface $purge_queue
+   * @param QueueServiceInterface $purge_queue
    *   The purge queue service.
-   * @param \Drupal\purge\Plugin\Purge\Queuer\QueuersServiceInterface $purge_queuers
+   * @param QueuersServiceInterface $purge_queuers
    *   The purge queuers service.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request from the request stack.
    */
   final public function __construct(DiagnosticsServiceInterface $purge_diagnostics, InvalidationsServiceInterface $purge_invalidation_factory, ProcessorsServiceInterface $purge_processors, PurgersServiceInterface $purge_purgers, QueueServiceInterface $purge_queue, QueuersServiceInterface $purge_queuers, Request $request) {
diff --git a/modules/purge_ui/src/Controller/ProcessorFormController.php b/modules/purge_ui/src/Controller/ProcessorFormController.php
index 30a8a36..e632076 100644
--- a/modules/purge_ui/src/Controller/ProcessorFormController.php
+++ b/modules/purge_ui/src/Controller/ProcessorFormController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\purge_ui\Controller;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\purge\Plugin\Purge\Processor\ProcessorsServiceInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -15,14 +16,14 @@ class ProcessorFormController extends ControllerBase {
   /**
    * The 'purge.processors' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Processor\ProcessorsServiceInterface
+   * @var ProcessorsServiceInterface
    */
   protected $purgeProcessors;
 
   /**
    * Construct the ProcessorFormController.
    *
-   * @param \Drupal\purge\Plugin\Purge\Processor\ProcessorsServiceInterface $purge_processors
+   * @param ProcessorsServiceInterface $purge_processors
    *   The purge processors registry.
    */
   final public function __construct(ProcessorsServiceInterface $purge_processors) {
@@ -82,7 +83,7 @@ class ProcessorFormController extends ControllerBase {
    * @param string $id
    *   The plugin id of the processor to retrieve.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The page title.
    */
   public function configFormTitle($id) {
@@ -117,7 +118,7 @@ class ProcessorFormController extends ControllerBase {
    * @param string $id
    *   The plugin id of the processor to retrieve.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The page title.
    */
   public function deleteFormTitle($id) {
@@ -153,7 +154,7 @@ class ProcessorFormController extends ControllerBase {
    * @param string $id
    *   The plugin id of the processor to retrieve.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The page title.
    */
   public function detailFormTitle($id) {
diff --git a/modules/purge_ui/src/Controller/PurgerFormController.php b/modules/purge_ui/src/Controller/PurgerFormController.php
index 1db349f..30c8873 100644
--- a/modules/purge_ui/src/Controller/PurgerFormController.php
+++ b/modules/purge_ui/src/Controller/PurgerFormController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\purge_ui\Controller;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -15,14 +16,14 @@ class PurgerFormController extends ControllerBase {
   /**
    * The 'purge.purgers' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface
+   * @var PurgersServiceInterface
    */
   protected $purgePurgers;
 
   /**
    * Construct the PurgerFormController.
    *
-   * @param \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface $purge_purgers
+   * @param PurgersServiceInterface $purge_purgers
    *   The purge executive service, which wipes content from external caches.
    */
   final public function __construct(PurgersServiceInterface $purge_purgers) {
@@ -98,7 +99,7 @@ class PurgerFormController extends ControllerBase {
    * @param string $id
    *   Unique instance ID for the purger instance.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The page title.
    */
   public function configFormTitle($id) {
@@ -158,7 +159,7 @@ class PurgerFormController extends ControllerBase {
    * @param string $id
    *   Unique instance ID for the purger instance.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The page title.
    */
   public function detailFormTitle($id) {
diff --git a/modules/purge_ui/src/Controller/QueueFormController.php b/modules/purge_ui/src/Controller/QueueFormController.php
index 57eecfb..d25707d 100644
--- a/modules/purge_ui/src/Controller/QueueFormController.php
+++ b/modules/purge_ui/src/Controller/QueueFormController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\purge_ui\Controller;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\purge\Plugin\Purge\Queue\QueueServiceInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -14,14 +15,14 @@ class QueueFormController extends ControllerBase {
   /**
    * The 'purge.queue' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Queue\QueueServiceInterface
+   * @var QueueServiceInterface
    */
   protected $purgeQueue;
 
   /**
    * Construct the QueuerFormController.
    *
-   * @param \Drupal\purge\Plugin\Purge\Queue\QueueServiceInterface $purge_queue
+   * @param QueueServiceInterface $purge_queue
    *   The purge queue service.
    */
   final public function __construct(QueueServiceInterface $purge_queue) {
@@ -51,7 +52,7 @@ class QueueFormController extends ControllerBase {
   /**
    * Route title callback.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The page title.
    */
   public function detailFormTitle() {
diff --git a/modules/purge_ui/src/Controller/QueuerFormController.php b/modules/purge_ui/src/Controller/QueuerFormController.php
index 2bdf478..a7cb015 100644
--- a/modules/purge_ui/src/Controller/QueuerFormController.php
+++ b/modules/purge_ui/src/Controller/QueuerFormController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\purge_ui\Controller;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\purge\Plugin\Purge\Queuer\QueuersServiceInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -15,14 +16,14 @@ class QueuerFormController extends ControllerBase {
   /**
    * The 'purge.queuers' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Queuer\QueuersServiceInterface
+   * @var QueuersServiceInterface
    */
   protected $purgeQueuers;
 
   /**
    * Construct the QueuerFormController.
    *
-   * @param \Drupal\purge\Plugin\Purge\Queuer\QueuersServiceInterface $purge_queuers
+   * @param QueuersServiceInterface $purge_queuers
    *   The purge queuers service.
    */
   final public function __construct(QueuersServiceInterface $purge_queuers) {
@@ -82,7 +83,7 @@ class QueuerFormController extends ControllerBase {
    * @param string $id
    *   The plugin id of the queuer to retrieve.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The page title.
    */
   public function configFormTitle($id) {
@@ -117,7 +118,7 @@ class QueuerFormController extends ControllerBase {
    * @param string $id
    *   The plugin id of the queuer to retrieve.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The page title.
    */
   public function deleteFormTitle($id) {
@@ -153,7 +154,7 @@ class QueuerFormController extends ControllerBase {
    * @param string $id
    *   The plugin id of the queuer to retrieve.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The page title.
    */
   public function detailFormTitle($id) {
diff --git a/modules/purge_ui/src/Form/CloseDialogTrait.php b/modules/purge_ui/src/Form/CloseDialogTrait.php
index b30c249..a05fa7d 100644
--- a/modules/purge_ui/src/Form/CloseDialogTrait.php
+++ b/modules/purge_ui/src/Form/CloseDialogTrait.php
@@ -20,10 +20,10 @@ trait CloseDialogTrait {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The AJAX response object.
    */
   public function closeDialog(array &$form, FormStateInterface $form_state) {
diff --git a/modules/purge_ui/src/Form/LoggingConfigForm.php b/modules/purge_ui/src/Form/LoggingConfigForm.php
index 3893b7a..7c3210e 100644
--- a/modules/purge_ui/src/Form/LoggingConfigForm.php
+++ b/modules/purge_ui/src/Form/LoggingConfigForm.php
@@ -19,14 +19,14 @@ class LoggingConfigForm extends FormBase {
   /**
    * The 'purge.logger' service.
    *
-   * @var \Drupal\purge\Logger\LoggerServiceInterface
+   * @var LoggerServiceInterface
    */
   protected $purgeLogger;
 
   /**
    * Construct a LoggingConfigForm object.
    *
-   * @param \Drupal\purge\Logger\LoggerServiceInterface $purge_logger
+   * @param LoggerServiceInterface $purge_logger
    *   Logging services for the purge module and its submodules.
    */
   final public function __construct(LoggerServiceInterface $purge_logger) {
diff --git a/modules/purge_ui/src/Form/PluginConfigFormBase.php b/modules/purge_ui/src/Form/PluginConfigFormBase.php
index 369ea48..7abec62 100644
--- a/modules/purge_ui/src/Form/PluginConfigFormBase.php
+++ b/modules/purge_ui/src/Form/PluginConfigFormBase.php
@@ -31,7 +31,7 @@ abstract class PluginConfigFormBase extends ConfigFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return bool
@@ -44,7 +44,7 @@ abstract class PluginConfigFormBase extends ConfigFormBase {
   /**
    * Retrieve the ID for the plugin being configured.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return string
@@ -112,7 +112,7 @@ abstract class PluginConfigFormBase extends ConfigFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitFormSuccess(array &$form, FormStateInterface $form_state) {
diff --git a/modules/purge_ui/src/Form/ProcessorAddForm.php b/modules/purge_ui/src/Form/ProcessorAddForm.php
index 3624ec4..ed8a224 100644
--- a/modules/purge_ui/src/Form/ProcessorAddForm.php
+++ b/modules/purge_ui/src/Form/ProcessorAddForm.php
@@ -18,14 +18,14 @@ class ProcessorAddForm extends ConfigFormBase {
   /**
    * The 'purge.processors' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Processor\ProcessorsServiceInterface
+   * @var ProcessorsServiceInterface
    */
   protected $purgeProcessors;
 
   /**
    * Construct a ProcessorAddForm object.
    *
-   * @param \Drupal\purge\Plugin\Purge\Processor\ProcessorsServiceInterface $purge_processors
+   * @param ProcessorsServiceInterface $purge_processors
    *   The purge processors service.
    */
   final public function __construct(ProcessorsServiceInterface $purge_processors) {
@@ -97,10 +97,10 @@ class ProcessorAddForm extends ConfigFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The AJAX response object.
    */
   public function addProcessor(array &$form, FormStateInterface $form_state) {
diff --git a/modules/purge_ui/src/Form/ProcessorDeleteForm.php b/modules/purge_ui/src/Form/ProcessorDeleteForm.php
index da827b1..6df0a5a 100644
--- a/modules/purge_ui/src/Form/ProcessorDeleteForm.php
+++ b/modules/purge_ui/src/Form/ProcessorDeleteForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\purge_ui\Form;
 
+use Drupal\purge\Plugin\Purge\Processor\ProcessorInterface;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\CloseModalDialogCommand;
 use Drupal\Core\Form\ConfirmFormBase;
@@ -18,21 +19,21 @@ class ProcessorDeleteForm extends ConfirmFormBase {
   /**
    * The 'purge.processors' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Processor\ProcessorsServiceInterface
+   * @var ProcessorsServiceInterface
    */
   protected $purgeProcessors;
 
   /**
    * The processor object to be deleted.
    *
-   * @var \Drupal\purge\Plugin\Purge\Processor\ProcessorInterface
+   * @var ProcessorInterface
    */
   protected $processor;
 
   /**
    * Construct a ProcessorDeleteForm object.
    *
-   * @param \Drupal\purge\Plugin\Purge\Processor\ProcessorsServiceInterface $purge_processors
+   * @param ProcessorsServiceInterface $purge_processors
    *   The purge processors service.
    */
   final public function __construct(ProcessorsServiceInterface $purge_processors) {
@@ -117,10 +118,10 @@ class ProcessorDeleteForm extends ConfirmFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The AJAX response object.
    */
   public function deleteProcessor(array &$form, FormStateInterface $form_state) {
diff --git a/modules/purge_ui/src/Form/PurgeBlockForm.php b/modules/purge_ui/src/Form/PurgeBlockForm.php
index fb1fa1f..fc9154a 100644
--- a/modules/purge_ui/src/Form/PurgeBlockForm.php
+++ b/modules/purge_ui/src/Form/PurgeBlockForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\purge_ui\Form;
 
+use Drupal\purge\Plugin\Purge\Processor\ProcessorInterface;
+use Drupal\purge\Plugin\Purge\Queuer\QueuerInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ -32,42 +34,42 @@ class PurgeBlockForm extends FormBase {
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The 'purge_ui_block_processor' plugin.
    *
-   * @var null|\Drupal\purge\Plugin\Purge\Processor\ProcessorInterface
+   * @var null|ProcessorInterface
    */
   protected $processor;
 
   /**
    * The 'purge_ui_block_queuer' plugin.
    *
-   * @var null|\Drupal\purge\Plugin\Purge\Queuer\QueuerInterface
+   * @var null|QueuerInterface
    */
   protected $queuer;
 
   /**
    * The 'purge.purgers' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface
+   * @var PurgersServiceInterface
    */
   protected $purgePurgers;
 
   /**
    * The 'purge.invalidation.factory' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Invalidation\InvalidationsServiceInterface
+   * @var InvalidationsServiceInterface
    */
   protected $purgeInvalidationFactory;
 
   /**
    * The 'purge.queue' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Queue\QueueServiceInterface
+   * @var QueueServiceInterface
    */
   protected $purgeQueue;
 
@@ -76,17 +78,17 @@ class PurgeBlockForm extends FormBase {
    *
    * @param string[] $config
    *   The form's configuration array, which determines how and what we purge.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\purge\Plugin\Purge\Processor\ProcessorsServiceInterface $purge_processors
+   * @param ProcessorsServiceInterface $purge_processors
    *   The purge processors service.
-   * @param \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface $purge_purgers
+   * @param PurgersServiceInterface $purge_purgers
    *   The purge purgers service.
-   * @param \Drupal\purge\Plugin\Purge\Invalidation\InvalidationsServiceInterface $purge_invalidation_factory
+   * @param InvalidationsServiceInterface $purge_invalidation_factory
    *   The purge invalidations factory service.
-   * @param \Drupal\purge\Plugin\Purge\Queue\QueueServiceInterface $purge_queue
+   * @param QueueServiceInterface $purge_queue
    *   The purge queue service.
-   * @param \Drupal\purge\Plugin\Purge\Queuer\QueuersServiceInterface $purge_queuers
+   * @param QueuersServiceInterface $purge_queuers
    *   The purge queuers service.
    */
   final public function __construct(array $config, MessengerInterface $messenger, ProcessorsServiceInterface $purge_processors, PurgersServiceInterface $purge_purgers, InvalidationsServiceInterface $purge_invalidation_factory, QueueServiceInterface $purge_queue, QueuersServiceInterface $purge_queuers) {
@@ -105,7 +107,7 @@ class PurgeBlockForm extends FormBase {
   /**
    * {@inheritdoc}
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The dependency injection container.
    * @param string[] $config
    *   The form's configuration array, which determines how and what we purge.
diff --git a/modules/purge_ui/src/Form/PurgerAddForm.php b/modules/purge_ui/src/Form/PurgerAddForm.php
index 744c811..d3fcc52 100644
--- a/modules/purge_ui/src/Form/PurgerAddForm.php
+++ b/modules/purge_ui/src/Form/PurgerAddForm.php
@@ -18,14 +18,14 @@ class PurgerAddForm extends ConfigFormBase {
   /**
    * The purge executive service, which wipes content from external caches.
    *
-   * @var \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface
+   * @var PurgersServiceInterface
    */
   protected $purgePurgers;
 
   /**
    * Construct a AddPurgerForm object.
    *
-   * @param \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface $purge_purgers
+   * @param PurgersServiceInterface $purge_purgers
    *   The purgers service.
    */
   final public function __construct(PurgersServiceInterface $purge_purgers) {
@@ -102,10 +102,10 @@ class PurgerAddForm extends ConfigFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The AJAX response object.
    */
   public function addPurger(array &$form, FormStateInterface $form_state) {
diff --git a/modules/purge_ui/src/Form/PurgerDeleteForm.php b/modules/purge_ui/src/Form/PurgerDeleteForm.php
index 0371a26..ed81826 100644
--- a/modules/purge_ui/src/Form/PurgerDeleteForm.php
+++ b/modules/purge_ui/src/Form/PurgerDeleteForm.php
@@ -32,14 +32,14 @@ class PurgerDeleteForm extends ConfirmFormBase {
   /**
    * The purge executive service, which wipes content from external caches.
    *
-   * @var \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface
+   * @var PurgersServiceInterface
    */
   protected $purgePurgers;
 
   /**
    * Construct a DeletePurgerForm object.
    *
-   * @param \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface $purge_purgers
+   * @param PurgersServiceInterface $purge_purgers
    *   The purgers service.
    */
   final public function __construct(PurgersServiceInterface $purge_purgers) {
@@ -128,10 +128,10 @@ class PurgerDeleteForm extends ConfirmFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The AJAX response object.
    */
   public function deletePurger(array &$form, FormStateInterface $form_state) {
diff --git a/modules/purge_ui/src/Form/PurgerMoveForm.php b/modules/purge_ui/src/Form/PurgerMoveForm.php
index a579048..c64f371 100644
--- a/modules/purge_ui/src/Form/PurgerMoveForm.php
+++ b/modules/purge_ui/src/Form/PurgerMoveForm.php
@@ -39,14 +39,14 @@ class PurgerMoveForm extends ConfirmFormBase {
   /**
    * The 'purge.purgers' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface
+   * @var PurgersServiceInterface
    */
   protected $purgePurgers;
 
   /**
    * Construct a PurgerMoveForm object.
    *
-   * @param \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface $purge_purgers
+   * @param PurgersServiceInterface $purge_purgers
    *   The purgers service.
    */
   final public function __construct(PurgersServiceInterface $purge_purgers) {
@@ -140,10 +140,10 @@ class PurgerMoveForm extends ConfirmFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The AJAX response object.
    */
   public function movePurger(array &$form, FormStateInterface $form_state) {
diff --git a/modules/purge_ui/src/Form/QueueBrowserForm.php b/modules/purge_ui/src/Form/QueueBrowserForm.php
index 4bbf3d7..d74dac0 100644
--- a/modules/purge_ui/src/Form/QueueBrowserForm.php
+++ b/modules/purge_ui/src/Form/QueueBrowserForm.php
@@ -18,7 +18,7 @@ class QueueBrowserForm extends FormBase {
   /**
    * The 'purge.queue' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Queue\QueueServiceInterface
+   * @var QueueServiceInterface
    */
   protected $purgeQueue;
 
@@ -32,7 +32,7 @@ class QueueBrowserForm extends FormBase {
   /**
    * Construct a QueueBrowserForm object.
    *
-   * @param \Drupal\purge\Plugin\Purge\Queue\QueueServiceInterface $purge_queue
+   * @param QueueServiceInterface $purge_queue
    *   The purge queue service.
    */
   final public function __construct(QueueServiceInterface $purge_queue) {
diff --git a/modules/purge_ui/src/Form/QueueChangeForm.php b/modules/purge_ui/src/Form/QueueChangeForm.php
index 2740a3b..1d36135 100644
--- a/modules/purge_ui/src/Form/QueueChangeForm.php
+++ b/modules/purge_ui/src/Form/QueueChangeForm.php
@@ -18,14 +18,14 @@ class QueueChangeForm extends FormBase {
   /**
    * The 'purge.queue' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Queue\QueueServiceInterface
+   * @var QueueServiceInterface
    */
   protected $purgeQueue;
 
   /**
    * Construct a QueueChangeForm object.
    *
-   * @param \Drupal\purge\Plugin\Purge\Queue\QueueServiceInterface $purge_queue
+   * @param QueueServiceInterface $purge_queue
    *   The purge queue service.
    */
   final public function __construct(QueueServiceInterface $purge_queue) {
diff --git a/modules/purge_ui/src/Form/QueueEmptyForm.php b/modules/purge_ui/src/Form/QueueEmptyForm.php
index 3c91db9..2b2745b 100644
--- a/modules/purge_ui/src/Form/QueueEmptyForm.php
+++ b/modules/purge_ui/src/Form/QueueEmptyForm.php
@@ -18,14 +18,14 @@ class QueueEmptyForm extends ConfirmFormBase {
   /**
    * The 'purge.queue' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Queue\QueueServiceInterface
+   * @var QueueServiceInterface
    */
   protected $purgeQueue;
 
   /**
    * Construct a QueueClearForm object.
    *
-   * @param \Drupal\purge\Plugin\Purge\Queue\QueueServiceInterface $purge_queue
+   * @param QueueServiceInterface $purge_queue
    *   The purge queue service.
    */
   final public function __construct(QueueServiceInterface $purge_queue) {
@@ -109,10 +109,10 @@ class QueueEmptyForm extends ConfirmFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The AJAX response object.
    */
   public function emptyQueue(array &$form, FormStateInterface $form_state) {
diff --git a/modules/purge_ui/src/Form/QueuerAddForm.php b/modules/purge_ui/src/Form/QueuerAddForm.php
index a6cec9d..10aa876 100644
--- a/modules/purge_ui/src/Form/QueuerAddForm.php
+++ b/modules/purge_ui/src/Form/QueuerAddForm.php
@@ -18,14 +18,14 @@ class QueuerAddForm extends ConfigFormBase {
   /**
    * The 'purge.queuers' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Queuer\QueuersServiceInterface
+   * @var QueuersServiceInterface
    */
   protected $purgeQueuers;
 
   /**
    * Construct a QueuerAddForm object.
    *
-   * @param \Drupal\purge\Plugin\Purge\Queuer\QueuersServiceInterface $purge_queuers
+   * @param QueuersServiceInterface $purge_queuers
    *   The purge queuers service.
    */
   final public function __construct(QueuersServiceInterface $purge_queuers) {
@@ -97,10 +97,10 @@ class QueuerAddForm extends ConfigFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The AJAX response object.
    */
   public function addQueuer(array &$form, FormStateInterface $form_state) {
diff --git a/modules/purge_ui/src/Form/QueuerDeleteForm.php b/modules/purge_ui/src/Form/QueuerDeleteForm.php
index 47765e4..9139e24 100644
--- a/modules/purge_ui/src/Form/QueuerDeleteForm.php
+++ b/modules/purge_ui/src/Form/QueuerDeleteForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\purge_ui\Form;
 
+use Drupal\purge\Plugin\Purge\Queuer\QueuerInterface;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\CloseModalDialogCommand;
 use Drupal\Core\Form\ConfirmFormBase;
@@ -18,21 +19,21 @@ class QueuerDeleteForm extends ConfirmFormBase {
   /**
    * The 'purge.queuers' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Queuer\QueuersServiceInterface
+   * @var QueuersServiceInterface
    */
   protected $purgeQueuers;
 
   /**
    * The queuer object to be deleted.
    *
-   * @var \Drupal\purge\Plugin\Purge\Queuer\QueuerInterface
+   * @var QueuerInterface
    */
   protected $queuer;
 
   /**
    * Construct a QueuerDeleteForm object.
    *
-   * @param \Drupal\purge\Plugin\Purge\Queuer\QueuersServiceInterface $purge_queuers
+   * @param QueuersServiceInterface $purge_queuers
    *   The purge queuers service.
    */
   final public function __construct(QueuersServiceInterface $purge_queuers) {
@@ -117,10 +118,10 @@ class QueuerDeleteForm extends ConfirmFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The AJAX response object.
    */
   public function deleteQueuer(array &$form, FormStateInterface $form_state) {
diff --git a/modules/purge_ui/src/Plugin/Block/PurgeBlock.php b/modules/purge_ui/src/Plugin/Block/PurgeBlock.php
index 6820ff2..c049fc2 100644
--- a/modules/purge_ui/src/Plugin/Block/PurgeBlock.php
+++ b/modules/purge_ui/src/Plugin/Block/PurgeBlock.php
@@ -23,7 +23,7 @@ class PurgeBlock extends BlockBase implements ContainerFactoryPluginInterface {
   /**
    * Construct a new PurgeBlock instance.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The dependency injection container.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
diff --git a/modules/purge_ui/tests/modules/purge_ui_remove_block_plugins_test/src/BlackholePluginManager.php b/modules/purge_ui/tests/modules/purge_ui_remove_block_plugins_test/src/BlackholePluginManager.php
index 48b2109..0cbece8 100644
--- a/modules/purge_ui/tests/modules/purge_ui_remove_block_plugins_test/src/BlackholePluginManager.php
+++ b/modules/purge_ui/tests/modules/purge_ui_remove_block_plugins_test/src/BlackholePluginManager.php
@@ -17,9 +17,9 @@ class BlackholePluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/modules/purge_ui/tests/src/Functional/DashboardPurgersTest.php b/modules/purge_ui/tests/src/Functional/DashboardPurgersTest.php
index 8c472f6..61f4523 100644
--- a/modules/purge_ui/tests/src/Functional/DashboardPurgersTest.php
+++ b/modules/purge_ui/tests/src/Functional/DashboardPurgersTest.php
@@ -47,7 +47,7 @@ class DashboardPurgersTest extends DashboardTestBase {
     $this->assertSession()->linkByHrefExists(Url::fromRoute('purge_ui.purger_config_dialog_form', $purger_1_route_params)->toString());
     $this->assertSession()->linkByHrefExists(Url::fromRoute('purge_ui.purger_delete_form', $purger_1_route_params)->toString());
     // Assert that the purger-type supportability matrix shows the checkmarks.
-    $expected_checkmark_image_url = file_url_transform_relative(file_create_url('core/misc/icons/73b355/check.svg'));
+    $expected_checkmark_image_url = \Drupal::service('file_url_generator')->generateString('core/misc/icons/73b355/check.svg');
     $this->assertFalse(empty($this->cssSelect('img[width=18][height=18][alt=Supported][title=Supported][src="' . $expected_checkmark_image_url . '"]')));
     $this->assertSession()->responseNotContains('<img supports="drupal-domain"');
     $this->assertSession()->responseNotContains('<img supports="drupal-path"');
diff --git a/modules/purge_ui/tests/src/Functional/DashboardTestBase.php b/modules/purge_ui/tests/src/Functional/DashboardTestBase.php
index 06461ed..f7df6b2 100644
--- a/modules/purge_ui/tests/src/Functional/DashboardTestBase.php
+++ b/modules/purge_ui/tests/src/Functional/DashboardTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\purge_ui\Functional;
 
+use Drupal\user\Entity\User;
 use Drupal\Core\Url;
 use Drupal\Tests\purge\Functional\BrowserTestBase;
 
@@ -13,14 +14,14 @@ abstract class DashboardTestBase extends BrowserTestBase {
   /**
    * The Drupal user entity.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $adminUser;
 
   /**
    * Route providing the main configuration form of the purge module.
    *
-   * @var string|\Drupal\Core\Url
+   * @var string|Url
    */
   protected $route = 'purge_ui.dashboard';
 
diff --git a/modules/purge_ui/tests/src/Functional/Form/AjaxFormTestBase.php b/modules/purge_ui/tests/src/Functional/Form/AjaxFormTestBase.php
index 178cc31..380bd36 100644
--- a/modules/purge_ui/tests/src/Functional/Form/AjaxFormTestBase.php
+++ b/modules/purge_ui/tests/src/Functional/Form/AjaxFormTestBase.php
@@ -16,7 +16,7 @@ abstract class AjaxFormTestBase extends FormTestBase {
   /**
    * Assert that a \Drupal\Core\Ajax\CloseModalDialogCommand is issued.
    *
-   * @param \Drupal\Core\Ajax\AjaxResponse $ajax
+   * @param AjaxResponse $ajax
    *   The undecoded AjaxResponse object returned by the http_kernel.
    * @param string $command
    *   The name of the command to assert.
@@ -50,7 +50,7 @@ abstract class AjaxFormTestBase extends FormTestBase {
   /**
    * Assert that a \Drupal\Core\Ajax\CloseModalDialogCommand is issued.
    *
-   * @param \Drupal\Core\Ajax\AjaxResponse $ajax
+   * @param AjaxResponse $ajax
    *   The undecoded AjaxResponse object returned by the http_kernel.
    * @param int $expected
    *   The total number of expected commands.
@@ -63,7 +63,7 @@ abstract class AjaxFormTestBase extends FormTestBase {
   /**
    * Assert that a \Drupal\Core\Ajax\CloseModalDialogCommand is issued.
    *
-   * @param \Drupal\Core\Ajax\AjaxResponse $ajax
+   * @param AjaxResponse $ajax
    *   The undecoded AjaxResponse object returned by the http_kernel.
    */
   protected function assertAjaxCommandCloseModalDialog(AjaxResponse $ajax): void {
@@ -77,7 +77,7 @@ abstract class AjaxFormTestBase extends FormTestBase {
   /**
    * Assert that a \Drupal\purge_ui\Form\ReloadConfigFormCommand is issued.
    *
-   * @param \Drupal\Core\Ajax\AjaxResponse $ajax
+   * @param AjaxResponse $ajax
    *   The undecoded AjaxResponse object returned by the http_kernel.
    */
   protected function assertAjaxCommandReloadConfigForm(AjaxResponse $ajax): void {
@@ -163,7 +163,7 @@ abstract class AjaxFormTestBase extends FormTestBase {
    * @param array $route_parameters
    *   (optional) An associative array of route parameter names and values.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The undecoded AjaxResponse object returned by the http_kernel.
    *
    * @see \Drupal\Tests\UiHelperTrait::submitForm()
diff --git a/modules/purge_ui/tests/src/Functional/Form/Config/PluginConfigFormTestBase.php b/modules/purge_ui/tests/src/Functional/Form/Config/PluginConfigFormTestBase.php
index 84a5816..e49aa0d 100644
--- a/modules/purge_ui/tests/src/Functional/Form/Config/PluginConfigFormTestBase.php
+++ b/modules/purge_ui/tests/src/Functional/Form/Config/PluginConfigFormTestBase.php
@@ -97,6 +97,7 @@ abstract class PluginConfigFormTestBase extends AjaxFormTestBase {
 
   /**
    * Tests save button presence/absence.
+   * @doesNotPerformAssertions
    */
   public function testSaveConfigurationSubmit(): void {
     throw new \LogicException("Implementation of testSaveConfigurationSubmit mandatory!");
diff --git a/modules/purge_ui/tests/src/Functional/Form/FormTestBase.php b/modules/purge_ui/tests/src/Functional/Form/FormTestBase.php
index c45694b..97fb3be 100644
--- a/modules/purge_ui/tests/src/Functional/Form/FormTestBase.php
+++ b/modules/purge_ui/tests/src/Functional/Form/FormTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\purge_ui\Functional\Form;
 
+use Drupal\user\Entity\User;
 use Drupal\Core\Form\FormBuilderInterface;
 use Drupal\Core\Form\FormInterface;
 use Drupal\Core\Form\FormState;
@@ -23,14 +24,14 @@ abstract class FormTestBase extends BrowserTestBase {
   /**
    * The Drupal user entity.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $adminUser;
 
   /**
    * The form builder.
    *
-   * @var null|\Drupal\Core\Form\FormBuilderInterface
+   * @var null|FormBuilderInterface
    */
   protected $formBuilder = NULL;
 
@@ -44,14 +45,14 @@ abstract class FormTestBase extends BrowserTestBase {
   /**
    * The form id, equal to the route name when left as NULL.
    *
-   * @var null|\Drupal\Core\Form\FormBuilderInterface
+   * @var null|FormBuilderInterface
    */
   protected $formId = NULL;
 
   /**
    * The tested form instance.
    *
-   * @var null|\Drupal\Core\Form\FormBuilderInterface
+   * @var null|FormBuilderInterface
    */
   protected $formInstance = NULL;
 
@@ -106,7 +107,7 @@ abstract class FormTestBase extends BrowserTestBase {
   /**
    * Return the same instance of a form.
    *
-   * @return \Drupal\Core\Form\FormInterface
+   * @return FormInterface
    *   The form instance.
    */
   protected function formInstance(): FormInterface {
@@ -119,7 +120,7 @@ abstract class FormTestBase extends BrowserTestBase {
   /**
    * Return the form builder instance.
    *
-   * @return \Drupal\Core\Form\FormInterface
+   * @return FormInterface
    *   The form instance.
    */
   protected function formBuilder(): FormBuilderInterface {
@@ -165,7 +166,7 @@ abstract class FormTestBase extends BrowserTestBase {
   /**
    * Return a new instance of the form being tested.
    *
-   * @return \Drupal\Core\Form\FormInterface
+   * @return FormInterface
    *   The form instance.
    */
   protected function getFormInstance(): FormInterface {
@@ -175,7 +176,7 @@ abstract class FormTestBase extends BrowserTestBase {
   /**
    * Retrieve a new formstate instance.
    *
-   * @return \Drupal\Core\Form\FormStateInterface
+   * @return FormStateInterface
    *   The form state instance.
    */
   protected function getFormStateInstance(): FormStateInterface {
diff --git a/modules/purge_ui/tests/src/Functional/Form/QueueBrowserFormTest.php b/modules/purge_ui/tests/src/Functional/Form/QueueBrowserFormTest.php
index 6bbe43a..fd58287 100644
--- a/modules/purge_ui/tests/src/Functional/Form/QueueBrowserFormTest.php
+++ b/modules/purge_ui/tests/src/Functional/Form/QueueBrowserFormTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\purge_ui\Functional\Form;
 
+use Drupal\purge\Plugin\Purge\Queuer\QueuerInterface;
 use Drupal\purge_ui\Form\QueueBrowserForm;
 
 /**
@@ -40,7 +41,7 @@ class QueueBrowserFormTest extends AjaxFormTestBase {
   /**
    * The queuer plugin.
    *
-   * @var \Drupal\purge\Plugin\Purge\Queuer\QueuerInterface
+   * @var QueuerInterface
    */
   protected $queuer;
 
diff --git a/modules/purge_ui/tests/src/Functional/Form/QueueEmptyFormTest.php b/modules/purge_ui/tests/src/Functional/Form/QueueEmptyFormTest.php
index e2355ed..8ac5946 100644
--- a/modules/purge_ui/tests/src/Functional/Form/QueueEmptyFormTest.php
+++ b/modules/purge_ui/tests/src/Functional/Form/QueueEmptyFormTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\purge_ui\Functional\Form;
 
+use Drupal\purge\Plugin\Purge\Queuer\QueuerInterface;
 use Drupal\purge_ui\Form\QueueEmptyForm;
 
 /**
@@ -38,7 +39,7 @@ class QueueEmptyFormTest extends AjaxFormTestBase {
   /**
    * The queuer plugin.
    *
-   * @var \Drupal\purge\Plugin\Purge\Queuer\QueuerInterface
+   * @var QueuerInterface
    */
   protected $queuer;
 
diff --git a/modules/purge_ui/tests/src/Functional/Form/SystemPerformanceFormTest.php b/modules/purge_ui/tests/src/Functional/Form/SystemPerformanceFormTest.php
index ef729dc..053c7fd 100644
--- a/modules/purge_ui/tests/src/Functional/Form/SystemPerformanceFormTest.php
+++ b/modules/purge_ui/tests/src/Functional/Form/SystemPerformanceFormTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\purge_ui\Functional\Form;
 
+use Drupal\user\Entity\User;
 use Drupal\Core\Url;
 use Drupal\Tests\purge\Functional\BrowserTestBase;
 
@@ -15,14 +16,14 @@ class SystemPerformanceFormTest extends BrowserTestBase {
   /**
    * The Drupal user entity.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $adminUser;
 
   /**
    * Route providing the system configuration form which purge_ui alters.
    *
-   * @var string|\Drupal\Core\Url
+   * @var string|Url
    */
   protected $route = 'system.performance_settings';
 
diff --git a/src/Annotation/PurgeDiagnosticCheck.php b/src/Annotation/PurgeDiagnosticCheck.php
index 7560885..f05a268 100644
--- a/src/Annotation/PurgeDiagnosticCheck.php
+++ b/src/Annotation/PurgeDiagnosticCheck.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\purge\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -21,7 +22,7 @@ class PurgeDiagnosticCheck extends Plugin {
   /**
    * The title of the check.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    * @ingroup plugin_translatable
    */
   public $title;
@@ -29,7 +30,7 @@ class PurgeDiagnosticCheck extends Plugin {
   /**
    * The description of what the check does.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    * @ingroup plugin_translatable
    */
   public $description;
diff --git a/src/Annotation/PurgeInvalidation.php b/src/Annotation/PurgeInvalidation.php
index 67e8300..515dfed 100644
--- a/src/Annotation/PurgeInvalidation.php
+++ b/src/Annotation/PurgeInvalidation.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\purge\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -21,7 +22,7 @@ class PurgeInvalidation extends Plugin {
   /**
    * The human-readable name of the invalidation type.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    * @ingroup plugin_translatable
    */
   public $label;
@@ -29,7 +30,7 @@ class PurgeInvalidation extends Plugin {
   /**
    * The description of the invalidation type.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    * @ingroup plugin_translatable
    */
   public $description;
diff --git a/src/Annotation/PurgeProcessor.php b/src/Annotation/PurgeProcessor.php
index acb69aa..587df56 100644
--- a/src/Annotation/PurgeProcessor.php
+++ b/src/Annotation/PurgeProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\purge\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -21,7 +22,7 @@ class PurgeProcessor extends Plugin {
   /**
    * The human-readable name of the processor plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    * @ingroup plugin_translatable
    */
   public $label;
@@ -29,7 +30,7 @@ class PurgeProcessor extends Plugin {
   /**
    * The description of the processor plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    * @ingroup plugin_translatable
    */
   public $description;
diff --git a/src/Annotation/PurgePurger.php b/src/Annotation/PurgePurger.php
index 1b9f7d4..b982409 100644
--- a/src/Annotation/PurgePurger.php
+++ b/src/Annotation/PurgePurger.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\purge\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -21,7 +22,7 @@ class PurgePurger extends Plugin {
   /**
    * The human-readable name of the purger plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    * @ingroup plugin_translatable
    */
   public $label;
@@ -50,11 +51,10 @@ class PurgePurger extends Plugin {
    * @var float
    */
   public $cooldown_time = 0.0; // phpcs:ignore -- annotation property!
-
   /**
    * The description of the purger plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    * @ingroup plugin_translatable
    */
   public $description;
diff --git a/src/Annotation/PurgeQueue.php b/src/Annotation/PurgeQueue.php
index 0269fbc..179485b 100644
--- a/src/Annotation/PurgeQueue.php
+++ b/src/Annotation/PurgeQueue.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\purge\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -21,7 +22,7 @@ class PurgeQueue extends Plugin {
   /**
    * The human-readable name of the queue plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    * @ingroup plugin_translatable
    */
   public $label;
@@ -29,7 +30,7 @@ class PurgeQueue extends Plugin {
   /**
    * The description of the queue plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    * @ingroup plugin_translatable
    */
   public $description;
diff --git a/src/Annotation/PurgeQueuer.php b/src/Annotation/PurgeQueuer.php
index 5c19ba9..f2668f6 100644
--- a/src/Annotation/PurgeQueuer.php
+++ b/src/Annotation/PurgeQueuer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\purge\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -21,7 +22,7 @@ class PurgeQueuer extends Plugin {
   /**
    * The human-readable name of the queuer plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    * @ingroup plugin_translatable
    */
   public $label;
@@ -29,7 +30,7 @@ class PurgeQueuer extends Plugin {
   /**
    * The description of the queuer plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    * @ingroup plugin_translatable
    */
   public $description;
diff --git a/src/Counter/Counter.php b/src/Counter/Counter.php
index 1807c9f..a47c14d 100644
--- a/src/Counter/Counter.php
+++ b/src/Counter/Counter.php
@@ -109,7 +109,7 @@ class Counter implements CounterInterface {
    * @param int|float $value
    *   The new value.
    *
-   * @throws \Drupal\purge\Plugin\Purge\Purger\Exception\BadBehaviorException
+   * @throws BadBehaviorException
    *   Thrown when $value is not a integer, float or when it is negative.
    * @throws \LogicException
    *   Thrown when the object got created without set permission.
diff --git a/src/Counter/CounterInterface.php b/src/Counter/CounterInterface.php
index aec8031..471742d 100644
--- a/src/Counter/CounterInterface.php
+++ b/src/Counter/CounterInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\purge\Counter;
 
+use Drupal\purge\Plugin\Purge\Purger\Exception\BadBehaviorException;
 /**
  * Describes a numeric counter.
  */
@@ -61,7 +62,7 @@ interface CounterInterface {
    * @param int|float $value
    *   The new value.
    *
-   * @throws \Drupal\purge\Plugin\Purge\Purger\Exception\BadBehaviorException
+   * @throws BadBehaviorException
    *   Thrown when $value is not a integer, float or when it is negative.
    * @throws \LogicException
    *   Thrown when the object got created without set permission.
@@ -86,7 +87,7 @@ interface CounterInterface {
    * @param int|float $amount
    *   Numeric amount to subtract from the current counter value.
    *
-   * @throws \Drupal\purge\Plugin\Purge\Purger\Exception\BadBehaviorException
+   * @throws BadBehaviorException
    *   Thrown when $amount is not a float, integer or when it is zero/negative.
    * @throws \LogicException
    *   Thrown when the object got created without decrement permission.
@@ -99,7 +100,7 @@ interface CounterInterface {
    * @param int|float $amount
    *   Numeric amount to add up to the current counter value.
    *
-   * @throws \Drupal\purge\Plugin\Purge\Purger\Exception\BadBehaviorException
+   * @throws BadBehaviorException
    *   Thrown when $amount is not a float, integer, when it is zero/negative.
    * @throws \LogicException
    *   Thrown when the object got created without increment permission.
diff --git a/src/Counter/ExplainedCounterInterface.php b/src/Counter/ExplainedCounterInterface.php
index 3ffd622..64c532a 100644
--- a/src/Counter/ExplainedCounterInterface.php
+++ b/src/Counter/ExplainedCounterInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\purge\Counter;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 /**
  * Describes a counter with the ability to return user-friendly explanations.
  */
@@ -18,7 +19,7 @@ interface ExplainedCounterInterface extends CounterInterface {
   /**
    * Gets the title of the counter.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The translated title.
    */
   public function getTitle();
@@ -26,7 +27,7 @@ interface ExplainedCounterInterface extends CounterInterface {
   /**
    * Gets the description of the counter.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The translated description.
    */
   public function getDescription();
diff --git a/src/EventSubscriber/CacheableResponseSubscriber.php b/src/EventSubscriber/CacheableResponseSubscriber.php
index 12c85f7..e46a281 100644
--- a/src/EventSubscriber/CacheableResponseSubscriber.php
+++ b/src/EventSubscriber/CacheableResponseSubscriber.php
@@ -2,10 +2,10 @@
 
 namespace Drupal\purge\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Cache\CacheableResponseInterface;
 use Drupal\purge\Plugin\Purge\TagsHeader\TagsHeadersServiceInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -16,14 +16,14 @@ class CacheableResponseSubscriber implements EventSubscriberInterface {
   /**
    * The tagsheaders service for iterating the available header plugins.
    *
-   * @var \Drupal\purge\Plugin\Purge\TagsHeader\TagsHeadersServiceInterface
+   * @var TagsHeadersServiceInterface
    */
   protected $purgeTagsHeaders;
 
   /**
    * Construct a CacheableResponseSubscriber object.
    *
-   * @param \Drupal\purge\Plugin\Purge\TagsHeader\TagsHeadersServiceInterface $purge_tagsheaders
+   * @param TagsHeadersServiceInterface $purge_tagsheaders
    *   The tagsheaders service for iterating the available header plugins.
    */
   public function __construct(TagsHeadersServiceInterface $purge_tagsheaders) {
@@ -41,10 +41,10 @@ class CacheableResponseSubscriber implements EventSubscriberInterface {
   /**
    * Add cache tags headers on cacheable responses.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The event to process.
    */
-  public function onRespond(FilterResponseEvent $event) {
+  public function onRespond(ResponseEvent $event) {
     if (!$event->isMasterRequest()) {
       return;
     }
diff --git a/src/IteratingServiceBaseTrait.php b/src/IteratingServiceBaseTrait.php
index a503e16..8ea3ab8 100644
--- a/src/IteratingServiceBaseTrait.php
+++ b/src/IteratingServiceBaseTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\purge;
 
+use Drupal\Component\Plugin\PluginInspectionInterface;
 /**
  * Adds \Iterator logic to \Drupal\purge\ServiceInterface derivatives.
  */
@@ -19,7 +20,7 @@ trait IteratingServiceBaseTrait {
   /**
    * Holds all instantiated plugins.
    *
-   * @var null|\Drupal\Component\Plugin\PluginInspectionInterface[]
+   * @var null|PluginInspectionInterface[]
    */
   protected $instances;
 
diff --git a/src/Logger/LoggerChannelPart.php b/src/Logger/LoggerChannelPart.php
index 6ddad03..fb68bc1 100644
--- a/src/Logger/LoggerChannelPart.php
+++ b/src/Logger/LoggerChannelPart.php
@@ -47,7 +47,7 @@ class LoggerChannelPart implements LoggerChannelPartInterface {
   /**
    * The single and central logger channel used by purge module(s).
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $loggerChannelPurge;
 
diff --git a/src/Logger/LoggerChannelPartFactory.php b/src/Logger/LoggerChannelPartFactory.php
index 8065cce..0513360 100644
--- a/src/Logger/LoggerChannelPartFactory.php
+++ b/src/Logger/LoggerChannelPartFactory.php
@@ -13,14 +13,14 @@ class LoggerChannelPartFactory extends ServiceProviderBase implements LoggerChan
   /**
    * The single and central logger channel used by purge module(s).
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $loggerChannelPurge;
 
   /**
    * Construct \Drupal\purge\Logger\LoggerChannelPartFactory.
    *
-   * @param \Psr\Log\LoggerInterface $logger_channel_purge
+   * @param LoggerInterface $logger_channel_purge
    *   The single and central logger channel used by purge module(s).
    */
   public function __construct(LoggerInterface $logger_channel_purge) {
diff --git a/src/Logger/LoggerChannelPartFactoryInterface.php b/src/Logger/LoggerChannelPartFactoryInterface.php
index 9e1bd51..cc13792 100644
--- a/src/Logger/LoggerChannelPartFactoryInterface.php
+++ b/src/Logger/LoggerChannelPartFactoryInterface.php
@@ -30,7 +30,7 @@ interface LoggerChannelPartFactoryInterface extends ServiceProviderInterface, Se
    *    - \Drupal\Core\Logger\RfcLogLevel::INFO
    *    - \Drupal\Core\Logger\RfcLogLevel::DEBUG.
    *
-   * @return \Drupal\purge\Logger\LoggerChannelPartInterface
+   * @return LoggerChannelPartInterface
    *   The channel part instance.
    */
   public function create($id, array $grants = []);
diff --git a/src/Logger/LoggerChannelPartInterface.php b/src/Logger/LoggerChannelPartInterface.php
index 6b9ccff..7ba5432 100644
--- a/src/Logger/LoggerChannelPartInterface.php
+++ b/src/Logger/LoggerChannelPartInterface.php
@@ -12,7 +12,7 @@ interface LoggerChannelPartInterface extends LoggerInterface {
   /**
    * Construct \Drupal\purge\Logger\LoggerChannelPartInterface.
    *
-   * @param \Psr\Log\LoggerInterface $logger_channel_purge
+   * @param LoggerInterface $logger_channel_purge
    *   The single and central logger channel used by purge module(s).
    * @param string $id
    *   The identifier of the channel part.
diff --git a/src/Logger/LoggerService.php b/src/Logger/LoggerService.php
index 9a345ec..c3bbc2e 100644
--- a/src/Logger/LoggerService.php
+++ b/src/Logger/LoggerService.php
@@ -29,7 +29,7 @@ class LoggerService extends ServiceProviderBase implements LoggerServiceInterfac
   /**
    * Initialized channel part instances.
    *
-   * @var \Drupal\purge\Logger\LoggerChannelPartInterface[]
+   * @var LoggerChannelPartInterface[]
    */
   protected $channels = [];
 
@@ -43,7 +43,7 @@ class LoggerService extends ServiceProviderBase implements LoggerServiceInterfac
   /**
    * The factory for configuration objects.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -66,7 +66,7 @@ class LoggerService extends ServiceProviderBase implements LoggerServiceInterfac
   /**
    * The channel part factory.
    *
-   * @var \Drupal\purge\Logger\LoggerChannelPartFactoryInterface
+   * @var LoggerChannelPartFactoryInterface
    */
   protected $purgeLoggerPartsFactory;
 
@@ -80,9 +80,9 @@ class LoggerService extends ServiceProviderBase implements LoggerServiceInterfac
   /**
    * Construct \Drupal\purge\Logger\LoggerService.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\purge\Logger\LoggerChannelPartFactoryInterface $purge_logger_parts_factory
+   * @param LoggerChannelPartFactoryInterface $purge_logger_parts_factory
    *   The channel part factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory, LoggerChannelPartFactoryInterface $purge_logger_parts_factory) {
diff --git a/src/Logger/LoggerServiceInterface.php b/src/Logger/LoggerServiceInterface.php
index fbf3727..081085d 100644
--- a/src/Logger/LoggerServiceInterface.php
+++ b/src/Logger/LoggerServiceInterface.php
@@ -40,7 +40,7 @@ interface LoggerServiceInterface extends ServiceProviderInterface, ServiceModifi
    * @throws \LogicException
    *   Thrown when the given id is empty or otherwise invalid.
    *
-   * @return \Drupal\purge\Logger\LoggerChannelPartInterface
+   * @return LoggerChannelPartInterface
    *   The channel part instance.
    */
   public function get($id);
diff --git a/src/Logger/PurgeLoggerAwareInterface.php b/src/Logger/PurgeLoggerAwareInterface.php
index 6821133..49bcf6f 100644
--- a/src/Logger/PurgeLoggerAwareInterface.php
+++ b/src/Logger/PurgeLoggerAwareInterface.php
@@ -15,7 +15,7 @@ interface PurgeLoggerAwareInterface extends LoggerAwareInterface {
    * @throws \LogicException
    *   Thrown when the logger is unavailable.
    *
-   * @return null|\Drupal\purge\Logger\LoggerChannelPartInterface
+   * @return null|LoggerChannelPartInterface
    *   The part logger instance.
    */
   public function logger();
diff --git a/src/Logger/PurgeLoggerAwareTrait.php b/src/Logger/PurgeLoggerAwareTrait.php
index 6d24ede..347519a 100644
--- a/src/Logger/PurgeLoggerAwareTrait.php
+++ b/src/Logger/PurgeLoggerAwareTrait.php
@@ -13,7 +13,7 @@ trait PurgeLoggerAwareTrait {
   /**
    * Channel logger.
    *
-   * @var null|\Drupal\purge\Logger\LoggerChannelPartInterface
+   * @var null|LoggerChannelPartInterface
    */
   protected $logger;
 
diff --git a/src/Plugin/Purge/DiagnosticCheck/CapacityDiagnosticCheck.php b/src/Plugin/Purge/DiagnosticCheck/CapacityDiagnosticCheck.php
index e1f8751..bff3e80 100644
--- a/src/Plugin/Purge/DiagnosticCheck/CapacityDiagnosticCheck.php
+++ b/src/Plugin/Purge/DiagnosticCheck/CapacityDiagnosticCheck.php
@@ -21,7 +21,7 @@ class CapacityDiagnosticCheck extends DiagnosticCheckBase implements DiagnosticC
   /**
    * The purge executive service, which wipes content from external caches.
    *
-   * @var \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface
+   * @var PurgersServiceInterface
    */
   protected $purgePurgers;
 
@@ -34,7 +34,7 @@ class CapacityDiagnosticCheck extends DiagnosticCheckBase implements DiagnosticC
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface $purge_purgers
+   * @param PurgersServiceInterface $purge_purgers
    *   The purge executive service, which wipes content from external caches.
    */
   final public function __construct(array $configuration, $plugin_id, $plugin_definition, PurgersServiceInterface $purge_purgers) {
diff --git a/src/Plugin/Purge/DiagnosticCheck/DiagnosticCheckBase.php b/src/Plugin/Purge/DiagnosticCheck/DiagnosticCheckBase.php
index a1a46d2..dfce7a7 100644
--- a/src/Plugin/Purge/DiagnosticCheck/DiagnosticCheckBase.php
+++ b/src/Plugin/Purge/DiagnosticCheck/DiagnosticCheckBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\purge\Plugin\Purge\DiagnosticCheck;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Plugin\PluginBase;
 use Drupal\purge\Plugin\Purge\DiagnosticCheck\Exception\CheckNotImplementedCorrectly;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -14,14 +15,14 @@ abstract class DiagnosticCheckBase extends PluginBase implements DiagnosticCheck
   /**
    * The title of the check as described in the plugin's metadata.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @var TranslatableMarkup
    */
   private $title;
 
   /**
    * The description of the check as described in the plugin's metadata.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @var TranslatableMarkup
    */
   private $description;
 
@@ -41,7 +42,7 @@ abstract class DiagnosticCheckBase extends PluginBase implements DiagnosticCheck
   /**
    * A recommendation matching the severity level, may contain NULL.
    *
-   * @var null|string|\Drupal\Core\StringTranslation\TranslatableMarkup
+   * @var null|string|TranslatableMarkup
    */
   protected $recommendation;
 
diff --git a/src/Plugin/Purge/DiagnosticCheck/DiagnosticCheckInterface.php b/src/Plugin/Purge/DiagnosticCheck/DiagnosticCheckInterface.php
index 92a4feb..e7624bf 100644
--- a/src/Plugin/Purge/DiagnosticCheck/DiagnosticCheckInterface.php
+++ b/src/Plugin/Purge/DiagnosticCheck/DiagnosticCheckInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\purge\Plugin\Purge\DiagnosticCheck;
 
+use Drupal\purge\Plugin\Purge\DiagnosticCheck\Exception\CheckNotImplementedCorrectly;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 
@@ -54,7 +56,7 @@ interface DiagnosticCheckInterface extends PluginInspectionInterface, ContainerF
    *   possible. Checks derived from DiagnosticCheckBase will only see the check
    *   getting executed when any of the getter methods are called.
    *
-   * @throws \Drupal\purge\Plugin\Purge\DiagnosticCheck\Exception\CheckNotImplementedCorrectly
+   * @throws CheckNotImplementedCorrectly
    *   Thrown when the return value is incorrect.
    *
    * @return int
@@ -69,7 +71,7 @@ interface DiagnosticCheckInterface extends PluginInspectionInterface, ContainerF
   /**
    * Gets the title of the check.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The translated title.
    */
   public function getTitle();
@@ -77,7 +79,7 @@ interface DiagnosticCheckInterface extends PluginInspectionInterface, ContainerF
   /**
    * Gets the description of the check.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The translated description.
    */
   public function getDescription();
@@ -105,7 +107,7 @@ interface DiagnosticCheckInterface extends PluginInspectionInterface, ContainerF
   /**
    * Get a recommendation matching the severity level, may return NULL.
    *
-   * @return null|\Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return null|TranslatableMarkup
    *   Null when no recommendation exists, else a translated string.
    */
   public function getRecommendation();
@@ -113,7 +115,7 @@ interface DiagnosticCheckInterface extends PluginInspectionInterface, ContainerF
   /**
    * Get an optional value for the check output, may return NULL.
    *
-   * @return null|\Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return null|TranslatableMarkup
    *   Null when no value exists, else a translated string.
    */
   public function getValue();
diff --git a/src/Plugin/Purge/DiagnosticCheck/DiagnosticsService.php b/src/Plugin/Purge/DiagnosticCheck/DiagnosticsService.php
index 5fbbb5b..7213669 100644
--- a/src/Plugin/Purge/DiagnosticCheck/DiagnosticsService.php
+++ b/src/Plugin/Purge/DiagnosticCheck/DiagnosticsService.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\purge\Plugin\Purge\DiagnosticCheck;
 
+use Drupal\purge\Logger\LoggerChannelPartInterface;
+use Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface;
+use Drupal\purge\Plugin\Purge\Queue\QueueServiceInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Logger\RfcLogLevel;
 use Drupal\purge\IteratingServiceBaseTrait;
@@ -18,7 +21,7 @@ class DiagnosticsService extends ServiceBase implements DiagnosticsServiceInterf
   /**
    * Logger channel specific to the diagnostics service.
    *
-   * @var \Drupal\purge\Logger\LoggerChannelPartInterface
+   * @var LoggerChannelPartInterface
    */
   protected $logger;
 
@@ -27,7 +30,7 @@ class DiagnosticsService extends ServiceBase implements DiagnosticsServiceInterf
    *
    * Do not access this property directly, use ::getPurgers.
    *
-   * @var \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface
+   * @var PurgersServiceInterface
    */
   private $purgePurgers;
 
@@ -36,14 +39,14 @@ class DiagnosticsService extends ServiceBase implements DiagnosticsServiceInterf
    *
    * Do not access this property directly, use ::getQueue.
    *
-   * @var \Drupal\purge\Plugin\Purge\Queue\QueueServiceInterface
+   * @var QueueServiceInterface
    */
   private $purgeQueue;
 
   /**
    * Construct the diagnostics service.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $pluginManager
+   * @param PluginManagerInterface $pluginManager
    *   The plugin manager for this service.
    */
   public function __construct(PluginManagerInterface $pluginManager) {
@@ -121,7 +124,7 @@ class DiagnosticsService extends ServiceBase implements DiagnosticsServiceInterf
   /**
    * Initialize and retrieve the logger via lazy loading.
    *
-   * @return \Drupal\purge\Logger\LoggerChannelPartInterface
+   * @return LoggerChannelPartInterface
    *   The logger instance.
    */
   protected function getLogger() {
@@ -184,7 +187,7 @@ class DiagnosticsService extends ServiceBase implements DiagnosticsServiceInterf
   /**
    * Retrieve the 'purge.purgers' service - lazy loaded.
    *
-   * @return \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface
+   * @return PurgersServiceInterface
    *   The 'purge.purgers' service.
    */
   protected function getPurgers() {
@@ -198,7 +201,7 @@ class DiagnosticsService extends ServiceBase implements DiagnosticsServiceInterf
   /**
    * Retrieve the 'purge.queue' service - lazy loaded.
    *
-   * @return \Drupal\purge\Plugin\Purge\Queue\QueueServiceInterface
+   * @return QueueServiceInterface
    *   The 'purge.queue' service.
    */
   protected function getQueue() {
diff --git a/src/Plugin/Purge/DiagnosticCheck/DiagnosticsServiceInterface.php b/src/Plugin/Purge/DiagnosticCheck/DiagnosticsServiceInterface.php
index 7780cb2..848015a 100644
--- a/src/Plugin/Purge/DiagnosticCheck/DiagnosticsServiceInterface.php
+++ b/src/Plugin/Purge/DiagnosticCheck/DiagnosticsServiceInterface.php
@@ -58,7 +58,7 @@ interface DiagnosticsServiceInterface extends ServiceInterface, ContainerAwareIn
    * the checks. If SEVERITY_ERROR was reported, purging cannot continue and
    * should happen once all problems are resolved.
    *
-   * @return false|\Drupal\purge\Plugin\Purge\DiagnosticCheck\DiagnosticCheckInterface
+   * @return false|DiagnosticCheckInterface
    *   The SEVERITY_ERROR reporting check, or FALSE when everything was fine.
    */
   public function isSystemOnFire();
@@ -71,7 +71,7 @@ interface DiagnosticsServiceInterface extends ServiceInterface, ContainerAwareIn
    * was reported, cache invalidation can continue but it is important that the
    * site administrator gets notified.
    *
-   * @return false|\Drupal\purge\Plugin\Purge\DiagnosticCheck\DiagnosticCheckInterface
+   * @return false|DiagnosticCheckInterface
    *   The SEVERITY_WARNING reporting check, or FALSE when everything was fine.
    */
   public function isSystemShowingSmoke();
diff --git a/src/Plugin/Purge/DiagnosticCheck/MaxAgeCheck.php b/src/Plugin/Purge/DiagnosticCheck/MaxAgeCheck.php
index 02f95cc..fd9b59a 100644
--- a/src/Plugin/Purge/DiagnosticCheck/MaxAgeCheck.php
+++ b/src/Plugin/Purge/DiagnosticCheck/MaxAgeCheck.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\purge\Plugin\Purge\DiagnosticCheck;
 
+use Drupal\Core\Config\Config;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
@@ -21,14 +23,14 @@ class MaxAgeCheck extends DiagnosticCheckBase implements DiagnosticCheckInterfac
   /**
    * A config object for the system performance configuration.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;
 
   /**
    * Construct a MaxAgeCheck object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
@@ -92,7 +94,7 @@ class MaxAgeCheck extends DiagnosticCheckBase implements DiagnosticCheckInterfac
    * @param int $max_age
    *   The max_age setting to format.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The translated value.
    */
   protected function valueTranslatable($max_age) {
diff --git a/src/Plugin/Purge/DiagnosticCheck/PluginManager.php b/src/Plugin/Purge/DiagnosticCheck/PluginManager.php
index 9b563a2..f1b1005 100644
--- a/src/Plugin/Purge/DiagnosticCheck/PluginManager.php
+++ b/src/Plugin/Purge/DiagnosticCheck/PluginManager.php
@@ -17,9 +17,9 @@ class PluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/Purge/DiagnosticCheck/ProcessorsAvailableDiagnosticCheck.php b/src/Plugin/Purge/DiagnosticCheck/ProcessorsAvailableDiagnosticCheck.php
index 2964e7d..4ea2216 100644
--- a/src/Plugin/Purge/DiagnosticCheck/ProcessorsAvailableDiagnosticCheck.php
+++ b/src/Plugin/Purge/DiagnosticCheck/ProcessorsAvailableDiagnosticCheck.php
@@ -21,14 +21,14 @@ class ProcessorsAvailableDiagnosticCheck extends DiagnosticCheckBase implements
   /**
    * The 'purge.processors' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Processor\ProcessorsServiceInterface
+   * @var ProcessorsServiceInterface
    */
   protected $purgeProcessors;
 
   /**
    * Construct a ProcessorsAvailableCheck object.
    *
-   * @param \Drupal\purge\Plugin\Purge\Processor\ProcessorsServiceInterface $purge_processors
+   * @param ProcessorsServiceInterface $purge_processors
    *   The purge processors service.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
diff --git a/src/Plugin/Purge/DiagnosticCheck/PurgersAvailableDiagnosticCheck.php b/src/Plugin/Purge/DiagnosticCheck/PurgersAvailableDiagnosticCheck.php
index 210695a..8d8269e 100644
--- a/src/Plugin/Purge/DiagnosticCheck/PurgersAvailableDiagnosticCheck.php
+++ b/src/Plugin/Purge/DiagnosticCheck/PurgersAvailableDiagnosticCheck.php
@@ -22,14 +22,14 @@ class PurgersAvailableDiagnosticCheck extends DiagnosticCheckBase implements Dia
   /**
    * The factory for configuration objects.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The purge executive service, which wipes content from external caches.
    *
-   * @var \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface
+   * @var PurgersServiceInterface
    */
   protected $purgePurgers;
 
@@ -42,9 +42,9 @@ class PurgersAvailableDiagnosticCheck extends DiagnosticCheckBase implements Dia
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface $purge_purgers
+   * @param PurgersServiceInterface $purge_purgers
    *   The purge executive service, which wipes content from external caches.
    */
   final public function __construct(array $configuration, $plugin_id, $plugin_definition, ConfigFactoryInterface $config_factory, PurgersServiceInterface $purge_purgers) {
diff --git a/src/Plugin/Purge/DiagnosticCheck/QueueSizeDiagnosticCheck.php b/src/Plugin/Purge/DiagnosticCheck/QueueSizeDiagnosticCheck.php
index 773863d..67d11a2 100644
--- a/src/Plugin/Purge/DiagnosticCheck/QueueSizeDiagnosticCheck.php
+++ b/src/Plugin/Purge/DiagnosticCheck/QueueSizeDiagnosticCheck.php
@@ -21,14 +21,14 @@ class QueueSizeDiagnosticCheck extends DiagnosticCheckBase implements Diagnostic
   /**
    * The 'purge.queue.stats' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Queue\StatsTrackerInterface
+   * @var StatsTrackerInterface
    */
   protected $purgeQueueStats;
 
   /**
    * Construct a QueueSizeDiagnosticCheck object.
    *
-   * @param \Drupal\purge\Plugin\Purge\Queue\StatsTrackerInterface $purge_queue_stats
+   * @param StatsTrackerInterface $purge_queue_stats
    *   The queue statistics tracker.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
diff --git a/src/Plugin/Purge/DiagnosticCheck/QueuersAvailableDiagnosticCheck.php b/src/Plugin/Purge/DiagnosticCheck/QueuersAvailableDiagnosticCheck.php
index 5f3b1ae..802dbf3 100644
--- a/src/Plugin/Purge/DiagnosticCheck/QueuersAvailableDiagnosticCheck.php
+++ b/src/Plugin/Purge/DiagnosticCheck/QueuersAvailableDiagnosticCheck.php
@@ -21,14 +21,14 @@ class QueuersAvailableDiagnosticCheck extends DiagnosticCheckBase implements Dia
   /**
    * The 'purge.queuers' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Queuer\QueuersServiceInterface
+   * @var QueuersServiceInterface
    */
   protected $purgeQueuers;
 
   /**
    * Construct a QueuersAvailableDiagnosticCheck object.
    *
-   * @param \Drupal\purge\Plugin\Purge\Queuer\QueuersServiceInterface $purge_queuers
+   * @param QueuersServiceInterface $purge_queuers
    *   The purge queuers service.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
diff --git a/src/Plugin/Purge/Invalidation/ImmutableInvalidation.php b/src/Plugin/Purge/Invalidation/ImmutableInvalidation.php
index 91c70d5..0ae8ed0 100644
--- a/src/Plugin/Purge/Invalidation/ImmutableInvalidation.php
+++ b/src/Plugin/Purge/Invalidation/ImmutableInvalidation.php
@@ -15,14 +15,14 @@ class ImmutableInvalidation extends ImmutableInvalidationBase implements Immutab
   /**
    * The wrapped invalidation object.
    *
-   * @var \Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface
+   * @var InvalidationInterface
    */
   protected $invalidation;
 
   /**
    * Constructs the immutable invalidation object.
    *
-   * @param \Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface $invalidation
+   * @param InvalidationInterface $invalidation
    *   The invalidation object describes what needs to be invalidated from the
    *   external caching system, and gets instantiated by the service
    *   'purge.invalidation.factory', either directly or through a queue claim.
diff --git a/src/Plugin/Purge/Invalidation/ImmutableInvalidationInterface.php b/src/Plugin/Purge/Invalidation/ImmutableInvalidationInterface.php
index 2df1136..90e0092 100644
--- a/src/Plugin/Purge/Invalidation/ImmutableInvalidationInterface.php
+++ b/src/Plugin/Purge/Invalidation/ImmutableInvalidationInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\purge\Plugin\Purge\Invalidation;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 
 /**
@@ -118,7 +119,7 @@ interface ImmutableInvalidationInterface extends InvStatesInterface, PluginInspe
   /**
    * Get the current state as user translated string.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The translated string describing the current state of the invalidation.
    */
   public function getStateStringTranslated();
diff --git a/src/Plugin/Purge/Invalidation/InvalidationInterface.php b/src/Plugin/Purge/Invalidation/InvalidationInterface.php
index 062f664..3c89503 100644
--- a/src/Plugin/Purge/Invalidation/InvalidationInterface.php
+++ b/src/Plugin/Purge/Invalidation/InvalidationInterface.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\purge\Plugin\Purge\Invalidation;
 
+use Drupal\purge\Plugin\Purge\Invalidation\Exception\InvalidStateException;
+use Drupal\purge\Plugin\Purge\Purger\Exception\BadPluginBehaviorException;
+use Drupal\purge\Plugin\Purge\Invalidation\Exception\MissingExpressionException;
+use Drupal\purge\Plugin\Purge\Invalidation\Exception\InvalidExpressionException;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 
 /**
@@ -81,7 +85,7 @@ interface InvalidationInterface extends ImmutableInvalidationInterface, Containe
    *   - InvStatesInterface::PROCESSING
    *   - InvStatesInterface::NOT_SUPPORTED.
    *
-   * @throws \Drupal\purge\Plugin\Purge\Invalidation\Exception\InvalidStateException
+   * @throws InvalidStateException
    *   Thrown when the $state parameter doesn't match any of the constants
    *   defined in \Drupal\purge\Plugin\Purge\Invalidation\InvStatesInterface.
    * @throws \LogicException
@@ -111,7 +115,7 @@ interface InvalidationInterface extends ImmutableInvalidationInterface, Containe
    *
    * @throws \LogicException
    *   Thrown when the given parameter is empty, not a string or NULL.
-   * @throws \Drupal\purge\Plugin\Purge\Purger\Exception\BadPluginBehaviorException
+   * @throws BadPluginBehaviorException
    *   Thrown when the last set state was not any of:
    *   - InvStatesInterface::SUCCEEDED
    *   - InvStatesInterface::FAILED
@@ -127,10 +131,10 @@ interface InvalidationInterface extends ImmutableInvalidationInterface, Containe
   /**
    * Validate the expression given to the invalidation during instantiation.
    *
-   * @throws \Drupal\purge\Plugin\Purge\Invalidation\Exception\MissingExpressionException
+   * @throws MissingExpressionException
    *   Thrown when plugin defined expression_required = TRUE and when it is
    *   instantiated without expression (NULL).
-   * @throws \Drupal\purge\Plugin\Purge\Invalidation\Exception\InvalidExpressionException
+   * @throws InvalidExpressionException
    *   Exception thrown when plugin got instantiated with an expression that is
    *   not deemed valid for the type of invalidation.
    *
diff --git a/src/Plugin/Purge/Invalidation/InvalidationsService.php b/src/Plugin/Purge/Invalidation/InvalidationsService.php
index 8f301c8..7713c39 100644
--- a/src/Plugin/Purge/Invalidation/InvalidationsService.php
+++ b/src/Plugin/Purge/Invalidation/InvalidationsService.php
@@ -35,16 +35,16 @@ class InvalidationsService extends ServiceBase implements InvalidationsServiceIn
   /**
    * The 'purge.purgers' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface
+   * @var PurgersServiceInterface
    */
   protected $purgePurgers;
 
   /**
    * Construct the invalidation service.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $pluginManager
+   * @param PluginManagerInterface $pluginManager
    *   The plugin manager for this service.
-   * @param \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface $purge_purgers
+   * @param PurgersServiceInterface $purge_purgers
    *   The purgers service.
    */
   public function __construct(PluginManagerInterface $pluginManager, PurgersServiceInterface $purge_purgers) {
@@ -64,7 +64,7 @@ class InvalidationsService extends ServiceBase implements InvalidationsServiceIn
    * @param int $id
    *   The numeric identifier of this instance.
    *
-   * @return \Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface
+   * @return InvalidationInterface
    *   The invalidation object.
    */
   protected function createInstance($plugin_id, $expression, $id) {
diff --git a/src/Plugin/Purge/Invalidation/InvalidationsServiceInterface.php b/src/Plugin/Purge/Invalidation/InvalidationsServiceInterface.php
index 8c8b977..13715d8 100644
--- a/src/Plugin/Purge/Invalidation/InvalidationsServiceInterface.php
+++ b/src/Plugin/Purge/Invalidation/InvalidationsServiceInterface.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\purge\Plugin\Purge\Invalidation;
 
+use Drupal\purge\Plugin\Purge\Invalidation\Exception\MissingExpressionException;
+use Drupal\purge\Plugin\Purge\Invalidation\Exception\InvalidExpressionException;
+use Drupal\purge\Plugin\Purge\Invalidation\Exception\TypeUnsupportedException;
 use Drupal\purge\ServiceInterface;
 
 /**
@@ -19,16 +22,16 @@ interface InvalidationsServiceInterface extends ServiceInterface {
    *   when the type of invalidation doesn't require $expression. Types usually
    *   validate the given expression and throw exceptions for bad input.
    *
-   * @throws \Drupal\purge\Plugin\Purge\Invalidation\Exception\MissingExpressionException
+   * @throws MissingExpressionException
    *   Thrown when plugin defined expression_required = TRUE and when it is
    *   instantiated without expression (NULL).
-   * @throws \Drupal\purge\Plugin\Purge\Invalidation\Exception\InvalidExpressionException
+   * @throws InvalidExpressionException
    *   Exception thrown when plugin got instantiated with an expression that is
    *   not deemed valid for the type of invalidation.
-   * @throws \Drupal\purge\Plugin\Purge\Invalidation\Exception\TypeUnsupportedException
+   * @throws TypeUnsupportedException
    *   Thrown when no purgers support the requested type.
    *
-   * @return \Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface
+   * @return InvalidationInterface
    *   The invalidation object.
    */
   public function get($plugin_id, $expression = NULL);
@@ -43,14 +46,14 @@ interface InvalidationsServiceInterface extends ServiceInterface {
    *   when the type of invalidation doesn't require $expression. Types usually
    *   validate the given expression and throw exceptions for bad input.
    *
-   * @throws \Drupal\purge\Plugin\Purge\Invalidation\Exception\MissingExpressionException
+   * @throws MissingExpressionException
    *   Thrown when plugin defined expression_required = TRUE and when it is
    *   instantiated without expression (NULL).
-   * @throws \Drupal\purge\Plugin\Purge\Invalidation\Exception\InvalidExpressionException
+   * @throws InvalidExpressionException
    *   Exception thrown when plugin got instantiated with an expression that is
    *   not deemed valid for the type of invalidation.
    *
-   * @return \Drupal\purge\Plugin\Purge\Invalidation\ImmutableInvalidationInterface
+   * @return ImmutableInvalidationInterface
    *   The immutable invalidation object.
    */
   public function getImmutable($plugin_id, $expression = NULL);
@@ -61,14 +64,14 @@ interface InvalidationsServiceInterface extends ServiceInterface {
    * @param string $item_data
    *   Arbitrary PHP data structured that was stored into the queue.
    *
-   * @throws \Drupal\purge\Plugin\Purge\Invalidation\Exception\MissingExpressionException
+   * @throws MissingExpressionException
    *   Thrown when plugin defined expression_required = TRUE and when it is
    *   instantiated without expression (NULL).
-   * @throws \Drupal\purge\Plugin\Purge\Invalidation\Exception\InvalidExpressionException
+   * @throws InvalidExpressionException
    *   Exception thrown when plugin got instantiated with an expression that is
    *   not deemed valid for the type of invalidation.
    *
-   * @return \Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface
+   * @return InvalidationInterface
    *   The invalidation object.
    */
   public function getFromQueueData($item_data);
@@ -79,14 +82,14 @@ interface InvalidationsServiceInterface extends ServiceInterface {
    * @param string $item_data
    *   Arbitrary PHP data structured that was stored into the queue.
    *
-   * @throws \Drupal\purge\Plugin\Purge\Invalidation\Exception\MissingExpressionException
+   * @throws MissingExpressionException
    *   Thrown when plugin defined expression_required = TRUE and when it is
    *   instantiated without expression (NULL).
-   * @throws \Drupal\purge\Plugin\Purge\Invalidation\Exception\InvalidExpressionException
+   * @throws InvalidExpressionException
    *   Exception thrown when plugin got instantiated with an expression that is
    *   not deemed valid for the type of invalidation.
    *
-   * @return \Drupal\purge\Plugin\Purge\Invalidation\ImmutableInvalidationInterface
+   * @return ImmutableInvalidationInterface
    *   The immutable invalidation object.
    */
   public function getImmutableFromQueueData($item_data);
diff --git a/src/Plugin/Purge/Invalidation/PluginManager.php b/src/Plugin/Purge/Invalidation/PluginManager.php
index 1452b1b..a8a16fb 100644
--- a/src/Plugin/Purge/Invalidation/PluginManager.php
+++ b/src/Plugin/Purge/Invalidation/PluginManager.php
@@ -17,9 +17,9 @@ class PluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/Purge/Invalidation/UrlInvalidation.php b/src/Plugin/Purge/Invalidation/UrlInvalidation.php
index cbe8344..a98359b 100644
--- a/src/Plugin/Purge/Invalidation/UrlInvalidation.php
+++ b/src/Plugin/Purge/Invalidation/UrlInvalidation.php
@@ -23,14 +23,14 @@ class UrlInvalidation extends InvalidationBase implements InvalidationInterface
   /**
    * Url object (absolute) or string describing Uri of what needs invalidation.
    *
-   * @var \Drupal\Core\Url|string
+   * @var Url|string
    */
   protected $expression;
 
   /**
    * The (absolute) URL object that this invalidation object describes.
    *
-   * @var \Drupal\Core\Url
+   * @var Url
    */
   protected $url;
 
@@ -44,7 +44,7 @@ class UrlInvalidation extends InvalidationBase implements InvalidationInterface
   /**
    * Get the URL object.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The url object.
    */
   public function getUrl() {
diff --git a/src/Plugin/Purge/Processor/PluginManager.php b/src/Plugin/Purge/Processor/PluginManager.php
index dadf8c1..ed7bd66 100644
--- a/src/Plugin/Purge/Processor/PluginManager.php
+++ b/src/Plugin/Purge/Processor/PluginManager.php
@@ -17,9 +17,9 @@ class PluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/Purge/Processor/ProcessorInterface.php b/src/Plugin/Purge/Processor/ProcessorInterface.php
index c164338..8d8245e 100644
--- a/src/Plugin/Purge/Processor/ProcessorInterface.php
+++ b/src/Plugin/Purge/Processor/ProcessorInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\purge\Plugin\Purge\Processor;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 
 /**
@@ -12,7 +13,7 @@ interface ProcessorInterface extends PluginInspectionInterface {
   /**
    * Retrieve the title of this processor.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The translated label.
    */
   public function getLabel();
@@ -20,7 +21,7 @@ interface ProcessorInterface extends PluginInspectionInterface {
   /**
    * Retrieve the description of this processor.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The translated description.
    */
   public function getDescription();
diff --git a/src/Plugin/Purge/Processor/ProcessorsService.php b/src/Plugin/Purge/Processor/ProcessorsService.php
index 9f777cd..2e76f67 100644
--- a/src/Plugin/Purge/Processor/ProcessorsService.php
+++ b/src/Plugin/Purge/Processor/ProcessorsService.php
@@ -18,16 +18,16 @@ class ProcessorsService extends ServiceBase implements ProcessorsServiceInterfac
   /**
    * The factory for configuration objects.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Construct the processors service.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $pluginManager
+   * @param PluginManagerInterface $pluginManager
    *   The plugin manager for this service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
    */
   public function __construct(PluginManagerInterface $pluginManager, ConfigFactoryInterface $config_factory) {
diff --git a/src/Plugin/Purge/Processor/ProcessorsServiceInterface.php b/src/Plugin/Purge/Processor/ProcessorsServiceInterface.php
index bb98c5e..b3f9a73 100644
--- a/src/Plugin/Purge/Processor/ProcessorsServiceInterface.php
+++ b/src/Plugin/Purge/Processor/ProcessorsServiceInterface.php
@@ -16,7 +16,7 @@ interface ProcessorsServiceInterface extends ServiceInterface, ModifiableService
    * @param string $plugin_id
    *   The plugin ID of the processor you want to retrieve.
    *
-   * @return \Drupal\purge\Plugin\Purge\Processor\ProcessorInterface|false
+   * @return ProcessorInterface|false
    *   The processor plugin or FALSE when it isn't available.
    */
   public function get($plugin_id);
diff --git a/src/Plugin/Purge/Purger/CapacityTracker.php b/src/Plugin/Purge/Purger/CapacityTracker.php
index 7175015..3b4328c 100644
--- a/src/Plugin/Purge/Purger/CapacityTracker.php
+++ b/src/Plugin/Purge/Purger/CapacityTracker.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\purge\Plugin\Purge\Purger;
 
+use Drupal\purge\Counter\CounterInterface;
 use Drupal\purge\Counter\Counter;
 use Drupal\purge\Plugin\Purge\Purger\Exception\BadBehaviorException;
 use Drupal\purge\Plugin\Purge\Purger\Exception\BadPluginBehaviorException;
@@ -52,7 +53,7 @@ class CapacityTracker implements CapacityTrackerInterface {
   /**
    * Holds all loaded purgers plugins.
    *
-   * @var \Drupal\purge\Plugin\Purge\Purger\PurgerInterface[]
+   * @var PurgerInterface[]
    */
   protected $purgers = NULL;
 
@@ -69,14 +70,14 @@ class CapacityTracker implements CapacityTrackerInterface {
   /**
    * The execution time spent on cache invalidation during this request.
    *
-   * @var \Drupal\purge\Counter\CounterInterface
+   * @var CounterInterface
    */
   protected $spentExecutionTime;
 
   /**
    * Counter represting the number of invalidation objects touched this request.
    *
-   * @var \Drupal\purge\Counter\CounterInterface
+   * @var CounterInterface
    */
   protected $spentInvalidations;
 
diff --git a/src/Plugin/Purge/Purger/CapacityTrackerInterface.php b/src/Plugin/Purge/Purger/CapacityTrackerInterface.php
index 452e175..942867a 100644
--- a/src/Plugin/Purge/Purger/CapacityTrackerInterface.php
+++ b/src/Plugin/Purge/Purger/CapacityTrackerInterface.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\purge\Plugin\Purge\Purger;
 
+use Drupal\purge\Plugin\Purge\Purger\Exception\BadPluginBehaviorException;
+use Drupal\purge\Plugin\Purge\Purger\Exception\BadBehaviorException;
+use Drupal\purge\Counter\CounterInterface;
 /**
  * Describes the capacity tracker.
  *
@@ -24,10 +27,10 @@ interface CapacityTrackerInterface {
    * @param string $purger_instance_id
    *   The instance ID of the purger from which to return the cooldown time.
    *
-   * @throws \Drupal\purge\Plugin\Purge\Purger\Exception\BadPluginBehaviorException
+   * @throws BadPluginBehaviorException
    *   Thrown when the returned floating point value is lower than 0.0, higher
    *   than 3.0 or is not returned as floating point value.
-   * @throws \Drupal\purge\Plugin\Purge\Purger\Exception\BadBehaviorException
+   * @throws BadBehaviorException
    *   Thrown when $purger_instance_id doesn't exist.
    *
    * @see \Drupal\purge\Plugin\Purge\Purger\PurgerCapacityDataInterface::getCooldownTime()
@@ -41,7 +44,7 @@ interface CapacityTrackerInterface {
   /**
    * Get the time in seconds to wait after invalidation for all purgers.
    *
-   * @throws \Drupal\purge\Plugin\Purge\Purger\Exception\BadPluginBehaviorException
+   * @throws BadPluginBehaviorException
    *   Thrown when the returned floating point value is lower than 0.0, higher
    *   than 3.0 or is not returned as floating point value.
    *
@@ -70,7 +73,7 @@ interface CapacityTrackerInterface {
    * time the purgers service attempted one or more invalidations until the
    * value becomes zero.
    *
-   * @throws \Drupal\purge\Plugin\Purge\Purger\Exception\BadPluginBehaviorException
+   * @throws BadPluginBehaviorException
    *   Thrown when a returned value is not a integer or when it equals to 0.
    *
    * @see \Drupal\purge\Plugin\Purge\Purger\PurgerCapacityDataInterface::getIdealConditionsLimit()
@@ -86,7 +89,7 @@ interface CapacityTrackerInterface {
    * @param int $items
    *   The number of objects about to be offered to the purgers service.
    *
-   * @throws \Drupal\purge\Plugin\Purge\Purger\Exception\BadBehaviorException
+   * @throws BadBehaviorException
    *   Thrown when $number_of_objects is lower than 1 or not an integer.
    *
    * @see \Drupal\purge\Plugin\Purge\Purger\CapacityTrackerInterface::getTimeHintTotal()
@@ -140,10 +143,10 @@ interface CapacityTrackerInterface {
    * @param string $purger_instance_id
    *   The instance ID of the purger from which to return the time hint.
    *
-   * @throws \Drupal\purge\Plugin\Purge\Purger\Exception\BadPluginBehaviorException
+   * @throws BadPluginBehaviorException
    *   Thrown when a returned floating point value is lower than 0.1, higher
    *   than 10 or is not returned as float.
-   * @throws \Drupal\purge\Plugin\Purge\Purger\Exception\BadBehaviorException
+   * @throws BadBehaviorException
    *   Thrown when $purger_instance_id doesn't exist.
    *
    * @see \Drupal\purge\Plugin\Purge\Purger\PurgerCapacityDataInterface::getCooldownTime()
@@ -164,7 +167,7 @@ interface CapacityTrackerInterface {
    * will cause purge to take it a lot easier and to pull less items from the
    * queue per request.
    *
-   * @throws \Drupal\purge\Plugin\Purge\Purger\Exception\BadPluginBehaviorException
+   * @throws BadPluginBehaviorException
    *   Thrown when a returned floating point value is lower than 0.1, higher
    *   than 10 or is not returned as float.
    *
@@ -179,7 +182,7 @@ interface CapacityTrackerInterface {
   /**
    * Set all purger plugin instances.
    *
-   * @param \Drupal\purge\Plugin\Purge\Purger\PurgerInterface[] $purgers
+   * @param PurgerInterface[] $purgers
    *   All purger plugins instantiated by PurgersServiceInterface.
    */
   public function setPurgers(array $purgers);
@@ -187,7 +190,7 @@ interface CapacityTrackerInterface {
   /**
    * Get the counter tracking actual spent execution time during this request.
    *
-   * @return \Drupal\purge\Counter\CounterInterface
+   * @return CounterInterface
    *   The counter object.
    */
   public function spentExecutionTime();
@@ -195,7 +198,7 @@ interface CapacityTrackerInterface {
   /**
    * Get the counter for the number of invalidations touched this request.
    *
-   * @return \Drupal\purge\Counter\CounterInterface
+   * @return CounterInterface
    *   The counter object.
    */
   public function spentInvalidations();
@@ -206,7 +209,7 @@ interface CapacityTrackerInterface {
    * @param string $purger_instance_id
    *   The instance ID of the purger for which to await the cooldown time.
    *
-   * @throws \Drupal\purge\Plugin\Purge\Purger\Exception\BadBehaviorException
+   * @throws BadBehaviorException
    *   Thrown when $purger_instance_id doesn't exist.
    *
    * @see \Drupal\purge\Plugin\Purge\Purger\CapacityTrackerInterface::getCooldownTime()
diff --git a/src/Plugin/Purge/Purger/PluginManager.php b/src/Plugin/Purge/Purger/PluginManager.php
index d72dc52..da8af17 100644
--- a/src/Plugin/Purge/Purger/PluginManager.php
+++ b/src/Plugin/Purge/Purger/PluginManager.php
@@ -17,9 +17,9 @@ class PluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/Purge/Purger/PurgerBase.php b/src/Plugin/Purge/Purger/PurgerBase.php
index c1f1f08..de3bad8 100644
--- a/src/Plugin/Purge/Purger/PurgerBase.php
+++ b/src/Plugin/Purge/Purger/PurgerBase.php
@@ -22,7 +22,7 @@ abstract class PurgerBase extends PluginBase implements PurgerInterface {
   /**
    * The runtime measurement counter.
    *
-   * @var null|\Drupal\purge\Plugin\Purge\Purger\RuntimeMeasurementInterface
+   * @var null|RuntimeMeasurementInterface
    */
   protected $runtimeMeasurement = NULL;
 
diff --git a/src/Plugin/Purge/Purger/PurgerCapacityDataInterface.php b/src/Plugin/Purge/Purger/PurgerCapacityDataInterface.php
index 8ed3476..237d0af 100644
--- a/src/Plugin/Purge/Purger/PurgerCapacityDataInterface.php
+++ b/src/Plugin/Purge/Purger/PurgerCapacityDataInterface.php
@@ -49,7 +49,7 @@ interface PurgerCapacityDataInterface {
   /**
    * Get the runtime measurement counter.
    *
-   * @return null|\Drupal\purge\Plugin\Purge\Purger\RuntimeMeasurementInterface
+   * @return null|RuntimeMeasurementInterface
    *   The runtime measurement counter if set, or NULL otherwise.
    */
   public function getRuntimeMeasurement();
@@ -131,7 +131,7 @@ interface PurgerCapacityDataInterface {
   /**
    * Inject the runtime measurement counter.
    *
-   * @param \Drupal\purge\Plugin\Purge\Purger\RuntimeMeasurementInterface $measurement
+   * @param RuntimeMeasurementInterface $measurement
    *   The runtime measurement counter.
    */
   public function setRuntimeMeasurement(RuntimeMeasurementInterface $measurement);
diff --git a/src/Plugin/Purge/Purger/PurgerInterface.php b/src/Plugin/Purge/Purger/PurgerInterface.php
index 39f11a8..980826c 100644
--- a/src/Plugin/Purge/Purger/PurgerInterface.php
+++ b/src/Plugin/Purge/Purger/PurgerInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\purge\Plugin\Purge\Purger;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\purge\Logger\PurgeLoggerAwareInterface;
 
@@ -42,7 +44,7 @@ interface PurgerInterface extends ContainerFactoryPluginInterface, PurgerCapacit
    *
    * @see \Drupal\purge\Annotation\PurgePurger::$label
    *
-   * @return string|\Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return string|TranslatableMarkup
    *   The translated label.
    */
   public function getLabel();
@@ -84,7 +86,7 @@ interface PurgerInterface extends ContainerFactoryPluginInterface, PurgerCapacit
    * invalidation at that given time, you can set it as such and it will be
    * offered again later.
    *
-   * @param \Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface[] $invalidations
+   * @param InvalidationInterface[] $invalidations
    *   Non-associative array of invalidation objects that each describe what
    *   needs to be invalidated by the external caching system. Usually these
    *   objects originate from the queue but direct invalidation is also
diff --git a/src/Plugin/Purge/Purger/PurgersService.php b/src/Plugin/Purge/Purger/PurgersService.php
index b825917..46b11aa 100644
--- a/src/Plugin/Purge/Purger/PurgersService.php
+++ b/src/Plugin/Purge/Purger/PurgersService.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\purge\Plugin\Purge\Purger;
 
+use Drupal\purge\Logger\LoggerChannelPartInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Lock\LockBackendInterface;
@@ -37,14 +38,14 @@ class PurgersService extends ServiceBase implements PurgersServiceInterface {
   /**
    * The 'purge.purgers.tracker.capacity' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Purger\CapacityTrackerInterface
+   * @var CapacityTrackerInterface
    */
   protected $capacityTracker;
 
   /**
    * The factory for configuration objects.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -58,42 +59,42 @@ class PurgersService extends ServiceBase implements PurgersServiceInterface {
   /**
    * The lock backend.
    *
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected $lock;
 
   /**
    * Logger channel specific to the purgers service.
    *
-   * @var \Drupal\purge\Logger\LoggerChannelPartInterface
+   * @var LoggerChannelPartInterface
    */
   protected $logger;
 
   /**
    * Holds all loaded purgers plugins.
    *
-   * @var \Drupal\purge\Plugin\Purge\Purger\PurgerInterface[]
+   * @var PurgerInterface[]
    */
   protected $purgers;
 
   /**
    * The 'purge.diagnostics' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\DiagnosticCheck\DiagnosticsServiceInterface
+   * @var DiagnosticsServiceInterface
    */
   protected $purgeDiagnostics;
 
   /**
    * The 'purge.logger' service.
    *
-   * @var \Drupal\purge\Logger\LoggerServiceInterface
+   * @var LoggerServiceInterface
    */
   protected $purgeLogger;
 
   /**
    * The 'purge.purgers.tracker.runtime_measurement' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Purger\RuntimeMeasurementTrackerInterface
+   * @var RuntimeMeasurementTrackerInterface
    */
   protected $runtimeMeasurementTracker;
 
@@ -114,19 +115,19 @@ class PurgersService extends ServiceBase implements PurgersServiceInterface {
   /**
    * Construct the purgers service.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $pluginManager
+   * @param PluginManagerInterface $pluginManager
    *   The plugin manager for this service.
-   * @param \Drupal\purge\Logger\LoggerServiceInterface $purge_logger
+   * @param LoggerServiceInterface $purge_logger
    *   Logging services for the purge module and its submodules.
-   * @param \Drupal\purge\Plugin\Purge\Purger\CapacityTrackerInterface $capacityTracker
+   * @param CapacityTrackerInterface $capacityTracker
    *   The capacity tracker.
-   * @param \Drupal\purge\Plugin\Purge\Purger\RuntimeMeasurementTrackerInterface $runtimeMeasurementTracker
+   * @param RuntimeMeasurementTrackerInterface $runtimeMeasurementTracker
    *   The runtime measurement tracker.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Lock\LockBackendInterface $lock
+   * @param LockBackendInterface $lock
    *   The lock backend.
-   * @param \Drupal\purge\Plugin\Purge\DiagnosticCheck\DiagnosticsServiceInterface $purge_diagnostics
+   * @param DiagnosticsServiceInterface $purge_diagnostics
    *   The diagnostics service.
    */
   public function __construct(PluginManagerInterface $pluginManager, LoggerServiceInterface $purge_logger, CapacityTrackerInterface $capacityTracker, RuntimeMeasurementTrackerInterface $runtimeMeasurementTracker, ConfigFactoryInterface $config_factory, LockBackendInterface $lock, DiagnosticsServiceInterface $purge_diagnostics) {
@@ -151,7 +152,7 @@ class PurgersService extends ServiceBase implements PurgersServiceInterface {
   /**
    * Perform pre-flight checks.
    *
-   * @param \Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface[] $invalidations
+   * @param InvalidationInterface[] $invalidations
    *   Non-associative array of invalidation objects that each describe what
    *   needs to be invalidated by the external caching system. Usually these
    *   objects originate from the queue but direct invalidation is also
diff --git a/src/Plugin/Purge/Purger/PurgersServiceInterface.php b/src/Plugin/Purge/Purger/PurgersServiceInterface.php
index b4bc726..7ff6a69 100644
--- a/src/Plugin/Purge/Purger/PurgersServiceInterface.php
+++ b/src/Plugin/Purge/Purger/PurgersServiceInterface.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\purge\Plugin\Purge\Purger;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface;
+use Drupal\purge\Plugin\Purge\Purger\Exception\BadBehaviorException;
+use Drupal\purge\Plugin\Purge\Purger\Exception\DiagnosticsException;
+use Drupal\purge\Plugin\Purge\Purger\Exception\CapacityException;
+use Drupal\purge\Plugin\Purge\Purger\Exception\LockException;
 use Drupal\purge\ModifiableServiceInterface;
 use Drupal\purge\Plugin\Purge\Processor\ProcessorInterface;
 use Drupal\purge\ServiceInterface;
@@ -18,7 +24,7 @@ interface PurgersServiceInterface extends ServiceInterface, ModifiableServiceInt
    * always hold a single capacity tracker instance. The capacity tracker tracks
    * runtime resource consumption and predicts capacity information.
    *
-   * @return \Drupal\purge\Plugin\Purge\Purger\CapacityTrackerInterface
+   * @return CapacityTrackerInterface
    *   The capacity tracker.
    */
   public function capacityTracker();
@@ -43,7 +49,7 @@ interface PurgersServiceInterface extends ServiceInterface, ModifiableServiceInt
    * @see \Drupal\purge\Plugin\Purge\Purger\PurgerInterface::getId()
    * @see \Drupal\purge\Plugin\Purge\Purger\PurgerInterface::getLabel()
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup[]
+   * @return TranslatableMarkup[]
    *   Associative array with instance ID's in the key and the label as value.
    */
   public function getLabels();
@@ -95,9 +101,9 @@ interface PurgersServiceInterface extends ServiceInterface, ModifiableServiceInt
    * invalidation at that given time, you can set it as such and it will be
    * offered again later.
    *
-   * @param \Drupal\purge\Plugin\Purge\Processor\ProcessorInterface $processor
+   * @param ProcessorInterface $processor
    *   The processor plugin that is initiating cache invalidation.
-   * @param \Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface[] $invalidations
+   * @param InvalidationInterface[] $invalidations
    *   Non-associative array of invalidation objects that each describe what
    *   needs to be invalidated by the external caching system. Usually these
    *   objects originate from the queue but direct invalidation is also
@@ -109,24 +115,24 @@ interface PurgersServiceInterface extends ServiceInterface, ModifiableServiceInt
    *   once. However, your real execution time can and should never exceed the
    *   defined hint, to protect system stability.
    *
-   * @throws \Drupal\purge\Plugin\Purge\Purger\Exception\BadBehaviorException
+   * @throws BadBehaviorException
    *   Thrown when $invalidations contains other data than derivatives of
    *   \Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface.
    *
-   * @throws \Drupal\purge\Plugin\Purge\Purger\Exception\DiagnosticsException
+   * @throws DiagnosticsException
    *   Thrown by ::invalidate after a diagnostic of type SEVERITY_ERROR has
    *   been detected, which is established after calling
    *   DiagnosticsServiceInterface::::isSystemOnFire. Errors by definition
    *   force all cache invalidation to be prevented, until the user resolved
    *   the issue.
    *
-   * @throws \Drupal\purge\Plugin\Purge\Purger\Exception\CapacityException
+   * @throws CapacityException
    *   Thrown when the capacity tracker's global resource limit returns zero or
    *   when more $invalidations are given exceeding this limit. Any claimed
    *   objects should be released back to the queue (or will expire naturally)
    *   and your code should depend on the next processing window.
    *
-   * @throws \Drupal\purge\Plugin\Purge\Purger\Exception\LockException
+   * @throws LockException
    *   Thrown when other processors are currently busy.
    *
    * @see \Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface::setState()
@@ -140,7 +146,7 @@ interface PurgersServiceInterface extends ServiceInterface, ModifiableServiceInt
    * @param string $purger_instance_id
    *   The instance ID of the purger that should move one place down.
    *
-   * @throws \Drupal\purge\Plugin\Purge\Purger\Exception\BadBehaviorException
+   * @throws BadBehaviorException
    *   Thrown when $purger_instance_id is not enabled or does not exist.
    *
    * @see \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface::setPluginsEnabled()
@@ -153,7 +159,7 @@ interface PurgersServiceInterface extends ServiceInterface, ModifiableServiceInt
    * @param string $purger_instance_id
    *   The instance ID of the purger that should move one place up.
    *
-   * @throws \Drupal\purge\Plugin\Purge\Purger\Exception\BadBehaviorException
+   * @throws BadBehaviorException
    *   Thrown when $purger_instance_id is not enabled or does not exist.
    *
    * @see \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface::setPluginsEnabled()
diff --git a/src/Plugin/Purge/Purger/RuntimeMeasurementInterface.php b/src/Plugin/Purge/Purger/RuntimeMeasurementInterface.php
index d02f209..bd48de0 100644
--- a/src/Plugin/Purge/Purger/RuntimeMeasurementInterface.php
+++ b/src/Plugin/Purge/Purger/RuntimeMeasurementInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\purge\Plugin\Purge\Purger;
 
+use Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface;
 use Drupal\purge\Counter\CounterInterface;
 
 /**
@@ -46,7 +47,7 @@ interface RuntimeMeasurementInterface extends CounterInterface {
    *    reduction of the last recorded measurement. This means structural low
    *    performance will be rewarded by more capacity, but slow and carefully!
    *
-   * @param \Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface[] $invalidations
+   * @param InvalidationInterface[] $invalidations
    *   Non-associative array of processed invalidation objects.
    *
    * @throws \LogicException
diff --git a/src/Plugin/Purge/Purger/RuntimeMeasurementTracker.php b/src/Plugin/Purge/Purger/RuntimeMeasurementTracker.php
index 57e1a99..0a34a2a 100644
--- a/src/Plugin/Purge/Purger/RuntimeMeasurementTracker.php
+++ b/src/Plugin/Purge/Purger/RuntimeMeasurementTracker.php
@@ -24,14 +24,14 @@ class RuntimeMeasurementTracker implements RuntimeMeasurementTrackerInterface {
   /**
    * Holds all loaded purgers plugins.
    *
-   * @var \Drupal\purge\Plugin\Purge\Purger\PurgerInterface[]
+   * @var PurgerInterface[]
    */
   protected $purgers = NULL;
 
   /**
    * The state key value store.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
@@ -45,7 +45,7 @@ class RuntimeMeasurementTracker implements RuntimeMeasurementTrackerInterface {
   /**
    * Construct a RuntimeMeasurementTracker.
    *
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state key value store.
    */
   public function __construct(StateInterface $state) {
diff --git a/src/Plugin/Purge/Purger/RuntimeMeasurementTrackerInterface.php b/src/Plugin/Purge/Purger/RuntimeMeasurementTrackerInterface.php
index 557a981..7d8f64b 100644
--- a/src/Plugin/Purge/Purger/RuntimeMeasurementTrackerInterface.php
+++ b/src/Plugin/Purge/Purger/RuntimeMeasurementTrackerInterface.php
@@ -17,7 +17,7 @@ interface RuntimeMeasurementTrackerInterface extends DestructableInterface {
   /**
    * Set all purger plugin instances.
    *
-   * @param \Drupal\purge\Plugin\Purge\Purger\PurgerInterface[] $purgers
+   * @param PurgerInterface[] $purgers
    *   All purger plugins instantiated by
    *   \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface.
    */
diff --git a/src/Plugin/Purge/Queue/DatabaseQueue.php b/src/Plugin/Purge/Queue/DatabaseQueue.php
index 9621fec..f1ba7f1 100644
--- a/src/Plugin/Purge/Queue/DatabaseQueue.php
+++ b/src/Plugin/Purge/Queue/DatabaseQueue.php
@@ -33,7 +33,7 @@ class DatabaseQueue extends CoreDatabaseQueue implements QueueInterface {
   /**
    * Construct a DatabaseQueue object.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The Connection object containing the key-value tables.
    */
   final public function __construct(Connection $connection) {
diff --git a/src/Plugin/Purge/Queue/PluginManager.php b/src/Plugin/Purge/Queue/PluginManager.php
index 0e9c5c2..3b267f2 100644
--- a/src/Plugin/Purge/Queue/PluginManager.php
+++ b/src/Plugin/Purge/Queue/PluginManager.php
@@ -17,9 +17,9 @@ class PluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/Purge/Queue/ProxyItem.php b/src/Plugin/Purge/Queue/ProxyItem.php
index d6b30fb..d28d72f 100644
--- a/src/Plugin/Purge/Queue/ProxyItem.php
+++ b/src/Plugin/Purge/Queue/ProxyItem.php
@@ -20,14 +20,14 @@ class ProxyItem implements ProxyItemInterface {
   /**
    * The proxied invalidation object.
    *
-   * @var \Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface
+   * @var InvalidationInterface
    */
   protected $invalidation;
 
   /**
    * The 'purge.queue.txbuffer' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Queue\TxBufferInterface
+   * @var TxBufferInterface
    */
   protected $buffer;
 
diff --git a/src/Plugin/Purge/Queue/ProxyItemInterface.php b/src/Plugin/Purge/Queue/ProxyItemInterface.php
index 54f187d..617ec1f 100644
--- a/src/Plugin/Purge/Queue/ProxyItemInterface.php
+++ b/src/Plugin/Purge/Queue/ProxyItemInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\purge\Plugin\Purge\Queue;
 
+use Drupal\purge\Plugin\Purge\Queue\Exception\InvalidPropertyException;
 use Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface;
 
 /**
@@ -47,9 +48,9 @@ interface ProxyItemInterface {
   /**
    * Construct a proxy item object.
    *
-   * @param \Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface $invalidation
+   * @param InvalidationInterface $invalidation
    *   Invalidation object being wrapped in a proxy.
-   * @param \Drupal\purge\Plugin\Purge\Queue\TxBufferInterface $buffer
+   * @param TxBufferInterface $buffer
    *   The current transaction buffer used by the queue service.
    *
    * @see \Drupal\Core\Queue\QueueInterface::createItem
@@ -65,7 +66,7 @@ interface ProxyItemInterface {
    * @param string $name
    *   The name of the property, can be 'item_id', 'created' or 'data'.
    *
-   * @throws \Drupal\purge\Plugin\Purge\Queue\Exception\InvalidPropertyException
+   * @throws InvalidPropertyException
    *   Thrown when the requested property isn't 'item_id', 'created' or 'data'.
    *
    * @see http://php.net/manual/en/language.oop5.overloading.php#object.get
@@ -83,7 +84,7 @@ interface ProxyItemInterface {
    * @param mixed $value
    *   The value of the property you want to set.
    *
-   * @throws \Drupal\purge\Plugin\Purge\Queue\Exception\InvalidPropertyException
+   * @throws InvalidPropertyException
    *   Thrown when the requested property isn't 'item_id' or 'created'.
    *
    * @see http://php.net/manual/en/language.oop5.overloading.php#object.set
diff --git a/src/Plugin/Purge/Queue/QueueService.php b/src/Plugin/Purge/Queue/QueueService.php
index 32b28d1..eb74541 100644
--- a/src/Plugin/Purge/Queue/QueueService.php
+++ b/src/Plugin/Purge/Queue/QueueService.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\purge\Plugin\Purge\Queue;
 
+use Drupal\purge\Logger\LoggerChannelPartInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\DestructableInterface;
@@ -23,56 +24,56 @@ class QueueService extends ServiceBase implements QueueServiceInterface, Destruc
   /**
    * The transaction buffer in which invalidation objects temporarily stay.
    *
-   * @var \Drupal\purge\Plugin\Purge\Queue\TxBufferInterface
+   * @var TxBufferInterface
    */
   protected $buffer;
 
   /**
    * The factory for configuration objects.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Logger channel specific to the queue service.
    *
-   * @var \Drupal\purge\Logger\LoggerChannelPartInterface
+   * @var LoggerChannelPartInterface
    */
   protected $logger;
 
   /**
    * The 'purge.invalidation.factory' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Invalidation\InvalidationsServiceInterface
+   * @var InvalidationsServiceInterface
    */
   protected $purgeInvalidationFactory;
 
   /**
    * The 'purge.logger' service.
    *
-   * @var \Drupal\purge\Logger\LoggerServiceInterface
+   * @var LoggerServiceInterface
    */
   protected $purgeLogger;
 
   /**
    * The 'purge.purgers' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface
+   * @var PurgersServiceInterface
    */
   protected $purgePurgers;
 
   /**
    * The 'purge.queue.stats' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Queue\StatsTrackerInterface
+   * @var StatsTrackerInterface
    */
   protected $purgeQueueStats;
 
   /**
    * The Queue (plugin) object in which all items are stored.
    *
-   * @var \Drupal\purge\Plugin\Purge\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;
 
@@ -89,19 +90,19 @@ class QueueService extends ServiceBase implements QueueServiceInterface, Destruc
   /**
    * Construct the queue service.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $plugin_manager
+   * @param PluginManagerInterface $plugin_manager
    *   The plugin manager for this service.
-   * @param \Drupal\purge\Logger\LoggerServiceInterface $purge_logger
+   * @param LoggerServiceInterface $purge_logger
    *   Logging services for the purge module and its submodules.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\purge\Plugin\Purge\Queue\TxBufferInterface $purge_queue_txbuffer
+   * @param TxBufferInterface $purge_queue_txbuffer
    *   The transaction buffer.
-   * @param \Drupal\purge\Plugin\Purge\Queue\StatsTrackerInterface $purge_queue_stats
+   * @param StatsTrackerInterface $purge_queue_stats
    *   The queue statistics tracker.
-   * @param \Drupal\purge\Plugin\Purge\Invalidation\InvalidationsServiceInterface $purge_invalidation_factory
+   * @param InvalidationsServiceInterface $purge_invalidation_factory
    *   The service that instantiates invalidation objects for queue items.
-   * @param \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface $purge_purgers
+   * @param PurgersServiceInterface $purge_purgers
    *   The purgers service.
    */
   public function __construct(PluginManagerInterface $plugin_manager, LoggerServiceInterface $purge_logger, ConfigFactoryInterface $config_factory, TxBufferInterface $purge_queue_txbuffer, StatsTrackerInterface $purge_queue_stats, InvalidationsServiceInterface $purge_invalidation_factory, PurgersServiceInterface $purge_purgers) {
diff --git a/src/Plugin/Purge/Queue/QueueServiceInterface.php b/src/Plugin/Purge/Queue/QueueServiceInterface.php
index 8234a7a..4b8fe8b 100644
--- a/src/Plugin/Purge/Queue/QueueServiceInterface.php
+++ b/src/Plugin/Purge/Queue/QueueServiceInterface.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\purge\Plugin\Purge\Queue;
 
+use Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\purge\Plugin\Purge\Invalidation\ImmutableInvalidationInterface;
 use Drupal\purge\ModifiableServiceInterface;
 use Drupal\purge\Plugin\Purge\Queuer\QueuerInterface;
 use Drupal\purge\ServiceInterface;
@@ -14,9 +17,9 @@ interface QueueServiceInterface extends ServiceInterface, ModifiableServiceInter
   /**
    * Add invalidation objects to the queue, schedule for later purging.
    *
-   * @param \Drupal\purge\Plugin\Purge\Queuer\QueuerInterface $queuer
+   * @param QueuerInterface $queuer
    *   The queuer plugin that is queueing the invalidation objects.
-   * @param \Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface[] $invalidations
+   * @param InvalidationInterface[] $invalidations
    *   A non-associative array with invalidation objects to be added to the
    *   queue. After the items have been added to the queue, they can be claimed
    *   to be processed by a queue processor.
@@ -40,7 +43,7 @@ interface QueueServiceInterface extends ServiceInterface, ModifiableServiceInter
    *   also claim the items and process them, therefore too short lease times
    *   are dangerous as it could lead to double processing.
    *
-   * @return \Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface[]|array
+   * @return InvalidationInterface[]|array
    *   Returned will be a non-associative array with the given amount of
    *   invalidation objects as claimed. Be aware that it can be expected that
    *   the claimed invalidations will need to be processed by the purger within
@@ -52,7 +55,7 @@ interface QueueServiceInterface extends ServiceInterface, ModifiableServiceInter
   /**
    * Delete invalidation objects from the queue.
    *
-   * @param \Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface[] $invalidations
+   * @param InvalidationInterface[] $invalidations
    *   A non-associative array with invalidation objects to be deleted from the
    *   queue. The object instances and references thereto, remain to exist until
    *   the queue service is destructed, but should not be accessed anymore as
@@ -68,7 +71,7 @@ interface QueueServiceInterface extends ServiceInterface, ModifiableServiceInter
   /**
    * Retrieve the description of the queue backend.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The translated description.
    */
   public function getDescription();
@@ -76,7 +79,7 @@ interface QueueServiceInterface extends ServiceInterface, ModifiableServiceInter
   /**
    * Retrieve the label of the queue backend.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The translated label.
    */
   public function getLabel();
@@ -84,7 +87,7 @@ interface QueueServiceInterface extends ServiceInterface, ModifiableServiceInter
   /**
    * Handle processing results and either release back, or delete objects.
    *
-   * @param \Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface[] $invalidations
+   * @param InvalidationInterface[] $invalidations
    *   The invalidation objects after processing.
    *
    * @see \Drupal\purge\Plugin\Purge\Purger\PurgersService::invalidate
@@ -102,7 +105,7 @@ interface QueueServiceInterface extends ServiceInterface, ModifiableServiceInter
   /**
    * Release invalidation objects back to the queue.
    *
-   * @param \Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface[] $invalidations
+   * @param InvalidationInterface[] $invalidations
    *   A non-associative array with invalidation objects to be released back to
    *   the queue, usually FAILED, PROCESSING or NOT_SUPPORTED. Once released,
    *   other processors can claim them again for further processing.
@@ -126,7 +129,7 @@ interface QueueServiceInterface extends ServiceInterface, ModifiableServiceInter
    * @see \Drupal\purge\Plugin\Purge\Queue\QueueServiceInterface::selectPageLimit
    * @see \Drupal\purge\Plugin\Purge\Queue\QueueServiceInterface::selectPageMax
    *
-   * @return \Drupal\purge\Plugin\Purge\Invalidation\ImmutableInvalidationInterface[]
+   * @return ImmutableInvalidationInterface[]
    *   Immutable invalidation objects, which aren't usable besides data display.
    */
   public function selectPage($page = 1);
diff --git a/src/Plugin/Purge/Queue/StatsTracker.php b/src/Plugin/Purge/Queue/StatsTracker.php
index e89f9d5..18f6136 100644
--- a/src/Plugin/Purge/Queue/StatsTracker.php
+++ b/src/Plugin/Purge/Queue/StatsTracker.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\purge\Plugin\Purge\Queue;
 
+use Drupal\purge\Counter\CounterInterface;
 use Drupal\Core\State\StateInterface;
 use Drupal\purge\Plugin\Purge\Invalidation\InvStatesInterface;
 
@@ -13,7 +14,7 @@ class StatsTracker implements StatsTrackerInterface {
   /**
    * Loaded statistical counters.
    *
-   * @var \Drupal\purge\Counter\CounterInterface[]
+   * @var CounterInterface[]
    */
   protected $instances = [];
 
@@ -29,7 +30,7 @@ class StatsTracker implements StatsTrackerInterface {
   /**
    * The state key value store.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
@@ -69,7 +70,7 @@ class StatsTracker implements StatsTrackerInterface {
   /**
    * Construct a statistics tracker.
    *
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state key value store.
    */
   public function __construct(StateInterface $state) {
diff --git a/src/Plugin/Purge/Queue/StatsTrackerInterface.php b/src/Plugin/Purge/Queue/StatsTrackerInterface.php
index b885918..e831b32 100644
--- a/src/Plugin/Purge/Queue/StatsTrackerInterface.php
+++ b/src/Plugin/Purge/Queue/StatsTrackerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\purge\Plugin\Purge\Queue;
 
+use Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface;
 use Drupal\Core\DestructableInterface;
 
 /**
@@ -50,7 +51,7 @@ interface StatsTrackerInterface extends DestructableInterface, \Iterator, \Count
   /**
    * The number of items currently in the queue.
    *
-   * @return \Drupal\purge\Plugin\Purge\Queue\NumberOfItemsStatistic
+   * @return NumberOfItemsStatistic
    *   The \Drupal\purge\CounterExplainedCounterInterface compliant statistic.
    */
   public function numberOfItems();
@@ -58,7 +59,7 @@ interface StatsTrackerInterface extends DestructableInterface, \Iterator, \Count
   /**
    * Total number of failed queue items.
    *
-   * @return \Drupal\purge\Plugin\Purge\Queue\TotalFailedStatistic
+   * @return TotalFailedStatistic
    *   The \Drupal\purge\CounterExplainedCounterInterface compliant statistic.
    */
   public function totalFailed();
@@ -66,7 +67,7 @@ interface StatsTrackerInterface extends DestructableInterface, \Iterator, \Count
   /**
    * Total number of multi-step cache invalidations.
    *
-   * @return \Drupal\purge\Plugin\Purge\Queue\TotalProcessingStatistic
+   * @return TotalProcessingStatistic
    *   The \Drupal\purge\CounterExplainedCounterInterface compliant statistic.
    */
   public function totalProcessing();
@@ -74,7 +75,7 @@ interface StatsTrackerInterface extends DestructableInterface, \Iterator, \Count
   /**
    * Total number of succeeded queue items.
    *
-   * @return \Drupal\purge\Plugin\Purge\Queue\TotalSucceededStatistic
+   * @return TotalSucceededStatistic
    *   The \Drupal\purge\CounterExplainedCounterInterface compliant statistic.
    */
   public function totalSucceeded();
@@ -82,7 +83,7 @@ interface StatsTrackerInterface extends DestructableInterface, \Iterator, \Count
   /**
    * Total number of not supported invalidations.
    *
-   * @return \Drupal\purge\Plugin\Purge\Queue\TotalNotSupportedStatistic
+   * @return TotalNotSupportedStatistic
    *   The \Drupal\purge\CounterExplainedCounterInterface compliant statistic.
    */
   public function totalNotSupported();
@@ -101,7 +102,7 @@ interface StatsTrackerInterface extends DestructableInterface, \Iterator, \Count
   /**
    * Automatically update the total counters for the given invalidations.
    *
-   * @param \Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface[] $invalidations
+   * @param InvalidationInterface[] $invalidations
    *   A non-associative array with invalidation objects regardless of the state
    *   they're in. Their state will determine which counter will be updated.
    */
diff --git a/src/Plugin/Purge/Queue/TxBuffer.php b/src/Plugin/Purge/Queue/TxBuffer.php
index 2596950..290a222 100644
--- a/src/Plugin/Purge/Queue/TxBuffer.php
+++ b/src/Plugin/Purge/Queue/TxBuffer.php
@@ -13,7 +13,7 @@ class TxBuffer implements TxBufferInterface {
   /**
    * Instances listing holding copies of each Invalidation object.
    *
-   * @var \Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface[]
+   * @var InvalidationInterface[]
    */
   private $instances = [];
 
diff --git a/src/Plugin/Purge/Queue/TxBufferInterface.php b/src/Plugin/Purge/Queue/TxBufferInterface.php
index c2c7cd0..0574447 100644
--- a/src/Plugin/Purge/Queue/TxBufferInterface.php
+++ b/src/Plugin/Purge/Queue/TxBufferInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\purge\Plugin\Purge\Queue;
 
+use Drupal\purge\Plugin\Purge\Purger\Exception\BadBehaviorException;
 use Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface;
 
 /**
@@ -50,7 +51,7 @@ interface TxBufferInterface extends \Countable, \Iterator {
   /**
    * Delete the given invalidation object from the buffer.
    *
-   * @param array|\Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface $invalidations
+   * @param array|InvalidationInterface $invalidations
    *   Invalidation object or array with objects.
    */
   public function delete($invalidations);
@@ -69,7 +70,7 @@ interface TxBufferInterface extends \Countable, \Iterator {
    *   The (unique) value of the property that has to be stored in the buffer
    *   in order to return the object.
    *
-   * @return \Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface|false
+   * @return InvalidationInterface|false
    *   The matched invalidation object or FALSE when there was no combination
    *   found of the property and value.
    */
@@ -87,7 +88,7 @@ interface TxBufferInterface extends \Countable, \Iterator {
    *     - \Drupal\purge\Plugin\Purge\Queue\TxBufferInterface::RELEASED
    *     - \Drupal\purge\Plugin\Purge\Queue\TxBufferInterface::DELETING.
    *
-   * @return \Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface[]
+   * @return InvalidationInterface[]
    *   List of invalidation objects.
    */
   public function getFiltered($states);
@@ -95,7 +96,7 @@ interface TxBufferInterface extends \Countable, \Iterator {
   /**
    * Request the in-buffer set state for the given invalidation object.
    *
-   * @param \Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface $invalidation
+   * @param InvalidationInterface $invalidation
    *   Invalidation object.
    *
    * @return int|null
@@ -112,7 +113,7 @@ interface TxBufferInterface extends \Countable, \Iterator {
   /**
    * Retrieve a stored property for the given invalidation object.
    *
-   * @param \Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface $invalidation
+   * @param InvalidationInterface $invalidation
    *   Invalidation object.
    * @param string $property
    *   The string key of the stored property you want to receive.
@@ -127,7 +128,7 @@ interface TxBufferInterface extends \Countable, \Iterator {
   /**
    * Check if the given object is already in buffer our not.
    *
-   * @param \Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface $invalidation
+   * @param InvalidationInterface $invalidation
    *   Invalidation object.
    *
    * @return bool
@@ -138,7 +139,7 @@ interface TxBufferInterface extends \Countable, \Iterator {
   /**
    * Set the given state on one or multiple invalidation objects.
    *
-   * @param array|\Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface $invalidations
+   * @param array|InvalidationInterface $invalidations
    *   Invalidation object or array with objects.
    * @param int $state
    *   One of the following states:
@@ -149,7 +150,7 @@ interface TxBufferInterface extends \Countable, \Iterator {
    *     - \Drupal\purge\Plugin\Purge\Queue\TxBufferInterface::RELEASED
    *     - \Drupal\purge\Plugin\Purge\Queue\TxBufferInterface::DELETING.
    *
-   * @throws \Drupal\purge\Plugin\Purge\Purger\Exception\BadBehaviorException
+   * @throws BadBehaviorException
    *   Thrown when $invalidations contains other data than derivatives of
    *   \Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface.
    */
@@ -158,7 +159,7 @@ interface TxBufferInterface extends \Countable, \Iterator {
   /**
    * Store a named property for the given invalidation object.
    *
-   * @param \Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface $invalidation
+   * @param InvalidationInterface $invalidation
    *   Invalidation object.
    * @param string $property
    *   The string key of the property you want to store.
diff --git a/src/Plugin/Purge/Queuer/PluginManager.php b/src/Plugin/Purge/Queuer/PluginManager.php
index 7ff079d..2d6fc52 100644
--- a/src/Plugin/Purge/Queuer/PluginManager.php
+++ b/src/Plugin/Purge/Queuer/PluginManager.php
@@ -17,9 +17,9 @@ class PluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/Purge/Queuer/QueuerInterface.php b/src/Plugin/Purge/Queuer/QueuerInterface.php
index 3259ede..25ed4a7 100644
--- a/src/Plugin/Purge/Queuer/QueuerInterface.php
+++ b/src/Plugin/Purge/Queuer/QueuerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\purge\Plugin\Purge\Queuer;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 
 /**
@@ -12,7 +13,7 @@ interface QueuerInterface extends PluginInspectionInterface {
   /**
    * Retrieve the title of this queuer.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The translated label.
    */
   public function getLabel();
@@ -20,7 +21,7 @@ interface QueuerInterface extends PluginInspectionInterface {
   /**
    * Retrieve the description of this queuer.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The translated description.
    */
   public function getDescription();
diff --git a/src/Plugin/Purge/Queuer/QueuersService.php b/src/Plugin/Purge/Queuer/QueuersService.php
index 820e44a..c496f3f 100644
--- a/src/Plugin/Purge/Queuer/QueuersService.php
+++ b/src/Plugin/Purge/Queuer/QueuersService.php
@@ -18,16 +18,16 @@ class QueuersService extends ServiceBase implements QueuersServiceInterface {
   /**
    * The factory for configuration objects.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Construct the queuers service.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $pluginManager
+   * @param PluginManagerInterface $pluginManager
    *   The plugin manager for this service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
    */
   public function __construct(PluginManagerInterface $pluginManager, ConfigFactoryInterface $config_factory) {
diff --git a/src/Plugin/Purge/Queuer/QueuersServiceInterface.php b/src/Plugin/Purge/Queuer/QueuersServiceInterface.php
index a7513aa..5dc64e0 100644
--- a/src/Plugin/Purge/Queuer/QueuersServiceInterface.php
+++ b/src/Plugin/Purge/Queuer/QueuersServiceInterface.php
@@ -16,7 +16,7 @@ interface QueuersServiceInterface extends ServiceInterface, ModifiableServiceInt
    * @param string $plugin_id
    *   The plugin ID of the queuer you want to retrieve.
    *
-   * @return \Drupal\purge\Plugin\Purge\Queuer\QueuerInterface|false
+   * @return QueuerInterface|false
    *   The queue plugin or FALSE when it isn't available.
    */
   public function get($plugin_id);
diff --git a/src/Plugin/Purge/TagsHeader/PluginManager.php b/src/Plugin/Purge/TagsHeader/PluginManager.php
index 2d7257c..828d717 100644
--- a/src/Plugin/Purge/TagsHeader/PluginManager.php
+++ b/src/Plugin/Purge/TagsHeader/PluginManager.php
@@ -17,9 +17,9 @@ class PluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/Purge/TagsHeader/TagsHeadersService.php b/src/Plugin/Purge/TagsHeader/TagsHeadersService.php
index 6499aee..117ced9 100644
--- a/src/Plugin/Purge/TagsHeader/TagsHeadersService.php
+++ b/src/Plugin/Purge/TagsHeader/TagsHeadersService.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\purge\Plugin\Purge\TagsHeader;
 
+use Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\purge\IteratingServiceBaseTrait;
 use Drupal\purge\ServiceBase;
@@ -19,14 +20,14 @@ class TagsHeadersService extends ServiceBase implements TagsHeadersServiceInterf
    *
    * Do not access this property directly, use ::getPurgers.
    *
-   * @var \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface
+   * @var PurgersServiceInterface
    */
   private $purgePurgers;
 
   /**
    * Construct the tags headers service.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $pluginManager
+   * @param PluginManagerInterface $pluginManager
    *   The plugin manager for this service.
    */
   public function __construct(PluginManagerInterface $pluginManager) {
@@ -70,7 +71,7 @@ class TagsHeadersService extends ServiceBase implements TagsHeadersServiceInterf
   /**
    * Retrieve the 'purge.purgers' service - lazy loaded.
    *
-   * @return \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface
+   * @return PurgersServiceInterface
    *   The 'purge.purgers' service.
    */
   protected function getPurgers() {
diff --git a/src/ServiceBase.php b/src/ServiceBase.php
index e0c33a5..3327656 100644
--- a/src/ServiceBase.php
+++ b/src/ServiceBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\purge;
 
+use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\DependencyInjection\ServiceProviderBase;
 
 /**
@@ -12,7 +13,7 @@ abstract class ServiceBase extends ServiceProviderBase implements ServiceInterfa
   /**
    * The plugin manager for the given service.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $pluginManager;
 
diff --git a/tests/src/Kernel/Queue/PluginTestBase.php b/tests/src/Kernel/Queue/PluginTestBase.php
index 348443b..decb958 100644
--- a/tests/src/Kernel/Queue/PluginTestBase.php
+++ b/tests/src/Kernel/Queue/PluginTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\purge\Kernel\Queue;
 
+use Drupal\purge\Plugin\Purge\Queue\QueueInterface;
 use Drupal\purge\Plugin\Purge\Queue\PluginManager;
 use Drupal\Tests\purge\Kernel\KernelPluginManagerTestBase;
 
@@ -27,7 +28,7 @@ abstract class PluginTestBase extends KernelPluginManagerTestBase {
   /**
    * The queue plugin being tested.
    *
-   * @var null|\Drupal\purge\Plugin\Purge\Queue\QueueInterface
+   * @var null|QueueInterface
    */
   protected $queue;
 
diff --git a/tests/src/Kernel/Queue/ProxyItemTest.php b/tests/src/Kernel/Queue/ProxyItemTest.php
index eeeef79..c177951 100644
--- a/tests/src/Kernel/Queue/ProxyItemTest.php
+++ b/tests/src/Kernel/Queue/ProxyItemTest.php
@@ -18,7 +18,7 @@ class ProxyItemTest extends KernelTestBase {
   /**
    * The TxBuffer object in which state and properties get stored.
    *
-   * @var \Drupal\purge\Plugin\Purge\Queue\TxBuffer
+   * @var TxBuffer
    */
   protected $buffer;
 
diff --git a/tests/src/Kernel/Queue/ServiceTest.php b/tests/src/Kernel/Queue/ServiceTest.php
index 8a20791..f31ba33 100644
--- a/tests/src/Kernel/Queue/ServiceTest.php
+++ b/tests/src/Kernel/Queue/ServiceTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\purge\Kernel\Queue;
 
+use Drupal\purge\Plugin\Purge\Queuer\QueuerInterface;
 use Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface;
 use Drupal\Tests\purge\Kernel\KernelServiceTestBase;
 
@@ -31,7 +32,7 @@ class ServiceTest extends KernelServiceTestBase {
   /**
    * The queuer plugin.
    *
-   * @var \Drupal\purge\Plugin\Purge\Queuer\QueuerInterface
+   * @var QueuerInterface
    */
   protected $queuer;
 
diff --git a/tests/src/Traits/PluginManagerTestTrait.php b/tests/src/Traits/PluginManagerTestTrait.php
index 5f2af4a..7837211 100644
--- a/tests/src/Traits/PluginManagerTestTrait.php
+++ b/tests/src/Traits/PluginManagerTestTrait.php
@@ -23,7 +23,7 @@ trait PluginManagerTestTrait {
   /**
    * Instance of the service being tested, instantiated by the container.
    *
-   * @var null|\Drupal\Component\Plugin\PluginManagerInterface
+   * @var null|PluginManagerInterface
    */
   protected $pluginManager;
 
diff --git a/tests/src/Traits/TestTrait.php b/tests/src/Traits/TestTrait.php
index acd4854..5220479 100644
--- a/tests/src/Traits/TestTrait.php
+++ b/tests/src/Traits/TestTrait.php
@@ -2,6 +2,18 @@
 
 namespace Drupal\Tests\purge\Traits;
 
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\purge\Logger\LoggerServiceInterface;
+use Drupal\purge\Plugin\Purge\Processor\ProcessorsServiceInterface;
+use Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface;
+use Drupal\purge\Plugin\Purge\Invalidation\InvalidationsServiceInterface;
+use Drupal\purge\Plugin\Purge\Queue\QueueServiceInterface;
+use Drupal\purge\Plugin\Purge\Queue\StatsTrackerInterface;
+use Drupal\purge\Plugin\Purge\Queue\TxBufferInterface;
+use Drupal\purge\Plugin\Purge\Queuer\QueuersServiceInterface;
+use Drupal\purge\Plugin\Purge\DiagnosticCheck\DiagnosticsServiceInterface;
+use Drupal\purge\Plugin\Purge\TagsHeader\TagsHeadersServiceInterface;
+use Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface;
 /**
  * Several helper properties and methods for purge tests.
  *
@@ -12,77 +24,77 @@ trait TestTrait {
   /**
    * The factory for configuration objects.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The 'purge.logger' service.
    *
-   * @var \Drupal\purge\Logger\LoggerServiceInterface
+   * @var LoggerServiceInterface
    */
   protected $purgeLogger;
 
   /**
    * The 'purge.processors' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Processor\ProcessorsServiceInterface
+   * @var ProcessorsServiceInterface
    */
   protected $purgeProcessors;
 
   /**
    * The 'purge.purgers' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface
+   * @var PurgersServiceInterface
    */
   protected $purgePurgers;
 
   /**
    * The 'purge.invalidation.factory' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Invalidation\InvalidationsServiceInterface
+   * @var InvalidationsServiceInterface
    */
   protected $purgeInvalidationFactory;
 
   /**
    * The 'purge.queue' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Queue\QueueServiceInterface
+   * @var QueueServiceInterface
    */
   protected $purgeQueue;
 
   /**
    * The 'purge.queue.stats' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Queue\StatsTrackerInterface
+   * @var StatsTrackerInterface
    */
   protected $purgeQueueStats;
 
   /**
    * The 'purge.queue.txbuffer' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Queue\TxBufferInterface
+   * @var TxBufferInterface
    */
   protected $purgeQueueTxbuffer;
 
   /**
    * The 'purge.queuers' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Queuer\QueuersServiceInterface
+   * @var QueuersServiceInterface
    */
   protected $purgeQueuers;
 
   /**
    * The 'purge.diagnostics' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\DiagnosticCheck\DiagnosticsServiceInterface
+   * @var DiagnosticsServiceInterface
    */
   protected $purgeDiagnostics;
 
   /**
    * The 'purge.tagsheaders' service.
    *
-   * @var \Drupal\purge\Plugin\Purge\TagsHeader\TagsHeadersServiceInterface
+   * @var TagsHeadersServiceInterface
    */
   protected $purgeTagsHeaders;
 
@@ -220,7 +232,7 @@ trait TestTrait {
    *   Initialize a purger that supports all invalidation types. When FALSE is
    *   passed, expect a \Drupal\purge\Plugin\Purge\Invalidation\Exception\TypeUnsupportedException.
    *
-   * @return array|\Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface
+   * @return array|InvalidationInterface
    *   Array of InvalidationInterface objects or a single InvalidationInterface.
    */
   public function getInvalidations($amount, $plugin_id = 'everything', $expression = NULL, $initialize_purger = TRUE) {
diff --git a/tests/src/Unit/FixGetConfigFactoryStubTrait.php b/tests/src/Unit/FixGetConfigFactoryStubTrait.php
index 4569813..415fd1a 100644
--- a/tests/src/Unit/FixGetConfigFactoryStubTrait.php
+++ b/tests/src/Unit/FixGetConfigFactoryStubTrait.php
@@ -30,17 +30,13 @@ trait FixGetConfigFactoryStubTrait {
       // Also allow to pass in no argument.
       $map[] = ['', $config_values];
 
-      $immutable_config_object = $this->getMockBuilder('Drupal\Core\Config\ImmutableConfig')
-        ->disableOriginalConstructor()
-        ->getMock();
+      $immutable_config_object = $this->createMock('Drupal\Core\Config\ImmutableConfig');
       $immutable_config_object->expects($this->any())
         ->method('get')
         ->will($this->returnValueMap($map));
       $config_get_map[] = [$config_name, $immutable_config_object];
 
-      $mutable_config_object = $this->getMockBuilder('Drupal\Core\Config\Config')
-        ->disableOriginalConstructor()
-        ->getMock();
+      $mutable_config_object = $this->createMock('Drupal\Core\Config\Config');
       $mutable_config_object->expects($this->any())
         ->method('get')
         ->will($this->returnValueMap($map));
diff --git a/tests/src/Unit/Logger/LoggerChannelPartFactoryTest.php b/tests/src/Unit/Logger/LoggerChannelPartFactoryTest.php
index f3c786a..1ae4e25 100644
--- a/tests/src/Unit/Logger/LoggerChannelPartFactoryTest.php
+++ b/tests/src/Unit/Logger/LoggerChannelPartFactoryTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\purge\Unit\Logger;
 
+use PHPUnit\Framework\MockObject\MockObject;
+use Psr\Log\LoggerInterface;
 use Drupal\purge\Logger\LoggerChannelPartFactory;
 use Drupal\Tests\UnitTestCase;
 
@@ -15,14 +17,14 @@ class LoggerChannelPartFactoryTest extends UnitTestCase {
   /**
    * The tested factory.
    *
-   * @var \Drupal\purge\Logger\LoggerChannelPartFactory
+   * @var LoggerChannelPartFactory
    */
   protected $loggerChannelPartFactory;
 
   /**
    * The mocked logger channel.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject|\Psr\Log\LoggerInterface
+   * @var MockObject|LoggerInterface
    */
   protected $loggerChannelPurge;
 
diff --git a/tests/src/Unit/Logger/LoggerChannelPartTest.php b/tests/src/Unit/Logger/LoggerChannelPartTest.php
index 76f77b6..da0100a 100644
--- a/tests/src/Unit/Logger/LoggerChannelPartTest.php
+++ b/tests/src/Unit/Logger/LoggerChannelPartTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\purge\Unit\Logger;
 
+use PHPUnit\Framework\MockObject\MockObject;
+use Psr\Log\LoggerInterface;
 use Drupal\Core\Logger\RfcLogLevel;
 use Drupal\purge\Logger\LoggerChannelPart;
 use Drupal\Tests\UnitTestCase;
@@ -16,7 +18,7 @@ class LoggerChannelPartTest extends UnitTestCase {
   /**
    * The mocked logger channel.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject|\Psr\Log\LoggerInterface
+   * @var MockObject|LoggerInterface
    */
   protected $loggerChannelPurge;
 
@@ -91,6 +93,7 @@ class LoggerChannelPartTest extends UnitTestCase {
    * @covers ::emergency
    *
    * @dataProvider providerTestEmergency()
+   * @doesNotPerformAssertions
    */
   public function testEmergency($id, array $grants, $output): void {
     $this->helperForSeverityMethods($id, $grants, $output, 'emergency');
@@ -110,6 +113,7 @@ class LoggerChannelPartTest extends UnitTestCase {
    * @covers ::alert
    *
    * @dataProvider providerTestAlert()
+   * @doesNotPerformAssertions
    */
   public function testAlert($id, array $grants, $output): void {
     $this->helperForSeverityMethods($id, $grants, $output, 'alert');
@@ -129,6 +133,7 @@ class LoggerChannelPartTest extends UnitTestCase {
    * @covers ::critical
    *
    * @dataProvider providerTestCritical()
+   * @doesNotPerformAssertions
    */
   public function testCritical($id, array $grants, $output): void {
     $this->helperForSeverityMethods($id, $grants, $output, 'critical');
@@ -148,6 +153,7 @@ class LoggerChannelPartTest extends UnitTestCase {
    * @covers ::error
    *
    * @dataProvider providerTestError()
+   * @doesNotPerformAssertions
    */
   public function testError($id, array $grants, $output): void {
     $this->helperForSeverityMethods($id, $grants, $output, 'error');
@@ -167,6 +173,7 @@ class LoggerChannelPartTest extends UnitTestCase {
    * @covers ::warning
    *
    * @dataProvider providerTestWarning()
+   * @doesNotPerformAssertions
    */
   public function testWarning($id, array $grants, $output): void {
     $this->helperForSeverityMethods($id, $grants, $output, 'warning');
@@ -186,6 +193,7 @@ class LoggerChannelPartTest extends UnitTestCase {
    * @covers ::notice
    *
    * @dataProvider providerTestNotice()
+   * @doesNotPerformAssertions
    */
   public function testNotice($id, array $grants, $output): void {
     $this->helperForSeverityMethods($id, $grants, $output, 'notice');
@@ -205,6 +213,7 @@ class LoggerChannelPartTest extends UnitTestCase {
    * @covers ::info
    *
    * @dataProvider providerTestInfo()
+   * @doesNotPerformAssertions
    */
   public function testInfo($id, array $grants, $output): void {
     $this->helperForSeverityMethods($id, $grants, $output, 'info');
@@ -224,6 +233,7 @@ class LoggerChannelPartTest extends UnitTestCase {
    * @covers ::debug
    *
    * @dataProvider providerTestDebug()
+   * @doesNotPerformAssertions
    */
   public function testDebug($id, array $grants, $output): void {
     $this->helperForSeverityMethods($id, $grants, $output, 'debug');
@@ -243,6 +253,7 @@ class LoggerChannelPartTest extends UnitTestCase {
    * @covers ::log
    *
    * @dataProvider providerTestLog()
+   * @doesNotPerformAssertions
    */
   public function testLog($id, $level, $message, $output): void {
     $this->loggerChannelPurge
diff --git a/tests/src/Unit/Logger/LoggerServiceTest.php b/tests/src/Unit/Logger/LoggerServiceTest.php
index 8a88ebe..4e1ac8d 100644
--- a/tests/src/Unit/Logger/LoggerServiceTest.php
+++ b/tests/src/Unit/Logger/LoggerServiceTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\purge\Unit\Logger;
 
+use PHPUnit\Framework\MockObject\MockObject;
+use Drupal\purge\Logger\LoggerChannelPartFactoryInterface;
 use Drupal\purge\Logger\LoggerService;
 use Drupal\Tests\purge\Unit\FixGetConfigFactoryStubTrait;
 use Drupal\Tests\UnitTestCase;
@@ -33,14 +35,14 @@ class LoggerServiceTest extends UnitTestCase {
   /**
    * The tested LoggerService object.
    *
-   * @var \Drupal\purge\Logger\LoggerService
+   * @var LoggerService
    */
   protected $loggerService;
 
   /**
    * The mocked channel part factory.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject|\Drupal\purge\Logger\LoggerChannelPartFactoryInterface
+   * @var MockObject|LoggerChannelPartFactoryInterface
    */
   protected $loggerChannelPartFactory;
 
diff --git a/tests/src/Unit/Logger/PurgeLoggerAwareTraitTest.php b/tests/src/Unit/Logger/PurgeLoggerAwareTraitTest.php
index 7db8287..cebf5b9 100644
--- a/tests/src/Unit/Logger/PurgeLoggerAwareTraitTest.php
+++ b/tests/src/Unit/Logger/PurgeLoggerAwareTraitTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\purge\Unit\Logger;
 
+use PHPUnit\Framework\MockObject\MockObject;
+use Psr\Log\LoggerInterface;
 use Drupal\Tests\UnitTestCase;
 
 /**
@@ -14,7 +16,7 @@ class PurgeLoggerAwareTraitTest extends UnitTestCase {
   /**
    * The mocked logger.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject|\Psr\Log\LoggerInterface
+   * @var MockObject|LoggerInterface
    */
   protected $logger;
 
