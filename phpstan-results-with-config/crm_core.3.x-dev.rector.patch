diff --git a/modules/crm_core_activity/crm_core_activity.module b/modules/crm_core_activity/crm_core_activity.module
index 4bf3917..d35118d 100644
--- a/modules/crm_core_activity/crm_core_activity.module
+++ b/modules/crm_core_activity/crm_core_activity.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\crm_core_activity\Entity\Activity;
 /**
  * @file
  * Provides an entity for recording a contact's activities.
@@ -29,7 +30,7 @@ function crm_core_activity_entity_predelete(EntityInterface $entity) {
  * If current entity to be deleted was only participant in Activity, that
  * activity will be removed.
  *
- * @param Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity ID to be looked for from participants.
  */
 function crm_core_activity_pre_delete_checker(EntityInterface $entity) {
@@ -51,7 +52,7 @@ function crm_core_activity_pre_delete_checker(EntityInterface $entity) {
   $crm_core_activities = $activity_storage->loadMultiple($activity_ids);
 
   foreach ($crm_core_activities as $crm_core_activity) {
-    /** @var \Drupal\crm_core_activity\Entity\Activity $crm_core_activity */
+    /** @var Activity $crm_core_activity */
     $participants = $crm_core_activity->get('activity_participants')->getValue();
     // Remove Individual from participants array.
     $participants = array_diff(array_column($participants, 'target_id'), [$entity_id]);
diff --git a/modules/crm_core_activity/legacy/CRMFeedsActivityProcessor.inc b/modules/crm_core_activity/legacy/CRMFeedsActivityProcessor.inc
index 05ee489..61940ed 100644
--- a/modules/crm_core_activity/legacy/CRMFeedsActivityProcessor.inc
+++ b/modules/crm_core_activity/legacy/CRMFeedsActivityProcessor.inc
@@ -43,7 +43,7 @@ class CRMFeedsActivityProcessor extends FeedsProcessor {
       'uid' => $this->config['author'],
     ];
 
-    return entity_create('crm_core_activity', $values);
+    return \Drupal::service('entity_type.manager')->getStorage('crm_core_activity')->create($values);
   }
 
   /**
@@ -58,7 +58,9 @@ class CRMFeedsActivityProcessor extends FeedsProcessor {
     }
     else {
       // We're replacing the existing activity. Only save the necessary.
-      $activity = db_query("SELECT created, activity_id, type FROM {crm_core_activity} WHERE activity_id = :activity_id", [':activity_id' => $activity_id])->fetchObject();
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+      $activity = \Drupal::database()->query("SELECT created, activity_id, type FROM {crm_core_activity} WHERE activity_id = :activity_id", [':activity_id' => $activity_id])->fetchObject();
       $activity->uid = $this->config['author'];
     }
     // Populate properties that are set by activity_object_prepare().
@@ -98,13 +100,13 @@ class CRMFeedsActivityProcessor extends FeedsProcessor {
       return;
     }
     $count = $this->getLimit();
-    $activitys = db_query_range("SELECT a.activity_id FROM {crm_core_activity} a JOIN {feeds_item} fi ON fi.entity_type = 'crm_core_activity' AND a.activity_id = fi.entity_id WHERE fi.id = :id AND c.created < :created", 0, $count, [':id' => $this->id, ':created' => REQUEST_TIME - $time]);
+    $activitys = db_query_range("SELECT a.activity_id FROM {crm_core_activity} a JOIN {feeds_item} fi ON fi.entity_type = 'crm_core_activity' AND a.activity_id = fi.entity_id WHERE fi.id = :id AND c.created < :created", 0, $count, [':id' => $this->id, ':created' => \Drupal::time()->getRequestTime() - $time]);
     $activity_ids = [];
     foreach ($activitys as $activity) {
       $activity_ids[$activity->activity_id] = $activity->activity_id;
     }
     $this->entityDeleteMultiple($activity_ids);
-    if (db_query_range("SELECT 1 FROM {crm_core_activity} a JOIN {feeds_item} fi ON fi.entity_type = 'crm_core_activity' AND a.activity_id = fi.entity_id WHERE fi.id = :id AND a.created < :created", 0, 1, [':id' => $this->id, ':created' => REQUEST_TIME - $time])->fetchField()) {
+    if (db_query_range("SELECT 1 FROM {crm_core_activity} a JOIN {feeds_item} fi ON fi.entity_type = 'crm_core_activity' AND a.activity_id = fi.entity_id WHERE fi.id = :id AND a.created < :created", 0, 1, [':id' => $this->id, ':created' => \Drupal::time()->getRequestTime() - $time])->fetchField()) {
       return FEEDS_BATCH_ACTIVE;
     }
     return FEEDS_BATCH_COMPLETE;
@@ -160,7 +162,7 @@ class CRMFeedsActivityProcessor extends FeedsProcessor {
       '#options' => $types,
       '#default_value' => $this->config['activity_type'],
     ];
-    $author = user_load($this->config['author']);
+    $author = \Drupal::service('entity_type.manager')->getStorage('user')->load($this->config['author']);
     $form['author'] = [
       '#type' => 'textfield',
       '#title' => t('Author'),
@@ -215,7 +217,7 @@ class CRMFeedsActivityProcessor extends FeedsProcessor {
   public function setTargetElement(FeedsSource $source, $target_activity, $target_element, $value) {
     switch ($target_element) {
       case 'created':
-        $target_activity->created = feeds_to_unixtime($value, REQUEST_TIME);
+        $target_activity->created = feeds_to_unixtime($value, \Drupal::time()->getRequestTime());
         break;
 
       case 'feeds_source':
@@ -295,12 +297,16 @@ class CRMFeedsActivityProcessor extends FeedsProcessor {
     foreach ($this->uniqueTargets($source, $result) as $target => $value) {
       switch ($target) {
         case 'activity_id':
-          $activity_id = db_query("SELECT activity_id FROM {crm_core_activity} WHERE activity_id = :activity_id", [':activity_id' => $value])->fetchField();
+          // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+          // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+          $activity_id = \Drupal::database()->query("SELECT activity_id FROM {crm_core_activity} WHERE activity_id = :activity_id", [':activity_id' => $value])->fetchField();
           break;
 
         case 'feeds_source':
           if ($id = feeds_get_importer_id($this->config['activity_type'])) {
-            $activity_id = db_query("SELECT fs.feed_activity_id FROM {crm_core_activity} c JOIN {feeds_source} fs ON c.activity_id = fs.feed_activity_id WHERE fs.id = :id AND fs.source = :source", [':id' => $id, ':source' => $value])->fetchField();
+            // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+            // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+            $activity_id = \Drupal::database()->query("SELECT fs.feed_activity_id FROM {crm_core_activity} c JOIN {feeds_source} fs ON c.activity_id = fs.feed_activity_id WHERE fs.id = :id AND fs.source = :source", [':id' => $id, ':source' => $value])->fetchField();
           }
           break;
       }
diff --git a/modules/crm_core_activity/src/ActivityInterface.php b/modules/crm_core_activity/src/ActivityInterface.php
index 05e55d6..b45c3f1 100644
--- a/modules/crm_core_activity/src/ActivityInterface.php
+++ b/modules/crm_core_activity/src/ActivityInterface.php
@@ -14,7 +14,7 @@ interface ActivityInterface extends ContentEntityInterface, EntityOwnerInterface
   /**
    * Add a participant to the activity.
    *
-   * @param \Drupal\crm_core_contact\ContactInterface $contact
+   * @param ContactInterface $contact
    *   The contact to add as a participant.
    *
    * @return $this
@@ -24,7 +24,7 @@ interface ActivityInterface extends ContentEntityInterface, EntityOwnerInterface
   /**
    * Check if participant exists in the activity.
    *
-   * @param \Drupal\crm_core_contact\ContactInterface $contact
+   * @param ContactInterface $contact
    *   The contact to check in activity participant.
    *
    * @return bool
diff --git a/modules/crm_core_activity/src/ActivityTypeInterface.php b/modules/crm_core_activity/src/ActivityTypeInterface.php
index dce1af6..a8ae07b 100644
--- a/modules/crm_core_activity/src/ActivityTypeInterface.php
+++ b/modules/crm_core_activity/src/ActivityTypeInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\crm_core_activity;
 
+use Drupal\Core\Plugin\DefaultSingleLazyPluginCollection;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityWithPluginCollectionInterface;
 
@@ -13,7 +14,7 @@ interface ActivityTypeInterface extends ConfigEntityInterface, EntityWithPluginC
   /**
    * Returns the plugin instance.
    *
-   * @return \Drupal\crm_core_activity\ActivityTypePluginInterface
+   * @return ActivityTypePluginInterface
    *   Instantiated plugin.
    */
   public function getPlugin();
@@ -41,7 +42,7 @@ interface ActivityTypeInterface extends ConfigEntityInterface, EntityWithPluginC
   /**
    * Returns lazy plugin collection.
    *
-   * @return \Drupal\Core\Plugin\DefaultSingleLazyPluginCollection
+   * @return DefaultSingleLazyPluginCollection
    *   The plugin collection.
    */
   public function getPluginCollection();
diff --git a/modules/crm_core_activity/src/ActivityTypePluginInterface.php b/modules/crm_core_activity/src/ActivityTypePluginInterface.php
index 0bdab37..eff9adf 100644
--- a/modules/crm_core_activity/src/ActivityTypePluginInterface.php
+++ b/modules/crm_core_activity/src/ActivityTypePluginInterface.php
@@ -13,7 +13,7 @@ interface ActivityTypePluginInterface extends ConfigurableInterface, DependentPl
   /**
    * Displays the contents of the label field on the activity entity.
    *
-   * @param \Drupal\crm_core_activity\ActivityInterface $entity
+   * @param ActivityInterface $entity
    *   The activity entity to build the label for.
    *
    * @return string
@@ -24,7 +24,7 @@ interface ActivityTypePluginInterface extends ConfigurableInterface, DependentPl
   /**
    * Returns visual representation of the activity in form of a render array.
    *
-   * @param \Drupal\crm_core_activity\ActivityInterface $entity
+   * @param ActivityInterface $entity
    *   The activity entity to build the label for.
    *
    * @return array
diff --git a/modules/crm_core_activity/src/ActivityTypePluginManager.php b/modules/crm_core_activity/src/ActivityTypePluginManager.php
index 3d5ce54..a262455 100644
--- a/modules/crm_core_activity/src/ActivityTypePluginManager.php
+++ b/modules/crm_core_activity/src/ActivityTypePluginManager.php
@@ -19,9 +19,9 @@ class ActivityTypePluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/modules/crm_core_activity/src/Annotation/ActivityTypePlugin.php b/modules/crm_core_activity/src/Annotation/ActivityTypePlugin.php
index bbeb7ac..6f045e0 100644
--- a/modules/crm_core_activity/src/Annotation/ActivityTypePlugin.php
+++ b/modules/crm_core_activity/src/Annotation/ActivityTypePlugin.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\crm_core_activity\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -21,7 +22,7 @@ class ActivityTypePlugin extends Plugin {
   /**
    * The human-readable name of the type.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/modules/crm_core_activity/src/Entity/ActivityType.php b/modules/crm_core_activity/src/Entity/ActivityType.php
index 2cb5f51..cb11198 100644
--- a/modules/crm_core_activity/src/Entity/ActivityType.php
+++ b/modules/crm_core_activity/src/Entity/ActivityType.php
@@ -97,7 +97,7 @@ class ActivityType extends ConfigEntityBundleBase implements ActivityTypeInterfa
   /**
    * Type lazy plugin collection.
    *
-   * @var \Drupal\Core\Plugin\DefaultSingleLazyPluginCollection
+   * @var DefaultSingleLazyPluginCollection
    */
   protected $pluginCollection;
 
diff --git a/modules/crm_core_activity/src/Form/ActivityTypeForm.php b/modules/crm_core_activity/src/Form/ActivityTypeForm.php
index 1b0965f..cea003b 100644
--- a/modules/crm_core_activity/src/Form/ActivityTypeForm.php
+++ b/modules/crm_core_activity/src/Form/ActivityTypeForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\crm_core_activity\Form;
 
+use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -19,7 +20,7 @@ class ActivityTypeForm extends EntityForm {
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
diff --git a/modules/crm_core_contact/crm_core_contact.module b/modules/crm_core_contact/crm_core_contact.module
index eb61eec..e42ded5 100644
--- a/modules/crm_core_contact/crm_core_contact.module
+++ b/modules/crm_core_contact/crm_core_contact.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\crm_core_contact\IndividualInterface;
+use Drupal\crm_core_contact\OrganizationInterface;
 /**
  * @file
  * Provides default CRM Core Contact entities and the ability to create more.
@@ -59,7 +62,7 @@ function template_preprocess_crm_core_organization(array &$variables) {
  */
 function crm_core_contact_common_template_preprocess(string $entity_id, array &$variables) {
   $variables['view_mode'] = $variables['elements']['#view_mode'];
-  /** @var \Drupal\Core\Entity\EntityInterface $entity */
+  /** @var EntityInterface $entity */
   $entity = $variables['elements']['#' . $entity_id];
   $variables['crm_core_contact'] = $entity;
 
@@ -99,7 +102,7 @@ function crm_core_contact_theme_suggestions_crm_core_organization(array $variabl
  *
  * @param string $entity_id
  *   Entity.
- * @param \Drupal\crm_core_contact\IndividualInterface|\Drupal\crm_core_contact\OrganizationInterface $entity
+ * @param IndividualInterface|OrganizationInterface $entity
  *   Entity.
  * @param string $view_mode
  *   View mode.
diff --git a/modules/crm_core_contact/legacy/CRMFeedsContactProcessor.inc b/modules/crm_core_contact/legacy/CRMFeedsContactProcessor.inc
index 27134b6..cd16a84 100644
--- a/modules/crm_core_contact/legacy/CRMFeedsContactProcessor.inc
+++ b/modules/crm_core_contact/legacy/CRMFeedsContactProcessor.inc
@@ -40,8 +40,8 @@ class CRMFeedsContactProcessor extends FeedsProcessor {
   protected function newEntity(FeedsSource $source) {
     $contact = new stdClass();
     $contact->type = $this->config['contact_type'];
-    $contact->changed = REQUEST_TIME;
-    $contact->created = REQUEST_TIME;
+    $contact->changed = \Drupal::time()->getRequestTime();
+    $contact->created = \Drupal::time()->getRequestTime();
     $contact->language = LANGUAGE_NONE;
     $contact->revision_log = t('Imported by feeds.');
     $contact->uid = $this->config['author'];
@@ -60,7 +60,9 @@ class CRMFeedsContactProcessor extends FeedsProcessor {
     }
     else {
       // We're replacing the existing contact. Only save the absolutely necessary.
-      $contact = db_query("SELECT created, contact_id, vid, type FROM {crm_core_contact} WHERE contact_id = :contact_id", [':contact_id' => $contact_id])->fetchObject();
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+      $contact = \Drupal::database()->query("SELECT created, contact_id, vid, type FROM {crm_core_contact} WHERE contact_id = :contact_id", [':contact_id' => $contact_id])->fetchObject();
       $contact->uid = $this->config['author'];
     }
     // Populate properties that are set by contact_object_prepare().
@@ -100,13 +102,13 @@ class CRMFeedsContactProcessor extends FeedsProcessor {
       return;
     }
     $count = $this->getLimit();
-    $contacts = db_query_range("SELECT c.contact_id FROM {crm_core_contact} c JOIN {feeds_item} fi ON fi.entity_type = 'crm_core_contact' AND c.contact_id = fi.entity_id WHERE fi.id = :id AND c.created < :created", 0, $count, [':id' => $this->id, ':created' => REQUEST_TIME - $time]);
+    $contacts = db_query_range("SELECT c.contact_id FROM {crm_core_contact} c JOIN {feeds_item} fi ON fi.entity_type = 'crm_core_contact' AND c.contact_id = fi.entity_id WHERE fi.id = :id AND c.created < :created", 0, $count, [':id' => $this->id, ':created' => \Drupal::time()->getRequestTime() - $time]);
     $contact_ids = [];
     foreach ($contacts as $contact) {
       $contact_ids[$contact->contact_id] = $contact->contact_id;
     }
     $this->entityDeleteMultiple($contact_ids);
-    if (db_query_range("SELECT 1 FROM {crm_core_contact} c JOIN {feeds_item} fi ON fi.entity_type = 'crm_core_contact' AND c.contact_id = fi.entity_id WHERE fi.id = :id AND c.created < :created", 0, 1, [':id' => $this->id, ':created' => REQUEST_TIME - $time])->fetchField()) {
+    if (db_query_range("SELECT 1 FROM {crm_core_contact} c JOIN {feeds_item} fi ON fi.entity_type = 'crm_core_contact' AND c.contact_id = fi.entity_id WHERE fi.id = :id AND c.created < :created", 0, 1, [':id' => $this->id, ':created' => \Drupal::time()->getRequestTime() - $time])->fetchField()) {
       return FEEDS_BATCH_ACTIVE;
     }
     return FEEDS_BATCH_COMPLETE;
@@ -146,7 +148,7 @@ class CRMFeedsContactProcessor extends FeedsProcessor {
       '#options' => $types,
       '#default_value' => $this->config['contact_type'],
     ];
-    $author = user_load($this->config['author']);
+    $author = \Drupal::service('entity_type.manager')->getStorage('user')->load($this->config['author']);
     $form['author'] = [
       '#type' => 'textfield',
       '#title' => t('Author'),
@@ -198,7 +200,7 @@ class CRMFeedsContactProcessor extends FeedsProcessor {
   public function setTargetElement(FeedsSource $source, $target_contact, $target_element, $value) {
     switch ($target_element) {
       case 'created':
-        $target_contact->created = feeds_to_unixtime($value, REQUEST_TIME);
+        $target_contact->created = feeds_to_unixtime($value, \Drupal::time()->getRequestTime());
         break;
 
       case 'feeds_source':
@@ -273,12 +275,16 @@ class CRMFeedsContactProcessor extends FeedsProcessor {
     foreach ($this->uniqueTargets($source, $result) as $target => $value) {
       switch ($target) {
         case 'contact_id':
-          $contact_id = db_query("SELECT contact_id FROM {crm_core_contact} WHERE contact_id = :contact_id", [':contact_id' => $value])->fetchField();
+          // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+          // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+          $contact_id = \Drupal::database()->query("SELECT contact_id FROM {crm_core_contact} WHERE contact_id = :contact_id", [':contact_id' => $value])->fetchField();
           break;
 
         case 'feeds_source':
           if ($id = feeds_get_importer_id($this->config['contact_type'])) {
-            $contact_id = db_query("SELECT fs.feed_contact_id FROM {crm_core_contact} c JOIN {feeds_source} fs ON c.contact_id = fs.feed_contact_id WHERE fs.id = :id AND fs.source = :source", [':id' => $id, ':source' => $value])->fetchField();
+            // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+            // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+            $contact_id = \Drupal::database()->query("SELECT fs.feed_contact_id FROM {crm_core_contact} c JOIN {feeds_source} fs ON c.contact_id = fs.feed_contact_id WHERE fs.id = :id AND fs.source = :source", [':id' => $id, ':source' => $value])->fetchField();
           }
           break;
       }
diff --git a/modules/crm_core_contact/src/Form/IndividualForm.php b/modules/crm_core_contact/src/Form/IndividualForm.php
index efb950b..08515df 100644
--- a/modules/crm_core_contact/src/Form/IndividualForm.php
+++ b/modules/crm_core_contact/src/Form/IndividualForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\crm_core_contact\Form;
 
+use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -14,7 +15,7 @@ class IndividualForm extends ContentEntityForm {
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
diff --git a/modules/crm_core_contact/src/Form/IndividualTypeForm.php b/modules/crm_core_contact/src/Form/IndividualTypeForm.php
index dd35d28..36cd428 100644
--- a/modules/crm_core_contact/src/Form/IndividualTypeForm.php
+++ b/modules/crm_core_contact/src/Form/IndividualTypeForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\crm_core_contact\Form;
 
+use Drupal\Core\Entity\EntityFieldManager;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -65,7 +66,7 @@ class IndividualTypeForm extends EntityForm {
 
     $options = [];
     if ($type) {
-      /** @var \Drupal\Core\Entity\EntityFieldManager $field_manager */
+      /** @var EntityFieldManager $field_manager */
       $field_manager = \Drupal::service('entity_field.manager');
       $instances = $field_manager->getFieldDefinitions('crm_core_individual', $type->id());
       foreach ($instances as $instance) {
diff --git a/modules/crm_core_contact/src/Form/OrganizationForm.php b/modules/crm_core_contact/src/Form/OrganizationForm.php
index e6a03c2..7f17433 100644
--- a/modules/crm_core_contact/src/Form/OrganizationForm.php
+++ b/modules/crm_core_contact/src/Form/OrganizationForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\crm_core_contact\Form;
 
+use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -18,7 +19,7 @@ class OrganizationForm extends ContentEntityForm {
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
diff --git a/modules/crm_core_contact/src/Form/OrganizationTypeForm.php b/modules/crm_core_contact/src/Form/OrganizationTypeForm.php
index 66f7174..60b3618 100644
--- a/modules/crm_core_contact/src/Form/OrganizationTypeForm.php
+++ b/modules/crm_core_contact/src/Form/OrganizationTypeForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\crm_core_contact\Form;
 
+use Drupal\Core\Entity\EntityFieldManager;
 use Drupal\Core\Entity\BundleEntityFormBase;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -69,7 +70,7 @@ class OrganizationTypeForm extends BundleEntityFormBase {
 
     $options = [];
     if ($type) {
-      /** @var \Drupal\Core\Entity\EntityFieldManager $field_manager */
+      /** @var EntityFieldManager $field_manager */
       $field_manager = \Drupal::service('entity_field.manager');
       $instances = $field_manager->getFieldDefinitions('crm_core_organization', $type->id());
       foreach ($instances as $instance) {
diff --git a/modules/crm_core_contact/src/IndividualListBuilder.php b/modules/crm_core_contact/src/IndividualListBuilder.php
index 05dd8f2..6e95d16 100644
--- a/modules/crm_core_contact/src/IndividualListBuilder.php
+++ b/modules/crm_core_contact/src/IndividualListBuilder.php
@@ -18,18 +18,18 @@ class IndividualListBuilder extends EntityListBuilder {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;
 
   /**
    * Constructs a new IndividualListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatter $date_formatter
+   * @param DateFormatter $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatter $date_formatter) {
diff --git a/modules/crm_core_contact/src/IndividualTypeAccessControlHandler.php b/modules/crm_core_contact/src/IndividualTypeAccessControlHandler.php
index f41fe80..8984246 100644
--- a/modules/crm_core_contact/src/IndividualTypeAccessControlHandler.php
+++ b/modules/crm_core_contact/src/IndividualTypeAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\crm_core_contact;
 
+use Drupal\crm_core_contact\Entity\IndividualType;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
@@ -16,8 +17,7 @@ class IndividualTypeAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\crm_core_contact\Entity\IndividualType $entity */
-
+    /** @var IndividualType $entity */
     // First check permission.
     if (parent::checkAccess($entity, $operation, $account)->isForbidden()) {
       return AccessResult::forbidden();
diff --git a/modules/crm_core_contact/src/OrganizationListBuilder.php b/modules/crm_core_contact/src/OrganizationListBuilder.php
index b203093..b750a91 100644
--- a/modules/crm_core_contact/src/OrganizationListBuilder.php
+++ b/modules/crm_core_contact/src/OrganizationListBuilder.php
@@ -24,18 +24,18 @@ class OrganizationListBuilder extends EntityListBuilder {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;
 
   /**
    * Constructs a new NodeListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatter $date_formatter
+   * @param DateFormatter $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatter $date_formatter) {
diff --git a/modules/crm_core_contact/src/OrganizationTypeAccessControlHandler.php b/modules/crm_core_contact/src/OrganizationTypeAccessControlHandler.php
index 71dd651..de868d2 100644
--- a/modules/crm_core_contact/src/OrganizationTypeAccessControlHandler.php
+++ b/modules/crm_core_contact/src/OrganizationTypeAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\crm_core_contact;
 
+use Drupal\crm_core_contact\Entity\OrganizationType;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
@@ -16,8 +17,7 @@ class OrganizationTypeAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\crm_core_contact\Entity\OrganizationType $entity */
-
+    /** @var OrganizationType $entity */
     // First check permission.
     if (parent::checkAccess($entity, $operation, $account)->isForbidden()) {
       return AccessResult::forbidden();
diff --git a/modules/crm_core_contact/src/Plugin/Action/JoinIntoHouseholdAction.php b/modules/crm_core_contact/src/Plugin/Action/JoinIntoHouseholdAction.php
index d65214c..5fbe677 100644
--- a/modules/crm_core_contact/src/Plugin/Action/JoinIntoHouseholdAction.php
+++ b/modules/crm_core_contact/src/Plugin/Action/JoinIntoHouseholdAction.php
@@ -32,14 +32,14 @@ class JoinIntoHouseholdAction extends ConfigurableActionBase implements Containe
   /**
    * The current user service.
    *
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    */
   protected $currentUser;
 
   /**
    * The entity form bulder service.
    *
-   * @var \Drupal\Core\Entity\EntityFormBuilder
+   * @var EntityFormBuilder
    */
   protected $entityFormBuilder;
 
@@ -52,9 +52,9 @@ class JoinIntoHouseholdAction extends ConfigurableActionBase implements Containe
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Session\AccountProxy $current_user
+   * @param AccountProxy $current_user
    *   The current user service.
-   * @param \Drupal\Core\Entity\EntityFormBuilder $entity_form_builder
+   * @param EntityFormBuilder $entity_form_builder
    *   The entity form builder service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, AccountProxy $current_user, EntityFormBuilder $entity_form_builder) {
diff --git a/modules/crm_core_contact/src/Plugin/Action/MergeContactsAction.php b/modules/crm_core_contact/src/Plugin/Action/MergeContactsAction.php
index d53aefe..cb55147 100644
--- a/modules/crm_core_contact/src/Plugin/Action/MergeContactsAction.php
+++ b/modules/crm_core_contact/src/Plugin/Action/MergeContactsAction.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\crm_core_contact\Plugin\Action;
 
+use Drupal\Core\Mail\MailManagerInterface;
 use Drupal\Core\Action\ConfigurableActionBase;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Access\AccessResult;
@@ -33,49 +34,49 @@ class MergeContactsAction extends ConfigurableActionBase implements ContainerFac
   /**
    * The path alias storage.
    *
-   * @var \Drupal\path_alias\PathAliasStorage
+   * @var PathAliasStorage
    */
   protected $pathAliasStorage;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Mail\MailManagerInterface
+   * @var MailManagerInterface
    */
   protected $moduleHandler;
 
   /**
    * The translation manager.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationManager
+   * @var TranslationManager
    */
   protected $translationManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;
 
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
@@ -88,19 +89,19 @@ class MergeContactsAction extends ConfigurableActionBase implements ContainerFac
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\path_alias\PathAliasStorage $path_alias_storage
+   * @param PathAliasStorage $path_alias_storage
    *   The path alias storage.
-   * @param \Drupal\Core\Extension\ModuleHandler $module_handler
+   * @param ModuleHandler $module_handler
    *   The module handler.
-   * @param \Drupal\Core\StringTranslation\TranslationManager $translation_manager
+   * @param TranslationManager $translation_manager
    *   The translation manager.
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
+   * @param EntityTypeManager $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManager $entity_field_manager
+   * @param EntityFieldManager $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Render\Renderer $renderer
+   * @param Renderer $renderer
    *   The renderer service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The Messenger service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, PathAliasStorage $path_alias_storage, ModuleHandler $module_handler, TranslationManager $translation_manager, EntityTypeManager $entity_type_manager, EntityFieldManager $entity_field_manager, Renderer $renderer, MessengerInterface $messenger) {
diff --git a/modules/crm_core_contact/src/Plugin/Action/SendEmailAction.php b/modules/crm_core_contact/src/Plugin/Action/SendEmailAction.php
index 412b9f6..5d6cbec 100644
--- a/modules/crm_core_contact/src/Plugin/Action/SendEmailAction.php
+++ b/modules/crm_core_contact/src/Plugin/Action/SendEmailAction.php
@@ -26,21 +26,21 @@ class SendEmailAction extends ConfigurableActionBase implements ContainerFactory
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
   /**
    * The mail manager.
    *
-   * @var \Drupal\Core\Mail\MailManagerInterface
+   * @var MailManagerInterface
    */
   protected $mailManager;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
@@ -53,11 +53,11 @@ class SendEmailAction extends ConfigurableActionBase implements ContainerFactory
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
-   * @param \Drupal\Core\Mail\MailManagerInterface $mail_manager
+   * @param MailManagerInterface $mail_manager
    *   The mail manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, Token $token, MailManagerInterface $mail_manager, LanguageManagerInterface $language_manager) {
diff --git a/modules/crm_core_match/src/Annotation/CrmCoreMatchEngine.php b/modules/crm_core_match/src/Annotation/CrmCoreMatchEngine.php
index 37ae5bc..8503ad3 100644
--- a/modules/crm_core_match/src/Annotation/CrmCoreMatchEngine.php
+++ b/modules/crm_core_match/src/Annotation/CrmCoreMatchEngine.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\crm_core_match\Annotation;
 
+use Drupal\Core\StringTranslation\TranslationWrapper;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -21,7 +22,7 @@ class CrmCoreMatchEngine extends Plugin {
   /**
    * The engines label.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationWrapper
+   * @var TranslationWrapper
    *
    * @ingroup plugin_translatable
    */
@@ -30,7 +31,7 @@ class CrmCoreMatchEngine extends Plugin {
   /**
    * The match engine summary.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationWrapper
+   * @var TranslationWrapper
    */
   protected $summary;
 
diff --git a/modules/crm_core_match/src/Controller/MatcherController.php b/modules/crm_core_match/src/Controller/MatcherController.php
index 1efbc01..865875c 100644
--- a/modules/crm_core_match/src/Controller/MatcherController.php
+++ b/modules/crm_core_match/src/Controller/MatcherController.php
@@ -13,7 +13,7 @@ class MatcherController extends ControllerBase {
   /**
    * Gets the edit matcher title.
    *
-   * @param \Drupal\crm_core_match\Matcher\MatcherConfigInterface $crm_core_match
+   * @param MatcherConfigInterface $crm_core_match
    *   The edited matcher.
    *
    * @return string
diff --git a/modules/crm_core_match/src/Entity/Matcher.php b/modules/crm_core_match/src/Entity/Matcher.php
index 8369f39..ef38bdd 100644
--- a/modules/crm_core_match/src/Entity/Matcher.php
+++ b/modules/crm_core_match/src/Entity/Matcher.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\crm_core_match\Entity;
 
+use Drupal\crm_core_match\Plugin\crm_core_match\engine\MatchEngineInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\crm_core_contact\ContactInterface;
@@ -72,7 +73,7 @@ class Matcher extends ConfigEntityBase implements MatcherConfigInterface {
   /**
    * The plugin instance.
    *
-   * @var \Drupal\crm_core_match\Plugin\crm_core_match\engine\MatchEngineInterface
+   * @var MatchEngineInterface
    */
   protected $plugin;
 
@@ -118,7 +119,7 @@ class Matcher extends ConfigEntityBase implements MatcherConfigInterface {
   /**
    * Finds matches for given contact.
    *
-   * @param \Drupal\crm_core_contact\ContactInterface $contact
+   * @param ContactInterface $contact
    *   A contact entity used to pass data for identifying a match.
    *
    * @return int[]
diff --git a/modules/crm_core_match/src/Form/MatcherForm.php b/modules/crm_core_match/src/Form/MatcherForm.php
index aaf0613..3758970 100644
--- a/modules/crm_core_match/src/Form/MatcherForm.php
+++ b/modules/crm_core_match/src/Form/MatcherForm.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\crm_core_match\Form;
 
+use Drupal\Core\Messenger\MessengerInterface;
+use Drupal\crm_core_match\Matcher\MatcherConfigInterface;
+use Drupal\crm_core_match\Plugin\crm_core_match\engine\MatchEngineInterface;
+use Drupal\crm_core_match\Entity\Matcher;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -14,7 +18,7 @@ class MatcherForm extends EntityForm {
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
@@ -31,7 +35,7 @@ class MatcherForm extends EntityForm {
   /**
    * The entity being used by this form.
    *
-   * @var \Drupal\crm_core_match\Matcher\MatcherConfigInterface
+   * @var MatcherConfigInterface
    */
   protected $entity;
 
@@ -161,9 +165,9 @@ class MatcherForm extends EntityForm {
   public function validateForm(array &$form, FormStateInterface $form_state) {
     parent::validateForm($form, $form_state);
 
-    /** @var \Drupal\crm_core_match\Matcher\MatcherConfigInterface $matcher */
+    /** @var MatcherConfigInterface $matcher */
     $matcher = $this->entity;
-    /** @var \Drupal\crm_core_match\Plugin\crm_core_match\engine\MatchEngineInterface $plugin */
+    /** @var MatchEngineInterface $plugin */
     if ($matcher->isNew()) {
       $plugin_id = $form_state->getValue('plugin_id');
       $plugin = crm_core_match_matcher_manager()->createInstance($plugin_id, $matcher->getConfiguration());
@@ -181,7 +185,7 @@ class MatcherForm extends EntityForm {
   public function submitForm(array &$form, FormStateInterface $form_state) {
     parent::submitForm($form, $form_state);
 
-    /** @var \Drupal\crm_core_match\Entity\Matcher $matcher */
+    /** @var Matcher $matcher */
     $matcher = $this->entity;
     $plugin = $matcher->getPlugin();
     $plugin->submitConfigurationForm($form, $form_state);
diff --git a/modules/crm_core_match/src/Matcher/MatcherAccessControlHandler.php b/modules/crm_core_match/src/Matcher/MatcherAccessControlHandler.php
index c4e0c68..9964eed 100644
--- a/modules/crm_core_match/src/Matcher/MatcherAccessControlHandler.php
+++ b/modules/crm_core_match/src/Matcher/MatcherAccessControlHandler.php
@@ -15,7 +15,7 @@ class MatcherAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\crm_core_match\Matcher\MatcherConfigInterface $entity */
+    /** @var MatcherConfigInterface $entity */
     return parent::checkAccess($entity, $operation, $account);
     // Deny delete access.
     // ->andIf(AccessResult::allowedIf($operation != 'delete'));.
diff --git a/modules/crm_core_match/src/Matcher/MatcherConfigInterface.php b/modules/crm_core_match/src/Matcher/MatcherConfigInterface.php
index 63893b2..b95ecae 100644
--- a/modules/crm_core_match/src/Matcher/MatcherConfigInterface.php
+++ b/modules/crm_core_match/src/Matcher/MatcherConfigInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\crm_core_match\Matcher;
 
+use Drupal\crm_core_match\Plugin\crm_core_match\engine\MatchEngineInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\crm_core_contact\ContactInterface;
 
@@ -13,7 +14,7 @@ interface MatcherConfigInterface extends ConfigEntityInterface {
   /**
    * Gets the matcher plugin.
    *
-   * @return \Drupal\crm_core_match\Plugin\crm_core_match\engine\MatchEngineInterface
+   * @return MatchEngineInterface
    *   Instantiated plugin.
    */
   public function getPlugin();
@@ -37,7 +38,7 @@ interface MatcherConfigInterface extends ConfigEntityInterface {
   /**
    * Finds matches for given contact.
    *
-   * @param \Drupal\crm_core_contact\ContactInterface $contact
+   * @param ContactInterface $contact
    *   A contact entity used to pass data for identifying a match.
    *
    * @return int[]
diff --git a/modules/crm_core_match/src/Matcher/MatcherListBuilder.php b/modules/crm_core_match/src/Matcher/MatcherListBuilder.php
index 63b47ed..82bfea7 100644
--- a/modules/crm_core_match/src/Matcher/MatcherListBuilder.php
+++ b/modules/crm_core_match/src/Matcher/MatcherListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\crm_core_match\Matcher;
 
+use Drupal\crm_core_match\Entity\Matcher;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 
@@ -28,7 +29,7 @@ class MatcherListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\crm_core_match\Entity\Matcher $entity */
+    /** @var Matcher $entity */
     $row['label'] = $entity->label();
     $row['description'] = $entity->getDescription();
     $row['plugin'] = $entity->getPluginTitle();
diff --git a/modules/crm_core_match/src/Plugin/crm_core_match/engine/DefaultMatchingEngine.php b/modules/crm_core_match/src/Plugin/crm_core_match/engine/DefaultMatchingEngine.php
index ab8b7ed..ce3af8b 100644
--- a/modules/crm_core_match/src/Plugin/crm_core_match/engine/DefaultMatchingEngine.php
+++ b/modules/crm_core_match/src/Plugin/crm_core_match/engine/DefaultMatchingEngine.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\crm_core_match\Plugin\crm_core_match\engine;
 
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -29,21 +30,21 @@ class DefaultMatchingEngine extends MatchEngineBase {
   /**
    * The match field plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $pluginManager;
 
   /**
    * The entity manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
@@ -253,7 +254,7 @@ class DefaultMatchingEngine extends MatchEngineBase {
   /**
    * Builds a row for an rule in the rule listing.
    *
-   * @param \Drupal\crm_core_match\Plugin\crm_core_match\field\FieldHandlerInterface $field
+   * @param FieldHandlerInterface $field
    *   The match field of this rule.
    * @param string $name
    *   The property name of this rule.
@@ -395,7 +396,7 @@ class DefaultMatchingEngine extends MatchEngineBase {
         continue;
       }
 
-      /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */
+      /** @var FieldDefinitionInterface $field_definition */
       $field_definition = $field_definitions[$field_name];
       $rules[$field_name] = [
         'label' => $field_definition->getLabel(),
diff --git a/modules/crm_core_match/src/Plugin/crm_core_match/engine/MatchEngineInterface.php b/modules/crm_core_match/src/Plugin/crm_core_match/engine/MatchEngineInterface.php
index 21eeb10..3386ded 100644
--- a/modules/crm_core_match/src/Plugin/crm_core_match/engine/MatchEngineInterface.php
+++ b/modules/crm_core_match/src/Plugin/crm_core_match/engine/MatchEngineInterface.php
@@ -18,7 +18,7 @@ interface MatchEngineInterface extends PluginInspectionInterface, PluginFormInte
   /**
    * Finds matches for given contact.
    *
-   * @param \Drupal\crm_core_contact\ContactInterface $contact
+   * @param ContactInterface $contact
    *   A contact entity used to pass data for identifying a match.
    *
    * @return int[]
diff --git a/modules/crm_core_match/src/Plugin/crm_core_match/field/FieldHandlerBase.php b/modules/crm_core_match/src/Plugin/crm_core_match/field/FieldHandlerBase.php
index b95da26..70cc3c6 100644
--- a/modules/crm_core_match/src/Plugin/crm_core_match/field/FieldHandlerBase.php
+++ b/modules/crm_core_match/src/Plugin/crm_core_match/field/FieldHandlerBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\crm_core_match\Plugin\crm_core_match\field;
 
+use Drupal\Core\Entity\EntityTypeManager;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -47,23 +48,23 @@ abstract class FieldHandlerBase implements FieldHandlerInterface, ContainerFacto
   /**
    * The field.
    *
-   * @var \Drupal\Core\Field\FieldDefinitionInterface
+   * @var FieldDefinitionInterface
    */
   protected $field;
 
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
   /**
    * Constructs an plugin instance.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field
+   * @param FieldDefinitionInterface $field
    *   Field definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity Type Manager.
    * @param array $configuration
    *   Configuration.
diff --git a/modules/crm_core_match/src/Plugin/crm_core_match/field/FieldHandlerInterface.php b/modules/crm_core_match/src/Plugin/crm_core_match/field/FieldHandlerInterface.php
index f23982d..00db403 100644
--- a/modules/crm_core_match/src/Plugin/crm_core_match/field/FieldHandlerInterface.php
+++ b/modules/crm_core_match/src/Plugin/crm_core_match/field/FieldHandlerInterface.php
@@ -124,7 +124,7 @@ interface FieldHandlerInterface {
   /**
    * Executes the match query.
    *
-   * @param \Drupal\crm_core_contact\ContactInterface $contact
+   * @param ContactInterface $contact
    *   The contact entity to find matches for.
    * @param string $property
    *   The name of the property.
diff --git a/modules/crm_core_match/tests/src/Functional/DefaultMatchingEngineUITest.php b/modules/crm_core_match/tests/src/Functional/DefaultMatchingEngineUITest.php
index 5b131ab..b88d760 100644
--- a/modules/crm_core_match/tests/src/Functional/DefaultMatchingEngineUITest.php
+++ b/modules/crm_core_match/tests/src/Functional/DefaultMatchingEngineUITest.php
@@ -33,7 +33,7 @@ class DefaultMatchingEngineUITest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     IndividualType::create([
@@ -61,14 +61,26 @@ class DefaultMatchingEngineUITest extends BrowserTestBase {
     // Test Organization matcher form.
     $this->drupalGet('admin/config/crm-core/match/organization');
 
-    $this->assertText('Field Matching');
-    $this->assertText('Unsupported Fields');
-    $this->assertText('A given field is unsupported when there is no field match handler for the field type it belongs to. In order to make it supported a handler plugin should be created for it.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Field Matching');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Unsupported Fields');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('A given field is unsupported when there is no field match handler for the field type it belongs to. In order to make it supported a handler plugin should be created for it.');
     // There is checkbox for title property of the name field.
-    $this->assertNoFieldChecked('edit-configuration-rules-nametitle-status');
+    $this->assertSession()->checkboxNotChecked('edit-configuration-rules-nametitle-status');
     // There is title property operator for the name field.
-    $this->assertFieldByName('configuration[rules][name:title][operator]');
-    $this->assertText('ID');
+    $this->assertSession()->fieldExists('configuration[rules][name:title][operator]');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('ID');
     $this->assertSession()->fieldNotExists('edit-configuration-rules-idvalue-status');
     $this->assertSession()->fieldNotExists('edit-configuration-rules-idvalue-operator');
 
@@ -82,17 +94,17 @@ class DefaultMatchingEngineUITest extends BrowserTestBase {
       'configuration[rules][name:family][options]' => 'Smith',
       'configuration[rules][name:family][score]' => 1,
     ];
-    $this->drupalPostForm(NULL, $configuration, 'Save');
+    $this->submitForm($configuration, 'Save');
 
     $this->drupalGet('admin/config/crm-core/match');
     $this->clickLink('Edit', 2);
 
-    $this->assertFieldChecked('edit-configuration-rules-namegiven-status');
+    $this->assertSession()->checkboxChecked('edit-configuration-rules-namegiven-status');
     $this->assertSession()->fieldValueEquals('edit-configuration-rules-namegiven-operator', 'CONTAINS');
     $this->assertSession()->fieldValueEquals('edit-configuration-rules-namegiven-options', 'John');
     $this->assertSession()->fieldValueEquals('edit-configuration-rules-namegiven-score', 1);
 
-    $this->assertFieldChecked('edit-configuration-rules-namefamily-status');
+    $this->assertSession()->checkboxChecked('edit-configuration-rules-namefamily-status');
     $this->assertSession()->fieldValueEquals('edit-configuration-rules-namefamily-operator', 'CONTAINS');
     $this->assertSession()->fieldValueEquals('edit-configuration-rules-namefamily-options', 'Smith');
     $this->assertSession()->fieldValueEquals('edit-configuration-rules-namefamily-score', 1);
diff --git a/modules/crm_core_relationship/crm_core_relationship.install b/modules/crm_core_relationship/crm_core_relationship.install
index 622b9bc..91dece6 100644
--- a/modules/crm_core_relationship/crm_core_relationship.install
+++ b/modules/crm_core_relationship/crm_core_relationship.install
@@ -51,7 +51,9 @@ function crm_core_relationship_uninstall() {
 
   // Get all the relationship_types (bundles), find all fields
   // delete them.
-  $query = db_select('relation_bundles', 'rb')
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  $query = \Drupal::database()->select('relation_bundles', 'rb')
     ->fields('rb', ['relation_type'])
     ->condition('rb.entity_type', 'crm_core_contact')
     ->distinct()
@@ -63,7 +65,9 @@ function crm_core_relationship_uninstall() {
 
   foreach ($relationship_type as $type) {
     // Look into the database for each type.
-    $relationship_query = db_select('relation', 'r')
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    $relationship_query = \Drupal::database()->select('relation', 'r')
       ->fields('r', ['relation_id'])
       ->condition('r.relation_type', $type)
       ->execute();
diff --git a/modules/crm_core_relationship/templates/relationship.tpl.php b/modules/crm_core_relationship/templates/relationship.tpl.php
index f3da642..d450280 100644
--- a/modules/crm_core_relationship/templates/relationship.tpl.php
+++ b/modules/crm_core_relationship/templates/relationship.tpl.php
@@ -18,7 +18,7 @@
 <div class="<?php print $classes; ?> clearfix"<?php print $attributes; ?>>
   <div class="content"<?php print $content_attributes; ?>>
     <?php
-      print render($content);
+      print \Drupal::service('renderer')->render($content);
     ?>
   </div>
 </div>
diff --git a/modules/crm_core_relationship_ui/crm_core_relationship_ui.admin.inc b/modules/crm_core_relationship_ui/crm_core_relationship_ui.admin.inc
index 5af240a..16b39cf 100644
--- a/modules/crm_core_relationship_ui/crm_core_relationship_ui.admin.inc
+++ b/modules/crm_core_relationship_ui/crm_core_relationship_ui.admin.inc
@@ -247,7 +247,7 @@ function crm_core_relationship_ui_type_form_submit($form, &$form_state) {
   RelationType::create($record)->save();
   $form_state['redirect'] = 'admin/structure/crm-core/relationship-types';
 
-  drupal_set_message(t('The relationship type has been saved.'));
+  \Drupal::messenger()->addStatus(t('The relationship type has been saved.'));
 }
 
 /**
@@ -290,7 +290,7 @@ function crm_core_relationship_ui_type_delete_confirm_submit($form, &$form_state
   RelationType::load($form_state['values']['relation_type'])->delete();
 
   $t_args = ['%label' => $form_state['values']['label']];
-  drupal_set_message(t('The %label relationship type has been deleted.', $t_args));
+  \Drupal::messenger()->addStatus(t('The %label relationship type has been deleted.', $t_args));
   watchdog('relation', 'Deleted the %label relationship type.', $t_args, WATCHDOG_NOTICE);
 
   // TODO: relation_types_rebuild() ?;.
diff --git a/modules/crm_core_relationship_ui/crm_core_relationship_ui.module b/modules/crm_core_relationship_ui/crm_core_relationship_ui.module
index d0a28a8..2836cc6 100644
--- a/modules/crm_core_relationship_ui/crm_core_relationship_ui.module
+++ b/modules/crm_core_relationship_ui/crm_core_relationship_ui.module
@@ -152,7 +152,7 @@ function crm_core_relationship_ui_menu() {
 function crm_core_relationship_ui_menu_alter(&$items) {
   // We are simply hiding crm relationships from other types of relations.
   $items['admin/structure/relation']['page callback'] = 'crm_core_relationship_ui_types_overview';
-  $items['admin/structure/relation']['file path'] = drupal_get_path('module', 'crm_core_relationship_ui');
+  $items['admin/structure/relation']['file path'] = \Drupal::service('extension.list.module')->getPath('crm_core_relationship_ui');
   $items['admin/structure/relation']['file'] = 'crm_core_relationship_ui.admin.inc';
   $items['admin/structure/relation']['page arguments'] = [1];
 }
@@ -331,7 +331,7 @@ function crm_core_relationship_ui_field_formatter_view($entity_type, $entity, $f
 function crm_core_relationship_ui_views_api() {
   return [
     'api' => 3,
-    'path' => drupal_get_path('module', 'crm_core_relationship_ui'),
+    'path' => \Drupal::service('extension.list.module')->getPath('crm_core_relationship_ui'),
   ];
 }
 
diff --git a/modules/crm_core_relationship_ui/crm_core_relationship_ui.pages.inc b/modules/crm_core_relationship_ui/crm_core_relationship_ui.pages.inc
index 2dbefd9..e850a5f 100644
--- a/modules/crm_core_relationship_ui/crm_core_relationship_ui.pages.inc
+++ b/modules/crm_core_relationship_ui/crm_core_relationship_ui.pages.inc
@@ -69,7 +69,7 @@ function crm_core_relation_entity_ui_get_form_wrapper($contact, $type, $reverse)
  */
 function crm_core_relationship_form($form, &$form_state, $relation) {
   // Ensure this include file is loaded when the form is rebuilt from the cache.
-  $form_state['build_info']['file'] = drupal_get_path('module', 'crm_core_ui') . '/pages/contact_activity.pages.inc';
+  $form_state['build_info']['file'] = \Drupal::service('extension.list.module')->getPath('crm_core_ui') . '/pages/contact_activity.pages.inc';
   $form_state['entity_type'] = 'relation';
   $form_state['relation'] = $form_state['crm_core_relationship'];
   unset($form_state['crm_core_relationship']);
@@ -400,7 +400,7 @@ function crm_core_relationship_ui_add_relationship_autocomplete($crm_core_contac
   $query->addMetaData('match', $string)
     ->addTag(variable_get('crm_core_contact_search_query_tag', 'crm_core_contact_search'));
   $result = $query->execute();
-  $contacts = entity_load('crm_core_contact', array_keys($result['crm_core_contact']));
+  $contacts = \Drupal::service('entity_type.manager')->getStorage('crm_core_contact')->load(array_keys($result['crm_core_contact']));
   foreach ($contacts as $contact) {
     $crm_core_contact_title = $contact->label();
     $matches[$crm_core_contact_title . " [cid:$contact->contact_id]"] = $crm_core_contact_title;
@@ -422,7 +422,7 @@ function _crm_core_relationship_ui_get_contact_from_autocomplete_field_value($st
   if (!array_key_exists(1, $matches) || !is_numeric($matches[1])) {
     return FALSE;
   }
-  $contacts = entity_load('crm_core_contact', [$matches[1]]);
+  $contacts = \Drupal::service('entity_type.manager')->getStorage('crm_core_contact')->load([$matches[1]]);
   if (empty($contacts)) {
     return FALSE;
   }
@@ -437,7 +437,7 @@ function crm_core_relationship_ui_toggle_relationship_status($relationship_id, $
   $relation = Relation::load($relationship_id);
   $relation->crm_core_relationship_status[LANGUAGE_NONE][0]['value'] = $status ? 1 : 0;
   entity_save('relation', $relation);
-  drupal_set_message(t('Relationship status was successfully changed.'));
+  \Drupal::messenger()->addStatus(t('Relationship status was successfully changed.'));
   $path = drupal_get_destination();
   drupal_goto($path);
 }
diff --git a/modules/crm_core_user_sync/src/Controller/RuleStatusController.php b/modules/crm_core_user_sync/src/Controller/RuleStatusController.php
index a0e459a..8109a06 100644
--- a/modules/crm_core_user_sync/src/Controller/RuleStatusController.php
+++ b/modules/crm_core_user_sync/src/Controller/RuleStatusController.php
@@ -15,16 +15,16 @@ class RuleStatusController extends ControllerBase {
   /**
    * Current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * Constructs the controller object.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Current request.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Config factory.
    */
   public function __construct(Request $request, ConfigFactoryInterface $configFactory) {
diff --git a/modules/crm_core_user_sync/src/CrmCoreUserSyncRelationInterface.php b/modules/crm_core_user_sync/src/CrmCoreUserSyncRelationInterface.php
index 8a2c935..1b180c4 100644
--- a/modules/crm_core_user_sync/src/CrmCoreUserSyncRelationInterface.php
+++ b/modules/crm_core_user_sync/src/CrmCoreUserSyncRelationInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\crm_core_user_sync;
 
+use Drupal\crm_core_contact\ContactInterface;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\crm_core_contact\IndividualInterface;
 use Drupal\user\UserInterface;
 
@@ -45,17 +47,17 @@ interface CrmCoreUserSyncRelationInterface {
   /**
    * Synchronizes user and contact.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   Account to be synchronized. Programmatically created accounts can
    *   override default behavior by setting
    *   $account->crm_core_no_auto_sync = TRUE.
-   * @param \Drupal\crm_core_contact\IndividualInterface $individual
+   * @param IndividualInterface $individual
    *   Contact to be associated with $account.
    *
-   * @return \Drupal\crm_core_contact\ContactInterface
+   * @return ContactInterface
    *   A contact object.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function relate(UserInterface $account, IndividualInterface $individual = NULL);
 
diff --git a/modules/crm_core_user_sync/src/CrmCoreUserSyncRelationRules.php b/modules/crm_core_user_sync/src/CrmCoreUserSyncRelationRules.php
index f7648d6..ee362ed 100644
--- a/modules/crm_core_user_sync/src/CrmCoreUserSyncRelationRules.php
+++ b/modules/crm_core_user_sync/src/CrmCoreUserSyncRelationRules.php
@@ -14,7 +14,7 @@ class CrmCoreUserSyncRelationRules {
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -35,7 +35,7 @@ class CrmCoreUserSyncRelationRules {
   /**
    * Constructs a CrmCoreUserSyncRelationRules object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    * @param string $configName
    *   Name of the configuration object that stores rules.
@@ -78,9 +78,9 @@ class CrmCoreUserSyncRelationRules {
   /**
    * Checks if provided contact can be linked to this account.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   User  account to check.
-   * @param \Drupal\crm_core_contact\IndividualInterface $contact
+   * @param IndividualInterface $contact
    *   Contact record to check.
    *
    * @return bool
@@ -93,7 +93,7 @@ class CrmCoreUserSyncRelationRules {
   /**
    * Get contact type resolved from configured synchronization rules.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   User account to check.
    *
    * @return string|false
diff --git a/modules/crm_core_user_sync/src/EventSubscriber/RequestSubscriber.php b/modules/crm_core_user_sync/src/EventSubscriber/RequestSubscriber.php
index d08353b..0a1846f 100644
--- a/modules/crm_core_user_sync/src/EventSubscriber/RequestSubscriber.php
+++ b/modules/crm_core_user_sync/src/EventSubscriber/RequestSubscriber.php
@@ -2,12 +2,12 @@
 
 namespace Drupal\crm_core_user_sync\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\crm_core_user_sync\CrmCoreUserSyncRelationInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -18,41 +18,41 @@ class RequestSubscriber implements EventSubscriberInterface {
   /**
    * Current logged in user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Relation service.
    *
-   * @var \Drupal\crm_core_user_sync\CrmCoreUserSyncRelationInterface
+   * @var CrmCoreUserSyncRelationInterface
    */
   protected $relationService;
 
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs event subscriber.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   Current logged in user.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\crm_core_user_sync\CrmCoreUserSyncRelationInterface $relation_service
+   * @param CrmCoreUserSyncRelationInterface $relation_service
    *   The relation service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
    */
   public function __construct(AccountProxyInterface $current_user, ConfigFactoryInterface $config_factory, CrmCoreUserSyncRelationInterface $relation_service, EntityTypeManagerInterface $entityTypeManager) {
@@ -65,10 +65,10 @@ class RequestSubscriber implements EventSubscriberInterface {
   /**
    * Kernel request event handler.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   Response event.
    */
-  public function onKernelRequest(GetResponseEvent $event) {
+  public function onKernelRequest(RequestEvent $event) {
     if ($this->currentUser->isAuthenticated()) {
       $config = $this->configFactory->get('crm_core_user_sync.settings');
       if ($config->get('contact_load')) {
diff --git a/modules/crm_core_user_sync/src/Plugin/Validation/Constraint/UniqueReferenceConstraintValidator.php b/modules/crm_core_user_sync/src/Plugin/Validation/Constraint/UniqueReferenceConstraintValidator.php
index c22ddfa..210bfbe 100644
--- a/modules/crm_core_user_sync/src/Plugin/Validation/Constraint/UniqueReferenceConstraintValidator.php
+++ b/modules/crm_core_user_sync/src/Plugin/Validation/Constraint/UniqueReferenceConstraintValidator.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\crm_core_user_sync\Plugin\Validation\Constraint;
 
+use Drupal\Core\Entity\EntityInterface;
 use Symfony\Component\Validator\Constraint;
 use Symfony\Component\Validator\ConstraintValidator;
 
@@ -18,7 +19,7 @@ class UniqueReferenceConstraintValidator extends ConstraintValidator {
       return;
     }
     $field_name = $items->getFieldDefinition()->getName();
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $items->getEntity();
     $entity_type_id = $entity->getEntityTypeId();
     $id_key = $entity->getEntityType()->getKey('id');
diff --git a/modules/crm_core_user_sync/src/Plugin/migrate/process/RelationLookup.php b/modules/crm_core_user_sync/src/Plugin/migrate/process/RelationLookup.php
index 2f16fa8..05e24ed 100644
--- a/modules/crm_core_user_sync/src/Plugin/migrate/process/RelationLookup.php
+++ b/modules/crm_core_user_sync/src/Plugin/migrate/process/RelationLookup.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\crm_core_user_sync\Plugin\migrate\process;
 
+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\crm_core_user_sync\CrmCoreUserSyncRelationInterface;
 use Drupal\migrate\Plugin\MigrationInterface;
@@ -33,28 +35,28 @@ class RelationLookup extends ProcessPluginBase implements ContainerFactoryPlugin
   /**
    * Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
   /**
    * The migration.
    *
-   * @var \Drupal\migrate\Plugin\MigrationInterface
+   * @var MigrationInterface
    */
   protected $migration;
 
   /**
    * The selection plugin.
    *
-   * @var \Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManagerInterface
+   * @var SelectionPluginManagerInterface
    */
   protected $selectionPluginManager;
 
   /**
    * User Sync Relation.
    *
-   * @var \Drupal\crm_core_user_sync\CrmCoreUserSyncRelationInterface
+   * @var CrmCoreUserSyncRelationInterface
    */
   protected $crmCoreUserSyncRelation;
 
diff --git a/modules/crm_core_user_sync/src/RelationInterface.php b/modules/crm_core_user_sync/src/RelationInterface.php
index 5d819d5..768fd88 100644
--- a/modules/crm_core_user_sync/src/RelationInterface.php
+++ b/modules/crm_core_user_sync/src/RelationInterface.php
@@ -14,7 +14,7 @@ interface RelationInterface extends ContentEntityInterface {
   /**
    * Returns the relation user entity.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The relation user entity.
    */
   public function getUser();
@@ -22,7 +22,7 @@ interface RelationInterface extends ContentEntityInterface {
   /**
    * Sets the relation user entity.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The relation user entity.
    *
    * @return $this
@@ -50,7 +50,7 @@ interface RelationInterface extends ContentEntityInterface {
   /**
    * Returns the relation individual entity.
    *
-   * @return \Drupal\crm_core_contact\IndividualInterface
+   * @return IndividualInterface
    *   The relation individual entity.
    */
   public function getIndividual();
@@ -58,7 +58,7 @@ interface RelationInterface extends ContentEntityInterface {
   /**
    * Sets the relation individual entity.
    *
-   * @param \Drupal\crm_core_contact\IndividualInterface $individual
+   * @param IndividualInterface $individual
    *   The relation individual entity.
    *
    * @return $this
diff --git a/modules/crm_core_user_sync/src/RelationListBuilder.php b/modules/crm_core_user_sync/src/RelationListBuilder.php
index 1d10a3d..ddbc61d 100644
--- a/modules/crm_core_user_sync/src/RelationListBuilder.php
+++ b/modules/crm_core_user_sync/src/RelationListBuilder.php
@@ -18,27 +18,27 @@ class RelationListBuilder extends EntityListBuilder {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;
 
   /**
    * Constructs a new RelationListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
diff --git a/modules/crm_core_user_sync/tests/src/Kernel/RelationEntityTest.php b/modules/crm_core_user_sync/tests/src/Kernel/RelationEntityTest.php
index f94e508..b800446 100644
--- a/modules/crm_core_user_sync/tests/src/Kernel/RelationEntityTest.php
+++ b/modules/crm_core_user_sync/tests/src/Kernel/RelationEntityTest.php
@@ -26,7 +26,7 @@ class RelationEntityTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('crm_core_user_sync_relation');
   }
diff --git a/modules/crm_core_user_sync/tests/src/Kernel/SettingsFormTest.php b/modules/crm_core_user_sync/tests/src/Kernel/SettingsFormTest.php
index 7b172ca..3b34519 100644
--- a/modules/crm_core_user_sync/tests/src/Kernel/SettingsFormTest.php
+++ b/modules/crm_core_user_sync/tests/src/Kernel/SettingsFormTest.php
@@ -26,7 +26,7 @@ class SettingsFormTest extends ConfigFormTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig('crm_core_user_sync');
     $this->form = SettingsForm::create($this->container);
diff --git a/modules/crm_core_user_sync/tests/src/Unit/CrmCoreUserSyncRelationRulesTest.php b/modules/crm_core_user_sync/tests/src/Unit/CrmCoreUserSyncRelationRulesTest.php
index 98390bf..c6b3958 100644
--- a/modules/crm_core_user_sync/tests/src/Unit/CrmCoreUserSyncRelationRulesTest.php
+++ b/modules/crm_core_user_sync/tests/src/Unit/CrmCoreUserSyncRelationRulesTest.php
@@ -21,7 +21,7 @@ class CrmCoreUserSyncRelationRulesTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $rules = [];
@@ -39,9 +39,7 @@ class CrmCoreUserSyncRelationRulesTest extends UnitTestCase {
       'weight' => 10,
     ];
 
-    $config = $this->getMockBuilder(ImmutableConfig::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $config = $this->createMock(ImmutableConfig::class);
     $config
       ->expects($this->once())
       ->method('get')
diff --git a/modules/crm_core_user_sync/tests/src/Unit/RequestSubscriberTest.php b/modules/crm_core_user_sync/tests/src/Unit/RequestSubscriberTest.php
index 83e7761..142697c 100644
--- a/modules/crm_core_user_sync/tests/src/Unit/RequestSubscriberTest.php
+++ b/modules/crm_core_user_sync/tests/src/Unit/RequestSubscriberTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\crm_core_user_sync\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -13,7 +15,6 @@ use Drupal\crm_core_user_sync\CrmCoreUserSyncRelationInterface;
 use Drupal\crm_core_user_sync\EventSubscriber\RequestSubscriber;
 use Drupal\Tests\UnitTestCase;
 use Symfony\Component\HttpFoundation\Request;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\HttpKernelInterface;
 
 /**
@@ -23,6 +24,7 @@ use Symfony\Component\HttpKernel\HttpKernelInterface;
  */
 class RequestSubscriberTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Tests nothing happens for Anonymous.
    */
@@ -48,7 +50,7 @@ class RequestSubscriberTest extends UnitTestCase {
     $request = Request::create('/', 'GET');
 
     $subscriber = new RequestSubscriber($current_user, $configFactory, $relationService, $entityTypeManager);
-    $event = new GetResponseEvent($kernel->reveal(), $request, HttpKernelInterface::MASTER_REQUEST);
+    $event = new RequestEvent($kernel->reveal(), $request, HttpKernelInterface::MASTER_REQUEST);
     $subscriber->onKernelRequest($event);
     // Nothing to assert as we should exit immediately. Current user expectation
     // will fail the test if something...
@@ -67,9 +69,7 @@ class RequestSubscriberTest extends UnitTestCase {
       ->method('id')
       ->willReturn('101');
 
-    $config = $this->getMockBuilder(ImmutableConfig::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $config = $this->createMock(ImmutableConfig::class);
     $config
       ->expects($this->once())
       ->method('get')
@@ -99,7 +99,7 @@ class RequestSubscriberTest extends UnitTestCase {
     $request = Request::create('/', 'GET');
 
     $subscriber = new RequestSubscriber($current_user, $configFactory, $relationService, $entityTypeManager);
-    $event = new GetResponseEvent($kernel->reveal(), $request, HttpKernelInterface::MASTER_REQUEST);
+    $event = new RequestEvent($kernel->reveal(), $request, HttpKernelInterface::MASTER_REQUEST);
     $subscriber->onKernelRequest($event);
     // Nothing to assert. Entity type manager expectations will the test.
   }
@@ -128,9 +128,7 @@ class RequestSubscriberTest extends UnitTestCase {
       ->method('setAccount')
       ->willReturnReference($account);
 
-    $config = $this->getMockBuilder(ImmutableConfig::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $config = $this->createMock(ImmutableConfig::class);
     $config
       ->expects($this->once())
       ->method('get')
@@ -172,7 +170,7 @@ class RequestSubscriberTest extends UnitTestCase {
     $request = Request::create('/', 'GET');
 
     $subscriber = new RequestSubscriber($current_user, $configFactory, $relationService, $entityTypeManager);
-    $event = new GetResponseEvent($kernel->reveal(), $request, HttpKernelInterface::MASTER_REQUEST);
+    $event = new RequestEvent($kernel->reveal(), $request, HttpKernelInterface::MASTER_REQUEST);
     $subscriber->onKernelRequest($event);
     $this->assertEquals($individual, $account->crm_core['contact'], 'Related contact was loaded');
   }
diff --git a/src/Access/CRMCoreAccess.php b/src/Access/CRMCoreAccess.php
index 1c81cb4..1755732 100644
--- a/src/Access/CRMCoreAccess.php
+++ b/src/Access/CRMCoreAccess.php
@@ -21,23 +21,23 @@ class CRMCoreAccess implements RoutingAccessInterface, ContainerInjectionInterfa
   /**
    * The menu link tree manager.
    *
-   * @var \Drupal\Core\Menu\MenuLinkTreeInterface
+   * @var MenuLinkTreeInterface
    */
   protected $menuTree;
 
   /**
    * The access manager.
    *
-   * @var \Drupal\Core\Access\AccessManagerInterface
+   * @var AccessManagerInterface
    */
   protected $accessManager;
 
   /**
    * CRMCoreAccess constructor.
    *
-   * @param \Drupal\Core\Menu\MenuLinkTreeInterface $menu_tree
+   * @param MenuLinkTreeInterface $menu_tree
    *   The menu link tree manager.
-   * @param \Drupal\Core\Access\AccessManagerInterface $access_manager
+   * @param AccessManagerInterface $access_manager
    *   The access manager.
    */
   public function __construct(MenuLinkTreeInterface $menu_tree, AccessManagerInterface $access_manager) {
@@ -58,12 +58,12 @@ class CRMCoreAccess implements RoutingAccessInterface, ContainerInjectionInterfa
   /**
    * Checks access for CRM Core overview.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check against.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account being checked.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   The access result.
    */
   public function access(Route $route, AccountInterface $account) {
diff --git a/src/CRMCorePermissions.php b/src/CRMCorePermissions.php
index 98acebf..89775fb 100644
--- a/src/CRMCorePermissions.php
+++ b/src/CRMCorePermissions.php
@@ -115,7 +115,7 @@ class CRMCorePermissions {
   /**
    * Get labels for permissions.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_info
+   * @param EntityTypeInterface $entity_info
    *   Entity info.
    *
    * @return array
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index 56cb852..9597e55 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -16,16 +16,16 @@ class SettingsForm extends ConfigFormBase {
   /**
    * Theme Handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   Theme manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ThemeHandlerInterface $theme_handler) {
diff --git a/tests/src/Kernel/SettingsFormTest.php b/tests/src/Kernel/SettingsFormTest.php
index 183ad0b..0c91a65 100644
--- a/tests/src/Kernel/SettingsFormTest.php
+++ b/tests/src/Kernel/SettingsFormTest.php
@@ -20,7 +20,7 @@ class SettingsFormTest extends ConfigFormTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->container->get('theme_installer')->install(['claro']);
     $this->form = SettingsForm::create($this->container);
