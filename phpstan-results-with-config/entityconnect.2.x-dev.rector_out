modules/contrib/entityconnect/entityconnect.api.php
modules/contrib/entityconnect/entityconnect.install
modules/contrib/entityconnect/entityconnect.module
modules/contrib/entityconnect/src/Access/CustomAccessCheck.php
modules/contrib/entityconnect/src/Controller/EntityconnectController.php
modules/contrib/entityconnect/src/Element/EntityconnectSubmit.php
modules/contrib/entityconnect/src/EntityconnectCache.php
modules/contrib/entityconnect/src/EntityconnectFormUtils.php
modules/contrib/entityconnect/src/EntityconnectNestedArray.php
modules/contrib/entityconnect/src/EntityconnectWidgetProcessor.php
modules/contrib/entityconnect/src/Form/AdministrationForm.php
modules/contrib/entityconnect/templates/entityconnect.theme.inc
modules/contrib/entityconnect/tests/src/Functional/EntityconnectAddTest.php
modules/contrib/entityconnect/tests/src/Functional/EntityconnectAdminTest.php
modules/contrib/entityconnect/tests/src/Functional/EntityconnectEditTest.php
modules/contrib/entityconnect/tests/src/Functional/EntityconnectTestBase.php

12 files with changes
=====================

1) modules/contrib/entityconnect/tests/src/Functional/EntityconnectTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entityconnect\Functional;

+use Drupal\user\UserInterface;
+use Drupal\node\Entity\NodeType;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   /**
    * User with permission to administer entityconnect.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * User with permission to use entityconnect buttons.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $ecUser;

@@ @@
   /**
    * The node type object to test with.
    *
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   protected $testContentType;

@@ @@
   /**
    * The test reference field.
    *
-   * @var \Drupal\field\Entity\FieldConfig
+   * @var FieldConfig
    */
   protected $testRefField;

@@ @@
   /**
    * {@inheritDoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create a test content type.
@@ @@
    * @param array|null $target_bundles
    *   The target bundle(s) of the reference field.
    *
-   * @return \Drupal\field\Entity\FieldConfig
+   * @return FieldConfig
    *   The created/existing field config object.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function addContentEntityReferenceField($field_name = 'entity_reference', $field_bundle = NULL, $target_bundles = NULL) {
     $field_storage = FieldStorageConfig::loadByName('node', $field_name);
@@ @@
         'settings' => ['handler_settings' => ['target_bundles' => $target_bundles ?? [$this->testContentType->id()]]],
       ]);
       $field->save();
-      /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+      /** @var EntityFormDisplayInterface $form_display */
       $form_display = \Drupal::service('entity_display.repository')->getFormDisplay('node', $field_bundle ?? $this->testContentType->id(), 'default');
       $form_display->setComponent($field_name, [
         'type' => 'options_select',
@@ @@
    * @param array $target_bundles
    *   The target bundles.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function updateEntityReferenceFieldTargets(array $target_bundles = []) {
     if (!$this->testRefField) {
@@ @@
    * @param bool $edit
    *   Whether edit button should be on or off.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setEcButtons($add = TRUE, $edit = TRUE) {
     $this->testRefField->setThirdPartySetting('entityconnect', 'buttons', [
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/entityconnect/tests/src/Functional/EntityconnectEditTest.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Grant the edit button permission for the ecUser.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/entityconnect/tests/src/Functional/EntityconnectAdminTest.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // EC user needs both EC roles.
@@ @@
       'third_party_settings[entityconnect][buttons][button_add]' => '0',
       'third_party_settings[entityconnect][buttons][button_edit]' => '0',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save settings');
+    $this->submitForm($edit, 'Save settings');
     $this->drupalLogout();

     // Open the create test page.
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/entityconnect/tests/src/Functional/EntityconnectAddTest.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Grant the add button permission for the ecUser.
@@ @@
     $this->assertSession()->fieldValueEquals('title[0][value]', '');

     // Test Cancel.
-    $this->drupalPostForm(NULL, [], 'Cancel');
+    $this->submitForm([], 'Cancel');
     $this->assertSession()->fieldValueEquals('title[0][value]', 'Base ' . $this->testContentType->label());

     // Test Create reference Node.
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/entityconnect/src/EntityconnectWidgetProcessor.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The entity reference field definition.
    *
-   * @var \Drupal\field\Entity\FieldConfig
+   * @var FieldConfig
    */
   protected $fieldDefinition;

@@ @@
   /**
    * Constructs a EntityconnectWidgetProcessor object.
    *
-   * @param \Drupal\field\Entity\FieldConfig $field_definition
+   * @param FieldConfig $field_definition
    *   The entity reference field definition.
    * @param array $widget
    *   The entity reference field widget form element.
@@ @@
    *
    * @param array $element
    *   The widget container element to attach the buttons.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The parent entity form state.
    * @param array $form
    *   The parent entity form.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/entityconnect/src/EntityconnectFormUtils.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entityconnect;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Url;
+use Drupal\field\FieldStorageConfigInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\Element;
@@ @@
    *
    * @param array $form
    *   The form to add to.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The state of the form.
    */
   public static function fieldConfigEditFormAlter(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form to add to.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The state of the form.
    */
   public static function entityFormAlter(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form to validate.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The state of the form.
    */
   public static function validateForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form to extract fields from.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The state of the form.
    *
    * @return array
@@ @@
   public static function getReferenceFields(array &$form, FormStateInterface $form_state) {

     $ref_fields = [];
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = NULL;

     // Get the entity if this is an entity form.
@@ @@
    *
    * @param array $form
    *   The child form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Child form state.
    * @param string $form_id
    *   Child form id.
@@ @@
      && strpos($form_id, '_confirm_delete') === FALSE && strpos($form_id, 'delete_form') === FALSE) {
       $delete_button = &$form['actions']['delete'];
       if ($delete_button['#type'] == 'link') {
-        /** @var \Drupal\Core\Url $url */
+        /** @var Url $url */
         $url = &$delete_button['#url'];
         $url->setOption('query', [
           'build_cache_id' => $cache_id,
@@ @@
    *
    * @param array $form
    *   Parent form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Parent form state.
    * @param array $cache_data
    *   Parent cache data.
@@ @@
   public static function returnFormAlter(array &$form, FormStateInterface $form_state, array $cache_data) {
     if (empty($form_state->get('#entityconnect_processed'))) {
       $old_form = $cache_data['form'];
-      /** @var \Drupal\Core\Form\FormStateInterface $old_form_state */
+      /** @var FormStateInterface $old_form_state */
       $old_form_state = $cache_data['form_state'];

       // Save the storage and input from the original form state.
@@ @@

       $widget_container_type = isset($widget_container['#type']) ? $widget_container['#type'] : 'autocomplete';

-      /** @var \Drupal\field\FieldStorageConfigInterface $field_info */
+      /** @var FieldStorageConfigInterface $field_info */
       $field_info = $cache_data['field_info'];

       if (isset($cache_data['target_id']) && empty($cache_data['cancel'])) {
@@ @@
    *
    * @param array $form
    *   Child form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Child form state.
    */
   public static function childFormCancel(array $form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   Child form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Child form state.
    */
   public static function childFormSubmit(array $form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   Child form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Child form state.
    */
   public static function childFormDeleteSubmit(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/entityconnect/src/EntityconnectCache.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entityconnect;

+use Drupal\Core\TempStore\PrivateTempStore;
+use Drupal\Core\TempStore\TempStoreException;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Session\SessionManager;
 use Drupal\Core\TempStore\PrivateTempStoreFactory;
@@ @@
   /**
    * The private temporary storage.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   private $store;

@@ @@
   /**
    * The session manager object.
    *
-   * @var \Drupal\Core\Session\SessionManager
+   * @var SessionManager
    */
-
   private $sessionManager;

   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $account;

@@ @@
   /**
    * Saves our dependencies.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $store
+   * @param PrivateTempStoreFactory $store
    *   The private storage object.
-   * @param \Drupal\Core\Session\SessionManager $sessionManager
+   * @param SessionManager $sessionManager
    *   The session manager.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user account object.
    */
   public function __construct(PrivateTempStoreFactory $store, SessionManager $sessionManager, AccountInterface $account) {
@@ @@
    * @param mixed $data
    *   The cache data.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
+   * @throws TempStoreException
    */
   public function set($key, $data) {
     $this->store->set($key, $data);
@@ @@
    * @param string $key
    *   The cache key.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
+   * @throws TempStoreException
    */
   public function delete($key) {
     $this->store->delete($key);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/entityconnect/src/Element/EntityconnectSubmit.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entityconnect\Element;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Url;
 use Drupal\entityconnect\EntityconnectNestedArray;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
    *
    * @param array $form
    *   The parent form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    */
   public static function validateSubmit(array $form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   Buttons will be added to this form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function addEditButtonSubmit(array $form, FormStateInterface $form_state) {
@@ @@
     $entityType = $triggeringElement['#entity_type_target'];
     $acceptableTypes = isset($triggeringElement['#acceptable_types']) ? $triggeringElement['#acceptable_types'] : NULL;

-    /** @var \Drupal\Core\Entity\EntityInterface $source_entity */
+    /** @var EntityInterface $source_entity */
     $source_entity = $form_state->getFormObject()->getEntity();
     $fieldInfo = FieldStorageConfig::loadByName($source_entity->getEntityTypeId(), $field);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/entityconnect/src/Controller/EntityconnectController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entityconnect\Controller;

+use Symfony\Component\Routing\Route;
+use Drupal\Core\Routing\RouteProvider;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\Element\EntityAutocomplete;
@@ @@
   /**
    * Temporary session storage for entityconnect.
    *
-   * @var \Drupal\entityconnect\EntityconnectCache
+   * @var EntityconnectCache
    */
   protected $entityconnectCache;

@@ @@
   /**
    * Drupal renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * Drupal\Core\Messenger\MessengerInterface definition.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Constructs a new EntityconnectController.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   Renderer object.
-   * @param \Drupal\entityconnect\EntityconnectCache $entityconnectCache
+   * @param EntityconnectCache $entityconnectCache
    *   Entityconnect Cache object.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Messenger object.
    */
   public function __construct(RendererInterface $renderer, EntityconnectCache $entityconnectCache, MessengerInterface $messenger) {
@@ @@
    * @param bool $cancel
    *   Whether or not the request was cancelled.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The url of the parent page.
    */
   public function returnTo($cache_id, $cancel = FALSE) {
@@ @@

     if (!empty($routes)) {
       $route_name = key($routes);
-      /** @var \Symfony\Component\Routing\Route $route */
+      /** @var Route $route */
       $route = current($routes);
       // If no parameters just try to get the url from route name.
       if (empty($params = $route->getOption('parameters'))) {
@@ @@
    * @param string $cache_id
    *   Cache id of the parent.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The parent page to go back to.
    */
   private function returnWithMessage($msg, $status, $cache_id) {
@@ @@
    *   An array of add page routes for the given entity type.
    */
   public static function getAddRoute($entity_type) {
-    /** @var \Drupal\Core\Routing\RouteProvider $route_provider */
+    /** @var RouteProvider $route_provider */
     $route_provider = \Drupal::getContainer()->get('router.route_provider');

     $route_name = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/entityconnect/src/Access/CustomAccessCheck.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entityconnect\Access;

+use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Access\AccessCheckInterface;
 use Drupal\Core\Access\AccessResultAllowed;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * A custom access check.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   If the account has the permissions, isAllowed() will be TRUE,
    *   otherwise isNeutral() will be TRUE.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/entityconnect/entityconnect.module:13

    ---------- begin diff ----------
@@ @@
  * Implements hook_help().
  */
 function entityconnect_help($route_name, RouteMatchInterface $route_match) {
-  $module_path = drupal_get_path('module', 'entityconnect');
+  $module_path = \Drupal::service('extension.list.module')->getPath('entityconnect');
   switch ($route_name) {
     // Main module help for the entityconnect module.
     case 'help.page.entityconnect':
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


12) modules/contrib/entityconnect/entityconnect.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\user\RoleInterface;
 /**
  * @file
  * Install, update and uninstall functions for the entityconnect module.
@@ @@
 function entityconnect_update_8001() {
   $roles_changed = [];

-  /** @var \Drupal\user\RoleInterface[] $roles */
+  /** @var RoleInterface[] $roles */
   $roles = Role::loadMultiple();
   foreach ($roles as $roleObj) {
     if ($roleObj->hasPermission('access administration pages')) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 12 files have been changed by Rector                                      

