diff --git a/custom_data.api.php b/custom_data.api.php
index db798a4..d5d1952 100644
--- a/custom_data.api.php
+++ b/custom_data.api.php
@@ -1,22 +1,21 @@
 <?php
 
+use Drupal\custom_data\CustomDataInterface;
 /**
  * @file
  * Hooks specific to the Custom Data module.
  */
-
 /**
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Define a string representation for the given custom data.
  *
  * In case the hook implementation returns an empty string, a fallback value
  * will be generated, or another module might generate the value.
  *
- * @param \Drupal\custom_data\CustomDataInterface $custom_data
+ * @param CustomDataInterface $custom_data
  *   The custom data.
  * @param string $string
  *   The current value of the string representation.
@@ -26,7 +25,7 @@
  *
  * @see \Drupal\custom_data\CustomDataInterface::getStringRepresentation()
  */
-function hook_custom_data_get_string_representation(\Drupal\custom_data\CustomDataInterface $custom_data, $string) {
+function hook_custom_data_get_string_representation(CustomDataInterface $custom_data, $string) {
   if ($custom_data->isNew()) {
     return 'NEW - ' . $custom_data->get('my_custom_field')->value;
   }
diff --git a/custom_data.module b/custom_data.module
index dd0f399..435b892 100644
--- a/custom_data.module
+++ b/custom_data.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\custom_data\CustomDataInterface;
 /**
  * @file
  * Provides an custom data entity type.
@@ -24,7 +25,7 @@ function custom_data_theme() {
  */
 function custom_data_theme_suggestions_custom_data(array $variables) {
   $suggestions = [];
-  /** @var \Drupal\custom_data\CustomDataInterface $custom_data */
+  /** @var CustomDataInterface $custom_data */
   $custom_data = $variables['elements']['#custom_data'];
   $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
 
diff --git a/custom_data.tokens.inc b/custom_data.tokens.inc
index 34249e2..2c51f8d 100644
--- a/custom_data.tokens.inc
+++ b/custom_data.tokens.inc
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\custom_data\CustomDataInterface;
 /**
  * @file
  * Builds placeholder replacement tokens for "custom data"-related data.
@@ -97,7 +98,7 @@ function custom_data_tokens($type, $tokens, array $data, array $options, Bubblea
       $langcode = LanguageInterface::LANGCODE_DEFAULT;
     }
 
-    /** @var \Drupal\custom_data\CustomDataInterface $custom_data */
+    /** @var CustomDataInterface $custom_data */
     $custom_data = $data['custom_data'];
     if (isset($options['langcode']) && $custom_data->language()->getId() !== $options['langcode'] && $custom_data->hasTranslation($options['langcode'])) {
       $custom_data = $custom_data->getTranslation($options['langcode']);
diff --git a/src/Controller/CustomDataController.php b/src/Controller/CustomDataController.php
index 6584013..98aad14 100644
--- a/src/Controller/CustomDataController.php
+++ b/src/Controller/CustomDataController.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\custom_data\Controller;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Render\Renderer;
+use Drupal\custom_data\CustomDataTypeInterface;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\Controller\EntityViewController;
@@ -21,14 +25,14 @@ class CustomDataController implements ContainerInjectionInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;
 
@@ -50,7 +54,7 @@ class CustomDataController implements ContainerInjectionInterface {
    * URL. It passes the rendering to the default view controller if enabled
    * to do so, and otherwise throws an exception to show a 404 page instead.
    *
-   * @param \Drupal\custom_data\CustomDataInterface $custom_data
+   * @param CustomDataInterface $custom_data
    *   The entity to render.
    * @param string $view_mode
    *   (optional) The view mode that should be used to display the entity.
@@ -60,11 +64,11 @@ class CustomDataController implements ContainerInjectionInterface {
    *   A render array as expected by
    *   \Drupal\Core\Render\RendererInterface::render().
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
+   * @throws NotFoundHttpException
    *   When the custom type is not configured to have canonical URLs.
    */
   public function viewCanonical(CustomDataInterface $custom_data, $view_mode = 'full') {
-    /** @var \Drupal\custom_data\CustomDataTypeInterface $data_type */
+    /** @var CustomDataTypeInterface $data_type */
     $data_type = $this->entityTypeManager->getStorage('custom_data_type')->load($custom_data->bundle());
     if (!$data_type->hasCanonical()) {
       if ($custom_data->access('update')) {
@@ -81,12 +85,12 @@ class CustomDataController implements ContainerInjectionInterface {
   /**
    * Custom access callback for ::viewCanonical().
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user account.
-   * @param \Drupal\custom_data\CustomDataInterface $custom_data
+   * @param CustomDataInterface $custom_data
    *   The requested entity.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function viewCanonicalAccess(AccountInterface $account, CustomDataInterface $custom_data) {
@@ -102,7 +106,7 @@ class CustomDataController implements ContainerInjectionInterface {
         ->addCacheableDependency($custom_data);
     }
 
-    /** @var \Drupal\custom_data\CustomDataTypeInterface $data_type */
+    /** @var CustomDataTypeInterface $data_type */
     $data_type = $this->entityTypeManager->getStorage('custom_data_type')->load($custom_data->bundle());
     if (!$data_type->hasCanonical()) {
       return AccessResult::forbidden()
@@ -128,7 +132,7 @@ class CustomDataController implements ContainerInjectionInterface {
    *   (optional) The HTTP redirect status code for the redirect. The default is
    *   302 Found.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   A redirect response object that may be returned by the controller.
    */
   protected function redirect($route_name, array $route_parameters = [], array $options = [], $status = 302) {
diff --git a/src/CustomDataInterface.php b/src/CustomDataInterface.php
index 8a02dbe..1d341a7 100644
--- a/src/CustomDataInterface.php
+++ b/src/CustomDataInterface.php
@@ -85,7 +85,7 @@ interface CustomDataInterface extends ContentEntityInterface, EntityOwnerInterfa
   /**
    * Get the according custom data type (i.e. the bundle as object).
    *
-   * @return \Drupal\custom_data\CustomDataTypeInterface
+   * @return CustomDataTypeInterface
    *   The custom data type as object.
    */
   public function getType(): CustomDataTypeInterface;
diff --git a/src/CustomDataListBuilder.php b/src/CustomDataListBuilder.php
index 18d70a8..6681d88 100755
--- a/src/CustomDataListBuilder.php
+++ b/src/CustomDataListBuilder.php
@@ -18,27 +18,27 @@ class CustomDataListBuilder extends EntityListBuilder {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;
 
   /**
    * Constructs a new FieldBundleListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
@@ -95,7 +95,7 @@ class CustomDataListBuilder extends EntityListBuilder {
     $label = $entity->label();
     $rel = $entity->hasLinkTemplate('canonical') ? 'canonical' : 'edit-form';
     $op = $rel === 'canonical' ? 'view' : 'update';
-    /** @var \Drupal\custom_data\CustomDataInterface $entity */
+    /** @var CustomDataInterface $entity */
     $row['id'] = $entity->access($op) ? $entity->toLink($entity->id(), $rel) : $entity->id();
     $row['label'] = $label !== '' && $entity->access($op) ? $entity->toLink($label, $rel) : $label;
     $row['uid']['data'] = [
diff --git a/src/Entity/CustomData.php b/src/Entity/CustomData.php
index ce1096e..85257da 100644
--- a/src/Entity/CustomData.php
+++ b/src/Entity/CustomData.php
@@ -112,7 +112,7 @@ class CustomData extends RevisionableContentEntityBase implements CustomDataInte
       'uid' => static::getDefaultEntityOwner(),
     ];
     if (!isset($values['status'])) {
-      /** @var \Drupal\custom_data\CustomDataTypeInterface $data_type */
+      /** @var CustomDataTypeInterface $data_type */
       if (isset($values['type']) && ($data_type = \Drupal::entityTypeManager()->getStorage('custom_data_type')->load($values['type']))) {
         $values['status'] = $data_type->getStatus();
       }
@@ -185,7 +185,7 @@ class CustomData extends RevisionableContentEntityBase implements CustomDataInte
    */
   public function hasLinkTemplate($rel) {
     if ($rel === 'canonical') {
-      /** @var \Drupal\custom_data\CustomDataTypeInterface $type */
+      /** @var CustomDataTypeInterface $type */
       $type = \Drupal::entityTypeManager()->getStorage('custom_data_type')->load($this->bundle());
       if (!$type->hasCanonical()) {
         return FALSE;
@@ -322,7 +322,7 @@ class CustomData extends RevisionableContentEntityBase implements CustomDataInte
       $label_pattern = $this->hasField('label_pattern') ? $this->get('label_pattern')->getString() : $this->label_pattern;
     }
     elseif ($type_id = $this->bundle()) {
-      /** @var \Drupal\custom_data\CustomDataTypeInterface $type */
+      /** @var CustomDataTypeInterface $type */
       if ($type = \Drupal::entityTypeManager()->getStorage('custom_data_type')->load($type_id)) {
         $label_pattern = $type->getLabelPattern();
       }
diff --git a/src/Form/CustomDataDeleteForm.php b/src/Form/CustomDataDeleteForm.php
index 9b372c1..0a134b5 100644
--- a/src/Form/CustomDataDeleteForm.php
+++ b/src/Form/CustomDataDeleteForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\custom_data\Form;
 
+use Drupal\custom_data\CustomDataInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Entity\EntityDeleteFormTrait;
 use Drupal\Core\Form\FormStateInterface;
@@ -29,7 +31,7 @@ class CustomDataDeleteForm extends ContentEntityConfirmFormBase {
   public function buildForm(array $form, FormStateInterface $form_state) {
     $form = parent::buildForm($form, $form_state);
 
-    /** @var \Drupal\custom_data\CustomDataInterface $entity */
+    /** @var CustomDataInterface $entity */
     $entity = $this->getEntity();
     if ($entity->isDefaultTranslation()) {
       if (count($entity->getTranslationLanguages()) > 1) {
@@ -60,7 +62,7 @@ class CustomDataDeleteForm extends ContentEntityConfirmFormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->getEntity();
     $message = $this->getDeletionMessage();
 
@@ -84,7 +86,7 @@ class CustomDataDeleteForm extends ContentEntityConfirmFormBase {
    * {@inheritdoc}
    */
   public function getCancelUrl() {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->getEntity();
     if ($entity->isDefaultTranslation()) {
       if ($entity->hasLinkTemplate('collection')) {
@@ -103,7 +105,7 @@ class CustomDataDeleteForm extends ContentEntityConfirmFormBase {
    * {@inheritdoc}
    */
   protected function getDeletionMessage() {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->getEntity();
 
     if (!$entity->isDefaultTranslation()) {
@@ -139,7 +141,7 @@ class CustomDataDeleteForm extends ContentEntityConfirmFormBase {
    * {@inheritdoc}
    */
   public function getQuestion() {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->getEntity();
 
     if (!$entity->isDefaultTranslation()) {
diff --git a/src/Form/CustomDataForm.php b/src/Form/CustomDataForm.php
index 23ef708..3d165db 100644
--- a/src/Form/CustomDataForm.php
+++ b/src/Form/CustomDataForm.php
@@ -30,7 +30,7 @@ class CustomDataForm extends ContentEntityForm {
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\custom_data\CustomDataInterface $entity */
+    /** @var CustomDataInterface $entity */
     $entity = $this->getEntity();
     $result = $entity->save();
     $link = $entity->toLink($this->t('View'))->toRenderable();
@@ -55,11 +55,11 @@ class CustomDataForm extends ContentEntityForm {
    *
    * @param string $entity_type_id
    *   The entity type identifier.
-   * @param \Drupal\custom_data\CustomDataInterface $entity
+   * @param CustomDataInterface $entity
    *   The entity updated with the submitted values.
    * @param array $form
    *   The complete form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function applyLabelPattern($entity_type_id, CustomDataInterface $entity, array $form, FormStateInterface $form_state) {
diff --git a/src/Form/CustomDataTypeForm.php b/src/Form/CustomDataTypeForm.php
index 3b858d4..cb617f6 100644
--- a/src/Form/CustomDataTypeForm.php
+++ b/src/Form/CustomDataTypeForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\custom_data\Form;
 
+use Drupal\custom_data\CustomDataTypeInterface;
 use Drupal\Core\Entity\BundleEntityFormBase;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -17,14 +18,14 @@ class CustomDataTypeForm extends BundleEntityFormBase {
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * Constructs the CustomDataTypeForm object.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(EntityFieldManagerInterface $entity_field_manager) {
@@ -48,7 +49,7 @@ class CustomDataTypeForm extends BundleEntityFormBase {
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\custom_data\CustomDataTypeInterface $data_type */
+    /** @var CustomDataTypeInterface $data_type */
     $data_type = $this->entity;
     if ($this->operation == 'add') {
       $form['#title'] = $this->t('Add custom data type');
@@ -180,7 +181,7 @@ class CustomDataTypeForm extends BundleEntityFormBase {
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\custom_data\CustomDataTypeInterface $data_type */
+    /** @var CustomDataTypeInterface $data_type */
     $data_type = $this->entity;
 
     $data_type->set('id', trim($data_type->id()));
@@ -228,7 +229,7 @@ class CustomDataTypeForm extends BundleEntityFormBase {
    *   Array of options ready to be used in #options.
    */
   protected function getWorkflowOptions() {
-    /** @var \Drupal\custom_data\CustomDataTypeInterface $data_type */
+    /** @var CustomDataTypeInterface $data_type */
     $data_type = $this->entity;
     $workflow_options = [
       'status' => $data_type->getStatus(),
