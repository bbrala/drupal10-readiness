modules/contrib/image_hotspots/image_hotspots.module
modules/contrib/image_hotspots/src/Controller/ImageHotspotsController.php
modules/contrib/image_hotspots/src/Entity/ImageHotspot.php
modules/contrib/image_hotspots/src/ImageHotspotInterface.php
modules/contrib/image_hotspots/src/Plugin/Field/FieldFormatter/ImageHotspotsFormatter.php
modules/contrib/image_hotspots/src/Plugin/QueueWorker/CronHotspotsWorker.php

3 files with changes
====================

1) modules/contrib/image_hotspots/src/Plugin/QueueWorker/CronHotspotsWorker.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The image hotspots storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $hotspotsStorage;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/image_hotspots/src/Plugin/Field/FieldFormatter/ImageHotspotsFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\image_hotspots\Plugin\Field\FieldFormatter;

+use Drupal\file\FileInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Field\FieldItemListInterface;
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $image_style_storage
+   * @param EntityStorageInterface $image_style_storage
    *   The image style storage.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, AccountInterface $current_user, EntityStorageInterface $image_style_storage, LanguageManagerInterface $language_manager) {
@@ @@

     $default_lang = $this->languageManager->getDefaultLanguage()->getId();

-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     foreach ($files as $delta => $file) {
       $info['fid'] = $file->id();
       $hotspots = ImageHotspot::loadByTarget($info);
@@ @@
       }

       // Attach hotspots data to js settings.
-      /** @var \Drupal\image_hotspots\Entity\ImageHotspot $hotspot */
+      /** @var ImageHotspot $hotspot */
       $hotspots_to_show = [];
       foreach ($hotspots as $hid => $hotspot) {
         $title = $hotspot->getTitle();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/image_hotspots/src/Controller/ImageHotspotsController.php:21

    ---------- begin diff ----------
@@ @@
    * @param string $hid
    *   Hotspot id.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   AjaxResponse
    */
   public function deleteAction($hid) {
@@ @@
     }
     else {
       try {
-        /** @var \Drupal\image_hotspots\Entity\ImageHotspot $hotspot */
+        /** @var ImageHotspot $hotspot */
         $hotspot = ImageHotspot::load($hid);
         $target = $hotspot->getTarget();
         $hotspot->delete();
@@ @@
   /**
    * Creates hotspot with values from request data.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Request from user to change hotspot.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   AjaxResponse
    */
   public function createAction(Request $request) {
@@ @@
    *
    * @param string $hid
    *   Hotspot id.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Request from user to change hotspot.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   AjaxResponse
    */
   public function updateAction($hid, Request $request) {
@@ @@
       $parameters['error'] = $this->t('You did a lot actions with hotspots and can not update this hotspot right now. Wait some seconds before you can do it again.');
     }
     else {
-      /** @var \Drupal\image_hotspots\Entity\ImageHotspot $hotspot */
+      /** @var ImageHotspot $hotspot */
       $hotspot = ImageHotspot::load($hid);
       if (is_null($hotspot)) {
         $code = 404;
@@ @@
    *   Hotspot id.
    * @param $langcode
    *   Language ID.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   public function translateAction($hid, $langcode, Request $request) {
     if (!$this->accessCallback()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 3 files have been changed by Rector                                       

