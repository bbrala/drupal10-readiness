modules/contrib/prometheus_metrics/prometheus_metrics.install
modules/contrib/prometheus_metrics/prometheus_metrics.module
modules/contrib/prometheus_metrics/src/Bridge/PromPHPClientBridge.php
modules/contrib/prometheus_metrics/src/Bridge/PrometheusMetricsInterface.php
modules/contrib/prometheus_metrics/src/Controller/MetricsController.php
modules/contrib/prometheus_metrics/src/EventSubscriber/PrometheusDefaults.php
modules/contrib/prometheus_metrics/src/EventSubscriber/PrometheusEntityCRUDSubscriber.php
modules/contrib/prometheus_metrics/src/EventSubscriber/PrometheusRequestSubscriber.php
modules/contrib/prometheus_metrics/src/Events/EntityCRUDEvent.php
modules/contrib/prometheus_metrics/src/Form/ConfirmResetForm.php
modules/contrib/prometheus_metrics/src/Form/MetricsConfigurationForm.php
modules/contrib/prometheus_metrics/src/Routing/MetricsRoutes.php
modules/contrib/prometheus_metrics/tests/Controller/MetricsControllerTest.php
modules/contrib/prometheus_metrics/tests/src/Functional/LoadTest.php
modules/contrib/prometheus_metrics/tests/src/Unit/EntityCRUDEventTest.php
modules/contrib/prometheus_metrics/tests/src/Unit/MetricsRoutesTest.php

11 files with changes
=====================

1) modules/contrib/prometheus_metrics/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\prometheus_metrics\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/prometheus_metrics/tests/Controller/MetricsControllerTest.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/prometheus_metrics/src/Routing/MetricsRoutes.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Used to retrieve Prometheus Metrics config.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   private $configFactory;

@@ @@
   /**
    * MetricsRoutes constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Used retrieve Prometheus Metrics config.
    */
   public function __construct(ConfigFactoryInterface $configFactory) {
@@ @@
    *
    * Defaults to /metrics.
    *
-   * @param \Drupal\Core\Config\Config $config
+   * @param Config $config
    *   Config service.
    */
   private function setMetricsRoutePath(Config $config):void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/prometheus_metrics/src/Form/MetricsConfigurationForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Used to rebuild route if route name provided.
    *
-   * @var \Drupal\Core\Routing\RouteBuilderInterface
+   * @var RouteBuilderInterface
    */
   private $routeBuilder;

@@ @@
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Routing\RouteBuilderInterface $routeBuilder
+   * @param RouteBuilderInterface $routeBuilder
    *   Route builder service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, RouteBuilderInterface $routeBuilder) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/prometheus_metrics/src/Form/ConfirmResetForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The prometheus metrics service.
    *
-   * @var \Drupal\prometheus_metrics\Bridge\PrometheusMetricsInterface
+   * @var PrometheusMetricsInterface
    */
   private PrometheusMetricsInterface $prometheusMetrics;

@@ @@
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\prometheus_metrics\Bridge\PrometheusMetricsInterface $prometheusMetrics
+   * @param PrometheusMetricsInterface $prometheusMetrics
    *   The prometheus metrics service.
    */
   public function __construct(PrometheusMetricsInterface $prometheusMetrics) {
@@ @@
    *
    * @param array $form
    *   The confirm reset form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   State of confirm reset form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/prometheus_metrics/src/Events/EntityCRUDEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\prometheus_metrics\Events;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\EntityInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Stores details about the event.
@@ @@
    *
    * @todo// currently no value in having this. Remove/ use in logging?
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   private $entity;

@@ @@
   /**
    * Creates the event entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity being affected.
    */
   public function __construct(EntityInterface $entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/prometheus_metrics/src/EventSubscriber/PrometheusRequestSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\prometheus_metrics\EventSubscriber;

+use Drupal\Core\Config\ImmutableConfig;
+use Symfony\Component\HttpKernel\Event\RequestEvent;
+use Symfony\Component\HttpKernel\Event\TerminateEvent;
 use Psr\Log\LoggerInterface;
 use Drupal\Component\Utility\Timer;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
-use Symfony\Component\HttpKernel\Event\PostResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * Used to retrieve route details.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   private $routeMatch;

@@ @@
   /**
    * The prometheus metrics service.
    *
-   * @var \Drupal\prometheus_metrics\Bridge\PrometheusMetricsInterface
+   * @var PrometheusMetricsInterface
    */
   private $prometheusMetrics;

@@ @@
   /**
    * Used to access Prometheus Metrics config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   private $config;

@@ @@
   /**
    * Used to log messages.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   private $logger;

@@ @@
   /**
    * PrometheusRequestSubscriber constructor.
    *
-   * @param \Drupal\prometheus_metrics\Bridge\PrometheusMetricsInterface $prometheusMetrics
+   * @param PrometheusMetricsInterface $prometheusMetrics
    *   The Prometheus Metrics service.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $routeMatch
+   * @param RouteMatchInterface $routeMatch
    *   Used to retrieve route details.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Config service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Logger service.
    */
   public function __construct(
@@ @@
   /**
    * Start timer for the request.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The start of request event.
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(RequestEvent $event) {
     Timer::start(PrometheusDefaults::TIMER_NAME);
   }

@@ @@
    * Stores a histogram timer and counter for the request
    * by method, route and status.
    *
-   * @param \Symfony\Component\HttpKernel\Event\PostResponseEvent $event
+   * @param TerminateEvent $event
    *   The event.
    */
-  public function onTerminate(PostResponseEvent $event) {
+  public function onTerminate(TerminateEvent $event) {
     if (PHP_SAPI === 'cli') {
       // In CLI context there is no request to trace
       return;
@@ @@
   /**
    * Extracts the route name from the request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    *
    * @return string|null
@@ @@
   /**
    * Flattens Response Status codes into 4 strings 2xx - 5xx.
    *
-   * @param \Symfony\Component\HttpFoundation\Response $response
+   * @param Response $response
    *   The response object.
    *
    * @return int|string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/prometheus_metrics/src/EventSubscriber/PrometheusEntityCRUDSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\prometheus_metrics\EventSubscriber;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\prometheus_metrics\Bridge\PrometheusMetricsInterface;
 use Drupal\prometheus_metrics\Events\EntityCRUDEvent;
@@ @@
   /**
    * The prometheus metrics service.
    *
-   * @var \Drupal\prometheus_metrics\Bridge\PrometheusMetricsInterface
+   * @var PrometheusMetricsInterface
    */
   private $prometheusMetrics;

@@ @@
   /**
    * Prometheus metrics config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   private $config;

@@ @@
   /**
    * Contructs the CRUD event handler.
    *
-   * @param \Drupal\prometheus_metrics\Bridge\PrometheusMetricsInterface $prometheusMetrics
+   * @param PrometheusMetricsInterface $prometheusMetrics
    *   The prometheus metrics service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Used to access prometheus metrics configuration.
    */
   public function __construct(
@@ @@
   /**
    * On insert create/ update metrics.
    *
-   * @param \Drupal\prometheus_metrics\Events\EntityCRUDEvent $event
+   * @param EntityCRUDEvent $event
    *   The entity crud event.
    */
   public function onEntityInsert(EntityCRUDEvent $event) {
@@ @@
   /**
    * On update create/ update metrics.
    *
-   * @param \Drupal\prometheus_metrics\Events\EntityCRUDEvent $event
+   * @param EntityCRUDEvent $event
    *   The entity crud event.
    */
   public function onEntityUpdate(EntityCRUDEvent $event) {
@@ @@
   /**
    * On delete create/ update metrics.
    *
-   * @param \Drupal\prometheus_metrics\Events\EntityCRUDEvent $event
+   * @param EntityCRUDEvent $event
    *   The entity crud event.
    */
   public function onEntityDelete(EntityCRUDEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/prometheus_metrics/src/Controller/MetricsController.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Interface to prometheus metrics service.
    *
-   * @var \Drupal\prometheus_metrics\Bridge\PrometheusMetricsInterface
+   * @var PrometheusMetricsInterface
    */
   private PrometheusMetricsInterface $prometheusMetrics;

@@ @@
   /**
    * Constructs MetricsController object.
    *
-   * @param \Drupal\prometheus_metrics\Bridge\PrometheusMetricsInterface $prometheusMetrics
+   * @param PrometheusMetricsInterface $prometheusMetrics
    *   Interface to prometheus metrics service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Used to access prometheus metrics config.
    */
   public function __construct(PrometheusMetricsInterface $prometheusMetrics, ConfigFactoryInterface $configFactory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/prometheus_metrics/src/Bridge/PromPHPClientBridge.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\prometheus_metrics\Bridge;

+use Prometheus\Storage\Adapter;
 use Drupal\Core\Site\Settings;
 use Prometheus\CollectorRegistry;
 use Prometheus\Exception\StorageException;
@@ @@
   /**
    * Handles storing/ retrieving metrics.
    *
-   * @var \Prometheus\Storage\Adapter
+   * @var Adapter
    */
   private $storageAdapter;

@@ @@
   /**
    * The registry populated from storage.
    *
-   * @var \Prometheus\CollectorRegistry
+   * @var CollectorRegistry
    */
   private $collectorRegistry;

@@ @@
   /**
    * The renderer used to expose metrics.
    *
-   * @var \Prometheus\RenderTextFormat
+   * @var RenderTextFormat
    */
   private $renderer;

@@ @@
   /**
    * Returns the renderer.
    *
-   * @return \Prometheus\RenderTextFormat
+   * @return RenderTextFormat
    *   Returns a Text format renderer.
    */
   private function getRenderer(): RenderTextFormat {
@@ @@
   /**
    * Returns the registry.
    *
-   * @return \Prometheus\CollectorRegistry
+   * @return CollectorRegistry
    *   Returns the registry.
    */
   private function getCollectorRegistry(): CollectorRegistry {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/prometheus_metrics/prometheus_metrics.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher;
 /**
  * @file
  * Implements necessary hooks to trigger events for metrics.
@@ @@
  */
 function prometheus_dispatch_event(string $eventName, EntityInterface $entity) {
   /**
-   * @var Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher $event_dispatcher
+   * @var ContainerAwareEventDispatcher $event_dispatcher
    */
   $eventDispatcher = \Drupal::service('event_dispatcher');
   $event = new EntityCRUDEvent($entity);
@@ @@
 /**
  * Implements hook_ENTITY_TYPE_insert.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   Entity being inserted.
  */
 function prometheus_metrics_entity_insert(EntityInterface $entity) {
@@ @@
 /**
  * Implements hook_ENTITY_TYPE_update.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   Entity being updated.
  */
 function prometheus_metrics_entity_update(EntityInterface $entity) {
@@ @@
 /**
  * Implements hook_ENTITY_TYPE_delete.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   Entity being deleted.
  */
 function prometheus_metrics_entity_delete(EntityInterface $entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 11 files have been changed by Rector                                      

