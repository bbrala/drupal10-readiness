modules/contrib/views_inject/src/Plugin/views/display_extender/InjectResults.php
modules/contrib/views_inject/tests/src/Kernel/DisplayAccessTest.php
modules/contrib/views_inject/tests/src/Kernel/InjectResultsTestBase.php
modules/contrib/views_inject/tests/src/Kernel/MultiPageResultsTest.php
modules/contrib/views_inject/tests/src/Kernel/PagerCountTest.php
modules/contrib/views_inject/tests/src/Kernel/RenderedOutputTest.php
modules/contrib/views_inject/tests/src/Kernel/SinglePageResultsTest.php
modules/contrib/views_inject/views_inject.install
modules/contrib/views_inject/views_inject.views_execution.inc

5 files with changes
====================

1) modules/contrib/views_inject/tests/src/Kernel/RenderedOutputTest.php:29

    ---------- begin diff ----------
@@ @@
         $positions[$node_type][$index] = $position;

         // Make sure each node is found.
-        $this->assert($position !== FALSE);
+        $this->assertTrue($position !== FALSE);
       }
     }

     // Assert that node ids are rendered in the correct order.
-    $this->assert($positions['article'][0] < $positions['page'][0]);
-    $this->assert($positions['page'][0] < $positions['article'][1]);
-    $this->assert($positions['article'][1] < $positions['page'][1]);
+    $this->assertTrue($positions['article'][0] < $positions['page'][0]);
+    $this->assertTrue($positions['page'][0] < $positions['article'][1]);
+    $this->assertTrue($positions['article'][1] < $positions['page'][1]);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/views_inject/tests/src/Kernel/PagerCountTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\views_inject\Kernel;

+use Drupal\views\ViewExecutable;
 /**
  * Tests views inject functionality related to the pager.
  *
@@ @@
    * @param int $items_per_page
    *   The number of items per page to set for the view's pager.
    *
-   * @return \Drupal\views\ViewExecutable
+   * @return ViewExecutable
    *   The initialized view.
    */
   protected function getPagedView($items_per_page = 0) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/views_inject/tests/src/Kernel/InjectResultsTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\views_inject\Kernel;

+use Drupal\node\NodeInterface;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;
 use Drupal\Tests\views\Kernel\ViewsKernelTestBase;
@@ @@
   /**
    * Nodes for testing.
    *
-   * @var \Drupal\node\NodeInterface[][]
+   * @var NodeInterface[][]
    */
   protected $nodes;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp($import_test_views);

     // Enable our display extender.
@@ @@
    * @param int $chunk_distance
    *   The chunk distance to use in the display extender.
    *
-   * @return \Drupal\views\ViewExecutable
+   * @return ViewExecutable
    *   The initialized view.
    */
   protected function getInjectEnabledTestView($offset = 0, $chunk_size = 1, $chunk_distance = 1) {
@@ @@
   /**
    * Tests if the view results are as expected.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The view to test.
    * @param string[] $expected_shorthand
    *   The expected resultset, as a list of node type ids.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/views_inject/tests/src/Kernel/DisplayAccessTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\views_inject\Kernel;

+use Drupal\user\UserInterface;
+use Drupal\Core\Session\AccountSwitcherInterface;
 use Drupal\user\Entity\Role;
 use Drupal\user\Entity\User;

@@ @@
   /**
    * Stores a user entity with access to a restricted display.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $userWithAccess;

@@ @@
   /**
    * Stores a user entity without access to a restricted display.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $userWithoutAccess;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp($import_test_views);

     $role_with_access = Role::create([
@@ @@
    * Tests correct behavior in regards to injected display's access settings.
    */
   public function testInjectedDisplayAccess() {
-    /** @var \Drupal\Core\Session\AccountSwitcherInterface $account_switcher */
+    /** @var AccountSwitcherInterface $account_switcher */
     $account_switcher = \Drupal::service('account_switcher');

     // Test with a display we have no access to.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/views_inject/src/Plugin/views/display_extender/InjectResults.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\views_inject\Plugin\views\display_extender;

+use Drupal\views\ViewExecutable;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheableDependencyInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The view object used for injection.
    *
-   * @var \Drupal\views\ViewExecutable
+   * @var ViewExecutable
    */
   protected $injectedView;

@@ @@
   /**
    * Loads the executable for inject source data.
    *
-   * @return \Drupal\views\ViewExecutable|null
+   * @return ViewExecutable|null
    *   The view to get results to inject from, if it exists.
    */
   protected function getInjectedView() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 5 files have been changed by Rector                                       

