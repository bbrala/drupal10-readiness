modules/contrib/flysystem/flysystem.install
modules/contrib/flysystem/flysystem.module
modules/contrib/flysystem/src/Annotation/Adapter.php
modules/contrib/flysystem/src/Asset/AssetDumper.php
modules/contrib/flysystem/src/Asset/CssCollectionOptimizer.php
modules/contrib/flysystem/src/Asset/CssOptimizer.php
modules/contrib/flysystem/src/Asset/JsCollectionOptimizer.php
modules/contrib/flysystem/src/Asset/SchemeExtensionTrait.php
modules/contrib/flysystem/src/Event/EnsureEvent.php
modules/contrib/flysystem/src/Event/FlysystemEvents.php
modules/contrib/flysystem/src/EventSubscriber/EnsureSubscriber.php
modules/contrib/flysystem/src/Flysystem/Adapter/CacheItem.php
modules/contrib/flysystem/src/Flysystem/Adapter/CacheItemBackend.php
modules/contrib/flysystem/src/Flysystem/Adapter/DrupalCacheAdapter.php
modules/contrib/flysystem/src/Flysystem/Adapter/MissingAdapter.php
modules/contrib/flysystem/src/Flysystem/Ftp.php
modules/contrib/flysystem/src/Flysystem/Local.php
modules/contrib/flysystem/src/Flysystem/Missing.php
modules/contrib/flysystem/src/FlysystemBridge.php
modules/contrib/flysystem/src/FlysystemFactory.php
modules/contrib/flysystem/src/FlysystemServiceProvider.php
modules/contrib/flysystem/src/Form/ConfigForm.php
modules/contrib/flysystem/src/Logger/Convert.php
modules/contrib/flysystem/src/PathProcessor/FlysystemPathProcessor.php
modules/contrib/flysystem/src/PathProcessor/LocalPathProcessor.php
modules/contrib/flysystem/src/Plugin/FlysystemPluginInterface.php
modules/contrib/flysystem/src/Plugin/FlysystemPluginManager.php
modules/contrib/flysystem/src/Plugin/FlysystemUrlTrait.php
modules/contrib/flysystem/src/Plugin/ImageStyleGenerationTrait.php
modules/contrib/flysystem/src/Routing/FlysystemRoutes.php
modules/contrib/flysystem/src/SerializationStopperTrait.php
modules/contrib/flysystem/tests/bootstrap.php
modules/contrib/flysystem/tests/src/Functional/ModuleInstallUninstallWebTest.php
modules/contrib/flysystem/tests/src/Kernel/CollectionOptimizerTest.php
modules/contrib/flysystem/tests/src/Unit/Asset/SchemeExtensionTraitTest.php
modules/contrib/flysystem/tests/src/Unit/Event/EnsureEventTest.php
modules/contrib/flysystem/tests/src/Unit/EventSubscriber/EnsureSubscriberTest.php
modules/contrib/flysystem/tests/src/Unit/Flysystem/Adapter/CacheItemBackendTest.php
modules/contrib/flysystem/tests/src/Unit/Flysystem/Adapter/CacheItemTest.php
modules/contrib/flysystem/tests/src/Unit/Flysystem/Adapter/DrupalCacheAdapterTest.php
modules/contrib/flysystem/tests/src/Unit/Flysystem/Adapter/MissingAdapterTest.php
modules/contrib/flysystem/tests/src/Unit/Flysystem/FtpTest.php
modules/contrib/flysystem/tests/src/Unit/Flysystem/LocalTest.php
modules/contrib/flysystem/tests/src/Unit/Flysystem/MissingTest.php
modules/contrib/flysystem/tests/src/Unit/FlysystemBridgeTest.php
modules/contrib/flysystem/tests/src/Unit/FlysystemFactoryTest.php
modules/contrib/flysystem/tests/src/Unit/FlysystemServiceProviderTest.php
modules/contrib/flysystem/tests/src/Unit/Form/ConfigFormTest.php
modules/contrib/flysystem/tests/src/Unit/InstallFunctionsTest.php
modules/contrib/flysystem/tests/src/Unit/Logger/ConvertTest.php
modules/contrib/flysystem/tests/src/Unit/ModuleFunctionsTest.php
modules/contrib/flysystem/tests/src/Unit/PathProcessor/FlysystemPathProcessorTest.php
modules/contrib/flysystem/tests/src/Unit/PathProcessor/LocalPathProcessorTest.php
modules/contrib/flysystem/tests/src/Unit/Plugin/FlysystemPluginManagerTest.php
modules/contrib/flysystem/tests/src/Unit/Plugin/FlysystemUrlTraitTest.php
modules/contrib/flysystem/tests/src/Unit/Plugin/ImageStyleGenerationTraitTest.php
modules/contrib/flysystem/tests/src/Unit/Routing/FlysystemRoutesTest.php
modules/contrib/flysystem/tests/src/Unit/SerializationStopperTraitTest.php

26 files with changes
=====================

1) modules/contrib/flysystem/tests/src/Unit/Routing/FlysystemRoutesTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flysystem\Unit\Routing;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Site\Settings;
@@ @@
  */
 class FlysystemRoutesTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
-   * @var \Drupal\flysystem\FlysystemFactory
+   * @var FlysystemFactory
    */
   protected $factory;

   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

   /**
-   * @var \Drupal\flysystem\Routing\FlysystemRoutes
+   * @var FlysystemRoutes
    */
   protected $router;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     $container = new ContainerBuilder();

     $stream_wrapper = $this->prophesize(LocalStream::class);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/flysystem/tests/src/Unit/Plugin/ImageStyleGenerationTraitTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flysystem\Unit\Plugin;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
  */
 class ImageStyleGenerationTraitTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * @covers ::generateImageStyle
    */
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/flysystem/tests/src/Unit/Plugin/FlysystemUrlTraitTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flysystem\Unit\Plugin;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Routing\UrlGenerator;
 use Drupal\Tests\UnitTestCase;
@@ @@
  */
 class FlysystemUrlTraitTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * @covers ::getExternalUrl
    * @covers ::getScheme
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/flysystem/tests/src/Unit/PathProcessor/LocalPathProcessorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flysystem\Unit\PathProcessor;

+use Drupal\Core\PathProcessor\InboundPathProcessorInterface;
 use Drupal\Core\Site\Settings;
 use Drupal\Tests\UnitTestCase;
 use Drupal\flysystem\PathProcessor\LocalPathProcessor;
@@ @@
 class LocalPathProcessorTest extends UnitTestCase {

   /**
-   * @var \Drupal\Core\PathProcessor\InboundPathProcessorInterface
+   * @var InboundPathProcessorInterface
    */
   protected $processor;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     new Settings(
       [
         'flysystem' => [
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/flysystem/tests/src/Unit/ModuleFunctionsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flysystem\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
+use Symfony\Component\Mime\MimeTypesInterface;
 use Drupal\Core\StreamWrapper\StreamWrapperManagerInterface;
 use Drupal\Tests\UnitTestCase;
 use Drupal\flysystem\FlysystemFactory;
 use Prophecy\Argument;
 use Symfony\Component\DependencyInjection\ContainerBuilder;
-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;
 use org\bovigo\vfs\vfsStream;

 /**
@@ @@
  */
 class ModuleFunctionsTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The Flysystem factory prophecy object.
    *
-   * @var \Prophecy\Prophecy\ObjectProphecy
+   * @var ObjectProphecy
    */
   protected $factory;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     vfsStream::setup('module_file');

@@ @@
       return $scheme;
     });

-    $guesser = $this->prophesize(MimeTypeGuesserInterface::class);
+    $guesser = $this->prophesize(MimeTypesInterface::class);
     $guesser->guess(Argument::type('string'))->willReturn('txt/flysystem');

     $container = new ContainerBuilder();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/flysystem/tests/src/Unit/Logger/ConvertTest.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     $consts = [
       'REQUIREMENT_INFO' => -1,
       'REQUIREMENT_OK' => 0,
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/flysystem/tests/src/Unit/InstallFunctionsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flysystem\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Core\Logger\RfcLogLevel;
 use Drupal\Core\Site\Settings;
 use Drupal\Tests\UnitTestCase;
@@ @@
  */
 class InstallFunctionsTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The Flysystem factory prophecy object.
    *
-   * @var \Prophecy\Prophecy\ObjectProphecy
+   * @var ObjectProphecy
    */
   protected $factory;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     if (!defined('REQUIREMENT_ERROR')) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/flysystem/tests/src/Unit/Form/ConfigFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flysystem\Unit\Form {

+  use Prophecy\PhpUnit\ProphecyTrait;
+  use Prophecy\Prophecy\ObjectProphecy;
+  use Drupal\Core\Messenger\MessengerInterface;
   use function Drupal\flysystem\Form\batch_set;
   use Drupal\Core\Form\FormState;
   use Drupal\Core\Logger\LoggerChannelFactoryInterface;
@@ @@
    */
   class ConfigFormTest extends UnitTestCase {

+    use ProphecyTrait;
     /**
      * The Flysystem factory prophecy.
      *
-     * @var \Prophecy\Prophecy\ObjectProphecy
+     * @var ObjectProphecy
      */
     protected $factory;

@@ @@
     /**
      * The form object.
      *
-     * @var \Drupal\flysystem\Form\ConfigForm
+     * @var ConfigForm
      */
     protected $form;

@@ @@
     /**
      * {@inheritdoc}
      */
-    public function setUp() {
+    public function setUp(): void {
       parent::setUp();

       $this->factory = $this->prophesize(FlysystemFactory::class);
@@ @@

       $this->form = new ConfigForm($this->factory->reveal());
       $this->form->setStringTranslation($this->getStringTranslationStub());
-      $messenger = $this->prophesize(\Drupal\Core\Messenger\MessengerInterface::class);
+      $messenger = $this->prophesize(MessengerInterface::class);

       $container = new ContainerBuilder();
       $container->set('string_translation', $this->getStringTranslationStub());
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/flysystem/tests/src/Unit/FlysystemServiceProviderTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flysystem\Unit;

+use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Asset\AssetDumper;
 use Drupal\Core\Asset\CssCollectionOptimizer;
 use Drupal\Core\Asset\CssOptimizer;
@@ @@
   /**
    * The container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected $container;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     $this->container = new ContainerBuilder();
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/flysystem/tests/src/Unit/FlysystemFactoryTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flysystem\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\Core\Cache\CacheBackendInterface;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\NullBackend;
 use Drupal\Core\File\FileSystemInterface as CoreFileSystemInterface;
@@ @@
  */
 class FlysystemFactoryTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

   /**
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

   /**
-   * @var \Prophecy\Prophecy\ObjectProphecy
+   * @var ObjectProphecy
    */
   protected $filesystem;

   /**
-   * @var \Prophecy\Prophecy\ObjectProphecy
+   * @var ObjectProphecy
    */
   protected $plugin;

   /**
-   * @var \Prophecy\Prophecy\ObjectProphecy
+   * @var ObjectProphecy
    */
   protected $pluginManager;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->cache = new NullBackend('bin');
@@ @@
   }

   /**
-   * @return \Drupal\flysystem\FlysystemFactory
+   * @return FlysystemFactory
    */
   protected function getFactory() {
     return new FlysystemFactory(
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/flysystem/tests/src/Unit/Flysystem/LocalTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flysystem\Unit\Flysystem;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Logger\RfcLogLevel;
 use Drupal\Core\Routing\UrlGeneratorInterface;
@@ @@
  */
 class LocalTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $GLOBALS['base_url'] = 'http://example.com';

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function tearDown() {
+  public function tearDown(): void {
     (new LocalAdapter('foo'))->deleteDir('');
     @rmdir('foo');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/flysystem/tests/src/Unit/Flysystem/FtpTest.php:16

    ---------- begin diff ----------
@@ @@
     /**
      * {@inheritdoc}
      */
-    public function setUp() {
+    public function setUp(): void {
       parent::setUp();
       if (!defined('FTP_BINARY')) {
         $this->markTestSkipped('The FTP_BINARY constant is not defined.');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/flysystem/tests/src/Unit/Flysystem/Adapter/CacheItemBackendTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flysystem\Unit\Flysystem\Adapter;

+use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Cache\MemoryBackend;
 use Drupal\Tests\UnitTestCase;
 use Drupal\flysystem\Flysystem\Adapter\CacheItem;
@@ @@
   /**
    * The cache backend used in the CacheItemBackend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;

@@ @@
   /**
    * The cache item backend to test.
    *
-   * @var \Drupal\flysystem\Flysystem\Adapter\CacheItemBackend
+   * @var CacheItemBackend
    */
   protected $cacheItemBackend;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setup() {
+  public function setup(): void {
     $this->cacheBackend = new MemoryBackend('foo');
     $this->cacheItemBackend = new CacheItemBackend('test-scheme', $this->cacheBackend);
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/flysystem/tests/src/Unit/EventSubscriber/EnsureSubscriberTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flysystem\Unit\EventSubscriber;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Tests\UnitTestCase;
 use Drupal\flysystem\EventSubscriber\EnsureSubscriber;
 use Drupal\flysystem\Event\EnsureEvent;
@@ @@
  */
 class EnsureSubscriberTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Tests that the event subscriber logs ensure() calls.
    */
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


15) modules/contrib/flysystem/tests/src/Kernel/CollectionOptimizerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flysystem\Kernel;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Asset\AssetCollectionGrouperInterface;
 use Drupal\Core\Asset\CssOptimizer;
 use Drupal\Core\Asset\JsOptimizer;
@@ @@
  */
 class CollectionOptimizerTest extends KernelTestBase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->cleanUp();
   }
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function tearDown() {
+  public function tearDown(): void {
     $this->cleanUp();
     parent::tearDown();
   }
@@ @@

     foreach ($this->jsFilesUnderTest() as $js_file => $expired) {
       if ($expired === TRUE) {
-        $this->assertFileNotExists($js_file);
+        $this->assertFileDoesNotExist($js_file);
         continue;
       }
       $this->assertFileExists($js_file);
@@ @@

     foreach ($this->cssFilesUnderTest() as $css_file => $expired) {
       if ($expired === TRUE) {
-        $this->assertFileNotExists($css_file);
+        $this->assertFileDoesNotExist($css_file);
         continue;
       }
       $this->assertFileExists($css_file);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameMethodRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/flysystem/tests/src/Functional/ModuleInstallUninstallWebTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flysystem\Functional;

+use Drupal\Core\Extension\ModuleInstallerInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
     $module_handler = \Drupal::moduleHandler();
     $this->assertTrue($module_handler->moduleExists(reset(static::$modules)));

-    /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
+    /** @var ModuleInstallerInterface $module_installer */
     $module_installer = \Drupal::service('module_installer');

     $module_installer->uninstall(static::$modules);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


17) modules/contrib/flysystem/src/Routing/FlysystemRoutes.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The Flysystem factory.
    *
-   * @var \Drupal\flysystem\FlysystemFactory
+   * @var FlysystemFactory
    */
   protected $factory;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The stream wrapper manager service.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;

@@ @@
   /**
    * Constructs a new FlysystemRoutes object.
    *
-   * @param \Drupal\flysystem\FlysystemFactory $factory
+   * @param FlysystemFactory $factory
    *   The Flysystem factory.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *   The stream wrapper manager service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(FlysystemFactory $factory, StreamWrapperManagerInterface $stream_wrapper_manager, ModuleHandlerInterface $module_handler) {
@@ @@
   /**
    * Returns a list of route objects.
    *
-   * @return \Symfony\Component\Routing\Route[]
+   * @return Route[]
    *   An array of route objects.
    */
   public function routes() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


18) modules/contrib/flysystem/src/Plugin/FlysystemPluginManager.php:17

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/flysystem/src/Form/ConfigForm.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The Flysystem factory.
    *
-   * @var \Drupal\flysystem\FlysystemFactory
+   * @var FlysystemFactory
    */
   protected $factory;

@@ @@
   /**
    * Constructs a ConfigForm object.
    *
-   * @param \Drupal\flysystem\FlysystemFactory $factory
+   * @param FlysystemFactory $factory
    *   The FlysystemF factory.
    */
   public function __construct(FlysystemFactory $factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/flysystem/src/FlysystemServiceProvider.php:45

    ---------- begin diff ----------
@@ @@
   /**
    * Swaps the js/css dumper if a scheme is configured to serve it.
    *
-   * @param \Drupal\Core\DependencyInjection\ContainerBuilder $container
+   * @param ContainerBuilder $container
    *   The container.
    * @param string $extension
    *   The file extension to swap.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


21) modules/contrib/flysystem/src/Flysystem/Adapter/CacheItemBackend.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The Drupal cache backend to store data in.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;

@@ @@
   /**
    * Constructs a new CacheItemBackend.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   The Drupal cache backend to store items in.
    */
   public function __construct($scheme, CacheBackendInterface $cacheBackend) {
@@ @@
    * @param string $path
    *   The path of the item to load.
    *
-   * @return \Drupal\flysystem\Flysystem\Adapter\CacheItem
+   * @return CacheItem
    *   The cache item, or a new cache item if one isn't in the cache.
    */
   public function load($path) {
@@ @@
     $key = $this->getCacheKey($path);

     if ($cached = $this->cacheBackend->get($key)) {
-      /** @var \Drupal\flysystem\Flysystem\Adapter\CacheItem $item */
+      /** @var CacheItem $item */
       $item = $cached->data;
     }
     else {
@@ @@
    *
    * @param string $path
    *   The file path.
-   * @param \Drupal\flysystem\Flysystem\Adapter\CacheItem $item
+   * @param CacheItem $item
    *   The item to set.
    */
   public function set($path, CacheItem $item) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


22) modules/contrib/flysystem/src/EventSubscriber/EnsureSubscriber.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The logger to use.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Constructs an EnsureSubscriber object.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
    */
   public function __construct(LoggerInterface $logger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


23) modules/contrib/flysystem/src/Event/EnsureEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flysystem\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * The event fired for every result from an ensure() call.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/flysystem/src/Asset/JsCollectionOptimizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flysystem\Asset;

+use Drupal\Core\File\FileSystem;
 use Drupal\Core\Asset\JsCollectionOptimizer as DrupalJsCollectionOptimizer;

 /**
@@ @@
    */
   public function deleteAll() {
     $this->state->delete('system.js_cache_files');
-    /** @var \Drupal\Core\File\FileSystem $file_system */
+    /** @var FileSystem $file_system */
     $file_system = \Drupal::service('file_system');
     $delete_stale = static function ($uri) use ($file_system) {
       // Default stale file threshold is 30 days (2592000 seconds).
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


25) modules/contrib/flysystem/src/Asset/CssOptimizer.php:23

    ---------- begin diff ----------
@@ @@
     }

     // file_url_transform_relative() was removed here.
-    return 'url(' . file_create_url($path) . ')';
+    return 'url(' . \Drupal::service('file_url_generator')->generateAbsoluteString($path) . ')';
   }

 }
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/flysystem/src/Asset/CssCollectionOptimizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flysystem\Asset;

+use Drupal\Core\File\FileSystem;
 use Drupal\Core\Asset\CssCollectionOptimizer as DrupalCssCollectionOptimizer;

 /**
@@ @@
    */
   public function deleteAll() {
     $this->state->delete('drupal_css_cache_files');
-    /** @var \Drupal\Core\File\FileSystem $file_system */
+    /** @var FileSystem $file_system */
     $file_system = \Drupal::service('file_system');
     $delete_stale = static function ($uri) use ($file_system) {
       // Default stale file threshold is 30 days (2592000 seconds).
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [ERROR] Could not process                                                      
         "modules/contrib/flysystem/tests/src/Unit/FlysystemBridgeTest.php" file,
         due to:                                                                
         "Analyze error: "Class Twistor\FlysystemStreamWrapper not found.".     
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/flysystem/tests/src/Unit/Flysystem/Adapter/MissingAdapte
         rTest.php" file, due to:                                               
         "Analyze error: "Class League\Flysystem\AdapterInterface not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/flysystem/tests/src/Unit/Flysystem/Adapter/DrupalCacheAd
         apterTest.php" file, due to:                                           
         "Analyze error: "Class League\Flysystem\AdapterInterface not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/flysystem/src/FlysystemFactory.php" 
         file, due to:                                                          
         "Analyze error: "Class League\Flysystem\AdapterInterface not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/flysystem/src/FlysystemBridge.php"  
         file, due to:                                                          
         "Analyze error: "Class Twistor\FlysystemStreamWrapper not found.".     
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/flysystem/src/Flysystem/Missing.php"
         file, due to:                                                          
         "Analyze error: "Class League\Flysystem\AdapterInterface not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/flysystem/src/Flysystem/Local.php"  
         file, due to:                                                          
         "Analyze error: "Class League\Flysystem\AdapterInterface not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/flysystem/src/Flysystem/Ftp.php" file,
         due to:                                                                
         "Analyze error: "Class League\Flysystem\AdapterInterface not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/flysystem/src/Flysystem/Adapter/MissingAdapter.php"   
         file, due to:                                                          
         "Analyze error: "Class League\Flysystem\AdapterInterface not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/flysystem/src/Flysystem/Adapter/DrupalCacheAdapter.php"
         file, due to:                                                          
         "Analyze error: "Class League\Flysystem\AdapterInterface not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [WARNING] 1 nodes were removed                                                 

