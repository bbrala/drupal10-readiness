diff --git a/modules/actions_permissions/src/ActionsPermissions.php b/modules/actions_permissions/src/ActionsPermissions.php
index 3e45e1e..9a2b8de 100644
--- a/modules/actions_permissions/src/ActionsPermissions.php
+++ b/modules/actions_permissions/src/ActionsPermissions.php
@@ -18,23 +18,23 @@ class ActionsPermissions implements ContainerInjectionInterface {
   /**
    * VBO Action manager service.
    *
-   * @var \Drupal\views_bulk_operations\Service\ViewsBulkOperationsActionManager
+   * @var ViewsBulkOperationsActionManager
    */
   protected $actionManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\views_bulk_operations\Service\ViewsBulkOperationsActionManager $actionManager
+   * @param ViewsBulkOperationsActionManager $actionManager
    *   The action manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
    */
   public function __construct(ViewsBulkOperationsActionManager $actionManager, EntityTypeManagerInterface $entityTypeManager) {
diff --git a/modules/actions_permissions/src/EventSubscriber/ActionsPermissionsEventSubscriber.php b/modules/actions_permissions/src/EventSubscriber/ActionsPermissionsEventSubscriber.php
index 5730511..dd7c8a4 100644
--- a/modules/actions_permissions/src/EventSubscriber/ActionsPermissionsEventSubscriber.php
+++ b/modules/actions_permissions/src/EventSubscriber/ActionsPermissionsEventSubscriber.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\actions_permissions\EventSubscriber;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Drupal\views_bulk_operations\Service\ViewsBulkOperationsActionManager;
 
 /**
@@ -31,7 +31,7 @@ class ActionsPermissionsEventSubscriber implements EventSubscriberInterface {
   /**
    * Alter the actions' definitions.
    *
-   * @var \Symfony\Component\EventDispatcher\Event $event
+   * @var Event $event
    *   The event to respond to.
    */
   public function alterActions(Event $event) {
diff --git a/modules/views_bulk_operations_example/src/Plugin/Action/ViewsBulkOperationExampleAction.php b/modules/views_bulk_operations_example/src/Plugin/Action/ViewsBulkOperationExampleAction.php
index 3c7b9d2..bd6c3f5 100644
--- a/modules/views_bulk_operations_example/src/Plugin/Action/ViewsBulkOperationExampleAction.php
+++ b/modules/views_bulk_operations_example/src/Plugin/Action/ViewsBulkOperationExampleAction.php
@@ -64,7 +64,7 @@ class ViewsBulkOperationExampleAction extends ViewsBulkOperationsActionBase impl
    *
    * @param array $form
    *   Form array.
-   * @param Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array
@@ -87,7 +87,7 @@ class ViewsBulkOperationExampleAction extends ViewsBulkOperationsActionBase impl
    *
    * @param array $form
    *   Form array.
-   * @param Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
diff --git a/src/Access/ViewsBulkOperationsAccess.php b/src/Access/ViewsBulkOperationsAccess.php
index b6e29a5..905b840 100644
--- a/src/Access/ViewsBulkOperationsAccess.php
+++ b/src/Access/ViewsBulkOperationsAccess.php
@@ -17,7 +17,7 @@ class ViewsBulkOperationsAccess implements AccessInterface {
   /**
    * The tempstore service.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;
 
@@ -31,9 +31,9 @@ class ViewsBulkOperationsAccess implements AccessInterface {
   /**
    * A custom access check.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
-   * @param \Drupal\Core\Routing\RouteMatch $routeMatch
+   * @param RouteMatch $routeMatch
    *   The matched route.
    */
   public function access(AccountInterface $account, RouteMatch $routeMatch) {
diff --git a/src/Action/ViewsBulkOperationsActionBase.php b/src/Action/ViewsBulkOperationsActionBase.php
index 8f9f98d..1d9d10f 100644
--- a/src/Action/ViewsBulkOperationsActionBase.php
+++ b/src/Action/ViewsBulkOperationsActionBase.php
@@ -29,7 +29,7 @@ abstract class ViewsBulkOperationsActionBase extends ActionBase implements Views
   /**
    * The processed view.
    *
-   * @var \Drupal\views\ViewExecutable
+   * @var ViewExecutable
    */
   protected $view;
 
@@ -87,7 +87,7 @@ abstract class ViewsBulkOperationsActionBase extends ActionBase implements Views
    *
    * @param array &$form
    *   Form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function validateConfigurationForm(array &$form, FormStateInterface $form_state) {
@@ -102,7 +102,7 @@ abstract class ViewsBulkOperationsActionBase extends ActionBase implements Views
    *
    * @param array &$form
    *   Form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
@@ -129,9 +129,9 @@ abstract class ViewsBulkOperationsActionBase extends ActionBase implements Views
   /**
    * Default custom access callback.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user the access check needs to be preformed against.
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The View Bulk Operations view data.
    *
    * @return bool
diff --git a/src/Action/ViewsBulkOperationsActionInterface.php b/src/Action/ViewsBulkOperationsActionInterface.php
index 296108d..106c3a2 100644
--- a/src/Action/ViewsBulkOperationsActionInterface.php
+++ b/src/Action/ViewsBulkOperationsActionInterface.php
@@ -27,7 +27,7 @@ interface ViewsBulkOperationsActionInterface extends ActionInterface {
   /**
    * Set view object.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The processed view.
    */
   public function setView(ViewExecutable $view);
@@ -58,7 +58,7 @@ interface ViewsBulkOperationsActionInterface extends ActionInterface {
    * @param array $operations
    *   Performed operations array.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse|null
+   * @return RedirectResponse|null
    *   Bach redirect response or NULL.
    */
   public static function finished($success, array $results, array $operations): ?RedirectResponse;
diff --git a/src/Action/ViewsBulkOperationsPreconfigurationInterface.php b/src/Action/ViewsBulkOperationsPreconfigurationInterface.php
index 2f87d43..9c59fad 100644
--- a/src/Action/ViewsBulkOperationsPreconfigurationInterface.php
+++ b/src/Action/ViewsBulkOperationsPreconfigurationInterface.php
@@ -16,7 +16,7 @@ interface ViewsBulkOperationsPreconfigurationInterface {
    *   Element of the views API form where configuration resides.
    * @param array $values
    *   Current values of the plugin pre-configuration.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state interface object.
    *
    * @return array
diff --git a/src/Commands/ViewsBulkOperationsCommands.php b/src/Commands/ViewsBulkOperationsCommands.php
index b7d0df5..3132af3 100644
--- a/src/Commands/ViewsBulkOperationsCommands.php
+++ b/src/Commands/ViewsBulkOperationsCommands.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\views_bulk_operations\Commands;
 
+use Drupal\user\UserStorageInterface;
 use Drush\Commands\DrushCommands;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -18,41 +19,41 @@ class ViewsBulkOperationsCommands extends DrushCommands {
   /**
    * The current user object.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The user storage.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userStorage;
 
   /**
    * Object that gets the current view data.
    *
-   * @var \Drupal\views_bulk_operations\Service\ViewsbulkOperationsViewDataInterface
+   * @var ViewsbulkOperationsViewDataInterface
    */
   protected $viewData;
 
   /**
    * Views Bulk Operations action manager.
    *
-   * @var \Drupal\views_bulk_operations\Service\ViewsBulkOperationsActionManager
+   * @var ViewsBulkOperationsActionManager
    */
   protected $actionManager;
 
   /**
    * ViewsBulkOperationsCommands object constructor.
    *
-   * @param \Drupal\Core\Session\AccountInterface $currentUser
+   * @param AccountInterface $currentUser
    *   The current user object.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\views_bulk_operations\Service\ViewsbulkOperationsViewDataInterface $viewData
+   * @param ViewsbulkOperationsViewDataInterface $viewData
    *   VBO View data service.
-   * @param \Drupal\views_bulk_operations\Service\ViewsBulkOperationsActionManager $actionManager
+   * @param ViewsBulkOperationsActionManager $actionManager
    *   VBO Action manager service.
    */
   public function __construct(
diff --git a/src/Controller/ViewsBulkOperationsController.php b/src/Controller/ViewsBulkOperationsController.php
index ef00fe3..5e6f5f2 100644
--- a/src/Controller/ViewsBulkOperationsController.php
+++ b/src/Controller/ViewsBulkOperationsController.php
@@ -24,32 +24,32 @@ class ViewsBulkOperationsController extends ControllerBase implements ContainerI
   /**
    * The tempstore service.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;
 
   /**
    * Views Bulk Operations action processor.
    *
-   * @var \Drupal\views_bulk_operations\Service\ViewsBulkOperationsActionProcessorInterface
+   * @var ViewsBulkOperationsActionProcessorInterface
    */
   protected $actionProcessor;
 
   /**
    * The Renderer service object.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * Constructs a new controller object.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $tempStoreFactory
+   * @param PrivateTempStoreFactory $tempStoreFactory
    *   Private temporary storage factory.
-   * @param \Drupal\views_bulk_operations\Service\ViewsBulkOperationsActionProcessorInterface $actionProcessor
+   * @param ViewsBulkOperationsActionProcessorInterface $actionProcessor
    *   Views Bulk Operations action processor.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The Renderer service object.
    */
   public function __construct(
@@ -104,7 +104,7 @@ class ViewsBulkOperationsController extends ControllerBase implements ContainerI
    *   The current view ID.
    * @param string $display_id
    *   The display ID of the current view.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    */
   public function updateSelection($view_id, $display_id, Request $request) {
diff --git a/src/EventSubscriber/ViewsBulkOperationsEventSubscriber.php b/src/EventSubscriber/ViewsBulkOperationsEventSubscriber.php
index 7a56d0c..e6da720 100644
--- a/src/EventSubscriber/ViewsBulkOperationsEventSubscriber.php
+++ b/src/EventSubscriber/ViewsBulkOperationsEventSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\views_bulk_operations\EventSubscriber;
 
+use Drupal\views_bulk_operations\Service\ViewsbulkOperationsViewDataInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Drupal\views_bulk_operations\Service\ViewsBulkOperationsViewDataInterface;
 use Drupal\views_bulk_operations\ViewsBulkOperationsEvent;
@@ -20,14 +21,14 @@ class ViewsBulkOperationsEventSubscriber implements EventSubscriberInterface {
   /**
    * Object that gets the current view data.
    *
-   * @var \Drupal\views_bulk_operations\Service\ViewsbulkOperationsViewDataInterface
+   * @var ViewsbulkOperationsViewDataInterface
    */
   protected $viewData;
 
   /**
    * Object constructor.
    *
-   * @param \Drupal\views_bulk_operations\Service\ViewsBulkOperationsViewDataInterface $viewData
+   * @param ViewsBulkOperationsViewDataInterface $viewData
    *   The VBO View Data provider service.
    */
   public function __construct(ViewsBulkOperationsViewDataInterface $viewData) {
@@ -48,7 +49,7 @@ class ViewsBulkOperationsEventSubscriber implements EventSubscriberInterface {
   /**
    * Respond to view data request event.
    *
-   * @var \Drupal\views_bulk_operations\ViewsBulkOperationsEvent $event
+   * @var ViewsBulkOperationsEvent $event
    *   The event to respond to.
    */
   public function provideViewData(ViewsBulkOperationsEvent $event) {
diff --git a/src/Form/ConfigureAction.php b/src/Form/ConfigureAction.php
index ec66bdb..a5ec225 100644
--- a/src/Form/ConfigureAction.php
+++ b/src/Form/ConfigureAction.php
@@ -19,32 +19,32 @@ class ConfigureAction extends FormBase {
   /**
    * The tempstore service.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;
 
   /**
    * Views Bulk Operations action manager.
    *
-   * @var \Drupal\views_bulk_operations\Service\ViewsBulkOperationsActionManager
+   * @var ViewsBulkOperationsActionManager
    */
   protected $actionManager;
 
   /**
    * Views Bulk Operations action processor.
    *
-   * @var \Drupal\views_bulk_operations\Service\ViewsBulkOperationsActionProcessorInterface
+   * @var ViewsBulkOperationsActionProcessorInterface
    */
   protected $actionProcessor;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $tempStoreFactory
+   * @param PrivateTempStoreFactory $tempStoreFactory
    *   User private temporary storage factory.
-   * @param \Drupal\views_bulk_operations\Service\ViewsBulkOperationsActionManager $actionManager
+   * @param ViewsBulkOperationsActionManager $actionManager
    *   Extended action manager object.
-   * @param \Drupal\views_bulk_operations\Service\ViewsBulkOperationsActionProcessorInterface $actionProcessor
+   * @param ViewsBulkOperationsActionProcessorInterface $actionProcessor
    *   Views Bulk Operations action processor.
    */
   public function __construct(
diff --git a/src/Form/ConfirmAction.php b/src/Form/ConfirmAction.php
index 93b1be4..a7bb2b1 100644
--- a/src/Form/ConfirmAction.php
+++ b/src/Form/ConfirmAction.php
@@ -19,32 +19,32 @@ class ConfirmAction extends FormBase {
   /**
    * The tempstore service.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;
 
   /**
    * Views Bulk Operations action manager.
    *
-   * @var \Drupal\views_bulk_operations\Service\ViewsBulkOperationsActionManager
+   * @var ViewsBulkOperationsActionManager
    */
   protected $actionManager;
 
   /**
    * Views Bulk Operations action processor.
    *
-   * @var \Drupal\views_bulk_operations\Service\ViewsBulkOperationsActionProcessorInterface
+   * @var ViewsBulkOperationsActionProcessorInterface
    */
   protected $actionProcessor;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $tempStoreFactory
+   * @param PrivateTempStoreFactory $tempStoreFactory
    *   User private temporary storage factory.
-   * @param \Drupal\views_bulk_operations\Service\ViewsBulkOperationsActionManager $actionManager
+   * @param ViewsBulkOperationsActionManager $actionManager
    *   Extended action manager object.
-   * @param \Drupal\views_bulk_operations\Service\ViewsBulkOperationsActionProcessorInterface $actionProcessor
+   * @param ViewsBulkOperationsActionProcessorInterface $actionProcessor
    *   Views Bulk Operations action processor.
    */
   public function __construct(
diff --git a/src/Form/ViewsBulkOperationsFormTrait.php b/src/Form/ViewsBulkOperationsFormTrait.php
index 20ffd52..2359609 100644
--- a/src/Form/ViewsBulkOperationsFormTrait.php
+++ b/src/Form/ViewsBulkOperationsFormTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\views_bulk_operations\Form;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Messenger\MessengerTrait;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -76,7 +77,7 @@ trait ViewsBulkOperationsFormTrait {
    * @param array $tempstore_data
    *   VBO tempstore data array.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The selection info title.
    */
   protected function getSelectionInfoTitle(array $tempstore_data) {
@@ -142,7 +143,7 @@ trait ViewsBulkOperationsFormTrait {
    * This generates a key that is used as the checkbox return value when
    * submitting the bulk form.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to calculate a bulk form key for.
    * @param mixed $base_field_value
    *   The value of the base field for this view result.
@@ -258,7 +259,7 @@ trait ViewsBulkOperationsFormTrait {
    *
    * @param array $form
    *   The form definition.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function cancelForm(array &$form, FormStateInterface $form_state) {
diff --git a/src/Plugin/Action/CancelUserAction.php b/src/Plugin/Action/CancelUserAction.php
index bd39fe7..8e6eb1f 100644
--- a/src/Plugin/Action/CancelUserAction.php
+++ b/src/Plugin/Action/CancelUserAction.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\views_bulk_operations\Plugin\Action;
 
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\user\UserInterface;
 use Drupal\views_bulk_operations\Action\ViewsBulkOperationsActionBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Plugin\PluginFormInterface;
@@ -25,21 +27,21 @@ class CancelUserAction extends ViewsBulkOperationsActionBase implements Containe
   /**
    * The current user.
    *
-   * @var Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * User module config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $userConfig;
 
   /**
    * Module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
@@ -52,11 +54,11 @@ class CancelUserAction extends ViewsBulkOperationsActionBase implements Containe
    *   The plugin Id.
    * @param mixed $plugin_definition
    *   Plugin definition.
-   * @param Drupal\Core\Session\AccountInterface $currentUser
+   * @param AccountInterface $currentUser
    *   The current user.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory object.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   Module handler service.
    */
   public function __construct(
@@ -153,7 +155,7 @@ class CancelUserAction extends ViewsBulkOperationsActionBase implements Containe
    * {@inheritdoc}
    */
   public function access($object, AccountInterface $account = NULL, $return_as_object = FALSE) {
-    /** @var \Drupal\user\UserInterface $object */
+    /** @var UserInterface $object */
     return $object->access('delete', $account, $return_as_object);
   }
 
diff --git a/src/Plugin/views/field/ViewsBulkOperationsBulkForm.php b/src/Plugin/views/field/ViewsBulkOperationsBulkForm.php
index 6f6ee5b..7d7e2cd 100644
--- a/src/Plugin/views/field/ViewsBulkOperationsBulkForm.php
+++ b/src/Plugin/views/field/ViewsBulkOperationsBulkForm.php
@@ -38,42 +38,42 @@ class ViewsBulkOperationsBulkForm extends FieldPluginBase implements CacheableDe
   /**
    * Object that gets the current view data.
    *
-   * @var \Drupal\views_bulk_operations\Service\ViewsbulkOperationsViewDataInterface
+   * @var ViewsbulkOperationsViewDataInterface
    */
   protected $viewData;
 
   /**
    * Views Bulk Operations action manager.
    *
-   * @var \Drupal\views_bulk_operations\Service\ViewsBulkOperationsActionManager
+   * @var ViewsBulkOperationsActionManager
    */
   protected $actionManager;
 
   /**
    * Views Bulk Operations action processor.
    *
-   * @var \Drupal\views_bulk_operations\Service\ViewsBulkOperationsActionProcessorInterface
+   * @var ViewsBulkOperationsActionProcessorInterface
    */
   protected $actionProcessor;
 
   /**
    * The tempstore service.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;
 
   /**
    * The current user object.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
@@ -110,17 +110,17 @@ class ViewsBulkOperationsBulkForm extends FieldPluginBase implements CacheableDe
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\views_bulk_operations\Service\ViewsbulkOperationsViewDataInterface $viewData
+   * @param ViewsbulkOperationsViewDataInterface $viewData
    *   The VBO View Data provider service.
-   * @param \Drupal\views_bulk_operations\Service\ViewsBulkOperationsActionManager $actionManager
+   * @param ViewsBulkOperationsActionManager $actionManager
    *   Extended action manager object.
-   * @param \Drupal\views_bulk_operations\Service\ViewsBulkOperationsActionProcessorInterface $actionProcessor
+   * @param ViewsBulkOperationsActionProcessorInterface $actionProcessor
    *   Views Bulk Operations action processor.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $tempStoreFactory
+   * @param PrivateTempStoreFactory $tempStoreFactory
    *   User private temporary storage factory.
-   * @param \Drupal\Core\Session\AccountInterface $currentUser
+   * @param AccountInterface $currentUser
    *   The current user object.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
    */
   public function __construct(
@@ -332,7 +332,7 @@ class ViewsBulkOperationsBulkForm extends FieldPluginBase implements CacheableDe
   /**
    * Gets the current user.
    *
-   * @return \Drupal\Core\Session\AccountInterface
+   * @return AccountInterface
    *   The current user.
    */
   protected function currentUser() {
@@ -607,7 +607,7 @@ class ViewsBulkOperationsBulkForm extends FieldPluginBase implements CacheableDe
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function viewsForm(array &$form, FormStateInterface $form_state) {
@@ -880,7 +880,7 @@ class ViewsBulkOperationsBulkForm extends FieldPluginBase implements CacheableDe
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function viewsFormSubmit(array &$form, FormStateInterface $form_state) {
@@ -974,7 +974,7 @@ class ViewsBulkOperationsBulkForm extends FieldPluginBase implements CacheableDe
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function clearSelection(array &$form, FormStateInterface $form_state) {
diff --git a/src/Service/ViewsBulkOperationsActionManager.php b/src/Service/ViewsBulkOperationsActionManager.php
index 6ac13cc..b5efef7 100644
--- a/src/Service/ViewsBulkOperationsActionManager.php
+++ b/src/Service/ViewsBulkOperationsActionManager.php
@@ -2,12 +2,12 @@
 
 namespace Drupal\views_bulk_operations\Service;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Action\ActionManager;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 
 /**
@@ -23,14 +23,14 @@ class ViewsBulkOperationsActionManager extends ActionManager {
   /**
    * Event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -47,13 +47,13 @@ class ViewsBulkOperationsActionManager extends ActionManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler to invoke the alter hook with.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
    */
   public function __construct(
@@ -164,7 +164,7 @@ class ViewsBulkOperationsActionManager extends ActionManager {
    *   A plugin definition, or NULL if the plugin ID is invalid and
    *   $exception_on_invalid is FALSE.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Thrown if $plugin_id is invalid and $exception_on_invalid is TRUE.
    */
   public function getDefinition($plugin_id, $exception_on_invalid = TRUE, array $parameters = []) {
diff --git a/src/Service/ViewsBulkOperationsActionProcessor.php b/src/Service/ViewsBulkOperationsActionProcessor.php
index a99c83f..f06100f 100644
--- a/src/Service/ViewsBulkOperationsActionProcessor.php
+++ b/src/Service/ViewsBulkOperationsActionProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\views_bulk_operations\Service;
 
+use Drupal\views\ViewExecutable;
 use Drupal\views\Views;
 use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -25,28 +26,28 @@ class ViewsBulkOperationsActionProcessor implements ViewsBulkOperationsActionPro
   /**
    * View data provider service.
    *
-   * @var \Drupal\views_bulk_operations\Service\ViewsbulkOperationsViewDataInterface
+   * @var ViewsbulkOperationsViewDataInterface
    */
   protected $viewDataService;
 
   /**
    * VBO action manager.
    *
-   * @var \Drupal\views_bulk_operations\Service\ViewsBulkOperationsActionManager
+   * @var ViewsBulkOperationsActionManager
    */
   protected $actionManager;
 
   /**
    * Current user object.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * Module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
@@ -74,7 +75,7 @@ class ViewsBulkOperationsActionProcessor implements ViewsBulkOperationsActionPro
   /**
    * The current view object.
    *
-   * @var \Drupal\views\ViewExecutable
+   * @var ViewExecutable
    */
   protected $view;
 
@@ -95,13 +96,13 @@ class ViewsBulkOperationsActionProcessor implements ViewsBulkOperationsActionPro
   /**
    * Constructor.
    *
-   * @param \Drupal\views_bulk_operations\Service\ViewsbulkOperationsViewDataInterface $viewDataService
+   * @param ViewsbulkOperationsViewDataInterface $viewDataService
    *   View data provider service.
-   * @param \Drupal\views_bulk_operations\Service\ViewsBulkOperationsActionManager $actionManager
+   * @param ViewsBulkOperationsActionManager $actionManager
    *   VBO action manager.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   Current user object.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   Module handler service.
    */
   public function __construct(
diff --git a/src/Service/ViewsBulkOperationsViewData.php b/src/Service/ViewsBulkOperationsViewData.php
index a96643b..d966fe9 100644
--- a/src/Service/ViewsBulkOperationsViewData.php
+++ b/src/Service/ViewsBulkOperationsViewData.php
@@ -19,21 +19,21 @@ class ViewsBulkOperationsViewData implements ViewsBulkOperationsViewDataInterfac
   /**
    * Event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * Pager manager service.
    *
-   * @var \Drupal\Core\Pager\PagerManagerInterface
+   * @var PagerManagerInterface
    */
   protected $pagerManager;
 
   /**
    * The current view.
    *
-   * @var \Drupal\views\ViewExecutable
+   * @var ViewExecutable
    */
   protected $view;
 
@@ -68,9 +68,9 @@ class ViewsBulkOperationsViewData implements ViewsBulkOperationsViewDataInterfac
   /**
    * Object constructor.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher service.
-   * @param \Drupal\Core\Pager\PagerManagerInterface $pagerManager
+   * @param PagerManagerInterface $pagerManager
    *   Pager manager service.
    */
   public function __construct(
@@ -94,7 +94,7 @@ class ViewsBulkOperationsViewData implements ViewsBulkOperationsViewDataInterfac
 
     // @todo Remove the conditional when Drupal 8 is no longer supported.
     if (floatval(\Drupal::VERSION) < 9) {
-      $this->eventDispatcher->dispatch(ViewsBulkOperationsEvent::NAME, $event);
+      $this->eventDispatcher->dispatch($event, ViewsBulkOperationsEvent::NAME);
     }
     else {
       $this->eventDispatcher->dispatch($event, ViewsBulkOperationsEvent::NAME);
diff --git a/src/Service/ViewsBulkOperationsViewDataInterface.php b/src/Service/ViewsBulkOperationsViewDataInterface.php
index 1619554..09e2803 100644
--- a/src/Service/ViewsBulkOperationsViewDataInterface.php
+++ b/src/Service/ViewsBulkOperationsViewDataInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\views_bulk_operations\Service;
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\views\ViewExecutable;
 use Drupal\views\Plugin\views\display\DisplayPluginBase;
 use Drupal\views\ResultRow;
@@ -14,9 +16,9 @@ interface ViewsBulkOperationsViewDataInterface {
   /**
    * Initialize additional variables.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The view object.
-   * @param \Drupal\views\Plugin\views\display\DisplayPluginBase $display
+   * @param DisplayPluginBase $display
    *   The current display plugin.
    * @param string $relationship
    *   Relationship ID.
@@ -50,10 +52,10 @@ interface ViewsBulkOperationsViewDataInterface {
   /**
    * Get entity from views row.
    *
-   * @param \Drupal\views\ResultRow $row
+   * @param ResultRow $row
    *   Views row object.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   An entity object.
    */
   public function getEntity(ResultRow $row);
@@ -74,14 +76,14 @@ interface ViewsBulkOperationsViewDataInterface {
    *
    * Must work well with standard Drupal core entity views.
    *
-   * @param \Drupal\views\ResultRow $row
+   * @param ResultRow $row
    *   Views result row.
    * @param string $relationship_id
    *   Id of the view relationship.
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The current view object.
    *
-   * @return \Drupal\Core\Entity\FieldableEntityInterface
+   * @return FieldableEntityInterface
    *   The translated entity.
    */
   public function getEntityDefault(ResultRow $row, $relationship_id, ViewExecutable $view);
diff --git a/src/ViewsBulkOperationsEvent.php b/src/ViewsBulkOperationsEvent.php
index 44ad3e5..d5a867b 100644
--- a/src/ViewsBulkOperationsEvent.php
+++ b/src/ViewsBulkOperationsEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\views_bulk_operations;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\views\ViewExecutable;
 
 /**
@@ -29,7 +29,7 @@ class ViewsBulkOperationsEvent extends Event {
   /**
    * The current view object.
    *
-   * @var \Drupal\views\ViewExecutable
+   * @var ViewExecutable
    */
   protected $view;
 
@@ -54,7 +54,7 @@ class ViewsBulkOperationsEvent extends Event {
    *   The provider of the current view.
    * @param array $viewData
    *   The views data of the current view.
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The current view.
    */
   public function __construct($provider, array $viewData, ViewExecutable $view) {
@@ -86,7 +86,7 @@ class ViewsBulkOperationsEvent extends Event {
   /**
    * Get current view.
    *
-   * @return \Drupal\views\ViewExecutable
+   * @return ViewExecutable
    *   The current view object
    */
   public function getView() {
diff --git a/tests/src/Functional/DrushCommandsTest.php b/tests/src/Functional/DrushCommandsTest.php
index ab7dc1a..1f014a7 100644
--- a/tests/src/Functional/DrushCommandsTest.php
+++ b/tests/src/Functional/DrushCommandsTest.php
@@ -34,7 +34,7 @@ class DrushCommandsTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create some nodes for testing.
diff --git a/tests/src/Functional/ViewsBulkOperationsBulkFormTest.php b/tests/src/Functional/ViewsBulkOperationsBulkFormTest.php
index a6dae55..a1bfa1b 100644
--- a/tests/src/Functional/ViewsBulkOperationsBulkFormTest.php
+++ b/tests/src/Functional/ViewsBulkOperationsBulkFormTest.php
@@ -122,11 +122,11 @@ class ViewsBulkOperationsBulkFormTest extends ViewsBulkOperationsFunctionalTestB
     $edit = [
       'test_config' => $config_value,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Apply'));
+    $this->submitForm($edit, t('Apply'));
 
     // Execute action by posting the confirmation form
     // (also tests if the submit button exists on the page).
-    $this->drupalPostForm(NULL, [], t('Execute action'));
+    $this->submitForm([], t('Execute action'));
 
     // If all went well and Batch API did its job,
     // the next page should display results.
@@ -154,9 +154,9 @@ class ViewsBulkOperationsBulkFormTest extends ViewsBulkOperationsFunctionalTestB
     foreach ([0, 2] as $index) {
       $edit["views_bulk_operations_bulk_form[$index]"] = TRUE;
     }
-    $this->drupalPostForm(NULL, $edit, t('Apply to selected items'));
-    $this->drupalPostForm(NULL, ['test_config' => 'unpublish'], t('Apply'));
-    $this->drupalPostForm(NULL, [], t('Execute action'));
+    $this->submitForm($edit, t('Apply to selected items'));
+    $this->submitForm(['test_config' => 'unpublish'], t('Apply'));
+    $this->submitForm([], t('Execute action'));
     // Again, take offset into account (-1), also take 2 excluded
     // rows into account (-2).
     // Also, check if the custom completed message appears.
@@ -236,7 +236,7 @@ class ViewsBulkOperationsBulkFormTest extends ViewsBulkOperationsFunctionalTestB
       }
 
       $this->drupalGet('views-bulk-operations-test-advanced', $options);
-      $this->drupalPostForm(NULL, $edit, t('Apply to selected items'));
+      $this->submitForm($edit, t('Apply to selected items'));
 
       // On batch-enabled processes check if provided context data is correct.
       if ($case['batch']) {
