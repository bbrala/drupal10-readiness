modules/contrib/bamboo_twig/bamboo_twig.install
modules/contrib/bamboo_twig/bamboo_twig.module
modules/contrib/bamboo_twig/bamboo_twig_config/src/TwigExtension/Config.php
modules/contrib/bamboo_twig/bamboo_twig_extensions/bamboo_twig_extensions.install
modules/contrib/bamboo_twig/bamboo_twig_extensions/src/TwigExtension/TwigArray.php
modules/contrib/bamboo_twig/bamboo_twig_extensions/src/TwigExtension/TwigDate.php
modules/contrib/bamboo_twig/bamboo_twig_extensions/src/TwigExtension/TwigText.php
modules/contrib/bamboo_twig/bamboo_twig_file/src/TwigExtension/File.php
modules/contrib/bamboo_twig/bamboo_twig_i18n/src/TwigExtension/I18n.php
modules/contrib/bamboo_twig/bamboo_twig_loader/src/TwigExtension/Loader.php
modules/contrib/bamboo_twig/bamboo_twig_loader/src/TwigExtension/Render.php
modules/contrib/bamboo_twig/bamboo_twig_path/src/TwigExtension/Path.php
modules/contrib/bamboo_twig/bamboo_twig_security/src/TwigExtension/Security.php
modules/contrib/bamboo_twig/bamboo_twig_token/src/TwigExtension/Token.php
modules/contrib/bamboo_twig/src/TwigExtension/TwigExtensionBase.php
modules/contrib/bamboo_twig/tests/modules/bamboo_twig_test/bamboo_twig_test.module
modules/contrib/bamboo_twig/tests/modules/bamboo_twig_test/src/Controller/TestsController.php
modules/contrib/bamboo_twig/tests/src/Functional/BambooTwigConfigTest.php
modules/contrib/bamboo_twig/tests/src/Functional/BambooTwigExtensionsI18nTest.php
modules/contrib/bamboo_twig/tests/src/Functional/BambooTwigExtensionsTest.php
modules/contrib/bamboo_twig/tests/src/Functional/BambooTwigFileTest.php
modules/contrib/bamboo_twig/tests/src/Functional/BambooTwigI18nTest.php
modules/contrib/bamboo_twig/tests/src/Functional/BambooTwigLoaderTest.php
modules/contrib/bamboo_twig/tests/src/Functional/BambooTwigPathTest.php
modules/contrib/bamboo_twig/tests/src/Functional/BambooTwigRenderTest.php
modules/contrib/bamboo_twig/tests/src/Functional/BambooTwigSecurityTest.php
modules/contrib/bamboo_twig/tests/src/Functional/BambooTwigTestBase.php
modules/contrib/bamboo_twig/tests/src/Functional/BambooTwigTokenTest.php
modules/contrib/bamboo_twig/tests/src/Kernel/BambooTwigSecurityTest.php

16 files with changes
=====================

1) modules/contrib/bamboo_twig/tests/src/Kernel/BambooTwigSecurityTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\bamboo_twig\Kernel;

+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\bamboo_twig_security\TwigExtension\Security;
 use Drupal\KernelTests\KernelTestBase;

 /**
@@ @@
   /**
    * The Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
     $this->installEntitySchema('user');
     $this->installSchema('system', ['sequences']);

-    /** @var \Drupal\Core\Entity\EntityTypeManager $entityTypeManager */
+    /** @var EntityTypeManager $entityTypeManager */
     $this->entityTypeManager = $this->container->get('entity_type.manager');

-    /** @var \Drupal\bamboo_twig_security\TwigExtension\Security $securityExtension */
+    /** @var Security $securityExtension */
     $this->securityExtension = $this->container->get('bamboo_twig_security.twig.security');

     // Create admin user.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/bamboo_twig/tests/src/Functional/BambooTwigTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\bamboo_twig\Functional;

+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\node\NodeInterface;
+use Drupal\taxonomy\TermInterface;
+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
+use Behat\Mink\Exception\ElementHtmlException;
+use Behat\Mink\Exception\ExpectationException;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
@@ @@
   /**
    * The Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The articles Node used by this test.
    *
-   * @var \Drupal\node\NodeInterface[]
+   * @var NodeInterface[]
    */
   protected $articles;

@@ @@
   /**
    * The tags Term used by this test.
    *
-   * @var \Drupal\taxonomy\TermInterface[]
+   * @var TermInterface[]
    */
   protected $tags;

@@ @@

     parent::setUp();

-    /** @var \Drupal\Core\Entity\EntityTypeManager $entityTypeManager */
+    /** @var EntityTypeManager $entityTypeManager */
     $this->entityTypeManager = $this->container->get('entity_type.manager');
   }

@@ @@
       FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED
     );

-    /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository */
+    /** @var EntityDisplayRepositoryInterface $entity_display_repository */
     $entity_display_repository = $this->container->get('entity_display.repository');

     // Show on default display and teaser.
@@ @@
    * @param string $css_selector
    *   The CSS selector identifying the element to check.
    *
-   * @throws Behat\Mink\Exception\ElementHtmlException
+   * @throws ElementHtmlException
    *   When the condition is not fulfilled.
    *
    * @see \Behat\Mink\WebAssert::elementExists
@@ @@
    * @param string $html
    *   Expected text.
    *
-   * @throws Behat\Mink\Exception\ElementHtmlException
+   * @throws ElementHtmlException
    *   When the condition is not fulfilled.
    *
    * @see \Behat\Mink\WebAssert::elementContains
@@ @@
    * @param string $css_selector
    *   The CSS selector identifying the element to check.
    *
-   * @throws Behat\Mink\Exception\ElementHtmlException
+   * @throws ElementHtmlException
    *   When the condition is not fulfilled.
    */
   public function assertElementEmpty($css_selector) {
@@ @@
       $css_selector
     );

-    $this->assert(empty($actual), $message);
+    $this->assertTrue(empty($actual), $message);
   }

   /**
@@ @@
    * @param int $index
    *   (optional) Link position counting from zero.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    *   Thrown when element doesn't exist, or the link label is a different one.
    *
    * @see \Behat\Mink\WebAssert::linkExists
@@ @@
    * @param int $index
    *   (optional) Link position counting from zero.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    *   Thrown when element doesn't exist, or the link label is a different one.
    *
    * @see \Behat\Mink\WebAssert::linkByHrefExists
@@ @@
    * @param string $locator
    *   Container that must have $css_selector.
    *
-   * @throws Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    *   When the condition is not fulfilled.
    *
    * @see \Behat\Mink\WebAssert::elementsCount
    ----------- end diff -----------

Applied rules:
 * AssertRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/bamboo_twig/tests/src/Functional/BambooTwigSecurityTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\bamboo_twig\Functional;

+use Drupal\Core\Entity\EntityTypeManager;
 /**
  * Tests Security twig filters and functions.
  *
@@ @@
   public function setUp(): void {
     parent::setUp();

-    /** @var \Drupal\Core\Entity\EntityTypeManager $entityTypeManager */
+    /** @var EntityTypeManager $entityTypeManager */
     $this->entityTypeManager = $this->container->get('entity_type.manager');

     $this->admin_user = $this->drupalCreateUser([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/bamboo_twig/tests/src/Functional/BambooTwigRenderTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\bamboo_twig\Functional;

+use Drupal\file\FileInterface;
+use Drupal\Component\PhpStorage\FileStorage;
+use Drupal\Core\File\FileSystemInterface;
 use Drupal\Tests\taxonomy\Traits\TaxonomyTestTrait;
 use Drupal\Core\StreamWrapper\PublicStream;

@@ @@
   /**
    * Creates and gets test image file.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   File object.
    */
   protected function createFile() {
-    /** @var \Drupal\Component\PhpStorage\FileStorage $file_storage */
+    /** @var FileStorage $file_storage */
     $file_storage = $this->container->get('entity_type.manager')->getStorage('file');
-    /** @var \Drupal\Core\File\FileSystemInterface $file_system */
+    /** @var FileSystemInterface $file_system */
     $file_system = $this->container->get('file_system');

-    $file_system->copy(drupal_get_path('module', 'bamboo_twig_test') . '/files/antistatique.jpg', PublicStream::basePath());
+    $file_system->copy(\Drupal::service('extension.list.module')->getPath('bamboo_twig_test') . '/files/antistatique.jpg', PublicStream::basePath());

     $file = $file_storage->create([
       'uri' => 'public://antistatique.jpg',
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/bamboo_twig/tests/src/Functional/BambooTwigLoaderTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\bamboo_twig\Functional;

+use Drupal\node\NodeInterface;
+use Drupal\taxonomy\TermInterface;
+use Drupal\file\FileInterface;
+use Drupal\Component\PhpStorage\FileStorage;
+use Drupal\Core\File\FileSystemInterface;
 use Drupal\Tests\taxonomy\Traits\TaxonomyTestTrait;
 use Drupal\Core\StreamWrapper\PublicStream;

@@ @@
   /**
    * The articles Node used by this test.
    *
-   * @var \Drupal\node\NodeInterface[]
+   * @var NodeInterface[]
    */
   protected $articles;

@@ @@
   /**
    * The tags Term used by this test.
    *
-   * @var \Drupal\taxonomy\TermInterface[]
+   * @var TermInterface[]
    */
   protected $tags;

@@ @@
   /**
    * Creates and gets test image file.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   File object.
    */
   protected function createFile() {
-    /** @var \Drupal\Component\PhpStorage\FileStorage $file_storage */
+    /** @var FileStorage $file_storage */
     $file_storage = $this->container->get('entity_type.manager')->getStorage('file');
-    /** @var \Drupal\Core\File\FileSystemInterface $file_system */
+    /** @var FileSystemInterface $file_system */
     $file_system = $this->container->get('file_system');

-    $file_system->copy(drupal_get_path('module', 'bamboo_twig_test') . '/files/antistatique.jpg', PublicStream::basePath());
+    $file_system->copy(\Drupal::service('extension.list.module')->getPath('bamboo_twig_test') . '/files/antistatique.jpg', PublicStream::basePath());

     $file = $file_storage->create([
       'uri' => 'public://antistatique.jpg',
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/bamboo_twig/tests/src/Functional/BambooTwigI18nTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\bamboo_twig\Functional;

+use Drupal\locale\StringStorageInterface;
 /**
  * Tests I18n twig filters and functions.
  *
@@ @@
    * Sets up translations strings needed for test.
    */
   protected function setUpTranslations() {
-    /** @var \Drupal\locale\StringStorageInterface $localStorage */
+    /** @var StringStorageInterface $localStorage */
     $localStorage = $this->container->get('locale.storage');

     $thursday = $localStorage->createString([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/bamboo_twig/tests/src/Functional/BambooTwigExtensionsI18nTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\bamboo_twig\Functional;

+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\locale\StringStorageInterface;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\Component\Gettext\PoItem;

@@ @@

     parent::setUp();

-    /** @var \Drupal\Core\Entity\EntityTypeManager $entityTypeManager */
+    /** @var EntityTypeManager $entityTypeManager */
     $this->entityTypeManager = $this->container->get('entity_type.manager');

     $this->setUpLanguages();
@@ @@
    * Sets up translations strings needed for test.
    */
   protected function setUpTranslations() {
-    /** @var \Drupal\locale\StringStorageInterface $localStorage */
+    /** @var StringStorageInterface $localStorage */
     $localStorage = $this->container->get('locale.storage');

     // Second/Seconds.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/bamboo_twig/tests/modules/bamboo_twig_test/src/Controller/TestsController.php:16

    ---------- begin diff ----------
@@ @@
   public function testLoader() {
     return [
       '#variables' => [
-        'image_path' => drupal_get_path('module', 'bamboo_twig_test') . '/files/antistatique.jpg',
+        'image_path' => \Drupal::service('extension.list.module')->getPath('bamboo_twig_test') . '/files/antistatique.jpg',
       ],
       '#theme' => 'bamboo_twig_test_loader',
     ];
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


9) modules/contrib/bamboo_twig/src/TwigExtension/TwigExtensionBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bamboo_twig\TwigExtension;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\EntityRepositoryInterface;
+use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\Core\Block\BlockManagerInterface;
+use Drupal\Core\Form\FormBuilderInterface;
+use Drupal\Core\Menu\MenuLinkTreeInterface;
+use Drupal\Core\Site\Settings;
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\user\UserStorageInterface;
+use Drupal\Component\PhpStorage\FileStorage;
+use Drupal\image\ImageStyleInterface;
+use Drupal\Core\Image\ImageFactory;
+use Drupal\Core\Field\FieldTypePluginManager;
+use Drupal\Core\Utility\Token;
+use Symfony\Component\Mime\MimeTypesInterface;
+use Drupal\Core\Datetime\DateFormatterInterface;
+use Drupal\Core\Language\LanguageManagerInterface;
+use Drupal\Core\File\FileSystemInterface;
+use Drupal\Core\StreamWrapper\StreamWrapperManagerInterface;
 use Symfony\Component\DependencyInjection\ContainerAwareTrait;
 use Symfony\Component\Mime\MimeTypes;

@@ @@
   /**
    * Lazy loading for the Drupal entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   Return the Drupal entity type manager.
    */
   protected function getEntityTypeManager() {
@@ @@
   /**
    * Lazy loading for the Drupal entity repository.
    *
-   * @return \Drupal\Core\Entity\EntityRepositoryInterface
+   * @return EntityRepositoryInterface
    *   Return the Drupal entity repository.
    */
   protected function getEntityRepository() {
@@ @@
   /**
    * Return the current route match.
    *
-   * @return \Drupal\Core\Routing\RouteMatchInterface
+   * @return RouteMatchInterface
    *   Return the current route match.
    */
   protected function getCurrentRouteMatch() {
@@ @@
   /**
    * Manages discovery and instantiation of block plugins.
    *
-   * @return \Drupal\Core\Block\BlockManagerInterface
+   * @return BlockManagerInterface
    *   Return the block manager.
    */
   protected function getPluginManagerBlock() {
@@ @@
   /**
    * Provides an interface for form building and processing.
    *
-   * @return \Drupal\Core\Form\FormBuilderInterface
+   * @return FormBuilderInterface
    *   Return the interface for form building and processing.
    */
   protected function getFormBuilder() {
@@ @@
   /**
    * Interface for loading, transforming and rendering menu link trees.
    *
-   * @return \Drupal\Core\Menu\MenuLinkTreeInterface
+   * @return MenuLinkTreeInterface
    *   Return the interface for loading, transforming and rendering menu link.
    */
   protected function getMenuLinkTree() {
@@ @@
   /**
    * Read only settings singleton.
    *
-   * @return \Drupal\Core\Site\Settings
+   * @return Settings
    *   Return The settings object.
    */
   protected function getSettingsSingleton() {
@@ @@
   /**
    * Provides an interface for a configuration object factory.
    *
-   * @return \Drupal\Core\Config\ConfigFactoryInterface
+   * @return ConfigFactoryInterface
    *   Return the interface for a configuration object factory.
    */
   protected function getConfigFactory() {
@@ @@
   /**
    * Lazy loading for the Drupal current user account proxy.
    *
-   * @return \Drupal\Core\Session\AccountInterface
+   * @return AccountInterface
    *   Return The current user account proxy.
    */
   protected function getCurrentUser() {
@@ @@
   /**
    * Return the user storage.
    *
-   * @return \Drupal\user\UserStorageInterface
+   * @return UserStorageInterface
    *   Return the user storage.
    */
   protected function getUserStorage() {
@@ @@
   /**
    * Return the block storage.
    *
-   * @return \Drupal\user\UserStorageInterface
+   * @return UserStorageInterface
    *   Return the block storage.
    */
   protected function getBlockStorage() {
@@ @@
   /**
    * Return the file storage.
    *
-   * @return \Drupal\Component\PhpStorage\FileStorage
+   * @return FileStorage
    *   Return the file storage.
    */
   protected function getFileStorage() {
@@ @@
   /**
    * Provides an interface defining an image style.
    *
-   * @return \Drupal\image\ImageStyleInterface
+   * @return ImageStyleInterface
    *   Return interface for image style.
    */
   protected function getImageStyleStorage() {
@@ @@
   /**
    * Return the factory for image objects.
    *
-   * @return \Drupal\Core\Image\ImageFactory
+   * @return ImageFactory
    *   Return the factory for image objects.
    */
   protected function getImageFactory() {
@@ @@
   /**
    * Return the factory for image objects.
    *
-   * @return \Drupal\Core\Field\FieldTypePluginManager
+   * @return FieldTypePluginManager
    *   Return the factory for image objects.
    */
   protected function getFieldTypeManager() {
@@ @@
   /**
    * Return the token service.
    *
-   * @return \Drupal\Core\Utility\Token
+   * @return Token
    *   Return the token service.
    */
   protected function getToken() {
@@ @@
   /**
    * Return a singleton mime type to file extension guesser.
    *
-   * @return \Symfony\Component\Mime\MimeTypesInterface
+   * @return MimeTypesInterface
    *   Return a MIME type object for MIME type guessing.
    */
   protected function getExtensionGuesser() {
@@ @@
   /**
    * Provides a service to handle various date related functionality.
    *
-   * @return \Drupal\Core\Datetime\DateFormatterInterface
+   * @return DateFormatterInterface
    *   The Date Formatter service.
    */
   protected function getDateFormatter() {
@@ @@
   /**
    * Returns the language manager service.
    *
-   * @return \Drupal\Core\Language\LanguageManagerInterface
+   * @return LanguageManagerInterface
    *   The Language Manager service.
    */
   protected function getLanguageManager() {
@@ @@
   /**
    * Provides helpers to operate on files and stream wrappers.
    *
-   * @return \Drupal\Core\File\FileSystemInterface
+   * @return FileSystemInterface
    *   Return the File System object.
    */
   protected function getFileSystemObject() {
@@ @@
   /**
    * Provides a StreamWrapper manager.
    *
-   * @return \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @return StreamWrapperManagerInterface
    *   The stream wrapper manager service.
    */
   protected function getStreamWrapperManager() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


10) modules/contrib/bamboo_twig/bamboo_twig_path/src/TwigExtension/Path.php:39

    ---------- begin diff ----------
@@ @@
    *   if the item is not found.
    */
   public function getSystemPath($type, $name = NULL) {
-    return drupal_get_path($type, $name);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Unsupported extension type encountered, using extension.path.resolver instead of extension.list
+    return \Drupal::service('extension.path.resolver')->getPath($type, $name);
   }

 }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/bamboo_twig/bamboo_twig_loader/src/TwigExtension/Render.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bamboo_twig_loader\TwigExtension;

+use Drupal\Core\StreamWrapper\StreamWrapperManagerInterface;
+use Drupal\block\BlockInterface;
 use Twig\TwigFunction;
 use Drupal\bamboo_twig\TwigExtension\TwigExtensionBase;
 use Drupal\Core\Block\TitleBlockPluginInterface;
@@ @@
     // When user want to preprocess the derivated instead of waiting first
     // HTTP call.
     if ($preprocess) {
-      /** @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager */
+      /** @var StreamWrapperManagerInterface $stream_wrapper_manager */
       $stream_wrapper_manager = $this->getStreamWrapperManager();

       $image_style_uri = $image_style->buildUri($path);
@@ @@
           $image_uri = $path;
         }
         else {
-          $image_uri = file_build_uri($path);
+          $image_uri = \Drupal::service('stream_wrapper_manager')->normalizeUri(\Drupal::config('system.file')->get('default_scheme') . ('://' . $path));
         }

         // Create the new image derivative.
         $image_style->createDerivative($image_uri, $image_style_uri);

-        return file_create_url($image_style_uri);
+        return \Drupal::service('file_url_generator')->generateAbsoluteString($image_style_uri);
       }
     }

@@ @@
     $view_builder = $this->getEntityTypeManager()->getViewBuilder('block');

     $build = [];
-    /** @var \Drupal\block\BlockInterface[] $blocks */
+    /** @var BlockInterface[] $blocks */
     foreach ($blocks as $id => $block) {
       $block_plugin = $block->getPlugin();
       if ($block_plugin instanceof TitleBlockPluginInterface) {
    ----------- end diff -----------

Applied rules:
 * FileBuildUriRector
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/bamboo_twig/bamboo_twig_loader/src/TwigExtension/Loader.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bamboo_twig_loader\TwigExtension;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Field\FieldItemListInterface;
+use Drupal\user\Entity\User;
+use Drupal\Core\Image\ImageInterface;
 use Twig\TwigFunction;
 use Drupal\bamboo_twig\TwigExtension\TwigExtensionBase;

@@ @@
    *   (optional) For which language the entity should be rendered, defaults to
    *   the current content language.
    *
-   * @return null|Drupal\Core\Entity\EntityInterface
+   * @return null|EntityInterface
    *   An entity object for the entity or NULL if the entity does not exist.
    */
   public function loadEntity($entity_type, $id = NULL, $langcode = NULL) {
@@ @@
    * @param string $langcode
    *   (optional) Language code to load translation.
    *
-   * @return null|Drupal\Core\Field\FieldItemListInterface
+   * @return null|FieldItemListInterface
    *   A field object for the entity or NULL if the value does not exist.
    */
   public function loadField($field_name, $entity_type, $id = NULL, $langcode = NULL) {
@@ @@
   /**
    * Return the current user object.
    *
-   * @return \Drupal\user\Entity\User|null
+   * @return User|null
    *   The current user object or NULL when anonymous.
    */
   public function loadCurrentUser() {
@@ @@
    * @param string $path
    *   The path or URI to the original image.
    *
-   * @return \Drupal\Core\Image\ImageInterface
+   * @return ImageInterface
    *   An Image object.
    */
   public function loadImage($path) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/bamboo_twig/bamboo_twig_i18n/src/TwigExtension/I18n.php:51

    ---------- begin diff ----------
@@ @@
    * Use the internal helper "format_date" to render the date
    * using the current language for texts.
    *
-   * @param \Drupal\Core\Template\TwigEnvironment $env
+   * @param TwigEnvironment $env
    *   A Twig_Environment instance.
    * @param int|string|DateTime $date
    *   A string, integer timestamp or DateTime object to convert.
@@ @@
   /**
    * Gets a translation of the entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to translate.
    * @param string|null $langcode
    *   (optional) The language code of the translation to get.
    *   NULL (default) means to use the user interface language for the page.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   An entity object when translations exists or the original entity.
    */
   public function getTranslation(EntityInterface $entity, $langcode = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/bamboo_twig/bamboo_twig_file/src/TwigExtension/File.php:75

    ---------- begin diff ----------
@@ @@
    *   then FALSE is returned
    */
   public function urlAbsolute($uri) {
-    return file_create_url($uri);
+    return \Drupal::service('file_url_generator')->generateAbsoluteString($uri);
   }

 }
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/bamboo_twig/bamboo_twig_extensions/src/TwigExtension/TwigText.php:34

    ---------- begin diff ----------
@@ @@
    * actually declared as a global function and not method of
    * Twig_Extensions_Extension_Text.
    *
-   * @param \Drupal\Core\Template\TwigEnvironment $env
+   * @param TwigEnvironment $env
    *   A Twig_Environment instance.
    * @param string $string
    *   The input string. Must be one character or longer.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/bamboo_twig/bamboo_twig_extensions/src/TwigExtension/TwigDate.php:46

    ---------- begin diff ----------
@@ @@
   /**
    * Filter for converting dates to a time ago string.
    *
-   * @param \Drupal\Core\Template\TwigEnvironment $env
+   * @param TwigEnvironment $env
    *   A Twig_Environment instance.
    * @param string|DateTime $date
    *   String or DateTime object to convert.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 16 files have been changed by Rector                                      

