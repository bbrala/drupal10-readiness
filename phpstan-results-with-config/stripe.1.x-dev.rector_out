modules/contrib/stripe/modules/stripe_examples/src/Form/SimpleCheckoutForm.php
modules/contrib/stripe/modules/stripe_examples/src/Plugin/Block/SimpleCheckoutBlock.php
modules/contrib/stripe/src/Controller/StripeWebhookController.php
modules/contrib/stripe/src/Element/Stripe.php
modules/contrib/stripe/src/Event/StripeEvents.php
modules/contrib/stripe/src/Event/StripeWebhookEvent.php
modules/contrib/stripe/src/Form/StripeSettingsForm.php
modules/contrib/stripe/stripe.module

2 files with changes
====================

1) modules/contrib/stripe/src/Event/StripeWebhookEvent.php:2

    ---------- begin diff ----------
@@ @@
 namespace Drupal\stripe\Event;

 use Stripe\Event as StripeEvent;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Wraps a stripe event for webhook.
  */
-class StripeWebhookEvent extends Event {
+class StripeWebhookEvent extends \Symfony\Contracts\EventDispatcher\Event {

   /**
    * Stripe API event object.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/stripe/src/Controller/StripeWebhookController.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Creates a new instance.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(EventDispatcherInterface $event_dispatcher) {
@@ @@
    * When this controller is created,
    * it will get the di_example.talk service and store it.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container.
    *
    * @return static
@@ @@

     // Dispatch the webhook event.
     $this->eventDispatcher
-      ->dispatch(StripeEvents::WEBHOOK, new StripeWebhookEvent($event));
+      ->dispatch(new StripeWebhookEvent($event), StripeEvents::WEBHOOK);

     return new Response('OK', Response::HTTP_OK);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 2 files have been changed by Rector                                       

