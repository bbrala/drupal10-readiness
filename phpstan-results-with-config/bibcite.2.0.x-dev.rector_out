modules/contrib/bibcite/bibcite.install
modules/contrib/bibcite/bibcite.module
modules/contrib/bibcite/modules/bibcite_bibtex/bibcite_bibtex.install
modules/contrib/bibcite/modules/bibcite_bibtex/bibcite_bibtex.module
modules/contrib/bibcite/modules/bibcite_bibtex/src/BibciteBibtexServiceProvider.php
modules/contrib/bibcite/modules/bibcite_bibtex/src/Encoder/BibtexEncoder.php
modules/contrib/bibcite/modules/bibcite_bibtex/src/Normalizer/BibtexReferenceNormalizer.php
modules/contrib/bibcite/modules/bibcite_bibtex/tests/src/Kernel/BibtexCaseDecodeTest.php
modules/contrib/bibcite/modules/bibcite_bibtex/tests/src/Kernel/BibtexDecodeTest.php
modules/contrib/bibcite/modules/bibcite_bibtex/tests/src/Kernel/BibtexEncodeTest.php
modules/contrib/bibcite/modules/bibcite_bibtex/tests/src/Unit/BibtexEncoderTest.php
modules/contrib/bibcite/modules/bibcite_endnote/bibcite_endnote.install
modules/contrib/bibcite/modules/bibcite_endnote/bibcite_endnote.module
modules/contrib/bibcite/modules/bibcite_endnote/src/BibciteEndnoteServiceProvider.php
modules/contrib/bibcite/modules/bibcite_endnote/src/Encoder/EndnoteEncoder.php
modules/contrib/bibcite/modules/bibcite_endnote/src/Normalizer/EndnoteReferenceNormalizer.php
modules/contrib/bibcite/modules/bibcite_endnote/tests/src/Kernel/Endnote7DecodeTest.php
modules/contrib/bibcite/modules/bibcite_endnote/tests/src/Kernel/Endnote7EncodeTest.php
modules/contrib/bibcite/modules/bibcite_endnote/tests/src/Kernel/Endnote8DecodeTest.php
modules/contrib/bibcite/modules/bibcite_endnote/tests/src/Kernel/Endnote8EncodeTest.php
modules/contrib/bibcite/modules/bibcite_endnote/tests/src/Kernel/TaggedDecodeTest.php
modules/contrib/bibcite/modules/bibcite_endnote/tests/src/Kernel/TaggedEncodeTest.php
modules/contrib/bibcite/modules/bibcite_entity/bibcite_entity.batch.inc
modules/contrib/bibcite/modules/bibcite_entity/bibcite_entity.install
modules/contrib/bibcite/modules/bibcite_entity/bibcite_entity.module
modules/contrib/bibcite/modules/bibcite_entity/src/Access/ReferenceAddAccessCheck.php
modules/contrib/bibcite/modules/bibcite_entity/src/Access/ReferencePreviewAccessCheck.php
modules/contrib/bibcite/modules/bibcite_entity/src/Annotation/BibciteLink.php
modules/contrib/bibcite/modules/bibcite_entity/src/ContributorAccessControlHandler.php
modules/contrib/bibcite/modules/bibcite_entity/src/ContributorCategoryListBuilder.php
modules/contrib/bibcite/modules/bibcite_entity/src/ContributorListBuilder.php
modules/contrib/bibcite/modules/bibcite_entity/src/ContributorName.php
modules/contrib/bibcite/modules/bibcite_entity/src/ContributorPropertiesService.php
modules/contrib/bibcite/modules/bibcite_entity/src/ContributorPropertiesServiceInterface.php
modules/contrib/bibcite/modules/bibcite_entity/src/ContributorRoleListBuilder.php
modules/contrib/bibcite/modules/bibcite_entity/src/ContributorStorage.php
modules/contrib/bibcite/modules/bibcite_entity/src/ContributorViewsData.php
modules/contrib/bibcite/modules/bibcite_entity/src/Controller/BibciteEntityController.php
modules/contrib/bibcite/modules/bibcite_entity/src/Controller/BibciteEntityPreviewController.php
modules/contrib/bibcite/modules/bibcite_entity/src/Controller/ReferenceViewController.php
modules/contrib/bibcite/modules/bibcite_entity/src/Entity/Contributor.php
modules/contrib/bibcite/modules/bibcite_entity/src/Entity/ContributorCategory.php
modules/contrib/bibcite/modules/bibcite_entity/src/Entity/ContributorCategoryInterface.php
modules/contrib/bibcite/modules/bibcite_entity/src/Entity/ContributorInterface.php
modules/contrib/bibcite/modules/bibcite_entity/src/Entity/ContributorRole.php
modules/contrib/bibcite/modules/bibcite_entity/src/Entity/ContributorRoleInterface.php
modules/contrib/bibcite/modules/bibcite_entity/src/Entity/Keyword.php
modules/contrib/bibcite/modules/bibcite_entity/src/Entity/KeywordInterface.php
modules/contrib/bibcite/modules/bibcite_entity/src/Entity/Reference.php
modules/contrib/bibcite/modules/bibcite_entity/src/Entity/ReferenceInterface.php
modules/contrib/bibcite/modules/bibcite_entity/src/Entity/ReferenceType.php
modules/contrib/bibcite/modules/bibcite_entity/src/Entity/ReferenceTypeInterface.php
modules/contrib/bibcite/modules/bibcite_entity/src/Form/ContributorCategoryDeleteForm.php
modules/contrib/bibcite/modules/bibcite_entity/src/Form/ContributorCategoryForm.php
modules/contrib/bibcite/modules/bibcite_entity/src/Form/ContributorForm.php
modules/contrib/bibcite/modules/bibcite_entity/src/Form/ContributorRoleDeleteForm.php
modules/contrib/bibcite/modules/bibcite_entity/src/Form/ContributorRoleForm.php
modules/contrib/bibcite/modules/bibcite_entity/src/Form/ContributorSettings.php
modules/contrib/bibcite/modules/bibcite_entity/src/Form/CslMappingForm.php
modules/contrib/bibcite/modules/bibcite_entity/src/Form/DeleteMultiple.php
modules/contrib/bibcite/modules/bibcite_entity/src/Form/KeywordForm.php
modules/contrib/bibcite/modules/bibcite_entity/src/Form/MappingForm.php
modules/contrib/bibcite/modules/bibcite_entity/src/Form/MergeConfirmForm.php
modules/contrib/bibcite/modules/bibcite_entity/src/Form/MergeForm.php
modules/contrib/bibcite/modules/bibcite_entity/src/Form/MergeMultipleForm.php
modules/contrib/bibcite/modules/bibcite_entity/src/Form/ReferenceForm.php
modules/contrib/bibcite/modules/bibcite_entity/src/Form/ReferencePreviewForm.php
modules/contrib/bibcite/modules/bibcite_entity/src/Form/ReferenceRevisionDeleteForm.php
modules/contrib/bibcite/modules/bibcite_entity/src/Form/ReferenceSettings.php
modules/contrib/bibcite/modules/bibcite_entity/src/Form/ReferenceSettingsLinksForm.php
modules/contrib/bibcite/modules/bibcite_entity/src/Form/ReferenceTypeDeleteForm.php
modules/contrib/bibcite/modules/bibcite_entity/src/Form/ReferenceTypeForm.php
modules/contrib/bibcite/modules/bibcite_entity/src/KeywordAccessControlHandler.php
modules/contrib/bibcite/modules/bibcite_entity/src/KeywordListBuilder.php
modules/contrib/bibcite/modules/bibcite_entity/src/KeywordViewsData.php
modules/contrib/bibcite/modules/bibcite_entity/src/Normalizer/ContributorNormalizer.php
modules/contrib/bibcite/modules/bibcite_entity/src/Normalizer/CslReferenceNormalizer.php
modules/contrib/bibcite/modules/bibcite_entity/src/Normalizer/KeywordNormalizer.php
modules/contrib/bibcite/modules/bibcite_entity/src/Normalizer/ReferenceNormalizerBase.php
modules/contrib/bibcite/modules/bibcite_entity/src/ParamConverter/ReferencePreviewConverter.php
modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/Action/ContributorDelete.php
modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/Action/ContributorMerge.php
modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/Action/ContributorSave.php
modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/Action/EntityDeleteBase.php
modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/Action/EntityMergeBase.php
modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/Action/EntitySaveBase.php
modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/Action/KeywordDelete.php
modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/Action/KeywordMerge.php
modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/Action/KeywordSave.php
modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/Action/ReferenceDelete.php
modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/Action/ReferenceRegenerateCitekey.php
modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/Action/ReferenceSave.php
modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/BibciteLinkPluginBase.php
modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/BibciteLinkPluginInterface.php
modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/BibciteLinkPluginManager.php
modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/Derivative/FormatLocalTask.php
modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/Derivative/MergeLocalTask.php
modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/EntityReferenceSelection/ContributorSelection.php
modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/EntityReferenceSelection/KeywordSelection.php
modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/Field/FieldFormatter/ContributorLabelFormatter.php
modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/Field/FieldType/Contributor.php
modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/Field/FieldType/ContributorFieldInterface.php
modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/Field/FieldWidget/ContributorWidget.php
modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/Field/FieldWidget/ParseNameWidget.php
modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/bibcite/link/DOI.php
modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/bibcite/link/GoogleScholar.php
modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/bibcite/link/PubMed.php
modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/views/argument/BibciteContributor.php
modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/views/argument/BibciteKeyword.php
modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/views/argument/BibciteReference.php
modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/views/argument/IdArgumentBase.php
modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/views/field/Citation.php
modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/views/field/Links.php
modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/views/filter/KeywordId.php
modules/contrib/bibcite/modules/bibcite_entity/src/ReferenceAccessControlHandler.php
modules/contrib/bibcite/modules/bibcite_entity/src/ReferenceDefaultTableMapping.php
modules/contrib/bibcite/modules/bibcite_entity/src/ReferenceEntityFormBuilder.php
modules/contrib/bibcite/modules/bibcite_entity/src/ReferenceFormBuilder.php
modules/contrib/bibcite/modules/bibcite_entity/src/ReferenceListBuilder.php
modules/contrib/bibcite/modules/bibcite_entity/src/ReferencePermissions.php
modules/contrib/bibcite/modules/bibcite_entity/src/ReferenceStorage.php
modules/contrib/bibcite/modules/bibcite_entity/src/ReferenceStorageSchema.php
modules/contrib/bibcite/modules/bibcite_entity/src/ReferenceTypeAccessControlHandler.php
modules/contrib/bibcite/modules/bibcite_entity/src/ReferenceTypeListBuilder.php
modules/contrib/bibcite/modules/bibcite_entity/src/ReferenceViewBuilder.php
modules/contrib/bibcite/modules/bibcite_entity/src/ReferenceViewsData.php
modules/contrib/bibcite/modules/bibcite_entity/src/Routing/RouteSubscriber.php
modules/contrib/bibcite/modules/bibcite_entity/src/UIOverrideProvider.php
modules/contrib/bibcite/modules/bibcite_entity/tests/bibcite_entity_test/bibcite_entity_test.install
modules/contrib/bibcite/modules/bibcite_entity/tests/src/Functional/BibciteEntityTest.php
modules/contrib/bibcite/modules/bibcite_entity/tests/src/Kernel/ContributorTest.php
modules/contrib/bibcite/modules/bibcite_entity/tests/src/Kernel/EntityCitationRenderTest.php
modules/contrib/bibcite/modules/bibcite_entity/tests/src/Kernel/ReferenceAccessTest.php
modules/contrib/bibcite/modules/bibcite_entity/tests/src/Kernel/ReferenceFieldAccessTest.php
modules/contrib/bibcite/modules/bibcite_export/bibcite_export.batch.inc
modules/contrib/bibcite/modules/bibcite_export/bibcite_export.install
modules/contrib/bibcite/modules/bibcite_export/bibcite_export.module
modules/contrib/bibcite/modules/bibcite_export/src/Access/DownloadFileAccess.php
modules/contrib/bibcite/modules/bibcite_export/src/Controller/ExportController.php
modules/contrib/bibcite/modules/bibcite_export/src/Controller/ExportDownload.php
modules/contrib/bibcite/modules/bibcite_export/src/Form/ExportAllForm.php
modules/contrib/bibcite/modules/bibcite_export/src/Form/ExportMultipleForm.php
modules/contrib/bibcite/modules/bibcite_export/src/Plugin/Action/ExportReference.php
modules/contrib/bibcite/modules/bibcite_export/src/Plugin/Derivative/FormatExportLink.php
modules/contrib/bibcite/modules/bibcite_export/src/Plugin/bibcite/link/Export.php
modules/contrib/bibcite/modules/bibcite_export/tests/src/Functional/EntityExportTest.php
modules/contrib/bibcite/modules/bibcite_export/tests/src/Kernel/FormatEncoderTestBase.php
modules/contrib/bibcite/modules/bibcite_import/bibcite_import.batch.inc
modules/contrib/bibcite/modules/bibcite_import/bibcite_import.install
modules/contrib/bibcite/modules/bibcite_import/bibcite_import.module
modules/contrib/bibcite/modules/bibcite_import/src/Form/ImportForm.php
modules/contrib/bibcite/modules/bibcite_import/src/Form/PopulateForm.php
modules/contrib/bibcite/modules/bibcite_import/src/Form/SettingsForm.php
modules/contrib/bibcite/modules/bibcite_import/tests/src/Functional/ImportAccessTest.php
modules/contrib/bibcite/modules/bibcite_import/tests/src/Functional/ImportTest.php
modules/contrib/bibcite/modules/bibcite_import/tests/src/Kernel/FormatDecoderTestBase.php
modules/contrib/bibcite/modules/bibcite_import/tests/src/Kernel/ImportBasicTest.php
modules/contrib/bibcite/modules/bibcite_marc/bibcite_marc.install
modules/contrib/bibcite/modules/bibcite_marc/bibcite_marc.module
modules/contrib/bibcite/modules/bibcite_marc/src/BibciteMarcServiceProvider.php
modules/contrib/bibcite/modules/bibcite_marc/src/Encoder/MarcEncoder.php
modules/contrib/bibcite/modules/bibcite_marc/src/Normalizer/MarcReferenceNormalizer.php
modules/contrib/bibcite/modules/bibcite_marc/tests/src/Kernel/MarcDecodeTest.php
modules/contrib/bibcite/modules/bibcite_marc/tests/src/Kernel/MarcEncodeTest.php
modules/contrib/bibcite/modules/bibcite_ris/bibcite_ris.install
modules/contrib/bibcite/modules/bibcite_ris/bibcite_ris.module
modules/contrib/bibcite/modules/bibcite_ris/src/BibciteRisServiceProvider.php
modules/contrib/bibcite/modules/bibcite_ris/src/Encoder/RISEncoder.php
modules/contrib/bibcite/modules/bibcite_ris/src/Normalizer/RISReferenceNormalizer.php
modules/contrib/bibcite/modules/bibcite_ris/tests/src/Kernel/RisDecodeTest.php
modules/contrib/bibcite/modules/bibcite_ris/tests/src/Kernel/RisEncodeTest.php
modules/contrib/bibcite/src/Annotation/BibCiteProcessor.php
modules/contrib/bibcite/src/CitationStyler.php
modules/contrib/bibcite/src/CitationStylerInterface.php
modules/contrib/bibcite/src/Csl.php
modules/contrib/bibcite/src/CslStyleListBuilder.php
modules/contrib/bibcite/src/Entity/CslStyle.php
modules/contrib/bibcite/src/Entity/CslStyleInterface.php
modules/contrib/bibcite/src/Form/CslStyleDeleteForm.php
modules/contrib/bibcite/src/Form/CslStyleFileForm.php
modules/contrib/bibcite/src/Form/CslStyleForm.php
modules/contrib/bibcite/src/Form/SettingsForm.php
modules/contrib/bibcite/src/HelpService.php
modules/contrib/bibcite/src/HelpServiceInterface.php
modules/contrib/bibcite/src/HumanNameParser.php
modules/contrib/bibcite/src/HumanNameParserInterface.php
modules/contrib/bibcite/src/Plugin/BibCiteProcessor/CiteprocPhp.php
modules/contrib/bibcite/src/Plugin/BibCiteProcessorBase.php
modules/contrib/bibcite/src/Plugin/BibCiteProcessorInterface.php
modules/contrib/bibcite/src/Plugin/BibCiteProcessorManager.php
modules/contrib/bibcite/src/Plugin/BibciteFormat.php
modules/contrib/bibcite/src/Plugin/BibciteFormatInterface.php
modules/contrib/bibcite/src/Plugin/BibciteFormatManager.php
modules/contrib/bibcite/src/Plugin/BibciteFormatManagerInterface.php
modules/contrib/bibcite/src/Plugin/Factory/FormatFactory.php
modules/contrib/bibcite/src/Routing/FormatConverter.php
modules/contrib/bibcite/tests/src/Functional/BibciteTest.php

97 files with changes
=====================

1) modules/contrib/bibcite/tests/src/Functional/BibciteTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\bibcite\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 use Symfony\Component\Yaml\Yaml;

@@ @@
   /**
    * Test user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * Test user without special permissions.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $simpleUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/bibcite/src/Routing/FormatConverter.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Format plugins manager service.
    *
-   * @var \Drupal\bibcite\Plugin\BibciteFormatManagerInterface
+   * @var BibciteFormatManagerInterface
    */
   protected $formatManager;

@@ @@
   /**
    * Format converter constructor.
    *
-   * @param \Drupal\bibcite\Plugin\BibciteFormatManagerInterface $format_manager
+   * @param BibciteFormatManagerInterface $format_manager
    *   Format plugins manager service.
    */
   public function __construct(BibciteFormatManagerInterface $format_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/bibcite/src/Plugin/BibciteFormatManager.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a BibciteFormatManager object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
    */
   public function __construct(ModuleHandlerInterface $module_handler, CacheBackendInterface $cache_backend) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/bibcite/src/Plugin/BibciteFormatInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite\Plugin;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Component\Plugin\DerivativeInspectionInterface;

@@ @@
   /**
    * Get format label.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Format label.
    */
   public function getLabel();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/bibcite/src/Plugin/BibCiteProcessorManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/bibcite/src/Plugin/BibCiteProcessor/CiteprocPhp.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * Config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/bibcite/src/HumanNameParser.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite;

+use ADCI\FullNameParser\Exception\NameParsingException;
 use ADCI\FullNameParser\Parser;

 /**
@@ @@
   /**
    * Parser object.
    *
-   * @var \ADCI\FullNameParser\Parser
+   * @var Parser
    */
   protected $parser;

@@ @@
    * @return array
    *   Parsed name parts.
    *
-   * @throws \ADCI\FullNameParser\Exception\NameParsingException
+   * @throws NameParsingException
    */
   public function parse($name) {
     $parsed_name = $this->parser->parse($name);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/bibcite/src/HelpService.php:12

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function getHelpMarkup($links, $route, $module) {
-    $module_path = drupal_get_path('module', $module);
+    $module_path = \Drupal::service('extension.list.module')->getPath($module);
     $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();
     $def = \Drupal::languageManager()->getDefaultLanguage()->getId();
     $path = $module_path . '/help/' . $lang . '/' . $route . 'html';
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/bibcite/src/Form/SettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite\Form;

+use Drupal\bibcite\Entity\CslStyleInterface;
 use Drupal\bibcite\CitationStylerInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\ConfigFormBase;
@@ @@
   /**
    * The styler service.
    *
-   * @var \Drupal\bibcite\CitationStylerInterface
+   * @var CitationStylerInterface
    */
   protected $styler;

@@ @@

     $csl_styles = $this->styler->getAvailableStyles();
     $styles_options = array_map(function ($entity) {
-      /** @var \Drupal\bibcite\Entity\CslStyleInterface $entity */
+      /** @var CslStyleInterface $entity */
       return $entity->label();
     }, $csl_styles);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/bibcite/src/Form/CslStyleForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite\Form;

+use Drupal\bibcite\Entity\CslStyleInterface;
 use Drupal\bibcite\Csl;
 use Drupal\bibcite\Entity\CslStyle;
 use Drupal\Core\Entity\EntityForm;
@@ @@
    */
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
-    /** @var \Drupal\bibcite\Entity\CslStyleInterface $csl_style */
+    /** @var CslStyleInterface $csl_style */
     $csl_style = $this->getEntity();

     $form['label'] = [
@@ @@
    * {@inheritdoc}
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\bibcite\Entity\CslStyleInterface $csl_style */
+    /** @var CslStyleInterface $csl_style */
     $csl_style = $this->getEntity();
     $csl = new Csl($form_state->getValue('csl'));

@@ @@
     }

     if (!$csl_style->isNew()) {
-      /** @var \Drupal\bibcite\Entity\CslStyleInterface $original_csl_style */
+      /** @var CslStyleInterface $original_csl_style */
       $original_csl_style = $this->entityTypeManager->getStorage($csl_style->getEntityTypeId())->load($csl_style->id());

       if ($csl_style->calculateHash() != $original_csl_style->calculateHash()) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $url_id
    *   URL ID property.
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $parent_url
    *   URL ID of parent style.
@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\bibcite\Entity\CslStyle $bibcite_csl_style */
+    /** @var CslStyle $bibcite_csl_style */
     $bibcite_csl_style = $this->entity;
     $bibcite_csl_style->setUpdatedTime(time());
     $status = $bibcite_csl_style->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/bibcite/src/Form/CslStyleFileForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite\Form;

+use Symfony\Component\HttpFoundation\File\UploadedFile;
 use Drupal\bibcite\Csl;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
   /**
    * Extract valid file from request.
    *
-   * @return null|\Symfony\Component\HttpFoundation\File\UploadedFile
+   * @return null|UploadedFile
    *   Uploaded file or NULL if file not uploaded.
    */
   protected function extractFile() {
     $all_files = $this->getRequest()->files->get('files', []);
     if (!empty($all_files['file'])) {
-      /** @var \Symfony\Component\HttpFoundation\File\UploadedFile $file */
+      /** @var UploadedFile $file */
       $file = $all_files['file'];
       if ($file->isValid()) {
         return $file;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/bibcite/src/CslStyleListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite;

+use Drupal\bibcite\Entity\CslStyleInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;

@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\bibcite\Entity\CslStyleInterface $entity */
+    /** @var CslStyleInterface $entity */
     $row['id'] = $entity->id();
     $row['label'] = $entity->label();
     $row['status'] = $entity->status() ? $this->t('Enabled') : $this->t('Disabled');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/bibcite/src/CitationStylerInterface.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * Set processor plugin.
    *
-   * @param \Drupal\bibcite\Plugin\BibCiteProcessorInterface $processor
+   * @param BibCiteProcessorInterface $processor
    *   Processor plugin object.
    *
    * @return \Drupal\bibcite\CitationStylerInterface
@@ @@
   /**
    * Get current processor plugin.
    *
-   * @return \Drupal\bibcite\Plugin\BibCiteProcessorInterface|null
+   * @return BibCiteProcessorInterface|null
    *   Current processor plugin.
    */
   public function getProcessor();
@@ @@
   /**
    * Get current CSL style.
    *
-   * @return \Drupal\bibcite\Entity\CslStyleInterface|null
+   * @return CslStyleInterface|null
    *   Current CSL style.
    */
   public function getStyle();
@@ @@
   /**
    * Set CSL style.
    *
-   * @param \Drupal\bibcite\Entity\CslStyleInterface|null $csl_style
+   * @param CslStyleInterface|null $csl_style
    *   CSL style object or NULL to reset to default style.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/bibcite/src/CitationStyler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\bibcite\Entity\CslStyleInterface;
 use Drupal\bibcite\Plugin\BibCiteProcessorInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
@@ @@
   /**
    * Processor plugin.
    *
-   * @var \Drupal\bibcite\Plugin\BibCiteProcessorInterface
+   * @var BibCiteProcessorInterface
    */
   protected $processor;

@@ @@
   /**
    * Manager of processor plugins.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $pluginManager;

@@ @@
   /**
    * Service configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $configuration;

@@ @@
   /**
    * Language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Storage of CSL style entity.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $cslStorage;

@@ @@
   /**
    * CSL style entity.
    *
-   * @var \Drupal\bibcite\Entity\CslStyleInterface
+   * @var CslStyleInterface
    */
   protected $style;

@@ @@
   /**
    * Styler constructor.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $plugin_manager
+   * @param PluginManagerInterface $plugin_manager
    *   Manager of processor plugins.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   Language manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
    */
   public function __construct(PluginManagerInterface $plugin_manager, ConfigFactoryInterface $config_factory, LanguageManagerInterface $language_manager, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/bibcite/src/Annotation/BibCiteProcessor.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


16) modules/contrib/bibcite/modules/bibcite_import/tests/src/Kernel/ImportBasicTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\bibcite_import\Kernel;

+use Drupal\bibcite\Plugin\BibciteFormatManagerInterface;
+use Symfony\Component\Serializer\Serializer;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\bibcite_entity\Entity\Reference;
@@ @@
   /**
    * Bibcite format manager service.
    *
-   * @var \Drupal\bibcite\Plugin\BibciteFormatManagerInterface
+   * @var BibciteFormatManagerInterface
    */
   protected $formatManager;

@@ @@
   /**
    * Serializer service.
    *
-   * @var \Symfony\Component\Serializer\Serializer
+   * @var Serializer
    */
   protected $serializer;

@@ @@
   /**
    * Check if values in the provided entity equal to expected values.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    * @param array $expected_values
    *   List of expected values.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/bibcite/modules/bibcite_import/tests/src/Kernel/FormatDecoderTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\bibcite_import\Kernel;

+use Symfony\Component\Serializer\Encoder\DecoderInterface;
 use Drupal\KernelTests\KernelTestBase;

 /**
@@ @@
   /**
    * Encoder instance to test.
    *
-   * @var \Symfony\Component\Serializer\Encoder\DecoderInterface
+   * @var DecoderInterface
    */
   protected $encoder;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/bibcite/modules/bibcite_import/tests/src/Functional/ImportTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\bibcite_import\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 use Symfony\Component\Yaml\Yaml;

@@ @@
   /**
    * Test user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/bibcite/modules/bibcite_import/tests/src/Functional/ImportAccessTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\bibcite_import\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * Test user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/bibcite/modules/bibcite_import/src/Form/PopulateForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Serializer service.
    *
-   * @var \Symfony\Component\Serializer\Serializer
+   * @var Serializer
    */
   protected $serializer;

@@ @@
   /**
    * Format manager service.
    *
-   * @var \Drupal\bibcite\Plugin\BibciteFormatManagerInterface
+   * @var BibciteFormatManagerInterface
    */
   protected $formatManager;

@@ @@
   /**
    * Module temp store.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $tempStore;

@@ @@
   /**
    * Create new PopulateForm class.
    *
-   * @param \Symfony\Component\Serializer\Serializer $serializer
+   * @param Serializer $serializer
    *   Serializer service.
-   * @param \Drupal\bibcite\Plugin\BibciteFormatManagerInterface $format_manager
+   * @param BibciteFormatManagerInterface $format_manager
    *   Format manager service.
-   * @param \Drupal\Core\TempStore\PrivateTempStore $temp_store
+   * @param PrivateTempStore $temp_store
    *   Module temp store.
    */
   public function __construct(Serializer $serializer, BibciteFormatManagerInterface $format_manager, PrivateTempStore $temp_store) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/bibcite/modules/bibcite_import/src/Form/ImportForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite_import\Form;

+use Symfony\Component\Serializer\Serializer;
+use Symfony\Component\HttpFoundation\File\UploadedFile;
+use Drupal\bibcite\Plugin\BibciteFormatInterface;
 use Drupal\bibcite\Plugin\BibciteFormatManagerInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Bibcite format manager service.
    *
-   * @var \Drupal\bibcite\Plugin\BibciteFormatManagerInterface
+   * @var BibciteFormatManagerInterface
    */
   protected $formatManager;

@@ @@
   /**
    * Serializer service.
    *
-   * @var \Symfony\Component\Serializer\Serializer
+   * @var Serializer
    */
   protected $serializer;

@@ @@
   /**
    * Import form constructor.
    *
-   * @param \Symfony\Component\Serializer\SerializerInterface $serializer
+   * @param SerializerInterface $serializer
    *   Import plugins manager.
-   * @param \Drupal\bibcite\Plugin\BibciteFormatManagerInterface $format_manager
+   * @param BibciteFormatManagerInterface $format_manager
    *   Bibcite format manager service.
    */
   public function __construct(SerializerInterface $serializer, BibciteFormatManagerInterface $format_manager) {
@@ @@
   public function validateForm(array &$form, FormStateInterface $form_state) {
     $all_files = $this->getRequest()->files->get('files', []);
     if (!empty($all_files['file'])) {
-      /** @var \Symfony\Component\HttpFoundation\File\UploadedFile $file_upload */
+      /** @var UploadedFile $file_upload */
       $file_upload = $all_files['file'];
       if ($file_upload->isValid()) {
         $form_state->setValue('file', $file_upload->getRealPath());
@@ @@
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $format_id = $form_state->getValue('format');
-    /** @var \Drupal\bibcite\Plugin\BibciteFormatInterface $format */
+    /** @var BibciteFormatInterface $format */
     $format = $this->formatManager->createInstance($format_id);

     $decoded = $form_state->getValue('decoded');
@@ @@
       'title' => t('Import reference data'),
       'operations' => [],
       'finished' => 'bibcite_import_batch_finished',
-      'file' => drupal_get_path('module', 'bibcite_import') . '/bibcite_import.batch.inc',
+      'file' => \Drupal::service('extension.list.module')->getPath('bibcite_import') . '/bibcite_import.batch.inc',
     ];

     foreach ($chunks as $chunk) {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/bibcite/modules/bibcite_import/bibcite_import.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\TempStore\PrivateTempStore;
 /**
  * @file
  * Module hooks implementations.
@@ @@
  * Populate form values from tempstore.
  */
 function bibcite_import_bibcite_reference_prepare_form(ReferenceInterface $entity, $operation, FormStateInterface $form_state) {
-  /** @var \Drupal\Core\TempStore\PrivateTempStore $temp_storage */
+  /** @var PrivateTempStore $temp_storage */
   $temp_storage = \Drupal::service('tempstore.private')->get('bibcite_entity_populate');
   $current_user_id = \Drupal::currentUser()->id();
   $populated_entity = $temp_storage->get($current_user_id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


23) modules/contrib/bibcite/modules/bibcite_import/bibcite_import.batch.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Symfony\Component\Serializer\Serializer;
+use Drupal\Core\Entity\EntityInterface;
 /**
  * @file
  * Batch functions.
@@ @@
  *
  * @param array $entries
  *   Array of parsed entries.
- * @param \Drupal\bibcite\Plugin\BibciteFormatInterface $format
+ * @param BibciteFormatInterface $format
  *   Instance of format plugin.
  * @param array $context
  *   The batch context array, passed by reference.
@@ @@
     $context['results']['inaccessible_entities'] = 0;
   }

-  /** @var \Symfony\Component\Serializer\Serializer $serializer */
+  /** @var Serializer $serializer */
   $serializer = \Drupal::service('serializer');

   $config = \Drupal::config('bibcite_import.settings');
@@ @@

   foreach ($entries as $entry) {
     $entity = '';
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     try {
       $entity = $serializer->denormalize($entry, Reference::class, $format->getPluginId(), $denormalize_context);
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


24) modules/contrib/bibcite/modules/bibcite_export/tests/src/Kernel/FormatEncoderTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\bibcite_export\Kernel;

+use Symfony\Component\Serializer\Encoder\EncoderInterface;
 use Drupal\KernelTests\KernelTestBase;

 /**
@@ @@
   /**
    * Encoder instance to test.
    *
-   * @var \Symfony\Component\Serializer\Encoder\EncoderInterface
+   * @var EncoderInterface
    */
   protected $encoder;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/bibcite/modules/bibcite_export/tests/src/Functional/EntityExportTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\bibcite_export\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 use Symfony\Component\Yaml\Yaml;

@@ @@
   /**
    * Test user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/bibcite/modules/bibcite_export/src/Plugin/bibcite/link/Export.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * Format manager.
    *
-   * @var \Drupal\bibcite\Plugin\BibciteFormatManagerInterface
+   * @var BibciteFormatManagerInterface
    */
   protected $formatManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/bibcite/modules/bibcite_export/src/Plugin/Derivative/FormatExportLink.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Bibcite format manager service.
    *
-   * @var \Drupal\bibcite\Plugin\BibciteFormatManagerInterface
+   * @var BibciteFormatManagerInterface
    */
   protected $formatManager;

@@ @@
   /**
    * Construct a new FormatLocalTask.
    *
-   * @param \Drupal\bibcite\Plugin\BibciteFormatManagerInterface $format_manager
+   * @param BibciteFormatManagerInterface $format_manager
    *   Bibcite format manager service.
    */
   public function __construct(BibciteFormatManagerInterface $format_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/bibcite/modules/bibcite_export/src/Plugin/Action/ExportReference.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite_export\Plugin\Action;

+use Drupal\Core\TempStore\PrivateTempStore;
+use Drupal\bibcite_entity\Entity\ReferenceInterface;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * The tempstore object.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $tempStore;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   Current user.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, PrivateTempStoreFactory $temp_store_factory, AccountInterface $current_user) {
@@ @@
    */
   public function executeMultiple(array $entities) {
     $info = [];
-    /** @var \Drupal\bibcite_entity\Entity\ReferenceInterface $entity */
+    /** @var ReferenceInterface $entity */
     foreach ($entities as $entity) {
       $info[$entity->id()] = $entity->label();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/bibcite/modules/bibcite_export/src/Form/ExportMultipleForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite_export\Form;

+use Drupal\Core\TempStore\PrivateTempStore;
 use Drupal\bibcite\Plugin\BibciteFormatManagerInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The tempstore object.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $tempStore;

@@ @@
   /**
    * The current user object.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Bibcite format manager service.
    *
-   * @var \Drupal\bibcite\Plugin\BibciteFormatManagerInterface
+   * @var BibciteFormatManagerInterface
    */
   protected $formatManager;

@@ @@
   /**
    * Construct new ExportMultipleForm object.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
-   * @param \Drupal\bibcite\Plugin\BibciteFormatManagerInterface $format_manager
+   * @param BibciteFormatManagerInterface $format_manager
    *   The bibcite format manager.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user object.
    */
   public function __construct(PrivateTempStoreFactory $temp_store_factory, BibciteFormatManagerInterface $format_manager, AccountInterface $current_user) {
@@ @@
     $batch = [
       'title' => t('Export references'),
       'operations' => $operations,
-      'file' => drupal_get_path('module', 'bibcite_export') . '/bibcite_export.batch.inc',
+      'file' => \Drupal::service('extension.list.module')->getPath('bibcite_export') . '/bibcite_export.batch.inc',
       'finished' => 'bibcite_export_batch_finished',
     ];
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/bibcite/modules/bibcite_export/src/Form/ExportAllForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite_export\Form;

+use Drupal\Core\TempStore\PrivateTempStore;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\bibcite\Plugin\BibciteFormatManagerInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Private temp store instance.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $tempStorage;

@@ @@
   /**
    * Bibcite format manager service.
    *
-   * @var \Drupal\bibcite\Plugin\BibciteFormatManagerInterface
+   * @var BibciteFormatManagerInterface
    */
   protected $formatManager;

@@ @@
    * @param int $fid
    *   File ID.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|bool
+   * @return EntityInterface|bool
    *   File object or FALSE if file does not exist.
    */
   protected function loadFile($fid) {
@@ @@
           'bibcite_export_batch_all', ['bibcite_reference', $format],
         ],
       ],
-      'file' => drupal_get_path('module', 'bibcite_export') . '/bibcite_export.batch.inc',
+      'file' => \Drupal::service('extension.list.module')->getPath('bibcite_export') . '/bibcite_export.batch.inc',
       'finished' => 'bibcite_export_batch_finished',
     ];
     batch_set($batch);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/bibcite/modules/bibcite_export/src/Controller/ExportDownload.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Storage of the File entity.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $fileStorage;

@@ @@
   /**
    * Construct a new ExportDownload controller object.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $file_storage
+   * @param EntityStorageInterface $file_storage
    *   Storage of the File entity.
    */
   public function __construct(EntityStorageInterface $file_storage) {
@@ @@
   /**
    * Download file callback.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Request object.
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   File to download.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   Response object.
    */
   public function download(Request $request, FileInterface $file) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/bibcite/modules/bibcite_export/src/Controller/ExportController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite_export\Controller;

+use Symfony\Component\Serializer\Serializer;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\bibcite\Plugin\BibciteFormatInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * The serializer service.
    *
-   * @var \Symfony\Component\Serializer\Serializer
+   * @var Serializer
    */
   protected $serializer;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *
    * @param array $entities
    *   Array of entities objects.
-   * @param \Drupal\bibcite\Plugin\BibciteFormatInterface $bibcite_format
+   * @param BibciteFormatInterface $bibcite_format
    *   Instance of format plugin.
    * @param null|string $filename
    *   Filename. Will be generated if not provided.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   Response object contains serialized reference data.
    */
   protected function processExport(array $entities, BibciteFormatInterface $bibcite_format, $filename = NULL) {
@@ @@
   /**
    * Export entity to available export format.
    *
-   * @param \Drupal\bibcite\Plugin\BibciteFormatInterface $bibcite_format
+   * @param BibciteFormatInterface $bibcite_format
    *   Instance of format plugin.
    * @param string $entity_type
    *   Entity type identifier.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity object.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   Response object contains serialized reference data.
    */
   public function export(BibciteFormatInterface $bibcite_format, $entity_type, EntityInterface $entity) {
@@ @@
   /**
    * Export multiple entities to available export formats.
    *
-   * @param \Drupal\bibcite\Plugin\BibciteFormatInterface $bibcite_format
+   * @param BibciteFormatInterface $bibcite_format
    *   Instance of format plugin.
    * @param string $entity_type
    *   Entity type identifier.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Request object.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   Response object contains serialized reference data.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Throw 404 error if Id parameter is not provided or entities not loaded.
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function exportMultiple(BibciteFormatInterface $bibcite_format, $entity_type, Request $request) {
     if (!$bibcite_format->isExportFormat()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/bibcite/modules/bibcite_export/src/Access/DownloadFileAccess.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Check if user has a permission and own the file.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Account to check access for.
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   File to grant access for.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   Access checking result.
    */
   public function access(AccountInterface $account, FileInterface $file) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


34) modules/contrib/bibcite/modules/bibcite_export/bibcite_export.batch.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\File\FileSystemInterface;
+use Drupal\Core\TempStore\PrivateTempStore;
 /**
  * @file
  * Batch callbacks.
@@ @@
  *   List of entity identifiers.
  * @param string $entity_type
  *   Entity type identifier.
- * @param \Drupal\bibcite\Plugin\BibciteFormatInterface $format
+ * @param BibciteFormatInterface $format
  *   Instance of format plugin.
  * @param array $context
  *   The batch context array.
@@ @@
   }

   if (empty($context['results'])) {
-    /** @var \Drupal\Core\File\FileSystemInterface $file_system */
+    /** @var FileSystemInterface $file_system */
     $file_system = \Drupal::service('file_system');
     $context['results']['file'] = $file_system->tempnam('temporary://', 'bibcite-');
     $context['results']['count'] = 0;
@@ @@
  *
  * @param string $entity_type
  *   Entity type identifier.
- * @param \Drupal\bibcite\Plugin\BibciteFormatInterface $format
+ * @param BibciteFormatInterface $format
  *   Instance of format plugin.
  * @param array $context
  *   The batch context array.
@@ @@
   }

   if (empty($context['results'])) {
-    /** @var \Drupal\Core\File\FileSystemInterface $file_system */
+    /** @var FileSystemInterface $file_system */
     $file_system = \Drupal::service('file_system');
     $context['results']['file'] = $file_system->tempnam('temporary://', 'bibcite-');
     $context['results']['count'] = 0;
@@ @@
 function bibcite_export_batch_finished($success, array $results, $operations) {
   $messenger = \Drupal::messenger();
   if ($success && isset($results['file'], $results['format'], $results['count'])) {
-    /** @var \Drupal\bibcite\Plugin\BibciteFormatInterface $format */
+    /** @var BibciteFormatInterface $format */
     $format = $results['format'];

-    /** @var \Drupal\Core\TempStore\PrivateTempStore $tempstorage */
+    /** @var PrivateTempStore $tempstorage */
     $tempstorage = \Drupal::service('tempstore.private')->get('bibcite_export');

     $current_user = \Drupal::currentUser();
@@ @@
       'status' => 0,
     ]);

-    if ($file->save() && $file = file_move($file, $file_schema . $file_name)) {
+    if ($file->save() && $file = \Drupal::service('file.repository')->move($file, $file_schema . $file_name)) {
       if (!empty($results['save_storage'])) {
         $file_data = [
           'id' => $file->id(),
    ----------- end diff -----------

Applied rules:
 * FileMoveRector
 * ArgumentRemoverRector


35) modules/contrib/bibcite/modules/bibcite_entity/tests/src/Kernel/ReferenceAccessTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\bibcite_entity\Kernel;

+use Drupal\Core\Entity\EntityAccessControlHandlerInterface;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\bibcite_entity\Entity\Reference;
 use Drupal\bibcite_entity\Entity\ReferenceInterface;
 use Drupal\Component\Render\FormattableMarkup;
@@ @@
   /**
    * Access handler.
    *
-   * @var \Drupal\Core\Entity\EntityAccessControlHandlerInterface
+   * @var EntityAccessControlHandlerInterface
    */
   protected $accessHandler;

@@ @@
    *   reference and account, with each key as the name of an operation
    *   (e.g. 'view', 'delete') and each value a Boolean indicating whether
    *   access to that operation should be granted.
-   * @param \Drupal\bibcite_entity\Entity\ReferenceInterface $reference
+   * @param ReferenceInterface $reference
    *   The reference object to check.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account for which to check access.
    */
   public function assertReferenceAccess(array $ops, ReferenceInterface $reference, AccountInterface $account) {
@@ @@
    *   The reference bundle to check access to.
    * @param bool $result
    *   Whether access should be granted or not.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account for which to check access.
    * @param string|null $langcode
    *   (optional) The language code indicating which translation of the reference
@@ @@
    *   Reference::create(). Override the defaults by specifying the key and value
    *   in the array.
    *
-   * @return \Drupal\bibcite_entity\Entity\ReferenceInterface
+   * @return ReferenceInterface
    *   The created reference entity.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   private function createReference(array $settings = []) {
     // Populate defaults array.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/bibcite/modules/bibcite_entity/tests/src/Kernel/EntityCitationRenderTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\bibcite_entity\Kernel;

+use Drupal\bibcite\CitationStylerInterface;
+use Symfony\Component\Serializer\Serializer;
 use Drupal\bibcite_entity\Entity\Reference;
 use Drupal\KernelTests\KernelTestBase;
 use Symfony\Component\Yaml\Yaml;
@@ @@
   /**
    * Styler service.
    *
-   * @var \Drupal\bibcite\CitationStylerInterface
+   * @var CitationStylerInterface
    */
   protected $styler;

@@ @@
   /**
    * Serializer service.
    *
-   * @var \Symfony\Component\Serializer\Serializer
+   * @var Serializer
    */
   protected $serializer;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/bibcite/modules/bibcite_entity/tests/src/Functional/BibciteEntityTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\bibcite_entity\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 use Symfony\Component\Yaml\Yaml;

@@ @@
   /**
    * Test user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * Test user without special permissions.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $simpleUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/bibcite/modules/bibcite_entity/src/UIOverrideProvider.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite_entity;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\bibcite_entity\Entity\ReferenceTypeInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Render\Element;
@@ @@
   /**
    * Reference type storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $typeStorage;

@@ @@
   /**
    * Service configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * Construct new UIOverrideProvider object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory) {
     $this->typeStorage = $entity_type_manager->getStorage('bibcite_reference_type');
@@ @@
    *   Entity bundle identifier.
    */
   public function referenceFormFieldsOverride(array &$element, $bundle_id) {
-    /** @var \Drupal\bibcite_entity\Entity\ReferenceTypeInterface $bundle */
+    /** @var ReferenceTypeInterface $bundle */
     if (($bundle = $this->typeStorage->load($bundle_id)) && $bundle->isRequiredOverride()) {
       foreach ($bundle->getFields() as $field_name => $field_config) {
         if (isset($element[$field_name])) {
@@ @@
    *   Entity bundle identifier.
    */
   public function referenceViewFieldsOverride(array &$element, $bundle_id) {
-    /** @var \Drupal\bibcite_entity\Entity\ReferenceTypeInterface $bundle */
+    /** @var ReferenceTypeInterface $bundle */
     if (($bundle = $this->typeStorage->load($bundle_id)) && $bundle->isRequiredOverride()) {
       foreach ($bundle->getFields() as $field_name => $field_config) {
         if (isset($element[$field_name])) {
@@ @@
    *   Entity bundle identifier.
    */
   public function referenceDisplayFormFieldsOverride(array &$element, $bundle_id) {
-    /** @var \Drupal\bibcite_entity\Entity\ReferenceTypeInterface $bundle */
+    /** @var ReferenceTypeInterface $bundle */
     if (($bundle = $this->typeStorage->load($bundle_id)) && $bundle->isRequiredOverride()) {
       foreach ($bundle->getFields() as $field_name => $field_config) {
         if (isset($element['fields'][$field_name])) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


39) modules/contrib/bibcite/modules/bibcite_entity/src/Routing/RouteSubscriber.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Alters existing routes for a specific collection.
    *
-   * @param \Symfony\Component\Routing\RouteCollection $collection
+   * @param RouteCollection $collection
    *   The route collection for adding routes.
    */
   protected function alterRoutes(RouteCollection $collection) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/bibcite/modules/bibcite_entity/src/ReferenceViewBuilder.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Serializer service.
    *
-   * @var \Symfony\Component\Serializer\Normalizer\NormalizerInterface
+   * @var NormalizerInterface
    */
   protected $serializer;

@@ @@
   /**
    * Config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
    * {@inheritdoc}
    */
   public static function createInstance(ContainerInterface $container, EntityTypeInterface $entity_type) {
-    /** @var \Symfony\Component\Serializer\Normalizer\NormalizerInterface $serializer */
+    /** @var NormalizerInterface $serializer */
     $serializer = $container->get('serializer');
-    /** @var \Drupal\Core\Config\ConfigFactoryInterface $config_factory */
+    /** @var ConfigFactoryInterface $config_factory */
     $config_factory = $container->get('config.factory');
-    /** @var \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository */
+    /** @var EntityRepositoryInterface $entity_repository */
     $entity_repository = $container->get('entity.repository');
-    /** @var \Drupal\Core\Language\LanguageManagerInterface $language_manager */
+    /** @var LanguageManagerInterface $language_manager */
     $language_manager = $container->get('language_manager');
-    /** @var \Drupal\Core\Theme\Registry $theme_registry */
+    /** @var Registry $theme_registry */
     $theme_registry = $container->get('theme.registry');
-    /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository */
+    /** @var EntityDisplayRepositoryInterface $entity_display_repository */
     $entity_display_repository = $container->get('entity_display.repository');
     return new static(
       $entity_type,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


41) modules/contrib/bibcite/modules/bibcite_entity/src/ReferenceStorageSchema.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite_entity;

+use Drupal\Core\Entity\Sql\DefaultTableMapping;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Entity\Sql\SqlContentEntityStorageSchema;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
@@ @@
   protected function getDedicatedTableSchema(FieldStorageDefinitionInterface $storage_definition, ContentEntityTypeInterface $entity_type = NULL) {
     $schema = parent::getDedicatedTableSchema($storage_definition, $entity_type);
     if ($storage_definition->getName() === 'bibcite_citekey') {
-      /** @var \Drupal\Core\Entity\Sql\DefaultTableMapping $table_mapping */
+      /** @var DefaultTableMapping $table_mapping */
       $table_mapping = $this->storage->getTableMapping();
       $dedicated_table_name = $table_mapping->getDedicatedDataTableName($storage_definition);
       $revision_dedicated_table_name = $table_mapping->getDedicatedRevisionTableName($storage_definition);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


42) modules/contrib/bibcite/modules/bibcite_entity/src/ReferenceStorage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite_entity;

+use Drupal\bibcite_entity\Entity\Reference;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Entity\Sql\SqlContentEntityStorage;
@@ @@
    */
   protected function saveToDedicatedTables(ContentEntityInterface $entity, $update = TRUE, $names = []) {
     $citekey = NULL;
-    /** @var \Drupal\bibcite_entity\Entity\Reference $entity */
+    /** @var Reference $entity */
     if ($citekey_item = $entity->get('bibcite_citekey')->get(0)) {
       $citekey = $citekey_item->getValue();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


43) modules/contrib/bibcite/modules/bibcite_entity/src/ReferencePermissions.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * Returns a list of Reference permissions for a given type.
    *
-   * @param \Drupal\bibcite_entity\Entity\ReferenceType $type
+   * @param ReferenceType $type
    *   The reference type.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


44) modules/contrib/bibcite/modules/bibcite_entity/src/ReferenceEntityFormBuilder.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The form builder.
    *
-   * @var \Drupal\bibcite_entity\ReferenceFormBuilder
+   * @var ReferenceFormBuilder
    */
   protected $formBuilder;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


45) modules/contrib/bibcite/modules/bibcite_entity/src/ReferenceAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite_entity;

+use Drupal\bibcite_entity\Entity\Reference;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ @@
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
     $type = $entity->bundle();
-    /** @var \Drupal\bibcite_entity\Entity\Reference $entity */
+    /** @var Reference $entity */
     switch ($operation) {
       case 'view':
         return AccessResult::allowedIf($entity->isPublished() && $account->hasPermission('view bibcite_reference'))
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


46) modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/views/filter/KeywordId.php:137

    ---------- begin diff ----------
@@ @@
     if ($this->value) {
       $result = \Drupal::entityTypeManager()->getStorage('bibcite_keyword')
         ->loadByProperties(['id' => $this->value]);
-      /** @var \Drupal\bibcite_entity\Entity\Keyword $keyword */
+      /** @var Keyword $keyword */
       foreach ($result as $keyword) {
         if ($keyword->id()) {
           $this->valueOptions[$keyword->id()] = $keyword->getName();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


47) modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/views/field/Links.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite_entity\Plugin\views\field;

+use Drupal\bibcite_entity\Plugin\BibciteLinkPluginInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Link plugin manager.
    *
-   * @var \Drupal\bibcite_entity\Plugin\BibciteLinkPluginInterface
+   * @var BibciteLinkPluginInterface
    */
   protected $linkPluginManager;

@@ @@
   /**
    * Config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


48) modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/views/field/Citation.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * Serializer service.
    *
-   * @var \Symfony\Component\Serializer\Serializer
+   * @var Serializer
    */
   protected $serializer;

@@ @@
   /**
    * Citation styler service.
    *
-   * @var \Drupal\bibcite\CitationStylerInterface
+   * @var CitationStylerInterface
    */
   protected $styler;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


49) modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/views/argument/IdArgumentBase.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityStorageInterface $storage) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


50) modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/views/argument/BibciteReference.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite_entity\Plugin\views\argument;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;

 /**
@@ @@
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager */
+    /** @var EntityTypeManagerInterface $entity_manager */
     $entity_manager = $container->get('entity_type.manager');
     $storage = $entity_manager->getStorage('bibcite_reference');
     return new static(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


51) modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/views/argument/BibciteKeyword.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite_entity\Plugin\views\argument;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;

 /**
@@ @@
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager */
+    /** @var EntityTypeManagerInterface $entity_manager */
     $entity_manager = $container->get('entity_type.manager');
     $storage = $entity_manager->getStorage('bibcite_keyword');
     return new static(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


52) modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/views/argument/BibciteContributor.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite_entity\Plugin\views\argument;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;

 /**
@@ @@
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager */
+    /** @var EntityTypeManagerInterface $entity_manager */
     $entity_manager = $container->get('entity_type.manager');
     $storage = $entity_manager->getStorage('bibcite_contributor');
     return new static(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


53) modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/Field/FieldWidget/ParseNameWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite_entity\Plugin\Field\FieldWidget;

+use Drupal\bibcite_entity\Entity\ContributorInterface;
+use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\bibcite_entity\Entity\Contributor;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemListInterface;
@@ @@
   public function formElement(FieldItemListInterface $items, $delta, array $element, array &$form, FormStateInterface $form_state) {
     $field_name = $this->fieldDefinition->getName();
     $parents = $form['#parents'];
-    /** @var \Drupal\bibcite_entity\Entity\ContributorInterface $entity */
+    /** @var ContributorInterface $entity */
     $entity = $form_state->getFormObject()->getEntity();

     $element['value'] = [
@@ @@
    *
    * @param array $form
    *   Form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    */
   public function validate(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   Form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    */
   public function submit(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\bibcite_entity\Entity\ContributorInterface $entity */
+    /** @var ContributorInterface $entity */
     $entity = $form_state->getFormObject()->getEntity();

     $entity->name = $form_state->getValue('name');
@@ @@
    *
    * @param array $form
    *   Form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|array
+   * @return AjaxResponse|array
    *   Ajax Response.
    */
   public function ajaxParseName(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


54) modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/Field/FieldWidget/ContributorWidget.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * The contributor category manager service.
    *
-   * @var \Drupal\bibcite_entity\ContributorPropertiesServiceInterface
+   * @var ContributorPropertiesServiceInterface
    */
   protected $contributorPropertiesService;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


55) modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/Derivative/MergeLocalTask.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new DynamicLocalTasks.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


56) modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/Derivative/FormatLocalTask.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Bibcite format manager service.
    *
-   * @var \Drupal\bibcite\Plugin\BibciteFormatManagerInterface
+   * @var BibciteFormatManagerInterface
    */
   protected $formatManager;

@@ @@
   /**
    * Construct a new FormatLocalTask.
    *
-   * @param \Drupal\bibcite\Plugin\BibciteFormatManagerInterface $format_manager
+   * @param BibciteFormatManagerInterface $format_manager
    *   Bibcite format manager service.
    */
   public function __construct(BibciteFormatManagerInterface $format_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


57) modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/BibciteLinkPluginManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


58) modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/BibciteLinkPluginInterface.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Build link using data from Reference entity.
    *
-   * @param \Drupal\bibcite_entity\Entity\ReferenceInterface $reference
+   * @param ReferenceInterface $reference
    *   Reference entity object.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


59) modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/BibciteLinkPluginBase.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Build URL object.
    *
-   * @param \Drupal\bibcite_entity\Entity\ReferenceInterface $reference
+   * @param ReferenceInterface $reference
    *   Reference entity object.
    */
   protected function buildUrl(ReferenceInterface $reference) {}
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


60) modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/Action/EntitySaveBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite_entity\Plugin\Action;

+use Drupal\bibcite_entity\Entity\ReferenceInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Session\AccountInterface;

@@ @@
    * {@inheritdoc}
    */
   public function access($object, AccountInterface $account = NULL, $return_as_object = FALSE) {
-    /** @var \Drupal\bibcite_entity\Entity\ReferenceInterface $object */
+    /** @var ReferenceInterface $object */
     return $object->access('update', $account, $return_as_object);
   }

@@ @@
    * {@inheritdoc}
    */
   public function execute($entity = NULL) {
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity->changed = 0;
     $entity->save();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


61) modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/Action/EntityMergeBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite_entity\Plugin\Action;

+use Drupal\Core\TempStore\PrivateTempStore;
+use Drupal\bibcite_entity\Entity\ReferenceInterface;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * The tempstore object.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $tempStore;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   Current user.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, PrivateTempStoreFactory $temp_store_factory, AccountInterface $current_user) {
@@ @@
    */
   public function executeMultiple(array $entities) {
     $info = [];
-    /** @var \Drupal\bibcite_entity\Entity\ReferenceInterface $entity */
+    /** @var ReferenceInterface $entity */
     foreach ($entities as $entity) {
       $info[$entity->id()] = $entity->label();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


62) modules/contrib/bibcite/modules/bibcite_entity/src/Plugin/Action/EntityDeleteBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite_entity\Plugin\Action;

+use Drupal\Core\TempStore\PrivateTempStore;
+use Drupal\bibcite_entity\Entity\ReferenceInterface;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * The tempstore object.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $tempStore;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   Current user.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, PrivateTempStoreFactory $temp_store_factory, AccountInterface $current_user) {
@@ @@
    * {@inheritdoc}
    */
   public function access($object, AccountInterface $account = NULL, $return_as_object = FALSE) {
-    /** @var \Drupal\bibcite_entity\Entity\ReferenceInterface $object */
+    /** @var ReferenceInterface $object */
     return $object->access('delete', $account, $return_as_object);
   }

@@ @@
    */
   public function executeMultiple(array $entities) {
     $info = [];
-    /** @var \Drupal\bibcite_entity\Entity\ReferenceInterface $entity */
+    /** @var ReferenceInterface $entity */
     foreach ($entities as $entity) {
       $info[$entity->id()] = $entity->label();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


63) modules/contrib/bibcite/modules/bibcite_entity/src/ParamConverter/ReferencePreviewConverter.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Stores the tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;

@@ @@
   /**
    * Constructs a new ReferencePreviewConverter.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The factory for the temp store object.
    */
   public function __construct(PrivateTempStoreFactory $temp_store_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


64) modules/contrib/bibcite/modules/bibcite_entity/src/Normalizer/ReferenceNormalizerBase.php:83

    ---------- begin diff ----------
@@ @@
   /**
    * Configuration factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Construct new BibliographyNormalizer object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\Core\Entity\EntityTypeRepositoryInterface $entity_type_repository
+   * @param EntityTypeRepositoryInterface $entity_type_repository
    *   The entity type repository.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager, ConfigFactoryInterface $config_factory, EntityTypeRepositoryInterface $entity_type_repository, EntityFieldManagerInterface $entity_field_manager) {
@@ @@
   /**
    * Extract fields values from reference entity.
    *
-   * @param \Drupal\bibcite_entity\Entity\ReferenceInterface $reference
+   * @param ReferenceInterface $reference
    *   Reference entity object.
    * @param string $format
    *   Serializer format.
@@ @@
   /**
    * Extract keywords labels from field.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $field_item_list
+   * @param FieldItemListInterface $field_item_list
    *   List of field items.
    *
    * @return array
@@ @@
   /**
    * Extract authors values from field.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $field_item_list
+   * @param FieldItemListInterface $field_item_list
    *   List of field items.
    *
    * @return array
@@ @@
   /**
    * Extract scalar value.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $scalar_field
+   * @param FieldItemListInterface $scalar_field
    *   Scalar items list.
    *
    * @return mixed
@@ @@
    * {@inheritdoc}
    */
   public function normalize($reference, $format = NULL, array $context = []) {
-    /** @var \Drupal\bibcite_entity\Entity\ReferenceInterface $reference */
-
+    /** @var ReferenceInterface $reference */
     $attributes = [];
     $attributes[$this->typeKey] = $this->convertEntityType($reference->bundle(), $format);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


65) modules/contrib/bibcite/modules/bibcite_entity/src/Normalizer/CslReferenceNormalizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite_entity\Normalizer;

+use Drupal\bibcite_entity\Entity\ContributorInterface;
 use Drupal\bibcite_entity\Entity\ReferenceInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Symfony\Component\Serializer\Exception\LogicException;
@@ @@
    * {@inheritdoc}
    */
   public function normalize($reference, $format = NULL, array $context = []) {
-    /** @var \Drupal\bibcite_entity\Entity\ReferenceInterface $reference */
-
+    /** @var ReferenceInterface $reference */
     $attributes = parent::normalize($reference, $format, $context);

     $contributor_key = $this->getContributorKey();
@@ @@
   /**
    * Extract authors values from field.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $field_item_list
+   * @param FieldItemListInterface $field_item_list
    *   List of field items.
    *
    * @return array
@@ @@
     $authors = [];

     foreach ($field_item_list as $field) {
-      /** @var \Drupal\bibcite_entity\Entity\ContributorInterface $contributor */
+      /** @var ContributorInterface $contributor */
       if ($contributor = $field->entity) {
         switch ($field->role) {
           case 'editor':
@@ @@
   /**
    * Extract date value to CSL format.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $date_field
+   * @param FieldItemListInterface $date_field
    *   Date item list.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


66) modules/contrib/bibcite/modules/bibcite_entity/src/Normalizer/ContributorNormalizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite_entity\Normalizer;

+use Drupal\bibcite_entity\Entity\ContributorInterface;
 use Drupal\serialization\Normalizer\EntityNormalizer;

 /**
@@ @@
    * {@inheritdoc}
    */
   public function denormalize($data, $class, $format = NULL, array $context = []) {
-    /** @var \Drupal\bibcite_entity\Entity\ContributorInterface $entity */
+    /** @var ContributorInterface $entity */
     $entity = parent::denormalize($data, $class, $format, $context);
     $entity_manager = $this->getEntityTypeManager();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


67) modules/contrib/bibcite/modules/bibcite_entity/src/KeywordAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite_entity;

+use Drupal\bibcite_entity\Entity\KeywordInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\bibcite_entity\Entity\KeywordInterface $entity */
+    /** @var KeywordInterface $entity */
     switch ($operation) {
       case 'view':
         return AccessResult::allowedIfHasPermission($account, 'view bibcite_keyword');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


68) modules/contrib/bibcite/modules/bibcite_entity/src/Form/ReferenceTypeForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite_entity\Form;

+use Drupal\bibcite_entity\Entity\ReferenceTypeInterface;
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Entity\BundleEntityFormBase;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * Constructs the NodeTypeForm object.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(EntityFieldManagerInterface $entity_field_manager) {
@@ @@
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container) {
-    /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager */
+    /** @var EntityFieldManagerInterface $entity_field_manager */
     $entity_field_manager = $container->get('entity_field.manager');
     return new static(
       $entity_field_manager
@@ @@
    */
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
-    /** @var \Drupal\bibcite_entity\Entity\ReferenceTypeInterface $reference_type */
+    /** @var ReferenceTypeInterface $reference_type */
     $reference_type = $this->entity;

     $form['label'] = [
@@ @@

     $fields_configuration = $reference_type->getFields();
     $fields = \Drupal::service('entity_field.manager')->getBaseFieldDefinitions('bibcite_reference', 'bibcite_reference');
-    /** @var \Drupal\Core\Field\FieldDefinitionInterface $field */
+    /** @var FieldDefinitionInterface $field */
     foreach ($fields as $field) {
       $field_name = $field->getName();
       if (in_array($field_name, $excluded_fields)) {
@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\bibcite_entity\Entity\ReferenceTypeInterface $reference_type */
+    /** @var ReferenceTypeInterface $reference_type */
     $reference_type = $this->entity;
     $reference_type->setNewRevision($form_state->getValue('revision'));
     $fields = $this->entityFieldManager->getFieldDefinitions('bibcite_reference', $reference_type->id());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


69) modules/contrib/bibcite/modules/bibcite_entity/src/Form/ReferenceSettingsLinksForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Link plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $bibciteLinkManager;

@@ @@
   /**
    * Constructs a new ReferenceSettingsLinksForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $bibcite_link_manager
+   * @param PluginManagerInterface $bibcite_link_manager
    *   Link plugin manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, PluginManagerInterface $bibcite_link_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


70) modules/contrib/bibcite/modules/bibcite_entity/src/Form/ReferenceRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite_entity\Form;

+use Drupal\bibcite_entity\entity\Reference;
 use Drupal\bibcite_entity\Entity\ReferenceType;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Datetime\DateFormatterInterface;
@@ @@
   /**
    * The reference revision.
    *
-   * @var \Drupal\bibcite_entity\entity\Reference
+   * @var Reference
    */
   protected $revision;

@@ @@
   /**
    * The reference storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $referenceStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new ReferenceRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $referenceStorage
+   * @param EntityStorageInterface $referenceStorage
    *   The reference storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityStorageInterface $referenceStorage, Connection $connection, DateFormatterInterface $date_formatter) {
@@ @@
   public static function create(ContainerInterface $container) {
     /** @var DateFormatterInterface $date_formatter */
     $date_formatter = $container->get('date.formatter');
-    /** @var \Drupal\Core\Database\Connection $connection */
+    /** @var Connection $connection */
     $connection = $container->get('database');
     return new static(
       $container->get('entity_type.manager')->getStorage('bibcite_reference'),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


71) modules/contrib/bibcite/modules/bibcite_entity/src/Form/ReferencePreviewForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Constructs a new ReferencePreviewForm.
    *
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function __construct(EntityDisplayRepositoryInterface $entity_display_repository, ConfigFactoryInterface $config_factory) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
-   * @param \Drupal\Core\Entity\EntityInterface $reference
+   * @param EntityInterface $reference
    *   The reference being previews.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


72) modules/contrib/bibcite/modules/bibcite_entity/src/Form/ReferenceForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite_entity\Form;

+use Drupal\Core\TempStore\PrivateTempStoreFactory;
+use Drupal\Core\TempStore\TempStoreException;
+use Drupal\bibcite_entity\Entity\Reference;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ @@
   /**
    * The Current User object.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
    */
   public function form(array $form, FormStateInterface $form_state) {
     // Try to restore from temp store, this must be done before calling.
-    /** @var \Drupal\Core\TempStore\PrivateTempStoreFactory $tempStoreFactory */
+    /** @var PrivateTempStoreFactory $tempStoreFactory */
     $tempStoreFactory = \Drupal::getContainer()->get('tempstore.private');
     $store = $tempStoreFactory->get('bibcite_reference_preview');

@@ @@
     $request_uuid = \Drupal::request()->query->get('uuid');

     if (!$form_state->isRebuilding() && $request_uuid && $preview = $store->get($request_uuid)) {
-      /** @var \Drupal\Core\Form\FormStateInterface $preview */
+      /** @var FormStateInterface $preview */
       $form_state->setStorage($preview->getStorage());
       $form_state->setUserInput($preview->getUserInput());

@@ @@
    *
    * @param array $form
    *   Nested array of form elements that comprise the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
+   * @throws TempStoreException
    */
   public function preview(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\TempStore\PrivateTempStoreFactory $tempStoreFactory */
+    /** @var PrivateTempStoreFactory $tempStoreFactory */
     $tempStoreFactory = \Drupal::getContainer()->get('tempstore.private');
     $store = $tempStoreFactory->get('bibcite_reference_preview');

-    /** @var \Drupal\bibcite_entity\Entity\Reference $entity */
+    /** @var Reference $entity */
     $entity = $form_state->getFormObject()->getEntity();

     $entity->inPreview = TRUE;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


73) modules/contrib/bibcite/modules/bibcite_entity/src/Form/MergeMultipleForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite_entity\Form;

+use Drupal\Core\TempStore\PrivateTempStore;
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The tempstore object.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $tempStore;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The current user object.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The entity type.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface
+   * @var EntityTypeInterface
    */
   protected $entityType;

@@ @@
   /**
    * Constructs a DeleteMultiple form object.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $manager
+   * @param EntityTypeManagerInterface $manager
    *   The entity manager.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user object.
    */
   public function __construct(PrivateTempStoreFactory $temp_store_factory, EntityTypeManagerInterface $manager, AccountInterface $current_user) {
@@ @@
       'title' => t('Merging'),
       'operations' => $operations,
       'finished' => 'bibcite_entity_merge_entity_finished',
-      'file' => drupal_get_path('module', 'bibcite_entity') . '/bibcite_entity.batch.inc',
+      'file' => \Drupal::service('extension.list.module')->getPath('bibcite_entity') . '/bibcite_entity.batch.inc',
     ];

     batch_set($batch);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


74) modules/contrib/bibcite/modules/bibcite_entity/src/Form/MergeForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite_entity\Form;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ @@
   /**
    * The entity object to merge.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;

@@ @@
   /**
    * Title callback.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Page title.
    */
   public function getTitle() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


75) modules/contrib/bibcite/modules/bibcite_entity/src/Form/MergeConfirmForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite_entity\Form;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\bibcite_entity\Entity\ReferenceInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * This entity will be merged to target.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $source;

@@ @@
   /**
    * Source entity will be merged to this one.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $target;

@@ @@
         ],
       ],
       'finished' => 'bibcite_entity_merge_entity_finished',
-      'file' => drupal_get_path('module', 'bibcite_entity') . '/bibcite_entity.batch.inc',
+      'file' => \Drupal::service('extension.list.module')->getPath('bibcite_entity') . '/bibcite_entity.batch.inc',
     ];

     batch_set($batch);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


76) modules/contrib/bibcite/modules/bibcite_entity/src/Form/MappingForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite_entity\Form;

+use Drupal\Core\Config\Config;
+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\bibcite_entity\Entity\ReferenceInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\bibcite\Plugin\BibciteFormatInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * Configuration object.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;

@@ @@
   /**
    * Entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Mapping form constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   Entity field manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager) {
@@ @@
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state, $bibcite_format = NULL) {
-    /** @var \Drupal\bibcite\Plugin\BibciteFormatInterface $bibcite_format */
-
+    /** @var BibciteFormatInterface $bibcite_format */
     if (!$this->config) {
       $this->initConfiguration($bibcite_format);
     }
@@ @@
       'metatag',
     ];
     $options = array_map(function ($field) {
-      /** @var \Drupal\Core\Field\FieldDefinitionInterface $field */
+      /** @var FieldDefinitionInterface $field */
       return $field->getLabel();
     }, array_diff_key($fields, array_flip($excluded_fields)));
     // Sort options alphabetically.
@@ @@
     $entities = $storage->loadMultiple();

     return array_map(function ($entity) {
-      /** @var \Drupal\bibcite_entity\Entity\ReferenceInterface $entity */
+      /** @var ReferenceInterface $entity */
       return $entity->label();
     }, $entities);
   }
@@ @@
   /**
    * Init mapping configuration object.
    *
-   * @param \Drupal\bibcite\Plugin\BibciteFormatInterface $bibcite_format
+   * @param BibciteFormatInterface $bibcite_format
    *   Format plugin instance.
    */
   protected function initConfiguration(BibciteFormatInterface $bibcite_format) {
@@ @@
   /**
    * Mapping page title callback.
    *
-   * @param \Drupal\bibcite\Plugin\BibciteFormatInterface $bibcite_format
+   * @param BibciteFormatInterface $bibcite_format
    *   Format plugin.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Translatable title.
    */
   public static function formTitle(BibciteFormatInterface $bibcite_format) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


77) modules/contrib/bibcite/modules/bibcite_entity/src/Form/DeleteMultiple.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite_entity\Form;

+use Drupal\Core\TempStore\PrivateTempStore;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The tempstore object.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $tempStore;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The current user object.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Constructs a DeleteMultiple form object.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $manager
+   * @param EntityTypeManagerInterface $manager
    *   The entity manager.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user object.
    */
   public function __construct(PrivateTempStoreFactory $temp_store_factory, EntityTypeManagerInterface $manager, AccountInterface $current_user) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


78) modules/contrib/bibcite/modules/bibcite_entity/src/Form/ContributorRoleDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite_entity\Form;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * Find if author of this role is in reference entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function checkInReference() {
     $storage = $this->entityTypeManager->getStorage('bibcite_reference');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


79) modules/contrib/bibcite/modules/bibcite_entity/src/Form/ContributorCategoryDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite_entity\Form;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * Find if author of this category is in reference entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function checkInReference() {
     $storage = $this->entityTypeManager->getStorage('bibcite_reference');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


80) modules/contrib/bibcite/modules/bibcite_entity/src/Entity/ReferenceInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite_entity\Entity;

+use Drupal\Core\TypedData\Exception\MissingDataException;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
 use Drupal\user\EntityOwnerInterface;
@@ @@
    * @return string
    *   Generated citekey.
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    */
   public function generateCitekey();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


81) modules/contrib/bibcite/modules/bibcite_entity/src/Entity/Reference.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite_entity\Entity;

+use Drupal\bibcite\CitationStylerInterface;
 use Drupal\Core\Entity\EntityPublishedTrait;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
@@ @@
    */
   public function cite($style = NULL) {
     // @todo Make a better dependency injection.
-    /** @var \Drupal\bibcite\CitationStylerInterface $styler */
+    /** @var CitationStylerInterface $styler */
     $styler = \Drupal::service('bibcite.citation_styler');

     if ($style) {
@@ @@
     $pattern = '';

     $type_storage = $this->entityTypeManager()->getStorage('bibcite_reference_type');
-    /** @var \Drupal\bibcite_entity\Entity\ReferenceTypeInterface $bundle */
+    /** @var ReferenceTypeInterface $bundle */
     $bundle = $type_storage->load($this->bundle());
     if ($bundle && !$pattern = $bundle->getCitekeyPattern()) {
       // Fallback to global pattern if it's not configured on bundle level.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


82) modules/contrib/bibcite/modules/bibcite_entity/src/Controller/ReferenceViewController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite_entity\Controller;

+use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Entity\Controller\EntityViewController;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * Reference config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container) {
-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager */
+    /** @var EntityTypeManagerInterface $entity_manager */
     $entity_manager = $container->get('entity_type.manager');
-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = $container->get('renderer');
-    /** @var \Drupal\Core\Config\ConfigFactoryInterface $config_factory */
+    /** @var ConfigFactoryInterface $config_factory */
     $config_factory = $container->get('config.factory');
     $config = $config_factory->get('bibcite_entity.reference.settings');
     return new static(
@@ @@
   /**
    * Page title callback for a reference revision.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $bibcite_reference_revision
+   * @param EntityInterface $bibcite_reference_revision
    *   The reference revision.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


83) modules/contrib/bibcite/modules/bibcite_entity/src/Controller/BibciteEntityPreviewController.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $repository;

@@ @@
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container) {
-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager */
+    /** @var EntityTypeManagerInterface $entity_manager */
     $entity_manager = $container->get('entity_type.manager');
-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = $container->get('renderer');
-    /** @var \Drupal\Core\Entity\EntityRepositoryInterface $repository */
+    /** @var EntityRepositoryInterface $repository */
     $repository = $container->get('entity.repository');
     return new static($entity_manager, $renderer, $repository);
   }
@@ @@
   /**
    * The _title_callback for the page that renders a reference in preview.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $bibcite_reference_preview
+   * @param EntityInterface $bibcite_reference_preview
    *   The current reference entity.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


84) modules/contrib/bibcite/modules/bibcite_entity/src/Controller/BibciteEntityController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite_entity\Controller;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\bibcite_entity\Entity\ReferenceTypeInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ @@
    * @return array
    *   A reference submission form.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function add(ReferenceTypeInterface $bibcite_reference_type) {
     $entity = $this->entityTypeManager()->getStorage('bibcite_reference')->create([
@@ @@
    * @see ControllerBase
    *   Copy of method from original parent class.
    *
-   * @return \Symfony\Component\DependencyInjection\ContainerInterface
+   * @return ContainerInterface
    *   The service container.
    */
   private function container() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


85) modules/contrib/bibcite/modules/bibcite_entity/src/ContributorStorage.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * Init contributor properties by full name string.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Contributor entity.
    * @param array $values
    *   Array of values.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


86) modules/contrib/bibcite/modules/bibcite_entity/src/ContributorPropertiesServiceInterface.php:49

    ---------- begin diff ----------
@@ @@
   /**
    * Sort callback for config entities with weight parameter.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity_first
+   * @param ConfigEntityInterface $entity_first
    *   First entity to compare.
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity_second
+   * @param ConfigEntityInterface $entity_second
    *   Second entity to compare.
    *
    * @return int
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


87) modules/contrib/bibcite/modules/bibcite_entity/src/ContributorPropertiesService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite_entity;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;

@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
   /**
    * Construct new UIOverrideProvider object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
       uasort($entities, [$this, 'sortByWeightProperty']);

       $this->categoriesList = array_map(function ($entity) {
-        /** @var \Drupal\Core\Entity\EntityInterface $entity */
+        /** @var EntityInterface $entity */
         return $entity->label();
       }, $entities);
     }
@@ @@
       uasort($entities, [$this, 'sortByWeightProperty']);

       $this->rolesList = array_map(function ($entity) {
-        /** @var \Drupal\Core\Entity\EntityInterface $entity */
+        /** @var EntityInterface $entity */
         return $entity->label();
       }, $entities);
     }
@@ @@
   /**
    * Sort callback for config entities with weight parameter.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity_first
+   * @param ConfigEntityInterface $entity_first
    *   First entity to compare.
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity_second
+   * @param ConfigEntityInterface $entity_second
    *   Second entity to compare.
    *
    * @return int
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


88) modules/contrib/bibcite/modules/bibcite_entity/src/ContributorName.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite_entity;

+use Drupal\bibcite_entity\Entity\ContributorInterface;
+use Drupal\bibcite_entity\Entity\Contributor;
 use Drupal\Core\Field\FieldItemList;
 use Drupal\Core\TypedData\ComputedItemListTrait;

@@ @@
    * {@inheritdoc}
    */
   protected function computeValue() {
-    /** @var \Drupal\bibcite_entity\Entity\ContributorInterface $contributor */
+    /** @var ContributorInterface $contributor */
     $contributor = $this->parent->getValue();

     $arguments = [];
@@ @@
    *   Full name string.
    */
   protected function updateContributorEntity($name) {
-    /** @var \Drupal\bibcite_entity\Entity\Contributor $entity */
+    /** @var Contributor $entity */
     $entity = $this->getEntity();
     if ($name) {
       $name_parts = \Drupal::service('bibcite.human_name_parser')->parse(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


89) modules/contrib/bibcite/modules/bibcite_entity/src/ContributorAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite_entity;

+use Drupal\bibcite_entity\Entity\ContributorInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\bibcite_entity\Entity\ContributorInterface $entity */
+    /** @var ContributorInterface $entity */
     switch ($operation) {
       case 'view':
         return AccessResult::allowedIfHasPermission($account, 'view bibcite_contributor');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


90) modules/contrib/bibcite/modules/bibcite_entity/src/Annotation/BibciteLink.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bibcite_entity\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


91) modules/contrib/bibcite/modules/bibcite_entity/src/Access/ReferencePreviewAccessCheck.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a ReferencePreviewAccessCheck object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Checks access to the reference preview page.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
-   * @param \Drupal\bibcite_entity\Entity\ReferenceInterface $bibcite_reference_preview
+   * @param ReferenceInterface $bibcite_reference_preview
    *   The reference that is being previewed.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


92) modules/contrib/bibcite/modules/bibcite_entity/src/Access/ReferenceAddAccessCheck.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a EntityCreateAccessCheck object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Checks access to the reference add page for the reference type.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
-   * @param \Drupal\bibcite_entity\Entity\ReferenceTypeInterface $bibcite_reference_type
+   * @param ReferenceTypeInterface $bibcite_reference_type
    *   (optional) The reference type.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


93) modules/contrib/bibcite/modules/bibcite_entity/bibcite_entity.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Component\Plugin\PluginManagerInterface;
+use Drupal\Core\Entity\EntityForm;
+use Drupal\field_ui\Form\EntityViewDisplayEditForm;
 /**
  * @file
  * Module hooks.
@@ @@
  */
 function bibcite_entity_bibcite_reference_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
   if ($component = $display->getComponent('bibcite_links')) {
-    /** @var \Drupal\Component\Plugin\PluginManagerInterface $manager */
+    /** @var PluginManagerInterface $manager */
     $manager = \Drupal::service('plugin.manager.bibcite_link');
     $config = \Drupal::config('bibcite_entity.reference.settings');

@@ @@
  * Override reference entity fields attributes and regroups them.
  */
 function bibcite_entity_form_bibcite_reference_form_alter(&$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\Core\Entity\EntityForm $form_object */
+  /** @var EntityForm $form_object */
   $form_object = $form_state->getFormObject();
   $entity = $form_object->getEntity();

@@ @@
  */
 function bibcite_entity_form_entity_view_display_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   if ($form['#entity_type'] == 'bibcite_reference') {
-    /** @var \Drupal\field_ui\Form\EntityViewDisplayEditForm $object */
+    /** @var EntityViewDisplayEditForm $object */
     $object = $form_state->getBuildInfo()['callback_object'];
     $mode = $object->getEntity()->getMode();
     if ($mode == 'table') {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


94) modules/contrib/bibcite/modules/bibcite_entity/bibcite_entity.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Config\ConfigInstallerInterface;
+use Drupal\Core\Extension\ModuleInstallerInterface;
+use Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface;
+use Drupal\bibcite_entity\Entity\ReferenceTypeInterface;
 /**
  * @file
  * Module installation hooks implementation.
@@ @@
  * Install new optional configuration (administration views).
  */
 function bibcite_entity_update_8003() {
-  /** @var \Drupal\Core\Config\ConfigInstallerInterface $installer */
+  /** @var ConfigInstallerInterface $installer */
   $installer = \Drupal::service('config.installer');

   $configs = [
@@ @@
     $installer->installDefaultConfig('module', 'bibcite_entity');
   }

-  $path = drupal_get_path('module', 'bibcite_entity') . '/' . InstallStorage::CONFIG_OPTIONAL_DIRECTORY;
+  $path = \Drupal::service('extension.list.module')->getPath('bibcite_entity') . '/' . InstallStorage::CONFIG_OPTIONAL_DIRECTORY;
   $storage = new FileStorage($path);
   $installer->installOptionalConfig($storage);
 }
@@ @@
  */
 function bibcite_entity_update_8013() {
   // Enable Entity module.
-  /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
+  /** @var ModuleInstallerInterface $module_installer */
   $module_installer = \Drupal::service('module_installer');
   $module_installer->install(['entity']);

@@ @@
   $definition_update_manager = \Drupal::entityDefinitionUpdateManager();

   // Mark various fields as revisionable.
-  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
+  /** @var EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
   $last_installed_schema_repository = \Drupal::service('entity.last_installed_schema.repository');
   $field_storage_definitions = $last_installed_schema_repository->getLastInstalledFieldStorageDefinitions('bibcite_reference');
   $fields_to_update = [
@@ @@

   // Update Provider options for fields.
   $reference = $definition_update_manager->getEntityType('bibcite_reference');
-  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
+  /** @var EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
   $last_installed_schema_repository = \Drupal::service('entity.last_installed_schema.repository');
   $field_storage_definitions = $last_installed_schema_repository->getLastInstalledFieldStorageDefinitions('bibcite_reference');
   $fields_to_update = [
@@ @@
  */
 function bibcite_entity_update_8024() {
   // Enable Token module.
-  /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
+  /** @var ModuleInstallerInterface $module_installer */
   $module_installer = \Drupal::service('module_installer');
   $module_installer->install(['token']);

@@ @@
  * Remove module's custom visibility settings.
  */
 function bibcite_entity_update_8025() {
-  /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository */
+  /** @var EntityDisplayRepositoryInterface $entity_display_repository */
   $entity_display_repository = \Drupal::service('entity_display.repository');
   $reference_type_storage = \Drupal::entityTypeManager()->getStorage('bibcite_reference_type');

@@ @@

   $form_modes = array_keys($entity_display_repository->getFormModeOptions('bibcite_reference'));
   $view_modes = array_keys($entity_display_repository->getViewModeOptions('bibcite_reference'));
-  /** @var \Drupal\bibcite_entity\Entity\ReferenceTypeInterface $reference_type */
+  /** @var ReferenceTypeInterface $reference_type */
   foreach ($reference_type_storage->loadMultiple() as $reference_type) {
     if ($reference_type->isRequiredOverride()) {
       $bundle = $reference_type->id();
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


95) modules/contrib/bibcite/modules/bibcite_entity/bibcite_entity.batch.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\bibcite_entity\Entity\ReferenceInterface;
 /**
  * @file
  * Batch callbacks.
@@ @@

   $reference_entities = $reference_storage->loadMultiple($query->execute());

-  /** @var \Drupal\bibcite_entity\Entity\ReferenceInterface $reference_entity */
+  /** @var ReferenceInterface $reference_entity */
   foreach ($reference_entities as $reference_entity) {
     $field = $reference_entity->get($field_name);
     $field_value = $field->getValue();
@@ @@
  * @param array $operations
  *   If $success is FALSE, contains the operations that remained unprocessed.
  *
- * @return \Symfony\Component\HttpFoundation\RedirectResponse
+ * @return RedirectResponse
  *   Redirect to collection route.
  */
 function bibcite_entity_merge_entity_finished($success, array $results, array $operations) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


96) modules/contrib/bibcite/modules/bibcite_bibtex/src/Normalizer/BibtexReferenceNormalizer.php:49

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function normalize($reference, $format = NULL, array $context = []) {
-    /** @var \Drupal\bibcite_entity\Entity\ReferenceInterface $reference */
+    /** @var ReferenceInterface $reference */
     $attributes = [];
     $attributes[$this->typeKey] = $this->convertEntityType($reference->bundle(), $format);

@@ @@
   /**
    * Extract contributors values from field.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $field_item_list
+   * @param FieldItemListInterface $field_item_list
    *   List of field items.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


97) modules/contrib/bibcite/bibcite.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\bibcite\CitationStylerInterface;
 /**
  * @file
  * Main module hooks.
@@ @@
  * Implements hook_preprocess_HOOK().
  */
 function bibcite_preprocess_bibcite_citation(&$variables) {
-  /** @var \Drupal\bibcite\CitationStylerInterface $styler */
+  /** @var CitationStylerInterface $styler */
   $styler = \Drupal::service('bibcite.citation_styler');
   $data = $variables['data'];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 97 files have been changed by Rector                                      

