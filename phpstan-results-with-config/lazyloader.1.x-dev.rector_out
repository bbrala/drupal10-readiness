modules/contrib/lazyloader/lazyloader.api.php
modules/contrib/lazyloader/lazyloader.install
modules/contrib/lazyloader/lazyloader.module
modules/contrib/lazyloader/src/Form/AdminConfigure.php
modules/contrib/lazyloader/src/Form/AdminExclude.php
modules/contrib/lazyloader/src/Hooks/ThemeRegistryAlter.php
modules/contrib/lazyloader/src/ResponsiveImage.php
modules/contrib/lazyloader/src/ThemePreprocess.php
modules/contrib/lazyloader/src/VisibilityChecker.php
modules/contrib/lazyloader/src/tests/ExcludeTestCase.php
modules/contrib/lazyloader/src/tests/TestBase.php
modules/contrib/lazyloader/tests/src/Kernel/ThemeTest.php
modules/contrib/lazyloader/tests/src/Unit/ResponsiveImageTest.php
modules/contrib/lazyloader/tests/src/Unit/ThemePreprocessTest.php

8 files with changes
====================

1) modules/contrib/lazyloader/tests/src/Kernel/ThemeTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\lazyloader\Kernel;

+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
+use Drupal\Core\File\FileSystemInterface;
+use Drupal\Core\Render\RendererInterface;
 use Drupal\Core\StreamWrapper\PublicStream;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ @@
   /**
    * The node.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $node;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('node');
@@ @@
       'name' => 'medium',
     ])->save();

-    /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display */
+    /** @var EntityViewDisplayInterface $display */
     $display = \Drupal::service('entity_display.repository')->getViewDisplay('node', 'page');
     $display->setComponent('field_images', [
       'type' => 'image',
@@ @@
    *   List of files in public:// that match the filter(s).
    */
   protected function getTestFiles($type, $size = NULL) {
-    /** @var \Drupal\Core\File\FileSystemInterface $file_system */
+    /** @var FileSystemInterface $file_system */
     $file_system = \Drupal::service('file_system');
     if (empty($this->generatedTestFiles)) {

@@ @@
     $request->attributes->set(RouteObjectInterface::ROUTE_NAME, '<front>');
     \Drupal::requestStack()->push($request);

-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = \Drupal::service('renderer');

     $image = $this->node->field_images;
-    $path = file_url_transform_relative(file_create_url($image->entity->uri->value));
+    $path = \Drupal::service('file_url_generator')->generateString($image->entity->uri->value);

     \Drupal::configFactory()->getEditable('lazyloader.configuration')
       ->set('enabled', TRUE)
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/lazyloader/src/tests/TestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lazyloader\Tests;

+use Drupal\user\UserInterface;
+use Drupal\node\Entity\Node;
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\file\Entity\File;
@@ @@
   /**
    * The user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * The node.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $node;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->createContentType([
@@ @@
     ]);
     $field->save();

-    /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display */
+    /** @var EntityViewDisplayInterface $display */
     $display = \Drupal::service('entity_display.repository')->getViewDisplay('node', 'page', 'full');
     $display->setComponent('field_images', [
       'type' => 'image',
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/lazyloader/src/VisibilityChecker.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lazyloader;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Condition\ConditionAccessResolverTrait;
 use Drupal\Core\Condition\ConditionManager;
 use Drupal\Core\Condition\ConditionPluginCollection;
@@ @@
   /**
    * The image style storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $imageStyleStorage;

@@ @@
   /**
    * The condition manager.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $conditionManager;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Creates a new VisibilityChecker instance.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Condition\ConditionManager $condition_manager
+   * @param ConditionManager $condition_manager
    *   The condition manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, ConditionManager $condition_manager) {
@@ @@
   /**
    * Gets the condition list.
    *
-   * @return \Drupal\Core\Condition\ConditionPluginCollection
+   * @return ConditionPluginCollection
    *   The condition list.
    */
   protected function getConditionList() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/lazyloader/src/ThemePreprocess.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Creates a new ThemePreprocess instance.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/lazyloader/src/Hooks/ThemeRegistryAlter.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   private $config;

@@ @@
   /**
    * Creates a new ThemeRegistryAlter instance.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The config factory.
    */
   public function __construct(ModuleHandlerInterface $moduleHandler, ConfigFactoryInterface $config) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/lazyloader/src/Form/AdminExclude.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lazyloader\Form;

+use Drupal\Core\Config\Config;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Condition\ConditionInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\ConfigFormBase;
@@ @@
   /**
    * The Lazyloader exclude configuration entity.
    *
-   * @var \Drupal\Core\Config\Config|\Drupal\Core\Config\ImmutableConfig
+   * @var Config|ImmutableConfig
    */
   protected $configuration;

@@ @@
   /**
    * The Plugin Manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $conditionManager;

@@ @@
   /**
    * Constructs a \Drupal\lazyloader\Form\LazyLoaderAdminConfigure object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $condition_manager
+   * @param PluginManagerInterface $condition_manager
    *   The condition manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, PluginManagerInterface $condition_manager) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
     //   https://www.drupal.org/node/2284687.
     $visibility = $this->config('lazyloader.exclude')->get('visibility');
     foreach ($this->conditionManager->getDefinitions() as $condition_id => $definition) {
-      /** @var \Drupal\Core\Condition\ConditionInterface $condition */
+      /** @var ConditionInterface $condition */
       $condition = $this->conditionManager->createInstance($condition_id, isset($visibility[$condition_id]) ? $visibility[$condition_id] : []);
       $form_state->set(['conditions', $condition_id], $condition);
       $condition_form = $condition->buildConfigurationForm([], $form_state);
@@ @@
    *
    * @param array $form
    *   A nested array form elements comprising the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function validateVisibility(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/lazyloader/src/Form/AdminConfigure.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The theme registry.
    *
-   * @var \Drupal\Core\Theme\Registry
+   * @var Registry
    */
   protected $themeRegistry;

@@ @@
   /**
    * Constructs a \Drupal\lazyloader\Form\LazyLoaderAdminConfigure object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Theme\Registry $theme_registry
+   * @param Registry $theme_registry
    *   The theme registry.
    */
   public function __construct(ConfigFactoryInterface $config_factory, Registry $theme_registry) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/lazyloader/lazyloader.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\lazyloader\ThemePreprocess;
+use Drupal\lazyloader\VisibilityChecker;
 /**
  * @file
  * Lazyloader Module.
@@ @@
     return;
   }

-  /** @var \Drupal\lazyloader\ThemePreprocess $preprocess */
+  /** @var ThemePreprocess $preprocess */
   $preprocess = \Drupal::service('lazyloader.preprocess');
   $vars = $preprocess->addCacheTags($vars);
   $vars = $preprocess->attachLibrary($vars);
@@ @@
   unset($vars['attributes']['srcset']);

   if ($vars['theme_hook_original'] !== 'lazyloader_image') {
-    /** @var \Drupal\lazyloader\VisibilityChecker $checker */
+    /** @var VisibilityChecker $checker */
     $checker = \Drupal::service('lazyloader.visibility_checker');
     if (!$checker->isEnabled() || !$checker->isValidFilename($uri)
       || !$checker->isValidImageStyle($uri)) {
@@ @@
   }

   $vars['attributes']['class'][] = 'lazyload';
-  $vars['attributes']['src'] = file_create_url($image_placeholder_src);
+  $vars['attributes']['src'] = \Drupal::service('file_url_generator')->generateAbsoluteString($image_placeholder_src);

   if (isset($responsive_image)) {
     $vars['attributes']['data-srcset'] = $responsive_image->__toString();
   }
   else {
-    $vars['attributes']['data-src'] = file_create_url($uri);
+    $vars['attributes']['data-src'] = \Drupal::service('file_url_generator')->generateAbsoluteString($uri);
   }

 }
@@ @@
   if (_lazyloader_alter($vars)) {
     return;
   }
-  /** @var \Drupal\lazyloader\ThemePreprocess $preprocess */
+  /** @var ThemePreprocess $preprocess */
   $preprocess = \Drupal::service('lazyloader.preprocess');
   $vars = $preprocess->attachLibrary($vars);
   $vars = $preprocess->addCacheTags($vars);

-  /** @var \Drupal\lazyloader\VisibilityChecker $checker */
+  /** @var VisibilityChecker $checker */
   $checker = \Drupal::service('lazyloader.visibility_checker');
   if (!$checker->isEnabled()) {
     return;
   }

-  /** @var \Drupal\Core\Template\Attribute $image_attributes */
+  /** @var Attribute $image_attributes */
   foreach ($vars['sources'] as $key => $image_attributes) {
     if(empty($image_attributes['srcset'])){
       continue;
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector


 [OK] 8 files have been changed by Rector                                       

