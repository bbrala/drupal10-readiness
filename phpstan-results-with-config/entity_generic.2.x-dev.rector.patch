diff --git a/entity_generic.module b/entity_generic.module
index 8ee4161..8814233 100644
--- a/entity_generic.module
+++ b/entity_generic.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Render\Element;
 use Drupal\Core\Url;
 use Drupal\Core\Cache\Cache;
@@ -83,7 +84,7 @@ function entity_generic_types() {
 /**
  * Checks whether the current page is the full page view of the passed-in entity.
  *
- * @param \Drupal\entity_generic\Entity\BasicInterface $entity
+ * @param BasicInterface $entity
  *   An entity.
  *
  * @return int|false
@@ -112,14 +113,14 @@ function entity_generic_is_generic(EntityInterface $entity) {
  * Implements hook_entity_view_alter().
  *
  * @param array $build
- * @param \Drupal\Core\Entity\EntityInterface $entity
- * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+ * @param EntityInterface $entity
+ * @param EntityViewDisplayInterface $display
  */
-function entity_generic_entity_view_alter(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {
+function entity_generic_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
   // Generalize the entity-type-specific defaults for easier default theming.
   if ($entity instanceof BasicInterface) {
     $app_root = \Drupal::service('app.root');
-    $file_path = $app_root . '/' . drupal_get_path('module', $entity->getEntityType()->getProvider()) . '/templates/entity-generic--' . strtr($entity->getEntityTypeId(), '_', '-') . '.html.twig';
+    $file_path = $app_root . '/' . \Drupal::service('extension.list.module')->getPath($entity->getEntityType()->getProvider()) . '/templates/entity-generic--' . strtr($entity->getEntityTypeId(), '_', '-') . '.html.twig';
     if (file_exists($file_path)) {
       $build['#theme'] = 'entity_generic__' . $entity->getEntityTypeId();
     }
@@ -135,7 +136,7 @@ function entity_generic_entity_view_alter(array &$build, \Drupal\Core\Entity\Ent
  * @param array $variables
  */
 function entity_generic_theme_suggestions_entity_generic_alter(array &$suggestions, array $variables) {
-  /** @var \Drupal\entity_generic\Entity\BasicInterface $entity */
+  /** @var BasicInterface $entity */
   $entity = $variables['elements']['#entity_generic'];
   $sanitized_view_mode = 'vm-' . strtr($variables['elements']['#view_mode'], '.', '_');
 
@@ -157,10 +158,10 @@ function entity_generic_theme_suggestions_entity_generic_alter(array &$suggestio
 function entity_generic_theme_registry_alter(&$theme_registry) {
   $app_root = \Drupal::service('app.root');
   foreach (entity_generic_types() as $type => $definition) {
-    $file_path = $app_root . '/' . drupal_get_path('module', $definition->getProvider()) . '/templates/entity-generic--' . strtr($type, '_', '-') . '.html.twig';
+    $file_path = $app_root . '/' . \Drupal::service('extension.list.module')->getPath($definition->getProvider()) . '/templates/entity-generic--' . strtr($type, '_', '-') . '.html.twig';
     if (file_exists($file_path)) {
       $theme_registry['entity_generic__' . $type] = [
-        'path' => drupal_get_path('module', $definition->getProvider()) . '/templates',
+        'path' => \Drupal::service('extension.list.module')->getPath($definition->getProvider()) . '/templates',
         'preprocess functions' => [
           'template_preprocess',
           'template_preprocess_entity_generic',
@@ -168,7 +169,7 @@ function entity_generic_theme_registry_alter(&$theme_registry) {
         ],
         'render element' => 'elements',
         'template' => 'entity-generic--' . strtr($type, '_', '-'),
-        'theme path' => drupal_get_path('module', $definition->getProvider()),
+        'theme path' => \Drupal::service('extension.list.module')->getPath($definition->getProvider()),
         'type' => 'module',
       ];
     }
diff --git a/src/Controller/GenericController.php b/src/Controller/GenericController.php
index 5c7e946..16558b3 100644
--- a/src/Controller/GenericController.php
+++ b/src/Controller/GenericController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_generic\Controller;
 
+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Render\RendererInterface;
@@ -37,23 +38,23 @@ class GenericController extends ControllerBase implements ContainerInjectionInte
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   public $renderer;
 
   /**
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    */
   public function __construct(DateFormatterInterface $date_formatter, RendererInterface $renderer, RequestStack $request_stack) {
     $this->dateFormatter = $date_formatter;
@@ -86,7 +87,7 @@ class GenericController extends ControllerBase implements ContainerInjectionInte
    *
    * Redirects to specific add form if only one entity type is available.
    *
-   * @return array|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return array|RedirectResponse
    *   A render array for a list of the entity types that can be added; however,
    *   if there is only one entity type defined, the function
    *   will return a RedirectResponse to the entity add page for that one entity
diff --git a/src/Controller/GenericModalController.php b/src/Controller/GenericModalController.php
index 5f42882..d5486eb 100644
--- a/src/Controller/GenericModalController.php
+++ b/src/Controller/GenericModalController.php
@@ -19,12 +19,12 @@ use Symfony\Component\HttpFoundation\RequestStack;
 class GenericModalController extends GenericController {
 
   /**
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
-   * @param \Drupal\Core\Entity\EntityFormBuilderInterface $entity_form_builder
+   * @param RequestStack $request_stack
+   * @param EntityFormBuilderInterface $entity_form_builder
    */
   public function __construct(DateFormatterInterface $date_formatter, RendererInterface $renderer, RequestStack $request_stack, EntityFormBuilderInterface $entity_form_builder) {
     parent::__construct($date_formatter, $renderer, $request_stack);
@@ -50,7 +50,7 @@ class GenericModalController extends GenericController {
    * @param array $values
    * @param array $args
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   public function composeEntity($entity_class, array $values, array $args = []) {
     return $entity_class::create($values);
@@ -61,7 +61,7 @@ class GenericModalController extends GenericController {
    *
    * @param array $args
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   public function addGenericEntityModal(array $args = []) {
     if (!isset($args['entity_type'])) {
@@ -113,9 +113,9 @@ class GenericModalController extends GenericController {
   /**
    * Callback for editing the entity using modal form.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   public function editGenericEntityModal(EntityInterface $entity) {
     $request_parameters = \Drupal::request()->query->all();
@@ -140,9 +140,9 @@ class GenericModalController extends GenericController {
   /**
    * Callback for editing the entity using modal form.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   public function toggleStatusModal(EntityInterface $entity) {
     $request_parameters = \Drupal::request()->query->all();
@@ -167,9 +167,9 @@ class GenericModalController extends GenericController {
   /**
    * Callback for deleting the entity using modal form.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   public function deleteGenericEntityModal(EntityInterface $entity) {
     $request_parameters = \Drupal::request()->query->all();
diff --git a/src/Entity/EntityApprovedInterface.php b/src/Entity/EntityApprovedInterface.php
index 720a5d1..6d9b3be 100644
--- a/src/Entity/EntityApprovedInterface.php
+++ b/src/Entity/EntityApprovedInterface.php
@@ -39,7 +39,7 @@ interface EntityApprovedInterface {
    * @param bool $approved
    *   TRUE to set this entity to approved, FALSE to set it to unapproved.
    *
-   * @return \Drupal\entity_generic\Entity\GenericInterface
+   * @return GenericInterface
    *   The called entity.
    */
   public function setApproved($approved);
@@ -58,7 +58,7 @@ interface EntityApprovedInterface {
    * @param int $timestamp
    *   The entity approved timestamp.
    *
-   * @return \Drupal\entity_generic\Entity\GenericInterface
+   * @return GenericInterface
    *   The called entity.
    */
   public function setApprovedTime($timestamp);
diff --git a/src/Entity/EntityArchivedInterface.php b/src/Entity/EntityArchivedInterface.php
index b59e5cc..78e2ffb 100644
--- a/src/Entity/EntityArchivedInterface.php
+++ b/src/Entity/EntityArchivedInterface.php
@@ -39,7 +39,7 @@ interface EntityArchivedInterface {
    * @param bool $archived
    *   TRUE to set this entity to archived, FALSE to set it to unarchived.
    *
-   * @return \Drupal\entity_generic\Entity\GenericInterface
+   * @return GenericInterface
    *   The called entity.
    */
   public function setArchived($archived);
@@ -58,7 +58,7 @@ interface EntityArchivedInterface {
    * @param int $timestamp
    *   The entity archived timestamp.
    *
-   * @return \Drupal\entity_generic\Entity\GenericInterface
+   * @return GenericInterface
    *   The called entity.
    */
   public function setArchivedTime($timestamp);
diff --git a/src/Entity/EntityCreatedInterface.php b/src/Entity/EntityCreatedInterface.php
index de0ab33..99050a6 100644
--- a/src/Entity/EntityCreatedInterface.php
+++ b/src/Entity/EntityCreatedInterface.php
@@ -21,7 +21,7 @@ interface EntityCreatedInterface {
    * @param int $timestamp
    *   The entity creation timestamp.
    *
-   * @return \Drupal\entity_generic\Entity\BasicInterface
+   * @return BasicInterface
    *   The called entity.
    */
   public function setCreatedTime($timestamp);
diff --git a/src/Entity/EntityDeletedInterface.php b/src/Entity/EntityDeletedInterface.php
index 87a3872..a5eca8e 100644
--- a/src/Entity/EntityDeletedInterface.php
+++ b/src/Entity/EntityDeletedInterface.php
@@ -39,7 +39,7 @@ interface EntityDeletedInterface {
    * @param bool $flag_deleted
    *   TRUE to set this entity to be flagged as deleted, FALSE to set it to unflagged as deleted.
    *
-   * @return \Drupal\entity_generic\Entity\GenericInterface
+   * @return GenericInterface
    *   The called entity.
    */
   public function setDeleted($flag_deleted);
@@ -58,7 +58,7 @@ interface EntityDeletedInterface {
    * @param int $timestamp
    *   The entity deleted timestamp.
    *
-   * @return \Drupal\entity_generic\Entity\GenericInterface
+   * @return GenericInterface
    *   The called entity.
    */
   public function setDeletedTime($timestamp);
diff --git a/src/Entity/EntityLabelInterface.php b/src/Entity/EntityLabelInterface.php
index f2a0d6e..c312229 100644
--- a/src/Entity/EntityLabelInterface.php
+++ b/src/Entity/EntityLabelInterface.php
@@ -21,7 +21,7 @@ interface EntityLabelInterface {
    * @param string $label
    *   The entity label.
    *
-   * @return \Drupal\entity_generic\Entity\SimpleInterface
+   * @return SimpleInterface
    *   The called entity.
    */
   public function setLabel($label);
diff --git a/src/Entity/EntityStatusInterface.php b/src/Entity/EntityStatusInterface.php
index ea29bdd..9fce7b5 100644
--- a/src/Entity/EntityStatusInterface.php
+++ b/src/Entity/EntityStatusInterface.php
@@ -41,7 +41,7 @@ interface EntityStatusInterface {
    * @param bool $active
    *   TRUE to set this entity to active, FALSE to set it to inactive.
    *
-   * @return \Drupal\entity_generic\Entity\SimpleInterface
+   * @return SimpleInterface
    *   The called entity.
    */
   public function setStatus($active);
diff --git a/src/Entity/EntityTypedInterface.php b/src/Entity/EntityTypedInterface.php
index 07a1da0..fc194ef 100644
--- a/src/Entity/EntityTypedInterface.php
+++ b/src/Entity/EntityTypedInterface.php
@@ -19,7 +19,7 @@ interface EntityTypedInterface {
    * @param string $type
    *   The entity type.
    *
-   * @return \Drupal\entity_generic\Entity\GenericInterface
+   * @return GenericInterface
    *   The called entity.
    */
   public function setType($type);
diff --git a/src/Entity/GenericType.php b/src/Entity/GenericType.php
index 9904de8..f2050a4 100644
--- a/src/Entity/GenericType.php
+++ b/src/Entity/GenericType.php
@@ -82,7 +82,7 @@ abstract class GenericType extends GenericConfig implements GenericTypeInterface
     if ($update && $this->getOriginalId() != $this->id()) {
       $update_count = \Drupal::entityTypeManager()->getStorage($this->getOriginalId())->updateType($this->getOriginalId(), $this->id());
       if ($update_count) {
-        drupal_set_message(\Drupal::translation()->formatPlural($update_count,
+        \Drupal::messenger()->addStatus(\Drupal::translation()->formatPlural($update_count,
           'Changed the type of 1 object from %old-type to %type.',
           'Changed the type of @count objects from %old-type to %type.',
           array(
diff --git a/src/Form/GenericConfigDeleteForm.php b/src/Form/GenericConfigDeleteForm.php
index 7d3961d..6814d90 100644
--- a/src/Form/GenericConfigDeleteForm.php
+++ b/src/Form/GenericConfigDeleteForm.php
@@ -15,12 +15,12 @@ class GenericConfigDeleteForm extends EntityDeleteForm {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Form/GenericConfigForm.php b/src/Form/GenericConfigForm.php
index 8f9e294..a0908c7 100644
--- a/src/Form/GenericConfigForm.php
+++ b/src/Form/GenericConfigForm.php
@@ -14,7 +14,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class GenericConfigForm extends EntityForm {
 
   /**
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -88,10 +88,10 @@ class GenericConfigForm extends EntityForm {
     $status = $entity->save();
 
     if ($status == SAVED_UPDATED) {
-      drupal_set_message($this->t($entity_label . ' %label has been updated.', ['%label' => $entity->label()]));
+      $this->messenger()->addStatus($this->t($entity_label . ' %label has been updated.', ['%label' => $entity->label()]));
     }
     else {
-      drupal_set_message($this->t($entity_label . ' %label has been created.', ['%label' => $entity->label()]));
+      $this->messenger()->addStatus($this->t($entity_label . ' %label has been created.', ['%label' => $entity->label()]));
     }
 
     $form_state->setRedirect('entity.' . $entity_type->id() . '.collection');
diff --git a/src/Form/GenericDeleteModalForm.php b/src/Form/GenericDeleteModalForm.php
index cf70fa9..ccf5713 100755
--- a/src/Form/GenericDeleteModalForm.php
+++ b/src/Form/GenericDeleteModalForm.php
@@ -66,9 +66,9 @@ class GenericDeleteModalForm extends ContentEntityConfirmFormBase {
    * AJAX callback handler that displays any errors or a success message.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   public function submitModalFormAjax(array $form, FormStateInterface $form_state) {
     $response = new AjaxResponse();
@@ -95,9 +95,9 @@ class GenericDeleteModalForm extends ContentEntityConfirmFormBase {
   /**
    * AJAX callback handler failed submission.
    *
-   * @param \Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitModalAjaxFail(AjaxResponse &$response, array $form, FormStateInterface $form_state) {
 
@@ -106,9 +106,9 @@ class GenericDeleteModalForm extends ContentEntityConfirmFormBase {
   /**
    * AJAX callback handler successful submission.
    *
-   * @param \Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitModalAjaxSuccess(AjaxResponse &$response, array $form, FormStateInterface $form_state) {
 
diff --git a/src/Form/GenericForm.php b/src/Form/GenericForm.php
index 2340a81..ad5abce 100644
--- a/src/Form/GenericForm.php
+++ b/src/Form/GenericForm.php
@@ -16,7 +16,7 @@ class GenericForm extends ContentEntityForm {
   public function save(array $form, FormStateInterface $form_state) {
     $entity = $this->getEntity();
     $entity->save();
-    drupal_set_message($this->t('The entity %label has been successfully saved.', ['%label' => $entity->label()]));
+    $this->messenger()->addStatus($this->t('The entity %label has been successfully saved.', ['%label' => $entity->label()]));
     $form_state->setRedirect('entity.' . $entity->getEntityTypeId() . '.canonical', [$entity->getEntityTypeId() => $entity->id()]);
   }
 
diff --git a/src/Form/GenericModalForm.php b/src/Form/GenericModalForm.php
index 0213bfa..41f0a2f 100644
--- a/src/Form/GenericModalForm.php
+++ b/src/Form/GenericModalForm.php
@@ -75,9 +75,9 @@ class GenericModalForm extends GenericForm {
    * AJAX callback handler.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   public function submitModalAjax(array $form, FormStateInterface $form_state) {
     $response = new AjaxResponse();
@@ -104,9 +104,9 @@ class GenericModalForm extends GenericForm {
   /**
    * AJAX callback handler failed submission.
    *
-   * @param \Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitModalAjaxFail(AjaxResponse &$response, array $form, FormStateInterface $form_state) {
 
@@ -115,9 +115,9 @@ class GenericModalForm extends GenericForm {
   /**
    * AJAX callback handler successful submission.
    *
-   * @param \Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitModalAjaxSuccess(AjaxResponse &$response, array $form, FormStateInterface $form_state) {
 
diff --git a/src/Form/GenericToggleStatusModalForm.php b/src/Form/GenericToggleStatusModalForm.php
index cda8957..5f1ab8a 100755
--- a/src/Form/GenericToggleStatusModalForm.php
+++ b/src/Form/GenericToggleStatusModalForm.php
@@ -68,9 +68,9 @@ class GenericToggleStatusModalForm extends ContentEntityConfirmFormBase {
    * AJAX callback handler that displays any errors or a success message.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   public function submitModalFormAjax(array $form, FormStateInterface $form_state) {
     $response = new AjaxResponse();
@@ -97,9 +97,9 @@ class GenericToggleStatusModalForm extends ContentEntityConfirmFormBase {
   /**
    * AJAX callback handler failed submission.
    *
-   * @param \Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitModalAjaxFail(AjaxResponse &$response, array $form, FormStateInterface $form_state) {
 
@@ -108,9 +108,9 @@ class GenericToggleStatusModalForm extends ContentEntityConfirmFormBase {
   /**
    * AJAX callback handler successful submission.
    *
-   * @param \Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitModalAjaxSuccess(AjaxResponse &$response, array $form, FormStateInterface $form_state) {
 
diff --git a/src/Form/GenericTypeForm.php b/src/Form/GenericTypeForm.php
index aeb2eed..bf231d8 100644
--- a/src/Form/GenericTypeForm.php
+++ b/src/Form/GenericTypeForm.php
@@ -15,7 +15,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class GenericTypeForm extends BundleEntityFormBase {
 
   /**
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -124,10 +124,10 @@ class GenericTypeForm extends BundleEntityFormBase {
     $status = $this->entity->save();
 
     if ($status == SAVED_UPDATED) {
-      drupal_set_message(t($this->entity->getEntityType()->getLabel() . ' %label has been updated.', ['%label' => $this->entity->label()]));
+      $this->messenger()->addStatus(t($this->entity->getEntityType()->getLabel() . ' %label has been updated.', ['%label' => $this->entity->label()]));
     }
     else {
-      drupal_set_message(t($this->entity->getEntityType()->getLabel() . ' %label has been created.', ['%label' => $this->entity->label()]));
+      $this->messenger()->addStatus(t($this->entity->getEntityType()->getLabel() . ' %label has been created.', ['%label' => $this->entity->label()]));
     }
 
     $this->entityManager->clearCachedFieldDefinitions();
@@ -137,7 +137,7 @@ class GenericTypeForm extends BundleEntityFormBase {
   /**
    * Form submission handler to redirect to Manage fields page of Field UI.
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function redirectToFieldUI(array $form, FormStateInterface $form_state) {
     if ($form_state->getTriggeringElement()['#parents'][0] === 'save_continue' && $route_info = FieldUI::getOverviewRouteInfo($this->entity->getEntityType()->getBundleOf(), $this->entity->id())) {
diff --git a/src/GenericConfigManager.php b/src/GenericConfigManager.php
index 572ff4d..c7d3970 100644
--- a/src/GenericConfigManager.php
+++ b/src/GenericConfigManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_generic;
 
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
@@ -18,21 +19,21 @@ class GenericConfigManager implements GenericConfigManagerInterface {
   /**
    * The entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $entityStorage;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs an object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/GenericConfigManagerInterface.php b/src/GenericConfigManagerInterface.php
index b97f43f..3957389 100644
--- a/src/GenericConfigManagerInterface.php
+++ b/src/GenericConfigManagerInterface.php
@@ -12,7 +12,7 @@ interface GenericConfigManagerInterface {
   /**
    * Instantiates a new instance of this entity handler.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The service container this object should use.
    *
    * @return static
diff --git a/src/GenericListBuilder.php b/src/GenericListBuilder.php
index 1b69c91..a2068e3 100644
--- a/src/GenericListBuilder.php
+++ b/src/GenericListBuilder.php
@@ -26,25 +26,25 @@ class GenericListBuilder extends EntityListBuilder {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;
 
   /**
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter,  RedirectDestinationInterface $redirect_destination) {
diff --git a/src/GenericManager.php b/src/GenericManager.php
index c1ad6fb..5c41209 100644
--- a/src/GenericManager.php
+++ b/src/GenericManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_generic;
 
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Link;
@@ -27,21 +28,21 @@ abstract class GenericManager implements GenericManagerInterface {
   /**
    * The entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $entityStorage;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs an object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/GenericManagerInterface.php b/src/GenericManagerInterface.php
index 7b0bf16..58849f9 100644
--- a/src/GenericManagerInterface.php
+++ b/src/GenericManagerInterface.php
@@ -13,7 +13,7 @@ interface GenericManagerInterface {
   /**
    * Instantiates a new instance of this entity handler.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The service container this object should use.
    *
    * @return static
@@ -31,7 +31,7 @@ interface GenericManagerInterface {
   /**
    * Returns the list of available entities for specific user.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *  User object
    *
    * @return array
@@ -42,7 +42,7 @@ interface GenericManagerInterface {
    * Returns the list of available entities for specific user as options for
    * select box.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *  User object
    *
    * @return array
@@ -53,7 +53,7 @@ interface GenericManagerInterface {
    * Returns the list of available entities for specific user as options for
    * select box with UUIDs as keys.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *  User object
    *
    * @return array
diff --git a/src/GenericStorageInterface.php b/src/GenericStorageInterface.php
index 53b6394..0fcb195 100644
--- a/src/GenericStorageInterface.php
+++ b/src/GenericStorageInterface.php
@@ -15,7 +15,7 @@ interface GenericStorageInterface extends ContentEntityStorageInterface {
   /**
    * Gets a list of entity revision IDs for a specific entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    *
    * @return int[]
@@ -26,7 +26,7 @@ interface GenericStorageInterface extends ContentEntityStorageInterface {
   /**
    * Gets a list of revision IDs having a given user as entity owner.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ -37,7 +37,7 @@ interface GenericStorageInterface extends ContentEntityStorageInterface {
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    *
    * @return int
@@ -61,7 +61,7 @@ interface GenericStorageInterface extends ContentEntityStorageInterface {
   /**
    * Unsets the language for all entities with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
diff --git a/src/GenericViewBuilder.php b/src/GenericViewBuilder.php
index 4a4ea02..d16f9a8 100644
--- a/src/GenericViewBuilder.php
+++ b/src/GenericViewBuilder.php
@@ -40,7 +40,7 @@ class GenericViewBuilder extends EntityViewBuilder {
   /**
    * Provides entity-specific defaults to the build process.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which the defaults should be provided.
    * @param string $view_mode
    *   The view mode that should be used.
diff --git a/src/Plugin/LocalTask/Derivative/LocalTaskDeriver.php b/src/Plugin/LocalTask/Derivative/LocalTaskDeriver.php
index 2da1c42..817eaf2 100644
--- a/src/Plugin/LocalTask/Derivative/LocalTaskDeriver.php
+++ b/src/Plugin/LocalTask/Derivative/LocalTaskDeriver.php
@@ -19,16 +19,16 @@ class LocalTaskDeriver extends DeriverBase implements ContainerDeriverInterface
   /**
    * The entity type manager
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Creates an local task object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The translation manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation) {
diff --git a/src/Plugin/views/field/GenericEditModal.php b/src/Plugin/views/field/GenericEditModal.php
index 3da6dbe..b511e00 100644
--- a/src/Plugin/views/field/GenericEditModal.php
+++ b/src/Plugin/views/field/GenericEditModal.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_generic\Plugin\views\field;
 
+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
 use Drupal\views\ResultRow;
@@ -39,7 +40,7 @@ class GenericEditModal extends GenericOperationModalBase {
    * {@inheritdoc}
    */
   public function buildOptionsForm(&$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entityDisplayRepository */
+    /** @var EntityDisplayRepositoryInterface $entityDisplayRepository */
     $entityDisplayRepository = \Drupal::service('entity_display.repository');
     $options = $entityDisplayRepository->getFormModeOptions($this->getEntityType());
     $form['form_mode'] = [
diff --git a/src/Plugin/views/filter/IdSelect.php b/src/Plugin/views/filter/IdSelect.php
index d78d7dd..a929fce 100644
--- a/src/Plugin/views/filter/IdSelect.php
+++ b/src/Plugin/views/filter/IdSelect.php
@@ -27,7 +27,7 @@ class IdSelect extends InOperator {
       ->sort(\Drupal::entityTypeManager()->getDefinition($this->getEntityType())->getKey('label'));
     $entities = \Drupal::entityTypeManager()->getStorage($this->getEntityType())->loadMultiple($query->execute());
     foreach ($entities as $entity) {
-      $options[$entity->id()] = \Drupal::entityManager()->getTranslationFromContext($entity)->label();
+      $options[$entity->id()] = \Drupal::service('entity.repository')->getTranslationFromContext($entity)->label();
     }
 
     $default_value = (array) $this->value;
diff --git a/tmp/Access/GenericAccessCheck.php b/tmp/Access/GenericAccessCheck.php
index b0b0ba6..b960a30 100644
--- a/tmp/Access/GenericAccessCheck.php
+++ b/tmp/Access/GenericAccessCheck.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_generic\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -15,14 +16,14 @@ use Drupal\entity_generic\Entity\GenericTypeInterface;
 class GenericAccessCheck implements AccessInterface {
 
   /**
- * The entity manager.
- *
- * @var \Drupal\Core\Entity\EntityTypeManagerInterface
- */
+   * The entity manager.
+   *
+   * @var EntityTypeManagerInterface
+   */
   protected $entityTypeManager;
 
   /**
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -32,14 +33,14 @@ class GenericAccessCheck implements AccessInterface {
   /**
    * Checks access to the entity add page for the entity type.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check against.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
-   * @param \Drupal\entity_generic\Entity\GenericTypeInterface $entity_generic_type
+   * @param GenericTypeInterface $entity_generic_type
    *   The type entity.
    *
-   * @return bool|\Drupal\Core\Access\AccessResultInterface
+   * @return bool|AccessResultInterface
    *   The access result.
    */
   public function access(Route $route, AccountInterface $account, GenericTypeInterface $entity_generic_type = NULL) {
diff --git a/tmp/Controller/GenericViewController.php b/tmp/Controller/GenericViewController.php
index c29815b..2926557 100644
--- a/tmp/Controller/GenericViewController.php
+++ b/tmp/Controller/GenericViewController.php
@@ -13,7 +13,7 @@ class GenericViewController extends EntityViewController {
   /**
    * The _title_callback for the page that renders a single entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The current entity.
    *
    * @return string
