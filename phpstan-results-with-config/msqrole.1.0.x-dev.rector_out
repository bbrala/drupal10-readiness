modules/contrib/msqrole/msqrole.module
modules/contrib/msqrole/src/Controller/MasqueradeRoleReset.php
modules/contrib/msqrole/src/DynamicRolePermissions.php
modules/contrib/msqrole/src/Form/MasqueradeRoleForm.php
modules/contrib/msqrole/src/Form/MasqueradeRoleSettings.php
modules/contrib/msqrole/src/MasqueradeAccountProxy.php
modules/contrib/msqrole/src/RoleManager.php
modules/contrib/msqrole/src/RoleManagerInterface.php

7 files with changes
====================

1) modules/contrib/msqrole/src/RoleManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\msqrole;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 /**
  * Interface RoleManagerInterface.
  *
@@ @@
    * @param string|int $uid
    *   The user ID to reset cache tags for.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function invalidateTags($uid);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/msqrole/src/RoleManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\msqrole;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\user\RoleInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The user data instance.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * RoleManager constructor.
    *
-   * @param \Drupal\user\UserDataInterface $user_data
+   * @param UserDataInterface $user_data
    *   The user data object.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(UserDataInterface $user_data, EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory) {
@@ @@
       return FALSE;
     }

-    /** @var \Drupal\user\RoleInterface $role */
+    /** @var RoleInterface $role */
     foreach ($roles as $role) {
       if ($role->hasPermission($permission)) {
         return TRUE;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/msqrole/src/MasqueradeAccountProxy.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The role manager.
    *
-   * @var \Drupal\msqrole\RoleManagerInterface
+   * @var RoleManagerInterface
    */
   protected $roleManager;

@@ @@
   /**
    * AccountProxy constructor.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface|null $event_dispatcher
+   * @param EventDispatcherInterface|null $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\msqrole\RoleManagerInterface $role_manager
+   * @param RoleManagerInterface $role_manager
    *   The role manager.
    */
   public function __construct(EventDispatcherInterface $event_dispatcher, RoleManagerInterface $role_manager) {
@@ @@
   /**
    * Returns the role storage object.
    *
-   * @return \Drupal\user\RoleStorageInterface
+   * @return RoleStorageInterface
    *   The role storage object.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getRoleStorage(): RoleStorageInterface {
     return $this->entityTypeManager->getStorage('user_role');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/msqrole/src/Form/MasqueradeRoleForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\msqrole\Form;

+use Drupal\user\RoleInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ @@
   /**
    * The role manager.
    *
-   * @var \Drupal\msqrole\RoleManagerInterface
+   * @var RoleManagerInterface
    */
   protected $roleManager;

@@ @@
   /**
    * MasqueradeRoleForm constructor.
    *
-   * @param \Drupal\msqrole\RoleManagerInterface $role_manager
+   * @param RoleManagerInterface $role_manager
    *   The role manager.
    */
   public function __construct(RoleManagerInterface $role_manager) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
     /**
      * @var string $id
      *   The role ID.
-     * @var \Drupal\user\RoleInterface $role
+     * @var RoleInterface $role
      *   The role object.
      */
     foreach ($roles as $id => &$role) {
@@ @@
    *
    * @param array $form
    *   The form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/msqrole/src/DynamicRolePermissions.php:18

    ---------- begin diff ----------
@@ @@
    */
   public static function callback() {
     /**
-     * @var \Drupal\msqrole\RoleManagerInterface $role_manager
+     * @var RoleManagerInterface $role_manager
      */
     $role_manager = \Drupal::service('msqrole.manager');
     $roles = $role_manager->getConfigurableRoles();
@@ @@
     $permissions = [];

     /**
-     * @var \Drupal\user\RoleInterface $role
+     * @var RoleInterface $role
      */
     foreach ($roles as $role) {
       $permissions['masquerade as ' . $role->id()] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/msqrole/src/Controller/MasqueradeRoleReset.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\msqrole\Controller;

+use Symfony\Component\HttpFoundation\RedirectResponse;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Access\AccessResult;
@@ @@
   /**
    * The role manager.
    *
-   * @var \Drupal\msqrole\RoleManagerInterface
+   * @var RoleManagerInterface
    */
   protected $roleManager;

@@ @@
   /**
    * The redirect destination object.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $destination;

@@ @@
   /**
    * MasqueradeRoleReset constructor.
    *
-   * @param \Drupal\msqrole\RoleManagerInterface $role_manager
+   * @param RoleManagerInterface $role_manager
    *   The role manager.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $destination
+   * @param RedirectDestinationInterface $destination
    *   The redirect destination object.
    */
   public function __construct(RoleManagerInterface $role_manager, RedirectDestinationInterface $destination) {
@@ @@
    * Resets msqrole data and redirects back to front.
    *
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The redirect response object.
    */
   public function reset() {
@@ @@
   /**
    * Checks whether msqrole is active or not.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/msqrole/msqrole.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\msqrole\RoleManagerInterface;
+use Drupal\user\Entity\Role;
 use Drupal\Core\Render\Renderer;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\Url;
@@ @@
  */
 function msqrole_page_attachments(array &$page) {
   /**
-   * @var \Drupal\msqrole\RoleManagerInterface $roleManager
+   * @var RoleManagerInterface $roleManager
    */
   if (!$role_manager = Drupal::service('msqrole.manager')) {
     return;
@@ @@
     if ($role === 'authenticated') {
       continue;
     }
-    $current = \Drupal\user\Entity\Role::load($role);
+    $current = Role::load($role);
     $roles[$role] = $current->label();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 7 files have been changed by Rector                                       

