diff --git a/fullcalendar.api.php b/fullcalendar.api.php
index e8df335..e129f63 100644
--- a/fullcalendar.api.php
+++ b/fullcalendar.api.php
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;
 /**
  * @file
  * Hooks provided by the FullCalendar module.
@@ -100,7 +101,7 @@ function hook_fullcalendar_editable_alter(&$editable, $entity, $view) {
  */
 function hook_fullcalendar_process_dates_alter(&$date1, &$date2, $context) {
   // Always display dates only on one day.
-  if ($date1->format(DATETIME_DATE_STORAGE_FORMAT) != $date2->format(DATETIME_DATE_STORAGE_FORMAT)) {
+  if ($date1->format(DateTimeItemInterface::DATE_STORAGE_FORMAT) != $date2->format(DateTimeItemInterface::DATE_STORAGE_FORMAT)) {
     $date2 = $date1;
   }
 }
diff --git a/fullcalendar.module b/fullcalendar.module
index e609b46..4b4a6ce 100644
--- a/fullcalendar.module
+++ b/fullcalendar.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\Core\Entity\EntityFieldManagerInterface;
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
 /**
  * @file
  * Provides a views style plugin for FullCalendar
@@ -99,7 +101,7 @@ function fullcalendar_form_views_ui_edit_display_form_alter(&$form, FormStateInt
 /**
  * Determines if a given field is a date field.
  *
- * @param \Drupal\views\Plugin\views\field\EntityField $field
+ * @param EntityField $field
  *   A Views field handler object.
  *
  * @return bool
@@ -116,14 +118,14 @@ function fullcalendar_field_is_date(EntityField $field) {
     return FALSE;
   }
 
-  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager */
+  /** @var EntityFieldManagerInterface $field_manager */
   $field_manager = \Drupal::getContainer()->get('entity_field.manager');
 
-  /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface[] $field_storages */
+  /** @var FieldStorageDefinitionInterface[] $field_storages */
   $field_storages = $field_manager->getFieldStorageDefinitions($entity_type);
 
   if (isset($field_storages[$field->definition['field_name']])) {
-    /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface $field_storage */
+    /** @var FieldStorageDefinitionInterface $field_storage */
     $field_storage = $field_storages[$field->definition['field_name']];
 
     return in_array($field_storage->getType(), [
diff --git a/fullcalendar.views_execution.inc b/fullcalendar.views_execution.inc
index 8c2532c..0e74f6d 100644
--- a/fullcalendar.views_execution.inc
+++ b/fullcalendar.views_execution.inc
@@ -1,5 +1,9 @@
 <?php
 
+use Drupal\fullcalendar\Plugin\views\style\FullCalendar;
+use Drupal\Core\Entity\EntityFieldManagerInterface;
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
+use Drupal\views\Plugin\views\field\EntityField;
 /**
  * @file
  * Contains Views module runtime hooks.
@@ -22,7 +26,7 @@ function fullcalendar_views_pre_view(ViewExecutable $view, $display_id, array $a
 
   // Get the current view settings.
   $view->initStyle();
-  /** @var \Drupal\fullcalendar\Plugin\views\style\FullCalendar $view_style */
+  /** @var FullCalendar $view_style */
   $view_style = $view->style_plugin;
 
   $settings = $view->style_plugin->options;
@@ -39,23 +43,23 @@ function fullcalendar_views_pre_view(ViewExecutable $view, $display_id, array $a
   $settings['fullcalendar_fields_count'] = 0;
   $exposed_input = $view->getExposedInput();
 
-  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager */
+  /** @var EntityFieldManagerInterface $field_manager */
   $field_manager = \Drupal::getContainer()->get('entity_field.manager');
 
   $entity_type = $view->getBaseEntityType();
   $entity_type_id = $entity_type->id();
 
-  /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface[] $field_storages */
+  /** @var FieldStorageDefinitionInterface[] $field_storages */
   $field_storages = $field_manager->getFieldStorageDefinitions($entity_type_id);
 
   // Loop through each date field and provide an argument for it.
   foreach ($view->display_handler->getHandlers('field') as $field_id => $field) {
-    /** @var \Drupal\views\Plugin\views\field\EntityField $field */
+    /** @var EntityField $field */
     if (!fullcalendar_field_is_date($field)) {
       continue;
     }
 
-    /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface $field_storage */
+    /** @var FieldStorageDefinitionInterface $field_storage */
     $field_storage = $field_storages[$field->definition['field_name']];
 
     // Default table name for the field.
diff --git a/modules/fullcalendar_legend/src/Plugin/block/FullcalendarLegendBase.php b/modules/fullcalendar_legend/src/Plugin/block/FullcalendarLegendBase.php
index fc0a301..42b2feb 100644
--- a/modules/fullcalendar_legend/src/Plugin/block/FullcalendarLegendBase.php
+++ b/modules/fullcalendar_legend/src/Plugin/block/FullcalendarLegendBase.php
@@ -7,6 +7,8 @@
 
 namespace Drupal\fullcalendar_legend\Plugin\Block;
 
+use Drupal\views\Plugin\views\field\EntityField;
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Block\BlockBase;
 use Drupal\views\ViewExecutable;
 use Drupal\views\Views;
@@ -35,7 +37,7 @@ abstract class FullcalendarLegendBase extends BlockBase {
 
     $fieldManager = \Drupal::getContainer()->get('entity_field.manager');
 
-    /** @var \Drupal\views\Plugin\views\field\EntityField $field */
+    /** @var EntityField $field */
     foreach ($view->field as $field_name => $field) {
       if (fullcalendar_field_is_date($field)) {
         $field_storage_definitions = $fieldManager->getFieldStorageDefinitions($field->definition['entity_type']);
@@ -52,7 +54,7 @@ abstract class FullcalendarLegendBase extends BlockBase {
   }
 
   /**
-   * @param \Drupal\Core\Field\FieldDefinitionInterface[] $fields
+   * @param FieldDefinitionInterface[] $fields
    *
    * @return array
    */
diff --git a/modules/fullcalendar_legend/src/Plugin/block/Term.php b/modules/fullcalendar_legend/src/Plugin/block/Term.php
index 8b2b679..237b43a 100644
--- a/modules/fullcalendar_legend/src/Plugin/block/Term.php
+++ b/modules/fullcalendar_legend/src/Plugin/block/Term.php
@@ -7,6 +7,7 @@
 
 namespace Drupal\fullcalendar_legend\Plugin\Block;
 
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityManagerInterface;
 use Drupal\Core\Entity\Query\QueryFactory;
@@ -27,12 +28,12 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class Term extends FullcalendarLegendBase implements ContainerFactoryPluginInterface {
 
   /**
-   * @var \Drupal\taxonomy\TermStorageInterface
+   * @var TermStorageInterface
    */
   protected $termStorage;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -66,7 +67,7 @@ class Term extends FullcalendarLegendBase implements ContainerFactoryPluginInter
   protected function buildLegend(array $fields) {
     $types = [];
 
-    /** @var \Drupal\Core\Field\FieldDefinitionInterface[] $fields */
+    /** @var FieldDefinitionInterface[] $fields */
     foreach ($fields as $field_name => $field) {
       // Then by entity type.
       foreach ($field->getBundles() as $entity_type => $bundles) {
diff --git a/src/Controller/ResultsController.php b/src/Controller/ResultsController.php
index 2be1d66..0e1ffec 100644
--- a/src/Controller/ResultsController.php
+++ b/src/Controller/ResultsController.php
@@ -15,12 +15,12 @@ class ResultsController extends ControllerBase {
   /**
    * Ajax callback to refresh calendar view.
    *
-   * @param \Drupal\views\Entity\View $view
+   * @param View $view
    *   Fully-loaded view entity.
    * @param string $display_id
    *   Display ID.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|void
+   * @return AjaxResponse|void
    */
   public function getResults(View $view, $display_id) {
     $response = new AjaxResponse();
diff --git a/src/Controller/UpdateController.php b/src/Controller/UpdateController.php
index 71218a9..45b4e89 100644
--- a/src/Controller/UpdateController.php
+++ b/src/Controller/UpdateController.php
@@ -19,12 +19,12 @@ class UpdateController extends ControllerBase {
   /**
    * @todo.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param string $field
    * @param int $index
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    */
   public function drop(EntityInterface $entity, $field, $index, Request $request) {
     if ($request->request->has('day_delta') && $request->request->has('minute_delta')) {
diff --git a/src/Plugin/FullcalendarBase.php b/src/Plugin/FullcalendarBase.php
index 997b5e6..5973965 100644
--- a/src/Plugin/FullcalendarBase.php
+++ b/src/Plugin/FullcalendarBase.php
@@ -14,7 +14,7 @@ abstract class FullcalendarBase extends PluginBase implements FullcalendarInterf
   /**
    * @todo.
    *
-   * @var \Drupal\views\Plugin\views\style\StylePluginBase
+   * @var StylePluginBase
    */
   protected $style;
 
diff --git a/src/Plugin/FullcalendarManager.php b/src/Plugin/FullcalendarManager.php
index 6997f2b..42a9d6c 100644
--- a/src/Plugin/FullcalendarManager.php
+++ b/src/Plugin/FullcalendarManager.php
@@ -25,9 +25,9 @@ class FullcalendarManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ -37,7 +37,7 @@ class FullcalendarManager extends DefaultPluginManager {
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\fullcalendar\Plugin\FullcalendarInterface
+   * @return FullcalendarInterface
    */
   public function createInstance($plugin_id, array $configuration = [], $style = NULL) {
     $plugin = parent::createInstance($plugin_id, $configuration);
diff --git a/src/Plugin/FullcalendarPluginCollection.php b/src/Plugin/FullcalendarPluginCollection.php
index 5873437..d69658c 100644
--- a/src/Plugin/FullcalendarPluginCollection.php
+++ b/src/Plugin/FullcalendarPluginCollection.php
@@ -14,23 +14,23 @@ class FullcalendarPluginCollection extends DefaultLazyPluginCollection {
   /**
    * The manager used to instantiate the plugins.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $manager;
 
   /**
    * @todo.
    *
-   * @var \Drupal\views\Plugin\views\style\StylePluginBase
+   * @var StylePluginBase
    */
   protected $style;
 
   /**
    * Constructs a FullcalendarPluginCollection object.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $manager
+   * @param PluginManagerInterface $manager
    *   The manager to be used for instantiating plugins.
-   * @param \Drupal\views\Plugin\views\style\StylePluginBase $style
+   * @param StylePluginBase $style
    *   The style plugin that contains these plugins.
    */
   public function __construct(PluginManagerInterface $manager, StylePluginBase $style) {
diff --git a/src/Plugin/fullcalendar/type/FullCalendar.php b/src/Plugin/fullcalendar/type/FullCalendar.php
index e2679b9..12704f5 100644
--- a/src/Plugin/fullcalendar/type/FullCalendar.php
+++ b/src/Plugin/fullcalendar/type/FullCalendar.php
@@ -29,12 +29,12 @@ class FullCalendar extends FullcalendarBase implements ContainerFactoryPluginInt
   const COMMA_REPLACEMENT = '_COMMA_';
 
   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
@@ -42,8 +42,8 @@ class FullCalendar extends FullcalendarBase implements ContainerFactoryPluginInt
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param ModuleHandlerInterface $module_handler
+   * @param LanguageManagerInterface $language_manager
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ModuleHandlerInterface $module_handler, LanguageManagerInterface $language_manager) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
diff --git a/src/Plugin/views/style/FullCalendar.php b/src/Plugin/views/style/FullCalendar.php
index f051cb7..6602775 100644
--- a/src/Plugin/views/style/FullCalendar.php
+++ b/src/Plugin/views/style/FullCalendar.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\fullcalendar\Plugin\views\style;
 
+use Drupal\Core\Entity\EntityFieldManagerInterface;
+use Drupal\fullcalendar\Plugin\FullcalendarInterface;
+use Drupal\views\Plugin\views\field\EntityField;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use DateTime;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Datetime\DateFormatter;
@@ -40,26 +45,26 @@ class FullCalendar extends StylePluginBase {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Entity Field Manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $fieldManager;
 
   /**
    * Stores the FullCalendar plugins used by this style plugin.
    *
-   * @var \Drupal\fullcalendar\Plugin\FullcalendarPluginCollection
+   * @var FullcalendarPluginCollection
    */
   protected $pluginBag;
 
   /**
-   * @var \Drupal\Core\Datetime\DateFormatter $dateFormatter
+   * @var DateFormatter $dateFormatter
    *   The date formatter service.
    */
   protected $dateFormatter;
@@ -67,7 +72,7 @@ class FullCalendar extends StylePluginBase {
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
@@ -81,7 +86,7 @@ class FullCalendar extends StylePluginBase {
   /**
    * Get all available FullCalendar plugins.
    *
-   * @return \Drupal\fullcalendar\Plugin\FullcalendarPluginCollection|\Drupal\fullcalendar\Plugin\FullcalendarInterface[]
+   * @return FullcalendarPluginCollection|FullcalendarInterface[]
    */
   public function getPlugins() {
     return $this->pluginBag;
@@ -93,15 +98,15 @@ class FullCalendar extends StylePluginBase {
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $fullcalendar_manager
+   * @param PluginManagerInterface $fullcalendar_manager
    *   FullCalendar Manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager
+   * @param EntityFieldManagerInterface $field_manager
    *   Entity Field Manager.
-   * @param \Drupal\Core\Datetime\DateFormatter $date_formatter
+   * @param DateFormatter $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, PluginManagerInterface $fullcalendar_manager, ModuleHandlerInterface $module_handler, $field_manager, DateFormatter $date_formatter, MessengerInterface $messenger) {
@@ -190,7 +195,7 @@ class FullCalendar extends StylePluginBase {
 
     $date_fields = [];
 
-    /** @var \Drupal\views\Plugin\views\field\EntityField $field */
+    /** @var EntityField $field */
     foreach ($this->view->field as $id => $field) {
       if (fullcalendar_field_is_date($field)) {
         $date_fields[$id] = $labels[$id];
@@ -299,7 +304,7 @@ class FullCalendar extends StylePluginBase {
     $events = [];
 
     foreach ($this->view->result as $delta => $row) {
-      /** @var \Drupal\Core\Entity\EntityInterface $entity */
+      /** @var EntityInterface $entity */
       $entity = $row->_entity;
 
       // Collect all fields for the customize options.
@@ -347,7 +352,7 @@ class FullCalendar extends StylePluginBase {
           continue;
         }
 
-        /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface $field_definition */
+        /** @var FieldStorageDefinitionInterface $field_definition */
         $field_definition = $field['field_info'];
         // Get 'min' and 'max' dates appear in the Calendar.
         $date_range = $this->getExposedDates($field['field_name']);
@@ -412,7 +417,7 @@ class FullCalendar extends StylePluginBase {
   /**
    * Helper method to prepare an event.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Event entity.
    * @param $fields
    *
@@ -495,11 +500,11 @@ class FullCalendar extends StylePluginBase {
 
       $settings = $this->view->style_plugin->options;
 
-      /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager */
+      /** @var EntityFieldManagerInterface $field_manager */
       $field_manager = \Drupal::getContainer()->get('entity_field.manager');
-      /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface[] $field_storages */
+      /** @var FieldStorageDefinitionInterface[] $field_storages */
       $field_storages = $field_manager->getFieldStorageDefinitions($entity_type_id);
-      /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface $field_storage */
+      /** @var FieldStorageDefinitionInterface $field_storage */
       $field_storage = $field_storages[$field_name];
       $field_value = $field_storage->getName() . '_value';
 
@@ -553,7 +558,7 @@ class FullCalendar extends StylePluginBase {
   public function getEventStartEndDates(array $fields) {
     $event_start_end_date = [];
     $field = current($fields);
-    /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface $field_info */
+    /** @var FieldStorageDefinitionInterface $field_info */
     $field_info = $field['field_info'];
 
     switch ($field_info->getType()) {
