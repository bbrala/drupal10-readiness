diff --git a/log_entity_operations.module b/log_entity_operations.module
index c2736ab..6ed3779 100644
--- a/log_entity_operations.module
+++ b/log_entity_operations.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\log_entity_operations\Service\LogEntityOperationsManager;
 /**
  * @file
  * Module file.
@@ -45,7 +46,7 @@ function log_entity_operations_help($route_name, RouteMatchInterface $route_matc
  * Implements hook_entity_insert().
  */
 function log_entity_operations_entity_insert(EntityInterface $entity) {
-  /** @var \Drupal\log_entity_operations\Service\LogEntityOperationsManager $manager */
+  /** @var LogEntityOperationsManager $manager */
   $manager = \Drupal::service('log_entity_operations.manager');
   $manager->dispatchLog($entity, 'insert');
 }
@@ -54,7 +55,7 @@ function log_entity_operations_entity_insert(EntityInterface $entity) {
  * Implements hook_entity_update().
  */
 function log_entity_operations_entity_update(EntityInterface $entity) {
-  /** @var \Drupal\log_entity_operations\Service\LogEntityOperationsManager $manager */
+  /** @var LogEntityOperationsManager $manager */
   $manager = \Drupal::service('log_entity_operations.manager');
   $manager->dispatchLog($entity, 'update');
 }
@@ -63,7 +64,7 @@ function log_entity_operations_entity_update(EntityInterface $entity) {
  * Implements hook_entity_delete().
  */
 function log_entity_operations_entity_delete(EntityInterface $entity) {
-  /** @var \Drupal\log_entity_operations\Service\LogEntityOperationsManager $manager */
+  /** @var LogEntityOperationsManager $manager */
   $manager = \Drupal::service('log_entity_operations.manager');
   $manager->dispatchLog($entity, 'delete');
 }
@@ -72,7 +73,7 @@ function log_entity_operations_entity_delete(EntityInterface $entity) {
  * Implements hook_entity_translation_insert().
  */
 function log_entity_operations_entity_translation_insert(EntityInterface $translation) {
-  /** @var \Drupal\log_entity_operations\Service\LogEntityOperationsManager $manager */
+  /** @var LogEntityOperationsManager $manager */
   $manager = \Drupal::service('log_entity_operations.manager');
   $manager->dispatchLog($translation, 'insert');
 }
@@ -81,7 +82,7 @@ function log_entity_operations_entity_translation_insert(EntityInterface $transl
  * Implements hook_entity_translation_delete().
  */
 function log_entity_operations_entity_translation_delete(EntityInterface $translation) {
-  /** @var \Drupal\log_entity_operations\Service\LogEntityOperationsManager $manager */
+  /** @var LogEntityOperationsManager $manager */
   $manager = \Drupal::service('log_entity_operations.manager');
   $manager->dispatchLog($translation, 'delete');
 }
diff --git a/log_entity_operations_entity/log_entity_operations_entity.module b/log_entity_operations_entity/log_entity_operations_entity.module
index fc026c6..f93d05d 100644
--- a/log_entity_operations_entity/log_entity_operations_entity.module
+++ b/log_entity_operations_entity/log_entity_operations_entity.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\Core\Access\AccessResultForbidden;
+use Drupal\Core\Access\AccessResultNeutral;
 /**
  * @file
  * Module file.
@@ -55,14 +57,14 @@ function log_entity_operations_entity_help($route_name, RouteMatchInterface $rou
  *
  * @param string $operation
  *   The Operation, e.g. update, insert or delete.
- * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+ * @param FieldDefinitionInterface $field_definition
  *   The Field Definition.
- * @param \Drupal\Core\Session\AccountInterface $account
+ * @param AccountInterface $account
  *   The Account Interface of the current user.
- * @param \Drupal\Core\Field\FieldItemListInterface|null $items
+ * @param FieldItemListInterface|null $items
  *   The Field Item List Interface.
  *
- * @return \Drupal\Core\Access\AccessResultForbidden|\Drupal\Core\Access\AccessResultNeutral
+ * @return AccessResultForbidden|AccessResultNeutral
  *   The Access Result which is either neutral or forbidden.
  */
 function log_entity_operations_entity_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL) {
@@ -87,7 +89,7 @@ function log_entity_operations_entity_entity_field_access($operation, FieldDefin
  *
  * Implements hook_views_pre_view().
  *
- * @param \Drupal\views\ViewExecutable $view
+ * @param ViewExecutable $view
  *   The View Object.
  * @param string $display_id
  *   The ID of the current display of the view.
@@ -95,7 +97,7 @@ function log_entity_operations_entity_entity_field_access($operation, FieldDefin
  *   The View Arguments.
  */
 function log_entity_operations_entity_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
-  /** @var \Drupal\views\ViewExecutable $view */
+  /** @var ViewExecutable $view */
   if ($view->id() === 'entity_operation_logs') {
     if (!\Drupal::currentUser()->hasPermission('view entity log diff field')) {
       $filters = $view->display_handler->getOption('filters');
diff --git a/log_entity_operations_entity/src/Entity/EntityOperationLog.php b/log_entity_operations_entity/src/Entity/EntityOperationLog.php
index c15d378..82426b6 100644
--- a/log_entity_operations_entity/src/Entity/EntityOperationLog.php
+++ b/log_entity_operations_entity/src/Entity/EntityOperationLog.php
@@ -38,7 +38,7 @@ class EntityOperationLog extends ContentEntityBase implements ContentEntityInter
   /**
    * Get Base Field Definition of EntityOperationLog Entity.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The Entity Type.
    *
    * @return array
diff --git a/log_entity_operations_entity/src/Form/EntityLogDeleteForm.php b/log_entity_operations_entity/src/Form/EntityLogDeleteForm.php
index bb97a18..b4e5eea 100644
--- a/log_entity_operations_entity/src/Form/EntityLogDeleteForm.php
+++ b/log_entity_operations_entity/src/Form/EntityLogDeleteForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\log_entity_operations_entity\Form;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
@@ -31,7 +32,7 @@ class EntityLogDeleteForm extends ContentEntityConfirmFormBase {
   /**
    * Returns the route to go to if the user cancels the action.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   A URL object.
    */
   public function getCancelUrl() {
@@ -43,7 +44,7 @@ class EntityLogDeleteForm extends ContentEntityConfirmFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ -71,7 +72,7 @@ class EntityLogDeleteForm extends ContentEntityConfirmFormBase {
    *
    * @param array $form
    *   The Form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The Form State.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -98,11 +99,11 @@ class EntityLogDeleteForm extends ContentEntityConfirmFormBase {
    * @param int $id
    *   The ID of the log entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The loaded Entity Log Entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function getLogEntity($id) {
     return \Drupal::entityTypeManager()
diff --git a/log_entity_operations_entity/src/Logger/EntityOperationEntityLogger.php b/log_entity_operations_entity/src/Logger/EntityOperationEntityLogger.php
index 55de72e..151292f 100644
--- a/log_entity_operations_entity/src/Logger/EntityOperationEntityLogger.php
+++ b/log_entity_operations_entity/src/Logger/EntityOperationEntityLogger.php
@@ -21,14 +21,14 @@ class EntityOperationEntityLogger implements EntityOperationsLoggerInterface {
   /**
    * Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
    * LogEntityOperationsManager constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity Type Manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/log_entity_operations_entity/src/Plugin/Field/FieldFormatter/LogEntityOperationsJSONCollapsibleFormatter.php b/log_entity_operations_entity/src/Plugin/Field/FieldFormatter/LogEntityOperationsJSONCollapsibleFormatter.php
index a3212e3..953aa80 100644
--- a/log_entity_operations_entity/src/Plugin/Field/FieldFormatter/LogEntityOperationsJSONCollapsibleFormatter.php
+++ b/log_entity_operations_entity/src/Plugin/Field/FieldFormatter/LogEntityOperationsJSONCollapsibleFormatter.php
@@ -7,6 +7,8 @@
  */
 namespace Drupal\log_entity_operations_entity\Plugin\Field\FieldFormatter;
 
+use Drupal\Core\Field\Plugin\Field\FieldType\StringLongItem;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\FormatterBase;
 use Drupal\Component\Utility\Html;
@@ -38,7 +40,7 @@ class LogEntityOperationsJSONCollapsibleFormatter extends FormatterBase {
   public function viewElements(FieldItemListInterface $items, $langcode) {
     $elements = [];
     if ($this->isPrettyCollapsibleFormattingEnabled()) {
-      /** @var \Drupal\Core\Field\Plugin\Field\FieldType\StringLongItem $item */
+      /** @var StringLongItem $item */
       foreach ($items as $item) {
         $jsonValue = $item->getValue()['value'];
         $jsonArray = json_decode($jsonValue, TRUE);
@@ -51,7 +53,7 @@ class LogEntityOperationsJSONCollapsibleFormatter extends FormatterBase {
     }
     else {
       // Fallback to plain text JSON Formatting.
-      /** @var \Drupal\Core\Field\Plugin\Field\FieldType\StringLongItem $item */
+      /** @var StringLongItem $item */
       foreach ($items as $item) {
         $elements[] = [
           '#type' => 'markup',
@@ -77,7 +79,7 @@ class LogEntityOperationsJSONCollapsibleFormatter extends FormatterBase {
    *
    * @param array $jsonData
    *
-   * @return array|\Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return array|TranslatableMarkup
    */
   private function prepareRecursiveData(array $jsonData) {
     if (is_countable($jsonData) && count($jsonData)) {
diff --git a/log_entity_operations_entity/src/Plugin/QueueWorker/LogEntityOperationsCleanup.php b/log_entity_operations_entity/src/Plugin/QueueWorker/LogEntityOperationsCleanup.php
index 43761e1..96014ec 100644
--- a/log_entity_operations_entity/src/Plugin/QueueWorker/LogEntityOperationsCleanup.php
+++ b/log_entity_operations_entity/src/Plugin/QueueWorker/LogEntityOperationsCleanup.php
@@ -25,7 +25,7 @@ class LogEntityOperationsCleanup extends QueueWorkerBase implements ContainerFac
   /**
    * Loads and delete the logs.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -38,7 +38,7 @@ class LogEntityOperationsCleanup extends QueueWorkerBase implements ContainerFac
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Form/LogEntityOperationsSettingsForm.php b/src/Form/LogEntityOperationsSettingsForm.php
index 1edd328..cfa0edf 100644
--- a/src/Form/LogEntityOperationsSettingsForm.php
+++ b/src/Form/LogEntityOperationsSettingsForm.php
@@ -19,23 +19,23 @@ class LogEntityOperationsSettingsForm extends ConfigFormBase implements Containe
   /**
    * Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
    * Entity Type Bundle Info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   private $entityTypeBundleInfo;
 
   /**
    * Constructs a new LogEntityOperationsSettingsForm.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity Type Manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   Entity Type Bundle Info.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager,
diff --git a/src/Logger/DrupalLogger.php b/src/Logger/DrupalLogger.php
index f67fa03..1e03326 100644
--- a/src/Logger/DrupalLogger.php
+++ b/src/Logger/DrupalLogger.php
@@ -19,16 +19,16 @@ class DrupalLogger implements EntityOperationsLoggerInterface {
   /**
    * Logger.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   private $logger;
 
   /**
    * LogEntityOperationsManager constructor.
    *
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   Logger.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
    */
   public function __construct(LoggerChannelInterface $logger,
diff --git a/src/Logger/EntityOperationsLoggerInterface.php b/src/Logger/EntityOperationsLoggerInterface.php
index 6d951b4..83db1a4 100644
--- a/src/Logger/EntityOperationsLoggerInterface.php
+++ b/src/Logger/EntityOperationsLoggerInterface.php
@@ -17,9 +17,9 @@ interface EntityOperationsLoggerInterface {
    *
    * @param string $operation
    *   The operation which is performed on $entity_id.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The manipulated entity.
-   * @param \Drupal\Core\Session\AccountProxyInterface $user
+   * @param AccountProxyInterface $user
    *   The user object that performed the $operation.
    * @param string $diff
    *   If configured, the diff is provided when $operation is update.
diff --git a/src/Service/LogEntityOperationsManager.php b/src/Service/LogEntityOperationsManager.php
index 599739d..b1f4fab 100644
--- a/src/Service/LogEntityOperationsManager.php
+++ b/src/Service/LogEntityOperationsManager.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\log_entity_operations\Service;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -20,41 +22,41 @@ class LogEntityOperationsManager {
   /**
    * Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
    * Config Factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   private $configFactory;
 
   /**
    * Module Handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   private $moduleHandler;
 
   /**
    * Drupal Logger.
    *
-   * @var \Drupal\log_entity_operations\Logger\DrupalLogger
+   * @var DrupalLogger
    */
   private $drupalLogger;
 
   /**
    * LogEntityOperationsManager constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity Type Manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config Factory.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\log_entity_operations\Logger\DrupalLogger $drupal_logger
+   * @param DrupalLogger $drupal_logger
    *   Config Factory.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager,
@@ -74,12 +76,12 @@ class LogEntityOperationsManager {
    * and prepares the information to be logged. Furthermore it decides which
    * logging routine will be used to store the logs.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity on which operations is performed.
    * @param string $operation
    *   Operation which is performed.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function dispatchLog(EntityInterface $entity, string $operation) {
     $type = $entity->getEntityTypeId();
