diff --git a/entity_access_password.module b/entity_access_password.module
index 45272dd..68dc761 100644
--- a/entity_access_password.module
+++ b/entity_access_password.module
@@ -37,7 +37,7 @@ function entity_access_password_entity_view_mode_alter(string &$view_mode, Entit
     return;
   }
 
-  /** @var \Drupal\entity_access_password\Service\PasswordAccessManagerInterface $password_access_manager */
+  /** @var PasswordAccessManagerInterface $password_access_manager */
   $password_access_manager = \Drupal::service('entity_access_password.password_access_manager');
   if ($password_access_manager->isEntityViewModeProtected($view_mode, $entity)) {
     $entity->addCacheContexts([EntityIsProtectedCacheContext::CONTEXT_ID . ':' . $entity->getEntityTypeId() . '||' . $entity->id() . '||' . $view_mode]);
@@ -54,7 +54,7 @@ function entity_access_password_entity_view_mode_alter(string &$view_mode, Entit
  * @phpstan-ignore-next-line
  */
 function entity_access_password_file_download(string $uri) {
-  /** @var \Drupal\entity_access_password\HookHandler\FileDownload $instance */
+  /** @var FileDownload $instance */
   $instance = \Drupal::service('class_resolver')
     ->getInstanceFromDefinition(FileDownload::class);
   return $instance->fileDownload($uri);
@@ -64,7 +64,7 @@ function entity_access_password_file_download(string $uri) {
  * Implements hook_preprocess_HOOK() for 'html'.
  */
 function entity_access_password_preprocess_html(array &$variables): void {
-  /** @var \Drupal\entity_access_password\HookHandler\LabelReplacer $instance */
+  /** @var LabelReplacer $instance */
   $instance = \Drupal::service('class_resolver')
     ->getInstanceFromDefinition(LabelReplacer::class);
   $instance->preprocessHtml($variables);
@@ -74,7 +74,7 @@ function entity_access_password_preprocess_html(array &$variables): void {
  * Implements hook_preprocess_HOOK() for 'page_title'.
  */
 function entity_access_password_preprocess_page_title(array &$variables): void {
-  /** @var \Drupal\entity_access_password\HookHandler\LabelReplacer $instance */
+  /** @var LabelReplacer $instance */
   $instance = \Drupal::service('class_resolver')
     ->getInstanceFromDefinition(LabelReplacer::class);
   $instance->preprocessPageTitle($variables);
@@ -84,7 +84,7 @@ function entity_access_password_preprocess_page_title(array &$variables): void {
  * Implements hook_preprocess_HOOK() for 'node'.
  */
 function entity_access_password_preprocess_node(array &$variables): void {
-  /** @var \Drupal\entity_access_password\HookHandler\LabelReplacer $instance */
+  /** @var LabelReplacer $instance */
   $instance = \Drupal::service('class_resolver')
     ->getInstanceFromDefinition(LabelReplacer::class);
   $instance->preprocessNode($variables);
@@ -94,7 +94,7 @@ function entity_access_password_preprocess_node(array &$variables): void {
  * Implements hook_preprocess_HOOK() for 'taxonomy_term'.
  */
 function entity_access_password_preprocess_taxonomy_term(array &$variables): void {
-  /** @var \Drupal\entity_access_password\HookHandler\LabelReplacer $instance */
+  /** @var LabelReplacer $instance */
   $instance = \Drupal::service('class_resolver')
     ->getInstanceFromDefinition(LabelReplacer::class);
   $instance->preprocessTaxonomyTerm($variables);
diff --git a/entity_access_password.tokens.inc b/entity_access_password.tokens.inc
index 8e542a9..0f6bb28 100644
--- a/entity_access_password.tokens.inc
+++ b/entity_access_password.tokens.inc
@@ -14,7 +14,7 @@ use Drupal\entity_access_password\HookHandler\Token;
  * Implements hook_token_info().
  */
 function entity_access_password_token_info(): array {
-  /** @var \Drupal\entity_access_password\HookHandler\Token $instance */
+  /** @var Token $instance */
   $instance = \Drupal::service('class_resolver')
     ->getInstanceFromDefinition(Token::class);
   return $instance->tokenInfo();
@@ -24,7 +24,7 @@ function entity_access_password_token_info(): array {
  * Implements hook_tokens().
  */
 function entity_access_password_tokens(string $type, array $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata): array {
-  /** @var \Drupal\entity_access_password\HookHandler\Token $instance */
+  /** @var Token $instance */
   $instance = \Drupal::service('class_resolver')
     ->getInstanceFromDefinition(Token::class);
   return $instance->tokens($type, $tokens, $data, $options, $bubbleable_metadata);
diff --git a/modules/entity_access_password_session_backend/src/Service/SessionBackend.php b/modules/entity_access_password_session_backend/src/Service/SessionBackend.php
index 044b461..b3a1d3c 100644
--- a/modules/entity_access_password_session_backend/src/Service/SessionBackend.php
+++ b/modules/entity_access_password_session_backend/src/Service/SessionBackend.php
@@ -22,14 +22,14 @@ class SessionBackend implements AccessCheckerInterface, AccessStorageInterface {
   /**
    * The session.
    *
-   * @var \Symfony\Component\HttpFoundation\Session\SessionInterface
+   * @var SessionInterface
    */
   protected SessionInterface $session;
 
   /**
    * Constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\Session\SessionInterface $session
+   * @param SessionInterface $session
    *   The session.
    */
   public function __construct(SessionInterface $session) {
diff --git a/modules/entity_access_password_user_data_backend/entity_access_password_user_data_backend.install b/modules/entity_access_password_user_data_backend/entity_access_password_user_data_backend.install
index 8fedbba..26c15d3 100644
--- a/modules/entity_access_password_user_data_backend/entity_access_password_user_data_backend.install
+++ b/modules/entity_access_password_user_data_backend/entity_access_password_user_data_backend.install
@@ -6,6 +6,7 @@
  */
 
 declare(strict_types = 1);
+use Drupal\user\UserDataInterface;
 
 use Drupal\entity_access_password_user_data_backend\Service\UserDataBackendInterface;
 
@@ -13,7 +14,7 @@ use Drupal\entity_access_password_user_data_backend\Service\UserDataBackendInter
  * Implements hook_uninstall().
  */
 function entity_access_password_user_data_backend_uninstall(bool $is_syncing) : void {
-  /** @var \Drupal\user\UserDataInterface $user_data */
+  /** @var UserDataInterface $user_data */
   $user_data = \Drupal::service('user.data');
   $user_data->delete(UserDataBackendInterface::MODULE_NAME);
 }
diff --git a/modules/entity_access_password_user_data_backend/entity_access_password_user_data_backend.module b/modules/entity_access_password_user_data_backend/entity_access_password_user_data_backend.module
index 87075c4..e8142bc 100644
--- a/modules/entity_access_password_user_data_backend/entity_access_password_user_data_backend.module
+++ b/modules/entity_access_password_user_data_backend/entity_access_password_user_data_backend.module
@@ -15,7 +15,7 @@ use Drupal\entity_access_password_user_data_backend\HookHandler\EntityTypeInfo;
  * Implements hook_entity_operation().
  */
 function entity_access_password_user_data_backend_entity_operation(EntityInterface $entity): array {
-  /** @var \Drupal\entity_access_password_user_data_backend\HookHandler\EntityTypeInfo $instance */
+  /** @var EntityTypeInfo $instance */
   $instance = \Drupal::service('class_resolver')
     ->getInstanceFromDefinition(EntityTypeInfo::class);
   return $instance->entityOperation($entity);
@@ -25,7 +25,7 @@ function entity_access_password_user_data_backend_entity_operation(EntityInterfa
  * Implements hook_entity_delete().
  */
 function entity_access_password_user_data_backend_entity_delete(EntityInterface $entity): void {
-  /** @var \Drupal\entity_access_password_user_data_backend\HookHandler\EntityDelete $instance */
+  /** @var EntityDelete $instance */
   $instance = \Drupal::service('class_resolver')
     ->getInstanceFromDefinition(EntityDelete::class);
   $instance->entityDelete($entity);
diff --git a/modules/entity_access_password_user_data_backend/src/Form/EntityUserDataEditForm.php b/modules/entity_access_password_user_data_backend/src/Form/EntityUserDataEditForm.php
index 54597c3..c10569a 100644
--- a/modules/entity_access_password_user_data_backend/src/Form/EntityUserDataEditForm.php
+++ b/modules/entity_access_password_user_data_backend/src/Form/EntityUserDataEditForm.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\entity_access_password_user_data_backend\Form;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ -36,10 +37,10 @@ class EntityUserDataEditForm extends UserDataEditFormBase {
   /**
    * Retrieves entity from route match.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The entity object as determined from the passed-in route match.
    */
   protected function getEntityFromRouteMatch(RouteMatchInterface $route_match) {
diff --git a/modules/entity_access_password_user_data_backend/src/Form/UserDataEditFormBase.php b/modules/entity_access_password_user_data_backend/src/Form/UserDataEditFormBase.php
index cd516a9..6bb5225 100644
--- a/modules/entity_access_password_user_data_backend/src/Form/UserDataEditFormBase.php
+++ b/modules/entity_access_password_user_data_backend/src/Form/UserDataEditFormBase.php
@@ -21,21 +21,21 @@ abstract class UserDataEditFormBase extends FormBase {
   /**
    * The user data.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected UserDataInterface $userData;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;
 
   /**
    * The user data backend.
    *
-   * @var \Drupal\entity_access_password_user_data_backend\Service\UserDataBackendInterface
+   * @var UserDataBackendInterface
    */
   protected UserDataBackendInterface $userDataBackend;
 
@@ -161,7 +161,7 @@ abstract class UserDataEditFormBase extends FormBase {
   /**
    * Retrieve the form title.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The form title. To have it translatable.
    */
   abstract protected function getFormTitle(): TranslatableMarkup;
@@ -181,7 +181,7 @@ abstract class UserDataEditFormBase extends FormBase {
 
     $uids = \array_keys($entity_access);
 
-    /** @var \Drupal\user\UserInterface[] $users */
+    /** @var UserInterface[] $users */
     $users = $this->entityTypeManager->getStorage('user')->loadMultiple($uids);
     $options = [];
     foreach ($users as $user) {
@@ -193,7 +193,7 @@ abstract class UserDataEditFormBase extends FormBase {
   /**
    * Format a user option.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user to format.
    *
    * @return string
diff --git a/modules/entity_access_password_user_data_backend/src/Form/UserUserDataEditForm.php b/modules/entity_access_password_user_data_backend/src/Form/UserUserDataEditForm.php
index 2ed2bfb..1b42a86 100644
--- a/modules/entity_access_password_user_data_backend/src/Form/UserUserDataEditForm.php
+++ b/modules/entity_access_password_user_data_backend/src/Form/UserUserDataEditForm.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\entity_access_password_user_data_backend\Form;
 
+use Drupal\Core\Entity\FieldableEntityInterface;
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -22,28 +24,28 @@ class UserUserDataEditForm extends FormBase {
   /**
    * The user data.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected UserDataInterface $userData;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;
 
   /**
    * The user data backend.
    *
-   * @var \Drupal\entity_access_password_user_data_backend\Service\UserDataBackendInterface
+   * @var UserDataBackendInterface
    */
   protected UserDataBackendInterface $userDataBackend;
 
   /**
    * The account switcher.
    *
-   * @var \Drupal\Core\Session\AccountSwitcherInterface
+   * @var AccountSwitcherInterface
    */
   protected AccountSwitcherInterface $accountSwitcher;
 
@@ -57,7 +59,7 @@ class UserUserDataEditForm extends FormBase {
   /**
    * The entity type password bundle info.
    *
-   * @var \Drupal\entity_access_password\Service\EntityTypePasswordBundleInfoInterface
+   * @var EntityTypePasswordBundleInfoInterface
    */
   protected EntityTypePasswordBundleInfoInterface $entityTypePasswordBundleInfo;
 
@@ -120,7 +122,7 @@ class UserUserDataEditForm extends FormBase {
    */
   public function submitForm(array &$form, FormStateInterface $form_state): void {
     $storage = $form_state->getStorage();
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     $user = $storage['user'];
     $this->accountSwitcher->switchTo($user);
 
@@ -139,9 +141,9 @@ class UserUserDataEditForm extends FormBase {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user to alter access.
    */
   protected function buildEntityLevelSection(array &$form, FormStateInterface $form_state, UserInterface $user): void {
@@ -175,7 +177,7 @@ class UserUserDataEditForm extends FormBase {
   /**
    * Get the options.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user to get entity access list.
    *
    * @return array
@@ -214,7 +216,7 @@ class UserUserDataEditForm extends FormBase {
         ->condition('uuid', $entity_uuids, 'IN')
         ->execute();
 
-      /** @var \Drupal\Core\Entity\FieldableEntityInterface[] $entities */
+      /** @var FieldableEntityInterface[] $entities */
       $entities = $entity_storage->loadMultiple($entity_ids);
       foreach ($entities as $entity) {
         $options[$this->userDataBackend->getEntityName($entity)] = $this->t('@entity_bundle: @entity_label', [
@@ -232,9 +234,9 @@ class UserUserDataEditForm extends FormBase {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user to alter access.
    */
   protected function entityAccessSubmit(array $form, FormStateInterface $form_state, UserInterface $user): void {
@@ -273,7 +275,7 @@ class UserUserDataEditForm extends FormBase {
       $entity_id = $parsed_entity_grant[1];
       $entity_storage = $this->entityTypeManager->getStorage($entity_type_id);
 
-      /** @var \Drupal\Core\Entity\FieldableEntityInterface $entity */
+      /** @var FieldableEntityInterface $entity */
       $entity = $entity_storage->load($entity_id);
       if ($entity == NULL) {
         $this->messenger()->addWarning($this->t('No entities found for the type @entity_type_id and the ID @entity_id.', [
@@ -292,9 +294,9 @@ class UserUserDataEditForm extends FormBase {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user to alter access.
    */
   protected function buildBundleLevelSection(array &$form, FormStateInterface $form_state, UserInterface $user): void {
@@ -311,7 +313,7 @@ class UserUserDataEditForm extends FormBase {
     $bundle_default_value = [];
     $password_infos = $this->entityTypePasswordBundleInfo->getAllPasswordBundleInfo();
     foreach ($password_infos as $entity_type_id => $entity_infos) {
-      /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+      /** @var EntityTypeInterface $entity_type */
       $entity_type = $entity_infos['entity_type'];
       foreach ($entity_infos['bundles'] as $bundle_id => $bundle_infos) {
         $bundle_user_data_name = $this->userDataBackend->getBundleName($entity_type_id, $bundle_id);
@@ -337,9 +339,9 @@ class UserUserDataEditForm extends FormBase {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user to alter access.
    */
   protected function bundleAccessSubmit(array $form, FormStateInterface $form_state, UserInterface $user): void {
@@ -363,7 +365,7 @@ class UserUserDataEditForm extends FormBase {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   protected function buildGlobalLevelSection(array &$form, FormStateInterface $form_state): void {
@@ -385,9 +387,9 @@ class UserUserDataEditForm extends FormBase {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user to alter access.
    */
   protected function globalAccessSubmit(array $form, FormStateInterface $form_state, UserInterface $user): void {
diff --git a/modules/entity_access_password_user_data_backend/src/HookHandler/EntityDelete.php b/modules/entity_access_password_user_data_backend/src/HookHandler/EntityDelete.php
index 1cf68e6..0b56a92 100644
--- a/modules/entity_access_password_user_data_backend/src/HookHandler/EntityDelete.php
+++ b/modules/entity_access_password_user_data_backend/src/HookHandler/EntityDelete.php
@@ -19,23 +19,23 @@ class EntityDelete implements ContainerInjectionInterface {
   /**
    * The user data.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected UserDataInterface $userData;
 
   /**
    * The user data backend.
    *
-   * @var \Drupal\entity_access_password_user_data_backend\Service\UserDataBackendInterface
+   * @var UserDataBackendInterface
    */
   protected UserDataBackendInterface $userDataBackend;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\user\UserDataInterface $userData
+   * @param UserDataInterface $userData
    *   The user data.
-   * @param \Drupal\entity_access_password_user_data_backend\Service\UserDataBackendInterface $userDataBackend
+   * @param UserDataBackendInterface $userDataBackend
    *   The user data backend.
    */
   public function __construct(
@@ -59,7 +59,7 @@ class EntityDelete implements ContainerInjectionInterface {
   /**
    * Purge user data on entity deletion.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity on which to purge user data.
    */
   public function entityDelete(EntityInterface $entity): void {
diff --git a/modules/entity_access_password_user_data_backend/src/HookHandler/EntityTypeInfo.php b/modules/entity_access_password_user_data_backend/src/HookHandler/EntityTypeInfo.php
index 72189e6..3dc563e 100644
--- a/modules/entity_access_password_user_data_backend/src/HookHandler/EntityTypeInfo.php
+++ b/modules/entity_access_password_user_data_backend/src/HookHandler/EntityTypeInfo.php
@@ -37,14 +37,14 @@ class EntityTypeInfo implements ContainerInjectionInterface {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected AccountProxyInterface $currentUser;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
    */
   public function __construct(
@@ -65,7 +65,7 @@ class EntityTypeInfo implements ContainerInjectionInterface {
   /**
    * Adds operations on entity that supports it.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity on which to define an operation.
    *
    * @return array
diff --git a/modules/entity_access_password_user_data_backend/src/Plugin/Derivative/UserDataBackendBundleLocalTask.php b/modules/entity_access_password_user_data_backend/src/Plugin/Derivative/UserDataBackendBundleLocalTask.php
index 0a5de8a..e5f809b 100644
--- a/modules/entity_access_password_user_data_backend/src/Plugin/Derivative/UserDataBackendBundleLocalTask.php
+++ b/modules/entity_access_password_user_data_backend/src/Plugin/Derivative/UserDataBackendBundleLocalTask.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\entity_access_password_user_data_backend\Plugin\Derivative;
 
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\entity_access_password_user_data_backend\Routing\BundleFormRoutes;
 
 /**
@@ -19,7 +20,7 @@ class UserDataBackendBundleLocalTask extends UserDataBackendDeriverBase {
 
     $password_infos = $this->entityTypePasswordBundleInfo->getAllPasswordBundleInfo();
     foreach ($password_infos as $entity_type_id => $entity_infos) {
-      /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+      /** @var EntityTypeInterface $entity_type */
       $entity_type = $entity_infos['entity_type'];
       foreach ($entity_infos['bundles'] as $bundle_id => $bundle_infos) {
         $route_name = \sprintf(BundleFormRoutes::ROUTE_NAME, $entity_type_id, $bundle_id);
diff --git a/modules/entity_access_password_user_data_backend/src/Plugin/Derivative/UserDataBackendBundleMenuLink.php b/modules/entity_access_password_user_data_backend/src/Plugin/Derivative/UserDataBackendBundleMenuLink.php
index 0825655..3c4dbf0 100644
--- a/modules/entity_access_password_user_data_backend/src/Plugin/Derivative/UserDataBackendBundleMenuLink.php
+++ b/modules/entity_access_password_user_data_backend/src/Plugin/Derivative/UserDataBackendBundleMenuLink.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\entity_access_password_user_data_backend\Plugin\Derivative;
 
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\entity_access_password_user_data_backend\Routing\BundleFormRoutes;
 
 /**
@@ -19,7 +20,7 @@ class UserDataBackendBundleMenuLink extends UserDataBackendDeriverBase {
 
     $password_infos = $this->entityTypePasswordBundleInfo->getAllPasswordBundleInfo();
     foreach ($password_infos as $entity_type_id => $entity_infos) {
-      /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+      /** @var EntityTypeInterface $entity_type */
       $entity_type = $entity_infos['entity_type'];
       foreach ($entity_infos['bundles'] as $bundle_id => $bundle_infos) {
         $route_name = \sprintf(BundleFormRoutes::ROUTE_NAME, $entity_type_id, $bundle_id);
diff --git a/modules/entity_access_password_user_data_backend/src/Plugin/Derivative/UserDataBackendDeriverBase.php b/modules/entity_access_password_user_data_backend/src/Plugin/Derivative/UserDataBackendDeriverBase.php
index a263f0b..e9df1e1 100644
--- a/modules/entity_access_password_user_data_backend/src/Plugin/Derivative/UserDataBackendDeriverBase.php
+++ b/modules/entity_access_password_user_data_backend/src/Plugin/Derivative/UserDataBackendDeriverBase.php
@@ -19,14 +19,14 @@ abstract class UserDataBackendDeriverBase extends DeriverBase implements Contain
   /**
    * The entity type password bundle info.
    *
-   * @var \Drupal\entity_access_password\Service\EntityTypePasswordBundleInfoInterface
+   * @var EntityTypePasswordBundleInfoInterface
    */
   protected EntityTypePasswordBundleInfoInterface $entityTypePasswordBundleInfo;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\entity_access_password\Service\EntityTypePasswordBundleInfoInterface $entityTypePasswordBundleInfo
+   * @param EntityTypePasswordBundleInfoInterface $entityTypePasswordBundleInfo
    *   The entity type password bundle info.
    */
   public function __construct(
diff --git a/modules/entity_access_password_user_data_backend/src/Plugin/Derivative/UserDataBackendEntityLocalTask.php b/modules/entity_access_password_user_data_backend/src/Plugin/Derivative/UserDataBackendEntityLocalTask.php
index d0992be..2353617 100644
--- a/modules/entity_access_password_user_data_backend/src/Plugin/Derivative/UserDataBackendEntityLocalTask.php
+++ b/modules/entity_access_password_user_data_backend/src/Plugin/Derivative/UserDataBackendEntityLocalTask.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\entity_access_password_user_data_backend\Plugin\Derivative;
 
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\entity_access_password_user_data_backend\Routing\EntityFormRoutes;
 
 /**
@@ -24,7 +25,7 @@ class UserDataBackendEntityLocalTask extends UserDataBackendDeriverBase {
 
     $password_infos = $this->entityTypePasswordBundleInfo->getAllPasswordBundleInfo();
     foreach ($password_infos as $entity_type_id => $entity_infos) {
-      /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+      /** @var EntityTypeInterface $entity_type */
       $entity_type = $entity_infos['entity_type'];
       $has_canonical_path = $entity_type->hasLinkTemplate('canonical');
       $has_edit_path = $entity_type->hasLinkTemplate('edit');
diff --git a/modules/entity_access_password_user_data_backend/src/Routing/BundleFormRoutes.php b/modules/entity_access_password_user_data_backend/src/Routing/BundleFormRoutes.php
index 1e5f64b..9c362b3 100644
--- a/modules/entity_access_password_user_data_backend/src/Routing/BundleFormRoutes.php
+++ b/modules/entity_access_password_user_data_backend/src/Routing/BundleFormRoutes.php
@@ -24,14 +24,14 @@ class BundleFormRoutes implements ContainerInjectionInterface {
   /**
    * The entity type password bundle info.
    *
-   * @var \Drupal\entity_access_password\Service\EntityTypePasswordBundleInfoInterface
+   * @var EntityTypePasswordBundleInfoInterface
    */
   protected EntityTypePasswordBundleInfoInterface $entityTypePasswordBundleInfo;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\entity_access_password\Service\EntityTypePasswordBundleInfoInterface $entityTypePasswordBundleInfo
+   * @param EntityTypePasswordBundleInfoInterface $entityTypePasswordBundleInfo
    *   The entity type password bundle info.
    */
   public function __construct(
@@ -52,7 +52,7 @@ class BundleFormRoutes implements ContainerInjectionInterface {
   /**
    * Returns an array of route objects.
    *
-   * @return \Symfony\Component\Routing\Route[]
+   * @return Route[]
    *   An array of route objects.
    */
   public function routes(): array {
diff --git a/modules/entity_access_password_user_data_backend/src/Routing/EntityFormRoutes.php b/modules/entity_access_password_user_data_backend/src/Routing/EntityFormRoutes.php
index 1e174c3..c7edec4 100644
--- a/modules/entity_access_password_user_data_backend/src/Routing/EntityFormRoutes.php
+++ b/modules/entity_access_password_user_data_backend/src/Routing/EntityFormRoutes.php
@@ -25,14 +25,14 @@ class EntityFormRoutes implements ContainerInjectionInterface {
   /**
    * The entity type password bundle info.
    *
-   * @var \Drupal\entity_access_password\Service\EntityTypePasswordBundleInfoInterface
+   * @var EntityTypePasswordBundleInfoInterface
    */
   protected EntityTypePasswordBundleInfoInterface $entityTypePasswordBundleInfo;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\entity_access_password\Service\EntityTypePasswordBundleInfoInterface $entityTypePasswordBundleInfo
+   * @param EntityTypePasswordBundleInfoInterface $entityTypePasswordBundleInfo
    *   The entity type password bundle info.
    */
   public function __construct(
@@ -53,7 +53,7 @@ class EntityFormRoutes implements ContainerInjectionInterface {
   /**
    * Returns an array of route objects.
    *
-   * @return \Symfony\Component\Routing\Route[]
+   * @return Route[]
    *   An array of route objects.
    */
   public function routes(): array {
diff --git a/modules/entity_access_password_user_data_backend/src/Service/UserDataBackend.php b/modules/entity_access_password_user_data_backend/src/Service/UserDataBackend.php
index cbae239..5bbfd38 100644
--- a/modules/entity_access_password_user_data_backend/src/Service/UserDataBackend.php
+++ b/modules/entity_access_password_user_data_backend/src/Service/UserDataBackend.php
@@ -16,23 +16,23 @@ class UserDataBackend implements UserDataBackendInterface {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected AccountProxyInterface $currentUser;
 
   /**
    * The user data.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected UserDataInterface $userData;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\user\UserDataInterface $userData
+   * @param UserDataInterface $userData
    *   The user data.
    */
   public function __construct(
diff --git a/modules/entity_access_password_user_data_backend/src/Service/UserDataBackendInterface.php b/modules/entity_access_password_user_data_backend/src/Service/UserDataBackendInterface.php
index 52e3a3a..e1ab510 100644
--- a/modules/entity_access_password_user_data_backend/src/Service/UserDataBackendInterface.php
+++ b/modules/entity_access_password_user_data_backend/src/Service/UserDataBackendInterface.php
@@ -36,7 +36,7 @@ interface UserDataBackendInterface extends AccessCheckerInterface, AccessStorage
   /**
    * Get the user data name for an entity level access.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity to get entity level access name.
    *
    * @return string
@@ -60,7 +60,7 @@ interface UserDataBackendInterface extends AccessCheckerInterface, AccessStorage
   /**
    * Get the user data name for a bundle level access.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity to get bundle level access name.
    *
    * @return string
diff --git a/modules/entity_access_password_user_data_backend/tests/src/Functional/UserDataBackendFormsTest.php b/modules/entity_access_password_user_data_backend/tests/src/Functional/UserDataBackendFormsTest.php
index 35a18b3..e3ab33f 100644
--- a/modules/entity_access_password_user_data_backend/tests/src/Functional/UserDataBackendFormsTest.php
+++ b/modules/entity_access_password_user_data_backend/tests/src/Functional/UserDataBackendFormsTest.php
@@ -25,28 +25,28 @@ class UserDataBackendFormsTest extends EntityAccessPasswordFunctionalTestBase {
   /**
    * The user data.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected UserDataInterface $userData;
 
   /**
    * The user data backend.
    *
-   * @var \Drupal\entity_access_password_user_data_backend\Service\UserDataBackendInterface
+   * @var UserDataBackendInterface
    */
   protected UserDataBackendInterface $userDataBackend;
 
   /**
    * The account switcher.
    *
-   * @var \Drupal\Core\Session\AccountSwitcherInterface
+   * @var AccountSwitcherInterface
    */
   protected AccountSwitcherInterface $accountSwitcher;
 
   /**
    * Another test user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected UserInterface $user2;
 
@@ -106,7 +106,7 @@ class UserDataBackendFormsTest extends EntityAccessPasswordFunctionalTestBase {
    *
    * @param string $accessLevel
    *   The level of access to check.
-   * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
+   * @param FieldableEntityInterface|null $entity
    *   The entity to check access against. NULL if global access.
    */
   protected function checkAccessLevelForm(string $accessLevel, ?FieldableEntityInterface $entity = NULL): void {
@@ -152,7 +152,7 @@ class UserDataBackendFormsTest extends EntityAccessPasswordFunctionalTestBase {
   /**
    * Test the user form.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user to check access for.
    */
   protected function checkUserForm(UserInterface $user): void {
@@ -299,9 +299,9 @@ class UserDataBackendFormsTest extends EntityAccessPasswordFunctionalTestBase {
    *
    * @param string $accessLevel
    *   The level of access to check.
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user to check access for.
-   * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
+   * @param FieldableEntityInterface|null $entity
    *   The entity to check access against. NULL if global access.
    */
   protected function userHasAccess(string $accessLevel, UserInterface $user, ?FieldableEntityInterface $entity = NULL): void {
@@ -335,9 +335,9 @@ class UserDataBackendFormsTest extends EntityAccessPasswordFunctionalTestBase {
    *
    * @param string $accessType
    *   The type of access to check.
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user to check access for.
-   * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
+   * @param FieldableEntityInterface|null $entity
    *   The entity to check access against.
    */
   protected function userDoesNotHaveAccess(string $accessType, UserInterface $user, ?FieldableEntityInterface $entity): void {
diff --git a/modules/entity_access_password_user_data_backend/tests/src/Functional/UserDataBackendTest.php b/modules/entity_access_password_user_data_backend/tests/src/Functional/UserDataBackendTest.php
index a79e710..68cc4dc 100644
--- a/modules/entity_access_password_user_data_backend/tests/src/Functional/UserDataBackendTest.php
+++ b/modules/entity_access_password_user_data_backend/tests/src/Functional/UserDataBackendTest.php
@@ -20,14 +20,14 @@ class UserDataBackendTest extends BackendTestBase {
   /**
    * The user data.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected UserDataInterface $userData;
 
   /**
    * The user data backend.
    *
-   * @var \Drupal\entity_access_password_user_data_backend\Service\UserDataBackendInterface
+   * @var UserDataBackendInterface
    */
   protected UserDataBackendInterface $userDataBackend;
 
diff --git a/src/Cache/Context/EntityIsProtectedCacheContext.php b/src/Cache/Context/EntityIsProtectedCacheContext.php
index ac84e22..539f758 100644
--- a/src/Cache/Context/EntityIsProtectedCacheContext.php
+++ b/src/Cache/Context/EntityIsProtectedCacheContext.php
@@ -35,14 +35,14 @@ class EntityIsProtectedCacheContext implements CalculatedCacheContextInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;
 
   /**
    * The password access manager.
    *
-   * @var \Drupal\entity_access_password\Service\PasswordAccessManagerInterface
+   * @var PasswordAccessManagerInterface
    */
   protected PasswordAccessManagerInterface $passwordAccessManager;
 
@@ -56,9 +56,9 @@ class EntityIsProtectedCacheContext implements CalculatedCacheContextInterface {
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\entity_access_password\Service\PasswordAccessManagerInterface $passwordAccessManager
+   * @param PasswordAccessManagerInterface $passwordAccessManager
    *   The password access manager.
    */
   public function __construct(
@@ -177,7 +177,7 @@ class EntityIsProtectedCacheContext implements CalculatedCacheContextInterface {
    * @param string $entity_id
    *   The entity ID.
    *
-   * @return \Drupal\Core\Entity\FieldableEntityInterface|null
+   * @return FieldableEntityInterface|null
    *   The fieldable entity if found. NULL otherwise.
    */
   protected function loadEntity(string $entity_type_id, string $entity_id) {
diff --git a/src/Event/FileUsageEntityListEvent.php b/src/Event/FileUsageEntityListEvent.php
index 3bb9312..05721c5 100644
--- a/src/Event/FileUsageEntityListEvent.php
+++ b/src/Event/FileUsageEntityListEvent.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\entity_access_password\Event;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\EventDispatcher\Event;
 use Drupal\file\FileInterface;
 
@@ -15,23 +16,23 @@ class FileUsageEntityListEvent extends Event {
   /**
    * The file being downloaded.
    *
-   * @var \Drupal\file\FileInterface
+   * @var FileInterface
    */
   protected FileInterface $file;
 
   /**
    * The list of entities the access will be checked.
    *
-   * @var array|\Drupal\Core\Entity\EntityInterface[]
+   * @var array|EntityInterface[]
    */
   protected array $entities;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file being downloaded.
-   * @param \Drupal\Core\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   The list of entities the access will be checked.
    */
   public function __construct(FileInterface $file, array $entities) {
@@ -42,7 +43,7 @@ class FileUsageEntityListEvent extends Event {
   /**
    * Returns the file entity.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   The file being manipulated.
    */
   public function getFile(): FileInterface {
@@ -52,7 +53,7 @@ class FileUsageEntityListEvent extends Event {
   /**
    * Returns the list of entities to check.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The list of entities the access will be checked.
    */
   public function getEntities(): array {
diff --git a/src/EventSubscriber/WebformSubmissionFileUsageSubscriber.php b/src/EventSubscriber/WebformSubmissionFileUsageSubscriber.php
index dddf39a..57ebd21 100644
--- a/src/EventSubscriber/WebformSubmissionFileUsageSubscriber.php
+++ b/src/EventSubscriber/WebformSubmissionFileUsageSubscriber.php
@@ -25,7 +25,7 @@ class WebformSubmissionFileUsageSubscriber implements EventSubscriberInterface {
   /**
    * Get the webform submission parent entity if it exists.
    *
-   * @param \Drupal\entity_access_password\Event\FileUsageEntityListEvent $event
+   * @param FileUsageEntityListEvent $event
    *   The event containing the entities.
    */
   public function getWebformSubmissionParentEntities(FileUsageEntityListEvent $event): void {
diff --git a/src/Form/PasswordForm.php b/src/Form/PasswordForm.php
index a22750e..0f6dac7 100644
--- a/src/Form/PasswordForm.php
+++ b/src/Form/PasswordForm.php
@@ -34,14 +34,14 @@ class PasswordForm extends FormBase implements BaseFormIdInterface, PasswordForm
   /**
    * The flood service.
    *
-   * @var \Drupal\Core\Flood\FloodInterface
+   * @var FloodInterface
    */
   protected FloodInterface $flood;
 
   /**
    * The password validator.
    *
-   * @var \Drupal\entity_access_password\Service\PasswordValidatorInterface
+   * @var PasswordValidatorInterface
    */
   protected PasswordValidatorInterface $passwordValidator;
 
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index f1d3c8f..df99b5a 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -32,7 +32,7 @@ class SettingsForm extends ConfigFormBase {
   /**
    * The password hashing service.
    *
-   * @var \Drupal\Core\Password\PasswordInterface
+   * @var PasswordInterface
    */
   protected PasswordInterface $password;
 
diff --git a/src/HookHandler/FileDownload.php b/src/HookHandler/FileDownload.php
index 16a79e3..5a0c832 100644
--- a/src/HookHandler/FileDownload.php
+++ b/src/HookHandler/FileDownload.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\entity_access_password\HookHandler;
 
+use Drupal\file\FileInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\entity_access_password\Event\FileUsageEntityListEvent;
@@ -25,41 +26,41 @@ class FileDownload implements ContainerInjectionInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;
 
   /**
    * The file usage service.
    *
-   * @var \Drupal\file\FileUsage\FileUsageInterface
+   * @var FileUsageInterface
    */
   protected FileUsageInterface $fileUsage;
 
   /**
    * The password access manager.
    *
-   * @var \Drupal\entity_access_password\Service\PasswordAccessManagerInterface
+   * @var PasswordAccessManagerInterface
    */
   protected PasswordAccessManagerInterface $passwordAccessManager;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected EventDispatcherInterface $eventDispatcher;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\file\FileUsage\FileUsageInterface $fileUsage
+   * @param FileUsageInterface $fileUsage
    *   The file usage service.
-   * @param \Drupal\entity_access_password\Service\PasswordAccessManagerInterface $passwordAccessManager
+   * @param PasswordAccessManagerInterface $passwordAccessManager
    *   The password access manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher.
    */
   public function __construct(
@@ -99,7 +100,7 @@ class FileDownload implements ContainerInjectionInterface {
    * @see \hook_file_download()
    */
   public function fileDownload(string $uri) {
-    /** @var \Drupal\file\FileInterface[] $files */
+    /** @var FileInterface[] $files */
     $files = $this->entityTypeManager->getStorage('file')->loadByProperties([
       'uri' => $uri,
     ]);
diff --git a/src/HookHandler/LabelReplacer.php b/src/HookHandler/LabelReplacer.php
index 9d3bcc0..9c87538 100644
--- a/src/HookHandler/LabelReplacer.php
+++ b/src/HookHandler/LabelReplacer.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\entity_access_password\HookHandler;
 
+use Drupal\node\NodeInterface;
+use Drupal\taxonomy\TermInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -25,32 +28,32 @@ class LabelReplacer implements ContainerInjectionInterface {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected ModuleHandlerInterface $moduleHandler;
 
   /**
    * The route parser.
    *
-   * @var \Drupal\entity_access_password\Service\RouteParserInterface
+   * @var RouteParserInterface
    */
   protected RouteParserInterface $routeParser;
 
   /**
    * The password access manager.
    *
-   * @var \Drupal\entity_access_password\Service\PasswordAccessManagerInterface
+   * @var PasswordAccessManagerInterface
    */
   protected PasswordAccessManagerInterface $passwordAccessManager;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
-   * @param \Drupal\entity_access_password\Service\RouteParserInterface $routeParser
+   * @param RouteParserInterface $routeParser
    *   The route parser.
-   * @param \Drupal\entity_access_password\Service\PasswordAccessManagerInterface $passwordAccessManager
+   * @param PasswordAccessManagerInterface $passwordAccessManager
    *   The password access manager.
    */
   public function __construct(
@@ -131,7 +134,7 @@ class LabelReplacer implements ContainerInjectionInterface {
       return;
     }
 
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = $variables['node'];
 
     $cacheableMetadata = new CacheableMetadata();
@@ -158,7 +161,7 @@ class LabelReplacer implements ContainerInjectionInterface {
       return;
     }
 
-    /** @var \Drupal\taxonomy\TermInterface $term */
+    /** @var TermInterface $term */
     $term = $variables['term'];
 
     $cacheableMetadata = new CacheableMetadata();
@@ -177,12 +180,12 @@ class LabelReplacer implements ContainerInjectionInterface {
   /**
    * Get the replacement if the entity label should be masked.
    *
-   * @param \Drupal\Core\Cache\CacheableMetadata $cacheableMetadata
+   * @param CacheableMetadata $cacheableMetadata
    *   Cacheable metadata.
-   * @param \Drupal\Core\Entity\EntityInterface|null $entity
+   * @param EntityInterface|null $entity
    *   The entity if precised. NULL to use an entity from route context.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup|null
+   * @return TranslatableMarkup|null
    *   The replacement markup. NULL if nothing to change.
    */
   protected function getReplacement(CacheableMetadata $cacheableMetadata, ?EntityInterface $entity = NULL) {
diff --git a/src/HookHandler/Token.php b/src/HookHandler/Token.php
index 53f9079..4003614 100644
--- a/src/HookHandler/Token.php
+++ b/src/HookHandler/Token.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\entity_access_password\HookHandler;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -23,23 +24,23 @@ class Token implements ContainerInjectionInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;
 
   /**
    * The password access manager.
    *
-   * @var \Drupal\entity_access_password\Service\PasswordAccessManagerInterface
+   * @var PasswordAccessManagerInterface
    */
   protected PasswordAccessManagerInterface $passwordAccessManager;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\entity_access_password\Service\PasswordAccessManagerInterface $passwordAccessManager
+   * @param PasswordAccessManagerInterface $passwordAccessManager
    *   The password access manager.
    */
   public function __construct(
@@ -111,7 +112,7 @@ class Token implements ContainerInjectionInterface {
    *   An associative array of data objects.
    * @param array $options
    *   An associative array of options for token replacement.
-   * @param \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata
+   * @param BubbleableMetadata $bubbleable_metadata
    *   The bubbleable metadata.
    *
    * @return array
@@ -126,7 +127,7 @@ class Token implements ContainerInjectionInterface {
       foreach ($tokens as $name => $original) {
         switch ($name) {
           case 'protected-label':
-            /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+            /** @var ContentEntityInterface $entity */
             $entity = $data['entity'];
             $replacements[$original] = $entity->label();
 
diff --git a/src/Plugin/Field/FieldFormatter/EntityAccessPasswordBooleanFormatter.php b/src/Plugin/Field/FieldFormatter/EntityAccessPasswordBooleanFormatter.php
index 0a6cfb6..c7dac1f 100644
--- a/src/Plugin/Field/FieldFormatter/EntityAccessPasswordBooleanFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/EntityAccessPasswordBooleanFormatter.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\entity_access_password\Plugin\Field\FieldFormatter;
 
+use Drupal\entity_access_password\Plugin\Field\FieldType\EntityAccessPasswordItem;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\Plugin\Field\FieldFormatter\BooleanFormatter;
 use Drupal\Core\Form\FormStateInterface;
@@ -74,7 +75,7 @@ class EntityAccessPasswordBooleanFormatter extends BooleanFormatter {
    * {@inheritdoc}
    */
   public function viewElements(FieldItemListInterface $items, $langcode): array {
-    /** @var \Drupal\entity_access_password\Plugin\Field\FieldType\EntityAccessPasswordItem[] $items */
+    /** @var EntityAccessPasswordItem[] $items */
     $elements = [];
 
     $formats = $this->getOutputFormats();
diff --git a/src/Plugin/Field/FieldFormatter/EntityAccessPasswordFormFormatter.php b/src/Plugin/Field/FieldFormatter/EntityAccessPasswordFormFormatter.php
index d7aad1f..96acf47 100644
--- a/src/Plugin/Field/FieldFormatter/EntityAccessPasswordFormFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/EntityAccessPasswordFormFormatter.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\entity_access_password\Plugin\Field\FieldFormatter;
 
+use Drupal\entity_access_password\Plugin\Field\FieldType\EntityAccessPasswordItem;
+use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\FormatterBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -65,7 +67,7 @@ class EntityAccessPasswordFormFormatter extends FormatterBase {
       return $elements;
     }
 
-    /** @var \Drupal\entity_access_password\Plugin\Field\FieldType\EntityAccessPasswordItem $itemsData */
+    /** @var EntityAccessPasswordItem $itemsData */
     $itemsData = $items->get(0);
     /** @var array $values */
     $values = $itemsData->getValue();
@@ -78,7 +80,7 @@ class EntityAccessPasswordFormFormatter extends FormatterBase {
     /** @var string $help_text */
     $help_text = $this->getSetting('help_text');
 
-    /** @var \Drupal\Core\Entity\FieldableEntityInterface $entity */
+    /** @var FieldableEntityInterface $entity */
     $entity = $itemsData->getEntity();
 
     $elements[] = [
diff --git a/src/Plugin/Field/FieldType/EntityAccessPasswordItem.php b/src/Plugin/Field/FieldType/EntityAccessPasswordItem.php
index fc66ddc..dced8fc 100644
--- a/src/Plugin/Field/FieldType/EntityAccessPasswordItem.php
+++ b/src/Plugin/Field/FieldType/EntityAccessPasswordItem.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\entity_access_password\Plugin\Field\FieldType;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Component\Utility\Random;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemBase;
@@ -160,9 +161,9 @@ class EntityAccessPasswordItem extends FieldItemBase {
     }
 
     // If no new password, re-inject saved password if existing.
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->getEntity();
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $original */
+    /** @var ContentEntityInterface $original */
     // @phpstan-ignore-next-line
     $original = $entity->original;
     // New entity.
diff --git a/src/Plugin/Field/FieldWidget/EntityAccessPasswordWidget.php b/src/Plugin/Field/FieldWidget/EntityAccessPasswordWidget.php
index a9c221c..c5a4150 100644
--- a/src/Plugin/Field/FieldWidget/EntityAccessPasswordWidget.php
+++ b/src/Plugin/Field/FieldWidget/EntityAccessPasswordWidget.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\entity_access_password\Plugin\Field\FieldWidget;
 
+use Drupal\entity_access_password\Plugin\Field\FieldType\EntityAccessPasswordItem;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Component\Utility\Random;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -28,14 +29,14 @@ class EntityAccessPasswordWidget extends WidgetBase {
   /**
    * The password hashing service object.
    *
-   * @var \Drupal\Core\Password\PasswordInterface
+   * @var PasswordInterface
    */
   protected PasswordInterface $password;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected ConfigFactoryInterface $configFactory;
 
@@ -137,7 +138,7 @@ class EntityAccessPasswordWidget extends WidgetBase {
    * {@inheritdoc}
    */
   public function formElement(FieldItemListInterface $items, $delta, array $element, array &$form, FormStateInterface $form_state): array {
-    /** @var \Drupal\entity_access_password\Plugin\Field\FieldType\EntityAccessPasswordItem $item */
+    /** @var EntityAccessPasswordItem $item */
     $item = $items[$delta];
 
     $states_selector = $this->getStatesSelector($element);
@@ -410,7 +411,7 @@ class EntityAccessPasswordWidget extends WidgetBase {
    *
    * @param array $element
    *   The element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
diff --git a/src/Service/AccessCheckerInterface.php b/src/Service/AccessCheckerInterface.php
index 92f1d62..ea083d0 100644
--- a/src/Service/AccessCheckerInterface.php
+++ b/src/Service/AccessCheckerInterface.php
@@ -14,7 +14,7 @@ interface AccessCheckerInterface {
   /**
    * Check if the current user has access to the entity.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity to check access for.
    *
    * @return bool
@@ -25,7 +25,7 @@ interface AccessCheckerInterface {
   /**
    * Check if the current user has access to the entity's bundle.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity to check bundle access for.
    *
    * @return bool
diff --git a/src/Service/AccessCheckerManager.php b/src/Service/AccessCheckerManager.php
index 3908f29..c0c9451 100644
--- a/src/Service/AccessCheckerManager.php
+++ b/src/Service/AccessCheckerManager.php
@@ -23,7 +23,7 @@ class AccessCheckerManager implements ChainAccessCheckerInterface {
    *
    * Set to NULL if the array needs to be re-calculated.
    *
-   * @var \Drupal\entity_access_password\Service\AccessCheckerInterface[]|null
+   * @var AccessCheckerInterface[]|null
    */
   protected $sortedCheckers;
 
@@ -81,7 +81,7 @@ class AccessCheckerManager implements ChainAccessCheckerInterface {
   /**
    * Returns the sorted array of checkers.
    *
-   * @return \Drupal\entity_access_password\Service\AccessCheckerInterface[]
+   * @return AccessCheckerInterface[]
    *   An array of checker objects.
    */
   protected function getSortedCheckers() {
diff --git a/src/Service/AccessStorageInterface.php b/src/Service/AccessStorageInterface.php
index dd01300..e0f13ed 100644
--- a/src/Service/AccessStorageInterface.php
+++ b/src/Service/AccessStorageInterface.php
@@ -14,7 +14,7 @@ interface AccessStorageInterface {
   /**
    * Stores that the user has access to this entity.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity the access is stored.
    */
   public function storeEntityAccess(FieldableEntityInterface $entity): void;
@@ -22,7 +22,7 @@ interface AccessStorageInterface {
   /**
    * Stores that the user has access to the entity's bundle.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity the access is stored for the bundle.
    */
   public function storeEntityBundleAccess(FieldableEntityInterface $entity): void;
diff --git a/src/Service/AccessStorageManager.php b/src/Service/AccessStorageManager.php
index 41ae06b..e8d6cff 100644
--- a/src/Service/AccessStorageManager.php
+++ b/src/Service/AccessStorageManager.php
@@ -23,7 +23,7 @@ class AccessStorageManager implements ChainAccessStorageInterface {
    *
    * Set to NULL if the array needs to be re-calculated.
    *
-   * @var \Drupal\entity_access_password\Service\AccessStorageInterface[]|null
+   * @var AccessStorageInterface[]|null
    */
   protected $sortedStorages;
 
@@ -66,7 +66,7 @@ class AccessStorageManager implements ChainAccessStorageInterface {
   /**
    * Returns the sorted array of storages.
    *
-   * @return \Drupal\entity_access_password\Service\AccessStorageInterface[]
+   * @return AccessStorageInterface[]
    *   An array of storage objects.
    */
   protected function getSortedStorages() {
diff --git a/src/Service/BypassPermissionAccessChecker.php b/src/Service/BypassPermissionAccessChecker.php
index 1384998..3b6edce 100644
--- a/src/Service/BypassPermissionAccessChecker.php
+++ b/src/Service/BypassPermissionAccessChecker.php
@@ -20,14 +20,14 @@ class BypassPermissionAccessChecker implements AccessCheckerInterface {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected AccountProxyInterface $currentUser;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
    */
   public function __construct(AccountProxyInterface $currentUser) {
diff --git a/src/Service/ChainAccessCheckerInterface.php b/src/Service/ChainAccessCheckerInterface.php
index f5c1467..aef4854 100644
--- a/src/Service/ChainAccessCheckerInterface.php
+++ b/src/Service/ChainAccessCheckerInterface.php
@@ -12,7 +12,7 @@ interface ChainAccessCheckerInterface extends AccessCheckerInterface {
   /**
    * Adds another access checker.
    *
-   * @param \Drupal\entity_access_password\Service\AccessCheckerInterface $accessChecker
+   * @param AccessCheckerInterface $accessChecker
    *   The access checker to add.
    * @param int $priority
    *   Priority of the access checker.
diff --git a/src/Service/ChainAccessStorageInterface.php b/src/Service/ChainAccessStorageInterface.php
index 1fbe996..127e9b4 100644
--- a/src/Service/ChainAccessStorageInterface.php
+++ b/src/Service/ChainAccessStorageInterface.php
@@ -12,7 +12,7 @@ interface ChainAccessStorageInterface extends AccessStorageInterface {
   /**
    * Adds another access storage.
    *
-   * @param \Drupal\entity_access_password\Service\AccessStorageInterface $accessStorage
+   * @param AccessStorageInterface $accessStorage
    *   The access storage to add.
    * @param int $priority
    *   Priority of the access storage.
diff --git a/src/Service/ChainPasswordValidatorInterface.php b/src/Service/ChainPasswordValidatorInterface.php
index 6167320..54d7fd0 100644
--- a/src/Service/ChainPasswordValidatorInterface.php
+++ b/src/Service/ChainPasswordValidatorInterface.php
@@ -12,7 +12,7 @@ interface ChainPasswordValidatorInterface extends PasswordValidatorInterface {
   /**
    * Adds another access validator.
    *
-   * @param \Drupal\entity_access_password\Service\PasswordValidatorInterface $accessValidator
+   * @param PasswordValidatorInterface $accessValidator
    *   The access validator to add.
    * @param int $priority
    *   Priority of the access validator.
diff --git a/src/Service/EntityTypePasswordBundleInfo.php b/src/Service/EntityTypePasswordBundleInfo.php
index cdf4d04..c89d4d3 100644
--- a/src/Service/EntityTypePasswordBundleInfo.php
+++ b/src/Service/EntityTypePasswordBundleInfo.php
@@ -17,21 +17,21 @@ class EntityTypePasswordBundleInfo implements EntityTypePasswordBundleInfoInterf
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;
 
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected EntityTypeBundleInfoInterface $entityTypeBundleInfo;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected EntityFieldManagerInterface $entityFieldManager;
 
@@ -45,11 +45,11 @@ class EntityTypePasswordBundleInfo implements EntityTypePasswordBundleInfoInterf
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entityTypeBundleInfo
+   * @param EntityTypeBundleInfoInterface $entityTypeBundleInfo
    *   The entity type bundle info.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   The entity field manager.
    */
   public function __construct(
diff --git a/src/Service/PasswordAccessManager.php b/src/Service/PasswordAccessManager.php
index 1e48cd6..c6b9abe 100644
--- a/src/Service/PasswordAccessManager.php
+++ b/src/Service/PasswordAccessManager.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\entity_access_password\Service;
 
+use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
 
@@ -15,14 +16,14 @@ class PasswordAccessManager implements PasswordAccessManagerInterface {
   /**
    * The access checker service.
    *
-   * @var \Drupal\entity_access_password\Service\AccessCheckerInterface
+   * @var AccessCheckerInterface
    */
   protected AccessCheckerInterface $accessChecker;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\entity_access_password\Service\AccessCheckerInterface $accessChecker
+   * @param AccessCheckerInterface $accessChecker
    *   The access checker service.
    */
   public function __construct(
@@ -140,10 +141,10 @@ class PasswordAccessManager implements PasswordAccessManagerInterface {
   /**
    * Get the password fields.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity to get fields.
    *
-   * @return \Drupal\Core\Field\FieldItemListInterface[]
+   * @return FieldItemListInterface[]
    *   The list of non-empty password fields.
    */
   protected function getPasswordFields(FieldableEntityInterface $entity): array {
diff --git a/src/Service/PasswordAccessManagerInterface.php b/src/Service/PasswordAccessManagerInterface.php
index e577564..27cd2fa 100644
--- a/src/Service/PasswordAccessManagerInterface.php
+++ b/src/Service/PasswordAccessManagerInterface.php
@@ -21,7 +21,7 @@ interface PasswordAccessManagerInterface {
    *
    * @param string $view_mode
    *   The view mode to check for.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to check access for.
    *
    * @return bool
@@ -32,7 +32,7 @@ interface PasswordAccessManagerInterface {
   /**
    * Check if an entity label is protected.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to check access for.
    *
    * @return bool
@@ -43,7 +43,7 @@ interface PasswordAccessManagerInterface {
   /**
    * Check if the current user has access to the entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to check access for.
    *
    * @return bool
diff --git a/src/Service/PasswordFormBuilder.php b/src/Service/PasswordFormBuilder.php
index 2dd33b4..eb70d98 100644
--- a/src/Service/PasswordFormBuilder.php
+++ b/src/Service/PasswordFormBuilder.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\entity_access_password\Service;
 
+use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -24,32 +25,32 @@ class PasswordFormBuilder implements PasswordFormBuilderInterface, TrustedCallba
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected FormBuilderInterface $formBuilder;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;
 
   /**
    * The password form.
    *
-   * @var \Drupal\entity_access_password\Form\PasswordFormInterface
+   * @var PasswordFormInterface
    */
   protected PasswordFormInterface $passwordForm;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Form\FormBuilderInterface $formBuilder
+   * @param FormBuilderInterface $formBuilder
    *   The form builder.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\entity_access_password\Form\PasswordFormInterface $passwordForm
+   * @param PasswordFormInterface $passwordForm
    *   The password form.
    */
   public function __construct(
@@ -66,7 +67,7 @@ class PasswordFormBuilder implements PasswordFormBuilderInterface, TrustedCallba
    * {@inheritdoc}
    */
   public function build(string $helpText, string $hint, int $entityId, string $entityTypeId, string $fieldName): array {
-    /** @var \Drupal\Core\Entity\FieldableEntityInterface $entity */
+    /** @var FieldableEntityInterface $entity */
     $entity = $this->entityTypeManager->getStorage($entityTypeId)
       ->load($entityId);
 
diff --git a/src/Service/PasswordValidator.php b/src/Service/PasswordValidator.php
index ff42454..3bf0e36 100644
--- a/src/Service/PasswordValidator.php
+++ b/src/Service/PasswordValidator.php
@@ -17,32 +17,32 @@ class PasswordValidator implements PasswordValidatorInterface {
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected ConfigFactoryInterface $configFactory;
 
   /**
    * The password hashing service object.
    *
-   * @var \Drupal\Core\Password\PasswordInterface
+   * @var PasswordInterface
    */
   protected PasswordInterface $password;
 
   /**
    * The access storage service.
    *
-   * @var \Drupal\entity_access_password\Service\AccessStorageInterface
+   * @var AccessStorageInterface
    */
   protected AccessStorageInterface $accessStorage;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory service.
-   * @param \Drupal\Core\Password\PasswordInterface $password
+   * @param PasswordInterface $password
    *   The password service.
-   * @param \Drupal\entity_access_password\Service\AccessStorageInterface $accessStorage
+   * @param AccessStorageInterface $accessStorage
    *   The access storage service.
    */
   public function __construct(
diff --git a/src/Service/PasswordValidatorInterface.php b/src/Service/PasswordValidatorInterface.php
index ea3a24f..fc557ec 100644
--- a/src/Service/PasswordValidatorInterface.php
+++ b/src/Service/PasswordValidatorInterface.php
@@ -22,7 +22,7 @@ interface PasswordValidatorInterface {
    *
    * @param string $password
    *   The password to validate.
-   * @param \Drupal\entity_access_password\Plugin\Field\FieldType\EntityAccessPasswordItem $fieldItem
+   * @param EntityAccessPasswordItem $fieldItem
    *   The field item.
    *
    * @return bool
diff --git a/src/Service/PasswordValidatorManager.php b/src/Service/PasswordValidatorManager.php
index a7af586..9c67c72 100644
--- a/src/Service/PasswordValidatorManager.php
+++ b/src/Service/PasswordValidatorManager.php
@@ -23,7 +23,7 @@ class PasswordValidatorManager implements ChainPasswordValidatorInterface {
    *
    * Set to NULL if the array needs to be re-calculated.
    *
-   * @var \Drupal\entity_access_password\Service\PasswordValidatorInterface[]|null
+   * @var PasswordValidatorInterface[]|null
    */
   protected $sortedValidators;
 
@@ -52,7 +52,7 @@ class PasswordValidatorManager implements ChainPasswordValidatorInterface {
   /**
    * Returns the sorted array of validators.
    *
-   * @return \Drupal\entity_access_password\Service\PasswordValidatorInterface[]
+   * @return PasswordValidatorInterface[]
    *   An array of validator objects.
    */
   protected function getSortedValidators() {
diff --git a/src/Service/RouteParser.php b/src/Service/RouteParser.php
index e382dbc..c461989 100644
--- a/src/Service/RouteParser.php
+++ b/src/Service/RouteParser.php
@@ -16,21 +16,21 @@ class RouteParser implements RouteParserInterface {
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected RouteMatchInterface $routeMatch;
 
   /**
    * The entity if present. NULL otherwise.
    *
-   * @var \Drupal\Core\Entity\FieldableEntityInterface|null
+   * @var FieldableEntityInterface|null
    */
   protected $foundEntity;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Routing\StackedRouteMatchInterface $routeMatch
+   * @param StackedRouteMatchInterface $routeMatch
    *   The current route match.
    */
   public function __construct(
diff --git a/src/Service/RouteParserInterface.php b/src/Service/RouteParserInterface.php
index 539841c..b311ee0 100644
--- a/src/Service/RouteParserInterface.php
+++ b/src/Service/RouteParserInterface.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\entity_access_password\Service;
 
+use Drupal\Core\Entity\FieldableEntityInterface;
 /**
  * Route parser interface methods.
  */
@@ -17,7 +18,7 @@ interface RouteParserInterface {
   /**
    * Get an entity from the current route.
    *
-   * @return \Drupal\Core\Entity\FieldableEntityInterface|null
+   * @return FieldableEntityInterface|null
    *   The entity if present. NULL otherwise.
    */
   public function getEntityFromCurrentRoute();
diff --git a/tests/src/Functional/EntityAccessPasswordFunctionalTestBase.php b/tests/src/Functional/EntityAccessPasswordFunctionalTestBase.php
index c6e68cd..25df500 100755
--- a/tests/src/Functional/EntityAccessPasswordFunctionalTestBase.php
+++ b/tests/src/Functional/EntityAccessPasswordFunctionalTestBase.php
@@ -65,21 +65,21 @@ abstract class EntityAccessPasswordFunctionalTestBase extends BrowserTestBase {
   /**
    * The admin user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected UserInterface $adminUser;
 
   /**
    * The test user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected UserInterface $user;
 
   /**
    * The bypass password test user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected UserInterface $bypassPasswordUser;
 
@@ -93,21 +93,21 @@ abstract class EntityAccessPasswordFunctionalTestBase extends BrowserTestBase {
   /**
    * The test nodes.
    *
-   * @var \Drupal\node\NodeInterface[]
+   * @var NodeInterface[]
    */
   protected array $protectedNodes;
 
   /**
    * The password hashing service.
    *
-   * @var \Drupal\Core\Password\PasswordInterface
+   * @var PasswordInterface
    */
   protected PasswordInterface $password;
 
   /**
    * The display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected EntityDisplayRepositoryInterface $displayRepository;
 
diff --git a/tests/src/Functional/GlobalBehaviorsTest.php b/tests/src/Functional/GlobalBehaviorsTest.php
index b25431c..8b02e49 100644
--- a/tests/src/Functional/GlobalBehaviorsTest.php
+++ b/tests/src/Functional/GlobalBehaviorsTest.php
@@ -23,7 +23,7 @@ class GlobalBehaviorsTest extends EntityAccessPasswordFunctionalTestBase {
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected Token $token;
 
diff --git a/tests/src/Functional/PrivateFilesTest.php b/tests/src/Functional/PrivateFilesTest.php
index 8874de4..cea4f48 100644
--- a/tests/src/Functional/PrivateFilesTest.php
+++ b/tests/src/Functional/PrivateFilesTest.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\entity_access_password\Functional;
 
+use Drupal\Core\StreamWrapper\StreamWrapperManagerInterface;
+use Drupal\Core\StreamWrapper\StreamWrapperInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\field\Entity\FieldConfig;
@@ -49,28 +51,28 @@ class PrivateFilesTest extends EntityAccessPasswordFunctionalTestBase {
   /**
    * The stream wrapper manager.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;
 
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;
 
   /**
    * The private file.
    *
-   * @var \Drupal\file\FileInterface
+   * @var FileInterface
    */
   protected FileInterface $privateFile;
 
@@ -174,14 +176,14 @@ class PrivateFilesTest extends EntityAccessPasswordFunctionalTestBase {
    */
   protected function preparePrivateFile(): void {
     // Create the physical file.
-    /** @var \Drupal\Core\StreamWrapper\StreamWrapperInterface $stream_wrapper */
+    /** @var StreamWrapperInterface $stream_wrapper */
     $stream_wrapper = $this->streamWrapperManager->getViaUri($this->privateFileUri);
     $directory_uri = $stream_wrapper->dirname($this->privateFileUri);
     $this->fileSystem->prepareDirectory($directory_uri, FileSystemInterface::CREATE_DIRECTORY);
     \file_put_contents($this->privateFileUri, $this->privateFileContent);
 
     // Create the file entity.
-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     $file = $this->entityTypeManager->getStorage('file')->create([
       'filename' => 'test_private.txt',
       'filemime' => 'text/plain',
