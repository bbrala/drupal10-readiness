diff --git a/amp.module b/amp.module
index 69fcde9..667adcb 100644
--- a/amp.module
+++ b/amp.module
@@ -324,7 +324,7 @@ function amp_theme_suggestions_image_alter(array &$suggestions, array $variables
 function amp_theme_registry_alter(&$theme_registry) {
   $theme_registry['amp_image_wrapper'] = $theme_registry['image'];
   $theme_registry['amp_image_wrapper']['template'] = 'amp-image-wrapper';
-  $theme_registry['amp_image_wrapper']['path'] = drupal_get_path('module', 'amp') . '/templates';
+  $theme_registry['amp_image_wrapper']['path'] = \Drupal::service('extension.list.module')->getPath('amp') . '/templates';
 }
 
 /**
diff --git a/src/Asset/AmpCssCollectionRenderer.php b/src/Asset/AmpCssCollectionRenderer.php
index 0c91e1d..725b950 100644
--- a/src/Asset/AmpCssCollectionRenderer.php
+++ b/src/Asset/AmpCssCollectionRenderer.php
@@ -42,43 +42,43 @@ class AmpCssCollectionRenderer extends CssCollectionRenderer {
   /**
    * The inner service that we are decorating.
    *
-   * @var \Drupal\Core\Asset\CssCollectionRenderer
+   * @var CssCollectionRenderer
    */
   protected $cssCollectionRenderer;
 
   /**
    * AMP Service.
    *
-   * @var \Drupal\amp\Service\AMPService
+   * @var AMPService
    */
   protected $ampService;
 
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Constructs a CssCollectionRenderer.
    *
-   * @param \Drupal\Core\Asset\CssCollectionRenderer $cssCollectionRenderer
+   * @param CssCollectionRenderer $cssCollectionRenderer
    *   The decorated CssCollectionRenderer.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state key/value store.
-   * @param \Drupal\amp\Service\AMPService $ampService
+   * @param AMPService $ampService
    *   The AMP service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Configuration factory.
    */
   public function __construct(
@@ -343,7 +343,7 @@ class AmpCssCollectionRenderer extends CssCollectionRenderer {
       $last = $path;
       $path = preg_replace('`(^|/)(?!\.\./)([^/]+)/\.\./`', '$1', $path);
     }
-    return 'url(' . file_url_transform_relative(file_create_url($path)) . ')';
+    return 'url(' . \Drupal::service('file_url_generator')->generateString($path) . ')';
   }
 
 }
diff --git a/src/Element/AmpProcessedText.php b/src/Element/AmpProcessedText.php
index a6b2959..22c975c 100644
--- a/src/Element/AmpProcessedText.php
+++ b/src/Element/AmpProcessedText.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\amp\Element;
 
+use Drupal\amp\Service\AMPService;
+use Lullabot\AMP\AMP;
 use Drupal\filter\Element\ProcessedText;
 use Drupal\Component\Utility\Xss;
 
@@ -37,9 +39,9 @@ class AmpProcessedText extends ProcessedText {
    * Pre-render callback: Processes the amp markup and attaches libraries.
    */
   public static function preRenderAmpText($element) {
-    /** @var \Drupal\amp\Service\AMPService $amp_service */
+    /** @var AMPService $amp_service */
     $amp_service = \Drupal::service('amp.utilities');
-    /** @var \Lullabot\AMP\AMP $amp */
+    /** @var AMP $amp */
     $amp = $amp_service->createAMPConverter();
 
     $amp->loadHtml($element['#markup']);
diff --git a/src/EntityTypeInfo.php b/src/EntityTypeInfo.php
index 8791fad..22f5824 100644
--- a/src/EntityTypeInfo.php
+++ b/src/EntityTypeInfo.php
@@ -15,23 +15,23 @@ class EntityTypeInfo extends ServiceProviderBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The cache backend to use for the complete theme registry data.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;
 
   /**
    * Constructs a new EntityTypeRepository.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend interface to use for the complete theme registry data.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, CacheBackendInterface $cache) {
diff --git a/src/EventSubscriber/AmpEventSubscriber.php b/src/EventSubscriber/AmpEventSubscriber.php
index 5913787..5b6d573 100644
--- a/src/EventSubscriber/AmpEventSubscriber.php
+++ b/src/EventSubscriber/AmpEventSubscriber.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\amp\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ViewEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseForControllerResultEvent;
 use Drupal\Core\EventSubscriber\MainContentViewSubscriber;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ -18,23 +18,23 @@ class AmpEventSubscriber extends ServiceProviderBase implements EventSubscriberI
   /**
    * AMP context service.
    *
-   * @var Drupal\amp\Routing\AmpContext
+   * @var AmpContext
    */
   protected $ampContext;
 
   /**
    * The route match service.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * Constructs an AmpEventSubscriber object.
    *
-   * @param Drupal\amp\Routing\AmpContext $ampContext
+   * @param AmpContext $ampContext
    *   The AMP context service.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $routeMatch
+   * @param RouteMatchInterface $routeMatch
    *   The RouteMatch service.
    */
   public function __construct(AmpContext $ampContext, RouteMatchInterface $routeMatch) {
@@ -45,10 +45,10 @@ class AmpEventSubscriber extends ServiceProviderBase implements EventSubscriberI
   /**
    * Alters the wrapper format if this is an AMP request.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForControllerResultEvent $event
+   * @param ViewEvent $event
    *   The event to process.
    */
-  public function onView(GetResponseForControllerResultEvent $event) {
+  public function onView(ViewEvent $event) {
 
     // Don't interfere if this is a request that does not use html or amp
     // wrapper formats.
diff --git a/src/Form/AmpSettingsForm.php b/src/Form/AmpSettingsForm.php
index 8ca0c13..e6e2f79 100644
--- a/src/Form/AmpSettingsForm.php
+++ b/src/Form/AmpSettingsForm.php
@@ -19,7 +19,7 @@ class AmpSettingsForm extends ConfigFormBase {
   /**
    * The theme handler service.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
@@ -33,14 +33,14 @@ class AmpSettingsForm extends ConfigFormBase {
   /**
    * The cache tags invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $tagInvalidate;
 
   /**
    * Information about AMP-enabled content types.
    *
-   * @var \Drupal\amp\EntityTypeInfo
+   * @var EntityTypeInfo
    */
   protected $entityTypeInfo;
 
@@ -85,13 +85,13 @@ class AmpSettingsForm extends ConfigFormBase {
   /**
    * Constructs a AmpSettingsForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $tag_invalidate
+   * @param CacheTagsInvalidatorInterface $tag_invalidate
    *   The cache tags invalidator.
-   * @param \Drupal\amp\EntityTypeInfo $entity_type_info
+   * @param EntityTypeInfo $entity_type_info
    *   Information about AMP-enabled content types.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ThemeHandlerInterface $theme_handler, CacheTagsInvalidatorInterface $tag_invalidate, EntityTypeInfo $entity_type_info) {
diff --git a/src/Render/AmpHtmlRenderer.php b/src/Render/AmpHtmlRenderer.php
index 9eedd80..b54870a 100644
--- a/src/Render/AmpHtmlRenderer.php
+++ b/src/Render/AmpHtmlRenderer.php
@@ -28,30 +28,30 @@ class AmpHtmlRenderer extends HtmlRenderer {
   /**
    * AMP Service.
    *
-   * @var \Drupal\amp\Service\AMPService
+   * @var AMPService
    */
   protected $ampService;
 
   /**
    * Constructs a new HtmlRenderer.
    *
-   * @param \Drupal\Core\Controller\TitleResolverInterface $title_resolver
+   * @param TitleResolverInterface $title_resolver
    *   The title resolver.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $display_variant_manager
+   * @param PluginManagerInterface $display_variant_manager
    *   The display variant manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\Core\Render\RenderCacheInterface $render_cache
+   * @param RenderCacheInterface $render_cache
    *   The render cache service.
    * @param array $renderer_config
    *   The renderer configuration array.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $theme_manager
+   * @param ThemeManagerInterface $theme_manager
    *   The theme manager.
-   * @param \Drupal\amp\Service\AMPService $amp_service
+   * @param AMPService $amp_service
    *   The AMP service.
    */
   public function __construct(TitleResolverInterface $title_resolver, PluginManagerInterface $display_variant_manager, EventDispatcherInterface $event_dispatcher, ModuleHandlerInterface $module_handler, RendererInterface $renderer, RenderCacheInterface $render_cache, array $renderer_config, ThemeManagerInterface $theme_manager = NULL, AMPService $amp_service) {
diff --git a/src/Render/AmpHtmlResponseAttachmentsProcessor.php b/src/Render/AmpHtmlResponseAttachmentsProcessor.php
index b1de57b..f1b052b 100644
--- a/src/Render/AmpHtmlResponseAttachmentsProcessor.php
+++ b/src/Render/AmpHtmlResponseAttachmentsProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\amp\Render;
 
+use Drupal\Core\Config\Config;
 use Drupal\Core\Render\HtmlResponseAttachmentsProcessor;
 use Drupal\Core\Asset\AssetResolverInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -35,42 +36,42 @@ class AmpHtmlResponseAttachmentsProcessor extends HtmlResponseAttachmentsProcess
   /**
    * The inner service that we are decorating.
    *
-   * @var \Drupal\Core\Render\HtmlResponseAttachmentsProcessor
+   * @var HtmlResponseAttachmentsProcessor
    */
   protected $htmlResponseAttachmentsProcessor;
 
   /**
    * The route amp context to determine whether a route is an AMP one.
    *
-   * @var \Drupal\amp\Routing\AmpContext
+   * @var AmpContext
    */
   protected $ampContext;
 
   /**
    * A config object for the system performance configuration.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;
 
   /**
    * Constructs a HtmlResponseAttachmentsProcessor object.
    *
-   * @param \Drupal\amp\Routing\AmpContext $amp_context
+   * @param AmpContext $amp_context
    *   The route amp context to determine whether the route is an amp one.
-   * @param \Drupal\Core\Asset\AssetResolverInterface $asset_resolver
+   * @param AssetResolverInterface $asset_resolver
    *   An asset resolver.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   A config factory for retrieving required config objects.
-   * @param \Drupal\Core\Asset\AssetCollectionRendererInterface $css_collection_renderer
+   * @param AssetCollectionRendererInterface $css_collection_renderer
    *   The CSS asset collection renderer.
-   * @param \Drupal\Core\Asset\AssetCollectionRendererInterface $js_collection_renderer
+   * @param AssetCollectionRendererInterface $js_collection_renderer
    *   The JS asset collection renderer.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
    */
   public function __construct(HtmlResponseAttachmentsProcessor $htmlResponseAttachmentsProcessor, AmpContext $amp_context, AssetResolverInterface $asset_resolver, ConfigFactoryInterface $config_factory, AssetCollectionRendererInterface $css_collection_renderer, AssetCollectionRendererInterface $js_collection_renderer, RequestStack $request_stack, RendererInterface $renderer, ModuleHandlerInterface $module_handler) {
diff --git a/src/Routing/AmpContext.php b/src/Routing/AmpContext.php
index 72d33a7..2d2b3f9 100644
--- a/src/Routing/AmpContext.php
+++ b/src/Routing/AmpContext.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\amp\Routing;
 
+use Drupal\node\NodeInterface;
 use Drupal\Core\DependencyInjection\ServiceProviderBase;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Theme\ThemeManager;
@@ -19,50 +20,50 @@ class AmpContext extends ServiceProviderBase {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Theme manager.
    *
-   * @var \Drupal\Core\Theme\ThemeManager
+   * @var ThemeManager
    */
   protected $themeManager;
 
   /**
    * Information about AMP-enabled content types.
    *
-   * @var \Drupal\amp\EntityTypeInfo
+   * @var EntityTypeInfo
    */
   protected $entityTypeInfo;
 
   /**
    * The route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * The admin context.
    *
-   * @var \Drupal\Core\Routing\AdminContext
+   * @var AdminContext
    */
   protected $adminContext;
 
   /**
    * Construct a new amp context helper instance.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \Drupal\Core\Theme\ThemeManager $themeManager
+   * @param ThemeManager $themeManager
    *   The theme manager.
-   * @param \Drupal\amp\EntityTypeInfo $entity_type_info
+   * @param EntityTypeInfo $entity_type_info
    *   Information about AMP-enabled content types.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
-   * @param \Drupal\Core\Routing\AdminContext $adminContext
+   * @param AdminContext $adminContext
    *   The admin route context.
    */
   public function __construct(ConfigFactoryInterface $configFactory, ThemeManager $themeManager, EntityTypeInfo $entityTypeInfo, RouteMatchInterface $routeMatch, AdminContext $adminContext) {
@@ -76,7 +77,7 @@ class AmpContext extends ServiceProviderBase {
   /**
    * Determines whether the active route is an AMP route.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    * @param mixed $entity
    *   The entity to assess, if any.
@@ -101,7 +102,7 @@ class AmpContext extends ServiceProviderBase {
     }
     // If we have an entity, we can test it.
     $route_entity = $this->routeEntity($routeMatch);
-    if ($entity instanceof \Drupal\node\NodeInterface || $route_entity instanceof \Drupal\node\NodeInterface) {
+    if ($entity instanceof NodeInterface || $route_entity instanceof NodeInterface) {
       $entity_is_amp = $this->entityIsAmp($entity);
       $route_entity_is_amp = $this->entityIsAmp($route_entity);
       return $entity_is_amp || $route_entity_is_amp;
@@ -117,7 +118,7 @@ class AmpContext extends ServiceProviderBase {
   /**
    * See if this route uses the AMP theme.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    *
    * @return boolean
@@ -136,7 +137,7 @@ class AmpContext extends ServiceProviderBase {
    *
    * Some routes must be AMP.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    *
    * @return boolean
@@ -160,7 +161,7 @@ class AmpContext extends ServiceProviderBase {
    * Check off things that indicate this can't be an AMP route. TRUE means it
    * can't be an AMP route, FALSE means we can't tell.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    *
    * @return boolean
@@ -184,7 +185,7 @@ class AmpContext extends ServiceProviderBase {
   /**
    * Get the entity from the route.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    *
    * @return mixed
@@ -206,7 +207,7 @@ class AmpContext extends ServiceProviderBase {
    * @return boolean
    */
   public function entityIsAmp($entity) {
-    if ($entity instanceof \Drupal\node\NodeInterface) {
+    if ($entity instanceof NodeInterface) {
       $type = $entity->getType();
       return $this->entityTypeInfo->isAmpEnabledType($type);
     }
diff --git a/src/Service/AMPService.php b/src/Service/AMPService.php
index 4eb5dd3..31ff56b 100644
--- a/src/Service/AMPService.php
+++ b/src/Service/AMPService.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\amp\Service;
 
+use Drupal\Core\Render\Markup;
 use Drupal\amp\AMP\DrupalAMP;
 use Drupal\Core\DependencyInjection\ServiceProviderBase;
 use Drupal\Core\Messenger\MessengerInterface;
@@ -21,28 +22,28 @@ class AMPService extends ServiceProviderBase  {
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The route amp context to determine whether a route is an amp one.
    *
-   * @var \Drupal\amp\Routing\AmpContext
+   * @var AmpContext
    */
   protected $ampContext;
 
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -59,13 +60,13 @@ class AMPService extends ServiceProviderBase  {
   /**
    * Constructs an AMPService instance.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Core messager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Configuration factory.
-   * @param \Drupal\amp\Routing\AmpContext $ampContext
+   * @param AmpContext $ampContext
    *   AMP context.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(MessengerInterface $messenger, ConfigFactoryInterface $configFactory, AmpContext $ampContext, RendererInterface $renderer) {
@@ -192,7 +193,7 @@ class AMPService extends ServiceProviderBase  {
   public function devMessage($message, $method = 'addMessage') {
     $user = \Drupal::currentUser();
     if ($this->isDevPage() && $user->hasPermission('administer nodes')) {
-      $rendered_message = \Drupal\Core\Render\Markup::create($message);
+      $rendered_message = Markup::create($message);
       $translated_message = new TranslatableMarkup ('@message', array('@message' => $rendered_message));
       if (method_exists($this->messenger, $method)) {
         $this->messenger->$method($translated_message);
diff --git a/src/Theme/AmpNegotiator.php b/src/Theme/AmpNegotiator.php
index c408605..1790900 100644
--- a/src/Theme/AmpNegotiator.php
+++ b/src/Theme/AmpNegotiator.php
@@ -16,23 +16,23 @@ class AmpNegotiator extends ServiceProviderBase implements ThemeNegotiatorInterf
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * AmpContext.
    *
-   * @var \Drupal\amp\Routing\AmpContext
+   * @var AmpContext
    */
   protected $ampContext;
 
   /**
    * Creates a new AmpNegotiator instance.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \Drupal\amp\Routing\AmpContext $ampContext
+   * @param AmpContext $ampContext
    *   The AmpContext.
    */
   public function __construct(ConfigFactoryInterface $configFactory, AmpContext $ampContext) {
diff --git a/tests/src/Functional/AmpFormatterFacebookTest.php b/tests/src/Functional/AmpFormatterFacebookTest.php
index 8ecc9ce..16d96fa 100644
--- a/tests/src/Functional/AmpFormatterFacebookTest.php
+++ b/tests/src/Functional/AmpFormatterFacebookTest.php
@@ -35,7 +35,7 @@ class AmpFormatterFacebookTest extends AmpFormatterTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Add field to the test content type.
diff --git a/tests/src/Functional/AmpFormatterImageCarouselTest.php b/tests/src/Functional/AmpFormatterImageCarouselTest.php
index 03eda72..d902a6b 100644
--- a/tests/src/Functional/AmpFormatterImageCarouselTest.php
+++ b/tests/src/Functional/AmpFormatterImageCarouselTest.php
@@ -47,7 +47,7 @@ class AmpFormatterImageCarouselTest extends AmpFormatterTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
 
     parent::setUp();
 
diff --git a/tests/src/Functional/AmpFormatterImageTest.php b/tests/src/Functional/AmpFormatterImageTest.php
index 55da492..3f9ec96 100644
--- a/tests/src/Functional/AmpFormatterImageTest.php
+++ b/tests/src/Functional/AmpFormatterImageTest.php
@@ -43,7 +43,7 @@ class AmpFormatterImageTest extends AmpFormatterTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
 
     parent::setUp();
 
diff --git a/tests/src/Functional/AmpFormatterMediaImageTest.php b/tests/src/Functional/AmpFormatterMediaImageTest.php
index 36424b4..1bdf2a5 100644
--- a/tests/src/Functional/AmpFormatterMediaImageTest.php
+++ b/tests/src/Functional/AmpFormatterMediaImageTest.php
@@ -44,7 +44,7 @@ class AmpFormatterMediaImageTest extends AmpFormatterTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create an image media type.
diff --git a/tests/src/Functional/AmpFormatterTestBase.php b/tests/src/Functional/AmpFormatterTestBase.php
index b42a6da..54c59c5 100644
--- a/tests/src/Functional/AmpFormatterTestBase.php
+++ b/tests/src/Functional/AmpFormatterTestBase.php
@@ -63,7 +63,7 @@ abstract class AmpFormatterTestBase extends AmpTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     if (empty($this->fieldName)) {
       $this->fieldName = strtolower($this->randomMachineName());
diff --git a/tests/src/Functional/AmpFormatterTwitterTest.php b/tests/src/Functional/AmpFormatterTwitterTest.php
index 5a1ece5..c92fbf0 100644
--- a/tests/src/Functional/AmpFormatterTwitterTest.php
+++ b/tests/src/Functional/AmpFormatterTwitterTest.php
@@ -35,7 +35,7 @@ class AmpFormatterTwitterTest extends AmpFormatterTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Add field to the test content type.
diff --git a/tests/src/Functional/AmpFormatterVideoTest.php b/tests/src/Functional/AmpFormatterVideoTest.php
index 0766ea4..db26b08 100644
--- a/tests/src/Functional/AmpFormatterVideoTest.php
+++ b/tests/src/Functional/AmpFormatterVideoTest.php
@@ -45,7 +45,7 @@ class AmpFormatterVideoTest extends AmpFormatterTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
 
     parent::setUp();
 
diff --git a/tests/src/Functional/AmpTestBase.php b/tests/src/Functional/AmpTestBase.php
index c2faea5..4b0d74c 100644
--- a/tests/src/Functional/AmpTestBase.php
+++ b/tests/src/Functional/AmpTestBase.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\amp\Functional;
 
+use Drupal\node\Entity\Node;
+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\node\Traits\ContentTypeCreationTrait;
 use Drupal\Tests\BrowserTestBase;
@@ -27,14 +30,14 @@ abstract class AmpTestBase extends BrowserTestBase {
   /**
    * The node created by tests.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $node = NULL;
 
   /**
    * The display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $displayRepository = NULL;
 
@@ -98,14 +101,14 @@ abstract class AmpTestBase extends BrowserTestBase {
   /**
    * An user with administration permissions.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
 
     parent::setUp();
 
diff --git a/tests/src/Functional/BasicTestCaseBase.php b/tests/src/Functional/BasicTestCaseBase.php
index 01fb7a9..a9b1e60 100644
--- a/tests/src/Functional/BasicTestCaseBase.php
+++ b/tests/src/Functional/BasicTestCaseBase.php
@@ -31,7 +31,7 @@ abstract class BasicTestCaseBase extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     // Make sure to complete the normal setup steps first.
     parent::setUp();
 
@@ -53,7 +53,10 @@ abstract class BasicTestCaseBase extends BrowserTestBase {
     $this->assertSession()->statusCodeEquals(200);
 
     // Confirm that the front page contains the standard text.
-    $this->assertText('Welcome to Drupal');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Welcome to Drupal');
   }
 
 }
