diff --git a/fontyourface.module b/fontyourface.module
index 8f9704e..7f57edd 100644
--- a/fontyourface.module
+++ b/fontyourface.module
@@ -65,7 +65,7 @@ function fontyourface_library_info_build() {
     $styles = FontDisplay::loadByTheme($key);
     if (!empty($styles)) {
       foreach ($styles as $style) {
-        $file_url = file_build_uri('fontyourface/font_display/' . $style->id() . '.css');
+        $file_url = \Drupal::service('stream_wrapper_manager')->normalizeUri(\Drupal::config('system.file')->get('default_scheme') . ('://' . ('fontyourface/font_display/' . $style->id() . '.css')));
         $libraries['font_display_' . $key]['css']['base'][$file_url] = [
           'basename' => $file_url,
         ];
@@ -268,7 +268,7 @@ function fontyourface_preprocess_font__teaser(array &$variables) {
  * @param object $font_data
  *   Simple stdclass rep of font for saving.
  *
- * @return Drupal\fontyourface\Entity\Font
+ * @return Font
  *   Newly saved/updated font.
  */
 function fontyourface_save_font($font_data) {
@@ -327,9 +327,9 @@ function fontyourface_save_font($font_data) {
 /**
  * Creates CSS with any properties set on font.
  *
- * @param Drupal\fontyourface\FontInterface $font
+ * @param FontInterface $font
  *   The font object.
- * @param Drupal\fontyourface\FontDisplayInterface $font_style
+ * @param FontDisplayInterface $font_style
  *   The font display object.
  * @param string $separator
  *   Approach to separating the resulting css.
@@ -414,14 +414,14 @@ function fontyourface_log($message, array $arguments) {
 /**
  * Saves and generates font file based on font display config entity data.
  *
- * @param Drupal\fontyourface\FontDisplayInterface $style
+ * @param FontDisplayInterface $style
  *   Custom config font display entity.
  *
  * @return bool
  *   TRUE if files save successfully. Throw any errors otherwise.
  */
 function fontyourface_save_and_generate_font_display_css(FontDisplayInterface $style) {
-  $directory = file_build_uri('fontyourface/font_display');
+  $directory = \Drupal::service('stream_wrapper_manager')->normalizeUri(\Drupal::config('system.file')->get('default_scheme') . ('://' . 'fontyourface/font_display'));
   \Drupal::service('file_system')->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);
 
   $font = $style->getFont();
diff --git a/modules/fontscom_api/fontscom_api.module b/modules/fontscom_api/fontscom_api.module
index 6c931ce..183565e 100644
--- a/modules/fontscom_api/fontscom_api.module
+++ b/modules/fontscom_api/fontscom_api.module
@@ -1,5 +1,6 @@
 <?php
 
+use function GuzzleHttp\Psr7\str;
 /**
  * @file
  * Fonts.com API module file.
@@ -166,7 +167,7 @@ function fontscom_api_page_attachments(&$page) {
         '#tag' => 'link',
         '#attributes' => [
           'rel' => 'stylesheet',
-          'href' => file_create_url($directory_location . '/fontyourface-stylesheet-' . $hash . '.css'),
+          'href' => \Drupal::service('file_url_generator')->generateAbsoluteString($directory_location . '/fontyourface-stylesheet-' . $hash . '.css'),
           'media' => 'all',
         ],
       ], 'fontyourface-fontscom-api-preview-fonts',
@@ -496,7 +497,7 @@ function fontscom_api_add_font_to_current_project($fid) {
     return TRUE;
   }
   catch (Exception $e) {
-    Drupal::messenger()->addMessage(t('There was an error adding font to Fonts.com project. Error: %error', ['%error' => Psr7\str($e->getResponse())]), 'error');
+    Drupal::messenger()->addMessage(t('There was an error adding font to Fonts.com project. Error: %error', ['%error' => str($e->getResponse())]), 'error');
     return FALSE;
   }
 }
@@ -524,7 +525,7 @@ function fontscom_api_remove_font_from_current_project($fid) {
     return TRUE;
   }
   catch (Exception $e) {
-    Drupal::messenger()->addMessage(t('There was an error removing font from Fonts.com project. Error: %error', ['%error' => Psr7\str($e->getResponse())]), 'error');
+    Drupal::messenger()->addMessage(t('There was an error removing font from Fonts.com project. Error: %error', ['%error' => str($e->getResponse())]), 'error');
     return FALSE;
   }
 }
@@ -546,7 +547,7 @@ function fontscom_api_publish_updated_project() {
     return TRUE;
   }
   catch (Exception $e) {
-    Drupal::messenger()->addMessage(t('There was an error publishing project on Fonts.com. Error: %error', ['%error' => Psr7\str($e->getResponse())]), 'error');
+    Drupal::messenger()->addMessage(t('There was an error publishing project on Fonts.com. Error: %error', ['%error' => str($e->getResponse())]), 'error');
     return FALSE;
   }
 }
@@ -594,7 +595,7 @@ function _fontscom_api_parse_imported_font($fontscom_font) {
 /**
  * Generates @font-face css for fonts.com font.
  *
- * @param Drupal\fontyourface\FontInterface $font
+ * @param FontInterface $font
  *   Font compatible with FontInterface.
  *
  * @return string
diff --git a/modules/fontsquirrel_api/fontsquirrel_api.module b/modules/fontsquirrel_api/fontsquirrel_api.module
index 85d5c1c..0146fb8 100644
--- a/modules/fontsquirrel_api/fontsquirrel_api.module
+++ b/modules/fontsquirrel_api/fontsquirrel_api.module
@@ -41,7 +41,7 @@ function fontsquirrel_api_entity_presave(EntityInterface $entity) {
       $metadata = $entity->getMetadata();
       $directory_location = _fontsquirrel_api_get_font_directory_location($entity);
       \Drupal::service('file_system')->prepareDirectory($directory_location, FileSystemInterface::CREATE_DIRECTORY);
-      $zip_location = file_build_uri('fontyourface/fontsquirrel/' . $metadata['path'] . '-fontfacekit.zip');
+      $zip_location = \Drupal::service('stream_wrapper_manager')->normalizeUri(\Drupal::config('system.file')->get('default_scheme') . ('://' . ('fontyourface/fontsquirrel/' . $metadata['path'] . '-fontfacekit.zip')));
       // Throw an exception; make it hard if this fails.
       $uri = 'https://www.fontsquirrel.com/fontfacekit/' . $metadata['path'];
       $response = \Drupal::httpClient()->get($uri, ['headers' => ['Accept' => 'text/plain']]);
@@ -86,7 +86,7 @@ function fontsquirrel_api_page_attachments(&$page) {
           '#tag' => 'link',
           '#attributes' => [
             'rel' => 'stylesheet',
-            'href' => file_create_url($directory_location . '/fontyourface-stylesheet.css'),
+            'href' => \Drupal::service('file_url_generator')->generateAbsoluteString($directory_location . '/fontyourface-stylesheet.css'),
             'media' => 'all',
           ],
         ], 'fontsquirrel-api-' . $font->id(),
@@ -254,14 +254,14 @@ function fontsquirrel_api_get_font_family_info($font_import) {
 /**
  * Returns directory location of font package from Font Squirrel.
  *
- * @param Drupal\fontyourface\Entity\Font $font
+ * @param Font $font
  *   Font entity with downloaded package.
  *
  * @return string
  *   File stream location to font package.
  */
 function _fontsquirrel_api_get_font_directory_location(Font $font) {
-  return file_build_uri('fontyourface/fontsquirrel/' . _fontsquirrel_api_get_sanitized_css_family($font->css_family->value) . '-fontfacekit');
+  return \Drupal::service('stream_wrapper_manager')->normalizeUri(\Drupal::config('system.file')->get('default_scheme') . ('://' . ('fontyourface/fontsquirrel/' . _fontsquirrel_api_get_sanitized_css_family($font->css_family->value) . '-fontfacekit')));
 }
 
 /**
diff --git a/modules/local_fonts/local_fonts.module b/modules/local_fonts/local_fonts.module
index 679dc07..3638e48 100644
--- a/modules/local_fonts/local_fonts.module
+++ b/modules/local_fonts/local_fonts.module
@@ -28,15 +28,15 @@ function local_fonts_page_attachments(&$page) {
     if ($font->pid->value == 'local_fonts') {
       $metadata = $font->getMetadata();
       $font_id = $metadata['id'];
-      $directory = file_build_uri('fontyourface/local_fonts/' . $font_id);
-      $url = file_create_url($directory . '/font.css');
+      $directory = \Drupal::service('stream_wrapper_manager')->normalizeUri(\Drupal::config('system.file')->get('default_scheme') . ('://' . ('fontyourface/local_fonts/' . $font_id)));
+      $url = \Drupal::service('file_url_generator')->generateAbsoluteString($directory . '/font.css');
       $page['#attached']['html_head'][] = [
         [
           '#type' => 'html_tag',
           '#tag' => 'link',
           '#attributes' => [
             'rel' => 'stylesheet',
-            'href' => file_url_transform_relative($url),
+            'href' => \Drupal::service('file_url_generator')->transformRelative($url),
             'media' => 'all',
           ],
         ], 'local-fonts-' . $font_id,
@@ -93,14 +93,14 @@ function local_fonts_entity_delete(EntityInterface $entity) {
 /**
  * Saves and generates font file based on font config entity data.
  *
- * @param Drupal\local_fonts\Entity\LocalFontConfigEntity $font_entity
+ * @param LocalFontConfigEntity $font_entity
  *   Custom config font entity.
  *
  * @return bool
  *   TRUE if files save successfully. Throw any errors otherwise.
  */
 function local_fonts_save_and_generate_css(LocalFontConfigEntity $font_entity) {
-  $directory = file_build_uri('fontyourface/local_fonts/' . $font_entity->id());
+  $directory = \Drupal::service('stream_wrapper_manager')->normalizeUri(\Drupal::config('system.file')->get('default_scheme') . ('://' . ('fontyourface/local_fonts/' . $font_entity->id())));
   $css_file = $directory . '/font.css';
   $font_file = $directory . '/font.woff';
   \Drupal::service('file_system')->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);
diff --git a/modules/local_fonts/src/LocalFontConfigEntityHtmlRouteProvider.php b/modules/local_fonts/src/LocalFontConfigEntityHtmlRouteProvider.php
index 8402068..0284a4d 100644
--- a/modules/local_fonts/src/LocalFontConfigEntityHtmlRouteProvider.php
+++ b/modules/local_fonts/src/LocalFontConfigEntityHtmlRouteProvider.php
@@ -32,10 +32,10 @@ class LocalFontConfigEntityHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
diff --git a/src/FontDisplayHtmlRouteProvider.php b/src/FontDisplayHtmlRouteProvider.php
index e9872d1..70bc956 100644
--- a/src/FontDisplayHtmlRouteProvider.php
+++ b/src/FontDisplayHtmlRouteProvider.php
@@ -36,10 +36,10 @@ class FontDisplayHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ -63,10 +63,10 @@ class FontDisplayHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the add-form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/FontHtmlRouteProvider.php b/src/FontHtmlRouteProvider.php
index 6fb44e7..0610ba3 100644
--- a/src/FontHtmlRouteProvider.php
+++ b/src/FontHtmlRouteProvider.php
@@ -36,10 +36,10 @@ class FontHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ -61,10 +61,10 @@ class FontHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the add-form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/FontListBuilder.php b/src/FontListBuilder.php
index 27b2fac..bf0c011 100644
--- a/src/FontListBuilder.php
+++ b/src/FontListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\fontyourface;
 
+use Drupal\fontyourface\Entity\Font;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Link;
@@ -27,7 +28,7 @@ class FontListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\fontyourface\Entity\Font $entity */
+    /** @var Font $entity */
     $row['id'] = $entity->id();
     $row['name'] = Link::fromTextAndUrl(
       $entity->label(),
@@ -39,7 +40,7 @@ class FontListBuilder extends EntityListBuilder {
   /**
    * Gets this list's default operations.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity the operations are for.
    *
    * @return array
diff --git a/src/Form/FontDisplayForm.php b/src/Form/FontDisplayForm.php
index a27a4d7..4f6a232 100644
--- a/src/Form/FontDisplayForm.php
+++ b/src/Form/FontDisplayForm.php
@@ -207,7 +207,7 @@ class FontDisplayForm extends EntityForm {
   /**
    * Return string that maps to selector.
    *
-   * @param \Drupal\fontyourface\FontDisplayInterface $font_display
+   * @param FontDisplayInterface $font_display
    *   Current Font Display entity.
    *
    * @return string
diff --git a/src/Form/FontForm.php b/src/Form/FontForm.php
index d89d77e..401d15f 100644
--- a/src/Form/FontForm.php
+++ b/src/Form/FontForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\fontyourface\Form;
 
+use Drupal\fontyourface\Entity\Font;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -16,7 +17,7 @@ class FontForm extends ContentEntityForm {
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\fontyourface\Entity\Font $entity */
+    /** @var Font $entity */
     $form = parent::buildForm($form, $form_state);
     $entity = $this->entity;
 
diff --git a/src/Form/FontSettingsForm.php b/src/Form/FontSettingsForm.php
index 2c7e30d..0b1dca7 100644
--- a/src/Form/FontSettingsForm.php
+++ b/src/Form/FontSettingsForm.php
@@ -38,7 +38,7 @@ class FontSettingsForm extends ConfigFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ -108,7 +108,7 @@ class FontSettingsForm extends ConfigFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
diff --git a/tests/src/Functional/FontYourFaceFontDisplayTest.php b/tests/src/Functional/FontYourFaceFontDisplayTest.php
index fbd18aa..8b0e7f2 100644
--- a/tests/src/Functional/FontYourFaceFontDisplayTest.php
+++ b/tests/src/Functional/FontYourFaceFontDisplayTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\fontyourface\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
 
@@ -27,14 +28,14 @@ class FontYourFaceFontDisplayTest extends BrowserTestBase {
   /**
    * A test user with permission to access the @font-your-face sections.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Create and log in an administrative user.
     $this->adminUser = $this->drupalCreateUser([
@@ -67,7 +68,7 @@ class FontYourFaceFontDisplayTest extends BrowserTestBase {
     $this->resetAll();
     // Assert no fonts load to start.
     $this->drupalGet('/node');
-    $this->assertNoRaw('<meta name="Websafe Font" content="Arial" />');
+    $this->assertSession()->responseNotContains('<meta name="Websafe Font" content="Arial" />');
   }
 
   /**
diff --git a/tests/src/Functional/FontYourFaceInstallTest.php b/tests/src/Functional/FontYourFaceInstallTest.php
index ed82a43..fd41dd1 100644
--- a/tests/src/Functional/FontYourFaceInstallTest.php
+++ b/tests/src/Functional/FontYourFaceInstallTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\fontyourface\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
 
@@ -27,14 +28,14 @@ class FontYourFaceInstallTest extends BrowserTestBase {
   /**
    * A test user with permission to access the @font-your-face sections.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     \Drupal::service('module_installer')->install(['views', 'fontyourface']);
 
@@ -51,19 +52,31 @@ class FontYourFaceInstallTest extends BrowserTestBase {
   public function testFontYourFaceSections() {
     // Main font selection page.
     $this->drupalGet(Url::fromRoute('entity.font.collection'));
-    $this->assertText(t('Font Selector'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Font Selector'));
 
     // Font display page.
     $this->drupalGet(Url::fromRoute('entity.font_display.collection'));
-    $this->assertText(t('There are no font display entities yet.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('There are no font display entities yet.'));
 
     // Font display add page.
     $this->drupalGet(Url::fromRoute('entity.font_display.add_form'));
-    $this->assertText(t('Please enable at least one font before creating/updating a font style.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Please enable at least one font before creating/updating a font style.'));
 
     // Font settings page.
     $this->drupalGet(Url::fromRoute('font.settings'));
-    $this->assertText(t('Settings form for @font-your-face. Support modules can use this form for settings or to import fonts.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Settings form for @font-your-face. Support modules can use this form for settings or to import fonts.'));
     $this->assertSession()->responseContains(t('Import all fonts'));
   }
 
diff --git a/tests/src/Functional/FontYourFaceLocalFontInstallTest.php b/tests/src/Functional/FontYourFaceLocalFontInstallTest.php
index 5ac241e..d95a358 100644
--- a/tests/src/Functional/FontYourFaceLocalFontInstallTest.php
+++ b/tests/src/Functional/FontYourFaceLocalFontInstallTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\fontyourface\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
 
@@ -27,14 +28,14 @@ class FontYourFaceLocalFontInstallTest extends BrowserTestBase {
   /**
    * A test user with permission to access the @font-your-face sections.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Create and log in an administrative user.
     $this->adminUser = $this->drupalCreateUser([
@@ -49,9 +50,15 @@ class FontYourFaceLocalFontInstallTest extends BrowserTestBase {
   public function testFontYourFaceLocalFontsSection() {
     // Font settings page.
     $this->drupalGet(Url::fromRoute('entity.local_font_config_entity.collection'));
-    $this->assertText(t('There are no custom font entities yet.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('There are no custom font entities yet.'));
     $this->drupalGet(Url::fromRoute('entity.local_font_config_entity.add_form'));
-    $this->assertText(t('Name of the Custom Font'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Name of the Custom Font'));
   }
 
 }
diff --git a/tests/src/Functional/FontYourFaceSubmoduleInstallTest.php b/tests/src/Functional/FontYourFaceSubmoduleInstallTest.php
index 54bf848..b28d344 100644
--- a/tests/src/Functional/FontYourFaceSubmoduleInstallTest.php
+++ b/tests/src/Functional/FontYourFaceSubmoduleInstallTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\fontyourface\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
 
@@ -27,14 +28,14 @@ class FontYourFaceSubmoduleInstallTest extends BrowserTestBase {
   /**
    * A test user with permission to access the @font-your-face sections.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Create and log in an administrative user.
     $this->adminUser = $this->drupalCreateUser([
@@ -49,7 +50,10 @@ class FontYourFaceSubmoduleInstallTest extends BrowserTestBase {
   public function testFontYourFaceSections() {
     // Font settings page.
     $this->drupalGet(Url::fromRoute('font.settings'));
-    $this->assertText(t('Settings form for @font-your-face. Support modules can use this form for settings or to import fonts.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Settings form for @font-your-face. Support modules can use this form for settings or to import fonts.'));
     $this->assertSession()->responseContains(t('Import from websafe_fonts_test'));
   }
 
@@ -59,19 +63,37 @@ class FontYourFaceSubmoduleInstallTest extends BrowserTestBase {
   public function testImportWebSafeFonts() {
     // Assert no fonts exist to start.
     $this->drupalGet(Url::fromRoute('entity.font.collection'));
-    $this->assertNoText('Arial');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Arial');
 
     $this->drupalGet(Url::fromRoute('font.settings'));
     $this->submitForm([], 'Import from websafe_fonts_test');
-    $this->assertResponse(200);
-    $this->assertText(t('Finished importing fonts.'));
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Finished importing fonts.'));
 
     // Assert all fonts were imported.
     $this->drupalGet(Url::fromRoute('entity.font.collection'));
-    $this->assertText('Arial');
-    $this->assertText('Verdana');
-    $this->assertText('Courier New');
-    $this->assertText('Georgia');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Arial');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Verdana');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Courier New');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Georgia');
 
     // Assert fonts load on font collection page.
     $this->assertSession()->responseContains('<meta name="Websafe Font" content="Arial" />');
@@ -81,7 +103,7 @@ class FontYourFaceSubmoduleInstallTest extends BrowserTestBase {
 
     // ENsure font is not loaded on front page because font is not enabled.
     $this->drupalGet('<front>');
-    $this->assertNoRaw('<meta name="Websafe Font" content="Arial" />');
+    $this->assertSession()->responseNotContains('<meta name="Websafe Font" content="Arial" />');
   }
 
   /**
@@ -90,7 +112,7 @@ class FontYourFaceSubmoduleInstallTest extends BrowserTestBase {
   public function testEnableWebSafeFonts() {
     // Assert no fonts load to start.
     $this->drupalGet('/node');
-    $this->assertNoRaw('<meta name="Websafe Font" content="Arial" />');
+    $this->assertSession()->responseNotContains('<meta name="Websafe Font" content="Arial" />');
 
     $this->drupalGet(Url::fromRoute('font.settings'));
     $this->submitForm(['load_all_enabled_fonts' => 1], 'Import from websafe_fonts_test');
@@ -98,7 +120,10 @@ class FontYourFaceSubmoduleInstallTest extends BrowserTestBase {
       'font' => 1,
       'js' => 'nojs',
     ]));
-    $this->assertText('Font Arial successfully enabled');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Font Arial successfully enabled');
 
     // Flush the caches. Not an issue in prod but seems to be in simpletest.
     // Will keep an eye on it.
