modules/contrib/twig_tweak/src/TwigExtension.php
modules/contrib/twig_tweak/tests/src/Functional/TwigTweakTest.php
modules/contrib/twig_tweak/tests/src/Kernel/AccessTest.php
modules/contrib/twig_tweak/tests/twig_tweak_test/src/Plugin/Block/FooBlock.php
modules/contrib/twig_tweak/tests/twig_tweak_test/twig_tweak_test.module

3 files with changes
====================

1) modules/contrib/twig_tweak/tests/src/Kernel/AccessTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\twig_tweak\Kernel;

+use Drupal\twig_tweak\TwigExtension;
 use Drupal\block\BlockViewBuilder;
 use Drupal\block\Entity\Block;
 use Drupal\Core\Access\AccessResult;
@@ @@
   /**
    * A node for testing.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   private $node;

@@ @@
   /**
    * The Twig extension.
    *
-   * @var \Drupal\twig_tweak\TwigExtension
+   * @var TwigExtension
    */
   private $twigExtension;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('node');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/twig_tweak/tests/src/Functional/TwigTweakTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\twig_tweak\Functional;

+use Drupal\user\RoleInterface;
 use Drupal\Core\Link;
 use Drupal\Core\Url;
 use Drupal\file\Entity\File;
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $test_files = $this->getTestFiles('image');
@@ @@

     // Grant require permissions and test the forms again.
     $permissions = ['create page content', 'edit any page content'];
-    /** @var \Drupal\user\RoleInterface $role */
+    /** @var RoleInterface $role */
     $role = Role::load(Role::ANONYMOUS_ID);
     $this->grantPermissions($role, $permissions);
     $this->drupalGet('/node/2');
@@ @@
     $xpath = '//div[@class="tt-contextual-links" and not(div[@data-contextual-id])]';
     $this->assertByXpath($xpath);

-    /** @var \Drupal\user\RoleInterface $role */
+    /** @var RoleInterface $role */
     $role = Role::load(Role::ANONYMOUS_ID);
     $this->grantPermissions($role, ['access contextual links']);
     $this->drupalGet($this->getUrl());
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/twig_tweak/src/TwigExtension.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\twig_tweak;

+use Drupal\block\BlockInterface;
+use Drupal\Core\Menu\MenuLinkTreeInterface;
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Component\Uuid\Uuid;
@@ @@

     $configuration += ['label_display' => BlockPluginInterface::BLOCK_LABEL_VISIBLE];

-    /** @var \Drupal\Core\Block\BlockPluginInterface $block_plugin */
+    /** @var BlockPluginInterface $block_plugin */
     $block_plugin = \Drupal::service('plugin.manager.block')
       ->createInstance($id, $configuration);

@@ @@
       ->addCacheTags($entity_type->getListCacheTags())
       ->addCacheContexts($entity_type->getListCacheContexts());

-    /** @var \Drupal\block\BlockInterface[] $blocks */
+    /** @var BlockInterface[] $blocks */
     foreach ($blocks as $id => $block) {
       $access = $block->access('view', NULL, TRUE);
       $cache_metadata = $cache_metadata->merge(CacheableMetadata::createFromObject($access));
@@ @@
    *   A render array for the menu.
    */
   public function drupalMenu($menu_name, $level = 1, $depth = 0, $expand = FALSE) {
-    /** @var \Drupal\Core\Menu\MenuLinkTreeInterface $menu_tree */
+    /** @var MenuLinkTreeInterface $menu_tree */
     $menu_tree = \Drupal::service('menu.link_tree');
     $parameters = $menu_tree->getCurrentRouteMenuTreeParameters($menu_name);

@@ @@
     if ($route = \Drupal::routeMatch()->getRouteObject()) {
       $title = \Drupal::service('title_resolver')->getTitle(\Drupal::request(), $route);
     }
-    $build['#markup'] = render($title);
+    $build['#markup'] = \Drupal::service('renderer')->render($title);
     $build['#cache']['contexts'] = ['url'];
     return $build;
   }
@@ @@
    * @param bool $check_access
    *   (optional) Indicates that access check is required.
    *
-   * @return \Drupal\Core\Url|null
+   * @return Url|null
    *   A new Url object or null if the URL is not accessible.
    *
    * @see \Drupal\Core\Url::fromUserInput()
@@ @@
    * @param bool $check_access
    *   (optional) Indicates that access check is required.
    *
-   * @return \Drupal\Core\Link|null
+   * @return Link|null
    *   A new Link object or null of the URL is not accessible.
    *
    * @see \Drupal\Core\Link::fromTextAndUrl()
@@ @@
       return;
     }

-    return file_url_transform_relative($image_style->buildUrl($path));
+    return \Drupal::service('file_url_generator')->transformRelative($image_style->buildUrl($path));
   }

   /**
@@ @@
    *   (optional) An array of filter types to skip, or an empty array (default)
    *   to skip no filter types.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   The filtered text.
    *
    * @see check_markup()
@@ @@
    */
   public function fileUrl($input) {
     if (is_string($input)) {
-      return file_url_transform_relative(file_create_url($input));
+      return \Drupal::service('file_url_generator')->generateString($input);
     }
     if ($input instanceof EntityReferenceFieldItemListInterface) {
       $referenced_entities = $input->referencedEntities();
@@ @@
   /**
    * Returns the translation for the given entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to get the translation from.
    * @param string $langcode
    *   (optional) For which language the translation should be looked for,
    *   defaults to the current language context.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The appropriate translation for the given language context.
    */
   public function entityTranslation(EntityInterface $entity, $langcode = NULL) {
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 3 files have been changed by Rector                                       

