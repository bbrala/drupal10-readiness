diff --git a/modules/json_field_widget/src/Plugin/Field/FieldWidget/JsonEditorWidget.php b/modules/json_field_widget/src/Plugin/Field/FieldWidget/JsonEditorWidget.php
index ca07d66..556a3d8 100644
--- a/modules/json_field_widget/src/Plugin/Field/FieldWidget/JsonEditorWidget.php
+++ b/modules/json_field_widget/src/Plugin/Field/FieldWidget/JsonEditorWidget.php
@@ -164,7 +164,7 @@ class JsonEditorWidget extends WidgetBase {
    * Check the submitted JSON against the configured JSON Schema.
    *
    * @param $element
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public static function validateJsonData($element, FormStateInterface $form_state) {
     $hash = $element['#attributes']['data-json-editor'];
@@ -187,7 +187,7 @@ class JsonEditorWidget extends WidgetBase {
    * Ensure the JSON schema is itself valid and supported by the PHP library.
    *
    * @param $element
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public static function validateJsonSchema($element, FormStateInterface $form_state) {
     try {
diff --git a/src/JSONViewsInterface.php b/src/JSONViewsInterface.php
index 4f53a2c..ab4c0f9 100644
--- a/src/JSONViewsInterface.php
+++ b/src/JSONViewsInterface.php
@@ -14,7 +14,7 @@ interface JSONViewsInterface {
   /**
    * Gets the views data for a field instance.
    *
-   * @param \Drupal\field\FieldStorageConfigInterface $field_storage
+   * @param FieldStorageConfigInterface $field_storage
    *
    * @return array
    *   The JSON field views data.
diff --git a/src/JsonFieldRequirementsInterface.php b/src/JsonFieldRequirementsInterface.php
index eb34211..313778a 100644
--- a/src/JsonFieldRequirementsInterface.php
+++ b/src/JsonFieldRequirementsInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\json_field;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 /**
  * Defines Json Field Library interface.
  */
@@ -21,7 +22,7 @@ interface JsonFieldRequirementsInterface {
   /**
    * Get the warning message.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The warning message.
    */
   public function getLibraryWarningMessage();
@@ -37,7 +38,7 @@ interface JsonFieldRequirementsInterface {
   /**
    * Get the database warning message.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The warning message.
    */
   public function getDatabaseWarningMessage();
diff --git a/src/Plugin/Validation/Constraint/ValidJSONConstraintValidator.php b/src/Plugin/Validation/Constraint/ValidJSONConstraintValidator.php
index d0d015d..32e5d37 100644
--- a/src/Plugin/Validation/Constraint/ValidJSONConstraintValidator.php
+++ b/src/Plugin/Validation/Constraint/ValidJSONConstraintValidator.php
@@ -16,14 +16,14 @@ class ValidJSONConstraintValidator extends ConstraintValidator implements Contai
   /**
    * The serializer which serializes the views result.
    *
-   * @var \Symfony\Component\Serializer\Encoder\DecoderInterface
+   * @var DecoderInterface
    */
   protected $serializer;
 
   /**
    * Constructs a ValidJSONConstraintValidator object.
    *
-   * @param \Symfony\Component\Serializer\Encoder\DecoderInterface $serializer
+   * @param DecoderInterface $serializer
    */
   public function __construct(DecoderInterface $serializer) {
     $this->serializer = $serializer;
diff --git a/src/Plugin/views/field/JSONDataField.php b/src/Plugin/views/field/JSONDataField.php
index a41d3f8..590fc35 100644
--- a/src/Plugin/views/field/JSONDataField.php
+++ b/src/Plugin/views/field/JSONDataField.php
@@ -20,7 +20,7 @@ class JSONDataField extends FieldPluginBase {
   /**
    * The serializer which serializes the views result.
    *
-   * @var \Symfony\Component\Serializer\SerializerInterface
+   * @var SerializerInterface
    */
   protected $serializer;
 
diff --git a/tests/src/Kernel/JSONTextareaWidgetTest.php b/tests/src/Kernel/JSONTextareaWidgetTest.php
index a521947..bee74dc 100644
--- a/tests/src/Kernel/JSONTextareaWidgetTest.php
+++ b/tests/src/Kernel/JSONTextareaWidgetTest.php
@@ -13,6 +13,7 @@ class JSONTextareaWidgetTest extends KernelTestBase {
 
   /**
    * Tests that we can save form settings without error.
+   * @doesNotPerformAssertions
    */
   public function testWidgetSettings() {
     $this->createTestField();
diff --git a/tests/src/Kernel/JsonItemTest.php b/tests/src/Kernel/JsonItemTest.php
index 4677d86..5b72716 100644
--- a/tests/src/Kernel/JsonItemTest.php
+++ b/tests/src/Kernel/JsonItemTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\json_field\Kernel;
 
+use Symfony\Component\Validator\ConstraintViolation;
 use Drupal\Core\Database\Connection;
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\Core\Validation\Plugin\Validation\Constraint\LengthConstraint;
@@ -95,7 +96,7 @@ class JsonItemTest extends KernelTestBase {
 
     $constraint_list = $entity->validate()->getByField('test_json_field');
     $this->assertEquals(1, $constraint_list->count());
-    /** @var \Symfony\Component\Validator\ConstraintViolation $violation */
+    /** @var ConstraintViolation $violation */
     $violation = $constraint_list->get(0);
     $this->assertTrue($violation->getConstraint() instanceof LengthConstraint);
   }
@@ -263,7 +264,7 @@ class JsonItemTest extends KernelTestBase {
   /**
    * Adds primary key, unique keys, and index information to the schema.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection to use.
    * @param string $table
    *   The table to find indexes for.
@@ -300,7 +301,7 @@ class JsonItemTest extends KernelTestBase {
   /**
    * Set the table collation.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection to use.
    * @param string $table
    *   The table to find indexes for.
@@ -322,7 +323,7 @@ class JsonItemTest extends KernelTestBase {
    *
    * If a table is set to be schema only, and empty array is returned.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection to use.
    * @param string $table
    *   The table to query.
@@ -343,7 +344,7 @@ class JsonItemTest extends KernelTestBase {
   /**
    * Given a database field type, return a Drupal type.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection to use.
    * @param string $type
    *   The MySQL field type.
@@ -364,7 +365,7 @@ class JsonItemTest extends KernelTestBase {
   /**
    * Given a database field type, return a Drupal size.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection to use.
    * @param string $type
    *   The MySQL field type.
@@ -388,7 +389,7 @@ class JsonItemTest extends KernelTestBase {
   /**
    * Gets field ordering for a given table.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection to use.
    * @param string $table
    *   The table name.
diff --git a/tests/src/Kernel/KernelTestBase.php b/tests/src/Kernel/KernelTestBase.php
index 65c0d1b..23a15c7 100644
--- a/tests/src/Kernel/KernelTestBase.php
+++ b/tests/src/Kernel/KernelTestBase.php
@@ -29,7 +29,7 @@ abstract class KernelTestBase extends DrupalKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     FileCacheFactory::setPrefix(Settings::getApcuPrefix('file_cache', $this->root));
     parent::setUp();
 
