modules/contrib/licenses/src/Annotation/License.php
modules/contrib/licenses/src/Controller/LicensesController.php
modules/contrib/licenses/src/License.php
modules/contrib/licenses/src/LicenseInterface.php
modules/contrib/licenses/src/LicensePluginBase.php
modules/contrib/licenses/src/LicensePluginManager.php
modules/contrib/licenses/src/Plugin/License/Scanner/Composer.php
modules/contrib/licenses/src/Plugin/License/Scanner/ModuleLibraries.php
modules/contrib/licenses/src/Plugin/License/Scanner/Nodejs.php
modules/contrib/licenses/src/Plugin/License/Scanner/ScannerInterface.php
modules/contrib/licenses/src/Plugin/License/Scanner/ThemeLibraries.php

8 files with changes
====================

1) modules/contrib/licenses/src/Plugin/License/Scanner/ThemeLibraries.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * An array of licenses.
    *
-   * @var \Drupal\licenses\License[]
+   * @var License[]
    */
   protected $licenses = [];

@@ @@
           ->setLibraryHomepage((string) @$library['remote'])
           ->setFilename(implode(DIRECTORY_SEPARATOR, [
             DRUPAL_ROOT,
-            drupal_get_path('theme', $machine_name),
+            \Drupal::service('extension.list.theme')->getPath($machine_name),
             $machine_name . '.libraries.yml',
           ]));
         if (isset($spdx_license)) {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/licenses/src/Plugin/License/Scanner/ScannerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\licenses\Plugin\License\Scanner;

+use Drupal\licenses\License;
 /**
  * Interface Scanner.
  *
@@ @@
   /**
    * Scan the system for libraries.
    *
-   * @return \Drupal\licenses\License[]
+   * @return License[]
    *   An array of library objects.
    */
   public function scan();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/licenses/src/Plugin/License/Scanner/Nodejs.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * An array of licenses.
    *
-   * @var \Drupal\licenses\License[]
+   * @var License[]
    */
   protected $licenses = [];

@@ @@

     $themes = \Drupal::service('theme_handler')->listInfo();
     foreach ($themes as $machine_name => $theme) {
-      $filename = implode(DIRECTORY_SEPARATOR, [DRUPAL_ROOT, drupal_get_path('theme', $machine_name), 'package-lock.json']);
+      $filename = implode(DIRECTORY_SEPARATOR, [DRUPAL_ROOT, \Drupal::service('extension.list.theme')->getPath($machine_name), 'package-lock.json']);
       if (!file_exists($filename)) {
         continue;
       }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/licenses/src/Plugin/License/Scanner/ModuleLibraries.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * An array of licenses.
    *
-   * @var \Drupal\licenses\License[]
+   * @var License[]
    */
   protected $licenses = [];

@@ @@
         if ($machine_name !== 'core') {
           $license->setFilename(implode(DIRECTORY_SEPARATOR, [
             DRUPAL_ROOT,
-            drupal_get_path('module', $machine_name),
+            \Drupal::service('extension.list.module')->getPath($machine_name),
             $machine_name . '.libraries.yml',
           ]));
         }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/licenses/src/Plugin/License/Scanner/Composer.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * An array of licenses.
    *
-   * @var \Drupal\licenses\License[]
+   * @var License[]
    */
   protected $licenses = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/licenses/src/LicensePluginManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/licenses/src/Controller/LicensesController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\licenses\Controller;

+use Drupal\licenses\License;
 use Composer\Spdx\SpdxLicenses;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Link;
@@ @@
   /**
    * The SPDX Licenses object.
    *
-   * @var \Composer\Spdx\SpdxLicenses
+   * @var SpdxLicenses
    */
   protected $spdxLicenses;

@@ @@
     $is_osi_string = $this->t('Yes, is OSI certified');
     $not_osi_string = $this->t('No, is not OSI certified');

-    /** @var \Drupal\licenses\License $license */
+    /** @var License $license */
     foreach ($licenses as $license) {
       $build['overview']['table']['#rows'][$license->getIdentifier()] = [
         Link::fromTextAndUrl($license->getFullName(), Url::fromUserInput('#' . $license->getIdentifier())),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/licenses/src/Annotation/License.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\licenses\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


 [OK] 8 files have been changed by Rector                                       

