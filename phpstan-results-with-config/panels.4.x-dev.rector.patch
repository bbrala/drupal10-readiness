diff --git a/panels.api.php b/panels.api.php
index edd67aa..cb9c793 100644
--- a/panels.api.php
+++ b/panels.api.php
@@ -12,7 +12,7 @@ use \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant;
  *
  * @param array &$build
  *   The fully built render array.
- * @param \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $panels_display
+ * @param PanelsDisplayVariant $panels_display
  *   The Panels display that was rendered.
  */
 function hook_panels_build_alter(array &$build, PanelsDisplayVariant $panels_display) {
diff --git a/panels.module b/panels.module
index b73df34..75401f8 100644
--- a/panels.module
+++ b/panels.module
@@ -31,7 +31,7 @@ define('PANELS_TITLE_PANE', 2); // And this is the new behavior, where the title
  */
 function panels_page_variant_create(PageVariantInterface $page_variant) {
   if ($page_variant->getVariantPluginId() == 'panels_variant') {
-    /** @var \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $panels_display */
+    /** @var PanelsDisplayVariant $panels_display */
     $panels_display = $page_variant->getVariantPlugin();
     // At this point, it very likely that $page_variant->id() is NULL. But
     // setting the storage type to 'page_manager' is enough to trigger Panels
@@ -51,10 +51,10 @@ function panels_layout_alter(&$definitions) {
       continue;
     }
     if (in_array($layout_name, $core_layouts) && empty($definitions[$layout_name]->getIcon())) {
-      $definitions[$layout_name]->setIconPath(drupal_get_path('module', 'panels') . '/layouts/'.$layout_name.'/'.$layout_name.'.png');
+      $definitions[$layout_name]->setIconPath(\Drupal::service('extension.list.module')->getPath('panels') . '/layouts/'.$layout_name.'/'.$layout_name.'.png');
     }
     if (empty($definitions[$layout_name]->getIcon())) {
-      $definitions[$layout_name]->setIconPath(drupal_get_path('module', 'panels') . '/layouts/no-layout-preview.png');
+      $definitions[$layout_name]->setIconPath(\Drupal::service('extension.list.module')->getPath('panels') . '/layouts/no-layout-preview.png');
     }
   }
 }
@@ -70,7 +70,7 @@ function panels_layout_alter(&$definitions) {
  */
 function panels_page_variant_presave(PageVariantInterface $page_variant) {
   if ($page_variant->getVariantPluginId() == 'panels_variant') {
-    /** @var \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $panels_display */
+    /** @var PanelsDisplayVariant $panels_display */
     $panels_display = $page_variant->getVariantPlugin();
     // Set the storage info now that we have the id.
     $panels_display->setStorage('page_manager', $page_variant->id());
diff --git a/panels_ipe/panels_ipe.api.php b/panels_ipe/panels_ipe.api.php
index c75a9d2..509a5a6 100644
--- a/panels_ipe/panels_ipe.api.php
+++ b/panels_ipe/panels_ipe.api.php
@@ -11,11 +11,10 @@ use \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant;
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Act on a Panels Display before it is saved via the IPE.
  *
- * @param \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $panels_display
+ * @param PanelsDisplayVariant $panels_display
  *   The current Panels display.
  * @param array $layout_model
  *   The decoded LayoutModel from our App.
@@ -32,7 +31,7 @@ function hook_panels_ipe_panels_display_presave(PanelsDisplayVariant $panels_dis
  *
  * @param array $blocks
  *   The blocks that are currently available.
- * @param \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $panels_display
+ * @param PanelsDisplayVariant $panels_display
  *   The current Panels display.
  */
 function hook_panels_ipe_blocks_alter(array &$blocks, PanelsDisplayVariant $panels_display) {
@@ -49,7 +48,7 @@ function hook_panels_ipe_blocks_alter(array &$blocks, PanelsDisplayVariant $pane
  *
  * @param array $layouts
  *   The layouts that are currently available.
- * @param \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $panels_display
+ * @param PanelsDisplayVariant $panels_display
  *   The current Panels display.
  */
 function hook_panels_ipe_layouts_alter(array &$layouts, PanelsDisplayVariant $panels_display) {
diff --git a/panels_ipe/src/Annotation/IPEAccess.php b/panels_ipe/src/Annotation/IPEAccess.php
index 9d693e7..8cca2cd 100644
--- a/panels_ipe/src/Annotation/IPEAccess.php
+++ b/panels_ipe/src/Annotation/IPEAccess.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\panels_ipe\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -24,7 +25,7 @@ class IPEAccess extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/panels_ipe/src/Controller/PanelsIPEPageController.php b/panels_ipe/src/Controller/PanelsIPEPageController.php
index 48788fc..35660c1 100644
--- a/panels_ipe/src/Controller/PanelsIPEPageController.php
+++ b/panels_ipe/src/Controller/PanelsIPEPageController.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\panels_ipe\Controller;
 
+use Drupal\Core\TempStore\SharedTempStore;
+use Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant;
+use Drupal\block_content\BlockContentTypeInterface;
+use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\AppendCommand;
 use Drupal\Core\Block\BlockManagerInterface;
@@ -30,53 +34,53 @@ class PanelsIPEPageController extends ControllerBase {
   use PanelsIPEBlockRendererTrait;
 
   /**
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;
 
   /**
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
-   * @var \Drupal\Core\Layout\LayoutPluginManagerInterface
+   * @var LayoutPluginManagerInterface
    */
   protected $layoutPluginManager;
 
   /**
    * The Panels storage manager.
    *
-   * @var \Drupal\panels\Storage\PanelsStorageManagerInterface
+   * @var PanelsStorageManagerInterface
    */
   protected $panelsStorage;
 
   /**
    * Stores the tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\SharedTempStore
+   * @var SharedTempStore
    */
   protected $tempStore;
 
   /**
-   * @var \Drupal\panels_ipe\Helpers\UpdateLayoutRequestHandler
+   * @var UpdateLayoutRequestHandler
    */
   private $updateLayoutRequestHandler;
 
   /**
-   * @var \Drupal\panels_ipe\Helpers\RemoveBlockRequestHandler
+   * @var RemoveBlockRequestHandler
    */
   private $removeBlockRequestHandler;
 
   /**
    * Constructs a new PanelsIPEController.
    *
-   * @param \Drupal\Core\Block\BlockManagerInterface $block_manager
-   * @param \Drupal\Core\Render\RendererInterface $renderer
-   * @param \Drupal\Core\Layout\LayoutPluginManagerInterface $layout_plugin_manager
-   * @param \Drupal\panels\Storage\PanelsStorageManagerInterface $panels_storage_manager
-   * @param \Drupal\Core\TempStore\SharedTempStore $temp_store_factory
-   * @param \Drupal\Core\Plugin\Context\ContextHandlerInterface $context_handler
+   * @param BlockManagerInterface $block_manager
+   * @param RendererInterface $renderer
+   * @param LayoutPluginManagerInterface $layout_plugin_manager
+   * @param PanelsStorageManagerInterface $panels_storage_manager
+   * @param SharedTempStore $temp_store_factory
+   * @param ContextHandlerInterface $context_handler
    */
   public function __construct(BlockManagerInterface $block_manager, RendererInterface $renderer, LayoutPluginManagerInterface $layout_plugin_manager, PanelsStorageManagerInterface $panels_storage_manager, SharedTempStoreFactory $temp_store_factory, ContextHandlerInterface $context_handler) {
     $this->blockManager = $block_manager;
@@ -112,10 +116,10 @@ class PanelsIPEPageController extends ControllerBase {
    * @param string $panels_storage_id
    *   The id within the Panels storage plugin for this Panels display.
    *
-   * @return \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant|NULL
+   * @return PanelsDisplayVariant|NULL
    */
   protected function loadPanelsDisplay($panels_storage_type, $panels_storage_id) {
-    /** @var \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $panels_display */
+    /** @var PanelsDisplayVariant $panels_display */
     $panels_display = $this->panelsStorage->load($panels_storage_type, $panels_storage_id);
 
     // If a temporary configuration for this variant exists, use it.
@@ -134,9 +138,9 @@ class PanelsIPEPageController extends ControllerBase {
    * @param string $panels_storage_id
    *   The id within the storage plugin for the requested Panels display.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *
-   * @throws \Drupal\Core\TempStore\SharedTempStore
+   * @throws SharedTempStore
    */
   public function cancel($panels_storage_type, $panels_storage_id) {
     $panels_display = $this->loadPanelsDisplay($panels_storage_type, $panels_storage_id);
@@ -172,7 +176,7 @@ class PanelsIPEPageController extends ControllerBase {
     $base_path = base_path();
     $data = [];
     foreach ($layouts as $id => $layout) {
-      $icon = $layout->getIconPath() ?: drupal_get_path('module', 'panels') . '/layouts/no-layout-preview.png';
+      $icon = $layout->getIconPath() ?: \Drupal::service('extension.list.module')->getPath('panels') . '/layouts/no-layout-preview.png';
       $data[] = [
         'id' => $id,
         'label' => $layout->getLabel(),
@@ -201,7 +205,7 @@ class PanelsIPEPageController extends ControllerBase {
    * @param string $panels_storage_id
    *   The id within the storage plugin for the requested Panels display.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    */
   public function getLayouts($panels_storage_type, $panels_storage_id) {
     // Get the layouts data.
@@ -221,7 +225,7 @@ class PanelsIPEPageController extends ControllerBase {
    * @param string $layout_id
    *   The machine name of the requested layout.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   public function getLayoutForm($panels_storage_type, $panels_storage_id, $layout_id) {
     $panels_display = $this->loadPanelsDisplay($panels_storage_type, $panels_storage_id);
@@ -243,10 +247,10 @@ class PanelsIPEPageController extends ControllerBase {
    *   The id of the storage plugin.
    * @param string $panels_storage_id
    *   The id within the storage plugin for the requested Panels display.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    */
   public function handleUpdateLayoutRequest($panels_storage_type, $panels_storage_id, Request $request) {
     $panels_display = $this->loadPanelsDisplay($panels_storage_type, $panels_storage_id);
@@ -261,10 +265,10 @@ class PanelsIPEPageController extends ControllerBase {
    *   The id of the storage plugin.
    * @param string $panels_storage_id
    *   The id within the storage plugin for the requested Panels display.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    */
   public function handleUpdateLayoutTempStorageRequest($panels_storage_type, $panels_storage_id, Request $request) {
     $panels_display = $this->loadPanelsDisplay($panels_storage_type, $panels_storage_id);
@@ -279,10 +283,10 @@ class PanelsIPEPageController extends ControllerBase {
    *   The id of the storage plugin.
    * @param string $panels_storage_id
    *   The id within the storage plugin for the requested Panels display.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    */
   public function handleCreateLayoutRequest($panels_storage_type, $panels_storage_id, Request $request) {
     // For now, creating and updating a layout is the same thing.
@@ -296,10 +300,10 @@ class PanelsIPEPageController extends ControllerBase {
    *   The id of the storage plugin.
    * @param string $panels_storage_id
    *   The id within the storage plugin for the requested Panels display.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    */
   public function handleRemoveBlockRequest($panels_storage_type, $panels_storage_id, Request $request) {
     $panels_display = $this->loadPanelsDisplay($panels_storage_type, $panels_storage_id);
@@ -315,7 +319,7 @@ class PanelsIPEPageController extends ControllerBase {
    * @param string $panels_storage_id
    *   The id within the storage plugin for the requested Panels display.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    */
   public function getBlockPluginsData($panels_storage_type, $panels_storage_id) {
     $panels_display = $this->loadPanelsDisplay($panels_storage_type, $panels_storage_id);
@@ -356,7 +360,7 @@ class PanelsIPEPageController extends ControllerBase {
    * @param string $panels_storage_id
    *   The id within the storage plugin for the requested Panels display.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    */
   public function getBlockPlugins($panels_storage_type, $panels_storage_id) {
     // Get the block plugins data.
@@ -418,7 +422,7 @@ class PanelsIPEPageController extends ControllerBase {
       ->loadMultiple();
     $data = [];
 
-    /** @var \Drupal\block_content\BlockContentTypeInterface $definition */
+    /** @var BlockContentTypeInterface $definition */
     foreach ($types as $id => $definition) {
       $data[] = [
         'id' => $definition->id(),
@@ -439,7 +443,7 @@ class PanelsIPEPageController extends ControllerBase {
    * @param string $panels_storage_id
    *   The id within the storage plugin for the requested Panels display.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    */
   public function getBlockContentTypes($panels_storage_type, $panels_storage_id) {
     // Get the block content types data.
@@ -461,9 +465,9 @@ class PanelsIPEPageController extends ControllerBase {
    * @param string $block_content_uuid
    *   The Block Content Entity UUID, if this is an existing Block.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException
+   * @throws AccessDeniedHttpException
    */
   public function getBlockContentForm($panels_storage_type, $panels_storage_id, $type, $block_content_uuid = NULL) {
     $storage = $this->entityTypeManager()->getStorage('block_content');
@@ -512,12 +516,12 @@ class PanelsIPEPageController extends ControllerBase {
    * @param string $block_uuid
    *   The Block UUID.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    */
   public function getBlockModelData($panels_storage_type, $panels_storage_id, $block_uuid) {
     $panels_display = $this->loadPanelsDisplay($panels_storage_type, $panels_storage_id);
 
-    /** @var \Drupal\Core\Block\BlockBase $block_instance */
+    /** @var BlockBase $block_instance */
     $block_instance = $panels_display->getBlock($block_uuid);
     $block_config = $block_instance->getConfiguration();
 
@@ -556,7 +560,7 @@ class PanelsIPEPageController extends ControllerBase {
    * @param string $block_uuid
    *   The Block UUID.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    */
   public function getBlock($panels_storage_type, $panels_storage_id, $block_uuid) {
     // Get the block model data.
diff --git a/panels_ipe/src/Form/PanelsIPEBlockContentForm.php b/panels_ipe/src/Form/PanelsIPEBlockContentForm.php
index 322c0bf..b76b9d9 100644
--- a/panels_ipe/src/Form/PanelsIPEBlockContentForm.php
+++ b/panels_ipe/src/Form/PanelsIPEBlockContentForm.php
@@ -79,7 +79,7 @@ class PanelsIPEBlockContentForm extends BlockContentForm {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/panels_ipe/src/Form/PanelsIPEBlockPluginForm.php b/panels_ipe/src/Form/PanelsIPEBlockPluginForm.php
index 418d2c6..c36af84 100644
--- a/panels_ipe/src/Form/PanelsIPEBlockPluginForm.php
+++ b/panels_ipe/src/Form/PanelsIPEBlockPluginForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\panels_ipe\Form;
 
+use Drupal\Core\Block\BlockBase;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\Core\Form\FormBase;
@@ -30,34 +31,34 @@ class PanelsIPEBlockPluginForm extends FormBase {
   use PanelsIPEBlockRendererTrait;
 
   /**
-   * @var \Drupal\Component\Plugin\PluginManagerInterface $blockManager
+   * @var PluginManagerInterface $blockManager
    */
   protected $blockManager;
 
   /**
-   * @var \Drupal\Core\Render\RendererInterface $renderer
+   * @var RendererInterface $renderer
    */
   protected $renderer;
 
   /**
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @var SharedTempStoreFactory
    */
   protected $tempStore;
 
   /**
    * The Panels storage manager.
    *
-   * @var \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant
+   * @var PanelsDisplayVariant
    */
   protected $panelsDisplay;
 
   /**
    * Constructs a new PanelsIPEBlockPluginForm.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $block_manager
-   * @param \Drupal\Core\Plugin\Context\ContextHandlerInterface $context_handler
-   * @param \Drupal\Core\Render\RendererInterface $renderer
-   * @param \Drupal\Core\TempStore\SharedTempStoreFactory $temp_store_factory
+   * @param PluginManagerInterface $block_manager
+   * @param ContextHandlerInterface $context_handler
+   * @param RendererInterface $renderer
+   * @param SharedTempStoreFactory $temp_store_factory
    */
   public function __construct(PluginManagerInterface $block_manager, ContextHandlerInterface $context_handler, RendererInterface $renderer, SharedTempStoreFactory $temp_store_factory) {
     $this->blockManager = $block_manager;
@@ -90,11 +91,11 @@ class PanelsIPEBlockPluginForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $plugin_id
    *   The requested Block Plugin ID.
-   * @param \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $panels_display
+   * @param PanelsDisplayVariant $panels_display
    *   The current PageVariant ID.
    * @param string $uuid
    *   An optional Block UUID, if this is an existing Block.
@@ -116,12 +117,12 @@ class PanelsIPEBlockPluginForm extends FormBase {
 
     // If $uuid is present, a block should exist.
     if ($uuid) {
-      /** @var \Drupal\Core\Block\BlockBase $block_instance */
+      /** @var BlockBase $block_instance */
       $block_instance = $panels_display->getBlock($uuid);
     }
     else {
       // Create an instance of this Block plugin.
-      /** @var \Drupal\Core\Block\BlockBase $block_instance */
+      /** @var BlockBase $block_instance */
       $block_instance = $this->blockManager->createInstance($plugin_id);
     }
 
@@ -237,11 +238,11 @@ class PanelsIPEBlockPluginForm extends FormBase {
   /**
    * Executes the block plugin's submit handlers.
    *
-   * @param \Drupal\Core\Block\BlockPluginInterface $block_instance
+   * @param BlockPluginInterface $block_instance
    *   The block instance.
    * @param array $form
    *   The full form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The full form state.
    */
   protected function submitBlock(BlockPluginInterface $block_instance, array $form, FormStateInterface $form_state) {
@@ -324,7 +325,7 @@ class PanelsIPEBlockPluginForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array $form
@@ -370,10 +371,10 @@ class PanelsIPEBlockPluginForm extends FormBase {
   /**
    * Loads or creates a Block Plugin instance suitable for rendering or testing.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\Core\Block\BlockPluginInterface
+   * @return BlockPluginInterface
    *   The Block Plugin instance.
    */
   protected function getBlockInstance(FormStateInterface $form_state) {
@@ -390,7 +391,7 @@ class PanelsIPEBlockPluginForm extends FormBase {
     }
     else {
       // Create an instance of this Block plugin.
-      /** @var \Drupal\Core\Block\BlockBase $block_instance */
+      /** @var BlockBase $block_instance */
       $block_instance = $this->blockManager->createInstance($form_state->getValue('plugin_id'));
     }
 
diff --git a/panels_ipe/src/Form/PanelsIPELayoutForm.php b/panels_ipe/src/Form/PanelsIPELayoutForm.php
index cbec105..d16f6bf 100644
--- a/panels_ipe/src/Form/PanelsIPELayoutForm.php
+++ b/panels_ipe/src/Form/PanelsIPELayoutForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\panels_ipe\Form;
 
+use Drupal\Core\Layout\LayoutInterface;
+use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormState;
 use Drupal\Core\Form\FormStateInterface;
@@ -20,40 +22,40 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class PanelsIPELayoutForm extends FormBase {
 
   /**
-   * @var \Drupal\Core\Render\RendererInterface $renderer
+   * @var RendererInterface $renderer
    */
   protected $renderer;
 
   /**
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @var SharedTempStoreFactory
    */
   protected $tempStore;
 
   /**
-   * @var \Drupal\Core\Layout\LayoutPluginManagerInterface
+   * @var LayoutPluginManagerInterface
    */
   protected $layoutManager;
 
   /**
    * The Panels storage manager.
    *
-   * @var \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant
+   * @var PanelsDisplayVariant
    */
   protected $panelsDisplay;
 
   /**
    * The current layout.
    *
-   * @var \Drupal\Core\Layout\LayoutInterface
+   * @var LayoutInterface
    */
   protected $layout;
 
   /**
    * Constructs a new PanelsIPEBlockPluginForm.
    *
-   * @param \Drupal\Core\Layout\LayoutPluginManagerInterface $layout_manager
-   * @param \Drupal\Core\Render\RendererInterface $renderer
-   * @param \Drupal\Core\TempStore\SharedTempStoreFactory $temp_store_factory
+   * @param LayoutPluginManagerInterface $layout_manager
+   * @param RendererInterface $renderer
+   * @param SharedTempStoreFactory $temp_store_factory
    */
   public function __construct(LayoutPluginManagerInterface $layout_manager, RendererInterface $renderer, SharedTempStoreFactory $temp_store_factory) {
     $this->layoutManager = $layout_manager;
@@ -84,11 +86,11 @@ class PanelsIPELayoutForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $layout_id
    *   The requested Layout ID.
-   * @param \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $panels_display
+   * @param PanelsDisplayVariant $panels_display
    *   The current PageVariant ID.
    *
    * @return array
@@ -186,7 +188,7 @@ class PanelsIPELayoutForm extends FormBase {
 
     // For each block, set the region to match the new layout.
     foreach ($panels_display->getRegionAssignments() as $region => $region_assignment) {
-      /** @var \Drupal\Core\Block\BlockPluginInterface $block */
+      /** @var BlockPluginInterface $block */
       foreach ($region_assignment as $block_id => $block) {
         $block_config = $block->getConfiguration();
         // If the new layout does not have a region with the same name, use the
diff --git a/panels_ipe/src/Helpers/RequestHandlerBase.php b/panels_ipe/src/Helpers/RequestHandlerBase.php
index 18e0431..7b19e3c 100644
--- a/panels_ipe/src/Helpers/RequestHandlerBase.php
+++ b/panels_ipe/src/Helpers/RequestHandlerBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\panels_ipe\Helpers;
 
+use Drupal\Core\TempStore\SharedTempStoreFactory;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant;
@@ -22,15 +23,15 @@ abstract class RequestHandlerBase implements RequestHandlerInterface {
   private $response = [];
 
   /**
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory */
+   * @var SharedTempStoreFactory */
   private $tempStore;
 
   /**
-   * @var \Drupal\panels\Storage\PanelsStorageManagerInterface */
+   * @var PanelsStorageManagerInterface */
   private $panelsStore;
 
   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface */
+   * @var ModuleHandlerInterface */
   private $moduleHandler;
 
   public function __construct(ModuleHandlerInterface $module_handler, PanelsStorageManagerInterface $panels_store, SharedTempStore $temp_store) {
@@ -56,22 +57,22 @@ abstract class RequestHandlerBase implements RequestHandlerInterface {
   /**
    * Handles the decoded request by making some change to the Panels Display.
    *
-   * @param \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $panels_display
+   * @param PanelsDisplayVariant $panels_display
    * @param mixed $decoded_request
    * @param bool $save_to_temp_store
    *
-   * @throws \Drupal\panels_ipe\Exception\EmptyRequestContentException
+   * @throws EmptyRequestContentException
    */
   protected abstract function handle(PanelsDisplayVariant $panels_display, $decoded_request, $save_to_temp_store = FALSE);
 
   /**
    * Attempts to decode the incoming request's content as JSON.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *
    * @return mixed
    *
-   * @throws \Drupal\panels_ipe\Exception\EmptyRequestContentException
+   * @throws EmptyRequestContentException
    */
   protected static function decodeRequest(Request $request) {
     if (empty($request->getContent())) {
@@ -94,10 +95,10 @@ abstract class RequestHandlerBase implements RequestHandlerInterface {
   /**
    * Deletes TempStore and saves the current Panels display.
    *
-   * @param \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $panels_display
+   * @param PanelsDisplayVariant $panels_display
    *   The Panels display to be saved.
    *
-   * @throws \Drupal\Core\TempStore\SharedTempStore
+   * @throws SharedTempStore
    *   If there are any issues manipulating the entry in the temp store.
    */
   protected function savePanelsDisplay(PanelsDisplayVariant $panels_display) {
@@ -108,9 +109,9 @@ abstract class RequestHandlerBase implements RequestHandlerInterface {
   /**
    * Saves the given Panels Display to TempStore.
    *
-   * @param \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $panels_display
+   * @param PanelsDisplayVariant $panels_display
    *
-   * @throws \Drupal\Core\TempStore\SharedTempStore
+   * @throws SharedTempStore
    */
   protected function savePanelsDisplayToTempStore(PanelsDisplayVariant $panels_display) {
     $this->tempStore->set($panels_display->getTempStoreId(), $panels_display->getConfiguration());
@@ -119,9 +120,9 @@ abstract class RequestHandlerBase implements RequestHandlerInterface {
   /**
    * Deletes the given Panels Display from TempStore.
    *
-   * @param \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $panels_display
+   * @param PanelsDisplayVariant $panels_display
    *
-   * @throws \Drupal\Core\TempStore\SharedTempStore
+   * @throws SharedTempStore
    */
   protected function deletePanelsDisplayTempStore(PanelsDisplayVariant $panels_display) {
     $this->tempStore->delete($panels_display->getTempStoreId());
@@ -130,7 +131,7 @@ abstract class RequestHandlerBase implements RequestHandlerInterface {
   /**
    * Returns the current response data as a JSON Response.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    */
   public function getJsonResponse() {
     return new JsonResponse($this->response, $this->responseStatusCode);
diff --git a/panels_ipe/src/Helpers/RequestHandlerInterface.php b/panels_ipe/src/Helpers/RequestHandlerInterface.php
index da0474d..edced98 100644
--- a/panels_ipe/src/Helpers/RequestHandlerInterface.php
+++ b/panels_ipe/src/Helpers/RequestHandlerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\panels_ipe\Helpers;
 
+use Symfony\Component\HttpFoundation\JsonResponse;
 use Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant;
 use Symfony\Component\HttpFoundation\Request;
 
@@ -10,14 +11,14 @@ interface RequestHandlerInterface {
   /**
    * Handles an incoming request for a given PanelsDisplayVariant.
    *
-   * @param \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $panels_display
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param PanelsDisplayVariant $panels_display
+   * @param Request $request
    * @param bool $save_to_temp_store
    */
   public function handleRequest(PanelsDisplayVariant $panels_display, Request $request, $save_to_temp_store = FALSE);
 
   /**
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    */
   public function getJsonResponse();
 
diff --git a/panels_ipe/src/Helpers/UpdateLayoutRequestHandler.php b/panels_ipe/src/Helpers/UpdateLayoutRequestHandler.php
index 313790f..b85e24d 100644
--- a/panels_ipe/src/Helpers/UpdateLayoutRequestHandler.php
+++ b/panels_ipe/src/Helpers/UpdateLayoutRequestHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\panels_ipe\Helpers;
 
+use Drupal\Core\Block\BlockBase;
 use Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant;
 
 class UpdateLayoutRequestHandler extends RequestHandlerBase {
@@ -16,7 +17,7 @@ class UpdateLayoutRequestHandler extends RequestHandlerBase {
   /**
    * Changes the layout for the given Panels Display.
    *
-   * @param \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $panels_display
+   * @param PanelsDisplayVariant $panels_display
    * @param $layout_model
    * @param bool $save_to_temp_store
    */
@@ -39,19 +40,19 @@ class UpdateLayoutRequestHandler extends RequestHandlerBase {
   /**
    * Updates the current Panels display based on the changes done in our app.
    *
-   * @param \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $panels_display
+   * @param PanelsDisplayVariant $panels_display
    *   The current Panels display.
    * @param array $layout_model
    *   The decoded LayoutModel from our App.
    *
-   * @return \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant
+   * @return PanelsDisplayVariant
    */
   private static function updatePanelsDisplay(PanelsDisplayVariant $panels_display, array $layout_model) {
     // Set our weight and region based on the metadata in our Backbone app.
     foreach ($layout_model['regionCollection'] as $region) {
       $weight = 0;
       foreach ($region['blockCollection'] as $block) {
-        /** @var \Drupal\Core\Block\BlockBase $block_instance */
+        /** @var BlockBase $block_instance */
         $block_instance = $panels_display->getBlock($block['uuid']);
 
         $block_instance->setConfigurationValue('region', $region['name']);
diff --git a/panels_ipe/src/PanelsIPEBlockRendererTrait.php b/panels_ipe/src/PanelsIPEBlockRendererTrait.php
index 6d5d36c..2ae57d5 100644
--- a/panels_ipe/src/PanelsIPEBlockRendererTrait.php
+++ b/panels_ipe/src/PanelsIPEBlockRendererTrait.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\panels_ipe;
 
+use Drupal\Core\Plugin\Context\ContextHandlerInterface;
+use Drupal\Core\Block\BlockBase;
+use Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant;
 use Drupal\Core\Plugin\ContextAwarePluginInterface;
 use Drupal\Core\Render\Element;
 
@@ -11,16 +14,16 @@ use Drupal\Core\Render\Element;
 trait PanelsIPEBlockRendererTrait {
 
   /**
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface $contextHandler
+   * @var ContextHandlerInterface $contextHandler
    */
   protected $contextHandler;
 
   /**
    * Compiles a render array for the given Block instance based on the form.
    *
-   * @param \Drupal\Core\Block\BlockBase $block_instance
+   * @param BlockBase $block_instance
    *   The Block instance you want to render.
-   * @param \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $panels_display
+   * @param PanelsDisplayVariant $panels_display
    *   The Panels Display that contains the Block instance.
    *
    * @return array $build
diff --git a/panels_ipe/src/Plugin/DisplayBuilder/InPlaceEditorDisplayBuilder.php b/panels_ipe/src/Plugin/DisplayBuilder/InPlaceEditorDisplayBuilder.php
index c937ef4..04a7195 100644
--- a/panels_ipe/src/Plugin/DisplayBuilder/InPlaceEditorDisplayBuilder.php
+++ b/panels_ipe/src/Plugin/DisplayBuilder/InPlaceEditorDisplayBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\panels_ipe\Plugin\DisplayBuilder;
 
+use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Layout\LayoutInterface;
@@ -26,12 +27,12 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class InPlaceEditorDisplayBuilder extends StandardDisplayBuilder {
 
   /**
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @var SharedTempStoreFactory
    */
   protected $tempStore;
 
   /**
-   * @var \Drupal\panels\Storage\PanelsStorageManagerInterface
+   * @var PanelsStorageManagerInterface
    */
   protected $panelsStorage;
 
@@ -44,11 +45,11 @@ class InPlaceEditorDisplayBuilder extends StandardDisplayBuilder {
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Plugin\Context\ContextHandlerInterface $context_handler
+   * @param ContextHandlerInterface $context_handler
    *   The context handler.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
-   * @param \Drupal\Core\TempStore\SharedTempStoreFactory $temp_store_factory
+   * @param SharedTempStoreFactory $temp_store_factory
    *   The factory for the temp store object.
    * @param \Drupal\panels\Storage\PanelsStorageManagerInterface
    *   The Panels storage manager.
@@ -80,9 +81,9 @@ class InPlaceEditorDisplayBuilder extends StandardDisplayBuilder {
    *
    * @param array $regions
    *   The render array representing regions.
-   * @param \Drupal\Core\Layout\LayoutInterface $layout
+   * @param LayoutInterface $layout
    *   The current layout.
-   * @param \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $panels_display
+   * @param PanelsDisplayVariant $panels_display
    *   The Panels display we are editing.
    * @param bool $unsaved
    *   Whether or not there are unsaved changes.
@@ -108,7 +109,7 @@ class InPlaceEditorDisplayBuilder extends StandardDisplayBuilder {
         continue;
       }
 
-      /** @var \Drupal\Core\Block\BlockPluginInterface[] $blocks */
+      /** @var BlockPluginInterface[] $blocks */
       foreach ($blocks as $block_uuid => $block) {
         $configuration = $block->getConfiguration();
         $plugin_definition = $block->getPluginDefinition();
diff --git a/panels_ipe/src/Plugin/IPEAccessInterface.php b/panels_ipe/src/Plugin/IPEAccessInterface.php
index d2a8f11..2d33fe7 100644
--- a/panels_ipe/src/Plugin/IPEAccessInterface.php
+++ b/panels_ipe/src/Plugin/IPEAccessInterface.php
@@ -13,14 +13,14 @@ interface IPEAccessInterface extends PluginInspectionInterface {
   /**
    * Provides logic to determine if a given plugin applies to a display.
    *
-   * @param \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $display
+   * @param PanelsDisplayVariant $display
    *
    * @return boolean
    */
   public function applies(PanelsDisplayVariant $display);
 
   /**
-   * @param \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $display
+   * @param PanelsDisplayVariant $display
    *
    * @return mixed
    */
diff --git a/panels_ipe/src/Plugin/IPEAccessManager.php b/panels_ipe/src/Plugin/IPEAccessManager.php
index 8ec892b..1c37aca 100644
--- a/panels_ipe/src/Plugin/IPEAccessManager.php
+++ b/panels_ipe/src/Plugin/IPEAccessManager.php
@@ -18,9 +18,9 @@ class IPEAccessManager extends DefaultPluginManager implements IPEAccessManagerI
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ -36,7 +36,7 @@ class IPEAccessManager extends DefaultPluginManager implements IPEAccessManagerI
   public function applies(PanelsDisplayVariant $display) {
     $applies = [];
     foreach ($this->getDefinitions() as $plugin_id => $definition) {
-      /** @var \Drupal\panels_ipe\Plugin\IPEAccessInterface $plugin */
+      /** @var IPEAccessInterface $plugin */
       $plugin = $this->createInstance($plugin_id);
       if ($plugin->applies($display)) {
         $applies[$plugin_id] = $plugin;
diff --git a/panels_ipe/src/Plugin/IPEAccessManagerInterface.php b/panels_ipe/src/Plugin/IPEAccessManagerInterface.php
index 9f385b1..e383a6e 100644
--- a/panels_ipe/src/Plugin/IPEAccessManagerInterface.php
+++ b/panels_ipe/src/Plugin/IPEAccessManagerInterface.php
@@ -9,14 +9,14 @@ use Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant;
  */
 interface IPEAccessManagerInterface {
   /**
-   * @param \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $display
+   * @param PanelsDisplayVariant $display
    *
-   * @return \Drupal\panels_ipe\Plugin\IPEAccessInterface[]
+   * @return IPEAccessInterface[]
    */
   public function applies(PanelsDisplayVariant $display);
 
   /**
-   * @param \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $display
+   * @param PanelsDisplayVariant $display
    *
    * @return bool
    */
diff --git a/panels_ipe/tests/src/FunctionalJavascript/PageManagerIntegrationTest.php b/panels_ipe/tests/src/FunctionalJavascript/PageManagerIntegrationTest.php
index bddba88..60eea93 100644
--- a/panels_ipe/tests/src/FunctionalJavascript/PageManagerIntegrationTest.php
+++ b/panels_ipe/tests/src/FunctionalJavascript/PageManagerIntegrationTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\panels_ipe\FunctionalJavascript;
 
+use Drupal\user\UserInterface;
 /**
  * Tests the JavaScript functionality of Panels IPE with PageManager.
  *
@@ -26,19 +27,19 @@ class PageManagerIntegrationTest extends PanelsIPETestBase {
   ];
 
   /**
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user1;
 
   /**
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user2;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create a user with appropriate permissions to use Panels IPE.
diff --git a/panels_ipe/tests/src/FunctionalJavascript/PanelsIPETestBase.php b/panels_ipe/tests/src/FunctionalJavascript/PanelsIPETestBase.php
index d0ab4c5..fea2c83 100644
--- a/panels_ipe/tests/src/FunctionalJavascript/PanelsIPETestBase.php
+++ b/panels_ipe/tests/src/FunctionalJavascript/PanelsIPETestBase.php
@@ -32,6 +32,7 @@ abstract class PanelsIPETestBase extends WebDriverTestBase {
 
   /**
    * Tests that adding a block with default configuration works.
+   * @doesNotPerformAssertions
    */
   public function testIPEAddBlock() {
     $this->visitIPERoute();
@@ -41,6 +42,7 @@ abstract class PanelsIPETestBase extends WebDriverTestBase {
 
   /**
    * Tests that changing layout from one (default) to two columns works.
+   * @doesNotPerformAssertions
    */
   public function testIPEChangeLayout() {
     $this->visitIPERoute();
diff --git a/panels_ipe/tests/src/FunctionalJavascript/PanelsIPETestTrait.php b/panels_ipe/tests/src/FunctionalJavascript/PanelsIPETestTrait.php
index d02d271..d8d9a2d 100644
--- a/panels_ipe/tests/src/FunctionalJavascript/PanelsIPETestTrait.php
+++ b/panels_ipe/tests/src/FunctionalJavascript/PanelsIPETestTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\panels_ipe\FunctionalJavascript;
 
+use Behat\Mink\Element\NodeElement;
 use Behat\Mink\Driver\Selenium2Driver;
 use Symfony\Component\CssSelector\CssSelectorConverter;
 
@@ -240,7 +241,7 @@ trait PanelsIPETestTrait {
     $session = $this->getSession();
     $blocks = $session->getPage()->findAll('css', '[data-block-id]');
     if (count($blocks)) {
-      /** @var \Behat\Mink\Element\NodeElement $block */
+      /** @var NodeElement $block */
       foreach ($blocks as $block) {
         $block_ids[] = $block->getAttribute('data-block-id');
       }
diff --git a/panels_ipe/tests/src/Unit/RemoveBlockRequestHandlerTest.php b/panels_ipe/tests/src/Unit/RemoveBlockRequestHandlerTest.php
index 8d8e966..71ccffe 100644
--- a/panels_ipe/tests/src/Unit/RemoveBlockRequestHandlerTest.php
+++ b/panels_ipe/tests/src/Unit/RemoveBlockRequestHandlerTest.php
@@ -12,7 +12,7 @@ use Symfony\Component\HttpFoundation\JsonResponse;
  */
 class RemoveBlockRequestHandlerTest extends RequestHandlerTestBase {
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->sut = new RemoveBlockRequestHandler($this->moduleHandler, $this->panelsStore, $this->tempStore);
   }
@@ -28,6 +28,7 @@ class RemoveBlockRequestHandlerTest extends RequestHandlerTestBase {
 
   /**
    * @test
+   * @doesNotPerformAssertions
    */
   public function panelsDisplayIsSavedAfterBlockRemoval() {
     $this->panelsStore->expects($this->once())->method('save');
@@ -36,6 +37,7 @@ class RemoveBlockRequestHandlerTest extends RequestHandlerTestBase {
 
   /**
    * @test
+   * @doesNotPerformAssertions
    */
   public function panelsDisplayIsSavedToTempstoreAfterBlockRemoval() {
     $this->tempStore->expects($this->once())->method('set');
diff --git a/panels_ipe/tests/src/Unit/RequestHandlerTestBase.php b/panels_ipe/tests/src/Unit/RequestHandlerTestBase.php
index 547eb3c..9245982 100644
--- a/panels_ipe/tests/src/Unit/RequestHandlerTestBase.php
+++ b/panels_ipe/tests/src/Unit/RequestHandlerTestBase.php
@@ -2,12 +2,13 @@
 
 namespace Drupal\Tests\panels_ipe\Unit;
 
+use Drupal\panels_ipe\Helpers\RequestHandlerInterface;
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant;
 use Drupal\panels\Storage\PanelsStorageManagerInterface;
 use Drupal\Core\TempStore\SharedTempStore;
 use PHPUnit\Framework\TestCase;
-use PHPUnit_Framework_MockObject_MockObject;
 use Symfony\Component\HttpFoundation\JsonResponse;
 use Symfony\Component\HttpFoundation\Request;
 
@@ -17,39 +18,35 @@ use Symfony\Component\HttpFoundation\Request;
 abstract class RequestHandlerTestBase extends TestCase {
 
   /**
-   * @var  \Drupal\panels_ipe\Helpers\RequestHandlerInterface */
+   * @var RequestHandlerInterface */
   protected $sut;
 
   /**
-   * @var PHPUnit_Framework_MockObject_MockObject */
+   * @var MockObject */
   protected $moduleHandler;
 
   /**
-   * @var PHPUnit_Framework_MockObject_MockObject */
+   * @var MockObject */
   protected $panelsStore;
 
   /**
-   * @var PHPUnit_Framework_MockObject_MockObject */
+   * @var MockObject */
   protected $tempStore;
 
   /**
-   * @var PHPUnit_Framework_MockObject_MockObject */
+   * @var MockObject */
   protected $panelsDisplay;
 
   /**
    *
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->moduleHandler = $this->getMockForAbstractClass(ModuleHandlerInterface::class);
     $this->panelsStore = $this->getMockForAbstractClass(PanelsStorageManagerInterface::class);
-    $this->tempStore = $this->getMockBuilder(SharedTempStore::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->tempStore = $this->createMock(SharedTempStore::class);
 
-    $this->panelsDisplay = $this->getMockBuilder(PanelsDisplayVariant::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->panelsDisplay = $this->createMock(PanelsDisplayVariant::class);
   }
 
   protected function createRequest($content = NULL) {
diff --git a/panels_ipe/tests/src/Unit/UpdateLayoutRequestHandlerTest.php b/panels_ipe/tests/src/Unit/UpdateLayoutRequestHandlerTest.php
index 499a75d..0007a13 100644
--- a/panels_ipe/tests/src/Unit/UpdateLayoutRequestHandlerTest.php
+++ b/panels_ipe/tests/src/Unit/UpdateLayoutRequestHandlerTest.php
@@ -14,7 +14,7 @@ use Symfony\Component\HttpFoundation\JsonResponse;
  */
 class UpdateLayoutRequestHandlerTest extends RequestHandlerTestBase {
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->sut = new UpdateLayoutRequestHandler($this->moduleHandler, $this->panelsStore, $this->tempStore);
   }
@@ -34,9 +34,7 @@ class UpdateLayoutRequestHandlerTest extends RequestHandlerTestBase {
   }
 
   private function setPanelsDisplayExpectations() {
-    $block = $this->getMockBuilder(BlockBase::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $block = $this->createMock(BlockBase::class);
     $block->expects($this->exactly(4))->method('setConfigurationValue');
     $block->expects($this->exactly(2))
       ->method('getConfiguration')
diff --git a/src/CachedValuesGetterTrait.php b/src/CachedValuesGetterTrait.php
index c4cc525..5846821 100644
--- a/src/CachedValuesGetterTrait.php
+++ b/src/CachedValuesGetterTrait.php
@@ -19,7 +19,7 @@ trait CachedValuesGetterTrait {
    * implementations are generally simpler and do not need the same degree of
    * customization. This trait accounts for both use cases.
    *
-   * @param \Drupal\Core\TempStore\SharedTempStoreFactory $tempstore
+   * @param SharedTempStoreFactory $tempstore
    *   The tempstore object in use for the desired cached values.
    * @param string $tempstore_id
    *   The tempstore identifier.
diff --git a/src/Controller/Panels.php b/src/Controller/Panels.php
index bc116af..2b9dfa3 100644
--- a/src/Controller/Panels.php
+++ b/src/Controller/Panels.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\panels\Controller;
 
+use Drupal\Core\Plugin\Context\ContextAwarePluginManagerInterface;
+use Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant;
+use Drupal\panels\Plugin\PanelsPattern\PanelsPatternInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Block\BlockManagerInterface;
 use Drupal\Core\Controller\ControllerBase;
@@ -23,50 +26,50 @@ class Panels extends ControllerBase {
   /**
    * The block manager.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;
 
   /**
    * The condition manager.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextAwarePluginManagerInterface
+   * @var ContextAwarePluginManagerInterface
    */
   protected $conditionManager;
 
   /**
    * The variant manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $variantManager;
 
   /**
    * The context handler.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   * @var ContextHandlerInterface
    */
   protected $contextHandler;
 
   /**
    * Tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @var SharedTempStoreFactory
    */
   protected $tempstore;
 
   /**
    * Constructs a new VariantPluginEditForm.
    *
-   * @param \Drupal\Core\Block\BlockManagerInterface $block_manager
+   * @param BlockManagerInterface $block_manager
    *   The block manager.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $condition_manager
+   * @param PluginManagerInterface $condition_manager
    *   The condition manager.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $variant_manager
+   * @param PluginManagerInterface $variant_manager
    *   The variant manager.
-   * @param \Drupal\Core\Plugin\Context\ContextHandlerInterface $context_handler
+   * @param ContextHandlerInterface $context_handler
    *   The context handler.
-   * @param \Drupal\Core\TempStore\SharedTempStoreFactory $tempstore
+   * @param SharedTempStoreFactory $tempstore
    *   The tempstore factory.
    */
   public function __construct(BlockManagerInterface $block_manager, PluginManagerInterface $condition_manager, PluginManagerInterface $variant_manager, ContextHandlerInterface $context_handler, SharedTempStoreFactory $tempstore) {
@@ -94,7 +97,7 @@ class Panels extends ControllerBase {
   /**
    * Presents a list of blocks to add to the variant.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    * @param string $machine_name
    *   The identifier of the block display variant.
@@ -106,9 +109,9 @@ class Panels extends ControllerBase {
    */
   public function selectBlock(Request $request, $machine_name, $tempstore_id) {
     $cached_values = $this->getCachedValues($this->tempstore, $tempstore_id, $machine_name);
-    /** @var \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $variant_plugin */
+    /** @var PanelsDisplayVariant $variant_plugin */
     $variant_plugin = $cached_values['plugin'];
-    /** @var \Drupal\panels\Plugin\PanelsPattern\PanelsPatternInterface $pattern_plugin */
+    /** @var PanelsPatternInterface $pattern_plugin */
     $pattern_plugin = $variant_plugin->getPattern();
 
     $contexts = $pattern_plugin->getDefaultContexts($this->tempstore, $tempstore_id, $machine_name);
diff --git a/src/Form/LayoutChangeRegions.php b/src/Form/LayoutChangeRegions.php
index 043641a..586624c 100644
--- a/src/Form/LayoutChangeRegions.php
+++ b/src/Form/LayoutChangeRegions.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\panels\Form;
 
+use Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant;
+use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Layout\LayoutPluginManagerInterface;
@@ -16,14 +18,14 @@ class LayoutChangeRegions extends FormBase {
   /**
    * The layout plugin manager.
    *
-   * @var \Drupal\Core\Layout\LayoutPluginManagerInterface
+   * @var LayoutPluginManagerInterface
    */
   protected $manager;
 
   /**
    * The tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @var SharedTempStoreFactory
    */
   protected $tempstore;
 
@@ -40,9 +42,9 @@ class LayoutChangeRegions extends FormBase {
   /**
    * LayoutChangeRegions constructor.
    *
-   * @param \Drupal\Core\Layout\LayoutPluginManagerInterface $manager
+   * @param LayoutPluginManagerInterface $manager
    *   The layout plugin manager.
-   * @param \Drupal\Core\TempStore\SharedTempStoreFactory $tempstore
+   * @param SharedTempStoreFactory $tempstore
    *   The tempstore factory.
    */
   public function __construct(LayoutPluginManagerInterface $manager, SharedTempStoreFactory $tempstore) {
@@ -188,12 +190,12 @@ class LayoutChangeRegions extends FormBase {
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $cached_values = $form_state->getTemporaryValue('wizard');
-    /** @var \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $plugin */
+    /** @var PanelsDisplayVariant $plugin */
     $plugin = $cached_values['plugin'];
     $blocks = $plugin->getRegionAssignments();
     /**
      * @var string $region
-     * @var \Drupal\Core\Block\BlockPluginInterface[] $block_group
+     * @var BlockPluginInterface[] $block_group
      */
     foreach ($blocks as $region => $block_group) {
       foreach ($block_group as $uuid => $block) {
diff --git a/src/Form/LayoutChangeSettings.php b/src/Form/LayoutChangeSettings.php
index ed57e03..ef2ad76 100644
--- a/src/Form/LayoutChangeSettings.php
+++ b/src/Form/LayoutChangeSettings.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\panels\Form;
 
+use Drupal\ctools\Wizard\EntityFormWizardInterface;
 use Drupal\Component\Plugin\PluginHelper;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormState;
@@ -21,14 +22,14 @@ class LayoutChangeSettings extends FormBase {
   /**
    * The layout plugin manager.
    *
-   * @var \Drupal\Core\Layout\LayoutPluginManagerInterface
+   * @var LayoutPluginManagerInterface
    */
   protected $manager;
 
   /**
    * The tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @var SharedTempStoreFactory
    */
   protected $tempstore;
 
@@ -45,9 +46,9 @@ class LayoutChangeSettings extends FormBase {
   /**
    * LayoutChangeSettings constructor.
    *
-   * @param \Drupal\Core\Layout\LayoutPluginManagerInterface $manager
+   * @param LayoutPluginManagerInterface $manager
    *   The layout plugin manager.
-   * @param \Drupal\Core\TempStore\SharedTempStoreFactory $tempstore
+   * @param SharedTempStoreFactory $tempstore
    *   The tempstore factory.
    */
   public function __construct(LayoutPluginManagerInterface $manager, SharedTempStoreFactory $tempstore) {
@@ -114,13 +115,13 @@ class LayoutChangeSettings extends FormBase {
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $cached_values = $form_state->getTemporaryValue('wizard');
-    /** @var \Drupal\ctools\Wizard\EntityFormWizardInterface $wizard */
+    /** @var EntityFormWizardInterface $wizard */
     $wizard = $form_state->getFormObject();
     $next_params = $wizard->getNextParameters($cached_values);
     /* @var $plugin \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant */
     $plugin = $cached_values['plugin'];
     $layout_id = !empty($cached_values['layout_change']['new_layout']) ? $cached_values['layout_change']['new_layout'] : $plugin->getConfiguration()['layout'];
-    /** @var \Drupal\Core\Layout\LayoutInterface $layout */
+    /** @var LayoutInterface $layout */
     $layout = $this->manager->createInstance($layout_id, []);
     // If we're dealing with a form, submit it.
     if ($layout instanceof PluginFormInterface) {
@@ -161,9 +162,9 @@ class LayoutChangeSettings extends FormBase {
    *
    * @param string $next_step
    *   The next step of the wizard.
-   * @param \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $plugin
+   * @param PanelsDisplayVariant $plugin
    *   The plugin to update.
-   * @param \Drupal\Core\Layout\LayoutInterface $layout
+   * @param LayoutInterface $layout
    *   The layout for which we are upating settings.
    * @param array $cached_values
    *   The current cached values from the wizard.
diff --git a/src/Form/LayoutPluginSelector.php b/src/Form/LayoutPluginSelector.php
index fa4b223..c7ad684 100644
--- a/src/Form/LayoutPluginSelector.php
+++ b/src/Form/LayoutPluginSelector.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\panels\Form;
 
+use Drupal\ctools\Wizard\EntityFormWizardInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Layout\LayoutPluginManagerInterface;
@@ -16,14 +17,14 @@ class LayoutPluginSelector extends FormBase {
   /**
    * The layout plugin manager.
    *
-   * @var \Drupal\Core\Layout\LayoutPluginManagerInterface
+   * @var LayoutPluginManagerInterface
    */
   protected $manager;
 
   /**
    * The tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @var SharedTempStoreFactory
    */
   protected $tempstore;
 
@@ -40,9 +41,9 @@ class LayoutPluginSelector extends FormBase {
   /**
    * LayoutPluginSelector constructor.
    *
-   * @param \Drupal\Core\Layout\LayoutPluginManagerInterface $manager
+   * @param LayoutPluginManagerInterface $manager
    *   The layout plugin manager.
-   * @param \Drupal\Core\TempStore\SharedTempStoreFactory $tempstore
+   * @param SharedTempStoreFactory $tempstore
    *   The tempstore factory.
    */
   public function __construct(LayoutPluginManagerInterface $manager, SharedTempStoreFactory $tempstore) {
@@ -105,7 +106,7 @@ class LayoutPluginSelector extends FormBase {
       ];
       $variant_plugin->setLayout($form_state->getValue('layout'), $form_state->getValue('layout_settings') ?: []);
 
-      /** @var \Drupal\ctools\Wizard\EntityFormWizardInterface $wizard */
+      /** @var EntityFormWizardInterface $wizard */
       $wizard = $form_state->getFormObject();
       $next_op = $wizard->getNextOp();
       $form_state->setValue('op', $next_op);
diff --git a/src/Form/PanelsAddBlockForm.php b/src/Form/PanelsAddBlockForm.php
index f4cc8c7..b028e7b 100644
--- a/src/Form/PanelsAddBlockForm.php
+++ b/src/Form/PanelsAddBlockForm.php
@@ -16,16 +16,16 @@ class PanelsAddBlockForm extends PanelsBlockConfigureFormBase {
   /**
    * The block plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $blockManager;
 
   /**
    * PanelsAddBlockForm constructor.
    *
-   * @param \Drupal\Core\TempStore\SharedTempStoreFactory $tempstore
+   * @param SharedTempStoreFactory $tempstore
    *   The tempstore factory.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $block_manager
+   * @param PluginManagerInterface $block_manager
    *   The block plugin manager.
    */
   public function __construct(SharedTempStoreFactory $tempstore, PluginManagerInterface $block_manager) {
diff --git a/src/Form/PanelsBlockConfigureFormBase.php b/src/Form/PanelsBlockConfigureFormBase.php
index 57e7400..1e946b8 100644
--- a/src/Form/PanelsBlockConfigureFormBase.php
+++ b/src/Form/PanelsBlockConfigureFormBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\panels\Form;
 
+use Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant;
+use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormState;
 use Drupal\Core\Form\FormStateInterface;
@@ -22,7 +24,7 @@ abstract class PanelsBlockConfigureFormBase extends FormBase {
   /**
    * Tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @var SharedTempStoreFactory
    */
   protected $tempstore;
 
@@ -36,21 +38,21 @@ abstract class PanelsBlockConfigureFormBase extends FormBase {
   /**
    * The variant plugin.
    *
-   * @var \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant
+   * @var PanelsDisplayVariant
    */
   protected $variantPlugin;
 
   /**
    * The plugin being configured.
    *
-   * @var \Drupal\Core\Block\BlockPluginInterface
+   * @var BlockPluginInterface
    */
   protected $block;
 
   /**
    * Constructs a new VariantPluginConfigureBlockFormBase.
    *
-   * @param \Drupal\Core\TempStore\SharedTempStoreFactory $tempstore
+   * @param SharedTempStoreFactory $tempstore
    *   The tempstore factory.
    */
   public function __construct(SharedTempStoreFactory $tempstore) {
@@ -78,7 +80,7 @@ abstract class PanelsBlockConfigureFormBase extends FormBase {
   /**
    * Get the tempstore.
    *
-   * @return \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @return SharedTempStoreFactory
    */
   protected function getTempstore() {
     return $this->tempstore->get($this->getTempstoreId());
@@ -90,7 +92,7 @@ abstract class PanelsBlockConfigureFormBase extends FormBase {
    * @param string $block_id
    *   Either a block ID, or the plugin ID used to create a new block.
    *
-   * @return \Drupal\Core\Block\BlockPluginInterface
+   * @return BlockPluginInterface
    *   The block plugin.
    */
   abstract protected function prepareBlock($block_id);
@@ -191,7 +193,7 @@ abstract class PanelsBlockConfigureFormBase extends FormBase {
   /**
    * Gets the variant plugin for this page variant entity.
    *
-   * @return \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant
+   * @return PanelsDisplayVariant
    */
   protected function getVariantPlugin() {
     return $this->variantPlugin;
diff --git a/src/Form/PanelsContentForm.php b/src/Form/PanelsContentForm.php
index 6799cd0..bf042cd 100644
--- a/src/Form/PanelsContentForm.php
+++ b/src/Form/PanelsContentForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\panels\Form;
 
+use Drupal\Core\Extension\ModuleHandler;
+use Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant;
+use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -19,7 +22,7 @@ class PanelsContentForm extends FormBase {
   /**
    * Tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory $tempstore
+   * @var SharedTempStoreFactory $tempstore
    */
   protected $tempstore;
 
@@ -33,7 +36,7 @@ class PanelsContentForm extends FormBase {
   /**
    * ModuleHandler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    *   ModuleHandler.
    */
   protected $moduleHandler;
@@ -41,9 +44,9 @@ class PanelsContentForm extends FormBase {
   /**
    * Constructs a new VariantPluginContentForm.
    *
-   * @param \Drupal\Core\TempStore\SharedTempStoreFactory $tempstore
+   * @param SharedTempStoreFactory $tempstore
    *   The tempstore factory.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
    */
   public function __construct(SharedTempStoreFactory $tempstore, ModuleHandlerInterface $moduleHandler) {
@@ -73,7 +76,7 @@ class PanelsContentForm extends FormBase {
   /**
    * Get the tempstore.
    *
-   * @return \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @return SharedTempStoreFactory
    */
   protected function getTempstore() {
     return $this->tempstore->get($this->getTempstoreId());
@@ -93,7 +96,7 @@ class PanelsContentForm extends FormBase {
     $form['#attached']['library'][] = 'block/drupal.block';
     $this->tempstore_id = $form_state->getFormObject()->getTempstoreId();
     $cached_values = $form_state->getTemporaryValue('wizard');
-    /** @var \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $variant_plugin */
+    /** @var PanelsDisplayVariant $variant_plugin */
     $variant_plugin = $cached_values['plugin'];
     // Allow to configure the page title, even when adding a new display.
     // Default to the page label in that case.
@@ -195,7 +198,7 @@ class PanelsContentForm extends FormBase {
           ],
         ];
 
-        /** @var \Drupal\Core\Block\BlockPluginInterface[] $blocks */
+        /** @var BlockPluginInterface[] $blocks */
         foreach ($blocks as $block_id => $block) {
           $row = [
             '#attributes' => [
diff --git a/src/Form/PanelsDeleteBlockForm.php b/src/Form/PanelsDeleteBlockForm.php
index f45adf4..fa6ce7e 100644
--- a/src/Form/PanelsDeleteBlockForm.php
+++ b/src/Form/PanelsDeleteBlockForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\panels\Form;
 
+use Drupal\ctools\Plugin\BlockVariantInterface;
+use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\panels\CachedValuesGetterTrait;
@@ -18,7 +20,7 @@ class PanelsDeleteBlockForm extends ConfirmFormBase {
   /**
    * The tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory $tempstore
+   * @var SharedTempStoreFactory $tempstore
    */
   protected $tempstore;
 
@@ -30,21 +32,21 @@ class PanelsDeleteBlockForm extends ConfirmFormBase {
   protected $tempstore_id;
 
   /**
-   * @var \Drupal\ctools\Plugin\BlockVariantInterface
+   * @var BlockVariantInterface
    */
   protected $plugin;
 
   /**
    * The plugin being configured.
    *
-   * @var \Drupal\Core\Block\BlockPluginInterface
+   * @var BlockPluginInterface
    */
   protected $block;
 
   /**
    * PanelsDeleteBlockForm constructor.
    *
-   * @param \Drupal\Core\TempStore\SharedTempStoreFactory $tempstore
+   * @param SharedTempStoreFactory $tempstore
    *   The tempstore factory.
    */
   public function __construct(SharedTempStoreFactory $tempstore) {
diff --git a/src/PanelsDisplayManager.php b/src/PanelsDisplayManager.php
index 0fd1899..1163a10 100644
--- a/src/PanelsDisplayManager.php
+++ b/src/PanelsDisplayManager.php
@@ -17,17 +17,17 @@ class PanelsDisplayManager implements PanelsDisplayManagerInterface {
   }
 
   /**
-   * @var \Drupal\Core\Display\VariantManager
+   * @var VariantManager
    */
   protected $variantManager;
 
   /**
-   * @var \Drupal\Core\Config\TypedConfigManagerInterface
+   * @var TypedConfigManagerInterface
    */
   protected $typedConfigManager;
 
   /**
-   * @param \Drupal\Core\Display\VariantManager $variant_manager
+   * @param VariantManager $variant_manager
    */
   public function __construct(VariantManager $variant_manager, TypedConfigManagerInterface $typed_config_manager) {
     $this->variantManager = $variant_manager;
diff --git a/src/PanelsDisplayManagerInterface.php b/src/PanelsDisplayManagerInterface.php
index ac5951e..b244c15 100644
--- a/src/PanelsDisplayManagerInterface.php
+++ b/src/PanelsDisplayManagerInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\panels;
 
+use Drupal\Core\Layout\LayoutInterface;
+use Drupal\panels\Plugin\DisplayBuilder\DisplayBuilderInterface;
 use Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant;
 
 /**
@@ -12,14 +14,14 @@ interface PanelsDisplayManagerInterface {
   /**
    * Create a new panels display.
    *
-   * @param string|\Drupal\Core\Layout\LayoutInterface|NULL $layout
+   * @param string|LayoutInterface|NULL $layout
    *   The layout plugin object or plugin id. If omitted, the default Panels
    *   layout will be used.
-   * @param string|\Drupal\panels\Plugin\DisplayBuilder\DisplayBuilderInterface|NULL $builder
+   * @param string|DisplayBuilderInterface|NULL $builder
    *   The builder object or plugin id. If omitted, the default Panels builder
    *   will be used.
    *
-   * @return \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant
+   * @return PanelsDisplayVariant
    *
    * @throws \Exception
    *   If $layout or $builder are of an invalid type.
@@ -34,14 +36,14 @@ interface PanelsDisplayManagerInterface {
    * @param bool $validate
    *   Whether or not to validate against the configuration again the schema.
    *
-   * @return \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant
+   * @return PanelsDisplayVariant
    */
   public function importDisplay(array $config, $validate = TRUE);
 
   /**
    * Export configuration from a panels display.
    *
-   * @param \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $display
+   * @param PanelsDisplayVariant $display
    *   The panels display.
    *
    * @return array
diff --git a/src/PanelsPatternManager.php b/src/PanelsPatternManager.php
index e7b7e51..c9db9a3 100644
--- a/src/PanelsPatternManager.php
+++ b/src/PanelsPatternManager.php
@@ -16,9 +16,9 @@ class PanelsPatternManager extends DefaultPluginManager {
    *
    * @param \Traversable $namespaces
    *   The namespaces to search for plugins.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache backend.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/PanelsVariantEvent.php b/src/PanelsVariantEvent.php
index 104f803..b878424 100644
--- a/src/PanelsVariantEvent.php
+++ b/src/PanelsVariantEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\panels;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Event object for events relating to Panels display variants.
@@ -13,14 +13,14 @@ class PanelsVariantEvent extends Event {
   /**
    * The Panels display variant.
    *
-   * @var \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant
+   * @var PanelsDisplayVariant
    */
   protected $variant;
 
   /**
    * PanelsVariantEvent constructor.
    *
-   * @param \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $variant
+   * @param PanelsDisplayVariant $variant
    *   The Panels display variant.
    */
   public function __construct(PanelsDisplayVariant $variant) {
@@ -30,7 +30,7 @@ class PanelsVariantEvent extends Event {
   /**
    * Returns the Panels display variant that triggered the event.
    *
-   * @return \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant
+   * @return PanelsDisplayVariant
    *   The Panels display variant.
    */
   public function getVariant() {
diff --git a/src/Plugin/DisplayBuilder/DisplayBuilderManager.php b/src/Plugin/DisplayBuilder/DisplayBuilderManager.php
index 38ec2c3..7e359f1 100644
--- a/src/Plugin/DisplayBuilder/DisplayBuilderManager.php
+++ b/src/Plugin/DisplayBuilder/DisplayBuilderManager.php
@@ -18,9 +18,9 @@ class DisplayBuilderManager extends DefaultPluginManager implements DisplayBuild
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/DisplayBuilder/StandardDisplayBuilder.php b/src/Plugin/DisplayBuilder/StandardDisplayBuilder.php
index 20fbb61..6b259ff 100644
--- a/src/Plugin/DisplayBuilder/StandardDisplayBuilder.php
+++ b/src/Plugin/DisplayBuilder/StandardDisplayBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\panels\Plugin\DisplayBuilder;
 
+use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Cache\CacheableMetadata;
@@ -32,21 +33,21 @@ class StandardDisplayBuilder extends DisplayBuilderBase implements PluginWizardI
   /**
    * The context handler.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   * @var ContextHandlerInterface
    */
   protected $contextHandler;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
 
   /**
     * The module handler.
     *
-    * @var \Drupal\Core\Extension\ModuleHandlerInterface
+    * @var ModuleHandlerInterface
     */
    protected $moduleHandler;
 
@@ -59,11 +60,11 @@ class StandardDisplayBuilder extends DisplayBuilderBase implements PluginWizardI
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Plugin\Context\ContextHandlerInterface $context_handler
+   * @param ContextHandlerInterface $context_handler
    *   The context handler.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ContextHandlerInterface $context_handler, AccountInterface $account, ModuleHandlerInterface $module_handler) {
@@ -111,7 +112,7 @@ class StandardDisplayBuilder extends DisplayBuilderBase implements PluginWizardI
       $build[$region]['#prefix'] = '<div class="' . $region_name . '">';
       $build[$region]['#suffix'] = '</div>';
 
-      /** @var \Drupal\Core\Block\BlockPluginInterface[] $blocks */
+      /** @var BlockPluginInterface[] $blocks */
       $weight = 0;
       foreach ($blocks as $block_id => $block) {
         if ($block instanceof ContextAwarePluginInterface) {
diff --git a/src/Plugin/DisplayVariant/PanelsDisplayVariant.php b/src/Plugin/DisplayVariant/PanelsDisplayVariant.php
index 08b5ffb..ad717ab 100644
--- a/src/Plugin/DisplayVariant/PanelsDisplayVariant.php
+++ b/src/Plugin/DisplayVariant/PanelsDisplayVariant.php
@@ -39,35 +39,35 @@ class PanelsDisplayVariant extends BlockDisplayVariant implements PluginWizardIn
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The display builder plugin manager.
    *
-   * @var \Drupal\panels\Plugin\DisplayBuilder\DisplayBuilderManagerInterface
+   * @var DisplayBuilderManagerInterface
    */
   protected $builderManager;
 
   /**
    * The display builder plugin.
    *
-   * @var \Drupal\panels\Plugin\DisplayBuilder\DisplayBuilderInterface
+   * @var DisplayBuilderInterface
    */
   protected $builder;
 
   /**
    * The layout plugin manager.
    *
-   * @var \Drupal\Core\Layout\LayoutPluginManagerInterface
+   * @var LayoutPluginManagerInterface
    */
   protected $layoutManager;
 
   /**
    * The layout plugin.
    *
-   * @var \Drupal\Core\Layout\LayoutInterface
+   * @var LayoutInterface
    */
   protected $layout;
 
@@ -80,23 +80,23 @@ class PanelsDisplayVariant extends BlockDisplayVariant implements PluginWizardIn
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Plugin\Context\ContextHandlerInterface $context_handler
+   * @param ContextHandlerInterface $context_handler
    *   The context handler.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid_generator
+   * @param UuidInterface $uuid_generator
    *   The UUID generator.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
-   * @param \Drupal\Core\Block\BlockManager $block_manager
+   * @param BlockManager $block_manager
    *   The block manager.
-   * @param \Drupal\Core\Condition\ConditionManager $condition_manager
+   * @param ConditionManager $condition_manager
    *   The condition manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\panels\Plugin\DisplayBuilder\DisplayBuilderManagerInterface $builder_manager
+   * @param DisplayBuilderManagerInterface $builder_manager
    *   The display builder plugin manager.
-   * @param \Drupal\Core\Layout\LayoutPluginManagerInterface $layout_manager
+   * @param LayoutPluginManagerInterface $layout_manager
    *   The layout plugin manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ContextHandlerInterface $context_handler, AccountInterface $account, UuidInterface $uuid_generator, Token $token, BlockManager $block_manager, ConditionManager $condition_manager, ModuleHandlerInterface $module_handler, DisplayBuilderManagerInterface $builder_manager, LayoutPluginManagerInterface $layout_manager) {
@@ -130,7 +130,7 @@ class PanelsDisplayVariant extends BlockDisplayVariant implements PluginWizardIn
   /**
    * Returns the builder assigned to this display variant.
    *
-   * @return \Drupal\panels\Plugin\DisplayBuilder\DisplayBuilderInterface
+   * @return DisplayBuilderInterface
    *   A display builder plugin instance.
    */
   public function getBuilder() {
@@ -148,7 +148,7 @@ class PanelsDisplayVariant extends BlockDisplayVariant implements PluginWizardIn
   /**
    * Assigns a builder to this display variant.
    *
-   * @param string|\Drupal\panels\Plugin\DisplayBuilder\DisplayBuilderInterface $builder
+   * @param string|DisplayBuilderInterface $builder
    *   The builder object or plugin id.
    *
    * @return $this
@@ -175,7 +175,7 @@ class PanelsDisplayVariant extends BlockDisplayVariant implements PluginWizardIn
   /**
    * Returns instance of the layout plugin used by this page variant.
    *
-   * @return \Drupal\Core\Layout\LayoutInterface
+   * @return LayoutInterface
    *   A layout plugin instance.
    */
   public function getLayout() {
@@ -188,7 +188,7 @@ class PanelsDisplayVariant extends BlockDisplayVariant implements PluginWizardIn
   /**
    * Assigns the layout plugin to this variant.
    *
-   * @param string|\Drupal\Core\Layout\LayoutInterface $layout
+   * @param string|LayoutInterface $layout
    *   The layout plugin object or plugin id.
    * @param array $layout_settings
    *   The layout configuration.
@@ -219,7 +219,7 @@ class PanelsDisplayVariant extends BlockDisplayVariant implements PluginWizardIn
   /**
    * Gets the assigned PanelsPattern or falls back to the default pattern.
    *
-   * @return \Drupal\panels\Plugin\PanelsPattern\PanelsPatternInterface
+   * @return PanelsPatternInterface
    */
   public function getPattern() {
     if (!isset($this->pattern)) {
@@ -410,7 +410,7 @@ class PanelsDisplayVariant extends BlockDisplayVariant implements PluginWizardIn
       'form' => LayoutPluginSelector::class,
     ];
     if (!empty($this->getConfiguration()['layout']) && $cached_values['plugin']->getLayout() instanceof PluginFormInterface) {
-      /** @var \Drupal\Core\Layout\LayoutInterface $layout */
+      /** @var LayoutInterface $layout */
       if (empty($cached_values['layout_change']['new_layout'])) {
         $layout = $cached_values['plugin']->getLayout();
         $class = get_class($layout);
diff --git a/src/Plugin/PanelsPattern/DefaultPattern.php b/src/Plugin/PanelsPattern/DefaultPattern.php
index 5669f9b..b92146c 100644
--- a/src/Plugin/PanelsPattern/DefaultPattern.php
+++ b/src/Plugin/PanelsPattern/DefaultPattern.php
@@ -20,7 +20,7 @@ class DefaultPattern extends PluginBase implements PanelsPatternInterface, Conta
   /**
    * The context mapper.
    *
-   * @var \Drupal\ctools\ContextMapperInterface
+   * @var ContextMapperInterface
    */
   protected $contextMapper;
 
@@ -40,7 +40,7 @@ class DefaultPattern extends PluginBase implements PanelsPatternInterface, Conta
    *   The plugin id.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\ctools\ContextMapperInterface $context_mapper
+   * @param ContextMapperInterface $context_mapper
    *   The context mapper.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ContextMapperInterface $context_mapper) {
diff --git a/src/Plugin/PanelsPattern/PanelsPatternInterface.php b/src/Plugin/PanelsPattern/PanelsPatternInterface.php
index 2a272a6..6f3f8ca 100644
--- a/src/Plugin/PanelsPattern/PanelsPatternInterface.php
+++ b/src/Plugin/PanelsPattern/PanelsPatternInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\panels\Plugin\PanelsPattern;
 
+use Drupal\Core\Plugin\Context\ContextInterface;
+use Drupal\Core\Url;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\TempStore\SharedTempStoreFactory;
 
@@ -22,14 +24,14 @@ interface PanelsPatternInterface extends PluginInspectionInterface {
   /**
    * Gets the array of default contexts for this panels pattern.
    *
-   * @param \Drupal\Core\TempStore\SharedTempStoreFactory $tempstore
+   * @param SharedTempStoreFactory $tempstore
    *   The tempstore factory object.
    * @param string $tempstore_id
    *   The tempstore identifier.
    * @param string $machine_name
    *   The tempstore key.
    *
-   * @return \Drupal\Core\Plugin\Context\ContextInterface[]
+   * @return ContextInterface[]
    */
   public function getDefaultContexts(SharedTempStoreFactory $tempstore, $tempstore_id, $machine_name);
 
@@ -45,7 +47,7 @@ interface PanelsPatternInterface extends PluginInspectionInterface {
    * @param string $destination
    *   The destination to which to redirect after submission.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   public function getBlockListUrl($tempstore_id, $machine_name, $region = NULL, $destination = NULL);
 
@@ -63,7 +65,7 @@ interface PanelsPatternInterface extends PluginInspectionInterface {
    * @param string $destination
    *   The destination to which to redirect after submission.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   public function getBlockAddUrl($tempstore_id, $machine_name, $block_id, $region = NULL, $destination = NULL);
 
@@ -79,7 +81,7 @@ interface PanelsPatternInterface extends PluginInspectionInterface {
    * @param string $destination
    *   The destination to which to redirect after submission.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   public function getBlockEditUrl($tempstore_id, $machine_name, $block_id, $destination = NULL);
 
@@ -95,7 +97,7 @@ interface PanelsPatternInterface extends PluginInspectionInterface {
    * @param string $destination
    *   The destination to which to redirect after submission.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   public function getBlockDeleteUrl($tempstore_id, $machine_name, $block_id, $destination = NULL);
 
diff --git a/src/Plugin/PanelsStorage/PageManagerPanelsStorage.php b/src/Plugin/PanelsStorage/PageManagerPanelsStorage.php
index 3e451ef..44a4401 100644
--- a/src/Plugin/PanelsStorage/PageManagerPanelsStorage.php
+++ b/src/Plugin/PanelsStorage/PageManagerPanelsStorage.php
@@ -18,7 +18,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class PageManagerPanelsStorage extends PanelsStorageBase implements ContainerFactoryPluginInterface {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -31,7 +31,7 @@ class PageManagerPanelsStorage extends PanelsStorageBase implements ContainerFac
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Storage/PanelsStorageAccess.php b/src/Storage/PanelsStorageAccess.php
index bef9e22..1e2a265 100644
--- a/src/Storage/PanelsStorageAccess.php
+++ b/src/Storage/PanelsStorageAccess.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\panels\Storage;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Routing\Access\AccessInterface as RoutingAccessInterface;
@@ -15,14 +16,14 @@ class PanelsStorageAccess implements RoutingAccessInterface {
   /**
    * The Panels storage manager.
    *
-   * @var \Drupal\panels\Storage\PanelsStorageManagerInterface
+   * @var PanelsStorageManagerInterface
    */
   protected $panelsStorage;
 
   /**
    * Constructs a PanelsStorageAccess.
    *
-   * @param \Drupal\panels\Storage\PanelsStorageManagerInterface $panels_storage
+   * @param PanelsStorageManagerInterface $panels_storage
    *   The Panels storage manager.
    */
   public function __construct(PanelsStorageManagerInterface $panels_storage) {
@@ -32,14 +33,14 @@ class PanelsStorageAccess implements RoutingAccessInterface {
   /**
    * Checks if the user has access to underlying storage for a Panels display.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check against.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The parametrized route.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(Route $route, RouteMatchInterface $route_match, AccountInterface $account) {
diff --git a/src/Storage/PanelsStorageInterface.php b/src/Storage/PanelsStorageInterface.php
index 04c9be8..81cdf8a 100644
--- a/src/Storage/PanelsStorageInterface.php
+++ b/src/Storage/PanelsStorageInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\panels\Storage;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant;
 
@@ -16,7 +17,7 @@ interface PanelsStorageInterface {
    * @param string $id
    *   The id for the Panels display within this storage plugin.
    *
-   * @return \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant|NULL
+   * @return PanelsDisplayVariant|NULL
    *   The Panels display if one exists with this id; NULL otherwise.
    */
   public function load($id);
@@ -24,7 +25,7 @@ interface PanelsStorageInterface {
   /**
    * Saves a Panels display.
    *
-   * @param \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $panels_display
+   * @param PanelsDisplayVariant $panels_display
    *   The Panels display to save. $panels_display->getStorageId() must return
    *   the display's id as known to this storage plugin.
    *
@@ -42,10 +43,10 @@ interface PanelsStorageInterface {
    *   The operation to perform (create, read, update, delete, change layout).
    *   If the operation is 'change layout', implementing classes should
    *   implicitly check the 'update' permission as well.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user to check access for.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result. If there is no such Panels display then deny access.
    */
   public function access($id, $op, AccountInterface $account);
diff --git a/src/Storage/PanelsStorageManager.php b/src/Storage/PanelsStorageManager.php
index 8ddaa71..afae278 100644
--- a/src/Storage/PanelsStorageManager.php
+++ b/src/Storage/PanelsStorageManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\panels\Storage;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Plugin\DefaultPluginManager;
@@ -21,14 +22,14 @@ class PanelsStorageManager extends DefaultPluginManager implements PanelsStorage
   /**
    * The current user service.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
@@ -38,13 +39,13 @@ class PanelsStorageManager extends DefaultPluginManager implements PanelsStorage
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, AccountProxyInterface $current_user, EventDispatcherInterface $event_dispatcher) {
@@ -60,7 +61,7 @@ class PanelsStorageManager extends DefaultPluginManager implements PanelsStorage
   /**
    * An associative array of Panels storages services keyed by storage type.
    *
-   * @var \Drupal\panels\Storage\PanelsStorageInterface[]
+   * @var PanelsStorageInterface[]
    */
   protected $storage = [];
 
@@ -70,10 +71,10 @@ class PanelsStorageManager extends DefaultPluginManager implements PanelsStorage
    * @param string $storage_type
    *   The storage type used by the storage plugin.
    *
-   * @return \Drupal\panels\Storage\PanelsStorageInterface
+   * @return PanelsStorageInterface
    *   The Panels storage plugin with the given storage type.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If there is no Panels storage plugin with the given storage type.
    */
   protected function getStorage($storage_type) {
@@ -98,10 +99,10 @@ class PanelsStorageManager extends DefaultPluginManager implements PanelsStorage
     // Allow event subscribers to react to the variant being saved.
     $event = new PanelsVariantEvent($panels_display);
 
-    $this->eventDispatcher->dispatch(PanelsEvents::VARIANT_PRE_SAVE, $event);
+    $this->eventDispatcher->dispatch($event, PanelsEvents::VARIANT_PRE_SAVE);
     $storage = $this->getStorage($panels_display->getStorageType());
     $storage->save($panels_display);
-    $this->eventDispatcher->dispatch(PanelsEvents::VARIANT_POST_SAVE, $event);
+    $this->eventDispatcher->dispatch($event, PanelsEvents::VARIANT_POST_SAVE);
   }
 
   /**
diff --git a/src/Storage/PanelsStorageManagerInterface.php b/src/Storage/PanelsStorageManagerInterface.php
index 5a65b7c..3bd3ad5 100644
--- a/src/Storage/PanelsStorageManagerInterface.php
+++ b/src/Storage/PanelsStorageManagerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\panels\Storage;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant;
 
@@ -30,7 +31,7 @@ interface PanelsStorageManagerInterface {
    * @param string $id
    *   The id within the storage plugin for the requested Panels display.
    *
-   * @return \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant|NULL
+   * @return PanelsDisplayVariant|NULL
    *   The Panels display if one exists with this id; NULL otherwise.
    */
   public function load($storage_type, $id);
@@ -38,7 +39,7 @@ interface PanelsStorageManagerInterface {
   /**
    * Saves a Panels display.
    *
-   * @param \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $panels_display
+   * @param PanelsDisplayVariant $panels_display
    *   The Panels display to save. $panels_display->getStorageType() and
    *   $panels_display->getStorageId() must return the storage type and id as
    *   known to the storage plugin.
@@ -59,11 +60,11 @@ interface PanelsStorageManagerInterface {
    *   The id within the storage plugin for the requested Panels display.
    * @param string $op
    *   The operation to perform (ie. create, read, update, delete).
-   * @param \Drupal\Core\Session\AccountInterface|NULL $account
+   * @param AccountInterface|NULL $account
    *   The user to check access for. If omitted, it'll check the curerntly
    *   logged in user.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result. If there is no such Panels display then deny access.
    */
   public function access($storage_type, $id, $op, AccountInterface $account = NULL);
diff --git a/tests/src/Functional/PageManagerPanelsStorageIntegrationTest.php b/tests/src/Functional/PageManagerPanelsStorageIntegrationTest.php
index 08a6374..3b82c40 100644
--- a/tests/src/Functional/PageManagerPanelsStorageIntegrationTest.php
+++ b/tests/src/Functional/PageManagerPanelsStorageIntegrationTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\panels\Functional;
 
+use Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant;
 use Drupal\page_manager\Entity\PageVariant;
 use Drupal\Tests\BrowserTestBase;
 
@@ -25,7 +26,7 @@ class PageManagerPanelsStorageIntegrationTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->drupalPlaceBlock('local_tasks_block');
@@ -51,20 +52,20 @@ class PageManagerPanelsStorageIntegrationTest extends BrowserTestBase {
       'path' => 'testing',
       'variant_plugin_id' => 'panels_variant',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');
 
     // Add a Panels variant which uses the IPE.
     $edit = [
       // This option won't be present at all if our integration isn't working!
       'variant_settings[builder]' => 'ipe',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');
 
     // Choose a layout.
     $edit = [
       'layout' => 'layout_twocol',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');
 
     // In Drupal 8.8 and later, the layout may have settings of its own. If
     // that's the case, submit the layout settings form without any changes.
@@ -74,16 +75,16 @@ class PageManagerPanelsStorageIntegrationTest extends BrowserTestBase {
     }
 
     // Finish without adding any blocks.
-    $this->drupalPostForm(NULL, [], 'Finish');
+    $this->submitForm([], 'Finish');
 
     /** @var \Drupal\page_manager\PageVariantInterface $page_variant */
     $page_variant = PageVariant::load('foo-panels_variant-0');
-    /** @var \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $panels_display */
+    /** @var PanelsDisplayVariant $panels_display */
     $panels_display = $page_variant->getVariantPlugin();
 
     // Make sure the storage type and id were set to the right value.
-    $this->assertEqual($panels_display->getStorageType(), 'page_manager');
-    $this->assertEqual($panels_display->getStorageId(), 'foo-panels_variant-0');
+    $this->assertEquals($panels_display->getStorageType(), 'page_manager');
+    $this->assertEquals($panels_display->getStorageId(), 'foo-panels_variant-0');
   }
 
 }
diff --git a/tests/src/Functional/PanelsConfigSchemaTest.php b/tests/src/Functional/PanelsConfigSchemaTest.php
index 263dd03..650e9ae 100644
--- a/tests/src/Functional/PanelsConfigSchemaTest.php
+++ b/tests/src/Functional/PanelsConfigSchemaTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\panels\Functional;
 
+use Drupal\panels\PanelsDisplayManagerInterface;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -22,14 +23,14 @@ class PanelsConfigSchemaTest extends BrowserTestBase {
   public static $modules = ['panels', 'block', 'node', 'user'];
 
   /**
-   * @var \Drupal\panels\PanelsDisplayManagerInterface
+   * @var PanelsDisplayManagerInterface
    */
   protected $panelsManager;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->panelsManager = \Drupal::service('panels.display_manager');
@@ -55,7 +56,7 @@ class PanelsConfigSchemaTest extends BrowserTestBase {
     // This will throw an exception if it doesn't validate.
     $new_panels_display = $this->panelsManager->importDisplay($config, TRUE);
 
-    $this->assertEqual($panels_display->getConfiguration(), $new_panels_display->getConfiguration());
+    $this->assertEquals($panels_display->getConfiguration(), $new_panels_display->getConfiguration());
   }
 
 }
diff --git a/tests/src/Functional/PanelsTest.php b/tests/src/Functional/PanelsTest.php
index e43efb5..d6f9523 100644
--- a/tests/src/Functional/PanelsTest.php
+++ b/tests/src/Functional/PanelsTest.php
@@ -30,7 +30,7 @@ class PanelsTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->drupalPlaceBlock('local_tasks_block');
@@ -56,26 +56,26 @@ class PanelsTest extends BrowserTestBase {
       'path' => 'testing',
       'variant_plugin_id' => 'panels_variant',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');
 
     // Add variant with a layout that has settings.
     $edit = [
       'page_variant_label' => 'Default',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');
 
     // Choose a layout.
     $edit = [
       'layout' => 'layout_example_test',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');
 
     // Update the layout's settings.
-    $this->assertFieldByName('layout_settings_wrapper[layout_settings][setting_1]', 'Default');
+    $this->assertSession()->fieldValueEquals('layout_settings_wrapper[layout_settings][setting_1]', 'Default');
     $edit = [
       'layout_settings_wrapper[layout_settings][setting_1]' => 'Abracadabra',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');
 
     // Add a block.
     $this->clickLink('Add new block');
@@ -83,16 +83,25 @@ class PanelsTest extends BrowserTestBase {
     $edit = [
       'region' => 'top',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Add block');
+    $this->submitForm($edit, 'Add block');
 
     // Finish the page add wizard.
-    $this->drupalPostForm(NULL, [], 'Finish');
+    $this->submitForm([], 'Finish');
 
     // View the page and make sure the setting is present.
     $this->drupalGet('testing');
-    $this->assertText('Blah:');
-    $this->assertText('Abracadabra');
-    $this->assertText('Powered by Drupal');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Blah:');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Abracadabra');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Powered by Drupal');
   }
 
   /**
@@ -112,19 +121,19 @@ class PanelsTest extends BrowserTestBase {
       'path' => 'testing',
       'variant_plugin_id' => 'panels_variant',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');
 
     // Use default variant settings.
     $edit = [
       'page_variant_label' => 'Default',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');
 
     // Choose a simple layout.
     $edit = [
       'layout' => 'layout_onecol',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');
 
     // In Drupal 8.8 and later, the layout may have settings of its own. If
     // that's the case, submit the layout settings form without any changes.
@@ -137,13 +146,13 @@ class PanelsTest extends BrowserTestBase {
     $edit = [
       'page_title' => '[user:name]',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Finish');
+    $this->submitForm($edit, 'Finish');
 
     // View the page and make sure the page title is valid.
     $this->drupalGet('testing');
     // We expect "'" to be escaped only once, which is why we're doing a raw
     // assertion here.
-    $this->assertRaw('<h1 class="page-title">My User&#039;s Name</h1>');
+    $this->assertSession()->responseContains('<h1 class="page-title">My User&#039;s Name</h1>');
   }
 
 }
diff --git a/tests/src/Kernel/LayoutAlterHookTest.php b/tests/src/Kernel/LayoutAlterHookTest.php
index 9b0e90d..a6484fa 100644
--- a/tests/src/Kernel/LayoutAlterHookTest.php
+++ b/tests/src/Kernel/LayoutAlterHookTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\panels\Kernel;
 
+use Drupal\Core\Layout\LayoutDefinition;
 use Drupal\KernelTests\KernelTestBase;
 
 /**
@@ -20,7 +21,7 @@ class LayoutAlterHookTest extends KernelTestBase {
    * Tests that Panels correctly modifies layout icons.
    */
   public function testIconPath() {
-    /** @var \Drupal\Core\Layout\LayoutDefinition $layout */
+    /** @var LayoutDefinition $layout */
     $layout = $this->container->get('plugin.manager.core.layout')
       ->getDefinition('layout_onecol');
 
diff --git a/tests/src/Kernel/PanelsStorageManagerTest.php b/tests/src/Kernel/PanelsStorageManagerTest.php
index 339100d..489cf72 100644
--- a/tests/src/Kernel/PanelsStorageManagerTest.php
+++ b/tests/src/Kernel/PanelsStorageManagerTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\panels\Kernel;
 
+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\page_manager\Entity\Page;
 use Drupal\page_manager\Entity\PageVariant;
@@ -23,7 +24,7 @@ class PanelsStorageManagerTest extends KernelTestBase {
    * Tests that events are fired by the storage manager.
    */
   public function testEvents() {
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = $this->container->get('event_dispatcher');
 
     $event_dispatcher->addListener(PanelsEvents::VARIANT_PRE_SAVE, function (PanelsVariantEvent $event) {
diff --git a/tests/src/Unit/PanelsDisplayVariantTest.php b/tests/src/Unit/PanelsDisplayVariantTest.php
index d41ab27..9580776 100644
--- a/tests/src/Unit/PanelsDisplayVariantTest.php
+++ b/tests/src/Unit/PanelsDisplayVariantTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\panels\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\Uuid\UuidInterface;
 use Drupal\Core\Block\BlockManager;
 use Drupal\Core\Condition\ConditionManager;
@@ -24,62 +25,63 @@ use Prophecy\Argument;
  */
 class PanelsDisplayVariantTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
 
   /**
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   * @var ContextHandlerInterface
    */
   protected $contextHandler;
 
   /**
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuidGenerator;
 
   /**
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
   /**
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $conditionManager;
 
   /**
-   * @var \Drupal\Core\Block\BlockManager
+   * @var BlockManager
    */
   protected $blockManager;
 
   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
-   * @var \Drupal\panels\Plugin\DisplayBuilder\DisplayBuilderManagerInterface
+   * @var DisplayBuilderManagerInterface
    */
   protected $builderManager;
 
   /**
-   * @var \Drupal\Core\Layout\LayoutPluginManagerInterface
+   * @var LayoutPluginManagerInterface
    */
   protected $layoutManager;
 
   /**
-   * @var \Drupal\Core\Layout\LayoutInterface
+   * @var LayoutInterface
    */
   protected $layout;
 
   /**
-   * @var \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant
+   * @var PanelsDisplayVariant
    */
   protected $variant;
 
-  public function setUp() {
+  public function setUp(): void {
     $this->account = $this->prophesize(AccountInterface::class);
     $this->contextHandler = $this->prophesize(ContextHandlerInterface::class);
     $this->uuidGenerator = $this->prophesize(UuidInterface::class);
diff --git a/tests/src/Unit/PanelsStorageTest.php b/tests/src/Unit/PanelsStorageTest.php
index c84163d..c227a14 100644
--- a/tests/src/Unit/PanelsStorageTest.php
+++ b/tests/src/Unit/PanelsStorageTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\panels\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ProphecyInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -22,35 +24,36 @@ use Prophecy\Argument;
  */
 class PanelsStorageTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
-   * @var \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant|\Prophecy\Prophecy\ProphecyInterface
+   * @var PanelsDisplayVariant|ProphecyInterface
    */
   protected $panelsDisplay;
 
   /**
-   * @var \Drupal\page_manager\PageVariantInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var \Drupal\page_manager\PageVariantInterface|ProphecyInterface
    */
   protected $pageVariant;
 
   /**
-   * @var \Drupal\page_manager\PageVariantInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var \Drupal\page_manager\PageVariantInterface|ProphecyInterface
    */
   protected $pageVariantNotPanels;
 
   /**
-   * @var \Drupal\Core\Entity\EntityStorageInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var EntityStorageInterface|ProphecyInterface
    */
   protected $storage;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var EntityTypeManagerInterface|ProphecyInterface
    */
   protected $entityTypeManager;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->panelsDisplay = $this->prophesize(PanelsDisplayVariant::class);
diff --git a/tests/src/Unit/StandardDisplayBuilderTest.php b/tests/src/Unit/StandardDisplayBuilderTest.php
index 4f703f1..28897a5 100644
--- a/tests/src/Unit/StandardDisplayBuilderTest.php
+++ b/tests/src/Unit/StandardDisplayBuilderTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\panels\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Plugin\Context\ContextHandlerInterface;
@@ -17,15 +18,16 @@ use Prophecy\Argument;
  */
 class StandardDisplayBuilderTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
-   * @var \Drupal\panels\Plugin\DisplayBuilder\StandardDisplayBuilder
+   * @var StandardDisplayBuilder
    */
   protected $builder;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     $context_handler = $this->prophesize(ContextHandlerInterface::class)
       ->reveal();
     $account = $this->prophesize(AccountInterface::class)
