modules/contrib/entity_ui/entity_ui.api.php
modules/contrib/entity_ui/entity_ui.module
modules/contrib/entity_ui/entity_ui.tokens.inc
modules/contrib/entity_ui/src/Annotation/EntityTabContent.php
modules/contrib/entity_ui/src/Breadcrumb/AdminBreadcrumbBuilder.php
modules/contrib/entity_ui/src/Controller/EntityTabAddPage.php
modules/contrib/entity_ui/src/Controller/EntityTabController.php
modules/contrib/entity_ui/src/Entity/EntityTab.php
modules/contrib/entity_ui/src/Entity/EntityTabInterface.php
modules/contrib/entity_ui/src/EntityHandler/BasicFieldUI.php
modules/contrib/entity_ui/src/EntityHandler/BundleEntityCollection.php
modules/contrib/entity_ui/src/EntityHandler/EntityTabListBuilder.php
modules/contrib/entity_ui/src/EntityHandler/EntityUIAdminBase.php
modules/contrib/entity_ui/src/EntityHandler/EntityUIAdminInterface.php
modules/contrib/entity_ui/src/EntityHandler/FieldUIWithoutBundleEntityProxy.php
modules/contrib/entity_ui/src/EntityHandler/PlainBundlesEntityUIAdmin.php
modules/contrib/entity_ui/src/EntityTabsLoader.php
modules/contrib/entity_ui/src/EntityUiPermissions.php
modules/contrib/entity_ui/src/Form/EntityTabDeleteForm.php
modules/contrib/entity_ui/src/Form/EntityTabForm.php
modules/contrib/entity_ui/src/Plugin/Derivative/ActionsConfigurableActionTabContentDeriver.php
modules/contrib/entity_ui/src/Plugin/Derivative/EntityLocalTasks.php
modules/contrib/entity_ui/src/Plugin/Derivative/EntityTabsAdminLocalActions.php
modules/contrib/entity_ui/src/Plugin/Derivative/EntityTabsAdminLocalTasks.php
modules/contrib/entity_ui/src/Plugin/EntityTabContent/ActionsConfigurableAction.php
modules/contrib/entity_ui/src/Plugin/EntityTabContent/EntityForm.php
modules/contrib/entity_ui/src/Plugin/EntityTabContent/EntityView.php
modules/contrib/entity_ui/src/Plugin/EntityTabContent/OwnerAssign.php
modules/contrib/entity_ui/src/Plugin/EntityTabContentBase.php
modules/contrib/entity_ui/src/Plugin/EntityTabContentFormBase.php
modules/contrib/entity_ui/src/Plugin/EntityTabContentInterface.php
modules/contrib/entity_ui/src/Plugin/EntityTabContentManager.php
modules/contrib/entity_ui/src/Plugin/EntityTabLazyPluginCollection.php
modules/contrib/entity_ui/src/Routing/AdminRouteProviderSubscriber.php
modules/contrib/entity_ui/src/Routing/EntityTabAdminRouteProvider.php
modules/contrib/entity_ui/src/Routing/TabRouteProvider.php
modules/contrib/entity_ui/src/TargetEntityTypes.php
modules/contrib/entity_ui/tests/src/Functional/AdminUITest.php
modules/contrib/entity_ui/tests/src/Functional/OwnerAssignTabTest.php
modules/contrib/entity_ui/tests/src/Kernel/ActionDerivativesTest.php
modules/contrib/entity_ui/tests/src/Kernel/AdminUIHandlerTest.php

37 files with changes
=====================

1) modules/contrib/entity_ui/tests/src/Kernel/AdminUIHandlerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\field_ui\Kernel;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\entity_ui\EntityHandler\BundleEntityCollection;
+use Drupal\entity_ui\EntityHandler\FieldUIWithoutBundleEntityProxy;
+use Symfony\Component\Routing\Route;
+use Symfony\Component\Routing\RouteCollection;
+use Drupal\entity_ui\EntityHandler\BasicFieldUI;
 use Drupal\KernelTests\KernelTestBase;

 /**
@@ @@
  */
 class AdminUIHandlerTest extends KernelTestBase {

+  use ProphecyTrait;
   /**
    * Modules to enable.
    *
@@ @@
     'entity_ui',
   ];

-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('node');
     $this->installEntitySchema('user');
@@ @@

     $expected_handlers = [
       // Entity type ID => expected handler class.
-      'node' => \Drupal\entity_ui\EntityHandler\BundleEntityCollection::class,
-      'user' => \Drupal\entity_ui\EntityHandler\FieldUIWithoutBundleEntityProxy::class,
-      'taxonomy_term' => \Drupal\entity_ui\EntityHandler\BundleEntityCollection::class,
+      'node' => BundleEntityCollection::class,
+      'user' => FieldUIWithoutBundleEntityProxy::class,
+      'taxonomy_term' => BundleEntityCollection::class,
     ];

     foreach ($expected_handlers as $entity_type_id => $handler_class) {
@@ @@
     $user_entity_type = $entity_type_manager->getDefinition('user');
     $user_handler = $entity_type_manager->getHandler('user', 'entity_ui_admin');

-    $route_prophecy = $this->prophesize(\Symfony\Component\Routing\Route ::CLASS);
+    $route_prophecy = $this->prophesize(Route ::CLASS);
     $route_prophecy->getPath()->willReturn('/admin/config/people/accounts');

-    $route_collection_prophecy = $this->prophesize(\Symfony\Component\Routing\RouteCollection::CLASS);
+    $route_collection_prophecy = $this->prophesize(RouteCollection::CLASS);
     $route_collection_prophecy->get($user_entity_type->get('field_ui_base_route'))
       ->willReturn($route_prophecy->reveal());

@@ @@
     $property->setAccessible(TRUE);
     $real_user_handler = $property->getValue($user_handler);

-    $this->assertEquals(\Drupal\entity_ui\EntityHandler\BasicFieldUI::class, get_class($real_user_handler));
+    $this->assertEquals(BasicFieldUI::class, get_class($real_user_handler));
   }

 }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/entity_ui/tests/src/Kernel/ActionDerivativesTest.php:26

    ---------- begin diff ----------
@@ @@
     'entity_ui',
   ];

-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['node']);
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/entity_ui/tests/src/Functional/OwnerAssignTabTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->nodeStorage = $this->container->get('entity_type.manager')
@@ @@
     $edit = [
       'owner_uid' => $new_owner->getUsername() . ' (' . $new_owner->id() . ')',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Change owner');
+    $this->submitForm($edit, 'Change owner');

     // Reload the node.
     $node = $this->nodeStorage->load($node->id());
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/entity_ui/tests/src/Functional/AdminUITest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create an Article node type.
@@ @@

     // Check the collection page has the expected elements.
     // Check the node type collection tab is shown.
-    $this->assertLinkByHref('admin/structure/types');
+    $this->assertSession()->linkByHrefExists('admin/structure/types');

     // Check the built-in tabs on nodes are shown.
     $this->assertSession()->pageTextContains(t('View'));
@@ @@
     $this->assertSession()->pageTextContains(t('Delete'));

     $this->assertSession()->pageTextContains(t('Add entity tab'));
-    $this->assertLinkByHref('admin/structure/entity_ui/entity_tab/add/node');
+    $this->assertSession()->linkByHrefExists('admin/structure/entity_ui/entity_tab/add/node');

     // Create a new entity tab on nodes.
     $this->clickLink(t('Add entity tab'));
@@ @@
       'content_plugin' => 'entity_view',
       'content_config[view_mode]' => 'default',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Check the new tab is now shown in the collection listing.
     $this->assertSession()->pageTextContains($edit['label']);
-    $this->assertLinkByHref("admin/structure/entity_ui/entity_tab/node.{$edit['id']}/edit");
+    $this->assertSession()->linkByHrefExists("admin/structure/entity_ui/entity_tab/node.{$edit['id']}/edit");


     // todo:
@@ @@

     // Check the collection page has the expected elements.
     // Check the user accounts setings tab is shown.
-    $this->assertLinkByHref('admin/config/people/accounts');
+    $this->assertSession()->linkByHrefExists('admin/config/people/accounts');

     // Check the built-in tabs on users are shown.
     $this->assertSession()->pageTextContains(t('View'));
@@ @@
     $this->assertSession()->pageTextContains(t('Edit'));

     $this->assertSession()->pageTextContains(t('Add entity tab'));
-    $this->assertLinkByHref('admin/structure/entity_ui/entity_tab/add/user');
+    $this->assertSession()->linkByHrefExists('admin/structure/entity_ui/entity_tab/add/user');

     // Create a new entity tab on users.
     $this->clickLink(t('Add entity tab'));
@@ @@
       'content_plugin' => 'entity_view',
       'content_config[view_mode]' => 'default',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Check the new tab is now shown in the collection listing.
     $this->assertSession()->pageTextContains($edit['label']);
-    $this->assertLinkByHref("admin/structure/entity_ui/entity_tab/user.{$edit['id']}/edit");
+    $this->assertSession()->linkByHrefExists("admin/structure/entity_ui/entity_tab/user.{$edit['id']}/edit");


     // todo:
    ----------- end diff -----------

Applied rules:
 * AssertLinkByHrefRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/entity_ui/src/TargetEntityTypes.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new EntityTabsLoader.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Gets entity types which are suitable as entity tab targets.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface[]
+   * @return EntityTypeInterface[]
    *   An array of entity types, keyed by their ID.
    */
   public function getTargetEntityTypes() {
@@ @@
    * This only relies on the given entity type objects, so is safe to be called
    * during the entity type rebuild process.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface[] $entity_types
+   * @param EntityTypeInterface[] $entity_types
    *   An array of entity types, keyed by their ID.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface[]
+   * @return EntityTypeInterface[]
    *   An array of entity types, keyed by their ID.
    */
   public function filterTargetEntityTypes($entity_types) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/entity_ui/src/Routing/TabRouteProvider.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The entity tab loader.
    *
-   * @var \Drupal\entity_ui\EntityTabsLoader
+   * @var EntityTabsLoader
    */
   protected $entityTabLoader;

@@ @@
   /**
    * Constructs a new TabRouteProvider.
    *
-   * @param \Drupal\entity_ui\EntityTabsLoader $entity_tab_loader
+   * @param EntityTabsLoader $entity_tab_loader
    *   The entity tab loader.
    */
   public function __construct(EntityTabsLoader $entity_tab_loader) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/entity_ui/src/Routing/AdminRouteProviderSubscriber.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new EntityRouteProviderSubscriber instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Provides routes on route rebuild time.
    *
-   * @param \Drupal\Core\Routing\RouteBuildEvent $event
+   * @param RouteBuildEvent $event
    *   The route build event.
    */
   public function onDynamicRouteEvent(RouteBuildEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/entity_ui/src/Plugin/EntityTabLazyPluginCollection.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new DefaultSingleLazyPluginCollection object.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $manager
+   * @param PluginManagerInterface $manager
    *   The manager to be used for instantiating plugins.
    * @param string $instance_id
    *   The ID of the plugin instance.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/entity_ui/src/Plugin/EntityTabContentManager.php:19

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/entity_ui/src/Plugin/EntityTabContentInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_ui\Plugin;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Checks access to use the entity tab this plugin is for.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $target_entity
+   * @param EntityInterface $target_entity
    *   The target entity that the entity tab is on.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   (optional) The user session for which to check access, or NULL to check
    *   access for the current user. Defaults to NULL.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(EntityInterface $target_entity, AccountInterface $account = NULL);
@@ @@
   /**
    * Builds the content for the entity tab.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $target_entity
+   * @param EntityInterface $target_entity
    *   The target entity that the entity tab is on.
    *
    * @return
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/entity_ui/src/Plugin/EntityTabContentFormBase.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The form builder service.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface;
+   * @var FormBuilderInterface ;
    */
   protected $formBuilder;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface
    *   The bundle info service.
@@ @@
    *
    * This is a helper method to save having to figure out the build info.
    *
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_state
+   * @param FormBuilderInterface $form_state
    *  The form state.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *  The target entity.
    */
   protected function getTargetEntity(FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/entity_ui/src/Plugin/EntityTabContentBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_ui\Plugin;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Access\AccessResult;
@@ @@
   /**
    * The entity bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface;
+   * @var EntityTypeBundleInfoInterface ;
    */
   protected $bundleInfoService;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface
    *   The bundle info service.
@@ @@
    * For example, a tab that allows a user to publish an entity would deny
    * access here when the entity is already published.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $target_entity
+   * @param EntityInterface $target_entity
    *   The target entity that the entity tab is on.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   protected function hasLogicAccess(EntityInterface $target_entity) {
@@ @@
    * This should check the access based on the permissions defined in
    * $this->getPermissions().
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user session for which to check access.
-   * @param \Drupal\Core\Entity\EntityInterface $target_entity
+   * @param EntityInterface $target_entity
    *   The target entity that the entity tab is on.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   protected function hasPermissionAccess(AccountInterface $account, EntityInterface $target_entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/entity_ui/src/Plugin/EntityTabContent/OwnerAssign.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/entity_ui/src/Plugin/EntityTabContent/EntityView.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity display repository service.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/entity_ui/src/Plugin/EntityTabContent/EntityForm.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * The entity form builder service.
    *
-   * @var \Drupal\Core\Entity\EntityFormBuilderInterface
+   * @var EntityFormBuilderInterface
    */
   protected $entityFormBuilder;

@@ @@
   /**
    * The entity display repository service.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityFormBuilderInterface $entity_form_builder
+   * @param EntityFormBuilderInterface $entity_form_builder
    *   The entity form builder service.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/entity_ui/src/Plugin/EntityTabContent/ActionsConfigurableAction.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The action plugin manager.
    *
-   * @var \Drupal\Core\Action\ActionManager
+   * @var ActionManager
    */
   protected $pluginManagerAction;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Action\ActionManager $plugin_manager_action
+   * @param ActionManager $plugin_manager_action
    *   The action plugin manager.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/entity_ui/src/Plugin/Derivative/EntityTabsAdminLocalTasks.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Creates an SelectionBase object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\Query\QueryInterface $tab_query
+   * @param QueryInterface $tab_query
    *   The entity query object for entity tab entities.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/entity_ui/src/Plugin/Derivative/EntityTabsAdminLocalActions.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Creates an SelectionBase object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\Query\QueryInterface $tab_query
+   * @param QueryInterface $tab_query
    *   The entity query object for entity tab entities.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/entity_ui/src/Plugin/Derivative/EntityLocalTasks.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity tabs loader.
    *
-   * @var \Drupal\entity_ui\EntityTabsLoader
+   * @var EntityTabsLoader
    */
   protected $tabLoader;

@@ @@
   /**
    * Creates an SelectionBase object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\entity_ui\EntityTabsLoader $tab_query
+   * @param EntityTabsLoader $tab_query
    *   The entity query object for entity tab entities.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityTabsLoader $tab_loader) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/entity_ui/src/Plugin/Derivative/ActionsConfigurableActionTabContentDeriver.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The action plugin manager.
    *
-   * @var \Drupal\Core\Action\ActionManager
+   * @var ActionManager
    */
   protected $pluginManagerAction;

@@ @@
   /**
    * Creates a deriver instance.
    *
-   * @param \Drupal\Core\Action\ActionManager $plugin_manager_action
+   * @param ActionManager $plugin_manager_action
    *   The action plugin manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(ActionManager $plugin_manager_action, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/entity_ui/src/Form/EntityTabForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_ui\Form;

+use Symfony\Component\Routing\Route;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ @@
   /**
    * The Entity Tab content plugin manager
    *
-   * @var \Drupal\entity_ui\Plugin\EntityTabContentManager
+   * @var EntityTabContentManager
    */
   protected $entityTabContentPluginManager;

@@ @@
   /**
    * The menu local task plugin manager.
    *
-   * @var \Drupal\Core\Menu\LocalTaskManagerInterface
+   * @var LocalTaskManagerInterface
    */
   protected $menuLocalTaskPluginManager;

@@ @@
   /**
    * The router builder service.
    *
-   * @var \Drupal\Core\Routing\RouteBuilderInterface
+   * @var RouteBuilderInterface
    */
   protected $routerBuilder;

@@ @@
   /**
    * The route provider to load routes by name.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;

@@ @@
   /**
    * The entity bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface;
+   * @var EntityTypeBundleInfoInterface ;
    */
   protected $bundleInfoService;

@@ @@
    *  A path component, i.e. the part of the path that is appended to the
    *  canonical URL.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *  The route, or NULL if nothing is found.
    */
   protected function getRouteForEntityPath($target_entity_type_id, $path_component) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/entity_ui/src/Form/EntityTabDeleteForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The Entity Tab content plugin manager
    *
-   * @var \Drupal\entity_ui\Plugin\EntityTabContentManager
+   * @var EntityTabContentManager
    */
   protected $entityTabContentPluginManager;

@@ @@
   /**
    * The menu local task plugin manager.
    *
-   * @var \Drupal\Core\Menu\LocalTaskManagerInterface
+   * @var LocalTaskManagerInterface
    */
   protected $menuLocalTaskPluginManager;

@@ @@
   /**
    * The router builder service.
    *
-   * @var \Drupal\Core\Routing\RouteBuilderInterface
+   * @var RouteBuilderInterface
    */
   protected $routerBuilder;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/entity_ui/src/EntityUiPermissions.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new EntityUiPermissions instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


24) modules/contrib/entity_ui/src/EntityTabsLoader.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new EntityTabsLoader.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Loads the entity tabs for a single target entity type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $target_entity_type
+   * @param EntityTypeInterface $target_entity_type
    *  The target entity type to load tabs for.
    *
    * @return
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


25) modules/contrib/entity_ui/src/EntityHandler/PlainBundlesEntityUIAdmin.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new BasicFieldUI.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Routing\PreloadableRouteProviderInterface $route_provider
+   * @param PreloadableRouteProviderInterface $route_provider
    *   The route provider service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/entity_ui/src/EntityHandler/FieldUIWithoutBundleEntityProxy.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * The route provider service.
    *
-   * @var \Drupal\Core\Routing\PreloadableRouteProviderInterface
+   * @var PreloadableRouteProviderInterface
    */
   protected $routeProvider;

@@ @@
   /**
    * Constructs a new EntityUIAdminBase.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Routing\PreloadableRouteProviderInterface $route_provider
+   * @param PreloadableRouteProviderInterface $route_provider
    *   The route provider service.
    */
   public function __construct(
@@ @@
   /**
    * The real handler that this wraps.
    *
-   * @var \Drupal\entity_ui\EntityHandler\EntityUIAdminInterface
+   * @var EntityUIAdminInterface
    */
   protected $realHandler;

@@ @@
    * it's not obtained in the same way depending on whether the router is being
    * rebuilt or not.
    *
-   * @param \Symfony\Component\Routing\Route $field_ui_base_route
+   * @param Route $field_ui_base_route
    *   The base route for the entity type this handler is for.
    */
   protected function setUpRealHandlerFromFieldUIBaseRoute(Route $field_ui_base_route) {
@@ @@
       // hook_entity_bundle_info(). We detect this by the presence of a 'bundle'
       // parameter at the end of the field UI route path, which Field UI module
       // expects when the bundles are not config entities.
-      $handler_class = \Drupal\entity_ui\EntityHandler\PlainBundlesEntityUIAdmin::class;
+      $handler_class = PlainBundlesEntityUIAdmin::class;
     }
     else {
       // The entity type has only a single bundle.
-      $handler_class = \Drupal\entity_ui\EntityHandler\BasicFieldUI::class;
+      $handler_class = BasicFieldUI::class;
     }

     $this->realHandler = $this->entityTypeManager->createHandlerInstance($handler_class, $this->entityType);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


27) modules/contrib/entity_ui/src/EntityHandler/EntityUIAdminInterface.php:29

    ---------- begin diff ----------
@@ @@
    *
    * @see \Drupal\entity_ui\Routing\AdminRouteProviderSubscriber
    *
-   * @param \Symfony\Component\Routing\RouteCollection $route_collection
+   * @param RouteCollection $route_collection
    *   The collection of routes built so far.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


28) modules/contrib/entity_ui/src/EntityHandler/EntityUIAdminBase.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The route provider service.
    *
-   * @var \Drupal\Core\Routing\PreloadableRouteProviderInterface
+   * @var PreloadableRouteProviderInterface
    */
   protected $routeProvider;

@@ @@
   /**
    * Constructs a new EntityUIAdminBase.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Routing\PreloadableRouteProviderInterface $route_provider
+   * @param PreloadableRouteProviderInterface $route_provider
    *   The route provider service.
    */
   public function __construct(
@@ @@
   /**
    * Builds the route for the partial collection of entity UI tab entities.
    *
-   * @param \Symfony\Component\Routing\RouteCollection $route_collection
+   * @param RouteCollection $route_collection
    *   The collection of routes built so far.
    *
-   * @return \Symfony\Component\Routing\Route
+   * @return Route
    *  The route for the collection.
    */
   protected function getCollectionRoute(RouteCollection $route_collection) {
@@ @@
   /**
    * Returns the path for the collection route.
    *
-   * @param \Symfony\Component\Routing\RouteCollection $route_collection
+   * @param RouteCollection $route_collection
    *   The collection of routes built so far.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


29) modules/contrib/entity_ui/src/EntityHandler/EntityTabListBuilder.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The Entity Tab content plugin manager
    *
-   * @var \Drupal\entity_ui\Plugin\EntityTabContentManager
+   * @var EntityTabContentManager
    */
   protected $entityTabContentPluginManager;

@@ @@
   /**
    * The menu local task plugin manager
    *
-   * @var \Drupal\Core\Menu\LocalTaskManagerInterface
+   * @var LocalTaskManagerInterface
    */
   protected $localTaskManager;

@@ @@
   /**
    * The currently active route match object.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $currentRouteMatch;

@@ @@
   /**
    * The dynamic router service.
    *
-   * @var \Symfony\Component\Routing\Matcher\RequestMatcherInterface
+   * @var RequestMatcherInterface
    */
   protected $router;

@@ @@
   /**
    * Constructs a new EntityTabListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    * @param \Drupal\entity_ui\Plugin\EntityTabContentManager
    *   The entity tab plugin manager.
-   * @param \Drupal\Core\Menu\LocalTaskManagerInterface $local_task_manager
+   * @param LocalTaskManagerInterface $local_task_manager
    *   The local task manager.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $current_route_match
+   * @param RouteMatchInterface $current_route_match
    *   The currently active route match object.
-   * @param \Symfony\Component\Routing\Matcher\RequestMatcherInterface $router
+   * @param RequestMatcherInterface $router
    *   The dynamic router service.
    */
   public function __construct(
@@ @@
   /**
    * Builds the row for a hardcoded local task, i.e. from another module.
    *
-   * @param \Drupal\Core\Menu\LocalTaskInterface $task_plugin
+   * @param LocalTaskInterface $task_plugin
    *  The task plugin for the tab.
    *
    * @return
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/entity_ui/src/EntityHandler/BundleEntityCollection.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new BundleEntityCollection.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Routing\PreloadableRouteProviderInterface $route_provider
+   * @param PreloadableRouteProviderInterface $route_provider
    *   The route provider service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/entity_ui/src/EntityHandler/BasicFieldUI.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new BasicFieldUI.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Routing\PreloadableRouteProviderInterface $route_provider
+   * @param PreloadableRouteProviderInterface $route_provider
    *   The route provider service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/entity_ui/src/Entity/EntityTabInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_ui\Entity;

+use Drupal\entity_ui\Plugin\EntityTabContentInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityWithPluginCollectionInterface;
@@ @@
   /**
    * Gets the page title for this tab.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $target_entity
+   * @param EntityInterface $target_entity
    *  The target entity of the tab entity.
    *
    * @return string
@@ @@
   /**
    * Get the link type plugin for this flag.
    *
-   * @return \Drupal\entity_ui\Plugin\EntityTabContentInterface
+   * @return EntityTabContentInterface
    *   The link type plugin for the flag.
    */
   public function getContentPlugin();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


33) modules/contrib/entity_ui/src/Entity/EntityTab.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_ui\Entity;

+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\entity_ui\Plugin\EntityTabLazyPluginCollection;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * A collection to store the tab content plugin.
    *
-   * @var \Drupal\Core\Plugin\DefaultSingleLazyPluginCollection
+   * @var DefaultSingleLazyPluginCollection
    */
   protected $contentPluginCollection;

@@ @@
   /**
    * Checks the tab is set to apply to the target entity's bundle.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $target_entity
+   * @param EntityInterface $target_entity
    *   The target entity that the entity tab is on.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   protected function hasBundleAccess(EntityInterface $target_entity) {
@@ @@
    */
   protected function getContentPluginCollection() {
     if (!$this->contentPluginCollection) {
-      $this->contentPluginCollection = new \Drupal\entity_ui\Plugin\EntityTabLazyPluginCollection(
+      $this->contentPluginCollection = new EntityTabLazyPluginCollection(
         \Drupal::service('plugin.manager.entity_ui_tab_content'),
         $this->content_plugin,
         $this->content_config,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/entity_ui/src/Controller/EntityTabController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_ui\Controller;

+use Drupal\Core\Access\AccessResult;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ @@
   /**
    * The entity type manager
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The currently active route match object.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $currentRouteMatch;

@@ @@
   /**
    * The Entity Tab content plugin manager
    *
-   * @var \Drupal\entity_ui\Plugin\EntityTabContentManager
+   * @var EntityTabContentManager
    */
   protected $entityTabContentPluginManager;

@@ @@
   /**
    * Constructs a new EntityTabController object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    * @param \Drupal\entity_ui\Plugin\EntityTabContentManager
    *   The entity tab plugin manager.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $current_route_match
+   * @param RouteMatchInterface $current_route_match
    *   The currently active route match object.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityTabContentManager $entity_tab_content_manager, RouteMatchInterface $current_route_match) {
@@ @@
   /**
    * Access callback for the entity tab route.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *  The route to check access for.
-   * @param \Drupal\Core\Routing\RouteMatch $route_match
+   * @param RouteMatch $route_match
    *  The route match.
-   * @param \Drupal\Core\Session\AccountProxy $account
+   * @param AccountProxy $account
    *  The current user account.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *  The access result.
    */
   public function access(Route $route, RouteMatch $route_match, AccountProxy $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


35) modules/contrib/entity_ui/src/Controller/EntityTabAddPage.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The Entity Tab content plugin manager
    *
-   * @var \Drupal\entity_ui\Plugin\EntityTabContentManager
+   * @var EntityTabContentManager
    */
   protected $entityTabContentPluginManager;

@@ @@
   /**
    * Constructs a new EntityTabForm.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    * @param \Drupal\entity_ui\Plugin\EntityTabContentManager
    *   The entity tab plugin manager.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


36) modules/contrib/entity_ui/src/Annotation/EntityTabContent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_ui\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


37) modules/contrib/entity_ui/entity_ui.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\entity_ui\Routing\TabRouteProvider;
+use Drupal\entity_ui\EntityHandler\BundleEntityCollection;
+use Drupal\entity_ui\EntityHandler\FieldUIWithoutBundleEntityProxy;
 /**
  * @file
  * Provides an admin UI for building tabs on content entities.
@@ @@
     // we have to do it the sloppy way for now.
     $providers = $entity_type->getRouteProviderClasses() ?: [];
     if (empty($providers['entity_ui'])) {
-      $providers['entity_ui'] = Drupal\entity_ui\Routing\TabRouteProvider::class;
+      $providers['entity_ui'] = TabRouteProvider::class;
       $entity_type->setHandlerClass('route_provider', $providers);
     }

@@ @@
         // our handler can't do anything, but this causes problems in tests and
         // if we are enabled at the same time as entity type modules.
         // See https://www.drupal.org/node/2896669.
-        $entity_type->setHandlerClass('entity_ui_admin', \Drupal\entity_ui\EntityHandler\BundleEntityCollection::class);
+        $entity_type->setHandlerClass('entity_ui_admin', BundleEntityCollection::class);

         // Done with this entity type.
         continue;
@@ @@
     $field_ui_base_route_name = $entity_type->get('field_ui_base_route');

     if ($field_ui_base_route_name) {
-      $entity_type->setHandlerClass('entity_ui_admin', \Drupal\entity_ui\EntityHandler\FieldUIWithoutBundleEntityProxy::class);
+      $entity_type->setHandlerClass('entity_ui_admin', FieldUIWithoutBundleEntityProxy::class);

       // Done with this entity type.
       continue;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 37 files have been changed by Rector                                      

