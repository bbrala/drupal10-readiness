diff --git a/src/Article.php b/src/Article.php
index 88d124b..28e73b7 100644
--- a/src/Article.php
+++ b/src/Article.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\ww_publish;
 
+use Drupal\Core\Config\Config;
+use Psr\Log\LoggerInterface;
+use Drupal\node\Entity\NodeType;
+use Drupal\Core\TypedData\Exception\ReadOnlyException;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityStorageException;
@@ -18,14 +22,14 @@ class Article {
   /**
    * The SNS message.
    *
-   * @var \Drupal\ww_publish\Message
+   * @var Message
    */
   protected $message;
 
   /**
    * Metadata of the article received from WoodWing Studio.
    *
-   * @var \Drupal\ww_publish\Metadata
+   * @var Metadata
    */
   private $articleMetadata;
 
@@ -39,21 +43,21 @@ class Article {
   /**
    * Configuration of the ww_publish module.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   private $config;
 
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   private $logger;
 
   /**
    * Content type in which the article should be saved.
    *
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   private $contentType;
 
@@ -81,22 +85,22 @@ class Article {
   /**
    * The target node which will be created or updated.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   private $node;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\ww_publish\Message $message
+   * @param Message $message
    *   SNS Message.
-   * @param \Drupal\Core\Config\Config $config
+   * @param Config $config
    *   Configuration of the ww_publish module.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(Message $message, $config, $logger) {
     $this->message = $message;
@@ -112,7 +116,7 @@ class Article {
    * Publish a new node or update an existing node.
    *
    * @return bool
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function publish(): int {
     if ($this->config->get('debug_mode'))
@@ -138,7 +142,7 @@ class Article {
    * Create a new node.
    *
    * @return bool
-   * @throws \Drupal\Core\Entity\EntityStorageException|\Drupal\Core\TypedData\Exception\ReadOnlyException
+   * @throws EntityStorageException|ReadOnlyException
    */
   private function create(): bool {
     try {
@@ -172,7 +176,7 @@ class Article {
    * Update an existing node.
    *
    * @return bool
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   private function update(): bool {
     if ($this->node instanceof NodeInterface) {
@@ -199,7 +203,7 @@ class Article {
   /**
    * Update fields.
    *
-   * @throws \Drupal\Core\TypedData\Exception\ReadOnlyException
+   * @throws ReadOnlyException
    */
   private function updateFields() {
     // Define an empty error messages field.
@@ -281,8 +285,8 @@ class Article {
    * Get the target content type.
    *
    * @return mixed
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function getContentType() {
     $contentTypeMachineName = $this->articleMetadata->getMetadataByIdentifier('ExtraMetaData', $this->config->get('content_type_field'));
@@ -347,7 +351,7 @@ class Article {
    * Get the title of the WoodWing Studio article.
    *
    * @return mixed
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   private function getTitle() {
     // Get the WoodWing Studio identifier for the title from content type configuration.
@@ -406,7 +410,7 @@ class Article {
   /**
    * Find the related node.
    *
-   * @return \Drupal\ww_publish\Events\PreImportEvent
+   * @return PreImportEvent
    *   Returns the pre import event object. If a node is set than that should
    *   be updated, if not then an ew one should be created and if marked as skip
    *   then the import should be skipped.
diff --git a/src/Event/SnsNotificationSubscriber.php b/src/Event/SnsNotificationSubscriber.php
index e595190..2612668 100644
--- a/src/Event/SnsNotificationSubscriber.php
+++ b/src/Event/SnsNotificationSubscriber.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\ww_publish\Event;
 
+use Psr\Log\LoggerInterface;
+use Drupal\Core\Config\Config;
+use Drupal\Core\Entity\EntityStorageException;
 use Aws\Sns\Message;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\DestructableInterface;
@@ -29,28 +32,28 @@ class SnsNotificationSubscriber implements EventSubscriberInterface, Destructabl
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * Configuration of the ww_publish module.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;
 
   /**
    * The job importer service.
    *
-   * @var \Drupal\ww_publish\Job
+   * @var Job
    */
   protected $job;
 
   /**
    * Event messages to be imported in the destruct method.
    *
-   * @var \Drupal\ww_publish\Entity\SnsMessageEntityInterface[]
+   * @var SnsMessageEntityInterface[]
    */
   protected $eventMessages = [];
 
@@ -66,11 +69,11 @@ class SnsNotificationSubscriber implements EventSubscriberInterface, Destructabl
   /**
    * SnsNotificationSubscriber constructor.
    *
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   A config factory.
-   * @param \Drupal\ww_publish\Job $job
+   * @param Job $job
    *   The job importer service.
    */
   public function __construct(LoggerChannelFactoryInterface $logger_factory, ConfigFactoryInterface $config_factory, Job $job) {
@@ -90,7 +93,7 @@ class SnsNotificationSubscriber implements EventSubscriberInterface, Destructabl
    * @param \Drupal\amazon_sns\Event\SnsMessageEvent $event
    *   Publish message received from Amazon SNS.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function processSnsMessageEvent(AmazonSnsMessageEvent $event) {
     $eventMessage = $event->getMessage();
@@ -131,7 +134,7 @@ class SnsNotificationSubscriber implements EventSubscriberInterface, Destructabl
   /**
    * Check that the message is valid to be sent.
    *
-   * @param \Aws\Sns\Message $eventMessage
+   * @param Message $eventMessage
    *   The message received from Amazon SNS.
    *
    * @return bool
diff --git a/src/Events/ArticleFieldsEvent.php b/src/Events/ArticleFieldsEvent.php
index d3e99a6..8c76459 100644
--- a/src/Events/ArticleFieldsEvent.php
+++ b/src/Events/ArticleFieldsEvent.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\ww_publish\Events;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\node\NodeInterface;
 use Drupal\ww_publish\Message;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Allows to alter the created node.
@@ -14,23 +14,23 @@ class ArticleFieldsEvent extends Event {
   /**
    * The SNS messge.
    *
-   * @var \Drupal\ww_publish\Message
+   * @var Message
    */
   protected $message;
 
   /**
    * The prepared node.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;
 
   /**
    * ArticleFieldsEvent constructor.
    *
-   * @param \Drupal\ww_publish\Message $message
+   * @param Message $message
    *   The SNS message.
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The prepared node.
    */
   public function __construct(Message $message, NodeInterface $node) {
@@ -41,7 +41,7 @@ class ArticleFieldsEvent extends Event {
   /**
    * Returns the prepared node.
    *
-   * @return \Drupal\node\NodeInterface
+   * @return NodeInterface
    *   The prepared node.
    */
   public function getNode(): NodeInterface {
@@ -51,7 +51,7 @@ class ArticleFieldsEvent extends Event {
   /**
    * Returns the SNS message.
    *
-   * @return \Drupal\ww_publish\Message
+   * @return Message
    *   The SNS message.
    */
   public function getMessage(): Message {
diff --git a/src/Events/ParagraphFieldEvent.php b/src/Events/ParagraphFieldEvent.php
index 49e51bf..e37f6be 100644
--- a/src/Events/ParagraphFieldEvent.php
+++ b/src/Events/ParagraphFieldEvent.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\ww_publish\Events;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\paragraphs\ParagraphInterface;
 use Drupal\ww_publish\Message;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Allows to alter the paragraph that is created for a given content component.
@@ -14,7 +14,7 @@ class ParagraphFieldEvent extends Event {
   /**
    * The SNS message.
    *
-   * @var \Drupal\ww_publish\Message
+   * @var Message
    */
   protected $message;
 
@@ -28,18 +28,18 @@ class ParagraphFieldEvent extends Event {
   /**
    * The created paragraph, if any.
    *
-   * @var \Drupal\paragraphs\ParagraphInterface|null
+   * @var ParagraphInterface|null
    */
   protected $paragraph = NULL;
 
   /**
    * ParagraphFieldEvent constructor.
    *
-   * @param \Drupal\ww_publish\Message $message
+   * @param Message $message
    *   The SNS message.
    * @param object $wwComponent
    *   The content component.
-   * @param \Drupal\paragraphs\ParagraphInterface|null $paragraph
+   * @param ParagraphInterface|null $paragraph
    *   The created paragraph, if any.
    */
   public function __construct(Message $message, $wwComponent, ParagraphInterface $paragraph = NULL) {
@@ -51,7 +51,7 @@ class ParagraphFieldEvent extends Event {
   /**
    * Returns the SNS message.
    *
-   * @return \Drupal\ww_publish\Message
+   * @return Message
    *   The SNS message.
    */
   public function getMessage(): Message {
@@ -71,7 +71,7 @@ class ParagraphFieldEvent extends Event {
   /**
    * Returns the prepared paragraph.
    *
-   * @return \Drupal\paragraphs\ParagraphInterface|null
+   * @return ParagraphInterface|null
    *   The paragraph if one could be prepared.
    */
   public function getParagraph(): ?ParagraphInterface {
@@ -81,7 +81,7 @@ class ParagraphFieldEvent extends Event {
   /**
    * Set or unset the created paragraph.
    *
-   * @param \Drupal\paragraphs\ParagraphInterface|null $paragraph
+   * @param ParagraphInterface|null $paragraph
    *   A new paragraph or NULL to not create a paragraph for the component.
    */
   public function setParagraph(ParagraphInterface $paragraph = NULL) {
diff --git a/src/Events/PreImportEvent.php b/src/Events/PreImportEvent.php
index d68199a..867c478 100644
--- a/src/Events/PreImportEvent.php
+++ b/src/Events/PreImportEvent.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\ww_publish\Events;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\node\NodeInterface;
 use Drupal\ww_publish\Message;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Allows to alter which node is updated or skip the import.
@@ -14,14 +14,14 @@ class PreImportEvent extends Event {
   /**
    * The existing node, if found.
    *
-   * @var \Drupal\node\NodeInterface|null
+   * @var NodeInterface|null
    */
   protected $node;
 
   /**
    * The SNS message.
    *
-   * @var \Drupal\ww_publish\Message
+   * @var Message
    */
   protected $message;
 
@@ -35,9 +35,9 @@ class PreImportEvent extends Event {
   /**
    * PreImportEvent constructor.
    *
-   * @param \Drupal\ww_publish\Message $message
+   * @param Message $message
    *   The SNS message.
-   * @param \Drupal\node\NodeInterface|null $node
+   * @param NodeInterface|null $node
    *   The existing node, if found.
    */
   public function __construct(Message $message, NodeInterface $node = NULL) {
@@ -48,7 +48,7 @@ class PreImportEvent extends Event {
   /**
    * Returns the existing node, if found.
    *
-   * @return \Drupal\node\NodeInterface
+   * @return NodeInterface
    *   The existing node to update.
    */
   public function getNode(): ?NodeInterface {
@@ -58,7 +58,7 @@ class PreImportEvent extends Event {
   /**
    * Sets the node that should be updated.
    *
-   * @param \Drupal\node\NodeInterface|null $node
+   * @param NodeInterface|null $node
    *   The node to update, NULL to create a new node instead.
    */
   public function setNode(NodeInterface $node = NULL) {
@@ -68,7 +68,7 @@ class PreImportEvent extends Event {
   /**
    * Returns the SNS message.
    *
-   * @return \Drupal\ww_publish\Message
+   * @return Message
    *   The SNS message.
    */
   public function getMessage(): Message {
diff --git a/src/Field.php b/src/Field.php
index 254d564..e93d497 100644
--- a/src/Field.php
+++ b/src/Field.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\ww_publish;
 
+use Drupal\Core\Config\Config;
+use Psr\Log\LoggerInterface;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManager;
 use Drupal\Core\Field\FieldDefinitionInterface;
 
 class Field {
@@ -12,7 +16,7 @@ class Field {
   /**
    * Configuration of the field.
    *
-   * @var \Drupal\Core\Field\FieldDefinitionInterface
+   * @var FieldDefinitionInterface
    */
   private $fieldConfig;
 
@@ -26,7 +30,7 @@ class Field {
   /**
    * The SNS message.
    *
-   * @var \Drupal\ww_publish\Message
+   * @var Message
    */
   protected $message;
 
@@ -40,25 +44,25 @@ class Field {
   /**
    * Configuration of the ww_publish module.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   private $config;
 
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   private $logger;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_config
+   * @param FieldDefinitionInterface $field_config
    *   Field configuration.
    * @param string $content_station_identifier
    *   WoodWing Studio identifier.
-   * @param \Drupal\ww_publish\Message $message
+   * @param Message $message
    *   Article metadata.
    * @param Object $article_data
    *   Article data.
@@ -66,9 +70,9 @@ class Field {
    *   Prepared files.
    * @param string $article_id_field
    *   WoodWing Studio article ID field.
-   * @param \Drupal\Core\Config\Config $config
+   * @param Config $config
    *   Configuration of the ww_publish module.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
    */
   public function __construct(FieldDefinitionInterface $field_config, $content_station_identifier, Message $message, $config, $logger) {
@@ -87,7 +91,7 @@ class Field {
    *   Error messages field.
    *
    * @return array
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function getArticleData(&$messagesField = NULL): ?array {
     $articleData = [];
@@ -172,7 +176,7 @@ class Field {
         $content = \array_filter($content);
         if (!empty($content)) {
           // Apply a template on the content.
-          /** @var \Drupal\ww_publish\Template $template */
+          /** @var Template $template */
           $template = \Drupal::service('ww_publish.template');
           if ($template->exist($contentStationIdentifiers[0], 'component')) {
             $content = $template->apply($contentStationIdentifiers[0], 'component', $content);
@@ -335,7 +339,7 @@ class Field {
 
         // Attempt to fetch a reference for the given field as an exact
         // match, assume that there is only one.
-        /** @var \Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManager $autocomplete */
+        /** @var SelectionPluginManager $autocomplete */
         $selection_manager = \Drupal::service('plugin.manager.entity_reference_selection');
 
         $options = $this->fieldConfig->getSetting('handler_settings') + [
diff --git a/src/FieldTrait.php b/src/FieldTrait.php
index 16a6a36..8e4ce6d 100644
--- a/src/FieldTrait.php
+++ b/src/FieldTrait.php
@@ -14,7 +14,7 @@ trait FieldTrait {
   /**
    * Returns an allowed text format for the specified field.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   A field definition object.
    *
    * @return string|null
@@ -79,7 +79,7 @@ trait FieldTrait {
    *
    * @param string $value
    *   Value to be shortened.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    * @param array|null $messages_field
    *   The messages field to add errors to.
diff --git a/src/Form/SnsMessageForm.php b/src/Form/SnsMessageForm.php
index 4ced082..4ec78c3 100644
--- a/src/Form/SnsMessageForm.php
+++ b/src/Form/SnsMessageForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\ww_publish\Form;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -69,8 +71,8 @@ class SnsMessageForm extends ContentEntityForm {
    * @return bool
    *   Returns true, if the SNS message exist.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function exists($id) {
     $storage = $this->entityTypeManager->getStorage('ww_publish_sns_message');
@@ -80,7 +82,7 @@ class SnsMessageForm extends ContentEntityForm {
   /**
    * Returns the existing node for this article if existing.
    *
-   * @return \Drupal\node\NodeInterface|null
+   * @return NodeInterface|null
    *   The node or NULL
    */
   protected function findNode(): ?NodeInterface {
diff --git a/src/Form/TemplateForm.php b/src/Form/TemplateForm.php
index 50e4c8a..93d76ed 100644
--- a/src/Form/TemplateForm.php
+++ b/src/Form/TemplateForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\ww_publish\Form;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Form\FormStateInterface;
@@ -128,8 +130,8 @@ class TemplateForm extends EntityForm {
    * @return bool
    *   Returns true, if the template exist.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function exists($id) {
     $storage = $this->entityTypeManager->getStorage('ww_publish_template');
diff --git a/src/Form/WwPublishSettingsForm.php b/src/Form/WwPublishSettingsForm.php
index be41021..5e8fc39 100644
--- a/src/Form/WwPublishSettingsForm.php
+++ b/src/Form/WwPublishSettingsForm.php
@@ -18,25 +18,25 @@ class WwPublishSettingsForm extends ConfigFormBase {
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * WwPublishSettingsForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, FileSystemInterface $file_system, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Image.php b/src/Image.php
index 892ec08..1839f95 100644
--- a/src/Image.php
+++ b/src/Image.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\ww_publish;
 
+use Drupal\Core\Config\Config;
+use Psr\Log\LoggerInterface;
+use Drupal\media\MediaTypeInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\Core\Logger\RfcLogLevel;
 use Drupal\media\Entity\Media;
@@ -18,7 +23,7 @@ class Image {
   private $imageContent;
 
   /**
-   * @var \Drupal\ww_publish\Message
+   * @var Message
    */
   private $message;
 
@@ -32,21 +37,21 @@ class Image {
   /**
    * Configuration of the ww_publish module.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   private $config;
 
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   private $logger;
 
   /**
    * The media type.
    *
-   * @var \Drupal\media\MediaTypeInterface
+   * @var MediaTypeInterface
    */
   protected $mediaType;
 
@@ -57,11 +62,11 @@ class Image {
    *   The media type.
    * @param object $image_content
    *   The image content component.
-   * @param \Drupal\ww_publish\Message $message
+   * @param Message $message
    *   Article metadata.
-   * @param \Drupal\Core\Config\Config $config
+   * @param Config $config
    *   Configuration of the ww_publish module.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
    */
   public function __construct(string $media_type, $image_content, Message $message, $config, $logger) {
@@ -77,8 +82,8 @@ class Image {
   /**
    * Get Media entity of the image.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @return EntityInterface
+   * @throws EntityStorageException
    */
   public function getMediaEntity() {
 
@@ -109,8 +114,8 @@ class Image {
   /**
    * Create a new image media entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @return EntityInterface
+   * @throws EntityStorageException
    */
   private function createMediaEntity() {
     $image = $this->imageContent->image;
@@ -129,7 +134,7 @@ class Image {
     if ($this->config->get('debug_mode'))
       $this->logger->debug('File destination: <pre><code>@destination</code></pre>', ['@destination' => print_r($destination, TRUE)]);
 
-    $file = file_save_data($file_data, $destination);
+    $file = \Drupal::service('file.repository')->writeData($file_data, $destination);
 
     if (!empty($image->focuspoint->x) && !empty($image->focuspoint->y) && \Drupal::moduleHandler()->moduleExists('focal_point')) {
       $image_file = \Drupal::service('image.factory')->get($file->getFileUri());
diff --git a/src/Job.php b/src/Job.php
index 63821a7..45feed3 100644
--- a/src/Job.php
+++ b/src/Job.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\ww_publish;
 
+use Drupal\Core\Config\Config;
+use Psr\Log\LoggerInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\File\FileSystemInterface;
@@ -15,50 +17,50 @@ class Job {
   /**
    * Configuration of the ww_publish module.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   private $config;
 
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   private $logger;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The lock backend.
    *
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected $lock;
 
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Lock\LockBackendInterface $lock
+   * @param LockBackendInterface $lock
    *   The lock backend.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, LoggerChannelFactoryInterface $logger_factory, EntityTypeManagerInterface $entity_type_manager, LockBackendInterface $lock, FileSystemInterface  $file_system) {
@@ -92,7 +94,7 @@ class Job {
     try {
       // Load the unchanged entity to ensure that it is returned based on the
       // current database state and not an outdated static cache.
-      /** @var \Drupal\ww_publish\Entity\SnsMessageEntityInterface $eventMessage */
+      /** @var SnsMessageEntityInterface $eventMessage */
       $eventMessage = $this->entityTypeManager->getStorage('ww_publish_sns_message')->loadUnchanged($message_id);
 
       // If the message is already executed then another request already did the
diff --git a/src/MediaFieldTrait.php b/src/MediaFieldTrait.php
index 544a333..4cc2f7f 100644
--- a/src/MediaFieldTrait.php
+++ b/src/MediaFieldTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ww_publish;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Field\FieldDefinitionInterface;
 
 trait MediaFieldTrait {
@@ -36,7 +37,7 @@ trait MediaFieldTrait {
    * @return integer|null
    *   The media entity ID or NULL if none was found or created.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   private function createMediaImage($media_type, $image_content) {
 
diff --git a/src/Message.php b/src/Message.php
index da6511c..5a3a7d0 100644
--- a/src/Message.php
+++ b/src/Message.php
@@ -13,7 +13,7 @@ class Message {
   /**
    * SNS Message.
    *
-   * @var \Drupal\ww_publish\Entity\SnsMessageEntityInterface
+   * @var SnsMessageEntityInterface
    */
   protected $message;
 
@@ -27,7 +27,7 @@ class Message {
   /**
    * The metadata object.
    *
-   * @var \Drupal\ww_publish\Metadata|null
+   * @var Metadata|null
    */
   protected $metadata;
 
@@ -55,11 +55,11 @@ class Message {
   /**
    * Constructor.
    *
-   * @param \Drupal\ww_publish\Entity\SnsMessageEntityInterface $message
+   * @param SnsMessageEntityInterface $message
    *   SNS Message.
-   * @param \Drupal\Core\Config\Config $config
+   * @param Config $config
    *   The 'ww_publish.settings' config.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger.
    */
   public function __construct(SnsMessageEntityInterface $message, Config $config, LoggerInterface $logger) {
@@ -186,7 +186,7 @@ class Message {
   /**
    * Returns the article metadata.
    *
-   * @return \Drupal\ww_publish\Metadata|null
+   * @return Metadata|null
    *   Either a Metadata object or NULL if it could not be loaded.
    */
   public function getArticleMetadata() {
diff --git a/src/Metadata.php b/src/Metadata.php
index 1f9c375..5d4a2b7 100644
--- a/src/Metadata.php
+++ b/src/Metadata.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\ww_publish;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\user\UserInterface;
 use Drupal\Core\Config\Config;
 use Drupal\user\Entity\User;
 use Psr\Log\LoggerInterface;
@@ -21,14 +24,14 @@ class Metadata {
   /**
    * Configuration of the ww_publish module.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   private $config;
 
   /**
    * Logger interface.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   private $logger;
 
@@ -37,7 +40,7 @@ class Metadata {
    *
    * Current user in WoodWing, who publish the article.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   private $wwAuthor;
 
@@ -46,13 +49,13 @@ class Metadata {
    *
    * @param Object $metadata
    *   Metadata extracted from the metadata.json file.
-   * @param \Drupal\Core\Config\Config $config
+   * @param Config $config
    *   The 'ww_publish.settings' config.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct($metadata, Config $config, LoggerInterface $logger) {
     $this->metadata = $metadata;
@@ -139,7 +142,7 @@ class Metadata {
   /**
    * Get WoodWing author.
    *
-   * @return \Drupal\user\Entity\User
+   * @return User
    */
   public function getAuthor() {
     return $this->wwAuthor;
@@ -172,7 +175,7 @@ class Metadata {
   /**
    * Identify the WoodWing Author in Drupal users.
    *
-   * @return \Drupal\user\UserInterface|null
+   * @return UserInterface|null
    *   The identified author or NULL if no author user entity could be
    *   identified.
    */
diff --git a/src/ParagraphField.php b/src/ParagraphField.php
index 3a3f5b8..b4dde21 100644
--- a/src/ParagraphField.php
+++ b/src/ParagraphField.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\ww_publish;
 
+use Drupal\Core\Config\Config;
+use Psr\Log\LoggerInterface;
+use Drupal\Core\Field\FieldItemList;
+use Drupal\Core\TypedData\Exception\MissingDataException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\field\Entity\FieldConfig;
@@ -16,21 +21,21 @@ class ParagraphField {
   /**
    * Paragraph field configuration.
    *
-   * @var \Drupal\Core\Field\FieldDefinitionInterface
+   * @var FieldDefinitionInterface
    */
   private $fieldConfig;
 
   /**
    * The SNS message.
    *
-   * @var \Drupal\ww_publish\Message
+   * @var Message
    */
   protected $message;
 
   /**
    * Metadata of the article received from WoodWing Studio.
    *
-   * @var \Drupal\ww_publish\Metadata
+   * @var Metadata
    */
   private $articleMetadata;
 
@@ -44,31 +49,31 @@ class ParagraphField {
   /**
    * Configuration of the ww_publish module.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   private $config;
 
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   private $logger;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_config
+   * @param FieldDefinitionInterface $field_config
    *   Field config.
-   * @param \Drupal\ww_publish\Metadata $article_metadata
+   * @param Metadata $article_metadata
    *   Article components.
    * @param array $article_components
    *   Article data.
    * @param array $prepared_files
    *   Prepared files.
-   * @param \Drupal\Core\Config\Config $config
+   * @param Config $config
    *   Configuration of the ww_publish module.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
    */
   public function __construct(FieldDefinitionInterface $field_config, Message $message, $article_components, $config, $logger) {
@@ -82,12 +87,12 @@ class ParagraphField {
   /**
    * Get article data.
    *
-   * @param \Drupal\Core\Field\FieldItemList $messagesField
+   * @param FieldItemList $messagesField
    *   Error messages field.
    *
    * @return array
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws MissingDataException
+   * @throws EntityStorageException
    */
   public function getArticleData(&$messagesField = NULL): array {
 
@@ -136,12 +141,12 @@ class ParagraphField {
    *   The array items are arrays with the following keys: 'identifier',
    *   'first_identifier', 'last_identifier', 'paragraph_type', 'field_name',
    *   'field_type', 'field_config'.
-   * @param \Drupal\Core\Field\FieldItemList $messagesField
+   * @param FieldItemList $messagesField
    *   Error messages field.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @return EntityInterface
+   * @throws EntityStorageException
+   * @throws MissingDataException
    */
   private function createParagraph(object $wwComponent, array $identifiers, &$messagesField = NULL): ?EntityInterface {
 
@@ -308,7 +313,7 @@ class ParagraphField {
    * field_name.
    *
    * @return array
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    */
   private function getIdentifiers(): array {
     $identifiers = [];
diff --git a/src/SnsMessageListBuilder.php b/src/SnsMessageListBuilder.php
index ac870de..7ea1640 100644
--- a/src/SnsMessageListBuilder.php
+++ b/src/SnsMessageListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ww_publish;
 
+use Drupal\ww_publish\Entity\SnsMessageEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 
@@ -31,7 +32,7 @@ class SnsMessageListBuilder extends EntityListBuilder {
    */
   public function buildRow(EntityInterface $entity) {
     // Prepare the table row for the endpoint.
-    /** @var \Drupal\ww_publish\Entity\SnsMessageEntityInterface $entity */
+    /** @var SnsMessageEntityInterface $entity */
     $row = [];
     $row['id'] = $entity->id();
     $row['name'] = $entity->label();
diff --git a/src/Template.php b/src/Template.php
index 1e3b1b8..02f6cf4 100644
--- a/src/Template.php
+++ b/src/Template.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ww_publish;
 
+use Psr\Log\LoggerInterface;
 use Drupal\Component\Render\MarkupInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
@@ -14,14 +15,14 @@ class Template {
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * SnsNotificationSubscriber constructor.
    *
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory service.
    */
   public function __construct(LoggerChannelFactoryInterface $logger_factory) {
@@ -36,7 +37,7 @@ class Template {
    * @param string $type
    *   Type of the template: component, attribute.
    *
-   * @return \Drupal\ww_publish\Entity\TemplateEntityInterface|null
+   * @return TemplateEntityInterface|null
    *   Either the matching template entity or NULL.
    */
   protected function loadTemplate($target, $type): ?TemplateEntityInterface {
diff --git a/tests/src/Functional/WwPublishMessageFormTest.php b/tests/src/Functional/WwPublishMessageFormTest.php
index 4efbe3a..7e21ca2 100644
--- a/tests/src/Functional/WwPublishMessageFormTest.php
+++ b/tests/src/Functional/WwPublishMessageFormTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\ww_publish\Functional;
 
+use Drupal\user\Entity\User;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\node\Entity\Node;
@@ -36,7 +38,7 @@ class WwPublishMessageFormTest extends BrowserTestBase {
   /**
    * An administrative user account that can administer text formats.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $adminUser;
 
@@ -46,9 +48,9 @@ class WwPublishMessageFormTest extends BrowserTestBase {
    * Info to administrator permissions:
    * http://drupal.stackexchange.com/q/233416/72107
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->adminUser = $this->drupalCreateUser(['administer site configuration']);
     $node_type = NodeType::create([
@@ -108,17 +110,26 @@ class WwPublishMessageFormTest extends BrowserTestBase {
     $message->save();
     $message = SnsMessageEntity::load($message->id());
     $this->drupalGet('admin/config/services/ww-publish/sns-messages/' . $message->id());
-    $this->assertNoText("Article's links:");
-    $this->assertNoLink('Edit the article in Drupal');
-    $this->assertNoLink('Display the article');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains("Article's links:");
+    $this->assertSession()->linkNotExists('Edit the article in Drupal');
+    $this->assertSession()->linkNotExists('Display the article');
 
     // Delete an SNS Message.
     $this->drupalGet('admin/config/services/ww-publish/sns-messages/');
     $this->clickLink('Delete');
     $this->submitForm([], 'Delete');
-    $this->assertResponse(200);
-    $this->assertText('The sns message not_configured_test has been deleted.');
-    $this->assertText('There are no sns message entities yet.');
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The sns message not_configured_test has been deleted.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('There are no sns message entities yet.');
 
     // Create a SNS Message with matching Article ID.
     $node_type = NodeType::load('article');
@@ -137,9 +148,12 @@ class WwPublishMessageFormTest extends BrowserTestBase {
     $message->save();
     $message = SnsMessageEntity::load($message->id());
     $this->drupalGet('admin/config/services/ww-publish/sns-messages/' . $message->id());
-    $this->assertText("Article's links:");
-    $this->assertLink('Edit the article in Drupal');
-    $this->assertLink('Display the article');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Article's links:");
+    $this->assertSession()->linkExists('Edit the article in Drupal');
+    $this->assertSession()->linkExists('Display the article');
 
     // Create a SNS Message with matching Story ID.
     $node_type = NodeType::load('article');
@@ -164,9 +178,12 @@ class WwPublishMessageFormTest extends BrowserTestBase {
     $message->save();
     $message = SnsMessageEntity::load($message->id());
     $this->drupalGet('admin/config/services/ww-publish/sns-messages/' . $message->id());
-    $this->assertText("Article's links:");
-    $this->assertLink('Edit the article in Drupal');
-    $this->assertLink('Display the article');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Article's links:");
+    $this->assertSession()->linkExists('Edit the article in Drupal');
+    $this->assertSession()->linkExists('Display the article');
   }
 
   /**
diff --git a/tests/src/Functional/WwPublishSettingsFormTest.php b/tests/src/Functional/WwPublishSettingsFormTest.php
index b3d744b..239a0a3 100644
--- a/tests/src/Functional/WwPublishSettingsFormTest.php
+++ b/tests/src/Functional/WwPublishSettingsFormTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\ww_publish\Functional;
 
+use Drupal\user\Entity\User;
+use Drupal\Core\Entity\EntityStorageException;
+use Behat\Mink\Exception\ExpectationException;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\user\Entity\Role;
 
@@ -31,14 +34,14 @@ class WwPublishSettingsFormTest extends BrowserTestBase {
   /**
    * An administrative user account that can administer text formats.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $adminUser;
 
   /**
    * An basic user account that can only access basic HTML text format.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $guestUser;
 
@@ -48,9 +51,9 @@ class WwPublishSettingsFormTest extends BrowserTestBase {
    * Info to administrator permissions:
    * http://drupal.stackexchange.com/q/233416/72107
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     // Create users.
     $this->adminUser = $this->drupalCreateUser(['administer site configuration']);
@@ -63,7 +66,7 @@ class WwPublishSettingsFormTest extends BrowserTestBase {
    * Test, that the '/admin/config/services/ww-publish' path returns
    * the right content and can be saved.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function testSettingsFormAsAdmin() {
 
@@ -71,7 +74,7 @@ class WwPublishSettingsFormTest extends BrowserTestBase {
 
     // Test the empty form.
     $this->drupalGet('/admin/config/services/ww-publish');
-    $this->assertResponse('200');
+    $this->assertSession()->statusCodeEquals('200');
 
     $page = $this->getSession()->getPage();
     $page->hasContent('WoodWing Studio');
@@ -108,7 +111,7 @@ class WwPublishSettingsFormTest extends BrowserTestBase {
     $this->drupalLogin($this->guestUser);
 
     $this->drupalGet('/admin/config/services/ww-publish');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
   }
 
 }
diff --git a/tests/src/Kernel/WwPublishEventTest.php b/tests/src/Kernel/WwPublishEventTest.php
index 5357f1d..28ad35b 100644
--- a/tests/src/Kernel/WwPublishEventTest.php
+++ b/tests/src/Kernel/WwPublishEventTest.php
@@ -50,7 +50,7 @@ class WwPublishEventTest extends WwPublishTestBase {
     $this->assertEquals('Accepted unconfirmed sns message from TopicArn @topicarn.', $logs[0][1]);
     $this->assertEquals('test:ecs-export-topic:test', $logs[0][2]['@topicarn']);
 
-    /** @var \Drupal\ww_publish\Entity\SnsMessageEntityInterface $message */
+    /** @var SnsMessageEntityInterface $message */
     $message_entity = SnsMessageEntity::load(1);
     $this->assertEquals('name', $message_entity->label());
     $this->assertEquals('test', $message_entity->getBrand());
diff --git a/tests/src/Kernel/WwPublishImportTest.php b/tests/src/Kernel/WwPublishImportTest.php
index dafafc3..10bdabb 100644
--- a/tests/src/Kernel/WwPublishImportTest.php
+++ b/tests/src/Kernel/WwPublishImportTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\ww_publish\Kernel;
 
+use Drupal\user\UserInterface;
+use Drupal\media\MediaInterface;
+use Drupal\file\FileInterface;
+use Drupal\paragraphs\ParagraphInterface;
 use Aws\Sns\Message;
 use DirectoryIterator;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
@@ -35,7 +39,7 @@ class WwPublishImportTest extends WwPublishTestBase {
   /**
    * The default author user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $author;
 
@@ -51,7 +55,7 @@ class WwPublishImportTest extends WwPublishTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->installEntitySchema('crop');
@@ -387,14 +391,14 @@ class WwPublishImportTest extends WwPublishTestBase {
 
     $this->assertCount(8, $node->get('field_paragraphs'));
 
-    /** @var \Drupal\media\MediaInterface $media */
+    /** @var MediaInterface $media */
     $media = $node->get('field_paragraphs')->get(0)->entity->get('field_image')->entity;
     $this->assertEquals('20180921145938948.jpeg', $media->label());
     $this->assertEquals('Lorem ipsum dolor sit amet, consetetur sadipscing elitr.', $media->get('field_media_image')->alt);
     $this->assertEmpty($media->get('field_media_image')->title);
     $this->assertEquals($this->author->id(), $media->getOwnerId());
 
-    /** @var \Drupal\file\FileInterface $image */
+    /** @var FileInterface $image */
     $image = $media->get('field_media_image')->entity;
     $this->assertEquals('20180921145938948.jpeg', $image->getFilename());
     $this->assertEquals('public://woodwing/' . date('Y-m') . '/20180921145938948.jpeg', $image->getFileUri());
@@ -427,7 +431,7 @@ class WwPublishImportTest extends WwPublishTestBase {
     $this->assertEquals('<iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d2..." width="600" height="450" style="border:0;" allowfullscreen="" loading="lazy"></iframe>', $node->get('field_paragraphs')->get(6)->entity->get('field_text')->value);
 
     // Asserting the container.
-    /** @var \Drupal\paragraphs\ParagraphInterface $container */
+    /** @var ParagraphInterface $container */
     $container = $node->get('field_paragraphs')->get(7)->entity;
     $this->assertEquals('container', $container->bundle());
     $this->assertCount(1, $container->get('field_paragraphs'));
@@ -481,7 +485,7 @@ class WwPublishImportTest extends WwPublishTestBase {
     $this->assertCount(8, $node->get('field_paragraphs'));
 
     // The existing media was reused.
-    /** @var \Drupal\media\MediaInterface $updated_media */
+    /** @var MediaInterface $updated_media */
     $updated_media = $node->get('field_paragraphs')->get(0)->entity->get('field_image')->entity;
     $this->assertEquals($media->id(), $updated_media->id());
 
diff --git a/tests/src/Kernel/WwPublishTestBase.php b/tests/src/Kernel/WwPublishTestBase.php
index 792aa5d..cdaf268 100644
--- a/tests/src/Kernel/WwPublishTestBase.php
+++ b/tests/src/Kernel/WwPublishTestBase.php
@@ -45,7 +45,7 @@ abstract class WwPublishTestBase extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('file');
     $this->installEntitySchema('user');
diff --git a/ww_publish.module b/ww_publish.module
index ebfd9fc..ad74e38 100644
--- a/ww_publish.module
+++ b/ww_publish.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\field\FieldConfigInterface;
 /**
  * @file
  * The module enables that the WoodWing Studio publishes nodes.
@@ -50,7 +51,7 @@ function ww_publish_help($route_name, RouteMatchInterface $route_match) {
  * Implements hook_form_FORM_ID_alter() for the field config edit form.
  */
 function ww_publish_form_field_config_edit_form_alter(&$form, FormStateInterface $form_state) {
-  /** @var \Drupal\field\FieldConfigInterface $fieldEntity */
+  /** @var FieldConfigInterface $fieldEntity */
   $fieldEntity = $form_state->getFormObject()->getEntity();
 
   $description = t('Identifier for the related field in WoodWing Studio.');
@@ -248,9 +249,9 @@ function ww_publish_cron() {
     ->range(0, 50);
   $snsMessageIds = $query->execute();
 
-  /** @var \Drupal\ww_publish\Job $job */
+  /** @var Job $job */
   $job = \Drupal::service('ww_publish.job');
-  /** @var \Drupal\ww_publish\Entity\SnsMessageEntityInterface $snsMessageEntity */
+  /** @var SnsMessageEntityInterface $snsMessageEntity */
   foreach ($snsMessageIds as $snsMessageId) {
     try {
       $job->publishArticle($snsMessageId);
