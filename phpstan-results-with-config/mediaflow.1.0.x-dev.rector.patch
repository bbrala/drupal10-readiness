diff --git a/src/Controller/MediaflowController.php b/src/Controller/MediaflowController.php
index e43e61e..b28deb8 100755
--- a/src/Controller/MediaflowController.php
+++ b/src/Controller/MediaflowController.php
@@ -4,6 +4,7 @@
 namespace Drupal\mediaflow\Controller;
 
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ -18,20 +19,20 @@ use Symfony\Component\HttpFoundation\JsonResponse;
 class MediaflowController implements ContainerInjectionInterface {
 
   /**
-   * @var \Drupal\mediaflow\Service\UsageManager
+   * @var UsageManager
    */
   private $usageManager;
 
   /**
-   * @var \Drupal\media\MediaStorage
+   * @var MediaStorage
    */
   private $mediaStorage;
 
   /**
    * Constructs an MediaFilterController instance.
    *
-   * @param \Drupal\mediaflow\Service\UsageManager $usage_manager
-   * @param \Drupal\media\MediaStorage $media_storage
+   * @param UsageManager $usage_manager
+   * @param MediaStorage $media_storage
    *   The media storage.
    */
   public function __construct(UsageManager $usage_manager, MediaStorage $media_storage) {
@@ -47,8 +48,8 @@ class MediaflowController implements ContainerInjectionInterface {
   }
 
   /**
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @return JsonResponse
+   * @throws EntityStorageException
    */
   public function addMedia() {
     $request = Drupal::request();
@@ -60,7 +61,7 @@ class MediaflowController implements ContainerInjectionInterface {
     /** @var MediaType $media_type */
     $media_type = MediaType::load($media_type_id);
     $field_name = $media_type->getSource()->getSourceFieldDefinition($media_type)->getName();
-    /** @var \Drupal\media\Entity\Media $media */
+    /** @var Media $media */
     $media = $this->mediaStorage->create([
       'bundle' => $media_type->id(),
       $field_name => $mediaflow_id,
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index a472821..591d4dd 100755
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -1,6 +1,7 @@
 <?php
 namespace Drupal\mediaflow\Form;
 
+use Drupal\mediaflow\Service\MediaflowFetcher;
 use Drupal;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -68,7 +69,7 @@ class SettingsForm extends ConfigFormBase {
       '#options' => $this->methodOptions(),
     ];
 
-    /** @var \Drupal\mediaflow\Service\MediaflowFetcher $fetcher */
+    /** @var MediaflowFetcher $fetcher */
     $fetcher = Drupal::service('mediaflow.fetcher');
     $status = $fetcher->renewAccessToken();
 
diff --git a/src/Plugin/CKEditorPlugin/Mediaflow.php b/src/Plugin/CKEditorPlugin/Mediaflow.php
index 7e846cd..ba39384 100755
--- a/src/Plugin/CKEditorPlugin/Mediaflow.php
+++ b/src/Plugin/CKEditorPlugin/Mediaflow.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\mediaflow\Plugin\CKEditorPlugin;
 
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal;
 use Drupal\ckeditor\Annotation\CKEditorPlugin;
 use Drupal\ckeditor\CKEditorPluginBase;
@@ -30,14 +31,14 @@ class Mediaflow extends CKEditorPluginBase implements ContainerFactoryPluginInte
   /**
    * The module extension list.
    *
-   * @var \Drupal\Core\Extension\ModuleExtensionList
+   * @var ModuleExtensionList
    */
   protected $moduleExtensionList;
 
   /**
    * The media type entity storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $mediaTypeStorage;
 
@@ -50,9 +51,9 @@ class Mediaflow extends CKEditorPluginBase implements ContainerFactoryPluginInte
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Extension\ModuleExtensionList $extension_list_module
+   * @param ModuleExtensionList $extension_list_module
    *   The module extension list.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, ModuleExtensionList $extension_list_module, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Plugin/Field/FieldFormatter/MediaflowDefaultFormatter.php b/src/Plugin/Field/FieldFormatter/MediaflowDefaultFormatter.php
index 993e5f6..be1ad5a 100644
--- a/src/Plugin/Field/FieldFormatter/MediaflowDefaultFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/MediaflowDefaultFormatter.php
@@ -35,12 +35,12 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class MediaflowDefaultFormatter extends FormatterBase {
 
   /**
-   * @var \Drupal\mediaflow\Service\UsageManager
+   * @var UsageManager
    */
   protected $usageManager;
 
   /**
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
@@ -51,7 +51,7 @@ class MediaflowDefaultFormatter extends FormatterBase {
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ -61,11 +61,11 @@ class MediaflowDefaultFormatter extends FormatterBase {
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $image_style_storage
+   * @param EntityStorageInterface $image_style_storage
    *   The image style storage.
-   * @param \Drupal\mediaflow\Service\UsageManager $mediaflow_usage_manager
+   * @param UsageManager $mediaflow_usage_manager
    */
   public function __construct(
     $plugin_id,
diff --git a/src/Plugin/Field/FieldFormatter/MediaflowFormatter.php b/src/Plugin/Field/FieldFormatter/MediaflowFormatter.php
index 7e33403..799c418 100755
--- a/src/Plugin/Field/FieldFormatter/MediaflowFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/MediaflowFormatter.php
@@ -35,12 +35,12 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class MediaflowFormatter extends FormatterBase {
 
   /**
-   * @var \Drupal\mediaflow\Service\UsageManager
+   * @var UsageManager
    */
   protected $usageManager;
 
   /**
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
@@ -51,7 +51,7 @@ class MediaflowFormatter extends FormatterBase {
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ -61,11 +61,11 @@ class MediaflowFormatter extends FormatterBase {
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $image_style_storage
+   * @param EntityStorageInterface $image_style_storage
    *   The image style storage.
-   * @param \Drupal\mediaflow\Service\UsageManager $mediaflow_usage_manager
+   * @param UsageManager $mediaflow_usage_manager
    */
   public function __construct(
     $plugin_id,
diff --git a/src/Plugin/Field/FieldWidget/MediaflowDefaultWidget.php b/src/Plugin/Field/FieldWidget/MediaflowDefaultWidget.php
index a75e76b..7a0961f 100644
--- a/src/Plugin/Field/FieldWidget/MediaflowDefaultWidget.php
+++ b/src/Plugin/Field/FieldWidget/MediaflowDefaultWidget.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\mediaflow\Plugin\Field\FieldWidget;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Field\Annotation\FieldWidget;
@@ -49,17 +50,17 @@ class MediaflowDefaultWidget extends StringTextfieldWidget {
   /**
    * The mediaflow settings config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
-   * @var \Drupal\mediaflow\Service\UsageManager
+   * @var UsageManager
    */
   protected $usageManager;
 
   /**
-   * @var \Drupal\image\ImageStyleStorageInterface
+   * @var ImageStyleStorageInterface
    */
   protected $imageStyleStorage;
 
@@ -172,7 +173,7 @@ class MediaflowDefaultWidget extends StringTextfieldWidget {
   }
 
   /**
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    * @param $langcode
    *
    * @return array
diff --git a/src/Plugin/Field/FieldWidget/MediaflowWidget.php b/src/Plugin/Field/FieldWidget/MediaflowWidget.php
index b6dad9d..08e8383 100755
--- a/src/Plugin/Field/FieldWidget/MediaflowWidget.php
+++ b/src/Plugin/Field/FieldWidget/MediaflowWidget.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\mediaflow\Plugin\Field\FieldWidget;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Field\Annotation\FieldWidget;
@@ -49,17 +50,17 @@ class MediaflowWidget extends StringTextfieldWidget {
   /**
    * The mediaflow settings config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
-   * @var \Drupal\mediaflow\Service\UsageManager
+   * @var UsageManager
    */
   protected $usageManager;
 
   /**
-   * @var \Drupal\image\ImageStyleStorageInterface
+   * @var ImageStyleStorageInterface
    */
   protected $imageStyleStorage;
 
@@ -159,7 +160,7 @@ class MediaflowWidget extends StringTextfieldWidget {
   }
 
   /**
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    * @param $langcode
    *
    * @return array
diff --git a/src/Plugin/media/Source/Mediaflow.php b/src/Plugin/media/Source/Mediaflow.php
index 7840fb3..6c97eaf 100755
--- a/src/Plugin/media/Source/Mediaflow.php
+++ b/src/Plugin/media/Source/Mediaflow.php
@@ -46,7 +46,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class Mediaflow extends MediaSourceBase implements MediaSourceInterface {
 
   /**
-   * @var \Drupal\mediaflow\Service\UsageManager
+   * @var UsageManager
    */
   protected $usageManager;
 
@@ -59,13 +59,13 @@ class Mediaflow extends MediaSourceBase implements MediaSourceInterface {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_manager
+   * @param FieldTypePluginManagerInterface $field_type_manager
    *   The field type plugin manager service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, ConfigFactoryInterface $config_factory, FieldTypePluginManagerInterface $field_type_manager, UsageManager $usage_manager) {
@@ -112,7 +112,7 @@ class Mediaflow extends MediaSourceBase implements MediaSourceInterface {
   }
 
   /**
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    * @param string $attribute_name
    *
    * @return mixed|string|void|null
diff --git a/src/Service/MediaflowFetcher.php b/src/Service/MediaflowFetcher.php
index 808c558..d3f69d3 100755
--- a/src/Service/MediaflowFetcher.php
+++ b/src/Service/MediaflowFetcher.php
@@ -3,6 +3,9 @@
 
 namespace Drupal\mediaflow\Service;
 
+use Drupal\Core\Config\Config;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\file\Entity\File;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\DependencyInjection\ServiceProviderBase;
@@ -20,28 +23,28 @@ class MediaflowFetcher extends ServiceProviderBase {
   /**
    * The HTTP client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $client;
 
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
-   * @var \Drupal\Core\Config\Config|\Drupal\Core\Config\ImmutableConfig
+   * @var Config|ImmutableConfig
    */
   private $settings;
 
   /**
    * Constructor.
    *
-   * @param \GuzzleHttp\Client $client
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param Client $client
+   * @param ConfigFactory $config_factory
+   * @param FileSystemInterface $file_system
    */
   public function __construct(
     Client $client,
@@ -56,8 +59,7 @@ class MediaflowFetcher extends ServiceProviderBase {
 
   /**
    * @param $data
-
-   * @return \Drupal\file\Entity\File|false
+   * @return File|false
    */
   public function downloadFile($data) {
     $file = NULL;
@@ -71,7 +73,7 @@ class MediaflowFetcher extends ServiceProviderBase {
         $file_data = $response->getBody()->getContents();
         $directory = 'public://mediaflow/';
         $this->fileSystem->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY);
-        $file = file_save_data($file_data, $directory . $filename, FileSystemInterface::EXISTS_REPLACE);
+        $file = \Drupal::service('file.repository')->writeData($file_data, $directory . $filename, FileSystemInterface::EXISTS_REPLACE);
       }
     }
     return $file;
diff --git a/src/Service/UsageManager.php b/src/Service/UsageManager.php
index c699aae..5bc0f11 100755
--- a/src/Service/UsageManager.php
+++ b/src/Service/UsageManager.php
@@ -3,6 +3,11 @@
 
 namespace Drupal\mediaflow\Service;
 
+use Drupal\Core\Database\StatementInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
+use Drupal\Core\Field\EntityReferenceFieldItemList;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\DependencyInjection\ServiceProviderBase;
 use Drupal\Core\Entity\EntityInterface;
@@ -33,40 +38,40 @@ class UsageManager extends ServiceProviderBase {
   ];
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
-   * @var \Drupal\mediaflow\Service\MediaflowFetcher
+   * @var MediaflowFetcher
    */
   private $fetcher;
 
   /**
    * Base Database API class.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   private $database;
 
   /**
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   private $entityFieldManager;
 
   /**
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   private $moduleHandler;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManager $entity_field_manager
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Database\Connection $database
-   * @param \Drupal\mediaflow\Service\MediaflowFetcher $fetcher
-   * @param \Drupal\Core\Extension\ModuleHandler $module_handler
+   * @param EntityFieldManager $entity_field_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param Connection $database
+   * @param MediaflowFetcher $fetcher
+   * @param ModuleHandler $module_handler
    */
   public function __construct(
     EntityFieldManager $entity_field_manager,
@@ -94,7 +99,7 @@ class UsageManager extends ServiceProviderBase {
   /**
    * @param $data
    *
-   * @return \Drupal\Core\Database\StatementInterface|false|int|string|null
+   * @return StatementInterface|false|int|string|null
    */
   public function addMedia($data) {
 
@@ -160,7 +165,7 @@ class UsageManager extends ServiceProviderBase {
   }
 
   /**
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    */
   public function onEntityUpdate(EntityInterface $entity) {
     /** @var NodeInterface[] $nodes */
@@ -201,7 +206,7 @@ class UsageManager extends ServiceProviderBase {
   }
 
   /**
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    */
   public function onEntityDelete(EntityInterface $entity) {
     /** @var NodeInterface[] $nodes */
@@ -243,7 +248,7 @@ class UsageManager extends ServiceProviderBase {
    * Takes an entity being altered and discovers what files and what nodes
    * are affected by the change.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
    * @return array
    */
@@ -264,11 +269,11 @@ class UsageManager extends ServiceProviderBase {
   /**
    * Finds any files nested in this node.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *
-   * @return array|\Drupal\Core\Entity\EntityInterface[]
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return array|EntityInterface[]
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function mediaInNode(NodeInterface $node) {
     $media = [];
@@ -287,11 +292,11 @@ class UsageManager extends ServiceProviderBase {
   /**
    * Finds any nodes containing given media.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return EntityInterface[]
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function nodesContainingMedia(MediaInterface $media) {
     $nodes = [];
@@ -310,15 +315,15 @@ class UsageManager extends ServiceProviderBase {
   /**
    * Finds any entities containing this entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param $entity_type
    *
-   * @return array|\Drupal\Core\Entity\EntityInterface[]
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return array|EntityInterface[]
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function getReferencingEntities(EntityInterface $entity, $entity_type) {
-    /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface[] $fieldDefinitions */
+    /** @var FieldStorageDefinitionInterface[] $fieldDefinitions */
     $fieldDefinitions = $this->entityFieldManager->getFieldStorageDefinitions($entity_type);
     $reference_fields = array_filter($fieldDefinitions, function ($definition) use ($entity) {
       return in_array($definition->getType(), self::REFERENCE_FIELD_TYPES)
@@ -342,15 +347,15 @@ class UsageManager extends ServiceProviderBase {
   /**
    * Finds any entities with this media embedded in it's wysiwyg fields.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param $entity_type
    *
-   * @return array|\Drupal\Core\Entity\EntityInterface[]
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return array|EntityInterface[]
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function getEntitiesWithEmbededMedia(EntityInterface $entity, $entity_type) {
-    /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface[] $fieldDefinitions */
+    /** @var FieldStorageDefinitionInterface[] $fieldDefinitions */
     $fieldDefinitions = $this->entityFieldManager->getFieldStorageDefinitions($entity_type);
     $reference_fields = array_filter($fieldDefinitions, function ($definition) use ($entity) {
       return in_array($definition->getType(), self::MEDIA_EMBED_FIELD_TYPES);
@@ -374,10 +379,10 @@ class UsageManager extends ServiceProviderBase {
   /**
    * Finds any entities nested in this entity.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    * @param $entity_type
    *
-   * @return array|\Drupal\Core\Entity\EntityInterface[]
+   * @return array|EntityInterface[]
    */
   private function getReferencedEntities(FieldableEntityInterface $entity, $entity_type) {
     $reference_fields = array_filter($entity->getFieldDefinitions(), function ($definition) use ($entity_type) {
@@ -392,7 +397,7 @@ class UsageManager extends ServiceProviderBase {
     foreach ($reference_fields as $definition) {
       $name = $definition->getName();
       if ($entity->hasField($name)) {
-        /** @var \Drupal\Core\Field\EntityReferenceFieldItemList $field_item */
+        /** @var EntityReferenceFieldItemList $field_item */
         $field_item = $entity->get($name);
         array_push($targets, ...$field_item->referencedEntities());
       }
@@ -403,11 +408,11 @@ class UsageManager extends ServiceProviderBase {
   /**
    * Finds any media embedded in wysiwyg fields in this entity.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *
-   * @return array|\Drupal\Core\Entity\EntityInterface[]
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return array|EntityInterface[]
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function getEmbeddedMediaEntities(FieldableEntityInterface $entity) {
     // Find field that may have embedded media.
