diff --git a/event_records.api.php b/event_records.api.php
index 6e3165b..1cc33a7 100644
--- a/event_records.api.php
+++ b/event_records.api.php
@@ -1,22 +1,22 @@
 <?php
 
+use Drupal\event_records\EventRecordInterface;
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
 /**
  * @file
  * Hooks specific to the Event Records module.
  */
-
 /**
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Define a string representation for the given event record.
  *
  * In case the hook implementation returns an empty string, a fallback value
  * will be generated, or another module might generate the value.
  *
- * @param \Drupal\event_records\EventRecordInterface $event_record
+ * @param EventRecordInterface $event_record
  *   The event record.
  * @param string $string
  *   The current value of the string representation.
@@ -26,7 +26,7 @@
  *
  * @see \Drupal\event_records\EventRecordInterface::getStringRepresentation()
  */
-function hook_event_record_get_string_representation(\Drupal\event_records\EventRecordInterface $event_record, $string) {
+function hook_event_record_get_string_representation(EventRecordInterface $event_record, $string) {
   if ($event_record->isNew()) {
     return 'NEW - ' . $event_record->get('my_custom_field')->value;
   }
@@ -41,10 +41,10 @@ function hook_event_record_get_string_representation(\Drupal\event_records\Event
  * @param array &$categories
  *   The current list of categories. Keyed by machine name, values are
  *   human-readable and translatable labels.
- * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
+ * @param FieldStorageDefinitionInterface $definition
  *   The according field storage definition.
  */
-function hook_event_record_categories_alter(array &$categories, \Drupal\Core\Field\FieldStorageDefinitionInterface $definition) {
+function hook_event_record_categories_alter(array &$categories, FieldStorageDefinitionInterface $definition) {
   // Add a "bubble" category.
   $categories['bubble'] = t('Bubble');
 }
diff --git a/event_records.module b/event_records.module
index 0507176..6b52cc1 100644
--- a/event_records.module
+++ b/event_records.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\event_records\EventRecordInterface;
 /**
  * @file
  * Provides an event record entity type.
@@ -24,7 +25,7 @@ function event_records_theme() {
  */
 function event_records_theme_suggestions_event_record(array $variables) {
   $suggestions = [];
-  /** @var \Drupal\event_records\EventRecordInterface $event_record */
+  /** @var EventRecordInterface $event_record */
   $event_record = $variables['elements']['#event_record'];
   $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
 
@@ -40,7 +41,7 @@ function event_records_theme_suggestions_event_record(array $variables) {
  */
 function event_records_inline_entity_form_entity_form_alter(array &$entity_form, FormStateInterface &$form_state) {
   if (isset($entity_form['#entity_type']) && $entity_form['#entity_type'] === 'event_record') {
-    /** @var \Drupal\event_records\EventRecordInterface $event_record */
+    /** @var EventRecordInterface $event_record */
     $event_record = $entity_form['#entity'];
     $form_class = $event_record->getEntityType()->getFormClass('default');
     $entity_form['#entity_builders']['apply_label_pattern'] = [
diff --git a/event_records.tokens.inc b/event_records.tokens.inc
index efde668..247f2b5 100644
--- a/event_records.tokens.inc
+++ b/event_records.tokens.inc
@@ -67,7 +67,7 @@ function event_records_tokens($type, $tokens, array $data, array $options, Bubbl
 
   $token_service = \Drupal::token();
 
-  /** @var \Drupal\event_records\EventRecordInterface $event_record */
+  /** @var EventRecordInterface $event_record */
   $event_record = $data['event_record'];
 
   if (isset($options['langcode'])) {
diff --git a/modules/event_records_custom_data/event_records_custom_data.module b/modules/event_records_custom_data/event_records_custom_data.module
index b8a6b82..be89dfa 100644
--- a/modules/event_records_custom_data/event_records_custom_data.module
+++ b/modules/event_records_custom_data/event_records_custom_data.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\event_records\EventRecordTypeInterface;
+use Drupal\event_records\EventRecordInterface;
 /**
  * @file
  * Event Records: Custom Data operations module file.
@@ -24,7 +26,7 @@ function event_records_custom_data_custom_data_insert(CustomDataInterface $custo
   $etm = \Drupal::entityTypeManager();
   $user = $etm->getStorage('user')->load(\Drupal::currentUser()->id());
 
-  /** @var \Drupal\event_records\EventRecordTypeInterface $er_type */
+  /** @var EventRecordTypeInterface $er_type */
   if (!($er_type = $etm->getStorage('event_record_type')->load('entity_saved_custom_data'))) {
     return;
   }
@@ -44,7 +46,7 @@ function event_records_custom_data_custom_data_insert(CustomDataInterface $custo
     'entity_values' => EventRecordsEntity::toJson($custom_data),
     'entity_custom_data' => [$custom_data],
   ];
-  /** @var \Drupal\event_records\EventRecordInterface $event_record */
+  /** @var EventRecordInterface $event_record */
   $event_record = $etm->getStorage('event_record')->create($values);
   $event_record->applyLabelPattern(['custom_data' => $custom_data, 'user' => $user]);
   $event_record->save();
@@ -57,7 +59,7 @@ function event_records_custom_data_custom_data_update(CustomDataInterface $custo
   $etm = \Drupal::entityTypeManager();
   $user = $etm->getStorage('user')->load(\Drupal::currentUser()->id());
 
-  /** @var \Drupal\event_records\EventRecordTypeInterface $er_type */
+  /** @var EventRecordTypeInterface $er_type */
   if (!($er_type = $etm->getStorage('event_record_type')->load('entity_saved_custom_data'))) {
     return;
   }
@@ -78,7 +80,7 @@ function event_records_custom_data_custom_data_update(CustomDataInterface $custo
     'entity_original_values' => EventRecordsEntity::toJson($custom_data->original),
     'entity_custom_data' => [$custom_data],
   ];
-  /** @var \Drupal\event_records\EventRecordInterface $event_record */
+  /** @var EventRecordInterface $event_record */
   $event_record = $etm->getStorage('event_record')->create($values);
   $event_record->applyLabelPattern(['custom_data' => $custom_data, 'user' => $user]);
   $event_record->save();
@@ -91,7 +93,7 @@ function event_records_custom_data_custom_data_delete(CustomDataInterface $custo
   $etm = \Drupal::entityTypeManager();
   $user = $etm->getStorage('user')->load(\Drupal::currentUser()->id());
 
-  /** @var \Drupal\event_records\EventRecordTypeInterface $er_type */
+  /** @var EventRecordTypeInterface $er_type */
   if (!($er_type = $etm->getStorage('event_record_type')->load('entity_deleted_custom_data'))) {
     return;
   }
@@ -110,7 +112,7 @@ function event_records_custom_data_custom_data_delete(CustomDataInterface $custo
     'entity_langcode' => $custom_data->language()->getId(),
     'entity_values' => EventRecordsEntity::toJson($custom_data),
   ];
-  /** @var \Drupal\event_records\EventRecordInterface $event_record */
+  /** @var EventRecordInterface $event_record */
   $event_record = $etm->getStorage('event_record')->create($values);
   $event_record->applyLabelPattern(['custom_data' => $custom_data, 'user' => $user]);
   $event_record->save();
diff --git a/modules/event_records_entity/src/EventRecordsEntity.php b/modules/event_records_entity/src/EventRecordsEntity.php
index 9b4a00f..791dcd6 100644
--- a/modules/event_records_entity/src/EventRecordsEntity.php
+++ b/modules/event_records_entity/src/EventRecordsEntity.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\event_records_entity;
 
+use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
+use Symfony\Component\Serializer\Serializer;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\event_records\EventRecordInterface;
@@ -14,9 +16,9 @@ final class EventRecordsEntity {
   /**
    * Returns a list of entity types for an entity type field.
    *
-   * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
+   * @param FieldStorageDefinitionInterface $definition
    *   The according field storage definition.
-   * @param \Drupal\Core\Entity\EntityInterface|null $entity
+   * @param EntityInterface|null $entity
    *   The according entity, if available.
    *
    * @return array
@@ -53,9 +55,9 @@ final class EventRecordsEntity {
   /**
    * Returns a list of entity types for an entity type field.
    *
-   * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
+   * @param FieldStorageDefinitionInterface $definition
    *   The according field storage definition.
-   * @param \Drupal\Core\Entity\EntityInterface|null $entity
+   * @param EntityInterface|null $entity
    *   The according entity, if available.
    *
    * @return array
@@ -64,7 +66,7 @@ final class EventRecordsEntity {
    */
   public static function bundles(FieldStorageDefinitionInterface $definition, ?EntityInterface $entity = NULL): array {
     $etm = \Drupal::entityTypeManager();
-    /** @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info */
+    /** @var EntityTypeBundleInfoInterface $bundle_info */
     $bundle_info = \Drupal::service('entity_type.bundle.info');
     if ($entity instanceof EventRecordInterface) {
       $type_id = $entity->bundle();
@@ -102,7 +104,7 @@ final class EventRecordsEntity {
    *   The JSON string.
    */
   public static function toJson(EntityInterface $entity): string {
-    /** @var \Symfony\Component\Serializer\Serializer $serializer */
+    /** @var Serializer $serializer */
     $serializer = \Drupal::service('serializer');
     return $serializer->serialize($entity, 'json', ['json_encode_options' => JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES]);
   }
diff --git a/modules/event_records_field_bundle/event_records_field_bundle.module b/modules/event_records_field_bundle/event_records_field_bundle.module
index e4fa5cc..6e3f19d 100644
--- a/modules/event_records_field_bundle/event_records_field_bundle.module
+++ b/modules/event_records_field_bundle/event_records_field_bundle.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\event_records\EventRecordTypeInterface;
+use Drupal\event_records\EventRecordInterface;
 /**
  * @file
  * Event Records: Field Bundle operations module file.
@@ -24,7 +26,7 @@ function event_records_field_bundle_field_bundle_insert(FieldBundleInterface $fi
   $etm = \Drupal::entityTypeManager();
   $user = $etm->getStorage('user')->load(\Drupal::currentUser()->id());
 
-  /** @var \Drupal\event_records\EventRecordTypeInterface $er_type */
+  /** @var EventRecordTypeInterface $er_type */
   if (!($er_type = $etm->getStorage('event_record_type')->load('entity_saved_field_bundle'))) {
     return;
   }
@@ -44,7 +46,7 @@ function event_records_field_bundle_field_bundle_insert(FieldBundleInterface $fi
     'entity_values' => EventRecordsEntity::toJson($field_bundle),
     'entity_field_bundle' => [$field_bundle],
   ];
-  /** @var \Drupal\event_records\EventRecordInterface $event_record */
+  /** @var EventRecordInterface $event_record */
   $event_record = $etm->getStorage('event_record')->create($values);
   $event_record->applyLabelPattern(['bundle' => $field_bundle, 'user' => $user]);
   $event_record->save();
@@ -57,7 +59,7 @@ function event_records_field_bundle_field_bundle_update(FieldBundleInterface $fi
   $etm = \Drupal::entityTypeManager();
   $user = $etm->getStorage('user')->load(\Drupal::currentUser()->id());
 
-  /** @var \Drupal\event_records\EventRecordTypeInterface $er_type */
+  /** @var EventRecordTypeInterface $er_type */
   if (!($er_type = $etm->getStorage('event_record_type')->load('entity_saved_field_bundle'))) {
     return;
   }
@@ -78,7 +80,7 @@ function event_records_field_bundle_field_bundle_update(FieldBundleInterface $fi
     'entity_original_values' => EventRecordsEntity::toJson($field_bundle->original),
     'entity_field_bundle' => [$field_bundle],
   ];
-  /** @var \Drupal\event_records\EventRecordInterface $event_record */
+  /** @var EventRecordInterface $event_record */
   $event_record = $etm->getStorage('event_record')->create($values);
   $event_record->applyLabelPattern(['bundle' => $field_bundle, 'user' => $user]);
   $event_record->save();
@@ -91,7 +93,7 @@ function event_records_field_bundle_field_bundle_delete(FieldBundleInterface $fi
   $etm = \Drupal::entityTypeManager();
   $user = $etm->getStorage('user')->load(\Drupal::currentUser()->id());
 
-  /** @var \Drupal\event_records\EventRecordTypeInterface $er_type */
+  /** @var EventRecordTypeInterface $er_type */
   if (!($er_type = $etm->getStorage('event_record_type')->load('entity_deleted_field_bundle'))) {
     return;
   }
@@ -110,7 +112,7 @@ function event_records_field_bundle_field_bundle_delete(FieldBundleInterface $fi
     'entity_langcode' => $field_bundle->language()->getId(),
     'entity_values' => EventRecordsEntity::toJson($field_bundle),
   ];
-  /** @var \Drupal\event_records\EventRecordInterface $event_record */
+  /** @var EventRecordInterface $event_record */
   $event_record = $etm->getStorage('event_record')->create($values);
   $event_record->applyLabelPattern(['bundle' => $field_bundle, 'user' => $user]);
   $event_record->save();
diff --git a/modules/event_records_node/event_records_node.module b/modules/event_records_node/event_records_node.module
index beadd16..3aa6ec1 100644
--- a/modules/event_records_node/event_records_node.module
+++ b/modules/event_records_node/event_records_node.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\event_records\EventRecordTypeInterface;
+use Drupal\event_records\EventRecordInterface;
 /**
  * @file
  * Event Records: Node operations module file.
@@ -24,7 +26,7 @@ function event_records_node_node_insert(NodeInterface $node) {
   $etm = \Drupal::entityTypeManager();
   $user = $etm->getStorage('user')->load(\Drupal::currentUser()->id());
 
-  /** @var \Drupal\event_records\EventRecordTypeInterface $er_type */
+  /** @var EventRecordTypeInterface $er_type */
   if (!($er_type = $etm->getStorage('event_record_type')->load('entity_saved_node'))) {
     return;
   }
@@ -44,7 +46,7 @@ function event_records_node_node_insert(NodeInterface $node) {
     'entity_values' => EventRecordsEntity::toJson($node),
     'entity_node' => [$node],
   ];
-  /** @var \Drupal\event_records\EventRecordInterface $event_record */
+  /** @var EventRecordInterface $event_record */
   $event_record = $etm->getStorage('event_record')->create($values);
   $event_record->applyLabelPattern(['node' => $node, 'user' => $user]);
   $event_record->save();
@@ -57,7 +59,7 @@ function event_records_node_node_update(NodeInterface $node) {
   $etm = \Drupal::entityTypeManager();
   $user = $etm->getStorage('user')->load(\Drupal::currentUser()->id());
 
-  /** @var \Drupal\event_records\EventRecordTypeInterface $er_type */
+  /** @var EventRecordTypeInterface $er_type */
   if (!($er_type = $etm->getStorage('event_record_type')->load('entity_saved_node'))) {
     return;
   }
@@ -78,7 +80,7 @@ function event_records_node_node_update(NodeInterface $node) {
     'entity_original_values' => EventRecordsEntity::toJson($node->original),
     'entity_node' => [$node],
   ];
-  /** @var \Drupal\event_records\EventRecordInterface $event_record */
+  /** @var EventRecordInterface $event_record */
   $event_record = $etm->getStorage('event_record')->create($values);
   $event_record->applyLabelPattern(['node' => $node, 'user' => $user]);
   $event_record->save();
@@ -91,7 +93,7 @@ function event_records_node_node_delete(NodeInterface $node) {
   $etm = \Drupal::entityTypeManager();
   $user = $etm->getStorage('user')->load(\Drupal::currentUser()->id());
 
-  /** @var \Drupal\event_records\EventRecordTypeInterface $er_type */
+  /** @var EventRecordTypeInterface $er_type */
   if (!($er_type = $etm->getStorage('event_record_type')->load('entity_deleted_node'))) {
     return;
   }
@@ -110,7 +112,7 @@ function event_records_node_node_delete(NodeInterface $node) {
     'entity_langcode' => $node->language()->getId(),
     'entity_values' => EventRecordsEntity::toJson($node),
   ];
-  /** @var \Drupal\event_records\EventRecordInterface $event_record */
+  /** @var EventRecordInterface $event_record */
   $event_record = $etm->getStorage('event_record')->create($values);
   $event_record->applyLabelPattern(['node' => $node, 'user' => $user]);
   $event_record->save();
diff --git a/modules/event_records_storage/event_records_storage.module b/modules/event_records_storage/event_records_storage.module
index 348bceb..65cc6a3 100644
--- a/modules/event_records_storage/event_records_storage.module
+++ b/modules/event_records_storage/event_records_storage.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\event_records\EventRecordTypeInterface;
+use Drupal\event_records\EventRecordInterface;
 /**
  * @file
  * Event Records: Storage Entities module file.
@@ -24,7 +26,7 @@ function event_records_storage_storage_insert(StorageInterface $storage) {
   $etm = \Drupal::entityTypeManager();
   $user = $etm->getStorage('user')->load(\Drupal::currentUser()->id());
 
-  /** @var \Drupal\event_records\EventRecordTypeInterface $er_type */
+  /** @var EventRecordTypeInterface $er_type */
   if (!($er_type = $etm->getStorage('event_record_type')->load('entity_saved_storage'))) {
     return;
   }
@@ -44,7 +46,7 @@ function event_records_storage_storage_insert(StorageInterface $storage) {
     'entity_values' => EventRecordsEntity::toJson($storage),
     'entity_storage' => [$storage],
   ];
-  /** @var \Drupal\event_records\EventRecordInterface $event_record */
+  /** @var EventRecordInterface $event_record */
   $event_record = $etm->getStorage('event_record')->create($values);
   $event_record->applyLabelPattern(['storage' => $storage, 'user' => $user]);
   $event_record->save();
@@ -57,7 +59,7 @@ function event_records_storage_storage_update(StorageInterface $storage) {
   $etm = \Drupal::entityTypeManager();
   $user = $etm->getStorage('user')->load(\Drupal::currentUser()->id());
 
-  /** @var \Drupal\event_records\EventRecordTypeInterface $er_type */
+  /** @var EventRecordTypeInterface $er_type */
   if (!($er_type = $etm->getStorage('event_record_type')->load('entity_saved_storage'))) {
     return;
   }
@@ -78,7 +80,7 @@ function event_records_storage_storage_update(StorageInterface $storage) {
     'entity_original_values' => EventRecordsEntity::toJson($storage->original),
     'entity_storage' => [$storage],
   ];
-  /** @var \Drupal\event_records\EventRecordInterface $event_record */
+  /** @var EventRecordInterface $event_record */
   $event_record = $etm->getStorage('event_record')->create($values);
   $event_record->applyLabelPattern(['storage' => $storage, 'user' => $user]);
   $event_record->save();
@@ -91,7 +93,7 @@ function event_records_storage_storage_delete(StorageInterface $storage) {
   $etm = \Drupal::entityTypeManager();
   $user = $etm->getStorage('user')->load(\Drupal::currentUser()->id());
 
-  /** @var \Drupal\event_records\EventRecordTypeInterface $er_type */
+  /** @var EventRecordTypeInterface $er_type */
   if (!($er_type = $etm->getStorage('event_record_type')->load('entity_deleted_storage'))) {
     return;
   }
@@ -110,7 +112,7 @@ function event_records_storage_storage_delete(StorageInterface $storage) {
     'entity_langcode' => $storage->language()->getId(),
     'entity_values' => EventRecordsEntity::toJson($storage),
   ];
-  /** @var \Drupal\event_records\EventRecordInterface $event_record */
+  /** @var EventRecordInterface $event_record */
   $event_record = $etm->getStorage('event_record')->create($values);
   $event_record->applyLabelPattern(['storage' => $storage, 'user' => $user]);
   $event_record->save();
diff --git a/modules/event_records_taxonomy/event_records_taxonomy.module b/modules/event_records_taxonomy/event_records_taxonomy.module
index 8c0cc28..9923f31 100644
--- a/modules/event_records_taxonomy/event_records_taxonomy.module
+++ b/modules/event_records_taxonomy/event_records_taxonomy.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\event_records\EventRecordTypeInterface;
+use Drupal\event_records\EventRecordInterface;
 /**
  * @file
  * Event Records: Taxonomy operations module file.
@@ -24,7 +26,7 @@ function event_records_taxonomy_taxonomy_term_insert(TermInterface $taxonomy_ter
   $etm = \Drupal::entityTypeManager();
   $user = $etm->getStorage('user')->load(\Drupal::currentUser()->id());
 
-  /** @var \Drupal\event_records\EventRecordTypeInterface $er_type */
+  /** @var EventRecordTypeInterface $er_type */
   if (!($er_type = $etm->getStorage('event_record_type')->load('entity_saved_taxonomy_term'))) {
     return;
   }
@@ -44,7 +46,7 @@ function event_records_taxonomy_taxonomy_term_insert(TermInterface $taxonomy_ter
     'entity_values' => EventRecordsEntity::toJson($taxonomy_term),
     'entity_taxonomy_term' => [$taxonomy_term],
   ];
-  /** @var \Drupal\event_records\EventRecordInterface $event_record */
+  /** @var EventRecordInterface $event_record */
   $event_record = $etm->getStorage('event_record')->create($values);
   $event_record->applyLabelPattern(['term' => $taxonomy_term, 'user' => $user]);
   $event_record->save();
@@ -57,7 +59,7 @@ function event_records_taxonomy_taxonomy_term_update(TermInterface $taxonomy_ter
   $etm = \Drupal::entityTypeManager();
   $user = $etm->getStorage('user')->load(\Drupal::currentUser()->id());
 
-  /** @var \Drupal\event_records\EventRecordTypeInterface $er_type */
+  /** @var EventRecordTypeInterface $er_type */
   if (!($er_type = $etm->getStorage('event_record_type')->load('entity_saved_taxonomy_term'))) {
     return;
   }
@@ -78,7 +80,7 @@ function event_records_taxonomy_taxonomy_term_update(TermInterface $taxonomy_ter
     'entity_original_values' => EventRecordsEntity::toJson($taxonomy_term->original),
     'entity_taxonomy_term' => [$taxonomy_term],
   ];
-  /** @var \Drupal\event_records\EventRecordInterface $event_record */
+  /** @var EventRecordInterface $event_record */
   $event_record = $etm->getStorage('event_record')->create($values);
   $event_record->applyLabelPattern(['term' => $taxonomy_term, 'user' => $user]);
   $event_record->save();
@@ -91,7 +93,7 @@ function event_records_taxonomy_taxonomy_term_delete(TermInterface $taxonomy_ter
   $etm = \Drupal::entityTypeManager();
   $user = $etm->getStorage('user')->load(\Drupal::currentUser()->id());
 
-  /** @var \Drupal\event_records\EventRecordTypeInterface $er_type */
+  /** @var EventRecordTypeInterface $er_type */
   if (!($er_type = $etm->getStorage('event_record_type')->load('entity_deleted_taxonomy_term'))) {
     return;
   }
@@ -110,7 +112,7 @@ function event_records_taxonomy_taxonomy_term_delete(TermInterface $taxonomy_ter
     'entity_langcode' => $taxonomy_term->language()->getId(),
     'entity_values' => EventRecordsEntity::toJson($taxonomy_term),
   ];
-  /** @var \Drupal\event_records\EventRecordInterface $event_record */
+  /** @var EventRecordInterface $event_record */
   $event_record = $etm->getStorage('event_record')->create($values);
   $event_record->applyLabelPattern(['term' => $taxonomy_term, 'user' => $user]);
   $event_record->save();
diff --git a/src/Entity/EventRecord.php b/src/Entity/EventRecord.php
index 734e3c1..df27f32 100644
--- a/src/Entity/EventRecord.php
+++ b/src/Entity/EventRecord.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\event_records\Entity;
 
+use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -221,7 +222,7 @@ class EventRecord extends ContentEntityBase implements EventRecordInterface {
 
     uasort($components, 'Drupal\Component\Utility\SortArray::sortByWeightElement');
 
-    /** @var \Drupal\Core\Datetime\DateFormatterInterface $date_formatter */
+    /** @var DateFormatterInterface $date_formatter */
     $date_formatter = \Drupal::service('date.formatter');
     $time = $this->getCreatedTime() ?: \Drupal::time()->getCurrentTime();
     $description = t('@type on @time by @user', [
@@ -280,7 +281,7 @@ class EventRecord extends ContentEntityBase implements EventRecordInterface {
       $label_pattern = $this->hasField('label_pattern') ? $this->get('label_pattern')->getString() : $this->label_pattern;
     }
     elseif ($type_id = $this->bundle()) {
-      /** @var \Drupal\event_records\EventRecordTypeInterface $type */
+      /** @var EventRecordTypeInterface $type */
       if ($type = \Drupal::entityTypeManager()->getStorage('event_record_type')->load($type_id)) {
         $label_pattern = $type->getLabelPattern();
       }
diff --git a/src/EventRecordInterface.php b/src/EventRecordInterface.php
index 3a4f91d..c6ad512 100644
--- a/src/EventRecordInterface.php
+++ b/src/EventRecordInterface.php
@@ -82,7 +82,7 @@ interface EventRecordInterface extends ContentEntityInterface {
   /**
    * Get the according event record type (i.e. the bundle as object).
    *
-   * @return \Drupal\event_records\EventRecordTypeInterface
+   * @return EventRecordTypeInterface
    *   The event record type as object.
    */
   public function getType(): EventRecordTypeInterface;
diff --git a/src/EventRecordListBuilder.php b/src/EventRecordListBuilder.php
index 1139d5c..d3bc337 100644
--- a/src/EventRecordListBuilder.php
+++ b/src/EventRecordListBuilder.php
@@ -18,27 +18,27 @@ class EventRecordListBuilder extends EntityListBuilder {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;
 
   /**
    * Constructs a new EventRecordListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
@@ -93,7 +93,7 @@ class EventRecordListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\event_records\EventRecordInterface $entity  */
+    /** @var EventRecordInterface $entity  */
     $row['id'] = $entity->id();
     $row['label'] = $entity->toLink();
     $row['uid']['data'] = [
diff --git a/src/EventRecords.php b/src/EventRecords.php
index 7868215..ae54432 100644
--- a/src/EventRecords.php
+++ b/src/EventRecords.php
@@ -12,7 +12,7 @@ final class EventRecords {
   /**
    * Returns a list of allowed event categories for a category field.
    *
-   * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
+   * @param FieldStorageDefinitionInterface $definition
    *   The according field storage definition.
    *
    * @return array
diff --git a/src/Form/EventRecordForm.php b/src/Form/EventRecordForm.php
index 3266194..e8aa686 100644
--- a/src/Form/EventRecordForm.php
+++ b/src/Form/EventRecordForm.php
@@ -27,7 +27,7 @@ class EventRecordForm extends ContentEntityForm {
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\event_records\EventRecordInterface $entity */
+    /** @var EventRecordInterface $entity */
     $entity = $this->getEntity();
     $entity->get('source')->setValue('form:' . $this->getFormId());
     $result = $entity->save();
@@ -53,11 +53,11 @@ class EventRecordForm extends ContentEntityForm {
    *
    * @param string $entity_type_id
    *   The entity type identifier.
-   * @param \Drupal\event_records\EventRecordInterface $entity
+   * @param EventRecordInterface $entity
    *   The entity updated with the submitted values.
    * @param array $form
    *   The complete form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function applyLabelPattern($entity_type_id, EventRecordInterface $entity, array $form, FormStateInterface $form_state) {
diff --git a/src/Form/EventRecordTypeForm.php b/src/Form/EventRecordTypeForm.php
index f89c8be..aa6cf87 100644
--- a/src/Form/EventRecordTypeForm.php
+++ b/src/Form/EventRecordTypeForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\event_records\Form;
 
+use Drupal\event_records\EventRecordTypeInterface;
 use Drupal\Core\Entity\BundleEntityFormBase;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -27,7 +28,7 @@ class EventRecordTypeForm extends BundleEntityFormBase {
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\event_records\EventRecordTypeInterface $event_record_type */
+    /** @var EventRecordTypeInterface $event_record_type */
     $event_record_type = $this->entity;
     if ($this->operation == 'add') {
       $form['#title'] = $this->t('Add event record type');
@@ -126,7 +127,7 @@ class EventRecordTypeForm extends BundleEntityFormBase {
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\event_records\EventRecordTypeInterface $event_record_type */
+    /** @var EventRecordTypeInterface $event_record_type */
     $event_record_type = $this->entity;
 
     $event_record_type->set('id', trim($event_record_type->id()));
@@ -153,7 +154,7 @@ class EventRecordTypeForm extends BundleEntityFormBase {
    *   Array of options ready to be used in #options.
    */
   protected function getWorkflowOptions() {
-    /** @var \Drupal\event_records\EventRecordTypeInterface $event_record_type */
+    /** @var EventRecordTypeInterface $event_record_type */
     $event_record_type = $this->entity;
     $workflow_options = [
       'status' => $event_record_type->status(),
