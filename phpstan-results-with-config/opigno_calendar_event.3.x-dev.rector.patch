diff --git a/modules/opigno_calendar_event_group/src/GroupSelectorWidget.php b/modules/opigno_calendar_event_group/src/GroupSelectorWidget.php
index 990f9cf..81ecb29 100644
--- a/modules/opigno_calendar_event_group/src/GroupSelectorWidget.php
+++ b/modules/opigno_calendar_event_group/src/GroupSelectorWidget.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\opigno_calendar_event_group;
 
+use Drupal\Core\Entity\ContentEntityFormInterface;
 use Drupal\opigno_calendar_event\CalendarEventExceptionLoggerTrait;
 use Drupal\opigno_calendar_event\CalendarEventInterface;
 use Drupal\opigno_calendar_event\CalendarEventManager;
@@ -27,23 +28,23 @@ class GroupSelectorWidget implements ContainerInjectionInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The calendar event manager variable.
    *
-   * @var \Drupal\opigno_calendar_event\CalendarEventManager
+   * @var CalendarEventManager
    */
   protected $calendarEventManager;
 
   /**
    * GroupSelectorWidget constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\opigno_calendar_event\CalendarEventManager $calendar_event_manager
+   * @param CalendarEventManager $calendar_event_manager
    *   The calendar event manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, CalendarEventManager $calendar_event_manager) {
@@ -67,13 +68,13 @@ class GroupSelectorWidget implements ContainerInjectionInterface {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function alterForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Entity\ContentEntityFormInterface $form_object */
+    /** @var ContentEntityFormInterface $form_object */
     $form_object = $form_state->getFormObject();
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $form_object->getEntity();
 
     // If the event is new, it could be shown in the calendar of the group to
@@ -112,7 +113,7 @@ class GroupSelectorWidget implements ContainerInjectionInterface {
    *   An array of selectable groups.
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   protected function addGroupPicker(array &$element, array $groups, array $form, FormStateInterface $form_state) {
@@ -130,7 +131,7 @@ class GroupSelectorWidget implements ContainerInjectionInterface {
 
     $widget = $this->calendarEventManager->getEmbeddedWidget();
     $state = $widget->getItemState($form, $form_state, $element['#delta']);
-    /** @var \Drupal\opigno_calendar_event\CalendarEventInterface $calendar_event */
+    /** @var CalendarEventInterface $calendar_event */
     $calendar_event = $state['entity'];
     $default_values = array_map(
       function ($item) {
@@ -156,7 +157,7 @@ class GroupSelectorWidget implements ContainerInjectionInterface {
   /**
    * Returns the groups the entity belongs to.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   An entity object.
    *
    * @return \Drupal\group\Entity\GroupInterface[]
@@ -188,11 +189,11 @@ class GroupSelectorWidget implements ContainerInjectionInterface {
    *
    * @param string $entity_type_id
    *   The entity type ID.
-   * @param \Drupal\opigno_calendar_event\CalendarEventInterface $calendar_event
+   * @param CalendarEventInterface $calendar_event
    *   The calendar event entity to be built.
    * @param array $element
    *   The subform element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The parent form state.
    */
   public function buildEntity($entity_type_id, CalendarEventInterface $calendar_event, array &$element, FormStateInterface $form_state) {
diff --git a/opigno_calendar_event.module b/opigno_calendar_event.module
index 1f0f040..eb13565 100644
--- a/opigno_calendar_event.module
+++ b/opigno_calendar_event.module
@@ -1,5 +1,9 @@
 <?php
 
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
+use Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 /**
  * @file
  * Main file for the "Calendar event" module.
@@ -43,7 +47,7 @@ function opigno_calendar_event_entity_field_storage_info(EntityTypeInterface $en
  *
  * {@inheritdoc}
  *
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws PluginNotFoundException
  */
 function opigno_calendar_event_opigno_calendar_event_type_insert(ConfigEntityInterface $type) {
   // @todo Clean up this once
@@ -52,7 +56,7 @@ function opigno_calendar_event_opigno_calendar_event_type_insert(ConfigEntityInt
   $entity_type_id = CalendarEventInterface::ENTITY_TYPE_ID;
   $entity_type = \Drupal::entityTypeManager()->getDefinition($entity_type_id);
   $update_manager = \Drupal::entityDefinitionUpdateManager();
-  /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface $storage_definition */
+  /** @var FieldStorageDefinitionInterface $storage_definition */
   foreach (CalendarEvent::bundleFieldDefinitions($entity_type, $bundle, []) as $storage_definition) {
     $update_manager->installFieldStorageDefinition($storage_definition->getName(), $entity_type_id, 'opigno_calendar_event', $storage_definition);
   }
@@ -63,7 +67,7 @@ function opigno_calendar_event_opigno_calendar_event_type_insert(ConfigEntityInt
  *
  * {@inheritdoc}
  *
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws PluginNotFoundException
  */
 function opigno_calendar_event_opigno_calendar_event_type_delete(ConfigEntityInterface $type) {
   // @todo Clean up this once
@@ -73,7 +77,7 @@ function opigno_calendar_event_opigno_calendar_event_type_delete(ConfigEntityInt
   $all_bundle_storage_definitions = CalendarEvent::storageFieldDefinitions($entity_type);
   $field_name = CalendarEvent::getDateFieldName($type);
   if (!isset($all_bundle_storage_definitions[$field_name])) {
-    /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $last_installed */
+    /** @var EntityLastInstalledSchemaRepositoryInterface $last_installed */
     $last_installed = \Drupal::service('entity.last_installed_schema.repository');
     $storage_definitions = $last_installed->getLastInstalledFieldStorageDefinitions($entity_type_id);
     if (isset($storage_definitions[$field_name])) {
@@ -139,7 +143,7 @@ function opigno_calendar_event_form_opigno_calendar_event_opigno_calendar_event_
 function opigno_calendar_event_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
   $form_object = $form_state->getFormObject();
   if ($form_object instanceof ContentEntityFormInterface && in_array($form_object->getOperation(), ['default', 'edit'])) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $form_object->getEntity();
     $calendar_event_manager = CalendarEventManager::get();
     $calendar_events = $calendar_event_manager->getReferencingCalendarEvents($entity);
@@ -178,13 +182,13 @@ function opigno_calendar_event_entity_view(array &$build, EntityInterface $entit
 /**
  * Implements hook_views_query_alter().
  *
- * @param \Drupal\views\ViewExecutable $view
+ * @param ViewExecutable $view
  *   View object.
- * @param \Drupal\views\Plugin\views\query\QueryPluginBase $query
+ * @param QueryPluginBase $query
  *   Query object.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function opigno_calendar_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
   if ($view->id() === 'opigno_calendar') {
diff --git a/src/CalendarEventEmbeddedDisplay.php b/src/CalendarEventEmbeddedDisplay.php
index 6908a21..28071a7 100644
--- a/src/CalendarEventEmbeddedDisplay.php
+++ b/src/CalendarEventEmbeddedDisplay.php
@@ -23,14 +23,14 @@ class CalendarEventEmbeddedDisplay {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * CalendarEventManager constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -40,9 +40,9 @@ class CalendarEventEmbeddedDisplay {
   /**
    * Builds en embedded calendar event display.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   Field definition.
-   * @param \Drupal\opigno_calendar_event\CalendarEventInterface[] $calendar_events
+   * @param CalendarEventInterface[] $calendar_events
    *   Calendar events.
    *
    * @return array
diff --git a/src/CalendarEventEmbeddedWidget.php b/src/CalendarEventEmbeddedWidget.php
index da6b019..e55649d 100644
--- a/src/CalendarEventEmbeddedWidget.php
+++ b/src/CalendarEventEmbeddedWidget.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\opigno_calendar_event;
 
+use Drupal\Core\Entity\EntityFormInterface;
+use Drupal\Core\Entity\ContentEntityFormInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
@@ -37,14 +39,14 @@ class CalendarEventEmbeddedWidget {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * CalendarEventManager constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -56,19 +58,19 @@ class CalendarEventEmbeddedWidget {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the entity reference field relating a calendar event
    *   with the entity being edited.
-   * @param \Drupal\opigno_calendar_event\CalendarEventInterface[] $calendar_events
+   * @param CalendarEventInterface[] $calendar_events
    *   An array of calendar event entities referencing the entity being edited.
    */
   public function alterForm(array &$form, FormStateInterface $form_state, FieldDefinitionInterface $field_definition, array $calendar_events) {
     $widget_state = &$this->getWidgetState($form, $form_state);
     $widget_state['field_definition'] = $field_definition;
 
-    /** @var \Drupal\Core\Entity\EntityFormInterface $form_object */
+    /** @var EntityFormInterface $form_object */
     $form_object = $form_state->getFormObject();
     $widget_state['original_label'] = $form_object->getEntity()->label();
 
@@ -85,7 +87,7 @@ class CalendarEventEmbeddedWidget {
       ];
     }
 
-    /** @var \Drupal\opigno_calendar_event\CalendarEventInterface $calendar_event */
+    /** @var CalendarEventInterface $calendar_event */
     foreach (array_values($calendar_events) as $delta => $calendar_event) {
       $elements[$delta] = [
         '#parents' => $this->getElementParents($form, $delta),
@@ -126,9 +128,9 @@ class CalendarEventEmbeddedWidget {
    *
    * @param array $element
    *   The subform element.
-   * @param \Drupal\opigno_calendar_event\CalendarEventInterface $entity
+   * @param CalendarEventInterface $entity
    *   The calendar event entity.
-   * @param \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display
+   * @param EntityFormDisplayInterface $form_display
    *   A form display object.
    */
   protected function attachFieldGroups(array &$element, CalendarEventInterface $entity, EntityFormDisplayInterface $form_display) {
@@ -154,20 +156,20 @@ class CalendarEventEmbeddedWidget {
    *
    * @param string $entity_type_id
    *   The entity type ID.
-   * @param \Drupal\opigno_calendar_event\CalendarEventInterface $calendar_event
+   * @param CalendarEventInterface $calendar_event
    *   The calendar event entity to be built.
    * @param array $element
    *   The subform element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The parent form state.
    */
   public function buildEntity($entity_type_id, CalendarEventInterface $calendar_event, array &$element, FormStateInterface $form_state) {
     $widget_state = $this->getWidgetState($form_state->getCompleteForm(), $form_state);
-    /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */
+    /** @var FieldDefinitionInterface $field_definition */
     $field_definition = $widget_state['field_definition'];
     $ref_field_name = $field_definition->getName();
 
-    /** @var \Drupal\Core\Entity\ContentEntityFormInterface $form_object */
+    /** @var ContentEntityFormInterface $form_object */
     $form_object = $form_state->getFormObject();
     $referenced_entity = $form_object->getEntity();
     $calendar_event->set($ref_field_name, $referenced_entity);
@@ -190,7 +192,7 @@ class CalendarEventEmbeddedWidget {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function validateForm(array $form, FormStateInterface $form_state) {
@@ -201,7 +203,7 @@ class CalendarEventEmbeddedWidget {
     foreach (array_keys($widget_state['items']) as $delta) {
       $item_form_object = $this->getItemFormObject($form, $form_state, $delta);
       $item_form_state = $this->getItemFormState($form, $form_state, $delta);
-      /** @var \Drupal\opigno_calendar_event\CalendarEventInterface $calendar_event */
+      /** @var CalendarEventInterface $calendar_event */
       $calendar_event = $item_form_object->validateForm($form[static::ELEMENT_NAME][$delta], $item_form_state);
 
       // If the calendar event widget is not populated we can safely ignore the
@@ -227,7 +229,7 @@ class CalendarEventEmbeddedWidget {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function submitForm(array $form, FormStateInterface $form_state) {
@@ -236,7 +238,7 @@ class CalendarEventEmbeddedWidget {
     foreach (array_keys($widget_state['items']) as $delta) {
       $item_form_object = $this->getItemFormObject($form, $form_state, $delta);
       $item_form_state = $this->getItemFormState($form, $form_state, $delta);
-      /** @var \Drupal\opigno_calendar_event\CalendarEventInterface $calendar_event */
+      /** @var CalendarEventInterface $calendar_event */
       $calendar_event = $item_form_object->buildEntity($form[static::ELEMENT_NAME][$delta], $item_form_state);
 
       try {
@@ -258,7 +260,7 @@ class CalendarEventEmbeddedWidget {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ -284,7 +286,7 @@ class CalendarEventEmbeddedWidget {
    *
    * @param array $form
    *   The parent form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The parent form state.
    * @param int $delta
    *   The item delta.
@@ -305,12 +307,12 @@ class CalendarEventEmbeddedWidget {
    *
    * @param array $form
    *   The parent form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The parent form state.
    * @param int $delta
    *   The item delta.
    *
-   * @return \Drupal\Core\Entity\Display\EntityFormDisplayInterface
+   * @return EntityFormDisplayInterface
    *   An entity form display object.
    */
   protected function getItemFormDisplay(array $form, FormStateInterface $form_state, $delta) {
@@ -330,12 +332,12 @@ class CalendarEventEmbeddedWidget {
    *
    * @param array $form
    *   The parent form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The parent form state.
    * @param int $delta
    *   The item delta.
    *
-   * @return \Drupal\Core\Entity\ContentEntityFormInterface
+   * @return ContentEntityFormInterface
    *   A Calendar event entity form object.
    */
   protected function getItemFormObject(array $form, FormStateInterface $form_state, $delta) {
@@ -343,7 +345,7 @@ class CalendarEventEmbeddedWidget {
     $item_state = &$widget_state['items'][$delta];
 
     if (!isset($item_state['form_object'])) {
-      /** @var \Drupal\Core\Entity\ContentEntityFormInterface $form_object */
+      /** @var ContentEntityFormInterface $form_object */
       $form_object = $this->entityTypeManager->getFormObject(CalendarEventInterface::ENTITY_TYPE_ID, 'default');
       $form_object->setEntity($item_state['entity']);
       $item_form_state = $this->getItemFormState($form, $form_state, $delta);
@@ -359,12 +361,12 @@ class CalendarEventEmbeddedWidget {
    *
    * @param array $form
    *   The parent form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The parent form state.
    * @param int $delta
    *   The item delta.
    *
-   * @return \Drupal\Core\Form\FormStateInterface
+   * @return FormStateInterface
    *   A form state object.
    */
   protected function getItemFormState(array $form, FormStateInterface $form_state, $delta) {
@@ -385,7 +387,7 @@ class CalendarEventEmbeddedWidget {
    *
    * @param array $form
    *   The parent form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The parent form state.
    * @param int $delta
    *   The item delta.
@@ -420,7 +422,7 @@ class CalendarEventEmbeddedWidget {
   /**
    * Checks whether the calendar event widget is populated.
    *
-   * @param \Drupal\opigno_calendar_event\CalendarEventInterface $calendar_event
+   * @param CalendarEventInterface $calendar_event
    *   A calendar event entity built from the related submitted values.
    *
    * @return bool
diff --git a/src/CalendarEventInterface.php b/src/CalendarEventInterface.php
index b8f4a6c..57b3683 100644
--- a/src/CalendarEventInterface.php
+++ b/src/CalendarEventInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\opigno_calendar_event;
 
+use Drupal\datetime\Plugin\Field\FieldType\DateTimeFieldItemList;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
@@ -20,7 +21,7 @@ interface CalendarEventInterface extends ContentEntityInterface, EntityChangedIn
   /**
    * Returns the calendar event date items.
    *
-   * @return \Drupal\datetime\Plugin\Field\FieldType\DateTimeFieldItemList
+   * @return DateTimeFieldItemList
    *   Сalendar event date items.
    */
   public function getDateItems();
diff --git a/src/CalendarEventManager.php b/src/CalendarEventManager.php
index ea58e61..e624e70 100644
--- a/src/CalendarEventManager.php
+++ b/src/CalendarEventManager.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\opigno_calendar_event;
 
+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\field_ui\Form\FieldConfigEditForm;
+use Drupal\field\FieldConfigInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ -21,35 +24,35 @@ class CalendarEventManager {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The embedded widget.
    *
-   * @var \Drupal\opigno_calendar_event\CalendarEventEmbeddedWidget
+   * @var CalendarEventEmbeddedWidget
    */
   protected $embeddedWidget;
 
   /**
    * The embedded display.
    *
-   * @var \Drupal\opigno_calendar_event\CalendarEventEmbeddedDisplay
+   * @var CalendarEventEmbeddedDisplay
    */
   protected $embeddedDisplay;
 
   /**
    * Static cache for referencing fields.
    *
-   * @var \Drupal\Core\Field\FieldDefinitionInterface[][]
+   * @var FieldDefinitionInterface[][]
    */
   protected $referencingFields = [];
 
@@ -63,9 +66,9 @@ class CalendarEventManager {
   /**
    * CalendarEventManager constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager) {
@@ -85,16 +88,16 @@ class CalendarEventManager {
   /**
    * Checks whether a form should host the widget settings.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return bool
    *   TRUE if the form should host the widget settings, FALSE otherwise.
    */
   public function isSettingsForm(FormStateInterface $form_state) {
-    /** @var \Drupal\field_ui\Form\FieldConfigEditForm $form_object */
+    /** @var FieldConfigEditForm $form_object */
     $form_object = $form_state->getFormObject();
-    /** @var \Drupal\field\FieldConfigInterface $field */
+    /** @var FieldConfigInterface $field */
     $field = $form_object->getEntity();
     return $field->getTargetEntityTypeId() === 'opigno_calendar_event' && $field->getType() === 'entity_reference';
   }
@@ -104,13 +107,13 @@ class CalendarEventManager {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function addEmbeddedWidgetSettings(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\field_ui\Form\FieldConfigEditForm $form_object */
+    /** @var FieldConfigEditForm $form_object */
     $form_object = $form_state->getFormObject();
-    /** @var \Drupal\field\FieldConfigInterface $field */
+    /** @var FieldConfigInterface $field */
     $field = $form_object->getEntity();
 
     $form['third_party_settings']['opigno_calendar_event']['embedded_widget'] = [
@@ -124,10 +127,10 @@ class CalendarEventManager {
   /**
    * Returns all calendar events referencing the specified entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   An entity object.
    *
-   * @return \Drupal\opigno_calendar_event\CalendarEventInterface[]
+   * @return CalendarEventInterface[]
    *   An array of calendar event entity objects.
    */
   public function getReferencingCalendarEvents(ContentEntityInterface $entity) {
@@ -180,7 +183,7 @@ class CalendarEventManager {
    * @param string|null $bundle_id
    *   (optional) The referenced bundle. Defaults to none.
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface|null
+   * @return FieldDefinitionInterface|null
    *   The entity reference field definition or NULL if none could be
    *   identified.
    */
@@ -232,7 +235,7 @@ class CalendarEventManager {
   /**
    * Returns the embedded widget.
    *
-   * @return \Drupal\opigno_calendar_event\CalendarEventEmbeddedWidget
+   * @return CalendarEventEmbeddedWidget
    *   An instance of the embedded widget.
    */
   public function getEmbeddedWidget() {
@@ -245,7 +248,7 @@ class CalendarEventManager {
   /**
    * Returns the embedded display.
    *
-   * @return \Drupal\opigno_calendar_event\CalendarEventEmbeddedDisplay
+   * @return CalendarEventEmbeddedDisplay
    *   An instance of the embedded display.
    */
   public function getEmbeddedDisplay() {
diff --git a/src/CalendarEventTypeListBuilder.php b/src/CalendarEventTypeListBuilder.php
index fc533cf..cc08f56 100644
--- a/src/CalendarEventTypeListBuilder.php
+++ b/src/CalendarEventTypeListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\opigno_calendar_event;
 
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Url;
 use Drupal\Core\Entity\EntityInterface;
@@ -29,7 +30,7 @@ class CalendarEventTypeListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+    /** @var ConfigEntityInterface $entity */
     $row['title'] = [
       'data' => $entity->label(),
       'class' => ['menu-label'],
diff --git a/src/Entity/CalendarEvent.php b/src/Entity/CalendarEvent.php
index 6003071..5c21b02 100644
--- a/src/Entity/CalendarEvent.php
+++ b/src/Entity/CalendarEvent.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\opigno_calendar_event\Entity;
 
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
+use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\opigno_calendar_event\CalendarEventInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
@@ -104,7 +106,7 @@ class CalendarEvent extends EditorialContentEntityBase implements CalendarEventI
   /**
    * Determines the date field name for the specified bundle.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $type
+   * @param ConfigEntityInterface $type
    *   The calendar event type entity.
    *
    * @return string
@@ -117,7 +119,7 @@ class CalendarEvent extends EditorialContentEntityBase implements CalendarEventI
   /**
    * Determines the date field type for the specified bundle.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $type
+   * @param ConfigEntityInterface $type
    *   The calendar event type entity.
    *
    * @return string
@@ -144,12 +146,12 @@ class CalendarEvent extends EditorialContentEntityBase implements CalendarEventI
    * @param string $type_id
    *   The calendar event type ID.
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityInterface
+   * @return ConfigEntityInterface
    *   The calendar event entity.
    */
   protected static function getCalendarEventType($type_id) {
     try {
-      /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $type */
+      /** @var ConfigEntityInterface $type */
       $type = \Drupal::entityTypeManager()
         ->getStorage('opigno_calendar_event_type')
         ->load($type_id);
@@ -178,7 +180,7 @@ class CalendarEvent extends EditorialContentEntityBase implements CalendarEventI
    * {@inheritdoc}
    */
   public static function baseFieldDefinitions(EntityTypeInterface $entity_type) {
-    /** @var \Drupal\Core\Field\BaseFieldDefinition[] $fields */
+    /** @var BaseFieldDefinition[] $fields */
     $fields = parent::baseFieldDefinitions($entity_type);
 
     $fields['title'] = BaseFieldDefinition::create('string')
@@ -287,10 +289,10 @@ class CalendarEvent extends EditorialContentEntityBase implements CalendarEventI
   /**
    * Provides storage field definitions for this entity type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
    *
-   * @return \Drupal\Core\Field\FieldStorageDefinitionInterface[]
+   * @return FieldStorageDefinitionInterface[]
    *   An array of field storage definitions.
    */
   public static function storageFieldDefinitions(EntityTypeInterface $entity_type) {
@@ -298,7 +300,7 @@ class CalendarEvent extends EditorialContentEntityBase implements CalendarEventI
 
     // Retrieve storage definitions for our date fields.
     $entity_type_id = $entity_type->id();
-    /** @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info */
+    /** @var EntityTypeBundleInfoInterface $bundle_info */
     $bundle_info = \Drupal::service('entity_type.bundle.info');
     foreach ($bundle_info->getBundleInfo($entity_type_id) as $bundle => $info) {
       $storage_definitions += static::bundleFieldDefinitions($entity_type, $bundle, []);
diff --git a/src/Form/CalendarEventEmbeddedWidget.php b/src/Form/CalendarEventEmbeddedWidget.php
index b6a12cf..e93e9fc 100644
--- a/src/Form/CalendarEventEmbeddedWidget.php
+++ b/src/Form/CalendarEventEmbeddedWidget.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\opigno_calendar_event\Form;
 
+use Drupal\Core\Entity\EntityFormInterface;
+use Drupal\Core\Entity\ContentEntityFormInterface;
 use Drupal\opigno_calendar_event\CalendarEventExceptionLoggerTrait;
 use Drupal\opigno_calendar_event\CalendarEventInterface;
 use Drupal\Component\Utility\NestedArray;
@@ -39,14 +41,14 @@ class CalendarEventEmbeddedWidget {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * CalendarEventManager constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -58,19 +60,19 @@ class CalendarEventEmbeddedWidget {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the entity reference field relating a calendar event
    *   with the entity being edited.
-   * @param \Drupal\opigno_calendar_event\CalendarEventInterface[] $calendar_events
+   * @param CalendarEventInterface[] $calendar_events
    *   An array of calendar event entities referencing the entity being edited.
    */
   public function alterForm(array &$form, FormStateInterface $form_state, FieldDefinitionInterface $field_definition, array $calendar_events) {
     $widget_state = &$this->getWidgetState($form, $form_state);
     $widget_state['field_definition'] = $field_definition;
 
-    /** @var \Drupal\Core\Entity\EntityFormInterface $form_object */
+    /** @var EntityFormInterface $form_object */
     $form_object = $form_state->getFormObject();
     $widget_state['original_label'] = $form_object->getEntity()->label();
 
@@ -87,7 +89,7 @@ class CalendarEventEmbeddedWidget {
       ];
     }
 
-    /** @var \Drupal\opigno_calendar_event\CalendarEventInterface $calendar_event */
+    /** @var CalendarEventInterface $calendar_event */
     foreach (array_values($calendar_events) as $delta => $calendar_event) {
       $elements[$delta] = [
         '#parents' => $this->getElementParents($form, $delta),
@@ -128,9 +130,9 @@ class CalendarEventEmbeddedWidget {
    *
    * @param array $element
    *   The subform element.
-   * @param \Drupal\opigno_calendar_event\CalendarEventInterface $entity
+   * @param CalendarEventInterface $entity
    *   The calendar event entity.
-   * @param \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display
+   * @param EntityFormDisplayInterface $form_display
    *   A form display object.
    */
   protected function attachFieldGroups(array &$element, CalendarEventInterface $entity, EntityFormDisplayInterface $form_display) {
@@ -156,20 +158,20 @@ class CalendarEventEmbeddedWidget {
    *
    * @param string $entity_type_id
    *   The entity type ID.
-   * @param \Drupal\opigno_calendar_event\CalendarEventInterface $calendar_event
+   * @param CalendarEventInterface $calendar_event
    *   The calendar event entity to be built.
    * @param array $element
    *   The subform element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The parent form state.
    */
   public function buildEntity($entity_type_id, CalendarEventInterface $calendar_event, array &$element, FormStateInterface $form_state) {
     $widget_state = $this->getWidgetState($form_state->getCompleteForm(), $form_state);
-    /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */
+    /** @var FieldDefinitionInterface $field_definition */
     $field_definition = $widget_state['field_definition'];
     $ref_field_name = $field_definition->getName();
 
-    /** @var \Drupal\Core\Entity\ContentEntityFormInterface $form_object */
+    /** @var ContentEntityFormInterface $form_object */
     $form_object = $form_state->getFormObject();
     $referenced_entity = $form_object->getEntity();
     $calendar_event->set($ref_field_name, $referenced_entity);
@@ -192,7 +194,7 @@ class CalendarEventEmbeddedWidget {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function validateForm(array $form, FormStateInterface $form_state) {
@@ -203,7 +205,7 @@ class CalendarEventEmbeddedWidget {
     foreach (array_keys($widget_state['items']) as $delta) {
       $item_form_object = $this->getItemFormObject($form, $form_state, $delta);
       $item_form_state = $this->getItemFormState($form, $form_state, $delta);
-      /** @var \Drupal\opigno_calendar_event\CalendarEventInterface $calendar_event */
+      /** @var CalendarEventInterface $calendar_event */
       $calendar_event = $item_form_object->validateForm($form[static::ELEMENT_NAME][$delta], $item_form_state);
 
       // If the calendar event widget is not populated we can safely ignore the
@@ -229,7 +231,7 @@ class CalendarEventEmbeddedWidget {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function submitForm(array $form, FormStateInterface $form_state) {
@@ -238,7 +240,7 @@ class CalendarEventEmbeddedWidget {
     foreach (array_keys($widget_state['items']) as $delta) {
       $item_form_object = $this->getItemFormObject($form, $form_state, $delta);
       $item_form_state = $this->getItemFormState($form, $form_state, $delta);
-      /** @var \Drupal\opigno_calendar_event\CalendarEventInterface $calendar_event */
+      /** @var CalendarEventInterface $calendar_event */
       $calendar_event = $item_form_object->buildEntity($form[static::ELEMENT_NAME][$delta], $item_form_state);
 
       try {
@@ -260,7 +262,7 @@ class CalendarEventEmbeddedWidget {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ -286,7 +288,7 @@ class CalendarEventEmbeddedWidget {
    *
    * @param array $form
    *   The parent form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The parent form state.
    * @param int $delta
    *   The item delta.
@@ -307,12 +309,12 @@ class CalendarEventEmbeddedWidget {
    *
    * @param array $form
    *   The parent form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The parent form state.
    * @param int $delta
    *   The item delta.
    *
-   * @return \Drupal\Core\Entity\Display\EntityFormDisplayInterface
+   * @return EntityFormDisplayInterface
    *   An entity form display object.
    */
   protected function getItemFormDisplay(array $form, FormStateInterface $form_state, $delta) {
@@ -332,12 +334,12 @@ class CalendarEventEmbeddedWidget {
    *
    * @param array $form
    *   The parent form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The parent form state.
    * @param int $delta
    *   The item delta.
    *
-   * @return \Drupal\Core\Entity\ContentEntityFormInterface
+   * @return ContentEntityFormInterface
    *   A Calendar event entity form object.
    */
   protected function getItemFormObject(array $form, FormStateInterface $form_state, $delta) {
@@ -345,7 +347,7 @@ class CalendarEventEmbeddedWidget {
     $item_state = &$widget_state['items'][$delta];
 
     if (!isset($item_state['form_object'])) {
-      /** @var \Drupal\Core\Entity\ContentEntityFormInterface $form_object */
+      /** @var ContentEntityFormInterface $form_object */
       $form_object = $this->entityTypeManager->getFormObject(CalendarEventInterface::ENTITY_TYPE_ID, 'default');
       $form_object->setEntity($item_state['entity']);
       $item_form_state = $this->getItemFormState($form, $form_state, $delta);
@@ -361,12 +363,12 @@ class CalendarEventEmbeddedWidget {
    *
    * @param array $form
    *   The parent form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The parent form state.
    * @param int $delta
    *   The item delta.
    *
-   * @return \Drupal\Core\Form\FormStateInterface
+   * @return FormStateInterface
    *   A form state object.
    */
   protected function getItemFormState(array $form, FormStateInterface $form_state, $delta) {
@@ -387,7 +389,7 @@ class CalendarEventEmbeddedWidget {
    *
    * @param array $form
    *   The parent form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The parent form state.
    * @param int $delta
    *   The item delta.
@@ -422,7 +424,7 @@ class CalendarEventEmbeddedWidget {
   /**
    * Checks whether the calendar event widget is populated.
    *
-   * @param \Drupal\opigno_calendar_event\CalendarEventInterface $calendar_event
+   * @param CalendarEventInterface $calendar_event
    *   A calendar event entity built from the related submitted values.
    *
    * @return bool
diff --git a/src/Form/CalendarEventTypeForm.php b/src/Form/CalendarEventTypeForm.php
index 1426a3c..5d99e53 100644
--- a/src/Form/CalendarEventTypeForm.php
+++ b/src/Form/CalendarEventTypeForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\opigno_calendar_event\Form;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\opigno_calendar_event\Entity\CalendarEventType;
+use Drupal\opigno_calendar_event\CalendarEventStorage;
 use Drupal\opigno_calendar_event\CalendarEventExceptionLoggerTrait;
 use Drupal\opigno_calendar_event\CalendarEventInterface;
 use Drupal\Core\Entity\BundleEntityFormBase;
@@ -21,14 +24,14 @@ class CalendarEventTypeForm extends BundleEntityFormBase {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * CalendarEventTypeForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -48,12 +51,12 @@ class CalendarEventTypeForm extends BundleEntityFormBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\opigno_calendar_event\Entity\CalendarEventType $type */
+    /** @var CalendarEventType $type */
     $type = $this->entity;
 
     $form['label'] = [
@@ -92,7 +95,7 @@ class CalendarEventTypeForm extends BundleEntityFormBase {
 
     $options = $this->getDateFieldTypes();
     $default_value = $type->isNew() ? key(array_reverse($options)) : $type->get('date_field_type');
-    /** @var \Drupal\opigno_calendar_event\CalendarEventStorage $storage */
+    /** @var CalendarEventStorage $storage */
     $storage = $this->entityTypeManager->getStorage(CalendarEventInterface::ENTITY_TYPE_ID);
     // @todo Add a validation constraint for this once config entity validation
     //   is supported. See https://www.drupal.org/project/drupal/issues/1818574.
@@ -150,7 +153,7 @@ class CalendarEventTypeForm extends BundleEntityFormBase {
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\opigno_calendar_event\Entity\CalendarEventType $type */
+    /** @var CalendarEventType $type */
     $type = $this->entity;
 
     try {
