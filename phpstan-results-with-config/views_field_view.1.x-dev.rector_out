modules/contrib/views_field_view/src/Plugin/views/field/View.php
modules/contrib/views_field_view/tests/src/Functional/ViewFieldUITest.php
modules/contrib/views_field_view/tests/src/Kernel/ViewFieldUnitTest.php
modules/contrib/views_field_view/views_field_view.views.inc

3 files with changes
====================

1) modules/contrib/views_field_view/tests/src/Kernel/ViewFieldUnitTest.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp($import_test_views);

     ViewTestData::createTestViews(get_class($this), ['views_field_view_test_config']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/views_field_view/tests/src/Functional/ViewFieldUITest.php:42

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp($import_test_views = TRUE);

     ViewTestData::createTestViews(get_class($this), ['views_field_view_test_config']);
@@ @@
     $this->clickLink('Global: View (View)');

     $result = $this->cssSelect('details#edit-options-available-tokens div.item-list li');
-    $this->assertEqual(10, count($result));
+    $this->assertEquals(10, count($result));

-    $this->assertEqual('{{ raw_fields.id }} == Views test: ID (raw)', $result[0]->getText());
-    $this->assertEqual('{{ fields.id }} == Views test: ID (rendered)', $result[1]->getText());
-    $this->assertEqual('{{ raw_fields.id_1 }} == Views test: ID (raw)', $result[2]->getText());
-    $this->assertEqual('{{ fields.id_1 }} == Views test: ID (rendered)', $result[3]->getText());
-    $this->assertEqual('{{ raw_fields.name }} == Views test: Name (raw)', $result[4]->getText());
-    $this->assertEqual('{{ fields.name }} == Views test: Name (rendered)', $result[5]->getText());
-    $this->assertEqual('{{ raw_fields.view }} == Global: View (raw)', $result[6]->getText());
-    $this->assertEqual('{{ fields.view }} == Global: View (rendered)', $result[7]->getText());
-    $this->assertEqual('{{ arguments.null }} == Global: Null title', $result[8]->getText());
-    $this->assertEqual('{{ raw_arguments.null }} == Global: Null input', $result[9]->getText());
+    $this->assertEquals('{{ raw_fields.id }} == Views test: ID (raw)', $result[0]->getText());
+    $this->assertEquals('{{ fields.id }} == Views test: ID (rendered)', $result[1]->getText());
+    $this->assertEquals('{{ raw_fields.id_1 }} == Views test: ID (raw)', $result[2]->getText());
+    $this->assertEquals('{{ fields.id_1 }} == Views test: ID (rendered)', $result[3]->getText());
+    $this->assertEquals('{{ raw_fields.name }} == Views test: Name (raw)', $result[4]->getText());
+    $this->assertEquals('{{ fields.name }} == Views test: Name (rendered)', $result[5]->getText());
+    $this->assertEquals('{{ raw_fields.view }} == Global: View (raw)', $result[6]->getText());
+    $this->assertEquals('{{ fields.view }} == Global: View (rendered)', $result[7]->getText());
+    $this->assertEquals('{{ arguments.null }} == Global: Null title', $result[8]->getText());
+    $this->assertEquals('{{ raw_arguments.null }} == Global: Null input', $result[9]->getText());
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/views_field_view/src/Plugin/views/field/View.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The configuration object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ImmutableConfig $config
+   * @param ImmutableConfig $config
    *   The configuration object.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ImmutableConfig $config) {
@@ @@
    *
    * @param string $token
    *  The token string. E.g. explode(',', $this->options['args']);
-   * @param \Drupal\views\ResultRow $values
+   * @param ResultRow $values
    *  The values retrieved from a single row of a view's query result.
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *  The full view object to get token values from.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 3 files have been changed by Rector                                       

