modules/contrib/metatag/metatag.api.php
modules/contrib/metatag/metatag.install
modules/contrib/metatag/metatag.module
modules/contrib/metatag/metatag.post_update.php
modules/contrib/metatag/metatag.tokens.inc
modules/contrib/metatag/metatag_app_links/metatag_app_links.module
modules/contrib/metatag/metatag_app_links/src/Plugin/metatag/Group/AppLinks.php
modules/contrib/metatag/metatag_app_links/src/Plugin/metatag/Tag/AlAndroidAppName.php
modules/contrib/metatag/metatag_app_links/src/Plugin/metatag/Tag/AlAndroidClass.php
modules/contrib/metatag/metatag_app_links/src/Plugin/metatag/Tag/AlAndroidPackage.php
modules/contrib/metatag/metatag_app_links/src/Plugin/metatag/Tag/AlAndroidUrl.php
modules/contrib/metatag/metatag_app_links/src/Plugin/metatag/Tag/AlIosAppName.php
modules/contrib/metatag/metatag_app_links/src/Plugin/metatag/Tag/AlIosAppStoreId.php
modules/contrib/metatag/metatag_app_links/src/Plugin/metatag/Tag/AlIosUrl.php
modules/contrib/metatag/metatag_app_links/src/Plugin/metatag/Tag/AlIpadAppName.php
modules/contrib/metatag/metatag_app_links/src/Plugin/metatag/Tag/AlIpadAppStoreId.php
modules/contrib/metatag/metatag_app_links/src/Plugin/metatag/Tag/AlIpadUrl.php
modules/contrib/metatag/metatag_app_links/src/Plugin/metatag/Tag/AlIphoneAppName.php
modules/contrib/metatag/metatag_app_links/src/Plugin/metatag/Tag/AlIphoneAppStoreId.php
modules/contrib/metatag/metatag_app_links/src/Plugin/metatag/Tag/AlIphoneUrl.php
modules/contrib/metatag/metatag_app_links/src/Plugin/metatag/Tag/AlWebShouldFallback.php
modules/contrib/metatag/metatag_app_links/src/Plugin/metatag/Tag/AlWebUrl.php
modules/contrib/metatag/metatag_app_links/src/Plugin/metatag/Tag/AlWindowsAppId.php
modules/contrib/metatag/metatag_app_links/src/Plugin/metatag/Tag/AlWindowsAppName.php
modules/contrib/metatag/metatag_app_links/src/Plugin/metatag/Tag/AlWindowsPhoneAppId.php
modules/contrib/metatag/metatag_app_links/src/Plugin/metatag/Tag/AlWindowsPhoneAppName.php
modules/contrib/metatag/metatag_app_links/src/Plugin/metatag/Tag/AlWindowsPhoneUrl.php
modules/contrib/metatag/metatag_app_links/src/Plugin/metatag/Tag/AlWindowsUniversalAppId.php
modules/contrib/metatag/metatag_app_links/src/Plugin/metatag/Tag/AlWindowsUniversalAppName.php
modules/contrib/metatag/metatag_app_links/src/Plugin/metatag/Tag/AlWindowsUniversalUrl.php
modules/contrib/metatag/metatag_app_links/src/Plugin/metatag/Tag/AlWindowsUrl.php
modules/contrib/metatag/metatag_app_links/tests/src/Functional/MetatagAppLinksTagsTest.php
modules/contrib/metatag/metatag_dc/src/Plugin/metatag/Group/DublinCore.php
modules/contrib/metatag/metatag_dc/src/Plugin/metatag/Tag/Contributor.php
modules/contrib/metatag/metatag_dc/src/Plugin/metatag/Tag/Coverage.php
modules/contrib/metatag/metatag_dc/src/Plugin/metatag/Tag/Creator.php
modules/contrib/metatag/metatag_dc/src/Plugin/metatag/Tag/Date.php
modules/contrib/metatag/metatag_dc/src/Plugin/metatag/Tag/Description.php
modules/contrib/metatag/metatag_dc/src/Plugin/metatag/Tag/Format.php
modules/contrib/metatag/metatag_dc/src/Plugin/metatag/Tag/Identifier.php
modules/contrib/metatag/metatag_dc/src/Plugin/metatag/Tag/Language.php
modules/contrib/metatag/metatag_dc/src/Plugin/metatag/Tag/Publisher.php
modules/contrib/metatag/metatag_dc/src/Plugin/metatag/Tag/Relation.php
modules/contrib/metatag/metatag_dc/src/Plugin/metatag/Tag/Rights.php
modules/contrib/metatag/metatag_dc/src/Plugin/metatag/Tag/Source.php
modules/contrib/metatag/metatag_dc/src/Plugin/metatag/Tag/Subject.php
modules/contrib/metatag/metatag_dc/src/Plugin/metatag/Tag/Title.php
modules/contrib/metatag/metatag_dc/src/Plugin/metatag/Tag/Type.php
modules/contrib/metatag/metatag_dc/tests/src/Functional/MetatagDublinCoreTagsTest.php
modules/contrib/metatag/metatag_dc_advanced/metatag_dc_advanced.module
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Group/DublinCoreAdvanced.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/AbstractTag.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/AccessRights.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/AccrualMethod.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/AccrualPeriodicity.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/AccrualPolicy.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/Alternative.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/Audience.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/Available.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/BibliographicCitation.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/ConformsTo.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/Created.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/DateAccepted.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/DateCopyrighted.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/DateSubmitted.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/EducationLevel.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/Extent.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/HasFormat.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/HasPart.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/HasVersion.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/InstructionalMethod.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/IsFormatOf.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/IsPartOf.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/IsReferencedBy.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/IsReplacedBy.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/IsRequiredBy.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/IsVersionOf.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/Issued.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/License.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/Mediator.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/Medium.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/Modified.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/Provenance.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/References.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/Replaces.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/Requires.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/RightsHolder.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/Spatial.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/TableOfContents.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/Temporal.php
modules/contrib/metatag/metatag_dc_advanced/src/Plugin/metatag/Tag/Valid.php
modules/contrib/metatag/metatag_dc_advanced/tests/src/Functional/MetatagDublinCoreAdvancedTagsTest.php
modules/contrib/metatag/metatag_extended_perms/metatag_extended_perms.module
modules/contrib/metatag/metatag_extended_perms/src/MetatagPermissions.php
modules/contrib/metatag/metatag_extended_perms/tests/src/Functional/PermissionsTest.php
modules/contrib/metatag/metatag_facebook/src/Plugin/metatag/Group/Facebook.php
modules/contrib/metatag/metatag_facebook/src/Plugin/metatag/Tag/FbAdmins.php
modules/contrib/metatag/metatag_facebook/src/Plugin/metatag/Tag/FbAppId.php
modules/contrib/metatag/metatag_facebook/src/Plugin/metatag/Tag/FbPages.php
modules/contrib/metatag/metatag_facebook/tests/src/Functional/MetatagFacebookTagsTest.php
modules/contrib/metatag/metatag_favicons/metatag_favicons.module
modules/contrib/metatag/metatag_favicons/src/Plugin/metatag/Group/Favicons.php
modules/contrib/metatag/metatag_favicons/src/Plugin/metatag/Tag/AppleTouchIcon.php
modules/contrib/metatag/metatag_favicons/src/Plugin/metatag/Tag/AppleTouchIcon114x114.php
modules/contrib/metatag/metatag_favicons/src/Plugin/metatag/Tag/AppleTouchIcon120x120.php
modules/contrib/metatag/metatag_favicons/src/Plugin/metatag/Tag/AppleTouchIcon144x144.php
modules/contrib/metatag/metatag_favicons/src/Plugin/metatag/Tag/AppleTouchIcon152x152.php
modules/contrib/metatag/metatag_favicons/src/Plugin/metatag/Tag/AppleTouchIcon180x180.php
modules/contrib/metatag/metatag_favicons/src/Plugin/metatag/Tag/AppleTouchIcon72x72.php
modules/contrib/metatag/metatag_favicons/src/Plugin/metatag/Tag/AppleTouchIcon76x76.php
modules/contrib/metatag/metatag_favicons/src/Plugin/metatag/Tag/AppleTouchIconPrecomposed.php
modules/contrib/metatag/metatag_favicons/src/Plugin/metatag/Tag/AppleTouchIconPrecomposed114x114.php
modules/contrib/metatag/metatag_favicons/src/Plugin/metatag/Tag/AppleTouchIconPrecomposed120x120.php
modules/contrib/metatag/metatag_favicons/src/Plugin/metatag/Tag/AppleTouchIconPrecomposed144x144.php
modules/contrib/metatag/metatag_favicons/src/Plugin/metatag/Tag/AppleTouchIconPrecomposed152x152.php
modules/contrib/metatag/metatag_favicons/src/Plugin/metatag/Tag/AppleTouchIconPrecomposed180x180.php
modules/contrib/metatag/metatag_favicons/src/Plugin/metatag/Tag/AppleTouchIconPrecomposed72x72.php
modules/contrib/metatag/metatag_favicons/src/Plugin/metatag/Tag/AppleTouchIconPrecomposed76x76.php
modules/contrib/metatag/metatag_favicons/src/Plugin/metatag/Tag/Icon16x16.php
modules/contrib/metatag/metatag_favicons/src/Plugin/metatag/Tag/Icon192x192.php
modules/contrib/metatag/metatag_favicons/src/Plugin/metatag/Tag/Icon32x32.php
modules/contrib/metatag/metatag_favicons/src/Plugin/metatag/Tag/Icon96x96.php
modules/contrib/metatag/metatag_favicons/src/Plugin/metatag/Tag/LinkSizesBase.php
modules/contrib/metatag/metatag_favicons/src/Plugin/metatag/Tag/MaskIcon.php
modules/contrib/metatag/metatag_favicons/src/Plugin/metatag/Tag/ShortcutIcon.php
modules/contrib/metatag/metatag_favicons/tests/src/Functional/MetatagFaviconsTagsTest.php
modules/contrib/metatag/metatag_google_cse/metatag_google_cse.module
modules/contrib/metatag/metatag_google_cse/src/Plugin/metatag/Group/GoogleCse.php
modules/contrib/metatag/metatag_google_cse/src/Plugin/metatag/Tag/Audience.php
modules/contrib/metatag/metatag_google_cse/src/Plugin/metatag/Tag/Department.php
modules/contrib/metatag/metatag_google_cse/src/Plugin/metatag/Tag/DocStatus.php
modules/contrib/metatag/metatag_google_cse/src/Plugin/metatag/Tag/GoogleRating.php
modules/contrib/metatag/metatag_google_cse/src/Plugin/metatag/Tag/Thumbnail.php
modules/contrib/metatag/metatag_google_cse/tests/src/Functional/MetatagGoogleCSETagsTest.php
modules/contrib/metatag/metatag_google_plus/src/Plugin/metatag/Group/GooglePlus.php
modules/contrib/metatag/metatag_google_plus/src/Plugin/metatag/Tag/Author.php
modules/contrib/metatag/metatag_google_plus/src/Plugin/metatag/Tag/Description.php
modules/contrib/metatag/metatag_google_plus/src/Plugin/metatag/Tag/Image.php
modules/contrib/metatag/metatag_google_plus/src/Plugin/metatag/Tag/Name.php
modules/contrib/metatag/metatag_google_plus/src/Plugin/metatag/Tag/Publisher.php
modules/contrib/metatag/metatag_google_plus/tests/src/Functional/MetatagGooglePlusTagsTest.php
modules/contrib/metatag/metatag_hreflang/metatag_hreflang.module
modules/contrib/metatag/metatag_hreflang/src/Plugin/Derivative/HreflangDeriver.php
modules/contrib/metatag/metatag_hreflang/src/Plugin/metatag/Group/Hreflang.php
modules/contrib/metatag/metatag_hreflang/src/Plugin/metatag/Tag/HreflangBase.php
modules/contrib/metatag/metatag_hreflang/src/Plugin/metatag/Tag/HreflangPerLanguage.php
modules/contrib/metatag/metatag_hreflang/src/Plugin/metatag/Tag/HreflangXDefault.php
modules/contrib/metatag/metatag_hreflang/tests/src/Functional/MetatagHreflangTagsTest.php
modules/contrib/metatag/metatag_mobile/metatag_mobile.module
modules/contrib/metatag/metatag_mobile/src/Plugin/metatag/Group/AndroidMobile.php
modules/contrib/metatag/metatag_mobile/src/Plugin/metatag/Group/AppleMobile.php
modules/contrib/metatag/metatag_mobile/src/Plugin/metatag/Group/Mobile.php
modules/contrib/metatag/metatag_mobile/src/Plugin/metatag/Group/WindowsMobile.php
modules/contrib/metatag/metatag_mobile/src/Plugin/metatag/Tag/AlternateHandheld.php
modules/contrib/metatag/metatag_mobile/src/Plugin/metatag/Tag/AndroidAppLinkAlternative.php
modules/contrib/metatag/metatag_mobile/src/Plugin/metatag/Tag/AppleItunesApp.php
modules/contrib/metatag/metatag_mobile/src/Plugin/metatag/Tag/AppleMobileWebAppCapable.php
modules/contrib/metatag/metatag_mobile/src/Plugin/metatag/Tag/AppleMobileWebAppStatusBarStyle.php
modules/contrib/metatag/metatag_mobile/src/Plugin/metatag/Tag/AppleMobileWebAppTitle.php
modules/contrib/metatag/metatag_mobile/src/Plugin/metatag/Tag/ApplicationName.php
modules/contrib/metatag/metatag_mobile/src/Plugin/metatag/Tag/Cleartype.php
modules/contrib/metatag/metatag_mobile/src/Plugin/metatag/Tag/FormatDetection.php
modules/contrib/metatag/metatag_mobile/src/Plugin/metatag/Tag/HandheldFriendly.php
modules/contrib/metatag/metatag_mobile/src/Plugin/metatag/Tag/IosAppLinkAlternative.php
modules/contrib/metatag/metatag_mobile/src/Plugin/metatag/Tag/LinkMediaBase.php
modules/contrib/metatag/metatag_mobile/src/Plugin/metatag/Tag/MobileOptimized.php
modules/contrib/metatag/metatag_mobile/src/Plugin/metatag/Tag/MsapplicationAllowDomainApiCalls.php
modules/contrib/metatag/metatag_mobile/src/Plugin/metatag/Tag/MsapplicationAllowDomainMetaTags.php
modules/contrib/metatag/metatag_mobile/src/Plugin/metatag/Tag/MsapplicationBadge.php
modules/contrib/metatag/metatag_mobile/src/Plugin/metatag/Tag/MsapplicationConfig.php
modules/contrib/metatag/metatag_mobile/src/Plugin/metatag/Tag/MsapplicationNavbuttonColor.php
modules/contrib/metatag/metatag_mobile/src/Plugin/metatag/Tag/MsapplicationNotification.php
modules/contrib/metatag/metatag_mobile/src/Plugin/metatag/Tag/MsapplicationSquare150x150logo.php
modules/contrib/metatag/metatag_mobile/src/Plugin/metatag/Tag/MsapplicationSquare310x310logo.php
modules/contrib/metatag/metatag_mobile/src/Plugin/metatag/Tag/MsapplicationSquare70x70logo.php
modules/contrib/metatag/metatag_mobile/src/Plugin/metatag/Tag/MsapplicationStartUrl.php
modules/contrib/metatag/metatag_mobile/src/Plugin/metatag/Tag/MsapplicationTask.php
modules/contrib/metatag/metatag_mobile/src/Plugin/metatag/Tag/MsapplicationTaskSeparator.php
modules/contrib/metatag/metatag_mobile/src/Plugin/metatag/Tag/MsapplicationTilecolor.php
modules/contrib/metatag/metatag_mobile/src/Plugin/metatag/Tag/MsapplicationTileimage.php
modules/contrib/metatag/metatag_mobile/src/Plugin/metatag/Tag/MsapplicationTooltip.php
modules/contrib/metatag/metatag_mobile/src/Plugin/metatag/Tag/MsapplicationWide310x150logo.php
modules/contrib/metatag/metatag_mobile/src/Plugin/metatag/Tag/MsapplicationWindow.php
modules/contrib/metatag/metatag_mobile/src/Plugin/metatag/Tag/ThemeColor.php
modules/contrib/metatag/metatag_mobile/src/Plugin/metatag/Tag/Viewport.php
modules/contrib/metatag/metatag_mobile/src/Plugin/metatag/Tag/WebManifest.php
modules/contrib/metatag/metatag_mobile/src/Plugin/metatag/Tag/XUaCompatible.php
modules/contrib/metatag/metatag_mobile/tests/src/Functional/MetatagMobileTagsTest.php
modules/contrib/metatag/metatag_open_graph/metatag_open_graph.install
modules/contrib/metatag/metatag_open_graph/metatag_open_graph.module
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Group/OpenGraph.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/ArticleAuthor.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/ArticleExpirationTime.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/ArticleModifiedTime.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/ArticlePublishedTime.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/ArticlePublisher.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/ArticleSection.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/ArticleTag.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/BookAuthor.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/BookISBN.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/BookReleaseDate.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/BookTag.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/OgAudio.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/OgAudioSecureUrl.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/OgAudioType.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/OgCountryName.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/OgDescription.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/OgDeterminer.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/OgEmail.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/OgFaxNumber.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/OgImage.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/OgImageAlt.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/OgImageHeight.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/OgImageSecureUrl.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/OgImageType.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/OgImageUrl.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/OgImageWidth.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/OgLatitude.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/OgLocale.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/OgLocaleAlternative.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/OgLocality.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/OgLongitude.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/OgPhoneNumber.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/OgPostalCode.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/OgRegion.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/OgSeeAlso.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/OgSiteName.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/OgStreetAddress.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/OgTitle.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/OgType.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/OgUpdatedTime.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/OgUrl.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/OgVideo.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/OgVideoDuration.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/OgVideoHeight.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/OgVideoSecureUrl.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/OgVideoType.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/OgVideoWidth.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/ProfileFirstName.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/ProfileGender.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/ProfileLastName.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/ProfileUsername.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/VideoActor.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/VideoActorRole.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/VideoDirector.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/VideoReleaseDate.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/VideoSeries.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/VideoTag.php
modules/contrib/metatag/metatag_open_graph/src/Plugin/metatag/Tag/VideoWriter.php
modules/contrib/metatag/metatag_open_graph/tests/src/Functional/MetatagOpenGraphTagsTest.php
modules/contrib/metatag/metatag_open_graph_products/metatag_open_graph_products.module
modules/contrib/metatag/metatag_open_graph_products/src/Plugin/metatag/Group/OpenGraphProducts.php
modules/contrib/metatag/metatag_open_graph_products/src/Plugin/metatag/Tag/ProductAvailability.php
modules/contrib/metatag/metatag_open_graph_products/src/Plugin/metatag/Tag/ProductCondition.php
modules/contrib/metatag/metatag_open_graph_products/src/Plugin/metatag/Tag/ProductPriceAmount.php
modules/contrib/metatag/metatag_open_graph_products/src/Plugin/metatag/Tag/ProductPriceCurrency.php
modules/contrib/metatag/metatag_open_graph_products/src/Plugin/metatag/Tag/ProductRetailerItemId.php
modules/contrib/metatag/metatag_open_graph_products/tests/src/Functional/MetatagOpenGraphProductsTagsTest.php
modules/contrib/metatag/metatag_page_manager/metatag_page_manager.module
modules/contrib/metatag/metatag_pinterest/src/Plugin/metatag/Group/Pinterest.php
modules/contrib/metatag/metatag_pinterest/src/Plugin/metatag/Tag/PinterestDescription.php
modules/contrib/metatag/metatag_pinterest/src/Plugin/metatag/Tag/PinterestId.php
modules/contrib/metatag/metatag_pinterest/src/Plugin/metatag/Tag/PinterestMedia.php
modules/contrib/metatag/metatag_pinterest/src/Plugin/metatag/Tag/PinterestNohover.php
modules/contrib/metatag/metatag_pinterest/src/Plugin/metatag/Tag/PinterestNopin.php
modules/contrib/metatag/metatag_pinterest/src/Plugin/metatag/Tag/PinterestNosearch.php
modules/contrib/metatag/metatag_pinterest/src/Plugin/metatag/Tag/PinterestUrl.php
modules/contrib/metatag/metatag_pinterest/tests/src/Functional/MetatagPinterestTagsTest.php
modules/contrib/metatag/metatag_twitter_cards/src/Plugin/metatag/Group/TwitterCards.php
modules/contrib/metatag/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsAppIdGooglePlay.php
modules/contrib/metatag/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsAppIdIpad.php
modules/contrib/metatag/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsAppIdIphone.php
modules/contrib/metatag/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsAppNameGooglePlay.php
modules/contrib/metatag/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsAppNameIpad.php
modules/contrib/metatag/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsAppNameIphone.php
modules/contrib/metatag/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsAppStoreCountry.php
modules/contrib/metatag/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsAppUrlGooglePlay.php
modules/contrib/metatag/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsAppUrlIpad.php
modules/contrib/metatag/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsAppUrlIphone.php
modules/contrib/metatag/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsCreator.php
modules/contrib/metatag/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsCreatorId.php
modules/contrib/metatag/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsData1.php
modules/contrib/metatag/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsData2.php
modules/contrib/metatag/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsDescription.php
modules/contrib/metatag/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsDoNotTrack.php
modules/contrib/metatag/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsGalleryImage0.php
modules/contrib/metatag/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsGalleryImage1.php
modules/contrib/metatag/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsGalleryImage2.php
modules/contrib/metatag/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsGalleryImage3.php
modules/contrib/metatag/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsImage.php
modules/contrib/metatag/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsImageAlt.php
modules/contrib/metatag/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsImageHeight.php
modules/contrib/metatag/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsImageWidth.php
modules/contrib/metatag/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsLabel1.php
modules/contrib/metatag/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsLabel2.php
modules/contrib/metatag/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsPageUrl.php
modules/contrib/metatag/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsPlayer.php
modules/contrib/metatag/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsPlayerHeight.php
modules/contrib/metatag/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsPlayerStream.php
modules/contrib/metatag/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsPlayerStreamContentType.php
modules/contrib/metatag/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsPlayerWidth.php
modules/contrib/metatag/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsSite.php
modules/contrib/metatag/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsSiteId.php
modules/contrib/metatag/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsTitle.php
modules/contrib/metatag/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsType.php
modules/contrib/metatag/metatag_twitter_cards/tests/src/Functional/MetatagTwitterCardsTagsTest.php
modules/contrib/metatag/metatag_verification/src/Plugin/metatag/Group/SiteVerification.php
modules/contrib/metatag/metatag_verification/src/Plugin/metatag/Tag/Baidu.php
modules/contrib/metatag/metatag_verification/src/Plugin/metatag/Tag/Bing.php
modules/contrib/metatag/metatag_verification/src/Plugin/metatag/Tag/FacebookDomainVerification.php
modules/contrib/metatag/metatag_verification/src/Plugin/metatag/Tag/Google.php
modules/contrib/metatag/metatag_verification/src/Plugin/metatag/Tag/NortonSafeWeb.php
modules/contrib/metatag/metatag_verification/src/Plugin/metatag/Tag/Pinterest.php
modules/contrib/metatag/metatag_verification/src/Plugin/metatag/Tag/Pocket.php
modules/contrib/metatag/metatag_verification/src/Plugin/metatag/Tag/Yandex.php
modules/contrib/metatag/metatag_verification/src/Plugin/metatag/Tag/ZoomDomainVerification.php
modules/contrib/metatag/metatag_verification/tests/src/Functional/MetatagVerificationTagsTest.php
modules/contrib/metatag/metatag_views/metatag_views.install
modules/contrib/metatag/metatag_views/metatag_views.module
modules/contrib/metatag/metatag_views/src/Controller/MetatagViewsController.php
modules/contrib/metatag/metatag_views/src/Controller/MetatagViewsTranslationController.php
modules/contrib/metatag/metatag_views/src/Form/MetatagViewsAddForm.php
modules/contrib/metatag/metatag_views/src/Form/MetatagViewsEditForm.php
modules/contrib/metatag/metatag_views/src/Form/MetatagViewsRevertForm.php
modules/contrib/metatag/metatag_views/src/Form/MetatagViewsTranslationForm.php
modules/contrib/metatag/metatag_views/src/MetatagViewsCachePluginManager.php
modules/contrib/metatag/metatag_views/src/MetatagViewsCacheWrapper.php
modules/contrib/metatag/metatag_views/src/MetatagViewsValuesCleanerTrait.php
modules/contrib/metatag/metatag_views/src/Plugin/views/display_extender/MetatagDisplayExtender.php
modules/contrib/metatag/metatag_views/tests/src/Functional/MetatagViewsBasicsTest.php
modules/contrib/metatag/metatag_views/tests/src/Functional/MetatagViewsTokenTest.php
modules/contrib/metatag/src/Annotation/MetatagGroup.php
modules/contrib/metatag/src/Annotation/MetatagTag.php
modules/contrib/metatag/src/Controller/MetatagController.php
modules/contrib/metatag/src/Entity/MetatagDefaults.php
modules/contrib/metatag/src/Form/MetatagDefaultsDeleteForm.php
modules/contrib/metatag/src/Form/MetatagDefaultsForm.php
modules/contrib/metatag/src/Form/MetatagDefaultsRevertForm.php
modules/contrib/metatag/src/Form/MetatagSettingsForm.php
modules/contrib/metatag/src/MetatagDefaultsInterface.php
modules/contrib/metatag/src/MetatagDefaultsListBuilder.php
modules/contrib/metatag/src/MetatagGroupPluginManager.php
modules/contrib/metatag/src/MetatagManager.php
modules/contrib/metatag/src/MetatagManagerInterface.php
modules/contrib/metatag/src/MetatagServiceProvider.php
modules/contrib/metatag/src/MetatagTagPluginManager.php
modules/contrib/metatag/src/MetatagToken.php
modules/contrib/metatag/src/MetatagTrimmer.php
modules/contrib/metatag/src/Normalizer/MetatagHalNormalizer.php
modules/contrib/metatag/src/Normalizer/MetatagNormalizer.php
modules/contrib/metatag/src/Plugin/DataType/Metatag.php
modules/contrib/metatag/src/Plugin/DataType/MetatagInterface.php
modules/contrib/metatag/src/Plugin/Field/FieldFormatter/MetatagEmptyFormatter.php
modules/contrib/metatag/src/Plugin/Field/FieldType/MetatagFieldItem.php
modules/contrib/metatag/src/Plugin/Field/FieldType/MetatagFieldItemList.php
modules/contrib/metatag/src/Plugin/Field/FieldWidget/MetatagFirehose.php
modules/contrib/metatag/src/Plugin/Field/MetatagEntityFieldItemList.php
modules/contrib/metatag/src/Plugin/GraphQL/Scalars/MetatagScalar.php
modules/contrib/metatag/src/Plugin/metatag/Group/Advanced.php
modules/contrib/metatag/src/Plugin/metatag/Group/Basic.php
modules/contrib/metatag/src/Plugin/metatag/Group/GroupBase.php
modules/contrib/metatag/src/Plugin/metatag/Tag/AbstractTag.php
modules/contrib/metatag/src/Plugin/metatag/Tag/CacheControl.php
modules/contrib/metatag/src/Plugin/metatag/Tag/CanonicalUrl.php
modules/contrib/metatag/src/Plugin/metatag/Tag/ContentLanguage.php
modules/contrib/metatag/src/Plugin/metatag/Tag/Description.php
modules/contrib/metatag/src/Plugin/metatag/Tag/Expires.php
modules/contrib/metatag/src/Plugin/metatag/Tag/Generator.php
modules/contrib/metatag/src/Plugin/metatag/Tag/GeoPlacename.php
modules/contrib/metatag/src/Plugin/metatag/Tag/GeoPosition.php
modules/contrib/metatag/src/Plugin/metatag/Tag/GeoRegion.php
modules/contrib/metatag/src/Plugin/metatag/Tag/Google.php
modules/contrib/metatag/src/Plugin/metatag/Tag/Icbm.php
modules/contrib/metatag/src/Plugin/metatag/Tag/ImageSrc.php
modules/contrib/metatag/src/Plugin/metatag/Tag/Keywords.php
modules/contrib/metatag/src/Plugin/metatag/Tag/LinkRelBase.php
modules/contrib/metatag/src/Plugin/metatag/Tag/MetaHttpEquivBase.php
modules/contrib/metatag/src/Plugin/metatag/Tag/MetaItempropBase.php
modules/contrib/metatag/src/Plugin/metatag/Tag/MetaNameBase.php
modules/contrib/metatag/src/Plugin/metatag/Tag/MetaPropertyBase.php
modules/contrib/metatag/src/Plugin/metatag/Tag/NewsKeywords.php
modules/contrib/metatag/src/Plugin/metatag/Tag/Next.php
modules/contrib/metatag/src/Plugin/metatag/Tag/OriginalSource.php
modules/contrib/metatag/src/Plugin/metatag/Tag/Pragma.php
modules/contrib/metatag/src/Plugin/metatag/Tag/Prev.php
modules/contrib/metatag/src/Plugin/metatag/Tag/Rating.php
modules/contrib/metatag/src/Plugin/metatag/Tag/Referrer.php
modules/contrib/metatag/src/Plugin/metatag/Tag/Refresh.php
modules/contrib/metatag/src/Plugin/metatag/Tag/RevisitAfter.php
modules/contrib/metatag/src/Plugin/metatag/Tag/Rights.php
modules/contrib/metatag/src/Plugin/metatag/Tag/Robots.php
modules/contrib/metatag/src/Plugin/metatag/Tag/SetCookie.php
modules/contrib/metatag/src/Plugin/metatag/Tag/ShortLink.php
modules/contrib/metatag/src/Plugin/metatag/Tag/Standout.php
modules/contrib/metatag/src/Plugin/metatag/Tag/Title.php
modules/contrib/metatag/src/Plugin/migrate/process/d6/NodewordsEntities.php
modules/contrib/metatag/src/Plugin/migrate/process/d7/MetatagEntities.php
modules/contrib/metatag/src/Plugin/migrate/source/d6/NodewordsField.php
modules/contrib/metatag/src/Plugin/migrate/source/d6/NodewordsFieldInstance.php
modules/contrib/metatag/src/Plugin/migrate/source/d7/MetatagField.php
modules/contrib/metatag/src/Plugin/migrate/source/d7/MetatagFieldDeriver.php
modules/contrib/metatag/src/Plugin/migrate/source/d7/MetatagFieldInstance.php
modules/contrib/metatag/src/Plugin/migrate/source/d7/MetatagFieldInstanceDeriver.php
modules/contrib/metatag/tests/fixtures/d6_nodewords.php
modules/contrib/metatag/tests/fixtures/d7_metatag.php
modules/contrib/metatag/tests/modules/metatag_test_custom_route/metatag_test_custom_route.module
modules/contrib/metatag/tests/modules/metatag_test_custom_route/src/Controller/MetatagTestCustomRouteController.php
modules/contrib/metatag/tests/modules/metatag_test_integration/metatag_test_integration.module
modules/contrib/metatag/tests/modules/metatag_test_tag/src/Plugin/metatag/Tag/MetatagTestTag.php
modules/contrib/metatag/tests/src/Functional/DefaultTags.php
modules/contrib/metatag/tests/src/Functional/DisabledDefaultTags.php
modules/contrib/metatag/tests/src/Functional/EnsureDevelWorks.php
modules/contrib/metatag/tests/src/Functional/MaintenanceMode.php
modules/contrib/metatag/tests/src/Functional/MetatagAdminTest.php
modules/contrib/metatag/tests/src/Functional/MetatagConfigTranslationTest.php
modules/contrib/metatag/tests/src/Functional/MetatagCustomRouteTest.php
modules/contrib/metatag/tests/src/Functional/MetatagFieldNodeTest.php
modules/contrib/metatag/tests/src/Functional/MetatagFieldTermTest.php
modules/contrib/metatag/tests/src/Functional/MetatagFieldTestBase.php
modules/contrib/metatag/tests/src/Functional/MetatagFieldTestTest.php
modules/contrib/metatag/tests/src/Functional/MetatagFieldUserTest.php
modules/contrib/metatag/tests/src/Functional/MetatagForumTest.php
modules/contrib/metatag/tests/src/Functional/MetatagFrontpageTest.php
modules/contrib/metatag/tests/src/Functional/MetatagHelperTrait.php
modules/contrib/metatag/tests/src/Functional/MetatagIntegrationTest.php
modules/contrib/metatag/tests/src/Functional/MetatagNodeTranslationTest.php
modules/contrib/metatag/tests/src/Functional/MetatagPanelizerTest.php
modules/contrib/metatag/tests/src/Functional/MetatagStringTest.php
modules/contrib/metatag/tests/src/Functional/MetatagTagTypesTest.php
modules/contrib/metatag/tests/src/Functional/MetatagTagsTest.php
modules/contrib/metatag/tests/src/Functional/MetatagTagsTestBase.php
modules/contrib/metatag/tests/src/Functional/MetatagTokenStatus.php
modules/contrib/metatag/tests/src/Functional/MetatagTokenTest.php
modules/contrib/metatag/tests/src/Functional/MetatagXssTest.php
modules/contrib/metatag/tests/src/Functional/NodeJsonOutput.php
modules/contrib/metatag/tests/src/Functional/NodeTranslation.php
modules/contrib/metatag/tests/src/Functional/RemoveCoreMetaTags.php
modules/contrib/metatag/tests/src/Functional/WithRedirect.php
modules/contrib/metatag/tests/src/FunctionalJavascript/MetatagAvailableTokensTest.php
modules/contrib/metatag/tests/src/Kernel/Form/MetatagSettingsFormTest.php
modules/contrib/metatag/tests/src/Kernel/MetatagManagerTest.php
modules/contrib/metatag/tests/src/Kernel/MetatagSerializationTest.php
modules/contrib/metatag/tests/src/Kernel/MetatagSettingsTest.php
modules/contrib/metatag/tests/src/Kernel/Migrate/d6/NodewordsEntitiesTest.php
modules/contrib/metatag/tests/src/Kernel/Migrate/d6/NodewordsFieldTest.php
modules/contrib/metatag/tests/src/Kernel/Migrate/d7/MetatagEntitiesTest.php
modules/contrib/metatag/tests/src/Kernel/Migrate/d7/MetatagFieldTest.php
modules/contrib/metatag/tests/src/Kernel/Plugin/migrate/source/d6/NodewordsFieldInstanceTest.php
modules/contrib/metatag/tests/src/Kernel/Plugin/migrate/source/d7/MetatagFieldInstanceTest.php
modules/contrib/metatag/tests/src/Unit/MetaNameBaseTest.php
modules/contrib/metatag/tests/src/Unit/MetatagTrimmerTest.php

55 files with changes
=====================

1) modules/contrib/metatag/tests/src/Unit/MetatagTrimmerTest.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The Metatagtrimmer Object.
    *
-   * @var \Drupal\metatag\MetatagTrimmer
+   * @var MetatagTrimmer
    */
   protected $metatagTrimmer;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/metatag/tests/src/Unit/MetaNameBaseTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\metatag\Unit;

+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\metatag\Plugin\metatag\Tag\MetaNameBase;
 use Drupal\Tests\UnitTestCase;

@@ @@
   /**
    * The MetaNameBase Mocked Object.
    *
-   * @var \Drupal\metatag\Plugin\metatag\Tag\MetaNameBase|\PHPUnit\Framework\MockObject\MockObject
+   * @var MetaNameBase|MockObject
    */
   protected $metaNameBase;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/metatag/tests/src/Kernel/Migrate/d7/MetatagEntitiesTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\metatag\Kernel\Migrate\d7;

+use Drupal\migrate\Plugin\Migration;
 use Drupal\Core\StreamWrapper\PublicStream;
 use Drupal\Core\StreamWrapper\StreamWrapperInterface;
 use Drupal\node\Entity\Node;
@@ @@
     $fs->mkdir('public://sites/default/files', NULL, TRUE);
     file_put_contents('public://sites/default/files/cube.jpeg', str_repeat('*', 3620));

-    /** @var \Drupal\migrate\Plugin\Migration $migration */
+    /** @var Migration $migration */
     $migration = $this->getMigration('d7_file');
     // Set the source plugin's source_base_path configuration value, which
     // would normally be set by the user running the migration.
@@ @@
    * Test Metatag migration from Drupal 7 to 8.
    */
   public function testMetatag() {
-    /** @var \Drupal\node\Entity\Node $node */
+    /** @var Node $node */
     $node = Node::load(998);
     $this->assertInstanceOf(NodeInterface::class, $node);
     $this->assertTrue($node->hasField('field_metatag'));
@@ @@
     ];
     $this->assertSame(serialize($expected), $node->field_metatag->value);

-    /** @var \Drupal\user\Entity\User $user */
+    /** @var User $user */
     $user = User::load(2);
     $this->assertInstanceOf(UserInterface::class, $user);
     $this->assertTrue($user->hasField('field_metatag'));
@@ @@
     ];
     $this->assertSame(serialize($expected), $user->field_metatag->value);

-    /** @var \Drupal\taxonomy\Entity\Term $term */
+    /** @var Term $term */
     $term = Term::load(152);
     $this->assertInstanceOf(TermInterface::class, $term);
     $this->assertTrue($term->hasField('field_metatag'));
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/metatag/tests/src/Kernel/Migrate/d6/NodewordsEntitiesTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\metatag\Kernel\Migrate\d6;

+use Drupal\migrate\Plugin\Migration;
 use Drupal\Core\StreamWrapper\PublicStream;
 use Drupal\Core\StreamWrapper\StreamWrapperInterface;
 use Drupal\node\Entity\Node;
@@ @@
     $fs->mkdir('public://sites/default/files', NULL, TRUE);
     file_put_contents('public://sites/default/files/cube.jpeg', str_repeat('*', 3620));

-    /** @var \Drupal\migrate\Plugin\Migration $migration */
+    /** @var Migration $migration */
     $migration = $this->getMigration('d6_file');
     // Set the source plugin's source_base_path configuration value, which
     // would normally be set by the user running the migration.
@@ @@
    * Test Nodewords migration from Drupal 6 to Metatag in 8.
    */
   public function testMetatag() {
-    /** @var \Drupal\node\Entity\Node $node */
+    /** @var Node $node */
     $node = Node::load(23);
     $this->assertInstanceOf(NodeInterface::class, $node);
     $this->assertTrue($node->hasField('field_metatag'));
@@ @@
     ];
     $this->assertSame(serialize($expected), $node->field_metatag->value);

-    /** @var \Drupal\user\Entity\User $user */
+    /** @var User $user */
     $user = User::load(2);
     $this->assertInstanceOf(UserInterface::class, $user);
     $this->assertTrue($user->hasField('field_metatag'));
@@ @@
     ];
     $this->assertSame(serialize($expected), $user->field_metatag->value);

-    /** @var \Drupal\taxonomy\Entity\Term $term */
+    /** @var Term $term */
     $term = Term::load(16);
     $this->assertInstanceOf(TermInterface::class, $term);
     $this->assertTrue($term->hasField('field_metatag'));
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/metatag/tests/src/Kernel/MetatagSettingsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\metatag\Kernel;

+use Drupal\metatag\MetatagManagerInterface;
+use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\KernelTests\KernelTestBase;

 /**
@@ @@
   /**
    * The metatag manager.
    *
-   * @var \Drupal\metatag\MetatagManagerInterface
+   * @var MetatagManagerInterface
    */
   protected $metatagManager;

@@ @@
   /**
    * The configuration factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/metatag/tests/src/Kernel/MetatagSerializationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\metatag\Kernel;

+use Symfony\Component\Serializer\SerializerInterface;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\entity_test\Entity\EntityTest;
@@ @@
   /**
    * The serializer service.
    *
-   * @var \Symfony\Component\Serializer\SerializerInterface
+   * @var SerializerInterface
    */
   protected $serializer;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/metatag/tests/src/Kernel/MetatagManagerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\metatag\Kernel;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\metatag\MetatagManagerInterface;
+use Drupal\user\UserInterface;
 use Drupal\KernelTests\KernelTestBase;

 /**
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The metatag manager.
    *
-   * @var \Drupal\metatag\MetatagManagerInterface
+   * @var MetatagManagerInterface
    */
   protected $metatagManager;

@@ @@
    * Tests default tags for user entity.
    */
   public function testDefaultTagsFromEntity() {
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     $user = $this->entityTypeManager->getStorage('user')->create();

     $default_tags = $this->metatagManager->defaultTagsFromEntity($user);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/metatag/tests/src/Kernel/Form/MetatagSettingsFormTest.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The metatag form object under test.
    *
-   * @var \Drupal\metatag\Form\MetatagSettingsForm
+   * @var MetatagSettingsForm
    */
   protected $metatagSettingsForm;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/metatag/tests/src/Functional/NodeJsonOutput.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\metatag\Functional;

+use Drupal\node\NodeInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\rest\RestResourceConfigInterface;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   public function testNode() {
     $this->provisionResource();

-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = $this->createContentTypeNode('Test JSON output', 'Testing JSON output for a content type');
     $url = $node->toUrl();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/metatag/tests/src/Functional/MetatagXssTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\metatag\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Core\StringTranslation\StringTranslationTrait;

@@ @@
   /**
    * Administrator user for tests.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@

     // Check for the title tag, which will have the HTML tags removed and then
     // be lightly HTML encoded.
-    $session->assertEscaped(strip_tags($this->xssTitleString));
+    $this->assertSession()->assertEscaped(strip_tags($this->xssTitleString));
     $session->responseNotContains($this->xssTitleString);

     // Check for the basic meta tag.
@@ @@

     // Check for the title tag, which will have the HTML tags removed and then
     // be lightly HTML encoded.
-    $session->assertEscaped(strip_tags($this->xssTitleString));
+    $this->assertSession()->assertEscaped(strip_tags($this->xssTitleString));
     $session->responseNotContains($this->xssTitleString);

     // Check for the basic meta tag.
@@ @@

     // Check for the title tag, which will have the HTML tags removed and then
     // be lightly HTML encoded.
-    $session->assertEscaped(strip_tags($this->xssTitleString));
+    $this->assertSession()->assertEscaped(strip_tags($this->xssTitleString));
     $session->responseNotContains($this->xssTitleString);
   }
    ----------- end diff -----------

Applied rules:
 * AssertEscapedRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/metatag/tests/src/Functional/MetatagTagTypesTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\metatag\Functional;

+use Drupal\Core\Session\AccountInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Core\StringTranslation\StringTranslationTrait;

@@ @@
   /**
    * Admin user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/metatag/tests/src/Functional/MetatagStringTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\metatag\Functional;

+use Drupal\Core\Session\AccountInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Core\StringTranslation\StringTranslationTrait;

@@ @@
   /**
    * Admin user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/metatag/tests/src/Functional/MetatagPanelizerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\metatag\Functional;

+use Drupal\node\NodeInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
    * Create an entity, view its JSON output, confirm Metatag data exists.
    */
   public function testPanelizerMetatagPreRender() {
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $title = 'Panelizer Metatag Test Title';
     $body = 'Testing JSON output for a content type';
     $node = $this->createContentTypeNode($title, $body);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


14) modules/contrib/metatag/tests/src/Functional/MetatagNodeTranslationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\metatag\Functional;

+use Drupal\user\UserInterface;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * Administrator user for tests.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/metatag/tests/src/Functional/MetatagHelperTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\metatag\Functional;

+use Drupal\node\NodeInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Component\Utility\Html;
 use Drupal\taxonomy\Entity\Term;
@@ @@
    */
   protected function loginUser1() {
     // Load user 1.
-    /** @var \Drupal\user\Entity\User $account */
+    /** @var User $account */
     $account = User::load(1);

     // Reset the password.
@@ @@
    * @param string $body
    *   The text to use as the body.
    *
-   * @return \Drupal\node\NodeInterface
+   * @return NodeInterface
    *   A fully formatted node object.
    */
   private function createContentTypeNode($title = 'Title test', $body = 'Body test') {
@@ @@
    *   be automatically generated. If the 'name' item is not present the 'vid'
    *   will be used.
    *
-   * @return \Drupal\taxonomy\Entity\Vocabulary
+   * @return Vocabulary
    *   A fully formatted vocabulary object.
    */
   private function createVocabulary(array $values = []) {
@@ @@
     $vocab = Vocabulary::create($values);
     $status = $vocab->save();

-    if ($this instanceof \PHPUnit_Framework_TestCase) {
+    if ($this instanceof \PHPUnit\Framework\TestCase) {
       $this->assertSame($status, SAVED_NEW, (new FormattableMarkup('Created vocabulary %type.', ['%type' => $vocab->id()]))->__toString());
     }
     else {
@@ @@
    * @param array $values
    *   Items passed to the term. Requires the 'vid' element.
    *
-   * @return Drupal\taxonomy\Entity\Term
+   * @return Term
    *   A fully formatted term object.
    */
   private function createTerm(array $values = []) {
@@ @@
     $term = Term::create($values);
     $status = $term->save();

-    if ($this instanceof \PHPUnit_Framework_TestCase) {
+    if ($this instanceof \PHPUnit\Framework\TestCase) {
       $this->assertSame($status, SAVED_NEW, (new FormattableMarkup('Created term %name.', ['%name' => $term->label()]))->__toString());
     }
     else {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


16) modules/contrib/metatag/tests/src/Functional/MetatagForumTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\metatag\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Core\StringTranslation\StringTranslationTrait;

@@ @@
   /**
    * Administrator user for tests.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/metatag/tests/src/Functional/MetatagFieldUserTest.php:95

    ---------- begin diff ----------
@@ @@
    * Confirm the metatag field can be shown on a user registration page.
    *
    * @todo Write this.
+   * @doesNotPerformAssertions
    */
   public function testFieldsOnUserRegistrationForm() {}

@@ @@
    * Confirm the metatag field can be shown on a normal user's own edit form.
    *
    * @todo Write this.
+   * @doesNotPerformAssertions
    */
   public function testFieldsOnUserEditForm() {}
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/metatag/tests/src/Functional/MetatagFieldTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\metatag\Functional;

+use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * Admin user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminUser;

@@ @@
    * When there is no field for overriding the defaults.
    *
    * @todo Write this.
+   * @doesNotPerformAssertions
    */
   public function testBundleDefaultsInheritance() {
   }
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/metatag/tests/src/Functional/MetatagConfigTranslationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\metatag\Functional;

+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Config\ConfigManagerInterface;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\metatag\Entity\MetatagDefaults;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   /**
    * Admin user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminUser;

@@ @@
     // Load all of the Metatag defaults.
     $defaults = \Drupal::configFactory()->listAll('metatag.metatag_defaults');

-    /** @var \Drupal\Core\Config\ConfigManagerInterface $config_manager */
+    /** @var ConfigManagerInterface $config_manager */
     $config_manager = \Drupal::service('config.manager');

     // Confirm each of the configs is available on the translation form.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/metatag/tests/src/Functional/DisabledDefaultTags.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\metatag\Functional;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\metatag\Entity\MetatagDefaults;
+use Behat\Mink\Exception\ExpectationException;
+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
    * @param string $id
    *   The id of the metatag default to load.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The default metatag.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function loadMetatagDefault($id) {
-    /** @var \Drupal\Core\Entity\EntityStorageInterface $global_metatag_manager */
+    /** @var EntityStorageInterface $global_metatag_manager */
     $global_metatag_manager = \Drupal::entityTypeManager()
       ->getStorage('metatag_defaults');
-    /** @var \Drupal\metatag\Entity\MetatagDefaults $entity_metatags */
+    /** @var MetatagDefaults $entity_metatags */
     return $global_metatag_manager->load($id);
   }

@@ @@
   /**
    * Test that a disabled Node metatag default doesn't load.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityMalformedException
+   * @throws EntityStorageException
    */
   public function testEntityTypeDefaults() {
     $node = $this->createContentTypeNode();
@@ @@
     // Change the node type default's canonical to a hardcoded test string.
     // Will be inherited by node:page, as normally neither has canonical filled
     // in and inherit it anyway from Global.
-    /** @var \Drupal\Core\Entity\EntityStorageInterface $global_metatag_manager */
+    /** @var EntityStorageInterface $global_metatag_manager */
     $global_metatag_manager = \Drupal::entityTypeManager()
       ->getStorage('metatag_defaults');
-    /** @var \Drupal\metatag\Entity\MetatagDefaults $entity_metatags */
+    /** @var MetatagDefaults $entity_metatags */
     $entity_metatags = $global_metatag_manager->load('node');
     $entity_metatags->overwriteTags(['canonical_url' => 'https://test.canonical']);
     $entity_metatags->save();
@@ @@
   /**
    * Test that a disabled node bundle metatag default doesn't load.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityMalformedException
+   * @throws EntityStorageException
    */
   public function testEntityBundleDefaults() {
     $node = $this->createContentTypeNode();
@@ @@
       ->toString();

     // Change the node bundle's default's canonical to a hardcoded test string.
-    /** @var \Drupal\Core\Entity\EntityStorageInterface $global_metatag_manager */
+    /** @var EntityStorageInterface $global_metatag_manager */
     $global_metatag_manager = \Drupal::entityTypeManager()
       ->getStorage('metatag_defaults');
-    /** @var \Drupal\metatag\Entity\MetatagDefaults $entity_metatags */
+    /** @var MetatagDefaults $entity_metatags */
     $entity_metatags = $global_metatag_manager->create(['id' => 'node__metatag_test']);
     $entity_metatags->overwriteTags(['canonical_url' => 'https://test.canonical']);
     $entity_metatags->save();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/metatag/src/Plugin/migrate/source/d7/MetatagFieldInstanceDeriver.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a PathRedirectDeriver instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/metatag/src/Plugin/migrate/source/d7/MetatagFieldInstance.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type bundle service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * Sets the entity type bundle info service.
    *
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info service.
    */
   public function setEntityTypeBundleInfo(EntityTypeBundleInfoInterface $entity_type_bundle_info) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/metatag/src/Plugin/migrate/source/d7/MetatagFieldDeriver.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a MetatagFieldDeriver instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/metatag/src/Plugin/migrate/source/d6/NodewordsFieldInstance.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type bundle service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * Sets the entity type bundle info service.
    *
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info service.
    */
   public function setEntityTypeBundleInfo(EntityTypeBundleInfoInterface $entity_type_bundle_info) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/metatag/src/Plugin/metatag/Tag/MetaNameBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\metatag\Plugin\metatag\Tag;

+use Drupal\Core\Annotation\Translation;
+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Component\Render\PlainTextOutput;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The title of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * A longer explanation of what the field is for.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * Retrieves the currently active request object.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
    *
    * @param array $element
    *   The form element to process.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function validateTag(array &$element, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/metatag/src/Plugin/metatag/Group/GroupBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\metatag\Plugin\metatag\Group;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Plugin\PluginBase;

 /**
@@ @@
   /**
    * The name of the group.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/metatag/src/Plugin/Field/FieldWidget/MetatagFirehose.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * Instance of MetatagManager service.
    *
-   * @var \Drupal\metatag\MetatagManagerInterface
+   * @var MetatagManagerInterface
    */
   protected $metatagManager;

@@ @@
   /**
    * Instance of MetatagTagPluginManager service.
    *
-   * @var \Drupal\metatag\MetatagTagPluginManager
+   * @var MetatagTagPluginManager
    */
   protected $metatagPluginManager;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/metatag/src/MetatagToken.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;

@@ @@
   /**
    * Token entity type mapper service.
    *
-   * @var \Drupal\token\TokenEntityMapperInterface
+   * @var TokenEntityMapperInterface
    */
   protected $tokenEntityMapper;

@@ @@
   /**
    * Constructs a new MetatagToken object.
    *
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   Token service.
-   * @param \Drupal\token\TokenEntityMapperInterface $token_entity_mapper
+   * @param TokenEntityMapperInterface $token_entity_mapper
    *   The token entity type mapper service.
    */
   public function __construct(Token $token, TokenEntityMapperInterface $token_entity_mapper) {
@@ @@
    *   Arguments for token->replace().
    * @param array $options
    *   Any additional options necessary.
-   * @param \Drupal\Core\Render\BubbleableMetadata|null $bubbleable_metadata
+   * @param BubbleableMetadata|null $bubbleable_metadata
    *   (optional) An object to which static::generate() and the hooks and
    *   functions that it invokes will add their required bubbleable metadata.
    *
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


29) modules/contrib/metatag/src/MetatagManagerInterface.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Extracts all tags of a given entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The content entity to extract meta tags from.
    *
    * @return array
@@ @@
    *
    * And combines them with sitewide, per-entity-type, and per-bundle defaults.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The content entity to extract meta tags from.
    *
    * @return array
@@ @@
    *
    * From sitewide, per-entity-type, and per-bundle defaults.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The content entity for which to calculate defaults.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


30) modules/contrib/metatag/src/MetatagManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\metatag;

+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\field\Entity\FieldConfig;
+use Drupal\metatag\Entity\MetatagDefaults;
+use Drupal\metatag\Plugin\metatag\Tag\MetaNameBase;
 use Drupal\Component\Render\PlainTextOutput;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The group plugin manager.
    *
-   * @var \Drupal\metatag\MetatagGroupPluginManager
+   * @var MetatagGroupPluginManager
    */
   protected $groupPluginManager;

@@ @@
   /**
    * The tag plugin manager.
    *
-   * @var \Drupal\metatag\MetatagTagPluginManager
+   * @var MetatagTagPluginManager
    */
   protected $tagPluginManager;

@@ @@
   /**
    * The Metatag token.
    *
-   * @var \Drupal\metatag\MetatagToken
+   * @var MetatagToken
    */
   protected $tokenService;

@@ @@
   /**
    * The Metatag logging channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * The path matcher.
    *
-   * @var \Drupal\Core\Path\PathMatcherInterface
+   * @var PathMatcherInterface
    */
   protected $pathMatcher;

@@ @@
   /**
    * The route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Constructor for MetatagManager.
    *
-   * @param \Drupal\metatag\MetatagGroupPluginManager $groupPluginManager
+   * @param MetatagGroupPluginManager $groupPluginManager
    *   The MetatagGroupPluginManager object.
-   * @param \Drupal\metatag\MetatagTagPluginManager $tagPluginManager
+   * @param MetatagTagPluginManager $tagPluginManager
    *   The MetatagTagPluginManager object.
-   * @param \Drupal\metatag\MetatagToken $token
+   * @param MetatagToken $token
    *   The MetatagToken object.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $channelFactory
+   * @param LoggerChannelFactoryInterface $channelFactory
    *   The LoggerChannelFactoryInterface object.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The EntityTypeManagerInterface object.
-   * @param \Drupal\Core\Path\PathMatcherInterface $pathMatcher
+   * @param PathMatcherInterface $pathMatcher
    *   The path matcher.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $routeMatch
+   * @param RouteMatchInterface $routeMatch
    *   The route match.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
    */
   public function __construct(MetatagGroupPluginManager $groupPluginManager,
@@ @@

     $fields = $this->getFields($entity);

-    /** @var \Drupal\field\Entity\FieldConfig $field_info */
+    /** @var FieldConfig $field_info */
     foreach ($fields as $field_name => $field_info) {
       // Get the tags from this field.
       $tags = $this->getFieldTags($entity, $field_name);
@@ @@
    * {@inheritdoc}
    */
   public function defaultTagsFromEntity(ContentEntityInterface $entity) {
-    /** @var \Drupal\metatag\Entity\MetatagDefaults $metatags */
+    /** @var MetatagDefaults $metatags */
     $metatags = $this->metatagDefaults->load('global');
     if (!$metatags || !$metatags->status()) {
       return [];
     }
     // Add/overwrite with tags set on the entity type.
-    /** @var \Drupal\metatag\Entity\MetatagDefaults $entity_type_tags */
+    /** @var MetatagDefaults $entity_type_tags */
     $entity_type_tags = $this->metatagDefaults->load($entity->getEntityTypeId());
     if (!is_null($entity_type_tags) && $entity_type_tags->status()) {
       $metatags->overwriteTags($entity_type_tags->get('tags'));
     }
     // Add/overwrite with tags set on the entity bundle.
-    /** @var \Drupal\metatag\Entity\MetatagDefaults $bundle_metatags */
+    /** @var MetatagDefaults $bundle_metatags */
     $bundle_metatags = $this->metatagDefaults->load($entity->getEntityTypeId() . '__' . $entity->bundle());
     if (!is_null($bundle_metatags) && $bundle_metatags->status()) {
       $metatags->overwriteTags($bundle_metatags->get('tags'));
@@ @@
   /**
    * Returns a list of the Metatag fields on an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to examine.
    *
    * @return array
@@ @@
   /**
    * Returns a list of the meta tags with values from a field.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The ContentEntityInterface object.
    * @param string $field_name
    *   The name of the field to work on.
@@ @@
   /**
    * Returns default meta tags for an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to work on.
    *
    * @return array
@@ @@
   /**
    * Returns global meta tags.
    *
-   * @return \Drupal\metatag\Entity\MetatagDefaults|null
+   * @return MetatagDefaults|null
    *   The global meta tags or NULL.
    */
   public function getGlobalMetatags() {
@@ @@
   /**
    * Returns special meta tags.
    *
-   * @return \Drupal\metatag\Entity\MetatagDefaults|null
+   * @return MetatagDefaults|null
    *   The defaults for this page, if it's a special page.
    */
   public function getSpecialMetatags() {
@@ @@
   /**
    * Returns default meta tags for an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to work with.
    *
    * @return array
@@ @@
    *   The appropriate default meta tags.
    */
   public function getEntityDefaultMetatags(ContentEntityInterface $entity) {
-    /** @var \Drupal\metatag\Entity\MetatagDefaults $entity_metatags */
+    /** @var MetatagDefaults $entity_metatags */
     $entity_metatags = $this->metatagDefaults->load($entity->getEntityTypeId());
     $metatags = [];
     if ($entity_metatags != NULL && $entity_metatags->status()) {
@@ @@
     }

     // Finally, check if we should apply bundle overrides.
-    /** @var \Drupal\metatag\Entity\MetatagDefaults $bundle_metatags */
+    /** @var MetatagDefaults $bundle_metatags */
     $bundle_metatags = $this->metatagDefaults->load($entity->getEntityTypeId() . '__' . $entity->bundle());
     if ($bundle_metatags != NULL && $bundle_metatags->status()) {
       // Merge with existing defaults.
@@ @@
    *   The array of tags as plugin_id => value.
    * @param object $entity
    *   Optional entity object to use for token replacements.
-   * @param \Drupal\Core\Render\BubbleableMetadata|null $cache
+   * @param BubbleableMetadata|null $cache
    *   (optional) Cacheability metadata.
    *
    * @return array
@@ @@
   /**
    * Sets tag value and returns sanitized value with token replaced.
    *
-   * @param \Drupal\metatag\Plugin\metatag\Tag\MetaNameBase|object $tag
+   * @param MetaNameBase|object $tag
    *   Metatag object.
    * @param array|string $value
    *   Value to process.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


31) modules/contrib/metatag/src/MetatagDefaultsListBuilder.php:93

    ---------- begin diff ----------
@@ @@
   /**
    * Renders the Metatag defaults label plus its configuration.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The Metatag defaults entity.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/metatag/src/Form/MetatagSettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\metatag\Form;

+use Drupal\metatag\MetatagManagerInterface;
+use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
+use Drupal\Core\State\StateInterface;
+use Drupal\metatag\MetatagTagPluginManager;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The metatag.manager service.
    *
-   * @var \Drupal\metatag\MetatagManagerInterface
+   * @var MetatagManagerInterface
    */
   protected $metatagManager;

@@ @@
   /**
    * The entity_type.bundle.info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The tag plugin manager.
    *
-   * @var \Drupal\metatag\MetatagTagPluginManager
+   * @var MetatagTagPluginManager
    */
   protected $tagPluginManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/metatag/src/Form/MetatagDefaultsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\metatag\Form;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Entity\ContentEntityType;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ @@
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The Metatag manager service.
    *
-   * @var \Drupal\metatag\MetatagManagerInterface
+   * @var MetatagManagerInterface
    */
   protected $metatagManager;

@@ @@
   /**
    * The Metatag token service.
    *
-   * @var \Drupal\metatag\MetatagToken
+   * @var MetatagToken
    */
   protected $metatagToken;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The Metatag tag plugin manager service.
    *
-   * @var \Drupal\metatag\MetatagTagPluginManager
+   * @var MetatagTagPluginManager
    */
   protected $metatagPluginManager;

@@ @@
   /**
    * Constructs a new MetatagDefaultsForm.
    *
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\metatag\MetatagManagerInterface $metatag_manager
+   * @param MetatagManagerInterface $metatag_manager
    *   The Metatag manager service.
-   * @param \Drupal\metatag\MetatagToken $metatag_token
+   * @param MetatagToken $metatag_token
    *   The Metatag token service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\metatag\MetatagTagPluginManager $metatag_plugin_manager
+   * @param MetatagTagPluginManager $metatag_plugin_manager
    *   The Metatag tag plugin manager service.
    */
   public function __construct(EntityTypeBundleInfoInterface $entity_type_bundle_info, MetatagManagerInterface $metatag_manager, MetatagToken $metatag_token, ModuleHandlerInterface $module_handler, MetatagTagPluginManager $metatag_plugin_manager) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
   public static function getSupportedEntityTypes() {
     $entity_types = [];

-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
+    /** @var EntityTypeManagerInterface $entity_type_manager */
     $entity_type_manager = \Drupal::service('entity_type.manager');

     // A list of entity types that are not supported.
@@ @@
   /**
    * Returns the text label for the entity type specified.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entityType
+   * @param EntityTypeInterface $entityType
    *   The entity type to process.
    *
    * @return string
@@ @@
     $label = $entityType->getLabel();

     if (is_a($label, 'Drupal\Core\StringTranslation\TranslatableMarkup')) {
-      /** @var \Drupal\Core\StringTranslation\TranslatableMarkup $label */
+      /** @var TranslatableMarkup $label */
       $label = $label->render();
     }

@@ @@
   /**
    * Route title callback.
    *
-   * @param \Drupal\metatag\MetatagDefaultsInterface|null $metatag_defaults
+   * @param MetatagDefaultsInterface|null $metatag_defaults
    *   Metatags default entity.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Translated route title.
    */
   public function getTitle(MetatagDefaultsInterface $metatag_defaults) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/metatag/src/Entity/MetatagDefaults.php:98

    ---------- begin diff ----------
@@ @@
    * Reverts an entity to its default values.
    */
   public function revert() {
-    $default_install_path = drupal_get_path('module', 'metatag') . '/' . InstallStorage::CONFIG_INSTALL_DIRECTORY;
+    $default_install_path = \Drupal::service('extension.list.module')->getPath('metatag') . '/' . InstallStorage::CONFIG_INSTALL_DIRECTORY;
     $storage = new FileStorage($default_install_path, StorageInterface::DEFAULT_COLLECTION);
     $default_config_data = $storage->read('metatag.metatag_defaults.' . $this->id());
     if ($default_config_data) {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/metatag/src/Controller/MetatagController.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Metatag tag plugin manager.
    *
-   * @var \Drupal\metatag\MetatagTagPluginManager
+   * @var MetatagTagPluginManager
    */
   protected $tagManager;

@@ @@
   /**
    * Metatag group plugin manager.
    *
-   * @var \Drupal\metatag\MetatagGroupPluginManager
+   * @var MetatagGroupPluginManager
    */
   protected $groupManager;

@@ @@
   /**
    * Constructs a new \Drupal\views_ui\Controller\ViewsUIController object.
    *
-   * @param \Drupal\metatag\MetatagTagPluginManager $tag_manaager
+   * @param MetatagTagPluginManager $tag_manaager
    *   The tag manager object.
-   * @param \Drupal\metatag\MetatagGroupPluginManager $group_manager
+   * @param MetatagGroupPluginManager $group_manager
    *   The group manager object.
    */
   public function __construct(MetatagTagPluginManager $tag_manaager, MetatagGroupPluginManager $group_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/metatag/src/Annotation/MetatagTag.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\metatag\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The display label/name of the meta tag plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * A longer explanation of what the field is for.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


37) modules/contrib/metatag/src/Annotation/MetatagGroup.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\metatag\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The name of the group.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


38) modules/contrib/metatag/metatag_views/tests/src/Functional/MetatagViewsTokenTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\metatag_views\Functional;

+use Drupal\Tests\metatag\Functional\MetatagHelperTrait;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
 class MetatagViewsTokenTest extends BrowserTestBase {

   // Contains helper methods.
-  use \Drupal\Tests\metatag\Functional\MetatagHelperTrait;
+  use MetatagHelperTrait;

   /**
    * {@inheritdoc}
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


39) modules/contrib/metatag/metatag_views/tests/src/Functional/MetatagViewsBasicsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\metatag_views\Functional;

+use Drupal\Tests\metatag\Functional\MetatagHelperTrait;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
 class MetatagViewsBasicsTest extends BrowserTestBase {

   // Contains helper methods.
-  use \Drupal\Tests\metatag\Functional\MetatagHelperTrait;
+  use MetatagHelperTrait;

   /**
    * {@inheritdoc}
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/metatag/metatag_views/src/Plugin/views/display_extender/MetatagDisplayExtender.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\metatag_views\Plugin\views\display_extender;

+use Drupal\metatag\MetatagManagerInterface;
+use Drupal\metatag\MetatagTagPluginManager;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\views\Plugin\views\display_extender\DisplayExtenderPluginBase;
 use Drupal\views\Plugin\views\style\StylePluginBase;
@@ @@
   /**
    * The metatag manager.
    *
-   * @var \Drupal\metatag\MetatagManagerInterface
+   * @var MetatagManagerInterface
    */
   protected $metatagManager;

@@ @@
   /**
    * The plugin manager for metatag tags.
    *
-   * @var \Drupal\metatag\MetatagTagPluginManager
+   * @var MetatagTagPluginManager
    */
   protected $metatagTagManager;

@@ @@
   /**
    * Set the first row tokens on the style plugin.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The view.
    * @param array $first_row_tokens
    *   The first row tokens.
@@ @@
   /**
    * Get the first row tokens from the style plugin.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The view.
    *
    * @return array
@@ @@
   /**
    * Get the first row tokens for this Views object iteration.
    *
-   * @param \Drupal\views\Plugin\views\style\StylePluginBase $style
+   * @param StylePluginBase $style
    *   The style plugin used for this request.
    *
    * @return \ReflectionProperty
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


41) modules/contrib/metatag/metatag_views/src/MetatagViewsCacheWrapper.php:24

    ---------- begin diff ----------
@@ @@
   const RESULTS = 'results';

   /**
-   * @var \Drupal\views\Plugin\views\cache\CachePluginBase
+   * @var CachePluginBase
    */
   protected $plugin;

@@ @@
   /**
    * MetatagViewsCacheWrapper constructor.
    *
-   * @param \Drupal\views\Plugin\views\cache\CachePluginBase $plugin
+   * @param CachePluginBase $plugin
    *   The cache plugin being wrapped.
    */
   public function __construct(CachePluginBase $plugin) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


42) modules/contrib/metatag/metatag_views/src/MetatagViewsCachePluginManager.php:13

    ---------- begin diff ----------
@@ @@
 class MetatagViewsCachePluginManager implements PluginManagerInterface, CachedDiscoveryInterface, CacheableDependencyInterface {

   /**
-   * @var \Drupal\views\Plugin\ViewsPluginManager
+   * @var ViewsPluginManager
    */
   protected $viewsPluginManager;

@@ @@
   /**
    * MetatagViewsCachePluginManager constructor.
    *
-   * @param \Drupal\views\Plugin\ViewsPluginManager $views_plugin_manager
+   * @param ViewsPluginManager $views_plugin_manager
    */
   public function __construct(ViewsPluginManager $views_plugin_manager) {
     $this->viewsPluginManager = $views_plugin_manager;
@@ @@
   }

   /**
-   * @param \Drupal\views\Plugin\views\cache\CachePluginBase $plugin
+   * @param CachePluginBase $plugin
    *
-   * @return \Drupal\metatag_views\MetatagViewsCacheWrapper
+   * @return MetatagViewsCacheWrapper
    */
   protected function wrap(CachePluginBase $plugin) {
     return new MetatagViewsCacheWrapper($plugin);
@@ @@
    * {@inheritdoc}
    */
   public function getInstance(array $options) {
-    /** @var \Drupal\views\Plugin\views\cache\CachePluginBase $plugin */
+    /** @var CachePluginBase $plugin */
     $plugin = $this->viewsPluginManager->getInstance($options);
     return $plugin->getPluginId() === 'none' ? $plugin : $this->wrap($plugin);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


43) modules/contrib/metatag/metatag_views/src/Form/MetatagViewsTranslationForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\metatag_views\Form;

+use Drupal\metatag\MetatagManager;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\views\ViewEntityInterface;
+use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Drupal\metatag\MetatagManager definition.
    *
-   * @var \Drupal\metatag\MetatagManager
+   * @var MetatagManager
    */
   protected $metatagManager;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\language\ConfigurableLanguageManagerInterface
+   * @var ConfigurableLanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The Views manager.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $viewsManager;

@@ @@
   /**
    * The Metatag token service.
    *
-   * @var \Drupal\metatag\MetatagToken
+   * @var MetatagToken
    */
   protected $tokenService;

@@ @@
   /**
    * The Metatag tag plugin manager.
    *
-   * @var \Drupal\metatag\MetatagTagPluginManager
+   * @var MetatagTagPluginManager
    */
   protected $tagPluginManager;

@@ @@
   /**
    * The View entity object.
    *
-   * @var \Drupal\views\ViewEntityInterface
+   * @var ViewEntityInterface
    */
   protected $view;

@@ @@
   /**
    * The language of the translation.
    *
-   * @var \Drupal\Core\Language\LanguageInterface
+   * @var LanguageInterface
    */
   protected $language;

@@ @@
   /**
    * The language of the translation source.
    *
-   * @var \Drupal\Core\Language\LanguageInterface
+   * @var LanguageInterface
    */
   protected $sourceLanguage;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


44) modules/contrib/metatag/metatag_views/src/Form/MetatagViewsRevertForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\metatag_views\Form;

+use Drupal\views\ViewEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Entity manager for views entities.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $viewsManager;

@@ @@
   /**
    * The view entity to revert meta tags on.
    *
-   * @var \Drupal\views\ViewEntityInterface
+   * @var ViewEntityInterface
    */
   protected $view;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


45) modules/contrib/metatag/metatag_views/src/Form/MetatagViewsEditForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\metatag_views\Form;

+use Drupal\metatag\MetatagManager;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\views\ViewEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Drupal\metatag\MetatagManager definition.
    *
-   * @var \Drupal\metatag\MetatagManager
+   * @var MetatagManager
    */
   protected $metatagManager;

@@ @@
   /**
    * The Views manager.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $viewsManager;

@@ @@
   /**
    * View entity object.
    *
-   * @var \Drupal\views\ViewEntityInterface
+   * @var ViewEntityInterface
    */
   protected $view;

@@ @@
     unset($metatags['view']);
     $metatags = $this->clearMetatagViewsDisallowedValues($metatags);

-    /** @var \Drupal\views\ViewEntityInterface $view */
+    /** @var ViewEntityInterface $view */
     $view = $this->viewsManager->load($view_id);

     // Store the meta tags on the view.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


46) modules/contrib/metatag/metatag_views/src/Controller/MetatagViewsTranslationController.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The View storage interface.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $viewStorage;

@@ @@
   /**
    * The Metatag manager.
    *
-   * @var \Drupal\metatag\MetatagManagerInterface
+   * @var MetatagManagerInterface
    */
   protected $metatagManager;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


47) modules/contrib/metatag/metatag_views/src/Controller/MetatagViewsController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\metatag_views\Controller;

+use Drupal\views\ViewEntityInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * The Views storage interface.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $viewStorage;

@@ @@
   /**
    * The Metatag manager interface.
    *
-   * @var \Drupal\metatag\MetatagManagerInterface
+   * @var MetatagManagerInterface
    */
   protected $metatagManager;

@@ @@
    * Gets label values for the views and their displays.
    */
   protected function getViewsAndDisplaysLabels() {
-    /** @var \Drupal\views\ViewEntityInterface[] $views */
+    /** @var ViewEntityInterface[] $views */
     $views = $this->viewStorage->loadByProperties(['status' => 1]);

     $labels = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


48) modules/contrib/metatag/metatag_open_graph/metatag_open_graph.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\ContentEntityType;
 /**
  * @file
  * Update scripts for the Metatag Open Graph module.
@@ @@
  * The "article:tags" meta tag was renamed to the correct "article:tag".
  */
 function metatag_open_graph_update_8101() {
-  /** @var Drupal\metatag\Entity\MetatagDefaults $configs */
+  /** @var MetatagDefaults $configs */
   $configs = MetatagDefaults::loadMultiple();

   foreach ($configs as $config) {
@@ @@

   foreach ($sandbox['todo'] as $entity_type => $fields) {

-    /** @var Drupal\Core\Entity\ContentEntityType $def */
+    /** @var ContentEntityType $def */
     $def = Drupal::entityTypeManager()->getDefinition($entity_type);

     // Grab the primary key field for this entity type
@@ @@
       $entities = $etm->getStorage($entity_type)->loadMultiple($res);

       foreach ($entities as $entity) {
-        /** @var \Drupal\Core\Entity\ContentEntityBase $entity */
+        /** @var ContentEntityBase $entity */
         if ($entity instanceof ContentEntityBase) {
           if ($entity->hasField($field_name)) {
             /** @var LanguageInterface $langcode */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


49) modules/contrib/metatag/metatag_hreflang/src/Plugin/Derivative/HreflangDeriver.php:22

    ---------- begin diff ----------
@@ @@
       ->getLanguages(LanguageInterface::STATE_ALL);

     // Now we loop over them and declare the derivatives.
-    /** @var \Drupal\Core\Language\LanguageInterface $language */
+    /** @var LanguageInterface $language */
     foreach ($languages as $langcode => $language) {
       // Ignore the global values.
       if ($langcode == Language::LANGCODE_NOT_SPECIFIED) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


50) modules/contrib/metatag/metatag_extended_perms/tests/src/Functional/PermissionsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\metatag_extended_perms\Functional;

+use Drupal\Tests\metatag\Functional\MetatagHelperTrait;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
 class PermissionsTest extends BrowserTestBase {

   // Contains helper methods.
-  use \Drupal\Tests\metatag\Functional\MetatagHelperTrait;
+  use MetatagHelperTrait;

   /**
    * {@inheritdoc}
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


51) modules/contrib/metatag/metatag_extended_perms/src/MetatagPermissions.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The Metatag Tag Plugin Manager.
    *
-   * @var \Drupal\metatag\MetatagTagPluginManager
+   * @var MetatagTagPluginManager
    */
   protected $tagManager;

@@ @@
   /**
    * The Metatag Group Plugin Manager.
    *
-   * @var \Drupal\metatag\MetatagGroupPluginManager
+   * @var MetatagGroupPluginManager
    */
   protected $groupManager;

@@ @@
   /**
    * Constructs a MetatagPermissions instance.
    *
-   * @param \Drupal\metatag\MetatagTagPluginManager $tag_manager
+   * @param MetatagTagPluginManager $tag_manager
    *   The tag plugin manager.
-   * @param \Drupal\metatag\MetatagGroupPluginManager $group_manager
+   * @param MetatagGroupPluginManager $group_manager
    *   The group plugin manager.
    */
   public function __construct(MetatagTagPluginManager $tag_manager, MetatagGroupPluginManager $group_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


52) modules/contrib/metatag/metatag.tokens.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\token\TokenInterface;
 /**
  * @file
  * Metatag token integration.
@@ @@

   switch ($type) {
     case 'current-page':
-      /** @var \Drupal\token\TokenInterface $token_service */
+      /** @var TokenInterface $token_service */
       $token_service = \Drupal::token();
       $metatag_tokens = $token_service->findWithPrefix($tokens, 'metatag');
       if (!empty($metatag_tokens) && metatag_is_current_route_supported()) {
@@ @@

     case 'entity':
       if (!empty($data['entity_type']) && !empty($data['entity']) && !empty($data['token_type'])) {
-        /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+        /** @var ContentEntityInterface $entity */
         $entity = $data['entity'];
         if (!($entity instanceof ContentEntityInterface)) {
           return $replacements;
@@ @@
         }

         if (!empty($metatag_fields)) {
-          /** @var \Drupal\token\TokenInterface $token_service */
+          /** @var TokenInterface $token_service */
           $token_service = \Drupal::token();
           $metatag_tokens = [];
           foreach ($metatag_fields as $metatag_field) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


53) modules/contrib/metatag/metatag.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\metatag\MetatagManager;
+use Drupal\Core\Language\LanguageManagerInterface;
+use Drupal\metatag\Entity\MetatagDefaults;
+use Drupal\Core\Database\Query\SelectInterface;
 /**
  * @file
  * Contains metatag.module.
@@ @@
 /**
  * A function to determine whether the entity in question is the route entity.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity.
  *
  * @return bool
@@ @@
 /**
  * Returns the entity of the current route.
  *
- * @return Drupal\Core\Entity\EntityInterface|null
+ * @return EntityInterface|null
  *   The entity or NULL if this is not an entity route.
  */
 function metatag_get_route_entity() {
@@ @@
  *   Array of tags or NULL;
  */
 function metatag_get_default_tags($entity = NULL) {
-  /** @var \Drupal\Core\Entity\EntityStorageInterface $global_metatag_manager */
+  /** @var EntityStorageInterface $global_metatag_manager */
   $global_metatag_manager = \Drupal::entityTypeManager()->getStorage('metatag_defaults');
-  /** @var \Drupal\metatag\MetatagManager $metatag_manager */
+  /** @var MetatagManager $metatag_manager */
   $metatag_manager = \Drupal::service('metatag.manager');

   // Load config based on language.
   $current_language = NULL;
   if ($entity !== NULL) {
-    /** @var \Drupal\Core\Language\LanguageManagerInterface $language_manager */
+    /** @var LanguageManagerInterface $language_manager */
     $language_manager = \Drupal::languageManager();
     $current_language = $language_manager->getConfigOverrideLanguage();
     $language_manager->setConfigOverrideLanguage($entity->language());
@@ @@
     }

     if (!empty($entity) && $entity instanceof ContentEntityInterface) {
-      /** @var \Drupal\metatag\Entity\MetatagDefaults|null $entity_metatags */
+      /** @var MetatagDefaults|null $entity_metatags */
       $entity_metatags = $global_metatag_manager->load($entity->getEntityTypeId());
       if ($entity_metatags != NULL && $entity_metatags->status()) {
         // Merge with global defaults.
@@ @@
       }

       // Finally, check if bundle overrides should be added.
-      /** @var \Drupal\metatag\Entity\MetatagDefaults|null $bundle_metatags */
+      /** @var MetatagDefaults|null $bundle_metatags */
       $bundle_metatags = $global_metatag_manager->load($entity->getEntityTypeId() . '__' . $entity->bundle());
       if ($bundle_metatags != NULL && $bundle_metatags->status()) {
         // Merge with existing defaults.
@@ @@
       }

       /** @var \Drupal\migrate\Plugin\migrate\source\SqlBase $source */
-      /** @var \Drupal\Core\Database\Query\SelectInterface $query */
+      /** @var SelectInterface $query */
       $query = $source->getDatabase()->select('metatag', 'm')
         ->fields('m', ['data'])
         ->condition('entity_type', $entity_type)
@@ @@
       // define('NODEWORDS_TYPE_TRACKER',    7);
       // define('NODEWORDS_TYPE_VOCABULARY', 9);
       // @endcode
-
       /** @var \Drupal\migrate\Plugin\migrate\source\SqlBase $source */
-      /** @var \Drupal\Core\Database\Query\SelectInterface $query */
+      /** @var SelectInterface $query */
       $query = $source->getDatabase()->select('nodewords', 'nw')
         ->fields('nw', ['name', 'content'])
         ->condition('type', $nodeword_type)
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


54) modules/contrib/metatag/metatag.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\field\FieldStorageConfigInterface;
 /**
  * @file
  * Requirements and update functions for the Metatag module.
@@ @@
     $field_counter = 0;

     // Get all of the field storage entities of type metatag.
-    /** @var \Drupal\field\FieldStorageConfigInterface[] $field_storage_configs */
+    /** @var FieldStorageConfigInterface[] $field_storage_configs */
     $field_storage_configs = \Drupal::entityTypeManager()
       ->getStorage('field_storage_config')
       ->loadByProperties(['type' => 'metatag']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


55) modules/contrib/metatag/metatag.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\Core\Entity\EntityInterface;
 /**
  * @file
  * Document all supported APIs.
  */
-
 /**
  * Provides a ability to integrate alternative routes with metatags.
  *
@@ @@
  * Return an entity when the given route/route parameters matches a certain
  * entity. All meta tags will be rendered on that page.
  *
- * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+ * @param RouteMatchInterface $route_match
  *   The route match.
  *
- * @return \Drupal\Core\Entity\EntityInterface|null
+ * @return EntityInterface|null
  *   Return an entity, if the route should use metatags.
  */
-function hook_metatag_route_entity(\Drupal\Core\Routing\RouteMatchInterface $route_match) {
+function hook_metatag_route_entity(RouteMatchInterface $route_match) {
   if ($route_match->getRouteName() === 'example.test_route') {
     if ($node = $route_match->getParameter('node')) {
       return $node;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/metatag/src/Plugin/GraphQL/Scalars/MetatagScalar.php" 
         file, due to:                                                          
         "Analyze error: "Class                                                 
         Drupal\graphql\Plugin\GraphQL\Scalars\Internal\StringScalar not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

