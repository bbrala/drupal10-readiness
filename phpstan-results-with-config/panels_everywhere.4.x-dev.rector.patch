diff --git a/panels_everywhere.module b/panels_everywhere.module
index 1ed97a4..b4e8fe3 100644
--- a/panels_everywhere.module
+++ b/panels_everywhere.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant;
 use Drupal\page_manager\PageVariantInterface;
 
 /**
@@ -13,7 +14,7 @@ use Drupal\page_manager\PageVariantInterface;
  */
 function panels_everywhere_page_variant_create(PageVariantInterface $page_variant) {
   if ($page_variant->getVariantPluginId() == 'panels_everywhere_variant') {
-    /** @var \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $panels_display */
+    /** @var PanelsDisplayVariant $panels_display */
     $panels_display = $page_variant->getVariantPlugin();
     // At this point, it very likely that $page_variant->id() is NULL. But
     // setting the storage type to 'page_manager' is enough to trigger Panels
@@ -32,7 +33,7 @@ function panels_everywhere_page_variant_create(PageVariantInterface $page_varian
  */
 function panels_everywhere_page_variant_presave(PageVariantInterface $page_variant) {
   if ($page_variant->getVariantPluginId() == 'panels_everywhere_variant') {
-    /** @var \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $panels_display */
+    /** @var PanelsDisplayVariant $panels_display */
     $panels_display = $page_variant->getVariantPlugin();
     // Set the storage info now that we have the id.
     $panels_display->setStorage('page_manager', $page_variant->id());
diff --git a/src/EventSubscriber/PanelsEverywherePageDisplayVariantSubscriber.php b/src/EventSubscriber/PanelsEverywherePageDisplayVariantSubscriber.php
index 99116ba..ae1459d 100644
--- a/src/EventSubscriber/PanelsEverywherePageDisplayVariantSubscriber.php
+++ b/src/EventSubscriber/PanelsEverywherePageDisplayVariantSubscriber.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\panels_everywhere\EventSubscriber;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\panels_everywhere\Plugin\DisplayVariant\PanelsEverywhereDisplayVariant;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\Plugin\Exception\ContextException;
 use Drupal\Core\Condition\ConditionAccessResolverTrait;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -21,14 +24,14 @@ class PanelsEverywherePageDisplayVariantSubscriber implements EventSubscriberInt
   /**
    * The entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $entityStorage;
 
   /**
    * Constructs a new PageManagerRoutes.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -38,7 +41,7 @@ class PanelsEverywherePageDisplayVariantSubscriber implements EventSubscriberInt
   /**
    * Selects the page display variant.
    *
-   * @param \Drupal\Core\Render\PageDisplayVariantSelectionEvent $event
+   * @param PageDisplayVariantSelectionEvent $event
    *   The event to process.
    */
   public function onSelectPageDisplayVariant(PageDisplayVariantSelectionEvent $event) {
@@ -62,7 +65,7 @@ class PanelsEverywherePageDisplayVariantSubscriber implements EventSubscriberInt
    *
    * Checks access of a page variant.
    *
-   * @param \Drupal\page_manager\PageVariantInterface $variant
+   * @param PageVariantInterface $variant
    *   The page variant.
    *
    * @return bool
@@ -84,10 +87,10 @@ class PanelsEverywherePageDisplayVariantSubscriber implements EventSubscriberInt
   /**
    * Retrieves the display variant plugin for this route, if it exists.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route.
    *
-   * @return null|\Drupal\panels_everywhere\Plugin\DisplayVariant\PanelsEverywhereDisplayVariant
+   * @return null|PanelsEverywhereDisplayVariant
    *   The display variant plugin or NULL if non could be found.
    */
   protected function getVariantPlugin(Route $routeObject) {
@@ -118,10 +121,10 @@ class PanelsEverywherePageDisplayVariantSubscriber implements EventSubscriberInt
   /**
    * Retrieves the page entity for the given route.
    *
-   * @param \Symfony\Component\Routing\Route $routeObject
+   * @param Route $routeObject
    *   The route.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The page entity referenced on the route or the 'site_template'
    *   page entity as long as they are enabled.
    *   Otherwise NULL will be returned.
diff --git a/src/Plugin/DisplayVariant/PanelsEverywhereDisplayVariant.php b/src/Plugin/DisplayVariant/PanelsEverywhereDisplayVariant.php
index 0be5705..78ff633 100644
--- a/src/Plugin/DisplayVariant/PanelsEverywhereDisplayVariant.php
+++ b/src/Plugin/DisplayVariant/PanelsEverywhereDisplayVariant.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\panels_everywhere\Plugin\DisplayVariant;
 
+use Drupal\Core\Render\RendererInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant;
 use Drupal\Core\Display\PageVariantInterface;
@@ -26,7 +27,7 @@ class PanelsEverywhereDisplayVariant extends PanelsDisplayVariant implements Pag
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
diff --git a/src/Routing/PanelsEverywhereRouteSubscriber.php b/src/Routing/PanelsEverywhereRouteSubscriber.php
index b781057..f0c1f53 100644
--- a/src/Routing/PanelsEverywhereRouteSubscriber.php
+++ b/src/Routing/PanelsEverywhereRouteSubscriber.php
@@ -7,6 +7,7 @@
 
 namespace Drupal\panels_everywhere\Routing;
 
+use Symfony\Component\Routing\Route;
 use Drupal\Core\Display\VariantInterface;
 use Drupal\page_manager\PageVariantInterface;
 use Drupal\page_manager\Routing\PageManagerRoutes;
@@ -84,12 +85,11 @@ class PanelsEverywhereRouteSubscriber extends PageManagerRoutes {
    * @param $collection
    *   A collection of known routeis.
    *
-   * @return null|\Symfony\Component\Routing\Route
+   * @return null|Route
    *   Will return NULL if the variant route can not be found.
    *   Will return the variant route if route override is enabled.
    *   Will return the original route if route override is disabled.
    *   Will return NULL if the variant route is not overriding anything.
-   *
    */
   protected function getRouteAndCleanup(PageInterface $page, PageVariantInterface $variant, RouteCollection $collection) {
     $page_id = $page->id();
@@ -121,7 +121,7 @@ class PanelsEverywhereRouteSubscriber extends PageManagerRoutes {
    * @param $collection
    *   A collection of known routes.
    *
-   * @return null|\Symfony\Component\Routing\Route
+   * @return null|Route
    *   The relevant route or NULL if the route could not be found.
    */
   protected function getRouteFor(PageInterface $page, PageVariantInterface $variant, RouteCollection $collection) {
diff --git a/tests/src/Functional/DisplayVariantOverrideTest.php b/tests/src/Functional/DisplayVariantOverrideTest.php
index c2beb87..b5a3797 100644
--- a/tests/src/Functional/DisplayVariantOverrideTest.php
+++ b/tests/src/Functional/DisplayVariantOverrideTest.php
@@ -24,7 +24,7 @@ class DisplayVariantOverrideTest extends PanelsEverywhereBrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // remove all placed block to more easily test placements
diff --git a/tests/src/Functional/PanelsEverywhereBrowserTestBase.php b/tests/src/Functional/PanelsEverywhereBrowserTestBase.php
index 814db47..58d0c85 100644
--- a/tests/src/Functional/PanelsEverywhereBrowserTestBase.php
+++ b/tests/src/Functional/PanelsEverywhereBrowserTestBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\panels_everywhere\Functional;
 
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\page_manager\Entity\PageVariant;
 use Drupal\Tests\BrowserTestBase;
 
@@ -27,35 +29,35 @@ abstract class PanelsEverywhereBrowserTestBase extends BrowserTestBase {
   /**
    * The page entity storage handler.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $pageStorage;
 
   /**
    * The page_variant entity storage handler.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $pageVariantStorage;
 
   /**
    * The block plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $blockManager;
 
   /**
    * The condition plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $conditionManager;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->pageStorage = \Drupal::entityTypeManager()->getStorage('page');
@@ -67,7 +69,7 @@ abstract class PanelsEverywhereBrowserTestBase extends BrowserTestBase {
   /**
    * Place a block on the given Variant entity.
    *
-   * @param \Drupal\page_manager\Entity\PageVariant $variant
+   * @param PageVariant $variant
    *   The variant entity.
    * @param string $plugin_id
    *   The plugin id of the block.
@@ -91,7 +93,7 @@ abstract class PanelsEverywhereBrowserTestBase extends BrowserTestBase {
   /**
    * Adds a request_path condition to the variant with the given configuration.
    *
-   * @param \Drupal\page_manager\Entity\PageVariant $variant
+   * @param PageVariant $variant
    *   The variant entity.
    * @param string $paths
    *   The list of paths separated by newline.
diff --git a/tests/src/Functional/PanelsEverywhereTest.php b/tests/src/Functional/PanelsEverywhereTest.php
index 62d6bdf..1016c7b 100644
--- a/tests/src/Functional/PanelsEverywhereTest.php
+++ b/tests/src/Functional/PanelsEverywhereTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\panels_everywhere\Functional;
 
+use Drupal\page_manager\PageInterface;
 use Drupal\page_manager\Entity\PageVariant;
 use Drupal\Tests\BrowserTestBase;
 
@@ -194,7 +195,7 @@ class PanelsEverywhereTest extends PanelsEverywhereBrowserTestBase {
   /**
    * Retrieves an un-cached version of the site_template from storage.
    *
-   * @return \Drupal\page_manager\PageInterface
+   * @return PageInterface
    *   The site_template.
    */
   protected function loadSiteTemplate() {
diff --git a/tests/src/Unit/EventSubscriber/PanelsEverywherePageDisplayVariantSubscriberTest.php b/tests/src/Unit/EventSubscriber/PanelsEverywherePageDisplayVariantSubscriberTest.php
index 3c8a3e4..17ec7c3 100644
--- a/tests/src/Unit/EventSubscriber/PanelsEverywherePageDisplayVariantSubscriberTest.php
+++ b/tests/src/Unit/EventSubscriber/PanelsEverywherePageDisplayVariantSubscriberTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\panels_everywhere\Unit\EventSubscriber;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Render\PageDisplayVariantSelectionEvent;
@@ -19,6 +20,7 @@ use Symfony\Component\Routing\Route;
  */
 class PanelsEverywherePageDisplayVariantSubscriberTest extends UnitTestCase {
 
+  use ProphecyTrait;
   public function testSubscriberDoesNotStopPropagationForAdminRoutes() {
     // Given.
     $entity_type_manager = $this->prophesize(EntityTypeManagerInterface::class);
diff --git a/tests/src/Unit/Routing/PanelsEverywhereRouteSubscriberTest.php b/tests/src/Unit/Routing/PanelsEverywhereRouteSubscriberTest.php
index de9dbe1..5d00688 100644
--- a/tests/src/Unit/Routing/PanelsEverywhereRouteSubscriberTest.php
+++ b/tests/src/Unit/Routing/PanelsEverywhereRouteSubscriberTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\panels_everywhere\Unit\Routing;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -21,6 +22,7 @@ use Symfony\Component\Routing\RouteCollection;
  */
 class PanelsEverywhereRouteSubscriberTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Tests onAlterRoutes.
    *
