modules/contrib/tfa/services_tfa/src/Plugin/ServiceDefinition/GenericValidation.php
modules/contrib/tfa/src/Annotation/TfaLogin.php
modules/contrib/tfa/src/Annotation/TfaSend.php
modules/contrib/tfa/src/Annotation/TfaSetup.php
modules/contrib/tfa/src/Annotation/TfaValidation.php
modules/contrib/tfa/src/Commands/TfaCommands.php
modules/contrib/tfa/src/Controller/TfaLoginController.php
modules/contrib/tfa/src/Form/BasicDisable.php
modules/contrib/tfa/src/Form/BasicOverview.php
modules/contrib/tfa/src/Form/BasicSetup.php
modules/contrib/tfa/src/Form/EntryForm.php
modules/contrib/tfa/src/Form/SettingsForm.php
modules/contrib/tfa/src/Form/TfaLoginForm.php
modules/contrib/tfa/src/Plugin/Block/TfaUserLoginBlock.php
modules/contrib/tfa/src/Plugin/EncryptionMethod/McryptAES128Encryption.php
modules/contrib/tfa/src/Plugin/TfaBasePlugin.php
modules/contrib/tfa/src/Plugin/TfaLogin/TfaTrustedBrowser.php
modules/contrib/tfa/src/Plugin/TfaLoginInterface.php
modules/contrib/tfa/src/Plugin/TfaSendInterface.php
modules/contrib/tfa/src/Plugin/TfaSetup/TfaRecoveryCodeSetup.php
modules/contrib/tfa/src/Plugin/TfaSetup/TfaTrustedBrowserSetup.php
modules/contrib/tfa/src/Plugin/TfaSetupInterface.php
modules/contrib/tfa/src/Plugin/TfaValidation/TfaRecoveryCode.php
modules/contrib/tfa/src/Plugin/TfaValidationInterface.php
modules/contrib/tfa/src/Plugin/views/field/TfaEnabledField.php
modules/contrib/tfa/src/Routing/TfaRouteSubscriber.php
modules/contrib/tfa/src/TfaContext.php
modules/contrib/tfa/src/TfaContextInterface.php
modules/contrib/tfa/src/TfaDataTrait.php
modules/contrib/tfa/src/TfaLoginPluginManager.php
modules/contrib/tfa/src/TfaLoginTrait.php
modules/contrib/tfa/src/TfaRandomTrait.php
modules/contrib/tfa/src/TfaSendPluginManager.php
modules/contrib/tfa/src/TfaSetup.php
modules/contrib/tfa/src/TfaSetupPluginManager.php
modules/contrib/tfa/src/TfaValidationPluginManager.php
modules/contrib/tfa/tests/modules/tfa_test_plugins/src/Plugin/TfaSetup/TfaTestValidationPluginSetupPlugin.php
modules/contrib/tfa/tests/modules/tfa_test_plugins/src/Plugin/TfaValidation/TfaTestValidationPlugin.php
modules/contrib/tfa/tests/src/Functional/TfaConfigTest.php
modules/contrib/tfa/tests/src/Functional/TfaLoginTest.php
modules/contrib/tfa/tests/src/Functional/TfaRecoveryCodePluginTest.php
modules/contrib/tfa/tests/src/Functional/TfaTestBase.php
modules/contrib/tfa/tests/src/Unit/Plugin/TfaValidation/TfaRecoveryCodeTest.php
modules/contrib/tfa/tests/src/Unit/TfaContextTest.php
modules/contrib/tfa/tfa.install
modules/contrib/tfa/tfa.module
modules/contrib/tfa/tfa.views.inc

36 files with changes
=====================

1) modules/contrib/tfa/tfa.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\user\RoleInterface;
 /**
  * @file
  * Installation related functions for TFA module.
@@ @@
   $required_roles = [];
   $role_storage = \Drupal::entityTypeManager()->getStorage('user_role');
   foreach ($role_storage->loadMultiple() as $role) {
-    /** @var \Drupal\user\RoleInterface $role */
+    /** @var RoleInterface $role */
     $rid = $role->id();
     $required_roles[$rid] = 0;
     if ($role->hasPermission('require tfa')) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/tfa/tests/src/Unit/TfaContextTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tfa\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Tests\UnitTestCase;
@@ @@
  */
 class TfaContextTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Validation plugin manager.
    *
-   * @var \Drupal\tfa\TfaValidationPluginManager
+   * @var TfaValidationPluginManager
    */
   protected $tfaValidationManager;

@@ @@
   /**
    * Login plugin manager.
    *
-   * @var \Drupal\tfa\TfaLoginPluginManager
+   * @var TfaLoginPluginManager
    */
   protected $tfaLoginManager;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Tfa settings config object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $tfaSettings;

@@ @@
   /**
    * Entity for the user that is attempting to login.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * User data service.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;

@@ @@
   /**
    * Current request object.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * Helper method to instantiate the test fixture.
    *
-   * @return \Drupal\tfa\TfaContext
+   * @return TfaContext
    *   TFA context.
    */
   protected function getFixture() {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/tfa/tests/src/Unit/Plugin/TfaValidation/TfaRecoveryCodeTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tfa\Unit\Plugin\TfaValidation;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
@@ @@
  */
 class TfaRecoveryCodeTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Mocked user data service.
    *
-   * @var \Drupal\user\UserDataInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var UserDataInterface|ObjectProphecy
    */
   protected $userData;

@@ @@
   /**
    * Mocked encryption profile manager.
    *
-   * @var \Drupal\encrypt\EncryptionProfileManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EncryptionProfileManagerInterface|ObjectProphecy
    */
   protected $encryptionProfileManager;

@@ @@
   /**
    * The mocked encryption service.
    *
-   * @var \Drupal\encrypt\EncryptServiceInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EncryptServiceInterface|ObjectProphecy
    */
   protected $encryptionService;

@@ @@
   /**
    * The mocked config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var ConfigFactoryInterface|ObjectProphecy
    */
   protected $configFactory;

@@ @@
   /**
    * The mocked TFA settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig|\Prophecy\Prophecy\ObjectProphecy
+   * @var ImmutableConfig|ObjectProphecy
    */
   protected $tfaSettings;

@@ @@
   /**
    * A mocked encryption profile.
    *
-   * @var \Drupal\encrypt\EncryptionProfileInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EncryptionProfileInterface|ObjectProphecy
    */
   protected $encryptionProfile;

@@ @@
   /**
    * Helper method to construct the test fixture.
    *
-   * @return \Drupal\tfa\Plugin\TfaValidation\TfaRecoveryCode
+   * @return TfaRecoveryCode
    *   Recovery code.
    *
    * @throws \Exception
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/tfa/tests/src/Functional/TfaTestBase.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * A test key.
    *
-   * @var \Drupal\key\Entity\Key
+   * @var Key
    */
   protected $testKey;

@@ @@
   /**
    * An encryption profile.
    *
-   * @var \Drupal\encrypt\Entity\EncryptionProfile
+   * @var EncryptionProfile
    */
   protected $encryptionProfile;

@@ @@
     $select_field_id = 'edit-tfa-validate';
     $option_field = $assert->optionExists($select_field_id, $validation_plugin_id);
     $result = $option_field->hasAttribute('selected');
-    $assert->assert($result, "Option {$validation_plugin_id} for field {$select_field_id} is selected.");
+    $this->assertTrue($result, "Option {$validation_plugin_id} for field {$select_field_id} is selected.");
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/tfa/tests/src/Functional/TfaRecoveryCodePluginTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tfa\Functional;

+use Drupal\user\Entity\User;
+use Drupal\tfa\TfaSetupPluginManager;
+use Drupal\tfa\TfaValidationPluginManager;
+use Drupal\tfa\Plugin\TfaSetup\TfaRecoveryCodeSetup;
+use Drupal\tfa\Plugin\TfaValidation\TfaRecoveryCode;
 use Drupal\tfa\TfaDataTrait;
 use Drupal\tfa\TfaLoginTrait;

@@ @@
   /**
    * Non-admin user account. Standard tfa user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   public $userAccount;

@@ @@
   /**
    * Setup plugin manager.
    *
-   * @var \Drupal\tfa\TfaSetupPluginManager
+   * @var TfaSetupPluginManager
    */
   public $tfaSetupManager;

@@ @@
   /**
    * Validation plugin manager.
    *
-   * @var \Drupal\tfa\TfaValidationPluginManager
+   * @var TfaValidationPluginManager
    */
   public $tfaValidationManager;

@@ @@
   /**
    * Instance of the setup plugin for the $validationPluginId.
    *
-   * @var \Drupal\tfa\Plugin\TfaSetup\TfaRecoveryCodeSetup
+   * @var TfaRecoveryCodeSetup
    */
   public $setupPlugin;

@@ @@
   /**
    * Instance of the validation plugin for the $validationPluginId.
    *
-   * @var \Drupal\tfa\Plugin\TfaValidation\TfaRecoveryCode
+   * @var TfaRecoveryCode
    */
   public $validationPlugin;

@@ @@

     // Make sure codes were saved to the account.
     $codes = $this->validationPlugin->getCodes();
-    $assert->assert(!empty($codes), 'No codes saved to the account data.');
+    $this->assertTrue(!empty($codes), 'No codes saved to the account data.');

     // Now the user should be able to see their existing codes. Let's test that.
     $assert->linkExists('Show codes');
@@ @@
       'name' => $this->userAccount->getAccountName(),
       'pass' => $this->userAccount->passRaw,
     ];
-    $this->drupalPostForm('user/login', $edit, 'Log in');
+    $this->drupalGet('user/login');
+    $this->submitForm($edit, 'Log in');
     $assert->statusCodeEquals(200);
     $assert->pageTextContains('Enter one of your recovery codes');

@@ @@
     $this->submitForm($edit, 'Verify');
     $assert->statusCodeEquals(200);
     $assert->pageTextContains($this->userAccount->getDisplayName());
-    $assert->assert($this->userAccount->isAuthenticated(), 'User is logged in.');
+    $this->assertTrue($this->userAccount->isAuthenticated(), 'User is logged in.');

     // Try replay attack with a valid code that has already been used.
     $this->drupalLogout();
@@ @@
       'name' => $this->userAccount->getAccountName(),
       'pass' => $this->userAccount->passRaw,
     ];
-    $this->drupalPostForm('user/login', $edit, 'Log in');
+    $this->drupalGet('user/login');
+    $this->submitForm($edit, 'Log in');
     $assert->statusCodeEquals(200);
     $assert->pageTextContains('Enter one of your recovery codes');
    ----------- end diff -----------

Applied rules:
 * AssertRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/tfa/tests/src/Functional/TfaLoginTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tfa\Functional;

+use Drupal\user\Entity\User;
 /**
  * Tests for the tfa login process.
  *
@@ @@
   /**
    * User doing the TFA Validation.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $webUser;

@@ @@
   /**
    * Administrator to handle configurations.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $adminUser;

@@ @@
     $edit = [
       'tfa_required_roles[' . $web_user_roles[0] . ']' => TRUE,
     ];
-    $this->drupalPostForm('admin/config/people/tfa', $edit, 'Save configuration');
+    $this->drupalGet('admin/config/people/tfa');
+    $this->submitForm($edit, 'Save configuration');
     $assert_session->statusCodeEquals(200);
-    $this->assertText('The configuration options have been saved.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');

     // Check that tfa is presented.
     $this->drupalLogout();
@@ @@
       'name' => $this->webUser->getAccountName(),
       'pass' => $this->webUser->passRaw,
     ];
-    $this->drupalPostForm('user/login', $edit, 'Log in');
+    $this->drupalGet('user/login');
+    $this->submitForm($edit, 'Log in');
     $assert_session->statusCodeEquals(200);
     $assert_session->addressMatches('/\/tfa\/' . $this->webUser->id() . '/');

@@ @@
       $edit['tfa_required_roles[' . $role_id . ']'] = FALSE;
     }
     $edit['tfa_required_roles[authenticated]'] = FALSE;
-    $this->drupalPostForm('admin/config/people/tfa', $edit, 'Save configuration');
+    $this->drupalGet('admin/config/people/tfa');
+    $this->submitForm($edit, 'Save configuration');
     $assert_session->statusCodeEquals(200);
-    $this->assertText('The configuration options have been saved.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');
     // Enable tfa for a single user.
     $this->drupalLogin($this->webUser);
     $this->drupalGet('user/' . $this->webUser->id() . '/security/tfa');
@@ @@
       'name' => $this->webUser->getAccountName(),
       'pass' => $this->webUser->passRaw,
     ];
-    $this->drupalPostForm('user/login', $edit, 'Log in');
+    $this->drupalGet('user/login');
+    $this->submitForm($edit, 'Log in');
     $assert_session->statusCodeEquals(200);
     $assert_session->addressMatches('/\/tfa\/' . $this->webUser->id() . '/');
   }
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/tfa/tests/src/Functional/TfaConfigTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tfa\Functional;

+use Drupal\user\Entity\User;
 /**
  * Tests the Tfa UI.
  *
@@ @@
   /**
    * User doing the TFA Validation.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $webUser;

@@ @@
   /**
    * Administrator to handle configurations.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $adminUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/tfa/tests/modules/tfa_test_plugins/src/Plugin/TfaSetup/TfaTestValidationPluginSetupPlugin.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tfa_test_plugins\Plugin\TfaSetup;

+use Drupal\encrypt\Exception\EncryptionMethodCanNotDecryptException;
+use Drupal\encrypt\Exception\EncryptException;
 use Drupal\Core\Form\FormStateInterface;

 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
    * @return null|string
    *   The string if found, otherwise NULL;
    *
-   * @throws \Drupal\encrypt\Exception\EncryptionMethodCanNotDecryptException
-   * @throws \Drupal\encrypt\Exception\EncryptException
+   * @throws EncryptionMethodCanNotDecryptException
+   * @throws EncryptException
    */
   public function getExpectedFieldData() {
     $data = $this->getUserData($this->pluginDefinition['id'], 'test_data', $this->uid, $this->userData);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/tfa/src/TfaValidationPluginManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tfa;

+use Drupal\encrypt\EncryptService;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Discovery\DiscoveryCachedTrait;
 use Drupal\Component\Plugin\Factory\DefaultFactory;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ @@
   /**
    * Provides the user data service object.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;

@@ @@
   /**
    * Encryption profile manager.
    *
-   * @var \Drupal\encrypt\EncryptionProfileManagerInterface
+   * @var EncryptionProfileManagerInterface
    */
   protected $encryptionProfileManager;

@@ @@
   /**
    * Encryption service.
    *
-   * @var \Drupal\encrypt\EncryptService
+   * @var EncryptService
    */
   protected $encryptService;

@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\user\UserDataInterface $user_data
+   * @param UserDataInterface $user_data
    *   User data service.
-   * @param \Drupal\encrypt\EncryptionProfileManagerInterface $encryption_profile_manager
+   * @param EncryptionProfileManagerInterface $encryption_profile_manager
    *   Encryption profile manager.
-   * @param \Drupal\encrypt\EncryptServiceInterface $encrypt_service
+   * @param EncryptServiceInterface $encrypt_service
    *   Encryption service.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, ConfigFactoryInterface $config_factory, UserDataInterface $user_data, EncryptionProfileManagerInterface $encryption_profile_manager, EncryptServiceInterface $encrypt_service) {
@@ @@
    * @return object
    *   Required validation plugin instance
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginNotFoundException
+   * @throws PluginException
    */
   public function createInstance($plugin_id, array $configuration = []) {
     $plugin_definition = $this->getDefinition($plugin_id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/tfa/src/TfaSetupPluginManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tfa;

+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Factory\DefaultFactory;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
   /**
    * Provides the user data service object.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;

@@ @@
   /**
    * Encryption profile manager.
    *
-   * @var \Drupal\encrypt\EncryptionProfileManagerInterface
+   * @var EncryptionProfileManagerInterface
    */
   protected $encryptionProfileManager;

@@ @@
   /**
    * Encryption service.
    *
-   * @var \Drupal\encrypt\EncryptService
+   * @var EncryptService
    */
   protected $encryptService;

@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\user\UserDataInterface $user_data
+   * @param UserDataInterface $user_data
    *   User data service.
-   * @param \Drupal\encrypt\EncryptionProfileManagerInterface $encryption_profile_manager
+   * @param EncryptionProfileManagerInterface $encryption_profile_manager
    *   Encryption profile manager.
-   * @param \Drupal\encrypt\EncryptService $encrypt_service
+   * @param EncryptService $encrypt_service
    *   Encryption service.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, UserDataInterface $user_data, EncryptionProfileManagerInterface $encryption_profile_manager, EncryptService $encrypt_service) {
@@ @@
    * @return object
    *   Require setup plugin instance
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginNotFoundException
+   * @throws PluginException
    */
   public function createInstance($plugin_id, array $configuration = []) {
     $plugin_definition = $this->getDefinition($plugin_id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/tfa/src/TfaSetup.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Current setup plugin.
    *
-   * @var \Drupal\tfa\Plugin\TfaSetupInterface
+   * @var TfaSetupInterface
    */
   protected $setupPlugin;

@@ @@
   /**
    * TFA Setup constructor.
    *
-   * @param \Drupal\tfa\Plugin\TfaSetupInterface $plugin
+   * @param TfaSetupInterface $plugin
    *   Plugins to instantiate.
    */
   public function __construct(TfaSetupInterface $plugin) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param int $reset
    *   Reset the data or not.
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return bool
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


12) modules/contrib/tfa/src/TfaSendPluginManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/tfa/src/TfaLoginTrait.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Generate a hash that can uniquely identify an account's state.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The user account for which a hash is required.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/tfa/src/TfaLoginPluginManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tfa;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\encrypt\EncryptService;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\tfa\Plugin\TfaBasePlugin;
 use Drupal\Component\Plugin\Factory\DefaultFactory;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * Provides the user data service object.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;

@@ @@
   /**
    * TFA configuration object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $tfaSettings;

@@ @@
   /**
    * Encryption profile manager.
    *
-   * @var \Drupal\encrypt\EncryptionProfileManagerInterface
+   * @var EncryptionProfileManagerInterface
    */
   protected $encryptionProfileManager;

@@ @@
   /**
    * Encryption service.
    *
-   * @var \Drupal\encrypt\EncryptService
+   * @var EncryptService
    */
   protected $encryptService;

@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\user\UserDataInterface $user_data
+   * @param UserDataInterface $user_data
    *   User data service.
-   * @param \Drupal\encrypt\EncryptionProfileManagerInterface $encryption_profile_manager
+   * @param EncryptionProfileManagerInterface $encryption_profile_manager
    *   Encryption profile manager.
-   * @param \Drupal\encrypt\EncryptServiceInterface $encrypt_service
+   * @param EncryptServiceInterface $encrypt_service
    *   Encryption service.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, ConfigFactoryInterface $config_factory, UserDataInterface $user_data, EncryptionProfileManagerInterface $encryption_profile_manager, EncryptServiceInterface $encrypt_service) {
@@ @@
    * @return object
    *   The plugin instance.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginNotFoundException
+   * @throws PluginException
    */
   public function createInstance($plugin_id, array $configuration = []) {
     $plugin_definition = $this->getDefinition($plugin_id);
-    /** @var \Drupal\tfa\Plugin\TfaBasePlugin $plugin_class */
+    /** @var TfaBasePlugin $plugin_class */
     $plugin_class = DefaultFactory::getPluginClass($plugin_id, $plugin_definition);
     // If the plugin provides a factory method, pass the container to it.
     if (is_subclass_of($plugin_class, 'Drupal\Core\Plugin\ContainerFactoryPluginInterface')) {
@@ @@
    * @return array|null
    *   An array of login plugins.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginNotFoundException
+   * @throws PluginException
    */
   public function getPlugins(array $configuration = []) {
     $plugin_ids = $this->tfaSettings->get('login_plugins');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/tfa/src/TfaDataTrait.php:17

    ---------- begin diff ----------
@@ @@
    *   The value to store. Non-scalar values are serialized automatically.
    * @param int $uid
    *   The user id.
-   * @param \Drupal\user\UserDataInterface $user_data
+   * @param UserDataInterface $user_data
    *   User data object to store user specific information.
    */
   protected function setUserData($module, array $data, $uid, UserDataInterface $user_data) {
@@ @@
    *   The name of the data key.
    * @param int $uid
    *   The user id.
-   * @param \Drupal\user\UserDataInterface $user_data
+   * @param UserDataInterface $user_data
    *   User data object to store user specific information.
    *
    * @return mixed|array
@@ @@
    *   The name of the data key.
    * @param int $uid
    *   The user id.
-   * @param \Drupal\user\UserDataInterface $user_data
+   * @param UserDataInterface $user_data
    *   User data object to store user specific information.
    */
   protected function deleteUserData($module, $key, $uid, UserDataInterface $user_data) {
@@ @@
    *
    * @param int $uid
    *   The user id.
-   * @param \Drupal\user\UserDataInterface $user_data
+   * @param UserDataInterface $user_data
    *   User data.
    * @param array $data
    *   Data to be saved.
@@ @@
    *
    * @param int $uid
    *   User account id.
-   * @param \Drupal\user\UserDataInterface $user_data
+   * @param UserDataInterface $user_data
    *   User data object to store user specific information.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


16) modules/contrib/tfa/src/TfaContextInterface.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * TfaContextInterface constructor.
    *
-   * @param \Drupal\tfa\TfaValidationPluginManager $tfa_validation_manager
+   * @param TfaValidationPluginManager $tfa_validation_manager
    *   The plugin manager for TFA validation plugins.
-   * @param \Drupal\tfa\TfaLoginPluginManager $tfa_plugin_manager
+   * @param TfaLoginPluginManager $tfa_plugin_manager
    *   The plugin manager for TFA login plugins.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration service.
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user currently attempting to log in.
-   * @param \Drupal\user\UserDataInterface $user_data
+   * @param UserDataInterface $user_data
    *   The user data service.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    */
   public function __construct(TfaValidationPluginManager $tfa_validation_manager, TfaLoginPluginManager $tfa_plugin_manager, ConfigFactoryInterface $config_factory, UserInterface $user, UserDataInterface $user_data, Request $request);
@@ @@
   /**
    * Get the user object.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The entity object of the user attempting to log in.
    */
   public function getUser();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


17) modules/contrib/tfa/src/TfaContext.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tfa;

+use Drupal\tfa\Plugin\TfaValidationInterface;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\tfa\Plugin\TfaLoginInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\user\UserDataInterface;
 use Drupal\user\UserInterface;
@@ @@
   /**
    * Validation plugin manager.
    *
-   * @var \Drupal\tfa\TfaValidationPluginManager
+   * @var TfaValidationPluginManager
    */
   protected $tfaValidationManager;

@@ @@
   /**
    * Login plugin manager.
    *
-   * @var \Drupal\tfa\TfaLoginPluginManager
+   * @var TfaLoginPluginManager
    */
   protected $tfaLoginManager;

@@ @@
   /**
    * The tfaValidation plugin.
    *
-   * @var \Drupal\tfa\Plugin\TfaValidationInterface|null
+   * @var TfaValidationInterface|null
    */
   protected $tfaValidationPlugin;

@@ @@
   /**
    * Tfa settings config object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $tfaSettings;

@@ @@
   /**
    * Entity for the user that is attempting to login.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * User data service.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;

@@ @@
   /**
    * Current request object.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * Array of login plugins for a given user.
    *
-   * @var \Drupal\tfa\Plugin\TfaLoginInterface[]
+   * @var TfaLoginInterface[]
    */
   protected $userLoginPlugins;

@@ @@
   /**
    * Array of login plugins.
    *
-   * @var \Drupal\tfa\Plugin\TfaLoginInterface[]
+   * @var TfaLoginInterface[]
    */
   protected $tfaLoginPlugins;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


18) modules/contrib/tfa/src/Routing/TfaRouteSubscriber.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Overrides user.login route with our custom login form.
    *
-   * @param \Symfony\Component\Routing\RouteCollection $collection
+   * @param RouteCollection $collection
    *   Route to be altered.
    */
   public function alterRoutes(RouteCollection $collection) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/tfa/src/Plugin/views/field/TfaEnabledField.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Provides the user data service object.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\user\UserDataInterface $user_data
+   * @param UserDataInterface $user_data
    *   User data object to store user specific information.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, UserDataInterface $user_data) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/tfa/src/Plugin/TfaValidationInterface.php:16

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   The configuration form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   The configuration form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


21) modules/contrib/tfa/src/Plugin/TfaValidation/TfaRecoveryCode.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tfa\Plugin\TfaValidation;

+use Drupal\encrypt\Exception\EncryptionMethodCanNotDecryptException;
+use Drupal\encrypt\Exception\EncryptException;
 use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
    *   The plugin id.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\user\UserDataInterface $user_data
+   * @param UserDataInterface $user_data
    *   User data object to store user specific information.
-   * @param \Drupal\encrypt\EncryptionProfileManagerInterface $encryption_profile_manager
+   * @param EncryptionProfileManagerInterface $encryption_profile_manager
    *   Encryption profile manager.
-   * @param \Drupal\encrypt\EncryptServiceInterface $encrypt_service
+   * @param EncryptServiceInterface $encrypt_service
    *   Encryption service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, UserDataInterface $user_data, EncryptionProfileManagerInterface $encryption_profile_manager, EncryptServiceInterface $encrypt_service, ConfigFactoryInterface $config_factory) {
@@ @@
   /**
    * Configuration form for the recovery code plugin.
    *
-   * @param \Drupal\Core\Config\Config $config
+   * @param Config $config
    *   Config object for tfa settings.
    * @param array $state
    *   Form state array determines if this form should be shown.
@@ @@
    * @return array
    *   Array of codes indexed by ID.
    *
-   * @throws \Drupal\encrypt\Exception\EncryptionMethodCanNotDecryptException
-   * @throws \Drupal\encrypt\Exception\EncryptException
+   * @throws EncryptionMethodCanNotDecryptException
+   * @throws EncryptException
    */
   public function getCodes() {
     $codes = $this->getUserData('tfa', 'tfa_recovery_code', $this->uid, $this->userData) ?: [];
@@ @@
    * @param array $codes
    *   Recovery codes for current account.
    *
-   * @throws \Drupal\encrypt\Exception\EncryptException
+   * @throws EncryptException
    */
   public function storeCodes(array $codes) {
     $this->deleteCodes();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/tfa/src/Plugin/TfaSetupInterface.php:17

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   The configuration form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   The configuration form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return bool
@@ @@
    *
    * @param array $form
    *   The configuration form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


23) modules/contrib/tfa/src/Plugin/TfaSetup/TfaRecoveryCodeSetup.php:79

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   The configuration form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param int $reset
    *   Whether or not the user is resetting the application.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/tfa/src/Plugin/TfaBasePlugin.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tfa\Plugin;

+use Drupal\encrypt\EncryptService;
+use Drupal\encrypt\Exception\EncryptException;
+use Drupal\encrypt\Exception\EncryptionMethodCanNotDecryptException;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Provides the user data service object.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;

@@ @@
   /**
    * Encryption profile.
    *
-   * @var \Drupal\encrypt\EncryptionProfileManagerInterface
+   * @var EncryptionProfileManagerInterface
    */
   protected $encryptionProfile;

@@ @@
   /**
    * Encryption service.
    *
-   * @var \Drupal\encrypt\EncryptService
+   * @var EncryptService
    */
   protected $encryptService;

@@ @@
    *   The plugin id.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\user\UserDataInterface $user_data
+   * @param UserDataInterface $user_data
    *   User data object to store user specific information.
-   * @param \Drupal\encrypt\EncryptionProfileManagerInterface $encryption_profile_manager
+   * @param EncryptionProfileManagerInterface $encryption_profile_manager
    *   Encryption profile manager.
-   * @param \Drupal\encrypt\EncryptServiceInterface $encrypt_service
+   * @param EncryptServiceInterface $encrypt_service
    *   Encryption service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, UserDataInterface $user_data, EncryptionProfileManagerInterface $encryption_profile_manager, EncryptServiceInterface $encrypt_service) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return bool
@@ @@
    * @return string
    *   The encrypted string.
    *
-   * @throws \Drupal\encrypt\Exception\EncryptException
+   * @throws EncryptException
    */
   protected function encrypt($data) {
     return $this->encryptService->encrypt($data, $this->encryptionProfile);
@@ @@
    * @return string
    *   The decrypted string.
    *
-   * @throws \Drupal\encrypt\Exception\EncryptionMethodCanNotDecryptException
-   * @throws \Drupal\encrypt\Exception\EncryptException
+   * @throws EncryptionMethodCanNotDecryptException
+   * @throws EncryptException
    */
   protected function decrypt($data) {
     return $this->encryptService->decrypt($data, $this->encryptionProfile);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/tfa/src/Plugin/Block/TfaUserLoginBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tfa\Plugin\Block;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Link;
@@ @@
   /**
    * TFA configuration object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $tfaSettings;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, RouteMatchInterface $route_match, ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/tfa/src/Form/TfaLoginForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tfa\Form;

+use Drupal\tfa\Plugin\TfaValidationInterface;
+use Drupal\user\Entity\User;
 use Drupal\Core\Flood\FloodInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\RendererInterface;
@@ @@
   /**
    * The validation plugin manager to fetch plugin information.
    *
-   * @var \Drupal\tfa\TfaValidationPluginManager
+   * @var TfaValidationPluginManager
    */
   protected $tfaValidationManager;

@@ @@
   /**
    * The login plugin manager to fetch plugin information.
    *
-   * @var \Drupal\tfa\TfaLoginPluginManager
+   * @var TfaLoginPluginManager
    */
   protected $tfaLoginManager;

@@ @@
   /**
    * The current validation plugin.
    *
-   * @var \Drupal\tfa\Plugin\TfaValidationInterface
+   * @var TfaValidationInterface
    */
   protected $tfaValidationPlugin;

@@ @@
   /**
    * The user data service.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;

@@ @@
   /**
    * Redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $destination;

@@ @@
    *
    * This will be initialized in the submitForm() method.
    *
-   * @var \Drupal\tfa\TfaContext
+   * @var TfaContext
    */
   protected $tfaContext;

@@ @@
   /**
    * Constructs a new user login form.
    *
-   * @param \Drupal\Core\Flood\FloodInterface $flood
+   * @param FloodInterface $flood
    *   The flood service.
-   * @param \Drupal\user\UserStorageInterface $user_storage
+   * @param UserStorageInterface $user_storage
    *   The user storage.
-   * @param \Drupal\user\UserAuthInterface $user_auth
+   * @param UserAuthInterface $user_auth
    *   The user authentication object.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\tfa\TfaValidationPluginManager $tfa_validation_manager
+   * @param TfaValidationPluginManager $tfa_validation_manager
    *   Tfa validation plugin manager.
-   * @param \Drupal\tfa\TfaLoginPluginManager $tfa_plugin_manager
+   * @param TfaLoginPluginManager $tfa_plugin_manager
    *   Tfa setup plugin manager.
-   * @param \Drupal\user\UserDataInterface $user_data
+   * @param UserDataInterface $user_data
    *   User data service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $destination
+   * @param RedirectDestinationInterface $destination
    *   Redirect destination.
    */
   public function __construct(FloodInterface $flood, UserStorageInterface $user_storage, UserAuthInterface $user_auth, RendererInterface $renderer, TfaValidationPluginManager $tfa_validation_manager, TfaLoginPluginManager $tfa_plugin_manager, UserDataInterface $user_data, RedirectDestinationInterface $destination) {
@@ @@
     }

     // Similar to tfa_user_login() but not required to force user logout.
-    /** @var \Drupal\user\Entity\User $user */
+    /** @var User $user */
     $user = $this->userStorage->load($uid);
     $this->tfaContext = new TfaContext(
       $this->tfaValidationManager,
@@ @@
    * If any of the TFA plugins allows login, then finalize the login. Otherwise,
    * set a redirect to enter a second factor.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The state of the login form.
    */
   public function loginWithTfa(FormStateInterface $form_state) {
@@ @@
    * If the user has any remaining logins, then finalize the login with a
    * message to set up TFA. Otherwise, leave the user logged out.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The state of the login form.
    */
   public function loginWithoutTfa(FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The current form api array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    */
   public function tfaLoginFormRedirect(array $form, FormStateInterface $form_state) {
@@ @@
   /**
    * Begin the TFA process.
    *
-   * @param \Drupal\tfa\Plugin\TfaSendInterface $tfaSendPlugin
+   * @param TfaSendInterface $tfaSendPlugin
    *   The send plugin instance.
    */
   protected function begin(TfaSendInterface $tfaSendPlugin) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/tfa/src/Form/SettingsForm.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The login plugin manager to fetch plugin information.
    *
-   * @var \Drupal\tfa\TfaLoginPluginManager
+   * @var TfaLoginPluginManager
    */
   protected $tfaLogin;

@@ @@
   /**
    * The send plugin manager to fetch plugin information.
    *
-   * @var \Drupal\tfa\TfaSendPluginManager
+   * @var TfaSendPluginManager
    */
   protected $tfaSend;

@@ @@
   /**
    * The validation plugin manager to fetch plugin information.
    *
-   * @var \Drupal\tfa\TfaValidationPluginManager
+   * @var TfaValidationPluginManager
    */
   protected $tfaValidation;

@@ @@
   /**
    * The setup plugin manager to fetch plugin information.
    *
-   * @var \Drupal\tfa\TfaSetupPluginManager
+   * @var TfaSetupPluginManager
    */
   protected $tfaSetup;

@@ @@
   /**
    * Provides the user data service object.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;

@@ @@
   /**
    * Encryption profile manager to fetch the existing encryption profiles.
    *
-   * @var \Drupal\encrypt\EncryptionProfileManagerInterface
+   * @var EncryptionProfileManagerInterface
    */
   protected $encryptionProfileManager;

@@ @@
   /**
    * The admin configuration form constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory object.
-   * @param \Drupal\tfa\TfaLoginPluginManager $tfa_login
+   * @param TfaLoginPluginManager $tfa_login
    *   The login plugin manager.
-   * @param \Drupal\tfa\TfaSendPluginManager $tfa_send
+   * @param TfaSendPluginManager $tfa_send
    *   The send plugin manager.
-   * @param \Drupal\tfa\TfaValidationPluginManager $tfa_validation
+   * @param TfaValidationPluginManager $tfa_validation
    *   The validation plugin manager.
-   * @param \Drupal\tfa\TfaSetupPluginManager $tfa_setup
+   * @param TfaSetupPluginManager $tfa_setup
    *   The setup plugin manager.
-   * @param \Drupal\user\UserDataInterface $user_data
+   * @param UserDataInterface $user_data
    *   The user data service.
-   * @param \Drupal\encrypt\EncryptionProfileManagerInterface $encryption_profile_manager
+   * @param EncryptionProfileManagerInterface $encryption_profile_manager
    *   Encrypt profile manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, TfaLoginPluginManager $tfa_login, TfaSendPluginManager $tfa_send, TfaValidationPluginManager $tfa_validation, TfaSetupPluginManager $tfa_setup, UserDataInterface $user_data, EncryptionProfileManagerInterface $encryption_profile_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/tfa/src/Form/EntryForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tfa\Form;

+use Drupal\tfa\Plugin\TfaValidationInterface;
+use Drupal\tfa\Plugin\TfaLoginInterface;
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Flood\FloodInterface;
 use Drupal\Core\Form\FormBase;
@@ @@
   /**
    * Validation plugin manager.
    *
-   * @var \Drupal\tfa\TfaValidationPluginManager
+   * @var TfaValidationPluginManager
    */
   protected $tfaValidationManager;

@@ @@
   /**
    * Login plugin manager.
    *
-   * @var \Drupal\tfa\TfaLoginPluginManager
+   * @var TfaLoginPluginManager
    */
   protected $tfaLoginManager;

@@ @@
   /**
    * The validation plugin object.
    *
-   * @var \Drupal\tfa\Plugin\TfaValidationInterface
+   * @var TfaValidationInterface
    */
   protected $tfaValidationPlugin;

@@ @@
   /**
    * The login plugins.
    *
-   * @var \Drupal\tfa\Plugin\TfaLoginInterface
+   * @var TfaLoginInterface
    */
   protected $tfaLoginPlugins;

@@ @@
   /**
    * TFA configuration object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $tfaSettings;

@@ @@
   /**
    * The flood control mechanism.
    *
-   * @var \Drupal\Core\Flood\FloodInterface
+   * @var FloodInterface
    */
   protected $flood;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * User data service.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;

@@ @@
   /**
    * EntryForm constructor.
    *
-   * @param \Drupal\tfa\TfaValidationPluginManager $tfa_validation_manager
+   * @param TfaValidationPluginManager $tfa_validation_manager
    *   Plugin manager for validation plugins.
-   * @param \Drupal\tfa\TfaLoginPluginManager $tfa_login_manager
+   * @param TfaLoginPluginManager $tfa_login_manager
    *   Plugin manager for login plugins.
-   * @param \Drupal\Core\Flood\FloodInterface $flood
+   * @param FloodInterface $flood
    *   The flood control mechanism.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date service.
-   * @param \Drupal\user\UserDataInterface $user_data
+   * @param UserDataInterface $user_data
    *   User data service.
    */
   public function __construct(TfaValidationPluginManager $tfa_validation_manager, TfaLoginPluginManager $tfa_login_manager, FloodInterface $flood, DateFormatterInterface $date_formatter, UserDataInterface $user_data) {
@@ @@
   /**
    * Creates service objects for the class constructor.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container to get the required services.
    *
    * @return static
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/tfa/src/Form/BasicSetup.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The TfaSetupPluginManager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $manager;

@@ @@
   /**
    * The validation plugin manager.
    *
-   * @var \Drupal\tfa\TfaValidationPluginManager
+   * @var TfaValidationPluginManager
    */
   protected $tfaValidation;

@@ @@
   /**
    * The login plugin manager.
    *
-   * @var \Drupal\tfa\TfaLoginPluginManager
+   * @var TfaLoginPluginManager
    */
   protected $tfaLogin;

@@ @@
   /**
    * The send plugin manager.
    *
-   * @var \Drupal\tfa\TfaSendPluginManager
+   * @var TfaSendPluginManager
    */
   protected $tfaSend;

@@ @@
   /**
    * Provides the user data service object.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;

@@ @@
   /**
    * The password hashing service.
    *
-   * @var \Drupal\Core\Password\PasswordInterface
+   * @var PasswordInterface
    */
   protected $passwordChecker;

@@ @@
   /**
    * The mail manager.
    *
-   * @var \Drupal\Core\Mail\MailManagerInterface
+   * @var MailManagerInterface
    */
   protected $mailManager;

@@ @@
   /**
    * The user storage.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userStorage;

@@ @@
   /**
    * BasicSetup constructor.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $manager
+   * @param PluginManagerInterface $manager
    *   The plugin manager to fetch plugin information.
-   * @param \Drupal\user\UserDataInterface $user_data
+   * @param UserDataInterface $user_data
    *   The user data object to store user information.
-   * @param \Drupal\tfa\TfaValidationPluginManager $tfa_validation_manager
+   * @param TfaValidationPluginManager $tfa_validation_manager
    *   The validation plugin manager.
-   * @param \Drupal\tfa\TfaLoginPluginManager $tfa_login_manager
+   * @param TfaLoginPluginManager $tfa_login_manager
    *   The login plugin manager.
-   * @param \Drupal\tfa\TfaSendPluginManager $tfa_send_manager
+   * @param TfaSendPluginManager $tfa_send_manager
    *   The send plugin manager.
-   * @param \Drupal\Core\Password\PasswordInterface $password_checker
+   * @param PasswordInterface $password_checker
    *   The password service.
-   * @param \Drupal\Core\Mail\MailManagerInterface $mail_manager
+   * @param MailManagerInterface $mail_manager
    *   The mail manager.
-   * @param \Drupal\user\UserStorageInterface $user_storage
+   * @param UserStorageInterface $user_storage
    *   The user storage.
    */
   public function __construct(PluginManagerInterface $manager, UserDataInterface $user_data, TfaValidationPluginManager $tfa_validation_manager, TfaLoginPluginManager $tfa_login_manager, TfaSendPluginManager $tfa_send_manager, PasswordInterface $password_checker, MailManagerInterface $mail_manager, UserStorageInterface $user_storage) {
@@ @@
    * @return array|null
    *   Plugin definitions.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   protected function findPlugin($plugin_id) {
     $plugin = $this->tfaValidation->getDefinition($plugin_id, FALSE);
@@ @@
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state, User $user = NULL, $method = 'tfa_totp', $reset = 0) {
-    /** @var \Drupal\user\Entity\User $account */
+    /** @var User $account */
     $account = $this->userStorage->load($this->currentUser()->id());

     $form['account'] = [
@@ @@
    * {@inheritdoc}
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\user\Entity\User $user */
+    /** @var User $user */
     $user = $this->userStorage->load($this->currentUser()->id());
     $storage = $form_state->getStorage();
     $values = $form_state->getValues();
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function cancelForm(array &$form, FormStateInterface $form_state) {
@@ @@
   /**
    * Set form rebuild, next step, and message if any plugin steps left.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    * @param string $this_step
    *   The current setup step.
-   * @param \Drupal\tfa\TfaSetup $step_class
+   * @param TfaSetup $step_class
    *   The setup instance of the current step.
    * @param bool $skipped_step
    *   Whether the step was skipped.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/tfa/src/Form/BasicOverview.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The setup plugin manager to fetch setup information.
    *
-   * @var \Drupal\tfa\TfaLoginPluginManager
+   * @var TfaLoginPluginManager
    */
   protected $tfaSetup;

@@ @@
   /**
    * Validation plugin manager.
    *
-   * @var \Drupal\tfa\TfaValidationPluginManager
+   * @var TfaValidationPluginManager
    */
   protected $tfaValidation;

@@ @@
   /**
    * Login plugin manager.
    *
-   * @var \Drupal\tfa\TfaLoginPluginManager
+   * @var TfaLoginPluginManager
    */
   protected $tfaLogin;

@@ @@
   /**
    * Send plugin manager.
    *
-   * @var \Drupal\tfa\TfaSendPluginManager
+   * @var TfaSendPluginManager
    */
   protected $tfaSend;

@@ @@
   /**
    * Provides the user data service object.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * BasicOverview constructor.
    *
-   * @param \Drupal\user\UserDataInterface $user_data
+   * @param UserDataInterface $user_data
    *   The user data service.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\tfa\TfaSetupPluginManager $tfa_setup_manager
+   * @param TfaSetupPluginManager $tfa_setup_manager
    *   The setup plugin manager.
-   * @param \Drupal\tfa\TfaValidationPluginManager $tfa_validation_manager
+   * @param TfaValidationPluginManager $tfa_validation_manager
    *   The validation plugin manager.
-   * @param \Drupal\tfa\TfaLoginPluginManager $tfa_login_manager
+   * @param TfaLoginPluginManager $tfa_login_manager
    *   The login plugin manager.
-   * @param \Drupal\tfa\TfaSendPluginManager $tfa_send_manager
+   * @param TfaSendPluginManager $tfa_send_manager
    *   The send plugin manager.
    */
   public function __construct(UserDataInterface $user_data, DateFormatterInterface $date_formatter, TfaSetupPluginManager $tfa_setup_manager, TfaValidationPluginManager $tfa_validation_manager, TfaLoginPluginManager $tfa_login_manager, TfaSendPluginManager $tfa_send_manager) {
@@ @@
    *
    * @param array $form
    *   The form definition.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function resetSkipValidationAttempts(array $form, FormStateInterface $form_state) {
@@ @@
   /**
    * Determine if the current user can perform a TFA attempt reset.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The account that TFA is for.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/tfa/src/Form/BasicDisable.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The plugin manager to fetch plugin information.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $manager;

@@ @@
   /**
    * Provides the user data service object.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;

@@ @@
   /**
    * The password hashing service.
    *
-   * @var \Drupal\Core\Password\PasswordInterface
+   * @var PasswordInterface
    */
   protected $passwordChecker;

@@ @@
   /**
    * The mail manager.
    *
-   * @var \Drupal\Core\Mail\MailManagerInterface
+   * @var MailManagerInterface
    */
   protected $mailManager;

@@ @@
   /**
    * The user storage.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userStorage;

@@ @@
   /**
    * BasicDisable constructor.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $manager
+   * @param PluginManagerInterface $manager
    *   The plugin manager to fetch plugin information.
-   * @param \Drupal\user\UserDataInterface $user_data
+   * @param UserDataInterface $user_data
    *   The user data object to store user information.
-   * @param \Drupal\Core\Password\PasswordInterface $password_checker
+   * @param PasswordInterface $password_checker
    *   The password service.
-   * @param \Drupal\Core\Mail\MailManagerInterface $mail_manager
+   * @param MailManagerInterface $mail_manager
    *   The mail manager.
-   * @param \Drupal\user\UserStorageInterface $user_storage
+   * @param UserStorageInterface $user_storage
    *   The user storage.
    */
   public function __construct(PluginManagerInterface $manager, UserDataInterface $user_data, PasswordInterface $password_checker, MailManagerInterface $mail_manager, UserStorageInterface $user_storage) {
@@ @@
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state, User $user = NULL) {
-    /** @var \Drupal\user\Entity\User $account */
+    /** @var User $account */
     $account = $this->userStorage->load($this->currentUser()->id());

     $storage = $form_state->getStorage();
@@ @@
    * {@inheritdoc}
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\user\Entity\User $user */
+    /** @var User $user */
     $user = $this->userStorage->load($this->currentUser()->id());
     $storage = $form_state->getStorage();
     $account = $storage['account'];
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function cancelForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/tfa/src/Controller/TfaLoginController.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Denies access unless user matches hash value.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route
+   * @param RouteMatchInterface $route
    *   The route to be checked.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current logged in user, if any.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   The access result.
    */
   public function access(RouteMatchInterface $route, AccountInterface $account) {
@@ @@
   /**
    * Checks that current user is selected user or is admin.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route
+   * @param RouteMatchInterface $route
    *   The route to be checked.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   The access result.
    */
   public function accessSelfOrAdmin(RouteMatchInterface $route, AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


33) modules/contrib/tfa/src/Annotation/TfaValidation.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tfa\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the Tfa validation.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description shown to users.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


34) modules/contrib/tfa/src/Annotation/TfaSetup.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tfa\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the Tfa setup.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description shown to users.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


35) modules/contrib/tfa/src/Annotation/TfaSend.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tfa\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the Tfa send.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description shown to users.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


36) modules/contrib/tfa/src/Annotation/TfaLogin.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tfa\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the Tfa login.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description shown to users.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


 [ERROR] Could not process                                                      
         "modules/contrib/tfa/services_tfa/src/Plugin/ServiceDefinition/GenericVal
         idation.php" file, due to:                                             
         "Analyze error: "Class Drupal\services\ServiceDefinitionBase not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

