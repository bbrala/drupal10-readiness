diff --git a/entity_reference_preview.module b/entity_reference_preview.module
index 68f51a7..9e6abdd 100644
--- a/entity_reference_preview.module
+++ b/entity_reference_preview.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Component\Plugin\Exception\PluginException;
 /**
  * @file
  * Module implementation file.
@@ -131,10 +132,10 @@ function entity_reference_preview_entity_view_alter(array &$build, EntityInterfa
  *
  * @param array $build
  *   The render array to alter.
- * @param \Drupal\Core\Entity\RevisionableInterface $entity
+ * @param RevisionableInterface $entity
  *   The entity being rendered.
  *
- * @throws \Drupal\Component\Plugin\Exception\PluginException
+ * @throws PluginException
  */
 function _entity_reference_preview_render_indicator(array &$build, RevisionableInterface $entity) {
   $entity_type = $entity->getEntityType();
diff --git a/src/Annotation/PreviewDetector.php b/src/Annotation/PreviewDetector.php
index 8a1c12f..bdd93d0 100644
--- a/src/Annotation/PreviewDetector.php
+++ b/src/Annotation/PreviewDetector.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_reference_preview\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -21,7 +22,7 @@ class PreviewDetector extends Plugin {
   /**
    * The human-readable name of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -30,7 +31,7 @@ class PreviewDetector extends Plugin {
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Cache/StatusPreviewCacheContext.php b/src/Cache/StatusPreviewCacheContext.php
index aca12db..ebb6271 100644
--- a/src/Cache/StatusPreviewCacheContext.php
+++ b/src/Cache/StatusPreviewCacheContext.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_reference_preview\Cache;
 
+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Cache\Context\CacheContextInterface;
 use Drupal\entity_reference_preview\PreviewDetectorInterface;
@@ -18,23 +19,23 @@ class StatusPreviewCacheContext implements CacheContextInterface {
   /**
    * The plugin manager.
    *
-   * @var \Drupal\entity_reference_preview\PreviewDetectorPluginManager
+   * @var PreviewDetectorPluginManager
    */
   private $manager;
 
   /**
    * The request object.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   private $request;
 
   /**
    * StatePreviewCacheContext constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\entity_reference_preview\PreviewDetectorPluginManager $manager
+   * @param PreviewDetectorPluginManager $manager
    *   The plugin manager.
    */
   public function __construct(
diff --git a/src/Entity/EntityStateManager.php b/src/Entity/EntityStateManager.php
index 35c09ff..38c986c 100644
--- a/src/Entity/EntityStateManager.php
+++ b/src/Entity/EntityStateManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_reference_preview\Entity;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ -24,14 +25,14 @@ class EntityStateManager {
   /**
    * The entity state manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   private $languageManager;
 
@@ -45,11 +46,11 @@ class EntityStateManager {
   /**
    * EntityStateManager constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
    */
   public function __construct(
@@ -76,16 +77,16 @@ class EntityStateManager {
   /**
    * Gets a list of entities and maybe changes them to their latest version.
    *
-   * @param \Drupal\Core\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   The entities.
-   * @param \Drupal\Core\Session\AccountInterface|null $account
+   * @param AccountInterface|null $account
    *   The user account to use for access checks.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The entities in their latest revision (if appropriate).
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function maybeSwapEntities(array $entities, AccountInterface $account = NULL): array {
     if (empty($entities)) {
@@ -128,7 +129,7 @@ class EntityStateManager {
    *
    * @param string $entity_type_id
    *   The entity type ID.
-   * @param \Drupal\Core\Entity\EntityInterface[] $entity_ids
+   * @param EntityInterface[] $entity_ids
    *   The entities.
    *
    * @return array
@@ -151,8 +152,8 @@ class EntityStateManager {
    * @return int|string|null
    *   The revision ID if any.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function findRevisionId(string $entity_type_id, $entity_id) {
     $entity_storage = $this->entityTypeManager->getStorage($entity_type_id);
@@ -186,7 +187,7 @@ class EntityStateManager {
   /**
    * Check if this is latest revision of the entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
    * @return bool
@@ -264,13 +265,13 @@ class EntityStateManager {
   /**
    * Get the latest revision ID for the current entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
    * @return mixed
    *   The revision ID.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function getLatestRevisionId(EntityInterface $entity) {
     $storage = $this->entityTypeManager->getStorage($entity->getEntityTypeId());
diff --git a/src/Events/PreviewNegotiationSubscriber.php b/src/Events/PreviewNegotiationSubscriber.php
index 767e007..27f76cc 100644
--- a/src/Events/PreviewNegotiationSubscriber.php
+++ b/src/Events/PreviewNegotiationSubscriber.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\entity_reference_preview\Events;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\entity_reference_preview\PreviewDetectorPluginManager;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -19,14 +19,14 @@ class PreviewNegotiationSubscriber implements EventSubscriberInterface {
   /**
    * The preview detector.
    *
-   * @var \Drupal\entity_reference_preview\PreviewDetectorPluginManager
+   * @var PreviewDetectorPluginManager
    */
   private $previewDetector;
 
   /**
    * PreviewNegotiationSubscriber constructor.
    *
-   * @param \Drupal\entity_reference_preview\PreviewDetectorPluginManager $preview_detector
+   * @param PreviewDetectorPluginManager $preview_detector
    *   The preview detector.
    */
   public function __construct(PreviewDetectorPluginManager $preview_detector) {
@@ -48,10 +48,10 @@ class PreviewNegotiationSubscriber implements EventSubscriberInterface {
   /**
    * Sets a flag in the request object if it belongs to a "latest" route.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The event.
    */
-  public function setPreview(GetResponseEvent $event): void {
+  public function setPreview(RequestEvent $event): void {
     $request = $event->getRequest();
     // Set the global request state in the request object for others to read.
     $active_detector = $this->previewDetector->activeDetector($request);
diff --git a/src/Form/PreviewActionsForm.php b/src/Form/PreviewActionsForm.php
index 1fdf1a1..0783b1f 100644
--- a/src/Form/PreviewActionsForm.php
+++ b/src/Form/PreviewActionsForm.php
@@ -20,17 +20,17 @@ class PreviewActionsForm extends FormBase {
   /**
    * The state detector plugin.
    *
-   * @var \Drupal\entity_reference_preview\Plugin\PreviewDetector\CookiePreviewDetector
+   * @var CookiePreviewDetector
    */
   private $cookieDetector;
 
   /**
    * PreviewActionsForm constructor.
    *
-   * @param \Drupal\entity_reference_preview\Plugin\PreviewDetector\CookiePreviewDetector $cookie_detector
+   * @param CookiePreviewDetector $cookie_detector
    *   The state detector plugin.
    */
-  public function __construct(CookiePreviewDetector $cookie_detector) {
+  public function __construct(CookiePreviewDetector $cookie_detector, private PreviewDetectorPluginManager $previewDetectorPluginManager) {
     $this->cookieDetector = $cookie_detector;
   }
 
@@ -38,7 +38,7 @@ class PreviewActionsForm extends FormBase {
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container) {
-    $cookie_detector = $container->get(PreviewDetectorPluginManager::class)
+    $cookie_detector = $this->previewDetectorPluginManager
       ->createInstance('cookie');
     return new static($cookie_detector);
   }
@@ -128,7 +128,7 @@ class PreviewActionsForm extends FormBase {
    * @param bool $is_previewing
    *   TRUE indicates if the request is for preview.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The markup.
    */
   private function getFeedbackMessage(bool $is_previewing): TranslatableMarkup {
diff --git a/src/Plugin/Block/PreviewDetectorBlock.php b/src/Plugin/Block/PreviewDetectorBlock.php
index 4c608eb..17bd4a8 100644
--- a/src/Plugin/Block/PreviewDetectorBlock.php
+++ b/src/Plugin/Block/PreviewDetectorBlock.php
@@ -26,7 +26,7 @@ class PreviewDetectorBlock extends BlockBase implements ContainerFactoryPluginIn
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   private $formBuilder;
 
@@ -56,7 +56,7 @@ class PreviewDetectorBlock extends BlockBase implements ContainerFactoryPluginIn
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder.
    * @param bool $is_previewing
    *   TRUE if the request is previewing values.
diff --git a/src/Plugin/Field/FieldFormatter/EntityReferenceEntityPreviewFormatter.php b/src/Plugin/Field/FieldFormatter/EntityReferenceEntityPreviewFormatter.php
index 401dd1d..de01a16 100644
--- a/src/Plugin/Field/FieldFormatter/EntityReferenceEntityPreviewFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/EntityReferenceEntityPreviewFormatter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_reference_preview\Plugin\Field\FieldFormatter;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -32,7 +33,7 @@ class EntityReferenceEntityPreviewFormatter extends EntityReferenceEntityFormatt
   /**
    * The entity state manager.
    *
-   * @var \Drupal\entity_reference_preview\Entity\EntityStateManager
+   * @var EntityStateManager
    */
   private $entityStateManager;
 
@@ -50,7 +51,7 @@ class EntityReferenceEntityPreviewFormatter extends EntityReferenceEntityFormatt
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ -60,13 +61,13 @@ class EntityReferenceEntityPreviewFormatter extends EntityReferenceEntityFormatt
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
-   * @param \Drupal\entity_reference_preview\Entity\EntityStateManager $entity_state_manager
+   * @param EntityStateManager $entity_state_manager
    *   The entity state manager.
    * @param bool $can_see_indicator
    *   Boolean weather or not current user can see the indicator.
@@ -83,7 +84,8 @@ class EntityReferenceEntityPreviewFormatter extends EntityReferenceEntityFormatt
     EntityTypeManagerInterface $entity_type_manager,
     EntityDisplayRepositoryInterface $entity_display_repository,
     EntityStateManager $entity_state_manager,
-    bool $can_see_indicator
+    bool $can_see_indicator,
+    EntityStateManager $entityStateManager
   ) {
     parent::__construct(
       $plugin_id,
@@ -99,6 +101,7 @@ class EntityReferenceEntityPreviewFormatter extends EntityReferenceEntityFormatt
     );
     $this->entityStateManager = $entity_state_manager;
     $this->canSeeIndicator = $can_see_indicator;
+    $this->entityStateManager = $entityStateManager;
   }
 
   /**
@@ -121,7 +124,7 @@ class EntityReferenceEntityPreviewFormatter extends EntityReferenceEntityFormatt
       $container->get('logger.factory'),
       $container->get('entity_type.manager'),
       $container->get('entity_display.repository'),
-      $container->get(EntityStateManager::class),
+      $this->entityStateManager,
       $can_see_indicator && $indicator_enabled
     );
   }
@@ -146,7 +149,7 @@ class EntityReferenceEntityPreviewFormatter extends EntityReferenceEntityFormatt
    * @param array $entities_items
    *   The entity items containing the field items.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *
    * @see \Drupal\Core\Field\Plugin\Field\FieldFormatter\EntityReferenceFormatterBase::prepareView()
    */
diff --git a/src/Plugin/PreviewDetector/CookiePreviewDetector.php b/src/Plugin/PreviewDetector/CookiePreviewDetector.php
index 05f268a..b9c7042 100644
--- a/src/Plugin/PreviewDetector/CookiePreviewDetector.php
+++ b/src/Plugin/PreviewDetector/CookiePreviewDetector.php
@@ -24,7 +24,7 @@ class CookiePreviewDetector extends PreviewDetectorPluginBase implements Contain
   /**
    * The state service.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   private $request;
 
diff --git a/src/Plugin/PreviewDetector/RenderedEntityPreviewDetector.php b/src/Plugin/PreviewDetector/RenderedEntityPreviewDetector.php
index 3539374..958cc55 100644
--- a/src/Plugin/PreviewDetector/RenderedEntityPreviewDetector.php
+++ b/src/Plugin/PreviewDetector/RenderedEntityPreviewDetector.php
@@ -35,10 +35,10 @@ class RenderedEntityPreviewDetector extends PreviewDetectorPluginBase {
   /**
    * Extracts the route-level entity being rendered in this request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request that potentially contains the rendered entity.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    *   The entity associated to the request.
    */
   private function extractEntityFromRequest(Request $request): ?ContentEntityInterface {
@@ -60,7 +60,7 @@ class RenderedEntityPreviewDetector extends PreviewDetectorPluginBase {
   /**
    * Checks the route for "load latest revision" parameter flag.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route for the current request.
    * @param string $entity_type_id
    *   The ID of entity type for the route parameter.
@@ -76,7 +76,7 @@ class RenderedEntityPreviewDetector extends PreviewDetectorPluginBase {
   /**
    * The entity preview function.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
+   * @param ContentEntityInterface|null $entity
    *   The content entity to check.
    *
    * @return bool
diff --git a/src/PreviewDetectorInterface.php b/src/PreviewDetectorInterface.php
index ea94e68..60323d3 100644
--- a/src/PreviewDetectorInterface.php
+++ b/src/PreviewDetectorInterface.php
@@ -20,7 +20,7 @@ interface PreviewDetectorInterface {
   /**
    * Checks if the current request is under preview.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    *
    * @return bool
diff --git a/src/PreviewDetectorPluginManager.php b/src/PreviewDetectorPluginManager.php
index 107e19e..d2f4ff6 100644
--- a/src/PreviewDetectorPluginManager.php
+++ b/src/PreviewDetectorPluginManager.php
@@ -19,9 +19,9 @@ class PreviewDetectorPluginManager extends DefaultPluginManager implements Fallb
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ -45,7 +45,7 @@ class PreviewDetectorPluginManager extends DefaultPluginManager implements Fallb
   /**
    * Checks if the request is for a preview state.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The global request object.
    * @param array $configuration
    *   The configuration for the preview detectors.
@@ -60,7 +60,7 @@ class PreviewDetectorPluginManager extends DefaultPluginManager implements Fallb
   /**
    * Gets the active detector ID, if any, for the current request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The global request object.
    * @param array $configuration
    *   The configuration for the preview detectors.
diff --git a/src/PreviewDetectorToolbar.php b/src/PreviewDetectorToolbar.php
index fd8c092..0a487c2 100644
--- a/src/PreviewDetectorToolbar.php
+++ b/src/PreviewDetectorToolbar.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_reference_preview;
 
+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Core\Url;
@@ -29,23 +30,23 @@ class PreviewDetectorToolbar {
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   private $request;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $user;
 
   /**
    * PreviewDetectorToolbar constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The current user.
    */
   public function __construct(RequestStack $request_stack, AccountInterface $user) {
