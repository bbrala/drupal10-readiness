diff --git a/src/Plugin/views/exposed_form/ExposedGroups.php b/src/Plugin/views/exposed_form/ExposedGroups.php
index fc64fe6..d3eca99 100644
--- a/src/Plugin/views/exposed_form/ExposedGroups.php
+++ b/src/Plugin/views/exposed_form/ExposedGroups.php
@@ -258,7 +258,7 @@ class ExposedGroups extends ExposedFormPluginBase {
    *
    * @param array &$element
    *   The form element array.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The form state.
    */
   public function updateGroupsValidate(array &$element, FormStateInterface $formState) {
diff --git a/tests/src/Functional/ViewsExposedGroupsExposedOperatorTest.php b/tests/src/Functional/ViewsExposedGroupsExposedOperatorTest.php
index a9892ab..99d0683 100644
--- a/tests/src/Functional/ViewsExposedGroupsExposedOperatorTest.php
+++ b/tests/src/Functional/ViewsExposedGroupsExposedOperatorTest.php
@@ -12,7 +12,7 @@ class ViewsExposedGroupsExposedOperatorTest extends ViewsExposedGroupsTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->defaultView->getDisplay('default')
@@ -55,10 +55,10 @@ class ViewsExposedGroupsExposedOperatorTest extends ViewsExposedGroupsTestBase {
     $this->drupalGet($view_path);
 
     // Asserts that the exposed filter with an exposed operator exists.
-    $this->assertFieldByName('title_op');
-    $this->assertFieldByName('title');
+    $this->assertSession()->fieldExists('title_op');
+    $this->assertSession()->fieldExists('title');
     $fieldset_legend = $this->xpath('//fieldset/legend/span[text()="Title"]');
-    $this->assertEqual(1, count($fieldset_legend), 'Found the exposed filter label as the fieldset legend.');
+    $this->assertEquals(1, count($fieldset_legend), 'Found the exposed filter label as the fieldset legend.');
   }
 
 }
diff --git a/tests/src/Functional/ViewsExposedGroupsInheritedPropertiesTest.php b/tests/src/Functional/ViewsExposedGroupsInheritedPropertiesTest.php
index c6d5e91..b628fbd 100644
--- a/tests/src/Functional/ViewsExposedGroupsInheritedPropertiesTest.php
+++ b/tests/src/Functional/ViewsExposedGroupsInheritedPropertiesTest.php
@@ -12,7 +12,7 @@ class ViewsExposedGroupsInheritedPropertiesTest extends ViewsExposedGroupsTestBa
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->defaultView->getDisplay('default')->setOption('exposed_form', [
@@ -58,15 +58,15 @@ class ViewsExposedGroupsInheritedPropertiesTest extends ViewsExposedGroupsTestBa
       'exposed_form_options[autosubmit]' => '1',
       'exposed_form_options[autosubmit_hide]' => '1',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Apply');
+    $this->submitForm($edit, 'Apply');
 
     // Asserts the form options are set.
     $exposed_options_path = 'admin/structure/views/nojs/display/' . $this->defaultView->name . '/default/exposed_form_options';
     $this->drupalGet($exposed_options_path);
 
-    $this->assertFieldByName('exposed_form_options[reset_button]', '1');
-    $this->assertFieldByName('exposed_form_options[autosubmit]', '1');
-    $this->assertFieldByName('exposed_form_options[autosubmit_hide]', '1');
+    $this->assertSession()->fieldValueEquals('exposed_form_options[reset_button]', '1');
+    $this->assertSession()->fieldValueEquals('exposed_form_options[autosubmit]', '1');
+    $this->assertSession()->fieldValueEquals('exposed_form_options[autosubmit_hide]', '1');
   }
 
   /**
diff --git a/tests/src/Functional/ViewsExposedGroupsTestBase.php b/tests/src/Functional/ViewsExposedGroupsTestBase.php
index 4ea0c5a..24da692 100644
--- a/tests/src/Functional/ViewsExposedGroupsTestBase.php
+++ b/tests/src/Functional/ViewsExposedGroupsTestBase.php
@@ -2,6 +2,13 @@
 
 namespace Drupal\Tests\views_exposed_groups\Functional;
 
+use Drupal\Core\Session\AccountProxyInterface;
+use Drupal\node\Entity\Node;
+use Drupal\views\Entity\View;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Config\FileStorage;
 use Drupal\Tests\BrowserTestBase;
 
@@ -24,35 +31,35 @@ abstract class ViewsExposedGroupsTestBase extends BrowserTestBase {
   /**
    * A user account that can create and edit views.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $privilegedUser;
 
   /**
    * A user account that can access content.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $unprivilegedUser;
 
   /**
    * Content used in the test, keyed by the entity ID.
    *
-   * @var \Drupal\node\Entity\Node[]
+   * @var Node[]
    */
   protected $testNodes = [];
 
   /**
    * A default view to use for testing.
    *
-   * @var \Drupal\views\Entity\View
+   * @var View
    */
   protected $defaultView;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Creates several random nodes for the view.
@@ -109,7 +116,8 @@ abstract class ViewsExposedGroupsTestBase extends BrowserTestBase {
   public function assertViewsTableResultCount($expected = 0, $message = '', $group = 'Browser') {
     $message = $message ? $message : 'Found the correct number of views results in the table display.';
     $rows = $this->xpath('//table[contains(@class, :class)]/tbody/tr', [':class' => 'views-table']);
-    $this->assertEquals($expected, count($rows), $message, $group);
+    $this->assertEquals($expected, count($rows), $message);
+    $this->assertEqualsWithDelta($expected, count($rows), $group, $message);
   }
 
   /**
@@ -137,16 +145,16 @@ abstract class ViewsExposedGroupsTestBase extends BrowserTestBase {
   /**
    * Creates a default view.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   A page displaying content in a table.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   protected function makeDefaultView() {
     $storage = \Drupal::entityTypeManager()->getStorage('view');
-    $file_storage = new FileStorage(drupal_get_path('module', 'views_exposed_groups') . '/tests/fixtures');
+    $file_storage = new FileStorage(\Drupal::service('extension.list.module')->getPath('views_exposed_groups') . '/tests/fixtures');
     $storage
       ->create($file_storage->read('views.view.exposed_groups_test'))
       ->save();
