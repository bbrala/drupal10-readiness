modules/contrib/select_or_other/select_or_other.module
modules/contrib/select_or_other/src/Element/Buttons.php
modules/contrib/select_or_other/src/Element/ElementBase.php
modules/contrib/select_or_other/src/Element/Select.php
modules/contrib/select_or_other/src/Plugin/Field/FieldWidget/ListWidget.php
modules/contrib/select_or_other/src/Plugin/Field/FieldWidget/ReferenceWidget.php
modules/contrib/select_or_other/src/Plugin/Field/FieldWidget/WidgetBase.php
modules/contrib/select_or_other/src/Plugin/Validation/AllowedValuesConstraint.php
modules/contrib/select_or_other/src/Plugin/Validation/AllowedValuesConstraintValidator.php
modules/contrib/select_or_other/tests/src/Functional/ListTest.php
modules/contrib/select_or_other/tests/src/Functional/ReferenceTest.php
modules/contrib/select_or_other/tests/src/Functional/TestBase.php
modules/contrib/select_or_other/tests/src/Unit/ButtonsElementTest.php
modules/contrib/select_or_other/tests/src/Unit/ElementsTest.php
modules/contrib/select_or_other/tests/src/Unit/ListWidgetTest.php
modules/contrib/select_or_other/tests/src/Unit/ReferenceWidgetTest.php
modules/contrib/select_or_other/tests/src/Unit/SelectElementTest.php
modules/contrib/select_or_other/tests/src/Unit/UnitTestBase.php

10 files with changes
=====================

1) modules/contrib/select_or_other/tests/src/Unit/UnitTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\select_or_other\Unit;

+use PHPUnit\Framework\MockObject\MockBuilder;
+use PHPUnit\Framework\MockObject\MockObject;
+use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Tests\UnitTestCase;

 /**
@@ @@
   /**
    * The mock builder.
    *
-   * @var \PHPUnit\Framework\MockObject\MockBuilder
+   * @var MockBuilder
    */
   protected $mockBuilder;

@@ @@
   /**
    * The container mock.
    *
-   * @var \PHPUnit\Framework\MockObject\MockObject
+   * @var MockObject
    */
   private $containerMock;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->prepareContainer();
     $this->addMockServicesToContainer();
@@ @@
   private function prepareContainer() {
     $container_class = 'Drupal\Core\DependencyInjection\Container';
     $methods = get_class_methods($container_class);
-    /** @var \Symfony\Component\DependencyInjection\ContainerInterface $container */
+    /** @var ContainerInterface $container */
     $this->containerMock = $container = $this->getMockBuilder($container_class)
       ->disableOriginalConstructor()
       ->onlyMethods($methods)
@@ @@
   /**
    * Creates and returns a mocked user.
    *
-   * @return \PHPUnit\Framework\MockObject\MockObject
+   * @return MockObject
    *   The mocked user.
    */
   private function getNewUserMock() {
@@ @@
   /**
    * Creates a new entity type manager mock.
    *
-   * @return \PHPUnit\Framework\MockObject\MockObject
+   * @return MockObject
    *   The new Entity Type Manager Mock.
    */
   private function getNewEntityTypeManagerMock() {
@@ @@

     $reflected_field_definition = new \ReflectionProperty('Drupal\select_or_other\Plugin\Field\FieldWidget\WidgetBase', 'fieldDefinition');
     $reflected_field_definition->setAccessible(TRUE);
-    /** @var \PHPUnit\Framework\MockObject\MockObject $current_mock */
+    /** @var MockObject $current_mock */
     foreach ($mocks as $current_mock) {
       $field_definition_methods = ['getFieldStorageDefinition' => $this->getMockForAbstractClass('Drupal\Core\Field\FieldStorageDefinitionInterface')];
       $field_definition = $this->getMockForAbstractClassWithMethods('\Drupal\Core\Field\FieldDefinitionInterface', $field_definition_methods);
@@ @@
    * @param array $methods
    *   The methods to mock.
    *
-   * @return \PHPUnit\Framework\MockObject\MockObject
+   * @return MockObject
    *   The created mock.
    */
   protected function getMockForAbstractClassWithMethods($abstractClassName, array $methods) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/select_or_other/tests/src/Unit/ReferenceWidgetTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\select_or_other\Unit;

+use Drupal\select_or_other\Plugin\Field\FieldWidget\WidgetBase;
+use Drupal\Core\Field\FieldItemListInterface;
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Form\FormState;
 use Drupal\select_or_other\Plugin\Field\FieldWidget\ReferenceWidget;

@@ @@
   public function testGetOptions() {
     $entity_id = 1;
     $entity_label = 'Label';
-    $entity_mock = $this->getMockBuilder('\Drupal\Core\Entity\EntityBase')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_mock = $this->createMock('\Drupal\Core\Entity\EntityBase');
     $entity_mock->expects($this->exactly(1))
       ->method('id')
       ->willReturn($entity_id);
@@ @@
    */
   public function testFormElement() {
     foreach (['node', 'taxonomy_term'] as $target_type) {
-      /** @var \Drupal\select_or_other\Plugin\Field\FieldWidget\ReferenceWidget $mock */
+      /** @var ReferenceWidget $mock */
       $mock = $this->prepareFormElementMock($target_type);
-      /** @var \Drupal\select_or_other\Plugin\Field\FieldWidget\WidgetBase $parent */
+      /** @var WidgetBase $parent */
       $parent = $this->prepareFormElementMock($target_type, 'Drupal\select_or_other\Plugin\Field\FieldWidget\WidgetBase');

       $entity = $this->getMockForAbstractClass('Drupal\Core\Entity\FieldableEntityInterface');
       $items = $this->getMockForAbstractClass('Drupal\Core\Field\FieldItemListInterface');
       $items->method('getEntity')->willReturn($entity);
-      /** @var \Drupal\Core\Field\FieldItemListInterface $items */
+      /** @var FieldItemListInterface $items */
       $delta = 1;
       $element = [];
       $form = [];
@@ @@
    * Tests if the widget correctly determines if it is applicable.
    */
   public function testIsApplicable() {
-    $entity_reference_selection = $this->getMockBuilder('Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_reference_selection = $this->createMock('Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManager');
     $entity_reference_selection->expects($this->exactly(4))
       ->method('getInstance')
       ->willReturnOnConsecutiveCalls(
@@ @@
         ['handler_settings' => ['auto_create' => TRUE]],
         ['handler_settings' => ['auto_create' => TRUE]]
       );
-    /** @var \Drupal\Core\Field\FieldDefinitionInterface $definition */
+    /** @var FieldDefinitionInterface $definition */
     $this->assertFalse(ReferenceWidget::isApplicable($definition));
     $this->assertFalse(ReferenceWidget::isApplicable($definition));
     $this->assertFalse(ReferenceWidget::isApplicable($definition));
@@ @@
   public function testPrepareSelectedOptions() {
     $entity_id = 1;
     $entity_label = 'Label';
-    $entity_mock = $this->getMockBuilder('\Drupal\Core\Entity\EntityBase')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_mock = $this->createMock('\Drupal\Core\Entity\EntityBase');
     $entity_mock->expects($this->any())
       ->method('id')
       ->willReturn($entity_id);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/select_or_other/tests/src/Unit/ListWidgetTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\select_or_other\Unit;

+use Drupal\Core\Field\FieldItemListInterface;
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Form\FormState;
 use Drupal\select_or_other\Plugin\Field\FieldWidget\ListWidget;
@@ @@
     list($parent, $mock) = $this->getBasicMocks();
     /** @var \Drupal\select_or_other\Plugin\Field\FieldWidget\ListWidget $mock */
     /** @var \Drupal\select_or_other\Plugin\Field\FieldWidget\WidgetBase $parent */
-    /** @var \Drupal\Core\Field\FieldItemListInterface $items */
+    /** @var FieldItemListInterface $items */
     $items = $this->getMockForAbstractClass('Drupal\Core\Field\FieldItemListInterface');
     $delta = NULL;
     $element = [];
@@ @@
     $sut = $this->getNewSubjectUnderTest();
     $form = [];
     $form_state = new FormState();
-    /** @var \Drupal\select_or_other\Plugin\Field\FieldWidget\ListWidget $mock */
+    /** @var ListWidget $mock */
     $test_values = [
       [],
       ['value'],
@@ @@
     $sut = $this->getNewSubjectUnderTest();
     $form = [];
     $form_state = new FormState();
-    /** @var \Drupal\select_or_other\Plugin\Field\FieldWidget\ListWidget $mock */
+    /** @var ListWidget $mock */
     $result = $sut->massageFormValues(['select' => 'test'], $form, $form_state);
     $this->assertEquals([], $result);
   }
@@ @@
     $sut = $this->getNewSubjectUnderTest();
     $form = [];
     $form_state = new FormState();
-    /** @var \Drupal\select_or_other\Plugin\Field\FieldWidget\ListWidget $mock */
+    /** @var ListWidget $mock */
     $result = $sut->massageFormValues(['other' => 'test'], $form, $form_state);
     $this->assertEquals([], $result);
   }
@@ @@
   /**
    * Creates a new subject under test.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface|\PHPUnit\Framework\MockObject\MockObject|null $fieldDefinition
+   * @param FieldDefinitionInterface|MockObject|null $fieldDefinition
    *   The field definitions or NULL.
    *
-   * @return \Drupal\select_or_other\Plugin\Field\FieldWidget\ListWidget
+   * @return ListWidget
    *   The new subject under test.
    */
   protected function getNewSubjectUnderTest(FieldDefinitionInterface $fieldDefinition = NULL) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/select_or_other/tests/src/Functional/TestBase.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('local_tasks_block');
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/select_or_other/tests/src/Functional/ReferenceTest.php:28

    ---------- begin diff ----------
@@ @@

   /**
    * Make sure an empty option is present when relevant.
+   * @doesNotPerformAssertions
    */
   public function testEmptyOption($empty_option = '') {
     parent::testEmptyOption('My cool new value');
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/select_or_other/tests/src/Functional/ListTest.php:33

    ---------- begin diff ----------
@@ @@

   /**
    * Make sure an empty option is present when relevant.
+   * @doesNotPerformAssertions
    */
   public function testEmptyOption($empty_option = '') {
     parent::testEmptyOption('My cool new value');
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/select_or_other/src/Plugin/Validation/AllowedValuesConstraintValidator.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Constructs a new AllowedValuesConstraintValidator.
    *
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(AccountInterface $current_user) {
@@ @@
   /**
    * Assert whether or not a given typed data must be validated by core.
    *
-   * @param \Drupal\Core\TypedData\TypedDataInterface $typed_data
+   * @param TypedDataInterface $typed_data
    *   The typed data.
    *
    * @return bool
@@ @@
    *
    * @param mixed $value
    *   The value to validate.
-   * @param \Symfony\Component\Validator\Constraint $constraint
+   * @param Constraint $constraint
    *   The constraint.
    */
   private function validateUsingCoreValidation($value, Constraint $constraint) {
@@ @@
   /**
    * Retrieves the valid choices.
    *
-   * @param \Drupal\Core\TypedData\TypedDataInterface $typed_data
+   * @param TypedDataInterface $typed_data
    *   The typed data.
    *
    * @return array
@@ @@
   /**
    * Retrieves the main property value.
    *
-   * @param \Drupal\Core\TypedData\TypedDataInterface $typed_data
+   * @param TypedDataInterface $typed_data
    *   The typed data.
    *
    * @return mixed
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/select_or_other/src/Plugin/Field/FieldWidget/WidgetBase.php:197

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the array of options for the widget.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity this widget is used for.
    *
    * @return array
@@ @@
   /**
    * Determines selected options from the incoming field values.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   The field values.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/select_or_other/src/Plugin/Field/FieldWidget/ReferenceWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\select_or_other\Plugin\Field\FieldWidget;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Component\Utility\Tags;
 use Drupal\Core\Entity\Element\EntityAutocomplete;
 use Drupal\Core\Entity\EntityReferenceSelection\SelectionWithAutocreateInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInfoService;

@@ @@
   /**
    * Retrieves the entityStorage object.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   EntityStorage for entity types that can be referenced by this widget.
    *
    * @codeCoverageIgnore
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/select_or_other/src/Plugin/Field/FieldWidget/ListWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\select_or_other\Plugin\Field\FieldWidget;

+use Drupal\field\FieldStorageConfigInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   protected function addNewValuesToAllowedValues(array $values_to_add) {
     $entity_type = $this->fieldDefinition->getTargetEntityTypeId();
     $field_name = $this->fieldDefinition->getName();
-    /** @var \Drupal\field\FieldStorageConfigInterface $storage */
+    /** @var FieldStorageConfigInterface $storage */
     $storage = \Drupal::entityTypeManager()->getStorage('field_storage_config')->load("$entity_type.$field_name");
     $allowed_values = $storage->getSetting('allowed_values');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 10 files have been changed by Rector                                      

