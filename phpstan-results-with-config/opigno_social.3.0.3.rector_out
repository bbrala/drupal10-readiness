modules/contrib/opigno_social/opigno_social.install
modules/contrib/opigno_social/opigno_social.module
modules/contrib/opigno_social/src/Access/ShareContentAccessCheck.php
modules/contrib/opigno_social/src/Access/SocialFeaturesAccessCheck.php
modules/contrib/opigno_social/src/Controller/PostsController.php
modules/contrib/opigno_social/src/Controller/UserConnectionsController.php
modules/contrib/opigno_social/src/Entity/OpignoPost.php
modules/contrib/opigno_social/src/Entity/OpignoPostInterface.php
modules/contrib/opigno_social/src/Entity/UserInvitation.php
modules/contrib/opigno_social/src/Entity/UserInvitationInterface.php
modules/contrib/opigno_social/src/Form/CreateCommentForm.php
modules/contrib/opigno_social/src/Form/CreatePostForm.php
modules/contrib/opigno_social/src/Form/CreateSharePostForm.php
modules/contrib/opigno_social/src/Form/RemoveSocialEntitiesConfirmForm.php
modules/contrib/opigno_social/src/OpignoPostAccessControlHandler.php
modules/contrib/opigno_social/src/OpignoPostViewsData.php
modules/contrib/opigno_social/src/Plugin/Block/CommentFormBlock.php
modules/contrib/opigno_social/src/Plugin/Block/SocialWallBlock.php
modules/contrib/opigno_social/src/Plugin/Block/UserConnectionsBlock.php
modules/contrib/opigno_social/src/Plugin/views/field/BadgeName.php
modules/contrib/opigno_social/src/Plugin/views/filter/AvailablePosts.php
modules/contrib/opigno_social/src/Plugin/views/filter/BadgeNameFilter.php
modules/contrib/opigno_social/src/Plugin/views/filter/UserNetworkConnections.php
modules/contrib/opigno_social/src/Plugin/views/filter/UserSuggestedConnections.php
modules/contrib/opigno_social/src/Plugin/views/sort/OpignoPostsSorting.php
modules/contrib/opigno_social/src/Services/OpignoPostsManager.php
modules/contrib/opigno_social/src/Services/UserAccessManager.php
modules/contrib/opigno_social/src/Services/UserConnectionManager.php
modules/contrib/opigno_social/src/UserAccessControlHandler.php
modules/contrib/opigno_social/src/UserInvitationViewsData.php

24 files with changes
=====================

1) modules/contrib/opigno_social/src/Services/UserConnectionManager.php:51

    ---------- begin diff ----------
@@ @@
   /**
    * The cache service.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * User the invitation entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface|null
+   * @var EntityStorageInterface|null
    */
   protected $invitationStorage = NULL;

@@ @@
   /**
    * User entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface|null
+   * @var EntityStorageInterface|null
    */
   protected $userStorage = NULL;

@@ @@
   /**
    * The CSRF token generator.
    *
-   * @var \Drupal\Core\Access\CsrfTokenGenerator
+   * @var CsrfTokenGenerator
    */
   protected $csrfToken;

@@ @@
   /**
    * The DB connection service.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   public $user;

@@ @@
   /**
    * Opigno user access manager.
    *
-   * @var \Drupal\opigno_social\Services\UserAccessManager
+   * @var UserAccessManager
    */
   protected $userAccessManager;

@@ @@
   /**
    * Opigno private messaging manager service.
    *
-   * @var \Drupal\opigno_messaging\Services\OpignoMessageThread
+   * @var OpignoMessageThread
    */
   protected $messageService;

@@ @@
   /**
    * UserConnectionManager constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache service.
-   * @param \Drupal\Core\Access\CsrfTokenGenerator $csrf_token
+   * @param CsrfTokenGenerator $csrf_token
    *   CSRF token generator service.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The DB connection service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\opigno_social\Services\UserAccessManager $access_manager
+   * @param UserAccessManager $access_manager
    *   Opigno user access manager.
-   * @param \Drupal\opigno_messaging\Services\OpignoMessageThread $pm_service
+   * @param OpignoMessageThread $pm_service
    *   The private messages manager service.
    */
   public function __construct(
@@ @@
    * @param string|int $invitee
    *   The invitee user ID.
    *
-   * @return \Drupal\opigno_social\Entity\UserInvitationInterface|null
+   * @return UserInvitationInterface|null
    *   The user invitation.
    */
   public function getInvitation($owner, $invitee = ''): ?UserInvitationInterface {
@@ @@
    * @param string|int $owner
    *   Invitation owner user ID.
    *
-   * @return \Drupal\opigno_social\Entity\UserInvitationInterface|bool
+   * @return UserInvitationInterface|bool
    *   User invitation entity if it can be accepted, FALSE otherwise.
    */
   public function invitationCanBeAccepted($owner) {
@@ @@
    * @param string|int $invitee
    *   Invitee user ID.
    *
-   * @return \Drupal\opigno_social\Entity\UserInvitationInterface|bool
+   * @return UserInvitationInterface|bool
    *   User invitation entity if it can be declined, FALSE otherwise.
    */
   public function invitationCanBeDeclined($owner, $invitee = '') {
@@ @@
   /**
    * Protect the url with the CSRF token to make AJAX request secure.
    *
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   The url to be protected.
    */
   public function protectUrl(Url $url): void {
@@ @@
     }

     $uid = $uid ?: $this->currentUid;
-    $img_path = drupal_get_path('theme', 'aristotle') . '/src/images/design/connections.svg';
+    $img_path = \Drupal::service('extension.list.theme')->getPath('aristotle') . '/src/images/design/connections.svg';
     $connections = count($this->getUserNetwork($uid));

     return [
@@ @@
       '#count' => $connections,
       '#text' => $this->formatPlural($connections, 'Connection', 'Connections'),
       '#subtitle' => $uid === $this->currentUid ? $this->t('Manage connections') : '',
-      '#img' => file_exists($img_path) ? file_url_transform_relative(base_path() . $img_path) : '',
+      '#img' => file_exists($img_path) ? \Drupal::service('file_url_generator')->transformRelative(base_path() . $img_path) : '',
       '#url' => $uid === $this->currentUid ? Url::fromRoute('opigno_social.manage_connections')->toString() : '',
     ] + $build;
   }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/opigno_social/src/Services/UserAccessManager.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;

@@ @@
   /**
    * The group membership loader service.
    *
-   * @var \Drupal\group\GroupMembershipLoaderInterface
+   * @var GroupMembershipLoaderInterface
    */
   protected $membershipLoader;

@@ @@
   /**
    * UserAccessManager constructor.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user account.
-   * @param \Drupal\group\GroupMembershipLoaderInterface $membership_loader
+   * @param GroupMembershipLoaderInterface $membership_loader
    *   The group membership loader service.
    */
   public function __construct(AccountInterface $account, GroupMembershipLoaderInterface $membership_loader) {
@@ @@
   /**
    * Check the access to the given profile info based on group permissions.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The user to check the access to.
    *
    * @return bool
@@ @@
   /**
    * Check if the current user can view the given user's private profile.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The user to check the access to.
    *
    * @return bool
@@ @@
   /**
    * Check if the current user can view the user's achievements page.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The user to check the achievements page access to.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/opigno_social/src/Services/OpignoPostsManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_social\Services;

+use Drupal\Core\Entity\EntityViewBuilderInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
@@ @@
   /**
    * The posts/comments storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface|null
+   * @var EntityStorageInterface|null
    */
   protected $storage = NULL;

@@ @@
   /**
    * The posts/comments view builder.
    *
-   * @var \Drupal\Core\Entity\EntityViewBuilderInterface
+   * @var EntityViewBuilderInterface
    */
   protected $viewBuilder;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The block manager service.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;

@@ @@
   /**
    * The cache service.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   public $cache;

@@ @@
   /**
    * The user data.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;

@@ @@
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|null
+   * @var Request|null
    */
   protected $request;

@@ @@
   /**
    * The database connection service.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * OpignoPostsManager constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Block\BlockManagerInterface $block_manager
+   * @param BlockManagerInterface $block_manager
    *   The block manager service.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache service.
    * @param UserConnectionManager $connection_manager
    *   The user connections manager service.
-   * @param \Drupal\user\UserDataInterface $user_data
+   * @param UserDataInterface $user_data
    *   The user data.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack service.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection service.
    */
   public function __construct(
@@ @@
    * @param int|array $pid
    *   The post ID(s) to be loaded.
    *
-   * @return \Drupal\opigno_social\Entity\OpignoPostInterface|null|array
+   * @return OpignoPostInterface|null|array
    *   The loaded post/comment entity (entities).
    */
   public function loadPost($pid) {
@@ @@
   /**
    * Get the list of available post/comment action links.
    *
-   * @param \Drupal\opigno_social\Entity\OpignoPostInterface $post
+   * @param OpignoPostInterface $post
    *   The post/comment entity to get actions for.
    *
    * @return array
@@ @@
    *   The name of the route.
    * @param array $params
    *   The route parameters.
-   * @param \Drupal\Core\StringTranslation\TranslatableMarkup|string $text
+   * @param TranslatableMarkup|string $text
    *   The link text.
    * @param string $action
    *   The action name. Needed to add the extra class to the link.
@@ @@
   /**
    * Prepare the render array to display the post attachment.
    *
-   * @param \Drupal\opigno_social\Entity\OpignoPostInterface|null $post
+   * @param OpignoPostInterface|null $post
    *   The post entity. Leave empty to display data based on the given
    *   attachment type (training/post/certificate), attachment entity type
    *   (group/opigno_module) and ID.
@@ @@
   /**
    * Get the post text with read more/show less link.
    *
-   * @param \Drupal\opigno_social\Entity\OpignoPostInterface $post
+   * @param OpignoPostInterface $post
    *   The post to get the text from.
    *
-   * @return array|\Drupal\Component\Render\MarkupInterface
+   * @return array|MarkupInterface
    *   The post text with read more/show less link.
    */
   public function renderReadMoreText(OpignoPostInterface $post) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/opigno_social/src/Plugin/views/sort/OpignoPostsSorting.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Posts manager service.
    *
-   * @var \Drupal\opigno_social\Services\OpignoPostsManager
+   * @var OpignoPostsManager
    */
   protected $postsManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/opigno_social/src/Plugin/views/filter/UserNetworkConnections.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * User connection manager service.
    *
-   * @var \Drupal\opigno_social\Services\UserConnectionManager
+   * @var UserConnectionManager
    */
   protected $connectionManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/opigno_social/src/Plugin/views/filter/BadgeNameFilter.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The join manager service.
    *
-   * @var \Drupal\views\Plugin\ViewsHandlerManager
+   * @var ViewsHandlerManager
    */
   protected $joinManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/opigno_social/src/Plugin/views/filter/AvailablePosts.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * User connection manager service.
    *
-   * @var \Drupal\opigno_social\Services\UserConnectionManager
+   * @var UserConnectionManager
    */
   protected $connectionManager;

@@ @@
   /**
    * Posts manager service.
    *
-   * @var \Drupal\opigno_social\Services\OpignoPostsManager
+   * @var OpignoPostsManager
    */
   protected $postsManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/opigno_social/src/Plugin/views/field/BadgeName.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The DB connection service.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/opigno_social/src/Plugin/Block/UserConnectionsBlock.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The user connections manager service.
    *
-   * @var \Drupal\opigno_social\Services\UserConnectionManager
+   * @var UserConnectionManager
    */
   protected $connectionsManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/opigno_social/src/Plugin/Block/SocialWallBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_social\Plugin\Block;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\EntityViewBuilderInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Access\CsrfTokenGenerator;
@@ @@
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;

@@ @@
   /**
    * The loaded current user.
    *
-   * @var \Drupal\Core\Entity\EntityInterface|null
+   * @var EntityInterface|null
    */
   protected $user = NULL;

@@ @@
   /**
    * The user view builder service.
    *
-   * @var \Drupal\Core\Entity\EntityViewBuilderInterface
+   * @var EntityViewBuilderInterface
    */
   protected $viewBuilder;

@@ @@
   /**
    * The posts manager service.
    *
-   * @var \Drupal\opigno_social\Services\OpignoPostsManager
+   * @var OpignoPostsManager
    */
   protected $postsManager;

@@ @@
   /**
    * The CSRF token generator service.
    *
-   * @var \Drupal\Core\Access\CsrfTokenGenerator
+   * @var CsrfTokenGenerator
    */
   protected $csrfToken;

@@ @@
    * @param array $options
    *   The url options.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The protected url.
    */
   protected function createProtectedUrl(string $route, array $params = [], array $options = []): Url {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/opigno_social/src/Plugin/Block/CommentFormBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_social\Plugin\Block;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\EntityViewBuilderInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Block\BlockBase;
@@ @@
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;

@@ @@
   /**
    * The loaded current user.
    *
-   * @var \Drupal\Core\Entity\EntityInterface|null
+   * @var EntityInterface|null
    */
   protected $user = NULL;

@@ @@
   /**
    * The user view builder service.
    *
-   * @var \Drupal\Core\Entity\EntityViewBuilderInterface
+   * @var EntityViewBuilderInterface
    */
   protected $viewBuilder;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/opigno_social/src/Form/RemoveSocialEntitiesConfirmForm.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * RemoveConnectionsConfirmForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
    *
    * @param array $entities
    *   The list of loaded entities that should be removed.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage.
    */
   public function deleteEntities(array $entities, EntityStorageInterface $storage) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/opigno_social/src/Form/CreateSharePostForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The Opigno posts manager.
    *
-   * @var \Drupal\opigno_social\Services\OpignoPostsManager
+   * @var OpignoPostsManager
    */
   protected $postsManager;

@@ @@
   /**
    * The CSRF token generator service.
    *
-   * @var \Drupal\Core\Access\CsrfTokenGenerator
+   * @var CsrfTokenGenerator
    */
   protected $csrfToken;

@@ @@
   /**
    * CreateSharePostForm constructor.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\opigno_social\Services\OpignoPostsManager $posts_manager
+   * @param OpignoPostsManager $posts_manager
    *   The Opigno posts manager service.
-   * @param \Drupal\Core\Access\CsrfTokenGenerator $csrf_token
+   * @param CsrfTokenGenerator $csrf_token
    *   The CSRF token generator service.
    */
   public function __construct(RendererInterface $renderer, OpignoPostsManager $posts_manager, CsrfTokenGenerator $csrf_token) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/opigno_social/src/Form/CreatePostForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The CSRF token generator service.
    *
-   * @var \Drupal\Core\Access\CsrfTokenGenerator
+   * @var CsrfTokenGenerator
    */
   protected $csrfToken;

@@ @@
   /**
    * CreatePostForm constructor.
    *
-   * @param \Drupal\Core\Access\CsrfTokenGenerator $csrf_token
+   * @param CsrfTokenGenerator $csrf_token
    *   The CSRF token generator service.
    */
   public function __construct(CsrfTokenGenerator $csrf_token) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/opigno_social/src/Form/CreateCommentForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The CSRF token generator service.
    *
-   * @var \Drupal\Core\Access\CsrfTokenGenerator
+   * @var CsrfTokenGenerator
    */
   protected $csrfToken;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/opigno_social/src/Entity/UserInvitationInterface.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * Get invitation owner user.
    *
-   * @return \Drupal\user\UserInterface|null
+   * @return UserInterface|null
    *   The invitation owner user.
    */
   public function getOwner(): ?UserInterface;
@@ @@
   /**
    * Get the invitee user.
    *
-   * @return \Drupal\user\UserInterface|null
+   * @return UserInterface|null
    *   The invitee user.
    */
   public function getInvitee(): ?UserInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


17) modules/contrib/opigno_social/src/Entity/UserInvitation.php:67

    ---------- begin diff ----------
@@ @@
    * @param int $uid
    *   The user ID to load the user entity.
    *
-   * @return \Drupal\user\UserInterface|null
+   * @return UserInterface|null
    *   The invitation user.
    */
   private function getUser(int $uid): ?UserInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/opigno_social/src/Entity/OpignoPostInterface.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * Get the post author user.
    *
-   * @return \Drupal\user\UserInterface|null
+   * @return UserInterface|null
    *   The post author user.
    */
   public function getAuthor(): ?UserInterface;
@@ @@
   /**
    * Get the loaded attachment entity (opigno_module/group).
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The loaded attachment entity (NULL if there is no attachment).
    */
   public function getAttachmentEntity(): ?EntityInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


19) modules/contrib/opigno_social/src/Controller/UserConnectionsController.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * User connection manager service.
    *
-   * @var \Drupal\opigno_social\Services\UserConnectionManager
+   * @var UserConnectionManager
    */
   protected $connectionManager;

@@ @@
   /**
    * User entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface|null
+   * @var EntityStorageInterface|null
    */
   protected $userStorage = NULL;

@@ @@
   /**
    * User the invitation entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface|null
+   * @var EntityStorageInterface|null
    */
   protected $invitationStorage = NULL;

@@ @@
   /**
    * UserInvitationController constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\opigno_social\Services\UserConnectionManager $connection_manager
+   * @param UserConnectionManager $connection_manager
    *   The user connection manager service.
    */
   public function __construct(
@@ @@
    * @param int $invitee
    *   The invitee user ID.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Response object.
    */
   public function send(int $invitee): AjaxResponse {
@@ @@
   /**
    * Accept the user invitation.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    * @param int $owner
    *   Invitation owner user ID.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Response object.
    */
   public function accept(Request $request, int $owner = 0): AjaxResponse {
@@ @@
   /**
    * Decline the user invitation.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    * @param int $owner
    *   Invitation owner user ID.
@@ @@
    * @param int $invitee
    *   Invitee user ID.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Response object.
    */
   public function decline(Request $request, int $owner = 0, int $invitee = 0): AjaxResponse {
@@ @@
   /**
    * Add the reload command to the current request.
    *
-   * @param \Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    *   The response object.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    */
   private function reloadPage(AjaxResponse $response, Request $request): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/opigno_social/src/Controller/PostsController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_social\Controller;

+use Drupal\Core\Entity\EntityViewBuilderInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Ajax\AfterCommand;
@@ @@
   /**
    * The posts/comment manager service.
    *
-   * @var \Drupal\opigno_social\Services\OpignoPostsManager
+   * @var OpignoPostsManager
    */
   protected $postsManager;

@@ @@
   /**
    * The posts/comments storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface|null
+   * @var EntityStorageInterface|null
    */
   protected $storage = NULL;

@@ @@
   /**
    * The posts/comments view builder service.
    *
-   * @var \Drupal\Core\Entity\EntityViewBuilderInterface
+   * @var EntityViewBuilderInterface
    */
   protected $viewBuilder;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The Opigno like entity manager service.
    *
-   * @var \Drupal\opigno_like\Services\OpignoLikeManager
+   * @var OpignoLikeManager
    */
   protected $likeManager;

@@ @@
   /**
    * The route access service.
    *
-   * @var \Drupal\Core\Routing\AccessAwareRouterInterface
+   * @var AccessAwareRouterInterface
    */
   protected $router;

@@ @@
   /**
    * PostsController constructor.
    *
-   * @param \Drupal\opigno_social\Services\OpignoPostsManager $posts_manager
+   * @param OpignoPostsManager $posts_manager
    *   The posts/comment manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\opigno_like\Services\OpignoLikeManager $like_manager
+   * @param OpignoLikeManager $like_manager
    *   The Opigno like entity manager service.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder service.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match service.
-   * @param \Drupal\Core\Routing\AccessAwareRouterInterface $router
+   * @param AccessAwareRouterInterface $router
    *   The route access service.
    */
   public function __construct(
@@ @@
    * @param int $pid
    *   The post entity ID.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The response object.
    */
   public function getCommentForm(int $pid): AjaxResponse {
@@ @@
    * @param int $pid
    *   The post entity ID.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The response object.
    */
   public function hidePostComments(int $pid): AjaxResponse {
@@ @@
   /**
    * Comment the post with the given ID.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    * @param int $pid
    *   The post entity ID.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The response object.
    */
   public function createComment(Request $request, int $pid): AjaxResponse {
@@ @@
    * @param int $amount
    *   The number of comments to be gotten.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The response object.
    */
   public function getPostComments(int $pid, int $amount): AjaxResponse {
@@ @@
    * @param int $amount
    *   The number of comments to load.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The response object.
    */
   public function loadMoreComments(int $pid, int $from, int $amount): AjaxResponse {
@@ @@
   /**
    * Delete the post/comment with all its likes and comments.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request object.
    * @param int $pid
    *   The post ID to be deleted.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The response object.
    */
   public function deletePost(Request $request, int $pid): AjaxResponse {
@@ @@
   /**
    * Hide the given post for the user.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request object.
    * @param int $pid
    *   The post ID to be hidden.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The response object.
    */
   public function hidePost(Request $request, int $pid): AjaxResponse {
@@ @@
   /**
    * Pin/unpin the given post for the user.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request object.
    * @param int $pid
    *   The post ID to be pinned/unpinned.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The response object.
    */
   public function pinPost(Request $request, int $pid): AjaxResponse {
@@ @@
   /**
    * Check if the current page is a single post page.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
    * @return bool
@@ @@
   /**
    * Get the route name from the request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    *
    * @return string
@@ @@
   /**
    * Display the popup with the sharable post content (training/badge/cert).
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    * @param string $type
    *   The content type to be shared (training/badge/certificate).
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The response object.
    */
   public function getShareableContent(Request $request, string $type): AjaxResponse {
@@ @@
   /**
    * Open the popup for the post content sharing (training/badge/certificate).
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The response object.
    */
   public function sharePostContent(Request $request): AjaxResponse {
@@ @@
   /**
    * Create the post with the additional content (training/certificate/badge).
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The response object.
    */
   public function createPost(Request $request): AjaxResponse {
@@ @@
   /**
    * Check if new posts were created after the last social wall access.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The response object.
    */
   public function checkNewPosts(): AjaxResponse {
@@ @@
   /**
    * Display posts that were created after the last social wall access.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The response object.
    */
   public function displayNewPosts(): AjaxResponse {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/opigno_social/src/Access/SocialFeaturesAccessCheck.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_social\Access;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
@@ @@
   /**
    * SocialFeaturesAccessCheck constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
@@ @@
   /**
    * Checks the access.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check the access to.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in user's account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(Route $route, AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


22) modules/contrib/opigno_social/src/Access/ShareContentAccessCheck.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_social\Access;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Access\AccessResult;
@@ @@
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|null
+   * @var Request|null
    */
   protected $request;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * ShareContentAccessCheck constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(RequestStack $request_stack, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Checks the access.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check the access to.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in user's account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(Route $route, AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


23) modules/contrib/opigno_social/opigno_social.module:151

    ---------- begin diff ----------
@@ @@
  *
  * @param $form
  *   The form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state object.
  */
 function _opigno_social_features_submit(&$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


24) modules/contrib/opigno_social/opigno_social.install:71

    ---------- begin diff ----------
@@ @@
  */
 function opigno_social_update_9001() {
   // Import configs.
-  $config_path = drupal_get_path('module', 'opigno_social') . '/config/optional/';
+  $config_path = \Drupal::service('extension.list.module')->getPath('opigno_social') . '/config/optional/';
   $config_source = new FileStorage($config_path);
   \Drupal::service('config.installer')->installOptionalConfig($config_source);
 }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [OK] 24 files have been changed by Rector                                      

