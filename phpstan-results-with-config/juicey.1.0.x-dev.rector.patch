diff --git a/juicebox/src/Controller/JuiceboxXmlControllerBase.php b/juicebox/src/Controller/JuiceboxXmlControllerBase.php
index 55aef35..d471b79 100644
--- a/juicebox/src/Controller/JuiceboxXmlControllerBase.php
+++ b/juicebox/src/Controller/JuiceboxXmlControllerBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\juicebox\Controller;
 
+use Drupal\juicebox\JuiceboxGalleryInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\HttpKernel\HttpKernelInterface;
 use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
@@ -22,21 +23,21 @@ abstract class JuiceboxXmlControllerBase implements ContainerInjectionInterface
   /**
    * A Drupal configuration factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * A Symfony request object for the current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * The Symfony http kernel service.
    *
-   * @var \Symfony\Component\HttpKernel\HttpKernelInterface
+   * @var HttpKernelInterface
    */
   protected $httpKernel;
 
@@ -65,12 +66,12 @@ abstract class JuiceboxXmlControllerBase implements ContainerInjectionInterface
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The Drupal config factory that can be used to derive global Juicebox
    *   settings.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The Symfony request stack from which to extract the current request.
-   * @param \Symfony\Component\HttpKernel\HttpKernelInterface $http_kernel
+   * @param HttpKernelInterface $http_kernel
    *   The Symfony http kernel service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, RequestStack $request_stack, HttpKernelInterface $http_kernel) {
@@ -84,7 +85,7 @@ abstract class JuiceboxXmlControllerBase implements ContainerInjectionInterface
   /**
    * Common controller for the Juicebox XML.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   A Symfony response object containing the XML information.
    */
   public function xmlController() {
@@ -200,7 +201,7 @@ abstract class JuiceboxXmlControllerBase implements ContainerInjectionInterface
   /**
    * Get the Juicebox gallery object.
    *
-   * @return Drupal\juicebox\JuiceboxGalleryInterface
+   * @return JuiceboxGalleryInterface
    *   A Juicebox gallery object.
    */
   abstract protected function getGallery();
diff --git a/juicebox/src/Controller/JuiceboxXmlControllerField.php b/juicebox/src/Controller/JuiceboxXmlControllerField.php
index 3d54a26..50f1e1a 100644
--- a/juicebox/src/Controller/JuiceboxXmlControllerField.php
+++ b/juicebox/src/Controller/JuiceboxXmlControllerField.php
@@ -49,21 +49,21 @@ class JuiceboxXmlControllerField extends JuiceboxXmlControllerBase {
   /**
    * The loaded entity involved in this XML request.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;
 
   /**
    * A Drupal entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * A Drupal entity respository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
diff --git a/juicebox/src/Controller/JuiceboxXmlControllerViewsStyle.php b/juicebox/src/Controller/JuiceboxXmlControllerViewsStyle.php
index 78acd48..891ba57 100644
--- a/juicebox/src/Controller/JuiceboxXmlControllerViewsStyle.php
+++ b/juicebox/src/Controller/JuiceboxXmlControllerViewsStyle.php
@@ -28,7 +28,7 @@ class JuiceboxXmlControllerViewsStyle extends JuiceboxXmlControllerBase {
   /**
    * The loaded view involved in this XML request.
    *
-   * @var \Drupal\views\ViewExecutable
+   * @var ViewExecutable
    */
   protected $view;
 
diff --git a/juicebox/src/Form/SettingsForm.php b/juicebox/src/Form/SettingsForm.php
index acafe5a..46202d2 100644
--- a/juicebox/src/Form/SettingsForm.php
+++ b/juicebox/src/Form/SettingsForm.php
@@ -24,7 +24,7 @@ class SettingsForm extends ConfigFormBase {
   /**
    * Constructs a new SettingsForm object.
    *
-   * @param \Drupal\juicebox\JuiceboxFormatter $juicebox_formatter
+   * @param JuiceboxFormatter $juicebox_formatter
    *   The Juicebox formatter service.
    */
   public function __construct(JuiceboxFormatter $juicebox_formatter) {
diff --git a/juicebox/src/JuiceboxFormatter.php b/juicebox/src/JuiceboxFormatter.php
index 8b2b2cb..63a84b8 100644
--- a/juicebox/src/JuiceboxFormatter.php
+++ b/juicebox/src/JuiceboxFormatter.php
@@ -27,35 +27,35 @@ class JuiceboxFormatter implements JuiceboxFormatterInterface, TrustedCallbackIn
   /**
    * A Drupal configuration factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected ConfigFactoryInterface $configFactory;
 
   /**
    * A Drupal URL generator service.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected UrlGeneratorInterface $urlGenerator;
 
   /**
    * A Drupal module manager service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected ModuleHandlerInterface $moduleManager;
 
   /**
    * A Drupal current path service.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected CurrentPathStack $currentPathStack;
 
   /**
    * A Symfony request object for the current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected Request $request;
 
@@ -69,36 +69,36 @@ class JuiceboxFormatter implements JuiceboxFormatterInterface, TrustedCallbackIn
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected MessengerInterface $messenger;
 
   /**
    * A Drupal entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The Drupal config factory that can be used to derive global Juicebox
    *   settings.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   A string translation service.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   A URL generator service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_manager
+   * @param ModuleHandlerInterface $module_manager
    *   A module manager service.
-   * @param \Drupal\Core\Path\CurrentPathStack $currentPathStack
+   * @param CurrentPathStack $currentPathStack
    *   A current path service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The Symfony request stack from which to extract the current request.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger_interface
+   * @param MessengerInterface $messenger_interface
    *   The messenger interface.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(ConfigFactoryInterface $config_factory,
@@ -344,7 +344,7 @@ class JuiceboxFormatter implements JuiceboxFormatterInterface, TrustedCallbackIn
    * If so it styles the output as a mimetype image icon representing the file
    * type. Otherwise, the item is styled normally with the passed image style.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   A file entity containing the image data to append Juicebox styled image
    *   data to.
    * @param string $style
@@ -363,23 +363,23 @@ class JuiceboxFormatter implements JuiceboxFormatterInterface, TrustedCallbackIn
     $image_data = [];
     $image_data['juicebox_compatible'] = TRUE;
     // Set the normal, unstyled, url for reference.
-    $image_data['unstyled_src'] = file_create_url($file->getFileUri());
+    $image_data['unstyled_src'] = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
     // Check compatibility if configured and if the library info contains
     // mimetype compatibility information.
     if ($check_compatible && !empty($library['compatible_mimetypes']) && !in_array($mimetype, $library['compatible_mimetypes'])) {
       // If the item is not compatible, find the substitute mimetype icon.
       $image_data['juicebox_compatible'] = FALSE;
-      $icon_dir = drupal_get_path('module', 'juicebox') . '/images/mimetypes';
+      $icon_dir = \Drupal::service('extension.list.module')->getPath('juicebox') . '/images/mimetypes';
       // We only have icons for each major type, so simplify accordingly.
       // file_icon_class() could also be useful here but would require
       // supporting icons for more package types.
       $type_parts = explode('/', $mimetype);
       $icon_path = $icon_dir . '/' . reset($type_parts) . '.png';
       if (file_exists($icon_path)) {
-        $image_data['imageURL'] = file_create_url($icon_path);
+        $image_data['imageURL'] = \Drupal::service('file_url_generator')->generateAbsoluteString($icon_path);
       }
       else {
-        $image_data['imageURL'] = file_create_url($icon_dir . '/general.png');
+        $image_data['imageURL'] = \Drupal::service('file_url_generator')->generateAbsoluteString($icon_dir . '/general.png');
       }
     }
     // If the item is compatible, style it.
diff --git a/juicebox/src/JuiceboxFormatterInterface.php b/juicebox/src/JuiceboxFormatterInterface.php
index e28f508..cb96496 100644
--- a/juicebox/src/JuiceboxFormatterInterface.php
+++ b/juicebox/src/JuiceboxFormatterInterface.php
@@ -18,7 +18,7 @@ interface JuiceboxFormatterInterface {
    *   URL for the gallery XML, but no formal structure is strictly required.
    *   This information should uniquely identify the gallery.
    *
-   * @return Drupal\juicebox\JuiceboxGalleryInterface
+   * @return JuiceboxGalleryInterface
    *   An initialized Juicebox gallery object.
    */
   public function newGallery(array $id_args);
@@ -56,7 +56,7 @@ interface JuiceboxFormatterInterface {
    *
    * Task that should take place whenever gallery of any type/source is built.
    *
-   * @param Drupal\juicebox\JuiceboxGalleryInterface $gallery
+   * @param JuiceboxGalleryInterface $gallery
    *   An initialized Juicebox gallery object.
    * @param array $settings
    *   An associative array of common gallery-specific settings.
@@ -72,11 +72,11 @@ interface JuiceboxFormatterInterface {
    * Extract in an array structure that can be used when adding a new
    * image to the gallery.
    *
-   * @param Drupal\file\FileInterface $image_file
+   * @param FileInterface $image_file
    *   A file entity representing the main image.
    * @param string $image_style
    *   The Drupal image style to apply to the main image.
-   * @param Drupal\file\FileInterface $thumb_file
+   * @param FileInterface $thumb_file
    *   A file entity representing the thumbnail image.
    * @param string $thumb_style
    *   The Drupal image style to apply to the thumbnail image.
@@ -107,7 +107,7 @@ interface JuiceboxFormatterInterface {
    * renderEmbed(). It also uses the Drupal theme system as opposed to just
    * returning direct markup. Within Drupal this method should always be used.
    *
-   * @param Drupal\juicebox\JuiceboxGalleryInterface $gallery
+   * @param JuiceboxGalleryInterface $gallery
    *   An fully populated Juicebox gallery object.
    * @param array $settings
    *   An associative array of gallery-specific settings.
diff --git a/juicebox/src/Plugin/Derivative/JuiceboxConfFieldContextualLinks.php b/juicebox/src/Plugin/Derivative/JuiceboxConfFieldContextualLinks.php
index b6f250a..67d9ea0 100644
--- a/juicebox/src/Plugin/Derivative/JuiceboxConfFieldContextualLinks.php
+++ b/juicebox/src/Plugin/Derivative/JuiceboxConfFieldContextualLinks.php
@@ -19,16 +19,16 @@ class JuiceboxConfFieldContextualLinks extends DeriverBase implements ContainerD
   /**
    * A Drupal entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   A string translation service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation) {
diff --git a/juicebox/src/Plugin/Field/FieldFormatter/JuiceboxFieldFormatter.php b/juicebox/src/Plugin/Field/FieldFormatter/JuiceboxFieldFormatter.php
index 56a2079..35fd5e9 100644
--- a/juicebox/src/Plugin/Field/FieldFormatter/JuiceboxFieldFormatter.php
+++ b/juicebox/src/Plugin/Field/FieldFormatter/JuiceboxFieldFormatter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\juicebox\Plugin\Field\FieldFormatter;
 
+use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\HttpFoundation\RequestStack;
 use Drupal\Core\Field\FieldItemListInterface;
@@ -36,42 +37,42 @@ class JuiceboxFieldFormatter extends FormatterBase implements ContainerFactoryPl
   /**
    * A Juicebox formatter service.
    *
-   * @var \Drupal\juicebox\JuiceboxFormatterInterface
+   * @var JuiceboxFormatterInterface
    */
   protected $juicebox;
 
   /**
    * A Drupal entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * A Drupal link generator service.
    *
-   * @var \Drupal\Core\Utility\LinkGeneratorInterface
+   * @var LinkGeneratorInterface
    */
   protected $linkGenerator;
 
   /**
    * A Symfony request object for the current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The entity_display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepository
+   * @var EntityDisplayRepository
    */
   protected $entityDisplayRepo;
 
@@ -276,9 +277,9 @@ class JuiceboxFieldFormatter extends FormatterBase implements ContainerFactoryPl
   /**
    * Utility to build a Juicebox gallery based on field formatter data.
    *
-   * @param Drupal\juicebox\JuiceboxGalleryInterface $gallery
+   * @param JuiceboxGalleryInterface $gallery
    *   An initialized Juicebox gallery object.
-   * @param Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   A list of field items that contain file data for the gallery.
    */
   protected function buildGallery(JuiceboxGalleryInterface $gallery, FieldItemListInterface $items) {
@@ -409,7 +410,7 @@ class JuiceboxFieldFormatter extends FormatterBase implements ContainerFactoryPl
    * string of text here, as opposed to a render array, beacuse this output must
    * be valid for use in both HTML and XML.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   A field item implementing FieldItemInterface.
    * @param string $source
    *   The source property that contains the text we want to extract. This
diff --git a/juicebox/src/Plugin/views/style/JuiceboxDisplayStyle.php b/juicebox/src/Plugin/views/style/JuiceboxDisplayStyle.php
index e8f1fd4..a6b68c6 100644
--- a/juicebox/src/Plugin/views/style/JuiceboxDisplayStyle.php
+++ b/juicebox/src/Plugin/views/style/JuiceboxDisplayStyle.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\juicebox\Plugin\views\style;
 
+use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\HttpFoundation\RequestStack;
 use Drupal\views\Plugin\views\style\StylePluginBase;
@@ -32,35 +33,35 @@ class JuiceboxDisplayStyle extends StylePluginBase {
   /**
    * A Juicebox formatter service.
    *
-   * @var \Drupal\juicebox\JuiceboxFormatterInterface
+   * @var JuiceboxFormatterInterface
    */
   protected $juicebox;
 
   /**
    * A Drupal entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * A Drupal entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * A Drupal string translation service.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface
+   * @var TranslationInterface
    */
   protected $stringTranslation;
 
   /**
    * A Symfony request object for the current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
@@ -270,7 +271,7 @@ class JuiceboxDisplayStyle extends StylePluginBase {
   /**
    * Build the gallery based on loaded Drupal views data.
    *
-   * @param Drupal\juicebox\JuiceboxGalleryInterface $gallery
+   * @param JuiceboxGalleryInterface $gallery
    *   An initialized Juicebox gallery object.
    */
   protected function buildGallery(JuiceboxGalleryInterface $gallery) {
diff --git a/juicebox/tests/src/Functional/JuiceboxConfCase.php b/juicebox/tests/src/Functional/JuiceboxConfCase.php
index d52cc56..6c23776 100644
--- a/juicebox/tests/src/Functional/JuiceboxConfCase.php
+++ b/juicebox/tests/src/Functional/JuiceboxConfCase.php
@@ -151,7 +151,7 @@ namespace Drupal\Tests\juicebox\Functional {
       // Get the urls to the main image with and without "large" styling.
       $node = $this->node;
       $uri = File::load($node->{$this->instFieldName}[0]->target_id)->getFileUri();
-      $test_image_url = file_create_url($uri);
+      $test_image_url = \Drupal::service('file_url_generator')->generateAbsoluteString($uri);
       $test_image_url_formatted = \Drupal::entityTypeManager()->getStorage('image_style')->load('juicebox_medium')->buildUrl($uri);
       // Check control case without custom configuration.
       $this->drupalGet('juicebox/xml/field/node/' . $node->id() . '/' . $this->instFieldName . '/full');
diff --git a/juicebox/tests/src/Functional/JuiceboxFieldFormatterCase.php b/juicebox/tests/src/Functional/JuiceboxFieldFormatterCase.php
index f965805..ed81a3f 100644
--- a/juicebox/tests/src/Functional/JuiceboxFieldFormatterCase.php
+++ b/juicebox/tests/src/Functional/JuiceboxFieldFormatterCase.php
@@ -89,12 +89,12 @@ class JuiceboxFieldFormatterCase extends JuiceboxCaseTestBase {
     $this->assertSession('Your settings have been saved. Gallery configuration changes saved.');
     // Get the urls to the image and thumb derivatives expected.
     $uri = File::load($node->{$this->instFieldName}[0]->target_id)->getFileUri();
-    $test_formatted_image_url = file_create_url($uri);
+    $test_formatted_image_url = \Drupal::service('file_url_generator')->generateAbsoluteString($uri);
     $test_formatted_thumb_url = \Drupal::entityTypeManager()->getStorage('image_style')->load('thumbnail')->buildUrl($uri);
     // Check for correct embed markup as anon user.
     $this->drupalLogout();
     $this->drupalGet('node/' . $node->id());
-    $this->assertSession(Html::escape(file_url_transform_relative($test_formatted_image_url)) . ' Test styled image found in embed code');
+    $this->assertSession(Html::escape(\Drupal::service('file_url_generator')->transformRelative($test_formatted_image_url)) . ' Test styled image found in embed code');
     // Check for correct XML.
     $this->drupalGet('juicebox/xml/field/node/' . $node->id() . '/' . $this->instFieldName . '/full');
     $this->assertSession()->responseContains('imageURL="' . Html::escape($test_formatted_image_url));
diff --git a/juicebox/tests/src/Functional/JuiceboxViewsCase.php b/juicebox/tests/src/Functional/JuiceboxViewsCase.php
index b791412..649f067 100644
--- a/juicebox/tests/src/Functional/JuiceboxViewsCase.php
+++ b/juicebox/tests/src/Functional/JuiceboxViewsCase.php
@@ -104,7 +104,7 @@ class JuiceboxViewsCase extends JuiceboxCaseTestBase {
     $this->drupalGet('juicebox-views-test-advanced');
     $this->assertSession()->responseContains(trim(json_encode(['configUrl' => $xml_url]), '{}"'));
     $this->assertSession()->responseContains('juicebox-views-test--page-2');
-    $this->assertSession()->responseContains(Html::escape(file_url_transform_relative($test_image_url)));
+    $this->assertSession()->responseContains(Html::escape(\Drupal::service('file_url_generator')->transformRelative($test_image_url)));
     // Check for correct XML.
     $this->drupalGet($xml_path);
     $this->assertSession()->responseContains('<?xml version="1.0" encoding="UTF-8"?>');
