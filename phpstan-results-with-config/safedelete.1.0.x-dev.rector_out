modules/contrib/safedelete/safedelete.module
modules/contrib/safedelete/src/AdminHelper.php
modules/contrib/safedelete/src/Controller/SearchingOrphanedPageController.php
modules/contrib/safedelete/src/Form/SafedeleteSettingsForm.php

3 files with changes
====================

1) modules/contrib/safedelete/src/Controller/SearchingOrphanedPageController.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * SearchingOrphanedPageController constructor.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
    */
   public function __construct(Connection $database) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/safedelete/src/AdminHelper.php:0

    ---------- begin diff ----------
@@ @@
 <?php

 namespace Drupal\safedelete;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\node\Entity\NodeType;
@@ @@
   /**
    * Prepares a new revision of a given entity, if applicable.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   An entity.
-   * @param string|\Drupal\Core\StringTranslation\TranslatableMarkup $message
+   * @param string|TranslatableMarkup $message
    *   A revision log message to set.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The moderation state for the given entity.
    */
   static public function prepareNewRevision(EntityInterface $entity, $message, $current_uid) {
@@ @@
                                   'reporteddate' => $reporteddate);
         $json = json_encode($arrayforjsonobj, JSON_PRETTY_PRINT|JSON_UNESCAPED_SLASHES|JSON_UNESCAPED_UNICODE);
         $fp = $filedirectory . $nid . '.json';
-        $file = file_save_data($json, $fp, FileSystemInterface::EXISTS_REPLACE);
+        $file = \Drupal::service('file.repository')->writeData($json, $fp, FileSystemInterface::EXISTS_REPLACE);
       }
     } // end of search the orphaned nodes
     return;
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/safedelete/safedelete.module:25

    ---------- begin diff ----------
@@ @@
 /**
  * Implements hook_ENTITY_TYPE_insert().
  */
-function safedelete_node_insert(Drupal\Core\Entity\EntityInterface $entity) {
+function safedelete_node_insert(EntityInterface $entity) {
   $entity_id = $entity->id();
   drupal_register_shutdown_function('_handleInsertFileUsage_PageCreation',$entity, $entity_id);
 }
@@ @@
  * Implements hook_ENTITY_delete().
  * Cleanup file_usage when we delete this node.
  */
-function safedelete_entity_delete(Drupal\Core\Entity\EntityInterface $entity) {
+function safedelete_entity_delete(EntityInterface $entity) {
   // Exit early if possible.
   if ($entity->getEntityTypeId() != 'node') {
     return;
@@ @@
 /**
  * Implements hook_ENTITY_TYPE_presave().
  */
-function safedelete_node_presave(Drupal\Core\Entity\EntityInterface $entity) {
+function safedelete_node_presave(EntityInterface $entity) {
   // Exit early if possible.
   if ($entity->getEntityTypeId() != 'node') {
     return;
@@ @@
               else {
                 //new media reference
                 //Assumption: only add the file once
-                $fentity = \Drupal\file\Entity\File::load($fileid);
+                $fentity = File::load($fileid);
                 $file_usage = \Drupal::service('file.usage');
                 $file_usage->add($fentity, 'editor', 'node', $entity_id);
               }
@@ @@
                 if (!(array_key_exists ( $fileid , $filearray))) {
                   //Assumption: only remove the file once
                   //ToDo: Change the logic as a loop with count- $refcount
-                  $fentity = \Drupal\file\Entity\File::load($fileid);
+                  $fentity = File::load($fileid);
                   $file_usage = \Drupal::service('file.usage');
                   $file_usage->delete($fentity, 'editor', 'node', $entity_id);
                 }
@@ @@
             if (count($dbfilearray) > 0) {
               // check if the media object(s) are total removed from the content
               foreach ($dbfilearray as $fileid => $refcount) {
-                $fentity = \Drupal\file\Entity\File::load($fileid);
+                $fentity = File::load($fileid);
                 $file_usage = \Drupal::service('file.usage');
                 $file_usage->delete($fentity, 'editor', 'node', $entity_id);
               }
@@ @@
           $nid = $entity->id();
           AdminHelper::checkNodeReferencesMessage($nid, $bundle, $show_button, $markup, 'archived', $limit = 20);
           if (!$show_button) {
-            $markup = \Drupal\Core\Render\Markup::create($markup);
+            $markup = Markup::create($markup);
             $form['description']['#markup'] = $markup;
             $form['description']['#weight'] = '-99';
             $error_message = t('Unable to archive due to other content linking to this content.  See warning message above');
@@ @@

         if ( count($filearray) > 0 ) {
           foreach ($filearray as $fileid => $refcount) {
-            $fentity = \Drupal\file\Entity\File::load($fileid);
+            $fentity = File::load($fileid);
             $file_usage = \Drupal::service('file.usage');
             $file_usage->add($fentity, 'editor', 'node', $entity_id);
           }
@@ @@
                                'reporteddate' => $reporteddate);
      $json = json_encode($arrayforjsonobj, JSON_PRETTY_PRINT|JSON_UNESCAPED_SLASHES|JSON_UNESCAPED_UNICODE);
      $fp = $filedirectory . $nid . '.json';
-     $file = file_save_data($json, $fp, FileSystemInterface::EXISTS_REPLACE);
+     $file = \Drupal::service('file.repository')->writeData($json, $fp, FileSystemInterface::EXISTS_REPLACE);
    }
    // Optional message displayed under the progressbar.
    $context['message'] = t('Running Batch "@id" @details',
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector


 [OK] 3 files have been changed by Rector                                       

