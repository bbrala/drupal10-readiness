modules/contrib/permissionspolicy/src/Event/PolicyAlterEvent.php
modules/contrib/permissionspolicy/src/EventSubscriber/ResponseSubscriber.php
modules/contrib/permissionspolicy/src/Form/PermissionsPolicySettingsForm.php
modules/contrib/permissionspolicy/src/PermissionsPolicy.php
modules/contrib/permissionspolicy/src/PermissionsPolicyEvents.php
modules/contrib/permissionspolicy/tests/src/Unit/EventSubscriber/ResponseSubscriberTest.php
modules/contrib/permissionspolicy/tests/src/Unit/PermissionsPolicyTest.php

3 files with changes
====================

1) modules/contrib/permissionspolicy/tests/src/Unit/EventSubscriber/ResponseSubscriberTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\permissionspolicy\Unit\EventSubscriber;

+use PHPUnit\Framework\MockObject\MockObject;
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
+use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Render\HtmlResponse;
 use Drupal\Tests\UnitTestCase;
@@ @@
 use Drupal\permissionspolicy\EventSubscriber\ResponseSubscriber;
 use Symfony\Component\EventDispatcher\EventDispatcher;
 use Symfony\Component\HttpFoundation\ResponseHeaderBag;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * Mock HTTP Response.
    *
-   * @var \Drupal\Core\Render\HtmlResponse|\PHPUnit_Framework_MockObject_MockObject
+   * @var HtmlResponse|MockObject
    */
   protected $response;

@@ @@
   /**
    * Mock Response Event.
    *
-   * @var \Symfony\Component\HttpKernel\Event\FilterResponseEvent|\PHPUnit_Framework_MockObject_MockObject
+   * @var ResponseEvent|MockObject
    */
   protected $event;

@@ @@
   /**
    * The Event Dispatcher Service.
    *
-   * @var \PHPUnit\Framework\MockObject\MockObject|\Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var MockObject|EventDispatcherInterface
    */
   private $eventDispatcher;

@@ @@
   public function setUp(): void {
     parent::setUp();

-    $this->response = $this->getMockBuilder(HtmlResponse::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->response->headers = $this->getMockBuilder(ResponseHeaderBag::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-    $responseCacheableMetadata = $this->getMockBuilder(CacheableMetadata::class)
-      ->getMock();
+    $this->response = $this->createMock(HtmlResponse::class);
+    $this->response->headers = $this->createMock(ResponseHeaderBag::class);
+    $responseCacheableMetadata = $this->createMock(CacheableMetadata::class);
     $this->response->method('getCacheableMetadata')
       ->willReturn($responseCacheableMetadata);

-    /** @var \Symfony\Component\HttpKernel\Event\FilterResponseEvent|\PHPUnit_Framework_MockObject_MockObject $event */
-    $this->event = $this->getMockBuilder(FilterResponseEvent::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    /** @var ResponseEvent|MockObject $event */
+    $this->event = $this->createMock(ResponseEvent::class);
     $this->event->expects($this->any())
       ->method('isMasterRequest')
       ->willReturn(TRUE);
@@ @@
       ->method('getResponse')
       ->willReturn($this->response);

-    $this->eventDispatcher = $this->getMockBuilder(EventDispatcher::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->eventDispatcher = $this->createMock(EventDispatcher::class);
   }

   /**
@@ @@
    * @covers ::onKernelResponse
    */
   public function testEmptyPolicy() {
-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var ConfigFactoryInterface|MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'permissionspolicy.settings' => [
         'enforce' => [
@@ @@
    */
   public function testDisabledPolicy() {

-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var ConfigFactoryInterface|MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'permissionspolicy.settings' => [
         'enforce' => [
@@ @@
    */
   public function testSingleDirective() {

-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var ConfigFactoryInterface|MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'permissionspolicy.settings' => [
         'enforce' => [
@@ @@
    */
   public function testMultipleDirectives() {

-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var ConfigFactoryInterface|MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'permissionspolicy.settings' => [
         'enforce' => [
@@ @@
    */
   public function testOverrideWhenEmpty() {

-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var ConfigFactoryInterface|MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'permissionspolicy.settings' => [
         'enforce' => [
@@ @@
    */
   public function testNoOverrideWhenDisabled() {

-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var ConfigFactoryInterface|MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'permissionspolicy.settings' => [
         'enforce' => [
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/permissionspolicy/src/EventSubscriber/ResponseSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\permissionspolicy\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Cache\CacheableResponseInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\permissionspolicy\Event\PolicyAlterEvent;
@@ @@
 use Drupal\permissionspolicy\PermissionsPolicyEvents;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * The Config Factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The Event Dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Constructs a new ResponseSubscriber object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Config Factory service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   Event Dispatcher service.
    */
   public function __construct(
@@ @@
   /**
    * Add Permissions-Policy header to response.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The Response event.
    */
-  public function onKernelResponse(FilterResponseEvent $event) {
+  public function onKernelResponse(ResponseEvent $event) {
     if (!$event->isMasterRequest()) {
       return;
     }
@@ @@
       }

       $this->eventDispatcher->dispatch(
-        PermissionsPolicyEvents::POLICY_ALTER,
-        new PolicyAlterEvent($policy, $response)
+        new PolicyAlterEvent($policy, $response),
+        PermissionsPolicyEvents::POLICY_ALTER
       );

       if (($headerValue = $policy->getHeaderValue())) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/permissionspolicy/src/Event/PolicyAlterEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\permissionspolicy\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\permissionspolicy\PermissionsPolicy;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\HttpFoundation\Response;

 /**
@@ @@
   /**
    * A Permissions policy.
    *
-   * @var \Drupal\permissionspolicy\PermissionsPolicy
+   * @var PermissionsPolicy
    */
   private $policy;

@@ @@
   /**
    * The Response the policy is being applied to.
    *
-   * @var \Symfony\Component\HttpFoundation\Response
+   * @var Response
    */
   private $response;

@@ @@
   /**
    * Create a new PolicyAlterEvent instance.
    *
-   * @param \Drupal\permissionspolicy\PermissionsPolicy $policy
+   * @param PermissionsPolicy $policy
    *   A Permissions policy.
-   * @param \Symfony\Component\HttpFoundation\Response $response
+   * @param Response $response
    *   The Response the policy is being applied to.
    */
   public function __construct(PermissionsPolicy $policy, Response $response) {
@@ @@
   /**
    * Retrieve the defined Permissions policy.
    *
-   * @return \Drupal\permissionspolicy\PermissionsPolicy
+   * @return PermissionsPolicy
    *   The Permissions policy.
    */
   public function getPolicy(): PermissionsPolicy {
@@ @@
   /**
    * Retrieve the Response the policy is applied to.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The Response the policy is applied to.
    */
   public function getResponse(): Response {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 3 files have been changed by Rector                                       

