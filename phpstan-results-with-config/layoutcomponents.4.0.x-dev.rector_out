modules/contrib/layoutcomponents/layoutcomponents.install
modules/contrib/layoutcomponents/layoutcomponents.module
modules/contrib/layoutcomponents/layoutcomponents.theme.inc
modules/contrib/layoutcomponents/modules/lc_commands/src/Commands/LcCommands.php
modules/contrib/layoutcomponents/modules/lc_simple_accordion/lc_simple_accordion.module
modules/contrib/layoutcomponents/modules/lc_simple_button/lc_simple_button.module
modules/contrib/layoutcomponents/modules/lc_simple_card/lc_simple_card.module
modules/contrib/layoutcomponents/modules/lc_simple_card_with_float_text/lc_simple_card_with_float_text.module
modules/contrib/layoutcomponents/modules/lc_simple_countdown/lc_simple_countdown.module
modules/contrib/layoutcomponents/modules/lc_simple_iframe/lc_simple_iframe.module
modules/contrib/layoutcomponents/modules/lc_simple_image/lc_simple_image.module
modules/contrib/layoutcomponents/modules/lc_simple_image_two_text_columns/lc_simple_image_two_text_columns.module
modules/contrib/layoutcomponents/modules/lc_simple_image_with_hover_text/lc_simple_image_with_hover_text.module
modules/contrib/layoutcomponents/modules/lc_simple_image_with_top_float_text/lc_simple_image_with_top_float_text.module
modules/contrib/layoutcomponents/modules/lc_simple_inline_images/lc_simple_inline_images.module
modules/contrib/layoutcomponents/modules/lc_simple_reference_field/lc_simple_reference_field.module
modules/contrib/layoutcomponents/modules/lc_simple_social_links/lc_simple_social_links.module
modules/contrib/layoutcomponents/modules/lc_simple_text/lc_simple_text.module
modules/contrib/layoutcomponents/modules/lc_simple_text_with_hover_image/lc_simple_text_with_hover_image.module
modules/contrib/layoutcomponents/modules/lc_simple_timeline/lc_simple_timeline.module
modules/contrib/layoutcomponents/modules/lc_simple_title/lc_simple_title.module
modules/contrib/layoutcomponents/modules/lc_simple_video/lc_simple_video.module
modules/contrib/layoutcomponents/modules/lc_simple_view_carousel/lc_simple_view_carousel.module
modules/contrib/layoutcomponents/modules/lc_slick/lc_slick.module
modules/contrib/layoutcomponents/modules/sliderwidget/sliderwidget.module
modules/contrib/layoutcomponents/modules/sliderwidget/src/Element/Slider.php
modules/contrib/layoutcomponents/modules/sliderwidget/src/Plugin/Field/FieldWidget/SliderUIFieldWidget.php
modules/contrib/layoutcomponents/modules/sliderwidget/tests/src/Functional/LoadTest.php
modules/contrib/layoutcomponents/src/Access/LcAccessHelperTrait.php
modules/contrib/layoutcomponents/src/Api/Checkbox.php
modules/contrib/layoutcomponents/src/Api/Color.php
modules/contrib/layoutcomponents/src/Api/Component.php
modules/contrib/layoutcomponents/src/Api/General.php
modules/contrib/layoutcomponents/src/Api/Media.php
modules/contrib/layoutcomponents/src/Api/Select.php
modules/contrib/layoutcomponents/src/Api/Slider.php
modules/contrib/layoutcomponents/src/Api/Text.php
modules/contrib/layoutcomponents/src/Controller/LcChooseBlockController.php
modules/contrib/layoutcomponents/src/Controller/LcChooseSectionController.php
modules/contrib/layoutcomponents/src/Controller/LcClipboardController.php
modules/contrib/layoutcomponents/src/Controller/LcInlineMedia.php
modules/contrib/layoutcomponents/src/Controller/LcSectionTypeSelectionController.php
modules/contrib/layoutcomponents/src/Element/LcColorField.php
modules/contrib/layoutcomponents/src/Element/LcElement.php
modules/contrib/layoutcomponents/src/Entity/LcEntityViewDisplay.php
modules/contrib/layoutcomponents/src/Event/LcPreprocessLayoutEvent.php
modules/contrib/layoutcomponents/src/Form/LcAddBlockForm.php
modules/contrib/layoutcomponents/src/Form/LcColorsSettings.php
modules/contrib/layoutcomponents/src/Form/LcColumnSettings.php
modules/contrib/layoutcomponents/src/Form/LcConfigureSection.php
modules/contrib/layoutcomponents/src/Form/LcCopy.php
modules/contrib/layoutcomponents/src/Form/LcCopyBlock.php
modules/contrib/layoutcomponents/src/Form/LcCopyColumn.php
modules/contrib/layoutcomponents/src/Form/LcCopyRemove.php
modules/contrib/layoutcomponents/src/Form/LcCopySection.php
modules/contrib/layoutcomponents/src/Form/LcInterfaceSettings.php
modules/contrib/layoutcomponents/src/Form/LcMoveSections.php
modules/contrib/layoutcomponents/src/Form/LcRemoveBlock.php
modules/contrib/layoutcomponents/src/Form/LcRemoveSection.php
modules/contrib/layoutcomponents/src/Form/LcSectionSettings.php
modules/contrib/layoutcomponents/src/Form/LcSettings.php
modules/contrib/layoutcomponents/src/Form/LcUpdateBlockForm.php
modules/contrib/layoutcomponents/src/Form/LcUpdateColumn.php
modules/contrib/layoutcomponents/src/LcDialogHelperTrait.php
modules/contrib/layoutcomponents/src/LcDisplayHelperTrait.php
modules/contrib/layoutcomponents/src/LcElementInfoManager.php
modules/contrib/layoutcomponents/src/LcEntity.php
modules/contrib/layoutcomponents/src/LcLayoutRender.php
modules/contrib/layoutcomponents/src/LcLayoutsManager.php
modules/contrib/layoutcomponents/src/LcPage.php
modules/contrib/layoutcomponents/src/LcPermissions.php
modules/contrib/layoutcomponents/src/LcSectionManager.php
modules/contrib/layoutcomponents/src/LcTheme.php
modules/contrib/layoutcomponents/src/LcUpdateManager.php
modules/contrib/layoutcomponents/src/Plugin/Field/FieldFormatter/LcFieldReferenceFormatter.php
modules/contrib/layoutcomponents/src/Plugin/Field/FieldType/LcFieldReferenceItem.php
modules/contrib/layoutcomponents/src/Plugin/Field/FieldWidget/LcFieldReferenceWidget.php
modules/contrib/layoutcomponents/src/Plugin/Layout/LcBase.php
modules/contrib/layoutcomponents/src/Routing/LcRouteSubscriber.php

64 files with changes
=====================

1) modules/contrib/layoutcomponents/src/Plugin/Layout/LcBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layoutcomponents\Plugin\Layout;

+use Drupal\Core\Config\Config;
+use Drupal\layout_builder\SectionComponent;
+use Drupal\Core\Form\FormState;
+use Drupal\layoutcomponents\Form\LcUpdateColumn;
+use Drupal\layoutcomponents\Form\LcConfigureSection;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Form\SubformStateInterface;
 use Drupal\Core\Layout\LayoutDefault;
@@ @@
   /**
    * Layoutcomponents manager.
    *
-   * @var \Drupal\layoutcomponents\LcLayoutsManager
+   * @var LcLayoutsManager
    */
   protected $manager;

@@ @@
   /**
    * Config factory object.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
   /**
    * Layoutcomponents manager.
    *
-   * @var \Drupal\layoutcomponents\Api\Text
+   * @var Text
    */
   protected $lcApiText;

@@ @@
   /**
    * Layoutcomponents manager.
    *
-   * @var \Drupal\layoutcomponents\Api\Color
+   * @var Color
    */
   protected $lcApiColor;

@@ @@
   /**
    * Layoutcomponents manager.
    *
-   * @var \Drupal\layoutcomponents\Api\Select
+   * @var Select
    */
   protected $lcApiSelect;

@@ @@
   /**
    * Layoutcomponents manager.
    *
-   * @var \Drupal\layoutcomponents\Api\Slider
+   * @var Slider
    */
   protected $lcApiSlider;

@@ @@
   /**
    * Layoutcomponents manager.
    *
-   * @var \Drupal\layoutcomponents\Api\Checkbox
+   * @var Checkbox
    */
   protected $lcApiCheckbox;

@@ @@
   /**
    * Layoutcomponents manager.
    *
-   * @var \Drupal\layoutcomponents\Api\Media
+   * @var Media
    */
   protected $lcApiMedia;

@@ @@
    *   Default region array.
    */
   protected function getRegionDefaults() {
-    /** @var \Drupal\Core\Config\Config $lc */
+    /** @var Config $lc */
     $lc = \Drupal::getContainer()->get('config.factory')->getEditable('layoutcomponents.column');

     return [
@@ @@
   public function defaultConfiguration() {
     $configuration = parent::defaultConfiguration();

-    /** @var \Drupal\Core\Config\Config $lc */
+    /** @var Config $lc */
     $lc = \Drupal::getContainer()->get('config.factory')->getEditable('layoutcomponents.section');

     $configuration += [
@@ @@
   /**
    * Provides list of region components.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   FormState object.
    * @param string $region
    *   Current region.
    *
-   * @return array|\Drupal\layout_builder\SectionComponent[]
+   * @return array|SectionComponent[]
    *   List of region component.
    */
   private function getComponents(FormStateInterface $form_state, string $region) {
-    /** @var \Drupal\Core\Form\FormState $complete_form_state */
+    /** @var FormState $complete_form_state */
     $complete_form_state = $form_state instanceof SubformStateInterface ? $form_state->getCompleteFormState() : $form_state;
-    /** @var \Drupal\layoutcomponents\Form\LcUpdateColumn $callback_object */
+    /** @var LcUpdateColumn $callback_object */
     $callback_object = $complete_form_state->getBuildInfo()['callback_object'];
     $section_storage = $callback_object->getSectionStorage();
     $build_info = $complete_form_state->getBuildInfo();
@@ @@
    *
    * @param array $form
    *   The complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The FormStateInterface object.
    * @param string $region
    *   The region.
@@ @@
    *
    * @param array $form
    *   The complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The FormStateInterface object.
    */
   public function setAdministrativeTitle(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The FormStateInterface object.
    */
   public function setAdminsitrativeSection(array &$form, FormStateInterface $form_state) {
     $is_default_storage = FALSE;

-    /** @var \Drupal\Core\Form\FormState $complete_form_state */
+    /** @var FormState $complete_form_state */
     $complete_form_state = $form_state instanceof SubformStateInterface ? $form_state->getCompleteFormState() : $form_state;

-    /** @var \Drupal\layoutcomponents\Form\LcConfigureSection $callback */
+    /** @var LcConfigureSection $callback */
     $section_storage = $complete_form_state->getBuildInfo()['callback_object']->getSectionStorage();
     if ($section_storage instanceof DefaultsSectionStorage) {
       $is_default_storage = TRUE;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/layoutcomponents/src/Plugin/Field/FieldWidget/LcFieldReferenceWidget.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * The entity bundle info manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfo
+   * @var EntityTypeBundleInfo
    */
   protected $entityBundleInfo;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;

@@ @@
    *
    * @param array $form
    *   The complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The FormStateInterface object.
    */
   public function ajaxEntityContent(array &$form, FormStateInterface &$form_state) {
@@ @@
    *
    * @param array $form
    *   The complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The FormStateInterface object.
    */
   public function ajaxEntityFields(array &$form, FormStateInterface &$form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/layoutcomponents/src/Plugin/Field/FieldFormatter/LcFieldReferenceFormatter.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The alias manager.
    *
-   * @var \Drupal\path_alias\AliasManager
+   * @var AliasManager
    */
   protected $aliasManager;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/layoutcomponents/src/LcUpdateManager.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Section options.
    *
-   * @var \Drupal\Core\Config\CachedStorage
+   * @var CachedStorage
    */
   protected $configStorage;

@@ @@
   /**
    * Section options.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
   /**
    * Section options.
    *
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuid;

@@ @@
   /**
    * LcUpdateManager constructor.
    *
-   * @param \Drupal\Core\Config\CachedStorage $config_storage
+   * @param CachedStorage $config_storage
    *   The Cached Storage service.
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The Config factory service.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid
+   * @param UuidInterface $uuid
    *   The uuid service.
    */
   public function __construct(CachedStorage $config_storage, ConfigFactory $config_factory, UuidInterface $uuid) {
@@ @@
    *   The name of module.
    */
   public function updateConfig(array $config_names, $module) {
-    $config_path = drupal_get_path('module', $module) . '/config/install';
+    $config_path = \Drupal::service('extension.list.module')->getPath($module) . '/config/install';
     $source = new FileStorage($config_path);

     foreach ($config_names as $name) {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/layoutcomponents/src/LcTheme.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layoutcomponents;

+use Drupal\Core\Layout\LayoutDefinition;
+use Drupal\Core\Template\Attribute;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\node\Entity\Node;
 use Drupal\commerce_store\Entity\Store;
@@ @@
   /**
    * The Layout Plugin Manager object.
    *
-   * @var \Drupal\Core\Layout\LayoutPluginManager
+   * @var LayoutPluginManager
    */
   protected $layoutPluginManager;

@@ @@
   /**
    * The Request object.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
         $class = $class[0];
       }

-      /** @var \Drupal\Core\Layout\LayoutDefinition $layout */
+      /** @var LayoutDefinition $layout */
       $layout = $variables['content']['#layout'];

       $suggestions[] = 'layout__layoutcomponents_base__' . $layout->id();
@@ @@
     }

     if ($hook == 'layoutcomponents__subregion') {
-      /** @var \Drupal\Core\Template\Attribute $attributes */
+      /** @var Attribute $attributes */
       $attributes = $variables['subregion']['attributes'];
       $attributes_classes  =$attributes->getClass()->value();

@@ @@
    *   The type of node.
    */
   public function getNodeFromSectionContent(array $variables) {
-    /** @var \Drupal\Core\Layout\LayoutDefinition $layout */
+    /** @var LayoutDefinition $layout */
     $layout = $variables['content']['#layout'];

     $res = NULL;
@@ @@
         str_contains($theme_registry[$theme_hook]['template'], 'layout--layoutcomponents-base--')
       ) {
         // Include file.
-        $theme_registry[$theme_hook]['includes'][] = drupal_get_path('module', 'layoutcomponents') . '/layoutcomponents.theme.inc';
+        $theme_registry[$theme_hook]['includes'][] = \Drupal::service('extension.list.module')->getPath('layoutcomponents') . '/layoutcomponents.theme.inc';
         // Set new preprocess function.
         $theme_registry[$theme_hook]['preprocess functions'][] = '_layoutcomponents_preprocess_layout';
         $theme_registry[$theme_hook]['base hook'] = 'layout__layoutcomponents_base';
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/layoutcomponents/src/LcSectionManager.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Get the layout settings of a section.
    *
-   * @param \Drupal\layout_builder\SectionStorageInterface $section_storage
+   * @param SectionStorageInterface $section_storage
    *   The section storage object.
    * @param int $delta
    *   The section delta.
@@ @@
   /**
    * Get the id of a sub section.
    *
-   * @param \Drupal\layout_builder\SectionStorageInterface $section_storage
+   * @param SectionStorageInterface $section_storage
    *   The section storage object.
    * @param int $delta
    *   The section delta.
@@ @@
   /**
    * Check if is a sub section.
    *
-   * @param \Drupal\layout_builder\SectionStorageInterface $section_storage
+   * @param SectionStorageInterface $section_storage
    *   The section storage object.
    * @param int $delta
    *   The section delta.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/layoutcomponents/src/LcPermissions.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layoutcomponents;

+use Drupal\layout_builder\Entity\LayoutEntityDisplayInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInfo;

@@ @@
   /**
    * LcPermissions constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info
+   * @param EntityTypeBundleInfoInterface $bundle_info
    *   The bundle info service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $bundle_info) {
@@ @@
   /**
    * The LC permissions for entities.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   public function getPermissions() {
     $permissions = [];

-    /** @var \Drupal\layout_builder\Entity\LayoutEntityDisplayInterface[] $entity_displays */
+    /** @var LayoutEntityDisplayInterface[] $entity_displays */
     $entity_displays = $this->entityTypeManager->getStorage('entity_view_display')->loadByProperties(['third_party_settings.layout_builder.allow_custom' => TRUE]);
     foreach ($entity_displays as $entity_display) {
       $entity_type_id = $entity_display->getTargetEntityTypeId();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/layoutcomponents/src/LcPage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layoutcomponents;

+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Extension\ModuleHandler;
@@ @@
   /**
    * The ModuleHandler object.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;

@@ @@
   /**
    * The Config Factory object.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The Request object.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * The Alias Manager object.
    *
-   * @var \Drupal\path_alias\AliasManager
+   * @var AliasManager
    */
   protected $aliasManager;

@@ @@
   /**
    * The Alias Manager object.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPathStack;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/layoutcomponents/src/LcLayoutsManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layoutcomponents;

+use Drupal\Core\Layout\LayoutDefinition;
+use Drupal\block_content\Entity\BlockContent;
 use Drupal\Core\Layout\LayoutPluginManager;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\layout_builder\Section;
@@ @@
   /**
    * Layout Plugin Manager.
    *
-   * @var \Drupal\Core\Layout\LayoutPluginManager
+   * @var LayoutPluginManager
    */
   protected $layoutPluginManager;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
   /**
    * The UUID generator.
    *
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuidGenerator;

@@ @@
   protected function getLayoutComponentsLayouts() {
     $layoutList = $this->layoutPluginManager->getDefinitions();
     foreach ($layoutList as $name => $layout) {
-      /** @var \Drupal\Core\Layout\LayoutDefinition $layout */
+      /** @var LayoutDefinition $layout */
       if ($layout->getClass() === 'Drupal\layoutcomponents\Plugin\Layout\LcBase') {
         $this->layouts[] = $layout;
       }
@@ @@
   /**
    * Clone the block.
    *
-   * @param \Drupal\layout_builder\SectionStorageInterface $section_storage
+   * @param SectionStorageInterface $section_storage
    *   The section storage being configured.
    * @param int $delta
    *   The delta.
    * @param string $region
    *   The region.
-   * @param \Drupal\layout_builder\SectionComponent $component
+   * @param SectionComponent $component
    *   The component.
    */
   public function duplicateBlock(SectionStorageInterface &$section_storage, $delta, $region, SectionComponent $component) {
@@ @@
     // The field definitions.
     $fields = $block->getFieldDefinitions();

-    /** @var \Drupal\field\Entity\FieldConfig $field */
+    /** @var FieldConfig $field */
     foreach ($fields as $name => $field) {
       // Filter by config.
       if ($field instanceof FieldConfig) {
@@ @@
         if ($field->getType() == 'entity_reference_revisions') {
           $current_values = $block->get($field->getName())->getValue();
           foreach ($current_values as $i => $value) {
-            /** @var \Drupal\block_content\Entity\BlockContent $old */
+            /** @var BlockContent $old */
             // Duplicate the items reference.
             $old = $this->entityTypeManager->getStorage('block_content')->loadRevision($value['target_revision_id']);

@@ @@
   /**
    * Clone the column.
    *
-   * @param \Drupal\layout_builder\SectionStorageInterface $section_storage
+   * @param SectionStorageInterface $section_storage
    *   The section storage being configured.
    * @param int $delta
    *   The delta.
@@ @@
   /**
    * Clone the section.
    *
-   * @param \Drupal\layout_builder\SectionStorageInterface $section_storage
+   * @param SectionStorageInterface $section_storage
    *   The section storage being configured.
    * @param int $delta
    *   The delta.
-   * @param \Drupal\layout_builder\Section $section
+   * @param Section $section
    *   The section.
    */
   public function duplicateSection(SectionStorageInterface &$section_storage, $delta, Section $section) {
@@ @@
   /**
    * Check if the new UUID generated is not in used.
    *
-   * @param \Drupal\layout_builder\SectionStorageInterface $section_storage
+   * @param SectionStorageInterface $section_storage
    *   The section storage being configured.
    * @param string $uuid
    *   The delta of the section.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/layoutcomponents/src/LcLayoutRender.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layoutcomponents;

+use Drupal\Core\Utility\Token;
+use Drupal\views\ViewExecutable;
 use Drupal\Component\Utility\DiffArray;
 use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\NestedArray;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;

@@ @@
   /**
    * The route match interface object.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   public function parseAttributes($string = NULL, array $tokens = []) {
     static $token;
     if (!isset($token)) {
-      /** @var \Drupal\Core\Utility\Token $token */
+      /** @var Token $token */
       $token = \Drupal::service('token');
     }
     $attributes = [];
@@ @@
         if ($media->bundle() == 'image') {
           $background_image_fid = $media->getSource()->getSourceFieldValue($media);
           $file = File::load($background_image_fid);
-          $url = Url::fromUri(file_create_url($file->getFileUri()))->getUri();
+          $url = \Drupal::service('file_url_generator')->generate($file->getFileUri())->getUri();
           if (!empty($url)) {
             if (boolval($background_image_full)) {
               // Background as normal image.
@@ @@
         if ($media->bundle() == 'image') {
           $background_image_fid = $media->getSource()->getSourceFieldValue($media);
           $file = File::load($background_image_fid);
-          $url = Url::fromUri(file_create_url($file->getFileUri()))->getUri();
+          $url = \Drupal::service('file_url_generator')->generate($file->getFileUri())->getUri();
           if (!empty($url)) {
             if (boolval($background_image_full)) {
               // Background as normal image.
@@ @@
             continue;
           }

-          /** @var \Drupal\views\ViewExecutable $view */
+          /** @var ViewExecutable $view */
           $view = $block['content']['#view'];
           if (empty($view->result)) {
             $n_empty_views++;
    ----------- end diff -----------

Applied rules:
 * FromUriRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/layoutcomponents/src/LcEntity.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The LcApi object.
    *
-   * @var \Drupal\layoutcomponents\Api\Component
+   * @var Component
    */
   protected $lcApi;

@@ @@
    *
    * @param array $form
    *   The array with the form.
-   * @param \Drupal\block_content\Entity\BlockContent $element
+   * @param BlockContent $element
    *   The blockcontent.
    */
   public function layoutcomponentsFormAlter(array &$form, BlockContent $element) {
-    /** @var \Drupal\block_content\Entity\BlockContent $block */
+    /** @var BlockContent $block */
     $block = $element;

     $definitions = $block->getFieldDefinitions();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/layoutcomponents/src/LcDisplayHelperTrait.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Gets revision IDs for layout sections.
    *
-   * @param \Drupal\layout_builder\SectionStorageInterface $section_storage
+   * @param SectionStorageInterface $section_storage
    *   The section storage object.
    *
    * @return array
@@ @@
     }

     // Store the rest of defaults.
-    /** @var \Drupal\layout_builder\Section $default */
+    /** @var Section $default */
     foreach ($defaults as $delta => $default) {
       if ($default->getLayoutId() == 'layout_builder_blank') {
         continue;
@@ @@
    *   If the default exists.
    */
   public function checkDefaultExists(array $defaults, $label) {
-    /** @var \Drupal\layout_builder\Section $default */
+    /** @var Section $default */
     foreach ($defaults as $delta => $default) {
       $settings = $default->getLayoutSettings();
       if (!empty($settings)) {
@@ @@
   /**
    * Get if the section is setted as overwriten.
    *
-   * @param \Drupal\layout_builder\Section $default
+   * @param Section $default
    *   The new element.
    *
    * @return bool
@@ @@
   /**
    * Get if the section is setted as overwriten.
    *
-   * @param \Drupal\layout_builder\Section $default
+   * @param Section $default
    *   The new element.
    * @param bool $status
    *   The new status.
    *
-   * @return \Drupal\layout_builder\Section
+   * @return Section
    *   The section.
    */
   public function updateOverWriten(Section &$default, bool $status) {
@@ @@
    *   The array of sections.
    * @param int $index
    *   The new position.
-   * @param \Drupal\layout_builder\Section $value
+   * @param Section $value
    *   The new section.
    */
   public function arrayInsert(array &$arr, int $index, Section $value) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


13) modules/contrib/layoutcomponents/src/LcDialogHelperTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layoutcomponents;

+use Drupal\Core\Config\ConfigFactory;
 use Drupal\Component\Serialization\Json;

 /**
@@ @@
   /**
    * Get the confgiFactory object.
    *
-   * @return \Drupal\Core\Config\ConfigFactory
+   * @return ConfigFactory
    *   The configFactory object.
    */
   private function configFactory() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/layoutcomponents/src/Form/LcUpdateColumn.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layoutcomponents\Form;

+use Drupal\Core\TempStore\PrivateTempStore;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\PluginFormFactoryInterface;
 use Drupal\Core\TempStore\PrivateTempStoreFactory;
@@ @@
   /**
    * The section storage.
    *
-   * @var \Drupal\layoutcomponents\LcLayoutsManager
+   * @var LcLayoutsManager
    */
   protected $layoutManager;

@@ @@
   /**
    * Drupal\Core\TempStore\PrivateTempStoreFactory definition.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   private $tempStoreFactory;

@@ @@
   /**
    * Constructs to update the column.
    *
-   * @param \Drupal\layout_builder\LayoutTempstoreRepositoryInterface $layout_tempstore_repository
+   * @param LayoutTempstoreRepositoryInterface $layout_tempstore_repository
    *   The layout tempstore repository.
-   * @param \Drupal\Core\Plugin\PluginFormFactoryInterface $plugin_form_manager
+   * @param PluginFormFactoryInterface $plugin_form_manager
    *   The plugin form manager.
-   * @param \Drupal\layoutcomponents\LcLayoutsManager $layout_manager
+   * @param LcLayoutsManager $layout_manager
    *   The LcLayoutsManager object.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store
+   * @param PrivateTempStoreFactory $temp_store
    *   The PrivateTempStoreFactory object.
    */
   public function __construct(LayoutTempstoreRepositoryInterface $layout_tempstore_repository, PluginFormFactoryInterface $plugin_form_manager, LcLayoutsManager $layout_manager, PrivateTempStoreFactory $temp_store) {
@@ @@
     $this->isDefault = (boolval($section_overwrite) && !$section_storage instanceof DefaultsSectionStorage) ? TRUE : FALSE;

     // Get temp store lc data.
-    /** @var \Drupal\Core\TempStore\PrivateTempStore $store */
+    /** @var PrivateTempStore $store */
     $store = $this->tempStoreFactory->get('lc');
     $data = $store->get('lc_element');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/layoutcomponents/src/Form/LcUpdateBlockForm.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The Language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The LC manager.
    *
-   * @var \Drupal\layoutcomponents\LcLayoutsManager
+   * @var LcLayoutsManager
    */
   protected $lcLayoutManager;

@@ @@
     $section_overwrite = $section_storage->getSection($delta)->getLayoutSettings()['section']['general']['basic']['section_overwrite'];
     $this->isDefault = (boolval($section_overwrite) && !$section_storage instanceof DefaultsSectionStorage) ? TRUE : FALSE;

-    /** @var \Drupal\layout_builder\SectionComponent $component */
+    /** @var SectionComponent $component */
     $component = $section_storage->getSection($delta)->getComponent($uuid);
     $conf = $component->get('configuration');

@@ @@

     $build = parent::buildForm($form, $form_state, $section_storage, $delta, $region, $uuid);

-    /** @var \Drupal\block_content\Entity\BlockContent $block */
+    /** @var BlockContent $block */
     $block = !empty($build['settings']['block_form']['#block'])
       ? $build['settings']['block_form']['#block'] : NULL;
     if (!isset($block)) {
@@ @@
    */
   public function blockContentToInline(array $configuration) {
     $configuration['id'] = str_replace('block_content:', '', $configuration['id']);
-    /** @var \Drupal\block_content\Entity\BlockContent $block_content */
+    /** @var BlockContent $block_content */
     $block_content = $this->entityTypeManager->getStorage('block_content')->loadByProperties(['uuid' => $configuration['id']]);
     $block_content = reset($block_content);
     return [
@@ @@
   /**
    * Set translation of current language.
    *
-   * @param \Drupal\layout_builder\SectionComponent $component
+   * @param SectionComponent $component
    *   The layout builder component.
    */
   public function setCurrentLanguageTranslation(SectionComponent &$component) {
     $configuration = $component->get('configuration');
     try {
-      /** @var \Drupal\block_content\Entity\BlockContent $block_content */
+      /** @var BlockContent $block_content */
       $block_content = $component->getPlugin()->build();
       $block_content = reset($block_content);
       if (!$block_content instanceof BlockContent) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/layoutcomponents/src/Form/LcSettings.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layoutcomponents\Form;

+use Drupal\Core\Config\Config;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
    */
   public function buildForm(array $form, FormStateInterface $form_state) {

-    /** @var \Drupal\Core\Config\Config $config */
+    /** @var Config $config */
     $config = $this->config('layoutcomponents.general');

     $form['general'] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/layoutcomponents/src/Form/LcSectionSettings.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layoutcomponents\Form;

+use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The Lc manager.
    *
-   * @var \Drupal\layoutcomponents\LcLayoutsManager
+   * @var LcLayoutsManager
    */
   protected $layoutManager;

@@ @@
   /**
    * The Lc manager.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configFactory object.
-   * @param \Drupal\layoutcomponents\LcLayoutsManager $layout_manager
+   * @param LcLayoutsManager $layout_manager
    *   The LcLayoutsManager object.
    */
   public function __construct(ConfigFactoryInterface $config_factory, LcLayoutsManager $layout_manager) {
@@ @@
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Config\Config $config */
+    /** @var Config $config */
     $config = $this->config('layoutcomponents.section');
     $colors = $this->configFactory->getEditable('layoutcomponents.colors')->getRawData()['editor_colors_list'];
     $colors = str_replace(' ', '', $colors);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/layoutcomponents/src/Form/LcRemoveSection.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The LC manager.
    *
-   * @var \Drupal\layoutcomponents\LcLayoutsManager
+   * @var LcLayoutsManager
    */
   protected $lcLayoutManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/layoutcomponents/src/Form/LcRemoveBlock.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The LC manager.
    *
-   * @var \Drupal\layoutcomponents\LcLayoutsManager
+   * @var LcLayoutsManager
    */
   protected $lcLayoutManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/layoutcomponents/src/Form/LcInterfaceSettings.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layoutcomponents\Form;

+use Drupal\Core\Config\Config;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Config\Config $config */
+    /** @var Config $config */
     $config = $this->config('layoutcomponents.interface');

     $form['general'] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/layoutcomponents/src/Form/LcCopySection.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layoutcomponents\Form;

+use Drupal\Core\Ajax\AjaxResponse;
+use Drupal\Core\TempStore\PrivateTempStore;
 use Drupal\layout_builder\Plugin\Block\InlineBlock;
 use Drupal\layoutcomponents\Form\LcCopy as LcCopy;
 use Drupal\Core\Ajax\AjaxFormHelperTrait;
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
-   * @param \Drupal\layout_builder\SectionStorageInterface $section_storage
+   * @param SectionStorageInterface $section_storage
    *   The section storage.
    * @param int $delta
    *   The delta of the section to splice.
    *
-   * @return array|\Drupal\Core\Ajax\AjaxResponse
+   * @return array|AjaxResponse
    *   A render array.
    */
   public function buildForm(array $form, FormStateInterface $form_state, SectionStorageInterface $section_storage = NULL, $delta = NULL) {
@@ @@
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     if (!$this->getDefault()) {
-      /** @var \Drupal\Core\TempStore\PrivateTempStore $store */
+      /** @var PrivateTempStore $store */
       $store = $this->tempStoreFactory->get('lc');
       $store->set('lc_element', [
         'type' => $this->type,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/layoutcomponents/src/Form/LcCopyRemove.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layoutcomponents\Form;

+use Drupal\Core\TempStore\PrivateTempStore;
 use Drupal\Core\Ajax\AjaxFormHelperTrait;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The layout tempstore repository.
    *
-   * @var \Drupal\layout_builder\LayoutTempstoreRepositoryInterface
+   * @var LayoutTempstoreRepositoryInterface
    */
   protected $layoutTempstoreRepository;

@@ @@
   /**
    * The section storage.
    *
-   * @var \Drupal\layout_builder\SectionStorageInterface
+   * @var SectionStorageInterface
    */
   protected $sectionStorage;

@@ @@
   /**
    * Drupal\Core\TempStore\PrivateTempStoreFactory definition.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;

@@ @@
   /**
    * Constructs a new copy block form.
    *
-   * @param \Drupal\layout_builder\LayoutTempstoreRepositoryInterface $layout_tempstore_repository
+   * @param LayoutTempstoreRepositoryInterface $layout_tempstore_repository
    *   The layout tempstore repository.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store
+   * @param PrivateTempStoreFactory $temp_store
    *   The PrivateTempStoreFactory object.
    */
   public function __construct(LayoutTempstoreRepositoryInterface $layout_tempstore_repository, PrivateTempStoreFactory $temp_store) {
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\TempStore\PrivateTempStore $store */
+    /** @var PrivateTempStore $store */
     $store = $this->tempStoreFactory->get('lc');
     $store->delete('lc_element');
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/layoutcomponents/src/Form/LcCopyColumn.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layoutcomponents\Form;

+use Drupal\Core\Ajax\AjaxResponse;
+use Drupal\Core\TempStore\PrivateTempStore;
 use Drupal\Core\Ajax\AjaxFormHelperTrait;
 use Drupal\layout_builder\Controller\LayoutRebuildTrait;
 use Drupal\layout_builder\Plugin\Block\InlineBlock;
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
-   * @param \Drupal\layout_builder\SectionStorageInterface $section_storage
+   * @param SectionStorageInterface $section_storage
    *   The section storage.
    * @param int $delta
    *   The delta of the section to splice.
@@ @@
    * @param string $region
    *   The region the block is going in.
    *
-   * @return array|\Drupal\Core\Ajax\AjaxResponse
+   * @return array|AjaxResponse
    *   A render array.
    */
   public function buildForm(array $form, FormStateInterface $form_state, SectionStorageInterface $section_storage = NULL, $delta = NULL, $region = NULL) {
@@ @@
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     if (!$this->getDefault()) {
-      /** @var \Drupal\Core\TempStore\PrivateTempStore $store */
+      /** @var PrivateTempStore $store */
       $store = $this->tempStoreFactory->get('lc');
       $store->set('lc_element', [
         'type' => $this->type,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/layoutcomponents/src/Form/LcCopyBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layoutcomponents\Form;

+use Drupal\Core\Ajax\AjaxResponse;
+use Drupal\Core\TempStore\PrivateTempStore;
 use Drupal\layoutcomponents\Form\LcCopy as LcCopy;
 use Drupal\Core\Ajax\AjaxFormHelperTrait;
 use Drupal\Core\Ajax\InvokeCommand;
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
-   * @param \Drupal\layout_builder\SectionStorageInterface $section_storage
+   * @param SectionStorageInterface $section_storage
    *   The section storage.
    * @param int $delta
    *   The delta of the section to splice.
@@ @@
    * @param string $uuid
    *   The uuid of the block.
    *
-   * @return array|\Drupal\Core\Ajax\AjaxResponse
+   * @return array|AjaxResponse
    *   A render array.
    */
   public function buildForm(array $form, FormStateInterface $form_state, SectionStorageInterface $section_storage = NULL, $delta = NULL, $region = NULL, $uuid = NULL) {
@@ @@
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     if (!$this->getDefault()) {
-      /** @var \Drupal\Core\TempStore\PrivateTempStore $store */
+      /** @var PrivateTempStore $store */
       $store = $this->tempStoreFactory->get('lc');
       $store->set('lc_element', [
         'type' => $this->type,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/layoutcomponents/src/Form/LcCopy.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layoutcomponents\Form;

+use Drupal\layout_builder\SectionStorageInterface;
 use Drupal\Core\Ajax\AjaxFormHelperTrait;
 use Drupal\Core\Ajax\InvokeCommand;
 use Drupal\Core\Form\FormBase;
@@ @@
   /**
    * The layout tempstore repository.
    *
-   * @var \Drupal\layout_builder\LayoutTempstoreRepositoryInterface
+   * @var LayoutTempstoreRepositoryInterface
    */
   protected $layoutTempstoreRepository;

@@ @@
   /**
    * The UUID generator.
    *
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuidGenerator;

@@ @@
   /**
    * The Lc manager.
    *
-   * @var \Drupal\layoutcomponents\LcLayoutsManager
+   * @var LcLayoutsManager
    */
   protected $layoutManager;

@@ @@
   /**
    * The section storage.
    *
-   * @var \Drupal\layout_builder\SectionStorageInterface
+   * @var SectionStorageInterface
    */
   protected $sectionStorage;

@@ @@
   /**
    * Drupal\Core\TempStore\PrivateTempStoreFactory definition.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;

@@ @@
   /**
    * Constructs a new copy block form.
    *
-   * @param \Drupal\layoutcomponents\LcLayoutsManager $layout_manager
+   * @param LcLayoutsManager $layout_manager
    *   The layout manager object.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid
+   * @param UuidInterface $uuid
    *   The UUID generator.
-   * @param \Drupal\layout_builder\LayoutTempstoreRepositoryInterface $layout_tempstore_repository
+   * @param LayoutTempstoreRepositoryInterface $layout_tempstore_repository
    *   The layout tempstore repository.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store
+   * @param PrivateTempStoreFactory $temp_store
    *   The PrivateTempStoreFactory object.
    */
   public function __construct(LcLayoutsManager $layout_manager, UuidInterface $uuid, LayoutTempstoreRepositoryInterface $layout_tempstore_repository, PrivateTempStoreFactory $temp_store) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/layoutcomponents/src/Form/LcConfigureSection.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * RequestStack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $request;

@@ @@
   /**
    * The LC manager.
    *
-   * @var \Drupal\layoutcomponents\LcLayoutsManager
+   * @var LcLayoutsManager
    */
   protected $lcLayoutManager;

@@ @@
   /**
    * Drupal\layoutcomponents\LcSectionManager definition.
    *
-   * @var \Drupal\layoutcomponents\LcSectionManager
+   * @var LcSectionManager
    */
   protected $lcSectionManager;

@@ @@
   }

   public function updateLayoutSettings($section_storage, $delta, $plugin_id) {
-    /** @var \Drupal\layout_builder\Section $section */
+    /** @var Section $section */
     $section = $section_storage->getSection($delta);

     // Old section settings.
@@ @@
     foreach ($regions as $plugin => $region) {
       $region_components = $section->getComponentsByRegion($plugin);

-      /** @var \Drupal\layout_builder\SectionComponent  $component */
+      /** @var SectionComponent $component */
       foreach ($region_components as $key => $component) {
         $component = $component->toArray();

@@ @@
    *
    * @param array $form
    *   The complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The Form state object.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/layoutcomponents/src/Form/LcColumnSettings.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layoutcomponents\Form;

+use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The Lc manager.
    *
-   * @var \Drupal\layoutcomponents\LcLayoutsManager
+   * @var LcLayoutsManager
    */
   protected $layoutManager;

@@ @@
   /**
    * The Lc column settings contruct.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configFactory object.
-   * @param \Drupal\layoutcomponents\LcLayoutsManager $layout_manager
+   * @param LcLayoutsManager $layout_manager
    *   The LcLayoutsManager object.
    */
   public function __construct(ConfigFactoryInterface $config_factory, LcLayoutsManager $layout_manager) {
@@ @@
    */
   public function buildForm(array $form, FormStateInterface $form_state) {

-    /** @var \Drupal\Core\Config\Config $config */
+    /** @var Config $config */
     $config = $this->config('layoutcomponents.column');
     $colors = $this->configFactory->getEditable('layoutcomponents.colors')->getRawData()['editor_colors_list'];
     $colors = str_replace(' ', '', $colors);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/layoutcomponents/src/Form/LcColorsSettings.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layoutcomponents\Form;

+use Drupal\Core\Config\Config;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
    */
   public function buildForm(array $form, FormStateInterface $form_state) {

-    /** @var \Drupal\Core\Config\Config $config */
+    /** @var Config $config */
     $config = $this->config('layoutcomponents.colors');

     $form['general'] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/layoutcomponents/src/Form/LcAddBlockForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layoutcomponents\Form;

+use Drupal\block_content\Entity\BlockContent;
 use Drupal\Core\Ajax\AjaxHelperTrait;
 use Drupal\Core\Ajax\InvokeCommand;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
     $admin_label = isset($build['settings']['admin_label']) ? $build['settings']['admin_label'] : NULL;

     if (array_key_exists('block_form', $build['settings'])) {
-      /** @var \Drupal\block_content\Entity\BlockContent $block */
+      /** @var BlockContent $block */
       $block = $build['settings']['block_form']['#block'];
       $build['#title'] = $this->t("Add new @title", ['@title' => $block->bundle()]);
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/layoutcomponents/src/Event/LcPreprocessLayoutEvent.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The layout array.
    *
-   * @var \Drupal\layoutcomponents\LcLayoutRender
+   * @var LcLayoutRender
    */
   protected $layout;

@@ @@
   /**
    * Constructs the object.
    *
-   * @param \Drupal\layoutcomponents\LcLayoutRender $layout
+   * @param LcLayoutRender $layout
    *   The complete object with the data.
    */
   public function __construct(LcLayoutRender $layout) {
@@ @@
   /**
    * Get the layout object.
    *
-   * @return \Drupal\layoutcomponents\LcLayoutRender
+   * @return LcLayoutRender
    */
   public function getLayout() {
     return $this->layout;
@@ @@
   /**
    * Set the layout object.
    *
-   * @param \Drupal\layoutcomponents\LcLayoutRender $layout
+   * @param LcLayoutRender $layout
    *   The complete layout object.
    */
   public function setLayout(LcLayoutRender $layout) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/layoutcomponents/src/Entity/LcEntityViewDisplay.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layoutcomponents\Entity;

+use Drupal\layout_builder\SectionStorage\SectionStorageManagerInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Core\Plugin\Context\EntityContext;
@@ @@
   /**
    * Gets the section storage manager.
    *
-   * @return \Drupal\layout_builder\SectionStorage\SectionStorageManagerInterface
+   * @return SectionStorageManagerInterface
    *   The section storage manager.
    */
   private function sectionStorageManager() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/layoutcomponents/src/Element/LcElement.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layoutcomponents\Element;

+use Drupal\node\Entity\Node;
+use Drupal\Core\TempStore\PrivateTempStore;
+use Drupal\layout_builder\Section;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\TempStore\PrivateTempStoreFactory;
 use Drupal\layout_builder\Element\LayoutBuilder;
@@ @@
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
   /**
    * Config factory object.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
   /**
    * Drupal\Core\TempStore\PrivateTempStoreFactory definition.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;

@@ @@
   /**
    * The Layout Tempstore.
    *
-   * @var \Drupal\layout_builder\LayoutTempstoreRepositoryInterface
+   * @var LayoutTempstoreRepositoryInterface
    */
   protected $layoutTempstore;

@@ @@
   /**
    * The LC manager.
    *
-   * @var \Drupal\layoutcomponents\LcLayoutsManager
+   * @var LcLayoutsManager
    */
   protected $lcLayoutManager;

@@ @@
   /**
    * Drupal\Core\Session\AccountProxy definition.
    *
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    */
   protected $currentUser;

@@ @@
   /**
    * Drupal\layoutcomponents\LcSectionManager definition.
    *
-   * @var \Drupal\layoutcomponents\LcSectionManager
+   * @var LcSectionManager
    */
   protected $lcSectionManager;

@@ @@
   /**
    * Current Entity.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $entity;

@@ @@
     $storage_id = $section_storage->getStorageId();

     // Allow remove clipboard.
-    /** @var \Drupal\Core\TempStore\PrivateTempStore $store */
+    /** @var PrivateTempStore $store */
     $store = $this->tempStoreFactory->get('lc');
     $data = $store->get('lc_element');
     $clipboard_attr = (!empty($data)) ?: 'hidden';
@@ @@
     $build['link']['#title'] = '';

     // Alter Add Section button.
-    /** @var \Drupal\Core\Url $url */
+    /** @var Url $url */
     //$url = $build['link']['#url'];
     $url = Url::fromRoute('layoutcomponents.section_selection',
       [
@@ @@
       $addBlock['link']['#title'] = '';
       $addBlock['#weight'] = 999;

-      /** @var \Drupal\Core\Url $url */
+      /** @var Url $url */
       $url = $addBlock['link']['#url'];

       // Remove link--add class.
@@ @@
       $current_layout_settings = $section_storage->getSection($delta)->getLayoutSettings();

       $aa = $section_storage->getSections();
-      /** @var \Drupal\layout_builder\Section $dd_section */
+      /** @var Section $dd_section */
       foreach ($section_storage->getSections() as $dd => $dd_section) {
         $dd_settings = $dd_section->getLayoutSettings();
         if (empty($dd_settings['sub_section']) || !array_key_exists('lc_id', $dd_settings['sub_section'])) {
@@ @@
   /**
    * Provide tooltip for Url elements.
    *
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   The section storage.
    * @param string $text
    *   The text.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The url preprocessed.
    */
   public function addTooltip(Url $url, $text) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/layoutcomponents/src/Element/LcColorField.php:50

    ---------- begin diff ----------
@@ @@
    *
    * @param array $element
    *   The form element to process.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $form
    *   The complete form structure.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/layoutcomponents/src/Controller/LcSectionTypeSelectionController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layoutcomponents\Controller;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * RequestStack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $request;

@@ @@
   /**
    * ChooseBlockController constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(RequestStack $request) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/layoutcomponents/src/Controller/LcInlineMedia.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layoutcomponents\Controller;

+use Drupal\file\Plugin\Field\FieldType\FileFieldItemList;
+use Drupal\file\Entity\file;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * ChooseBlockController constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
    * @param string $id
    *   The media id.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JsonResponse object.
    */
   public function getMedia($id) {
-    /** @var \Drupal\file\Plugin\Field\FieldType\FileFieldItemList $media_field */
+    /** @var FileFieldItemList $media_field */
     $media_field = $this->entityTypeManager->getStorage('media')->load($id)->get('field_media_image')->getValue();

-    /** @var \Drupal\file\Entity\file $file */
+    /** @var file $file */
     $file = $this->entityTypeManager->getStorage('file')->load($media_field[0]['target_id']);
     if (!isset($file)) {
       return new JsonResponse(['uri' => '']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/layoutcomponents/src/Controller/LcClipboardController.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\TempStore\PrivateTempStoreFactory definition.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   private $tempStoreFactory;

@@ @@
   /**
    * LcClipboardController constructor.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store
+   * @param PrivateTempStoreFactory $temp_store
    *   The PrivateTempStoreFactory object.
    */
   public function __construct(PrivateTempStoreFactory $temp_store) {
@@ @@
   /**
    * Return the element coied on clipboard.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JsonResponse object.
    */
   public function getElement() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/layoutcomponents/src/Controller/LcChooseSectionController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layoutcomponents\Controller;

+use Drupal\Core\TempStore\PrivateTempStore;
 use Drupal\Core\Layout\LayoutPluginManagerInterface;
 use Drupal\Core\TempStore\PrivateTempStoreFactory;
 use Drupal\layout_builder\Controller\ChooseSectionController;
@@ @@
   /**
    * RequestStack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $request;

@@ @@
   /**
    * The layout tempstore repository.
    *
-   * @var \Drupal\layout_builder\LayoutTempstoreRepositoryInterface
+   * @var LayoutTempstoreRepositoryInterface
    */
   protected $layoutTempstoreRepository;

@@ @@
   /**
    * The LC manager.
    *
-   * @var \Drupal\layoutcomponents\LcLayoutsManager
+   * @var LcLayoutsManager
    */
   protected $lcLayoutManager;

@@ @@
   /**
    * Drupal\Core\TempStore\PrivateTempStoreFactory definition.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   private $tempStoreFactory;

@@ @@
   /**
    * Config factory object.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
   /**
    * LcChooseSectionController constructor.
    *
-   * @param \Drupal\Core\Layout\LayoutPluginManagerInterface $layout_manager
+   * @param LayoutPluginManagerInterface $layout_manager
    *   The layout manager.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request
+   * @param RequestStack $request
    *   The requestStack.
-   * @param \Drupal\layout_builder\LayoutTempstoreRepositoryInterface $layout_tempstore_repository
+   * @param LayoutTempstoreRepositoryInterface $layout_tempstore_repository
    *   The LayoutTempstoreRepositoryInterface object.
-   * @param \Drupal\layoutcomponents\LcLayoutsManager $lc_layout_manager
+   * @param LcLayoutsManager $lc_layout_manager
    *   The LcLayoutsManager object.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store
+   * @param PrivateTempStoreFactory $temp_store
    *   The PrivateTempStoreFactory object.
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The config factory object.
    */
   public function __construct(LayoutPluginManagerInterface $layout_manager, RequestStack $request, LayoutTempstoreRepositoryInterface $layout_tempstore_repository, LcLayoutsManager $lc_layout_manager, PrivateTempStoreFactory $temp_store, ConfigFactory $config_factory) {
@@ @@
   /**
    * Adds the new section.
    *
-   * @param \Drupal\layout_builder\SectionStorageInterface $section_storage
+   * @param SectionStorageInterface $section_storage
    *   The section storage.
    * @param int $delta
    *   The delta of the section to splice.
@@ @@
    */
   public function build(SectionStorageInterface $section_storage, $delta) {
     // Get temp store lc data.
-    /** @var \Drupal\Core\TempStore\PrivateTempStore $store */
+    /** @var PrivateTempStore $store */
     $store = $this->tempStoreFactory->get('lc');
     $data = $store->get('lc_element');

@@ @@
       else {
         $classes = [];
       }
-      /** @var \Drupal\Core\Url $url */
+      /** @var Url $url */
       $url = $item['#url'];
       $item['#url'] = Url::fromRoute('layout_builder.configure_section',
         [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/layoutcomponents/src/Controller/LcChooseBlockController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layoutcomponents\Controller;

+use Drupal\Core\Ajax\AjaxResponse;
+use Drupal\Core\TempStore\PrivateTempStore;
+use Drupal\Core\Config\Config;
 use Drupal\Component\Uuid\UuidInterface;
 use Drupal\Core\Block\BlockManagerInterface;
 use Drupal\Core\Config\ConfigFactory;
@@ @@
   /**
    * The section storage.
    *
-   * @var \Drupal\layoutcomponents\LcLayoutsManager
+   * @var LcLayoutsManager
    */
   protected $layoutManager;

@@ @@
   /**
    * The UUID generator.
    *
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuidGenerator;

@@ @@
   /**
    * The layout tempstore repository.
    *
-   * @var \Drupal\layout_builder\LayoutTempstoreRepositoryInterface
+   * @var LayoutTempstoreRepositoryInterface
    */
   protected $layoutTempstoreRepository;

@@ @@
   /**
    * Drupal\Core\TempStore\PrivateTempStoreFactory definition.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   private $tempStoreFactory;

@@ @@
   /**
    * The section storage.
    *
-   * @var \Drupal\layout_builder\SectionStorageInterface
+   * @var SectionStorageInterface
    */
   protected $sectionStorage;

@@ @@
   /**
    * Config factory object.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
   /**
    * LcChooseBlockController constructor.
    *
-   * @param \Drupal\Core\Block\BlockManagerInterface $block_manager
+   * @param BlockManagerInterface $block_manager
    *   The block manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\layoutcomponents\LcLayoutsManager $layout_manager
+   * @param LcLayoutsManager $layout_manager
    *   The LcLayoutsManager object.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid
+   * @param UuidInterface $uuid
    *   The requestStack.
-   * @param \Drupal\layout_builder\LayoutTempstoreRepositoryInterface $layout_tempstore_repository
+   * @param LayoutTempstoreRepositoryInterface $layout_tempstore_repository
    *   The LayoutTempstoreRepositoryInterface object.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store
+   * @param PrivateTempStoreFactory $temp_store
    *   The PrivateTempStoreFactory object.
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The config factory object.
    */
   public function __construct(BlockManagerInterface $block_manager, EntityTypeManagerInterface $entity_type_manager, AccountInterface $current_user, LcLayoutsManager $layout_manager, UuidInterface $uuid, LayoutTempstoreRepositoryInterface $layout_tempstore_repository, PrivateTempStoreFactory $temp_store, ConfigFactory $config_factory) {
@@ @@
   /**
    * Provides the UI for choosing a new block.
    *
-   * @param \Drupal\layout_builder\SectionStorageInterface $section_storage
+   * @param SectionStorageInterface $section_storage
    *   The section storage.
    * @param int $delta
    *   The delta of the section to splice.
@@ @@
    * @param string $region
    *   The region the block is going in.
    *
-   * @return array|\Drupal\Core\Ajax\AjaxResponse
+   * @return array|AjaxResponse
    *   A render array.
    */
   public function build(SectionStorageInterface $section_storage, $delta, $region) {
@@ @@
     $this->isDefault = (boolval($section_overwrite) && !$section_storage instanceof DefaultsSectionStorage) ? TRUE : FALSE;

     // Get temp store lc data.
-    /** @var \Drupal\Core\TempStore\PrivateTempStore $store */
+    /** @var PrivateTempStore $store */
     $store = $this->tempStoreFactory->get('lc');
     $data = $store->get('lc_element');

-    /** @var \Drupal\Core\Config\Config $lc_settings */
+    /** @var Config $lc_settings */
     $lcSettings = $this->configFactory->getEditable('layoutcomponents.general');

     // If a new element must be copied.
@@ @@
   /**
    * Provides the UI for choosing a new inline block.
    *
-   * @param \Drupal\layout_builder\SectionStorageInterface $section_storage
+   * @param SectionStorageInterface $section_storage
    *   The section storage.
    * @param int $delta
    *   The delta of the section to splice.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


39) modules/contrib/layoutcomponents/src/Api/Color.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Layoutcomponents manager.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


40) modules/contrib/layoutcomponents/src/Access/LcAccessHelperTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layoutcomponents\Access;

+use Drupal\node\Entity\Node;
 use Drupal\Core\Session\AccountProxy;

 /**
@@ @@
   /**
    * Get the current entity.
    *
-   * @return \Drupal\node\Entity\Node
+   * @return Node
    *   The entity.
    */
   protected function getCurrentEntity() {
@@ @@
   /**
    * Check if the user is allowed.
    *
-   * @param \Drupal\Core\Session\AccountProxy $account
+   * @param AccountProxy $account
    *   The section storage object.
    * @param string $permission
    *   The permission.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


41) modules/contrib/layoutcomponents/modules/sliderwidget/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\sliderwidget\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
@@ @@
    */
   public function testLoad() {
     $this->drupalGet(Url::fromRoute('<front>'));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


42) modules/contrib/layoutcomponents/modules/sliderwidget/src/Plugin/Field/FieldWidget/SliderUIFieldWidget.php:201

    ---------- begin diff ----------
@@ @@
    *
    * @param array $element
    *   Form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    */
   public function sliderwidgetValidatePositiveNumber(array $element, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


43) modules/contrib/layoutcomponents/modules/sliderwidget/src/Element/Slider.php:450

    ---------- begin diff ----------
@@ @@
    *
    * @param array $element
    *   Form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    */
   public function sliderValidatePositiveNumber(array $element, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


44) modules/contrib/layoutcomponents/modules/lc_slick/lc_slick.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\layoutcomponents\Form\LcConfigureSection;
 /**
  * @file
  * LC Simple Slick module file.
@@ @@
     // Form section.
     $section = &$form['layout_settings']['container']['section']['container'];

-    /** @var \Drupal\layoutcomponents\Form\LcConfigureSection $obj */
+    /** @var LcConfigureSection $obj */
     $obj = $form_state->getFormObject();

     $configuration = $obj->getLayoutSettings()->getConfiguration();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


45) modules/contrib/layoutcomponents/modules/lc_simple_view_carousel/lc_simple_view_carousel.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\block_content\Entity\BlockContent;
+use Drupal\views\ViewExecutable;
+use Drupal\node\Entity\Node;
 /**
  * @file
  * LC Simple View Carrousel module file.
@@ @@
     return;
   }

-  /** @var \Drupal\block_content\Entity\BlockContent $block */
+  /** @var BlockContent $block */
   $block = $variables['content']['#block_content'];
   $block_slick = $variables['content']['#attributes']['class'][] = 'block-inline-blocksimple-view-carousel-' . $block->id();

@@ @@
   $preprocess_tabs = $block->get('field_vc_preprocess_tabs')->getString();

   if (!empty($id)) {
-    /** @var \Drupal\views\ViewExecutable $view */
+    /** @var ViewExecutable $view */
     $view = Views::getView($id);

     // Render the view.
@@ @@
     // Find the values for the dots.
     if (boolval($preprocess_tabs)) {
       foreach ($items as $i => $item) {
-        /** @var \Drupal\node\Entity\Node $node */
+        /** @var Node $node */
         $node = $item['slide']['#node'];
         if ($node->hasField('field_tab_pagination_text')) {
           $js_settings['items'][] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


46) modules/contrib/layoutcomponents/modules/lc_simple_video/lc_simple_video.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\block_content\Entity\BlockContent;
+use Drupal\media\Entity\Media;
+use Drupal\layoutcomponents\Api\Component;
 /**
  * @file
  * LC Simple video module file.
@@ @@
 function lc_simple_video_preprocess_field(&$variables) {
   if ($variables['field_name'] == 'field_sv_upload_video' || $variables['field_name'] == 'field_sv_video') {

-    /** @var \Drupal\block_content\Entity\BlockContent $block */
+    /** @var BlockContent $block */
     $block = $variables['element']["#object"];
     $block_id = str_replace(' ', '_', $block->uuid());

@@ @@
         // Render the video directly.
         $content['#theme'] = 'file_video';

-        /** @var \Drupal\media\Entity\Media $media */
+        /** @var Media $media */
         $media = $content['#media'];
         $file_id = $media->field_media_video_file->target_id;
         $file = File::load($file_id);
@@ @@
     if (!array_key_exists('#default_value', $entity_form) || !isset($entity_form['#default_value'])) {
       return;
     }
-    /** @var \Drupal\block_content\Entity\BlockContent $block */
+    /** @var BlockContent $block */
     $block = $entity_form['#default_value'];
     $block_id = str_replace(" ", "_", $block->uuid());
     _lc_simple_video_form_alter($entity_form, $block_id);
@@ @@
     if (!array_key_exists('#block', $form)) {
       return;
     }
-    /** @var \Drupal\block_content\Entity\BlockContent $block */
+    /** @var BlockContent $block */
     $block = $form['#block'];
     $block_id = str_replace(" ", "_", $block->uuid());
     _lc_simple_video_form_alter($form, $block_id);
@@ @@
  *   The id of the block.
  */
 function _lc_simple_video_form_alter(array &$form, $block_id) {
-  /** @var \Drupal\layoutcomponents\Api\Component $lcApi */
+  /** @var Component $lcApi */
   $lcApi = Drupal::service('layoutcomponents.apiComponent');

   // LC inline video type.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


47) modules/contrib/layoutcomponents/modules/lc_simple_title/lc_simple_title.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\block_content\Entity\BlockContent;
+use Drupal\layoutcomponents\Api\Component;
 /**
  * @file
  * LC Simple text module file.
@@ @@

     $helper = \Drupal::service("plugin.manager.layoutcomponents_layouts");

-    /** @var \Drupal\block_content\Entity\BlockContent $block */
+    /** @var BlockContent $block */
     $block = $variables['element']["#object"];
     $block_id = str_replace(' ', '_', $block->uuid());

@@ @@
     if (!array_key_exists('#default_value', $entity_form) || !isset($entity_form['#default_value'])) {
       return;
     }
-    /** @var \Drupal\block_content\Entity\BlockContent $block */
+    /** @var BlockContent $block */
     $block = $entity_form['#default_value'];
     $block_id = str_replace(" ", "_", $block->uuid());
     _lc_simple_title_form_alter($entity_form, $block_id);
@@ @@
     if (!array_key_exists('#block', $form)) {
       return;
     }
-    /** @var \Drupal\block_content\Entity\BlockContent $block */
+    /** @var BlockContent $block */
     $block = $form['#block'];
     $block_id = str_replace(" ", "_", $block->uuid());
     _lc_simple_title_form_alter($form, $block_id);
@@ @@
  *   The id of the block.
  */
 function _lc_simple_title_form_alter(array &$form, $block_id) {
-  /** @var \Drupal\layoutcomponents\Api\Component $lcApi */
+  /** @var Component $lcApi */
   $lcApi = Drupal::service('layoutcomponents.apiComponent');

   // LC inline ckeditor text.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


48) modules/contrib/layoutcomponents/modules/lc_simple_timeline/lc_simple_timeline.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\block_content\Entity\BlockContent;
 /**
  * @file
  * LC Simple timeline module file.
@@ @@
     return;
   }

-  /** @var \Drupal\block_content\Entity\BlockContent $block */
+  /** @var BlockContent $block */
   $block = $variables['content']['#block_content'];

   if ($block->bundle() != 'simple_timeline') {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


49) modules/contrib/layoutcomponents/modules/lc_simple_text_with_hover_image/lc_simple_text_with_hover_image.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\block_content\Entity\BlockContent;
 /**
  * @file
  * LC Simple text with hover image file.
@@ @@
     return;
   }

-  /** @var \Drupal\block_content\Entity\BlockContent $block */
+  /** @var BlockContent $block */
   $block = $variables['content']['#block_content'];

   if ($block->bundle() != 'simple_text_with_hover_image') {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


50) modules/contrib/layoutcomponents/modules/lc_simple_text/lc_simple_text.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\block_content\Entity\BlockContent;
+use Drupal\layoutcomponents\Api\Component;
 /**
  * @file
  * LC Simple text module file.
@@ @@

     $helper = \Drupal::service("plugin.manager.layoutcomponents_layouts");

-    /** @var \Drupal\block_content\Entity\BlockContent $block */
+    /** @var BlockContent $block */
     $block = $variables['element']["#object"];
     $block_id = str_replace(' ', '_', $block->uuid());

@@ @@
     if (!array_key_exists('#default_value', $entity_form) || !isset($entity_form['#default_value'])) {
       return;
     }
-    /** @var \Drupal\block_content\Entity\BlockContent $block */
+    /** @var BlockContent $block */
     $block = $entity_form['#default_value'];
     $block_id = str_replace(" ", "_", $block->uuid());
     _lc_simple_text_form_alter($entity_form, $block_id);
@@ @@
     if (!array_key_exists('#block', $form)) {
       return;
     }
-    /** @var \Drupal\block_content\Entity\BlockContent $block */
+    /** @var BlockContent $block */
     $block = $form['#block'];
     $block_id = str_replace(" ", "_", $block->uuid());
     _lc_simple_text_form_alter($form, $block_id);
@@ @@
  *   The id of the block.
  */
 function _lc_simple_text_form_alter(array &$form, $block_id) {
-  /** @var \Drupal\layoutcomponents\Api\Component $lcApi */
+  /** @var Component $lcApi */
   $lcApi = Drupal::service('layoutcomponents.apiComponent');

   // LC inline ckeditor text.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


51) modules/contrib/layoutcomponents/modules/lc_simple_image_with_top_float_text/lc_simple_image_with_top_float_text.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\block_content\Entity\BlockContent;
 /**
  * @file
  * LC Simple image with top float text module file.
@@ @@
     return;
   }

-  /** @var \Drupal\block_content\Entity\BlockContent $block */
+  /** @var BlockContent $block */
   $block = $variables['content']['#block_content'];

   if ($block->bundle() != 'simple_image_with_top_float_text') {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


52) modules/contrib/layoutcomponents/modules/lc_simple_image_with_hover_text/lc_simple_image_with_hover_text.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\block_content\Entity\BlockContent;
 /**
  * @file
  * LC Simple image with hover textt file.
@@ @@
     return;
   }

-  /** @var \Drupal\block_content\Entity\BlockContent $block */
+  /** @var BlockContent $block */
   $block = $variables['content']['#block_content'];

   if ($block->bundle() != 'simple_image_with_hover_text') {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


53) modules/contrib/layoutcomponents/modules/lc_simple_image_two_text_columns/lc_simple_image_two_text_columns.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\block_content\Entity\BlockContent;
 /**
  * @file
  * LC Simple image with two text columns
@@ @@
     return;
   }

-  /** @var \Drupal\block_content\Entity\BlockContent $block */
+  /** @var BlockContent $block */
   $block = $variables['content']['#block_content'];

   if ($block->bundle() != 'simple_image_two_text_columns') {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


54) modules/contrib/layoutcomponents/modules/lc_simple_image/lc_simple_image.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\image\Plugin\Field\FieldType\ImageItem;
+use Drupal\layoutcomponents\Api\Component;
+use Drupal\image\Entity\ImageStyle;
 /**
  * @file
  * LC Simple image module file.
@@ @@
         continue;
       }

-      /** @var \Drupal\image\Plugin\Field\FieldType\ImageItem $imageItem */
+      /** @var ImageItem $imageItem */
       $imageItem = $variables['items'][$i]['content']['#item'];

       if (!isset($imageItem->getEntity()->_referringItem)) {
@@ @@
     if (!array_key_exists('#default_value', $entity_form) || !isset($entity_form['#default_value'])) {
       return;
     }
-    /** @var \Drupal\block_content\Entity\BlockContent $block */
+    /** @var BlockContent $block */
     $block = $entity_form['#default_value'];
     $block_id = str_replace(" ", "_", $block->uuid());
     _lc_simple_image_form_alter($entity_form, $block_id);
@@ @@
     if (!array_key_exists('#block', $form)) {
       return;
     }
-    /** @var \Drupal\block_content\Entity\BlockContent $block */
+    /** @var BlockContent $block */
     $block = $form['#block'];
     $block_id = str_replace(" ", "_", $block->uuid());
     _lc_simple_image_form_alter($form, $block_id);
@@ @@
  *   The id of the block.
  */
 function _lc_simple_image_form_alter(array &$form, $block_id) {
-  /** @var \Drupal\layoutcomponents\Api\Component $lcApi */
+  /** @var Component $lcApi */
   $lcApi = Drupal::service('layoutcomponents.apiComponent');

   // LC inline image.
@@ @@
   $styles = \Drupal::entityTypeManager()->getStorage('image_style')->loadMultiple();
   $options = [];

-  /** @var \Drupal\image\Entity\ImageStyle $style */
+  /** @var ImageStyle $style */
   foreach ($styles as $style) {
     $options[$style->id()] = $style->label();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


55) modules/contrib/layoutcomponents/modules/lc_simple_iframe/lc_simple_iframe.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\block_content\Entity\BlockContent;
+use Drupal\layoutcomponents\Api\Component;
 /**
  * @file
  * LC Simple Iframe module file.
@@ @@
     return;
   }

-  /** @var \Drupal\block_content\Entity\BlockContent $block */
+  /** @var BlockContent $block */
   $block = $variables['content']['#block_content'];
   $block_id = str_replace(' ', '_', $block->uuid());

@@ @@
     if (!array_key_exists('#default_value', $entity_form) || !isset($entity_form['#default_value'])) {
       return;
     }
-    /** @var \Drupal\block_content\Entity\BlockContent $block */
+    /** @var BlockContent $block */
     $block = $entity_form['#default_value'];
     $block_id = str_replace(" ", "_", $block->uuid());
     _lc_simple_iframe_form_alter($entity_form, $block_id);
@@ @@
       return;
     }

-    /** @var \Drupal\block_content\Entity\BlockContent $block */
+    /** @var BlockContent $block */
     $block = $form['#block'];
     $block_id = str_replace(" ", "_", $block->uuid());
     _lc_simple_iframe_form_alter($form, $block_id);
@@ @@
  *   The id of the block.
  */
 function _lc_simple_iframe_form_alter(array &$form, $block_id) {
-  /** @var \Drupal\layoutcomponents\Api\Component $lcApi */
+  /** @var Component $lcApi */
   $lcApi = Drupal::service('layoutcomponents.apiComponent');

   // LC url.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


56) modules/contrib/layoutcomponents/modules/lc_simple_countdown/lc_simple_countdown.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\block_content\Entity\BlockContent;
+use Drupal\layoutcomponents\Api\Component;
 /**
  * @file
  * LC Simple countdown module file.
@@ @@

   $helper = \Drupal::service("plugin.manager.layoutcomponents_layouts");

-  /** @var \Drupal\block_content\Entity\BlockContent $block */
+  /** @var BlockContent $block */
   $block = $variables['content']['#block_content'];
   $block_id = str_replace(' ', '_', $block->uuid());

@@ @@
     if (!array_key_exists('#default_value', $entity_form) || !isset($entity_form['#default_value'])) {
       return;
     }
-    /** @var \Drupal\block_content\Entity\BlockContent $block */
+    /** @var BlockContent $block */
     $block = $entity_form['#default_value'];
     $block_id = str_replace(" ", "_", $block->uuid());
     _lc_simple_countdown_form_alter($entity_form, $block_id);
@@ @@
       return;
     }

-    /** @var \Drupal\block_content\Entity\BlockContent $block */
+    /** @var BlockContent $block */
     $block = $form['#block'];
     $block_id = str_replace(" ", "_", $block->uuid());
     _lc_simple_countdown_form_alter($form, $block_id);
@@ @@
  *   The id of the block.
  */
 function _lc_simple_countdown_form_alter(array &$form, $block_id) {
-  /** @var \Drupal\layoutcomponents\Api\Component $lcApi */
+  /** @var Component $lcApi */
   $lcApi = Drupal::service('layoutcomponents.apiComponent');

   // LC date.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


57) modules/contrib/layoutcomponents/modules/lc_simple_card_with_float_text/lc_simple_card_with_float_text.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\block_content\Entity\BlockContent;
 /**
  * @file
  * LC Simple card with float text file.
@@ @@
     return;
   }

-  /** @var \Drupal\block_content\Entity\BlockContent $block */
+  /** @var BlockContent $block */
   $block = $variables['content']['#block_content'];

   if ($block->bundle() != 'simple_card_with_float_text') {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


58) modules/contrib/layoutcomponents/modules/lc_simple_card/lc_simple_card.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\block_content\Entity\BlockContent;
+use Drupal\layoutcomponents\Api\Component;
 /**
  * @file
  * LC Simple cards module file.
@@ @@
     return;
   }

-  /** @var \Drupal\block_content\Entity\BlockContent $block */
+  /** @var BlockContent $block */
   $block = $variables['content']['#block_content'];
   $block_id = str_replace(' ', '_', $block->uuid());

@@ @@
     if (!array_key_exists('#block', $form)) {
       return;
     }
-    /** @var \Drupal\block_content\Entity\BlockContent $block */
+    /** @var BlockContent $block */
     $block = $form['#block'];
     $block_id = str_replace(" ", "_", $block->uuid());
     _lc_simple_card_form_alter($form, $block_id);
@@ @@
  *   The id of the block.
  */
 function _lc_simple_card_form_alter(array &$form, $block_id) {
-  /** @var \Drupal\layoutcomponents\Api\Component $lcApi */
+  /** @var Component $lcApi */
   $lcApi = Drupal::service('layoutcomponents.apiComponent');

   // LC inline video extra class.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


59) modules/contrib/layoutcomponents/modules/lc_simple_button/lc_simple_button.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\block_content\Entity\BlockContent;
+use Drupal\layoutcomponents\Api\Component;
 /**
  * @file
  * LC Simple button module file.
@@ @@

     $helper = \Drupal::service("plugin.manager.layoutcomponents_layouts");

-    /** @var \Drupal\block_content\Entity\BlockContent $block */
+    /** @var BlockContent $block */
     $block = $variables['element']["#object"];
     $block_id = str_replace(' ', '_', $block->uuid());

@@ @@
     if (!array_key_exists('#default_value', $entity_form) || !isset($entity_form['#default_value'])) {
       return;
     }
-    /** @var \Drupal\block_content\Entity\BlockContent $block */
+    /** @var BlockContent $block */
     $block = $entity_form['#default_value'];
     $block_id = str_replace(" ", "_", $block->uuid());
     _lc_simple_button_form_alter($entity_form, $block_id);
@@ @@
       return;
     }

-    /** @var \Drupal\block_content\Entity\BlockContent $block */
+    /** @var BlockContent $block */
     $block = $form['#block'];
     $block_id = str_replace(" ", "_", $block->uuid());
     _lc_simple_button_form_alter($form, $block_id);
@@ @@
  *   The id of the block.
  */
 function _lc_simple_button_form_alter(array &$form, $block_id) {
-  /** @var \Drupal\layoutcomponents\Api\Component $lcApi */
+  /** @var Component $lcApi */
   $lcApi = Drupal::service('layoutcomponents.apiComponent');

   // LC inline url.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


60) modules/contrib/layoutcomponents/modules/lc_simple_accordion/lc_simple_accordion.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\block_content\Entity\BlockContent;
+use Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItemList;
+use Drupal\layoutcomponents\Api\Component;
 /**
  * @file
  * LC Simple accordion module file.
@@ @@
     return;
   }

-  /** @var \Drupal\block_content\Entity\BlockContent $block */
+  /** @var BlockContent $block */
   $block = $variables['content']['#block_content'];

   $block_id = str_replace(' ', '_', $block->uuid());
@@ @@
   $items['field_sa_accordion_item'] = $variables['content']['field_sa_accordion_item'];
   unset($variables['content']['field_sa_accordion_item']);

-  /** @var \Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItemList $cards */
+  /** @var EntityReferenceRevisionsFieldItemList $cards */
   $cards = $items['field_sa_accordion_item']['#items'];

   if (!isset($cards)) {
@@ @@
   }

   for ($i = 0; $i < $cards->count(); $i++) {
-    /** @var \Drupal\block_content\Entity\BlockContent $block_item */
+    /** @var BlockContent $block_item */
     $block_item = $items['field_sa_accordion_item'][$i]['#block_content'];

     // Header attributes.
@@ @@
     if (!array_key_exists('#default_value', $entity_form) || !isset($entity_form['#default_value'])) {
       return;
     }
-    /** @var \Drupal\block_content\Entity\BlockContent $block */
+    /** @var BlockContent $block */
     $block = $entity_form['#default_value'];
     $block_id = str_replace(" ", "_", $block->uuid());
     _lc_simple_accordion_form_alter($entity_form, $block_id);
@@ @@
     if (!array_key_exists('#block', $form)) {
       return;
     }
-    /** @var \Drupal\block_content\Entity\BlockContent $block */
+    /** @var BlockContent $block */
     $block = $form['#block'];
     $block_id = str_replace(" ", "_", $block->uuid());
     _lc_simple_accordion_form_alter($form, $block_id);
@@ @@
  *   The id of the block.
  */
 function _lc_simple_accordion_form_alter(array &$form, $block_id) {
-  /** @var \Drupal\layoutcomponents\Api\Component $lcApi */
+  /** @var Component $lcApi */
   $lcApi = Drupal::service('layoutcomponents.apiComponent');

   // LC inline video extra class.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


61) modules/contrib/layoutcomponents/modules/lc_commands/src/Commands/LcCommands.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lc_commands\Commands;

+use Drupal\layout_builder\Entity\LayoutBuilderEntityViewDisplayStorage;
+use Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItemList;
+use Drupal\Core\Entity\Sql\SqlContentEntityStorage;
 use Drush\Commands\DrushCommands;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\block_content\Entity\BlockContent;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The serializer.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $serializer;

@@ @@
   /**
    * The Config factory object.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The Inline block usage.
    *
-   * @var \Drupal\layout_builder\InlineBlockUsage
+   * @var InlineBlockUsage
    */
   protected $inlineBlockUsage;

@@ @@
   /**
    * LcCommands constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager interface object.
-   * @param \Symfony\Component\Serializer\SerializerInterface $serializer
+   * @param SerializerInterface $serializer
    *   The serializer interface object.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory interface object.
-   * @param \Drupal\layout_builder\InlineBlockUsage $inline_block_usage
+   * @param InlineBlockUsage $inline_block_usage
    *   The inline block usage manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, SerializerInterface $serializer, ConfigFactoryInterface $config_factory, InlineBlockUsage $inline_block_usage) {
@@ @@
     $block_storage = $this->entityTypeManager->getStorage('block_content');
     $blocks = $block_storage->loadMultiple();

-    /** @var \Drupal\block_content\Entity\BlockContent $block */
+    /** @var BlockContent $block */
     foreach ($blocks as $i => $block) {
       // Provide the las version of block.
       $revision = $block_storage->getLatestRevisionId($block->id());
@@ @@
     // Clear the directory.
     $this->clearDirectory();

-    /** @var \Drupal\block_content\Entity\BlockContent $block */
+    /** @var BlockContent $block */
     foreach ($blocks as $i => $block) {
       // Ensure that is the last revision.
       $block_revision = $this->getLastRevisionBlock($block->id());
@@ @@
     foreach ($files as $file) {
       $this->output->writeln('Importing: ' . $file);

-      /** @var \Drupal\block_content\Entity\BlockContent $n_block */
+      /** @var BlockContent $n_block */
       $n_block = $this->readFile($file);

       $uuid = $n_block['uuid'][0];
@@ @@
       // Normalize Layout builder field if exists.
       $this->normalizeSections($n_block);

-      /** @var \Drupal\block_content\Entity\BlockContent $d_block */
+      /** @var BlockContent $d_block */
       $d_block = $this->getBlock($uuid);

       // Check for references.
@@ @@

           // Register the dependencies, the dependencies as media won't
           // be exported.
-          /** @var \Drupal\block_content\Entity\BlockContent $dependencie */
+          /** @var BlockContent $dependencie */
           if (!empty($dependencies)) {
             foreach ($dependencies as $i => $dependencie) {
               $n_block[$this->getEmbedded($link)][$i]['target_id'] = $dependencie->id();
@@ @@
   /**
    * Export a block.
    *
-   * @param \Drupal\block_content\Entity\BlockContent $block
+   * @param BlockContent $block
    *   The block.
    *
    * @return bool
@@ @@
   /**
    * Export the sub-blocks of a block.
    *
-   * @param \Drupal\block_content\Entity\BlockContent $block
+   * @param BlockContent $block
    *   The block.
    */
   public function exportSubBlocks(BlockContent $block) {
@@ @@
       $layout = $block->get('layout_builder__layout')->getValue();
       if (!empty($layout)) {
         foreach ($layout as $item) {
-          /** @var \Drupal\layout_builder\Section $section */
+          /** @var Section $section */
           $section = $item['section'];
           $components = $section->getComponents();
           if (!empty($components)) {
-            /** @var \Drupal\layout_builder\SectionComponent $component */
+            /** @var SectionComponent $component */
             foreach ($components as $component) {
-              /** @var \Drupal\block_content\Entity\BlockContent $sub_block */
+              /** @var BlockContent $sub_block */
               $sub_block = $this->getLastRevisionBlock($component->toArray()['configuration']['block_revision_id']);
               if ($sub_block instanceof BlockContent) {
                 $this->exportBlock($sub_block);
@@ @@
   /**
    * Check if the block is a LC block and is used from a display.
    *
-   * @param \Drupal\block_content\Entity\BlockContent $block
+   * @param BlockContent $block
    *   The block.
    * @param string $action
    *   The type of action.
@@ @@
    *   If is a LC block.
    */
   public function isLcBlock(BlockContent $block, $action = 'export') {
-    /** @var \Drupal\layout_builder\Entity\LayoutBuilderEntityViewDisplayStorage $storage */
+    /** @var LayoutBuilderEntityViewDisplayStorage $storage */
     $storage = $this->entityTypeManager->getStorage('entity_view_display');
     $displays = $storage->loadMultiple();

@@ @@
                   $definitions = $block->getFieldDefinitions();
                   foreach ($definitions as $definition) {
                     if ($definition->getType() == 'entity_reference_revisions') {
-                      /** @var \Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItemList $list */
+                      /** @var EntityReferenceRevisionsFieldItemList $list */
                       $list = $block->get($definition->getName());
                       for ($i = 0; $i < $list->count(); $i++) {
-                        /** @var \Drupal\block_content\Entity\BlockContent $tab_item */
+                        /** @var BlockContent $tab_item */
                         $tab_item = $this->getLastRevisionBlock($list->get($i)->getValue()['target_id']);
                         if (!isset($tab_item)) {
                           continue;
@@ @@
   /**
    * Get the dependencie or create if not exists.
    *
-   * @param \Drupal\block_content\Entity\BlockContent $n_block
+   * @param BlockContent $n_block
    *   The block.
    * @param string $reference
    *   The new reference.
@@ @@
    * @param string $uuid
    *   The uuid.
    *
-   * @return \Drupal\block_content\Entity\BlockContent
+   * @return BlockContent
    *   The new block.
    */
   public function getBlock($uuid) {
@@ @@
       ->getStorage('block_content')
       ->loadByProperties(['uuid' => $uuid]);

-    /** @var \Drupal\block_content\Entity\BlockContent $block */
+    /** @var BlockContent $block */
     $block = reset($block);

     return $block;
@@ @@
    * @param string $id
    *   The block id.
    *
-   * @return \Drupal\block_content\Entity\BlockContent
+   * @return BlockContent
    *   The full block.
    */
   public function getLastRevisionBlock($id) {
-    /** @var \Drupal\Core\Entity\Sql\SqlContentEntityStorage $storage */
+    /** @var SqlContentEntityStorage $storage */
     $storage = $this->entityTypeManager->getStorage('block_content');
     $revision = $storage->getLatestRevisionId($id);
     return $storage->loadRevision($revision);
@@ @@
   /**
    * Update the dependencie of the block.
    *
-   * @param \Drupal\block_content\Entity\BlockContent $block
+   * @param BlockContent $block
    *   The block.
    * @param string $uuid
    *   The uuid.
    *
-   * @return \Drupal\block_content\Entity\BlockContent
+   * @return BlockContent
    *   The new block.
    */
   public function updateDependencie(BlockContent $block, string $uuid) {
@@ @@
   /**
    * Update each block with the new data.
    *
-   * @return \Drupal\block_content\Entity\BlockContent
+   * @return BlockContent
    *   The new block.
    */
   public function updateBlock($block, $n_block) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


62) modules/contrib/layoutcomponents/layoutcomponents.theme.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Layout\LayoutDefinition;
+use Drupal\layoutcomponents\LcLayoutRender;
 /**
  * @file
  * Contains layoutcomponents.theme.inc.
@@ @@
  *   The array with variables.
  */
 function _layoutcomponents_preprocess_layout(array &$variables) {
-  /** @var \Drupal\Core\Layout\LayoutDefinition $layout_definition */
+  /** @var LayoutDefinition $layout_definition */
   $layout_definition = $variables['layout'];

   // Remove quick edit as it doesn't make sense here. It also points to the view
@@ @@
     unset($variables['attributes']['data-quickedit-entity-id']);
   }

-  /** @var \Drupal\layoutcomponents\LcLayoutRender $layout */
+  /** @var LcLayoutRender $layout */
   $layout = \Drupal::service('layoutcomponents.render');

   // Dispatch the event.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


63) modules/contrib/layoutcomponents/layoutcomponents.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Asset\AttachedAssetsInterface;
 /**
  * @file
  * Contains layoutcomponents.module.
@@ @@
 /**
  * Implements hook_css_alter().
  */
-function layoutcomponents_css_alter(&$css, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {
+function layoutcomponents_css_alter(&$css, AttachedAssetsInterface $assets) {
   $route = \Drupal::routeMatch()->getRouteObject();
   $parameters = $route->getOption('parameters');
   if (isset($parameters)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


64) modules/contrib/layoutcomponents/layoutcomponents.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityTypeBundleInfo;
+use Drupal\layout_builder\Section;
 /**
  * @file
  * Install, uninstall and update hooks for Layoutcomponents module.
@@ @@
  * Update the default sections with the new config().
  */
 function layoutcomponents_update_8002() {
-  /** @var \Drupal\Core\Entity\EntityTypeBundleInfo $bundle_info */
+  /** @var EntityTypeBundleInfo $bundle_info */
   $bundles = \Drupal::service('entity_type.bundle.info')->getBundleInfo('node');
   foreach ($bundles as $id => $bundle) {
     $displays = \Drupal::entityTypeManager()->getStorage('entity_view_display')->loadByProperties(['bundle' => $id]);
@@ @@
       if ($display instanceof LcEntityViewDisplay) {
         $settings = $display->getThirdPartySettings('layout_builder');
         if (array_key_exists('sections', $settings)) {
-          /** @var \Drupal\layout_builder\Section $section */
+          /** @var Section $section */
           foreach ($settings['sections'] as $delta => $section) {
             $section_settings = $section->getLayoutSettings();
             $section_settings['section']['general']['basic']['section_overwrite'] = FALSE;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/layoutcomponents/src/Form/LcMoveSections.php" file, due
         to:                                                                    
         "Analyze error: "Class Drupal\layout_builder\Form\MoveSectionsForm not 
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

