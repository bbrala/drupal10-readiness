diff --git a/composer.json b/composer.json
index d6e0e65..6520057 100644
--- a/composer.json
+++ b/composer.json
@@ -22,6 +22,6 @@
     },
     "require": {
         "drupal/compiler": "^1.0@alpha",
-        "drupal/core": "^8.9 || ^9"
+        "drupal/core": "^9.3 || ^10"
     }
 }
diff --git a/src/Compiler.php b/src/Compiler.php
index a1ede49..9c03298 100644
--- a/src/Compiler.php
+++ b/src/Compiler.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\theme_compiler;
 
+use function Sabre\Uri\resolve;
+use function Sabre\Uri\normalize;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\File\FileSystemInterface;
@@ -51,79 +53,79 @@ class Compiler implements ContainerInjectionInterface {
   /**
    * The cache tags invalidator service.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;
 
   /**
    * The compiler plugin manager service.
    *
-   * @var \Drupal\compiler\Plugin\CompilerPluginManagerInterface
+   * @var CompilerPluginManagerInterface
    */
   protected $compilerManager;
 
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The theme handler service.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
   /**
    * The theme initialization service.
    *
-   * @var \Drupal\Core\Theme\ThemeInitializationInterface
+   * @var ThemeInitializationInterface
    */
   protected $themeInitialization;
 
   /**
    * The theme manager service.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;
 
   /**
    * Constructs a CompilerController object.
    *
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The cache tags invalidator service.
-   * @param \Drupal\compiler\Plugin\CompilerPluginManagerInterface $compiler_plugin_manager
+   * @param CompilerPluginManagerInterface $compiler_plugin_manager
    *   The compiler plugin manager service.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider service.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler service.
-   * @param \Drupal\Core\Theme\ThemeInitializationInterface $theme_initialization
+   * @param ThemeInitializationInterface $theme_initialization
    *   The theme initialization service.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $theme_manager
+   * @param ThemeManagerInterface $theme_manager
    *   The theme manager service.
    */
   public function __construct(CacheTagsInvalidatorInterface $cache_tags_invalidator, CompilerPluginManagerInterface $compiler_plugin_manager, FileSystemInterface $file_system, MessengerInterface $messenger, ModuleHandlerInterface $module_handler, RouteProviderInterface $route_provider, ThemeHandlerInterface $theme_handler, ThemeInitializationInterface $theme_initialization, ThemeManagerInterface $theme_manager) {
@@ -162,13 +164,13 @@ class Compiler implements ContainerInjectionInterface {
    * to modify the compiler plugin instance and compiler context before the
    * compilation process has begun.
    *
-   * @param \Drupal\compiler\RefineableCompilerContextInterface $context
+   * @param RefineableCompilerContextInterface $context
    *   A compiler context used to define a compilation process.
    *
    * @see hook_theme_compiler_alter()
    * @see hook_theme_compiler_TYPE_alter()
    *
-   * @throws \Drupal\theme_compiler\CompilerException
+   * @throws CompilerException
    *   If an exception occurs during compilation. This exception will be
    *   constructed with the previous exception(s).
    *
@@ -219,7 +221,7 @@ class Compiler implements ContainerInjectionInterface {
    *
    * This is a destructive operation; the supplied target path will be replaced.
    *
-   * @param \Drupal\compiler\RefineableCompilerContextInterface $context
+   * @param RefineableCompilerContextInterface $context
    *   A compiler context used to define a compilation process.
    * @param string $target
    *   The target file used to save the result. This file path will be resolved
@@ -301,7 +303,7 @@ class Compiler implements ContainerInjectionInterface {
    * each route is then mapped to its compiler context (should one exist).
    * Finally, the list of values is reduced to contain only valid contexts.
    *
-   * @return \Drupal\compiler\RefineableCompilerContextInterface[]
+   * @return RefineableCompilerContextInterface[]
    *   A list of refineable compiler contexts.
    */
   public function getThemeCompilerRouteContexts(): array {
@@ -332,7 +334,7 @@ class Compiler implements ContainerInjectionInterface {
    */
   public function normalizeAndResolveTargetPath(string $target): string {
     // Attempt to resolve the supplied target path relative to the sandbox.
-    $target = \Sabre\Uri\resolve(self::SANDBOX, \Sabre\Uri\normalize($target));
+    $target = resolve(self::SANDBOX, normalize($target));
 
     // Ensure that the resulting target path is beneath the sandbox path.
     if (strpos($target, self::SANDBOX) !== 0 || $target === self::SANDBOX) {
diff --git a/src/Controller/ThemeCompilerController.php b/src/Controller/ThemeCompilerController.php
index 820e7f1..ca5f96b 100644
--- a/src/Controller/ThemeCompilerController.php
+++ b/src/Controller/ThemeCompilerController.php
@@ -32,32 +32,32 @@ class ThemeCompilerController extends ControllerBase implements ThemeCompilerCon
   /**
    * The compiler service.
    *
-   * @var \Drupal\theme_compiler\Compiler
+   * @var Compiler
    */
   protected $compiler;
 
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The theme manager service.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;
 
   /**
    * Constructs a ThemeCompilerController object.
    *
-   * @param \Drupal\theme_compiler\Compiler $compiler
+   * @param Compiler $compiler
    *   The compiler service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $theme_manager
+   * @param ThemeManagerInterface $theme_manager
    *   The theme manager service.
    */
   public function __construct(Compiler $compiler, ModuleHandlerInterface $module_handler, ThemeManagerInterface $theme_manager) {
@@ -69,13 +69,13 @@ class ThemeCompilerController extends ControllerBase implements ThemeCompilerCon
   /**
    * Serve a theme compiler asset as a cacheable response.
    *
-   * @param \Drupal\compiler\CompilerContextInterface $theme_compiler_context
+   * @param CompilerContextInterface $theme_compiler_context
    *   A compiler context used to define a compilation.
    *
    * @see hook_theme_compiler_asset_alter()
    *   For more information about how to alter the asset response.
    *
-   * @return \Drupal\Core\Cache\CacheableResponse
+   * @return CacheableResponse
    *   A cacheable response for the requested resource.
    */
   public function serve(CompilerContextInterface $theme_compiler_context): CacheableResponse {
diff --git a/src/EventSubscriber/CompileSubscriber.php b/src/EventSubscriber/CompileSubscriber.php
index eab4390..efebe76 100644
--- a/src/EventSubscriber/CompileSubscriber.php
+++ b/src/EventSubscriber/CompileSubscriber.php
@@ -29,32 +29,32 @@ class CompileSubscriber implements EventSubscriberInterface {
   /**
    * The compiler service.
    *
-   * @var \Drupal\theme_compiler\Compiler
+   * @var Compiler
    */
   protected $compiler;
 
   /**
    * The theme handler service.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
   /**
    * The typed config manager service.
    *
-   * @var \Drupal\Core\Config\TypedConfigManagerInterface
+   * @var TypedConfigManagerInterface
    */
   protected $typedConfigManager;
 
   /**
    * Constructs an CompileSubscriber object.
    *
-   * @param \Drupal\theme_compiler\Compiler $compiler
+   * @param Compiler $compiler
    *   The compiler service.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler service.
-   * @param \Drupal\Core\Config\TypedConfigManagerInterface $typed_config_manager
+   * @param TypedConfigManagerInterface $typed_config_manager
    *   The typed config manager service.
    */
   public function __construct(Compiler $compiler, ThemeHandlerInterface $theme_handler, TypedConfigManagerInterface $typed_config_manager) {
@@ -123,7 +123,7 @@ class CompileSubscriber implements EventSubscriberInterface {
   /**
    * Compile all assets provided by this module on configuration changes.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The configuration change event.
    */
   public function onConfigChange(ConfigCrudEvent $event) {
diff --git a/src/Routing/RouteHelper.php b/src/Routing/RouteHelper.php
index bfb85c8..e7ec20d 100644
--- a/src/Routing/RouteHelper.php
+++ b/src/Routing/RouteHelper.php
@@ -37,7 +37,7 @@ class RouteHelper {
   /**
    * Constructs a RouteHelper object.
    *
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler service.
    */
   public function __construct(ThemeHandlerInterface $theme_handler) {
@@ -69,7 +69,7 @@ class RouteHelper {
    *
    *   Keys that do not appear in this list will be ignored.
    *
-   * @return \Drupal\compiler\RefineableCompilerContext
+   * @return RefineableCompilerContext
    *   A compiler context used to define a compilation.
    */
   protected function getThemeCompilerContext(string $theme, string $compiler, string $path, array $config): RefineableCompilerContext {
@@ -86,12 +86,12 @@ class RouteHelper {
     $options['theme_compiler']['theme'] = $theme;
 
     // Compute the target URI for this context and hash it for an ID.
-    $options['theme_compiler']['uri'] = '/' . drupal_get_path('theme', $theme) . '/' . $path;
+    $options['theme_compiler']['uri'] = '/' . \Drupal::service('extension.list.theme')->getPath($theme) . '/' . $path;
     $options['theme_compiler']['id'] = hash('sha384', $options['theme_compiler']['uri']);
 
     // Iterate over each defined theme-relative file path for processing.
     foreach ($files as $index => $file) {
-      if (empty($result = realpath(\DRUPAL_ROOT . '/' . drupal_get_path('theme', $theme) . '/' . $file))) {
+      if (empty($result = realpath(\DRUPAL_ROOT . '/' . \Drupal::service('extension.list.theme')->getPath($theme) . '/' . $file))) {
         throw new \InvalidArgumentException('Unable to resolve theme-relative file path at index ' . var_export($index, TRUE) . ': ' . var_export($file, TRUE));
       }
 
@@ -133,10 +133,10 @@ class RouteHelper {
   /**
    * Generate a route to a specific theme-provided, compiled asset.
    *
-   * @param \Drupal\compiler\CompilerContextInterface $context
+   * @param CompilerContextInterface $context
    *   The source context which defines or configures the compilation.
    *
-   * @return \Symfony\Component\Routing\Route
+   * @return Route
    *   A route to a theme-provided, compiled assets.
    */
   protected function getThemeCompilerTargetRoute(CompilerContextInterface $context): Route {
diff --git a/src/ThemeCompilerControllerInterface.php b/src/ThemeCompilerControllerInterface.php
index fcc34b6..ca22e29 100644
--- a/src/ThemeCompilerControllerInterface.php
+++ b/src/ThemeCompilerControllerInterface.php
@@ -23,10 +23,10 @@ interface ThemeCompilerControllerInterface {
   /**
    * Return a response containing the result of compiling the requested context.
    *
-   * @param \Drupal\compiler\CompilerContextInterface $theme_compiler_context
+   * @param CompilerContextInterface $theme_compiler_context
    *   A compiler context used to define a compilation.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   A response containing the result of the compiled context.
    */
   public function serve(CompilerContextInterface $theme_compiler_context): Response;
diff --git a/theme_compiler.info.yml b/theme_compiler.info.yml
index 9d479fc..d6db079 100644
--- a/theme_compiler.info.yml
+++ b/theme_compiler.info.yml
@@ -2,7 +2,7 @@ name: 'Theme Compiler'
 description: 'A helper module to facilitate theme-provided, compiled assets.'
 package: 'Compiler'
 
-core_version_requirement: '^8.9 || ^9'
+core_version_requirement: ^9.3 || ^10
 type: module
 
 php: 7.3
