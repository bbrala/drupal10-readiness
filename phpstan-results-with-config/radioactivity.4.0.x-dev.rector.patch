diff --git a/radioactivity.install b/radioactivity.install
index acbce68..ce31d0d 100644
--- a/radioactivity.install
+++ b/radioactivity.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\radioactivity\IncidentStorageInterface;
 /**
  * @file
  * Install and update hooks for Radioactivity module.
@@ -139,7 +140,7 @@ function radioactivity_update_9003() {
  */
 function radioactivity_update_9004() {
   $state = \Drupal::state();
-  /** @var \Drupal\radioactivity\IncidentStorageInterface $storage */
+  /** @var IncidentStorageInterface $storage */
   $storage = \Drupal::service('radioactivity.default_incident_storage');
 
   $incidents = $state->get('radioactivity_incidents', []);
diff --git a/radioactivity.module b/radioactivity.module
index a24fe12..4527cb0 100644
--- a/radioactivity.module
+++ b/radioactivity.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\field\Entity\FieldStorageConfig;
+use Drupal\radioactivity\RadioactivityProcessorInterface;
 /**
  * @file
  * Provides a field type which can be used as a hotness metric.
@@ -67,7 +69,7 @@ function radioactivity_entity_load($entities, $type) {
   // the field actually has something in it to trigger the formatters.
   $fields = radioactivity_get_field_names();
 
-  /** @var \Drupal\Core\Entity\FieldableEntityInterface[] $entities */
+  /** @var FieldableEntityInterface[] $entities */
   foreach ($entities as &$entity) {
     foreach ($fields as $field_name) {
       if (is_a($entity, FieldableEntityInterface::class)
@@ -96,7 +98,7 @@ function radioactivity_get_field_names() {
 
   $entity_type_manager = Drupal::service('entity_type.manager');
 
-  /** @var \Drupal\field\Entity\FieldStorageConfig[] $field_storage_configs */
+  /** @var FieldStorageConfig[] $field_storage_configs */
   if (!$field_storage_configs = $entity_type_manager->getStorage('field_storage_config')->loadByProperties(['type' => 'radioactivity'])) {
     return $fields;
   }
@@ -112,7 +114,7 @@ function radioactivity_get_field_names() {
  * Implements hook_cron().
  */
 function radioactivity_cron() {
-  /** @var \Drupal\radioactivity\RadioactivityProcessorInterface $processor */
+  /** @var RadioactivityProcessorInterface $processor */
   $processor = Drupal::service('radioactivity.processor');
   $processor->processDecay();
   $processor->processIncidents();
@@ -160,7 +162,7 @@ function radioactivity_form_field_config_edit_form_alter(array &$form, FormState
  *
  * @todo Remove in 5.0.0 when the deprecated 'radioactivity' field gets removed.
  */
-function radioactivity_form_field_ui_field_storage_add_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
+function radioactivity_form_field_ui_field_storage_add_form_alter(&$form, FormStateInterface $form_state, $form_id) {
 
   // Hide the deprecated radioactivity field type when no field of this type is
   // currently being used.
diff --git a/radioactivity.views.inc b/radioactivity.views.inc
index 04704f1..66fc2d3 100644
--- a/radioactivity.views.inc
+++ b/radioactivity.views.inc
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\Sql\DefaultTableMapping;
 /**
  * @file
  * Views hook implementations for the radioactivity module.
@@ -19,7 +20,7 @@ function radioactivity_field_views_data(FieldStorageConfigInterface $field_stora
 
   $entity_type_manager = Drupal::entityTypeManager();
   $entity_type_id = $field_storage->getTargetEntityTypeId();
-  /** @var \Drupal\Core\Entity\Sql\DefaultTableMapping $table_mapping */
+  /** @var DefaultTableMapping $table_mapping */
   $table_mapping = $entity_type_manager->getStorage($entity_type_id)->getTableMapping();
 
   foreach ($data as $table_name => $table_data) {
diff --git a/src/Commands/RadioactivityCommands.php b/src/Commands/RadioactivityCommands.php
index deeae3d..6ef1c23 100644
--- a/src/Commands/RadioactivityCommands.php
+++ b/src/Commands/RadioactivityCommands.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\radioactivity\Commands;
 
+use Drupal\radioactivity\RadioactivityReferenceUpdaterInterface;
+use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\radioactivity\radioactivityReferenceUpdaterInterface;
 use Drush\Commands\DrushCommands;
@@ -14,14 +16,14 @@ class RadioactivityCommands extends DrushCommands {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The radioactivity reference updater.
    *
-   * @var \Drupal\radioactivity\RadioactivityReferenceUpdaterInterface
+   * @var RadioactivityReferenceUpdaterInterface
    */
   protected $radioactivityReferenceUpdater;
 
@@ -54,7 +56,7 @@ class RadioactivityCommands extends DrushCommands {
     // @todo Perform this in batches.
     foreach ($entitiesWithoutTarget as $item) {
       $entityStorage = $this->entityTypeManager->getStorage($item['entity_type']);
-      /** @var \Drupal\Core\Entity\FieldableEntityInterface $entity */
+      /** @var FieldableEntityInterface $entity */
       $entity = $entityStorage->load($item['id']);
       $this->radioactivityReferenceUpdater->updateReferenceFields($entity);
     }
diff --git a/src/Controller/EmitController.php b/src/Controller/EmitController.php
index eceb31b..b9b9826 100644
--- a/src/Controller/EmitController.php
+++ b/src/Controller/EmitController.php
@@ -22,14 +22,14 @@ class EmitController implements ContainerInjectionInterface {
   /**
    * The incident storage.
    *
-   * @var \Drupal\radioactivity\IncidentStorageInterface
+   * @var IncidentStorageInterface
    */
   protected IncidentStorageInterface $incidentStorage;
 
   /**
    * Constructs an EmitController object.
    *
-   * @param \Drupal\radioactivity\StorageFactory $storageFactory
+   * @param StorageFactory $storageFactory
    *   Radioactivity storage factory.
    */
   public function __construct(StorageFactory $storageFactory) {
@@ -48,10 +48,10 @@ class EmitController implements ContainerInjectionInterface {
   /**
    * Callback for /radioactivity/emit.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   Response object.
    */
   public function emit(Request $request): JsonResponse {
@@ -89,7 +89,7 @@ class EmitController implements ContainerInjectionInterface {
    * @param string $message
    *   The message content of the response.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The response.
    */
   protected function buildJsonStatusResponse(string $status, string $message): JsonResponse {
diff --git a/src/DefaultIncidentStorage.php b/src/DefaultIncidentStorage.php
index 11d12a8..32088ce 100644
--- a/src/DefaultIncidentStorage.php
+++ b/src/DefaultIncidentStorage.php
@@ -18,23 +18,23 @@ class DefaultIncidentStorage implements IncidentStorageInterface {
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * The serialization class to use.
    *
-   * @var \Drupal\Component\Serialization\SerializationInterface
+   * @var SerializationInterface
    */
   protected $serializer;
 
   /**
    * DefaultIncidentStorage constructor.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Component\Serialization\SerializationInterface $serializer
+   * @param SerializationInterface $serializer
    *   The serialization class to use.
    */
   public function __construct(Connection $connection, SerializationInterface $serializer) {
@@ -94,7 +94,7 @@ class DefaultIncidentStorage implements IncidentStorageInterface {
 
     $incidents = [];
     foreach ($result as $item) {
-      /** @var \Drupal\radioactivity\IncidentInterface $incident */
+      /** @var IncidentInterface $incident */
       $incident = $this->serializer->decode($item->incident);
       $incidents[$incident->getEntityTypeId()][$incident->getEntityId()][] = $incident;
     }
diff --git a/src/EntityOperations.php b/src/EntityOperations.php
index 7f0f9cd..14b8929 100644
--- a/src/EntityOperations.php
+++ b/src/EntityOperations.php
@@ -20,23 +20,23 @@ class EntityOperations implements ContainerInjectionInterface {
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   private ModuleHandlerInterface $moduleHandler;
 
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   private EntityTypeBundleInfoInterface $bundleInfo;
 
   /**
    * EntityOperations constructor.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundleInfo
+   * @param EntityTypeBundleInfoInterface $bundleInfo
    *   The entity type bundle info service.
    */
   public function __construct(ModuleHandlerInterface $moduleHandler, EntityTypeBundleInfoInterface $bundleInfo) {
@@ -57,7 +57,7 @@ class EntityOperations implements ContainerInjectionInterface {
   /**
    * Determines if the entity is moderated by the Content Moderation module.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to check.
    *
    * @return bool
@@ -79,7 +79,7 @@ class EntityOperations implements ContainerInjectionInterface {
   /**
    * Acts on an entity and set published status based on the moderation state.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity being saved.
    *
    * @see hook_entity_presave()
diff --git a/src/Event/EnergyBelowCutoffEvent.php b/src/Event/EnergyBelowCutoffEvent.php
index 8421f61..6b5b673 100644
--- a/src/Event/EnergyBelowCutoffEvent.php
+++ b/src/Event/EnergyBelowCutoffEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\radioactivity\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\ContentEntityInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Represents a 'Energy is below the cutoff level' event.
@@ -17,14 +17,14 @@ class EnergyBelowCutoffEvent extends Event {
   /**
    * The entity.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   public ContentEntityInterface $entity;
 
   /**
    * Constructs the object.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    */
   public function __construct(ContentEntityInterface $entity) {
diff --git a/src/Incident.php b/src/Incident.php
index 4264cbc..db966fb 100644
--- a/src/Incident.php
+++ b/src/Incident.php
@@ -123,7 +123,7 @@ class Incident implements IncidentInterface {
    * @param array $data
    *   Associative array of incident data.
    *
-   * @return \Drupal\radioactivity\IncidentInterface
+   * @return IncidentInterface
    *   An Incident object.
    */
   public static function createFromPostData(array $data) {
@@ -148,7 +148,7 @@ class Incident implements IncidentInterface {
    * @param object $formatter
    *   The formatter in use.
    *
-   * @return \Drupal\radioactivity\IncidentInterface
+   * @return IncidentInterface
    *   The incident object.
    */
   public static function createFromFieldItemsAndFormatter(object $items, object $item, object $formatter) {
diff --git a/src/IncidentStorageInterface.php b/src/IncidentStorageInterface.php
index cd3b5bb..1eebb11 100644
--- a/src/IncidentStorageInterface.php
+++ b/src/IncidentStorageInterface.php
@@ -18,7 +18,7 @@ interface IncidentStorageInterface {
   /**
    * Adds an incident to the storage.
    *
-   * @param \Drupal\radioactivity\IncidentInterface $incident
+   * @param IncidentInterface $incident
    *   The incident object.
    */
   public function addIncident(IncidentInterface $incident);
@@ -26,7 +26,7 @@ interface IncidentStorageInterface {
   /**
    * Gets all incidents from the storage.
    *
-   * @return \Drupal\radioactivity\IncidentInterface[]
+   * @return IncidentInterface[]
    *   Array of incident objects.
    */
   public function getIncidents(): array;
@@ -37,7 +37,7 @@ interface IncidentStorageInterface {
    * @param string $entity_type
    *   Entity type for selection. Default to all entity types.
    *
-   * @return \Drupal\radioactivity\IncidentInterface[][]
+   * @return IncidentInterface[][]
    *   Array of incident objects keyed by entity type (1st) and entity ID (2nd).
    */
   public function getIncidentsByType(string $entity_type = ''): array;
diff --git a/src/Plugin/Field/FieldFormatter/RadioactivityEmitter.php b/src/Plugin/Field/FieldFormatter/RadioactivityEmitter.php
index f5bf265..4256f30 100644
--- a/src/Plugin/Field/FieldFormatter/RadioactivityEmitter.php
+++ b/src/Plugin/Field/FieldFormatter/RadioactivityEmitter.php
@@ -138,7 +138,7 @@ class RadioactivityEmitter extends FormatterBase {
   /**
    * Generate the output appropriate for one field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   One field item.
    *
    * @return string
@@ -151,7 +151,7 @@ class RadioactivityEmitter extends FormatterBase {
   /**
    * Determine if the field should emit energy.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   The field item list of the field.
    *
    * @return bool
diff --git a/src/Plugin/Field/FieldFormatter/RadioactivityReferenceEmitter.php b/src/Plugin/Field/FieldFormatter/RadioactivityReferenceEmitter.php
index 4133e71..3c61d70 100644
--- a/src/Plugin/Field/FieldFormatter/RadioactivityReferenceEmitter.php
+++ b/src/Plugin/Field/FieldFormatter/RadioactivityReferenceEmitter.php
@@ -145,7 +145,7 @@ class RadioactivityReferenceEmitter extends RadioactivityReferenceFormatterBase
   /**
    * Determine if the field should emit energy.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   The field item list of the field.
    *
    * @return bool
diff --git a/src/Plugin/Field/FieldFormatter/RadioactivityValue.php b/src/Plugin/Field/FieldFormatter/RadioactivityValue.php
index 031c017..e7da00c 100644
--- a/src/Plugin/Field/FieldFormatter/RadioactivityValue.php
+++ b/src/Plugin/Field/FieldFormatter/RadioactivityValue.php
@@ -74,7 +74,7 @@ class RadioactivityValue extends FormatterBase {
   /**
    * Generate the output appropriate for one field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   One field item.
    *
    * @return string
diff --git a/src/Plugin/Field/FieldWidget/RadioactivityReferenceWidget.php b/src/Plugin/Field/FieldWidget/RadioactivityReferenceWidget.php
index 542bffe..a18fc51 100644
--- a/src/Plugin/Field/FieldWidget/RadioactivityReferenceWidget.php
+++ b/src/Plugin/Field/FieldWidget/RadioactivityReferenceWidget.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\radioactivity\Plugin\Field\FieldWidget;
 
+use Drupal\radioactivity\RadioactivityInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemListInterface;
@@ -62,7 +63,7 @@ class RadioactivityReferenceWidget extends WidgetBase {
       $defaultEnergy = $items[$delta]->entity->getEnergy();
     }
 
-    /** @var \Drupal\radioactivity\RadioactivityInterface $radioactivityEntity */
+    /** @var RadioactivityInterface $radioactivityEntity */
     $radioactivityEntity = $hasTargetEntity ? $items[$delta]->entity : Radioactivity::create([
       'energy' => $defaultEnergy,
     ]);
@@ -124,9 +125,9 @@ class RadioactivityReferenceWidget extends WidgetBase {
   /**
    * Initializes the translation form state.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
-   * @param \Drupal\Core\Entity\EntityInterface $host
+   * @param EntityInterface $host
    *   Host entity of the field.
    */
   protected function initIsTranslating(FormStateInterface $form_state, EntityInterface $host) {
diff --git a/src/Plugin/QueueWorker/RadioactivityQueueWorkerBase.php b/src/Plugin/QueueWorker/RadioactivityQueueWorkerBase.php
index 6261cde..6b3024d 100644
--- a/src/Plugin/QueueWorker/RadioactivityQueueWorkerBase.php
+++ b/src/Plugin/QueueWorker/RadioactivityQueueWorkerBase.php
@@ -15,7 +15,7 @@ abstract class RadioactivityQueueWorkerBase extends QueueWorkerBase implements C
   /**
    * The radioactivity.processor service.
    *
-   * @var \Drupal\radioactivity\RadioactivityProcessorInterface
+   * @var RadioactivityProcessorInterface
    */
   protected RadioactivityProcessorInterface $radioactivityProcessor;
 
@@ -28,7 +28,7 @@ abstract class RadioactivityQueueWorkerBase extends QueueWorkerBase implements C
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\radioactivity\RadioactivityProcessorInterface $radioactivity_processor
+   * @param RadioactivityProcessorInterface $radioactivity_processor
    *   The radioactivity.processor service.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, RadioactivityProcessorInterface $radioactivity_processor) {
diff --git a/src/RadioactivityLazyBuilder.php b/src/RadioactivityLazyBuilder.php
index 0f76247..9323132 100644
--- a/src/RadioactivityLazyBuilder.php
+++ b/src/RadioactivityLazyBuilder.php
@@ -14,14 +14,14 @@ class RadioactivityLazyBuilder implements TrustedCallbackInterface {
   /**
    * The radioactivity entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected EntityStorageInterface $radioactivityStorage;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -53,7 +53,7 @@ class RadioactivityLazyBuilder implements TrustedCallbackInterface {
    */
   public function buildReferencedValue(int $entityId, ?int $decimals = NULL, string $decimalSeparator = '.', string $thousandsSeparator = ','): array {
 
-    /** @var \Drupal\radioactivity\RadioactivityInterface $entity */
+    /** @var RadioactivityInterface $entity */
     $entity = $this->radioactivityStorage->load($entityId);
     if (empty($entity)) {
       return [];
diff --git a/src/RadioactivityProcessor.php b/src/RadioactivityProcessor.php
index 8a85132..ef43e34 100644
--- a/src/RadioactivityProcessor.php
+++ b/src/RadioactivityProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\radioactivity;
 
+use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
@@ -24,28 +25,28 @@ class RadioactivityProcessor implements RadioactivityProcessorInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;
 
   /**
    * The state key-value storage.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected StateInterface $state;
 
   /**
    * The radioactivity logger.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected LoggerChannelInterface $log;
 
   /**
    * The radioactivity storage.
    *
-   * @var \Drupal\radioactivity\IncidentStorageInterface
+   * @var IncidentStorageInterface
    */
   protected IncidentStorageInterface $storage;
 
@@ -59,33 +60,33 @@ class RadioactivityProcessor implements RadioactivityProcessorInterface {
   /**
    * The queue factory service.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected QueueFactory $queue;
 
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected EventDispatcherInterface $eventDispatcher;
 
   /**
    * Constructs a Radioactivity processor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The key-value storage.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger.
-   * @param \Drupal\radioactivity\StorageFactory $storage
+   * @param StorageFactory $storage
    *   The storage factory service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Queue\QueueFactory $queue
+   * @param QueueFactory $queue
    *   The queue factory service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, StateInterface $state, LoggerChannelFactoryInterface $logger_factory, StorageFactory $storage, TimeInterface $time, QueueFactory $queue, EventDispatcherInterface $event_dispatcher) {
@@ -186,12 +187,12 @@ class RadioactivityProcessor implements RadioactivityProcessorInterface {
    * @param string $type
    *   The type of fields to get.
    *
-   * @return \Drupal\field\FieldStorageConfigInterface[]
+   * @return FieldStorageConfigInterface[]
    *   The configurations.
    */
   protected function getRadioactivityFieldsConfig(string $type): array {
 
-    /** @var \Drupal\field\Entity\FieldStorageConfig[] $fieldConfigs */
+    /** @var FieldStorageConfig[] $fieldConfigs */
     $fieldConfigIds = $this->entityTypeManager
       ->getStorage('field_storage_config')
       ->getQuery()
@@ -202,7 +203,7 @@ class RadioactivityProcessor implements RadioactivityProcessorInterface {
       return [];
     }
 
-    /** @var \Drupal\field\FieldStorageConfigInterface[] $configs */
+    /** @var FieldStorageConfigInterface[] $configs */
     $configs = $this->entityTypeManager
       ->getStorage('field_storage_config')
       ->loadMultiple($fieldConfigIds);
@@ -217,7 +218,7 @@ class RadioactivityProcessor implements RadioactivityProcessorInterface {
    * have passed since the last cron run. The number of seconds is stored in
    * 'granularity' field setting.
    *
-   * @param \Drupal\field\FieldStorageConfigInterface $fieldConfig
+   * @param FieldStorageConfigInterface $fieldConfig
    *   Configuration of the field to be checked.
    *
    * @return bool
@@ -237,7 +238,7 @@ class RadioactivityProcessor implements RadioactivityProcessorInterface {
   /**
    * Update entities attached to given field storage.
    *
-   * @param \Drupal\field\FieldStorageConfigInterface $fieldConfig
+   * @param FieldStorageConfigInterface $fieldConfig
    *   Configuration of the field to be processed.
    * @param bool $isReference
    *   The field is a radioactivity_reference field.
@@ -289,7 +290,7 @@ class RadioactivityProcessor implements RadioactivityProcessorInterface {
     $halfLife = $fieldConfig->getSetting('halflife');
     $cutoff = $fieldConfig->getSetting('cutoff');
 
-    /** @var \Drupal\Core\Entity\ContentEntityInterface[] $entities */
+    /** @var ContentEntityInterface[] $entities */
     $entities = $this->entityTypeManager
       ->getStorage($entityType)
       ->loadMultiple($entityIds);
@@ -308,7 +309,7 @@ class RadioactivityProcessor implements RadioactivityProcessorInterface {
         $isReference = $field->getFieldDefinition()->getType() === 'radioactivity_reference';
 
         if ($isReference) {
-          /** @var \Drupal\radioactivity\RadioactivityInterface $radioactivityEntity */
+          /** @var RadioactivityInterface $radioactivityEntity */
           $radioactivityEntity = $field->entity;
           if ($radioactivityEntity) {
             $newEnergy = $this->calculateEnergy($radioactivityEntity->getEnergy(), $radioactivityEntity->getTimestamp(), $profile, $halfLife);
@@ -401,7 +402,7 @@ class RadioactivityProcessor implements RadioactivityProcessorInterface {
    * This is needed for Rules integration, but can be used by any module that
    * wants to use events.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to use for the event.
    */
   private function dispatchBelowCutoffEvent(ContentEntityInterface $entity) {
@@ -441,15 +442,15 @@ class RadioactivityProcessor implements RadioactivityProcessorInterface {
    * {@inheritdoc}
    */
   public function queueProcessIncidents(string $entityType, array $entityIncidents) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface[] $entities */
+    /** @var ContentEntityInterface[] $entities */
     $entities = $this->entityTypeManager->getStorage($entityType)->loadMultiple(array_keys($entityIncidents));
 
     foreach ($entities as $entity) {
       $hostEntityUpdated = FALSE;
-      /** @var \Drupal\radioactivity\RadioactivityInterface[] $referencedEntities */
+      /** @var RadioactivityInterface[] $referencedEntities */
       $referencedEntities = [];
 
-      /** @var \Drupal\radioactivity\IncidentInterface $incident */
+      /** @var IncidentInterface $incident */
       foreach ($entityIncidents[$entity->id()] as $incident) {
         // Update the energy, but not the timestamp. The latter is used to
         // calculate decay and should not be updated when saving the incident
diff --git a/src/RadioactivityProcessorInterface.php b/src/RadioactivityProcessorInterface.php
index c758dc0..7aaddfe 100644
--- a/src/RadioactivityProcessorInterface.php
+++ b/src/RadioactivityProcessorInterface.php
@@ -47,7 +47,7 @@ interface RadioactivityProcessorInterface {
   /**
    * Queue processing of Radioactivity decays.
    *
-   * @param \Drupal\field\FieldStorageConfigInterface $fieldConfig
+   * @param FieldStorageConfigInterface $fieldConfig
    *   Configuration of the field to be processed.
    * @param array $entityIds
    *   Entity IDs to be processed.
@@ -67,7 +67,7 @@ interface RadioactivityProcessorInterface {
    *
    * @param string $entityType
    *   Incident entity type.
-   * @param \Drupal\radioactivity\IncidentInterface[][] $entityIncidents
+   * @param IncidentInterface[][] $entityIncidents
    *   Radioactivity incidents grouped per entity ID (1st) and incident ID
    *   (2nd).
    */
diff --git a/src/RadioactivityReferenceUpdater.php b/src/RadioactivityReferenceUpdater.php
index fefb63f..fa52d75 100644
--- a/src/RadioactivityReferenceUpdater.php
+++ b/src/RadioactivityReferenceUpdater.php
@@ -16,21 +16,21 @@ class RadioactivityReferenceUpdater implements RadioactivityReferenceUpdaterInte
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected EntityFieldManagerInterface $entityFieldManager;
 
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected TimeInterface $dateTime;
 
@@ -44,11 +44,11 @@ class RadioactivityReferenceUpdater implements RadioactivityReferenceUpdaterInte
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   The entity field manager.
-   * @param \Drupal\Component\Datetime\TimeInterface $dateTime
+   * @param TimeInterface $dateTime
    *   The time service.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, EntityFieldManagerInterface $entityFieldManager, TimeInterface $dateTime) {
@@ -208,7 +208,7 @@ class RadioactivityReferenceUpdater implements RadioactivityReferenceUpdaterInte
    * @param string $langcode
    *   The language code.
    *
-   * @return \Drupal\radioactivity\RadioactivityInterface
+   * @return RadioactivityInterface
    *   The created entity.
    */
   protected function createRadioactivity(int $timestamp, $energy, string $langcode): RadioactivityInterface {
@@ -264,7 +264,7 @@ class RadioactivityReferenceUpdater implements RadioactivityReferenceUpdaterInte
   /**
    * Returns the configured default energy of a field.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity where the field is located.
    * @param string $fieldName
    *   The field for which to ghe the value.
diff --git a/src/RadioactivityReferenceUpdaterInterface.php b/src/RadioactivityReferenceUpdaterInterface.php
index bd65726..1522273 100644
--- a/src/RadioactivityReferenceUpdaterInterface.php
+++ b/src/RadioactivityReferenceUpdaterInterface.php
@@ -39,7 +39,7 @@ interface RadioactivityReferenceUpdaterInterface {
    *
    * Note that the entity may be (re-)saved during this process.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity to use.
    *
    * @return bool
diff --git a/src/RestIncidentStorage.php b/src/RestIncidentStorage.php
index b5afd35..eb96e87 100644
--- a/src/RestIncidentStorage.php
+++ b/src/RestIncidentStorage.php
@@ -103,7 +103,7 @@ class RestIncidentStorage implements RestIncidentStorageInterface {
   protected function getDefaultEndpoint(): string {
     global $base_url;
 
-    return $base_url . '/' . drupal_get_path('module', 'radioactivity') . '/endpoints/file/rest.php';
+    return $base_url . '/' . \Drupal::service('extension.list.module')->getPath('radioactivity') . '/endpoints/file/rest.php';
   }
 
   /**
diff --git a/src/StorageFactory.php b/src/StorageFactory.php
index b1002d3..2fbea00 100644
--- a/src/StorageFactory.php
+++ b/src/StorageFactory.php
@@ -14,23 +14,23 @@ class StorageFactory {
   /**
    * The radioactivity storage configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected ImmutableConfig $config;
 
   /**
    * The class resolver.
    *
-   * @var \Drupal\Core\DependencyInjection\ClassResolverInterface
+   * @var ClassResolverInterface
    */
   protected ClassResolverInterface $classResolver;
 
   /**
    * StorageFactory constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The configuration factory.
-   * @param \Drupal\Core\DependencyInjection\ClassResolverInterface $classResolver
+   * @param ClassResolverInterface $classResolver
    *   The class resolver.
    */
   public function __construct(ConfigFactoryInterface $configFactory, ClassResolverInterface $classResolver) {
@@ -44,7 +44,7 @@ class StorageFactory {
    * @param string $type
    *   The type of storage to get.
    *
-   * @return \Drupal\radioactivity\IncidentStorageInterface
+   * @return IncidentStorageInterface
    *   Instance of the requested storage.
    */
   public function get(string $type): IncidentStorageInterface {
@@ -65,14 +65,14 @@ class StorageFactory {
         $instance = $this->classResolver->getInstanceFromDefinition('radioactivity.default_incident_storage');
     }
 
-    /** @var \Drupal\radioactivity\IncidentStorageInterface $instance */
+    /** @var IncidentStorageInterface $instance */
     return $instance;
   }
 
   /**
    * Get the configured incident storage.
    *
-   * @return \Drupal\radioactivity\IncidentStorageInterface
+   * @return IncidentStorageInterface
    *   The configured storage instance.
    */
   public function getConfiguredStorage(): IncidentStorageInterface {
diff --git a/tests/src/FunctionalJavascript/EmitTest.php b/tests/src/FunctionalJavascript/EmitTest.php
index 422c39b..a52e393 100644
--- a/tests/src/FunctionalJavascript/EmitTest.php
+++ b/tests/src/FunctionalJavascript/EmitTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\radioactivity\FunctionalJavascript;
 
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\entity_test\Entity\EntityTestRevPub;
 use Drupal\Tests\Traits\Core\CronRunTrait;
 
 /**
@@ -47,7 +49,7 @@ class EmitTest extends RadioactivityFunctionalJavascriptTestBase {
     $this->cronRun();
 
     // The entity has updated values, reload it.
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = \Drupal::entityTypeManager()
       ->getStorage($this->entityType)
       ->load($entity->id());
@@ -72,7 +74,7 @@ class EmitTest extends RadioactivityFunctionalJavascriptTestBase {
     $this->createEnergyFormDisplay($this->fieldName);
     $this->createEmitterViewDisplay($this->fieldName, 1, TRUE);
 
-    /** @var \Drupal\entity_test\Entity\EntityTestRevPub $entity */
+    /** @var EntityTestRevPub $entity */
     $entity = $this->createContent();
     $this->assertIncidentCount(0);
 
diff --git a/tests/src/FunctionalJavascript/RadioactivityFunctionalJavascriptTestBase.php b/tests/src/FunctionalJavascript/RadioactivityFunctionalJavascriptTestBase.php
index ecc8343..a8ad092 100644
--- a/tests/src/FunctionalJavascript/RadioactivityFunctionalJavascriptTestBase.php
+++ b/tests/src/FunctionalJavascript/RadioactivityFunctionalJavascriptTestBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\radioactivity\FunctionalJavascript;
 
+use Drupal\user\Entity\User;
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\Tests\radioactivity\Traits\RadioactivityFunctionTestTrait;
 
@@ -22,14 +24,14 @@ abstract class RadioactivityFunctionalJavascriptTestBase extends WebDriverTestBa
   /**
    * An admin user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $adminUser;
 
   /**
    * The entity that holds the energy field(s).
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $entity;
 
diff --git a/tests/src/Kernel/DefaultIncidentStorageTest.php b/tests/src/Kernel/DefaultIncidentStorageTest.php
index a11f1f6..da821e8 100644
--- a/tests/src/Kernel/DefaultIncidentStorageTest.php
+++ b/tests/src/Kernel/DefaultIncidentStorageTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\radioactivity\Kernel;
 
+use Drupal\radioactivity\DefaultIncidentStorage;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\radioactivity\Incident;
 use Drupal\radioactivity\IncidentInterface;
@@ -23,7 +24,7 @@ class DefaultIncidentStorageTest extends KernelTestBase {
   /**
    * The system under test.
    *
-   * @var \Drupal\radioactivity\DefaultIncidentStorage
+   * @var DefaultIncidentStorage
    */
   protected $sut;
 
diff --git a/tests/src/Kernel/RadioactivityFieldTypeTest.php b/tests/src/Kernel/RadioactivityFieldTypeTest.php
index b914b78..2ad680c 100644
--- a/tests/src/Kernel/RadioactivityFieldTypeTest.php
+++ b/tests/src/Kernel/RadioactivityFieldTypeTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\radioactivity\Kernel;
 
+use Drupal\Core\Entity\Entity\EntityViewDisplay;
+use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\Tests\field\Kernel\FieldKernelTestBase;
@@ -26,14 +28,14 @@ class RadioactivityFieldTypeTest extends FieldKernelTestBase {
   /**
    * The entity view display object.
    *
-   * @var \Drupal\Core\Entity\Entity\EntityViewDisplay
+   * @var EntityViewDisplay
    */
   protected $entityViewDisplay;
 
   /**
    * The entity that contains the energy field.
    *
-   * @var \Drupal\Core\Entity\FieldableEntityInterface
+   * @var FieldableEntityInterface
    */
   protected $entity;
 
@@ -51,9 +53,7 @@ class RadioactivityFieldTypeTest extends FieldKernelTestBase {
     parent::setUp();
 
     // Mock Time::getRequestTime.
-    $dateTime = $this->getMockBuilder(TimeInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $dateTime = $this->createMock(TimeInterface::class);
     $dateTime
       ->expects($this->any())
       ->method('getRequestTime')
diff --git a/tests/src/Kernel/RadioactivityReferenceValueFormatterTest.php b/tests/src/Kernel/RadioactivityReferenceValueFormatterTest.php
index a140c65..fb866ed 100644
--- a/tests/src/Kernel/RadioactivityReferenceValueFormatterTest.php
+++ b/tests/src/Kernel/RadioactivityReferenceValueFormatterTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\radioactivity\Kernel;
 
+use Drupal\Core\Entity\Entity\EntityViewDisplay;
+use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\radioactivity\Entity\Radioactivity;
 use Drupal\Tests\field\Kernel\FieldKernelTestBase;
@@ -26,14 +28,14 @@ class RadioactivityReferenceValueFormatterTest extends FieldKernelTestBase {
   /**
    * The entity view display object.
    *
-   * @var \Drupal\Core\Entity\Entity\EntityViewDisplay
+   * @var EntityViewDisplay
    */
   protected $entityViewDisplay;
 
   /**
    * The entity that contains the energy field.
    *
-   * @var \Drupal\Core\Entity\FieldableEntityInterface
+   * @var FieldableEntityInterface
    */
   protected $entity;
 
diff --git a/tests/src/Kernel/RadioactivityValueFormatterTest.php b/tests/src/Kernel/RadioactivityValueFormatterTest.php
index ec2c115..388ff5d 100644
--- a/tests/src/Kernel/RadioactivityValueFormatterTest.php
+++ b/tests/src/Kernel/RadioactivityValueFormatterTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\radioactivity\Kernel;
 
+use Drupal\Core\Entity\Entity\EntityViewDisplay;
+use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\Tests\field\Kernel\FieldKernelTestBase;
 use Drupal\Tests\radioactivity\Traits\RadioactivityFunctionTestTrait;
@@ -25,14 +27,14 @@ class RadioactivityValueFormatterTest extends FieldKernelTestBase {
   /**
    * The entity view display object.
    *
-   * @var \Drupal\Core\Entity\Entity\EntityViewDisplay
+   * @var EntityViewDisplay
    */
   protected $entityViewDisplay;
 
   /**
    * The entity that contains the energy field.
    *
-   * @var \Drupal\Core\Entity\FieldableEntityInterface
+   * @var FieldableEntityInterface
    */
   protected $entity;
 
diff --git a/tests/src/Traits/RadioactivityFunctionTestTrait.php b/tests/src/Traits/RadioactivityFunctionTestTrait.php
index f323240..4cc6629 100644
--- a/tests/src/Traits/RadioactivityFunctionTestTrait.php
+++ b/tests/src/Traits/RadioactivityFunctionTestTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\radioactivity\Traits;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\Core\Entity\Entity\EntityViewDisplay;
 use Drupal\Core\Entity\EntityInterface;
@@ -205,7 +206,7 @@ trait RadioactivityFunctionTestTrait {
    * @param string $display
    *   The field display type.
    *
-   * @return \Drupal\Core\Entity\Entity\EntityViewDisplay
+   * @return EntityViewDisplay
    *   The entity view display object.
    */
   protected function createEmitterViewDisplay($fieldName, $energy = 10, $display = TRUE) {
@@ -234,7 +235,7 @@ trait RadioactivityFunctionTestTrait {
    * @param int $decimals
    *   Number of decimals to display.
    *
-   * @return \Drupal\Core\Entity\Entity\EntityViewDisplay
+   * @return EntityViewDisplay
    *   The entity view display object.
    */
   protected function createValueViewDisplay($fieldName, $decimals = 0) {
@@ -259,7 +260,7 @@ trait RadioactivityFunctionTestTrait {
    * @param int $decimals
    *   Number of decimals to display.
    *
-   * @return \Drupal\Core\Entity\Entity\EntityViewDisplay
+   * @return EntityViewDisplay
    *   The entity view display object.
    */
   protected function createReferenceValueViewDisplay($fieldName, $decimals = 0) {
@@ -346,12 +347,12 @@ trait RadioactivityFunctionTestTrait {
   /**
    * Creates an entity.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The created entity.
    */
   public function createContent() {
 
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = \Drupal::entityTypeManager()->getStorage($this->entityType)->create([
       'type' => $this->entityType,
       'title' => $this->randomString(),
@@ -364,7 +365,7 @@ trait RadioactivityFunctionTestTrait {
   /**
    * Assert the energy values from a field.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The host entity of the field.
    * @param string $fieldName
    *   The field to be asserted.
diff --git a/tests/src/Unit/EmitControllerTest.php b/tests/src/Unit/EmitControllerTest.php
index fe6c63b..0cf41cb 100644
--- a/tests/src/Unit/EmitControllerTest.php
+++ b/tests/src/Unit/EmitControllerTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\radioactivity\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ProphecyInterface;
+use Drupal\radioactivity\DefaultIncidentStorage;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Site\Settings;
 use Drupal\radioactivity\Controller\EmitController;
@@ -19,31 +22,32 @@ use Symfony\Component\HttpFoundation\Request;
  */
 class EmitControllerTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The request received by the controller.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * The dependency injection container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var ContainerInterface|ProphecyInterface
    */
   protected $container;
 
   /**
    * The incident storage factory.
    *
-   * @var \Drupal\radioactivity\StorageFactory
+   * @var StorageFactory
    */
   protected $incidentStorageFactory;
 
   /**
    * The default incident storage.
    *
-   * @var \Drupal\radioactivity\DefaultIncidentStorage
+   * @var DefaultIncidentStorage
    */
   protected $defaultIncidentStorage;
 
diff --git a/tests/src/Unit/RadioactivityLazyBuilderTest.php b/tests/src/Unit/RadioactivityLazyBuilderTest.php
index 7f66b44..3f2fa13 100644
--- a/tests/src/Unit/RadioactivityLazyBuilderTest.php
+++ b/tests/src/Unit/RadioactivityLazyBuilderTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\radioactivity\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\radioactivity\RadioactivityInterface;
@@ -15,10 +17,11 @@ use Prophecy\Argument;
  */
 class RadioactivityLazyBuilderTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Mock entity type manager.
    *
-   * @var \PHPUnit\Framework\MockObject\MockObject|\Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var MockObject|EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
diff --git a/tests/src/Unit/RadioactivityProcessorTest.php b/tests/src/Unit/RadioactivityProcessorTest.php
index 0579695..cb41948 100644
--- a/tests/src/Unit/RadioactivityProcessorTest.php
+++ b/tests/src/Unit/RadioactivityProcessorTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\radioactivity\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Prophecy\Prophecy\ProphecyInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
@@ -34,73 +37,74 @@ use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 class RadioactivityProcessorTest extends UnitTestCase {
 
 
+  use ProphecyTrait;
   /**
    * The radioactivity processor under test.
    *
-   * @var \Drupal\radioactivity\RadioactivityProcessorInterface
+   * @var RadioactivityProcessorInterface
    */
   protected $sut;
 
   /**
    * Mock entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Mock field storage configuration.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $fieldStorageConfig;
 
   /**
    * Mock state system.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * Mock logger factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;
 
   /**
    * Mock Radioactivity logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $loggerChannel;
 
   /**
    * The radioactivity storage factory.
    *
-   * @var \Drupal\radioactivity\StorageFactory
+   * @var StorageFactory
    */
   protected $storage;
 
   /**
    * The radioactivity incident storage.
    *
-   * @var \Drupal\radioactivity\IncidentStorageInterface
+   * @var IncidentStorageInterface
    */
   protected $incidentStorage;
 
   /**
    * The queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var EventDispatcherInterface|ProphecyInterface
    */
   protected $eventDispatcher;
 
@@ -264,10 +268,10 @@ class RadioactivityProcessorTest extends UnitTestCase {
     $language = $this->prophesize(LanguageInterface::class);
     $language->getId()->willReturn($langcode);
 
-    /** @var \Drupal\Core\Entity\EntityTypeInterface $entityType */
+    /** @var EntityTypeInterface $entityType */
     $entityType = $this->prophesize(EntityTypeInterface::class);
     $entityType->isRevisionable()->willReturn(FALSE);
-    /** @var \Drupal\Core\Entity\ContentEntityInterface|\Drupal\Core\Entity\EntityPublishedInterface $entity */
+    /** @var ContentEntityInterface|EntityPublishedInterface $entity */
     $entity = $this->prophesize(PublishedContentEntityInterface::class);
     $entity->getEntityType()->willReturn($entityType);
     $entity->isPublished()->willReturn($isPublished);
@@ -396,11 +400,11 @@ class RadioactivityProcessorTest extends UnitTestCase {
       'timestamp' => $this->requestTime,
     ];
 
-    /** @var \Drupal\Core\Entity\EntityTypeInterface $entityType */
+    /** @var EntityTypeInterface $entityType */
     $entityType = $this->prophesize(EntityTypeInterface::class);
     $entityType->isRevisionable()->willReturn($isRevisonable);
 
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->prophesize(ContentEntityInterface::class);
     $entity->getEntityType()->willReturn($entityType);
     $entity->id()->willReturn(123);
diff --git a/tests/src/Unit/RadioactivityReferenceUpdaterTest.php b/tests/src/Unit/RadioactivityReferenceUpdaterTest.php
index 4ad1780..ed45934 100644
--- a/tests/src/Unit/RadioactivityReferenceUpdaterTest.php
+++ b/tests/src/Unit/RadioactivityReferenceUpdaterTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\radioactivity\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\node\NodeInterface;
 use Drupal\radioactivity\RadioactivityReferenceUpdater;
@@ -13,6 +14,7 @@ use Drupal\Tests\UnitTestCase;
  */
 class RadioactivityReferenceUpdaterTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * @covers ::hasMissingReferences
    * @dataProvider providerHasMissingReferences
diff --git a/tests/src/Unit/RestIncidentStorageTest.php b/tests/src/Unit/RestIncidentStorageTest.php
index aef8281..d5fd313 100644
--- a/tests/src/Unit/RestIncidentStorageTest.php
+++ b/tests/src/Unit/RestIncidentStorageTest.php
@@ -17,7 +17,7 @@ class RestIncidentStorageTest extends UnitTestCase {
   /**
    * The RestIncidentStorage under test.
    *
-   * @var \Drupal\radioactivity\RestIncidentStorage
+   * @var RestIncidentStorage
    */
   private $sut;
 
@@ -46,9 +46,7 @@ class RestIncidentStorageTest extends UnitTestCase {
    * @covers ::addIncident
    */
   public function testAddIncident() {
-    $incident = $this->getMockBuilder(IncidentInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $incident = $this->createMock(IncidentInterface::class);
 
     $this->expectException("Exception");
     $this->expectExceptionMessage("The Radioactivity rest endpoint expects incidents to be added somewhere else.");
@@ -128,6 +126,7 @@ class RestIncidentStorageTest extends UnitTestCase {
 
   /**
    * @covers ::clearIncidents
+   * @doesNotPerformAssertions
    */
   public function testClearIncidents() {
     $this->sut->expects($this->once())
diff --git a/tests/src/Unit/RestProcessorTest.php b/tests/src/Unit/RestProcessorTest.php
index 00f9fe7..1d2870c 100644
--- a/tests/src/Unit/RestProcessorTest.php
+++ b/tests/src/Unit/RestProcessorTest.php
@@ -15,7 +15,7 @@ class RestProcessorTest extends UnitTestCase {
   /**
    * The Rest Processor under test.
    *
-   * @var \Drupal\radioactivity\RestProcessor
+   * @var RestProcessor
    */
   private $sut;
 
diff --git a/tests/src/Unit/StorageFactoryTest.php b/tests/src/Unit/StorageFactoryTest.php
index 9b99f24..75b91b1 100644
--- a/tests/src/Unit/StorageFactoryTest.php
+++ b/tests/src/Unit/StorageFactoryTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\radioactivity\Unit;
 
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Tests\UnitTestCase;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Config\ImmutableConfig;
@@ -19,21 +20,21 @@ class StorageFactoryTest extends UnitTestCase {
   /**
    * Mocked immutable configuration object.
    *
-   * @var \PHPUnit\Framework\MockObject\MockObject|\Drupal\Core\Config\ImmutableConfig
+   * @var MockObject|ImmutableConfig
    */
   private $config;
 
   /**
    * Mocked class resolver.
    *
-   * @var \PHPUnit\Framework\MockObject\MockObject|\Drupal\Core\DependencyInjection\ClassResolverInterface
+   * @var MockObject|ClassResolverInterface
    */
   private $classResolver;
 
   /**
    * Mocked config factory.
    *
-   * @var \PHPUnit\Framework\MockObject\MockObject|\Drupal\Core\Config\ConfigFactory
+   * @var MockObject|ConfigFactory
    */
   private $configFactory;
 
@@ -62,11 +63,8 @@ class StorageFactoryTest extends UnitTestCase {
       ->will($this->returnValue($this->config));
 
     // Mock the class resolver and the classes it provides.
-    $mockRestStorage = $this->getMockBuilder(RestIncidentStorage::class)
-      ->getMock();
-    $mockDefaultStorage = $this->getMockBuilder(DefaultIncidentStorage::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $mockRestStorage = $this->createMock(RestIncidentStorage::class);
+    $mockDefaultStorage = $this->createMock(DefaultIncidentStorage::class);
 
     $this->classResolver = $this->getMockBuilder(ClassResolverInterface::class)
       ->setMethods(['getInstanceFromDefinition'])
