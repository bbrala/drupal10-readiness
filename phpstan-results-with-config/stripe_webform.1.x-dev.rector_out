modules/contrib/stripe_webform/src/Event/StripeWebformEvents.php
modules/contrib/stripe_webform/src/Event/StripeWebformWebhookEvent.php
modules/contrib/stripe_webform/src/EventSubscriber/StripeWebformEventSubscriber.php
modules/contrib/stripe_webform/src/Plugin/WebformElement/StripeWebformElement.php
modules/contrib/stripe_webform/src/Plugin/WebformHandler/StripeWebformHandler.php
modules/contrib/stripe_webform/stripe_webform.module

3 files with changes
====================

1) modules/contrib/stripe_webform/src/Plugin/WebformHandler/StripeWebformHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\stripe_webform\Plugin\WebformHandler;

+use Stripe\Stripe;
+use Stripe\Customer;
+use Stripe\Charge;
+use Stripe\Subscription;
+use Stripe\Error\Base;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
     /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The token manager.
    *
-   * @var \Drupal\webform\WebformTokenManagerInterface
+   * @var WebformTokenManagerInterface
    */
   protected $tokenManager;

@@ @@
     $data = $this->tokenManager->replace($this->configuration, $webform_submission);

     try {
-      \Stripe\Stripe::setApiKey($config->get('apikey.' . $config->get('environment') . '.secret'));
+      Stripe::setApiKey($config->get('apikey.' . $config->get('environment') . '.secret'));

       $metadata = [
         'uuid' => $uuid,
@@ @@
       if (!empty($data['stripe_customer_create'])) {
         $stripe_customer_create += Yaml::decode($data['stripe_customer_create']);
       }
-      $customer = \Stripe\Customer::create($stripe_customer_create);
+      $customer = Customer::create($stripe_customer_create);

       if (empty($data['plan_id'])) {
         // Charge the Customer instead of the card:
@@ @@
           $stripe_charge_create += Yaml::decode($data['stripe_charge_create']);
         }

-        $charge = \Stripe\Charge::create($stripe_charge_create);
+        $charge = Charge::create($stripe_charge_create);
       }
       else {
         $stripe_subscription_create = [
@@ @@
         if (!empty($data['stripe_subscription_create'])) {
           $stripe_subscription_create += Yaml::decode($data['stripe_subscription_create']);
         }
-        \Stripe\Subscription::create($stripe_subscription_create);
+        Subscription::create($stripe_subscription_create);
       }
     }
-    catch (\Stripe\Error\Base $e) {
-      drupal_set_message($this->t('Stripe error: %error', ['%error' => $e->getMessage()]), 'error');
+    catch (Base $e) {
+      $this->messenger()->addError($this->t('Stripe error: %error', ['%error' => $e->getMessage()]));
     }
  }
    ----------- end diff -----------

Applied rules:
 * DrupalSetMessageRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/stripe_webform/src/EventSubscriber/StripeWebformEventSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\stripe_webform\EventSubscriber;

+use Stripe\Customer;
+use Stripe\Error\Base;
 use Drupal\stripe_webform\Event\StripeWebformWebhookEvent;
 use Drupal\stripe\Event\StripeEvents;
 use Drupal\stripe\Event\StripeWebhookEvent;
@@ @@
   /**
    * The configuration object factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config_factory;

@@ @@
   /**
    * The entity manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entity_type_manager;

@@ @@
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface;
+   * @var EventDispatcherInterface ;
    */
   protected $event_dispatcher;

@@ @@
   /**
    * The iogger interface
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
    *
    * @param EventDispatcherInterface $dispatcher
    *   An EventDispatcherInterface instance.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EventDispatcherInterface $dispatcher, ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, LoggerInterface $logger) {
@@ @@
     elseif (!empty($stripe_event['data']['object']['customer'])) {
       $customer = $stripe_event['data']['object']['customer'];
       try {
-        $customer = \Stripe\Customer::retrieve($customer);
+        $customer = Customer::retrieve($customer);

         if (isset($customer['metadata']['webform_submission_id'])) {
           $metadata = $customer['metadata'];
         }
-      } catch (\Stripe\Error\Base $e) {
+      } catch (Base $e) {
         $this->logger->error('Stripe API Error: ' . $e->getMessage());
       }
     }
@@ @@
       if ($webform_submission) {
         $webhook_event = new StripeWebformWebhookEvent($stripe_event['type'], $webform_submission, $stripe_event);
         $this->event_dispatcher
-          ->dispatch(StripeWebformWebhookEvent::EVENT_NAME, $webhook_event);
+          ->dispatch($webhook_event, StripeWebformWebhookEvent::EVENT_NAME);
       }
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/stripe_webform/src/Event/StripeWebformWebhookEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\stripe_webform\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\webform\WebformSubmissionInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Event that is fired when a webhook related to a webform submission is received
@@ @@
   /**
    * Webform submission entity
    *
-   * @var \Drupal\webform\WebformSubmissionInterface
+   * @var WebformSubmissionInterface
    */
   public $webform_submission;

@@ @@
   /**
    * Constructs the object.
    *
-   * @param \Drupal\webform\WebformSubmissionInterface $entity
+   * @param WebformSubmissionInterface $entity
    *   The webform submission entity
    */
   public function __construct($type, WebformSubmissionInterface $webform_submission, \Stripe\Event $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 3 files have been changed by Rector                                       

