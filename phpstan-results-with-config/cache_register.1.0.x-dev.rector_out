modules/contrib/cache_register/src/Exception/CacheNotSetError.php
modules/contrib/cache_register/src/Exception/CacheRegisterError.php
modules/contrib/cache_register/src/Manager.php
modules/contrib/cache_register/src/ManagerInterface.php
modules/contrib/cache_register/src/Object/Drawer.php
modules/contrib/cache_register/src/Object/DrawerInterface.php
modules/contrib/cache_register/src/Object/Register.php
modules/contrib/cache_register/src/Object/RegisterInterface.php
modules/contrib/cache_register/src/Object/Slot.php
modules/contrib/cache_register/src/Object/SlotBase.php
modules/contrib/cache_register/src/Object/SlotBaseInterface.php
modules/contrib/cache_register/src/Object/SlotInterface.php
modules/contrib/cache_register/tests/src/Kernel/CacheRegisterKernelTestBase.php
modules/contrib/cache_register/tests/src/Kernel/DrawerTest.php
modules/contrib/cache_register/tests/src/Kernel/ManagerTest.php
modules/contrib/cache_register/tests/src/Kernel/RegisterTest.php
modules/contrib/cache_register/tests/src/Kernel/SlotBaseTest.php
modules/contrib/cache_register/tests/src/Kernel/SlotTest.php

14 files with changes
=====================

1) modules/contrib/cache_register/tests/src/Kernel/SlotTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\cache_register\Kernel;

+use Drupal\cache_register\Manager;
 use Drupal\Core\Cache\CacheBackendInterface;

 /**
@@ @@
     // Reopen the slot.
     $slot_2 = $this->createSlotBase('testReopenSlot');
     $slot_cache_2 = $slot_2->getCache();
-    $this->assertEqual($slot_cache_1, $slot_cache_2);
+    $this->assertEquals($slot_cache_1, $slot_cache_2);
   }

   /**
    * @covers ::setCache
    * @dataProvider cacheDataProvider
+   * @doesNotPerformAssertions
    */
   public function testSetCache($data, int $expire = CacheBackendInterface::CACHE_PERMANENT, array $tags = []) {
     $slot = $this->createSlot('testIsCached');
@@ @@

   /**
    * @covers ::getCacheData
+   * @doesNotPerformAssertions
    */
   public function testGetCacheData() {
-    /** @var \Drupal\cache_register\Manager $manager */
+    /** @var Manager $manager */
     $manager = $this->getManager();
     $slot = $manager->openSlot('cr', 'd', 's');
     $this->commonTestGetCacheData($slot);
@@ @@

     // Set the empty cache.
     $slot->setCacheStrict('valid');
-    $this->assertEqual($slot->getCacheData(), 'valid');
+    $this->assertEquals($slot->getCacheData(), 'valid');

     // Try to override existing cache entry.
     $slot->setCacheStrict('invalid');
-    $this->assertEqual($slot->getCacheData(), 'valid');
+    $this->assertEquals($slot->getCacheData(), 'valid');
   }

   /**
@@ @@
    * @dataProvider boolProvider
    */
   public function testDeleteCache(bool $open_register) {
-    /** @var \Drupal\cache_register\Manager $manager */
+    /** @var Manager $manager */
     $manager = $this->getManager();
     $slot = $manager->openSlot('cr', 'd', 's', $open_register);
     $slot->setCache('data');
-    $this->assertEqual('data', $slot->getCacheData());
+    $this->assertEquals('data', $slot->getCacheData());
     $slot->deleteCache();
-    $this->assertEqual(NULL, $slot->getCacheData());
+    $this->assertEquals(NULL, $slot->getCacheData());
     if ($open_register) {
       $this->assertNotContains($slot->id(), array_keys($slot->getRegister()->getList()));
     }
@@ @@
    * @dataProvider boolProvider
    */
   public function testInvalidateCache(bool $open_register) {
-    /** @var \Drupal\cache_register\Manager $manager */
+    /** @var Manager $manager */
     $manager = $this->getManager();
     $slot = $manager->openSlot('cr', 'd', 's', $open_register);
     $slot->setCache('data');
-    $this->assertEqual('data', $slot->getCacheData());
+    $this->assertEquals('data', $slot->getCacheData());
     $slot->invalidateCache();
-    $this->assertEqual(NULL, $slot->getCacheData());
-    $this->assertEqual('data', $slot->getCacheData(TRUE));
+    $this->assertEquals(NULL, $slot->getCacheData());
+    $this->assertEquals('data', $slot->getCacheData(TRUE));

     if ($open_register) {
       $this->assertNotContains($slot->id(), array_keys($slot->getRegister()->getList()));
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/cache_register/tests/src/Kernel/SlotBaseTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\cache_register\Kernel;

+use Drupal\cache_register\Object\SlotBase;
 use Drupal\Core\Cache\CacheBackendInterface;

 /**
@@ @@
    * Ensure slot cache persists reopening.
    */
   public function testReopenSlot() {
-    /** @var \Drupal\cache_register\Object\SlotBase $slot */
+    /** @var SlotBase $slot */
     $slot_1 = $this->createSlotBase('testReopenSlot');
     $cache_data = 'cached_data';
     $this->callMethod(
@@ @@
     // Reopen the slot.
     $slot_2 = $this->createSlotBase('testReopenSlot');
     $slot_cache_2 = $slot_2->getCache();
-    $this->assertEqual($slot_cache_1, $slot_cache_2);
+    $this->assertEquals($slot_cache_1, $slot_cache_2);
   }

   /**
@@ @@
     $slot = $this->createSlotBase('slot', $drawer);

     if (!$open_register) {
-      $this->assertEqual(NULL, $slot->getRegister());
+      $this->assertEquals(NULL, $slot->getRegister());
     }
     else {
       $this->assertInstanceOf('Drupal\cache_register\Object\Register', $slot->getRegister());
@@ @@
    *   Cannot rely on strtotime or associated approaches.
    * @param array $tags
    *   Array value.
+   * @doesNotPerformAssertions
    */
   public function testDoSetCache($data, int $expire = CacheBackendInterface::CACHE_PERMANENT, array $tags = []) {
     $slot = $this->createSlotBase('testIsCached');
@@ @@

     // After caching.
     $slot->getCacheBackend()->set($slot->id(), 'cache_data');
-    $this->assertNotEqual($slot->getCache(), NULL);
+    $this->assertNotEquals($slot->getCache(), NULL);
     $this->assertEquals($slot->getCacheBackend()->get($slot->id()), $slot->getCache());

     // After invalidating the cache.
     $slot->getCacheBackend()->invalidate($slot->id());
     $this->assertEquals(NULL, $slot->getCache());
-    $this->assertNotEqual($slot->getCache(TRUE), NULL);
+    $this->assertNotEquals($slot->getCache(TRUE), NULL);
     $this->assertEquals($slot->getCacheBackend()->get($slot->id()), $slot->getCache());

     // Repopulate and then delete the cache.
@@ @@

     // After caching.
     $slot->getCacheBackend()->set($cid, 'cache_data');
-    $this->assertNotEqual(
-      $this->callMethod($slot, 'doGetCacheData', [FALSE]),
-      NULL
-    );
+    $this->assertNotEquals($this->callMethod($slot, 'doGetCacheData', [FALSE]), NULL);
     $this->assertEquals(
       $slot->getCache()->data,
       $this->callMethod($slot, 'doGetCacheData', [FALSE])
@@ @@
       NULL,
       $this->callMethod($slot, 'doGetCacheData', [FALSE])
     );
-    $this->assertNotEqual(
-      $this->callMethod($slot, 'doGetCacheData', [TRUE]),
-      NULL
-    );
+    $this->assertNotEquals($this->callMethod($slot, 'doGetCacheData', [TRUE]), NULL);
     $this->assertEquals(
       $slot->getCache(TRUE)->data,
       $this->callMethod($slot, 'doGetCacheData', [TRUE])
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertNotEqualRector
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/cache_register/tests/src/Kernel/RegisterTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\cache_register\Kernel;

+use Drupal\cache_register\Manager;
 /**
  * Tests the Register class.
  *
@@ @@
     // Reopen the slot.
     $slot_2 = $this->createSlotBase('testReopenRegister');
     $slot_cache_2 = $slot_2->getCache();
-    $this->assertEqual($slot_cache_1, $slot_cache_2);
+    $this->assertEquals($slot_cache_1, $slot_cache_2);
   }

   /**
@@ @@
    * @covers ::getList
    */
   public function testGetList() {
-    /** @var \Drupal\cache_register\Manager $manager */
+    /** @var Manager $manager */
     $register = $this->createRegister();
-    $this->assertEqual(
-      $register->getCacheBackend()->get($register->id())->data,
-      $register->getList()
-    );
+    $this->assertEquals($register->getCacheBackend()->get($register->id())->data, $register->getList());
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/cache_register/tests/src/Kernel/ManagerTest.php:21

    ---------- begin diff ----------
@@ @@
       $this->assertInstanceOf("Drupal\cache_register\Object\RegisterInterface", $slot->getRegister());
     }
     else {
-      $this->assertEqual(NULL, $slot->getRegister());
+      $this->assertEquals(NULL, $slot->getRegister());
     }
   }

@@ @@
       $this->assertInstanceOf("Drupal\cache_register\Object\RegisterInterface", $drawer->getRegister());
     }
     else {
-      $this->assertEqual(NULL, $drawer->getRegister());
+      $this->assertEquals(NULL, $drawer->getRegister());
     }
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/cache_register/tests/src/Kernel/DrawerTest.php:14

    ---------- begin diff ----------
@@ @@
    */
   public function testId() {
     $drawer = $this->createDrawer('testId', FALSE);
-    $this->assert('testId', $drawer->id());
+    $this->assertTrue('testId', $drawer->id());
   }

   /**
@@ @@
    */
   public function testHasActiveRegister() {
     $drawer = $this->createDrawer('testHasActiveRegister', FALSE);
-    $this->assertEqual(FALSE, $drawer->hasActiveRegister());
+    $this->assertEquals(FALSE, $drawer->hasActiveRegister());

     $this->createRegister($drawer);
-    $this->assertEqual(TRUE, $drawer->hasActiveRegister());
+    $this->assertEquals(TRUE, $drawer->hasActiveRegister());
   }

   /**
@@ @@
    */
   public function testGetRegister() {
     $drawer = $this->createDrawer('cr.d', FALSE);
-    $this->assertEqual(NULL, $drawer->getRegister());
+    $this->assertEquals(NULL, $drawer->getRegister());

     $this->createRegister($drawer);
     $this->assertInstanceOf('\Drupal\cache_register\Object\RegisterInterface', $drawer->getRegister());
@@ @@
     $slot_1->setCache('slot_1_data');
     $slot_2->setCache('slot_2_data');

-    $this->assertNotEqual($drawer->getRegister()->getCache(), NULL);
-    $this->assertNotEqual($slot_1->getCache(), NULL);
-    $this->assertNotEqual($slot_2->getCache(), NULL);
+    $this->assertNotEquals($drawer->getRegister()->getCache(), NULL);
+    $this->assertNotEquals($slot_1->getCache(), NULL);
+    $this->assertNotEquals($slot_2->getCache(), NULL);

     $drawer->invalidate($reopen_register);
     if ($reopen_register) {
-      $this->assertNotEqual($drawer->getRegister()->getCache(), NULL);
+      $this->assertNotEquals($drawer->getRegister()->getCache(), NULL);
     }
     else {
-      $this->assertEqual(NULL, $drawer->getRegister());
+      $this->assertEquals(NULL, $drawer->getRegister());
     }
-    $this->assertEqual(NULL, $slot_1->getCache());
-    $this->assertEqual(NULL, $slot_2->getCache());
+    $this->assertEquals(NULL, $slot_1->getCache());
+    $this->assertEquals(NULL, $slot_2->getCache());
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertNotEqualRector
 * AssertRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/cache_register/tests/src/Kernel/CacheRegisterKernelTestBase.php:49

    ---------- begin diff ----------
@@ @@
    * @param bool $open_register
    *   Whether or not the open the register.
    *
-   * @return \Drupal\cache_register\Object\DrawerInterface
+   * @return DrawerInterface
    *   Returns the drawer object.
    */
   public function createDrawer($drawer_id = '', $open_register = FALSE): DrawerInterface {
@@ @@
    *
    * @param string $slot_ids
    *   The slot IDs.
-   * @param \Drupal\cache_register\Object\DrawerInterface|null $drawer
+   * @param DrawerInterface|null $drawer
    *   The drawer.
    *
-   * @return \Drupal\cache_register\Object\SlotBaseInterface|object
+   * @return SlotBaseInterface|object
    *   Returns the slotbase object.
    */
   public function createSlotBase($slot_ids = 'sid', $drawer = NULL): SlotBaseInterface {
@@ @@
    *
    * @param int $slot_ids
    *   The slot IDs.
-   * @param \Drupal\cache_register\Object\DrawerInterface|null $drawer
+   * @param DrawerInterface|null $drawer
    *   The drawer.
    *
-   * @return \Drupal\cache_register\Object\SlotInterface
+   * @return SlotInterface
    *   Retirns the slot object.
    */
   public function createSlot($slot_ids, $drawer = NULL): SlotInterface {
@@ @@
   /**
    * Creates a Register for testing.
    *
-   * @param \Drupal\cache_register\Object\DrawerInterface|null $drawer
+   * @param DrawerInterface|null $drawer
    *   The drawer.
    *
-   * @return \Drupal\cache_register\Object\RegisterInterface
+   * @return RegisterInterface
    *   The register.
    */
   public function createRegister($drawer = NULL): RegisterInterface {
@@ @@

     // After caching.
     $slot->getCacheBackend()->set($cid, 'cache_data');
-    $this->assertNotEqual($slot->getCacheData(), NULL);
+    $this->assertNotEquals($slot->getCacheData(), NULL);
     $this->assertEquals(
       $slot->getCache()->data,
       $slot->getCacheData()
@@ @@
     // After invalidating the cache.
     $slot->getCacheBackend()->invalidate($slot->id());
     $this->assertEquals(NULL, $slot->getCacheData());
-    $this->assertNotEqual($slot->getCacheData(TRUE), NULL);
+    $this->assertNotEquals($slot->getCacheData(TRUE), NULL);
     $this->assertEquals(
       $slot->getCache(TRUE)->data,
       $slot->getCacheData(TRUE)
@@ @@
   /**
    * Validates/provides a drawer for test slots.
    *
-   * @param \Drupal\cache_register\Object\DrawerInterface|null $drawer
+   * @param DrawerInterface|null $drawer
    *   The drawer, if present.
    *
-   * @return \Drupal\cache_register\Object\DrawerInterface
+   * @return DrawerInterface
    *   The drawer.
    */
   private function slotTestDrawerValidatorProvider(DrawerInterface $drawer = NULL): DrawerInterface {
    ----------- end diff -----------

Applied rules:
 * AssertNotEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/cache_register/src/Object/SlotBaseInterface.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the slots parent drawer.
    *
-   * @return \Drupal\cache_register\Object\DrawerInterface
+   * @return DrawerInterface
    *   The drawer.
    */
   public function getDrawer(): DrawerInterface;
@@ @@
   /**
    * Gets the slot's drawer's register.
    *
-   * @return \Drupal\cache_register\Object\DrawerInterface|null
+   * @return DrawerInterface|null
    *   The drawer.
    */
   public function getRegister(): ?RegisterInterface;
@@ @@
   /**
    * Gets the cache backend.
    *
-   * @return \Drupal\Core\Cache\CacheBackendInterface
+   * @return CacheBackendInterface
    *   The cache backend.
    */
   public function getCacheBackend(): CacheBackendInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/cache_register/src/Object/SlotBase.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The cache backend service.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * The parent CacheRegister.
    *
-   * @var \Drupal\cache_register\Object\DrawerInterface
+   * @var DrawerInterface
    */
   protected $drawer;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/cache_register/src/Object/RegisterInterface.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Add a slot to the register.
    *
-   * @param \Drupal\cache_register\Object\SlotInterface $slot_to_add
+   * @param SlotInterface $slot_to_add
    *   Add slot.
    */
   public function addSlot(SlotInterface $slot_to_add): void;
@@ @@
   /**
    * Remove a slot from the register.
    *
-   * @param \Drupal\cache_register\Object\SlotInterface $slot_to_remove
+   * @param SlotInterface $slot_to_remove
    *   Remove slot.
    */
   public function removeSlot(SlotInterface $slot_to_remove): void;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/cache_register/src/Object/Register.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The constructor.
    *
-   * @param \Drupal\cache_register\Object\DrawerInterface $drawer_to_track
+   * @param DrawerInterface $drawer_to_track
    *   The drawer that this register tracks.
    */
   public function __construct(DrawerInterface $drawer_to_track) {
@@ @@
    *
    * @param string $add_or_remove
    *   Either 'add' or 'remove'.
-   * @param \Drupal\cache_register\Object\SlotInterface $slot_to_add_remove
+   * @param SlotInterface $slot_to_add_remove
    *   The slot we are adding or removing.
    */
   protected function addRemoveSlot(string $add_or_remove, SlotInterface $slot_to_add_remove): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/cache_register/src/Object/DrawerInterface.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the Cache Backend associated with the Drawer.
    *
-   * @return \Drupal\Core\Cache\CacheBackendInterface
+   * @return CacheBackendInterface
    *   The Cache Backend.
    */
   public function getCacheBackend(): CacheBackendInterface;
@@ @@
   /**
    * Gets the Drawer's Register.
    *
-   * @return \Drupal\cache_register\Object\RegisterInterface|null
+   * @return RegisterInterface|null
    *   Returns the drawer's register, or NULL if not initialized.
    */
   public function getRegister(): ?RegisterInterface;
@@ @@
    *   cache entry. You must implement $slot->set($data)
    *   to populate its cache entry.
    *
-   * @return \Drupal\cache_register\Object\SlotInterface
+   * @return SlotInterface
    *   Returns a Slot in the Drawer.
    */
   public function openSlot($slot_ids): SlotInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


12) modules/contrib/cache_register/src/Object/Drawer.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The cache backend service.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * The constructor.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   Cache backend.
    * @param string $drawer_id
    *   Prefixes the cache entry IDs of child Slots.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/cache_register/src/ManagerInterface.php:34

    ---------- begin diff ----------
@@ @@
    *   Drawer is likely to open a large number of slots.
    *   As such, this defaults to FALSE.
    *
-   * @return \Drupal\cache_register\Object\SlotInterface
+   * @return SlotInterface
    *   Returns the slot object.
    */
   public function openSlot(string $implementor_id, $drawer_name, $slot_ids, bool $open_register_if_inactive = FALSE): SlotInterface;
@@ @@
    *   Drawer is likely to open a large number of slots.
    *   As such, this defaults to FALSE.
    *
-   * @return \Drupal\cache_register\Object\DrawerInterface
+   * @return DrawerInterface
    *   Returns the Drawer object.
    */
   public function openDrawer(string $implementor_id, $drawer_name, bool $open_register_if_inactive = FALSE): DrawerInterface;
@@ @@
    *   The name(s) should reflect the data the drawer contains.
    *   Used to construct the cache IDs for the Drawer's slots.
    *
-   * @return \Drupal\cache_register\Object\RegisterInterface
+   * @return RegisterInterface
    *   Returns the register object.
    */
   public function openRegister(string $implementor_id, $drawer_name): RegisterInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/cache_register/src/Manager.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Cache\CacheBackendInterface definition.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * Constructs a new CacheRegisterFactory object.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The CacheBackendInterface.
    */
   public function __construct(CacheBackendInterface $cache) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 14 files have been changed by Rector                                      

