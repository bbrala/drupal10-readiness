diff --git a/modules/rest_views_revisions/src/Plugin/Field/FieldFormatter/EntityReferenceRevisionsExportFormatter.php b/modules/rest_views_revisions/src/Plugin/Field/FieldFormatter/EntityReferenceRevisionsExportFormatter.php
index d882630..9bb156a 100644
--- a/modules/rest_views_revisions/src/Plugin/Field/FieldFormatter/EntityReferenceRevisionsExportFormatter.php
+++ b/modules/rest_views_revisions/src/Plugin/Field/FieldFormatter/EntityReferenceRevisionsExportFormatter.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\rest_views_revisions\Plugin\Field\FieldFormatter;
 
+use Symfony\Component\DependencyInjection\Exception\ServiceCircularReferenceException;
+use Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ -38,7 +40,7 @@ class EntityReferenceRevisionsExportFormatter extends EntityReferenceExportForma
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ -48,11 +50,11 @@ class EntityReferenceRevisionsExportFormatter extends EntityReferenceExportForma
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
    * @param \Drupal\entity_reference_revisions\Plugin\Field\FieldFormatter\EntityReferenceRevisionsEntityFormatter $entityFormatter
    *   The entity_reference_revisions formatter.
@@ -85,8 +87,8 @@ class EntityReferenceRevisionsExportFormatter extends EntityReferenceExportForma
   /**
    * {@inheritdoc}
    *
-   * @throws \Symfony\Component\DependencyInjection\Exception\ServiceCircularReferenceException
-   * @throws \Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException
+   * @throws ServiceCircularReferenceException
+   * @throws ServiceNotFoundException
    */
   public static function create(ContainerInterface $container,
                                 array $configuration,
diff --git a/rest_views.module b/rest_views.module
index 61a17ac..27101e4 100644
--- a/rest_views.module
+++ b/rest_views.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\Core\Extension\ModuleExtensionList;
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\Core\Extension\ModuleInstallerInterface;
 /**
  * @file
  * Provides a new Views Field plugin for all entity fields.
@@ -35,11 +38,11 @@ function rest_views_views_data_alter(array &$data) {
  * Implements hook_modules_installed().
  */
 function rest_views_modules_installed($modules) {
-  /** @var \Drupal\Core\Extension\ModuleExtensionList $availableModules */
+  /** @var ModuleExtensionList $availableModules */
   $availableModules = Drupal::service('extension.list.module');
-  /** @var \Drupal\Core\Extension\ModuleHandlerInterface $installedModules */
+  /** @var ModuleHandlerInterface $installedModules */
   $installedModules = Drupal::service('module_handler');
-  /** @var \Drupal\Core\Extension\ModuleInstallerInterface $moduleInstaller */
+  /** @var ModuleInstallerInterface $moduleInstaller */
   $moduleInstaller = Drupal::service('module_installer');
 
   $to_install = [];
diff --git a/src/Normalizer/DataNormalizer.php b/src/Normalizer/DataNormalizer.php
index 4265d02..b09b430 100644
--- a/src/Normalizer/DataNormalizer.php
+++ b/src/Normalizer/DataNormalizer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\rest_views\Normalizer;
 
+use Symfony\Component\Serializer\Normalizer\NormalizerInterface;
 use Drupal\rest_views\SerializedData;
 use Drupal\serialization\Normalizer\NormalizerBase;
 
@@ -24,7 +25,7 @@ class DataNormalizer extends NormalizerBase {
    */
   public function normalize($object, $format = NULL, array $context = []) {
     /** @var \Drupal\rest_views\SerializedData $object */
-    /** @var \Symfony\Component\Serializer\Normalizer\NormalizerInterface $normalizer */
+    /** @var NormalizerInterface $normalizer */
     $normalizer = $this->serializer;
     return $normalizer->normalize($object->getData());
   }
diff --git a/src/Normalizer/RenderNormalizer.php b/src/Normalizer/RenderNormalizer.php
index d189d81..3da71d5 100644
--- a/src/Normalizer/RenderNormalizer.php
+++ b/src/Normalizer/RenderNormalizer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\rest_views\Normalizer;
 
+use Symfony\Component\Serializer\Normalizer\NormalizerInterface;
 use Drupal\Core\Render\RendererInterface;
 use Drupal\rest_views\RenderableData;
 use Drupal\serialization\Normalizer\NormalizerBase;
@@ -23,14 +24,14 @@ class RenderNormalizer extends NormalizerBase {
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * DataNormalizer constructor.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    */
   public function __construct(RendererInterface $renderer) {
@@ -44,7 +45,7 @@ class RenderNormalizer extends NormalizerBase {
    */
   public function normalize($object, $format = NULL, array $context = []) {
     /** @var \Drupal\rest_views\SerializedData $object */
-    /** @var \Symfony\Component\Serializer\Normalizer\NormalizerInterface $normalizer */
+    /** @var NormalizerInterface $normalizer */
     $normalizer = $this->serializer;
     $data = $object->getData();
     return $normalizer->normalize($this->renderer->render($data));
diff --git a/src/Plugin/Field/FieldFormatter/EntityReferenceExportFormatter.php b/src/Plugin/Field/FieldFormatter/EntityReferenceExportFormatter.php
index 519c2b1..65138db 100644
--- a/src/Plugin/Field/FieldFormatter/EntityReferenceExportFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/EntityReferenceExportFormatter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\rest_views\Plugin\Field\FieldFormatter;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\Plugin\Field\FieldFormatter\EntityReferenceEntityFormatter;
 use Drupal\Core\Form\FormStateInterface;
@@ -45,7 +46,7 @@ class EntityReferenceExportFormatter extends EntityReferenceEntityFormatter {
         }
       }
 
-      /** @var \Drupal\Core\Entity\EntityInterface $entity */
+      /** @var EntityInterface $entity */
       $entity = $row[$entity_key];
 
       if (!empty($extra['id'])) {
@@ -90,7 +91,7 @@ class EntityReferenceExportFormatter extends EntityReferenceEntityFormatter {
 
         // If the field has no multiple cardinality, unpack the array.
         if (!empty($field['#items'])) {
-          /** @var \Drupal\Core\Field\FieldItemListInterface $field_items */
+          /** @var FieldItemListInterface $field_items */
           $field_items = $field['#items'];
           if (!$field_items
             ->getFieldDefinition()
diff --git a/src/Plugin/Field/FieldFormatter/EntityReferencePathFormatter.php b/src/Plugin/Field/FieldFormatter/EntityReferencePathFormatter.php
index 1dc1a8e..0ac5ccc 100644
--- a/src/Plugin/Field/FieldFormatter/EntityReferencePathFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/EntityReferencePathFormatter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\rest_views\Plugin\Field\FieldFormatter;
 
+use Drupal\Core\Url;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\link\Plugin\Field\FieldFormatter\LinkFormatter;
 use Drupal\rest_views\SerializedData;
@@ -27,7 +28,7 @@ class EntityReferencePathFormatter extends LinkFormatter {
     $elements = [];
 
     foreach ($items as $delta => $item) {
-      /** @var \Drupal\Core\Url $url */
+      /** @var Url $url */
       $url = $item->entity->toUrl();
       $elements[$delta] = [
         '#type' => 'data',
diff --git a/src/Plugin/Field/FieldFormatter/FileExportFormatter.php b/src/Plugin/Field/FieldFormatter/FileExportFormatter.php
index 7cd6863..c26f443 100644
--- a/src/Plugin/Field/FieldFormatter/FileExportFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/FileExportFormatter.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\rest_views\Plugin\Field\FieldFormatter;
 
+use Drupal\Core\Field\EntityReferenceFieldItemListInterface;
+use Drupal\file\FileInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\file\Plugin\Field\FieldFormatter\FileFormatterBase;
 use Drupal\rest_views\SerializedData;
@@ -27,10 +29,10 @@ class FileExportFormatter extends FileFormatterBase {
 
     $elements = [];
 
-    /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $items */
+    /** @var EntityReferenceFieldItemListInterface $items */
     foreach ($this->getEntitiesToView($items, $langcode) as $delta => $entity) {
-      /** @var \Drupal\file\FileInterface $entity */
-      $data = ['url' => file_create_url($entity->getFileUri())];
+      /** @var FileInterface $entity */
+      $data = ['url' => \Drupal::service('file_url_generator')->generateAbsoluteString($entity->getFileUri())];
       if ($description && !empty($entity->_referringItem)) {
         $data['description'] = $entity->_referringItem->description;
       }
diff --git a/src/Plugin/Field/FieldFormatter/ImageExportFormatter.php b/src/Plugin/Field/FieldFormatter/ImageExportFormatter.php
index 72923cf..6c6657a 100644
--- a/src/Plugin/Field/FieldFormatter/ImageExportFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/ImageExportFormatter.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\rest_views\Plugin\Field\FieldFormatter;
 
+use Drupal\file\FileInterface;
+use Drupal\image\ImageStyleInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\image\Entity\ImageStyle;
@@ -95,7 +97,7 @@ class ImageExportFormatter extends ImageFormatter {
     foreach ($elements as $delta => $element) {
       $item = $element['#item'];
       if (($entity = $item->entity) && empty($item->uri)) {
-        /** @var \Drupal\file\FileInterface $entity */
+        /** @var FileInterface $entity */
         $uri = $entity->getFileUri();
       }
       else {
@@ -103,7 +105,7 @@ class ImageExportFormatter extends ImageFormatter {
       }
 
       if ($element['#image_style']) {
-        /** @var \Drupal\image\ImageStyleInterface $style */
+        /** @var ImageStyleInterface $style */
         $style = ImageStyle::load($element['#image_style']);
 
         // Determine the dimensions of the styled image.
@@ -116,7 +118,7 @@ class ImageExportFormatter extends ImageFormatter {
         $uri = $style->buildUrl($uri);
       }
       else {
-        $uri = file_create_url($uri);
+        $uri = \Drupal::service('file_url_generator')->generateAbsoluteString($uri);
       }
 
       if ($alt || $title) {
diff --git a/src/Plugin/Field/FieldFormatter/LinkExportFormatter.php b/src/Plugin/Field/FieldFormatter/LinkExportFormatter.php
index f87b90e..e4bace9 100644
--- a/src/Plugin/Field/FieldFormatter/LinkExportFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/LinkExportFormatter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\rest_views\Plugin\Field\FieldFormatter;
 
+use Drupal\Core\Url;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\link\Plugin\Field\FieldFormatter\LinkFormatter;
@@ -27,7 +28,7 @@ class LinkExportFormatter extends LinkFormatter {
     $elements = parent::viewElements($items, $langcode);
 
     foreach ($elements as $delta => $element) {
-      /** @var \Drupal\Core\Url $url */
+      /** @var Url $url */
       $url = $element['#url'];
       $data = [
         'url' => $url->toString(),
diff --git a/tests/src/Unit/EntityFieldExportTest.php b/tests/src/Unit/EntityFieldExportTest.php
index 47acdac..7f531df 100644
--- a/tests/src/Unit/EntityFieldExportTest.php
+++ b/tests/src/Unit/EntityFieldExportTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\rest_views\Unit;
 
+use Symfony\Component\Serializer\SerializerInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ -34,14 +35,14 @@ class EntityFieldExportTest extends UnitTestCase {
   /**
    * The EntityFieldExport plugin.
    *
-   * @var \Drupal\rest_views\Plugin\views\field\EntityFieldExport
+   * @var EntityFieldExport
    */
   private $handler;
 
   /**
    * The mocked serializer service.
    *
-   * @var \Symfony\Component\Serializer\SerializerInterface
+   * @var SerializerInterface
    */
   private $serializer;
 
@@ -55,13 +56,10 @@ class EntityFieldExportTest extends UnitTestCase {
     $entityTypeManager = $this->createMock(EntityTypeManagerInterface::class);
     $entityFieldManager = $this->createMock(EntityFieldManagerInterface::class);
     $entityRepository = $this->createMock(EntityRepositoryInterface::class);
-    $formatterPluginManager = $this
-      ->getMockBuilder(FormatterPluginManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $formatterPluginManager = $this->createMock(FormatterPluginManager::class);
     $fieldTypePluginManager = $this->createMock(FieldTypePluginManagerInterface::class);
     $languageManager = $this->createMock(LanguageManagerInterface::class);
-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = $this->createMock(RendererInterface::class);
     // For the t() function to work, mock the translation service.
     $container = new ContainerBuilder();
@@ -112,13 +110,9 @@ class EntityFieldExportTest extends UnitTestCase {
       ->willReturn(['title' => $fieldDefinition]);
 
     // Initialize the handler, using a mocked view and display plugin.
-    /** @var \Drupal\views\ViewExecutable $view */
-    $view = $this->getMockBuilder(ViewExecutable::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-    $view->display_handler = $this->getMockBuilder(DisplayPluginBase::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    /** @var ViewExecutable $view */
+    $view = $this->createMock(ViewExecutable::class);
+    $view->display_handler = $this->createMock(DisplayPluginBase::class);
     $this->handler->init($view, $view->display_handler);
 
     $this->serializer = new Serializer([
