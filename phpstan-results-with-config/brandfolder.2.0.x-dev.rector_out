modules/contrib/brandfolder/brandfolder.install
modules/contrib/brandfolder/brandfolder.module
modules/contrib/brandfolder/src/Controller/AssetFetchController.php
modules/contrib/brandfolder/src/Controller/IncomingWebhookController.php
modules/contrib/brandfolder/src/Event/BrandfolderWebhookEvent.php
modules/contrib/brandfolder/src/EventSubscriber/WebhookEventSubscriber.php
modules/contrib/brandfolder/src/File/MimeType/BrandfolderMimeTypeHandler.php
modules/contrib/brandfolder/src/Form/BrandfolderSettingsForm.php
modules/contrib/brandfolder/src/Image/BrandfolderImageFactory.php
modules/contrib/brandfolder/src/Plugin/Field/FieldWidget/BrandfolderImageBrowserWidget.php
modules/contrib/brandfolder/src/Plugin/ImageToolkit/BrandfolderToolkit.php
modules/contrib/brandfolder/src/Plugin/ImageToolkit/Operation/brandfolder/BrandfolderImageToolkitOperationBase.php
modules/contrib/brandfolder/src/Plugin/ImageToolkit/Operation/brandfolder/Crop.php
modules/contrib/brandfolder/src/Plugin/ImageToolkit/Operation/brandfolder/Resize.php
modules/contrib/brandfolder/src/Plugin/ImageToolkit/Operation/brandfolder/Scale.php
modules/contrib/brandfolder/src/Plugin/ImageToolkit/Operation/brandfolder/ScaleAndCrop.php
modules/contrib/brandfolder/src/Plugin/media/Source/BrandfolderImage.php
modules/contrib/brandfolder/src/ProxyClass/File/MimeType/BrandfolderMimeTypeGuesser.php
modules/contrib/brandfolder/src/Service/BrandfolderGatekeeper.php
modules/contrib/brandfolder/src/StreamWrapper/BrandfolderStreamWrapper.php
modules/contrib/brandfolder/tests/src/Functional/ConfigurationTest.php

14 files with changes
=====================

1) modules/contrib/brandfolder/src/Service/BrandfolderGatekeeper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\brandfolder\Service;

+use Drupal\Core\Logger\LoggerChannel;
 use Drupal\brandfolder\Plugin\media\Source\BrandfolderImage;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Logger.
    *
-   * @var \Drupal\Core\Logger\LoggerChannel
+   * @var LoggerChannel
    */
   protected $logger;

@@ @@
   /**
    * BrandfolderGatekeeper constructor.
    *
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param TranslationInterface $string_translation
+   * @param LoggerChannelFactoryInterface $logger_factory
+   * @param ConfigFactoryInterface $config_factory
    *
    * @throws \Exception
    */
@@ @@
   /**
    * Instance creator.
    *
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param TranslationInterface $string_translation
+   * @param LoggerChannelFactoryInterface $logger_factory
+   * @param ConfigFactoryInterface $config_factory
    *
    * @return static
    *   Returns an instance of this service.
@@ @@
    * @param array $query_params
    *
    * @return mixed
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function fetchAssets(array $query_params = []) {
     $search_components = !empty($query_params['search']) ? [$query_params['search']] : [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/brandfolder/src/ProxyClass/File/MimeType/BrandfolderMimeTypeGuesser.php:6

    ---------- begin diff ----------
@@ @@

 namespace Drupal\brandfolder\ProxyClass\File\MimeType {

+    use Symfony\Component\Mime\MimeTypeGuesserInterface;
+    use Symfony\Component\Mime\MimeTypesInterface;
+    use Drupal\Core\DependencyInjection\DependencySerializationTrait;
+    use Symfony\Component\DependencyInjection\ContainerInterface;
     /**
      * Provides a proxy class for \Drupal\brandfolder\File\MimeType\BrandfolderMimeTypeGuesser.
      *
      * @see \Drupal\Component\ProxyBuilder
      */
-    class BrandfolderMimeTypeGuesser implements \Symfony\Component\Mime\MimeTypeGuesserInterface, \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface
+    class BrandfolderMimeTypeGuesser implements MimeTypeGuesserInterface, MimeTypesInterface
     {

-        use \Drupal\Core\DependencyInjection\DependencySerializationTrait;
+        use DependencySerializationTrait;

         /**
          * The id of the original proxied service.
@@ @@
         /**
          * The service container.
          *
-         * @var \Symfony\Component\DependencyInjection\ContainerInterface
+         * @var ContainerInterface
          */
         protected $container;

@@ @@
         /**
          * Constructs a ProxyClass Drupal proxy object.
          *
-         * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+         * @param ContainerInterface $container
          *   The container.
          * @param string $drupal_proxy_original_service_id
          *   The service ID of the original service.
          */
-        public function __construct(\Symfony\Component\DependencyInjection\ContainerInterface $container, $drupal_proxy_original_service_id)
+        public function __construct(ContainerInterface $container, $drupal_proxy_original_service_id)
         {
             $this->container = $container;
             $this->drupalProxyOriginalServiceId = $drupal_proxy_original_service_id;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/brandfolder/src/Plugin/media/Source/BrandfolderImage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\brandfolder\Plugin\media\Source;

+use Brandfolder\Brandfolder;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\field\FieldConfigInterface;
 use Drupal\brandfolder\Service\BrandfolderGatekeeper;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\Utility\NestedArray;
@@ @@
   /**
    * Brandfolder API.
    *
-   * @var \Brandfolder\Brandfolder
+   * @var Brandfolder
    *   BF SDK.
    */
   protected $brandfolderClient;
@@ @@
   /**
    * Account proxy.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $accountProxy;

@@ @@
   /**
    * The url generator.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;

@@ @@
   /**
    * The logger factory service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $logger;

@@ @@
   /**
    * The cache service.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    *
    * @todo: Remove if unused.
    */
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    *
    * @todo: Remove if unused.
    */
@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   Entity field manager service.
-   * @param \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_manager
+   * @param FieldTypePluginManagerInterface $field_type_manager
    *   The field type plugin manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $account_proxy
+   * @param AccountProxyInterface $account_proxy
    *   Account proxy.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   The url generator service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger
+   * @param LoggerChannelFactoryInterface $logger
    *   The logger factory service.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
-  public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, FieldTypePluginManagerInterface $field_type_manager, ConfigFactoryInterface $config_factory, AccountProxyInterface $account_proxy, UrlGeneratorInterface $url_generator, LoggerChannelFactoryInterface $logger, CacheBackendInterface $cache, TimeInterface $time, ModuleHandlerInterface $module_handler) {
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, FieldTypePluginManagerInterface $field_type_manager, ConfigFactoryInterface $config_factory, array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, FieldTypePluginManagerInterface $field_type_manager, ConfigFactoryInterface $config_factory, AccountProxyInterface $account_proxy, UrlGeneratorInterface $url_generator, LoggerChannelFactoryInterface $logger, CacheBackendInterface $cache, TimeInterface $time, ModuleHandlerInterface $module_handler, private BrandfolderGatekeeper $brandfolderGatekeeper) {
     $this->source_field_name = 'field_brandfolder_attachment_id';

     parent::__construct($configuration, $plugin_id, $plugin_definition, $entity_type_manager, $entity_field_manager, $field_type_manager, $config_factory);
@@ @@
     $this->cache = $cache;
     $this->time = $time;
     $this->moduleHandler = $module_handler;
+    parent::__construct($configuration, $plugin_id, $plugin_definition, $entity_type_manager, $entity_field_manager, $field_type_manager, $config_factory);
   }

   /**
@@ @@
    * want to leave that data untouched. Otherwise, we want to update them using
    * the latest BF data.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *
    * @todo
    */
@@ @@
       // @todo: Update field description accordingly, disable field, etc.
     }

-    $gatekeeper = \Drupal::getContainer()
-      ->get(BrandfolderGatekeeper::class);
+    $gatekeeper = $this->brandfolderGatekeeper;
     $gatekeeper->loadFromMediaSource($this);
     $gatekeeper->buildConfigForm($form);

@@ @@
   /**
    * Creates the image field storage definition.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The unsaved field storage definition.
    */
   public function createImageFieldStorage() {
@@ @@
   /**
    * Creates the image field definition.
    *
-   * @param \Drupal\media\MediaTypeInterface $type
+   * @param MediaTypeInterface $type
    *   The media type.
    *
-   * @return \Drupal\field\FieldConfigInterface
+   * @return FieldConfigInterface
    *   The unsaved field definition. The field storage definition, if new,
    *   should also be unsaved.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * ContainerGetToConstructorInjectionRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/brandfolder/src/Plugin/ImageToolkit/Operation/brandfolder/BrandfolderImageToolkitOperationBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\brandfolder\Plugin\ImageToolkit\Operation\brandfolder;

+use Drupal\brandfolder\Plugin\ImageToolkit\BrandfolderToolkit;
 use Drupal\Core\ImageToolkit\ImageToolkitOperationBase;

 abstract class BrandfolderImageToolkitOperationBase extends ImageToolkitOperationBase {
@@ @@
   /**
    * The correctly typed image toolkit for Brandfolder operations.
    *
-   * @return \Drupal\brandfolder\Plugin\ImageToolkit\BrandfolderToolkit
+   * @return BrandfolderToolkit
    */
   protected function getToolkit() {
     return parent::getToolkit();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/brandfolder/src/Plugin/ImageToolkit/BrandfolderToolkit.php:109

    ---------- begin diff ----------
@@ @@
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\ImageToolkit\ImageToolkitOperationManagerInterface $operation_manager
+   * @param ImageToolkitOperationManagerInterface $operation_manager
    *   The toolkit operation manager.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Database\Connection $db_connection
+   * @param Connection $db_connection
    *   A database connection.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, ImageToolkitOperationManagerInterface $operation_manager, LoggerInterface $logger, ConfigFactoryInterface $config_factory, Connection $db_connection) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/brandfolder/src/Image/BrandfolderImageFactory.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\brandfolder\Image;

+use Drupal\Core\Image\ImageInterface;
 use Drupal\Core\Image\ImageFactory;
 use Drupal\Core\Image\Image;
 use Drupal\Core\TypedData\Plugin\DataType\Uri;
@@ @@
    *   (optional) The ID of the image toolkit to use for this image, or NULL
    *   to use the current toolkit.
    *
-   * @return \Drupal\Core\Image\ImageInterface
+   * @return ImageInterface
    *   An Image object.
    *
    * @see ImageFactory::setToolkitId()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/brandfolder/src/Form/BrandfolderSettingsForm.php:43

    ---------- begin diff ----------
@@ @@
   /**
    * BrandfolderSettingsForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
     parent::__construct($config_factory);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/brandfolder/src/File/MimeType/BrandfolderMimeTypeHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\brandfolder\File\MimeType;

+use Symfony\Component\Mime\MimeTypesInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\File\MimeType\ExtensionMimeTypeGuesser;
 use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface as LegacyMimeTypeGuesserInterface;
@@ @@
  * not end with a recognized file extension.
  * Also provide mimetype and extension-related utilities.
  */
-class BrandfolderMimeTypeHandler extends ExtensionMimeTypeGuesser implements MimeTypeGuesserInterface, LegacyMimeTypeGuesserInterface {
+class BrandfolderMimeTypeHandler extends ExtensionMimeTypeGuesser implements MimeTypeGuesserInterface, MimeTypesInterface {

   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Database\Connection $database_connection
+   * @param Connection $database_connection
    *   The database connection.
    */
   public function __construct(ModuleHandlerInterface $module_handler, Connection $database_connection) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/brandfolder/src/EventSubscriber/WebhookEventSubscriber.php:28

    ---------- begin diff ----------
@@ @@
    *
    * @param \Drupal\brandfolder\Event\BrandfolderWebhookEvent $event
    */
-//  public function assetCreate(BrandfolderWebhookEvent $event) {
-//
-//  }
-
+  //  public function assetCreate(BrandfolderWebhookEvent $event) {
+  //
+  //  }
   /**
    * React to a Brandfolder asset being updated.
    *
-   * @param \Drupal\brandfolder\Event\BrandfolderWebhookEvent $event
+   * @param BrandfolderWebhookEvent $event
    *
    * @todo: Break some of this code out into other handlers if it becomes unwieldy.
    */
@@ @@
   }

   /**
-   * React to a Brandfolder asset being deleted.
-   *
-   * @param \Drupal\brandfolder\Event\BrandfolderWebhookEvent $event
-   */
+ * React to a Brandfolder asset being deleted.
+ *
+ * @param BrandfolderWebhookEvent $event
+ */
 //  public function assetDelete(BrandfolderWebhookEvent $event) {
 //
 //  }
+

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/brandfolder/src/Event/BrandfolderWebhookEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\brandfolder\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Multipurpose event that will be fired when Drupal receives a webhook
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/brandfolder/src/Controller/IncomingWebhookController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\brandfolder\Controller;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\brandfolder\Event\BrandfolderWebhookEvent;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
   /**
    * Access management. Block requests that are blatantly invalid.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
-  public function access(Request $request): \Drupal\Core\Access\AccessResultInterface {
+  public function access(Request $request): AccessResultInterface {
     $valid_payload = FALSE;
     $payload = json_decode($request->getContent(), TRUE);
     if (isset($payload['data']['attributes'])) {
@@ @@
   /**
    * Handle incoming webhooks.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    */
   public function webhookListener(Request $request) {
     $payload = json_decode($request->getContent(), TRUE);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/brandfolder/src/Controller/AssetFetchController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\brandfolder\Controller;

+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Core\Ajax\AjaxResponse;
+use GuzzleHttp\Exception\GuzzleException;
 use Drupal\brandfolder\Service\BrandfolderGatekeeper;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
  */
 class AssetFetchController extends ControllerBase {

+  public function __construct(private BrandfolderGatekeeper $brandfolderGatekeeper)
+  {
+  }
   /**
    * Callback for stub route used in connection with nested AJAX form requests,
    * etc.
@@ @@
    * AJAX callback to fetch Brandfolder assets.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return array
    */
-  public static function assetFetchFormAjaxCallback(array &$form, FormStateInterface $form_state, \Symfony\Component\HttpFoundation\Request $request): array {
+  public static function assetFetchFormAjaxCallback(array &$form, FormStateInterface $form_state, Request $request): array {
     $all_form_values = $form_state->getValues();

     $tag_key_mapping = isset($all_form_values['brandfolder_controls_tag_key_mapping']) ? json_decode($all_form_values['brandfolder_controls_tag_key_mapping'], TRUE) : [];
@@ @@
     $query_params['sort_by'] = $all_form_values['brandfolder_controls_sort_criterion'] ?? 'created_at';
     $query_params['order'] = $all_form_values['brandfolder_controls_sort_order'] ?? 'desc';

-    $gatekeeper = \Drupal::getContainer()
-      ->get(BrandfolderGatekeeper::class);
+    $gatekeeper = $this->brandfolderGatekeeper;
     $gatekeeper_criteria = [];
     $gatekeeper_criteria_string = $form_state->getValue('bf_gatekeeper_criteria');
     if (!empty($gatekeeper_criteria_string)) {
@@ @@
   }

   /**
-   * Fetch assets applicable to the current context.
-   *
-   * @param string $context_id
-   *
-   * @return \Drupal\Core\Ajax\AjaxResponse
-   * @throws \GuzzleHttp\Exception\GuzzleException
-   */
+ * Fetch assets applicable to the current context.
+ *
+ * @param string $context_id
+ *
+ * @return AjaxResponse
+ * @throws GuzzleException
+ */
 //  public function fetchAssetsCallback(string $context_id) {
 //
 //    // @todo: Configurable passphrase or generate once per install and keep behind the scenes, etc.
@@ @@
 //
 //    return $response;
 //  }
+

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * ContainerGetToConstructorInjectionRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/brandfolder/brandfolder.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\media\Entity\MediaType;
+use GuzzleHttp\Exception\GuzzleException;
+use Drupal\Core\Database\Query\Merge;
+use Drupal\Core\Entity\EntityStorageException;
 /**
  * @file
  * Contains brandfolder.module.
@@ @@
 /**
  * Implements hook_form_FORM_ID_alter().
  */
-function brandfolder_form_field_config_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
+function brandfolder_form_field_config_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   // If this is a config form for a file-esque field using the Brandfolder
   // URI scheme, disable the file upload directory setting.
   $route_params = \Drupal::routeMatch()->getParameters();
@@ @@
 /**
  * Implements hook_form_FORM_ID_alter().
  */
-function brandfolder_form_views_exposed_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
+function brandfolder_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   // If this is a Views exposed filters form for a Media Library view pertaining
   // to a Brandfolder-sourced media type, disable it in favor of our own
   // browsing experience.
@@ @@
 /**
  * Implements hook_form_alter().
  */
-function brandfolder_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
+function brandfolder_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   // If this is a form comprising the main media entity listing in a Media
   // Library context, for a Brandfolder-sourced media type, replace the
   // user-facing form elements with our own browsing experience.
@@ @@
  * that we auto-generate/populate based on linked Brandfolder attachment.
  *
  * @param $element
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  * @param $form
  *
  * @return array
@@ @@
  * Procedural method to construct basic BF browser in a Media Library context.
  *
  * @param $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
- * @param \Drupal\media\Entity\MediaType $media_type
+ * @param FormStateInterface $form_state
+ * @param MediaType $media_type
  *
  * @todo: Replace with more elegant and feature-rich browser construct.
  */
-function brandfolder_browser_media_library_form_manipulator(&$form, \Drupal\Core\Form\FormStateInterface $form_state, \Drupal\media\Entity\MediaType $media_type) {
+function brandfolder_browser_media_library_form_manipulator(&$form, FormStateInterface $form_state, MediaType $media_type) {
   $media_source = $media_type->getSource();
   $gatekeeper = \Drupal::getContainer()
     ->get(BrandfolderGatekeeper::class);
@@ @@
   $selected_media_entity_ids = [];
   $selection_limit = -1;
   $build_info = $form_state->getBuildInfo();
-  if ($build_info['base_form_id'] == 'views_form_media_library_widget' && isset($build_info['args'][0]) && $build_info['args'][0] instanceof \Drupal\views\ViewExecutable) {
+  if ($build_info['base_form_id'] == 'views_form_media_library_widget' && isset($build_info['args'][0]) && $build_info['args'][0] instanceof ViewExecutable) {
     $view = $build_info['args'][0];
     if (strpos($view->current_display, 'widget') === 0) {
       try {
@@ @@
  * core BF browsing experience.
  *
  * @param array $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
- * @param \Drupal\brandfolder\Service\BrandfolderGatekeeper $gatekeeper
+ * @param FormStateInterface $form_state
+ * @param BrandfolderGatekeeper $gatekeeper
  * @param array $disabled_attachment_ids
  * @param array $selected_attachment_ids
  * @param int $selection_limit
@@ @@
  *  This should be -1 if there is no limit.
  * @param string|null $context_id
  *
- * @throws \GuzzleHttp\Exception\GuzzleException
+ * @throws GuzzleException
  * @todo: Relocate and make pluggable. See also brandfolder_browser_controls().
  */
 function brandfolder_browser_init(&$form, FormStateInterface $form_state, BrandfolderGatekeeper $gatekeeper, array $disabled_attachment_ids = [], array $selected_attachment_ids = [], int $selection_limit = -1, string $context_id = NULL) {
@@ @@
  * core BF browsing experience.
  *
  * @param array $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  * @param array $gatekeeper_criteria
  * @param string $bf_asset_list
  * @param int $selection_limit
@@ @@
  * Helper function to generate form elements to allow users to search for,
  * filter, sort, etc. assets in a Brandfolder browser context.
  *
- * @param \Drupal\brandfolder\Service\BrandfolderGatekeeper $gatekeeper
+ * @param BrandfolderGatekeeper $gatekeeper
  * @param string $bf_browser_id
  * @param array $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *
  * @return array
  */
@@ @@
       ];
     }
   }
-  
+
   // Get all possible labels. If there are more than one, allow users to
   // filter by label.
   $allowed_labels = $gatekeeper->getLabels();
@@ @@
  * Browser, after other validation handlers have executed.
  *
  * @param array $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *
- * @throws \GuzzleHttp\Exception\GuzzleException
+ * @throws GuzzleException
  */
-function brandfolder_browser_host_form_validator(array &$form, \Drupal\Core\Form\FormStateInterface &$form_state) {
+function brandfolder_browser_host_form_validator(array &$form, FormStateInterface &$form_state) {
   $triggering_element = $form_state->getTriggeringElement();
   // If the submission was triggered by one of our browser controls, the only
   // outcome should be to update the browser contents. We do not care about
@@ @@
  * values. To be used as a form validation handler.
  *
  * @param array $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *
- * @throws \GuzzleHttp\Exception\GuzzleException
+ * @throws GuzzleException
  */
-function brandfolder_browser_selection_converter(array &$form, \Drupal\Core\Form\FormStateInterface &$form_state) {
+function brandfolder_browser_selection_converter(array &$form, FormStateInterface &$form_state) {
   $triggering_element = $form_state->getTriggeringElement();
   // We don't need or want to perform validation when the submission is
   // triggered by one of our browser controls.
@@ @@
  * @return bool|int
  *   The file ID on success; FALSE on failure.
  *
- * @throws \GuzzleHttp\Exception\GuzzleException
+ * @throws GuzzleException
  *
  * @todo Move to class.
  */
@@ @@
           ])
           ->fields(['fid' => $fid])
           ->execute();
-        if ($result != Database\Query\Merge::STATUS_UPDATE) {
+        if ($result != Merge::STATUS_UPDATE) {
           $logger->error('Could not find an existing record in the brandfolder_file table for attachment ID !attachment_id and file ID !fid.', [
             '!fid'      => $fid,
             '!attachment_id' => $attachment_id
@@ @@
           $attachment_id
         ]);
       }
-      catch (\Drupal\Core\Entity\EntityStorageException $e) {
+      catch (EntityStorageException $e) {
         $logger->error('There was an error saving a new file for Brandfolder attachment !attachment_id.', ['!attachment_id' => $attachment_id]);
       }
     }
@@ @@
  * @return bool|int
  *   The media entity ID on success; FALSE on failure.
  *
- * @throws \GuzzleHttp\Exception\GuzzleException
- *
+ * @throws GuzzleException
  */
 function brandfolder_map_attachment_to_media_entity($attachment, $media_type_id, $create_new_entity = TRUE) {
   $entity_id = FALSE;
@@ @@
         $media->save();
         $entity_id = $media->id();
       }
-      catch (\Drupal\Core\Entity\EntityStorageException $e) {
+      catch (EntityStorageException $e) {
         $logger->error('There was an error saving a new media entity for Brandfolder attachment !attachment_id.', ['!attachment_id' => $attachment_id]);
       }
       if ($bf_client->verboseLoggingIsEnabled()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


14) modules/contrib/brandfolder/brandfolder.install:120

    ---------- begin diff ----------
@@ @@
 /**
  * Implements hook_install().
  *
- * @throws \Drupal\Core\Utility\UpdateException
+ * @throws UpdateException
  */
 function brandfolder_install() {
   // @todo: Ensure 'bf://' scheme is fully accessible/usable upon module installation.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 14 files have been changed by Rector                                      

