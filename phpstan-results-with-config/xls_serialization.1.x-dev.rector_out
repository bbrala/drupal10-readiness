modules/contrib/xls_serialization/src/Encoder/Xls.php
modules/contrib/xls_serialization/src/Encoder/Xlsx.php
modules/contrib/xls_serialization/src/EventSubscriber/Subscriber.php
modules/contrib/xls_serialization/src/Plugin/views/display/ExcelExport.php
modules/contrib/xls_serialization/src/Plugin/views/style/ExcelExport.php
modules/contrib/xls_serialization/tests/src/Unit/Encoder/XlsTest.php
modules/contrib/xls_serialization/tests/src/Unit/EventSubscriber/SubscriberTest.php

4 files with changes
====================

1) modules/contrib/xls_serialization/tests/src/Unit/EventSubscriber/SubscriberTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\xls_serialization\Unit\EventSubscriber;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Tests\UnitTestCase;
 use Drupal\xls_serialization\EventSubscriber\Subscriber;
 use Symfony\Component\HttpFoundation\Request;
@@ @@
  */
 class SubscriberTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * @covers ::onKernelRequest
    */
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/xls_serialization/src/Plugin/views/display/ExcelExport.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\xls_serialization\Plugin\views\display;

+use Drupal\Core\Render\RendererInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Cache\CacheableResponse;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
     $response = new CacheableResponse('', 200);
     $build['#response'] = $response;

-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = \Drupal::service('renderer');

     $output = (string) $renderer->renderRoot($build);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/xls_serialization/src/EventSubscriber/Subscriber.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * Register content formats on the request object.
    *
-   * @param Symfony\Component\HttpKernel\Event\RequestEvent $event
+   * @param RequestEvent $event
    *   The event to get the request object to register on.
    */
   public function onKernelRequest(RequestEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/xls_serialization/src/Encoder/Xls.php:89

    ---------- begin diff ----------
@@ @@
         }

         if (!empty($context['views_style_plugin']->view)) {
-          /** @var \Drupal\views\ViewExecutable $view */
+          /** @var ViewExecutable $view */
           $view = $context['views_style_plugin']->view;
           // Set the worksheet title based on the view title within the context.
           if (!empty($view->getTitle())) {
@@ @@
   /**
    * Set sheet headers.
    *
-   * @param \PhpOffice\PhpSpreadsheet\Worksheet\Worksheet $sheet
+   * @param Worksheet $sheet
    *   The worksheet to set headers for.
    * @param array $data
    *   The data array.
@@ @@
   /**
    * Set any available metadata.
    *
-   * @param \PhpOffice\PhpSpreadsheet\Document\Properties $document_properties
+   * @param Properties $document_properties
    *   The document properties object.
    * @param array $metadata
    *   An associative array of metadata to set on the document. The array can
@@ @@
   /**
    * Set sheet data.
    *
-   * @param \PhpOffice\PhpSpreadsheet\Worksheet\Worksheet $sheet
+   * @param Worksheet $sheet
    *   The worksheet to put the data in.
    * @param array $data
    *   The data to be put in the worksheet.
@@ @@
         $headers = $context['header'];
       }
       elseif (isset($context['views_style_plugin'])) {
-        /** @var \Drupal\views\ViewExecutable $view */
+        /** @var ViewExecutable $view */
         $view = $context['views_style_plugin']->view;
         $fields = $view->field;
         foreach ($first_row as $key => $value) {
@@ @@
   /**
    * Set width of all columns with data in them in sheet to AutoSize.
    *
-   * @param \PhpOffice\PhpSpreadsheet\Worksheet\Worksheet $sheet
+   * @param Worksheet $sheet
    *   The worksheet to set the column width to AutoSize for.
    */
   protected function setColumnsAutoSize(Worksheet $sheet) {
@@ @@
   /**
    * Set font of the header (first) row to bold.
    *
-   * @param \PhpOffice\PhpSpreadsheet\Worksheet\Worksheet $sheet
+   * @param Worksheet $sheet
    *   The worksheet to set the font of the header row to bold.
    */
   protected function setHeaderRowBold(Worksheet $sheet) {
@@ @@
   /**
    * Set font of the header (first) row to italic.
    *
-   * @param \PhpOffice\PhpSpreadsheet\Worksheet\Worksheet $sheet
+   * @param Worksheet $sheet
    *   The worksheet to set the font of the header row to italic.
    */
   protected function setHeaderRowItalic(Worksheet $sheet) {
@@ @@
   /**
    * Set background color of the header (first) row.
    *
-   * @param \PhpOffice\PhpSpreadsheet\Worksheet\Worksheet $sheet
+   * @param Worksheet $sheet
    *   The worksheet to set the background color of the header row.
    * @param string $rgb
    *   The worksheet to set the background color of the header row.
@@ @@
    *   The RGB value of the background color to set on the whole row,
    *   if the comparison is TRUE.
    *
-   * @return \PhpOffice\PhpSpreadsheet\Style\Conditional
+   * @return Conditional
    *   The conditional formatting.
    */
   protected function setConditionalFormat($column_letter, $operator, $compare_to, $rgb_background_color) {
@@ @@
   /**
    * Sets conditional formats on worksheet.
    *
-   * @param \PhpOffice\PhpSpreadsheet\Worksheet\Worksheet $sheet
+   * @param Worksheet $sheet
    *   The sheet to set the conditional formats on.
    * @param array $conditional_styles
    *   The conditional formats to set.
@@ @@
   /**
    * Get the label in the view for a field name (if available)
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The view to get the field labels from.
    * @param string $field_name
    *   The field name to get the view label for.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 4 files have been changed by Rector                                       

