diff --git a/gdpr.module b/gdpr.module
index 8005205..618f772 100644
--- a/gdpr.module
+++ b/gdpr.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Render\RendererInterface;
 /**
  * @file
  * Module file.
@@ -50,7 +51,7 @@ function gdpr_checklistapi_checklist_items() {
   $contentLinks = Drupal::config(ContentLinksForm::GDPR_CONTENT_CONF_KEY)
     ->get('links');
 
-  /** @var \Drupal\Core\Render\RendererInterface $renderer */
+  /** @var RendererInterface $renderer */
   $renderer = Drupal::service('renderer');
 
   if (!empty($contentLinks[$langCode])) {
@@ -323,7 +324,7 @@ function gdpr_get_gdpr_module_description() {
     'absolute' => TRUE,
     'fragment' => 'edit-modules-general-data-protection-regulation',
   ];
-  /** @var \Drupal\Core\Link $link */
+  /** @var Link $link */
   $link = Link::createFromRoute(t('Enable them on Extend admin page'), 'system.modules_list', [], $options);
 
   if (!empty($gdpr_modules_list['#items'])) {
diff --git a/modules/anonymizer/src/Annotation/Anonymizer.php b/modules/anonymizer/src/Annotation/Anonymizer.php
index 650da80..3ac7179 100644
--- a/modules/anonymizer/src/Annotation/Anonymizer.php
+++ b/modules/anonymizer/src/Annotation/Anonymizer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\anonymizer\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -25,14 +26,14 @@ class Anonymizer extends Plugin {
   /**
    * Human-readable of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label;
 
   /**
    * Description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $description;
 
diff --git a/modules/anonymizer/src/Anonymizer/AnonymizerBase.php b/modules/anonymizer/src/Anonymizer/AnonymizerBase.php
index 93288f2..9ac6fa6 100644
--- a/modules/anonymizer/src/Anonymizer/AnonymizerBase.php
+++ b/modules/anonymizer/src/Anonymizer/AnonymizerBase.php
@@ -20,14 +20,14 @@ abstract class AnonymizerBase extends PluginBase implements AnonymizerInterface,
   /**
    * The faker service.
    *
-   * @var \Drupal\anonymizer\Service\FakerServiceInterface
+   * @var FakerServiceInterface
    */
   protected $faker;
 
   /**
    * Creates an instance of the plugin.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container to pull out services used in the plugin.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
@@ -62,7 +62,7 @@ abstract class AnonymizerBase extends PluginBase implements AnonymizerInterface,
    *   The plugin ID.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\anonymizer\Service\FakerServiceInterface $faker
+   * @param FakerServiceInterface $faker
    *   The faker service.
    */
   public function __construct(
diff --git a/modules/anonymizer/src/Anonymizer/AnonymizerFactory.php b/modules/anonymizer/src/Anonymizer/AnonymizerFactory.php
index aa6df11..a5c21b7 100644
--- a/modules/anonymizer/src/Anonymizer/AnonymizerFactory.php
+++ b/modules/anonymizer/src/Anonymizer/AnonymizerFactory.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\anonymizer\Anonymizer;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 /**
  * Class AnonymizerFactory.
  *
@@ -12,21 +13,21 @@ class AnonymizerFactory {
   /**
    * Anonymizer instances keyed by their ID.
    *
-   * @var \Drupal\anonymizer\Anonymizer\AnonymizerInterface[]
+   * @var AnonymizerInterface[]
    */
   protected $anonymizers = [];
 
   /**
    * The anonymizer plugin manager.
    *
-   * @var \Drupal\anonymizer\Anonymizer\AnonymizerPluginManager
+   * @var AnonymizerPluginManager
    */
   protected $pluginManager;
 
   /**
    * AnonymizerFactory constructor.
    *
-   * @param \Drupal\anonymizer\Anonymizer\AnonymizerPluginManager $pluginManager
+   * @param AnonymizerPluginManager $pluginManager
    *   The anonymizer plugin manager.
    */
   public function __construct(AnonymizerPluginManager $pluginManager) {
@@ -46,10 +47,10 @@ class AnonymizerFactory {
    * @param string $name
    *   Anonymizer name.
    *
-   * @return \Drupal\anonymizer\Anonymizer\AnonymizerInterface
+   * @return AnonymizerInterface
    *   The anonymizer instance.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function get($name) {
     if (!isset($this->anonymizers[$name])) {
diff --git a/modules/anonymizer/src/Anonymizer/AnonymizerInterface.php b/modules/anonymizer/src/Anonymizer/AnonymizerInterface.php
index e45e698..0ab2a0d 100644
--- a/modules/anonymizer/src/Anonymizer/AnonymizerInterface.php
+++ b/modules/anonymizer/src/Anonymizer/AnonymizerInterface.php
@@ -16,7 +16,7 @@ interface AnonymizerInterface {
    *
    * @var int|string $input
    *   The input.
-   * @var \Drupal\Core\Field\FieldItemListInterface|null $field
+   * @var FieldItemListInterface|null $field
    *   The field being anonymized.
    *
    * @return int|string
diff --git a/modules/anonymizer/src/Anonymizer/AnonymizerPluginManager.php b/modules/anonymizer/src/Anonymizer/AnonymizerPluginManager.php
index fda695c..dbe44d2 100644
--- a/modules/anonymizer/src/Anonymizer/AnonymizerPluginManager.php
+++ b/modules/anonymizer/src/Anonymizer/AnonymizerPluginManager.php
@@ -25,9 +25,9 @@ class AnonymizerPluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
    */
   public function __construct(
diff --git a/modules/anonymizer/src/Plugin/Anonymizer/PasswordAnonymizer.php b/modules/anonymizer/src/Plugin/Anonymizer/PasswordAnonymizer.php
index 39b3d5e..319dd35 100644
--- a/modules/anonymizer/src/Plugin/Anonymizer/PasswordAnonymizer.php
+++ b/modules/anonymizer/src/Plugin/Anonymizer/PasswordAnonymizer.php
@@ -27,7 +27,7 @@ class PasswordAnonymizer extends AnonymizerBase {
   /**
    * The password service.
    *
-   * @var \Drupal\Core\Password\PasswordInterface
+   * @var PasswordInterface
    */
   protected $password;
 
@@ -58,9 +58,9 @@ class PasswordAnonymizer extends AnonymizerBase {
    *   The plugin ID.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Password\PasswordInterface $password
+   * @param PasswordInterface $password
    *   The password service.
-   * @param \Drupal\anonymizer\Service\FakerServiceInterface $faker
+   * @param FakerServiceInterface $faker
    *   The faker service.
    */
   public function __construct(
diff --git a/modules/gdpr_consent/gdpr_consent.install b/modules/gdpr_consent/gdpr_consent.install
index 4e998a3..0c800db 100644
--- a/modules/gdpr_consent/gdpr_consent.install
+++ b/modules/gdpr_consent/gdpr_consent.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\gdpr_consent\ConsentAgreementStorage;
 /**
  * @file
  * Update and installation code for the gdpr_consent module.
@@ -17,7 +18,7 @@ function gdpr_consent_update_8301() {
   $newFieldName = 'revision_log';
   $entityType = $entityTypeManager->getDefinition($entityTypeId);
 
-  /** @var \Drupal\gdpr_consent\ConsentAgreementStorage $storage */
+  /** @var ConsentAgreementStorage $storage */
   $storage = $entityTypeManager->getStorage($entityTypeId);
   $bundleDefinition = $entityTypeManager->getDefinition($entityTypeId);
   // Sometimes the primary key isn't 'id'. e.g. 'eid' or 'item_id'.
diff --git a/modules/gdpr_consent/gdpr_consent.module b/modules/gdpr_consent/gdpr_consent.module
index e076b1a..311878f 100644
--- a/modules/gdpr_consent/gdpr_consent.module
+++ b/modules/gdpr_consent/gdpr_consent.module
@@ -1,5 +1,8 @@
 <?php
 
+use Symfony\Component\HttpFoundation\RequestStack;
+use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;
+use Drupal\gdpr_consent\ConsentUserResolver\ConsentUserResolverPluginManager;
 /**
  * @file
  * Module file for the GDPR Consent module.
@@ -19,7 +22,7 @@ function gdpr_consent_form_field_ui_field_storage_add_form_alter(&$form, FormSta
  *
  * @param array $form
  *   The form.
- * @param \Drupal\Core\Form\FormStateInterface $formState
+ * @param FormStateInterface $formState
  *   The form state.
  *
  * @throws \Exception
@@ -27,16 +30,16 @@ function gdpr_consent_form_field_ui_field_storage_add_form_alter(&$form, FormSta
 function gdpr_consent_field_add_validation(array &$form, FormStateInterface $formState) {
   // @todo Set up for existing fields.
   if ('gdpr_user_consent' === $formState->getValue('new_storage_type', FALSE)) {
-    /** @var \Symfony\Component\HttpFoundation\RequestStack $requestStack */
+    /** @var RequestStack $requestStack */
     $requestStack = Drupal::service('request_stack');
-    /** @var \Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface $requestParameters */
+    /** @var ParameterBagInterface $requestParameters */
     $requestParameters = $requestStack->getCurrentRequest()->attributes;
 
     if ($requestParameters->has('entity_type_id') && $requestParameters->has('bundle')) {
       $entityTypeId = $requestParameters->get('entity_type_id');
       $entityBundle = $requestParameters->get('bundle');
 
-      /** @var \Drupal\gdpr_consent\ConsentUserResolver\ConsentUserResolverPluginManager $consentResolverManager */
+      /** @var ConsentUserResolverPluginManager $consentResolverManager */
       $consentResolverManager = Drupal::service('plugin.manager.gdpr_consent_resolver');
       /** @var array|bool $resolver */
       $resolver = $consentResolverManager->getDefinitionForType($entityTypeId, $entityBundle);
diff --git a/modules/gdpr_consent/src/ConsentAgreementHtmlRouteProvider.php b/modules/gdpr_consent/src/ConsentAgreementHtmlRouteProvider.php
index 11a4b12..915818d 100644
--- a/modules/gdpr_consent/src/ConsentAgreementHtmlRouteProvider.php
+++ b/modules/gdpr_consent/src/ConsentAgreementHtmlRouteProvider.php
@@ -53,10 +53,10 @@ class ConsentAgreementHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ -77,10 +77,10 @@ class ConsentAgreementHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ -101,10 +101,10 @@ class ConsentAgreementHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ -125,10 +125,10 @@ class ConsentAgreementHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ -149,10 +149,10 @@ class ConsentAgreementHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type) {
@@ -173,10 +173,10 @@ class ConsentAgreementHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
diff --git a/modules/gdpr_consent/src/ConsentAgreementStorageInterface.php b/modules/gdpr_consent/src/ConsentAgreementStorageInterface.php
index 3c087f6..1b02f48 100644
--- a/modules/gdpr_consent/src/ConsentAgreementStorageInterface.php
+++ b/modules/gdpr_consent/src/ConsentAgreementStorageInterface.php
@@ -20,7 +20,7 @@ interface ConsentAgreementStorageInterface extends ContentEntityStorageInterface
   /**
    * Gets a list of Consent Agreement revision IDs for a specific Agreement.
    *
-   * @param \Drupal\gdpr_consent\Entity\ConsentAgreementInterface $entity
+   * @param ConsentAgreementInterface $entity
    *   The Consent Agreement entity.
    *
    * @return int[]
@@ -31,7 +31,7 @@ interface ConsentAgreementStorageInterface extends ContentEntityStorageInterface
   /**
    * Gets a list of revision IDs for a given user as Consent Agreement author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ -42,7 +42,7 @@ interface ConsentAgreementStorageInterface extends ContentEntityStorageInterface
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\gdpr_consent\Entity\ConsentAgreementInterface $entity
+   * @param ConsentAgreementInterface $entity
    *   The Consent Agreement entity.
    *
    * @return int
@@ -53,7 +53,7 @@ interface ConsentAgreementStorageInterface extends ContentEntityStorageInterface
   /**
    * Unsets the language for all Consent Agreement with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
diff --git a/modules/gdpr_consent/src/ConsentUserResolver/ConsentUserResolverPluginManager.php b/modules/gdpr_consent/src/ConsentUserResolver/ConsentUserResolverPluginManager.php
index bff7325..7ccd5cb 100644
--- a/modules/gdpr_consent/src/ConsentUserResolver/ConsentUserResolverPluginManager.php
+++ b/modules/gdpr_consent/src/ConsentUserResolver/ConsentUserResolverPluginManager.php
@@ -30,9 +30,9 @@ class ConsentUserResolverPluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
    */
   public function __construct(
@@ -110,7 +110,7 @@ class ConsentUserResolverPluginManager extends DefaultPluginManager {
    * @param string $bundle
    *   The bundle.
    *
-   * @return \Drupal\gdpr_consent\ConsentUserResolver\GdprConsentUserResolverInterface
+   * @return GdprConsentUserResolverInterface
    *   The resolver that will be used to find the User for a specific entity.
    *
    * @throws \Exception
diff --git a/modules/gdpr_consent/src/ConsentUserResolver/GdprConsentUserResolver.php b/modules/gdpr_consent/src/ConsentUserResolver/GdprConsentUserResolver.php
index ed803fd..57065db 100644
--- a/modules/gdpr_consent/src/ConsentUserResolver/GdprConsentUserResolver.php
+++ b/modules/gdpr_consent/src/ConsentUserResolver/GdprConsentUserResolver.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gdpr_consent\ConsentUserResolver;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -25,14 +26,14 @@ class GdprConsentUserResolver extends Plugin {
   /**
    * Human-readable of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label;
 
   /**
    * Description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $description;
 
diff --git a/modules/gdpr_consent/src/ConsentUserResolver/GdprConsentUserResolverInterface.php b/modules/gdpr_consent/src/ConsentUserResolver/GdprConsentUserResolverInterface.php
index 67571dd..50188f5 100644
--- a/modules/gdpr_consent/src/ConsentUserResolver/GdprConsentUserResolverInterface.php
+++ b/modules/gdpr_consent/src/ConsentUserResolver/GdprConsentUserResolverInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gdpr_consent\ConsentUserResolver;
 
+use Drupal\user\Entity\User;
 use Drupal\Core\Entity\EntityInterface;
 
 /**
@@ -12,10 +13,10 @@ interface GdprConsentUserResolverInterface {
   /**
    * Gets the user reference from the specified entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to use when finding the user.
    *
-   * @return \Drupal\user\Entity\User
+   * @return User
    *   The user
    */
   public function resolve(EntityInterface $entity);
diff --git a/modules/gdpr_consent/src/Controller/ConsentAgreementController.php b/modules/gdpr_consent/src/Controller/ConsentAgreementController.php
index 042cbb9..8fea768 100644
--- a/modules/gdpr_consent/src/Controller/ConsentAgreementController.php
+++ b/modules/gdpr_consent/src/Controller/ConsentAgreementController.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\gdpr_consent\Controller;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\gdpr_consent\ConsentAgreementStorageInterface;
+use Drupal\gdpr_consent\Entity\ConsentAgreementInterface;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Datetime\DateFormatterInterface;
@@ -26,34 +31,34 @@ class ConsentAgreementController extends ControllerBase {
   /**
    * The entity field manager for metadata.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   private $entityFieldManager;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   private $dateFormatter;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   private $renderer;
 
   /**
    * Constructs a ConsentAgreementController controller object.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager for metadata.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Render\Renderer $renderer
+   * @param Renderer $renderer
    *   The renderer service.
    */
   public function __construct(EntityFieldManagerInterface $entity_field_manager, EntityTypeManagerInterface $entity_type_manager, DateFormatterInterface $date_formatter, Renderer $renderer) {
@@ -84,7 +89,7 @@ class ConsentAgreementController extends ControllerBase {
    * @return array
    *   An array suitable for drupal_render().
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function revisionShow($gdpr_consent_agreement_revision) {
     $gdprConsentAgreement = $this->entityTypeManager
@@ -105,7 +110,7 @@ class ConsentAgreementController extends ControllerBase {
    * @return string
    *   The page title.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function revisionPageTitle($gdpr_consent_agreement_revision) {
     $gdprConsentAgreement = $this->entityTypeManager
@@ -120,19 +125,19 @@ class ConsentAgreementController extends ControllerBase {
   /**
    * Generates an overview table of older revisions of a Consent Agreement .
    *
-   * @param \Drupal\gdpr_consent\Entity\ConsentAgreement $gdpr_consent_agreement
+   * @param ConsentAgreement $gdpr_consent_agreement
    *   A Consent Agreement object.
    *
    * @return array
    *   An array as expected by drupal_render().
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityMalformedException
    */
   public function revisionOverview(ConsentAgreement $gdpr_consent_agreement) {
     $account = $this->currentUser();
-    /** @var \Drupal\gdpr_consent\ConsentAgreementStorageInterface $storage */
+    /** @var ConsentAgreementStorageInterface $storage */
     $storage = $this->entityTypeManager->getStorage('gdpr_consent_agreement');
 
     $build['#title'] = $this->t('Revisions for %title', ['%title' => $gdpr_consent_agreement->title->value]);
@@ -148,7 +153,7 @@ class ConsentAgreementController extends ControllerBase {
     $latest_revision = TRUE;
 
     foreach (array_reverse($vids) as $vid) {
-      /** @var \Drupal\gdpr_consent\Entity\ConsentAgreement $revision */
+      /** @var ConsentAgreement $revision */
       $revision = $storage->loadRevision($vid);
 
       $username = [
@@ -245,15 +250,15 @@ class ConsentAgreementController extends ControllerBase {
   /**
    * Render My Agreements content.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The user to show agreements for.
    *
    * @return array
    *   Renderable table of user agreements.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws EntityMalformedException
+   * @throws PluginNotFoundException
    */
   public function myAgreements(AccountInterface $user) {
     $map = $this->entityFieldManager->getFieldMapByFieldType('gdpr_user_consent');
@@ -273,7 +278,7 @@ class ConsentAgreementController extends ControllerBase {
           ->loadMultiple($ids);
 
         foreach ($entities as $entity) {
-          /** @var \Drupal\gdpr_consent\Entity\ConsentAgreementInterface $agreement */
+          /** @var ConsentAgreementInterface $agreement */
           $agreement = $agreement_storage->loadRevision($entity->{$field_name}->target_revision_id);
 
           $link = $agreement->title->value;
diff --git a/modules/gdpr_consent/src/Entity/ConsentAgreementInterface.php b/modules/gdpr_consent/src/Entity/ConsentAgreementInterface.php
index 2ba07aa..c342c40 100644
--- a/modules/gdpr_consent/src/Entity/ConsentAgreementInterface.php
+++ b/modules/gdpr_consent/src/Entity/ConsentAgreementInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gdpr_consent\Entity;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\RevisionLogInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
@@ -95,7 +96,7 @@ interface ConsentAgreementInterface extends ContentEntityInterface, RevisionLogI
   /**
    * Gets the Consent Agreement revision author.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity for the revision author.
    */
   public function getRevisionUser();
diff --git a/modules/gdpr_consent/src/Form/ConsentAgreementForm.php b/modules/gdpr_consent/src/Form/ConsentAgreementForm.php
index 23ec301..9972353 100644
--- a/modules/gdpr_consent/src/Form/ConsentAgreementForm.php
+++ b/modules/gdpr_consent/src/Form/ConsentAgreementForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gdpr_consent\Form;
 
+use Drupal\gdpr_consent\Entity\ConsentAgreement;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ -20,20 +21,20 @@ class ConsentAgreementForm extends ContentEntityForm {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * {@inheritdoc}
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(
@@ -63,7 +64,7 @@ class ConsentAgreementForm extends ContentEntityForm {
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\gdpr_consent\Entity\ConsentAgreement $entity */
+    /** @var ConsentAgreement $entity */
     $form = parent::buildForm($form, $form_state);
 
     if (!$this->entity->isNew()) {
diff --git a/modules/gdpr_consent/src/Form/ConsentAgreementRevisionRevertForm.php b/modules/gdpr_consent/src/Form/ConsentAgreementRevisionRevertForm.php
index c810b25..5e669ca 100644
--- a/modules/gdpr_consent/src/Form/ConsentAgreementRevisionRevertForm.php
+++ b/modules/gdpr_consent/src/Form/ConsentAgreementRevisionRevertForm.php
@@ -21,21 +21,21 @@ class ConsentAgreementRevisionRevertForm extends ConfirmFormBase {
   /**
    * The Consent Agreement revision.
    *
-   * @var \Drupal\gdpr_consent\Entity\ConsentAgreementInterface
+   * @var ConsentAgreementInterface
    */
   protected $revision;
 
   /**
    * The Consent Agreement storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $consentAgreementStorage;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
@@ -52,9 +52,9 @@ class ConsentAgreementRevisionRevertForm extends ConfirmFormBase {
   /**
    * Constructs a new ConsentAgreementRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entityStorage
+   * @param EntityStorageInterface $entityStorage
    *   The Consent Agreement storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $dateFormatter
+   * @param DateFormatterInterface $dateFormatter
    *   The date formatter service.
    */
   public function __construct(EntityStorageInterface $entityStorage, DateFormatterInterface $dateFormatter) {
@@ -138,12 +138,12 @@ class ConsentAgreementRevisionRevertForm extends ConfirmFormBase {
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\gdpr_consent\Entity\ConsentAgreementInterface $revision
+   * @param ConsentAgreementInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\gdpr_consent\Entity\ConsentAgreementInterface
+   * @return ConsentAgreementInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(ConsentAgreementInterface $revision, FormStateInterface $form_state) {
diff --git a/modules/gdpr_consent/src/Plugin/Block/GdprMyAgreementsBlock.php b/modules/gdpr_consent/src/Plugin/Block/GdprMyAgreementsBlock.php
index 965920b..275a3aa 100644
--- a/modules/gdpr_consent/src/Plugin/Block/GdprMyAgreementsBlock.php
+++ b/modules/gdpr_consent/src/Plugin/Block/GdprMyAgreementsBlock.php
@@ -25,14 +25,14 @@ class GdprMyAgreementsBlock extends BlockBase implements ContainerFactoryPluginI
   /**
    * The class resolver.
    *
-   * @var \Drupal\Core\DependencyInjection\ClassResolverInterface
+   * @var ClassResolverInterface
    */
   protected $classResolver;
 
   /**
    * The user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
@@ -66,9 +66,9 @@ class GdprMyAgreementsBlock extends BlockBase implements ContainerFactoryPluginI
    *   The plugin_id for the plugin instance.
    * @param mixed $pluginDefinition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\DependencyInjection\ClassResolverInterface $classResolver
+   * @param ClassResolverInterface $classResolver
    *   The class resolver service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The user.
    */
   public function __construct(
diff --git a/modules/gdpr_consent/src/Plugin/Field/FieldFormatter/ConsentFormatter.php b/modules/gdpr_consent/src/Plugin/Field/FieldFormatter/ConsentFormatter.php
index 48299cd..01e8e77 100644
--- a/modules/gdpr_consent/src/Plugin/Field/FieldFormatter/ConsentFormatter.php
+++ b/modules/gdpr_consent/src/Plugin/Field/FieldFormatter/ConsentFormatter.php
@@ -24,7 +24,7 @@ class ConsentFormatter extends FormatterBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -35,7 +35,7 @@ class ConsentFormatter extends FormatterBase {
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ -45,7 +45,7 @@ class ConsentFormatter extends FormatterBase {
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/modules/gdpr_consent/src/Plugin/Field/FieldType/UserConsentItem.php b/modules/gdpr_consent/src/Plugin/Field/FieldType/UserConsentItem.php
index cfca43c..4609c92 100644
--- a/modules/gdpr_consent/src/Plugin/Field/FieldType/UserConsentItem.php
+++ b/modules/gdpr_consent/src/Plugin/Field/FieldType/UserConsentItem.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gdpr_consent\Plugin\Field\FieldType;
 
+use Drupal\gdpr_consent\ConsentUserResolver\ConsentUserResolverPluginManager;
 use Drupal\Core\Field\FieldItemBase;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -68,7 +69,7 @@ class UserConsentItem extends FieldItemBase {
   public function postSave($update) {
     $definition = $this->getFieldDefinition();
 
-    /** @var \Drupal\gdpr_consent\ConsentUserResolver\ConsentUserResolverPluginManager $plugin_manager */
+    /** @var ConsentUserResolverPluginManager $plugin_manager */
     $plugin_manager = \Drupal::service('plugin.manager.gdpr_consent_resolver');
     $resolver = $plugin_manager->getForEntityType($definition->getTargetEntityTypeId(), $definition->getTargetBundle());
     $user = $resolver->resolve($this->getEntity());
diff --git a/modules/gdpr_consent/src/Plugin/Field/FieldWidget/ConsentWidget.php b/modules/gdpr_consent/src/Plugin/Field/FieldWidget/ConsentWidget.php
index 69567ca..c93da13 100644
--- a/modules/gdpr_consent/src/Plugin/Field/FieldWidget/ConsentWidget.php
+++ b/modules/gdpr_consent/src/Plugin/Field/FieldWidget/ConsentWidget.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gdpr_consent\Plugin\Field\FieldWidget;
 
+use Drupal\user\Entity\User;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\WidgetBase;
@@ -31,14 +32,14 @@ class ConsentWidget extends WidgetBase {
   /**
    * The GDPR Consent Resolver manager.
    *
-   * @var \Drupal\gdpr_consent\ConsentUserResolver\ConsentUserResolverPluginManager
+   * @var ConsentUserResolverPluginManager
    */
   protected $gdprConsentResolverManager;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
@@ -69,15 +70,15 @@ class ConsentWidget extends WidgetBase {
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\gdpr_consent\ConsentUserResolver\ConsentUserResolverPluginManager $gdprConsentResolverManager
+   * @param ConsentUserResolverPluginManager $gdprConsentResolverManager
    *   The GDPR Consent Resolver manager.
-   * @param \Drupal\Core\Session\AccountInterface $currentUser
+   * @param AccountInterface $currentUser
    *   The current user.
    */
   public function __construct(
@@ -208,10 +209,10 @@ class ConsentWidget extends WidgetBase {
   /**
    * Gets the user who the consent will be stored against.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   The field.
    *
-   * @return \Drupal\user\Entity\User
+   * @return User
    *   The user
    *
    * @throws \Exception
diff --git a/modules/gdpr_dump/gdpr_dump.install b/modules/gdpr_dump/gdpr_dump.install
index 5a82933..62213ec 100644
--- a/modules/gdpr_dump/gdpr_dump.install
+++ b/modules/gdpr_dump/gdpr_dump.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Extension\ModuleInstallerInterface;
 /**
  * @file
  * Install file for the gdpr_dump module.
@@ -23,7 +24,7 @@ function gdpr_dump_requirements() {
  * Enable the 'Anonymizer' module.
  */
 function gdpr_dump_update_8001() {
-  /** @var \Drupal\Core\Extension\ModuleInstallerInterface $installer */
+  /** @var ModuleInstallerInterface $installer */
   $installer = Drupal::service('module_installer');
   $installer->install(['anonymizer']);
 }
