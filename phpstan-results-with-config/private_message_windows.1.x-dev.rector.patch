diff --git a/private_message_windows.module b/private_message_windows.module
index 7407ed0..8331fd1 100644
--- a/private_message_windows.module
+++ b/private_message_windows.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Link;
 use Drupal\Core\Url;
 use Drupal\field\Entity\FieldConfig;
@@ -13,7 +15,7 @@ use Drupal\Core\Session\AccountProxyInterface;
  * Implements hook_help().
  *
  * @param $route_name
- * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+ * @param RouteMatchInterface $route_match
  *
  * @return string
  */
@@ -74,7 +76,7 @@ function private_message_windows_theme($existing, $type, $theme, $path) {
         'addAnotherUserMsg' => '',
         'userPicture' => '',
         'userSearch' => 1,
-        'modulePath' => drupal_get_path('module', 'private_message_windows'),
+        'modulePath' => \Drupal::service('extension.list.module')->getPath('private_message_windows'),
       ],
     ],
   ];
@@ -164,10 +166,10 @@ function private_message_getUserTitle($user) {
 /**
  * User thumbnail by user object
  *
- * @param \Drupal\Core\Session\AccountInterface $sourceUser
+ * @param AccountInterface $sourceUser
  *
  * @return File|string
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws EntityStorageException
  */
 function private_message_windows_get_user_thumbnail($sourceUser) {
   $userPictureFld = \Drupal::config('private_message_windows.settings')->get('user_picture_field');
@@ -196,7 +198,7 @@ function private_message_windows_get_user_thumbnail($sourceUser) {
 
 /**
  * @return File|string
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws EntityStorageException
  */
 function private_message_windows_get_default_user_picture() {
   $userPictureFld = \Drupal::config('private_message_windows.settings')->get('user_picture_field');
@@ -216,7 +218,7 @@ function private_message_windows_get_default_user_picture() {
  *
  * @param $vars
  *
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws EntityStorageException
  */
 function private_message_windows_preprocess_private_message(&$vars) {
 
diff --git a/src/Controller/AjaxController.php b/src/Controller/AjaxController.php
index 6a181a8..c7b8d12 100644
--- a/src/Controller/AjaxController.php
+++ b/src/Controller/AjaxController.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\private_message_windows\Controller;
 
+use Drupal\Core\Entity\Sql\SqlContentEntityStorage;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Controller\ControllerBase;
@@ -32,63 +36,63 @@ class AjaxController extends ControllerBase{
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The entity manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The private message thread manager.
    *
-   * @var \Drupal\Core\Entity\Sql\SqlContentEntityStorage
+   * @var SqlContentEntityStorage
    */
   protected $threadStorage;
 
   /**
    * The private message service.
    *
-   * @var \Drupal\private_message\Service\PrivateMessageServiceInterface
+   * @var PrivateMessageServiceInterface
    */
   protected $privateMessageService;
 
   /**
    * The private message service.
    *
-   * @var \Drupal\private_message\Service\PrivateMessageThreadManagerInterface
+   * @var PrivateMessageThreadManagerInterface
    */
   protected $privateMessageThreadManager;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
@@ -96,21 +100,21 @@ class AjaxController extends ControllerBase{
   /**
    * Constructs n AjaxController object.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The configuration factory.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\private_message\Service\PrivateMessageServiceInterface $privateMessageService
+   * @param PrivateMessageServiceInterface $privateMessageService
    *   The private message service.
-   * @param \Drupal\private_message\Service\PrivateMessageThreadManagerInterface $privateMessageThreadManager
+   * @param PrivateMessageThreadManagerInterface $privateMessageThreadManager
    *   The private message service.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
    */
   public function __construct(
@@ -197,7 +201,7 @@ class AjaxController extends ControllerBase{
   /**
    * Creates an Ajax Command with new threads for the private message inbox.
    *
-   * @param Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    *   The response to which any commands should be attached.
    */
   protected function getNewInboxThreads(AjaxResponse $response) {
@@ -252,7 +256,7 @@ class AjaxController extends ControllerBase{
   /**
    * Load a private message thread to be dynamically inserted into the page.
    *
-   * @param Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    *   The response to which any commands should be attached.
    */
   protected function loadThread(AjaxResponse $response) {
@@ -274,8 +278,8 @@ class AjaxController extends ControllerBase{
    * @param int $fromId - get message after this
    *
    * @return array
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getThreadMessagesSlice($thread, $count = 0, $fromId=0) {
 
@@ -351,7 +355,7 @@ class AjaxController extends ControllerBase{
   /**
    * Creates an Ajax Command containing new private message.
    *
-   * @param Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    *   The response to which any commands should be attached.
    */
   protected function getNewPrivateMessages(AjaxResponse $response) {
@@ -390,7 +394,7 @@ class AjaxController extends ControllerBase{
   /**
    * Create an Ajax Command containing old private messages threads.
    *
-   * @param Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    *   The response to which any commands should be attached.
    */
   protected function getOldInboxThreads(AjaxResponse $response) {
@@ -401,7 +405,7 @@ class AjaxController extends ControllerBase{
   /**
    * Add new message and create ajax-command to add new messages to the thread
    *
-   * @param Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    *   The response to which any commands should be attached.
    */
   protected function sendMessage(AjaxResponse $response) {
@@ -440,8 +444,8 @@ class AjaxController extends ControllerBase{
    *
    * @param AjaxResponse $response
    *   The response to which any commands should be attached.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function newThread(AjaxResponse $response) {
     $current_request = $this->requestStack->getCurrentRequest();
@@ -457,9 +461,9 @@ class AjaxController extends ControllerBase{
    *
    * @param AjaxResponse $response
    *   The response to which any commands should be attached.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   protected function deleteThread(AjaxResponse $response) {
     $current_request = $this->requestStack->getCurrentRequest();
@@ -478,8 +482,8 @@ class AjaxController extends ControllerBase{
    *
    * @param AjaxResponse $response
    *   The response to which any commands should be attached.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getOldPrivateMessages(AjaxResponse $response) {
     $current_request = $this->requestStack->getCurrentRequest();
diff --git a/src/Plugin/Block/PrivateMessageWindowsBlock.php b/src/Plugin/Block/PrivateMessageWindowsBlock.php
index 2cd1b86..68bd566 100644
--- a/src/Plugin/Block/PrivateMessageWindowsBlock.php
+++ b/src/Plugin/Block/PrivateMessageWindowsBlock.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\private_message_windows\Plugin\Block;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Access\CsrfTokenGenerator;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Block\BlockPluginInterface;
@@ -35,28 +36,28 @@ class PrivateMessageWindowsBlock extends BlockBase implements BlockPluginInterfa
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * Configuration Factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;
 
   /**
    * The private message service.
    *
-   * @var \Drupal\private_message\Service\PrivateMessageServiceInterface
+   * @var PrivateMessageServiceInterface
    */
   protected $privateMessageService;
 
   /**
    * The CSRF token generator service.
    *
-   * @var \Drupal\Core\Access\CsrfTokenGenerator
+   * @var CsrfTokenGenerator
    */
   protected $csrfToken;
 
@@ -78,13 +79,13 @@ class PrivateMessageWindowsBlock extends BlockBase implements BlockPluginInterfa
    *   The ID of the plugin.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\Core\Config\ConfigFactory $configFactory
+   * @param ConfigFactory $configFactory
    *   The config factory service.
-   * @param \Drupal\private_message\Service\PrivateMessageServiceInterface $privateMessageService
+   * @param PrivateMessageServiceInterface $privateMessageService
    *   The private message service.
-   * @param \Drupal\Core\Access\CsrfTokenGenerator $csrfToken
+   * @param CsrfTokenGenerator $csrfToken
    *   The CSRF token generator service.
    * @param LanguageManagerInterface $languageManager
    *   Language Manager Service
@@ -129,7 +130,7 @@ class PrivateMessageWindowsBlock extends BlockBase implements BlockPluginInterfa
 
   /**
    * {@inheritdoc}
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function build() {
     $block = [];
