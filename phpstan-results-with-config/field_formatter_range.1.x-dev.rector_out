modules/contrib/field_formatter_range/field_formatter_range.install
modules/contrib/field_formatter_range/field_formatter_range.module
modules/contrib/field_formatter_range/field_formatter_range.post_update.php
modules/contrib/field_formatter_range/src/FieldFormatterRangeInterface.php
modules/contrib/field_formatter_range/src/Service/FieldFormatterRangeUpdater.php
modules/contrib/field_formatter_range/src/Service/FieldFormatterRangeUpdaterInterface.php

3 files with changes
====================

1) modules/contrib/field_formatter_range/src/Service/FieldFormatterRangeUpdater.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected ConfigFactoryInterface $configFactory;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected ModuleHandlerInterface $moduleHandler;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


2) modules/contrib/field_formatter_range/field_formatter_range.post_update.php:5

    ---------- begin diff ----------
@@ @@
  */

 declare(strict_types = 1);
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\layout_builder\Section;

 use Drupal\field_formatter_range\Service\FieldFormatterRangeUpdater;

@@ @@
     $layout_section_field_mapping = \Drupal::service('entity_field.manager')->getFieldMapByFieldType('layout_section');
     foreach ($layout_section_field_mapping as $entity_type_id => $entity_fields) {
       $sandbox['entity_fields'][$entity_type_id] = [];
-      /** @var \Drupal\Core\Entity\EntityStorageInterface $entity_storage */
+      /** @var EntityStorageInterface $entity_storage */
       $entity_storage = \Drupal::service('entity_type.manager')->getStorage($entity_type_id);

       // There should be only one field but in case of custom development or
@@ @@
       continue;
     }

-    /** @var \Drupal\Core\Entity\EntityStorageInterface $entity_storage */
+    /** @var EntityStorageInterface $entity_storage */
     $entity_storage = \Drupal::service('entity_type.manager')->getStorage($entity_type_id);
     /** @var string $entity_id_key */
     $entity_id_key = $entity_storage->getEntityType()->getKey('id');
@@ @@
     $query->range(0, (int) 25);
     /** @var int[] $entity_ids_to_update */
     $entity_ids_to_update = $query->execute();
-    /** @var \Drupal\Core\Entity\ContentEntityInterface[] $entities_to_update */
+    /** @var ContentEntityInterface[] $entities_to_update */
     $entities_to_update = $entity_storage->loadMultiple($entity_ids_to_update);

     foreach ($entities_to_update as $entity) {
@@ @@
         /** @var array $sections */
         $sections = $override_field_value->getValue();
         $sections_changed = FALSE;
-        /** @var \Drupal\layout_builder\Section $section */
+        /** @var Section $section */
         foreach ($sections as $section) {
           $components = $section->getComponents();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


3) modules/contrib/field_formatter_range/field_formatter_range.module:39

    ---------- begin diff ----------
@@ @@

   // Figure out the type of the field.
   if ($field_definition instanceof BaseFieldDefinition) {
-    /** @var \Drupal\Core\Field\BaseFieldDefinition $field_definition */
+    /** @var BaseFieldDefinition $field_definition */
     $cardinality = $field_definition->getCardinality();
   }
   elseif ($field_definition instanceof FieldConfig) {
-    /** @var Drupal\field\Entity\FieldConfig $field_definition */
+    /** @var FieldConfig $field_definition */
     $cardinality = $field_definition->getFieldStorageDefinition()->getCardinality();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 3 files have been changed by Rector                                       

