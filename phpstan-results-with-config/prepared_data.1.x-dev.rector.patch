diff --git a/prepared_data.api.php b/prepared_data.api.php
index 4126cb7..cc05594 100644
--- a/prepared_data.api.php
+++ b/prepared_data.api.php
@@ -7,16 +7,14 @@ use Drupal\prepared_data\Processor\ProcessorInterface;
  * Hooks for prepared_data module. All hooks can and should
  * be placed into <mymodulename>.prepared_data.inc.
  */
-
 /**
  * @addtogroup hooks
  * @{
  */
-
 /**
  * After prepared data has been build for the first time.
  *
- * @param \Drupal\prepared_data\PreparedDataInterface $data
+ * @param PreparedDataInterface $data
  *   The prepared data as wrapped object.
  */
 function hook_prepared_data_build(PreparedDataInterface $data) {}
@@ -24,7 +22,7 @@ function hook_prepared_data_build(PreparedDataInterface $data) {}
 /**
  * After prepared data has been refreshed.
  *
- * @param \Drupal\prepared_data\PreparedDataInterface $data
+ * @param PreparedDataInterface $data
  *   The prepared data as wrapped object.
  */
 function hook_prepared_data_refreshed(PreparedDataInterface $data) {}
@@ -34,9 +32,9 @@ function hook_prepared_data_refreshed(PreparedDataInterface $data) {}
  *
  * See also hook_prepared_data_initialized_by_PROCESSOR().
  *
- * @param \Drupal\prepared_data\Processor\ProcessorInterface $processor
+ * @param ProcessorInterface $processor
  *   The processor instance.
- * @param \Drupal\prepared_data\PreparedDataInterface $data
+ * @param PreparedDataInterface $data
  *   The data as wrapped object.
  */
 function hook_prepared_data_initialized_by(ProcessorInterface $processor, PreparedDataInterface $data) {}
@@ -44,9 +42,9 @@ function hook_prepared_data_initialized_by(ProcessorInterface $processor, Prepar
 /**
  * After the processor with plugin ID PROCESSOR initialized regards the given data.
  *
- * @param \Drupal\prepared_data\Processor\ProcessorInterface $processor
+ * @param ProcessorInterface $processor
  *   The processor instance.
- * @param \Drupal\prepared_data\PreparedDataInterface $data
+ * @param PreparedDataInterface $data
  *   The corresponding data as wrapped object.
  */
 function hook_prepared_data_initialized_by_PROCESSOR(ProcessorInterface $processor, PreparedDataInterface $data) {}
@@ -56,9 +54,9 @@ function hook_prepared_data_initialized_by_PROCESSOR(ProcessorInterface $process
  *
  * See also hook_prepared_data_processed_by_PROCESSOR().
  *
- * @param \Drupal\prepared_data\Processor\ProcessorInterface $processor
+ * @param ProcessorInterface $processor
  *   The processor instance.
- * @param \Drupal\prepared_data\PreparedDataInterface $data
+ * @param PreparedDataInterface $data
  *   The data as wrapped object.
  */
 function hook_prepared_data_processed_by(ProcessorInterface $processor, PreparedDataInterface $data) {}
@@ -66,9 +64,9 @@ function hook_prepared_data_processed_by(ProcessorInterface $processor, Prepared
 /**
  * After the processor with plugin ID PROCESSOR processed regards the given data.
  *
- * @param \Drupal\prepared_data\Processor\ProcessorInterface $processor
+ * @param ProcessorInterface $processor
  *   The processor instance.
- * @param \Drupal\prepared_data\PreparedDataInterface $data
+ * @param PreparedDataInterface $data
  *   The corresponding data as wrapped object.
  */
 function hook_prepared_data_processed_by_PROCESSOR(ProcessorInterface $processor, PreparedDataInterface $data) {}
@@ -78,9 +76,9 @@ function hook_prepared_data_processed_by_PROCESSOR(ProcessorInterface $processor
  *
  * See also hook_prepared_data_finished_by_PROCESSOR().
  *
- * @param \Drupal\prepared_data\Processor\ProcessorInterface $processor
+ * @param ProcessorInterface $processor
  *   The processor instance.
- * @param \Drupal\prepared_data\PreparedDataInterface $data
+ * @param PreparedDataInterface $data
  *   The data as wrapped object.
  */
 function hook_prepared_data_finished_by(ProcessorInterface $processor, PreparedDataInterface $data) {}
@@ -88,9 +86,9 @@ function hook_prepared_data_finished_by(ProcessorInterface $processor, PreparedD
 /**
  * After the processor with plugin ID PROCESSOR finished regards the given data.
  *
- * @param \Drupal\prepared_data\Processor\ProcessorInterface $processor
+ * @param ProcessorInterface $processor
  *   The processor instance.
- * @param \Drupal\prepared_data\PreparedDataInterface $data
+ * @param PreparedDataInterface $data
  *   The corresponding data as wrapped object.
  */
 function hook_prepared_data_finished_by_PROCESSOR(ProcessorInterface $processor, PreparedDataInterface $data) {}
@@ -100,9 +98,9 @@ function hook_prepared_data_finished_by_PROCESSOR(ProcessorInterface $processor,
  *
  * See also hook_prepared_data_cleanup_by_PROCESSOR().
  *
- * @param \Drupal\prepared_data\Processor\ProcessorInterface $processor
+ * @param ProcessorInterface $processor
  *   The processor instance.
- * @param \Drupal\prepared_data\PreparedDataInterface $data
+ * @param PreparedDataInterface $data
  *   The data as wrapped object.
  */
 function hook_prepared_data_cleanup_by(ProcessorInterface $processor, PreparedDataInterface $data) {}
@@ -110,9 +108,9 @@ function hook_prepared_data_cleanup_by(ProcessorInterface $processor, PreparedDa
 /**
  * After the processor with plugin ID PROCESSOR cleaned up regards the given data.
  *
- * @param \Drupal\prepared_data\Processor\ProcessorInterface $processor
+ * @param ProcessorInterface $processor
  *   The processor instance.
- * @param \Drupal\prepared_data\PreparedDataInterface $data
+ * @param PreparedDataInterface $data
  *   The corresponding data as wrapped object.
  */
 function hook_prepared_data_cleanup_by_PROCESSOR(ProcessorInterface $processor, PreparedDataInterface $data) {}
diff --git a/prepared_data.drush.inc b/prepared_data.drush.inc
index 61bb6a9..4421fb9 100644
--- a/prepared_data.drush.inc
+++ b/prepared_data.drush.inc
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\prepared_data\Commands\PreparedDataCommands;
 /**
  * @file
  * Prepared Data Drush commands.
@@ -65,7 +66,7 @@ function drush_prepared_data_build($partial = NULL) {
     'offset' => drush_get_option('offset', 0),
     'state' => drush_get_option('state', 1),
   ];
-  /** @var \Drupal\prepared_data\Commands\PreparedDataCommands $data_commands */
+  /** @var PreparedDataCommands $data_commands */
   $data_commands = \Drupal::service('prepared_data.commands');
   $data_commands->build($partial, $options);
 }
@@ -80,7 +81,7 @@ function drush_prepared_data_refresh() {
     'wait' => drush_get_option('wait', 100000),
     'limit' => drush_get_option('limit', 0),
   ];
-  /** @var \Drupal\prepared_data\Commands\PreparedDataCommands $data_commands */
+  /** @var PreparedDataCommands $data_commands */
   $data_commands = \Drupal::service('prepared_data.commands');
   $data_commands->refresh($options);
 }
diff --git a/src/Annotation/PreparedDataProcessor.php b/src/Annotation/PreparedDataProcessor.php
index 26d48f4..5f7e872 100644
--- a/src/Annotation/PreparedDataProcessor.php
+++ b/src/Annotation/PreparedDataProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\prepared_data\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -23,7 +24,7 @@ class PreparedDataProcessor extends Plugin {
   /**
    * The label of the Processor plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/PreparedDataProvider.php b/src/Annotation/PreparedDataProvider.php
index af22e74..08655f1 100644
--- a/src/Annotation/PreparedDataProvider.php
+++ b/src/Annotation/PreparedDataProvider.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\prepared_data\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -23,7 +24,7 @@ class PreparedDataProvider extends Plugin {
   /**
    * The label of the Provider plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Builder/DataBuilder.php b/src/Builder/DataBuilder.php
index e1cfc5c..4c96f98 100644
--- a/src/Builder/DataBuilder.php
+++ b/src/Builder/DataBuilder.php
@@ -20,14 +20,14 @@ class DataBuilder implements DataBuilderInterface {
   /**
    * The manager for data processor plugins.
    *
-   * @var \Drupal\prepared_data\Processor\ProcessorManager
+   * @var ProcessorManager
    */
   protected $processorManager;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
@@ -41,18 +41,18 @@ class DataBuilder implements DataBuilderInterface {
   /**
    * The logger instance.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
   /**
    * DataBuilder constructor.
    *
-   * @param \Drupal\prepared_data\Processor\ProcessorManager $processor_manager
+   * @param ProcessorManager $processor_manager
    *   The manager for data processor plugins.
    * @param \Drupal\Core\Extension\ModuleHandlerInterface
    *   The module handler.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   The logger instance.
    */
   public function __construct(ProcessorManager $processor_manager, ModuleHandlerInterface $module_handler, LoggerChannelInterface $logger) {
diff --git a/src/Builder/DataBuilderInterface.php b/src/Builder/DataBuilderInterface.php
index 3f52818..74a0109 100644
--- a/src/Builder/DataBuilderInterface.php
+++ b/src/Builder/DataBuilderInterface.php
@@ -14,7 +14,7 @@ interface DataBuilderInterface {
    * @param string $key
    *   The key which identifies the prepared data.
    *
-   * @return \Drupal\prepared_data\PreparedDataInterface
+   * @return PreparedDataInterface
    *   A newly build data-set.
    */
   public function build($key);
@@ -22,7 +22,7 @@ interface DataBuilderInterface {
   /**
    * Refreshes the given prepared data.
    *
-   * @param \Drupal\prepared_data\PreparedDataInterface $data
+   * @param PreparedDataInterface $data
    *   The prepared data to refresh.
    */
   public function refresh(PreparedDataInterface $data);
diff --git a/src/Commands/PreparedDataCommands.php b/src/Commands/PreparedDataCommands.php
index ccb56e3..988a652 100644
--- a/src/Commands/PreparedDataCommands.php
+++ b/src/Commands/PreparedDataCommands.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\prepared_data\Commands;
 
+use Drupal\prepared_data\Storage\StorageInterface;
 use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Core\State\StateInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -19,41 +20,41 @@ class PreparedDataCommands {
   /**
    * The manager for data provider plugins.
    *
-   * @var \Drupal\prepared_data\Provider\ProviderManager
+   * @var ProviderManager
    */
   protected $providerManager;
 
   /**
    * The manager for data processor plugins.
    *
-   * @var \Drupal\prepared_data\Processor\ProcessorManager
+   * @var ProcessorManager
    */
   protected $processorManager;
 
   /**
    * The logger instance.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
   /**
    * The Drupal state storage.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * PreparedDataCommands constructor.
    *
-   * @param \Drupal\prepared_data\Provider\ProviderManager $provider_manager
+   * @param ProviderManager $provider_manager
    *   The manager for data provider plugins.
-   * @param \Drupal\prepared_data\Processor\ProcessorManager $processor_manager
+   * @param ProcessorManager $processor_manager
    *   The manager for data processor plugins.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   The logger instance.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The Drupal state storage.
    */
   public function __construct(ProviderManager $provider_manager, ProcessorManager $processor_manager, LoggerChannelInterface $logger, StateInterface $state) {
@@ -263,7 +264,7 @@ class PreparedDataCommands {
       }
     }
 
-    /** @var \Drupal\prepared_data\Storage\StorageInterface[] $storages */
+    /** @var StorageInterface[] $storages */
     $storages = [];
     foreach ($all_providers as $provider) {
       $storage = $provider->getDataStorage();
diff --git a/src/Commands/PreparedDataDrushCommands.php b/src/Commands/PreparedDataDrushCommands.php
index 41f0400..8f61bd2 100644
--- a/src/Commands/PreparedDataDrushCommands.php
+++ b/src/Commands/PreparedDataDrushCommands.php
@@ -12,14 +12,14 @@ class PreparedDataDrushCommands extends DrushCommands {
   /**
    * The service implementation of data commands.
    *
-   * @var \Drupal\prepared_data\Commands\PreparedDataCommands
+   * @var PreparedDataCommands
    */
   protected $dataCommands;
 
   /**
    * PreparedDataDrushCommands constructor.
    *
-   * @param \Drupal\prepared_data\Commands\PreparedDataCommands $data_commands
+   * @param PreparedDataCommands $data_commands
    *   The service implementation of data commands.
    */
   public function __construct(PreparedDataCommands $data_commands) {
diff --git a/src/Controller/PreparedDataController.php b/src/Controller/PreparedDataController.php
index 1743d7e..a7f8eaa 100644
--- a/src/Controller/PreparedDataController.php
+++ b/src/Controller/PreparedDataController.php
@@ -25,35 +25,35 @@ class PreparedDataController implements ContainerInjectionInterface {
   /**
    * The factory for prepared data.
    *
-   * @var \Drupal\prepared_data\DataFactoryInterface
+   * @var DataFactoryInterface
    */
   protected $dataFactory;
 
   /**
    * The shorthands factory.
    *
-   * @var \Drupal\prepared_data\Shorthand\ShorthandsFactory
+   * @var ShorthandsFactory
    */
   protected $shorthands;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The settings of the Prepared Data module.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $settings;
 
   /**
    * The Drupal renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -73,15 +73,15 @@ class PreparedDataController implements ContainerInjectionInterface {
   /**
    * PreparedDataController constructor.
    *
-   * @param \Drupal\prepared_data\DataFactoryInterface $data_factory
+   * @param DataFactoryInterface $data_factory
    *   The factory for prepared data.
    * @param \Drupal\prepared_data\Shorthand\ShorthandsFactory
    *   The shorthands factory.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Config\ImmutableConfig $settings
+   * @param ImmutableConfig $settings
    *   The settings of the Prepared Data module.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The Drupal renderer.
    */
   public function __construct(DataFactoryInterface $data_factory, ShorthandsFactory $shorthands, AccountProxyInterface $current_user, ImmutableConfig $settings, RendererInterface $renderer) {
@@ -95,13 +95,13 @@ class PreparedDataController implements ContainerInjectionInterface {
   /**
    * Returns a JSON response containing requested prepared data.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response on success.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
+   * @throws NotFoundHttpException
    *   In case the requested data is not available.
    */
   public function get(Request $request) {
@@ -149,9 +149,9 @@ class PreparedDataController implements ContainerInjectionInterface {
   /**
    * Sets proper CORS headers based on the given request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
-   * @param \Symfony\Component\HttpFoundation\Response $response
+   * @param Response $response
    *   The corresponding response.
    */
   protected function setCORSHeaders(Request $request, Response $response) {
@@ -216,9 +216,9 @@ class PreparedDataController implements ContainerInjectionInterface {
   /**
    * Sets cacheability headers at the given response.
    *
-   * @param \Symfony\Component\HttpFoundation\Response $response
+   * @param Response $response
    *   The response to handle.
-   * @param \Drupal\prepared_data\PreparedDataInterface $data
+   * @param PreparedDataInterface $data
    *   The object which wraps prepared data.
    */
   protected function setCacheHeaders(Response $response, PreparedDataInterface $data) {
diff --git a/src/DataFactory.php b/src/DataFactory.php
index cd66dea..e29f997 100644
--- a/src/DataFactory.php
+++ b/src/DataFactory.php
@@ -15,21 +15,21 @@ class DataFactory implements DataFactoryInterface {
   /**
    * The manager for data provider plugins.
    *
-   * @var \Drupal\prepared_data\Provider\ProviderManager
+   * @var ProviderManager
    */
   protected $providerManager;
 
   /**
    * The manager for data processor plugins.
    *
-   * @var \Drupal\prepared_data\Processor\ProcessorManager
+   * @var ProcessorManager
    */
   protected $processorManager;
 
   /**
    * DataFactory constructor.
    *
-   * @param \Drupal\prepared_data\Provider\ProviderManager $provider_manager
+   * @param ProviderManager $provider_manager
    *   The manager for data provider plugins.
    * @param \Drupal\prepared_data\Processor\ProcessorManager
    *   The manager for data processor plugins.
diff --git a/src/DataFactoryInterface.php b/src/DataFactoryInterface.php
index d8d97f3..5bbd9d7 100644
--- a/src/DataFactoryInterface.php
+++ b/src/DataFactoryInterface.php
@@ -25,11 +25,11 @@ interface DataFactoryInterface {
    *   before it's being returned. This should only be considered
    *   when refreshed data is explicitly required.
    *   Default is set to FALSE.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   (Optional) When given, the access check will be performed on
    *   this account, instead of the current user.
    *
-   * @return \Drupal\prepared_data\PreparedDataInterface|null
+   * @return PreparedDataInterface|null
    *   The prepared data as wrapped object, or NULL if access
    *   failed or the parameters don't match up with any provider.
    */
@@ -67,11 +67,11 @@ interface DataFactoryInterface {
    *   before it's being returned. This should only be considered
    *   when refreshed data is explicitly required.
    *   Default is set to FALSE.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   (Optional) When given, the access check will be performed on
    *   this account, instead of the current user.
    *
-   * @return \Drupal\prepared_data\PreparedDataInterface|string|array|mixed|null
+   * @return PreparedDataInterface|string|array|mixed|null
    *   When the $subset_keys param is given, the subset will be returned.
    *   Otherwise, the prepared data as wrapped object, or NULL if access
    *   failed or the parameters don't match up with any provider.
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index b132a07..190391e 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\prepared_data\Form;
 
+use Drupal\Core\Config\Config;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\State\StateInterface;
@@ -16,14 +17,14 @@ class SettingsForm extends ConfigFormBase {
   /**
    * The processor plugin manager.
    *
-   * @var \Drupal\prepared_data\Processor\ProcessorManager
+   * @var ProcessorManager
    */
   protected $processorManager;
 
   /**
    * The Drupal state system.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
@@ -33,9 +34,9 @@ class SettingsForm extends ConfigFormBase {
   public static function create(ContainerInterface $container) {
     /** @var \Drupal\prepared_data\Form\SettingsForm $instance */
     $instance = parent::create($container);
-    /** @var \Drupal\prepared_data\Processor\ProcessorManager $processor_manager */
+    /** @var ProcessorManager $processor_manager */
     $processor_manager = $container->get('prepared_data.processor_manager');
-    /** @var \Drupal\Core\State\StateInterface $state */
+    /** @var StateInterface $state */
     $state = $container->get('state');
     $instance->setProcessorManager($processor_manager);
     $instance->setState($state);
@@ -59,7 +60,7 @@ class SettingsForm extends ConfigFormBase {
   /**
    * Get the mutable config object which belongs to this form.
    *
-   * @return \Drupal\Core\Config\Config
+   * @return Config
    *   The mutable config object.
    */
   public function getConfig() {
@@ -69,7 +70,7 @@ class SettingsForm extends ConfigFormBase {
   /**
    * Set the processor plugin manager.
    *
-   * @param \Drupal\prepared_data\Processor\ProcessorManager $manager
+   * @param ProcessorManager $manager
    *   The processor plugin manager.
    */
   public function setProcessorManager(ProcessorManager $manager) {
@@ -79,7 +80,7 @@ class SettingsForm extends ConfigFormBase {
   /**
    * Set the state system.
    *
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The Drupal state system.
    */
   public function setState(StateInterface $state) {
diff --git a/src/Plugin/prepared_data/Processor/MaxValidness.php b/src/Plugin/prepared_data/Processor/MaxValidness.php
index 45aa112..87ad09b 100644
--- a/src/Plugin/prepared_data/Processor/MaxValidness.php
+++ b/src/Plugin/prepared_data/Processor/MaxValidness.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\prepared_data\Plugin\prepared_data\Processor;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\prepared_data\PreparedDataInterface;
 use Drupal\prepared_data\Processor\ProcessorBase;
@@ -48,7 +49,7 @@ class MaxValidness extends ProcessorBase implements ContainerFactoryPluginInterf
    */
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
     if ($config_factory = $container->get('config.factory')) {
-      /** @var \Drupal\Core\Config\ImmutableConfig $config */
+      /** @var ImmutableConfig $config */
       if ($config = $config_factory->get('prepared_data.settings')) {
         $max_validness = $config->get('max_validness');
       }
diff --git a/src/Plugin/prepared_data/Processor/ProviderProcessor.php b/src/Plugin/prepared_data/Processor/ProviderProcessor.php
index cba6bbb..2c0ba55 100644
--- a/src/Plugin/prepared_data/Processor/ProviderProcessor.php
+++ b/src/Plugin/prepared_data/Processor/ProviderProcessor.php
@@ -24,21 +24,21 @@ class ProviderProcessor extends ProcessorBase implements ContainerFactoryPluginI
   /**
    * The manager of prepared data providers.
    *
-   * @var \Drupal\prepared_data\Provider\ProviderManager
+   * @var ProviderManager
    */
   protected $providerManager;
 
   /**
    * A list of providers which are also processors.
    *
-   * @var \Drupal\prepared_data\Processor\ProcessorInterface[]
+   * @var ProcessorInterface[]
    */
   protected $providerProcessors;
 
   /**
    * Provider processor constructor.
    *
-   * @param \Drupal\prepared_data\Provider\ProviderManager $provider_manager
+   * @param ProviderManager $provider_manager
    *   The manager of prepared data providers.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
@@ -56,7 +56,7 @@ class ProviderProcessor extends ProcessorBase implements ContainerFactoryPluginI
    * {@inheritdoc}
    */
   static public function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
-    /** @var \Drupal\prepared_data\Provider\ProviderManager $provider_manager */
+    /** @var ProviderManager $provider_manager */
     $provider_manager = $container->get('prepared_data.provider_manager');
     return new static($provider_manager, $configuration, $plugin_id, $plugin_definition);
   }
@@ -124,7 +124,7 @@ class ProviderProcessor extends ProcessorBase implements ContainerFactoryPluginI
   /**
    * Get a list of providers which also act as a processor.
    *
-   * @return \Drupal\prepared_data\Processor\ProcessorInterface[]
+   * @return ProcessorInterface[]
    *   The providers which are also processors.
    */
   protected function getProviderProcessors() {
diff --git a/src/Plugin/prepared_data/Provider/EntityDataProvider.php b/src/Plugin/prepared_data/Provider/EntityDataProvider.php
index b91b019..087adad 100644
--- a/src/Plugin/prepared_data/Provider/EntityDataProvider.php
+++ b/src/Plugin/prepared_data/Provider/EntityDataProvider.php
@@ -32,14 +32,14 @@ class EntityDataProvider extends ProviderBase implements ProviderInterface, Cont
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
@@ -49,14 +49,14 @@ class EntityDataProvider extends ProviderBase implements ProviderInterface, Cont
    * The entity memory cache was added in Drupal 8.6.
    * @see https://www.drupal.org/project/drupal/issues/1596472
    *
-   * @var \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface|null
+   * @var MemoryCacheInterface|null
    */
   protected $entityMemoryCache;
 
   /**
    * Holds a list of known entities.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]
+   * @var EntityInterface[]
    */
   protected $knownEntities = [];
 
@@ -81,11 +81,11 @@ class EntityDataProvider extends ProviderBase implements ProviderInterface, Cont
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
+    /** @var EntityTypeManagerInterface $entity_type_manager */
     $entity_type_manager = $container->get('entity_type.manager');
-    /** @var \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository */
+    /** @var EntityRepositoryInterface $entity_repository */
     $entity_repository = $container->get('entity.repository');
-    /** @var \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface $entity_memory_cache */
+    /** @var MemoryCacheInterface $entity_memory_cache */
     $entity_memory_cache = NULL;
     if ($container->has('entity.memory_cache')) {
       $entity_memory_cache = $container->get('entity.memory_cache');
@@ -96,11 +96,11 @@ class EntityDataProvider extends ProviderBase implements ProviderInterface, Cont
   /**
    * Constructs an EntityDataProvider object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface $entity_memory_cache
+   * @param MemoryCacheInterface $entity_memory_cache
    *   The entity memory cache, if available.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
@@ -287,7 +287,7 @@ class EntityDataProvider extends ProviderBase implements ProviderInterface, Cont
    * @param array $parameters
    *   The parameters, keyed by parameter name.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|false
+   * @return EntityInterface|false
    *   The entity if found, FALSE otherwise.
    */
   protected function getEntityForParams(array $parameters) {
diff --git a/src/PreparedData.php b/src/PreparedData.php
index ea76494..86a0c91 100644
--- a/src/PreparedData.php
+++ b/src/PreparedData.php
@@ -53,7 +53,7 @@ class PreparedData implements PreparedDataInterface {
   /**
    * The base url where prepared data can be received.
    *
-   * @var \Drupal\Core\Url
+   * @var Url
    */
   protected $baseUrl;
 
@@ -302,7 +302,7 @@ class PreparedData implements PreparedDataInterface {
   /**
    * Get the base url for prepared data.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   protected function getBaseUrl() {
     if (!isset($this->baseUrl)) {
diff --git a/src/PreparedDataInterface.php b/src/PreparedDataInterface.php
index 67055c3..2ed7736 100644
--- a/src/PreparedDataInterface.php
+++ b/src/PreparedDataInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\prepared_data;
 
+use Drupal\Core\Url;
 /**
  * Interface for working with prepared data.
  */
@@ -130,7 +131,7 @@ interface PreparedDataInterface {
    * @param bool $use_shorthand
    *   (Optional) When TRUE, a shorthand will be used to build the url.
    *
-   * @return \Drupal\Core\Url|null
+   * @return Url|null
    *   The Url if one is available, NULL otherwise.
    */
   public function getUrl($subset_keys = [], $use_shorthand = TRUE);
diff --git a/src/Processor/ProcessorInterface.php b/src/Processor/ProcessorInterface.php
index dac2cbd..4a28320 100644
--- a/src/Processor/ProcessorInterface.php
+++ b/src/Processor/ProcessorInterface.php
@@ -61,10 +61,10 @@ interface ProcessorInterface extends PluginInspectionInterface {
    * Whenever possible, this method should only add or manipulate
    * required information for later processing the prepared data.
    *
-   * @param \Drupal\prepared_data\PreparedDataInterface $data
+   * @param PreparedDataInterface $data
    *   The prepared data as wrapped object.
    *
-   * @throws \Drupal\prepared_data\Processor\ProcessorRuntimeException
+   * @throws ProcessorRuntimeException
    *   In case something goes wrong at processor execution.
    */
   public function initialize(PreparedDataInterface $data);
@@ -76,10 +76,10 @@ interface ProcessorInterface extends PluginInspectionInterface {
    * all processors have been initialized.
    * Generated data can be put into PreparedDataInterface::data().
    *
-   * @param \Drupal\prepared_data\PreparedDataInterface $data
+   * @param PreparedDataInterface $data
    *   The prepared data as wrapped object.
    *
-   * @throws \Drupal\prepared_data\Processor\ProcessorRuntimeException
+   * @throws ProcessorRuntimeException
    *   In case something goes wrong at processor execution.
    */
   public function process(PreparedDataInterface $data);
@@ -93,10 +93,10 @@ interface ProcessorInterface extends PluginInspectionInterface {
    * This method can be used for optimization and
    * calculating the validness of the generated data.
    *
-   * @param \Drupal\prepared_data\PreparedDataInterface $data
+   * @param PreparedDataInterface $data
    *   The prepared data as wrapped object.
    *
-   * @throws \Drupal\prepared_data\Processor\ProcessorRuntimeException
+   * @throws ProcessorRuntimeException
    *   In case something goes wrong at processor execution.
    */
   public function finish(PreparedDataInterface $data);
@@ -113,10 +113,10 @@ interface ProcessorInterface extends PluginInspectionInterface {
    * remove its previously added data inside this method, enclosed
    * by a check for ::isEnabled().
    *
-   * @param \Drupal\prepared_data\PreparedDataInterface $data
+   * @param PreparedDataInterface $data
    *   The prepared data as wrapped object.
    *
-   * @throws \Drupal\prepared_data\Processor\ProcessorRuntimeException
+   * @throws ProcessorRuntimeException
    *   In case something goes wrong at processor execution.
    */
   public function cleanup(PreparedDataInterface $data);
diff --git a/src/Processor/ProcessorManager.php b/src/Processor/ProcessorManager.php
index d509e67..0f771c3 100644
--- a/src/Processor/ProcessorManager.php
+++ b/src/Processor/ProcessorManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\prepared_data\Processor;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Plugin\DefaultPluginManager;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ -16,28 +17,28 @@ class ProcessorManager extends DefaultPluginManager {
   /**
    * A list of all available processor instances.
    *
-   * @var \Drupal\prepared_data\Processor\ProcessorInterface[]
+   * @var ProcessorInterface[]
    */
   protected $processors;
 
   /**
    * A sorted list of all available processor instances.
    *
-   * @var \Drupal\prepared_data\Processor\ProcessorInterface[]
+   * @var ProcessorInterface[]
    */
   protected $sortedProcessors;
 
   /**
    * The module settings configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $settings;
 
   /**
    * The Drupal state system.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
@@ -49,11 +50,11 @@ class ProcessorManager extends DefaultPluginManager {
    *   keyed by the corresponding namespace to look for plugin implementations.
    * @param CacheBackendInterface $cache_backend
    *   The cache backend to use regards discovery.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The Drupal state system.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, ConfigFactoryInterface $config_factory, StateInterface $state) {
@@ -67,7 +68,7 @@ class ProcessorManager extends DefaultPluginManager {
   /**
    * Returns a list of all processor instances, sorted by their weight.
    *
-   * @return \Drupal\prepared_data\Processor\ProcessorInterface[]
+   * @return ProcessorInterface[]
    *   The sorted list of available processor instances.
    */
   public function getAllProcessors() {
@@ -96,7 +97,7 @@ class ProcessorManager extends DefaultPluginManager {
   /**
    * Returns a list of enabled processors, sorted by their weight.
    *
-   * @return \Drupal\prepared_data\Processor\ProcessorInterface[]
+   * @return ProcessorInterface[]
    *   The sorted list of enabled processor instances.
    */
   public function getEnabledProcessors() {
@@ -112,7 +113,7 @@ class ProcessorManager extends DefaultPluginManager {
   /**
    * Returns a list of not enabled processors, sorted by their weight.
    *
-   * @return \Drupal\prepared_data\Processor\ProcessorInterface[]
+   * @return ProcessorInterface[]
    *   The sorted list of not enabled processor instances.
    */
   public function getNotEnabledProcessors() {
@@ -128,7 +129,7 @@ class ProcessorManager extends DefaultPluginManager {
   /**
    * Returns a list of manageable processors, sorted by their weight.
    *
-   * @return \Drupal\prepared_data\Processor\ProcessorInterface[]
+   * @return ProcessorInterface[]
    *   The sorted list of manageable processor instances.
    */
   public function getManageableProcessors() {
@@ -184,7 +185,7 @@ class ProcessorManager extends DefaultPluginManager {
    */
   public function createInstance($plugin_id, array $configuration = []) {
     if (!isset($this->processors[$plugin_id])) {
-      /** @var \Drupal\prepared_data\Processor\ProcessorInterface $instance */
+      /** @var ProcessorInterface $instance */
       $instance = parent::createInstance($plugin_id, $configuration);
       $enabled = TRUE;
       $active = TRUE;
diff --git a/src/Processor/ProcessorTrait.php b/src/Processor/ProcessorTrait.php
index 72044c5..205b4d6 100644
--- a/src/Processor/ProcessorTrait.php
+++ b/src/Processor/ProcessorTrait.php
@@ -82,10 +82,10 @@ trait ProcessorTrait {
    * Whenever possible, this method should only add or manipulate
    * required information for later processing the prepared data.
    *
-   * @param \Drupal\prepared_data\PreparedDataInterface $data
+   * @param PreparedDataInterface $data
    *   The prepared data as wrapped object.
    *
-   * @throws \Drupal\prepared_data\Processor\ProcessorRuntimeException
+   * @throws ProcessorRuntimeException
    *   In case something goes wrong at processor execution.
    */
   public function initialize(PreparedDataInterface $data) {
@@ -98,10 +98,10 @@ trait ProcessorTrait {
    * all processors have been initialized.
    * Generated data can be put into PreparedDataInterface::data().
    *
-   * @param \Drupal\prepared_data\PreparedDataInterface $data
+   * @param PreparedDataInterface $data
    *   The prepared data as wrapped object.
    *
-   * @throws \Drupal\prepared_data\Processor\ProcessorRuntimeException
+   * @throws ProcessorRuntimeException
    *   In case something goes wrong at processor execution.
    */
   public function process(PreparedDataInterface $data) {
@@ -116,10 +116,10 @@ trait ProcessorTrait {
    * This method can be used for optimization and
    * calculating the validness of the generated data.
    *
-   * @param \Drupal\prepared_data\PreparedDataInterface $data
+   * @param PreparedDataInterface $data
    *   The prepared data as wrapped object.
    *
-   * @throws \Drupal\prepared_data\Processor\ProcessorRuntimeException
+   * @throws ProcessorRuntimeException
    *   In case something goes wrong at processor execution.
    */
   public function finish(PreparedDataInterface $data) {
@@ -137,10 +137,10 @@ trait ProcessorTrait {
    * remove its previously added data inside this method, enclosed
    * by a check for ::isEnabled().
    *
-   * @param \Drupal\prepared_data\PreparedDataInterface $data
+   * @param PreparedDataInterface $data
    *   The prepared data as wrapped object.
    *
-   * @throws \Drupal\prepared_data\Processor\ProcessorRuntimeException
+   * @throws ProcessorRuntimeException
    *   In case something goes wrong at processor execution.
    */
   public function cleanup(PreparedDataInterface $data) {
diff --git a/src/Provider/ProviderBase.php b/src/Provider/ProviderBase.php
index ab614ea..3814cf0 100644
--- a/src/Provider/ProviderBase.php
+++ b/src/Provider/ProviderBase.php
@@ -26,21 +26,21 @@ abstract class ProviderBase extends PluginBase implements ProviderInterface, Pro
   /**
    * The storage of prepared data.
    *
-   * @var \Drupal\prepared_data\Storage\StorageInterface
+   * @var StorageInterface
    */
   protected $dataStorage;
 
   /**
    * The builder which builds up and refreshes prepared data.
    *
-   * @var \Drupal\prepared_data\Builder\DataBuilderInterface
+   * @var DataBuilderInterface
    */
   protected $dataBuilder;
 
   /**
    * The account associated as current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
diff --git a/src/Provider/ProviderInterface.php b/src/Provider/ProviderInterface.php
index be34627..e9f4279 100644
--- a/src/Provider/ProviderInterface.php
+++ b/src/Provider/ProviderInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\prepared_data\Provider;
 
+use Drupal\prepared_data\PreparedDataInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\prepared_data\Builder\DataBuilderInterface;
@@ -64,7 +65,7 @@ interface ProviderInterface extends PluginInspectionInterface {
   /**
    * Checks whether the account may access data for the given argument.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account to check access for.
    * @param string|array|mixed $argument
    *   Can be a key as string, an associative array of named parameters,
@@ -88,7 +89,7 @@ interface ProviderInterface extends PluginInspectionInterface {
    * @param bool $force_valid
    *   When TRUE, expired data will be refreshed before it's being returned.
    *
-   * @return \Drupal\prepared_data\PreparedDataInterface|null
+   * @return PreparedDataInterface|null
    *   The prepared data as wrapped object, or NULL if access
    *   failed or the argument did not match up with the key pattern.
    */
@@ -104,7 +105,7 @@ interface ProviderInterface extends PluginInspectionInterface {
    *   Can be a key as string, an associative array of named parameters,
    *   or any kind of object which wants to match.
    *
-   * @return \Drupal\prepared_data\PreparedDataInterface|null
+   * @return PreparedDataInterface|null
    *   The prepared data as wrapped object, or NULL if access
    *   failed or the argument did not match up with the key pattern.
    */
@@ -113,21 +114,21 @@ interface ProviderInterface extends PluginInspectionInterface {
   /**
    * Get the used storage of prepared data.
    *
-   * @return \Drupal\prepared_data\Storage\StorageInterface
+   * @return StorageInterface
    */
   public function getDataStorage();
 
   /**
    * Get the used builder of prepared data.
    *
-   * @return \Drupal\prepared_data\Builder\DataBuilderInterface
+   * @return DataBuilderInterface
    */
   public function getDataBuilder();
 
   /**
    * Get the account being used as current user.
    *
-   * @return \Drupal\Core\Session\AccountInterface
+   * @return AccountInterface
    *   The associated account as current user.
    */
   public function getCurrentUser();
@@ -135,7 +136,7 @@ interface ProviderInterface extends PluginInspectionInterface {
   /**
    * Set the storage of prepared data to use.
    *
-   * @param \Drupal\prepared_data\Storage\StorageInterface $storage
+   * @param StorageInterface $storage
    *   The storage instance to set.
    */
   public function setDataStorage(StorageInterface $storage);
@@ -143,7 +144,7 @@ interface ProviderInterface extends PluginInspectionInterface {
   /**
    * Set the builder of prepared data to use.
    *
-   * @param \Drupal\prepared_data\Builder\DataBuilderInterface $builder
+   * @param DataBuilderInterface $builder
    *   The builder instance to set.
    */
   public function setDataBuilder(DataBuilderInterface $builder);
@@ -151,7 +152,7 @@ interface ProviderInterface extends PluginInspectionInterface {
   /**
    * Set the account to be used as current user.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account to be used as current user.
    */
   public function setCurrentUser(AccountInterface $account);
diff --git a/src/Provider/ProviderManager.php b/src/Provider/ProviderManager.php
index 76f2e7d..fa362a0 100644
--- a/src/Provider/ProviderManager.php
+++ b/src/Provider/ProviderManager.php
@@ -17,35 +17,35 @@ class ProviderManager extends DefaultPluginManager {
   /**
    * The storage of prepared data.
    *
-   * @var \Drupal\prepared_data\Storage\StorageInterface
+   * @var StorageInterface
    */
   protected $dataStorage;
 
   /**
    * The builder which builds up and refreshes prepared data.
    *
-   * @var \Drupal\prepared_data\Builder\DataBuilderInterface
+   * @var DataBuilderInterface
    */
   protected $dataBuilder;
 
   /**
    * The account associated as current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * A list of instantiated providers.
    *
-   * @var \Drupal\prepared_data\Provider\ProviderInterface[]
+   * @var ProviderInterface[]
    */
   protected $providers;
 
   /**
    * A sorted list of instantiated providers.
    *
-   * @var \Drupal\prepared_data\Provider\ProviderInterface[]
+   * @var ProviderInterface[]
    */
   protected $sortedProviders;
 
@@ -59,11 +59,11 @@ class ProviderManager extends DefaultPluginManager {
    *   The cache backend.
    * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\prepared_data\Storage\StorageInterface $data_storage
+   * @param StorageInterface $data_storage
    *   The storage of prepared data.
-   * @param \Drupal\prepared_data\Builder\DataBuilderInterface $data_builder
+   * @param DataBuilderInterface $data_builder
    *   The builder which builds up and refreshes prepared data.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The account to be used as current user.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, StorageInterface $data_storage, DataBuilderInterface $data_builder, AccountInterface $current_user) {
@@ -78,7 +78,7 @@ class ProviderManager extends DefaultPluginManager {
   /**
    * Returns a list of all provider instances, sorted by their priority.
    *
-   * @return \Drupal\prepared_data\Provider\ProviderInterface[]
+   * @return ProviderInterface[]
    *   The sorted list of available provider instances.
    */
   public function getAllProviders() {
@@ -109,7 +109,7 @@ class ProviderManager extends DefaultPluginManager {
    */
   public function createInstance($plugin_id, array $configuration = []) {
     if (!isset($this->providers[$plugin_id])) {
-      /** @var \Drupal\prepared_data\Provider\ProviderInterface $instance */
+      /** @var ProviderInterface $instance */
       $instance = parent::createInstance($plugin_id, $configuration);
       $instance->setDataStorage($this->dataStorage);
       $instance->setDataBuilder($this->dataBuilder);
diff --git a/src/Serialization/DataSerializationTrait.php b/src/Serialization/DataSerializationTrait.php
index 4712bd0..6f9de00 100644
--- a/src/Serialization/DataSerializationTrait.php
+++ b/src/Serialization/DataSerializationTrait.php
@@ -19,7 +19,7 @@ trait DataSerializationTrait {
   /**
    * The prepared data serialization service.
    *
-   * @var \Drupal\prepared_data\Serialization\SerializationInterface
+   * @var SerializationInterface
    */
   protected $serializer;
 
@@ -56,7 +56,7 @@ trait DataSerializationTrait {
   /**
    * Get the service for serializing prepared data.
    *
-   * @return \Drupal\prepared_data\Serialization\SerializationInterface
+   * @return SerializationInterface
    *   The serialization service.
    */
   public function getSerializer() {
@@ -69,7 +69,7 @@ trait DataSerializationTrait {
   /**
    * Set the service for serializing prepared data.
    *
-   * @param \Drupal\prepared_data\Serialization\SerializationInterface $serializer
+   * @param SerializationInterface $serializer
    *   The serialization service.
    */
   public function setSerializer(SerializationInterface $serializer) {
diff --git a/src/Serialization/SerializationInterface.php b/src/Serialization/SerializationInterface.php
index ee2d708..80e8637 100644
--- a/src/Serialization/SerializationInterface.php
+++ b/src/Serialization/SerializationInterface.php
@@ -16,7 +16,7 @@ interface SerializationInterface {
    * The returned string neither contains any generated
    * meta information, expiry nor any key identifier.
    *
-   * @param \Drupal\prepared_data\PreparedDataInterface $prepared_data
+   * @param PreparedDataInterface $prepared_data
    *   The prepared data object to encode.
    *
    * @return string|NULL
@@ -34,7 +34,7 @@ interface SerializationInterface {
    * @param string $encoded_data
    *   The string to decode.
    *
-   * @return \Drupal\prepared_data\PreparedDataInterface|NULL
+   * @return PreparedDataInterface|NULL
    *   The decoding result as prepared data object, if successful.
    */
   public function decode($encoded_data);
diff --git a/src/Shorthand/ShorthandTrait.php b/src/Shorthand/ShorthandTrait.php
index def6eea..3f15961 100644
--- a/src/Shorthand/ShorthandTrait.php
+++ b/src/Shorthand/ShorthandTrait.php
@@ -10,14 +10,14 @@ trait ShorthandTrait {
   /**
    * The factory for shorthands.
    *
-   * @var \Drupal\prepared_data\Shorthand\ShorthandsFactory
+   * @var ShorthandsFactory
    */
   protected $shorthands;
 
   /**
    * Get the shorthands factory.
    *
-   * @return \Drupal\prepared_data\Shorthand\ShorthandsFactory
+   * @return ShorthandsFactory
    *   The factory for shorthands.
    */
   public function shorthands() {
@@ -30,7 +30,7 @@ trait ShorthandTrait {
   /**
    * Set the shorthands factory.
    *
-   * @param \Drupal\prepared_data\Shorthand\ShorthandsFactory $factory
+   * @param ShorthandsFactory $factory
    *   The factory for shorthands.
    */
   public function setShorthands(ShorthandsFactory $factory) {
diff --git a/src/Shorthand/ShorthandsFactory.php b/src/Shorthand/ShorthandsFactory.php
index c45a669..5303914 100644
--- a/src/Shorthand/ShorthandsFactory.php
+++ b/src/Shorthand/ShorthandsFactory.php
@@ -17,7 +17,7 @@ class ShorthandsFactory {
    * @param string $id
    *   The shorthand id to get.
    *
-   * @return \Drupal\prepared_data\Shorthand\ShorthandInterface|null
+   * @return ShorthandInterface|null
    *   The shorthand instance if found, NULL otherwise.
    */
   public function get($id) {
@@ -32,7 +32,7 @@ class ShorthandsFactory {
    * @param string|string[] $subset_keys
    *   The subset keys to represent.
    *
-   * @return \Drupal\prepared_data\Shorthand\ShorthandInterface
+   * @return ShorthandInterface
    *   The shorthand instance.
    */
   public function getFor($key, $subset_keys = []) {
diff --git a/src/Storage/CachingStorageBase.php b/src/Storage/CachingStorageBase.php
index aaf4b8e..8e2bbde 100644
--- a/src/Storage/CachingStorageBase.php
+++ b/src/Storage/CachingStorageBase.php
@@ -42,7 +42,7 @@ abstract class CachingStorageBase implements StorageInterface {
    *
    * @param string $key
    *   The data key to save the data for.
-   * @param \Drupal\prepared_data\PreparedDataInterface $data
+   * @param PreparedDataInterface $data
    *   The prepared data to save.
    */
   abstract protected function doSave($key, PreparedDataInterface $data);
@@ -58,7 +58,7 @@ abstract class CachingStorageBase implements StorageInterface {
   /**
    * Performs fetching of the next data record for refreshing.
    *
-   * @return \Drupal\prepared_data\PreparedDataInterface|null
+   * @return PreparedDataInterface|null
    *   The fetched record of prepared data to refresh, if given.
    */
   abstract protected function doFetchNext();
diff --git a/src/Storage/ShorthandStorageInterface.php b/src/Storage/ShorthandStorageInterface.php
index aef685c..27926a6 100644
--- a/src/Storage/ShorthandStorageInterface.php
+++ b/src/Storage/ShorthandStorageInterface.php
@@ -21,7 +21,7 @@ interface ShorthandStorageInterface {
    * @param string $id
    *   The instance ID.
    *
-   * @return \Drupal\prepared_data\Shorthand\ShorthandInterface|null
+   * @return ShorthandInterface|null
    *   The shorthand instance if found.
    */
   public function load($id);
@@ -34,7 +34,7 @@ interface ShorthandStorageInterface {
    * @param string|string[] $subset_keys
    *   (Optional) Further subset keys.
    *
-   * @return \Drupal\prepared_data\Shorthand\ShorthandInterface|null
+   * @return ShorthandInterface|null
    *   The shorthand instance if found.
    */
   public function loadFor($key, $subset_keys = []);
@@ -42,7 +42,7 @@ interface ShorthandStorageInterface {
   /**
    * Saves the given shorthand instance.
    *
-   * @param \Drupal\prepared_data\Shorthand\ShorthandInterface $shorthand
+   * @param ShorthandInterface $shorthand
    *   The shorthand instance to save.
    */
   public function save(ShorthandInterface $shorthand);
diff --git a/src/Storage/ShorthandStorageTrait.php b/src/Storage/ShorthandStorageTrait.php
index cb1e7bb..99f57d8 100644
--- a/src/Storage/ShorthandStorageTrait.php
+++ b/src/Storage/ShorthandStorageTrait.php
@@ -10,14 +10,14 @@ trait ShorthandStorageTrait {
   /**
    * The shorthand storage.
    *
-   * @var \Drupal\prepared_data\Storage\ShorthandStorageInterface
+   * @var ShorthandStorageInterface
    */
   protected $shorthandStorage;
 
   /**
    * Get the shorthand storage.
    *
-   * @return \Drupal\prepared_data\Storage\ShorthandStorageInterface
+   * @return ShorthandStorageInterface
    *   The shorthand storage.
    */
   public function getShorthandStorage() {
@@ -30,7 +30,7 @@ trait ShorthandStorageTrait {
   /**
    * Set the shorthand storage.
    *
-   * @param \Drupal\prepared_data\Storage\ShorthandStorageInterface $storage
+   * @param ShorthandStorageInterface $storage
    *   The shorthand storage to set.
    */
   public function setShorthandStorage(ShorthandStorageInterface $storage) {
