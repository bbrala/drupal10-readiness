diff --git a/http_response_headers.info.yml b/http_response_headers.info.yml
index e5cbac9..3db686c 100644
--- a/http_response_headers.info.yml
+++ b/http_response_headers.info.yml
@@ -1,6 +1,5 @@
 name: HTTP Response Headers
 type: module
 description: 'HTTP Header manipulations to improve performance and secure HTTP headers.'
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.3 || ^10
 package: Other
diff --git a/http_response_headers.module b/http_response_headers.module
index cf907c3..d69638c 100644
--- a/http_response_headers.module
+++ b/http_response_headers.module
@@ -32,7 +32,7 @@ function http_response_headers_help($route_name, RouteMatchInterface $route_matc
     '#attributes' => ['class' => 'help-resources'],
     '#wrapper_attributes' => ['class' => 'container'],
   ];
-  $output .= render($help);
+  $output .= \Drupal::service('renderer')->render($help);
 
   return $output;
 }
diff --git a/src/EventSubscriber/AddHTTPHeaders.php b/src/EventSubscriber/AddHTTPHeaders.php
index 3b9b7be..8d47feb 100644
--- a/src/EventSubscriber/AddHTTPHeaders.php
+++ b/src/EventSubscriber/AddHTTPHeaders.php
@@ -7,8 +7,9 @@
 
 namespace Drupal\http_response_headers\EventSubscriber;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Config\ConfigFactoryInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 
@@ -20,14 +21,14 @@ class AddHTTPHeaders implements EventSubscriberInterface {
   /**
    * The entity storage manager for response_header entities.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $entityManager;
 
   /**
    * Constructs a new Google Tag response subscriber.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory service.
    */
   public function __construct(ConfigFactoryInterface $configFactory) {
@@ -37,7 +38,7 @@ class AddHTTPHeaders implements EventSubscriberInterface {
   /**
    * Sets extra HTTP headers.
    */
-  public function onRespond(FilterResponseEvent $event) {
+  public function onRespond(ResponseEvent $event) {
     if (!$event->isMasterRequest()) {
       return;
     }
diff --git a/src/Form/ResponseHeaderForm.php b/src/Form/ResponseHeaderForm.php
index 4231e4c..2402900 100644
--- a/src/Form/ResponseHeaderForm.php
+++ b/src/Form/ResponseHeaderForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\http_response_headers\Form;
 
+use Drupal\http_response_headers\Entity\ResponseHeader;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -13,11 +14,11 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class ResponseHeaderForm extends EntityForm {
 
   /**
-   * Constructs an ResponseHeaderForm object.
-   *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager;
-   *   The entity query.
-   */
+  * Constructs an ResponseHeaderForm object.
+  *
+   * @param EntityTypeManagerInterface $entityTypeManager ;
+    The entity query.
+  */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
     $this->entityTypeManager = $entityTypeManager;
   }
@@ -35,7 +36,7 @@ class ResponseHeaderForm extends EntityForm {
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\http_response_headers\Entity\ResponseHeader $response_header */
+    /** @var ResponseHeader $response_header */
     $response_header = $this->entity;
 
     $form['label'] = array(
