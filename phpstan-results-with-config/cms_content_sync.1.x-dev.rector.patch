diff --git a/cms_content_sync.install b/cms_content_sync.install
index ece7f1b..00c749b 100644
--- a/cms_content_sync.install
+++ b/cms_content_sync.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Config\CachedStorage;
 /**
  * @file
  * Install file for cms_content_sync.
@@ -45,7 +46,7 @@ function _cms_content_sync_set_module_weight() {
  * @param string $module
  */
 function _cms_content_sync_update_config($configsNames) {
-  $config_path    = drupal_get_path('module', 'cms_content_sync') . '/config/install';
+  $config_path    = \Drupal::service('extension.list.module')->getPath('cms_content_sync') . '/config/install';
   $source         = new FileStorage($config_path);
   $config_storage = Drupal::service('config.storage');
 
@@ -62,7 +63,7 @@ function _cms_content_sync_update_config($configsNames) {
  * - Displays message to start setting up the site.
  */
 function cms_content_sync_install() {
-  $config_path    = drupal_get_path('module', 'cms_content_sync') . '/config/install';
+  $config_path    = \Drupal::service('extension.list.module')->getPath('cms_content_sync') . '/config/install';
   $source         = new FileStorage($config_path);
   $config_storage = Drupal::service('config.storage');
 
@@ -79,7 +80,7 @@ function cms_content_sync_install() {
   Drupal::moduleHandler()->alter('cms_content_sync_username', $username);
   $data = [
     'userName' => $username,
-    'userPass' => user_password(),
+    'userPass' => \Drupal::service('password_generator')->generate(),
   ];
 
   $user = User::create();
@@ -126,7 +127,7 @@ function cms_content_sync_uninstall() {
   Drupal::service('keyvalue.database')->get('cms_content_sync_user')->delete('uid');
 
   /**
-   * @var \Drupal\Core\Config\CachedStorage $config_storage
+   * @var CachedStorage $config_storage
    */
   $config_storage = Drupal::service('config.storage');
 
diff --git a/cms_content_sync.module b/cms_content_sync.module
index 65c377d..67467b7 100644
--- a/cms_content_sync.module
+++ b/cms_content_sync.module
@@ -1,5 +1,14 @@
 <?php
 
+use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
+use Drupal\Core\Entity\EntityFieldManager;
+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityFieldManagerInterface;
+use Drupal\Core\Menu\MenuLinkManager;
+use Drupal\Core\Routing\RedirectDestinationInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 /**
  * @file
  * Module file for cms_content_sync.
@@ -175,17 +184,17 @@ function _cms_content_sync_display_entity_type_differences_recursively(&$result,
   $result[$entity_type][$bundle] = empty($self) ? '' : $self;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundleInfoService
+   * @var EntityTypeBundleInfoInterface $bundleInfoService
    */
   $bundleInfoService = Drupal::service('entity_type.bundle.info');
 
   /**
-   * @var \Drupal\Core\Entity\EntityFieldManager $entityFieldManager
+   * @var EntityFieldManager $entityFieldManager
    */
   $entityFieldManager = Drupal::service('entity_field.manager');
 
   /**
-   * @var \Drupal\Core\Field\FieldDefinitionInterface[] $fields
+   * @var FieldDefinitionInterface[] $fields
    */
   $fields = $entityFieldManager->getFieldDefinitions($entity_type, $bundle);
 
@@ -229,7 +238,7 @@ function _cms_content_sync_display_entity_type_differences_recursively(&$result,
 /**
  * Get HTML for a list of the usage for the given entity.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *
  * @return string
  *
@@ -305,7 +314,7 @@ function _cms_content_sync_update_taxonomy_tree_static($set = NULL, $entity = NU
  * React on changes within taxonomy trees.
  *
  * @param $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function cms_content_sync_update_taxonomy_tree_validate($form, FormStateInterface $form_state) {
   _cms_content_sync_update_taxonomy_tree_static(TRUE);
@@ -315,7 +324,7 @@ function cms_content_sync_update_taxonomy_tree_validate($form, FormStateInterfac
  * React on changes within taxonomy trees.
  *
  * @param $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function cms_content_sync_update_taxonomy_tree_submit($form, FormStateInterface $form_state) {
   $entities = _cms_content_sync_update_taxonomy_tree_static(FALSE);
@@ -337,7 +346,7 @@ function cms_content_sync_update_taxonomy_tree_submit($form, FormStateInterface
  *
  * @param array $form
  *   The form definition.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state.
  * @param string $form_id
  *   he ID of the form.
@@ -506,11 +515,11 @@ function cms_content_sync_form_alter(array &$form, FormStateInterface $form_stat
  * Only allow pushing of entities which have not been pulled before and
  * do not have been configured as "forbid updating" or "allow overwrite".
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The current entity.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function _prevent_entity_export(EntityInterface $entity) {
   $infos = EntityStatus::getInfosForEntity($entity->getEntityTypeId(), $entity->uuid());
@@ -698,11 +707,11 @@ function _cms_content_sync_submit_cache($entity_type, $entity_uuid, $values = NU
 
 /**
  * @param array $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function _cms_content_sync_cache_submit_values($form, $form_state) {
   /**
-   * @var \Drupal\Core\Entity\EntityInterface $entity
+   * @var EntityInterface $entity
    */
   $entity = $form_state->getFormObject()->getEntity();
 
@@ -727,7 +736,7 @@ function _cms_content_sync_add_version_mismatches_form(&$form, $form_state) {
   $user = Drupal::currentUser();
   if ($user->hasPermission('show entity type differences')) {
     /**
-     * @var \Drupal\Core\Entity\EntityInterface $entity
+     * @var EntityInterface $entity
      */
     $entity = $form_state->getFormObject()->getEntity();
 
@@ -778,7 +787,7 @@ function _cms_content_sync_display_entity_type_differences_recursively_render($m
  * Replace the "Show version mismatches" button with the actual information.
  *
  * @param array $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *
  * @return array
  *
@@ -812,7 +821,7 @@ function _cms_content_sync_display_version_mismatches($form, &$form_state) {
  * Add a button "Show usage" to show all sites using this content.
  *
  * @param array $form
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  */
 function _cms_content_sync_add_usage_form(&$form, $entity) {
   _cms_content_sync_add_form_group($form);
@@ -841,7 +850,7 @@ function _cms_content_sync_add_usage_form(&$form, $entity) {
  * Replace the "Show usage" button with the actual usage information.
  *
  * @param array $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *
  * @return array
  *
@@ -987,7 +996,7 @@ function _cms_content_sync_add_push_pool_form(&$form, $selectable_push_flows, $e
  * the EntityStatus::FLAG_EDIT_OVERRIDE flag accordingly.
  *
  * @param array $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function _cms_content_sync_set_entity_push_pools(array $form, FormStateInterface $form_state) {
   $flow_id = $form_state->getValue('cms_content_sync_flow');
@@ -1012,7 +1021,7 @@ function _cms_content_sync_set_entity_push_pools(array $form, FormStateInterface
   }
 
   /**
-   * @var \Drupal\Core\Entity\EntityInterface $entity
+   * @var EntityInterface $entity
    */
   $entity = $form_state
     ->getFormObject()
@@ -1022,7 +1031,7 @@ function _cms_content_sync_set_entity_push_pools(array $form, FormStateInterface
 
   if ($entity instanceof FieldableEntityInterface) {
     $entityFieldManager = Drupal::service('entity_field.manager');
-    /** @var \Drupal\Core\Field\FieldDefinitionInterface[] $fields */
+    /** @var FieldDefinitionInterface[] $fields */
     $fields = $entityFieldManager->getFieldDefinitions($entity->getEntityTypeId(), $entity->bundle());
 
     _cms_content_sync_set_entity_push_subform($entity, $form, $form_state, $fields);
@@ -1030,10 +1039,10 @@ function _cms_content_sync_set_entity_push_pools(array $form, FormStateInterface
 }
 
 /**
- * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+ * @param FieldableEntityInterface $entity
  * @param array $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
- * @param \Drupal\Core\Field\FieldDefinitionInterface[] $fields
+ * @param FormStateInterface $form_state
+ * @param FieldDefinitionInterface[] $fields
  * @param array $tree_position
  */
 function _cms_content_sync_set_entity_push_subform(FieldableEntityInterface $entity, array $form, FormStateInterface $form_state, array $fields, $tree_position = []) {
@@ -1053,7 +1062,7 @@ function _cms_content_sync_set_entity_push_subform(FieldableEntityInterface $ent
         if (!empty($subform[$i]['subform'])) {
           $entity_type = $definition->getSetting('target_type');
           $bundle = $subform[$i]['#paragraph_type'];
-          /** @var \Drupal\Core\Field\FieldDefinitionInterface[] $fields */
+          /** @var FieldDefinitionInterface[] $fields */
           $fields = $entityFieldManager->getFieldDefinitions($entity_type, $bundle);
 
           _cms_content_sync_set_entity_push_subform($entity, $subform[$i]['subform'], $form_state, $fields, array_merge($tree_position, [$name, $i, 'subform']));
@@ -1069,7 +1078,7 @@ function _cms_content_sync_set_entity_push_subform(FieldableEntityInterface $ent
 function _cms_content_sync_update_pool_selector(array $form, FormStateInterface $form_state) {
   $form_object = $form_state->getFormObject();
   /**
-   * @var \Drupal\Core\Entity\EntityInterface $entity
+   * @var EntityInterface $entity
    */
   $entity = $form_object->getEntity();
   $bundle = $entity->bundle();
@@ -1084,10 +1093,10 @@ function _cms_content_sync_update_pool_selector(array $form, FormStateInterface
 /**
  * Push the entity automatically if configured to do so.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function cms_content_sync_entity_insert(EntityInterface $entity) {
   if (!_cms_content_sync_is_installed()) {
@@ -1108,7 +1117,7 @@ function cms_content_sync_entity_insert(EntityInterface $entity) {
 /**
  * Push the entity automatically if configured to do so.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  */
 function cms_content_sync_entity_update(EntityInterface $entity) {
   if (!_cms_content_sync_is_installed()) {
@@ -1168,7 +1177,7 @@ function cms_content_sync_entity_update(EntityInterface $entity) {
 /**
  * Push the entity deletion automatically if configured to do so.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *
  * @throws Exception If this entity has been pulled and local deletion is
  *   forbidden, this will throw an error.
@@ -1204,7 +1213,7 @@ function cms_content_sync_entity_delete(EntityInterface $entity) {
   $not_pushed = PushIntent::getNoPushReason($entity);
   if (!empty($not_pushed) && $not_pushed instanceof SyncException) {
     /**
-     * @var \Drupal\cms_content_sync\Exception\SyncException $not_pushed
+     * @var SyncException $not_pushed
      */
     if ($not_pushed->errorCode === SyncException::CODE_INTERNAL_ERROR ||
       $not_pushed->errorCode === SyncException::CODE_ENTITY_API_FAILURE ||
@@ -1241,7 +1250,7 @@ function cms_content_sync_entity_translation_delete(EntityInterface $translation
  * Update the password at Sync Core if it's necessary for authentication.
  *
  * @param $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function cms_content_sync_user_password_submit(&$form, FormStateInterface $form_state) {
   if (!_cms_content_sync_is_installed()) {
@@ -1301,9 +1310,9 @@ function cms_content_sync_encrypt_values(array $values) {
  * should not be able to alter pulled content.
  *
  * @param array $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state to get default values from.
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *
  * @see \cms_content_sync_form_alter()
  */
@@ -1363,7 +1372,7 @@ function _cms_content_sync_form_alter_disabled_fields(array &$form, FormStateInt
       $pull_deletion = boolval($config['import_deletion_settings']['import_deletion']);
 
       if (EntityHandlerPluginManager::isEntityTypeFieldable($entity->getEntityTypeId())) {
-        /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager */
+        /** @var EntityFieldManagerInterface $entityFieldManager */
         $entityFieldManager = Drupal::service('entity_field.manager');
         $type = $entity->getEntityTypeId();
         $bundle = $entity->bundle();
@@ -1419,7 +1428,7 @@ function _cms_content_sync_form_alter_disabled_fields(array &$form, FormStateInt
 
             $menu_link_manager = Drupal::service('plugin.manager.menu.link');
             /**
-             * @var \Drupal\Core\Menu\MenuLinkManager $menu_link_manager
+             * @var MenuLinkManager $menu_link_manager
              */
             $menu_items = $menu_link_manager->loadLinksByRoute('entity.' . $entity->getEntityTypeId() . '.canonical', [$entity->getEntityTypeId() => $entity->id()]);
             foreach ($menu_items as $menu_item) {
@@ -1533,13 +1542,13 @@ function _cms_content_sync_form_alter_disabled_fields(array &$form, FormStateInt
  * the EntityStatus::FLAG_EDIT_OVERRIDE flag accordingly.
  *
  * @param array $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function _cms_content_sync_override_entity_submit(array $form, FormStateInterface $form_state) {
   $value = boolval($form_state->getValue('cms_content_sync_edit_override'));
 
   /**
-   * @var \Drupal\Core\Entity\EntityInterface $entity
+   * @var EntityInterface $entity
    */
   $entity = $form_state
     ->getFormObject()
@@ -1572,11 +1581,11 @@ function _cms_content_sync_override_entity_submit(array $form, FormStateInterfac
 }
 
 /**
- * @param \Drupal\Core\Entity\EntityInterface $entity
- * @param \Drupal\cms_content_sync\Entity\EntityStatus $status
+ * @param EntityInterface $entity
+ * @param EntityStatus $status
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function _cms_content_sync_reset_entity($entity, $status) {
   if ($status->wasPulledEmbedded()) {
@@ -1668,13 +1677,13 @@ function _cms_content_sync_reset_entity($entity, $status) {
  * the EntityStatus::FLAG_EDIT_OVERRIDE flag accordingly.
  *
  * @param array $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function _cms_content_sync_override_embedded_entity_submit(array $form, FormStateInterface $form_state) {
   $value = boolval($form_state->getValue('cms_content_sync_edit_override'));
 
   /**
-   * @var \Drupal\Core\Entity\EntityInterface $entity
+   * @var EntityInterface $entity
    */
   $entity = $form_state
     ->getFormObject()
@@ -1690,7 +1699,7 @@ function _cms_content_sync_override_embedded_entity_submit(array $form, FormStat
  */
 function _cms_content_sync_override_embedded_entity_save_status_entity(FieldableEntityInterface $entity, array $form, FormStateInterface $form_state, $tree_position = [], $force_disable = FALSE) {
   $entityFieldManager = Drupal::service('entity_field.manager');
-  /** @var \Drupal\Core\Field\FieldDefinitionInterface[] $fields */
+  /** @var FieldDefinitionInterface[] $fields */
   $fields = $entityFieldManager->getFieldDefinitions($entity->getEntityTypeId(), $entity->bundle());
   foreach ($fields as $name => $definition) {
     if ($definition->getType() == 'entity_reference_revisions') {
@@ -1797,7 +1806,7 @@ function cms_content_sync_get_publish_changes_operations(EntityInterface $entity
 
   $operations = [];
 
-  /** @var \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination */
+  /** @var RedirectDestinationInterface $redirect_destination */
   $redirect_destination = Drupal::service('redirect.destination');
 
   $flows = PushIntent::getFlowsForEntity($entity, PushIntent::PUSH_MANUALLY);
@@ -1825,7 +1834,7 @@ function cms_content_sync_get_publish_changes_operations(EntityInterface $entity
 }
 
 /**
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *
  * @return array
  *
@@ -1939,7 +1948,7 @@ function cms_content_sync_form_menu_edit_form_alter(&$form, FormStateInterface $
   foreach ($links as $link_key) {
     $link = $form['links']['links'][$link_key];
 
-    /** @var \Drupal\menu_link_content\Plugin\Menu\MenuLinkContent $menu_link */
+    /** @var MenuLinkContent $menu_link */
     $menu_link = $link['#item']->link;
     if (!method_exists($menu_link, 'getEntity')) {
       continue;
@@ -1970,7 +1979,7 @@ function cms_content_sync_local_tasks_alter(&$local_tasks) {
 /**
  * Name the manual pull tab and entity edit settings tab.
  *
- * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+ * @return TranslatableMarkup
  */
 function _cms_content_sync_get_repository_name() {
   // @todo Distinguish between Syndication and Staging.
diff --git a/modules/cms_content_sync_developer/src/Cli/CliService.php b/modules/cms_content_sync_developer/src/Cli/CliService.php
index 58a8aae..867a046 100644
--- a/modules/cms_content_sync_developer/src/Cli/CliService.php
+++ b/modules/cms_content_sync_developer/src/Cli/CliService.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\cms_content_sync_developer\Cli;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\cms_content_sync\Entity\Flow;
 use Drush\Exceptions\UserAbortException;
 
@@ -15,8 +18,8 @@ class CliService {
    *
    * @param $io
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function configuration_export($io) {
     $flows = Flow::getAll(FALSE);
@@ -44,10 +47,10 @@ class CliService {
    * @param $entity_type
    * @param $options
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drush\Exceptions\UserAbortException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
+   * @throws UserAbortException
    */
   public function force_entity_deletion($io, $entity_type, $options) {
     self::$forceEntityDeletion = TRUE;
