modules/contrib/stripe/modules/stripe_examples/src/EventSubscriber/StripeExamplesEventSubscriber.php
modules/contrib/stripe/modules/stripe_examples/src/Form/SimpleCheckoutForm.php
modules/contrib/stripe/modules/stripe_examples/src/Plugin/Block/SimpleCheckoutBlock.php
modules/contrib/stripe/modules/stripe_examples/stripe_examples.module
modules/contrib/stripe/src/Controller/StripeWebhookController.php
modules/contrib/stripe/src/Element/CC.php
modules/contrib/stripe/src/Element/PaymentRequest.php
modules/contrib/stripe/src/Element/StripeBase.php
modules/contrib/stripe/src/Event/StripeEvents.php
modules/contrib/stripe/src/Event/StripePaymentEvent.php
modules/contrib/stripe/src/Event/StripeWebhookEvent.php
modules/contrib/stripe/src/Form/StripeSettingsForm.php
modules/contrib/stripe/stripe.module

6 files with changes
====================

1) modules/contrib/stripe/src/Event/StripeWebhookEvent.php:2

    ---------- begin diff ----------
@@ @@
 namespace Drupal\stripe\Event;

 use Stripe\Event as StripeEvent;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Wraps a stripe event for webhook.
  */
-class StripeWebhookEvent extends Event {
+class StripeWebhookEvent extends \Symfony\Contracts\EventDispatcher\Event {

   /**
    * Stripe API event object.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/stripe/src/Event/StripePaymentEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\stripe\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Form\FormStateInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Wraps a stripe event for webhook.
@@ @@
   /**
    * The form state.
    *
-   * @var \Drupal\Core\Form\FormStateInterface
+   * @var FormStateInterface
    */
   private $formState;

@@ @@
    *
    * @param array $form
    *   Nested array of form elements that comprise the form.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The current state of the form. The arguments that
    *   \Drupal::formBuilder()->getForm() was originally called with are
    *   available in the array $form_state->getBuildInfo()['args'].
@@ @@
   /**
    * Get the form state.
    *
-   * @return \Drupal\Core\Form\FormStateInterface
+   * @return FormStateInterface
    *   The form state.
    */
   public function getFormState(): FormStateInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/stripe/src/Element/StripeBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\stripe\Element;

+use Stripe\StripeClient;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\InvokeCommand;
 use Drupal\Core\Render\Element\FormElement;
@@ @@
       return $element;
     }

-    $stripe = new \Stripe\StripeClient($apikeySecret);
+    $stripe = new StripeClient($apikeySecret);

     $id = $element['#id'];
     $wrapper_id = 'stripe-' . implode('-', $element['#parents']) . '-wrapper';
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function submitStripeElementCallback(array $form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
       $settings['total'] = $total;

       if ($payment_intent) {
-        $stripe = new \Stripe\StripeClient($apikeySecret);
+        $stripe = new StripeClient($apikeySecret);
         $stripe->paymentIntents->update(
           $payment_intent,
           ['amount' => $total['amount']]
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/stripe/src/Controller/StripeWebhookController.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Creates a new instance.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(EventDispatcherInterface $event_dispatcher) {
@@ @@
    * When this controller is created,
    * it will get the di_example.talk service and store it.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container.
    *
    * @return static
@@ @@

     // Dispatch the webhook event.
     $this->eventDispatcher
-      ->dispatch(StripeEvents::WEBHOOK, new StripeWebhookEvent($event));
+      ->dispatch(new StripeWebhookEvent($event), StripeEvents::WEBHOOK);

     return new Response('OK', Response::HTTP_OK);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/stripe/modules/stripe_examples/src/Form/SimpleCheckoutForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\stripe_examples\Form;

+use Stripe\StripeClient;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
     $config = \Drupal::config('stripe.settings');
     $apikeySecret = $config->get('apikey.' . $config->get('environment') . '.secret');
     // Quick test of subscription creation
-    $stripe = new \Stripe\StripeClient($apikeySecret);
+    $stripe = new StripeClient($apikeySecret);

     // $customer = $stripe->customer->create([
     //   'customer' => 'cus_J4sMTZH5VcpNxu',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/stripe/modules/stripe_examples/src/EventSubscriber/StripeExamplesEventSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\stripe_examples\EventSubscriber;

+use Drupal\Core\Config\ConfigCrudEvent;
 use Drupal\stripe\Event\StripeEvents;
 use Drupal\stripe\Event\StripePaymentEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
@@ @@
   /**
    * React to a config object being saved.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   Config crud event.
    */
   public function updatePayment(StripePaymentEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [WARNING] 2 nodes were removed                                                 

 [OK] 6 files have been changed by Rector                                       

