modules/contrib/webform_rest/src/Plugin/rest/resource/WebformCompleteSubmissionResource.php
modules/contrib/webform_rest/src/Plugin/rest/resource/WebformElementsResource.php
modules/contrib/webform_rest/src/Plugin/rest/resource/WebformFieldsResource.php
modules/contrib/webform_rest/src/Plugin/rest/resource/WebformSubmissionResource.php
modules/contrib/webform_rest/src/Plugin/rest/resource/WebformSubmitResource.php
modules/contrib/webform_rest/tests/src/Functional/WebformRestCompleteSubmissionTest.php
modules/contrib/webform_rest/tests/src/Functional/WebformRestElementsTest.php
modules/contrib/webform_rest/tests/src/Functional/WebformRestFieldsTest.php
modules/contrib/webform_rest/tests/src/Functional/WebformRestSubmissionTest.php

9 files with changes
====================

1) modules/contrib/webform_rest/tests/src/Functional/WebformRestSubmissionTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\webform_rest\Functional;

+use Psr\Http\Message\ResponseInterface;
 use Drupal\webform\Entity\Webform;
 use Drupal\Tests\webform\Functional\WebformBrowserTestBase;
 use Drupal\Component\Serialization\Json;
@@ @@

     // Get webform submission.
     $result = $this->drupalGet("/webform_rest/webform_rest_test/submission/$sid", ['query' => ['_format' => 'hal_json']]);
-    $this->assertResponse(200);
-    $this->assertRaw('"data":{"first_name":"John","last_name":"Smith"}');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->responseContains('"data":{"first_name":"John","last_name":"Smith"}');
   }

   /**
@@ @@
       ],
     ]);
     $created_response = Json::decode((string) $response->getBody());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertArrayHasKey('sid', $created_response);
     $this->assertNotEmpty($created_response['sid']);
   }
@@ @@
       ],
     ]);
     $created_response = Json::decode((string) $response->getBody());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertArrayHasKey('sid', $created_response);
     $this->assertNotEmpty($created_response['sid']);
     $sid = $created_response['sid'];
     // Get webform submission.
     $result = $this->drupalGet("/webform_rest/webform_rest_test/submission/$sid", ['query' => ['_format' => 'hal_json']]);
-    $this->assertResponse(200);
-    $this->assertRaw('"data":{"first_name":"Daniel","last_name":"Hopkins"}');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->responseContains('"data":{"first_name":"Daniel","last_name":"Hopkins"}');
   }

   /**
@@ @@
    * @param array $request_options
    *   Request options to apply.
    *
-   * @return \Psr\Http\Message\ResponseInterface
+   * @return ResponseInterface
    *   The response.
    */
   protected function request($method, $url, array $request_options = []) {
    ----------- end diff -----------

Applied rules:
 * AssertRawRector
 * AssertResponseRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/webform_rest/tests/src/Functional/WebformRestFieldsTest.php:36

    ---------- begin diff ----------
@@ @@

     // Get webform fields.
     $result = $this->drupalGet("/webform_rest/webform_rest_test/fields", ['query' => ['_format' => 'hal_json']]);
-    $this->assertResponse(200);
-    $this->assertRaw('"first_name":{"#title":"First name"');
-    $this->assertRaw('"last_name":{"#title":"Last name"');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->responseContains('"first_name":{"#title":"First name"');
+    $this->assertSession()->responseContains('"last_name":{"#title":"Last name"');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertRawRector
 * AssertResponseRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/webform_rest/tests/src/Functional/WebformRestElementsTest.php:36

    ---------- begin diff ----------
@@ @@

     // Get webform elements.
     $result = $this->drupalGet("/webform_rest/webform_rest_test/elements", ['query' => ['_format' => 'hal_json']]);
-    $this->assertResponse(200);
-    $this->assertRaw('"first_name":{"#title":"First name"');
-    $this->assertRaw('"last_name":{"#title":"Last name"');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->responseContains('"first_name":{"#title":"First name"');
+    $this->assertSession()->responseContains('"last_name":{"#title":"Last name"');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertRawRector
 * AssertResponseRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/webform_rest/tests/src/Functional/WebformRestCompleteSubmissionTest.php:45

    ---------- begin diff ----------
@@ @@
     $result = $this->drupalGet("/webform_rest/webform_rest_test/complete_submission/$sid", ['query' => ['_format' => 'hal_json']]);
     $created_response = Json::decode((string) $result);
     // debug($result);
-    $this->assertResponse(200);
-    $this->assertRaw('"title":"Test: Webform rest"');
-    $this->assertRaw('"first_name":{"#title":"First name"');
-    $this->assertRaw('"last_name":{"#title":"Last name"');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->responseContains('"title":"Test: Webform rest"');
+    $this->assertSession()->responseContains('"first_name":{"#title":"First name"');
+    $this->assertSession()->responseContains('"last_name":{"#title":"Last name"');
     $this->assertArrayHasKey('processed_submission', $created_response);
     $this->assertArrayHasKey('first_name', $created_response['processed_submission']);
     $this->assertArrayHasKey('last_name', $created_response['processed_submission']);
    ----------- end diff -----------

Applied rules:
 * AssertRawRector
 * AssertResponseRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/webform_rest/src/Plugin/rest/resource/WebformSubmitResource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\webform_rest\Plugin\rest\resource;

+use Symfony\Component\HttpFoundation\RequestStack;
+use Drupal\rest\ResourceResponse;
+use Symfony\Component\HttpKernel\Exception\HttpException;
 use Drupal\webform\Entity\Webform;
 use Drupal\webform\WebformSubmissionForm;
 use Drupal\rest\Plugin\ResourceBase;
@@ @@
   /**
    * The request object.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $request;

@@ @@
   /**
    * Responds to entity POST requests and saves the new entity.
    *
-   * @return \Drupal\rest\ResourceResponse
+   * @return ResourceResponse
    *   The HTTP response object.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws HttpException in case of error.
    */
   public function post() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/webform_rest/src/Plugin/rest/resource/WebformSubmissionResource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\webform_rest\Plugin\rest\resource;

+use Symfony\Component\HttpFoundation\RequestStack;
+use Symfony\Component\HttpKernel\Exception\HttpException;
 use Drupal\webform\Entity\WebformSubmission;
 use Drupal\webform\WebformSubmissionForm;
 use Drupal\rest\Plugin\ResourceBase;
@@ @@
   /**
    * The request object.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $request;

@@ @@
    * @param int $sid
    *   Submission ID.
    *
-   * @return \Drupal\rest\ModifiedResourceResponse
+   * @return ModifiedResourceResponse
    *   HTTP response object containing webform submission.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws HttpException in case of error.
    */
   public function get($webform_id, $sid) {
@@ @@
    * @param int $sid
    *   Submission ID.
    *
-   * @return \Drupal\rest\ModifiedResourceResponse
+   * @return ModifiedResourceResponse
    *   HTTP response object containing webform submission.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws HttpException in case of error.
    */
   public function patch($webform_id, $sid) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/webform_rest/src/Plugin/rest/resource/WebformFieldsResource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\webform_rest\Plugin\rest\resource;

+use Drupal\rest\ResourceResponse;
+use Symfony\Component\HttpKernel\Exception\HttpException;
 use Drupal\webform\Entity\Webform;
 use Drupal\rest\Plugin\ResourceBase;
 use Drupal\rest\ModifiedResourceResponse;
@@ @@
    * @param string $webform_id
    *   Webform ID.
    *
-   * @return \Drupal\rest\ResourceResponse
+   * @return ResourceResponse
    *   HTTP response object containing webform elements.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws HttpException in case of error.
    */
   public function get($webform_id) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/webform_rest/src/Plugin/rest/resource/WebformElementsResource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\webform_rest\Plugin\rest\resource;

+use Drupal\rest\ResourceResponse;
+use Symfony\Component\HttpKernel\Exception\HttpException;
 use Drupal\webform\Entity\Webform;
 use Drupal\rest\Plugin\ResourceBase;
 use Drupal\rest\ModifiedResourceResponse;
@@ @@
    * @param string $webform_id
    *   Webform ID.
    *
-   * @return \Drupal\rest\ResourceResponse
+   * @return ResourceResponse
    *   HTTP response object containing webform elements.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws HttpException in case of error.
    */
   public function get($webform_id) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/webform_rest/src/Plugin/rest/resource/WebformCompleteSubmissionResource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\webform_rest\Plugin\rest\resource;

+use Symfony\Component\HttpKernel\Exception\HttpException;
 use Drupal\rest\Plugin\ResourceBase;
 use Drupal\rest\ModifiedResourceResponse;
 use Drupal\webform\Entity\Webform;
@@ @@
    * @param int $sid
    *   Submission ID.
    *
-   * @return \Drupal\rest\ModifiedResourceResponse
+   * @return ModifiedResourceResponse
    *   HTTP response object containing webform submission.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws HttpException in case of error.
    */
   public function get($webform_id, $sid) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 9 files have been changed by Rector                                       

