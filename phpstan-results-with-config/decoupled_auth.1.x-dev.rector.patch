diff --git a/decoupled_auth.install b/decoupled_auth.install
index 157b20c..27c48e9 100644
--- a/decoupled_auth.install
+++ b/decoupled_auth.install
@@ -103,7 +103,7 @@ function decoupled_auth_install() {
     $definitions = $field_manager->getFieldStorageDefinitions('user');
     $field_storage_listener = Drupal::service('field_storage_definition.listener');
 
-    /** @var \Drupal\profile\Entity\ProfileType[] $types */
+    /** @var ProfileType[] $types */
     $types = ProfileType::loadMultiple();
     foreach ($types as $profile_type) {
       $name = 'profile_' . $profile_type->id();
@@ -169,7 +169,7 @@ function decoupled_auth_uninstall() {
     $definitions = Drupal::service('entity.last_installed_schema.repository')->getLastInstalledFieldStorageDefinitions('user');
     $field_storage_listener = Drupal::service('field_storage_definition.listener');
 
-    /** @var \Drupal\profile\Entity\ProfileType[] $types */
+    /** @var ProfileType[] $types */
     $types = ProfileType::loadMultiple();
     foreach ($types as $profile_type) {
       $name = 'profile_' . $profile_type->id();
@@ -252,7 +252,7 @@ function decoupled_auth_update_8001() {
     $definitions = $field_manager->getFieldStorageDefinitions('user');
     $field_storage_listener = Drupal::service('field_storage_definition.listener');
 
-    /** @var \Drupal\profile\Entity\ProfileType[] $types */
+    /** @var ProfileType[] $types */
     $types = ProfileType::loadMultiple();
     foreach ($types as $profile_type) {
       $name = 'profile_' . $profile_type->id();
diff --git a/decoupled_auth.module b/decoupled_auth.module
index fbf84cd..10b62fa 100644
--- a/decoupled_auth.module
+++ b/decoupled_auth.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Render\ElementInfoManagerInterface;
 /**
  * @file
  * Allow decoupling of Drupal Authentication from Drupal Users.
@@ -26,7 +27,7 @@ use Drupal\decoupled_auth\Form\UserLoginFormAlter;
  * Implements hook_entity_type_build().
  */
 function decoupled_auth_entity_type_build(array &$entity_types) {
-  /** @var \Drupal\Core\Entity\EntityTypeInterface $user_type */
+  /** @var EntityTypeInterface $user_type */
   $user_type = $entity_types['user'];
   $user_type->setClass('Drupal\decoupled_auth\Entity\DecoupledAuthUser');
   $user_type->setHandlerClass('storage_schema', 'Drupal\decoupled_auth\DecoupledAuthUserStorageSchema');
@@ -78,7 +79,7 @@ function decoupled_auth_form_user_form_alter(&$form, FormStateInterface $form_st
     return;
   }
 
-  /** @var \Drupal\decoupled_auth\DecoupledAuthUserInterface $account */
+  /** @var DecoupledAuthUserInterface $account */
   $account = $form_state->getFormObject()->getEntity();
 
   // Set a weight on mail so we can insert our checkbox in the right place.
@@ -101,7 +102,7 @@ function decoupled_auth_form_user_form_alter(&$form, FormStateInterface $form_st
 
   // If normally required, switch mail, name and pass to not required and then
   // use form states and constraints to manage when it is required.
-  /** @var \Drupal\Core\Render\ElementInfoManagerInterface $element_info */
+  /** @var ElementInfoManagerInterface $element_info */
   $element_info = \Drupal::service('plugin.manager.element_info');
   foreach (['mail', 'name', 'pass'] as $element) {
     if (isset($form['account'][$element])) {
@@ -162,7 +163,7 @@ function decoupled_auth_element_validate_required(array &$element, FormStateInte
 function decoupled_auth_form_user_register_form_entity_build($entity_type, $entity, &$form, &$form_state) {
   // Attempt to run acquisitions for the given email address.
   /** @var \Drupal\decoupled_auth\Entity\DecoupledAuthUser $entity */
-  /** @var \Drupal\decoupled_auth\AcquisitionServiceInterface $acquisition */
+  /** @var AcquisitionServiceInterface $acquisition */
   $acquisition = Drupal::service('decoupled_auth.acquisition');
 
   // Acquire based on email, but we are only interested in decoupled users.
@@ -211,7 +212,7 @@ function decoupled_auth_form_user_register_form_entity_build($entity_type, $enti
  */
 function decoupled_auth_form_user_form_entity_build($entity_type, $entity, &$form, &$form_state) {
   // If we are not decoupling, process when things are required.
-  /** @var \Drupal\decoupled_auth\DecoupledAuthUserInterface $entity */
+  /** @var DecoupledAuthUserInterface $entity */
   if (!$form_state->getValue('not_decoupled')) {
     $entity->decouple();
   }
@@ -220,7 +221,7 @@ function decoupled_auth_form_user_form_entity_build($entity_type, $entity, &$for
   else {
     $entity->couple();
     if (!$entity->getAccountName()) {
-      $entity->set('name', 'email_registration_' . user_password());
+      $entity->set('name', 'email_registration_' . \Drupal::service('password_generator')->generate());
     }
   }
 }
@@ -273,7 +274,7 @@ function decoupled_auth_view_insert(EntityInterface $entity) {
  * @see \decoupled_auth_module_implements_alter()
  */
 function decoupled_auth_user_insert(UserInterface $account) {
-  /** @var \Drupal\decoupled_auth\DecoupledAuthUserInterface $account */
+  /** @var DecoupledAuthUserInterface $account */
   $module_handler = \Drupal::moduleHandler();
 
   // Wrap around email_registration_alter_username() so we only trigger it for
@@ -294,7 +295,7 @@ function decoupled_auth_user_insert(UserInterface $account) {
 /**
  * Tweaked implementation of simplenews_user_insert().
  *
- * @param \Drupal\decoupled_auth\DecoupledAuthUserInterface $account
+ * @param DecoupledAuthUserInterface $account
  *   The user being inserted.
  */
 function _decoupled_auth_simplenews_user_insert(DecoupledAuthUserInterface $account) {
@@ -320,7 +321,7 @@ function _decoupled_auth_simplenews_user_insert(DecoupledAuthUserInterface $acco
 
   // If the subscriber is already attached to a user, don't move if the existing
   // user is coupled or the new user is decoupled.
-  /** @var \Drupal\decoupled_auth\DecoupledAuthUserInterface $existing_account */
+  /** @var DecoupledAuthUserInterface $existing_account */
   $existing_account_id = $subscriber->getUserId();
   if ($existing_account_id) {
     $existing_account = User::load($existing_account_id);
@@ -342,7 +343,7 @@ function _decoupled_auth_simplenews_user_insert(DecoupledAuthUserInterface $acco
  * Implements hook_ENTITY_TYPE_presave() for user.
  */
 function decoupled_auth_user_presave(EntityInterface $entity) {
-  /** @var \Drupal\decoupled_auth\DecoupledAuthUserInterface $entity */
+  /** @var DecoupledAuthUserInterface $entity */
   $module_handler = \Drupal::moduleHandler();
 
   // Wrap around email_registration_alter_username() so we only trigger it for
@@ -408,7 +409,7 @@ function decoupled_auth_entity_base_field_info(EntityTypeInterface $entity_type)
   if ($entity_type->id() == 'user' && Drupal::moduleHandler()->moduleExists('profile')) {
     $fields = [];
 
-    /** @var \Drupal\profile\Entity\ProfileType[] $types */
+    /** @var ProfileType[] $types */
     $types = ProfileType::loadMultiple();
     foreach ($types as $profile_type) {
       $name = 'profile_' . $profile_type->id();
diff --git a/src/AcquisitionEvent.php b/src/AcquisitionEvent.php
index 5d95ffa..65fb10b 100644
--- a/src/AcquisitionEvent.php
+++ b/src/AcquisitionEvent.php
@@ -2,13 +2,12 @@
 
 namespace Drupal\decoupled_auth;
 
-use Symfony\Component\EventDispatcher\Event;
 use Drupal\decoupled_auth\Entity\DecoupledAuthUser;
 
 /**
  * Defines user acquisition events.
  */
-class AcquisitionEvent extends Event {
+class AcquisitionEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * Name of the event fired prior to attempting an acquisition.
@@ -54,7 +53,7 @@ class AcquisitionEvent extends Event {
   /**
    * The acquired user, if any.
    *
-   * @var \Drupal\decoupled_auth\Entity\DecoupledAuthUser|null
+   * @var DecoupledAuthUser|null
    */
   protected $user;
 
@@ -100,7 +99,7 @@ class AcquisitionEvent extends Event {
   /**
    * Returns the acquired user, if any.
    *
-   * @return \Drupal\decoupled_auth\Entity\DecoupledAuthUser|null
+   * @return DecoupledAuthUser|null
    *   The acquired user or NULL if none found.
    */
   public function &getUser() {
diff --git a/src/AcquisitionService.php b/src/AcquisitionService.php
index 961adf4..2660439 100644
--- a/src/AcquisitionService.php
+++ b/src/AcquisitionService.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\decoupled_auth;
 
+use Drupal\Core\Config\Config;
+use Drupal\Core\Entity\Query\QueryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
@@ -39,32 +41,32 @@ class AcquisitionService implements AcquisitionServiceInterface {
   /**
    * The user storage class.
    *
-   * @var \Drupal\decoupled_auth\DecoupledAuthUserStorageSchema
+   * @var DecoupledAuthUserStorageSchema
    */
   protected $userStorage;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The decoupled auth settings.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $settings;
 
   /**
    * Constructs an AcquisitionServiceInterface object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, EventDispatcherInterface $event_dispatcher) {
@@ -89,7 +91,7 @@ class AcquisitionService implements AcquisitionServiceInterface {
     $context = $context + $this->context;
 
     // Allow modules to make adjustments to our acquisition attempt.
-    $this->eventDispatcher->dispatch(AcquisitionEvent::PRE, new AcquisitionEvent($values, $context));
+    $this->eventDispatcher->dispatch(new AcquisitionEvent($values, $context), AcquisitionEvent::PRE);
 
     // Look for a match.
     if (!empty($values)) {
@@ -125,7 +127,7 @@ class AcquisitionService implements AcquisitionServiceInterface {
     }
 
     // Allow modules to respond to our acquisition attempt.
-    $this->eventDispatcher->dispatch(AcquisitionEvent::POST, new AcquisitionEvent($values, $context, $user));
+    $this->eventDispatcher->dispatch(new AcquisitionEvent($values, $context, $user), AcquisitionEvent::POST);
 
     return $user;
   }
@@ -139,11 +141,11 @@ class AcquisitionService implements AcquisitionServiceInterface {
    * @param array $context
    *   The context we are using to find a match.
    *
-   * @return \Drupal\decoupled_auth\DecoupledAuthUserInterface|null
+   * @return DecoupledAuthUserInterface|null
    *   Return the matched user or NULL if no valid match could be found.
    */
   protected function findMatch(array $values, array &$context) {
-    /** @var \Drupal\Core\Entity\Query\QueryInterface $query */
+    /** @var QueryInterface $query */
     $query = $this->userStorage->getQuery($context['conjunction'])
       ->addTag('decoupled_auth_acquisition')
       ->addMetaData('values', $values)
diff --git a/src/AcquisitionServiceInterface.php b/src/AcquisitionServiceInterface.php
index 5e10b77..d1b780d 100644
--- a/src/AcquisitionServiceInterface.php
+++ b/src/AcquisitionServiceInterface.php
@@ -74,7 +74,7 @@ interface AcquisitionServiceInterface {
    * @param string $method
    *   Optionally pass a variable to be filled with the acquisition method.
    *
-   * @return \Drupal\decoupled_auth\DecoupledAuthUserInterface|null
+   * @return DecoupledAuthUserInterface|null
    *   The acquired or newly created user or NULL on a failure.
    */
   public function acquire(array $values, array $context = [], &$method = NULL);
diff --git a/src/DecoupledAuthSettingsForm.php b/src/DecoupledAuthSettingsForm.php
index 87c290d..71852ab 100644
--- a/src/DecoupledAuthSettingsForm.php
+++ b/src/DecoupledAuthSettingsForm.php
@@ -115,7 +115,7 @@ class DecoupledAuthSettingsForm extends ConfigFormBase {
       ],
     ];
     foreach (Role::loadMultiple() as $role) {
-      /** @var \Drupal\user\Entity\Role $role */
+      /** @var Role $role */
       // We aren't interested in anon/auth roles as thay are locked roles.
       // phpcs:ignore Drupal.Arrays.Array.LongLineDeclaration
       if (!in_array($role->id(), [Role::ANONYMOUS_ID, Role::AUTHENTICATED_ID])) {
diff --git a/src/Entity/DecoupledAuthUser.php b/src/Entity/DecoupledAuthUser.php
index 62b147c..50c09ff 100644
--- a/src/Entity/DecoupledAuthUser.php
+++ b/src/Entity/DecoupledAuthUser.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\decoupled_auth\Entity;
 
+use Drupal\profile\ProfileStorageInterface;
 use Drupal\decoupled_auth\DecoupledAuthUserInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -167,7 +168,7 @@ class DecoupledAuthUser extends User implements DecoupledAuthUserInterface {
     }
 
     // Update the field for type.
-    /** @var \Drupal\profile\ProfileStorageInterface $profile_storage */
+    /** @var ProfileStorageInterface $profile_storage */
     $profile_storage = \Drupal::entityTypeManager()->getStorage('profile');
 
     $update = FALSE;
diff --git a/src/Form/UserLoginFormAlter.php b/src/Form/UserLoginFormAlter.php
index 7d65b8d..c2e884d 100644
--- a/src/Form/UserLoginFormAlter.php
+++ b/src/Form/UserLoginFormAlter.php
@@ -23,25 +23,25 @@ class UserLoginFormAlter implements ContainerInjectionInterface {
   /**
    * The user storage.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userStorage;
 
   /**
    * The email registration configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
    * Constructs a UserPasswordForm object.
    *
-   * @param \Drupal\user\UserStorageInterface $user_storage
+   * @param UserStorageInterface $user_storage
    *   The user storage.
-   * @param \Drupal\Core\Config\ImmutableConfig $config
+   * @param ImmutableConfig $config
    *   The email registration configuration.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   The string translation service.
    */
   public function __construct(UserStorageInterface $user_storage, ImmutableConfig $config, TranslationInterface $translation) {
@@ -66,7 +66,7 @@ class UserLoginFormAlter implements ContainerInjectionInterface {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function alter(array &$form, FormStateInterface $form_state) {
@@ -83,7 +83,7 @@ class UserLoginFormAlter implements ContainerInjectionInterface {
    *
    * @param array $element
    *   An associative array containing the structure of the element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @see \Drupal\user\Form\UserPasswordForm::validateForm
diff --git a/src/Form/UserPasswordFormAlter.php b/src/Form/UserPasswordFormAlter.php
index 2584803..3118ad5 100644
--- a/src/Form/UserPasswordFormAlter.php
+++ b/src/Form/UserPasswordFormAlter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\decoupled_auth\Form;
 
+use Drupal\decoupled_auth\DecoupledAuthUserInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -21,16 +22,16 @@ class UserPasswordFormAlter implements ContainerInjectionInterface {
   /**
    * The user storage.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userStorage;
 
   /**
    * Constructs a UserPasswordForm object.
    *
-   * @param \Drupal\user\UserStorageInterface $user_storage
+   * @param UserStorageInterface $user_storage
    *   The user storage.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   The string translation service.
    */
   public function __construct(UserStorageInterface $user_storage, TranslationInterface $translation) {
@@ -53,7 +54,7 @@ class UserPasswordFormAlter implements ContainerInjectionInterface {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function alter(array &$form, FormStateInterface $form_state) {
@@ -71,7 +72,7 @@ class UserPasswordFormAlter implements ContainerInjectionInterface {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @see \Drupal\user\Form\UserPasswordForm::validateForm
@@ -98,7 +99,7 @@ class UserPasswordFormAlter implements ContainerInjectionInterface {
         ->execute();
     }
 
-    /** @var \Drupal\decoupled_auth\DecoupledAuthUserInterface $account */
+    /** @var DecoupledAuthUserInterface $account */
     $account = !empty($users) ? $this->userStorage->load(reset($users)) : FALSE;
     if ($account && $account->id()) {
       // Blocked accounts cannot request a new password.
@@ -119,7 +120,7 @@ class UserPasswordFormAlter implements ContainerInjectionInterface {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @see _user_registrationpassword_user_pass_validate
diff --git a/src/Plugin/Field/FieldFormatter/DecoupledUserNameFormatter.php b/src/Plugin/Field/FieldFormatter/DecoupledUserNameFormatter.php
index a14a255..aae50b6 100644
--- a/src/Plugin/Field/FieldFormatter/DecoupledUserNameFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/DecoupledUserNameFormatter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\decoupled_auth\Plugin\Field\FieldFormatter;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\user\Plugin\Field\FieldFormatter\UserNameFormatter;
 
@@ -21,7 +22,7 @@ class DecoupledUserNameFormatter extends UserNameFormatter {
     // The core handler only works if there is a name set as it loops over the
     // items. That doesn't work for decoupled users, so pull the user directly
     // from the items and assume only ever one delta.
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     if ($user = $items->getEntity()) {
       if ($this->getSetting('link_to_entity')) {
         $elements[0] = [
diff --git a/src/Plugin/Validation/Constraint/DecoupledAuthUserMailRequiredValidator.php b/src/Plugin/Validation/Constraint/DecoupledAuthUserMailRequiredValidator.php
index cbde9bd..504b9b6 100644
--- a/src/Plugin/Validation/Constraint/DecoupledAuthUserMailRequiredValidator.php
+++ b/src/Plugin/Validation/Constraint/DecoupledAuthUserMailRequiredValidator.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\decoupled_auth\Plugin\Validation\Constraint;
 
+use Drupal\decoupled_auth\DecoupledAuthUserInterface;
 use Drupal\user\Plugin\Validation\Constraint\UserMailRequiredValidator;
 use Symfony\Component\Validator\Constraint;
 
@@ -19,7 +20,7 @@ class DecoupledAuthUserMailRequiredValidator extends UserMailRequiredValidator {
    */
   public function validate($items, Constraint $constraint) {
     /** @var \Drupal\Core\Field\FieldItemListInterface $items */
-    /** @var \Drupal\decoupled_auth\DecoupledAuthUserInterface $account */
+    /** @var DecoupledAuthUserInterface $account */
     // If this account is decoupled.
     $account = $items->getEntity();
 
diff --git a/src/Plugin/Validation/Constraint/DecoupledAuthUserMailUniqueValidator.php b/src/Plugin/Validation/Constraint/DecoupledAuthUserMailUniqueValidator.php
index 4a18b37..7ac1c06 100644
--- a/src/Plugin/Validation/Constraint/DecoupledAuthUserMailUniqueValidator.php
+++ b/src/Plugin/Validation/Constraint/DecoupledAuthUserMailUniqueValidator.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\decoupled_auth\Plugin\Validation\Constraint;
 
+use Drupal\decoupled_auth\Entity\DecoupledAuthUser;
 use Drupal\user\Entity\Role;
 use Symfony\Component\Validator\Constraint;
 use Symfony\Component\Validator\ConstraintValidator;
@@ -25,7 +26,7 @@ class DecoupledAuthUserMailUniqueValidator extends ConstraintValidator {
       return;
     }
     $field_name = $items->getFieldDefinition()->getName();
-    /** @var \Drupal\decoupled_auth\Entity\DecoupledAuthUser $entity */
+    /** @var DecoupledAuthUser $entity */
     $entity = $items->getEntity();
     $entity_type_id = $entity->getEntityTypeId();
     $id_key = $entity->getEntityType()->getKey('id');
diff --git a/tests/modules/decoupled_auth_event_test/src/EventSubscriber/DecoupledAuthEventTestSubscriber.php b/tests/modules/decoupled_auth_event_test/src/EventSubscriber/DecoupledAuthEventTestSubscriber.php
index c2e89b2..23ba354 100644
--- a/tests/modules/decoupled_auth_event_test/src/EventSubscriber/DecoupledAuthEventTestSubscriber.php
+++ b/tests/modules/decoupled_auth_event_test/src/EventSubscriber/DecoupledAuthEventTestSubscriber.php
@@ -22,7 +22,7 @@ class DecoupledAuthEventTestSubscriber implements EventSubscriberInterface {
   /**
    * This method is called when the AcquisitionEvent::PRE event is dispatched.
    *
-   * @param \Drupal\decoupled_auth\AcquisitionEvent $event
+   * @param AcquisitionEvent $event
    *   The acquisition event.
    */
   public function setTestContextPre(AcquisitionEvent $event) {
@@ -33,7 +33,7 @@ class DecoupledAuthEventTestSubscriber implements EventSubscriberInterface {
   /**
    * This method is called when the AcquisitionEvent::POST event is dispatched.
    *
-   * @param \Drupal\decoupled_auth\AcquisitionEvent $event
+   * @param AcquisitionEvent $event
    *   The acquisition event.
    */
   public function setTestContextPost(AcquisitionEvent $event) {
diff --git a/tests/src/DecoupledAuthUserCreationTrait.php b/tests/src/DecoupledAuthUserCreationTrait.php
index 70f6ed5..cdf3e6b 100644
--- a/tests/src/DecoupledAuthUserCreationTrait.php
+++ b/tests/src/DecoupledAuthUserCreationTrait.php
@@ -21,7 +21,7 @@ trait DecoupledAuthUserCreationTrait {
    *   is used for the name of the user. If not given, a random name will be
    *   generated.
    *
-   * @return \Drupal\decoupled_auth\Entity\DecoupledAuthUser
+   * @return DecoupledAuthUser
    *   The created user.
    */
   protected function createDecoupledUser($email_prefix = NULL) {
@@ -45,7 +45,7 @@ trait DecoupledAuthUserCreationTrait {
    *   An array of additional values to set. status will be set to 1 if not
    *   explicitly given.
    *
-   * @return \Drupal\decoupled_auth\Entity\DecoupledAuthUser
+   * @return DecoupledAuthUser
    *   The created unsaved user.
    */
   protected function createUnsavedUser($decoupled, $email_prefix = NULL, array $values = []) {
@@ -60,7 +60,7 @@ trait DecoupledAuthUserCreationTrait {
     ];
     $values['mail'] = $email_prefix . '@example.com';
     $values['name'] = $decoupled ? NULL : $email_prefix;
-    /** @var \Drupal\decoupled_auth\Entity\DecoupledAuthUser $user */
+    /** @var DecoupledAuthUser $user */
     $user = DecoupledAuthUser::create($values);
 
     // Set the given name as a property so it can be accessed when the user is
