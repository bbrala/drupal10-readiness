diff --git a/src/Annotation/CodeCollectionSource.php b/src/Annotation/CodeCollectionSource.php
index 74411bc..04b8689 100644
--- a/src/Annotation/CodeCollectionSource.php
+++ b/src/Annotation/CodeCollectionSource.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\codes_pool\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -23,7 +24,7 @@ class CodeCollectionSource extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/CodesStorage.php b/src/Annotation/CodesStorage.php
index 24c2e3c..4d76318 100644
--- a/src/Annotation/CodesStorage.php
+++ b/src/Annotation/CodesStorage.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\codes_pool\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -23,7 +24,7 @@ class CodesStorage extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/CodeCollectionListBuilder.php b/src/CodeCollectionListBuilder.php
index d39b5a7..439bf66 100644
--- a/src/CodeCollectionListBuilder.php
+++ b/src/CodeCollectionListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\codes_pool;
 
+use Drupal\codes_pool\Entity\CodeCollectionInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -20,14 +21,14 @@ class CodeCollectionListBuilder extends EntityListBuilder implements FormInterfa
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
 
   /**
    * The entities being listed.
    *
-   * @var \Drupal\codes_pool\Entity\CodeCollectionInterface[]
+   * @var CodeCollectionInterface[]
    */
   protected $entities = [];
 
@@ -42,11 +43,11 @@ class CodeCollectionListBuilder extends EntityListBuilder implements FormInterfa
   /**
    * Constructs a new CodeCollectionListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, FormBuilderInterface $form_builder) {
@@ -100,7 +101,7 @@ class CodeCollectionListBuilder extends EntityListBuilder implements FormInterfa
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\codes_pool\Entity\CodeCollectionInterface $entity */
+    /** @var CodeCollectionInterface $entity */
     $row['#attributes']['class'][] = 'draggable';
     $row['#weight'] = $entity->getWeight();
     $row['name'] = $entity->label();
diff --git a/src/CodeCollectionSourceManager.php b/src/CodeCollectionSourceManager.php
index 6ce05ee..9dffa52 100644
--- a/src/CodeCollectionSourceManager.php
+++ b/src/CodeCollectionSourceManager.php
@@ -19,7 +19,7 @@ class CodeCollectionSourceManager extends DefaultPluginManager {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -29,11 +29,11 @@ class CodeCollectionSourceManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/CodesStorageManager.php b/src/CodesStorageManager.php
index 9bffc7b..18ddabd 100644
--- a/src/CodesStorageManager.php
+++ b/src/CodesStorageManager.php
@@ -21,9 +21,9 @@ class CodesStorageManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Controller/CodesController.php b/src/Controller/CodesController.php
index 0b862e2..363c9db 100644
--- a/src/Controller/CodesController.php
+++ b/src/Controller/CodesController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\codes_pool\Controller;
 
+use Drupal\Core\TypedData\Exception\MissingDataException;
+use Drupal\codes_pool\Plugin\codes_pool\CollectionSource\Csv;
 use Drupal\codes_pool\Entity\CodeCollection;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Database\Connection;
@@ -17,23 +19,23 @@ class CodesController extends ControllerBase {
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * Constructs a TrackerController object.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $dateFormatter
+   * @param DateFormatterInterface $dateFormatter
    *   The date formatter.
    */
   public function __construct(Connection $database, DateFormatterInterface $dateFormatter) {
@@ -54,13 +56,13 @@ class CodesController extends ControllerBase {
   /**
    * Lists codes.
    *
-   * @param \Drupal\codes_pool\Entity\CodeCollection $codes_pool_collection
+   * @param CodeCollection $codes_pool_collection
    *   Collection entity.
    *
    * @return array
    *   Render array of codes table.
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    */
   public function list(CodeCollection $codes_pool_collection) {
     $source = $codes_pool_collection->getSourcePlugin();
@@ -71,7 +73,7 @@ class CodesController extends ControllerBase {
       ];
       return $page;
     }
-    /** @var \Drupal\codes_pool\Plugin\codes_pool\CollectionSource\Csv  $source */
+    /** @var Csv $source */
     $query = $this->database->select($source->getTableName(), 'c')
       ->extend(PagerSelectExtender::class);
     $codes = $query->fields('c', ['id', 'code', 'status', 'created', 'changed'])
diff --git a/src/Element/CodesPoolElementTrait.php b/src/Element/CodesPoolElementTrait.php
index b117a21..8782936 100644
--- a/src/Element/CodesPoolElementTrait.php
+++ b/src/Element/CodesPoolElementTrait.php
@@ -26,7 +26,7 @@ trait CodesPoolElementTrait {
    *
    * @param array $element
    *   The form element being processed.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
@@ -55,7 +55,7 @@ trait CodesPoolElementTrait {
    *
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @throws \Exception
@@ -81,7 +81,7 @@ trait CodesPoolElementTrait {
    *
    * @param array &$form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function executeElementSubmitHandlers(array &$form, FormStateInterface $form_state) {
@@ -93,7 +93,7 @@ trait CodesPoolElementTrait {
   /**
    * Checks whether #codes_pool_element_submit callbacks should be executed.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return bool
@@ -127,7 +127,7 @@ trait CodesPoolElementTrait {
    *
    * @param array &$element
    *   The current element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   protected static function doExecuteSubmitHandlers(array &$element, FormStateInterface $form_state) {
diff --git a/src/Element/PluginConfiguration.php b/src/Element/PluginConfiguration.php
index 20fb804..aa50418 100644
--- a/src/Element/PluginConfiguration.php
+++ b/src/Element/PluginConfiguration.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\codes_pool\Element;
 
+use Drupal\Core\Executable\ExecutableManagerInterface;
+use Drupal\Core\Plugin\PluginFormInterface;
+use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\Element\FormElement;
 
@@ -64,7 +67,7 @@ class PluginConfiguration extends FormElement {
    *
    * @param array $element
    *   The form element to process.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
@@ -87,9 +90,9 @@ class PluginConfiguration extends FormElement {
       return $element;
     }
 
-    /** @var \Drupal\Core\Executable\ExecutableManagerInterface $plugin_manager */
+    /** @var ExecutableManagerInterface $plugin_manager */
     $plugin_manager = \Drupal::service('plugin.manager.' . $element['#plugin_type']);
-    /** @var \Drupal\Core\Plugin\PluginFormInterface $plugin */
+    /** @var PluginFormInterface $plugin */
     $plugin = $plugin_manager->createInstance($element['#plugin_id'], $element['#default_value']);
     $element['form'] = [];
     if (!empty($element['#enforce_unique_parents'])) {
@@ -110,14 +113,14 @@ class PluginConfiguration extends FormElement {
    *
    * @param array $element
    *   An associative array containing the properties of the element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
    */
   public static function validatePluginConfiguration(array &$element, FormStateInterface $form_state, array &$complete_form) {
     if (!empty($element['#plugin_id'])) {
-      /** @var \Drupal\Component\Plugin\PluginManagerInterface $plugin_manager */
+      /** @var PluginManagerInterface $plugin_manager */
       $plugin_manager = \Drupal::service('plugin.manager.' . $element['#plugin_type']);
       $plugin = $plugin_manager->createInstance($element['#plugin_id'], $element['#default_value']);
       $plugin->validateConfigurationForm($element['form'], $form_state);
@@ -129,12 +132,12 @@ class PluginConfiguration extends FormElement {
    *
    * @param array $element
    *   An associative array containing the properties of the element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function submitPluginConfiguration(array &$element, FormStateInterface $form_state) {
     if (!empty($element['#plugin_id'])) {
-      /** @var \Drupal\Component\Plugin\PluginManagerInterface $plugin_manager */
+      /** @var PluginManagerInterface $plugin_manager */
       $plugin_manager = \Drupal::service('plugin.manager.' . $element['#plugin_type']);
       $plugin = $plugin_manager->createInstance($element['#plugin_id'], $element['#default_value']);
       $plugin->submitConfigurationForm($element['form'], $form_state);
diff --git a/src/Entity/CodeCollection.php b/src/Entity/CodeCollection.php
index 7b22c86..64327ce 100644
--- a/src/Entity/CodeCollection.php
+++ b/src/Entity/CodeCollection.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\codes_pool\Entity;
 
+use Drupal\Core\TypedData\Exception\MissingDataException;
 use Drupal\codes_pool\Plugin\codes_pool\CollectionSource\CollectionSourceInterface;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -77,7 +78,7 @@ class CodeCollection extends ContentEntityBase implements CodeCollectionInterfac
   /**
    * Code source.
    *
-   * @var \Drupal\codes_pool\Plugin\codes_pool\CollectionSource\CollectionSourceInterface
+   * @var CollectionSourceInterface
    */
   protected $sourcePlugin;
 
@@ -125,10 +126,10 @@ class CodeCollection extends ContentEntityBase implements CodeCollectionInterfac
   /**
    * Gets source plugin object.
    *
-   * @return \Drupal\codes_pool\Plugin\codes_pool\CollectionSource\CollectionSourceInterface
+   * @return CollectionSourceInterface
    *   Collection source object.
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    */
   public function getSourcePlugin() {
     if (!$this->get('source')->isEmpty() && !$this->sourcePlugin) {
@@ -203,7 +204,7 @@ class CodeCollection extends ContentEntityBase implements CodeCollectionInterfac
    * @return int
    *   Number of codes.
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    */
   public function getCodesCount() {
     return $this->getSourcePlugin()->getCount($this->id());
@@ -215,7 +216,7 @@ class CodeCollection extends ContentEntityBase implements CodeCollectionInterfac
    * @return int
    *   Number of codes.
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    */
   public function getCountCodeAvailable() {
     return $this->getSourcePlugin()->getCountCodeAvailable($this->id());
@@ -228,7 +229,7 @@ class CodeCollection extends ContentEntityBase implements CodeCollectionInterfac
    * @return bool
    *   TRUE if available. FALSE otherwise.
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    */
   public function hasCodeAvailable() {
     return $this->getSourcePlugin()->hasCodeAvailable($this->id());
@@ -243,7 +244,7 @@ class CodeCollection extends ContentEntityBase implements CodeCollectionInterfac
    * @return string
    *   The code.
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    */
   public function dispenseCode(array $params = []) {
     return $this->getSourcePlugin()->dispenseCode($params, $this->id());
@@ -258,7 +259,7 @@ class CodeCollection extends ContentEntityBase implements CodeCollectionInterfac
    * @return array
    *   The array of codes.
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    */
   public function dispenseCodes(array $params = []) {
     return $this->getSourcePlugin()->dispenseCodes($params, $this->id());
@@ -372,9 +373,9 @@ class CodeCollection extends ContentEntityBase implements CodeCollectionInterfac
   /**
    * Helper callback for uasort() to sort code collections by weight and label.
    *
-   * @param \Drupal\codes_pool\Entity\CodeCollectionInterface $a
+   * @param CodeCollectionInterface $a
    *   The first collection to sort.
-   * @param \Drupal\codes_pool\Entity\CodeCollectionInterface $b
+   * @param CodeCollectionInterface $b
    *   The second collection to sort.
    *
    * @return int
diff --git a/src/Form/CodesImportForm.php b/src/Form/CodesImportForm.php
index 26f4fde..37c27f3 100644
--- a/src/Form/CodesImportForm.php
+++ b/src/Form/CodesImportForm.php
@@ -19,14 +19,14 @@ class CodesImportForm extends ConfirmFormBase {
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * Constructs a CodesImportForm object.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   Database connection.
    */
   public function __construct(Connection $database) {
@@ -45,7 +45,7 @@ class CodesImportForm extends ConfirmFormBase {
   /**
    * Collection.
    *
-   * @var \Drupal\codes_pool\Entity\CodeCollection
+   * @var CodeCollection
    */
   protected $collection;
 
diff --git a/src/Plugin/Field/FieldType/PluginItem.php b/src/Plugin/Field/FieldType/PluginItem.php
index 3fa1ca6..42f0429 100644
--- a/src/Plugin/Field/FieldType/PluginItem.php
+++ b/src/Plugin/Field/FieldType/PluginItem.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\codes_pool\Plugin\Field\FieldType;
 
+use Drupal\Core\Executable\ExecutableManagerInterface;
+use Drupal\Component\Plugin\CategorizingPluginManagerInterface;
 use Drupal\Core\Field\FieldItemBase;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Core\TypedData\DataDefinition;
@@ -106,7 +108,7 @@ class PluginItem extends FieldItemBase implements PluginItemInterface {
   /**
    * Gets the plugin manager.
    *
-   * @return \Drupal\Core\Executable\ExecutableManagerInterface|\Drupal\Component\Plugin\CategorizingPluginManagerInterface
+   * @return ExecutableManagerInterface|CategorizingPluginManagerInterface
    *   The plugin manager.
    */
   protected function getPluginManager() {
diff --git a/src/Plugin/Field/FieldType/PluginItemInterface.php b/src/Plugin/Field/FieldType/PluginItemInterface.php
index b08337d..c4c3583 100644
--- a/src/Plugin/Field/FieldType/PluginItemInterface.php
+++ b/src/Plugin/Field/FieldType/PluginItemInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\codes_pool\Plugin\Field\FieldType;
 
+use Drupal\Core\Plugin\PluginBase;
 use Drupal\Core\Field\FieldItemInterface;
 
 /**
@@ -23,7 +24,7 @@ interface PluginItemInterface extends FieldItemInterface {
    * @param array $contexts
    *   An array of context values to pass to the plugin.
    *
-   * @return \Drupal\Core\Plugin\PluginBase
+   * @return PluginBase
    *   The plugin instance.
    */
   public function getTargetInstance(array $contexts = []);
diff --git a/src/Plugin/Field/FieldWidget/PluginSelectWidget.php b/src/Plugin/Field/FieldWidget/PluginSelectWidget.php
index 626bc07..d8b688c 100644
--- a/src/Plugin/Field/FieldWidget/PluginSelectWidget.php
+++ b/src/Plugin/Field/FieldWidget/PluginSelectWidget.php
@@ -29,7 +29,7 @@ class PluginSelectWidget extends WidgetBase implements ContainerFactoryPluginInt
   /**
    * The plugin manager for the field's plugin type.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $pluginManager;
 
@@ -40,13 +40,13 @@ class PluginSelectWidget extends WidgetBase implements ContainerFactoryPluginInt
    *   The plugin_id for the widget.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the widget is associated.
    * @param array $settings
    *   The widget settings.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $plugin_manager
+   * @param PluginManagerInterface $plugin_manager
    *   The plugin manager for the field's plugin type.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, PluginManagerInterface $plugin_manager) {
diff --git a/src/Plugin/codes_pool/CodesStorage/Database.php b/src/Plugin/codes_pool/CodesStorage/Database.php
index 0cb8e68..0409a48 100644
--- a/src/Plugin/codes_pool/CodesStorage/Database.php
+++ b/src/Plugin/codes_pool/CodesStorage/Database.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\codes_pool\Plugin\codes_pool\CodesStorage;
 
+use Drupal\Core\Database\Connection;
 use Drupal\Core\Database\SchemaObjectExistsException;
 
 /**
@@ -17,7 +18,7 @@ class Database implements CodesStorageInterface {
   /**
    * The connection object.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
@@ -57,7 +58,7 @@ class Database implements CodesStorageInterface {
   /**
    * Provides database connection.
    *
-   * @return \Drupal\Core\Database\Connection
+   * @return Connection
    *   Connection object.
    */
   protected  function getConnection() {
diff --git a/src/Plugin/codes_pool/CollectionSource/CollectionSourceBase.php b/src/Plugin/codes_pool/CollectionSource/CollectionSourceBase.php
index 3d806d7..41143e5 100644
--- a/src/Plugin/codes_pool/CollectionSource/CollectionSourceBase.php
+++ b/src/Plugin/codes_pool/CollectionSource/CollectionSourceBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\codes_pool\Plugin\codes_pool\CollectionSource;
 
+use Drupal\codes_pool\Plugin\codes_pool\CodesStorage\CodesStorageInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\codes_pool\CodesStorageManager;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Entity\EntityInterface;
@@ -18,14 +20,14 @@ abstract class CollectionSourceBase extends PluginBase implements CollectionSour
   /**
    * The entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;
 
   /**
    * Code storage manager.
    *
-   * @var \Drupal\codes_pool\CodesStorageManager
+   * @var CodesStorageManager
    */
   protected $codesStorageManager;
 
@@ -38,7 +40,7 @@ abstract class CollectionSourceBase extends PluginBase implements CollectionSour
    *   The pluginId for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\codes_pool\CodesStorageManager $codes_storage_manager
+   * @param CodesStorageManager $codes_storage_manager
    *   Codes storage manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, CodesStorageManager $codes_storage_manager) {
@@ -127,7 +129,7 @@ abstract class CollectionSourceBase extends PluginBase implements CollectionSour
   /**
    * Asserts that the given entity is of the expected type.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    */
   protected function assertEntity(EntityInterface $entity) {
@@ -148,10 +150,10 @@ abstract class CollectionSourceBase extends PluginBase implements CollectionSour
   /**
    * Provides storage.
    *
-   * @return \Drupal\codes_pool\Plugin\codes_pool\CodesStorage\CodesStorageInterface
+   * @return CodesStorageInterface
    *   Storage object.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function getCodesStorage() {
     $storage = $this->codesStorageManager->createInstance($this->pluginDefinition['storage']);
diff --git a/src/Plugin/codes_pool/CollectionSource/Csv.php b/src/Plugin/codes_pool/CollectionSource/Csv.php
index f4afb79..9d13474 100644
--- a/src/Plugin/codes_pool/CollectionSource/Csv.php
+++ b/src/Plugin/codes_pool/CollectionSource/Csv.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\codes_pool\Plugin\codes_pool\CollectionSource;
 
+use Drupal\codes_pool\Plugin\codes_pool\CodesStorage\Database;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\file\Entity\File;
 
@@ -75,7 +76,7 @@ class Csv extends CollectionSourceBase {
    * Post save.
    */
   public function postSave() {
-    /** @var \Drupal\codes_pool\Plugin\codes_pool\CodesStorage\Database $codes_storage */
+    /** @var Database $codes_storage */
     $codes_storage = $this->getCodesStorage();
     // Create table.
     $codes_storage->createStorage($this->getTableName());
@@ -91,10 +92,10 @@ class Csv extends CollectionSourceBase {
       return TRUE;
     }
 
-    /** @var \Drupal\file\Entity\File $file */
+    /** @var File $file */
     $file = File::load(reset($fid));
 
-    /** @var \Drupal\codes_pool\Plugin\codes_pool\CodesStorage\Database $codes_storage */
+    /** @var Database $codes_storage */
     $codes_storage = $this->getCodesStorage();
     $storage_class = get_class($codes_storage);
     $table = $this->getTableName();
