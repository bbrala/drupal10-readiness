diff --git a/pbf.module b/pbf.module
index 5c1a1b4..49841b3 100644
--- a/pbf.module
+++ b/pbf.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Field\FieldDefinitionInterface;
 /**
  * @file
  * Contains pbf.module.
@@ -111,7 +112,7 @@ function pbf_node_access_records(NodeInterface $node) {
   // Check if a Pbf field is attached to the node.
   $field_definitions = $node->getFieldDefinitions();
   $grants = [];
-  /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */
+  /** @var FieldDefinitionInterface $field_definition */
   foreach ($field_definitions as $field_name => $field_definition) {
     if ($field_definition instanceof FieldConfigInterface && $field_definition->getType() == 'pbf') {
 
@@ -273,7 +274,7 @@ function pbf_field_config_insert(FieldConfigInterface $entity) {
   if ($entity->getType() == 'pbf' && $entity->getSetting('synchronized_with')) {
 
     $entityTypeManager = \Drupal::entityTypeManager()->getStorage('field_config');
-    /** @var \Drupal\field\FieldConfigInterface $field_to_synchronize */
+    /** @var FieldConfigInterface $field_to_synchronize */
     $field_to_synchronize = $entityTypeManager->load($entity->getSetting('synchronized_with'));
     if ($field_to_synchronize) {
       $field_to_synchronize->set('synchronized_by', $entity->id())
@@ -307,7 +308,7 @@ function pbf_field_config_update(FieldConfigInterface $entity) {
 
     // If a new field is selected and there is no synchronization before.
     if ($entity->getSetting('synchronized_with') && empty($original->getSetting('synchronized_with'))) {
-      /** @var \Drupal\field\FieldConfigInterface $field_to_synchronize */
+      /** @var FieldConfigInterface $field_to_synchronize */
       $field_to_synchronize = $entityTypeManager->load($entity->getSetting('synchronized_with'));
       if ($field_to_synchronize) {
         $field_to_synchronize->setSetting('synchronized_by', $entity->id())
@@ -318,7 +319,7 @@ function pbf_field_config_update(FieldConfigInterface $entity) {
 
     // If the field selected is removed and no synchronization is enabled.
     if (empty($entity->getSetting('synchronized_with')) && $original->getSetting('synchronized_with')) {
-      /** @var \Drupal\field\FieldConfigInterface $field_to_synchronize */
+      /** @var FieldConfigInterface $field_to_synchronize */
       $field_to_synchronize = $entityTypeManager->load($original->getSetting('synchronized_with'));
       if ($field_to_synchronize) {
         $field_to_synchronize->setSetting('synchronized_by', '')
@@ -330,7 +331,7 @@ function pbf_field_config_update(FieldConfigInterface $entity) {
     // If a new field is selected and there is another field selected before.
     if ($entity->getSetting('synchronized_with') && $original->getSetting('synchronized_with') &&
         $entity->getSetting('synchronized_with') !== $original->getSetting('synchronized_with')) {
-      /** @var \Drupal\field\FieldConfigInterface $new_field_to_synchronize */
+      /** @var FieldConfigInterface $new_field_to_synchronize */
       $new_field_to_synchronize = $entityTypeManager->load($entity->getSetting('synchronized_with'));
       if ($new_field_to_synchronize) {
         $new_field_to_synchronize->setSetting('synchronized_by', $entity->id())
@@ -353,7 +354,7 @@ function pbf_field_config_update(FieldConfigInterface $entity) {
 function pbf_field_config_delete(FieldConfigInterface $entity) {
   if ($entity->getType() == 'pbf' && $entity->getSetting('synchronized_with')) {
     $entityTypeManager = \Drupal::entityTypeManager()->getStorage('field_config');
-    /** @var \Drupal\field\FieldConfigInterface $field_to_synchronize */
+    /** @var FieldConfigInterface $field_to_synchronize */
     $field_to_synchronize = $entityTypeManager->load($entity->getSetting('synchronized_with'));
     if ($field_to_synchronize) {
       $field_to_synchronize->set('synchronized_by', '')->save();
diff --git a/src/PbfSynchronize.php b/src/PbfSynchronize.php
index 246b562..716d2be 100644
--- a/src/PbfSynchronize.php
+++ b/src/PbfSynchronize.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\pbf;
 
+use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -19,30 +20,30 @@ class PbfSynchronize implements PbfSynchronizeInterface {
   /**
    * Drupal\Core\Entity\EntityFieldManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Drupal\Core\Config\ConfigFactoryInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * PbfSynchronize constructor.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param EntityFieldManagerInterface $entity_field_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param ConfigFactoryInterface $config_factory
    */
   public function __construct(EntityFieldManagerInterface $entity_field_manager, EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory) {
     $this->entityFieldManager = $entity_field_manager;
@@ -55,7 +56,7 @@ class PbfSynchronize implements PbfSynchronizeInterface {
    *
    * @param string $op
    *   The operation to run.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to synchronize.
    */
   public function synchronize($op, EntityInterface $entity) {
@@ -64,7 +65,7 @@ class PbfSynchronize implements PbfSynchronizeInterface {
     if (empty($fields)) {
       return;
     }
-    /** @var \Drupal\field\FieldConfigInterface $fieldConfig */
+    /** @var FieldConfigInterface $fieldConfig */
     foreach ($fields as $field_name => $fieldConfig) {
       if ($target_field_id = $this->isSynchronizedWith($fieldConfig)) {
         $this->synchronizeTarget($op, $target_field_id, $fieldConfig, $entity);
@@ -82,7 +83,7 @@ class PbfSynchronize implements PbfSynchronizeInterface {
   /**
    * Check if a field has an unlimited cardinality.
    *
-   * @param \Drupal\field\FieldConfigInterface $fieldConfig
+   * @param FieldConfigInterface $fieldConfig
    *   The field instance to verify.
    *
    * @return bool
@@ -95,7 +96,7 @@ class PbfSynchronize implements PbfSynchronizeInterface {
   /**
    * Find pbf fields synchronized attached on an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity on which search Pbf fields.
    *
    * @return array $pbf_fields
@@ -120,7 +121,7 @@ class PbfSynchronize implements PbfSynchronizeInterface {
   /**
    * Check if a Pbf field synchronize other field.
    *
-   * @param \Drupal\field\FieldConfigInterface $fieldConfig
+   * @param FieldConfigInterface $fieldConfig
    *   The field config entity.
    *
    * @return mixed string|bool
@@ -133,7 +134,7 @@ class PbfSynchronize implements PbfSynchronizeInterface {
   /**
    * Check if a Pbf field is synchronized by other field and can synchronize it.
    *
-   * @param \Drupal\field\FieldConfigInterface $fieldConfig
+   * @param FieldConfigInterface $fieldConfig
    *   The field config entity.
    *
    * @return mixed string|bool
@@ -158,7 +159,7 @@ class PbfSynchronize implements PbfSynchronizeInterface {
   private function getReferenceIds(EntityInterface $entity, FieldConfigInterface $field) {
     $ids = array();
     $field_name = $field->getName();
-    /** @var \Drupal\Core\Entity\FieldableEntityInterface $entity */
+    /** @var FieldableEntityInterface $entity */
     if ($entity->hasField($field_name)) {
       foreach ($entity->get($field_name)->getValue() as $delta => $reference) {
         $ids[$delta] = $reference['target_id'];
@@ -174,15 +175,15 @@ class PbfSynchronize implements PbfSynchronizeInterface {
    *   The operation to do.
    * @param string $field_id
    *   The field id of the Pbf field on target entity.
-   * @param \Drupal\field\FieldConfigInterface $field
+   * @param FieldConfigInterface $field
    *   The Pbf field synchroniezd.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity on which the operation is performed.
    */
   protected function synchronizeTarget($op, $field_id, FieldConfigInterface $field, EntityInterface $entity) {
     $target_entity_type_id = $field->getSetting('target_type');
 
-    /** @var \Drupal\field\FieldConfigInterface $target_field */
+    /** @var FieldConfigInterface $target_field */
     $target_field = $this->entityTypeManager->getStorage('field_config')->load($field_id);
 
     // We check yet if both fields has an unlimited cardinality. In case where
@@ -215,11 +216,11 @@ class PbfSynchronize implements PbfSynchronizeInterface {
    *
    * @param string $target_entity_type_id
    *   The entity type id of targeted entity.
-   * @param \Drupal\field\FieldConfigInterface $target_field
+   * @param FieldConfigInterface $target_field
    *   The Pbf field synchronized by on the referenced entity.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity updated.
-   * @param \Drupal\field\FieldConfigInterface $field
+   * @param FieldConfigInterface $field
    *   The Pbf field synchronized with on the entity.
    */
   protected function update($target_entity_type_id, FieldConfigInterface $target_field, EntityInterface $entity, FieldConfigInterface $field) {
@@ -231,7 +232,7 @@ class PbfSynchronize implements PbfSynchronizeInterface {
     // We synchronize all targeted entities.
     if ($target_ids) {
       $target_entities = $this->entityTypeManager->getStorage($target_entity_type_id)->loadMultiple($target_ids);
-      /** @var \Drupal\Core\Entity\FieldableEntityInterface $target_entity */
+      /** @var FieldableEntityInterface $target_entity */
       foreach ($target_entities as $target_entity) {
         $ids_referenced_from_target = $this->getReferenceIds($target_entity, $target_field);
         if (!in_array($entity->id(), $ids_referenced_from_target)) {
@@ -268,11 +269,11 @@ class PbfSynchronize implements PbfSynchronizeInterface {
    *
    * @param string $target_entity_type_id
    *   The entity type id of targeted entity.
-   * @param \Drupal\field\FieldConfigInterface $target_field
+   * @param FieldConfigInterface $target_field
    *   The Pbf field synchronized by on the referenced entity.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity updated.
-   * @param \Drupal\field\FieldConfigInterface $field
+   * @param FieldConfigInterface $field
    *   The Pbf field synchronized with on the entity.
    */
   protected function insert($target_entity_type_id, FieldConfigInterface $target_field, EntityInterface $entity, FieldConfigInterface $field) {
@@ -280,7 +281,7 @@ class PbfSynchronize implements PbfSynchronizeInterface {
     $target_ids = $this->getReferenceIds($entity, $field);
     if ($target_ids) {
       $target_entities = $this->entityTypeManager->getStorage($target_entity_type_id)->loadMultiple($target_ids);
-      /** @var \Drupal\Core\Entity\FieldableEntityInterface $target_entity */
+      /** @var FieldableEntityInterface $target_entity */
       foreach ($target_entities as $target_entity) {
         $ids_referenced_from_target = $this->getReferenceIds($target_entity, $target_field);
         if (!in_array($entity->id(), $ids_referenced_from_target)) {
@@ -298,11 +299,11 @@ class PbfSynchronize implements PbfSynchronizeInterface {
    *
    * @param string $target_entity_type_id
    *   The entity type id of targeted entity.
-   * @param \Drupal\field\FieldConfigInterface $target_field
+   * @param FieldConfigInterface $target_field
    *   The Pbf field synchronized by on the referenced entity.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity updated.
-   * @param \Drupal\field\FieldConfigInterface $field
+   * @param FieldConfigInterface $field
    *   The Pbf field synchronized with on the entity.
    */
   protected function delete($target_entity_type_id, FieldConfigInterface $target_field, EntityInterface $entity, FieldConfigInterface $field) {
diff --git a/src/Plugin/Field/FieldType/Pbf.php b/src/Plugin/Field/FieldType/Pbf.php
index 03f27a4..4357912 100644
--- a/src/Plugin/Field/FieldType/Pbf.php
+++ b/src/Plugin/Field/FieldType/Pbf.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\pbf\Plugin\Field\FieldType;
 
+use Drupal\Core\Entity\EntityFieldManager;
 use Drupal\Core\Field\FieldConfigInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -40,7 +41,7 @@ class Pbf extends EntityReferenceItem {
   /**
    * The Entity Field Manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;
 
@@ -324,7 +325,7 @@ class Pbf extends EntityReferenceItem {
   /**
    * Get the target bundle of a Field Pbf.
    *
-   * @param \Drupal\Core\Field\FieldConfigInterface $field
+   * @param FieldConfigInterface $field
    *   The field instance on which we want the target bundles.
    *
    * @return array
diff --git a/src/Plugin/Field/FieldWidget/PbfFieldWidget.php b/src/Plugin/Field/FieldWidget/PbfFieldWidget.php
index b249ce4..6bc537e 100644
--- a/src/Plugin/Field/FieldWidget/PbfFieldWidget.php
+++ b/src/Plugin/Field/FieldWidget/PbfFieldWidget.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\pbf\Plugin\Field\FieldWidget;
 
+use Drupal\field\FieldConfigInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Field\Plugin\Field\FieldWidget\EntityReferenceAutocompleteWidget;
@@ -34,7 +35,7 @@ class PbfFieldWidget extends EntityReferenceAutocompleteWidget {
     $item = $items[$delta];
     $operations = $item->getOperations();
 
-    /** @var \Drupal\field\FieldConfigInterface $field_definition */
+    /** @var FieldConfigInterface $field_definition */
     $field_definition = $item->getFieldDefinition();
     $field_name = $field_definition->getName();
 
diff --git a/tests/src/Functional/PbfAccessByNodeRefTest.php b/tests/src/Functional/PbfAccessByNodeRefTest.php
index b379255..7724f7b 100644
--- a/tests/src/Functional/PbfAccessByNodeRefTest.php
+++ b/tests/src/Functional/PbfAccessByNodeRefTest.php
@@ -19,7 +19,7 @@ class PbfAccessByNodeRefTest extends PbfBaseTest {
   /**
    * Setup and create content whith Pbf field.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->fieldname = 'field_pbf_group';
@@ -38,10 +38,10 @@ class PbfAccessByNodeRefTest extends PbfBaseTest {
     $this->drupalLogin($this->adminUser);
 
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200, 'adminUser is allowed to view the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to view the content.');
     $this->drupalGet("node/{$this->article1->id()}/edit");
     // Make sure we don't get a 401 unauthorized response:
-    $this->assertResponse(200, 'adminUser is allowed to edit the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to edit the content.');
 
     $bundle_path = 'admin/structure/types/manage/article';
     // Check that the field appears in the overview form.
@@ -51,33 +51,36 @@ class PbfAccessByNodeRefTest extends PbfBaseTest {
     // Check that the field appears in the overview manage display form.
     $this->drupalGet($bundle_path . '/form-display');
     $this->assertFieldByXPath('//table[@id="field-display-overview"]//tr[@id="field-pbf-group"]/td[1]', 'Content of group', 'Field appears in the Manage form display page.');
-    $this->assertFieldByName('fields[field_pbf_group][type]', 'pbf_widget', 'The expected widget is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_group][type]', 'pbf_widget');
 
     // Check that the field appears in the overview manage display page.
     $this->drupalGet($bundle_path . '/display');
     $this->assertFieldByXPath('//table[@id="field-display-overview"]//tr[@id="field-pbf-group"]/td[1]', 'Content of group', 'Field appears in the Manage form display page.');
-    $this->assertFieldByName('fields[field_pbf_group][type]', 'pbf_formatter_default', 'The expected formatter is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_group][type]', 'pbf_formatter_default');
 
     $user_path_config = 'admin/config/people/accounts';
     $this->drupalGet($user_path_config . '/fields');
     $this->assertFieldByXPath('//table[@id="field-overview"]//tr[@id="field-pbf-group"]/td[1]', 'Member of group', 'User Obf field was created and appears in the overview page.');
     $this->drupalGet($user_path_config . '/form-display');
-    $this->assertFieldByName('fields[field_pbf_group][type]', 'pbf_widget', 'The expected widget is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_group][type]', 'pbf_widget');
     $this->drupalGet($user_path_config . '/display');
-    $this->assertFieldByName('fields[field_pbf_group][type]', 'pbf_formatter_default', 'The expected formatter is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_group][type]', 'pbf_formatter_default');
 
     // Test view access with normal user.
     $this->drupalLogin($this->normalUser);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertText(t('Access denied'));
-    $this->assertResponse(403);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Access denied'));
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $this->drupalGet("node/{$this->article1->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Build the search index.
     $this->container->get('cron')->run();
@@ -94,14 +97,14 @@ class PbfAccessByNodeRefTest extends PbfBaseTest {
     ];
     $this->article2->set($this->fieldname, $value)->save();
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->checkSearchResults('Article', 2);
 
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Set article2 with view permission.
     $value = [
@@ -113,7 +116,7 @@ class PbfAccessByNodeRefTest extends PbfBaseTest {
     ];
     $this->article2->set($this->fieldname, $value)->save();
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->checkSearchResults('Article', 1);
 
     // Associate normalUser with group1.
@@ -121,24 +124,24 @@ class PbfAccessByNodeRefTest extends PbfBaseTest {
 
     // Check if user is well associated with group1.
     $this->drupalGet("user/{$this->normalUser->id()}/edit");
-    $this->assertResponse(200);
-    $this->assertFieldByName('field_pbf_group[0][target_id]', $this->group1->getTitle() . ' (' . $this->group1->id() . ')', 'The expected value is found in the Pbf input field');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->fieldValueEquals('field_pbf_group[0][target_id]', $this->group1->getTitle() . ' (' . $this->group1->id() . ')');
     $this->drupalGet("user/{$this->normalUser->id()}");
-    $this->assertLink($this->group1->getTitle());
-    $this->assertResponse(200);
+    $this->assertSession()->linkExists($this->group1->getTitle());
+    $this->assertSession()->statusCodeEquals(200);
 
     // Check search.
     $this->container->get('cron')->run();
     $this->checkSearchResults('Article', 2);
     // Check view.
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check edit.
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     // Check delete.
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Set article2 with view, update, delete permissions.
     $value = [
@@ -151,20 +154,20 @@ class PbfAccessByNodeRefTest extends PbfBaseTest {
     $this->article2->set($this->fieldname, $value)->save();
     // Check view.
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check edit.
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check delete.
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Test with anonymous user.
     $this->drupalLogout();
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
   }
 
diff --git a/tests/src/Functional/PbfAccessByRoleTest.php b/tests/src/Functional/PbfAccessByRoleTest.php
index 090295b..f376c5b 100644
--- a/tests/src/Functional/PbfAccessByRoleTest.php
+++ b/tests/src/Functional/PbfAccessByRoleTest.php
@@ -20,7 +20,7 @@ class PbfAccessByRoleTest extends PbfBaseTest {
   /**
    * Setup and create content whith Pbf field.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->fieldname = 'field_pbf_role';
@@ -45,16 +45,16 @@ class PbfAccessByRoleTest extends PbfBaseTest {
     $this->drupalLogin($this->adminUser);
 
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200, 'adminUser is allowed to view the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to view the content.');
     $this->drupalGet("node/{$this->article1->id()}/edit");
     // Make sure we don't get a 401 unauthorized response:
-    $this->assertResponse(200, 'adminUser is allowed to edit the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to edit the content.');
 
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200, 'adminUser is allowed to view the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to view the content.');
     $this->drupalGet("node/{$this->article2->id()}/edit");
     // Make sure we don't get a 401 unauthorized response:
-    $this->assertResponse(200, 'adminUser is allowed to edit the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to edit the content.');
 
     $bundle_path = 'admin/structure/types/manage/article';
     // Check that the field appears in the overview form.
@@ -64,25 +64,28 @@ class PbfAccessByRoleTest extends PbfBaseTest {
     // Check that the field appears in the overview manage display form.
     $this->drupalGet($bundle_path . '/form-display');
     $this->assertFieldByXPath('//table[@id="field-display-overview"]//tr[@id="field-pbf-role"]/td[1]', 'Grant access to role', 'Field appears in the Manage form display page.');
-    $this->assertFieldByName('fields[field_pbf_role][type]', 'pbf_widget', 'The expected widget is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_role][type]', 'pbf_widget');
 
     // Check that the field appears in the overview manage display page.
     $this->drupalGet($bundle_path . '/display');
     $this->assertFieldByXPath('//table[@id="field-display-overview"]//tr[@id="field-pbf-role"]/td[1]', 'Grant access to role', 'Field appears in the Manage form display page.');
-    $this->assertFieldByName('fields[field_pbf_role][type]', 'pbf_formatter_default', 'The expected formatter is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_role][type]', 'pbf_formatter_default');
 
     // Test view access with normal user.
     $this->drupalLogin($this->normalUser);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertText(t('Access denied'));
-    $this->assertResponse(403);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Access denied'));
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $this->drupalGet("node/{$this->article1->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Build the search index.
     $this->container->get('cron')->run();
@@ -98,13 +101,13 @@ class PbfAccessByRoleTest extends PbfBaseTest {
     $this->checkSearchResults('Article', 2);
     // Check view.
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check edit.
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     // Check delete.
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Set article2 with view, update, delete permissions.
     $value = [
@@ -117,27 +120,27 @@ class PbfAccessByRoleTest extends PbfBaseTest {
     $this->article2->set($this->fieldname, $value)->save();
     // Check view.
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check edit.
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check delete.
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Test with anonymous user.
     $this->drupalLogout();
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Test with user.
     $this->drupalLogin($this->user);
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
   }
 
diff --git a/tests/src/Functional/PbfAccessByTermRefTest.php b/tests/src/Functional/PbfAccessByTermRefTest.php
index a97bba2..9ee2579 100644
--- a/tests/src/Functional/PbfAccessByTermRefTest.php
+++ b/tests/src/Functional/PbfAccessByTermRefTest.php
@@ -19,7 +19,7 @@ class PbfAccessByTermRefTest extends PbfBaseTest {
   /**
    * Setup and create content with Pbf field.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->fieldname = 'field_pbf_term';
     $this->attachPbfTermFields($this->vocabulary, $this->fieldname);
@@ -41,10 +41,10 @@ class PbfAccessByTermRefTest extends PbfBaseTest {
     $this->drupalLogin($this->adminUser);
 
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200, 'adminUser is allowed to view the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to view the content.');
     $this->drupalGet("node/{$this->article1->id()}/edit");
     // Make sure we don't get a 401 unauthorized response:
-    $this->assertResponse(200, 'adminUser is allowed to edit the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to edit the content.');
 
     $bundle_path = 'admin/structure/types/manage/article';
     // Check that the field appears in the overview form.
@@ -54,33 +54,36 @@ class PbfAccessByTermRefTest extends PbfBaseTest {
     // Check that the field appears in the overview manage display form.
     $this->drupalGet($bundle_path . '/form-display');
     $this->assertFieldByXPath('//table[@id="field-display-overview"]//tr[@id="field-pbf-term"]/td[1]', 'Content related to term', 'Field appears in the Manage form display page.');
-    $this->assertFieldByName('fields[field_pbf_term][type]', 'pbf_widget', 'The expected widget is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_term][type]', 'pbf_widget');
 
     // Check that the field appears in the overview manage display page.
     $this->drupalGet($bundle_path . '/display');
     $this->assertFieldByXPath('//table[@id="field-display-overview"]//tr[@id="field-pbf-term"]/td[1]', 'Content related to term', 'Field appears in the Manage form display page.');
-    $this->assertFieldByName('fields[field_pbf_term][type]', 'pbf_formatter_default', 'The expected formatter is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_term][type]', 'pbf_formatter_default');
 
     $user_path_config = 'admin/config/people/accounts';
     $this->drupalGet($user_path_config . '/fields');
     $this->assertFieldByXPath('//table[@id="field-overview"]//tr[@id="field-pbf-term"]/td[1]', 'User related to term', 'User Pbf field was created and appears in the overview page.');
     $this->drupalGet($user_path_config . '/form-display');
-    $this->assertFieldByName('fields[field_pbf_term][type]', 'pbf_widget', 'The expected widget is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_term][type]', 'pbf_widget');
     $this->drupalGet($user_path_config . '/display');
-    $this->assertFieldByName('fields[field_pbf_term][type]', 'pbf_formatter_default', 'The expected formatter is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_term][type]', 'pbf_formatter_default');
 
     // Test view access with normal user.
     $this->drupalLogin($this->normalUser);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertText(t('Access denied'));
-    $this->assertResponse(403);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Access denied'));
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $this->drupalGet("node/{$this->article1->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Build the search index.
     $this->container->get('cron')->run();
@@ -97,14 +100,14 @@ class PbfAccessByTermRefTest extends PbfBaseTest {
     ];
     $this->article2->set($this->fieldname, $value)->save();
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->checkSearchResults('Article', 2);
 
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Set article2 with view permission.
     $value = [
@@ -116,7 +119,7 @@ class PbfAccessByTermRefTest extends PbfBaseTest {
     ];
     $this->article2->set($this->fieldname, $value)->save();
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->checkSearchResults('Article', 1);
 
     // Associate normalUser with term1.
@@ -124,24 +127,24 @@ class PbfAccessByTermRefTest extends PbfBaseTest {
 
     // Check if user is well associated with group1.
     $this->drupalGet("user/{$this->normalUser->id()}/edit");
-    $this->assertResponse(200);
-    $this->assertFieldByName('field_pbf_term[0][target_id]', $this->term1->getName() . ' (' . $this->term1->id() . ')', 'The expected value is found in the Pbf input field');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->fieldValueEquals('field_pbf_term[0][target_id]', $this->term1->getName() . ' (' . $this->term1->id() . ')');
     $this->drupalGet("user/{$this->normalUser->id()}");
-    $this->assertLink($this->term1->getName());
-    $this->assertResponse(200);
+    $this->assertSession()->linkExists($this->term1->getName());
+    $this->assertSession()->statusCodeEquals(200);
 
     // Check search.
     $this->container->get('cron')->run();
     $this->checkSearchResults('Article', 2);
     // Check view.
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check edit.
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     // Check delete.
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Set article2 with view, update, delete permissions.
     $value = [
@@ -154,20 +157,20 @@ class PbfAccessByTermRefTest extends PbfBaseTest {
     $this->article2->set($this->fieldname, $value)->save();
     // Check view.
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check edit.
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check delete.
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Test with anonymous user.
     $this->drupalLogout();
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
   }
 
diff --git a/tests/src/Functional/PbfAccessByUserDirectTest.php b/tests/src/Functional/PbfAccessByUserDirectTest.php
index 34e6004..d7a929f 100644
--- a/tests/src/Functional/PbfAccessByUserDirectTest.php
+++ b/tests/src/Functional/PbfAccessByUserDirectTest.php
@@ -26,7 +26,7 @@ class PbfAccessByUserDirectTest extends PbfBaseTest {
   /**
    * Setup and create content whith Pbf field.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->fieldname = 'field_pbf_user';
@@ -52,16 +52,16 @@ class PbfAccessByUserDirectTest extends PbfBaseTest {
     $this->drupalLogin($this->adminUser);
 
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200, 'adminUser is allowed to view the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to view the content.');
     $this->drupalGet("node/{$this->article1->id()}/edit");
     // Make sure we don't get a 401 unauthorized response:
-    $this->assertResponse(200, 'adminUser is allowed to edit the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to edit the content.');
 
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200, 'adminUser is allowed to view the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to view the content.');
     $this->drupalGet("node/{$this->article2->id()}/edit");
     // Make sure we don't get a 401 unauthorized response:
-    $this->assertResponse(200, 'adminUser is allowed to edit the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to edit the content.');
 
     $bundle_path = 'admin/structure/types/manage/article';
     // Check that the field appears in the overview form.
@@ -71,35 +71,38 @@ class PbfAccessByUserDirectTest extends PbfBaseTest {
     // Check that the field appears in the overview manage display form.
     $this->drupalGet($bundle_path . '/form-display');
     $this->assertFieldByXPath('//table[@id="field-display-overview"]//tr[@id="field-pbf-user"]/td[1]', 'Grant access to user', 'Field appears in the Manage form display page.');
-    $this->assertFieldByName('fields[field_pbf_user][type]', 'pbf_widget', 'The expected widget is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_user][type]', 'pbf_widget');
 
     // Check that the field appears in the overview manage display page.
     $this->drupalGet($bundle_path . '/display');
     $this->assertFieldByXPath('//table[@id="field-display-overview"]//tr[@id="field-pbf-user"]/td[1]', 'Grant access to user', 'Field appears in the Manage form display page.');
-    $this->assertFieldByName('fields[field_pbf_user][type]', 'pbf_formatter_default', 'The expected formatter is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_user][type]', 'pbf_formatter_default');
 
     if ($this->userMethod == 'ref_user') {
       $user_path_config = 'admin/config/people/accounts';
       $this->drupalGet($user_path_config . '/fields');
       $this->assertFieldByXPath('//table[@id="field-overview"]//tr[@id="field-pbf-user"]/td[1]', 'User related to user', 'User Obf field was created and appears in the overview page.');
       $this->drupalGet($user_path_config . '/form-display');
-      $this->assertFieldByName('fields[field_pbf_user][type]', 'pbf_widget', 'The expected widget is selected.');
+      $this->assertSession()->fieldValueEquals('fields[field_pbf_user][type]', 'pbf_widget');
       $this->drupalGet($user_path_config . '/display');
-      $this->assertFieldByName('fields[field_pbf_user][type]', 'pbf_formatter_default', 'The expected formatter is selected.');
+      $this->assertSession()->fieldValueEquals('fields[field_pbf_user][type]', 'pbf_formatter_default');
     }
 
     // Test view access with normal user.
     $this->drupalLogin($this->normalUser);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertText(t('Access denied'));
-    $this->assertResponse(403);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Access denied'));
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $this->drupalGet("node/{$this->article1->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Build the search index.
     $this->container->get('cron')->run();
@@ -109,14 +112,14 @@ class PbfAccessByUserDirectTest extends PbfBaseTest {
     // Login as user referenced by Article 2.
     $this->drupalLogin($this->user);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->checkSearchResults('Article', 2);
 
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Set article2 with view, update, delete permissions.
     $value = [
@@ -129,27 +132,27 @@ class PbfAccessByUserDirectTest extends PbfBaseTest {
     $this->article2->set($this->fieldname, $value)->save();
     // Check view.
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check edit.
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check delete.
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Test with anonymous user.
     $this->drupalLogout();
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Test with normalUser.
     $this->drupalLogin($this->normalUser);
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
   }
 
diff --git a/tests/src/Functional/PbfAccessByUserRefTest.php b/tests/src/Functional/PbfAccessByUserRefTest.php
index 42f557e..5cec809 100644
--- a/tests/src/Functional/PbfAccessByUserRefTest.php
+++ b/tests/src/Functional/PbfAccessByUserRefTest.php
@@ -26,7 +26,7 @@ class PbfAccessByUserRefTest extends PbfBaseTest {
   /**
    * Setup and create content whith Pbf field.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->fieldname = 'field_pbf_user';
@@ -48,16 +48,16 @@ class PbfAccessByUserRefTest extends PbfBaseTest {
     $this->drupalLogin($this->adminUser);
 
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200, 'adminUser is allowed to view the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to view the content.');
     $this->drupalGet("node/{$this->article1->id()}/edit");
     // Make sure we don't get a 401 unauthorized response:
-    $this->assertResponse(200, 'adminUser is allowed to edit the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to edit the content.');
 
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200, 'adminUser is allowed to view the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to view the content.');
     $this->drupalGet("node/{$this->article2->id()}/edit");
     // Make sure we don't get a 401 unauthorized response:
-    $this->assertResponse(200, 'adminUser is allowed to edit the content.');
+    $this->assertSession()->statusCodeEquals(200, 'adminUser is allowed to edit the content.');
 
     $bundle_path = 'admin/structure/types/manage/article';
     // Check that the field appears in the overview form.
@@ -67,35 +67,38 @@ class PbfAccessByUserRefTest extends PbfBaseTest {
     // Check that the field appears in the overview manage display form.
     $this->drupalGet($bundle_path . '/form-display');
     $this->assertFieldByXPath('//table[@id="field-display-overview"]//tr[@id="field-pbf-user"]/td[1]', 'Grant access to user', 'Field appears in the Manage form display page.');
-    $this->assertFieldByName('fields[field_pbf_user][type]', 'pbf_widget', 'The expected widget is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_user][type]', 'pbf_widget');
 
     // Check that the field appears in the overview manage display page.
     $this->drupalGet($bundle_path . '/display');
     $this->assertFieldByXPath('//table[@id="field-display-overview"]//tr[@id="field-pbf-user"]/td[1]', 'Grant access to user', 'Field appears in the Manage form display page.');
-    $this->assertFieldByName('fields[field_pbf_user][type]', 'pbf_formatter_default', 'The expected formatter is selected.');
+    $this->assertSession()->fieldValueEquals('fields[field_pbf_user][type]', 'pbf_formatter_default');
 
     if ($this->userMethod == 'ref_user') {
       $user_path_config = 'admin/config/people/accounts';
       $this->drupalGet($user_path_config . '/fields');
       $this->assertFieldByXPath('//table[@id="field-overview"]//tr[@id="field-pbf-user"]/td[1]', 'User related to user', 'User Pbf field was created and appears in the overview page.');
       $this->drupalGet($user_path_config . '/form-display');
-      $this->assertFieldByName('fields[field_pbf_user][type]', 'pbf_widget', 'The expected widget is selected.');
+      $this->assertSession()->fieldValueEquals('fields[field_pbf_user][type]', 'pbf_widget');
       $this->drupalGet($user_path_config . '/display');
-      $this->assertFieldByName('fields[field_pbf_user][type]', 'pbf_formatter_default', 'The expected formatter is selected.');
+      $this->assertSession()->fieldValueEquals('fields[field_pbf_user][type]', 'pbf_formatter_default');
     }
 
     // Test view access with normal user.
     $this->drupalLogin($this->normalUser);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertText(t('Access denied'));
-    $this->assertResponse(403);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Access denied'));
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $this->drupalGet("node/{$this->article1->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Build the search index.
     $this->container->get('cron')->run();
@@ -105,14 +108,14 @@ class PbfAccessByUserRefTest extends PbfBaseTest {
     // Login as user referenced by Article 2.
     $this->drupalLogin($this->user);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->checkSearchResults('Article', 2);
 
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Associate normalUser with user referenced.
     $this->drupalLogin($this->normalUser);
@@ -120,24 +123,24 @@ class PbfAccessByUserRefTest extends PbfBaseTest {
 
     // Check if normalUser is well associated with user.
     $this->drupalGet("user/{$this->normalUser->id()}/edit");
-    $this->assertResponse(200);
-    $this->assertFieldByName('field_pbf_user[0][target_id]', $this->user->getAccountName() . ' (' . $this->user->id() . ')', 'The expected value is found in the Pbf input field');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->fieldValueEquals('field_pbf_user[0][target_id]', $this->user->getAccountName() . ' (' . $this->user->id() . ')');
     $this->drupalGet("user/{$this->normalUser->id()}");
-    $this->assertLink($this->user->getAccountName());
-    $this->assertResponse(200);
+    $this->assertSession()->linkExists($this->user->getAccountName());
+    $this->assertSession()->statusCodeEquals(200);
 
     // Check search.
     $this->container->get('cron')->run();
     $this->checkSearchResults('Article', 2);
     // Check view.
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check edit.
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     // Check delete.
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Set article2 with view, update, delete permissions.
     $value = [
@@ -150,27 +153,27 @@ class PbfAccessByUserRefTest extends PbfBaseTest {
     $this->article2->set($this->fieldname, $value)->save();
     // Check view.
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check edit.
     $this->drupalGet("node/{$this->article2->id()}/edit");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check delete.
     $this->drupalGet("node/{$this->article2->id()}/delete");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Test with anonymous user.
     $this->drupalLogout();
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Test with user.
     $this->drupalLogin($this->user);
     $this->drupalGet("node/{$this->article1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/{$this->article2->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
   }
 
