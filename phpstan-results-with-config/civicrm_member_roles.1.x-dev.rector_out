modules/contrib/civicrm_member_roles/civicrm_member_roles.drush.inc
modules/contrib/civicrm_member_roles/civicrm_member_roles.module
modules/contrib/civicrm_member_roles/src/Batch/Sync.php
modules/contrib/civicrm_member_roles/src/CivicrmMemberRoleRuleHtmlRouteProvider.php
modules/contrib/civicrm_member_roles/src/CivicrmMemberRoleRuleListBuilder.php
modules/contrib/civicrm_member_roles/src/CivicrmMemberRoles.php
modules/contrib/civicrm_member_roles/src/Entity/CivicrmMemberRoleRule.php
modules/contrib/civicrm_member_roles/src/Entity/CivicrmMemberRoleRuleInterface.php
modules/contrib/civicrm_member_roles/src/Form/CivicrmMemberRoleRuleDeleteForm.php
modules/contrib/civicrm_member_roles/src/Form/CivicrmMemberRoleRuleForm.php
modules/contrib/civicrm_member_roles/src/Form/ManualSyncForm.php
modules/contrib/civicrm_member_roles/src/Form/SettingsForm.php

7 files with changes
====================

1) modules/contrib/civicrm_member_roles/src/Form/ManualSyncForm.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * CiviCRM member roles sync batch.
    *
-   * @var \Drupal\civicrm_member_roles\Batch\Sync
+   * @var Sync
    */
   protected $sync;

@@ @@
   /**
    * CivicrmMemberRoleRuleForm constructor.
    *
-   * @param \Drupal\civicrm_member_roles\Batch\Sync $sync
+   * @param Sync $sync
    *   CiviCRM member roles service.
    */
   public function __construct(Sync $sync) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/civicrm_member_roles/src/Form/CivicrmMemberRoleRuleForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\civicrm_member_roles\Form;

+use Drupal\civicrm_member_roles\Entity\CivicrmMemberRoleRuleInterface;
 use Drupal\civicrm_member_roles\CivicrmMemberRoles;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * CiviCRM member roles service.
    *
-   * @var \Drupal\civicrm_member_roles\CivicrmMemberRoles
+   * @var CivicrmMemberRoles
    */
   protected $memberRoles;

@@ @@
   /**
    * CivicrmMemberRoleRuleForm constructor.
    *
-   * @param \Drupal\civicrm_member_roles\CivicrmMemberRoles $memberRoles
+   * @param CivicrmMemberRoles $memberRoles
    *   CiviCRM member roles service.
    */
   public function __construct(CivicrmMemberRoles $memberRoles) {
@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\civicrm_member_roles\Entity\CivicrmMemberRoleRuleInterface $rule */
+    /** @var CivicrmMemberRoleRuleInterface $rule */
     $rule = $this->entity;

     $form['label'] = [
@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\civicrm_member_roles\Entity\CivicrmMemberRoleRuleInterface $rule */
+    /** @var CivicrmMemberRoleRuleInterface $rule */
     $rule = $this->entity;

     $rule->setType($form_state->getValue('membership_type'))
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/civicrm_member_roles/src/CivicrmMemberRoles.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\civicrm_member_roles;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\civicrm_member_roles\Entity\CivicrmMemberRoleRuleInterface;
 use Drupal\civicrm\Civicrm;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Database\Connection;
@@ @@
   /**
    * CiviCRM member roles configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
    *
    * @param \Drupal\civicrm\Civicrm $civicrm
    *   CiviCRM service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Config factory service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager service.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
    */
   public function __construct(Civicrm $civicrm, ConfigFactoryInterface $configFactory, EntityTypeManagerInterface $entityTypeManager, Connection $database) {
@@ @@
   /**
    * Loads all assignment rules.
    *
-   * @return \Drupal\civicrm_member_roles\Entity\CivicrmMemberRoleRuleInterface[]
+   * @return CivicrmMemberRoleRuleInterface[]
    *   The assignment rules.
    */
   protected function getRules() {
@@ @@
   /**
    * Sync membership roles for a user account.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account.
    */
   public function syncUser(AccountInterface $account) {
@@ @@
   /**
    * Obtain the contact for a user.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account.
    *
    * @return int|null
@@ @@
    * @param int $cid
    *   The contact ID.
    *
-   * @return \Drupal\Core\Session\AccountInterface|null
+   * @return AccountInterface|null
    *   The contact ID, or NULL if not found.
    */
   public function getContactAccount($cid) {
@@ @@
    *
    * @param int $cid
    *   The contact ID.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account.
    */
   public function syncContact($cid, AccountInterface $account) {
@@ @@
   /**
    * Finds roles used in a set of assignment rules.
    *
-   * @param \Drupal\civicrm_member_roles\Entity\CivicrmMemberRoleRuleInterface[] $rules
+   * @param CivicrmMemberRoleRuleInterface[] $rules
    *   Assignment rules.
    *
    * @return array
@@ @@
   /**
    * Gets the user for a user account.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity.
    */
   protected function getAccountUser(AccountInterface $account) {
@@ @@
   /**
    * Gets roles to add for a contact's memberships.
    *
-   * @param \Drupal\civicrm_member_roles\Entity\CivicrmMemberRoleRuleInterface[] $rules
+   * @param CivicrmMemberRoleRuleInterface[] $rules
    *   Assignment rules.
    * @param array $memberships
    *   Contact membership data.
@@ @@
       // Find rules applicable to the membership type.
       $membershipRules = array_filter($rules, function ($rule) use ($membership) {
         /**
-         * @var \Drupal\civicrm_member_roles\Entity\CivicrmMemberRoleRuleInterface
+         * @var CivicrmMemberRoleRuleInterface
          */
         return $rule->getType() == $membership['membership_type_id'];
       });
@@ @@
   /**
    * Gets roles to expire for a contact's memberships.
    *
-   * @param \Drupal\civicrm_member_roles\Entity\CivicrmMemberRoleRuleInterface[] $rules
+   * @param CivicrmMemberRoleRuleInterface[] $rules
    *   Assignment rules.
    * @param array $memberships
    *   Contact membership data.
@@ @@
       // Find rules applicable to the membership type.
       $membershipRules = array_filter($rules, function ($rule) use ($membership) {
         /**
-          * @var \Drupal\civicrm_member_roles\Entity\CivicrmMemberRoleRuleInterface
-          */
+         * @var CivicrmMemberRoleRuleInterface
+         */
         return $rule->getType() == $membership['membership_type_id'];
       });
       foreach ($membershipRules as $rule) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/civicrm_member_roles/src/CivicrmMemberRoleRuleListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\civicrm_member_roles;

+use Drupal\civicrm_member_roles\Entity\CivicrmMemberRoleRuleInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
   /**
    * CiviCRM member roles service.
    *
-   * @var \Drupal\civicrm_member_roles\CivicrmMemberRoles
+   * @var CivicrmMemberRoles
    */
   protected $memberRoles;

@@ @@
   /**
    * User role storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $roleStorage;

@@ @@
   /**
    * CivicrmMemberRoleRuleListBuilder constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $roleStorage
+   * @param EntityStorageInterface $roleStorage
    *   The use role storage class.
-   * @param \Drupal\civicrm_member_roles\CivicrmMemberRoles $memberRoles
+   * @param CivicrmMemberRoles $memberRoles
    *   CiviCRM member roles service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, EntityStorageInterface $roleStorage, CivicrmMemberRoles $memberRoles) {
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\civicrm_member_roles\Entity\CivicrmMemberRoleRuleInterface $entity */
+    /** @var CivicrmMemberRoleRuleInterface $entity */
     $row['label'] = $entity->label();
     $row['id'] = $entity->id();
     $row['membership_type'] = $this->getMembershipTypeName($entity->getType());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/civicrm_member_roles/src/Batch/Sync.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The civicrm member role utility service.
    *
-   * @var \Drupal\civicrm_member_roles\CivicrmMemberRoles
+   * @var CivicrmMemberRoles
    */
   protected $civicrmMemberRoles;

@@ @@
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Sync constructor.
    *
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $stringTranslation
+   * @param TranslationInterface $stringTranslation
    *   The string translation service.
-   * @param \Drupal\civicrm_member_roles\CivicrmMemberRoles $civicrmMemberRoles
+   * @param CivicrmMemberRoles $civicrmMemberRoles
    *   The civicrm member role service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(TranslationInterface $stringTranslation, CivicrmMemberRoles $civicrmMemberRoles, MessengerInterface $messenger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/civicrm_member_roles/civicrm_member_roles.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\civicrm_member_roles\CivicrmMemberRoles;
 /**
  * @file
  * CiviMember Roles Sync module code.
@@ @@
     return;
   }

-  /** @var \Drupal\civicrm_member_roles\CivicrmMemberRoles $civicrm_member_roles */
+  /** @var CivicrmMemberRoles $civicrm_member_roles */
   $civicrm_member_roles = \Drupal::service('civicrm_member_roles');
   $civicrm_member_roles->syncUser($account);
 }
@@ @@
     return;
   }

-  /** @var \Drupal\civicrm_member_roles\CivicrmMemberRoles $civicrm_member_roles */
+  /** @var CivicrmMemberRoles $civicrm_member_roles */
   $civicrm_member_roles = \Drupal::service('civicrm_member_roles');
   $civicrm_member_roles->syncUser($account);
 }
@@ @@
 function civicrm_member_roles_cron() {
   $config = \Drupal::config('civicrm_member_roles.settings');
   if (in_array('cron', $config->get('sync_method'))) {
-    /** @var \Drupal\civicrm_member_roles\CivicrmMemberRoles $civicrm_member_roles */
+    /** @var CivicrmMemberRoles $civicrm_member_roles */
     $civicrm_member_roles = \Drupal::service('civicrm_member_roles');
     $civicrm_member_roles->sync($config->get('cron_limit'));
   }
@@ @@
     return;
   }

-  /** @var \Drupal\civicrm_member_roles\CivicrmMemberRoles $civicrm_member_roles */
+  /** @var CivicrmMemberRoles $civicrm_member_roles */
   $civicrm_member_roles = \Drupal::service('civicrm_member_roles');
   if ($account = $civicrm_member_roles->getContactAccount($objref->contact_id)) {
     $civicrm_member_roles->syncContact($objref->contact_id, $account);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


7) modules/contrib/civicrm_member_roles/civicrm_member_roles.drush.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\civicrm_member_roles\CivicrmMemberRoles;
 /**
  * @file
  * CiviMember Roles Sync drush integration.
@@ @@
  * Drush callback for civicrm-member-role-sync.
  */
 function drush_civicrm_member_roles_civicrm_member_role_sync() {
-  /** @var \Drupal\civicrm_member_roles\CivicrmMemberRoles $civicrm_member_roles */
+  /** @var CivicrmMemberRoles $civicrm_member_roles */
   $civicrm_member_roles = \Drupal::service('civicrm_member_roles');

   if ($uid = drush_get_option('uid')) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 7 files have been changed by Rector                                       

