modules/contrib/migmag/migmag.module
modules/contrib/migmag/migmag_callback_upgrade/migmag_callback_upgrade.module
modules/contrib/migmag/migmag_callback_upgrade/src/MigMagCallback.php
modules/contrib/migmag/migmag_callback_upgrade/tests/src/Unit/MigMagCallbackTest.php
modules/contrib/migmag/migmag_menu_link_migrate/migmag_menu_link_migrate.module
modules/contrib/migmag/migmag_menu_link_migrate/src/MigMagMenuLinkMigrate.php
modules/contrib/migmag/migmag_menu_link_migrate/tests/fixtures/d7-menu-link-db.php
modules/contrib/migmag/migmag_menu_link_migrate/tests/fixtures/d7-menu-link-db/field_config.php
modules/contrib/migmag/migmag_menu_link_migrate/tests/fixtures/d7-menu-link-db/field_config_instance.php
modules/contrib/migmag/migmag_menu_link_migrate/tests/fixtures/d7-menu-link-db/menu_custom.php
modules/contrib/migmag/migmag_menu_link_migrate/tests/fixtures/d7-menu-link-db/menu_links.php
modules/contrib/migmag/migmag_menu_link_migrate/tests/fixtures/d7-menu-link-db/node.php
modules/contrib/migmag/migmag_menu_link_migrate/tests/fixtures/d7-menu-link-db/node_revision.php
modules/contrib/migmag/migmag_menu_link_migrate/tests/fixtures/d7-menu-link-db/node_type.php
modules/contrib/migmag/migmag_menu_link_migrate/tests/fixtures/d7-menu-link-db/role.php
modules/contrib/migmag/migmag_menu_link_migrate/tests/fixtures/d7-menu-link-db/role_permission.php
modules/contrib/migmag/migmag_menu_link_migrate/tests/fixtures/d7-menu-link-db/system.php
modules/contrib/migmag/migmag_menu_link_migrate/tests/fixtures/d7-menu-link-db/users.php
modules/contrib/migmag/migmag_menu_link_migrate/tests/fixtures/d7-menu-link-db/users_roles.php
modules/contrib/migmag/migmag_menu_link_migrate/tests/fixtures/d7-menu-link-db/variable.php
modules/contrib/migmag/migmag_menu_link_migrate/tests/src/Kernel/MenuLinkMigrateTest.php
modules/contrib/migmag/migmag_process/migmag_process.module
modules/contrib/migmag/migmag_process/migmag_process_lookup_replace/migmag_process_lookup_replace.module
modules/contrib/migmag/migmag_process/migmag_process_lookup_replace/tests/src/Kernel/MigMagProcessLookupReplaceTest.php
modules/contrib/migmag/migmag_process/src/MigMagMigrateStub.php
modules/contrib/migmag/migmag_process/src/MigmagProcessServiceProvider.php
modules/contrib/migmag/migmag_process/src/Plugin/migrate/process/MigMagCompare.php
modules/contrib/migmag/migmag_process/src/Plugin/migrate/process/MigMagGetEntityProperty.php
modules/contrib/migmag/migmag_process/src/Plugin/migrate/process/MigMagLoggerLog.php
modules/contrib/migmag/migmag_process/src/Plugin/migrate/process/MigMagLookup.php
modules/contrib/migmag/migmag_process/src/Plugin/migrate/process/MigMagTargetBundle.php
modules/contrib/migmag/migmag_process/src/Plugin/migrate/process/MigMagTry.php
modules/contrib/migmag/migmag_process/src/Plugin/migrate/process/MigMagUuidGenerate.php
modules/contrib/migmag/migmag_process/tests/modules/migmag_lookup_test_migrations/src/MigMagLookupTestMigrationDeriver.php
modules/contrib/migmag/migmag_process/tests/modules/migmag_target_bundle_test/src/MigMagTargetBundleDeriver.php
modules/contrib/migmag/migmag_process/tests/src/Kernel/MigMagLookupInstallTest.php
modules/contrib/migmag/migmag_process/tests/src/Kernel/MigMagMigrateStubCompatibilityTest.php
modules/contrib/migmag/migmag_process/tests/src/Kernel/Plugin/MigMagGetEntityPropertyTest.php
modules/contrib/migmag/migmag_process/tests/src/Kernel/Plugin/MigMagLookupTest.php
modules/contrib/migmag/migmag_process/tests/src/Kernel/Plugin/MigMagTargetBundleTest.php
modules/contrib/migmag/migmag_process/tests/src/Kernel/Plugin/MigMagTryTest.php
modules/contrib/migmag/migmag_process/tests/src/Unit/MigMagMigrateStubTest.php
modules/contrib/migmag/migmag_process/tests/src/Unit/Plugin/MigMagCompareTest.php
modules/contrib/migmag/migmag_process/tests/src/Unit/Plugin/MigMagLoggerLogTest.php
modules/contrib/migmag/migmag_process/tests/src/Unit/Plugin/MigMagLookupCoreCompatibilityTest.php
modules/contrib/migmag/migmag_process/tests/src/Unit/Plugin/MigMagUuidGenerateTest.php
modules/contrib/migmag/migmag_rollbackable/migmag_rollbackable.install
modules/contrib/migmag/migmag_rollbackable/migmag_rollbackable.module
modules/contrib/migmag/migmag_rollbackable/migmag_rollbackable_replace/migmag_rollbackable_replace.module
modules/contrib/migmag/migmag_rollbackable/src/Plugin/migrate/destination/RollbackableColor.php
modules/contrib/migmag/migmag_rollbackable/src/Plugin/migrate/destination/RollbackableComponentEntityDisplayBase.php
modules/contrib/migmag/migmag_rollbackable/src/Plugin/migrate/destination/RollbackableConfig.php
modules/contrib/migmag/migmag_rollbackable/src/Plugin/migrate/destination/RollbackableDefaultLangcode.php
modules/contrib/migmag/migmag_rollbackable/src/Plugin/migrate/destination/RollbackablePerComponentEntityDisplay.php
modules/contrib/migmag/migmag_rollbackable/src/Plugin/migrate/destination/RollbackablePerComponentEntityFormDisplay.php
modules/contrib/migmag/migmag_rollbackable/src/Plugin/migrate/destination/RollbackableShortcutSetUsers.php
modules/contrib/migmag/migmag_rollbackable/src/Plugin/migrate/destination/RollbackableThemeSettings.php
modules/contrib/migmag/migmag_rollbackable/src/RollbackableInterface.php
modules/contrib/migmag/migmag_rollbackable/src/Traits/RollbackableConnectionTrait.php
modules/contrib/migmag/migmag_rollbackable/src/Traits/RollbackableDataTrait.php
modules/contrib/migmag/migmag_rollbackable/src/Traits/RollbackableFlagTrait.php
modules/contrib/migmag/migmag_rollbackable/src/Traits/RollbackableTargetTrait.php
modules/contrib/migmag/migmag_rollbackable/src/Traits/RollbackableTrait.php
modules/contrib/migmag/migmag_rollbackable/tests/src/Kernel/RollbackableColorTest.php
modules/contrib/migmag/migmag_rollbackable/tests/src/Kernel/RollbackableConfigTest.php
modules/contrib/migmag/migmag_rollbackable/tests/src/Kernel/RollbackableDefaultLangcodeTest.php
modules/contrib/migmag/migmag_rollbackable/tests/src/Kernel/RollbackableDestinationTestBase.php
modules/contrib/migmag/migmag_rollbackable/tests/src/Kernel/RollbackableDisplayComponentTestBase.php
modules/contrib/migmag/migmag_rollbackable/tests/src/Kernel/RollbackablePerComponentEntityDisplayTest.php
modules/contrib/migmag/migmag_rollbackable/tests/src/Kernel/RollbackablePerComponentEntityFormDisplayTest.php
modules/contrib/migmag/migmag_rollbackable/tests/src/Kernel/RollbackableShortcutSetUsersTest.php
modules/contrib/migmag/migmag_rollbackable/tests/src/Kernel/RollbackableThemeSettingsTest.php
modules/contrib/migmag/src/Utility/MigMagArrayUtility.php
modules/contrib/migmag/src/Utility/MigMagMigrationUtility.php
modules/contrib/migmag/src/Utility/MigMagSourceUtility.php
modules/contrib/migmag/tests/modules/migmag_missing_plugins/migmag_missing_plugins.module
modules/contrib/migmag/tests/modules/migmag_predictable_uuid/src/MigmagPredictableUuidServiceProvider.php
modules/contrib/migmag/tests/modules/migmag_predictable_uuid/src/PredictableUuid.php
modules/contrib/migmag/tests/src/Functional/MigMagCoreMigrationTestBase.php
modules/contrib/migmag/tests/src/Functional/MigMagExportTraitBrokenMigrationTest.php
modules/contrib/migmag/tests/src/Functional/MigMagExportTraitProceduralTest.php
modules/contrib/migmag/tests/src/Functional/MigMagExportTraitWithProviderTest.php
modules/contrib/migmag/tests/src/Functional/MigMagFixtureIsUpToDateTest.php
modules/contrib/migmag/tests/src/Functional/MigMagUpgrade7Test.php
modules/contrib/migmag/tests/src/Kernel/MigMagKernelTestDxTraitTest.php
modules/contrib/migmag/tests/src/Kernel/MigMagMigrationTestDatabaseTraitTest.php
modules/contrib/migmag/tests/src/Kernel/MigMagNativeMigrateSqlTestBase.php
modules/contrib/migmag/tests/src/Kernel/MigMagNativeMigrateSqlTestBaseTest.php
modules/contrib/migmag/tests/src/Kernel/MigmagPredictableUuidTest.php
modules/contrib/migmag/tests/src/Traits/CoreCompatibilityTrait.php
modules/contrib/migmag/tests/src/Traits/MigMagExportTrait.php
modules/contrib/migmag/tests/src/Traits/MigMagKernelTestDxTrait.php
modules/contrib/migmag/tests/src/Traits/MigMagMigrationTestDatabaseTrait.php
modules/contrib/migmag/tests/src/Unit/MigMagArrayUtilityTest.php
modules/contrib/migmag/tests/src/Unit/MigMagKernelTestDxTraitTest.php
modules/contrib/migmag/tests/src/Unit/MigMagMigrationUtilityTest.php

36 files with changes
=====================

1) modules/contrib/migmag/tests/src/Traits/MigMagKernelTestDxTrait.php:88

    ---------- begin diff ----------
@@ @@
    * Basically, this will (should) return the same sorted migration ID list
    * that Migrate Drupal UI executes.
    *
-   * @param \Drupal\Core\Database\Connection|null $source_connection
+   * @param Connection|null $source_connection
    *   Database connection to the source database. Optional. If this argument
    *   isn't specified, then the method will use '$this->sourceDatabase'.
    *
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/migmag/tests/src/Traits/MigMagExportTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migmag\Traits;

+use Drupal\Core\Extension\MissingDependencyException;
 use Drupal\Component\Serialization\Json;
 use Drupal\Component\Utility\Variable;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
@@ @@
    *
    * @requires module eme
    *
-   * @throws \Drupal\Core\Extension\MissingDependencyException
+   * @throws MissingDependencyException
    *   Thrown if the EME module is not available.
-   * @throws \PHPUnit\Framework\ExpectationFailedException
+   * @throws ExpectationFailedException
    *   Thrown when the export throws an exception.
    */
   protected function doExport($destination) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/migmag/tests/src/Kernel/MigMagNativeMigrateSqlTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migmag\Kernel;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\Core\Database\Connection;
 use Drupal\Core\Cache\MemoryCounterBackend;
 use Drupal\Core\Database\Database;
 use Drupal\migrate\Plugin\MigrateDestinationInterface;
@@ @@
  */
 abstract class MigMagNativeMigrateSqlTestBase extends MigrateSqlSourceTestBase {

+  use ProphecyTrait;
   use MigMagMigrationTestDatabaseTrait;

   /**
    * The source database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $sourceDatabase;

@@ @@

     $i = 0;
     $actual_data = [];
-    /** @var \Drupal\migrate\Row $row */
+    /** @var Row $row */
     foreach ($plugin as $row) {
       $i++;
       $this->assertInstanceOf(Row::class, $row);
@@ @@
   /**
    * Tests the cacheablility of the given source plugin.
    *
-   * @param \Drupal\migrate\Plugin\MigrateSourceInterface $plugin
+   * @param MigrateSourceInterface $plugin
    *   The source plugin instance.
    * @param int $expected_count
    *   The expected source record count.
@@ @@
    *   The expected cache key (if any). Defaults to NULL.
    */
   protected function assertPluginCountCacheability(MigrateSourceInterface $plugin, int $expected_count, ?string $expected_cache_key) {
-    /** @var \Drupal\Core\Cache\MemoryCounterBackend $cache * */
+    /** @var MemoryCounterBackend $cache * */
     $cache = \Drupal::cache('migrate');
     if (!is_callable([$cache, 'getCounter'])) {
       return;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/migmag/tests/src/Kernel/MigMagMigrationTestDatabaseTraitTest.php:235

    ---------- begin diff ----------
@@ @@
   /**
    * A source DB connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   public $sourceDatabase;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/migmag/tests/src/Functional/MigMagFixtureIsUpToDateTest.php:90

    ---------- begin diff ----------
@@ @@

   /**
    * Tests whether the committed content exports fixtures are up to date.
+   * @doesNotPerformAssertions
    */
   public function testContentExportFixtureIsUpToDate() {
     if (Database::getConnection()->driver() === 'sqlite') {
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/migmag/tests/src/Functional/MigMagExportTraitProceduralTest.php:21

    ---------- begin diff ----------
@@ @@
    * Executes the test of Drupal 7 migration and compares output with the prev.
    *
    * @depends testDrupal7MigrationInitial
+   * @doesNotPerformAssertions
    */
   public function testDrupal7MigrationAgainAndCompare() {
     $this->executeDrupal7Migration();
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/migmag/tests/src/Functional/MigMagExportTraitBrokenMigrationTest.php:40

    ---------- begin diff ----------
@@ @@
    * "^6.5 || ^7". PHPUnit 6|7 aren't able to execute test based on the declared
    * dependencies if a method's dependencies are inherited. This is why we have
    * to repeat this test method.
+   * @doesNotPerformAssertions
    */
   public function testDrupal7MigrationInitial() {
     parent::testDrupal7MigrationInitial();
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/migmag/tests/modules/migmag_predictable_uuid/src/PredictableUuid.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * Constructs a UuidTestGenerator instance.
    *
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
    */
   public function __construct(StateInterface $state, FileSystemInterface $file_system) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/migmag/src/Utility/MigMagSourceUtility.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\migmag\Utility;

+use Drupal\migrate\Plugin\MigrateSourceInterface;
+use Drupal\migrate\Plugin\RequirementsInterface;
 /**
  * Utility for migration source plugins.
  */
@@ @@
    * @param string|array $source_plugin
    *   The source plugin ID, or a full source plugin configuration.
    *
-   * @return \Drupal\migrate\Plugin\MigrateSourceInterface|\Drupal\migrate\Plugin\RequirementsInterface
+   * @return MigrateSourceInterface|RequirementsInterface
    *   The fully initialized source plugin.
    */
   public static function getSourcePlugin($source_plugin) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/migmag/migmag_rollbackable/tests/src/Kernel/RollbackableShortcutSetUsersTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migmag_rollbackable\Kernel;

+use Drupal\user\UserInterface;
 use Drupal\migrate\MigrateExecutable;
 use Drupal\shortcut\Entity\ShortcutSet;
 use Drupal\Tests\user\Traits\UserCreationTrait;
@@ @@
   /**
    * The user whose shortcut set migration is tested.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $testUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/migmag/migmag_rollbackable/tests/src/Kernel/RollbackableDisplayComponentTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migmag_rollbackable\Kernel;

+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;

 /**
@@ @@
    * @param string $view_mode
    *   The view mode of the display.
    *
-   * @return \Drupal\Core\Entity\Display\EntityFormDisplayInterface|\Drupal\Core\Entity\Display\EntityViewDisplayInterface
+   * @return EntityFormDisplayInterface|EntityViewDisplayInterface
    *   The entity form- or view display entity. It might be either a new entity,
    *   or it also might be disabled.
    *
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/migmag/migmag_rollbackable/tests/src/Kernel/RollbackableDestinationTestBase.php:50

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the base migration for the actual test.
    *
-   * @return \Drupal\migrate\Plugin\MigrationInterface
+   * @return MigrationInterface
    *   The base migration for the actual test.
    */
   abstract protected function baseMigration();
@@ @@
   /**
    * Returns a subsequent migration for the actual test.
    *
-   * @return \Drupal\migrate\Plugin\MigrationInterface
+   * @return MigrationInterface
    *   Subsequent migration for the actual test.
    */
   abstract protected function subsequentMigration();
@@ @@
   /**
    * Returns the base translation migration for the actual test.
    *
-   * @return \Drupal\migrate\Plugin\MigrationInterface
+   * @return MigrationInterface
    *   The base migration for the actual test.
    */
   abstract protected function baseTranslationMigration();
@@ @@
   /**
    * Returns a subsequent translation migration for the actual test.
    *
-   * @return \Drupal\migrate\Plugin\MigrationInterface
+   * @return MigrationInterface
    *   Subsequent migration for the actual test.
    */
   abstract protected function subsequentTranslationMigration();
@@ @@
    * @param array $migration_plugin_definition
    *   The migration plugin definition.
    *
-   * @return \Drupal\migrate\Plugin\MigrationInterface
+   * @return MigrationInterface
    *   A migration plugin instance created form the given definition.
    */
   protected function getMigrationPluginInstance(array $migration_plugin_definition) {
@@ @@
   /**
    * Creates a migrate executable from the given migration plugin instance.
    *
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The migration plugin instance.
    *
-   * @return \Drupal\migrate\MigrateExecutable
+   * @return MigrateExecutable
    *   A migration plugin instance created form the given definition.
    */
   protected function getMigrateExecutable(MigrationInterface $migration) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/migmag/migmag_rollbackable/src/Traits/RollbackableTargetTrait.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Determines the target ID from the given destination IDs or migration row.
    *
-   * @param \Drupal\migrate\Row|array $row_or_destination_ids
+   * @param Row|array $row_or_destination_ids
    *   A migration row or an array of the destination IDs.
    *
    * @return string
@@ @@
   /**
    * Determines the component from the given destination IDs or migration row.
    *
-   * @param \Drupal\migrate\Row|array $row_or_destination_ids
+   * @param Row|array $row_or_destination_ids
    *   A migration row or an array of the destination IDs.
    *
    * @return string
@@ @@
   /**
    * Determines the language code of the actual target.
    *
-   * @param \Drupal\migrate\Row|array $row_or_destination_ids
+   * @param Row|array $row_or_destination_ids
    *   A migration row or an array of the destination IDs.
    *
    * @return string
@@ @@
   /**
    * Returns the previous value of the target before the actual migration.
    *
-   * @param \Drupal\migrate\Row $row
+   * @param Row $row
    *   The processed migration row.
    * @param string $target_object_id
    *   The ID of the target (object).
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/migmag/migmag_rollbackable/src/Traits/RollbackableConnectionTrait.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\migmag_rollbackable\Traits;

+use Drupal\Core\Database\Connection;
 /**
  * Trait for getting the DB connection where rollback data is stored.
  */
@@ @@
   /**
    * The database connection where rollback data and states are stored.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $rollbackDataConnection;

@@ @@
   /**
    * Returns the database connection where rollback data is stored.
    *
-   * @return \Drupal\Core\Database\Connection
+   * @return Connection
    *   The database connection where rollback data is stored.
    */
   protected function getConnection() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


15) modules/contrib/migmag/migmag_rollbackable/src/Plugin/migrate/destination/RollbackableDefaultLangcode.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\migmag_rollbackable\Plugin\migrate\destination;

+use Drupal\Core\Config\StorableConfigBase;
 use Drupal\migmag_rollbackable\Traits\RollbackableTrait;
 use Drupal\language\Plugin\migrate\destination\DefaultLangcode;
 use Drupal\migrate\Row;
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\Core\Config\StorableConfigBase
+   * @return StorableConfigBase
    *   The target object (a config).
    */
   protected function getTargetObject(string $target_object_id, string $langcode = '') {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/migmag/migmag_rollbackable/src/Plugin/migrate/destination/RollbackableComponentEntityDisplayBase.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\migmag_rollbackable\Plugin\migrate\destination;

+use Drupal\Core\Entity\Display\EntityDisplayInterface;
 use Drupal\migmag_rollbackable\Traits\RollbackableTrait;
 use Drupal\migrate\Plugin\migrate\destination\ComponentEntityDisplayBase;
 use Drupal\migrate\Row;
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\Core\Entity\Display\EntityDisplayInterface
+   * @return EntityDisplayInterface
    *   An entity display object.
    */
   protected function getTargetObject(string $target_object_id, string $langcode = '') {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/migmag/migmag_process/tests/src/Unit/Plugin/MigMagUuidGenerateTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migmag_process\Unit\Plugin;

+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Component\Uuid\UuidInterface;
 use Drupal\migmag_process\Plugin\migrate\process\MigMagUuidGenerate;
 use Drupal\Tests\migrate\Unit\process\MigrateProcessTestCase;
@@ @@
   /**
    * The UUID service mock.
    *
-   * @var \Drupal\Component\Uuid\UuidInterface|\PHPUnit\Framework\MockObject\MockObject
+   * @var UuidInterface|MockObject
    */
   protected $uuidGenerator;

@@ @@
   protected function setUp(): void {
     parent::setUp();

-    $this->uuidGenerator = $this->getMockBuilder(UuidInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->uuidGenerator = $this->createMock(UuidInterface::class);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/migmag/migmag_process/tests/src/Unit/Plugin/MigMagLookupCoreCompatibilityTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migmag_process\Unit\Plugin;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Database\Schema;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
@@ @@
  */
 class MigMagLookupCoreCompatibilityTest extends MigrationLookupTest {

+  use ProphecyTrait;
   /**
    * The prophecy of the migration plugin manager service.
    *
-   * @var \Prophecy\Prophecy\ObjectProphecy
+   * @var ObjectProphecy
    */
   protected $migrationManager;

@@ @@
    *
    * @dataProvider successfulLookupDataProvider
    *
-   * @throws \Drupal\migrate\MigrateSkipProcessException
+   * @throws MigrateSkipProcessException
    */
   public function testSuccessfulLookup(array $source_id_values, array $destination_id_values, $source_value, $expected_value) {
     $migration_plugin = $this->prophesize(MigrationInterface::class);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/migmag/migmag_process/tests/src/Unit/Plugin/MigMagLoggerLogTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migmag_process\Unit\Plugin;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Core\Logger\RfcLogLevel;
 use Drupal\migmag_process\Plugin\migrate\process\MigMagLoggerLog;
@@ @@
   const DEFAULT_SOURCE_ID_VALUES = [
     'id' => 'source_row_id',
   ];
+  use ProphecyTrait;

   /**
    * Storage for the messages logged during testing.
@@ @@
   /**
    * A LoggerChannelInterface prophecy.
    *
-   * @var \Prophecy\Prophecy\ObjectProphecy
+   * @var ObjectProphecy
    */
   protected $loggerChannel;

@@ @@
   /**
    * A MigrationInterface prophecy.
    *
-   * @var \Prophecy\Prophecy\ObjectProphecy
+   * @var ObjectProphecy
    */
   protected $migration;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/migmag/migmag_process/tests/src/Unit/Plugin/MigMagCompareTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migmag_process\Unit\Plugin;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\migmag_process\Plugin\migrate\process\MigMagCompare;
 use Drupal\migrate\MigrateException;
 use Drupal\migrate\MigrateExecutableInterface;
@@ @@
  */
 class MigMagCompareTest extends MigrateTestCase {

+  use ProphecyTrait;
   /**
    * Tests the transformation of the provided values.
    *
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/migmag/migmag_process/tests/src/Unit/MigMagMigrateStubTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migmag_process\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
  */
 class MigMagMigrateStubTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The plugin manager prophecy.
    *
-   * @var \Prophecy\Prophecy\ObjectProphecy
+   * @var ObjectProphecy
    */
   protected $migrationPluginManager;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/migmag/migmag_process/tests/src/Kernel/Plugin/MigMagTryTest.php:54

    ---------- begin diff ----------
@@ @@
   /**
    * Migration plugin instance used for the actual test.
    *
-   * @var \Drupal\migrate\Plugin\MigrationInterface
+   * @var MigrationInterface
    */
   protected $migration;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/migmag/migmag_process/tests/src/Kernel/Plugin/MigMagTargetBundleTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migmag_process\Kernel\Plugin;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\migmag_process\Plugin\migrate\process\MigMagTargetBundle;
 use Drupal\migrate\MigrateExecutable;
 use Drupal\migrate\Plugin\MigrationInterface;
@@ @@
  */
 class MigMagTargetBundleTest extends MigrateTestBase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    *
@@ @@
    *   An array of migration IDs to execute before testing transform.
    *
    * @dataProvider providerTestPluginWithCommentTypes
+   * @doesNotPerformAssertions
    */
   public function testPluginWithCommentTypes($value, $row_data, $expected_transformed_value, array $plugin_configuration, $migrations_to_execute = NULL) {
     $this->enableModules([
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/migmag/migmag_process/tests/src/Kernel/Plugin/MigMagLookupTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migmag_process\Kernel\Plugin;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\Utility\Variable;
 use Drupal\Core\Database\Database;
 use Drupal\Core\Extension\ModuleInstallerInterface;
@@ @@
  */
 class MigMagLookupTest extends MigrateTestBase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    *
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/migmag/migmag_process/tests/src/Kernel/Plugin/MigMagGetEntityPropertyTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migmag_process\Kernel\Plugin;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\TypedData\TranslatableInterface;
@@ @@
  */
 class MigMagGetEntityPropertyTest extends MigrateTestBase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ @@
    *   Keys should be entity type IDs, values should be an array of entity
    *   values.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   When any of the test entities cannot be saved.
    */
   protected function createTestEntities(array $test_entity_values): void {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/migmag/migmag_process/tests/src/Kernel/MigMagLookupInstallTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migmag_process\Kernel;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\migmag_process\MigMagMigrateStub;
 use Drupal\migmag_process\Plugin\migrate\process\MigMagLookup;
@@ @@
  */
 class MigMagLookupInstallTest extends KernelTestBase {

+  use ProphecyTrait;
   /**
    * Tests installation of Migrate Magician Process without Migrate module.
    */
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


27) modules/contrib/migmag/migmag_process/src/Plugin/migrate/process/MigMagUuidGenerate.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * The UUID service.
    *
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuidGenerator;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid_generator
+   * @param UuidInterface $uuid_generator
    *   The UUID service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, UuidInterface $uuid_generator) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/migmag/migmag_process/src/Plugin/migrate/process/MigMagTry.php:49

    ---------- begin diff ----------
@@ @@
   /**
    * The migration being processed.
    *
-   * @var \Drupal\migrate\Plugin\MigrationInterface
+   * @var MigrationInterface
    */
   protected $migration;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The actually processed migration.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, MigrationInterface $migration) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/migmag/migmag_process/src/Plugin/migrate/process/MigMagTargetBundle.php:113

    ---------- begin diff ----------
@@ @@
   /**
    * The migration being executed.
    *
-   * @var \Drupal\migrate\Plugin\MigrationInterface
+   * @var MigrationInterface
    */
   protected $migration;

@@ @@
   /**
    * The migrate lookup service.
    *
-   * @var \Drupal\migrate\MigrateLookupInterface
+   * @var MigrateLookupInterface
    */
   protected $migrateLookup;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The migration plugin manager.
    *
-   * @var \Drupal\migrate\Plugin\MigrationPluginManagerInterface
+   * @var MigrationPluginManagerInterface
    */
   protected $migrationPluginManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The Migration the plugin is being used in.
-   * @param \Drupal\migrate\MigrateLookupInterface $migrate_lookup
+   * @param MigrateLookupInterface $migrate_lookup
    *   The migrate lookup service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\migrate\Plugin\MigrationPluginManagerInterface $migration_plugin_manager
+   * @param MigrationPluginManagerInterface $migration_plugin_manager
    *   The migration plugin manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, MigrationInterface $migration, MigrateLookupInterface $migrate_lookup, EntityTypeManagerInterface $entity_type_manager, MigrationPluginManagerInterface $migration_plugin_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/migmag/migmag_process/src/Plugin/migrate/process/MigMagLookup.php:128

    ---------- begin diff ----------
@@ @@
   /**
    * The migrate stub service.
    *
-   * @var \Drupal\migmag_process\MigMagMigrateStub
+   * @var MigMagMigrateStub
    */
   protected $migrateStub;

@@ @@
   /**
    * The migration plugin manager service.
    *
-   * @var \Drupal\migrate\Plugin\MigrationPluginManagerInterface
+   * @var MigrationPluginManagerInterface
    */
   protected $migrationPluginManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The Migration the plugin is being used in.
-   * @param \Drupal\migrate\MigrateLookupInterface $migrate_lookup
+   * @param MigrateLookupInterface $migrate_lookup
    *   The migrate lookup service.
-   * @param \Drupal\migmag_process\MigMagMigrateStub $migrate_stub
+   * @param MigMagMigrateStub $migrate_stub
    *   The migrate stub service.
-   * @param \Drupal\migrate\Plugin\MigrationPluginManagerInterface $migration_plugin_manager
+   * @param MigrationPluginManagerInterface $migration_plugin_manager
    *   The migration plugin's manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, MigrationInterface $migration, MigrateLookupInterface $migrate_lookup, MigMagMigrateStub $migrate_stub, MigrationPluginManagerInterface $migration_plugin_manager) {
@@ @@
    * @return array|null
    *   The destination IDs of the stub, or NULL if it cannot be created.
    *
-   * @throws \Drupal\migrate\MigrateException
-   * @throws \Drupal\migrate\MigrateSkipRowException
+   * @throws MigrateException
+   * @throws MigrateSkipRowException
    */
   protected function getDestinationIds(array $source_id_values, array $stub_default_values = []): ?array {
     $destination_ids = NULL;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/migmag/migmag_process/src/Plugin/migrate/process/MigMagLoggerLog.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * The actual migration plugin instance.
    *
-   * @var \Drupal\migrate\Plugin\MigrationInterface
+   * @var MigrationInterface
    */
   protected $migration;

@@ @@
   /**
    * The logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
    *   The plugin ID.
    * @param array $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The actual migration plugin instance.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger_channel
+   * @param LoggerChannelInterface $logger_channel
    *   The logger channel.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, MigrationInterface $migration, LoggerChannelInterface $logger_channel) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/migmag/migmag_process/src/Plugin/migrate/process/MigMagGetEntityProperty.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\migmag_process\Plugin\migrate\process;

+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\RevisionableStorageInterface;
 use Drupal\Core\Field\FieldItemListInterface;
@@ @@
   /**
    * The storage of the entity (fetched from the plugin configuration).
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $entityStorage;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The migration plugin's manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityStorageInterface $storage) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   If the specified entity type ID isn't available.
    */
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition, MigrationInterface $migration = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/migmag/migmag_process/src/MigMagMigrateStub.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\migmag_process;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Database\DatabaseExceptionWrapper;
 use Drupal\migrate\MigrateException;
@@ @@
    *   An array of destination ids for the new stub, keyed by destination id
    *   key, or false if the stub failed.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\migrate\MigrateException
+   * @throws PluginException
+   * @throws PluginNotFoundException
+   * @throws MigrateException
    * @throws \LogicException
    */
   public function createStub($migration_id, array $source_ids, array $default_values = [], $key_by_destination_ids = NULL, bool $create_only_valid = FALSE) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/migmag/migmag_process/migmag_process_lookup_replace/tests/src/Kernel/MigMagProcessLookupReplaceTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migmag_process_lookup_replace\Kernel;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\migmag_process\Plugin\migrate\process\MigMagLookup;
 use Drupal\migrate\Plugin\MigratePluginManagerInterface;
@@ @@
  */
 class MigMagProcessLookupReplaceTest extends KernelTestBase {

+  use ProphecyTrait;
   /**
    * Tests the installation of Migrate Magician Forced Lookup Replace.
    */
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


35) modules/contrib/migmag/migmag_menu_link_migrate/src/MigMagMenuLinkMigrate.php:299

    ---------- begin diff ----------
@@ @@
   /**
    * Prepares the migration of menu link stubs.
    *
-   * @param \Drupal\migrate\Row $row
+   * @param Row $row
    *   The row being imported.
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The current migration.
    */
   public static function prepareMenuLinkStubMigration(Row $row, MigrationInterface $migration): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


36) modules/contrib/migmag/migmag_callback_upgrade/tests/src/Unit/MigMagCallbackTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migmag_callback_upgrade\Unit\process;

+use Drupal\migrate\Plugin\MigrateProcessInterface;
 use Drupal\migrate\MigrateException;
 use Drupal\Tests\migrate\Unit\process\MigrateProcessTestCase;
 use PHPUnit\Util\Test;
@@ @@
   /**
    * Instantiates the plugin being tested.
    *
-   * @return \Drupal\migrate\Plugin\MigrateProcessInterface
+   * @return MigrateProcessInterface
    *   The plugin being tested.
    */
   protected function createPlugin(array $plugin_configuration, string $plugin_id, array $plugin_definition = []) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 36 files have been changed by Rector                                      

