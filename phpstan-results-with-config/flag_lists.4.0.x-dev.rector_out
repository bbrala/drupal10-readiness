modules/contrib/flag_lists/flag_list_item.page.inc
modules/contrib/flag_lists/flag_lists.install
modules/contrib/flag_lists/flag_lists.module
modules/contrib/flag_lists/flag_lists.tokens.inc
modules/contrib/flag_lists/flagging_collection.page.inc
modules/contrib/flag_lists/modules/flag_lists_actions/flag_lists_actions.install
modules/contrib/flag_lists/modules/flag_lists_actions/flag_lists_actions.module
modules/contrib/flag_lists/modules/flag_lists_actions/src/Controller/FlagListsActionsController.php
modules/contrib/flag_lists/modules/flag_lists_actions/src/FlagListsActionsActionListBuilder.php
modules/contrib/flag_lists/src/Access/FlagListItemAccess.php
modules/contrib/flag_lists/src/Access/FlagListItemAccessControlHandler.php
modules/contrib/flag_lists/src/Access/FlagListsAccessCheck.php
modules/contrib/flag_lists/src/Access/FlaggingCollectionAccessControlHandler.php
modules/contrib/flag_lists/src/Access/UnFlagListsAccessCheck.php
modules/contrib/flag_lists/src/Controller/ActionLinkController.php
modules/contrib/flag_lists/src/Controller/ActionLinkHelper.php
modules/contrib/flag_lists/src/Controller/ActionLinkNoJsController.php
modules/contrib/flag_lists/src/Controller/FlaggingCollectionController.php
modules/contrib/flag_lists/src/Entity/FlagForList.php
modules/contrib/flag_lists/src/Entity/FlagForListInterface.php
modules/contrib/flag_lists/src/Entity/FlagListItem.php
modules/contrib/flag_lists/src/Entity/FlagListItemInterface.php
modules/contrib/flag_lists/src/Entity/FlagListItemViewsData.php
modules/contrib/flag_lists/src/Entity/FlaggingCollection.php
modules/contrib/flag_lists/src/Entity/FlaggingCollectionInterface.php
modules/contrib/flag_lists/src/Entity/FlaggingCollectionType.php
modules/contrib/flag_lists/src/Entity/FlaggingCollectionTypeInterface.php
modules/contrib/flag_lists/src/Entity/FlaggingCollectionViewsData.php
modules/contrib/flag_lists/src/EventSubscriber/FlagForListSubscriber.php
modules/contrib/flag_lists/src/FlagForListHtmlRouteProvider.php
modules/contrib/flag_lists/src/FlagForListListBuilder.php
modules/contrib/flag_lists/src/FlagListItemHtmlRouteProvider.php
modules/contrib/flag_lists/src/FlagListItemListBuilder.php
modules/contrib/flag_lists/src/FlagListItemTranslationHandler.php
modules/contrib/flag_lists/src/FlagListsFlagLinkBuilder.php
modules/contrib/flag_lists/src/FlagListsFlagListBuilder.php
modules/contrib/flag_lists/src/FlagListsService.php
modules/contrib/flag_lists/src/FlagListsServiceInterface.php
modules/contrib/flag_lists/src/FlagTracker.php
modules/contrib/flag_lists/src/FlaggingCollectionHtmlRouteProvider.php
modules/contrib/flag_lists/src/FlaggingCollectionListBuilder.php
modules/contrib/flag_lists/src/FlaggingCollectionStorage.php
modules/contrib/flag_lists/src/FlaggingCollectionStorageInterface.php
modules/contrib/flag_lists/src/FlaggingCollectionTranslationHandler.php
modules/contrib/flag_lists/src/FlaggingCollectionTypeHtmlRouteProvider.php
modules/contrib/flag_lists/src/FlaggingCollectionTypeListBuilder.php
modules/contrib/flag_lists/src/Form/FlagForListDeleteForm.php
modules/contrib/flag_lists/src/Form/FlagForListForm.php
modules/contrib/flag_lists/src/Form/FlagListItemDeleteForm.php
modules/contrib/flag_lists/src/Form/FlagListItemForm.php
modules/contrib/flag_lists/src/Form/FlagListsSettingForm.php
modules/contrib/flag_lists/src/Form/FlaggingCollectionDeleteForm.php
modules/contrib/flag_lists/src/Form/FlaggingCollectionForm.php
modules/contrib/flag_lists/src/Form/FlaggingCollectionRevisionDeleteForm.php
modules/contrib/flag_lists/src/Form/FlaggingCollectionRevisionRevertForm.php
modules/contrib/flag_lists/src/Form/FlaggingCollectionRevisionRevertTranslationForm.php
modules/contrib/flag_lists/src/Form/FlaggingCollectionSettingsForm.php
modules/contrib/flag_lists/src/Form/FlaggingCollectionTypeDeleteForm.php
modules/contrib/flag_lists/src/Form/FlaggingCollectionTypeForm.php
modules/contrib/flag_lists/src/Permissions/FlagListsPermissionHandler.php
modules/contrib/flag_lists/src/Plugin/ActionLink/AJAXactionLink.php
modules/contrib/flag_lists/src/Plugin/migrate/source/D7FlagForList.php
modules/contrib/flag_lists/src/Plugin/migrate/source/D7FlagListItems.php
modules/contrib/flag_lists/src/Plugin/migrate/source/D7FlagListsFlagging.php
modules/contrib/flag_lists/src/Plugin/migrate/source/D7FlaggingCollections.php
modules/contrib/flag_lists/src/Plugin/views/field/FlaggingCollectionBulkForm.php
modules/contrib/flag_lists/tests/src/Functional/LoadTest.php
modules/contrib/flag_lists/tests/src/Unit/FlagForListTest.php

36 files with changes
=====================

1) modules/contrib/flag_lists/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flag_lists\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
@@ @@
    */
   public function testLoad() {
     $this->drupalGet(Url::fromRoute('<front>'));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/flag_lists/src/Plugin/views/field/FlaggingCollectionBulkForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flag_lists\Plugin\views\field;

+use Drupal\flag_lists\FlagListsService;
+use Drupal\flag\FlagService;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
@@ @@
   /**
    * Flag Lists Service injected.
    *
-   * @var \Drupal\flag_lists\FlagListsService
+   * @var FlagListsService
    */
   private $flagListsService;

@@ @@
   /**
    * Flag Service injected.
    *
-   * @var \Drupal\flag\FlagService
+   * @var FlagService
    */
   private $flagService;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/flag_lists/src/Permissions/FlagListsPermissionHandler.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The Flag Lists Service.
    *
-   * @var \Drupal\flag_lists\FlagListsServiceInterface
+   * @var FlagListsServiceInterface
    */
   protected $flagListsService;

@@ @@
   /**
    * Constructs a new PermissionHandler.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation.
-   * @param \Drupal\Core\Controller\ControllerResolverInterface $controller_resolver
+   * @param ControllerResolverInterface $controller_resolver
    *   The controller resolver.
-   * @param \Drupal\flag_lists\FlagListsServiceInterface $flag_lists_service
+   * @param FlagListsServiceInterface $flag_lists_service
    *   The Flag Lists Service.
    */
   public function __construct(ModuleHandlerInterface $module_handler, TranslationInterface $string_translation, ControllerResolverInterface $controller_resolver, FlagListsServiceInterface $flag_lists_service) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/flag_lists/src/Form/FlaggingCollectionSettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/flag_lists/src/Form/FlaggingCollectionRevisionRevertTranslationForm.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Constructs a new FlaggingCollectionRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Flagging collection storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager) {
@@ @@
   protected function prepareRevertedRevision(FlaggingCollectionInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');

-    /** @var \Drupal\flag_lists\Entity\FlaggingCollectionInterface $default_revision */
+    /** @var FlaggingCollectionInterface $default_revision */
     $latest_revision = $this->FlaggingCollectionStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/flag_lists/src/Form/FlaggingCollectionRevisionRevertForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The Flagging collection revision.
    *
-   * @var \Drupal\flag_lists\Entity\FlaggingCollectionInterface
+   * @var FlaggingCollectionInterface
    */
   protected $revision;

@@ @@
   /**
    * The Flagging collection storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $flaggingCollectionStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new FlaggingCollectionRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Flagging collection storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter) {
@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\flag_lists\Entity\FlaggingCollectionInterface $revision
+   * @param FlaggingCollectionInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\flag_lists\Entity\FlaggingCollectionInterface
+   * @return FlaggingCollectionInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(FlaggingCollectionInterface $revision, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/flag_lists/src/Form/FlaggingCollectionRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flag_lists\Form;

+use Drupal\flag_lists\Entity\FlaggingCollectionInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ @@
   /**
    * The Flagging collection revision.
    *
-   * @var \Drupal\flag_lists\Entity\FlaggingCollectionInterface
+   * @var FlaggingCollectionInterface
    */
   protected $revision;

@@ @@
   /**
    * The Flagging collection storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $flaggingCollectionStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Constructs a new FlaggingCollectionRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/flag_lists/src/Form/FlaggingCollectionForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flag_lists\Form;

+use Drupal\flag_lists\Entity\FlaggingCollection;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Entity\EntityFormInterface;
@@ @@
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\flag_lists\Entity\FlaggingCollection $entity */
+    /** @var FlaggingCollection $entity */
     $form = parent::buildForm($form, $form_state);

     $flaglistService = \Drupal::service('flaglists');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/flag_lists/src/Form/FlaggingCollectionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flag_lists\Form;

+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\ContentEntityDeleteForm;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->getEntity();
     $message = $this->getDeletionMessage();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/flag_lists/src/Form/FlagListsSettingForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The Cache Tags Invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidator
+   * @var CacheTagsInvalidator
    *   The cache tags handler.
    */
   protected $cacheTagsInvalidator;
@@ @@
   /**
    * The Entity Display Repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    *   The entity display repository.
    */
   protected $entityDisplayRepository;
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/flag_lists/src/Form/FlagListItemForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flag_lists\Form;

+use Drupal\flag_lists\Entity\FlaggingCollection;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\flag_lists\Entity\FlaggingCollection $entity */
+    /** @var FlaggingCollection $entity */
     $form = parent::buildForm($form, $form_state);

     return $form;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/flag_lists/src/Form/FlagListItemDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flag_lists\Form;

+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\ContentEntityDeleteForm;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->getEntity();
     $entity->delete();
     $message = $this->getDeletionMessage();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/flag_lists/src/FlaggingCollectionStorageInterface.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Gets a list of Flagging collection revision IDs for a collection.
    *
-   * @param \Drupal\flag_lists\Entity\FlaggingCollectionInterface $entity
+   * @param FlaggingCollectionInterface $entity
    *   The Flagging collection entity.
    *
    * @return int[]
@@ @@
   /**
    * Gets a list of revision IDs owned by a given user.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ @@
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\flag_lists\Entity\FlaggingCollectionInterface $entity
+   * @param FlaggingCollectionInterface $entity
    *   The Flagging collection entity.
    *
    * @return int
@@ @@
   /**
    * Unsets the language for all Flagging collection with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/flag_lists/src/FlaggingCollectionHtmlRouteProvider.php:51

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/flag_lists/src/FlagTracker.php:18

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   The form associative array.
-   * @param Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The formState array.
    */
   public static function save(array $form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form associative array.
-   * @param Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The formState array.
    * @param Drupal\flag_lists\FlagForList $flagTemplate
    *   The FlagForList to be update.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


16) modules/contrib/flag_lists/src/FlagListsService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flag_lists;

+use Drupal\flag_lists\Entity\FlaggingCollection;
+use Drupal\flag_lists\Entity\FlaggingCollectionType;
+use Drupal\flag_lists\Entity\FlagListItem;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Session\AccountInterface;

@@ @@
   /**
    * The current user injected into the service.
    *
-   * @var Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $currentUser;

@@ @@
   /**
    * The type Entity Type Manager injected into the service.
    *
-   * @var Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
   /**
    * Constructor.
    *
-   * @param Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
    */
   public function __construct(AccountInterface $current_user,
@@ @@
   /**
    * Get current user's Flagging Collections.
    *
-   * @return Drupal\flag_lists\Entity\FlaggingCollection[]
+   * @return FlaggingCollection[]
    *   An array of current User's Flagging Collections.
    */
   public function getUsersFlaggingCollections(
@@ @@
    * @param string $type
    *   The type, bundle, of the Flagging Collection.
    *
-   * @return Drupal\flag_lists\Entity\FlaggingCollection[]
+   * @return FlaggingCollection[]
    *   An array of the found Flagging Collections.
    */
   public function getAllFlaggingCollections($type = NULL) {
@@ @@
    *
    * NOT used nor tested!
    *
-   * @param Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The wanted user's account.
    * @param string $entity_type
    *   The wanted entity type.
@@ @@
    * @param string $flag_id
    *   The flag Id of the Flagging Collection to load.
    *
-   * @return Drupal\flag_lists\Entity\FlaggingCollection
+   * @return FlaggingCollection
    *   The loaded Flagging Collection.
    */
   public function getFlaggingCollectionById($flag_id) {
@@ @@
    * @param int[] $ids
    *   The Ids of the Flag For Lists to load.
    *
-   * @return Drupal\flag_lists\Entity\FlaggingCollection
+   * @return FlaggingCollection
    *   The loaded Flagging Collections.
    */
   protected function getFlaggingCollectionByIds(array $ids) {
@@ @@
    * @param string $type_id
    *   The Id of the Flagging Collection Type to load.
    *
-   * @return Drupal\flag_lists\Entity\FlaggingCollectionType
+   * @return FlaggingCollectionType
    *   The loaded Flagging Collection Type
    */
   public function getFlaggingCollectionTypeById($type_id) {
@@ @@
   /**
    * Load all Flagging Collection Types.
    *
-   * @return Drupal\flag_lists\Entity\FlaggingCollectionType
+   * @return FlaggingCollectionType
    *   The loaded Flagging Collection Type
    */
   public function getAllFlaggingCollectionTypes() {
@@ @@
    * @param int[] $ids
    *   The Flag List Item ids to load.
    *
-   * @return Drupal\flag_lists\Entity\FlagListItem[]
+   * @return FlagListItem[]
    *   An array of Flag List Items.
    */
   public function getFlagListItems(array $ids) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


17) modules/contrib/flag_lists/src/FlagListsFlagListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flag_lists;

+use Drupal\flag_lists\Entity\FlaggingCollection;
 use Drupal\Core\Config\Entity\ConfigEntityType;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
    *
    * The type Config Factory injected into the service.
    *
-   * @var Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    *   The Injected Config Factory.
    */
   protected $configFactory;
@@ @@
   /**
    * The Flag Lists service injected into the List Builder.
    *
-   * @var Drupal\flag_lists\FlagListsService
+   * @var FlagListsService
    *   The Injected Flag Lists Service.
    */
   protected $flagListsService;
@@ @@
    *
    * Constructor.
    *
-   * @param Drupal\Core\Config\Entity\ConfigEntityType $entity_type
+   * @param ConfigEntityType $entity_type
    *   The entity type involved.
-   * @param Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage.
-   * @param Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param Drupal\flag_lists\FlagListsService $flag_lists_service
+   * @param FlagListsService $flag_lists_service
    *   The Flag Lists Service.
    */
   public function __construct(ConfigEntityType $entity_type,
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\flag_lists\Entity\FlaggingCollection $entity */
-
+    /** @var FlaggingCollection $entity */
     $row['flagListUsage']['#markup'] = $this->t('-');
     $row['creator']['#markup'] = $this->t('-');
     $total = parent::buildRow($entity);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/flag_lists/src/FlagListsFlagLinkBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flag_lists;

+use Drupal\flag\FlagLinkBuilder;
 use Drupal\flag\FlagLinkBuilderInterface;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Url;
@@ @@
   /**
    * The original flag link builder.
    *
-   * @var \Drupal\flag\FlagLinkBuilder
+   * @var FlagLinkBuilder
    */
   protected $flagLinkBuilder;

@@ @@
   /**
    * The flag lists service.
    *
-   * @var \Drupal\flag_lists\FlagListsServiceInterface
+   * @var FlagListsServiceInterface
    */
   protected $flagListsService;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\flag\FlagLinkBuilderInterface $link_builder
+   * @param FlagLinkBuilderInterface $link_builder
    *   The original FlagLinkBuilder.
-   * @param \Drupal\flag_lists\FlagListsServiceInterface $flag_lists_service
+   * @param FlagListsServiceInterface $flag_lists_service
    *   The Flag Lists Service.
    */
   public function __construct(FlagLinkBuilderInterface $link_builder,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


19) modules/contrib/flag_lists/src/FlagListItemListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flag_lists;

+use Drupal\flag_lists\Entity\FlagListItem;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Link;
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\flag_lists\Entity\FlagListItem $entity */
+    /** @var FlagListItem $entity */
     $account = \Drupal::currentUser()->getAccount();
     $entity_id = $entity->getConnectedEntityId();
     $connectedEntity = \Drupal::entityTypeManager()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/flag_lists/src/EventSubscriber/FlagForListSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flag_lists\EventSubscriber;

+use Symfony\Contracts\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Drupal\Core\Messenger\MessengerTrait;
 use Drupal\flag\Event\FlagEvents;

@@ @@
   /**
    * This is called whenever the flag.entity_flagged event is dispatched.
    *
-   * @param Symfony\Component\EventDispatcher\Event $flag_event
+   * @param Event $flag_event
    *   The response event.
    */
   public function flagListsEntityFlagged(Event $flag_event) {
@@ @@
   /**
    * This is called whenever the flag.entity_unflagged event is dispatched.
    *
-   * @param Symfony\Component\EventDispatcher\Event $flag_events
+   * @param Event $flag_events
    *   The response events.
    */
   public function flagListsEntityUnflagged(Event $flag_events) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


21) modules/contrib/flag_lists/src/Entity/FlaggingCollectionInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flag_lists\Entity;

+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\RevisionLogInterface;
 use Drupal\Core\Entity\RevisionableInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
@@ @@
   /**
    * Gets the Flagging collection revision author.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity for the revision author.
    */
   public function getRevisionUser();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


22) modules/contrib/flag_lists/src/Controller/FlaggingCollectionController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flag_lists\Controller;

+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ @@
   /**
    * Generates an overview table of older revisions of a Flagging collection .
    *
-   * @param \Drupal\flag_lists\Entity\FlaggingCollectionInterface $flagging_collection
+   * @param FlaggingCollectionInterface $flagging_collection
    *   A Flagging collection  object.
    *
    * @return array
    *   An array as expected by drupal_render().
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function revisionOverview(FlaggingCollectionInterface $flagging_collection) {
     $account = $this->currentUser();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/flag_lists/src/Controller/ActionLinkNoJsController.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;

@@ @@
   /**
    * The flag lists service.
    *
-   * @var \Drupal\flag_lists\FlagListsServiceInterface
+   * @var FlagListsServiceInterface
    */
   protected $flagListsService;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\flag\FlagServiceInterface $flag
+   * @param FlagServiceInterface $flag
    *   The flag service.
-   * @param \Drupal\flag_lists\FlagListsServiceInterface $flag_lists
+   * @param FlagListsServiceInterface $flag_lists
    *   The flag lists service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(
@@ @@
   /**
    * Performs a flagging when called via a route.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
    * @param int $entity_id
    *   The flaggable entity ID.
@@ @@
    * @param string $flag_list
    *   The flag list from the link.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse|null
+   * @return RedirectResponse|null
    *   The response object, only if successful.
    *
    * @see \Drupal\flag\Plugin\Reload
    */
   public function flag(FlagInterface $flag, $entity_id, $flag_list) {
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $this->flagService->getFlaggableById($flag, $entity_id);

     try {
@@ @@
   /**
    * Performs a unflagging when called via a route.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
    * @param int $entity_id
    *   The flaggable entity ID.
@@ @@
    * @param string $flag_list
    *   The flag list from the link.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse|null
+   * @return RedirectResponse|null
    *   The response object, only if successful.
    *
    * @see \Drupal\flag\Plugin\Reload
    */
   public function unflag(FlagInterface $flag, $entity_id, $flag_list) {
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $this->flagService->getFlaggableById($flag, $entity_id);

     try {
@@ @@
   /**
    * Generates a response after the flag has been updated.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    * @param string $message
    *   The message to display.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The response object.
    */
   private function generateResponse(EntityInterface $entity, $message) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


24) modules/contrib/flag_lists/src/Controller/ActionLinkHelper.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\flag_lists\FlagListsServiceInterface $flag_lists
+   * @param FlagListsServiceInterface $flag_lists
    *   The flag lists service.
    */
   public function __construct(
@@ @@
   /**
    * Helper function for flag ActionLinks.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag to flag.
    * @param string $entity_id
    *   The entity id to add the flag list item to.
@@ @@
   /**
    * Helper function for unflag ActionLinks.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag to unflag.
    * @param string $entity_id
    *   The entity id to remove the flag list item from.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


25) modules/contrib/flag_lists/src/Controller/ActionLinkController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flag_lists\Controller;

+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\ReplaceCommand;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ @@
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\flag\FlagServiceInterface $flag
+   * @param FlagServiceInterface $flag
    *   The flag service.
-   * @param \Drupal\flag_lists\FlagListsServiceInterface $flag_lists
+   * @param FlagListsServiceInterface $flag_lists
    *   The flag lists service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The Renderer service.
    */
   public function __construct(
@@ @@
    *
    * In addition to this it also handles the creation of a FlagListItem.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
    * @param int $entity_id
    *   The flaggable entity ID.
@@ @@
    * @param string $flag_list
    *   The flag list from the link.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|null
+   * @return AjaxResponse|null
    *   The response object, only if successful.
    *
    * @see \Drupal\flag\Plugin\Reload
@@ @@
    * @see \Drupal\flag_lists\Entity\FlagListItem
    */
   public function flag(FlagInterface $flag, $entity_id, $flag_list) {
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $this->flagService->getFlaggableById($flag, $entity_id);

     try {
@@ @@
    * In addition to this it also handles the deletion of the
    * related FlagListItem's.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
    * @param int $entity_id
    *   The flaggable entity ID.
@@ @@
    * @param string $flag_list
    *   The flag list from the link.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|\Symfony\Component\HttpFoundation\RedirectResponse|null
+   * @return AjaxResponse|RedirectResponse|null
    *   The response object, only if successful.
    *
    * @see \Drupal\flag\Plugin\Reload
@@ @@
    * @see \Drupal\flag_lists\Entity\FlagListItem
    */
   public function unflag(FlagInterface $flag, $entity_id, $flag_list) {
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $this->flagService->getFlaggableById($flag, $entity_id);

     try {
@@ @@
    * The response is different from the Flag modules
    * response as we add the flagging collection Id as well.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    * @param string $flag_list
    *   The flag list from the link.
@@ @@
    * @param string $message
    *   (optional) The message to flash.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return AjaxResponse|RedirectResponse
    *   The response object.
    *
    * @see \Drupal\flag_lists\Entity\FlaggingCollection
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


26) modules/contrib/flag_lists/src/Access/UnFlagListsAccessCheck.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\flag\FlagServiceInterface $flag_service
+   * @param FlagServiceInterface $flag_service
    *   The flag service.
    */
   public function __construct(FlagServiceInterface $flag_service) {
@@ @@
   /**
    * Checks access to the 'unflag' action.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The parametrized route.
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


27) modules/contrib/flag_lists/src/Access/FlaggingCollectionAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flag_lists\Access;

+use Drupal\flag_lists\Entity\FlaggingCollectionInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\flag_lists\Entity\FlaggingCollectionInterface $entity */
+    /** @var FlaggingCollectionInterface $entity */
     switch ($operation) {
       case 'view':
         if ($account->id() == $entity->getOwner()->id()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/flag_lists/src/Access/FlagListsAccessCheck.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\flag\FlagServiceInterface $flag_service
+   * @param FlagServiceInterface $flag_service
    *   The flag service.
    */
   public function __construct(FlagServiceInterface $flag_service) {
@@ @@
   /**
    * Checks access to the 'flag' action.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The parametrized route.
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


29) modules/contrib/flag_lists/src/Access/FlagListItemAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flag_lists\Access;

+use Drupal\flag_lists\Entity\FlagListItemInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\flag_lists\Entity\FlagListItemInterface $entity */
+    /** @var FlagListItemInterface $entity */
     switch ($operation) {
       case 'view':
         if ($account->id() == $entity->getOwner()->id()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/flag_lists/src/Access/FlagListItemAccess.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flag_lists\Access;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Access\AccessResult;

@@ @@
   /**
    * Checks access for a specific request.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function customAccess(AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


31) modules/contrib/flag_lists/modules/flag_lists_actions/src/FlagListsActionsActionListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flag_lists_actions;

+use Drupal\flag_lists\FlagListsService;
 use Drupal\Core\Action\ActionManager;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * The Flag Lists Service.
    *
-   * @var \Drupal\flag_lists\FlagListsService
+   * @var FlagListsService
    */
   protected $flagListsService;

@@ @@
   /**
    * Constructs a new ActionListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The action storage.
-   * @param \Drupal\Core\Action\ActionManager $action_manager
+   * @param ActionManager $action_manager
    *   The action plugin manager.
-   * @param \Drupal\flag_lists\FlagListsServiceInterface $flag_lists_service
+   * @param FlagListsServiceInterface $flag_lists_service
    *   The Flag Lists service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The Config Factory.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, ActionManager $action_manager, FlagListsServiceInterface $flag_lists_service, ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/flag_lists/modules/flag_lists_actions/src/Controller/FlagListsActionsController.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Add Flag Lists Actions.
    *
-   * @param Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to create the Actions for.
    */
   public static function createActions(EntityInterface $entity) {
@@ @@
   /**
    * Delete Flag Lists Actions.
    *
-   * @param Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to delete the Actions for.
    */
   public static function deleteActions(EntityInterface $entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/flag_lists/modules/flag_lists_actions/flag_lists_actions.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\Action\ActionManager;
 /**
  * @file
  * Contains flag_lists_actions.module.
@@ @@
  *
  * @param array $form
  *   An associative array containing the structure of the form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current state of the form.
  */
 function flag_lists_actions_save_submit(array &$form, FormStateInterface $form_state) {
@@ @@
  * Implements hook_entity_type_build().
  */
 function flag_lists_actions_entity_type_build(array &$entity_types) {
-  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
+  /** @var EntityTypeInterface[] $entity_types */
   $entity_types['action']
     ->setListBuilderClass('Drupal\flag_lists_actions\FlagListsActionsActionListBuilder');
 }
@@ @@
 /**
  * Prepare for saving the Action.
  *
- * @param \Drupal\flag_lists\Entity\FlaggingCollection $entity
+ * @param FlaggingCollection $entity
  *   The entity to create an Action for.
  */
 function flag_lists_actions_prepare(FlaggingCollection $entity) {
@@ @@
     return;
   }
   // The action plugin cache needs to detect the new flag.
-  /** @var \Drupal\Core\Action\ActionManager $action_manager */
+  /** @var ActionManager $action_manager */
   $action_manager = \Drupal::service('plugin.manager.action');
   $action_manager->clearCachedDefinitions();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


34) modules/contrib/flag_lists/modules/flag_lists_actions/flag_lists_actions.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Action\ActionManager;
 /**
  * @file
  * Contains install and updates for the flag_lists_actions.
@@ @@
   $count = 0;

   // The action plugin cache needs to detect the new flag.
-  /** @var \Drupal\Core\Action\ActionManager $action_manager */
+  /** @var ActionManager $action_manager */
   $action_manager = \Drupal::service('plugin.manager.action');
   $action_manager->clearCachedDefinitions();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


35) modules/contrib/flag_lists/flag_lists.tokens.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\flag_lists\Entity\FlaggingCollection;
 /**
  * @file
  * Flag lists module tokens support.
@@ @@

   if ($type == 'flagging_collection' && !empty($data['flagging_collection'])) {

-    /** @var \Drupal\flag_lists\Entity\FlaggingCollection $flc */
+    /** @var FlaggingCollection $flc */
     $flc = $data['flagging_collection'];
     foreach ($tokens as $name => $original) {
       switch ($name) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


36) modules/contrib/flag_lists/flag_lists.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityTypeInterface;
 /**
  * @file
  * Contains flag_lists.module.
@@ @@
  *
  * @param array $form
  *   An associative array containing the structure of the form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current state of the form.
  */
 function flag_lists_save_submit(array &$form, FormStateInterface $form_state) {
@@ @@
  * Implements hook_entity_type_alter().
  */
 function flag_lists_entity_type_alter(array &$entity_types) {
-  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
+  /** @var EntityTypeInterface[] $entity_types */
   $entity_types['flag']->setListBuilderClass('Drupal\flag_lists\FlagListsFlagListBuilder');
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [WARNING] 2 nodes were removed                                                 

 [OK] 36 files have been changed by Rector                                      

