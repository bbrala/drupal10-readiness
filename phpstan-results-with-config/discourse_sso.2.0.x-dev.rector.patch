diff --git a/discourse_sso.info.yml b/discourse_sso.info.yml
index 69b5b84..c7a02b0 100644
--- a/discourse_sso.info.yml
+++ b/discourse_sso.info.yml
@@ -2,5 +2,5 @@ name: Discourse SSO
 type: module
 description: Provides a Single Sign On integration for a Discourse forum.
 package: Discourse
-core_version_requirement: ^8.8 || ^9 || ^10
+core_version_requirement: ^9.3 || ^10
 configure: discourse_sso.settings.form
diff --git a/discourse_sync/src/Controller/DiscourseSyncController.php b/discourse_sync/src/Controller/DiscourseSyncController.php
index c71fe98..e90bcf1 100644
--- a/discourse_sync/src/Controller/DiscourseSyncController.php
+++ b/discourse_sync/src/Controller/DiscourseSyncController.php
@@ -17,7 +17,7 @@ class DiscourseSyncController extends ControllerBase {
   public const DISCOURSE_USER_CREATED_EVENT = 'user_created';
 
   /**
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
@@ -27,16 +27,16 @@ class DiscourseSyncController extends ControllerBase {
   protected $webhookSecret;
 
   /**
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * DiscourseSyncController constructor.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
-   * @param \Drupal\Core\Config\ConfigFactory $config
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param EventDispatcherInterface $eventDispatcher
+   * @param ConfigFactory $config
+   * @param Request $request
    */
   public function __construct(EventDispatcherInterface $eventDispatcher,
     ConfigFactory $config, Request $request) {
diff --git a/discourse_sync/src/EventSubscriber/EventSubscriber.php b/discourse_sync/src/EventSubscriber/EventSubscriber.php
index 587d10b..ec25212 100644
--- a/discourse_sync/src/EventSubscriber/EventSubscriber.php
+++ b/discourse_sync/src/EventSubscriber/EventSubscriber.php
@@ -12,14 +12,14 @@ use Drupal\discourse_sync\UserEvent;
 class EventSubscriber implements EventSubscriberInterface {
 
   /**
-   * @var \Drupal\discourse_sync\Role
+   * @var Role
    */
   protected $service;
 
   /**
    * EventSubscriber constructor.
    *
-   * @param \Drupal\discourse_sync\Role $service
+   * @param Role $service
    */
   public function __construct(Role $service) {
     $this->service = $service;
@@ -37,7 +37,7 @@ class EventSubscriber implements EventSubscriberInterface {
   /**
    * Handler for the discourse_sync user event.
    *
-   * @param \Drupal\discourse_sync\UserEvent $event
+   * @param UserEvent $event
    */
   public function onUserCreate(UserEvent $event): void {
     $this->service->syncUserRoles($event->getUsername(), $event->getUserRoles());
diff --git a/discourse_sync/src/Role.php b/discourse_sync/src/Role.php
index 6cffa4f..b05560a 100644
--- a/discourse_sync/src/Role.php
+++ b/discourse_sync/src/Role.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\discourse_sync;
 
+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ -20,22 +21,22 @@ use GuzzleHttp\Exception\GuzzleException;
 class Role extends SingleSignOnBase {
 
   /**
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
   /**
    * Role constructor.
    *
-   * @param \GuzzleHttp\ClientInterface $http_client
-   * @param \Drupal\Core\Config\ConfigFactory $config
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_channel_factory
+   * @param ClientInterface $http_client
+   * @param ConfigFactory $config
+   * @param MessengerInterface $messenger
+   * @param LoggerChannelFactoryInterface $logger_channel_factory
    */
   public function __construct(ClientInterface $http_client, ConfigFactory $config, MessengerInterface $messenger, LoggerChannelFactoryInterface $logger_channel_factory) {
     parent::__construct($http_client, $config);
diff --git a/discourse_sync/src/UserEvent.php b/discourse_sync/src/UserEvent.php
index 8dd056f..acd8e1c 100644
--- a/discourse_sync/src/UserEvent.php
+++ b/discourse_sync/src/UserEvent.php
@@ -2,22 +2,24 @@
 
 namespace Drupal\discourse_sync;
 
+use Symfony\Contracts\EventDispatcher\Event;
+use Drupal\user\Entity\User;
 /**
  * Event class to be dispatched from the discourse_sso controller.
  */
-class UserEvent extends \Symfony\Contracts\EventDispatcher\Event {
+class UserEvent extends Event {
 
   public const EVENT = 'discourse_sync.user';
 
   /**
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $user;
 
   /**
    * UserEvent constructor.
    *
-   * @param \Drupal\user\Entity\User $user
+   * @param User $user
    */
   public function __construct($user) {
     $this->user = $user;
diff --git a/src/Controller/DiscourseSsoController.php b/src/Controller/DiscourseSsoController.php
index 4e8bba0..ed3f678 100644
--- a/src/Controller/DiscourseSsoController.php
+++ b/src/Controller/DiscourseSsoController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\discourse_sso\Controller;
 
+use Drupal\user\UserInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Access\AccessResult;
@@ -21,14 +22,14 @@ class DiscourseSsoController extends ControllerBase {
   protected $sig;
 
   /**
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
    * DiscourseSsoController constructor.
    *
-   * @param \Drupal\Core\Config\ImmutableConfig $config
+   * @param ImmutableConfig $config
    */
   public function __construct(ImmutableConfig $config) {
     $this->config = $config;
@@ -54,7 +55,7 @@ class DiscourseSsoController extends ControllerBase {
   }
 
   /**
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    */
   public function access(): AccessResult {
     if (!$this->payload || !$this->sig) {
@@ -75,7 +76,7 @@ class DiscourseSsoController extends ControllerBase {
   }
 
   /**
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    */
   public function discourse_sso(): RedirectResponse {
     if (!$this->payload || !$this->sig) {
@@ -91,13 +92,13 @@ class DiscourseSsoController extends ControllerBase {
    * Function is called if a user is authenticated with the primary Drupal
    * website.
    *
-   * @return \Drupal\Core\Routing\TrustedRedirectResponse
+   * @return TrustedRedirectResponse
    */
   protected function validate(): TrustedRedirectResponse {
     $payload = urldecode($this->payload);
     $query = [];
     parse_str(base64_decode($payload), $query);
-    /** @var \Drupal\user\UserInterface $account */
+    /** @var UserInterface $account */
     $account = NULL;
     try {
       $account = $this->entityTypeManager()->getStorage('user')
@@ -112,7 +113,7 @@ class DiscourseSsoController extends ControllerBase {
     }
     $picture = '';
     if ($account->hasField('user_picture') && !$account->get('user_picture')->isEmpty()) {
-      $picture = file_create_url($account->get('user_picture')->entity->getFileUri());
+      $picture = \Drupal::service('file_url_generator')->generateAbsoluteString($account->get('user_picture')->entity->getFileUri());
     }
 
     // Create the payload
@@ -144,7 +145,7 @@ class DiscourseSsoController extends ControllerBase {
    * Function is called if a user is not authenticated with the primary Drupal
    * website.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    */
   protected function login(): RedirectResponse {
     $_SESSION['discourse_sso_sig'] = $this->sig;
@@ -160,7 +161,7 @@ class DiscourseSsoController extends ControllerBase {
   /**
    * Function is called if either payload or sig is not set.
    *
-   * @return \Drupal\Core\Routing\TrustedRedirectResponse
+   * @return TrustedRedirectResponse
    */
   protected function retry(): TrustedRedirectResponse {
     $response = new TrustedRedirectResponse($this->config->get('discourse_server') . '/session/sso');
diff --git a/src/Form/DiscourseSsoAdminForm.php b/src/Form/DiscourseSsoAdminForm.php
index bac9305..5addd4c 100644
--- a/src/Form/DiscourseSsoAdminForm.php
+++ b/src/Form/DiscourseSsoAdminForm.php
@@ -10,14 +10,14 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class DiscourseSsoAdminForm extends FormBase {
 
   /**
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   private $entityFieldManager;
 
   /**
    * DiscourseSsoAdminForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    */
   public function __construct(EntityFieldManagerInterface $entity_field_manager) {
     $this->entityFieldManager = $entity_field_manager;
diff --git a/src/SingleSignOnBase.php b/src/SingleSignOnBase.php
index be33c0b..45c1197 100644
--- a/src/SingleSignOnBase.php
+++ b/src/SingleSignOnBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\discourse_sso;
 
+use GuzzleHttp\Client;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use GuzzleHttp\ClientInterface;
 use Drupal\Core\Config\ConfigFactory;
@@ -17,7 +18,7 @@ class SingleSignOnBase {
   /**
    * GuzzleHttp\Client definition.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $client;
 
@@ -34,8 +35,8 @@ class SingleSignOnBase {
   /**
    * SingleSignOnBase constructor.
    *
-   * @param \GuzzleHttp\ClientInterface $http_client
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ClientInterface $http_client
+   * @param ConfigFactory $config_factory
    */
   public function __construct(ClientInterface $http_client, ConfigFactory $config_factory) {
     $this->client = $http_client;
