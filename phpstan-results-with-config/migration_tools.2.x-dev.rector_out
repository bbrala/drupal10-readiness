modules/contrib/migration_tools/migration_tools.module
modules/contrib/migration_tools/src/CheckFor.php
modules/contrib/migration_tools/src/Event/MessageEvent.php
modules/contrib/migration_tools/src/EventSubscriber/PostRowSave.php
modules/contrib/migration_tools/src/EventSubscriber/PrepareRow.php
modules/contrib/migration_tools/src/Form/MigrationToolsAdminForm.php
modules/contrib/migration_tools/src/Media.php
modules/contrib/migration_tools/src/Message.php
modules/contrib/migration_tools/src/Modifier/DomModifier.php
modules/contrib/migration_tools/src/Modifier/Modifier.php
modules/contrib/migration_tools/src/Modifier/SourceModifier.php
modules/contrib/migration_tools/src/Modifier/SourceModifierHtml.php
modules/contrib/migration_tools/src/Obtainer/Job.php
modules/contrib/migration_tools/src/Obtainer/ObtainArray.php
modules/contrib/migration_tools/src/Obtainer/ObtainBody.php
modules/contrib/migration_tools/src/Obtainer/ObtainCity.php
modules/contrib/migration_tools/src/Obtainer/ObtainContentType.php
modules/contrib/migration_tools/src/Obtainer/ObtainCountry.php
modules/contrib/migration_tools/src/Obtainer/ObtainDate.php
modules/contrib/migration_tools/src/Obtainer/ObtainDateSpanish.php
modules/contrib/migration_tools/src/Obtainer/ObtainHtml.php
modules/contrib/migration_tools/src/Obtainer/ObtainID.php
modules/contrib/migration_tools/src/Obtainer/ObtainImage.php
modules/contrib/migration_tools/src/Obtainer/ObtainImageFile.php
modules/contrib/migration_tools/src/Obtainer/ObtainLink.php
modules/contrib/migration_tools/src/Obtainer/ObtainLinkFile.php
modules/contrib/migration_tools/src/Obtainer/ObtainLocation.php
modules/contrib/migration_tools/src/Obtainer/ObtainPlainTextWithNewLines.php
modules/contrib/migration_tools/src/Obtainer/ObtainState.php
modules/contrib/migration_tools/src/Obtainer/ObtainSubTitle.php
modules/contrib/migration_tools/src/Obtainer/ObtainTable.php
modules/contrib/migration_tools/src/Obtainer/ObtainTitle.php
modules/contrib/migration_tools/src/Obtainer/ObtainTitleNoCaseChange.php
modules/contrib/migration_tools/src/Obtainer/Obtainer.api.php
modules/contrib/migration_tools/src/Obtainer/Obtainer.php
modules/contrib/migration_tools/src/Operations.php
modules/contrib/migration_tools/src/Plugin/migrate/process/CreateDefaultParagraphRevision.php
modules/contrib/migration_tools/src/Plugin/migrate/process/SkipOnSubstr.php
modules/contrib/migration_tools/src/Plugin/migrate/source/UrlList.php
modules/contrib/migration_tools/src/Plugin/migrate_plus/data_parser/Dom.php
modules/contrib/migration_tools/src/QpHtml.php
modules/contrib/migration_tools/src/Redirects.php
modules/contrib/migration_tools/src/SourceParser/HtmlBase.php
modules/contrib/migration_tools/src/SourceParser/Node.php
modules/contrib/migration_tools/src/StringTools.php
modules/contrib/migration_tools/src/Url.php
modules/contrib/migration_tools/tests/src/Functional/LoadTest.php

8 files with changes
====================

1) modules/contrib/migration_tools/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migration_tools\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/migration_tools/src/SourceParser/HtmlBase.php:19

    ---------- begin diff ----------
@@ @@
   public $fileId;
   protected $html;

-  /** @var \Drupal\migrate\Row $row */
+  /** @var Row $row */
   public $row;
   public $queryPath;

@@ @@
    *   The file id, e.g. careers/legal/pm7205.html.
    * @param string $html
    *   The full HTML data as loaded from the file.
-   * @param \Drupal\migrate\Row $row
+   * @param Row $row
    *   Migrate row to be altered.
    */
   public function __construct($file_id, $html, Row $row) {
@@ @@
   /**
    * Add obtainer job for this source parser to run.
    *
-   * @param \Drupal\migration_tools\Obtainer\Job $job
+   * @param Job $job
    *   Job to add.
    */
   public function addObtainerJob(Job $job) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/migration_tools/src/Redirects.php:458

    ---------- begin diff ----------
@@ @@
       if (!empty($file_id)) {
         $file_object = File::load($file_id);
         $file_uri = $file_object->getFileUri();
-        $path = file_url_transform_relative(file_create_url($file_uri));
+        $path = \Drupal::service('file_url_generator')->generateString($file_uri);
       }
     }

@@ @@
     if (!empty($field[$language])) {
       foreach ($field[$language] as $delta => $item) {
         $file = File::load($item['fid']);
-        $url = file_create_url($file->uri);
+        $url = \Drupal::service('file_url_generator')->generateAbsoluteString($file->uri);
         $parsed_url = parse_url($url);
         $destination = ltrim($parsed_url['path'], '/');
         redirect_delete_by_path($destination);
@@ @@
    *   string 'skip' if there is a redirect but it's broken.
    *   FALSE - no detectable redirects exist in the page.
    *
-   * @throws \Drupal\migrate\MigrateException
+   * @throws MigrateException
    */
   public function hasValidRedirect($row, $query_path, array $redirect_texts = []) {
     // @TODO refactor for D8 and use setting from RedirectSettings.
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/migration_tools/src/Operations.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\migration_tools;

+use Drupal\migrate\Row;
 use Drupal\migrate\MigrateException;
 use Drupal\migrate\MigrateSkipRowException;
 use Drupal\migration_tools\Modifier\DomModifier;
@@ @@
    *
    * @param array $migration_tools_settings
    *   Migration Tools Settings.
-   * @param \Drupal\migrate\Row $row
+   * @param Row $row
    *   Migration Row.
    *
-   * @throws \Drupal\migrate\MigrateException
-   * @throws \Drupal\migrate\MigrateSkipRowException
+   * @throws MigrateException
+   * @throws MigrateSkipRowException
    */
   public static function process(array $migration_tools_settings, $row) {
     if (!empty($migration_tools_settings)) {
@@ @@
    * @param resource $handle
    *   The curl handle to set the options on.
    *
-   * @throws \Drupal\migrate\MigrateException
+   * @throws MigrateException
    */
   protected static function processCurlOptions($migration_tools_setting, &$handle) {
     if (empty($migration_tools_setting['curl_options'])) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/migration_tools/src/Message.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\migration_tools;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Logger\RfcLogLevel;
 use Drupal\migrate\MigrateException;
 use Drupal\Component\Render\FormattableMarkup;
@@ @@
       $event_dispatcher->dispatch(MessageEvent::EVENT_NAME, $event);

       $log_levels = RfcLogLevel::getLevels();
-      /** @var \Drupal\Core\StringTranslation\TranslatableMarkup $log_function_markup */
-      $log_function_markup = $log_levels[$severity];
+      /** @var TranslatableMarkup $log_function_markup */
+						$log_function_markup = $log_levels[$severity];

       // Use lowercase version of label for method call.
       $log_function = strtolower($log_function_markup->__toString());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/migration_tools/src/EventSubscriber/PrepareRow.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/migration_tools/src/EventSubscriber/PostRowSave.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\migration_tools\EventSubscriber;

+use Drupal\migrate\MigrateSkipRowException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Language\Language;
 use Drupal\migrate\Event\MigrateEvents;
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Callback function for prepare row migration event.
    *
-   * @param \Drupal\migrate\Event\MigratePostRowSaveEvent $event
+   * @param MigratePostRowSaveEvent $event
    *   The prepare row event.
    *
-   * @throws \Drupal\migrate\MigrateSkipRowException
+   * @throws MigrateSkipRowException
    */
   public function onMigratePostRowSave(MigratePostRowSaveEvent $event) {
     $row = $event->getRow();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/migration_tools/src/Event/MessageEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\migration_tools\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Component\Render\FormattableMarkup;
-use Symfony\Component\EventDispatcher\Event;

 class MessageEvent extends Event {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [ERROR] Could not process                                                      
         "modules/contrib/migration_tools/src/Plugin/migrate_plus/data_parser/Dom.
         php" file, due to:                                                     
         "Analyze error: "Class Drupal\migrate_plus\DataParserPluginBase not    
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [WARNING] 1 nodes were removed                                                 

