diff --git a/src/Controller/SimpleFbConnectController.php b/src/Controller/SimpleFbConnectController.php
index da49d77..11c84bb 100644
--- a/src/Controller/SimpleFbConnectController.php
+++ b/src/Controller/SimpleFbConnectController.php
@@ -21,35 +21,35 @@ class SimpleFbConnectController extends ControllerBase {
   /**
    * Simple FB Connect FB manager.
    *
-   * @var \Drupal\simple_fb_connect\SimpleFbConnectFbManager
+   * @var SimpleFbConnectFbManager
    */
   protected $fbManager;
 
   /**
    * The simple FB connect user manager.
    *
-   * @var \Drupal\simple_fb_connect\SimpleFbConnectUserManager
+   * @var SimpleFbConnectUserManager
    */
   protected $userManager;
 
   /**
    * The SimpleFbConnectPostLoginManager.
    *
-   * @var \Drupal\simple_fb_connect\SimpleFbConnectPostLoginManager
+   * @var SimpleFbConnectPostLoginManager
    */
   protected $postLoginManager;
 
   /**
    * The SimpleFbConnectPersistentDataHandler.
    *
-   * @var \Drupal\simple_fb_connect\SimpleFbConnectPersistentDataHandler
+   * @var SimpleFbConnectPersistentDataHandler
    */
   protected $persistentDataHandler;
 
   /**
    * The SimpleFbConnectFbFactory.
    *
-   * @var \Drupal\simple_fb_connect\SimpleFbConnectFbFactory
+   * @var SimpleFbConnectFbFactory
    */
   protected $fbFactory;
 
@@ -58,15 +58,15 @@ class SimpleFbConnectController extends ControllerBase {
    *
    * The constructor parameters are passed from the create() method.
    *
-   * @param \Drupal\simple_fb_connect\SimpleFbConnectFbManager $fb_manager
+   * @param SimpleFbConnectFbManager $fb_manager
    *   SimpleFbConnectFbManager object.
-   * @param \Drupal\simple_fb_connect\SimpleFbConnectUserManager $user_manager
+   * @param SimpleFbConnectUserManager $user_manager
    *   SimpleFbConnectUserManager object.
-   * @param \Drupal\simple_fb_connect\SimpleFbConnectPostLoginManager $post_login_manager
+   * @param SimpleFbConnectPostLoginManager $post_login_manager
    *   SimpleFbConnectPostLoginManager object.
-   * @param \Drupal\simple_fb_connect\SimpleFbConnectPersistentDataHandler $persistent_data_handler
+   * @param SimpleFbConnectPersistentDataHandler $persistent_data_handler
    *   SimpleFbConnectPersistentDataHandler object.
-   * @param \Drupal\simple_fb_connect\SimpleFbConnectFbFactory $fb_factory
+   * @param SimpleFbConnectFbFactory $fb_factory
    *   SimpleFbConnectFbFactory object.
    */
   public function __construct(SimpleFbConnectFbManager $fb_manager, SimpleFbConnectUserManager $user_manager, SimpleFbConnectPostLoginManager $post_login_manager, SimpleFbConnectPersistentDataHandler $persistent_data_handler, SimpleFbConnectFbFactory $fb_factory) {
diff --git a/src/Form/SimpleFbConnectSettingsForm.php b/src/Form/SimpleFbConnectSettingsForm.php
index af0c42a..a9c68eb 100644
--- a/src/Form/SimpleFbConnectSettingsForm.php
+++ b/src/Form/SimpleFbConnectSettingsForm.php
@@ -17,16 +17,16 @@ class SimpleFbConnectSettingsForm extends ConfigFormBase {
   /**
    * Holds information about the current request.
    *
-   * @var \Drupal\Core\Routing\RequestContext
+   * @var RequestContext
    */
   protected $requestContext;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Routing\RequestContext $request_context
+   * @param RequestContext $request_context
    *   Holds information about the current request.
    */
   public function __construct(ConfigFactoryInterface $config_factory, RequestContext $request_context) {
diff --git a/src/SimpleFbConnectFbFactory.php b/src/SimpleFbConnectFbFactory.php
index e67e2bf..8c0f623 100644
--- a/src/SimpleFbConnectFbFactory.php
+++ b/src/SimpleFbConnectFbFactory.php
@@ -17,32 +17,32 @@ class SimpleFbConnectFbFactory {
   /**
    * Used for accessing Drupal configuration.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Used for logging errors.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;
 
   /**
    * Used for reading data from and writing data to session.
    *
-   * @var \Drupal\simple_fb_connect\SimpleFbConnectPersistentDataHandler
+   * @var SimpleFbConnectPersistentDataHandler
    */
   protected $peristentDataHandler;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Used for accessing Drupal configuration.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   Used for logging errors.
-   * @param \Drupal\simple_fb_connect\SimpleFbConnectPersistentDataHandler $persistent_data_handler
+   * @param SimpleFbConnectPersistentDataHandler $persistent_data_handler
    *   Used for reading data from and writing data to session.
    */
   public function __construct(ConfigFactoryInterface $config_factory, LoggerChannelFactoryInterface $logger_factory, SimpleFbConnectPersistentDataHandler $persistent_data_handler) {
@@ -57,7 +57,7 @@ class SimpleFbConnectFbFactory {
    * Reads Facebook App ID and App Secret from SimpleFbConnect module settings
    * and creates an instance of Facebook service with these as parameters.
    *
-   * @return \Facebook\Facebook
+   * @return Facebook
    *   Facebook service instance.
    */
   public function getFbService() {
@@ -80,7 +80,7 @@ class SimpleFbConnectFbFactory {
   /**
    * Returns an instance of SimpleFbConnectPersistentDataHandler service.
    *
-   * @return Drupal\simple_fb_connect\SimpleFbConnectPersistentDataHandler
+   * @return SimpleFbConnectPersistentDataHandler
    *   SimpleFbConnectPersistentDataHandler service instance.
    */
   public function getPersistentDataHandler() {
diff --git a/src/SimpleFbConnectFbManager.php b/src/SimpleFbConnectFbManager.php
index 1934ad8..0d3d512 100644
--- a/src/SimpleFbConnectFbManager.php
+++ b/src/SimpleFbConnectFbManager.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\simple_fb_connect;
 
+use Facebook\facebook;
+use Facebook\Authentication\AccessToken;
 use Facebook\Exceptions\FacebookResponseException;
 use Facebook\Exceptions\FacebookSDKException;
 use Facebook\Facebook;
@@ -20,57 +22,57 @@ class SimpleFbConnectFbManager {
   /**
    * Used for logging errors.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;
 
   /**
    * Used for dispatching events to other modules.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * Used for accessing Drupal user picture preferences.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * Used for generating absolute URLs.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;
 
   /**
    * Used for reading data from and writing data to session.
    *
-   * @var \Drupal\simple_fb_connect\SimpleFbConnectPersistentDataHandler
+   * @var SimpleFbConnectPersistentDataHandler
    */
   protected $persistentDataHandler;
 
   /**
    * The facebook service.
    *
-   * @var \Facebook\facebook
+   * @var facebook
    */
   protected $facebook;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   Used for logging errors.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Used for dispatching events to other modules.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   Used for accessing Drupal user picture preferences.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   Used for generating absolute URLs.
-   * @param \Drupal\simple_fb_connect\SimpleFbConnectPersistentDataHandler $persistent_data_handler
+   * @param SimpleFbConnectPersistentDataHandler $persistent_data_handler
    *   Used for reading data from and writing data to session.
    */
   public function __construct(LoggerChannelFactoryInterface $logger_factory, EventDispatcherInterface $event_dispatcher, EntityFieldManagerInterface $entity_field_manager, UrlGeneratorInterface $url_generator, SimpleFbConnectPersistentDataHandler $persistent_data_handler) {
@@ -85,7 +87,7 @@ class SimpleFbConnectFbManager {
   /**
    * Dependency injection setter for Facebook service.
    *
-   * @param \Facebook\Facebook $facebook
+   * @param Facebook $facebook
    *   Facebook service.
    */
   public function setFacebookService(Facebook $facebook) {
@@ -112,7 +114,7 @@ class SimpleFbConnectFbManager {
     // Set the scope twice on the event: as the main subject but also in the
     // list of arguments.
     $e = new GenericEvent($scope, ['scope' => $scope]);
-    $event = $this->eventDispatcher->dispatch('simple_fb_connect.scope', $e);
+    $event = $this->eventDispatcher->dispatch($e, 'simple_fb_connect.scope');
     $final_scope = $event->getArgument('scope');
 
     // Generate and return the URL where we should redirect the user.
@@ -145,7 +147,7 @@ class SimpleFbConnectFbManager {
    * This method can only be called from route simple_fb_connect.return_from_fb
    * because RedirectLoginHelper will use the URL parameters set by Facebook.
    *
-   * @return \Facebook\Authentication\AccessToken|null
+   * @return AccessToken|null
    *   User's Facebook access token, if it could be read from Facebook.
    *   Null, otherwise.
    */
@@ -231,7 +233,7 @@ class SimpleFbConnectFbManager {
   /**
    * Makes an API call to get user's Facebook profile.
    *
-   * @return \Facebook\GraphNodes\GraphNode|false
+   * @return GraphNode|false
    *   GraphNode representing the user
    *   False if exception was thrown
    */
@@ -259,7 +261,7 @@ class SimpleFbConnectFbManager {
   /**
    * Makes an API call to get the URL of user's Facebook profile picture.
    *
-   * @return \Facebook\GraphNodes\GraphNode
+   * @return GraphNode
    *   GraphNode object representing user's Facebook profile picture.
    */
   public function getFbProfilePic() {
@@ -315,7 +317,7 @@ class SimpleFbConnectFbManager {
   /**
    * Returns user's email address from Facebook profile.
    *
-   * @param \Facebook\GraphNodes\GraphNode $fb_profile
+   * @param GraphNode $fb_profile
    *   GraphNode object representing user's Facebook profile.
    *
    * @return string|false
diff --git a/src/SimpleFbConnectPersistentDataHandler.php b/src/SimpleFbConnectPersistentDataHandler.php
index 20ee7d9..6ac4f8a 100644
--- a/src/SimpleFbConnectPersistentDataHandler.php
+++ b/src/SimpleFbConnectPersistentDataHandler.php
@@ -21,7 +21,7 @@ class SimpleFbConnectPersistentDataHandler implements PersistentDataInterface {
   /**
    * The session service.
    *
-   * @var \Symfony\Component\HttpFoundation\Session\SessionInterface
+   * @var SessionInterface
    */
   protected $session;
 
@@ -35,7 +35,7 @@ class SimpleFbConnectPersistentDataHandler implements PersistentDataInterface {
   /**
    * Constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\Session\SessionInterface $session
+   * @param SessionInterface $session
    *   Used for reading data from and writing data to session.
    */
   public function __construct(SessionInterface $session) {
diff --git a/src/SimpleFbConnectPostLoginManager.php b/src/SimpleFbConnectPostLoginManager.php
index 0f7c558..8844c6d 100644
--- a/src/SimpleFbConnectPostLoginManager.php
+++ b/src/SimpleFbConnectPostLoginManager.php
@@ -15,21 +15,21 @@ class SimpleFbConnectPostLoginManager {
   /**
    * Used for accessing Drupal configuration.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Holds information about the current request.
    *
-   * @var \Drupal\Core\Routing\RequestContext
+   * @var RequestContext
    */
   protected $requestContext;
 
   /**
    * Used for validating user provided paths.
    *
-   * @var \Drupal\Core\Path\PathValidatorInterface
+   * @var PathValidatorInterface
    */
   protected $pathValidator;
 
@@ -43,11 +43,11 @@ class SimpleFbConnectPostLoginManager {
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Used for accessing Drupal configuration.
-   * @param \Drupal\Core\Routing\RequestContext $request_context
+   * @param RequestContext $request_context
    *   Used for reading the query string.
-   * @param \Drupal\Core\Path\PathValidatorInterface $path_validator
+   * @param PathValidatorInterface $path_validator
    *   Used for validating user provided paths.
    * @param SimpleFbConnectPersistentDataHandler $persistent_data_handler
    *   Used for reading data from and writing data to session.
@@ -135,7 +135,7 @@ class SimpleFbConnectPostLoginManager {
   /**
    * Returns the path to user's user form.
    *
-   * @param \Drupal\user\Entity\User $drupal_user
+   * @param User $drupal_user
    *   User object.
    *
    * @return string
diff --git a/src/SimpleFbConnectUserManager.php b/src/SimpleFbConnectUserManager.php
index ce9ea3b..a582b09 100644
--- a/src/SimpleFbConnectUserManager.php
+++ b/src/SimpleFbConnectUserManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simple_fb_connect;
 
+use Drupal\file\FileInterface;
 use Facebook\GraphNodes\GraphNode;
 use Drupal\user\Entity\User;
 use Drupal\user\UserInterface;
@@ -30,88 +31,88 @@ class SimpleFbConnectUserManager {
   /**
    * Used for accessing Drupal configuration.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Used for logging errors.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;
 
   /**
    * Used for dispatching events to other modules.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * Used for loading and creating Drupal user objects.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Used for access Drupal user field definitions.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * Used for token support in Drupal user picture directory.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
   /**
    * Used for user picture directory and file transliteration.
    *
-   * @var \Drupal\Core\Transliteration\PhpTransliteration
+   * @var PhpTransliteration
    */
   protected $transliteration;
 
   /**
    * Used for detecting the current UI language.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Provides helpers to operate on files and stream wrappers.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Used for accessing Drupal configuration.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   Used for logging errors.
    * @param \Drupal\Core\TranslationInterface $string_translation
    *   Used for translating strings in UI messages.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Used for dispatching events to other modules.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Used for loading and creating Drupal user objects.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   Used for access Drupal user field definitions.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   Used for token support in Drupal user picture directory.
-   * @param \Drupal\Core\Transliteration\PhpTransliteration $transliteration
+   * @param PhpTransliteration $transliteration
    *   Used for user picture directory and file transliteration.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   Used for detecting the current UI language.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   Provides helpers to operate on files and stream wrappers.
    */
   public function __construct(ConfigFactoryInterface $config_factory, LoggerChannelFactoryInterface $logger_factory, TranslationInterface $string_translation, EventDispatcherInterface $event_dispatcher, EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, Token $token, PhpTransliteration $transliteration, LanguageManagerInterface $language_manager, FileSystemInterface $file_system) {
@@ -139,7 +140,7 @@ class SimpleFbConnectUserManager {
    * @param string $value
    *   Value to search for.
    *
-   * @return \Drupal\user\Entity\User|false
+   * @return User|false
    *   Drupal user account if found
    *   False otherwise
    */
@@ -165,10 +166,10 @@ class SimpleFbConnectUserManager {
    *   User's email address.
    * @param int $fbid
    *   User's Facebook ID.
-   * @param \Facebook\GraphNodes\GraphNode $fb_profile_pic
+   * @param GraphNode $fb_profile_pic
    *   GraphNode object representing user's Facebook profile picture.
    *
-   * @return \Drupal\user\Entity\User|false
+   * @return User|false
    *   Drupal user account if user was created
    *   False otherwise
    */
@@ -255,10 +256,10 @@ class SimpleFbConnectUserManager {
       'account' => $new_user,
       'fbid' => $fbid,
     ]);
-    $this->eventDispatcher->dispatch('simple_fb_connect.user_created', $event);
+    $this->eventDispatcher->dispatch($event, 'simple_fb_connect.user_created');
 
     // Validate the new user.
-    /** @var \Drupal\user\UserInterface $new_user */
+    /** @var UserInterface $new_user */
     $violations = $new_user->validate();
     if (!is_null($violations) && count($violations) > 0) {
       $property = $violations[0]->getPropertyPath();
@@ -310,7 +311,7 @@ class SimpleFbConnectUserManager {
    * @todo Add Boost integtraion when Boost is available for D8
    *   https://www.drupal.org/node/2524372
    *
-   * @param \Drupal\user\Entity\User $drupal_user
+   * @param User $drupal_user
    *   User object.
    *
    * @return bool
@@ -338,7 +339,7 @@ class SimpleFbConnectUserManager {
       // Set the account twice on the event: as the main subject but also in the
       // list of arguments.
       $event = new GenericEvent($drupal_user, ['account' => $drupal_user]);
-      $this->eventDispatcher->dispatch('simple_fb_connect.user_login', $event);
+      $this->eventDispatcher->dispatch($event, 'simple_fb_connect.user_login');
 
       // @todo Add Boost cookie if Boost module is enabled
       // https://www.drupal.org/node/2524372
@@ -433,7 +434,7 @@ class SimpleFbConnectUserManager {
   /**
    * Checks if current user is admin and admin login via FB is disabled.
    *
-   * @param \Drupal\user\Entity\User $drupal_user
+   * @param User $drupal_user
    *   User object.
    *
    * @return bool
@@ -463,7 +464,7 @@ class SimpleFbConnectUserManager {
   /**
    * Checks if the user has one of the "FB login disabled" roles.
    *
-   * @param \Drupal\user\Entity\User $drupal_user
+   * @param User $drupal_user
    *   User object.
    *
    * @return bool
@@ -501,7 +502,7 @@ class SimpleFbConnectUserManager {
   /**
    * Downloads and sets user profile picture.
    *
-   * @param \Drupal\user\Entity\User $drupal_user
+   * @param User $drupal_user
    *   User object to update the profile picture for.
    * @param string $picture_url
    *   Absolute URL where the picture will be downloaded from.
@@ -541,7 +542,7 @@ class SimpleFbConnectUserManager {
    * @param string $fbid
    *   Facebook ID of the user.
    *
-   * @return \Drupal\file\FileInterface|false
+   * @return FileInterface|false
    *   FileInterface object if file was succesfully downloaded
    *   False otherwise
    */
@@ -685,7 +686,7 @@ class SimpleFbConnectUserManager {
    * @see user_password
    */
   protected function userPassword($length) {
-    return user_password($length);
+    return \Drupal::service('password_generator')->generate($length);
   }
 
   /**
diff --git a/tests/src/Unit/SimpleFbConnectFbFactoryTest.php b/tests/src/Unit/SimpleFbConnectFbFactoryTest.php
index a458787..115f96d 100644
--- a/tests/src/Unit/SimpleFbConnectFbFactoryTest.php
+++ b/tests/src/Unit/SimpleFbConnectFbFactoryTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\simple_fb_connect\Unit;
 
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\Core\Logger\LoggerChannelFactoryInterface;
+use Drupal\simple_fb_connect\SimpleFbConnectPersistentDataHandler;
 use Drupal\Tests\UnitTestCase;
 use Drupal\simple_fb_connect\SimpleFbConnectFbFactory;
 
@@ -14,21 +17,21 @@ class SimpleFbConnectFbFactoryTest extends UnitTestCase {
   /**
    * Used for accessing Drupal configuration.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Used for logging errors.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;
 
   /**
    * Used for reading data from and writing data to session.
    *
-   * @var \Drupal\simple_fb_connect\SimpleFbConnectPersistentDataHandler
+   * @var SimpleFbConnectPersistentDataHandler
    */
   protected $persistentDataHandler;
 
@@ -47,9 +50,7 @@ class SimpleFbConnectFbFactoryTest extends UnitTestCase {
 
     $this->loggerFactory = $this->createMock('Drupal\Core\Logger\LoggerChannelFactoryInterface');
 
-    $this->persistentDataHandler = $this->getMockBuilder('Drupal\simple_fb_connect\SimpleFbConnectPersistentDataHandler')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->persistentDataHandler = $this->createMock('Drupal\simple_fb_connect\SimpleFbConnectPersistentDataHandler');
   }
 
   /**
@@ -96,9 +97,7 @@ class SimpleFbConnectFbFactoryTest extends UnitTestCase {
    * @dataProvider getFbServiceBadDataProvider
    */
   public function testGetFbServiceWithBadData($app_id, $app_secret) {
-    $logger_channel = $this->getMockBuilder('Drupal\Core\Logger\LoggerChannel')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $logger_channel = $this->createMock('Drupal\Core\Logger\LoggerChannel');
 
     $this->loggerFactory
       ->expects($this->any())
