modules/contrib/node_link_report/node_link_report.install
modules/contrib/node_link_report/node_link_report.module
modules/contrib/node_link_report/src/Form/NodeLinkReportAdminForm.php
modules/contrib/node_link_report/src/Plugin/Block/NodeLinkReport.php

1 file with changes
===================

1) modules/contrib/node_link_report/src/Plugin/Block/NodeLinkReport.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\node_link_report\Plugin\Block;

+use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ @@
  */
 class NodeLinkReport extends BlockBase implements ContainerFactoryPluginInterface {

-  use \Drupal\Core\StringTranslation\StringTranslationTrait;
+  use StringTranslationTrait;

   /**
    * The scheme and host of the current site.
@@ @@
   /**
    * Configuration factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   private $configFactory;

@@ @@
   /**
    * The node object for the current node.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   private $node = NULL;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   private $routeMatch;

@@ @@
   /**
    * The cache backend interface.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   private $cacheBackend;

@@ @@
   /**
    * The HTTP request object.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   private $requestStack;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   private $renderer;

@@ @@
   /**
    * Path alias manager.
    *
-   * @var \Drupal\path_alias\AliasManagerInterface
+   * @var AliasManagerInterface
    */
   protected $pathAliasManager;

@@ @@
   /**
    * Path validator interface.
    *
-   * @var \Drupal\Core\Path\PathValidatorInterface
+   * @var PathValidatorInterface
    */
   protected $pathValidator;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend_interface
+   * @param CacheBackendInterface $cache_backend_interface
    *   The cache backend interface.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The HTTP request object.
    * @param \Drupal\Core\Renderer\RendererInterface $renderer_interface
    *   The renderer service.
-   * @param \Drupal\path_alias\AliasManagerInterface $alias_manager_interface
+   * @param AliasManagerInterface $alias_manager_interface
    *   Path alias manager.
-   * @param \Drupal\Core\Path\PathValidatorInterface $path_validator_interface
+   * @param PathValidatorInterface $path_validator_interface
    *   Path validator interface.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, RouteMatchInterface $route_match, CacheBackendInterface $cache_backend_interface, RequestStack $request_stack, RendererInterface $renderer_interface, AliasManagerInterface $alias_manager_interface, PathValidatorInterface $path_validator_interface) {
@@ @@
   /**
    * Get the html from the node contents.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The node object to generate the html from.
    *
    * @return string
@@ @@
     // This might be a mistake, but seems to be working.
     $view_mode = 'bogus-view-mode-12345-giberish';
     $build = $builder->view($node, $view_mode);
-    $html = render($build);
+    $html = \Drupal::service('renderer')->render($build);

     return $html;
   }
@@ @@
   /**
    * Getter and setter for the current node.
    *
-   * @return \Drupal\node\NodeInterface
+   * @return NodeInterface
    *   Returns the node for the current route. or NULL if not found.
    */
   protected function getNode() {
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 1 file has been changed by Rector                                         

