diff --git a/modules/component_schema_ui_patterns/src/Element/ComponentPattern.php b/modules/component_schema_ui_patterns/src/Element/ComponentPattern.php
index b49f3c9..2cf0e99 100644
--- a/modules/component_schema_ui_patterns/src/Element/ComponentPattern.php
+++ b/modules/component_schema_ui_patterns/src/Element/ComponentPattern.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\component_schema_ui_patterns\Element;
 
+use Drupal\Core\Config\Schema\Element;
 use Drupal\component_schema\ComponentSchema;
 use Drupal\Core\Security\TrustedCallbackInterface;
 use Drupal\Core\TypedData\TraversableTypedDataInterface;
@@ -14,7 +15,7 @@ class ComponentPattern implements TrustedCallbackInterface {
   /**
    * The component schema wrapper object for the current component object.
    *
-   * @var \Drupal\Core\Config\Schema\Element
+   * @var Element
    */
   protected $schema;
 
@@ -43,7 +44,7 @@ class ComponentPattern implements TrustedCallbackInterface {
    * @param array $element
    *   Render array.
    *
-   * @return \Drupal\Core\TypedData\TraversableTypedDataInterface|NULL
+   * @return TraversableTypedDataInterface|NULL
    *   Component schema instance or NULL if none.
    */
   public static function getComponent($element) {
@@ -55,7 +56,7 @@ class ComponentPattern implements TrustedCallbackInterface {
    *
    * @param array $element
    *   Render array.
-   * @param \Drupal\Core\TypedData\TraversableTypedDataInterface $component
+   * @param TraversableTypedDataInterface $component
    *   Component schema instance.
    * @param string $key
    *   The component variable key.
diff --git a/src/Component/ComponentStorageManager.php b/src/Component/ComponentStorageManager.php
index 59ad738..eec919e 100644
--- a/src/Component/ComponentStorageManager.php
+++ b/src/Component/ComponentStorageManager.php
@@ -33,48 +33,48 @@ final class ComponentStorageManager implements StorageManagerInterface {
   /**
    * The memory storage.
    *
-   * @var \Drupal\Core\Config\MemoryStorage
+   * @var MemoryStorage
    */
   protected $storage;
 
   /**
    * The provided component schema storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $provided;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The used lock backend instance.
    *
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected $lock;
 
   /**
    * The component processor.
    *
-   * @var \Drupal\component_schema\ComponentProcessor
+   * @var ComponentProcessor
    */
   protected $componentProcessor;
 
   /**
    * ExportStorageManager constructor.
    *
-   * @param \Drupal\Core\Config\StorageInterface $active
+   * @param StorageInterface $active
    *   The provided component schema storage to prime the component storage.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Lock\LockBackendInterface $lock
+   * @param LockBackendInterface $lock
    *   The used lock backend instance.
-   * @param \Drupal\component_schema\ComponentProcessor $component_processor
+   * @param ComponentProcessor $component_processor
    *   The component processor.
    */
   public function __construct(StorageInterface $provided, EventDispatcherInterface $event_dispatcher, LockBackendInterface $lock, ComponentProcessor $component_processor) {
@@ -114,7 +114,7 @@ final class ComponentStorageManager implements StorageManagerInterface {
       }
     }
 
-    $this->eventDispatcher->dispatch(ComponentSchemaStorageEvents::TRANSFORM_COLLECT, new ComponentStorageTransformEvent($this->storage));
+    $this->eventDispatcher->dispatch(new ComponentStorageTransformEvent($this->storage), ComponentSchemaStorageEvents::TRANSFORM_COLLECT);
 
     return new ReadOnlyStorage($this->storage);
   }
diff --git a/src/Component/Schema/ComponentBooleanDataAttributeProvider.php b/src/Component/Schema/ComponentBooleanDataAttributeProvider.php
index 2bb20a1..ea07599 100644
--- a/src/Component/Schema/ComponentBooleanDataAttributeProvider.php
+++ b/src/Component/Schema/ComponentBooleanDataAttributeProvider.php
@@ -21,7 +21,7 @@ class ComponentBooleanDataAttributeProvider extends ComponentBooleanData impleme
    *
    * @param string $value
    *   The class to add.
-   * @param \Drupal\Core\Template\Attribute $attribute
+   * @param Attribute $attribute
    *   An Attribute object.
    *
    * @return $this
@@ -47,7 +47,7 @@ class ComponentBooleanDataAttributeProvider extends ComponentBooleanData impleme
    *
    * @param string $value
    *   The value to set.
-   * @param \Drupal\Core\Template\Attribute $attribute
+   * @param Attribute $attribute
    *   An Attribute object.
    *
    * @return $this
diff --git a/src/Component/Schema/ComponentComponent.php b/src/Component/Schema/ComponentComponent.php
index 835814e..4d13c55 100644
--- a/src/Component/Schema/ComponentComponent.php
+++ b/src/Component/Schema/ComponentComponent.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\component_schema\Component\Schema;
 
+use Drupal\Core\Template\TwigEnvironment;
 use Drupal\Core\Template\Attribute;
 
 /**
@@ -34,7 +35,7 @@ class ComponentComponent extends ComponentMapping implements TypedComponentVaria
 
       $process_variables = $schema->getValue();
 
-      /** @var \Drupal\Core\Template\TwigEnvironment $twig */
+      /** @var TwigEnvironment $twig */
       $twig = $this
         ->getTypedDataManager()
         ->getTwigEnvironment();
diff --git a/src/Component/Schema/ComponentStringDataAttributeProvider.php b/src/Component/Schema/ComponentStringDataAttributeProvider.php
index a562104..04886c4 100644
--- a/src/Component/Schema/ComponentStringDataAttributeProvider.php
+++ b/src/Component/Schema/ComponentStringDataAttributeProvider.php
@@ -21,7 +21,7 @@ class ComponentStringDataAttributeProvider extends ComponentStringData implement
    *
    * @param string $value
    *   The class to add.
-   * @param \Drupal\Core\Template\Attribute $attribute
+   * @param Attribute $attribute
    *   An Attribute object.
    *
    * @return $this
@@ -45,7 +45,7 @@ class ComponentStringDataAttributeProvider extends ComponentStringData implement
    *
    * @param string $value
    *   The value to set.
-   * @param \Drupal\Core\Template\Attribute $attribute
+   * @param Attribute $attribute
    *   An Attribute object.
    *
    * @return $this
diff --git a/src/Component/Schema/ComponentTemplate.php b/src/Component/Schema/ComponentTemplate.php
index abc334c..4704bfd 100644
--- a/src/Component/Schema/ComponentTemplate.php
+++ b/src/Component/Schema/ComponentTemplate.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\component_schema\Component\Schema;
 
+use Drupal\Core\Template\TwigEnvironment;
 use Drupal\Core\Template\Attribute;
 
 /**
@@ -22,7 +23,7 @@ class ComponentTemplate extends ComponentMapping implements TypedComponentVariab
       $template = $value['template'];
       $variables = $value['variables'] ?? [];
 
-      /** @var \Drupal\Core\Template\TwigEnvironment $twig */
+      /** @var TwigEnvironment $twig */
       $twig = $this
         ->getTypedDataManager()
         ->getTwigEnvironment();
diff --git a/src/Component/Schema/ComponentVariableAttributeProviderTrait.php b/src/Component/Schema/ComponentVariableAttributeProviderTrait.php
index e142e20..d86f4a8 100644
--- a/src/Component/Schema/ComponentVariableAttributeProviderTrait.php
+++ b/src/Component/Schema/ComponentVariableAttributeProviderTrait.php
@@ -11,7 +11,7 @@ trait ComponentVariableAttributeProviderTrait {
    *
    * @param string $value
    *   The class to add.
-   * @param \Drupal\Core\Template\Attribute $attribute
+   * @param Attribute $attribute
    *   An Attribute object.
    *
    * @return $this
@@ -23,7 +23,7 @@ trait ComponentVariableAttributeProviderTrait {
    *
    * @param string $value
    *   The value to set.
-   * @param \Drupal\Core\Template\Attribute $attribute
+   * @param Attribute $attribute
    *   An Attribute object.
    *
    * @return $this
@@ -64,7 +64,7 @@ trait ComponentVariableAttributeProviderTrait {
    *
    * @param mixed &$value
    *   A component variable value.
-   * @param \Drupal\Core\Template\Attribute $attribute
+   * @param Attribute $attribute
    *   An Attribute object.
    *
    * @todo Write this method.
diff --git a/src/Component/TypedComponentManager.php b/src/Component/TypedComponentManager.php
index 2009149..ea6b4ec 100644
--- a/src/Component/TypedComponentManager.php
+++ b/src/Component/TypedComponentManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\component_schema\Component;
 
+use Drupal\Core\Config\Schema\Element;
 use Drupal\Component\Graph\Graph;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\StorageInterface;
@@ -18,7 +19,7 @@ class TypedComponentManager extends TypedConfigManager implements TypedComponent
   /**
    * The Twig environment.
    *
-   * @var \Drupal\Core\Template\TwigEnvironment
+   * @var TwigEnvironment
    */
   protected $twig;
 
@@ -32,22 +33,22 @@ class TypedComponentManager extends TypedConfigManager implements TypedComponent
   /**
    * The component schema wrapper objects for components.
    *
-   * @var \Drupal\Core\Config\Schema\Element[]
+   * @var Element[]
    */
   protected $schemas = [];
 
   /**
    * Creates a new typed configuration manager.
    *
-   * @param \Drupal\Core\Config\StorageInterface $configStorage
+   * @param StorageInterface $configStorage
    *   The storage object to use for reading schema data
-   * @param \Drupal\Core\Config\StorageInterface $schemaStorage
+   * @param StorageInterface $schemaStorage
    *   The storage object to use for reading schema data
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend to use for caching the definitions.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\DependencyInjection\ClassResolverInterface $class_resolver
+   * @param ClassResolverInterface $class_resolver
    *   The class resolver.
    */
   public function __construct(StorageInterface $configStorage, StorageInterface $schemaStorage, CacheBackendInterface $cache, ModuleHandlerInterface $module_handler, ClassResolverInterface $class_resolver) {
diff --git a/src/Component/TypedComponentManagerInterface.php b/src/Component/TypedComponentManagerInterface.php
index df45384..3015bcc 100644
--- a/src/Component/TypedComponentManagerInterface.php
+++ b/src/Component/TypedComponentManagerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\component_schema\Component;
 
+use Drupal\component_schema\Component\Schema\ComponentMapping;
 use Drupal\Core\Config\TypedConfigManagerInterface;
 use Drupal\Core\Template\TwigEnvironment;
 
@@ -28,7 +29,7 @@ interface TypedComponentManagerInterface extends TypedConfigManagerInterface {
    * @param string $component_type
    *   The component type.
    *
-   * @return \Drupal\component_schema\Component\Schema\ComponentMapping
+   * @return ComponentMapping
    *   The schema object.
    */
   public function getComponentTypeSchema($component_type);
@@ -36,7 +37,7 @@ interface TypedComponentManagerInterface extends TypedConfigManagerInterface {
   /**
    * Sets the Twig environment.
    *
-   * @param \Drupal\Core\Template\TwigEnvironment $twig
+   * @param TwigEnvironment $twig
    *   The Twig environment.
    */
   public function setTwigEnvironment(TwigEnvironment $twig);
@@ -44,7 +45,7 @@ interface TypedComponentManagerInterface extends TypedConfigManagerInterface {
   /**
    * Gets the Twig environment.
    *
-   * @return \Drupal\Core\Template\TwigEnvironment
+   * @return TwigEnvironment
    *   The Twig environment.
    */
   public function getTwigEnvironment();
diff --git a/src/ComponentProcessor.php b/src/ComponentProcessor.php
index 0e95c27..d631293 100644
--- a/src/ComponentProcessor.php
+++ b/src/ComponentProcessor.php
@@ -23,32 +23,32 @@ class ComponentProcessor {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
   /**
    * The YAML discovery classes to find all .component_schema.yml files.
    *
-   * @var \Drupal\Core\Discovery\YamlDiscovery[]
+   * @var YamlDiscovery[]
    */
   protected $yamlDiscovery = [];
 
   /**
    * Constructs a new ComponentProcessor.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation.
    */
   public function __construct(ModuleHandlerInterface $module_handler, ThemeHandlerInterface $theme_handler, TranslationInterface $string_translation) {
@@ -63,7 +63,7 @@ class ComponentProcessor {
    * @param string $provider_type
    *   The type of extension.
    *
-   * @return \Drupal\Core\Discovery\YamlDiscovery
+   * @return YamlDiscovery
    *   The YAML discovery.
    */
   protected function getYamlDiscovery($provider_type) {
diff --git a/src/ComponentSchema.php b/src/ComponentSchema.php
index 68f8fef..a677a99 100644
--- a/src/ComponentSchema.php
+++ b/src/ComponentSchema.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\component_schema;
 
+use Drupal\component_schema\Component\TypedComponentManager;
+use Drupal\Core\TypedData\TraversableTypedDataInterface;
 /**
  * Component Schema factory class.
  *
@@ -12,7 +14,7 @@ class ComponentSchema {
   /**
    * Gets component processor instance.
    *
-   * @return \Drupal\component_schema\ComponentProcessor
+   * @return ComponentProcessor
    *   Component Schema processor instance.
    */
   public static function getProcessor() {
@@ -22,7 +24,7 @@ class ComponentSchema {
   /**
    * Gets typed component manager instance.
    *
-   * @return \Drupal\component_schema\Component\TypedComponentManager
+   * @return TypedComponentManager
    *   Component Schema processor instance.
    */
   public static function getTypedManager() {
@@ -37,7 +39,7 @@ class ComponentSchema {
    * @param array $variables
    *   (optional) An array of variable data.
    *
-   * @return \Drupal\Core\TypedData\TraversableTypedDataInterface|NULL
+   * @return TraversableTypedDataInterface|NULL
    *   Component schema instance or NULL if none.
    */
   public static function getComponentSchema($component_type, $variables = []) {
diff --git a/src/Event/ComponentStorageTransformEvent.php b/src/Event/ComponentStorageTransformEvent.php
index c999836..f14f760 100644
--- a/src/Event/ComponentStorageTransformEvent.php
+++ b/src/Event/ComponentStorageTransformEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\component_schema\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Config\StorageInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Class ComponentStorageTransformEvent.
@@ -20,14 +20,14 @@ class ComponentStorageTransformEvent extends Event {
    * used instead of the original storage after all event subscribers have been
    * called.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $storage;
 
   /**
    * StorageTransformEvent constructor.
    *
-   * @param \Drupal\Core\Config\StorageInterface $storage
+   * @param StorageInterface $storage
    *   The storage with the configuration to transform.
    */
   public function __construct(StorageInterface $storage) {
@@ -37,7 +37,7 @@ class ComponentStorageTransformEvent extends Event {
   /**
    * Returns the mutable storage ready to be read from and written to.
    *
-   * @return \Drupal\Core\Config\StorageInterface
+   * @return StorageInterface
    *   The config storage.
    */
   public function getStorage() {
diff --git a/src/Template/ComponentTwigExtension.php b/src/Template/ComponentTwigExtension.php
index 533ea1d..27107a6 100644
--- a/src/Template/ComponentTwigExtension.php
+++ b/src/Template/ComponentTwigExtension.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\component_schema\Template;
 
+use Drupal\component_schema\Component\Schema\ComponentMapping;
 use Drupal\component_schema\Component\TypedComponentManager;
 use Drupal\Core\Render\RendererInterface;
 use Drupal\Core\Template\Attribute;
@@ -15,23 +16,23 @@ class ComponentTwigExtension extends \Twig_Extension {
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The typed component manager.
    *
-   * @var \Drupal\component_schema\Component\TypedComponentManager
+   * @var TypedComponentManager
    */
   protected $typedComponentManager;
 
   /**
    * Constructs a new ComponentTwigExtension.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\component_schema\Component\TypedComponentManager $typed_component_manager
+   * @param TypedComponentManager $typed_component_manager
    *   The typed component manager.
    */
   public function __construct(RendererInterface $renderer, TypedComponentManager $typed_component_manager) {
@@ -71,12 +72,12 @@ class ComponentTwigExtension extends \Twig_Extension {
    * This method is used to produce more easily read markup where there is a
    * primary class that is associated with the element it's being added to.
    *
-   * @param \Drupal\Core\Template\Attribute $attributes
+   * @param Attribute $attributes
    *   An attributes object.
    * @param string $class
    *   A class to prepend.
    *
-   * @return \Drupal\Core\Template\Attribute
+   * @return Attribute
    *   An attributes object that has the given attributes.
    */
   public function prependClass(Attribute $attributes, $class) {
@@ -111,7 +112,7 @@ class ComponentTwigExtension extends \Twig_Extension {
     $process_variables = array_intersect_key($template_variables, $definition['mapping']);
 
     // Process the variables.
-    /** @var \Drupal\component_schema\Component\Schema\ComponentMapping $schema */
+    /** @var ComponentMapping $schema */
     $schema = $this->typedComponentManager->createFromNameAndData($component_type, $process_variables);
 
     $process_variables = $schema->getValue();
