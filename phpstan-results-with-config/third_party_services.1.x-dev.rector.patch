diff --git a/src/BlockOptionalRender.php b/src/BlockOptionalRender.php
index c1b1fe6..ee82ed3 100644
--- a/src/BlockOptionalRender.php
+++ b/src/BlockOptionalRender.php
@@ -13,7 +13,7 @@ class BlockOptionalRender implements BlockOptionalRenderInterface {
   /**
    * Instance of the "MODULE.mediator" service.
    *
-   * @var \Drupal\third_party_services\MediatorInterface
+   * @var MediatorInterface
    */
   protected $mediator;
 
diff --git a/src/BlockOptionalRenderInterface.php b/src/BlockOptionalRenderInterface.php
index e9fa733..db0186e 100644
--- a/src/BlockOptionalRenderInterface.php
+++ b/src/BlockOptionalRenderInterface.php
@@ -23,7 +23,7 @@ interface BlockOptionalRenderInterface extends ContainerInjectionInterface {
    *
    * @param array $element
    *   Renderable array of block with main content.
-   * @param \Drupal\Core\Block\BlockPluginInterface $block
+   * @param BlockPluginInterface $block
    *   An instance of the block.
    */
   public function process(array &$element, BlockPluginInterface $block): void;
diff --git a/src/Controller/ConfigurationController.php b/src/Controller/ConfigurationController.php
index 1425869..43c4679 100644
--- a/src/Controller/ConfigurationController.php
+++ b/src/Controller/ConfigurationController.php
@@ -21,14 +21,14 @@ class ConfigurationController extends ControllerBase {
   /**
    * Instance of the "MODULE.mediator" service.
    *
-   * @var \Drupal\third_party_services\MediatorInterface
+   * @var MediatorInterface
    */
   protected $mediator;
 
   /**
    * ConfigurationController constructor.
    *
-   * @param \Drupal\third_party_services\MediatorInterface $mediator
+   * @param MediatorInterface $mediator
    *   Instance of the "MODULE.mediator" service.
    */
   public function __construct(MediatorInterface $mediator) {
@@ -45,12 +45,12 @@ class ConfigurationController extends ControllerBase {
   /**
    * Checks whether user is allowed to manage the configuration.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Current user.
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   Requested user.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   Access result.
    */
   public function access(AccountInterface $account, AccountInterface $user): AccessResult {
@@ -61,12 +61,12 @@ class ConfigurationController extends ControllerBase {
   /**
    * Controller for "/user/{user}/third-party-services".
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   HTTP request.
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   An account of user for personalizing configuration.
    *
-   * @return array|\Drupal\Core\Ajax\AjaxResponse
+   * @return array|AjaxResponse
    *   Render-like array or AJAX response.
    */
   public function form(Request $request, AccountInterface $user) {
diff --git a/src/FieldOptionalRender.php b/src/FieldOptionalRender.php
index c412296..43283e2 100644
--- a/src/FieldOptionalRender.php
+++ b/src/FieldOptionalRender.php
@@ -17,7 +17,7 @@ class FieldOptionalRender implements FieldOptionalRenderInterface {
   /**
    * Instance of the "MODULE.mediator" service.
    *
-   * @var \Drupal\third_party_services\MediatorInterface
+   * @var MediatorInterface
    */
   protected $mediator;
 
diff --git a/src/FieldOptionalRenderInterface.php b/src/FieldOptionalRenderInterface.php
index 68f0cbf..4b2681a 100644
--- a/src/FieldOptionalRenderInterface.php
+++ b/src/FieldOptionalRenderInterface.php
@@ -41,7 +41,7 @@ interface FieldOptionalRenderInterface extends ContainerInjectionInterface {
    *
    * @param array $element
    *   Complete element to replace by placeholder.
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   Input set of elements.
    *
    * @return \Iterator
@@ -54,7 +54,7 @@ interface FieldOptionalRenderInterface extends ContainerInjectionInterface {
    *
    * @param array $form
    *   Form elements.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   A state of form.
    *
    * @return array[]
diff --git a/src/Form/ConfigurationForm.php b/src/Form/ConfigurationForm.php
index ec638de..6ad60b0 100644
--- a/src/Form/ConfigurationForm.php
+++ b/src/Form/ConfigurationForm.php
@@ -22,23 +22,23 @@ class ConfigurationForm extends FormBase {
   /**
    * Instance of the "MODULE.mediator" service.
    *
-   * @var \Drupal\third_party_services\MediatorInterface
+   * @var MediatorInterface
    */
   protected $mediator;
 
   /**
    * Instance of the "cache_tags.invalidator" service.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;
 
   /**
    * ConfigurationForm constructor.
    *
-   * @param \Drupal\third_party_services\MediatorInterface $mediator
+   * @param MediatorInterface $mediator
    *   Instance of the "MODULE.mediator" service.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   Instance of the "cache_tags.invalidator" service.
    */
   public function __construct(MediatorInterface $mediator, CacheTagsInvalidatorInterface $cache_tags_invalidator) {
diff --git a/src/Mediator.php b/src/Mediator.php
index 6ebeac4..705ba78 100644
--- a/src/Mediator.php
+++ b/src/Mediator.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\third_party_services;
 
+use Drupal\taxonomy\TermStorageInterface;
 use Drupal\Core\Form\FormState;
 use Drupal\Core\Form\FormBuilderInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -20,35 +21,35 @@ class Mediator implements MediatorInterface {
   /**
    * Instance of the "user.data" service.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;
 
   /**
    * Instance of the "current_user" service.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * Instance of the "form_builder" service.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
 
   /**
    * Storage of the "taxonomy_term" entities.
    *
-   * @var \Drupal\taxonomy\TermStorageInterface
+   * @var TermStorageInterface
    */
   protected $taxonomyTermStorage;
 
   /**
    * Instance of the "MODULE.raw_html_renderer" service.
    *
-   * @var \Drupal\third_party_services\RawHtmlRenderer
+   * @var RawHtmlRenderer
    */
   protected $rawHtmlRenderer;
 
diff --git a/src/MediatorInterface.php b/src/MediatorInterface.php
index 82be339..1d02a4f 100644
--- a/src/MediatorInterface.php
+++ b/src/MediatorInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\third_party_services;
 
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Core\Form\FormBuilderInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Render\HtmlResponse;
@@ -24,13 +25,13 @@ interface MediatorInterface extends ContainerInjectionInterface {
   /**
    * Mediator constructor.
    *
-   * @param \Drupal\user\UserDataInterface $user_data
+   * @param UserDataInterface $user_data
    *   Instance of the "user.data" service.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Instance of the "current_user" service.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   Instance of the "form_builder" service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Instance of the "entity_type.manager" service.
    * @param RawHtmlRenderer $raw_html_renderer
    *   Instance of the "MODULE.raw_html_renderer" service.
@@ -52,7 +53,7 @@ interface MediatorInterface extends ContainerInjectionInterface {
   /**
    * Returns list of patterns for third-party services in given vocabulary.
    *
-   * @return \Drupal\taxonomy\TermInterface[]
+   * @return TermInterface[]
    *   An associative arrays where keys are patterns for third-party service
    *   recognition and values - are instances of еру "taxonomy_term" entity.
    */
@@ -61,9 +62,9 @@ interface MediatorInterface extends ContainerInjectionInterface {
   /**
    * Check whether third-party service allowed for rendering.
    *
-   * @param \Drupal\taxonomy\TermInterface $term
+   * @param TermInterface $term
    *   Taxonomy term, representing particular service.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   An account to check configuration in. Current user by default.
    *
    * @return bool
@@ -76,7 +77,7 @@ interface MediatorInterface extends ContainerInjectionInterface {
    *
    * @param string[] $term_uuids
    *   Indexed array of UUIDs of "taxonomy_term" entities.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   An account to save configuration in. Current user by default.
    */
   public function setAllowedServices(array $term_uuids, AccountInterface $account = NULL);
@@ -84,7 +85,7 @@ interface MediatorInterface extends ContainerInjectionInterface {
   /**
    * Returns instances of "taxonomy_term" entity.
    *
-   * @return \Drupal\taxonomy\TermInterface[]
+   * @return TermInterface[]
    *   Indexed array of instances of "taxonomy_term" entity.
    */
   public function loadTerms(): array;
@@ -115,7 +116,7 @@ interface MediatorInterface extends ContainerInjectionInterface {
   /**
    * Decide whether placeholdering is needed and spoof the renderable markup.
    *
-   * @param array|string|\Drupal\Component\Render\MarkupInterface $markup
+   * @param array|string|MarkupInterface $markup
    *   Markup to scan for third-party service.
    * @param array $build
    *   Renderable array which is assumed to be rendered if no placeholders.
@@ -124,7 +125,7 @@ interface MediatorInterface extends ContainerInjectionInterface {
    * @param int $delta
    *   Number of processing element. Must differ when the same "$type" is used.
    *
-   * @return \Drupal\Core\Render\HtmlResponse|null
+   * @return HtmlResponse|null
    *   HTML response of rendered third-party service or NULL when placeholder
    *   not needed.
    */
diff --git a/src/Menu/Link/ConfigurationFormUrlMenuLink.php b/src/Menu/Link/ConfigurationFormUrlMenuLink.php
index 601f6c2..85856ab 100644
--- a/src/Menu/Link/ConfigurationFormUrlMenuLink.php
+++ b/src/Menu/Link/ConfigurationFormUrlMenuLink.php
@@ -16,7 +16,7 @@ class ConfigurationFormUrlMenuLink extends MenuLinkDefault {
   /**
    * Instance of the "current_user" service.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
diff --git a/src/RawHtmlRenderer.php b/src/RawHtmlRenderer.php
index 934f269..0ff9f6d 100644
--- a/src/RawHtmlRenderer.php
+++ b/src/RawHtmlRenderer.php
@@ -16,21 +16,21 @@ class RawHtmlRenderer implements RawHtmlRendererInterface {
   /**
    * Instance of the "renderer" service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * HTML response.
    *
-   * @var \Drupal\Core\Render\HtmlResponse
+   * @var HtmlResponse
    */
   protected $htmlResponse;
 
   /**
    * Instance of the "html_response.attachments_processor" service.
    *
-   * @var \Drupal\Core\Render\HtmlResponseAttachmentsProcessor
+   * @var HtmlResponseAttachmentsProcessor
    */
   protected $responseAttachmentsProcessor;
 
diff --git a/src/RawHtmlRendererInterface.php b/src/RawHtmlRendererInterface.php
index efe67ba..b320777 100644
--- a/src/RawHtmlRendererInterface.php
+++ b/src/RawHtmlRendererInterface.php
@@ -16,9 +16,9 @@ interface RawHtmlRendererInterface extends ContainerInjectionInterface {
   /**
    * RawHtmlRenderer constructor.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   Instance of the "renderer" service.
-   * @param \Drupal\Core\Render\HtmlResponseAttachmentsProcessor $response_attachments_processor
+   * @param HtmlResponseAttachmentsProcessor $response_attachments_processor
    *   Instance of the "html_response.attachments_processor" service.
    */
   public function __construct(RendererInterface $renderer, HtmlResponseAttachmentsProcessor $response_attachments_processor);
@@ -36,7 +36,7 @@ interface RawHtmlRendererInterface extends ContainerInjectionInterface {
    * @param array $content
    *   Renderable structure to transform.
    *
-   * @return \Drupal\Core\Render\HtmlResponse
+   * @return HtmlResponse
    *   HTML response
    *
    * @see template_preprocess_html()
diff --git a/src/Twig/ConfigurationFormUrlTwigExtension.php b/src/Twig/ConfigurationFormUrlTwigExtension.php
index 8a02fe0..00af620 100644
--- a/src/Twig/ConfigurationFormUrlTwigExtension.php
+++ b/src/Twig/ConfigurationFormUrlTwigExtension.php
@@ -17,14 +17,14 @@ class ConfigurationFormUrlTwigExtension extends AbstractExtension implements Con
   /**
    * Instance of the "current_user" service.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * ConfigurationController constructor.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Instance of the "current_user" service.
    */
   public function __construct(AccountInterface $account) {
@@ -60,7 +60,7 @@ class ConfigurationFormUrlTwigExtension extends AbstractExtension implements Con
    * @param array $dialog_options
    *   Set of options for "OpenDialogCommand".
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   Object representation of the URL.
    *
    * @see \Drupal\third_party_services\Controller\ConfigurationController::form()
diff --git a/third_party_services.module b/third_party_services.module
index da51eef..0c5e76e 100644
--- a/third_party_services.module
+++ b/third_party_services.module
@@ -18,7 +18,7 @@ const THIRD_PARTY_SERVICES_CONFIGURATION_FORM_ROUTE = 'entity.user.third_party_s
 /**
  * Returns instance of the "MODULE.mediator" service.
  *
- * @return \Drupal\third_party_services\MediatorInterface
+ * @return MediatorInterface
  *   An instance of the service.
  */
 function third_party_services_mediator(): MediatorInterface {
@@ -28,7 +28,7 @@ function third_party_services_mediator(): MediatorInterface {
 /**
  * Returns instance of the "MODULE.field_optional_render" service.
  *
- * @return \Drupal\third_party_services\FieldOptionalRenderInterface
+ * @return FieldOptionalRenderInterface
  *   An instance of the service.
  */
 function third_party_services_field_optional_render(): FieldOptionalRenderInterface {
@@ -38,7 +38,7 @@ function third_party_services_field_optional_render(): FieldOptionalRenderInterf
 /**
  * Returns instance of the "MODULE.block_optional_render" service.
  *
- * @return \Drupal\third_party_services\BlockOptionalRenderInterface
+ * @return BlockOptionalRenderInterface
  *   An instance of the service.
  */
 function third_party_services_block_optional_render(): BlockOptionalRenderInterface {
