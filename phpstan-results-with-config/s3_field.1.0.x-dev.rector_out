modules/contrib/s3_field/src/Controller/S3FieldController.php
modules/contrib/s3_field/src/Plugin/Field/FieldFormatter/DefaultS3Formatter.php
modules/contrib/s3_field/src/Plugin/Field/FieldFormatter/S3FormatterBase.php
modules/contrib/s3_field/src/Plugin/Field/FieldFormatter/UrlS3Formatter.php
modules/contrib/s3_field/src/Plugin/Field/FieldType/S3FileItem.php
modules/contrib/s3_field/src/Plugin/Field/FieldType/S3ItemBase.php
modules/contrib/s3_field/src/Plugin/Field/FieldWidget/S3TextfieldWidget.php
modules/contrib/s3_field/src/Plugin/media/Source/S3File.php

3 files with changes
====================

1) modules/contrib/s3_field/src/Plugin/media/Source/S3File.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\s3_field\Plugin\media\Source;

+use Aws\Result;
 use Drupal\media\MediaInterface;
 use Drupal\media\MediaSourceBase;
 use Aws\S3\S3Client;
@@ @@
   /**
    * Returns metadata for the S3 object.
    *
-   * @return \Aws\Result|array
+   * @return Result|array
    */
   protected function getObjectMetadata($settings, $key) {
     $client = new S3Client([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/s3_field/src/Plugin/Field/FieldFormatter/S3FormatterBase.php:55

    ---------- begin diff ----------
@@ @@
   /**
    * Get Drupal URL for field.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    * @param int $delta
    *   The field value's delta.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   Drupal URL which will redirect to S3.
    */
   public function getUrl(EntityInterface $entity, int $delta = 0) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/s3_field/src/Controller/S3FieldController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\s3_field\Controller;

+use Drupal\Core\Access\AccessResultInterface;
+use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
 use Aws\S3\S3Client;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityFieldManager;
@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The key repository.
    *
-   * @var \Drupal\key\KeyRepository
+   * @var KeyRepository
    */
   protected $keyRepository;

@@ @@
   /**
    * S3FieldController constructor.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManager $entityFieldManager
+   * @param EntityFieldManager $entityFieldManager
    *   The entity field manager.
-   * @param \Drupal\key\KeyRepository $keyRepository
+   * @param KeyRepository $keyRepository
    *   The key repository.
    */
   public function __construct(EntityFieldManager $entityFieldManager, KeyRepository $keyRepository) {
@@ @@
   /**
    * Access check for the entity & field.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param string $field_name
    *   The field name.
@@ @@
    * @param int $delta
    *   The field value's delta.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function fieldAccess(ContentEntityInterface $entity, string $field_name, int $delta) {
@@ @@
   /**
    * Redirect to S3 based on key in entity's field.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param string $field_name
    *   The field name.
@@ @@
    * @param int $delta
    *   The field value's delta.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
+   * @throws NotFoundHttpException
    *   Thrown when the requested file does not exist.
-   * @throws \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException
+   * @throws AccessDeniedHttpException
    *   Thrown when the user does not have access to the file.
    */
   public function download(Request $request, ContentEntityInterface $entity, string $field_name, int $delta) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 3 files have been changed by Rector                                       

