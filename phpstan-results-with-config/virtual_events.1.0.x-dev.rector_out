modules/contrib/virtual_events/src/Annotation/VirtualEventFormatterPlugin.php
modules/contrib/virtual_events/src/Annotation/VirtualEventPostHandlePlugin.php
modules/contrib/virtual_events/src/Annotation/VirtualEventPreHandlePlugin.php
modules/contrib/virtual_events/src/Annotation/VirtualEventSourcePlugin.php
modules/contrib/virtual_events/src/Controller/VirtualEventsEventEndedController.php
modules/contrib/virtual_events/src/Entity/VirtualEventsConfigEntity.php
modules/contrib/virtual_events/src/Entity/VirtualEventsConfigEntityInterface.php
modules/contrib/virtual_events/src/Entity/VirtualEventsEventEntity.php
modules/contrib/virtual_events/src/Entity/VirtualEventsEventEntityInterface.php
modules/contrib/virtual_events/src/Entity/VirtualEventsFormatterEntity.php
modules/contrib/virtual_events/src/Entity/VirtualEventsFormatterEntityInterface.php
modules/contrib/virtual_events/src/Form/VirtualEventsConfigEntityDeleteForm.php
modules/contrib/virtual_events/src/Form/VirtualEventsConfigEntityForm.php
modules/contrib/virtual_events/src/Form/VirtualEventsEventEntityDeleteForm.php
modules/contrib/virtual_events/src/Form/VirtualEventsEventEntityForm.php
modules/contrib/virtual_events/src/Form/VirtualEventsFormatterEntityDeleteForm.php
modules/contrib/virtual_events/src/Form/VirtualEventsFormatterEntityForm.php
modules/contrib/virtual_events/src/Plugin/Derivative/FormatterBundleTypeLocalTask.php
modules/contrib/virtual_events/src/Plugin/VirtualEventFormatterPluginBase.php
modules/contrib/virtual_events/src/Plugin/VirtualEventFormatterPluginInterface.php
modules/contrib/virtual_events/src/Plugin/VirtualEventFormatterPluginManager.php
modules/contrib/virtual_events/src/Plugin/VirtualEventPostHandlePluginBase.php
modules/contrib/virtual_events/src/Plugin/VirtualEventPostHandlePluginInterface.php
modules/contrib/virtual_events/src/Plugin/VirtualEventPostHandlePluginManager.php
modules/contrib/virtual_events/src/Plugin/VirtualEventPreHandlePluginBase.php
modules/contrib/virtual_events/src/Plugin/VirtualEventPreHandlePluginInterface.php
modules/contrib/virtual_events/src/Plugin/VirtualEventPreHandlePluginManager.php
modules/contrib/virtual_events/src/Plugin/VirtualEventSourcePluginBase.php
modules/contrib/virtual_events/src/Plugin/VirtualEventSourcePluginInterface.php
modules/contrib/virtual_events/src/Plugin/VirtualEventSourcePluginManager.php
modules/contrib/virtual_events/src/ProxyClass/VirtualEventsUninstallValidator.php
modules/contrib/virtual_events/src/Services/VirtualEventsCommonService.php
modules/contrib/virtual_events/src/VirtualEventsConfigEntityHtmlRouteProvider.php
modules/contrib/virtual_events/src/VirtualEventsConfigEntityListBuilder.php
modules/contrib/virtual_events/src/VirtualEventsEventEntityHtmlRouteProvider.php
modules/contrib/virtual_events/src/VirtualEventsEventEntityListBuilder.php
modules/contrib/virtual_events/src/VirtualEventsFormatterEntityHtmlRouteProvider.php
modules/contrib/virtual_events/src/VirtualEventsFormatterEntityListBuilder.php
modules/contrib/virtual_events/src/VirtualEventsUninstallValidator.php
modules/contrib/virtual_events/virtual_events.install
modules/contrib/virtual_events/virtual_events.module

19 files with changes
=====================

1) modules/contrib/virtual_events/virtual_events.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Config\ConfigManagerInterface;
+use Drupal\Core\Config\Entity\ConfigEntityStorage;
 /**
  * @file
  * Install, update and uninstall functions for the group module.
@@ @@
   $updated = [];
   $created = [];

-  /** @var \Drupal\Core\Config\ConfigManagerInterface $config_manager */
+  /** @var ConfigManagerInterface $config_manager */
   $config_manager = \Drupal::service('config.manager');
   $files = glob($path . '*.yml');
   foreach ($files as $file) {
@@ @@
       $id_key = $definition->getKey('id');
       $id = $value[$id_key];

-      /** @var \Drupal\Core\Config\Entity\ConfigEntityStorage $entity_storage */
+      /** @var ConfigEntityStorage $entity_storage */
       $entity_storage = $entity_manager->getStorage($type);
       $entity = $entity_storage->load($id);
       if ($entity) {
@@ @@
  * Install new views and missing config.
  */
 function virtual_events_update_8001() {
-  $config_path = drupal_get_path('module', 'virtual_events') . '/config/install/';
+  $config_path = \Drupal::service('extension.list.module')->getPath('virtual_events') . '/config/install/';
   _virtual_events_update_or_install_config($config_path);
 }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


2) modules/contrib/virtual_events/src/VirtualEventsUninstallValidator.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The virtual events common service.
    *
-   * @var \Drupal\virtual_events\Services\VirtualEventsCommonService
+   * @var VirtualEventsCommonService
    */
   protected $virtualEventsCommonService;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new VirtualEventsUninstallValidator.
    *
-   * @param \Drupal\virtual_events\Services\VirtualEventsCommonService $virtual_events_common_service
+   * @param VirtualEventsCommonService $virtual_events_common_service
    *   The virtual events common service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
    */
   public function __construct(VirtualEventsCommonService $virtual_events_common_service, EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/virtual_events/src/Services/VirtualEventsCommonService.php:22

    ---------- begin diff ----------
@@ @@
    * @param string $event_id
    *   The event id.
    *
-   * @return \Drupal\virtual_events\Entity\VirtualEventsEventEntity|bool
+   * @return VirtualEventsEventEntity|bool
    *   The event Entity
    */
   public function getEventById($event_id) {
@@ @@
    * @param string $entity_id
    *   Referenced Entity Id.
    *
-   * @return \Drupal\virtual_events\Entity\VirtualEventsEventEntity|bool
+   * @return VirtualEventsEventEntity|bool
    *   The event Entity if found or false if not found
    */
   public function getEventByReference($entity_type, $entity_id) {
@@ @@
   /**
    * Get all events config entites (Event Types).
    *
-   * @return \Drupal\virtual_events\Entity\VirtualEventsConfigEntity[]
+   * @return VirtualEventsConfigEntity[]
    *   Array of meeting config entites.
    */
   public function getAllVirtualEventsTypes() {
@@ @@
    * @param string $entity_type
    *   Refernced Entity Type.
    *
-   * @return \Drupal\virtual_events\Entity\VirtualEventsConfigEntity|bool
+   * @return VirtualEventsConfigEntity|bool
    *   Return Config Entity if found for the given entity type,
    *   ortherwise it will return false
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/virtual_events/src/ProxyClass/VirtualEventsUninstallValidator.php:6

    ---------- begin diff ----------
@@ @@

 namespace Drupal\virtual_events\ProxyClass {

+    use Drupal\Core\Extension\ModuleUninstallValidatorInterface;
+    use Drupal\Core\DependencyInjection\DependencySerializationTrait;
+    use Drupal\virtual_events\Services\VirtualEventsCommonService;
+    use Symfony\Component\DependencyInjection\ContainerInterface;
+    use Drupal\Core\StringTranslation\TranslationInterface;
     /**
      * Provides a proxy class for \Drupal\book\BookUninstallValidator.
      *
      * @see \Drupal\Component\ProxyBuilder
      */
-    class VirtualEventsUninstallValidator implements \Drupal\Core\Extension\ModuleUninstallValidatorInterface
+    class VirtualEventsUninstallValidator implements ModuleUninstallValidatorInterface
     {

-        use \Drupal\Core\DependencyInjection\DependencySerializationTrait;
+        use DependencySerializationTrait;

         /**
          * The id of the original proxied service.
@@ @@
         /**
          * The book outline storage.
          *
-         * @var \Drupal\virtual_events\Services\VirtualEventsCommonService
+         * @var VirtualEventsCommonService
          */
         protected $service;

@@ @@
         /**
          * The service container.
          *
-         * @var \Symfony\Component\DependencyInjection\ContainerInterface
+         * @var ContainerInterface
          */
         protected $container;

@@ @@
         /**
          * Constructs a ProxyClass Drupal proxy object.
          *
-         * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+         * @param ContainerInterface $container
          *   The container.
          * @param string $drupal_proxy_original_service_id
          *   The service ID of the original service.
          */
-        public function __construct(\Symfony\Component\DependencyInjection\ContainerInterface $container, $drupal_proxy_original_service_id)
+        public function __construct(ContainerInterface $container, $drupal_proxy_original_service_id)
         {
             $this->container = $container;
             $this->drupalProxyOriginalServiceId = $drupal_proxy_original_service_id;
@@ @@
         /**
          * {@inheritdoc}
          */
-        public function setStringTranslation(\Drupal\Core\StringTranslation\TranslationInterface $translation)
+        public function setStringTranslation(TranslationInterface $translation)
         {
             return $this->lazyLoadItself()->setStringTranslation($translation);
         }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/virtual_events/src/Plugin/VirtualEventSourcePluginManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/virtual_events/src/Plugin/VirtualEventSourcePluginBase.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The virtual events common service.
    *
-   * @var \Drupal\virtual_events\services\VirtualEventsCommonService
+   * @var VirtualEventsCommonService
    */
   protected $virtualEventsCommon;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation.
-   * @param \Drupal\virtual_events\services\VirtualEventsCommonService $virtual_events_common
+   * @param VirtualEventsCommonService $virtual_events_common
    *   The virtual events common service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, TranslationInterface $string_translation, VirtualEventsCommonService $virtual_events_common) {
@@ @@
   /**
    * Creates a new VirtualEventSourcePluginBase object.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   Container interface for service dependency injection.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
@@ @@
   /**
    * Handles meeting creation on desired platfrom through apis.
    *
-   * @param \Drupal\virtual_events\Entity\VirtualEventsEventEntity $event
+   * @param VirtualEventsEventEntity $event
    *   The event entity.
    *
-   * @return \Drupal\virtual_events\Entity\VirtualEventsEventEntity
+   * @return VirtualEventsEventEntity
    *   Virtual Event Entity
    */
   abstract public function createMeeting(VirtualEventsEventEntity $event);
@@ @@
   /**
    * Check if the meeting exists and active on desired platfrom through apis.
    *
-   * @param \Drupal\virtual_events\Entity\VirtualEventsEventEntity $event
+   * @param VirtualEventsEventEntity $event
    *   The event entity.
    *
    * @return bool
@@ @@
   /**
    * Delete meeting on desired platfrom through apis.
    *
-   * @param \Drupal\virtual_events\Entity\VirtualEventsEventEntity $event
+   * @param VirtualEventsEventEntity $event
    *   The event entity.
    *
    * @return bool
@@ @@
   /**
    * Handles the plugin configuration form inside the event config entity.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The config entity form state.
    * @param array|null $pluginConfigValues
    *   The config values for the current plugin.
@@ @@
   /**
    * Handles the plugin form inside the current entity.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current entity form state.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsEventEntity|null $event
+   * @param VirtualEventsEventEntity|null $event
    *   The created event entity if any.
    * @param array $source_data
    *   The soruce plugin saved data if any.
@@ @@
   /**
    * Submit handler that will be connected to the current entity form.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current entity form state.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The current entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsConfigEntity $event_config
+   * @param VirtualEventsConfigEntity $event_config
    *   The event config entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsEventEntity|null $event
+   * @param VirtualEventsEventEntity|null $event
    *   The event enitity attached to the current entity.
    * @param array $source_config
    *   The source plugin config from the event config entity.
@@ @@
   /**
    * Fucntion that will handle the event registrants.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The event entity.
-   * @param \Drupal\user\UserInterface $registrant
+   * @param UserInterface $registrant
    *   The registrant entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsConfigEntity $event_config
+   * @param VirtualEventsConfigEntity $event_config
    *   The event config entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsEventEntity|null $event
+   * @param VirtualEventsEventEntity|null $event
    *   The event enitity attached to the current entity.
    * @param array $source_config
    *   The source plugin config from the event config entity.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/virtual_events/src/Plugin/VirtualEventPreHandlePluginManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/virtual_events/src/Plugin/VirtualEventPreHandlePluginBase.php:33

    ---------- begin diff ----------
@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, TranslationInterface $string_translation) {
@@ @@
   /**
    * Creates a new VirtualEventPreHandlePluginBase object.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   Container interface for service dependency injection.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
@@ @@
    *
    * @param array $form
    *   The current form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The config entity form state.
    * @param array|null $pluginConfigValues
    *   The config values for the current plugin.
@@ @@
    *
    * @param array $form
    *   The current form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current entity form state.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsEventEntity|null $event
+   * @param VirtualEventsEventEntity|null $event
    *   The created event entity if any.
    * @param array $source_data
    *   The soruce plugin saved data if any.
@@ @@
   /**
    * Submit handler that will be connected to the current entity form.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current entity form state.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The current entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsConfigEntity $event_config
+   * @param VirtualEventsConfigEntity $event_config
    *   The event config entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsEventEntity|null $event
+   * @param VirtualEventsEventEntity|null $event
    *   The event enitity attached to the current entity.
    * @param array $source_config
    *   The source plugin config from the event config entity.
@@ @@
    *
    * @param array $element
    *   Element Render array.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The current entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsEventEntity $event
+   * @param VirtualEventsEventEntity $event
    *   The event enitity attached to the current entity.
    * @param array $source_config
    *   The source plugin config from the event config entity.
@@ @@
    *
    * @param array $build
    *   Entity build array.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The current entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsEventEntity $event
+   * @param VirtualEventsEventEntity $event
    *   The event entity attached to the current entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsFormatterEntity $formatters
+   * @param VirtualEventsFormatterEntity $formatters
    *   The formatter config entity attached to the current entity.
    */
   public function handleEntityView(array &$build, EntityInterface &$entity, VirtualEventsEventEntity &$event, VirtualEventsFormatterEntity $formatters) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/virtual_events/src/Plugin/VirtualEventPostHandlePluginManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/virtual_events/src/Plugin/VirtualEventPostHandlePluginBase.php:32

    ---------- begin diff ----------
@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, TranslationInterface $string_translation) {
@@ @@
   /**
    * Creates a new VirtualEventPostHandlePluginBase object.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   Container interface for service dependency injection.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
@@ @@
    *
    * @param array $form
    *   The current form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The config entity form state.
    * @param array|null $pluginConfigValues
    *   The config values for the current plugin.
@@ @@
    *
    * @param array $form
    *   The current form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current entity form state.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsEventEntity|null $event
+   * @param VirtualEventsEventEntity|null $event
    *   The created event entity if any.
    * @param array $source_data
    *   The soruce plugin saved data if any.
@@ @@
   /**
    * Submit handler that will be connected to the current entity form.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current entity form state.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The current entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsConfigEntity $event_config
+   * @param VirtualEventsConfigEntity $event_config
    *   The event config entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsEventEntity|null $event
+   * @param VirtualEventsEventEntity|null $event
    *   The event enitity attached to the current entity.
    * @param array $source_config
    *   The source plugin config from the event config entity.
@@ @@
    *
    * @param array $form
    *   Formatter Settings From.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current entity form state.
-   * @param \Drupal\Core\Entity\Display\EntityDisplayInterface|null $display
+   * @param EntityDisplayInterface|null $display
    *   The created event entity if any.
    * @param array|null $options
    *   The formatter options stored in the display.
@@ @@
    *
    * @param array $element
    *   Element Render array.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The current entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsEventEntity $event
+   * @param VirtualEventsEventEntity $event
    *   The event enitity attached to the current entity.
    * @param array $source_config
    *   The source plugin config from the event config entity.
    * @param array $source_data
    *   The source plugin data from the current event entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsFormatterEntity $formatters
+   * @param VirtualEventsFormatterEntity $formatters
    *   The formatter config entity attached to the current entity.
    * @param string $formatterId
    *   The formatter id that is being processed.
@@ @@
    *
    * @param array $build
    *   Entity build array.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The current entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsEventEntity $event
+   * @param VirtualEventsEventEntity $event
    *   The event enitity attached to the current entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsFormatterEntity $formatters
+   * @param VirtualEventsFormatterEntity $formatters
    *   The formatter config entity attached to the current entity.
    */
   public function handleEntityView(array &$build, EntityInterface $entity, VirtualEventsEventEntity $event, VirtualEventsFormatterEntity $formatters) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/virtual_events/src/Plugin/VirtualEventFormatterPluginManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/virtual_events/src/Plugin/VirtualEventFormatterPluginBase.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * Handle the display of this formatter inside entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The current entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsEventEntity $event
+   * @param VirtualEventsEventEntity $event
    *   The event enitity attached to the current entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsFormatterEntity $formatters_config
+   * @param VirtualEventsFormatterEntity $formatters_config
    *   The event enitity attached to the current entity.
    * @param array $source_config
    *   The source plugin config from the event config entity.
@@ @@
   /**
    * Handle the display of this formatter inside entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The current entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsEventEntity $event
+   * @param VirtualEventsEventEntity $event
    *   The event enitity attached to the current entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsFormatterEntity $formatters_config
+   * @param VirtualEventsFormatterEntity $formatters_config
    *   The event enitity attached to the current entity.
    * @param array $source_config
    *   The source plugin config from the event config entity.
@@ @@
   /**
    * Handle Settings Form.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current entity form state.
-   * @param \Drupal\Core\Entity\Display\EntityDisplayInterface|null $display
+   * @param EntityDisplayInterface|null $display
    *   The created event entity if any.
    * @param array|null $options
    *   The formatter options stored in the display.
@@ @@
    *
    * @param array $build
    *   Entity build array.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The current entity.
-   * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+   * @param EntityViewDisplayInterface $display
    *   The current enitity display.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsEventEntity $event
+   * @param VirtualEventsEventEntity $event
    *   The event enitity attached to the current entity.
-   * @param \Drupal\virtual_events\Entity\VirtualEventsFormatterEntity $formatters_config
+   * @param VirtualEventsFormatterEntity $formatters_config
    *   The event enitity attached to the current entity.
    * @param array $source_config
    *   The source plugin config from the event config entity.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/virtual_events/src/Entity/VirtualEventsEventEntity.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\virtual_events\Entity;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;

 /**
@@ @@
   /**
    * Get entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|bool
+   * @return EntityInterface|bool
    *   The entity false if not found
    */
   public function getEntity() {
@@ @@
   /**
    * Get the event formatter config object of a given event type if found.
    *
-   * @return \Drupal\virtual_events\Entity\VirtualEventsFormatterEntity
+   * @return VirtualEventsFormatterEntity
    *   Return formatter Config Entity if found for the given entity type,
    *   ortherwise it will return default formatter config
    */
@@ @@
   /**
    * Get the event config object of a given event type if found.
    *
-   * @return \Drupal\virtual_events\Entity\VirtualEventsConfigEntity|bool
+   * @return VirtualEventsConfigEntity|bool
    *   Return Config Entity if found for the given entity type,
    *   ortherwise it will return false
    */
@@ @@
   /**
    * Get the event config object of a given event type if found.
    *
-   * @return \Drupal\virtual_events\Entity\VirtualEventsConfigEntity|bool
+   * @return VirtualEventsConfigEntity|bool
    *   Return Config Entity if found for the given entity type,
    *   ortherwise it will return false
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/virtual_events/src/Entity/VirtualEventsConfigEntity.php:97

    ---------- begin diff ----------
@@ @@
   /**
    * Get the formatters config entity.
    *
-   * @return \Drupal\virtual_events\Entity\VirtualEventsFormatterEntity
+   * @return VirtualEventsFormatterEntity
    *   formatters config
    */
   public function getFormattersConfig() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/virtual_events/src/Controller/VirtualEventsEventEndedController.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Reload.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Request instance.
    *
    * @return string[]
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/virtual_events/src/Annotation/VirtualEventSourcePlugin.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\virtual_events\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


17) modules/contrib/virtual_events/src/Annotation/VirtualEventPreHandlePlugin.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\virtual_events\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


18) modules/contrib/virtual_events/src/Annotation/VirtualEventPostHandlePlugin.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\virtual_events\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


19) modules/contrib/virtual_events/src/Annotation/VirtualEventFormatterPlugin.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\virtual_events\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


 [OK] 19 files have been changed by Rector                                      

