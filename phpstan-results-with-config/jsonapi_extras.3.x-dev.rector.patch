diff --git a/modules/jsonapi_defaults/jsonapi_defaults.install b/modules/jsonapi_defaults/jsonapi_defaults.install
index 478b257..6faf42b 100644
--- a/modules/jsonapi_defaults/jsonapi_defaults.install
+++ b/modules/jsonapi_defaults/jsonapi_defaults.install
@@ -1,17 +1,18 @@
 <?php
 
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\Core\Config\Config;
 /**
  * @file
  * Install, update and uninstall functions for the JSON API Defaults module.
  */
-
 /**
  * Update third party settings default_include.
  */
 function jsonapi_defaults_update_8001() {
-  /** @var \Drupal\Core\Config\ConfigFactoryInterface $config_factory */
+  /** @var ConfigFactoryInterface $config_factory */
   $config_factory = \Drupal::configFactory();
-  /** @var \Drupal\Core\Config\Config $config */
+  /** @var Config $config */
   $config_list = $config_factory->listAll('jsonapi_extras.jsonapi_resource_config');
   foreach ($config_list as $config) {
     $config = $config_factory->getEditable($config);
diff --git a/modules/jsonapi_defaults/jsonapi_defaults.module b/modules/jsonapi_defaults/jsonapi_defaults.module
index 876ac23..99bbcf8 100644
--- a/modules/jsonapi_defaults/jsonapi_defaults.module
+++ b/modules/jsonapi_defaults/jsonapi_defaults.module
@@ -28,11 +28,11 @@ function jsonapi_defaults_form_jsonapi_resource_config_edit_form_alter(&$form, F
  *
  * @param array $form
  *   Drupal form array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   Drupal form_state object.
  */
 function _jsonapi_defaults_form_alter(array &$form, FormStateInterface $form_state) {
-  /** @var \Drupal\jsonapi_extras\Entity\JsonapiResourceConfig $config_resource */
+  /** @var JsonapiResourceConfig $config_resource */
   $config_resource = $form_state->getFormObject()->getEntity();
   $filters = _jsonapi_defaults_convert_value(
     $config_resource->getThirdPartySetting('jsonapi_defaults', 'default_filter')
diff --git a/modules/jsonapi_defaults/src/Controller/EntityResource.php b/modules/jsonapi_defaults/src/Controller/EntityResource.php
index 35ad553..ad60942 100644
--- a/modules/jsonapi_defaults/src/Controller/EntityResource.php
+++ b/modules/jsonapi_defaults/src/Controller/EntityResource.php
@@ -101,7 +101,7 @@ class EntityResource extends JsonApiEntityResourse {
    * {@inheritdoc}
    */
   public function getIncludes(Request $request, $data) {
-    /** @var \Drupal\jsonapi_extras\ResourceType\ConfigurableResourceType $resourceConfig */
+    /** @var ConfigurableResourceType $resourceConfig */
     if (
       ($resource_type = $request->get(Routes::RESOURCE_TYPE_KEY))
       && $resource_type instanceof ConfigurableResourceType
@@ -143,10 +143,10 @@ class EntityResource extends JsonApiEntityResourse {
    *
    * @param string $related_field
    *   The name of the related field to use. NULL if not using a related field.
-   * @param \Drupal\jsonapi\ResourceType\ResourceType $resource_type
+   * @param ResourceType $resource_type
    *   The resource type straight from the request.
    *
-   * @return \Drupal\jsonapi\ResourceType\ResourceType
+   * @return ResourceType
    *   The resource type to use to load the includes.
    *
    * @throws \LengthException
@@ -202,7 +202,7 @@ class EntityResource extends JsonApiEntityResourse {
    *
    * @param array $page_params
    *   The values of the page query parameter of the request.
-   * @param Drupal\jsonapi_extras\Entity\JsonapiResourceConfig $resource_config
+   * @param JsonapiResourceConfig $resource_config
    *   This resource's config entity.
    *
    * @return int
@@ -220,9 +220,9 @@ class EntityResource extends JsonApiEntityResourse {
   /**
    * Sets a jsonapi parameter for the page limit if applicable.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
-   * @param \Drupal\jsonapi_extras\Entity\JsonapiResourceConfig $resource_config
+   * @param JsonapiResourceConfig $resource_config
    *   The resource config entity to check for an override of the page limit.
    * @param array $params
    *   The parameters passed to jsonapi, passed by reference.
diff --git a/modules/jsonapi_defaults/src/JsonapiDefaultsServiceProvider.php b/modules/jsonapi_defaults/src/JsonapiDefaultsServiceProvider.php
index 60da4d7..8e3f52d 100644
--- a/modules/jsonapi_defaults/src/JsonapiDefaultsServiceProvider.php
+++ b/modules/jsonapi_defaults/src/JsonapiDefaultsServiceProvider.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\jsonapi_defaults;
 
+use Symfony\Component\DependencyInjection\Definition;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\DependencyInjection\ServiceProviderBase;
 
@@ -14,8 +15,7 @@ class JsonapiDefaultsServiceProvider extends ServiceProviderBase {
    * {@inheritdoc}
    */
   public function alter(ContainerBuilder $container) {
-    /** @var \Symfony\Component\DependencyInjection\Definition $definition */
-
+    /** @var Definition $definition */
     if ($container->hasDefinition('jsonapi.entity_resource')) {
       $definition = $container->getDefinition('jsonapi.entity_resource');
       $definition->setClass('Drupal\jsonapi_defaults\Controller\EntityResource');
diff --git a/modules/jsonapi_defaults/tests/src/Functional/JsonApiDefaultsFunctionalTest.php b/modules/jsonapi_defaults/tests/src/Functional/JsonApiDefaultsFunctionalTest.php
index e0bda7c..fa3ad7d 100644
--- a/modules/jsonapi_defaults/tests/src/Functional/JsonApiDefaultsFunctionalTest.php
+++ b/modules/jsonapi_defaults/tests/src/Functional/JsonApiDefaultsFunctionalTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\jsonapi_defaults\Functional;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Component\Serialization\Json;
 use Drupal\jsonapi\Query\OffsetPage;
 use Drupal\jsonapi_extras\Entity\JsonapiResourceConfig;
@@ -119,7 +120,7 @@ class JsonApiDefaultsFunctionalTest extends JsonApiExtrasFunctionalTestBase {
   /**
    * Checks standard pagination and page limit overrides.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testPagination() {
     /** @var \Drupal\Component\Serialization\JsonapiResourceConfig $resource_config */
@@ -146,8 +147,8 @@ class JsonApiDefaultsFunctionalTest extends JsonApiExtrasFunctionalTestBase {
     ]);
     $response = Json::decode($response);
     $this->assertArrayHasKey('data', $response);
-    $this->assertNotEqual(count($response['data']), $query_override);
-    $this->assertEqual(count($response['data']), static::PAGE_LIMIT_OVERRIDE_VALUE);
+    $this->assertNotEquals(count($response['data']), $query_override);
+    $this->assertEquals(count($response['data']), static::PAGE_LIMIT_OVERRIDE_VALUE);
   }
 
   /**
@@ -174,7 +175,7 @@ class JsonApiDefaultsFunctionalTest extends JsonApiExtrasFunctionalTestBase {
     $response = $this->drupalGet($jsonapi_response['links']['next']['href']);
     $jsonapi_response = Json::decode($response);
     $this->assertCount($page_limit, $jsonapi_response['data']);
-    $this->assertNotEqual($first_node_uuid, $jsonapi_response['data'][0]['attributes']['internalId']);
+    $this->assertNotEquals($first_node_uuid, $jsonapi_response['data'][0]['attributes']['internalId']);
     $this->assertArrayHasKey('next', $jsonapi_response['links']);
     $this->assertArrayHasKey('prev', $jsonapi_response['links']);
     $this->assertPagerLink(
@@ -214,7 +215,7 @@ class JsonApiDefaultsFunctionalTest extends JsonApiExtrasFunctionalTestBase {
    * @param array $values
    *   Combination of keys and values to set on the resource config.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setResouceConfigValue(array $values) {
     $resource_config = JsonapiResourceConfig::load('node--article');
diff --git a/src/Annotation/ResourceFieldEnhancer.php b/src/Annotation/ResourceFieldEnhancer.php
index 9a90350..b83299c 100644
--- a/src/Annotation/ResourceFieldEnhancer.php
+++ b/src/Annotation/ResourceFieldEnhancer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\jsonapi_extras\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -23,7 +24,7 @@ class ResourceFieldEnhancer extends Plugin {
   /**
    * The human-readable name of the formatter type.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -32,7 +33,7 @@ class ResourceFieldEnhancer extends Plugin {
   /**
    * A short description of the formatter type.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/EntityToJsonApi.php b/src/EntityToJsonApi.php
index c6e1c97..65901fd 100644
--- a/src/EntityToJsonApi.php
+++ b/src/EntityToJsonApi.php
@@ -22,41 +22,41 @@ class EntityToJsonApi {
   /**
    * The HTTP kernel.
    *
-   * @var \Symfony\Component\HttpKernel\HttpKernelInterface
+   * @var HttpKernelInterface
    */
   protected $httpKernel;
 
   /**
    * The JSON:API Resource Type Repository.
    *
-   * @var \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface
+   * @var ResourceTypeRepositoryInterface
    */
   protected $resourceTypeRepository;
 
   /**
    * A Session object.
    *
-   * @var \Symfony\Component\HttpFoundation\Session\SessionInterface
+   * @var SessionInterface
    */
   protected $session;
 
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|null
+   * @var Request|null
    */
   protected $currentRequest;
 
   /**
    * EntityToJsonApi constructor.
    *
-   * @param \Symfony\Component\HttpKernel\HttpKernelInterface $http_kernel
+   * @param HttpKernelInterface $http_kernel
    *   The HTTP kernel.
-   * @param \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface $resource_type_repository
+   * @param ResourceTypeRepositoryInterface $resource_type_repository
    *   The resource type repository.
-   * @param \Symfony\Component\HttpFoundation\Session\SessionInterface $session
+   * @param SessionInterface $session
    *   The session object.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The stack of requests.
    */
   public function __construct(
@@ -76,7 +76,7 @@ class EntityToJsonApi {
   /**
    * Return the requested entity as a raw string.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to generate the JSON from.
    * @param string[] $includes
    *   The list of includes.
@@ -118,7 +118,7 @@ class EntityToJsonApi {
   /**
    * Return the requested entity as an structured array.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to generate the JSON from.
    * @param string[] $includes
    *   The list of includes.
diff --git a/src/EventSubscriber/ConfigSubscriber.php b/src/EventSubscriber/ConfigSubscriber.php
index c76d098..e9c239c 100644
--- a/src/EventSubscriber/ConfigSubscriber.php
+++ b/src/EventSubscriber/ConfigSubscriber.php
@@ -2,13 +2,13 @@
 
 namespace Drupal\jsonapi_extras\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Cache\CacheableResponseInterface;
 use Drupal\Core\Config\ConfigCrudEvent;
 use Drupal\Core\Config\ConfigEvents;
 use Drupal\Core\DrupalKernelInterface;
 use Drupal\Core\Routing\RouteBuilderInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -19,23 +19,23 @@ class ConfigSubscriber implements EventSubscriberInterface {
   /**
    * The Drupal kernel.
    *
-   * @var \Drupal\Core\DrupalKernelInterface
+   * @var DrupalKernelInterface
    */
   protected $drupalKernel;
 
   /**
    * The route building service.
    *
-   * @var \Drupal\Core\Routing\RouteBuilderInterface
+   * @var RouteBuilderInterface
    */
   protected $routeBuilder;
 
   /**
    * Constructs a ConfigSubscriber object.
    *
-   * @param \Drupal\Core\DrupalKernelInterface $drupal_kernel
+   * @param DrupalKernelInterface $drupal_kernel
    *   The Drupal kernel.
-   * @param \Drupal\Core\Routing\RouteBuilderInterface $route_builder
+   * @param RouteBuilderInterface $route_builder
    *   The route building service.
    */
   public function __construct(DrupalKernelInterface $drupal_kernel, RouteBuilderInterface $route_builder) {
@@ -46,7 +46,7 @@ class ConfigSubscriber implements EventSubscriberInterface {
   /**
    * Rebuilds container and routes  when 'path_prefix' configuration is changed.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The Event to process.
    */
   public function onSave(ConfigCrudEvent $event) {
@@ -72,10 +72,10 @@ class ConfigSubscriber implements EventSubscriberInterface {
   /**
    * Associates JSON:API Extras' config cache tag with all JSON:API responses.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The response event.
    */
-  public function onResponse(FilterResponseEvent $event) {
+  public function onResponse(ResponseEvent $event) {
     if ($event->getRequest()->getRequestFormat() !== 'api_json') {
       return;
     }
diff --git a/src/EventSubscriber/JsonApiBuildSubscriber.php b/src/EventSubscriber/JsonApiBuildSubscriber.php
index efe67c1..5891fc3 100644
--- a/src/EventSubscriber/JsonApiBuildSubscriber.php
+++ b/src/EventSubscriber/JsonApiBuildSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\jsonapi_extras\EventSubscriber;
 
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\jsonapi\ResourceType\ResourceTypeBuildEvent;
@@ -17,7 +18,7 @@ use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 class JsonApiBuildSubscriber implements EventSubscriberInterface {
 
   /**
-   * @var \Drupal\jsonapi_extras\ResourceType\ConfigurableResourceTypeRepository
+   * @var ConfigurableResourceTypeRepository
    *  The extra's resource repository
    */
   private $repository;
@@ -25,16 +26,16 @@ class JsonApiBuildSubscriber implements EventSubscriberInterface {
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   private $configFactory;
 
   /**
    * JsonApiBuildSubscriber constructor.
    *
-   * @param \Drupal\jsonapi_extras\ResourceType\ConfigurableResourceTypeRepository $repository
+   * @param ConfigurableResourceTypeRepository $repository
    *   Repository from jsonapi_extras is needed to apply configuration.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface|null $configFactory
+   * @param ConfigFactoryInterface|null $configFactory
    *   Config factory.
    */
   public function __construct(ConfigurableResourceTypeRepository $repository, ConfigFactoryInterface $configFactory = NULL) {
@@ -57,10 +58,10 @@ class JsonApiBuildSubscriber implements EventSubscriberInterface {
   /**
    * Apply resource config through the event.
    *
-   * @param \Drupal\jsonapi\ResourceType\ResourceTypeBuildEvent $event
+   * @param ResourceTypeBuildEvent $event
    *   The build event used to change the resources and fields.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function applyResourceConfig(ResourceTypeBuildEvent $event) {
     $resource_config = $this->getResourceConfig($event->getResourceTypeName());
@@ -82,7 +83,7 @@ class JsonApiBuildSubscriber implements EventSubscriberInterface {
    * @param string $resource_config_id
    *   The configuration entity ID.
    *
-   * @return \Drupal\jsonapi_extras\Entity\JsonapiResourceConfig
+   * @return JsonapiResourceConfig
    *   The configuration entity for the resource type.
    */
   protected function getResourceConfig($resource_config_id) {
@@ -102,12 +103,12 @@ class JsonApiBuildSubscriber implements EventSubscriberInterface {
   /**
    * Gets the fields for the given field names and entity type + bundle.
    *
-   * @param \Drupal\jsonapi_extras\Entity\JsonapiResourceConfig $resource_config
+   * @param JsonapiResourceConfig $resource_config
    *   The associated resource config.
-   * @param \Drupal\jsonapi\ResourceType\ResourceTypeBuildEvent $event
+   * @param ResourceTypeBuildEvent $event
    *   The associated resource config.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   protected function overrideFields(JsonapiResourceConfig $resource_config, ResourceTypeBuildEvent $event) {
     // Use the base class to fetch the non-configurable field mappings.
diff --git a/src/Form/JsonapiExtrasSettingsForm.php b/src/Form/JsonapiExtrasSettingsForm.php
index dd06b3a..685a662 100644
--- a/src/Form/JsonapiExtrasSettingsForm.php
+++ b/src/Form/JsonapiExtrasSettingsForm.php
@@ -23,18 +23,18 @@ class JsonapiExtrasSettingsForm extends ConfigFormBase {
   /**
    * Resource type repository.
    *
-   * @var \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface
+   * @var ResourceTypeRepositoryInterface
    */
   protected $jsonApiResourceRepository;
 
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\ProxyClass\Routing\RouteBuilder $router_builder
+   * @param RouteBuilder $router_builder
    *   The router builder to rebuild menus after saving config entity.
-   * @param \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface $jsonApiResourceRepository
+   * @param ResourceTypeRepositoryInterface $jsonApiResourceRepository
    *   Resource type repository.
    */
   public function __construct(ConfigFactoryInterface $config_factory, RouteBuilder $router_builder, ResourceTypeRepositoryInterface $jsonApiResourceRepository) {
diff --git a/src/Form/JsonapiResourceConfigForm.php b/src/Form/JsonapiResourceConfigForm.php
index 3e75220..cff9aeb 100644
--- a/src/Form/JsonapiResourceConfigForm.php
+++ b/src/Form/JsonapiResourceConfigForm.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\jsonapi_extras\Form;
 
+use Drupal\jsonapi\ResourceType\ResourceTypeRepository;
+use Symfony\Component\Validator\ConstraintViolation;
+use Drupal\Core\Config\Entity\ConfigEntityTypeInterface;
+use Drupal\jsonapi_extras\Plugin\ResourceFieldEnhancerInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Utility\NestedArray;
@@ -30,77 +34,77 @@ class JsonapiResourceConfigForm extends EntityForm {
   /**
    * The bundle information service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInfo;
 
   /**
    * The JSON:API resource type repository.
    *
-   * @var \Drupal\jsonapi\ResourceType\ResourceTypeRepository
+   * @var ResourceTypeRepository
    */
   protected $resourceTypeRepository;
 
   /**
    * The field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $fieldManager;
 
   /**
    * The entity type repository.
    *
-   * @var \Drupal\Core\Entity\EntityTypeRepositoryInterface
+   * @var EntityTypeRepositoryInterface
    */
   protected $entityTypeRepository;
 
   /**
    * The field enhancer manager.
    *
-   * @var \Drupal\jsonapi_extras\Plugin\ResourceFieldEnhancerManager
+   * @var ResourceFieldEnhancerManager
    */
   protected $enhancerManager;
 
   /**
    * The JSON:API extras config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
    * The current route match.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * The typed config manager.
    *
-   * @var \Drupal\Core\Config\TypedConfigManagerInterface
+   * @var TypedConfigManagerInterface
    */
   protected $typedConfigManager;
 
   /**
    * JsonapiResourceConfigForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info
+   * @param EntityTypeBundleInfoInterface $bundle_info
    *   Bundle information service.
-   * @param \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface $resource_type_repository
+   * @param ResourceTypeRepositoryInterface $resource_type_repository
    *   The JSON:API resource type repository.
-   * @param \Drupal\Core\Entity\EntityFieldManager $field_manager
+   * @param EntityFieldManager $field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Entity\EntityTypeRepositoryInterface $entity_type_repository
+   * @param EntityTypeRepositoryInterface $entity_type_repository
    *   The entity type repository.
-   * @param \Drupal\jsonapi_extras\Plugin\ResourceFieldEnhancerManager $enhancer_manager
+   * @param ResourceFieldEnhancerManager $enhancer_manager
    *   The plugin manager for the resource field enhancer.
-   * @param \Drupal\Core\Config\ImmutableConfig $config
+   * @param ImmutableConfig $config
    *   The config instance.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The HTTP request.
-   * @param \Drupal\Core\Config\TypedConfigManagerInterface $typed_config_manager
+   * @param TypedConfigManagerInterface $typed_config_manager
    *   The typed config manager.
    */
   public function __construct(EntityTypeBundleInfoInterface $bundle_info, ResourceTypeRepositoryInterface $resource_type_repository, EntityFieldManager $field_manager, EntityTypeRepositoryInterface $entity_type_repository, ResourceFieldEnhancerManager $enhancer_manager, ImmutableConfig $config, Request $request, TypedConfigManagerInterface $typed_config_manager) {
@@ -141,7 +145,7 @@ class JsonapiResourceConfigForm extends EntityForm {
     $entity_type_id = $this->request->get('entity_type_id');
     $bundle = $this->request->get('bundle');
 
-    /** @var \Drupal\jsonapi_extras\Entity\JsonapiResourceConfig $entity */
+    /** @var JsonapiResourceConfig $entity */
     $entity = $this->getEntity();
     $resource_id = $entity->get('id');
     // If we are editing an entity we don't want the Entity Type and Bundle
@@ -190,7 +194,7 @@ class JsonapiResourceConfigForm extends EntityForm {
     $typed_config = $this->typedConfigManager
       ->createFromNameAndData($this->entity->id(), $this->entity->toArray());
     $constraints = $typed_config->validate();
-    /** @var \Symfony\Component\Validator\ConstraintViolation $violation */
+    /** @var ConstraintViolation $violation */
     foreach ($constraints as $violation) {
       $form_path = str_replace('.', '][', $violation->getPropertyPath());
       $form_state->setErrorByName($form_path, $violation->getMessage());
@@ -222,19 +226,19 @@ class JsonapiResourceConfigForm extends EntityForm {
   /**
    * Builds the part of the form that contains the overrides.
    *
-   * @param \Drupal\jsonapi\ResourceType\ResourceType $resource_type
+   * @param ResourceType $resource_type
    *   The resource type being overridden.
-   * @param \Drupal\jsonapi_extras\Entity\JsonapiResourceConfig $entity
+   * @param JsonapiResourceConfig $entity
    *   The configuration entity backing this form.
    *
    * @return array
    *   The partial form.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   protected function buildOverridesForm(ResourceType $resource_type, JsonapiResourceConfig $entity) {
     $entity_type_id = $resource_type->getEntityTypeId();
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityTypeInterface $entity_type */
+    /** @var ConfigEntityTypeInterface $entity_type */
     $entity_type = $this->entityTypeManager->getDefinition($entity_type_id);
     $bundle = $resource_type->getBundle();
     $field_names = $this->getAllFieldNames($entity_type, $bundle);
@@ -357,7 +361,7 @@ class JsonapiResourceConfigForm extends EntityForm {
    * {@inheritdoc}
    */
   public function buildEntity(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\jsonapi_extras\Entity\JsonapiResourceConfig $entity */
+    /** @var JsonapiResourceConfig $entity */
     $entity = parent::buildEntity($form, $form_state);
 
     // Trim slashes from path.
@@ -374,13 +378,13 @@ class JsonapiResourceConfigForm extends EntityForm {
    *
    * @param string $field_name
    *   The field name of the field being overridden.
-   * @param \Drupal\jsonapi_extras\Entity\JsonapiResourceConfig $entity
+   * @param JsonapiResourceConfig $entity
    *   The config entity backed by this form.
    *
    * @return array
    *   The partial form.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function buildOverridesField($field_name, JsonapiResourceConfig $entity) {
     $rfs = $entity->get('resourceFields') ?: [];
@@ -463,7 +467,7 @@ class JsonapiResourceConfigForm extends EntityForm {
       '#attributes' => ['id' => $field_name . '-settings-wrapper'],
     ];
     if (!empty($resource_field['enhancer']['id'])) {
-      /** @var \Drupal\jsonapi_extras\Plugin\ResourceFieldEnhancerInterface $enhancer */
+      /** @var ResourceFieldEnhancerInterface $enhancer */
       $enhancer = $this->enhancerManager
         ->createInstance($resource_field['enhancer']['id'], []);
       $overrides_form['enhancer']['settings'] += $enhancer
@@ -477,7 +481,7 @@ class JsonapiResourceConfigForm extends EntityForm {
    *
    * @param array $form
    *   The reference to the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return mixed
@@ -508,7 +512,7 @@ class JsonapiResourceConfigForm extends EntityForm {
   /**
    * Gets all field names for a given entity type and bundle.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type for which to get all field names.
    * @param string $bundle
    *   The bundle for which to get all field names.
diff --git a/src/JsonapiResourceConfigListBuilder.php b/src/JsonapiResourceConfigListBuilder.php
index e2282ec..e3912df 100644
--- a/src/JsonapiResourceConfigListBuilder.php
+++ b/src/JsonapiResourceConfigListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\jsonapi_extras;
 
+use Drupal\jsonapi_extras\ResourceType\ConfigurableResourceTypeRepository;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -22,36 +23,36 @@ class JsonapiResourceConfigListBuilder extends ConfigEntityListBuilder {
   /**
    * The JSON:API configurable resource type repository.
    *
-   * @var \Drupal\jsonapi_extras\ResourceType\ConfigurableResourceTypeRepository
+   * @var ConfigurableResourceTypeRepository
    */
   protected $resourceTypeRepository;
 
   /**
    * The JSON:API extras config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|null
+   * @var EntityTypeManagerInterface|null
    */
   protected $entityTypeManager;
 
   /**
    * Constructs new JsonapiResourceConfigListBuilder.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The storage.
    * @param ResourceTypeRepositoryInterface $resource_type_repository
    *   The JSON:API resource type repository.
-   * @param \Drupal\Core\Config\ImmutableConfig $config
+   * @param ImmutableConfig $config
    *   The config instance.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface|null $entityTypeManager
+   * @param EntityTypeManagerInterface|null $entityTypeManager
    *   Entity type manager.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, ResourceTypeRepositoryInterface $resource_type_repository, ImmutableConfig $config, EntityTypeManagerInterface $entityTypeManager = NULL) {
@@ -153,7 +154,7 @@ class JsonapiResourceConfigListBuilder extends ConfigEntityListBuilder {
     }
 
     $prefix = $this->config->get('path_prefix');
-    /** @var \Drupal\jsonapi_extras\ResourceType\ConfigurableResourceType[] $resource_types */
+    /** @var ConfigurableResourceType[] $resource_types */
     $resource_types = $this->resourceTypeRepository->all();
     $default_disabled = $this->config->get('default_disabled');
     foreach ($resource_types as $resource_type) {
@@ -162,7 +163,7 @@ class JsonapiResourceConfigListBuilder extends ConfigEntityListBuilder {
         ? $resource_type->getJsonapiResourceConfig()
         : NULL;
 
-      /** @var \Drupal\jsonapi_extras\ResourceType\ConfigurableResourceType $resource_type */
+      /** @var ConfigurableResourceType $resource_type */
       $entity_type_id = $resource_type->getEntityTypeId();
       $bundle = $resource_type->getBundle();
 
diff --git a/src/Normalizer/ConfigEntityDenormalizer.php b/src/Normalizer/ConfigEntityDenormalizer.php
index 54faa1e..e7e1b77 100644
--- a/src/Normalizer/ConfigEntityDenormalizer.php
+++ b/src/Normalizer/ConfigEntityDenormalizer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\jsonapi_extras\Normalizer;
 
+use Drupal\jsonapi_extras\Plugin\ResourceFieldEnhancerInterface;
 use Drupal\jsonapi\ResourceType\ResourceType;
 
 /**
@@ -21,7 +22,7 @@ class ConfigEntityDenormalizer extends JsonApiNormalizerDecoratorBase {
    */
   protected function prepareInput(array $data, ResourceType $resource_type) {
     foreach ($data as $public_field_name => &$field_value) {
-      /** @var \Drupal\jsonapi_extras\Plugin\ResourceFieldEnhancerInterface $enhancer */
+      /** @var ResourceFieldEnhancerInterface $enhancer */
       $enhancer = $resource_type->getFieldEnhancer($public_field_name);
       if (!$enhancer) {
         continue;
diff --git a/src/Normalizer/ContentEntityDenormalizer.php b/src/Normalizer/ContentEntityDenormalizer.php
index d699ae1..ce8b3a6 100644
--- a/src/Normalizer/ContentEntityDenormalizer.php
+++ b/src/Normalizer/ContentEntityDenormalizer.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\jsonapi_extras\Normalizer;
 
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
+use Drupal\jsonapi_extras\ResourceType\ConfigurableResourceType;
 use Drupal\jsonapi\ResourceType\ResourceType;
 
 /**
@@ -21,20 +23,20 @@ class ContentEntityDenormalizer extends JsonApiNormalizerDecoratorBase {
    *
    * @param array $data
    *   The input data to modify.
-   * @param \Drupal\jsonapi\ResourceType\ResourceType $resource_type
+   * @param ResourceType $resource_type
    *   Contains the info about the resource type.
    *
    * @return array
    *   The modified input data.
    */
   protected function prepareInput(array $data, ResourceType $resource_type) {
-    /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface[] $field_storage_definitions */
+    /** @var FieldStorageDefinitionInterface[] $field_storage_definitions */
     $field_storage_definitions = \Drupal::service('entity_field.manager')
       ->getFieldStorageDefinitions(
         $resource_type->getEntityTypeId()
       );
     $data_internal = [];
-    /** @var \Drupal\jsonapi_extras\ResourceType\ConfigurableResourceType $resource_type */
+    /** @var ConfigurableResourceType $resource_type */
     // Translate the public fields into the entity fields.
     foreach ($data as $public_field_name => $field_value) {
       // Skip any disabled field.
diff --git a/src/Normalizer/FieldItemNormalizer.php b/src/Normalizer/FieldItemNormalizer.php
index 598c457..23aa6bb 100644
--- a/src/Normalizer/FieldItemNormalizer.php
+++ b/src/Normalizer/FieldItemNormalizer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\jsonapi_extras\Normalizer;
 
+use Drupal\jsonapi_extras\ResourceType\ConfigurableResourceType;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\jsonapi\Normalizer\FieldItemNormalizer as JsonapiFieldItemNormalizer;
@@ -18,14 +19,14 @@ class FieldItemNormalizer extends JsonApiNormalizerDecoratorBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The field enhancer manager.
    *
-   * @var \Drupal\jsonapi_extras\Plugin\ResourceFieldEnhancerManager
+   * @var ResourceFieldEnhancerManager
    */
   protected $enhancerManager;
 
@@ -34,9 +35,9 @@ class FieldItemNormalizer extends JsonApiNormalizerDecoratorBase {
    *
    * @param \Drupal\jsonapi\Normalizer\FieldItemNormalizer $inner
    *   The JSON:API field normalizer entity.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\jsonapi_extras\Plugin\ResourceFieldEnhancerManager $enhancer_manager
+   * @param ResourceFieldEnhancerManager $enhancer_manager
    *   The field enhancer manager.
    */
   public function __construct(JsonapiFieldItemNormalizer $inner, EntityTypeManagerInterface $entity_type_manager, ResourceFieldEnhancerManager $enhancer_manager) {
@@ -52,7 +53,7 @@ class FieldItemNormalizer extends JsonApiNormalizerDecoratorBase {
     // First get the regular output.
     $normalized_output = parent::normalize($object, $format, $context);
     // Then detect if there is any enhancer to be applied here.
-    /** @var \Drupal\jsonapi_extras\ResourceType\ConfigurableResourceType $resource_type */
+    /** @var ConfigurableResourceType $resource_type */
     $resource_type = $context['resource_object']->getResourceType();
     $enhancer = $resource_type->getFieldEnhancer($object->getParent()->getName());
     if (!$enhancer) {
diff --git a/src/Normalizer/JsonApiNormalizerDecoratorBase.php b/src/Normalizer/JsonApiNormalizerDecoratorBase.php
index eec01e5..1a50d4d 100644
--- a/src/Normalizer/JsonApiNormalizerDecoratorBase.php
+++ b/src/Normalizer/JsonApiNormalizerDecoratorBase.php
@@ -15,14 +15,14 @@ class JsonApiNormalizerDecoratorBase implements NormalizerInterface, Denormalize
   /**
    * The decorated (de)normalizer.
    *
-   * @var \Symfony\Component\Serializer\SerializerAwareInterface|\Symfony\Component\Serializer\Normalizer\NormalizerInterface|\Symfony\Component\Serializer\Normalizer\DenormalizerInterface
+   * @var SerializerAwareInterface|NormalizerInterface|DenormalizerInterface
    */
   protected $inner;
 
   /**
    * JsonApiNormalizerDecoratorBase constructor.
    *
-   * @param \Symfony\Component\Serializer\SerializerAwareInterface|\Symfony\Component\Serializer\Normalizer\NormalizerInterface|\Symfony\Component\Serializer\Normalizer\DenormalizerInterface $inner
+   * @param SerializerAwareInterface|NormalizerInterface|DenormalizerInterface $inner
    *   The decorated normalizer or denormalizer.
    */
   public function __construct($inner) {
diff --git a/src/Normalizer/ResourceIdentifierNormalizer.php b/src/Normalizer/ResourceIdentifierNormalizer.php
index e112004..adb35d2 100644
--- a/src/Normalizer/ResourceIdentifierNormalizer.php
+++ b/src/Normalizer/ResourceIdentifierNormalizer.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\jsonapi_extras\Normalizer;
 
+use Symfony\Component\Serializer\SerializerAwareInterface;
+use Symfony\Component\Serializer\Normalizer\NormalizerInterface;
+use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Field\EntityReferenceFieldItemListInterface;
@@ -23,16 +26,16 @@ class ResourceIdentifierNormalizer extends JsonApiNormalizerDecoratorBase {
   /**
    * The resource type repository for changes on the target resource type.
    *
-   * @var \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface
+   * @var ResourceTypeRepositoryInterface
    */
   protected $resourceTypeRepository;
 
   /**
    * Instantiates a ResourceIdentifierNormalizer object.
    *
-   * @param \Symfony\Component\Serializer\SerializerAwareInterface|\Symfony\Component\Serializer\Normalizer\NormalizerInterface|\Symfony\Component\Serializer\Normalizer\DenormalizerInterface $inner
+   * @param SerializerAwareInterface|NormalizerInterface|DenormalizerInterface $inner
    *   The decorated normalizer.
-   * @param \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface $resource_type_repository
+   * @param ResourceTypeRepositoryInterface $resource_type_repository
    *   The repository.
    */
   public function __construct($inner, ResourceTypeRepositoryInterface $resource_type_repository) {
@@ -86,7 +89,7 @@ class ResourceIdentifierNormalizer extends JsonApiNormalizerDecoratorBase {
    *
    * @param string $uuid
    *   The uuid being referenced.
-   * @param \Drupal\jsonapi\JsonApiResource\ResourceObject $resource_object
+   * @param ResourceObject $resource_object
    *   The object being normalized.
    *
    * @return string|null
diff --git a/src/Normalizer/ResourceObjectNormalizer.php b/src/Normalizer/ResourceObjectNormalizer.php
index edec9aa..d2e9e4e 100644
--- a/src/Normalizer/ResourceObjectNormalizer.php
+++ b/src/Normalizer/ResourceObjectNormalizer.php
@@ -39,7 +39,7 @@ class ResourceObjectNormalizer extends JsonApiNormalizerDecoratorBase {
    *   The parent object.
    * @param array $normalization
    *   The normalization to be enhanced.
-   * @param \Drupal\jsonapi_extras\ResourceType\ConfigurableResourceType $resource_type
+   * @param ConfigurableResourceType $resource_type
    *   The resource type of the normalized resource object.
    *
    * @return array
diff --git a/src/Plugin/ResourceFieldEnhancerManager.php b/src/Plugin/ResourceFieldEnhancerManager.php
index 4123d17..6aef114 100644
--- a/src/Plugin/ResourceFieldEnhancerManager.php
+++ b/src/Plugin/ResourceFieldEnhancerManager.php
@@ -17,9 +17,9 @@ class ResourceFieldEnhancerManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/Validation/Constraint/DuplicateFieldConstraintValidator.php b/src/Plugin/Validation/Constraint/DuplicateFieldConstraintValidator.php
index 657c91e..e131376 100644
--- a/src/Plugin/Validation/Constraint/DuplicateFieldConstraintValidator.php
+++ b/src/Plugin/Validation/Constraint/DuplicateFieldConstraintValidator.php
@@ -14,7 +14,7 @@ class DuplicateFieldConstraintValidator extends ConstraintValidator {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
diff --git a/src/Plugin/jsonapi/FieldEnhancer/JSONFieldEnhancer.php b/src/Plugin/jsonapi/FieldEnhancer/JSONFieldEnhancer.php
index 3851b9a..9753e26 100644
--- a/src/Plugin/jsonapi/FieldEnhancer/JSONFieldEnhancer.php
+++ b/src/Plugin/jsonapi/FieldEnhancer/JSONFieldEnhancer.php
@@ -35,7 +35,7 @@ class JSONFieldEnhancer extends ResourceFieldEnhancerBase implements ContainerFa
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Component\Serialization\Json $encoder
+   * @param Json $encoder
    *   The serialization json.
    */
   public function __construct(array $configuration, string $plugin_id, $plugin_definition, Json $encoder) {
diff --git a/src/Plugin/jsonapi/FieldEnhancer/UrlLinkEnhancer.php b/src/Plugin/jsonapi/FieldEnhancer/UrlLinkEnhancer.php
index 5796663..d88bdcd 100644
--- a/src/Plugin/jsonapi/FieldEnhancer/UrlLinkEnhancer.php
+++ b/src/Plugin/jsonapi/FieldEnhancer/UrlLinkEnhancer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\jsonapi_extras\Plugin\jsonapi\FieldEnhancer;
 
+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -24,14 +25,14 @@ class UrlLinkEnhancer extends ResourceFieldEnhancerBase implements ContainerFact
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The logger service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
@@ -44,9 +45,9 @@ class UrlLinkEnhancer extends ResourceFieldEnhancerBase implements ContainerFact
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger service.
    */
   public function __construct(
diff --git a/src/Plugin/jsonapi/FieldEnhancer/UuidLinkEnhancer.php b/src/Plugin/jsonapi/FieldEnhancer/UuidLinkEnhancer.php
index 5c0383c..8c12281 100644
--- a/src/Plugin/jsonapi/FieldEnhancer/UuidLinkEnhancer.php
+++ b/src/Plugin/jsonapi/FieldEnhancer/UuidLinkEnhancer.php
@@ -22,7 +22,7 @@ class UuidLinkEnhancer extends ResourceFieldEnhancerBase implements ContainerFac
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
diff --git a/src/ResourceType/ConfigurableResourceType.php b/src/ResourceType/ConfigurableResourceType.php
index b70313f..31a7a6a 100644
--- a/src/ResourceType/ConfigurableResourceType.php
+++ b/src/ResourceType/ConfigurableResourceType.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\jsonapi_extras\ResourceType;
 
+use Drupal\jsonapi_extras\Plugin\ResourceFieldEnhancerInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\jsonapi\ResourceType\ResourceType;
@@ -19,21 +20,21 @@ class ConfigurableResourceType extends ResourceType {
   /**
    * The JsonapiResourceConfig entity.
    *
-   * @var \Drupal\jsonapi_extras\Entity\JsonapiResourceConfig
+   * @var JsonapiResourceConfig
    */
   protected $jsonapiResourceConfig;
 
   /**
    * Plugin manager for enhancers.
    *
-   * @var \Drupal\jsonapi_extras\Plugin\ResourceFieldEnhancerManager
+   * @var ResourceFieldEnhancerManager
    */
   protected $enhancerManager;
 
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -47,7 +48,7 @@ class ConfigurableResourceType extends ResourceType {
   /**
    * Returns the jsonapi_resource_config.
    *
-   * @return \Drupal\jsonapi_extras\Entity\JsonapiResourceConfig
+   * @return JsonapiResourceConfig
    *   The jsonapi_resource_config entity.
    */
   public function getJsonapiResourceConfig() {
@@ -57,7 +58,7 @@ class ConfigurableResourceType extends ResourceType {
   /**
    * Sets the jsonapi_resource_config.
    *
-   * @param \Drupal\jsonapi_extras\Entity\JsonapiResourceConfig $resource_config
+   * @param JsonapiResourceConfig $resource_config
    *   The jsonapi_resource_config entity.
    */
   public function setJsonapiResourceConfig(JsonapiResourceConfig $resource_config) {
@@ -125,7 +126,7 @@ class ConfigurableResourceType extends ResourceType {
   /**
    * Injects the config factory.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The field enhancer manager.
    */
   public function setConfigFactory(ConfigFactoryInterface $config_factory) {
@@ -135,7 +136,7 @@ class ConfigurableResourceType extends ResourceType {
   /**
    * Injects the field enhancer manager.
    *
-   * @param \Drupal\jsonapi_extras\Plugin\ResourceFieldEnhancerManager $enhancer_manager
+   * @param ResourceFieldEnhancerManager $enhancer_manager
    *   The field enhancer manager.
    */
   public function setEnhancerManager(ResourceFieldEnhancerManager $enhancer_manager) {
@@ -150,7 +151,7 @@ class ConfigurableResourceType extends ResourceType {
    * @param string $from
    *   The realm of the provided field name.
    *
-   * @return \Drupal\jsonapi_extras\Plugin\ResourceFieldEnhancerInterface|null
+   * @return ResourceFieldEnhancerInterface|null
    *   The enhancer plugin. NULL if not found.
    */
   public function getFieldEnhancer($field_name, $from = 'fieldName') {
@@ -168,7 +169,7 @@ class ConfigurableResourceType extends ResourceType {
         $settings = $enhancer_info['settings'];
       }
       // Get the enhancer instance.
-      /** @var \Drupal\jsonapi_extras\Plugin\ResourceFieldEnhancerInterface $enhancer */
+      /** @var ResourceFieldEnhancerInterface $enhancer */
       $enhancer = $this->enhancerManager->createInstance(
         $enhancer_info['id'],
         $settings
diff --git a/src/ResourceType/ConfigurableResourceTypeRepository.php b/src/ResourceType/ConfigurableResourceTypeRepository.php
index af5846a..59fdbad 100644
--- a/src/ResourceType/ConfigurableResourceTypeRepository.php
+++ b/src/ResourceType/ConfigurableResourceTypeRepository.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\jsonapi_extras\ResourceType;
 
+use Drupal\jsonapi_extras\Entity\JsonapiResourceConfig;
+use Drupal\jsonapi\ResourceType\ResourceType;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ -18,42 +20,42 @@ class ConfigurableResourceTypeRepository extends ResourceTypeRepository {
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * Plugin manager for enhancers.
    *
-   * @var \Drupal\jsonapi_extras\Plugin\ResourceFieldEnhancerManager
+   * @var ResourceFieldEnhancerManager
    */
   protected $enhancerManager;
 
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * A list of all resource types.
    *
-   * @var \Drupal\jsonapi_extras\ResourceType\ConfigurableResourceType[]
+   * @var ConfigurableResourceType[]
    */
   protected $resourceTypes;
 
   /**
    * A list of only enabled resource types.
    *
-   * @var \Drupal\jsonapi_extras\ResourceType\ConfigurableResourceType[]
+   * @var ConfigurableResourceType[]
    */
   protected $enabledResourceTypes;
 
   /**
    * A list of all resource configuration entities.
    *
-   * @var \Drupal\jsonapi_extras\Entity\JsonapiResourceConfig[]
+   * @var JsonapiResourceConfig[]
    */
   protected static $resourceConfigs;
 
@@ -95,7 +97,7 @@ class ConfigurableResourceTypeRepository extends ResourceTypeRepository {
   /**
    * Injects the entity repository.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
    */
   public function setEntityRepository(EntityRepositoryInterface $entity_repository) {
@@ -105,7 +107,7 @@ class ConfigurableResourceTypeRepository extends ResourceTypeRepository {
   /**
    * Injects the resource enhancer manager.
    *
-   * @param \Drupal\jsonapi_extras\Plugin\ResourceFieldEnhancerManager $enhancer_manager
+   * @param ResourceFieldEnhancerManager $enhancer_manager
    *   The resource enhancer manager.
    */
   public function setEnhancerManager(ResourceFieldEnhancerManager $enhancer_manager) {
@@ -115,7 +117,7 @@ class ConfigurableResourceTypeRepository extends ResourceTypeRepository {
   /**
    * Injects the configuration factory.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function setConfigFactory(ConfigFactoryInterface $config_factory) {
@@ -165,7 +167,7 @@ class ConfigurableResourceTypeRepository extends ResourceTypeRepository {
    * @param string $resource_config_id
    *   The configuration entity ID.
    *
-   * @return \Drupal\jsonapi_extras\Entity\JsonapiResourceConfig
+   * @return JsonapiResourceConfig
    *   The configuration entity for the resource type.
    */
   protected function getResourceConfig($resource_config_id) {
@@ -187,10 +189,10 @@ class ConfigurableResourceTypeRepository extends ResourceTypeRepository {
   /**
    * Load all resource configuration entities.
    *
-   * @return \Drupal\jsonapi_extras\Entity\JsonapiResourceConfig[]
+   * @return JsonapiResourceConfig[]
    *   The resource config entities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function getResourceConfigs() {
     if (!static::$resourceConfigs) {
@@ -308,14 +310,14 @@ class ConfigurableResourceTypeRepository extends ResourceTypeRepository {
   /**
    * Lookups resource type by the internal and public identifiers.
    *
-   * @param \Drupal\jsonapi\ResourceType\ResourceType[] $resource_types
+   * @param ResourceType[] $resource_types
    *   The list of resource types to do a lookup.
    * @param string $entity_type_id
    *   The entity type of a seekable resource.
    * @param string $bundle
    *   The entity bundle of a seekable resource.
    *
-   * @return \Drupal\jsonapi\ResourceType\ResourceType|null
+   * @return ResourceType|null
    *   The resource type or NULL if it cannot be found.
    *
    * @todo Remove this code when Drupal 8 support is dropped
diff --git a/src/SerializerDecorator.php b/src/SerializerDecorator.php
index b866585..577ff43 100644
--- a/src/SerializerDecorator.php
+++ b/src/SerializerDecorator.php
@@ -17,7 +17,7 @@ class SerializerDecorator implements SerializerInterface, NormalizerInterface, D
   /**
    * The decorated JSON:API serializer service.
    *
-   * @var \Drupal\jsonapi\Serializer\Serializer
+   * @var Serializer
    */
   protected $decoratedSerializer;
 
@@ -31,7 +31,7 @@ class SerializerDecorator implements SerializerInterface, NormalizerInterface, D
   /**
    * Constructs a SerializerDecorator.
    *
-   * @param \Drupal\jsonapi\Serializer\Serializer $serializer
+   * @param Serializer $serializer
    *   The decorated JSON:API serializer.
    */
   public function __construct(Serializer $serializer) {
diff --git a/tests/src/Functional/JsonApiExtrasFunctionalTest.php b/tests/src/Functional/JsonApiExtrasFunctionalTest.php
index c40a50c..57584f7 100644
--- a/tests/src/Functional/JsonApiExtrasFunctionalTest.php
+++ b/tests/src/Functional/JsonApiExtrasFunctionalTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\jsonapi_extras\Functional;
 
+use Drupal\jsonapi_extras\ResourceType\ConfigurableResourceTypeRepository;
+use Symfony\Component\Routing\RouteCollection;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
@@ -36,7 +38,7 @@ class JsonApiExtrasFunctionalTest extends JsonApiFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     // Check that the e0ipso/shaper library is available.
     if (!class_exists("\\Shaper\\DataAdaptor\\DataAdaptorBase")) {
       $this->fail('The e0ipso/shaper library is missing. You can install it with `composer require e0ipso/shaper`.');
@@ -194,7 +196,7 @@ class JsonApiExtrasFunctionalTest extends JsonApiFunctionalTestBase {
    * @todo Create a test similar to this
    */
   public function testResourceTypeFieldAliasing() {
-    /** @var \Drupal\jsonapi_extras\ResourceType\ConfigurableResourceTypeRepository $resourceTypeRepository */
+    /** @var ConfigurableResourceTypeRepository $resourceTypeRepository */
     $resourceTypeRepository = $this->container->get('jsonapi.resource_type.repository');
 
     $nodeArticleType = $resourceTypeRepository->getByTypeName('node--article');
@@ -225,7 +227,7 @@ class JsonApiExtrasFunctionalTest extends JsonApiFunctionalTestBase {
     $this->nodes[40]->save();
 
     // 1. Make sure the api root is under '/api' and not '/jsonapi'.
-    /** @var \Symfony\Component\Routing\RouteCollection $route_collection */
+    /** @var RouteCollection $route_collection */
     $route_collection = \Drupal::service('router.route_provider')
       ->getRoutesByPattern('/api');
     $this->assertInstanceOf(
diff --git a/tests/src/Functional/JsonApiExtrasFunctionalTestBase.php b/tests/src/Functional/JsonApiExtrasFunctionalTestBase.php
index 7dd399f..7bac38b 100644
--- a/tests/src/Functional/JsonApiExtrasFunctionalTestBase.php
+++ b/tests/src/Functional/JsonApiExtrasFunctionalTestBase.php
@@ -18,7 +18,7 @@ abstract class JsonApiExtrasFunctionalTestBase extends JsonApiFunctionalTestBase
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Add vocabs field to the tags.
     $this->createEntityReferenceField(
diff --git a/tests/src/Kernel/Controller/EntityResourceTest.php b/tests/src/Kernel/Controller/EntityResourceTest.php
index a96221b..5767ae1 100644
--- a/tests/src/Kernel/Controller/EntityResourceTest.php
+++ b/tests/src/Kernel/Controller/EntityResourceTest.php
@@ -40,7 +40,7 @@ class EntityResourceTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     NodeType::create([
diff --git a/tests/src/Kernel/EntityToJsonApiTest.php b/tests/src/Kernel/EntityToJsonApiTest.php
index 72e4feb..5b13a22 100644
--- a/tests/src/Kernel/EntityToJsonApiTest.php
+++ b/tests/src/Kernel/EntityToJsonApiTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\jsonapi_extras\Kernel;
 
+use Drupal\jsonapi_extras\EntityToJsonApi;
+use Symfony\Component\HttpFoundation\RequestStack;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
@@ -31,7 +33,7 @@ class EntityToJsonApiTest extends JsonapiKernelTestBase {
   /**
    * System under test.
    *
-   * @var \Drupal\jsonapi_extras\EntityToJsonApi
+   * @var EntityToJsonApi
    */
   protected $sut;
 
@@ -53,24 +55,24 @@ class EntityToJsonApiTest extends JsonapiKernelTestBase {
   ];
 
   /**
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   private $nodeType;
 
   /**
-   * @var \Drupal\taxonomy\Entity\Vocabulary
+   * @var Vocabulary
    */
   private $vocabulary;
 
   /**
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   private $node;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Add the entity schemas.
     $this->installEntitySchema('node');
@@ -217,17 +219,17 @@ class EntityToJsonApiTest extends JsonapiKernelTestBase {
    * @see https://www.drupal.org/project/jsonapi_extras/issues/3124805
    */
   public function testRequestStack() {
-    /** @var \Symfony\Component\HttpFoundation\RequestStack $request_stack */
+    /** @var RequestStack $request_stack */
     $request_stack = $this->container->get('request_stack');
     $this->sut->serialize($this->node);
     $request = $request_stack->pop();
-    $this->assertNotEqual($request->getPathInfo(), '/jsonapi/node/' . $this->nodeType->id() . '/' . $this->node->uuid(), 'The request from jsonapi_extras.entity.to_jsonapi should not linger in the request stack.');
+    $this->assertNotEquals($request->getPathInfo(), '/jsonapi/node/' . $this->nodeType->id() . '/' . $this->node->uuid(), 'The request from jsonapi_extras.entity.to_jsonapi should not linger in the request stack.');
   }
 
   /**
    * Checks entity's serialization/normalization.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to serialize/normalize.
    * @param string[] $include_fields
    *   The list of fields to include.
