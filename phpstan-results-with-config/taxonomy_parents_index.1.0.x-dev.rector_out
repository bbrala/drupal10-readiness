modules/contrib/taxonomy_parents_index/src/Form/IndexTaxonomyParents.php
modules/contrib/taxonomy_parents_index/src/Plugin/views/relationship/TaxonomyIndexReverseToParents.php
modules/contrib/taxonomy_parents_index/src/TaxonomyParentsIndexManager.php
modules/contrib/taxonomy_parents_index/taxonomy_parents_index.install
modules/contrib/taxonomy_parents_index/taxonomy_parents_index.module

4 files with changes
====================

1) modules/contrib/taxonomy_parents_index/taxonomy_parents_index.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\taxonomy_parents_index\TaxonomyParentsIndexManager;
 /**
  * @file
  * Hooks for module taxonomy_parents_index.
@@ @@
  */
 function taxonomy_parents_index_taxonomy_term_insert(EntityInterface $entity) {
   // Index new Term.
-  /** @var \Drupal\taxonomy_parents_index\TaxonomyParentsIndexManager $customTaxonomyParentsIndexManager */
+  /** @var TaxonomyParentsIndexManager $customTaxonomyParentsIndexManager */
   $customTaxonomyParentsIndexManager = \Drupal::service('taxonomy_parents_index.manager');
   $customTaxonomyParentsIndexManager->indexAncestorTerms($entity->id());
 }
@@ @@
  */
 function taxonomy_parents_index_taxonomy_term_delete(EntityInterface $entity) {
   // Remove Term's index.
-  /** @var \Drupal\taxonomy_parents_index\TaxonomyParentsIndexManager $customTaxonomyParentsIndexManager */
+  /** @var TaxonomyParentsIndexManager $customTaxonomyParentsIndexManager */
   $customTaxonomyParentsIndexManager = \Drupal::service('taxonomy_parents_index.manager');
   $customTaxonomyParentsIndexManager->removeTermIndex($entity);
 }
@@ @@
  */
 function taxonomy_parents_index_taxonomy_term_update(EntityInterface $entity) {
   // Reindexing after modifying the Term.
-  /** @var \Drupal\taxonomy_parents_index\TaxonomyParentsIndexManager $customTaxonomyParentsIndexManager */
+  /** @var TaxonomyParentsIndexManager $customTaxonomyParentsIndexManager */
   $customTaxonomyParentsIndexManager = \Drupal::service('taxonomy_parents_index.manager');
   $customTaxonomyParentsIndexManager->updateTermIndex($entity);
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/taxonomy_parents_index/src/TaxonomyParentsIndexManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\taxonomy_parents_index;

+use Drupal\taxonomy\TermStorageInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Database\Connection;
@@ @@
   /**
    * Taxonomy term storage.
    *
-   * @var \Drupal\taxonomy\TermStorageInterface
+   * @var TermStorageInterface
    */
   protected $termStorage;

@@ @@
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Cache tags invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;

@@ @@
   /**
    * TaxonomyParentsIndexManager constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Taxonomy term storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   Database connection.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cacheTagsInvalidator
+   * @param CacheTagsInvalidatorInterface $cacheTagsInvalidator
    *   Cache tags invalidator.
    */
   public function __construct(
@@ @@
   /**
    * Returns the Taxonomy Term storage.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface|\Drupal\taxonomy\TermStorageInterface
+   * @return EntityStorageInterface|TermStorageInterface
    *   Taxonomy Term storage.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getTermStorage() {
     if (!$this->termStorage) {
@@ @@
    *   If TRUE, then the result is a Term ID array.
    *   If FALSE, then the result is an array of Term objects.
    *
-   * @return array|\Drupal\taxonomy\TermInterface[]
+   * @return array|TermInterface[]
    *   Result array.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getAllSzulo($tid, $asIdsArray = FALSE) {
     $parents = $this->getTermStorage()->loadAllParents($tid);
@@ @@
    * Here we need to remove only those rows that belong to the given Term's ID,
    * plus every row where the given Term's ID is in the ptid column.
    *
-   * @param \Drupal\taxonomy\TermInterface|null $term
+   * @param TermInterface|null $term
    *   The given Taxonomy Term ID.
    * @param bool $invalidateCacheTagsOnEnd
    *   Sets if it should invalidate cache tags or not.
@@ @@
   /**
    * Updates indexes that belong to a given Taxonomy Term.
    *
-   * @param \Drupal\taxonomy\TermInterface|null $term
+   * @param TermInterface|null $term
    *   The given Taxonomy Term ID.
    * @param bool $invalidateCacheTagsOnEnd
    *   Sets if it should invalidate cache tags or not.
@@ @@
   /**
    * Returns all children Taxonomy Term IDs of a given Taxonomy Term.
    *
-   * @param \Drupal\taxonomy\TermInterface|null $term
+   * @param TermInterface|null $term
    *   The given Taxonomy Term ID.
    *
    * @return int[]
    *   Array of children Taxonomy Term IDs. Empty array if there's none.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getAllChildren(?TermInterface $term) {
     $vid = $term->bundle();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/taxonomy_parents_index/src/Plugin/views/relationship/TaxonomyIndexReverseToParents.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Join manager.
    *
-   * @var \Drupal\views\Plugin\ViewsHandlerManager
+   * @var ViewsHandlerManager
    */
   protected $joinManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\views\Plugin\ViewsHandlerManager $join_manager
+   * @param ViewsHandlerManager $join_manager
    *   Join manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ViewsHandlerManager $join_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/taxonomy_parents_index/src/Form/IndexTaxonomyParents.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\taxonomy_parents_index\Form;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\taxonomy_parents_index\TaxonomyParentsIndexManager;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Form\FormBase;
@@ @@
   /**
    * IndexTaxonomyParents constructor.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Messenger service.
-   * @param \Drupal\Core\StringTranslation\TranslationManager $stringTranslation
+   * @param TranslationManager $stringTranslation
    *   String translation.
    */
   public function __construct(MessengerInterface $messenger, TranslationManager $stringTranslation) {
@@ @@
    * @param string[] $context
    *   Variables for the batch process.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public static function indexTerms(array &$context) {
     if (empty($context['sandbox'])) {
@@ @@
     $query->range(0, $limit);
     $terms = $query->execute();

-    /** @var \Drupal\taxonomy_parents_index\TaxonomyParentsIndexManager $customTaxonomyParentsIndexManager */
+    /** @var TaxonomyParentsIndexManager $customTaxonomyParentsIndexManager */
     $customTaxonomyParentsIndexManager = \Drupal::service('taxonomy_parents_index.manager');
     foreach ($terms as $revisionId => $termId) {
       $customTaxonomyParentsIndexManager->indexAncestorTerms($termId, FALSE);
@@ @@
       $messenger->addError($message);
     }

-    /** @var \Drupal\taxonomy_parents_index\TaxonomyParentsIndexManager $customTaxonomyParentsIndexManager */
+    /** @var TaxonomyParentsIndexManager $customTaxonomyParentsIndexManager */
     $customTaxonomyParentsIndexManager = \Drupal::service('taxonomy_parents_index.manager');
     $customTaxonomyParentsIndexManager->invalidateTaxonomyTermCacheTags();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 4 files have been changed by Rector                                       

