diff --git a/external_entities.install b/external_entities.install
index 0e419be..dd0f78b 100644
--- a/external_entities.install
+++ b/external_entities.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Config\Config;
 /**
  * @file
  * Install, update and uninstall functions for the external_entities module.
@@ -63,7 +64,7 @@ function external_entities_update_8203() {
   )->loadMultiple();
 
   foreach ($external_entity_types as $entity_type_id => $entity_type) {
-    /** @var \Drupal\Core\Config\Config $config */
+    /** @var Config $config */
     $config = \Drupal::configFactory()->getEditable("external_entities.external_entity_type.{$entity_type_id}");
 
     $field_mappings = $config->get('field_mappings');
diff --git a/external_entities.module b/external_entities.module
index 4c3120b..777232a 100755
--- a/external_entities.module
+++ b/external_entities.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Core\Entity\EntityStorageException;
 /**
  * @file
  * Allows using remote entities, for example through a REST interface.
@@ -180,7 +183,7 @@ function external_entities_form_field_storage_config_edit_form_alter(&$form, For
  *
  * @param array $element
  *   The cardinality form render array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state.
  *
  * @see \Drupal\field_ui\Form\FieldStorageConfigEditForm::validateCardinality()
@@ -269,7 +272,7 @@ function external_entities_theme() {
  * Implements hook_theme_suggestions_HOOK().
  */
 function external_entities_theme_suggestions_external_entity(array $variables) {
-  /** @var \Drupal\external_entities\ExternalEntityInterface $entity */
+  /** @var ExternalEntityInterface $entity */
   $entity = $variables['elements']['#entity'];
   $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
 
@@ -332,13 +335,13 @@ function external_entities_entity_delete(EntityInterface $entity) {
  * external entity, and the pattern uses an inherited annotated field. Saving
  * the external entity on annotation change will make sure the generated path
  * is updated.
-   *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
-   *   An entity object.
  *
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @param EntityInterface $entity
+ *   An entity object.
+ *
+ * @throws PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws EntityStorageException
  */
 function _external_entities_save_annotated_external_entity(EntityInterface $entity) {
   if (!empty($entity->{EXTERNAL_ENTITIES_BYPASS_ANNOTATED_EXTERNAL_ENTITY_SAVE_PROPERTY})) {
diff --git a/src/Annotation/ExternalEntityStorageClient.php b/src/Annotation/ExternalEntityStorageClient.php
index 448a7fa..b3309f9 100755
--- a/src/Annotation/ExternalEntityStorageClient.php
+++ b/src/Annotation/ExternalEntityStorageClient.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\external_entities\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -24,7 +25,7 @@ class ExternalEntityStorageClient extends Plugin {
   /**
    * The human-friendly name of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -33,7 +34,7 @@ class ExternalEntityStorageClient extends Plugin {
   /**
    * A description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/FieldMapper.php b/src/Annotation/FieldMapper.php
index 232f832..fb1ee20 100644
--- a/src/Annotation/FieldMapper.php
+++ b/src/Annotation/FieldMapper.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\external_entities\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -24,7 +25,7 @@ class FieldMapper extends Plugin {
   /**
    * The human-friendly name of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -33,7 +34,7 @@ class FieldMapper extends Plugin {
   /**
    * A description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Entity/ExternalEntity.php b/src/Entity/ExternalEntity.php
index d9d4765..7f44b40 100755
--- a/src/Entity/ExternalEntity.php
+++ b/src/Entity/ExternalEntity.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\external_entities\Entity;
 
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -39,7 +40,7 @@ class ExternalEntity extends ContentEntityBase implements ExternalEntityInterfac
   /**
    * Provides the default base field definitions for external entities.
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface[]
+   * @return FieldDefinitionInterface[]
    *   An array of base field definitions for the entity type, keyed by field
    *   name.
    */
@@ -207,10 +208,10 @@ class ExternalEntity extends ContentEntityBase implements ExternalEntityInterfac
   /**
    * Gets the fields that can be inherited by the external entity.
    *
-   * @param \Drupal\external_entities\ExternalEntityTypeInterface $type
+   * @param ExternalEntityTypeInterface $type
    *   The type of the external entity.
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface[]
+   * @return FieldDefinitionInterface[]
    *   An array of field definitions, keyed by field name.
    *
    * @see \Drupal\Core\Entity\EntityManagerInterface::getFieldDefinitions()
diff --git a/src/Entity/ExternalEntityType.php b/src/Entity/ExternalEntityType.php
index 1c18074..1e7edf4 100755
--- a/src/Entity/ExternalEntityType.php
+++ b/src/Entity/ExternalEntityType.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\external_entities\Entity;
 
+use Drupal\external_entities\FieldMapper\FieldMapperInterface;
+use Drupal\external_entities\StorageClient\ExternalEntityStorageClientInterface;
+use Drupal\Core\Entity\EntityFieldManagerInterface;
+use Psr\Log\LoggerInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\external_entities\ExternalEntityTypeInterface;
@@ -109,7 +113,7 @@ class ExternalEntityType extends ConfigEntityBase implements ExternalEntityTypeI
   /**
    * The field mapper plugin instance.
    *
-   * @var \Drupal\external_entities\FieldMapper\FieldMapperInterface
+   * @var FieldMapperInterface
    */
   protected $fieldMapperPlugin;
 
@@ -130,7 +134,7 @@ class ExternalEntityType extends ConfigEntityBase implements ExternalEntityTypeI
   /**
    * The storage client plugin instance.
    *
-   * @var \Drupal\external_entities\StorageClient\ExternalEntityStorageClientInterface
+   * @var ExternalEntityStorageClientInterface
    */
   protected $storageClientPlugin;
 
@@ -428,7 +432,7 @@ class ExternalEntityType extends ConfigEntityBase implements ExternalEntityTypeI
   /**
    * Returns the entity field manager.
    *
-   * @return \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @return EntityFieldManagerInterface
    *   The entity field manager.
    */
   protected function entityFieldManager() {
@@ -470,7 +474,7 @@ class ExternalEntityType extends ConfigEntityBase implements ExternalEntityTypeI
    * @param string $channel
    *   The name of the channel.
    *
-   * @return \Psr\Log\LoggerInterface
+   * @return LoggerInterface
    *   The logger for this channel.
    */
   protected function logger($channel) {
diff --git a/src/Entity/Query/External/Condition.php b/src/Entity/Query/External/Condition.php
index bb05069..e1c9f32 100755
--- a/src/Entity/Query/External/Condition.php
+++ b/src/Entity/Query/External/Condition.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\external_entities\Entity\Query\External;
 
+use Drupal\Core\Entity\Query\Sql\Query;
 use Drupal\Core\Entity\Query\ConditionBase;
 use Drupal\Core\Entity\Query\ConditionInterface;
 
@@ -13,7 +14,7 @@ class Condition extends ConditionBase {
   /**
    * The SQL entity query object this condition belongs to.
    *
-   * @var \Drupal\Core\Entity\Query\Sql\Query
+   * @var Query
    */
   protected $query;
 
diff --git a/src/Entity/Query/External/Query.php b/src/Entity/Query/External/Query.php
index 32ebc4a..ed93d7b 100755
--- a/src/Entity/Query/External/Query.php
+++ b/src/Entity/Query/External/Query.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\external_entities\Entity\Query\External;
 
+use Drupal\external_entities\StorageClient\ExternalEntityStorageClientInterface;
+use Drupal\external_entities\ExternalEntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\Query\QueryBase;
@@ -22,27 +24,27 @@ class Query extends QueryBase implements QueryInterface {
   /**
    * Stores the entity type manager used by the query.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Storage client instance.
    *
-   * @var \Drupal\external_entities\StorageClient\ExternalEntityStorageClientInterface
+   * @var ExternalEntityStorageClientInterface
    */
   protected $storageClient;
 
   /**
    * Constructs a query object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
    * @param string $conjunction
    *   - AND: all of the conditions on the query need to match.
    * @param array $namespaces
    *   List of potential namespaces of the classes belonging to this query.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeInterface $entity_type, $conjunction, array $namespaces, EntityTypeManagerInterface $entity_type_manager) {
@@ -63,7 +65,7 @@ class Query extends QueryBase implements QueryInterface {
   /**
    * Compiles the conditions.
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface
+   * @return QueryInterface
    *   Returns the called object.
    */
   protected function compile() {
@@ -74,7 +76,7 @@ class Query extends QueryBase implements QueryInterface {
   /**
    * Finish the query by adding fields, GROUP BY and range.
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface
+   * @return QueryInterface
    *   Returns the called object.
    */
   protected function finish() {
@@ -111,7 +113,7 @@ class Query extends QueryBase implements QueryInterface {
   /**
    * Get the storage client for a bundle.
    *
-   * @return \Drupal\external_entities\StorageClient\ExternalEntityStorageClientInterface
+   * @return ExternalEntityStorageClientInterface
    *   The external entity storage client.
    */
   protected function getStorageClient() {
@@ -143,7 +145,7 @@ class Query extends QueryBase implements QueryInterface {
   /**
    * Gets the external entity type.
    *
-   * @return \Drupal\external_entities\ExternalEntityTypeInterface
+   * @return ExternalEntityTypeInterface
    *   The external entity type.
    */
   public function getExternalEntityType() {
diff --git a/src/Entity/Query/External/QueryFactory.php b/src/Entity/Query/External/QueryFactory.php
index b36093c..87b13e2 100755
--- a/src/Entity/Query/External/QueryFactory.php
+++ b/src/Entity/Query/External/QueryFactory.php
@@ -25,14 +25,14 @@ class QueryFactory implements QueryFactoryInterface {
   /**
    * Stores the entity manager used by the query.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a QueryFactory object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Event/ExternalEntityExtractRawDataEvent.php b/src/Event/ExternalEntityExtractRawDataEvent.php
index b2ac84a..90dcd0b 100755
--- a/src/Event/ExternalEntityExtractRawDataEvent.php
+++ b/src/Event/ExternalEntityExtractRawDataEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\external_entities\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\external_entities\ExternalEntityInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Defines a, external entity raw data extraction event.
@@ -13,7 +13,7 @@ class ExternalEntityExtractRawDataEvent extends Event {
   /**
    * The external entity.
    *
-   * @var \Drupal\external_entities\ExternalEntityInterface
+   * @var ExternalEntityInterface
    */
   protected $entity;
 
@@ -27,7 +27,7 @@ class ExternalEntityExtractRawDataEvent extends Event {
   /**
    * Constructs a map raw data event object.
    *
-   * @param \Drupal\external_entities\ExternalEntityInterface $entity
+   * @param ExternalEntityInterface $entity
    *   The external entity.
    * @param array $raw_data
    *   The raw data being mapped.
@@ -40,7 +40,7 @@ class ExternalEntityExtractRawDataEvent extends Event {
   /**
    * Gets the external entity.
    *
-   * @return \Drupal\external_entities\ExternalEntityInterface
+   * @return ExternalEntityInterface
    *   The external entity.
    */
   public function getEntity() {
diff --git a/src/Event/ExternalEntityMapRawDataEvent.php b/src/Event/ExternalEntityMapRawDataEvent.php
index 45f715d..e479f9a 100755
--- a/src/Event/ExternalEntityMapRawDataEvent.php
+++ b/src/Event/ExternalEntityMapRawDataEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\external_entities\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Defines an external entity raw data mapping event.
diff --git a/src/ExternalEntityAccessControlHandler.php b/src/ExternalEntityAccessControlHandler.php
index 27620a6..1c01b02 100755
--- a/src/ExternalEntityAccessControlHandler.php
+++ b/src/ExternalEntityAccessControlHandler.php
@@ -21,16 +21,16 @@ class ExternalEntityAccessControlHandler extends EntityAccessControlHandler impl
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs an ExternalEntityAccessControlHandler object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityTypeManagerInterface $entity_type_manager) {
@@ -108,7 +108,7 @@ class ExternalEntityAccessControlHandler extends EntityAccessControlHandler impl
   /**
    * Get the external entity type this handler is running for.
    *
-   * @return \Drupal\external_entities\ExternalEntityTypeInterface|bool
+   * @return ExternalEntityTypeInterface|bool
    *   The external entity type config entity object, or FALSE if not found.
    */
   protected function getExternalEntityType() {
diff --git a/src/ExternalEntityInterface.php b/src/ExternalEntityInterface.php
index 849ea11..b942294 100755
--- a/src/ExternalEntityInterface.php
+++ b/src/ExternalEntityInterface.php
@@ -22,7 +22,7 @@ interface ExternalEntityInterface extends ContentEntityInterface {
   /**
    * Gets the external entity type.
    *
-   * @return \Drupal\external_entities\ExternalEntityTypeInterface
+   * @return ExternalEntityTypeInterface
    *   The external entity type.
    */
   public function getExternalEntityType();
@@ -38,7 +38,7 @@ interface ExternalEntityInterface extends ContentEntityInterface {
   /**
    * Gets the associated annotation entity.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    *   The annotation entity, null otherwise.
    */
   public function getAnnotation();
@@ -46,7 +46,7 @@ interface ExternalEntityInterface extends ContentEntityInterface {
   /**
    * Map the annotations entity fields to this entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface|null $annotation
+   * @param ContentEntityInterface|null $annotation
    *   (optional) An entity object to map the fields from. If NULL, the default
    *   annotation is assumed.
    *
diff --git a/src/ExternalEntityPermissions.php b/src/ExternalEntityPermissions.php
index 823b933..3952b35 100755
--- a/src/ExternalEntityPermissions.php
+++ b/src/ExternalEntityPermissions.php
@@ -32,7 +32,7 @@ class ExternalEntityPermissions {
   /**
    * Builds a standard list of external entity permissions for a given type.
    *
-   * @param \Drupal\external_entities\ExternalEntityTypeInterface $external_entity_type
+   * @param ExternalEntityTypeInterface $external_entity_type
    *   The external entity type.
    *
    * @return array
diff --git a/src/ExternalEntityStorage.php b/src/ExternalEntityStorage.php
index 2357605..518f9ef 100755
--- a/src/ExternalEntityStorage.php
+++ b/src/ExternalEntityStorage.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\external_entities;
 
+use Drupal\external_entities\FieldMapper\FieldMapperInterface;
+use Drupal\external_entities\StorageClient\ExternalEntityStorageClientInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\Cache;
@@ -33,56 +35,56 @@ class ExternalEntityStorage extends ContentEntityStorageBase implements External
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The field mapper manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $fieldMapperManager;
 
   /**
    * Field mapper instance.
    *
-   * @var \Drupal\external_entities\FieldMapper\FieldMapperInterface
+   * @var FieldMapperInterface
    */
   protected $fieldMapper;
 
   /**
    * The external storage client manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $storageClientManager;
 
   /**
    * Storage client instance.
    *
-   * @var \Drupal\external_entities\StorageClient\ExternalEntityStorageClientInterface
+   * @var ExternalEntityStorageClientInterface
    */
   protected $storageClient;
 
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
@@ -108,27 +110,27 @@ class ExternalEntityStorage extends ContentEntityStorageBase implements External
   /**
    * Constructs a new ExternalEntityStorage object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend to be used.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface|null $memory_cache
+   * @param MemoryCacheInterface|null $memory_cache
    *   The memory cache backend.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $field_mapper_manager
+   * @param PluginManagerInterface $field_mapper_manager
    *   The field mapper manager.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $storage_client_manager
+   * @param PluginManagerInterface $storage_client_manager
    *   The storage client manager.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(
@@ -183,7 +185,7 @@ class ExternalEntityStorage extends ContentEntityStorageBase implements External
    *
    * Used before the entities are deleted and before invoking the delete hook.
    *
-   * @param \Drupal\Core\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   An array of entities.
    *
    * @throws EntityStorageException
@@ -197,7 +199,7 @@ class ExternalEntityStorage extends ContentEntityStorageBase implements External
   /**
    * Gets the entity type definition.
    *
-   * @return \Drupal\external_entities\ExternalEntityTypeInterface
+   * @return ExternalEntityTypeInterface
    *   Entity type definition.
    */
   public function getEntityType() {
@@ -250,7 +252,7 @@ class ExternalEntityStorage extends ContentEntityStorageBase implements External
    *   If not empty, return entities that match these IDs. Return no entities
    *   when NULL.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface[]
+   * @return ContentEntityInterface[]
    *   Array of entities from the storage.
    */
   protected function getFromExternalStorage(array $ids = NULL) {
@@ -300,7 +302,7 @@ class ExternalEntityStorage extends ContentEntityStorageBase implements External
    * @param array $data
    *   Associative array of storage results, keyed on the entity ID.
    *
-   * @return \Drupal\external_entities\ExternalEntityInterface[]
+   * @return ExternalEntityInterface[]
    *   An array of entity objects implementing the ExternalEntityInterface.
    */
   protected function mapFromRawStorageData(array $data) {
@@ -326,7 +328,7 @@ class ExternalEntityStorage extends ContentEntityStorageBase implements External
       }
       // Allow other modules to perform custom mapping logic.
       $event = new ExternalEntityMapRawDataEvent($data[$id], $entity_values);
-      $this->eventDispatcher->dispatch(ExternalEntitiesEvents::MAP_RAW_DATA, $event);
+      $this->eventDispatcher->dispatch($event, ExternalEntitiesEvents::MAP_RAW_DATA);
 
       $entities[$id] = new $this->entityClass($event->getEntityValues(), $this->entityTypeId);
       $entities[$id]->enforceIsNew(FALSE);
@@ -363,7 +365,7 @@ class ExternalEntityStorage extends ContentEntityStorageBase implements External
    *
    * Used before the entity is saved and before invoking the presave hook.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    *
    * @throws EntityStorageException
diff --git a/src/ExternalEntityStorageInterface.php b/src/ExternalEntityStorageInterface.php
index 41b8e08..8015fd4 100755
--- a/src/ExternalEntityStorageInterface.php
+++ b/src/ExternalEntityStorageInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\external_entities;
 
+use Drupal\external_entities\FieldMapper\FieldMapperInterface;
+use Drupal\external_entities\StorageClient\ExternalEntityStorageClientInterface;
 use Drupal\Core\Entity\ContentEntityStorageInterface;
 
 /**
@@ -12,7 +14,7 @@ interface ExternalEntityStorageInterface extends ContentEntityStorageInterface {
   /**
    * Get the field mapper.
    *
-   * @return \Drupal\external_entities\FieldMapper\FieldMapperInterface
+   * @return FieldMapperInterface
    *   The field mapper.
    */
   public function getFieldMapper();
@@ -44,7 +46,7 @@ interface ExternalEntityStorageInterface extends ContentEntityStorageInterface {
   /**
    * Get the storage client.
    *
-   * @return \Drupal\external_entities\StorageClient\ExternalEntityStorageClientInterface
+   * @return ExternalEntityStorageClientInterface
    *   The external entity storage client.
    */
   public function getStorageClient();
@@ -52,7 +54,7 @@ interface ExternalEntityStorageInterface extends ContentEntityStorageInterface {
   /**
    * Gets the external entity type.
    *
-   * @return \Drupal\external_entities\ExternalEntityTypeInterface
+   * @return ExternalEntityTypeInterface
    *   The external entity type.
    */
   public function getExternalEntityType();
diff --git a/src/ExternalEntityTypeInterface.php b/src/ExternalEntityTypeInterface.php
index d31a393..98844de 100755
--- a/src/ExternalEntityTypeInterface.php
+++ b/src/ExternalEntityTypeInterface.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\external_entities;
 
+use Drupal\external_entities\FieldMapper\FieldMapperInterface;
+use Drupal\external_entities\StorageClient\ExternalEntityStorageClientInterface;
+use Drupal\Core\Entity\ContentEntityTypeInterface;
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 
@@ -75,10 +79,10 @@ interface ExternalEntityTypeInterface extends ConfigEntityInterface {
   /**
    * Retrieves the field mapper.
    *
-   * @return \Drupal\external_entities\FieldMapper\FieldMapperInterface
+   * @return FieldMapperInterface
    *   This types field mapper plugin.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   Thrown if the field mapper plugin could not be retrieved.
    */
   public function getFieldMapper();
@@ -128,10 +132,10 @@ interface ExternalEntityTypeInterface extends ConfigEntityInterface {
   /**
    * Retrieves the storage client.
    *
-   * @return \Drupal\external_entities\StorageClient\ExternalEntityStorageClientInterface
+   * @return ExternalEntityStorageClientInterface
    *   This types storage client plugin.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   Thrown if the storage client plugin could not be retrieved.
    */
   public function getStorageClient();
@@ -174,7 +178,7 @@ interface ExternalEntityTypeInterface extends ConfigEntityInterface {
   /**
    * Gets the associated content entity type definition.
    *
-   * @return \Drupal\Core\Entity\ContentEntityTypeInterface|null
+   * @return ContentEntityTypeInterface|null
    *   The entity type definition or NULL if it doesn't exist.
    */
   public function getDerivedEntityType();
@@ -214,7 +218,7 @@ interface ExternalEntityTypeInterface extends ConfigEntityInterface {
   /**
    * Returns the annotations field.
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface|null
+   * @return FieldDefinitionInterface|null
    *   A field definition or NULL if not annotatable.
    */
   public function getAnnotationField();
diff --git a/src/FieldMapper/ConfigurableExpressionFieldMapperBase.php b/src/FieldMapper/ConfigurableExpressionFieldMapperBase.php
index 251a62d..c9834f2 100644
--- a/src/FieldMapper/ConfigurableExpressionFieldMapperBase.php
+++ b/src/FieldMapper/ConfigurableExpressionFieldMapperBase.php
@@ -31,13 +31,13 @@ abstract class ConfigurableExpressionFieldMapperBase extends ExpressionFieldMapp
    *   The identifier for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
+   * @param EntityTypeManager $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\TypedData\TypedDataManagerInterface $typed_data_manager
+   * @param TypedDataManagerInterface $typed_data_manager
    *   The typed data manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManager $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, TypedDataManagerInterface $typed_data_manager, TranslationInterface $string_translation) {
@@ -87,7 +87,7 @@ abstract class ConfigurableExpressionFieldMapperBase extends ExpressionFieldMapp
    *
    * @param array $form
    *   An associative array containing the initial structure of the plugin form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form. Calling code should pass on a subform
    *   state created through
    *   \Drupal\Core\Form\SubformState::createForSubform().
@@ -127,7 +127,7 @@ abstract class ConfigurableExpressionFieldMapperBase extends ExpressionFieldMapp
   /**
    * Build a form element for configuring a field mapping.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    *
    * @return array
@@ -147,11 +147,11 @@ abstract class ConfigurableExpressionFieldMapperBase extends ExpressionFieldMapp
   /**
    * Build a form element for configuring a field property mapping.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    * @param string $property_name
    *   The property name.
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $property_definition
+   * @param DataDefinitionInterface $property_definition
    *   The property definition.
    *
    * @return array
@@ -185,7 +185,7 @@ abstract class ConfigurableExpressionFieldMapperBase extends ExpressionFieldMapp
    * @param array $form
    *   An associative array containing the structure of the plugin form as built
    *   by static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form. Calling code should pass on a subform
    *   state created through
    *   \Drupal\Core\Form\SubformState::createForSubform().
diff --git a/src/FieldMapper/ExpressionFieldMapperBase.php b/src/FieldMapper/ExpressionFieldMapperBase.php
index f899c53..3a36310 100644
--- a/src/FieldMapper/ExpressionFieldMapperBase.php
+++ b/src/FieldMapper/ExpressionFieldMapperBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\external_entities\FieldMapper;
 
+use Drupal\Core\TypedData\Plugin\DataType\DateTimeIso8601;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManager;
@@ -26,7 +27,7 @@ abstract class ExpressionFieldMapperBase extends FieldMapperBase implements Expr
   /**
    * The typed data manager.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;
 
@@ -39,11 +40,11 @@ abstract class ExpressionFieldMapperBase extends FieldMapperBase implements Expr
    *   The identifier for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
+   * @param EntityTypeManager $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\TypedData\TypedDataManagerInterface $typed_data_manager
+   * @param TypedDataManagerInterface $typed_data_manager
    *   The typed data manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManager $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, TypedDataManagerInterface $typed_data_manager) {
@@ -158,7 +159,7 @@ abstract class ExpressionFieldMapperBase extends FieldMapperBase implements Expr
   /**
    * Extracts field values from raw data for a given field.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   Definition of the field we are extracting for.
    * @param array $raw_data
    *   The raw data to extract the field values from.
@@ -233,7 +234,7 @@ abstract class ExpressionFieldMapperBase extends FieldMapperBase implements Expr
   /**
    * Extracts field property values from raw data for a given field property.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   Definition of the field we are extracting for.
    * @param string $property_name
    *   Name of the property we are extracting.
@@ -254,7 +255,7 @@ abstract class ExpressionFieldMapperBase extends FieldMapperBase implements Expr
    * Provides conversions for special data types and makes sure a property is in
    * the correct PHP value as expected by the data type.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   Definition of the field we are extracting for.
    * @param string $property_name
    *   Name of the property we are extracting.
@@ -280,7 +281,7 @@ abstract class ExpressionFieldMapperBase extends FieldMapperBase implements Expr
 
       if ($timestamp !== FALSE) {
         if (get_class($typed_data) === 'Drupal\Core\TypedData\Plugin\DataType\DateTimeIso8601') {
-          assert($typed_data instanceof \Drupal\Core\TypedData\Plugin\DataType\DateTimeIso8601);
+          assert($typed_data instanceof DateTimeIso8601);
           $datetime_type = $field_definition->getFieldStorageDefinition()->getSetting('datetime_type');
 
           if ($datetime_type === DateTimeItem::DATETIME_TYPE_DATE) {
@@ -330,7 +331,7 @@ abstract class ExpressionFieldMapperBase extends FieldMapperBase implements Expr
   /**
    * Adds field values to a raw data array for a given field.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition for the field being mapped.
    * @param array $field_values
    *   The field values to add to the raw data.
diff --git a/src/FieldMapper/FieldMapperBase.php b/src/FieldMapper/FieldMapperBase.php
index 941a375..cb9a2c2 100644
--- a/src/FieldMapper/FieldMapperBase.php
+++ b/src/FieldMapper/FieldMapperBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\external_entities\FieldMapper;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManager;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ -21,21 +22,21 @@ abstract class FieldMapperBase extends PluginBase implements FieldMapperInterfac
   /**
    * The external entity type this field mapper is configured for.
    *
-   * @var \Drupal\external_entities\ExternalEntityTypeInterface
+   * @var ExternalEntityTypeInterface
    */
   protected $externalEntityType;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
@@ -48,9 +49,9 @@ abstract class FieldMapperBase extends PluginBase implements FieldMapperInterfac
    *   The identifier for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
+   * @param EntityTypeManager $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManager $entity_type_manager, EntityFieldManagerInterface $entity_field_manager) {
@@ -95,7 +96,7 @@ abstract class FieldMapperBase extends PluginBase implements FieldMapperInterfac
   /**
    * Get the external entity type being operated for.
    *
-   * @return \Drupal\external_entities\ExternalEntityTypeInterface
+   * @return ExternalEntityTypeInterface
    *   The external entity type definition.
    */
   protected function getExternalEntityType() {
@@ -108,7 +109,7 @@ abstract class FieldMapperBase extends PluginBase implements FieldMapperInterfac
    * Computed fields are unmappable, which automatically excludes inherited
    * annotation fields as well. The annotation field is excluded as well.
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface[]
+   * @return FieldDefinitionInterface[]
    *   An associative array of field definitions, keyed by field name.
    */
   protected function getMappableFields() {
@@ -134,10 +135,10 @@ abstract class FieldMapperBase extends PluginBase implements FieldMapperInterfac
    * Field properties that are marked read-only (which include computed ones)
    * are considered unmappable.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition we want to extract mappable properties from.
    *
-   * @return \Drupal\Core\TypedData\DataDefinitionInterface[]
+   * @return DataDefinitionInterface[]
    *   An array of property definitions of mappable properties, keyed by
    *   property name.
    */
diff --git a/src/FieldMapper/FieldMapperManager.php b/src/FieldMapper/FieldMapperManager.php
index 2c128b7..8bb3936 100644
--- a/src/FieldMapper/FieldMapperManager.php
+++ b/src/FieldMapper/FieldMapperManager.php
@@ -19,9 +19,9 @@ class FieldMapperManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Form/ExternalEntityForm.php b/src/Form/ExternalEntityForm.php
index db2f278..c7d1832 100755
--- a/src/Form/ExternalEntityForm.php
+++ b/src/Form/ExternalEntityForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\external_entities\Form;
 
+use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\external_entities\ExternalEntityInterface;
@@ -19,7 +20,7 @@ class ExternalEntityForm extends ContentEntityForm {
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\external_entities\ExternalEntityInterface $external_entity */
+    /** @var ExternalEntityInterface $external_entity */
     $external_entity = $this->entity;
 
     if ($this->operation == 'edit') {
@@ -44,7 +45,7 @@ class ExternalEntityForm extends ContentEntityForm {
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\external_entities\ExternalEntityInterface $external_entity */
+    /** @var ExternalEntityInterface $external_entity */
     $external_entity = $this->entity;
 
     // When saving an external entity with annotation through an inline entity
@@ -127,7 +128,7 @@ class ExternalEntityForm extends ContentEntityForm {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @see external_entities_entity_insert()
@@ -140,7 +141,7 @@ class ExternalEntityForm extends ContentEntityForm {
         continue;
       }
 
-      /** @var \Drupal\Core\Field\BaseFieldDefinition $field */
+      /** @var BaseFieldDefinition $field */
       $field = $widget_state['instance'];
       if ($field->getName() !== 'annotation') {
         continue;
diff --git a/src/Form/ExternalEntityTypeDeleteForm.php b/src/Form/ExternalEntityTypeDeleteForm.php
index 67dfe5e..eb7c187 100755
--- a/src/Form/ExternalEntityTypeDeleteForm.php
+++ b/src/Form/ExternalEntityTypeDeleteForm.php
@@ -17,14 +17,14 @@ class ExternalEntityTypeDeleteForm extends EntityConfirmFormBase {
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Constructs a new VocabularyResetForm object.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(MessengerInterface $messenger) {
diff --git a/src/Form/ExternalEntityTypeForm.php b/src/Form/ExternalEntityTypeForm.php
index 7134221..e817630 100755
--- a/src/Form/ExternalEntityTypeForm.php
+++ b/src/Form/ExternalEntityTypeForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\external_entities\Form;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\external_entities\ExternalEntityTypeInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Datetime\DateFormatterInterface;
@@ -27,68 +29,68 @@ class ExternalEntityTypeForm extends EntityForm {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The field mapper manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $fieldMapperManager;
 
   /**
    * The external storage client manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $storageClientManager;
 
   /**
    * Constructs an ExternalEntityTypeForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $field_mapper_manager
+   * @param PluginManagerInterface $field_mapper_manager
    *   The field mapper manager.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $storage_client_manager
+   * @param PluginManagerInterface $storage_client_manager
    *   The external storage client manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, MessengerInterface $messenger, DateFormatterInterface $date_formatter, PluginManagerInterface $field_mapper_manager, PluginManagerInterface $storage_client_manager) {
@@ -405,10 +407,10 @@ class ExternalEntityTypeForm extends EntityForm {
    *
    * @param array $form
    *   The current form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If a field mapper plug-in cannot be loaded.
    */
   public function buildFieldMapperSelectForm(array &$form, FormStateInterface $form_state) {
@@ -461,10 +463,10 @@ class ExternalEntityTypeForm extends EntityForm {
    *
    * @param array $form
    *   The current form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If a field mapper plugin fails to load.
    */
   public function buildFieldMapperConfigForm(array &$form, FormStateInterface $form_state) {
@@ -517,7 +519,7 @@ class ExternalEntityTypeForm extends EntityForm {
    *
    * @param array $form
    *   The current form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return array
@@ -537,10 +539,10 @@ class ExternalEntityTypeForm extends EntityForm {
    *
    * @param array $form
    *   The current form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If a storage client plug-in cannot be loaded.
    */
   public function buildStorageClientSelectForm(array &$form, FormStateInterface $form_state) {
@@ -593,7 +595,7 @@ class ExternalEntityTypeForm extends EntityForm {
    *
    * @param array $form
    *   The current form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    */
   public function buildStorageClientConfigForm(array &$form, FormStateInterface $form_state) {
@@ -628,7 +630,7 @@ class ExternalEntityTypeForm extends EntityForm {
    *
    * @param array $form
    *   The current form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return array
@@ -747,7 +749,7 @@ class ExternalEntityTypeForm extends EntityForm {
    *
    * The form entity which has been used for populating form element defaults.
    *
-   * @return \Drupal\external_entities\ExternalEntityTypeInterface
+   * @return ExternalEntityTypeInterface
    *   The current form entity.
    */
   public function getEntity() {
diff --git a/src/Plugin/Derivative/ExternalEntitiesLocalTask.php b/src/Plugin/Derivative/ExternalEntitiesLocalTask.php
index 0d5eda4..c6b4b96 100755
--- a/src/Plugin/Derivative/ExternalEntitiesLocalTask.php
+++ b/src/Plugin/Derivative/ExternalEntitiesLocalTask.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\external_entities\Plugin\Derivative;
 
+use Drupal\external_entities\ExternalEntityTypeInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ -20,25 +21,25 @@ class ExternalEntitiesLocalTask extends DeriverBase implements ContainerDeriverI
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Creates an ExternalEntityTypeLocalTask object.
    *
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The translation manager.
    */
   public function __construct(RouteProviderInterface $route_provider, EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation) {
@@ -116,7 +117,7 @@ class ExternalEntitiesLocalTask extends DeriverBase implements ContainerDeriverI
   /**
    * Gets all defined external entity types.
    *
-   * @return \Drupal\external_entities\ExternalEntityTypeInterface[]
+   * @return ExternalEntityTypeInterface[]
    *   All defined external entity types.
    */
   protected function getExternalEntityTypes() {
diff --git a/src/Plugin/ExternalEntities/StorageClient/Rest.php b/src/Plugin/ExternalEntities/StorageClient/Rest.php
index 2e694cf..49e5135 100755
--- a/src/Plugin/ExternalEntities/StorageClient/Rest.php
+++ b/src/Plugin/ExternalEntities/StorageClient/Rest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\external_entities\Plugin\ExternalEntities\StorageClient;
 
+use GuzzleHttp\Exception\GuzzleException;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\PluginFormInterface;
 use Drupal\Core\StringTranslation\TranslationInterface;
@@ -28,7 +29,7 @@ class Rest extends ExternalEntityStorageClientBase implements PluginFormInterfac
   /**
    * The HTTP client to fetch the files with.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;
 
@@ -41,11 +42,11 @@ class Rest extends ExternalEntityStorageClientBase implements PluginFormInterfac
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
-   * @param \Drupal\external_entities\ResponseDecoder\ResponseDecoderFactoryInterface $response_decoder_factory
+   * @param ResponseDecoderFactoryInterface $response_decoder_factory
    *   The response decoder factory service.
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   A Guzzle client object.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, TranslationInterface $string_translation, ResponseDecoderFactoryInterface $response_decoder_factory, ClientInterface $http_client) {
@@ -277,7 +278,7 @@ class Rest extends ExternalEntityStorageClientBase implements PluginFormInterfac
    * @return array|null
    *   A raw data array, NULL if no data returned.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function load($id) {
     $response = $this->httpClient->request(
diff --git a/src/Plugin/PluginFormTrait.php b/src/Plugin/PluginFormTrait.php
index 46481c5..6721c67 100755
--- a/src/Plugin/PluginFormTrait.php
+++ b/src/Plugin/PluginFormTrait.php
@@ -18,7 +18,7 @@ trait PluginFormTrait {
    * @param array $form
    *   An associative array containing the structure of the plugin form as built
    *   by static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    *
    * @see \Drupal\Core\Plugin\PluginFormInterface::validateConfigurationForm()
@@ -32,7 +32,7 @@ trait PluginFormTrait {
    * @param array $form
    *   An associative array containing the structure of the plugin form as built
    *   by static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    *
    * @see \Drupal\Core\Plugin\PluginFormInterface::submitConfigurationForm()
diff --git a/src/ResponseDecoder/ResponseDecoderFactory.php b/src/ResponseDecoder/ResponseDecoderFactory.php
index 9f07207..caf4640 100755
--- a/src/ResponseDecoder/ResponseDecoderFactory.php
+++ b/src/ResponseDecoder/ResponseDecoderFactory.php
@@ -11,7 +11,7 @@ class ResponseDecoderFactory implements ResponseDecoderFactoryInterface {
   /**
    * The decoders.
    *
-   * @var \Drupal\Component\Serialization\SerializationInterface[]
+   * @var SerializationInterface[]
    */
   protected $decoders = [];
 
diff --git a/src/ResponseDecoder/ResponseDecoderFactoryInterface.php b/src/ResponseDecoder/ResponseDecoderFactoryInterface.php
index 322d30e..da4d29c 100755
--- a/src/ResponseDecoder/ResponseDecoderFactoryInterface.php
+++ b/src/ResponseDecoder/ResponseDecoderFactoryInterface.php
@@ -12,7 +12,7 @@ interface ResponseDecoderFactoryInterface {
   /**
    * Add a decoder.
    *
-   * @param \Drupal\Component\Serialization\SerializationInterface $decoder
+   * @param SerializationInterface $decoder
    *   The decoder.
    */
   public function addDecoder(SerializationInterface $decoder);
@@ -23,7 +23,7 @@ interface ResponseDecoderFactoryInterface {
    * @param string $format
    *   The format to get the decoder for.
    *
-   * @return \Drupal\Component\Serialization\SerializationInterface|bool
+   * @return SerializationInterface|bool
    *   The decoder if it exists, FALSE otherwise.
    */
   public function getDecoder($format);
diff --git a/src/RouteProcessor/RouteProcessorExternalEntityType.php b/src/RouteProcessor/RouteProcessorExternalEntityType.php
index 010e870..a972036 100755
--- a/src/RouteProcessor/RouteProcessorExternalEntityType.php
+++ b/src/RouteProcessor/RouteProcessorExternalEntityType.php
@@ -23,14 +23,14 @@ class RouteProcessorExternalEntityType implements OutboundRouteProcessorInterfac
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new EntityTypeRepository.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Routing/ExternalEntityHtmlRouteProvider.php b/src/Routing/ExternalEntityHtmlRouteProvider.php
index acb0f2c..b8061d9 100755
--- a/src/Routing/ExternalEntityHtmlRouteProvider.php
+++ b/src/Routing/ExternalEntityHtmlRouteProvider.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\external_entities\Routing;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\Routing\DefaultHtmlRouteProvider;
 use Symfony\Component\Routing\Route;
@@ -30,7 +31,7 @@ class ExternalEntityHtmlRouteProvider extends DefaultHtmlRouteProvider {
     // permission is required for viewing collections. We implement a separate
     // permission for external entity collection pages.
     if ($entity_type->hasLinkTemplate('collection') && $entity_type->hasListBuilderClass()) {
-      /** @var \Drupal\Core\StringTranslation\TranslatableMarkup $label */
+      /** @var TranslatableMarkup $label */
       $label = $entity_type->getCollectionLabel();
 
       $route = new Route($entity_type->getLinkTemplate('collection'));
diff --git a/src/Routing/ExternalEntityTypeRoutes.php b/src/Routing/ExternalEntityTypeRoutes.php
index c8c7535..8b9ef47 100755
--- a/src/Routing/ExternalEntityTypeRoutes.php
+++ b/src/Routing/ExternalEntityTypeRoutes.php
@@ -17,21 +17,21 @@ class ExternalEntityTypeRoutes implements ContainerInjectionInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Constructs a new EntityTypeRepository.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler) {
@@ -52,7 +52,7 @@ class ExternalEntityTypeRoutes implements ContainerInjectionInterface {
   /**
    * Returns a collection of routes.
    *
-   * @return \Symfony\Component\Routing\RouteCollection
+   * @return RouteCollection
    *   A collection of routes.
    */
   public function routes() {
diff --git a/src/StorageClient/ExternalEntityStorageClientBase.php b/src/StorageClient/ExternalEntityStorageClientBase.php
index d8240ae..bace2a2 100755
--- a/src/StorageClient/ExternalEntityStorageClientBase.php
+++ b/src/StorageClient/ExternalEntityStorageClientBase.php
@@ -26,14 +26,14 @@ abstract class ExternalEntityStorageClientBase extends PluginBase implements Ext
   /**
    * The external entity type this storage client is configured for.
    *
-   * @var \Drupal\external_entities\ExternalEntityTypeInterface
+   * @var ExternalEntityTypeInterface
    */
   protected $externalEntityType;
 
   /**
    * The response decoder factory.
    *
-   * @var \Drupal\external_entities\ResponseDecoder\ResponseDecoderFactoryInterface
+   * @var ResponseDecoderFactoryInterface
    */
   protected $responseDecoderFactory;
 
@@ -46,9 +46,9 @@ abstract class ExternalEntityStorageClientBase extends PluginBase implements Ext
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
-   * @param \Drupal\external_entities\ResponseDecoder\ResponseDecoderFactoryInterface $response_decoder_factory
+   * @param ResponseDecoderFactoryInterface $response_decoder_factory
    *   The response decoder factory service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, TranslationInterface $string_translation, ResponseDecoderFactoryInterface $response_decoder_factory) {
@@ -94,7 +94,7 @@ abstract class ExternalEntityStorageClientBase extends PluginBase implements Ext
   /**
    * Returns the response decoder factory.
    *
-   * @return \Drupal\external_entities\ResponseDecoder\ResponseDecoderFactoryInterface
+   * @return ResponseDecoderFactoryInterface
    *   The response decoder factory.
    */
   public function getResponseDecoderFactory() {
@@ -104,7 +104,7 @@ abstract class ExternalEntityStorageClientBase extends PluginBase implements Ext
   /**
    * Sets the response decoder factory.
    *
-   * @param \Drupal\external_entities\ResponseDecoder\ResponseDecoderFactoryInterface $response_decoder_factory
+   * @param ResponseDecoderFactoryInterface $response_decoder_factory
    *   A response decoder factory.
    *
    * @return $this
diff --git a/src/StorageClient/ExternalEntityStorageClientInterface.php b/src/StorageClient/ExternalEntityStorageClientInterface.php
index 7375902..2d168e4 100755
--- a/src/StorageClient/ExternalEntityStorageClientInterface.php
+++ b/src/StorageClient/ExternalEntityStorageClientInterface.php
@@ -42,7 +42,7 @@ interface ExternalEntityStorageClientInterface extends PluginInspectionInterface
   /**
    * Saves the entity permanently.
    *
-   * @param \Drupal\external_entities\ExternalEntityInterface $entity
+   * @param ExternalEntityInterface $entity
    *   The entity to save.
    *
    * @return int
@@ -54,7 +54,7 @@ interface ExternalEntityStorageClientInterface extends PluginInspectionInterface
   /**
    * Deletes permanently saved entities.
    *
-   * @param \Drupal\external_entities\ExternalEntityInterface $entity
+   * @param ExternalEntityInterface $entity
    *   The external entity object to delete.
    */
   public function delete(ExternalEntityInterface $entity);
diff --git a/src/StorageClient/ExternalEntityStorageClientManager.php b/src/StorageClient/ExternalEntityStorageClientManager.php
index 10d7f2a..0062aca 100755
--- a/src/StorageClient/ExternalEntityStorageClientManager.php
+++ b/src/StorageClient/ExternalEntityStorageClientManager.php
@@ -17,9 +17,9 @@ class ExternalEntityStorageClientManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/tests/modules/external_entities_test/src/Controller/ExternalEntitiesJsonController.php b/tests/modules/external_entities_test/src/Controller/ExternalEntitiesJsonController.php
index fd87240..0aa76db 100644
--- a/tests/modules/external_entities_test/src/Controller/ExternalEntitiesJsonController.php
+++ b/tests/modules/external_entities_test/src/Controller/ExternalEntitiesJsonController.php
@@ -192,7 +192,7 @@ class ExternalEntitiesJsonController extends ControllerBase {
   /**
    * Get the request content.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   API Request.
    *
    * @return array
diff --git a/tests/src/Functional/ExternalEntitiesBrowserTestBase.php b/tests/src/Functional/ExternalEntitiesBrowserTestBase.php
index 5b5fe9a..783c116 100644
--- a/tests/src/Functional/ExternalEntitiesBrowserTestBase.php
+++ b/tests/src/Functional/ExternalEntitiesBrowserTestBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\external_entities\Functional;
 
+use Behat\Mink\Element\NodeElement;
+use Behat\Mink\Exception\ElementNotFoundException;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\Core\Entity\Entity\EntityViewDisplay;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
@@ -39,7 +41,7 @@ abstract class ExternalEntitiesBrowserTestBase extends BrowserTestBase {
    * @param string $locator
    *   Link id, title, text or image alt.
    *
-   * @return \Behat\Mink\Element\NodeElement|null
+   * @return NodeElement|null
    *   The link node element.
    */
   public function findLink($locator) {
@@ -68,7 +70,7 @@ abstract class ExternalEntitiesBrowserTestBase extends BrowserTestBase {
    * @param string $locator
    *   Input id, name or label.
    *
-   * @return \Behat\Mink\Element\NodeElement|null
+   * @return NodeElement|null
    *   The input field element.
    */
   public function findField($locator) {
@@ -81,7 +83,7 @@ abstract class ExternalEntitiesBrowserTestBase extends BrowserTestBase {
    * @param string $locator
    *   Button id, value or alt.
    *
-   * @return \Behat\Mink\Element\NodeElement|null
+   * @return NodeElement|null
    *   The button node element.
    */
   public function findButton($locator) {
@@ -94,7 +96,7 @@ abstract class ExternalEntitiesBrowserTestBase extends BrowserTestBase {
    * @param string $locator
    *   Button id, value or alt.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
+   * @throws ElementNotFoundException
    */
   public function pressButton($locator) {
     $this->getSession()->getPage()->pressButton($locator);
@@ -108,7 +110,7 @@ abstract class ExternalEntitiesBrowserTestBase extends BrowserTestBase {
    * @param string $value
    *   Value.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
+   * @throws ElementNotFoundException
    *
    * @see \Behat\Mink\Element\NodeElement::setValue
    */
@@ -124,7 +126,7 @@ abstract class ExternalEntitiesBrowserTestBase extends BrowserTestBase {
    * @param string $value
    *   Value.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
+   * @throws ElementNotFoundException
    */
   public function selectFieldOption($locator, $value) {
     $this->getSession()->getPage()->selectFieldOption($locator, $value);
@@ -199,7 +201,7 @@ abstract class ExternalEntitiesBrowserTestBase extends BrowserTestBase {
   protected function setFieldDisplay($bundle, $field_name) {
     $storage = \Drupal::entityTypeManager()->getStorage('entity_view_display');
 
-    /** @var \Drupal\Core\Entity\Entity\EntityViewDisplay $view_display */
+    /** @var EntityViewDisplay $view_display */
     $view_display = $storage->load($bundle . '.' . $bundle . '.default');
 
     if (empty($view_display)) {
@@ -227,7 +229,7 @@ abstract class ExternalEntitiesBrowserTestBase extends BrowserTestBase {
   protected function setFieldFormDisplay($bundle, $field_name) {
     $storage = \Drupal::entityTypeManager()->getStorage('entity_form_display');
 
-    /** @var \Drupal\Core\Entity\Entity\EntityFormDisplay $form_display */
+    /** @var EntityFormDisplay $form_display */
     $form_display = $storage->load($bundle . '.' . $bundle . '.default');
 
     if (empty($form_display)) {
diff --git a/tests/src/Functional/SimpleExternalEntityTest.php b/tests/src/Functional/SimpleExternalEntityTest.php
index 6b89e6f..b820477 100644
--- a/tests/src/Functional/SimpleExternalEntityTest.php
+++ b/tests/src/Functional/SimpleExternalEntityTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\external_entities\Functional;
 
+use Drupal\user\UserInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\external_entities\Entity\ExternalEntityType;
+use Drupal\Tests\WebAssert;
 use Drupal\filter\Entity\FilterFormat;
 
 /**
@@ -14,14 +18,14 @@ class SimpleExternalEntityTest extends ExternalEntitiesBrowserTestBase {
   /**
    * A user with administration permissions.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $account;
 
   /**
    * The entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;
 
@@ -34,7 +38,7 @@ class SimpleExternalEntityTest extends ExternalEntitiesBrowserTestBase {
     global $base_url;
     $this->storage = $this->container->get('entity_type.manager')->getStorage('external_entity_type');
 
-    /** @var \Drupal\external_entities\Entity\ExternalEntityType $ref */
+    /** @var ExternalEntityType $ref */
     $ref = $this->container->get('entity_type.manager')->getStorage('external_entity_type')->create([
       'id' => 'ref',
       'label' => 'Ref',
@@ -69,7 +73,7 @@ class SimpleExternalEntityTest extends ExternalEntitiesBrowserTestBase {
       'filters' => [],
     ]);
     $full_html_format->save();
-    /** @var \Drupal\external_entities\Entity\ExternalEntityType $type */
+    /** @var ExternalEntityType $type */
     $type = $this->container->get('entity_type.manager')->getStorage('external_entity_type')->create([
       'id' => 'simple_external_entity',
       'label' => 'Simple external entity',
@@ -141,7 +145,7 @@ class SimpleExternalEntityTest extends ExternalEntitiesBrowserTestBase {
    * Tests creation of a rule and then triggering its execution.
    */
   public function testSimpleExternalEntity() {
-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
 
     $this->drupalGet('admin/structure/external-entity-types');
