modules/contrib/file_downloader/file_downloader.module
modules/contrib/file_downloader/src/Annotation/DownloadOption.php
modules/contrib/file_downloader/src/Controller/DownloadOptionPluginController.php
modules/contrib/file_downloader/src/DownloadOptionConfigHtmlRouteProvider.php
modules/contrib/file_downloader/src/DownloadOptionConfigListBuilder.php
modules/contrib/file_downloader/src/DownloadOptionConfigPermissions.php
modules/contrib/file_downloader/src/DownloadOptionPluginBase.php
modules/contrib/file_downloader/src/DownloadOptionPluginCollection.php
modules/contrib/file_downloader/src/DownloadOptionPluginInterface.php
modules/contrib/file_downloader/src/DownloadOptionPluginManager.php
modules/contrib/file_downloader/src/Entity/DownloadOptionConfig.php
modules/contrib/file_downloader/src/Entity/DownloadOptionConfigInterface.php
modules/contrib/file_downloader/src/Form/DownloadOptionConfigDeleteForm.php
modules/contrib/file_downloader/src/Form/DownloadOptionConfigForm.php
modules/contrib/file_downloader/src/Plugin/DownloadOption/ImageStyle.php
modules/contrib/file_downloader/src/Plugin/DownloadOption/OriginalFile.php
modules/contrib/file_downloader/src/Plugin/Field/FieldFormatter/FileDownloaderFieldFormatter.php

12 files with changes
=====================

1) modules/contrib/file_downloader/src/Plugin/Field/FieldFormatter/FileDownloaderFieldFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\file_downloader\Plugin\Field\FieldFormatter;

+use Drupal\file_downloader\Entity\DownloadOptionConfigInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\link\LinkItemInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Url;
 use Drupal\file\FileInterface;
@@ @@
     );

     $downloadOptions = [];
-    /** @var \Drupal\file_downloader\Entity\DownloadOptionConfigInterface[] $downloadOptionConfigEntities */
+    /** @var DownloadOptionConfigInterface[] $downloadOptionConfigEntities */
     foreach ($downloadOptionConfigEntities as $downloadOptionConfig) {
       $label = $downloadOptionConfig->label();
       $extensions = trim($downloadOptionConfig->getExtensions());
@@ @@
     $settings = $this->getSettings();

     $entityTypeManager = \Drupal::service('entity_type.manager');
-    /** @var \Drupal\Core\Entity\EntityStorageInterface $downloadOptionConfigStorage */
+    /** @var EntityStorageInterface $downloadOptionConfigStorage */
     $downloadOptionConfigStorage = $entityTypeManager->getStorage(
       'download_option_config'
     );
@@ @@
       $settings['download_options']
     );

-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     foreach ($this->getEntitiesToView($items, $langcode) as $delta => $file) {
       $renderArray = $this->getDownloadLinksRenderArray(
         $downloadOptionConfigEntities,
@@ @@
    * Get a item list containing download links.
    *
    * @param $downloadOptionConfigEntities
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *
    * @return array
    */
@@ @@
    * found.
    *
    * @param $downloadOptionConfigEntities
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *
    * @return array
    */
@@ @@
   private function getDownloadLinks($downloadOptionConfigEntities, FileInterface $file): array {
     $download_links = [];

-    /** @var \Drupal\file_downloader\Entity\DownloadOptionConfigInterface $downloadOptionConfig */
+    /** @var DownloadOptionConfigInterface $downloadOptionConfig */
     foreach ($downloadOptionConfigEntities as $downloadOptionConfig) {
       $disabled = FALSE;
       $downloadOptionPlugin = $downloadOptionConfig->getPlugin();

-      /** @var \Drupal\link\LinkItemInterface $content */
+      /** @var LinkItemInterface $content */
       $url = Url::fromRoute('download_option_config.download_path', [
         'download_option_config' => $downloadOptionConfig->id(),
         'file' => $file->id(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/file_downloader/src/Plugin/DownloadOption/ImageStyle.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\file_downloader\Plugin\DownloadOption;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Image Style storage object.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
-  private \Drupal\Core\Entity\EntityStorageInterface $imageStyleStorage;
+  private EntityStorageInterface $imageStyleStorage;

   /**
    * {@inheritdoc}
@@ @@
   /**
    * Validate if the image style could be created.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *
    * @return bool
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/file_downloader/src/Form/DownloadOptionConfigForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\file_downloader\Form;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Plugin\PluginManagerBase;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
   /**
    * The download option provider storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected EntityStorageInterface $storage;

@@ @@
   /**
    * The widget or formatter plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerBase|DownloadOptionPluginManager
+   * @var PluginManagerBase|DownloadOptionPluginManager
    */
   protected $pluginManager;

@@ @@
   /**
    * The plugin form manager.
    *
-   * @var \Drupal\Core\Plugin\PluginFormFactoryInterface
+   * @var PluginFormFactoryInterface
    */
   protected PluginFormFactoryInterface $pluginFormFactory;

@@ @@
   /**
    * DownloadOptionConfigForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager service to handle entities.
-   * @param \Drupal\file_downloader\DownloadOptionPluginManager $downloadOptionPluginManager
+   * @param DownloadOptionPluginManager $downloadOptionPluginManager
    *   Download option plugin manager to handle the download option plugins.
-   * @param \Drupal\Core\Plugin\PluginFormFactoryInterface $pluginFormFactory
+   * @param PluginFormFactoryInterface $pluginFormFactory
    *   Plugin form factory manager to handle the form generation of the
    *   plugins.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, DownloadOptionPluginManager $downloadOptionPluginManager, PluginFormFactoryInterface $pluginFormFactory) {
     $this->storage = $entityTypeManager->getStorage('download_option_config');
@@ @@
   public function form(array $form, FormStateInterface $form_state): array {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\file_downloader\Entity\DownloadOptionConfigInterface $downloadOptionConfig */
+    /** @var DownloadOptionConfigInterface $downloadOptionConfig */
     $downloadOptionConfig = $this->entity;
     $form['label'] = [
       '#type' => 'textfield',
@@ @@
   }

   /**
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function save(array $form, FormStateInterface $form_state) {
     $downloadOptionConfig = $this->entity;
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     parent::submitForm($form, $form_state);

-    /** @var \Drupal\file_downloader\Entity\DownloadOptionConfigInterface $downloadOptionConfig */
+    /** @var DownloadOptionConfigInterface $downloadOptionConfig */
     $downloadOptionConfig = $this->entity;

     if (!$downloadOptionConfig->isNew()) {
@@ @@
   }

   /**
-   * @param \Drupal\file_downloader\Entity\DownloadOptionConfigInterface $downloadOptionConfig
+   * @param DownloadOptionConfigInterface $downloadOptionConfig
    * @param int $status
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    */
-  private function getSaveMessage(DownloadOptionConfigInterface $downloadOptionConfig, int $status): \Drupal\Core\StringTranslation\TranslatableMarkup {
+  private function getSaveMessage(DownloadOptionConfigInterface $downloadOptionConfig, int $status): TranslatableMarkup {
     if ($status === SAVED_NEW) {
       return $this->t('Created the %label Download option config.', [
         '%label' => $downloadOptionConfig->label(),
@@ @@
   /**
    * Retrieves the plugin form for a given block and operation.
    *
-   * @param \Drupal\file_downloader\DownloadOptionPluginInterface $downloadOptionPlugin
+   * @param DownloadOptionPluginInterface $downloadOptionPlugin
    *   The download option plugin.
    *
-   * @return \Drupal\file_downloader\DownloadOptionPluginInterface|\Drupal\Core\Plugin\PluginFormInterface
+   * @return DownloadOptionPluginInterface|PluginFormInterface
    *   The plugin form for the download option.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   protected function getPluginForm(DownloadOptionPluginInterface $downloadOptionPlugin) {
     if ($downloadOptionPlugin instanceof PluginWithFormsInterface) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/file_downloader/src/Form/DownloadOptionConfigDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\file_downloader\Form;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $this->entity->delete();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/file_downloader/src/Entity/DownloadOptionConfigInterface.php:37

    ---------- begin diff ----------
@@ @@
    *
    * @param \Drupal\file_downloader\Entity\DownloadOptionConfigInterface $downloadOptionConfig
    *
-   * @return \Drupal\file_downloader\DownloadOptionPluginCollection
+   * @return DownloadOptionPluginCollection
    */
   public function getPluginCollection(DownloadOptionConfigInterface $downloadOptionConfig): DownloadOptionPluginCollection;

@@ @@
    * Access callback to validate if the user has access to the download option
    * links.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   User to validate access on.
-   * @param \Drupal\file\FileInterface|null $file
+   * @param FileInterface|null $file
    *   The file which is going to be downloaded.
    */
   public function accessDownload(AccountInterface $account, FileInterface $file = NULL);
@@ @@
    * Check if the file extensions are allowed for the download option config
    * entity.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   File object to validate.
    *
    * @return bool|int
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/file_downloader/src/Entity/DownloadOptionConfig.php:88

    ---------- begin diff ----------
@@ @@
   /**
    * Download option plugin collection.
    *
-   * @var \Drupal\file_downloader\DownloadOptionPluginCollection
+   * @var DownloadOptionPluginCollection
    */
   private DownloadOptionPluginCollection $pluginCollection;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/file_downloader/src/DownloadOptionPluginManager.php:25

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/file_downloader/src/DownloadOptionPluginInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\file_downloader;

+use Drupal\Core\Access\AccessResultForbidden;
+use Drupal\Core\Access\AccessResultNeutral;
+use Drupal\Core\Access\AccessResultAllowed;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\DerivativeInspectionInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
@@ @@
 interface DownloadOptionPluginInterface extends ConfigurableInterface, PluginFormInterface, PluginInspectionInterface, CacheableDependencyInterface, DerivativeInspectionInterface {

   /**
-   * @param \Drupal\file\FileInterface $file
-   * @param \Drupal\file_downloader\Entity\DownloadOptionConfigInterface $downloadOptionConfig
+   * @param FileInterface $file
+   * @param DownloadOptionConfigInterface $downloadOptionConfig
    *
-   * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
+   * @return BinaryFileResponse
    */
   public function deliver(FileInterface $file, DownloadOptionConfigInterface $downloadOptionConfig): BinaryFileResponse;

@@ @@
    *
    * @param array $form
    *   The form definition array for the download option configuration form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
    * @param array $form
    *   The form definition array for the full download option configuration
    *   form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @see \Drupal\file_downloader\DownloadOptionPluginInterface::downloadOptionForm()
@@ @@
    * @param array $form
    *   The form definition array for the full download option configuration
    *   form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @see \Drupal\file_downloader\DownloadOptionPluginInterface::downloadOptionForm()
@@ @@
    * Validate plugin specific access on the availability of the download
    * option.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
-   * @param \Drupal\file\FileInterface $file
+   * @param AccountInterface $account
+   * @param FileInterface $file
    *
-   * @return \Drupal\Core\Access\AccessResultForbidden|\Drupal\Core\Access\AccessResultNeutral|\Drupal\Core\Access\AccessResultAllowed
+   * @return AccessResultForbidden|AccessResultNeutral|AccessResultAllowed
    */
   public function access(AccountInterface $account, FileInterface $file);

@@ @@
   /**
    * Get the uri to the file that will be offered as a download.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *
    * @return string
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/file_downloader/src/DownloadOptionPluginCollection.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function initializePlugin($instance_id) {
     if (!$instance_id) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/file_downloader/src/DownloadOptionPluginBase.php:77

    ---------- begin diff ----------
@@ @@
   /**
    * Return the headers for the Binary file response.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   File Entity.
-   * @param \Drupal\file_downloader\Entity\DownloadOptionConfigInterface $downloadOptionConfig
+   * @param DownloadOptionConfigInterface $downloadOptionConfig
    *
    * @return array
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/file_downloader/src/Controller/DownloadOptionPluginController.php:21

    ---------- begin diff ----------
@@ @@
    * Callback to download a file based on the given Download option
    * Configuration.
    *
-   * @param \Drupal\file_downloader\Entity\DownloadOptionConfigInterface $download_option_config
+   * @param DownloadOptionConfigInterface $download_option_config
    *  Download option configuration for getting the plugin.
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *  File object which will be downloaded based on the plugin.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *  Contains the request from the route.
    */
   public function downloadFile(DownloadOptionConfigInterface $download_option_config, FileInterface $file, Request $request): BinaryFileResponse {
@@ @@
    * Access callback to validate if the user has access to the download option
    * links.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   User to validate access on.
    * @param DownloadOptionConfigInterface $download_option_config
    *   The download option config entity the download link belongs to.
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file which is going to be downloaded.
    */
   public function access(AccountInterface $account, DownloadOptionConfigInterface $download_option_config, FileInterface $file) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


12) modules/contrib/file_downloader/src/Annotation/DownloadOption.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The administrative label of the download option.
    *
-   * @var \Drupal\Core\Annotation\Translation|string
+   * @var Translation|string
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description of the download option.
    *
-   * @var \Drupal\Core\Annotation\Translation|string
+   * @var Translation|string
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


 [OK] 12 files have been changed by Rector                                      

