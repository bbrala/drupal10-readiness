diff --git a/site_alert.info.yml b/site_alert.info.yml
index 7c2fc62..869b561 100644
--- a/site_alert.info.yml
+++ b/site_alert.info.yml
@@ -4,8 +4,7 @@ package: Custom
 configure: entity.site_alert.collection
 
 type: module
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 
 dependencies:
   - drupal:datetime_range
diff --git a/src/Cache/Context/ActiveSiteAlertsCacheContext.php b/src/Cache/Context/ActiveSiteAlertsCacheContext.php
index 54b7303..f2ddeb4 100644
--- a/src/Cache/Context/ActiveSiteAlertsCacheContext.php
+++ b/src/Cache/Context/ActiveSiteAlertsCacheContext.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\site_alert\Cache\Context;
 
+use Drupal\site_alert\SiteAlertStorageInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Cache\Context\CacheContextInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -24,21 +25,21 @@ class ActiveSiteAlertsCacheContext implements CacheContextInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The service that handles retrieval of site alerts.
    *
-   * @var \Drupal\site_alert\GetAlertsInterface
+   * @var GetAlertsInterface
    */
   protected $getAlerts;
 
   /**
    * The private key service.
    *
-   * @var \Drupal\Core\PrivateKey
+   * @var PrivateKey
    */
   protected $privateKey;
 
@@ -52,11 +53,11 @@ class ActiveSiteAlertsCacheContext implements CacheContextInterface {
   /**
    * Constructs an ActiveSiteAlertsCacheContext.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\site_alert\GetAlertsInterface $getAlerts
+   * @param GetAlertsInterface $getAlerts
    *   The service that handles retrieval of site alerts.
-   * @param \Drupal\Core\PrivateKey $privateKey
+   * @param PrivateKey $privateKey
    *   The private key service.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, GetAlertsInterface $getAlerts, PrivateKey $privateKey) {
@@ -105,7 +106,7 @@ class ActiveSiteAlertsCacheContext implements CacheContextInterface {
     // Return a cache max age that matches the time period until the next alert
     // appears. This allows caching implementations that do not leverage cache
     // contexts to correctly invalidate their caches.
-    /** @var \Drupal\site_alert\SiteAlertStorageInterface $storage */
+    /** @var SiteAlertStorageInterface $storage */
     $storage = $this->entityTypeManager->getStorage('site_alert');
     return (new CacheableMetadata())->setCacheMaxAge($storage->getCacheMaxAge());
   }
diff --git a/src/CliCommands.php b/src/CliCommands.php
index 9a1f7ed..42c070b 100644
--- a/src/CliCommands.php
+++ b/src/CliCommands.php
@@ -17,14 +17,14 @@ class CliCommands implements CliCommandsInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
    * Constructs a new CliCommands service.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
@@ -164,7 +164,7 @@ class CliCommands implements CliCommandsInterface {
    *   When TRUE or FALSE only active or inactive site alerts are returned. If
    *   NULL, both are returned.
    *
-   * @return \Drupal\site_alert\Entity\SiteAlert[]
+   * @return SiteAlert[]
    *   An array of site alert entities that match the label.
    */
   protected function getAlertsByLabel(string $label, ?bool $active = NULL): array {
diff --git a/src/CliCommandsInterface.php b/src/CliCommandsInterface.php
index 6aeda4d..362ba42 100644
--- a/src/CliCommandsInterface.php
+++ b/src/CliCommandsInterface.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\site_alert;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 /**
  * Interface for a service with shared code for CLI tools.
  */
@@ -27,11 +30,11 @@ interface CliCommandsInterface {
    *   - severity: The severity level, can be 'low', 'medium' or 'high'. If
    *     omitted or any other value this will default to 'medium'.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown when the Site Alert entity definition is invalid.
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Thrown when the Site Alert entity type is not defined.
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   Thrown when an error occurs during the saving of the site alert.
    * @throws \InvalidArgumentException
    *   Thrown in case one of the passed in arguments or options is invalid.
@@ -68,7 +71,7 @@ interface CliCommandsInterface {
    *
    * @throws \InvalidArgumentException
    *   Thrown when the label is missing or is not a string.
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   Thrown when an error occurs during the deletion of a site alert.
    */
   public function delete(string $label): int;
@@ -83,7 +86,7 @@ interface CliCommandsInterface {
    * @return int
    *   The number of site alerts that were disabled.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   Thrown when an error occurs while disabling a site alert.
    */
   public function disable(?string $label = NULL): int;
@@ -97,7 +100,7 @@ interface CliCommandsInterface {
    * @return int
    *   The number of site alerts that were enabled.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   Thrown when an error occurs while enabling a site alert.
    */
   public function enable(string $label): int;
diff --git a/src/Commands/SiteAlertCommands.php b/src/Commands/SiteAlertCommands.php
index 15ba448..e560b2b 100644
--- a/src/Commands/SiteAlertCommands.php
+++ b/src/Commands/SiteAlertCommands.php
@@ -15,14 +15,14 @@ class SiteAlertCommands extends DrushCommands {
   /**
    * The CLI service for doing CLI operations on site_alert.
    *
-   * @var \Drupal\site_alert\CliCommandsInterface
+   * @var CliCommandsInterface
    */
   protected $cli;
 
   /**
    * Construct a new Drush command object.
    *
-   * @param \Drupal\site_alert\CliCommandsInterface $cli_commands
+   * @param CliCommandsInterface $cli_commands
    *   The shared service for CLI commands.
    */
   public function __construct(CliCommandsInterface $cli_commands) {
diff --git a/src/Controller/SiteAlertController.php b/src/Controller/SiteAlertController.php
index 2a4153f..d46d053 100644
--- a/src/Controller/SiteAlertController.php
+++ b/src/Controller/SiteAlertController.php
@@ -18,32 +18,32 @@ class SiteAlertController extends ControllerBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The service that retrieves site alerts.
    *
-   * @var \Drupal\site_alert\GetAlertsInterface
+   * @var GetAlertsInterface
    */
   protected $getAlerts;
 
   /**
    * Constructs a new SiteAlertController.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\site_alert\GetAlertsInterface $getAlerts
+   * @param GetAlertsInterface $getAlerts
    *   The service that retrieves site alerts.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, RendererInterface $renderer, GetAlertsInterface $getAlerts) {
diff --git a/src/GetAlerts.php b/src/GetAlerts.php
index 9f78292..dfb6692 100644
--- a/src/GetAlerts.php
+++ b/src/GetAlerts.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\site_alert;
 
+use Drupal\Core\Entity\EntityStorageInterface;
 use DateTimeZone;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -15,14 +16,14 @@ class GetAlerts implements GetAlertsInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new GetAlerts service.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
@@ -83,7 +84,7 @@ class GetAlerts implements GetAlertsInterface {
   /**
    * Returns the entity storage for site alert entities.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   The entity storage.
    */
   protected function getStorage() {
diff --git a/src/GetAlertsInterface.php b/src/GetAlertsInterface.php
index 4b1d570..f23dfd7 100644
--- a/src/GetAlertsInterface.php
+++ b/src/GetAlertsInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\site_alert;
 
+use Drupal\site_alert\Entity\SiteAlert;
 /**
  * Interface for services that retrieve site alerts.
  */
@@ -18,7 +19,7 @@ interface GetAlertsInterface {
   /**
    * Returns the currently active site alerts.
    *
-   * @return \Drupal\site_alert\Entity\SiteAlert[]
+   * @return SiteAlert[]
    *   Array of currently active site alert entities.
    */
   public function getActiveAlerts();
diff --git a/src/Plugin/Block/SiteAlertBlock.php b/src/Plugin/Block/SiteAlertBlock.php
index b533416..536b594 100644
--- a/src/Plugin/Block/SiteAlertBlock.php
+++ b/src/Plugin/Block/SiteAlertBlock.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\site_alert\Plugin\Block;
 
+use Drupal\site_alert\SiteAlertStorage;
+use Drupal\site_alert\SiteAlertStorageInterface;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheableMetadata;
@@ -31,21 +33,21 @@ class SiteAlertBlock extends BlockBase implements ContainerFactoryPluginInterfac
   /**
    * The service that retrieves site alerts.
    *
-   * @var \Drupal\site_alert\GetAlertsInterface
+   * @var GetAlertsInterface
    */
   protected $getAlerts;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
@@ -58,11 +60,11 @@ class SiteAlertBlock extends BlockBase implements ContainerFactoryPluginInterfac
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\site_alert\GetAlertsInterface $getAlerts
+   * @param GetAlertsInterface $getAlerts
    *   The service that retrieves site alerts.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, GetAlertsInterface $getAlerts, EntityTypeManagerInterface $entityTypeManager, ModuleHandlerInterface $moduleHandler) {
@@ -109,7 +111,7 @@ class SiteAlertBlock extends BlockBase implements ContainerFactoryPluginInterfac
     // actually scheduled.
     // @todo Remove this workaround when the core bug is fixed.
     // @see https://www.drupal.org/project/site_alert/issues/3121988
-    /** @var \Drupal\site_alert\SiteAlertStorage $storage */
+    /** @var SiteAlertStorage $storage */
     $storage = $this->entityTypeManager->getStorage('site_alert');
     $scheduled_alerts_present = $storage->getCacheMaxAge() !== CacheBackendInterface::CACHE_PERMANENT;
     $workaround_needed = $scheduled_alerts_present && $this->moduleHandler->moduleExists('page_cache');
@@ -219,7 +221,7 @@ class SiteAlertBlock extends BlockBase implements ContainerFactoryPluginInterfac
    * {@inheritdoc}
    */
   public function getCacheMaxAge() {
-    /** @var \Drupal\site_alert\SiteAlertStorageInterface $storage */
+    /** @var SiteAlertStorageInterface $storage */
     $storage = $this->entityTypeManager->getStorage('site_alert');
     return $storage->getCacheMaxAge();
   }
diff --git a/tests/src/Functional/DrushCommandsTest.php b/tests/src/Functional/DrushCommandsTest.php
index 9b59902..387c353 100644
--- a/tests/src/Functional/DrushCommandsTest.php
+++ b/tests/src/Functional/DrushCommandsTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\site_alert\Functional;
 
+use Drupal\site_alert\SiteAlertStorageInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\site_alert\Traits\SiteAlertTestTrait;
 use Drush\TestTraits\DrushTestTrait;
@@ -21,7 +22,7 @@ class DrushCommandsTest extends BrowserTestBase {
   /**
    * The site alert entity storage handler.
    *
-   * @var \Drupal\site_alert\SiteAlertStorageInterface
+   * @var SiteAlertStorageInterface
    */
   protected $siteAlertStorage;
 
diff --git a/tests/src/Functional/SiteAlertTestBase.php b/tests/src/Functional/SiteAlertTestBase.php
index 465005d..87090a6 100644
--- a/tests/src/Functional/SiteAlertTestBase.php
+++ b/tests/src/Functional/SiteAlertTestBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\site_alert\Functional;
 
+use Behat\Mink\Element\NodeElement;
+use Behat\Mink\Exception\ElementNotFoundException;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -15,7 +17,7 @@ abstract class SiteAlertTestBase extends BrowserTestBase {
    * @param string $locator
    *   Link id, title, text or image alt.
    *
-   * @return \Behat\Mink\Element\NodeElement|null
+   * @return NodeElement|null
    *   The link node element.
    */
   public function findLink($locator) {
@@ -28,7 +30,7 @@ abstract class SiteAlertTestBase extends BrowserTestBase {
    * @param string $locator
    *   Input id, name or label.
    *
-   * @return \Behat\Mink\Element\NodeElement|null
+   * @return NodeElement|null
    *   The input field element.
    */
   public function findField($locator) {
@@ -41,7 +43,7 @@ abstract class SiteAlertTestBase extends BrowserTestBase {
    * @param string $locator
    *   Button id, value or alt.
    *
-   * @return \Behat\Mink\Element\NodeElement|null
+   * @return NodeElement|null
    *   The button node element.
    */
   public function findButton($locator) {
@@ -54,7 +56,7 @@ abstract class SiteAlertTestBase extends BrowserTestBase {
    * @param string $locator
    *   Button id, value or alt.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
+   * @throws ElementNotFoundException
    */
   public function pressButton($locator) {
     $this->getSession()->getPage()->pressButton($locator);
@@ -68,7 +70,7 @@ abstract class SiteAlertTestBase extends BrowserTestBase {
    * @param string $value
    *   Value.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
+   * @throws ElementNotFoundException
    *
    * @see \Behat\Mink\Element\NodeElement::setValue
    */
diff --git a/tests/src/Functional/SiteAlertUiTest.php b/tests/src/Functional/SiteAlertUiTest.php
index 47079a5..969616c 100644
--- a/tests/src/Functional/SiteAlertUiTest.php
+++ b/tests/src/Functional/SiteAlertUiTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\site_alert\Functional;
 
+use Drupal\user\UserInterface;
 /**
  * Tests that the Site Alert is working correctly.
  *
@@ -25,14 +26,14 @@ class SiteAlertUiTest extends SiteAlertTestBase {
   /**
    * A test user with permission to administer site alerts.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create and log in an administrative user.
diff --git a/tests/src/FunctionalJavascript/SiteAlertWebDriverTestBase.php b/tests/src/FunctionalJavascript/SiteAlertWebDriverTestBase.php
index 225b5f1..62c459b 100644
--- a/tests/src/FunctionalJavascript/SiteAlertWebDriverTestBase.php
+++ b/tests/src/FunctionalJavascript/SiteAlertWebDriverTestBase.php
@@ -25,7 +25,7 @@ abstract class SiteAlertWebDriverTestBase extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Enable page caching.
@@ -85,7 +85,7 @@ abstract class SiteAlertWebDriverTestBase extends WebDriverTestBase {
    */
   protected function assertSiteAlertVisible($message) {
     $selector = 'div:contains("' . $message . '")';
-    $this->assertElementPresent($selector);
+    $this->assertSession()->elementExists($selector);
   }
 
   /**
@@ -96,7 +96,7 @@ abstract class SiteAlertWebDriverTestBase extends WebDriverTestBase {
    */
   protected function assertSiteAlertNotVisible($message) {
     $selector = 'div:contains("' . $message . '")';
-    $this->assertElementNotPresent($selector);
+    $this->assertSession()->elementNotExists($selector);
   }
 
   /**
@@ -114,28 +114,28 @@ abstract class SiteAlertWebDriverTestBase extends WebDriverTestBase {
    * Asserts that the site alert block is present on the page.
    */
   protected function assertSiteAlertBlockPresent() {
-    $this->assertElementPresent('#block-site-alert-block');
+    $this->assertSession()->elementExists('#block-site-alert-block');
   }
 
   /**
    * Asserts that the site alert block is not present on the page.
    */
   protected function assertSiteAlertBlockNotPresent() {
-    $this->assertElementNotPresent('#block-site-alert-block');
+    $this->assertSession()->elementNotExists('#block-site-alert-block');
   }
 
   /**
    * Asserts that the JavaScript code to refresh the alerts is present.
    */
   protected function assertJavaScriptPresent() {
-    $this->assertElementPresent('script[src*="site_alert.js"]');
+    $this->assertSession()->elementExists('script[src*="site_alert.js"]');
   }
 
   /**
    * Asserts that the JavaScript code to refresh the alerts is present.
    */
   protected function assertJavaScriptNotPresent() {
-    $this->assertElementNotPresent('script[src*="site_alert.js"]');
+    $this->assertSession()->elementNotExists('script[src*="site_alert.js"]');
   }
 
 }
diff --git a/tests/src/Kernel/CliCommandsTest.php b/tests/src/Kernel/CliCommandsTest.php
index 0bcbb86..f54588a 100644
--- a/tests/src/Kernel/CliCommandsTest.php
+++ b/tests/src/Kernel/CliCommandsTest.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\site_alert\Kernel;
 
+use Drupal\site_alert\CliCommandsInterface;
+use Drupal\site_alert\SiteAlertStorageInterface;
 use Drupal\Tests\site_alert\Traits\SiteAlertTestTrait;
 
 /**
@@ -19,21 +21,21 @@ class CliCommandsTest extends SiteAlertKernelTestBase {
   /**
    * The service to execute CLI commands. This is the system under test.
    *
-   * @var \Drupal\site_alert\CliCommandsInterface
+   * @var CliCommandsInterface
    */
   protected $cliCommands;
 
   /**
    * The site alert entity storage handler.
    *
-   * @var \Drupal\site_alert\SiteAlertStorageInterface
+   * @var SiteAlertStorageInterface
    */
   protected $siteAlertStorage;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->siteAlertStorage = $this->entityTypeManager->getStorage('site_alert');
diff --git a/tests/src/Kernel/GetAlertsTest.php b/tests/src/Kernel/GetAlertsTest.php
index 9edd33a..309bf19 100644
--- a/tests/src/Kernel/GetAlertsTest.php
+++ b/tests/src/Kernel/GetAlertsTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\site_alert\Kernel;
 
+use Drupal\site_alert\GetAlertsInterface;
 /**
  * Tests retrieving of currently active alerts.
  *
@@ -13,14 +14,14 @@ class GetAlertsTest extends SiteAlertKernelTestBase {
   /**
    * The service to retrieve site alerts. This is the system under test.
    *
-   * @var \Drupal\site_alert\GetAlertsInterface
+   * @var GetAlertsInterface
    */
   protected $getAlerts;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->getAlerts = $this->container->get('site_alert.get_alerts');
diff --git a/tests/src/Kernel/SiteAlertKernelTestBase.php b/tests/src/Kernel/SiteAlertKernelTestBase.php
index 9e3a1ee..5defa62 100644
--- a/tests/src/Kernel/SiteAlertKernelTestBase.php
+++ b/tests/src/Kernel/SiteAlertKernelTestBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\site_alert\Kernel;
 
+use Drupal\site_alert\Entity\SiteAlert;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;
 use Drupal\KernelTests\KernelTestBase;
@@ -26,21 +28,21 @@ abstract class SiteAlertKernelTestBase extends KernelTestBase {
   /**
    * Test site alert entities.
    *
-   * @var \Drupal\site_alert\Entity\SiteAlert[]
+   * @var SiteAlert[]
    */
   protected $alerts;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installEntitySchema('site_alert');
@@ -77,22 +79,22 @@ abstract class SiteAlertKernelTestBase extends KernelTestBase {
       switch ($matches[1]) {
         case 'past':
           $values['scheduling'] = [
-            'value' => $format_date('-3 hours'),
-            'end_value' => $format_date('-2 hours'),
+            'value' => \Drupal::service('date.formatter')->format('-3 hours'),
+            'end_value' => \Drupal::service('date.formatter')->format('-2 hours'),
           ];
           break;
 
         case 'present':
           $values['scheduling'] = [
-            'value' => $format_date('-1 hours'),
-            'end_value' => $format_date('+1 hours'),
+            'value' => \Drupal::service('date.formatter')->format('-1 hours'),
+            'end_value' => \Drupal::service('date.formatter')->format('+1 hours'),
           ];
           break;
 
         case 'future':
           $values['scheduling'] = [
-            'value' => $format_date('+2 hours'),
-            'end_value' => $format_date('+3 hours'),
+            'value' => \Drupal::service('date.formatter')->format('+2 hours'),
+            'end_value' => \Drupal::service('date.formatter')->format('+3 hours'),
           ];
           break;
       }
diff --git a/tests/src/Kernel/SiteAlertStorageTest.php b/tests/src/Kernel/SiteAlertStorageTest.php
index a389743..6621ba4 100644
--- a/tests/src/Kernel/SiteAlertStorageTest.php
+++ b/tests/src/Kernel/SiteAlertStorageTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\site_alert\Kernel;
 
+use Drupal\site_alert\SiteAlertStorageInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 
 /**
@@ -15,14 +16,14 @@ class SiteAlertStorageTest extends SiteAlertKernelTestBase {
   /**
    * The site alert entity storage handler. This is the system under test.
    *
-   * @var \Drupal\site_alert\SiteAlertStorageInterface
+   * @var SiteAlertStorageInterface
    */
   protected $siteAlertStorage;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->siteAlertStorage = $this->entityTypeManager->getStorage('site_alert');
diff --git a/tests/src/Traits/SiteAlertTestTrait.php b/tests/src/Traits/SiteAlertTestTrait.php
index 9573bc2..2eb227a 100644
--- a/tests/src/Traits/SiteAlertTestTrait.php
+++ b/tests/src/Traits/SiteAlertTestTrait.php
@@ -15,7 +15,7 @@ trait SiteAlertTestTrait {
   /**
    * Checks that the given site alert entity contains the given data.
    *
-   * @param \Drupal\site_alert\Entity\SiteAlert $alert
+   * @param SiteAlert $alert
    *   The site alert entity to check.
    * @param string $label
    *   The expected label.
@@ -127,7 +127,7 @@ trait SiteAlertTestTrait {
    * @param string $label
    *   The label to search for.
    *
-   * @return \Drupal\site_alert\Entity\SiteAlert
+   * @return SiteAlert
    *   The site alert entity.
    */
   protected function loadAlertByLabel(string $label): SiteAlert {
