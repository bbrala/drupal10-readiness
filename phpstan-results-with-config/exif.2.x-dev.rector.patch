diff --git a/exif.drush.inc b/exif.drush.inc
index c684d31..ceb0555 100644
--- a/exif.drush.inc
+++ b/exif.drush.inc
@@ -1,5 +1,9 @@
 <?php
 
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\File\FileSystemInterface;
 /**
  * @file
  * Drush extension allowing to run some tasks related to exif.
@@ -281,7 +285,7 @@ function __drush_exif_list_active_types($entity_types = []) {
  * @return int
  *   Node count updated.
  *
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws EntityStorageException
  */
 function __drush_exif_node_update($type = '') {
   $query = "SELECT n.nid FROM {node} n WHERE n.type = :type";
@@ -305,7 +309,7 @@ function __drush_exif_node_update($type = '') {
  * @param string $type
  *
  * @return int
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws EntityStorageException
  */
 function __drush_exif_file_update($type = '') {
   $query = "SELECT n.fid FROM {file_managed} n WHERE n.type = :type";
@@ -356,9 +360,9 @@ function __drush_exif_media_update($type = '') {
  * @param $file
  * @param $langcode
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
+ * @throws EntityStorageException
  */
 function __drush_exif_entity_import($entity_type, $type, $uid, $field, $file, $langcode) {
   $title = basename($file);
@@ -375,7 +379,7 @@ function __drush_exif_entity_import($entity_type, $type, $uid, $field, $file, $l
   // Saving file. automatically added to file entity if present.
   $file_content = file_get_contents($file);
   // Saves a file to the specified destination and creates a database entry.
-  $file_temp = file_save_data($file_content, 'public://' . $title, FILE_EXISTS_RENAME);
+  $file_temp = \Drupal::service('file.repository')->writeData($file_content, 'public://' . $title, FileSystemInterface::EXISTS_RENAME);
 
   // If not file entity, create associated element.
   if ($file_temp && $entity_type != 'file') {
diff --git a/src/Controller/ExifSettingsController.php b/src/Controller/ExifSettingsController.php
index 3482a1a..9d34843 100644
--- a/src/Controller/ExifSettingsController.php
+++ b/src/Controller/ExifSettingsController.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\exif\Controller;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Controller\ControllerBase;
@@ -27,14 +31,14 @@ class ExifSettingsController extends ControllerBase {
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;
 
   /**
    * Constructs a ExifSettingsController object.
    *
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
    */
   public function __construct(EntityDisplayRepositoryInterface $entity_display_repository) {
@@ -102,9 +106,9 @@ class ExifSettingsController extends ControllerBase {
    *
    * Use by routing.yml
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function createPhotographyNodeType() {
     $typeName = 'Photography';
@@ -169,9 +173,9 @@ class ExifSettingsController extends ControllerBase {
    *
    * used by routing.yml
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function createPhotographyMediaType() {
     $typeName = 'Photography';
@@ -276,12 +280,12 @@ class ExifSettingsController extends ControllerBase {
    *
    * @param string $entity_type
    *   The entity type name to be modified.
-   * @param \Drupal\Core\Entity\EntityInterface $type_definition
+   * @param EntityInterface $type_definition
    *   The definition of type.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   protected function addFields($entity_type, EntityInterface $type_definition) {
     // First, add image field.
@@ -326,7 +330,7 @@ class ExifSettingsController extends ControllerBase {
    *
    * @param string $entity_type
    *   The entity type name to be modified.
-   * @param \Drupal\Core\Entity\EntityInterface $type
+   * @param EntityInterface $type
    *   The definition of type.
    * @param string $fieldLabel
    *   Field description (what is show in forms).
@@ -341,9 +345,9 @@ class ExifSettingsController extends ControllerBase {
    * @param array $settings
    *   Specific setting for the field (optional).
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   protected function addFieldToEntityType($entity_type, EntityInterface $type, $fieldLabel, $fieldName, $fieldType, $fieldWidget, array $widgetSettings = [], array $settings = []) {
     $realFieldName = 'field_' . $fieldName;
@@ -367,11 +371,11 @@ class ExifSettingsController extends ControllerBase {
   /**
    * Get storage for fields configuration.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   The entity storage.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getFieldStorageConfig() {
     return $this->entityTypeManager()
@@ -381,11 +385,11 @@ class ExifSettingsController extends ControllerBase {
   /**
    * Get EntityStorage for Fields Configuration.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   storage of fields configuration.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getFieldConfig() {
     return $this->entityTypeManager()
@@ -397,7 +401,7 @@ class ExifSettingsController extends ControllerBase {
    *
    * @param string $entity_type
    *   The entity type name to be modified.
-   * @param \Drupal\Core\Entity\EntityInterface $type
+   * @param EntityInterface $type
    *   The definition of type.
    * @param string $fieldName
    *   Field name (the real one used internally).
@@ -410,12 +414,12 @@ class ExifSettingsController extends ControllerBase {
    * @param array $widgetSettings
    *   Settings to set for the widget.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The Field Entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   protected function entityAddExtraField($entity_type, EntityInterface $type, $fieldName, $fieldLabel, array $fieldSettings, $fieldWidget, array $widgetSettings) {
     $machineName = strtolower($fieldName);
@@ -469,7 +473,7 @@ class ExifSettingsController extends ControllerBase {
    *
    * @param string $entity_type
    *   The entity type name to be modified.
-   * @param \Drupal\Core\Entity\EntityInterface $type
+   * @param EntityInterface $type
    *   The definition of type.
    * @param string $fieldLabel
    *   Field description (what is show in forms).
@@ -486,9 +490,9 @@ class ExifSettingsController extends ControllerBase {
    * @param array $settings
    *   Specific setting for the field (optional).
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   protected function addReferenceToEntityType($entity_type, EntityInterface $type, $fieldLabel, $fieldName, $fieldType, $fieldTypeBundle, $fieldWidget, array $widgetSettings = [], array $settings = []) {
     $realFieldName = 'field_' . $fieldName;
diff --git a/src/Controller/ExifSettingsForm.php b/src/Controller/ExifSettingsForm.php
index db7ac69..eb1b04d 100644
--- a/src/Controller/ExifSettingsForm.php
+++ b/src/Controller/ExifSettingsForm.php
@@ -30,9 +30,9 @@ class ExifSettingsForm extends ConfigFormBase implements ContainerInjectionInter
   /**
    * Constructs the ExifSettingsForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The configuration factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
    */
   public function __construct(ConfigFactoryInterface $configFactory, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/ExifContent.php b/src/ExifContent.php
index 016755f..d1d6e69 100644
--- a/src/ExifContent.php
+++ b/src/ExifContent.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\exif;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\TypedData\Exception\MissingDataException;
+use Drupal\Core\File\FileSystem;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal;
 use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\Unicode;
@@ -43,11 +49,11 @@ class ExifContent {
    *
    * @param string $entityType
    *   The entity type name to be modified.
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity to look for metadata fields.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function checkTitle($entityType, FieldableEntityInterface $entity) {
     $bundles_to_check = $this->getBundleForExifData();
@@ -105,14 +111,14 @@ class ExifContent {
    *
    * @param string $entityType
    *   The entity type name to be modified.
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity to look for metadata fields.
    *
    * @return array
    *   The list of metadata fields found in the entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function filterFieldsOnSettings($entityType, FieldableEntityInterface $entity) {
     $result = [];
@@ -174,14 +180,14 @@ class ExifContent {
    *
    * @param string $entityType
    *   The entity type name to be modified.
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity to look for metadata fields.
    * @param bool $update
    *   Indicate an Update (against an Insert).
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function entity_insert_update($entityType, FieldableEntityInterface $entity, $update = TRUE) {
     $bundles_to_check = $this->getBundleForExifData();
@@ -268,7 +274,7 @@ class ExifContent {
   /**
    * Look for image fields in an entity type.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity to look for image fields.
    *
    * @return array
@@ -292,12 +298,12 @@ class ExifContent {
   /**
    * List fields that contains exif metadata.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    * @param $ar_exif_fields
    * @param $image_fields
    *
    * @return array|bool
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    */
   private function getImageFieldsMetadata(FieldableEntityInterface $entity, &$ar_exif_fields, $image_fields) {
     $result = [];
@@ -333,7 +339,7 @@ class ExifContent {
   /**
    * Retrieve the URI and Language of an image.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity to look for.
    * @param string $field_image_name
    *   The field name containing the image.
@@ -342,7 +348,7 @@ class ExifContent {
    *   Array with uri and language for each images in
    *   or FALSE if the entity type is not known.
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    */
   private function getFileUriAndLanguage(FieldableEntityInterface $entity, $field_image_name) {
     $result = FALSE;
@@ -373,7 +379,7 @@ class ExifContent {
   /**
    * Retrieve all metadata values from an image.
    *
-   * @param \Drupal\Core\Field\Plugin\Field\FieldType\UriItem $file_uri
+   * @param UriItem $file_uri
    *   The File URI to look at.
    *
    * @return array
@@ -409,7 +415,7 @@ class ExifContent {
     // Read the metadata.
     $exif = ExifFactory::getExifInterface();
 
-    /** @var \Drupal\Core\File\FileSystem $file_system */
+    /** @var FileSystem $file_system */
     $file_system = \Drupal::service('file_system');
     $fullmetadata = $exif->readMetadataTags($file_system->realpath($uri));
     return $fullmetadata;
@@ -436,7 +442,7 @@ class ExifContent {
    *
    * @param int $index
    *   The index to set the new value.
-   * @param \Drupal\Core\Field\FieldItemListInterface $field
+   * @param FieldItemListInterface $field
    *   The field to update.
    * @param string $exif_section
    *   The exif section where value has been retrieved.
@@ -454,7 +460,7 @@ class ExifContent {
    *
    * @param int $index
    *   The index to set the new value.
-   * @param \Drupal\Core\Field\FieldItemListInterface $field
+   * @param FieldItemListInterface $field
    *   The field to update.
    * @param string $exif_section
    *   The exif section where value has been retrieved.
@@ -463,9 +469,9 @@ class ExifContent {
    * @param string $exif_value
    *   The exif value to update.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   private function handleField($index, FieldItemListInterface &$field, $exif_section, $exif_name, $exif_value) {
     $value = $this->sanitizeValue($exif_value);
@@ -500,7 +506,7 @@ class ExifContent {
    *
    * @param int $index
    *   The index to set the new value.
-   * @param \Drupal\Core\Field\FieldItemListInterface $field
+   * @param FieldItemListInterface $field
    *   The field to update.
    * @param string $exif_section
    *   The exif section where value has been retrieved.
@@ -509,7 +515,7 @@ class ExifContent {
    * @param string $exif_value
    *   The exif value to update.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function handleTaxonomyField($index, FieldItemListInterface &$field, $exif_section, $exif_name, $exif_value) {
     // Look for the term.
@@ -555,10 +561,10 @@ class ExifContent {
    * @param int $parent_term_id
    *   Parent Term Id (or default, 0 if none).
    *
-   * @return \Drupal\Core\Entity\EntityInterface|\Drupal\taxonomy\Entity\Term
+   * @return EntityInterface|Term
    *   The created Term.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function createTerm($vid, $name, $parent_term_id = 0) {
     $values = [
@@ -576,7 +582,7 @@ class ExifContent {
    *
    * @param int $index
    *   The index to set the new value.
-   * @param \Drupal\Core\Field\FieldItemListInterface $field
+   * @param FieldItemListInterface $field
    *   The field to update.
    * @param string $exif_section
    *   The exif section where value has been retrieved.
@@ -585,8 +591,8 @@ class ExifContent {
    * @param string $exif_sanitized_value
    *   The exif value to update.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function handleDateField($index, FieldItemListInterface &$field, $exif_section, $exif_name, $exif_sanitized_value) {
 
diff --git a/src/ExifFactory.php b/src/ExifFactory.php
index da5b85f..8fdf974 100644
--- a/src/ExifFactory.php
+++ b/src/ExifFactory.php
@@ -27,7 +27,7 @@ class ExifFactory {
   /**
    * Return configured exif parser.
    *
-   * @return \Drupal\exif\ExifInterface
+   * @return ExifInterface
    *   configured exif parser
    */
   public static function getExifInterface() {
diff --git a/src/ExifHelp.php b/src/ExifHelp.php
index b2f8544..56c56c6 100644
--- a/src/ExifHelp.php
+++ b/src/ExifHelp.php
@@ -22,8 +22,8 @@ class ExifHelp {
    */
   public static function content() {
     global $base_url;
-    $filepath = drupal_get_path('module', 'exif') . '/sample.jpg';
-    $imageUrl = $base_url . '/' . drupal_get_path('module', 'exif') . '/sample.jpg';
+    $filepath = \Drupal::service('extension.list.module')->getPath('exif') . '/sample.jpg';
+    $imageUrl = $base_url . '/' . \Drupal::service('extension.list.module')->getPath('exif') . '/sample.jpg';
     $taxonomyUrl = Url::fromRoute('entity.taxonomy_vocabulary.collection')
       ->toString();
     $permissionUrl = Url::fromRoute('user.admin_permissions')->toString();
diff --git a/src/Plugin/Field/FieldWidget/ExifFieldWidgetBase.php b/src/Plugin/Field/FieldWidget/ExifFieldWidgetBase.php
index dcd7ae8..c1f73e3 100644
--- a/src/Plugin/Field/FieldWidget/ExifFieldWidgetBase.php
+++ b/src/Plugin/Field/FieldWidget/ExifFieldWidgetBase.php
@@ -29,7 +29,7 @@ abstract class ExifFieldWidgetBase extends ExifWidgetBase {
    *
    * @param array $element
    *   A form element array containing basic properties for the widget.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $form
    *   The form structure where widgets are being attached to.
@@ -47,7 +47,7 @@ abstract class ExifFieldWidgetBase extends ExifWidgetBase {
    *
    * @param array $element
    *   A form element array containing basic properties for the widget.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function validateExifFieldSeparator(array $element, FormStateInterface &$form_state) {
diff --git a/src/Plugin/Field/FieldWidget/ExifHiddenWidget.php b/src/Plugin/Field/FieldWidget/ExifHiddenWidget.php
index 9a3608a..2c29ef7 100644
--- a/src/Plugin/Field/FieldWidget/ExifHiddenWidget.php
+++ b/src/Plugin/Field/FieldWidget/ExifHiddenWidget.php
@@ -33,7 +33,7 @@ class ExifHiddenWidget extends ExifFieldWidgetBase {
    *
    * @param array $element
    *   A form element array containing basic properties for the widget.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $form
    *   The form structure where widgets are being attached to.
diff --git a/src/Plugin/Field/FieldWidget/ExifReadonlyWidget.php b/src/Plugin/Field/FieldWidget/ExifReadonlyWidget.php
index d6e73f5..52457bf 100644
--- a/src/Plugin/Field/FieldWidget/ExifReadonlyWidget.php
+++ b/src/Plugin/Field/FieldWidget/ExifReadonlyWidget.php
@@ -35,7 +35,7 @@ class ExifReadonlyWidget extends ExifFieldWidgetBase implements ContainerFactory
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -46,13 +46,13 @@ class ExifReadonlyWidget extends ExifFieldWidgetBase implements ContainerFactory
    *   The plugin_id for the widget.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the widget is associated.
    * @param array $settings
    *   The widget settings.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Plugin/Field/FieldWidget/ExifWidgetBase.php b/src/Plugin/Field/FieldWidget/ExifWidgetBase.php
index bcea381..a5cb760 100644
--- a/src/Plugin/Field/FieldWidget/ExifWidgetBase.php
+++ b/src/Plugin/Field/FieldWidget/ExifWidgetBase.php
@@ -31,7 +31,7 @@ abstract class ExifWidgetBase extends WidgetBase {
    *
    * @param array $element
    *   A form element array containing basic properties for the widget.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $form
    *   The form structure where widgets are being attached to.
diff --git a/src/SimpleExifToolFacade.php b/src/SimpleExifToolFacade.php
index 68a9077..a7bf513 100644
--- a/src/SimpleExifToolFacade.php
+++ b/src/SimpleExifToolFacade.php
@@ -22,7 +22,7 @@ class SimpleExifToolFacade implements ExifInterface {
   /**
    * Return singleton instance.
    *
-   * @return \Drupal\exif\ExifInterface
+   * @return ExifInterface
    *   the chosen implementation instance.
    */
   public static function getInstance() {
