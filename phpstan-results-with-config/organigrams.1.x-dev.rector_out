modules/contrib/organigrams/organigrams.module
modules/contrib/organigrams/src/Controller/OrganigramsController.php
modules/contrib/organigrams/src/Form/OrganigramsImportD7Form.php
modules/contrib/organigrams/src/OrganigramsListBuilder.php
modules/contrib/organigrams/src/Plugin/Block/OrganigramsBlocks.php
modules/contrib/organigrams/src/Plugin/Derivative/OrganigramsBlocks.php
modules/contrib/organigrams/src/TaxonomyTermTree.php

6 files with changes
====================

1) modules/contrib/organigrams/src/TaxonomyTermTree.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;

@@ @@
   /**
    * TaxonomyTermTree constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManager $entityTypeManager
+   * @param EntityTypeManager $entityTypeManager
    *   Contains the entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManager $entityFieldManager
+   * @param EntityFieldManager $entityFieldManager
    *   Contains the entity field manager.
    */
   public function __construct(EntityTypeManager $entityTypeManager, EntityFieldManager $entityFieldManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/organigrams/src/Plugin/Derivative/OrganigramsBlocks.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The node storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $taxonomyStorage;

@@ @@
   /**
    * Constructs new OrganigramsBlocks.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $taxonomy_storage
+   * @param EntityStorageInterface $taxonomy_storage
    *   The taxonomy storage.
    */
   public function __construct(EntityStorageInterface $taxonomy_storage) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/organigrams/src/Plugin/Block/OrganigramsBlocks.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * The Taxonomy Tree builder.
    *
-   * @var \Drupal\organigrams\TaxonomyTermTree
+   * @var TaxonomyTermTree
    */
   protected $taxonomyTermTree;

@@ @@
    *   Contains the plugin id.
    * @param array $plugin_definition
    *   Contains the plugin definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   Contains the entity manager.
-   * @param \Drupal\organigrams\TaxonomyTermTree $taxonomyTermTree
+   * @param TaxonomyTermTree $taxonomyTermTree
    *   The Taxonomy Tree builder.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, EntityTypeManagerInterface $entity_manager, TaxonomyTermTree $taxonomyTermTree) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/organigrams/src/Form/OrganigramsImportD7Form.php:28

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/organigrams/src/Controller/OrganigramsController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\organigrams\Controller;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\taxonomy\VocabularyInterface;
 use Drupal\Core\Access\AccessResult;
@@ @@
   /**
    * The Taxonomy Tree builder.
    *
-   * @var \Drupal\organigrams\TaxonomyTermTree
+   * @var TaxonomyTermTree
    */
   protected $taxonomyTermTree;

@@ @@
   /**
    * Constructs a OrganigramsController object.
    *
-   * @param \Drupal\organigrams\TaxonomyTermTree $taxonomyTermTree
+   * @param TaxonomyTermTree $taxonomyTermTree
    *   The Taxonomy Tree builder.
    */
   public function __construct(TaxonomyTermTree $taxonomyTermTree) {
@@ @@
   /**
    * Returns a form to add a new term to a vocabulary.
    *
-   * @param \Drupal\taxonomy\VocabularyInterface $taxonomy_vocabulary
+   * @param VocabularyInterface $taxonomy_vocabulary
    *   The vocabulary this term will be added to.
    *
    * @return array
@@ @@
   /**
    * Checks if a vocabulary contains organigrams settings.
    *
-   * @param \Drupal\taxonomy\VocabularyInterface $taxonomy_vocabulary
+   * @param VocabularyInterface $taxonomy_vocabulary
    *   The vocabulary to perform the access check on.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function viewOrganigramAccess(VocabularyInterface $taxonomy_vocabulary) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/organigrams/organigrams.module:80

    ---------- begin diff ----------
@@ @@
  */
 function organigrams_vocabulary_settings_form(array &$form, array $organigram_settings) {
   // Set the config path of the vocabulary fields.
-  $config_path = drupal_get_path('module', 'organigrams') . '/config/vocabulary_fields';
+  $config_path = \Drupal::service('extension.list.module')->getPath('organigrams') . '/config/vocabulary_fields';
   // Get the field config files.
   $files = \Drupal::service('file_system')->scanDirectory($config_path, '/^.*\\.yml$/i', ['key' => 'filename']);

@@ @@
  *
  * @param array $form
  *   Contains the vocabulary add form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   Contains the form state of the vocabulary add form.
  */
 function organigrams_vocabulary_form_submit(array $form, FormStateInterface $form_state) {
@@ @@
  */
 function organigrams_create_term_fields($vid) {
   // Set the config path to the taxonomy fields.
-  $config_path = drupal_get_path('module', 'organigrams') . '/config/taxonomy_fields';
+  $config_path = \Drupal::service('extension.list.module')->getPath('organigrams') . '/config/taxonomy_fields';
   // Get the field config files.
   $files = \Drupal::service('file_system')->scanDirectory($config_path, '/^.*\\.yml$/i', ['key' => 'filename']);

@@ @@
       $organigram = $organigramsController->viewOrganigram($vocabulary);

       // Put the organigram as value in this token.
-      $replacements[$original] = render($organigram);
+      $replacements[$original] = \Drupal::service('renderer')->render($organigram);
     }
   }
   return $replacements;
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * RenderRector
 * ArgumentRemoverRector


 [OK] 6 files have been changed by Rector                                       

