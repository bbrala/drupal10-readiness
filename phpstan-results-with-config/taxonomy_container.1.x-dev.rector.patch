diff --git a/src/Plugin/EntityReferenceSelection/TermSelection.php b/src/Plugin/EntityReferenceSelection/TermSelection.php
index 84f4b8d..69c41bb 100644
--- a/src/Plugin/EntityReferenceSelection/TermSelection.php
+++ b/src/Plugin/EntityReferenceSelection/TermSelection.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\taxonomy_container\Plugin\EntityReferenceSelection;
 
+use Drupal\taxonomy\TermStorageInterface;
+use Drupal\taxonomy\TermInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\taxonomy\Plugin\EntityReferenceSelection\TermSelection as BaseTermSelection;
@@ -65,7 +67,7 @@ class TermSelection extends BaseTermSelection {
     $bundles = $this->entityTypeBundleInfo->getBundleInfo('taxonomy_term');
     $bundle_names = $this->getConfiguration()['target_bundles'] ?: array_keys($bundles);
 
-    /** @var \Drupal\taxonomy\TermStorageInterface $term_storage */
+    /** @var TermStorageInterface $term_storage */
     $term_storage = $this->entityTypeManager->getStorage('taxonomy_term');
 
     $prefix = $this->configuration['prefix'];
@@ -81,7 +83,7 @@ class TermSelection extends BaseTermSelection {
         $key = $bundle;
       }
 
-      /** @var \Drupal\taxonomy\TermInterface[] $terms */
+      /** @var TermInterface[] $terms */
       $terms = $term_storage->loadTree($bundle, 0, NULL, TRUE);
       $protected_terms = [];
 
diff --git a/tests/src/Unit/TermSelectionTest.php b/tests/src/Unit/TermSelectionTest.php
index 41031a8..5595702 100644
--- a/tests/src/Unit/TermSelectionTest.php
+++ b/tests/src/Unit/TermSelectionTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\taxonomy_container\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ -25,52 +28,53 @@ use Prophecy\Argument;
  */
 class TermSelectionTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The mocked entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityTypeManagerInterface|ObjectProphecy
    */
   protected $entityTypeManager;
 
   /**
    * The mocked module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var ModuleHandlerInterface|ObjectProphecy
    */
   protected $moduleHandler;
 
   /**
    * The mocked taxonomy term entity storage.
    *
-   * @var \Drupal\taxonomy\TermStorageInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var TermStorageInterface|ObjectProphecy
    */
   protected $termStorage;
 
   /**
    * A mocked test user.
    *
-   * @var \Drupal\Core\Session\AccountInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var AccountInterface|ObjectProphecy
    */
   protected $user;
 
   /**
    * A mocked entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityFieldManagerInterface|ObjectProphecy
    */
   protected $entityFieldManager;
 
   /**
    * A mocked bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityTypeBundleInfoInterface|ObjectProphecy
    */
   public $entityTypeBundleInfo;
 
   /**
    * A mocked entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityRepositoryInterface|ObjectProphecy
    */
   protected $entityRepository;
 
@@ -155,16 +159,14 @@ class TermSelectionTest extends UnitTestCase {
    *   Optional ID of the first parent term. Omit this or set to 0 to indicate
    *   that this is a root level term.
    *
-   * @return \PHPUnit_Framework_MockObject_MockObject
+   * @return MockObject
    *   The mocked term entity.
    */
   protected function getMockTerm($id, $label, $parent = 0) {
     // We're using MockBuilder instead of Prophecy so we can mock the accessing
     // of the public properties $term->parents and $term->depth. This is not
     // supported by Prophecy.
-    $term = $this->getMockBuilder(Term::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $term = $this->createMock(Term::class);
     $term->expects($this->any())
       ->method('id')
       ->willReturn($id);
@@ -187,7 +189,7 @@ class TermSelectionTest extends UnitTestCase {
   /**
    * Returns an instance of the plugin being tested.
    *
-   * @return \Drupal\taxonomy_container\Plugin\EntityReferenceSelection\TermSelection
+   * @return TermSelection
    *   The plugin being tested.
    */
   protected function instantiatePlugin(array $configuration = []) {
