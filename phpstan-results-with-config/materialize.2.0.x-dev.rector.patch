diff --git a/Commands/materialize/SubThemeCommands.php b/Commands/materialize/SubThemeCommands.php
index ee0c00c..ae82c82 100644
--- a/Commands/materialize/SubThemeCommands.php
+++ b/Commands/materialize/SubThemeCommands.php
@@ -106,7 +106,7 @@ class SubThemeCommands extends DrushCommands {
     ));
 
     // Ensure the STARTERKIT directory exists.
-    $starterkit_path = Utils::normalizePath($drupal_root . '/' . drupal_get_path('theme', 'materialize') . '/STARTERKIT');
+    $starterkit_path = Utils::normalizePath($drupal_root . '/' . \Drupal::service('extension.list.theme')->getPath('materialize') . '/STARTERKIT');
     if (!is_dir($starterkit_path)) {
       return drush_set_error('MATERIALIZE_STARTERKIT_NOT_FOUND',
         dt('The STARTERKIT directory was not found in "!directory"',
diff --git a/materialize.drush.inc b/materialize.drush.inc
index 71afa3e..50ed012 100644
--- a/materialize.drush.inc
+++ b/materialize.drush.inc
@@ -123,7 +123,7 @@ function drush_materialize_subtheme($machine_name = NULL, $name = NULL) {
   }
 
   // Ensure the STARTERKIT directory exists.
-  $starterkit_path = drush_normalize_path(drush_get_context('DRUSH_DRUPAL_ROOT') . '/' . drupal_get_path('theme', 'materialize') . '/STARTERKIT');
+  $starterkit_path = drush_normalize_path(drush_get_context('DRUSH_DRUPAL_ROOT') . '/' . \Drupal::service('extension.list.theme')->getPath('materialize') . '/STARTERKIT');
   if (!is_dir($starterkit_path)) {
     return drush_set_error('MATERIALIZE_STARTERKIT_NOT_FOUND', dt('The STARTERKIT directory was not found in "!directory"', ['!directory' => dirname($starterkit_path)]));
     // Allow localize.drupal.org to pick up the string to translate.
diff --git a/src/Annotation/MaterializeSetting.php b/src/Annotation/MaterializeSetting.php
index be3a67f..b08a11c 100644
--- a/src/Annotation/MaterializeSetting.php
+++ b/src/Annotation/MaterializeSetting.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\materialize\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Doctrine\Common\Annotations\Annotation\Attribute;
 use Doctrine\Common\Annotations\Annotation\Attributes;
 use Drupal\Component\Annotation\Plugin;
@@ -31,7 +32,7 @@ class MaterializeSetting extends Plugin {
   /**
    * The setting's description.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $description;
 
@@ -45,14 +46,14 @@ class MaterializeSetting extends Plugin {
   /**
    * The setting's groups.
    *
-   * @var \Drupal\Core\Annotation\Translation[]
+   * @var Translation[]
    */
   public $groups = [];
 
   /**
    * The setting's title.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $title;
 
diff --git a/src/Annotation/MaterializeUpdate.php b/src/Annotation/MaterializeUpdate.php
index 071b237..de8269f 100644
--- a/src/Annotation/MaterializeUpdate.php
+++ b/src/Annotation/MaterializeUpdate.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\materialize\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -29,14 +30,14 @@ class MaterializeUpdate extends Plugin {
   /**
    * A short human-readable label.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label = '';
 
   /**
    * A detailed description.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $description = '';
 
diff --git a/src/Annotation/PluginCallback.php b/src/Annotation/PluginCallback.php
index ccd0db3..5641803 100644
--- a/src/Annotation/PluginCallback.php
+++ b/src/Annotation/PluginCallback.php
@@ -36,7 +36,7 @@ class PluginCallback extends PluginID {
    *
    * @see \Drupal\materialize\Materialize::addCallback()
    *
-   * @var \Drupal\materialize\Annotation\MaterializeConstant
+   * @var MaterializeConstant
    */
   public $action = Materialize::CALLBACK_APPEND;
 
diff --git a/src/Materialize.php b/src/Materialize.php
index 876d9d2..1e878a6 100644
--- a/src/Materialize.php
+++ b/src/Materialize.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\materialize;
 
+use Drupal\materialize\Plugin\Form\FormInterface;
+use Drupal\materialize\Plugin\Alter\AlterInterface;
+use Drupal\Core\Theme\ThemeManager;
+use Drupal\materialize\Plugin\Preprocess\PreprocessInterface;
 use Drupal\materialize\Plugin\AlterManager;
 use Drupal\materialize\Plugin\FormManager;
 use Drupal\materialize\Plugin\PreprocessManager;
@@ -218,7 +222,7 @@ class Materialize {
 
       // Iterate over each form identifier and look for a possible plugin.
       foreach ($ids as $id) {
-        /** @var \Drupal\materialize\Plugin\Form\FormInterface $form */
+        /** @var FormInterface $form */
         if ($form_manager->hasDefinition($id) && ($form = $form_manager->createInstance($id, ['theme' => $theme]))) {
           $data['#submit'][] = [get_class($form), 'submitForm'];
           $data['#validate'][] = [get_class($form), 'validateForm'];
@@ -231,7 +235,7 @@ class Materialize {
       // Retrieve a list of alter definitions.
       $alter_manager = new AlterManager($theme);
 
-      /** @var \Drupal\materialize\Plugin\Alter\AlterInterface $class */
+      /** @var AlterInterface $class */
       if ($alter_manager->hasDefinition($hook) && ($class = $alter_manager->createInstance($hook, ['theme' => $theme]))) {
         $class->alter($data, $context1, $context2);
       }
@@ -368,7 +372,7 @@ class Materialize {
       ];
 
       // Allow sub-themes to alter this array of patterns.
-      /** @var \Drupal\Core\Theme\ThemeManager $theme_manager */
+      /** @var ThemeManager $theme_manager */
       $theme_manager = \Drupal::service('theme.manager');
       $theme_manager->alter('materialize_colorize_text', $data);
 
@@ -447,10 +451,10 @@ class Materialize {
    *
    * @param string $name
    *   The machine name of a theme. If omitted, the active theme will be used.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler object.
    *
-   * @return \Drupal\materialize\Theme
+   * @return Theme
    *   A theme object.
    */
   public static function getTheme($name = NULL, ThemeHandlerInterface $theme_handler = NULL) {
@@ -482,7 +486,7 @@ class Materialize {
   /**
    * Retrieves the theme handler instance.
    *
-   * @return \Drupal\Core\Extension\ThemeHandlerInterface
+   * @return ThemeHandlerInterface
    *   The theme handler instance.
    */
   public static function getThemeHandler() {
@@ -621,7 +625,7 @@ class Materialize {
       ];
 
       // Allow sub-themes to alter this array of patterns.
-      /** @var \Drupal\Core\Theme\ThemeManager $theme_manager */
+      /** @var ThemeManager $theme_manager */
       $theme_manager = \Drupal::service('theme.manager');
       $theme_manager->alter('materialize_iconize_text', $data);
 
@@ -1094,7 +1098,7 @@ class Materialize {
     if (isset($info['materialize preprocess'])) {
       if ($preprocess_manager->hasDefinition($info['materialize preprocess'])) {
         $class = $preprocess_manager->createInstance($info['materialize preprocess'], ['theme' => $theme]);
-        /** @var \Drupal\materialize\Plugin\Preprocess\PreprocessInterface $class */
+        /** @var PreprocessInterface $class */
         $class->preprocess($variables, $hook, $info);
       }
     }
diff --git a/src/Plugin/Alter/ThemeRegistry.php b/src/Plugin/Alter/ThemeRegistry.php
index ca06242..2f2b39a 100644
--- a/src/Plugin/Alter/ThemeRegistry.php
+++ b/src/Plugin/Alter/ThemeRegistry.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\materialize\Plugin\Alter;
 
+use Drupal\materialize\Theme;
 use Drupal\materialize\Annotation\MaterializeAlter;
 use Drupal\materialize\Materialize;
 use Drupal\materialize\Plugin\PreprocessManager;
@@ -26,7 +27,7 @@ class ThemeRegistry extends Registry implements AlterInterface {
    *
    * Cannot use "$theme" because this is the Registry's ActiveTheme object.
    *
-   * @var \Drupal\materialize\Theme
+   * @var Theme
    */
   protected $currentTheme;
 
diff --git a/src/Plugin/Alter/ThemeSuggestions.php b/src/Plugin/Alter/ThemeSuggestions.php
index 32a7e88..455d210 100644
--- a/src/Plugin/Alter/ThemeSuggestions.php
+++ b/src/Plugin/Alter/ThemeSuggestions.php
@@ -79,7 +79,7 @@ class ThemeSuggestions extends PluginBase implements AlterInterface {
    *
    * @param array $suggestions
    *   The suggestions array.
-   * @param \Drupal\materialize\Utility\Variables $variables
+   * @param Variables $variables
    *   The variables object.
    * @param string $entity_type
    *   Optional. A specific type of entity to look for.
@@ -123,12 +123,12 @@ class ThemeSuggestions extends PluginBase implements AlterInterface {
   /**
    * Extracts the entity from the element(s) passed in the Variables object.
    *
-   * @param \Drupal\materialize\Utility\Variables $variables
+   * @param Variables $variables
    *   The Variables object.
    * @param string $entity_type
    *   Optional. The entity type to attempt to retrieve.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The extracted entity, NULL if entity could not be found.
    */
   public function getEntity(Variables $variables, $entity_type = 'entity') {
diff --git a/src/Plugin/AlterManager.php b/src/Plugin/AlterManager.php
index 83da4fa..c7ece91 100644
--- a/src/Plugin/AlterManager.php
+++ b/src/Plugin/AlterManager.php
@@ -14,7 +14,7 @@ class AlterManager extends PluginManager {
   /**
    * Constructs a new \Drupal\materialize\Plugin\AlterManager object.
    *
-   * @param \Drupal\materialize\Theme $theme
+   * @param Theme $theme
    *   The theme to use for discovery.
    */
   public function __construct(Theme $theme) {
diff --git a/src/Plugin/Form/FormInterface.php b/src/Plugin/Form/FormInterface.php
index 10da65e..ae43f0c 100644
--- a/src/Plugin/Form/FormInterface.php
+++ b/src/Plugin/Form/FormInterface.php
@@ -17,7 +17,7 @@ interface FormInterface {
    *
    * @param array $form
    *   Nested array of form elements that comprises the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $form_id
    *   String representing the name of the form itself. Typically this is the
@@ -28,9 +28,9 @@ interface FormInterface {
   /**
    * The alter method to store the code.
    *
-   * @param \Drupal\materialize\Utility\Element $form
+   * @param Element $form
    *   The Element object that comprises the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $form_id
    *   String representing the name of the form itself. Typically this is the
@@ -43,7 +43,7 @@ interface FormInterface {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function validateForm(array &$form, FormStateInterface $form_state);
@@ -51,9 +51,9 @@ interface FormInterface {
   /**
    * Form validation handler.
    *
-   * @param \Drupal\materialize\Utility\Element $form
+   * @param Element $form
    *   The Element object that comprises the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function validateFormElement(Element $form, FormStateInterface $form_state);
@@ -63,7 +63,7 @@ interface FormInterface {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function submitForm(array &$form, FormStateInterface $form_state);
@@ -71,9 +71,9 @@ interface FormInterface {
   /**
    * Form submission handler.
    *
-   * @param \Drupal\materialize\Utility\Element $form
+   * @param Element $form
    *   The Element object that comprises the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function submitFormElement(Element $form, FormStateInterface $form_state);
diff --git a/src/Plugin/Form/SystemThemeSettings.php b/src/Plugin/Form/SystemThemeSettings.php
index 280561b..a40d4fd 100644
--- a/src/Plugin/Form/SystemThemeSettings.php
+++ b/src/Plugin/Form/SystemThemeSettings.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\materialize\Plugin\Form;
 
+use Drupal\materialize\Theme;
 use Drupal\materialize\Annotation\MaterializeForm;
 use Drupal\materialize\Materialize;
 use Drupal\materialize\Utility\Element;
@@ -38,9 +39,9 @@ class SystemThemeSettings extends FormBase implements FormInterface {
   /**
    * Sets up the vertical tab groupings.
    *
-   * @param \Drupal\materialize\Utility\Element $form
+   * @param Element $form
    *   The Element object that comprises the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function createGroups(Element $form, FormStateInterface $form_state) {
@@ -87,12 +88,12 @@ class SystemThemeSettings extends FormBase implements FormInterface {
   /**
    * Retrieves the currently selected theme on the settings form.
    *
-   * @param \Drupal\materialize\Utility\Element $form
+   * @param Element $form
    *   The Element object that comprises the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\materialize\Theme|false
+   * @return Theme|false
    *   The currently selected theme object or FALSE if not a Materialize theme.
    */
   public static function getTheme(Element $form, FormStateInterface $form_state) {
diff --git a/src/Plugin/FormManager.php b/src/Plugin/FormManager.php
index c202ff7..0951ad5 100644
--- a/src/Plugin/FormManager.php
+++ b/src/Plugin/FormManager.php
@@ -14,7 +14,7 @@ class FormManager extends PluginManager {
   /**
    * Constructs a new \Drupal\materialize\Plugin\FormManager object.
    *
-   * @param \Drupal\materialize\Theme $theme
+   * @param Theme $theme
    *   The theme to use for discovery.
    */
   public function __construct(Theme $theme) {
diff --git a/src/Plugin/PluginBase.php b/src/Plugin/PluginBase.php
index a1d7943..0d18b78 100644
--- a/src/Plugin/PluginBase.php
+++ b/src/Plugin/PluginBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\materialize\Plugin;
 
+use Drupal\materialize\Theme;
 use Drupal\materialize\Materialize;
 
 /**
@@ -14,7 +15,7 @@ class PluginBase extends \Drupal\Core\Plugin\PluginBase {
   /**
    * The currently set theme object.
    *
-   * @var \Drupal\materialize\Theme
+   * @var Theme
    */
   protected $theme;
 
diff --git a/src/Plugin/PluginManager.php b/src/Plugin/PluginManager.php
index b9aea3e..1b50fd3 100644
--- a/src/Plugin/PluginManager.php
+++ b/src/Plugin/PluginManager.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\materialize\Plugin;
 
+use Drupal\Core\Extension\ThemeHandlerInterface;
+use Drupal\Core\Theme\ThemeManager;
 use Drupal\materialize\Materialize;
 use Drupal\materialize\Theme;
 use Drupal\Core\Plugin\DefaultPluginManager;
@@ -16,28 +18,28 @@ class PluginManager extends DefaultPluginManager {
   /**
    * The current theme.
    *
-   * @var \Drupal\materialize\Theme
+   * @var Theme
    */
   protected $theme;
 
   /**
    * The theme handler to check if theme exists.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
   /**
    * The theme manager to invoke alter hooks.
    *
-   * @var \Drupal\Core\Theme\ThemeManager
+   * @var ThemeManager
    */
   protected $themeManager;
 
   /**
    * Creates the discovery object.
    *
-   * @param \Drupal\materialize\Theme $theme
+   * @param Theme $theme
    *   The theme to use for discovery.
    * @param string|bool $subdir
    *   The plugin's subdirectory, for example Plugin/views/filter.
diff --git a/src/Plugin/Preprocess/FileLink.php b/src/Plugin/Preprocess/FileLink.php
index 3190adf..dc10423 100644
--- a/src/Plugin/Preprocess/FileLink.php
+++ b/src/Plugin/Preprocess/FileLink.php
@@ -28,7 +28,7 @@ class FileLink extends PreprocessBase {
     $options = [];
 
     $file = ($variables['file'] instanceof File) ? $variables['file'] : File::load($variables['file']->fid);
-    $url = file_create_url($file->getFileUri());
+    $url = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
 
     $file_size = $file->getSize();
     $mime_type = $file->getMimeType();
diff --git a/src/Plugin/Preprocess/FilterTips.php b/src/Plugin/Preprocess/FilterTips.php
index 72b783a..c3f07c3 100644
--- a/src/Plugin/Preprocess/FilterTips.php
+++ b/src/Plugin/Preprocess/FilterTips.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\materialize\Plugin\Preprocess;
 
+use Drupal\filter\FilterFormatInterface;
+use Drupal\filter\Plugin\FilterBase;
 use Drupal\materialize\Annotation\MaterializePreprocess;
 use Drupal\materialize\Utility\Variables;
 use Drupal\Core\Url;
@@ -21,7 +23,7 @@ class FilterTips extends PreprocessBase implements PreprocessInterface {
    * {@inheritdoc}
    */
   public function preprocessVariables(Variables $variables) {
-    /** @var \Drupal\filter\FilterFormatInterface $current_format */
+    /** @var FilterFormatInterface $current_format */
     $current_format = \Drupal::routeMatch()->getParameter('filter_format');
     $current_format_id = $current_format ? $current_format->id() : FALSE;
 
@@ -67,7 +69,7 @@ class FilterTips extends PreprocessBase implements PreprocessInterface {
       $tips = [];
 
       // Iterate over each format's enabled filters.
-      /** @var \Drupal\filter\Plugin\FilterBase $filter */
+      /** @var FilterBase $filter */
       foreach ($format->filters() as $name => $filter) {
         // Ignore filters that are not enabled.
         if (!$filter->status) {
diff --git a/src/Plugin/Preprocess/MaterializeDropdown.php b/src/Plugin/Preprocess/MaterializeDropdown.php
index 1cf65fe..35e8f80 100644
--- a/src/Plugin/Preprocess/MaterializeDropdown.php
+++ b/src/Plugin/Preprocess/MaterializeDropdown.php
@@ -38,7 +38,7 @@ class MaterializeDropdown extends PreprocessBase implements PreprocessInterface
   /**
    * Preprocess links in the variables array to convert them from dropbuttons.
    *
-   * @param \Drupal\materialize\Utility\Variables $variables
+   * @param Variables $variables
    *   A variables object.
    */
   protected function preprocessLinks(Variables $variables) {
diff --git a/src/Plugin/Preprocess/PreprocessBase.php b/src/Plugin/Preprocess/PreprocessBase.php
index 4dead0a..610ffec 100644
--- a/src/Plugin/Preprocess/PreprocessBase.php
+++ b/src/Plugin/Preprocess/PreprocessBase.php
@@ -95,9 +95,9 @@ class PreprocessBase extends PluginBase implements PreprocessInterface {
   /**
    * Preprocess the variables array if an element is present.
    *
-   * @param \Drupal\materialize\Utility\Element $element
+   * @param Element $element
    *   The Element object.
-   * @param \Drupal\materialize\Utility\Variables $variables
+   * @param Variables $variables
    *   The Variables object.
    */
   protected function preprocessElement(Element $element, Variables $variables) {}
@@ -105,7 +105,7 @@ class PreprocessBase extends PluginBase implements PreprocessInterface {
   /**
    * Preprocess the variables array.
    *
-   * @param \Drupal\materialize\Utility\Variables $variables
+   * @param Variables $variables
    *   The Variables object.
    */
   protected function preprocessVariables(Variables $variables) {}
diff --git a/src/Plugin/PreprocessManager.php b/src/Plugin/PreprocessManager.php
index 57e96d0..794735d 100644
--- a/src/Plugin/PreprocessManager.php
+++ b/src/Plugin/PreprocessManager.php
@@ -14,7 +14,7 @@ class PreprocessManager extends PluginManager {
   /**
    * Constructs a new \Drupal\materialize\Plugin\PreprocessManager object.
    *
-   * @param \Drupal\materialize\Theme $theme
+   * @param Theme $theme
    *   The theme to use for discovery.
    */
   public function __construct(Theme $theme) {
diff --git a/src/Plugin/Prerender/PrerenderBase.php b/src/Plugin/Prerender/PrerenderBase.php
index 9209cf6..7ddf473 100644
--- a/src/Plugin/Prerender/PrerenderBase.php
+++ b/src/Plugin/Prerender/PrerenderBase.php
@@ -23,7 +23,7 @@ class PrerenderBase implements PrerenderInterface, TrustedCallbackInterface {
   /**
    * Pre-render element callback.
    *
-   * @param \Drupal\materialize\Utility\Element $element
+   * @param Element $element
    *   The element object.
    */
   public static function preRenderElement(Element $element) {}
diff --git a/src/Plugin/PrerenderManager.php b/src/Plugin/PrerenderManager.php
index fcc5ab0..411b879 100644
--- a/src/Plugin/PrerenderManager.php
+++ b/src/Plugin/PrerenderManager.php
@@ -16,7 +16,7 @@ class PrerenderManager extends PluginManager implements TrustedCallbackInterface
   /**
    * Constructs a new \Drupal\materialize\Plugin\PrerenderManager object.
    *
-   * @param \Drupal\materialize\Theme $theme
+   * @param Theme $theme
    *   The theme to use for discovery.
    */
   public function __construct(Theme $theme) {
diff --git a/src/Plugin/Process/ProcessBase.php b/src/Plugin/Process/ProcessBase.php
index c9400e5..080c8a7 100644
--- a/src/Plugin/Process/ProcessBase.php
+++ b/src/Plugin/Process/ProcessBase.php
@@ -27,9 +27,9 @@ class ProcessBase extends PluginBase implements ProcessInterface {
   /**
    * Process a specific form element.
    *
-   * @param \Drupal\materialize\Utility\Element $element
+   * @param Element $element
    *   The element object.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
diff --git a/src/Plugin/Process/ProcessInterface.php b/src/Plugin/Process/ProcessInterface.php
index 08c0e70..7d264d1 100644
--- a/src/Plugin/Process/ProcessInterface.php
+++ b/src/Plugin/Process/ProcessInterface.php
@@ -20,7 +20,7 @@ interface ProcessInterface {
    *
    * @param array $element
    *   The element render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
diff --git a/src/Plugin/ProcessManager.php b/src/Plugin/ProcessManager.php
index 4186561..893235b 100644
--- a/src/Plugin/ProcessManager.php
+++ b/src/Plugin/ProcessManager.php
@@ -18,7 +18,7 @@ class ProcessManager extends PluginManager {
   /**
    * Constructs a new \Drupal\materialize\Plugin\ProcessManager object.
    *
-   * @param \Drupal\materialize\Theme $theme
+   * @param Theme $theme
    *   The theme to use for discovery.
    */
   public function __construct(Theme $theme) {
@@ -31,7 +31,7 @@ class ProcessManager extends PluginManager {
    *
    * @param array $element
    *   The element render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
@@ -77,9 +77,9 @@ class ProcessManager extends PluginManager {
   /**
    * Processes elements with AJAX properties.
    *
-   * @param \Drupal\materialize\Utility\Element $element
+   * @param Element $element
    *   The element object.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
@@ -99,9 +99,9 @@ class ProcessManager extends PluginManager {
   /**
    * Processes elements that have input groups.
    *
-   * @param \Drupal\materialize\Utility\Element $element
+   * @param Element $element
    *   The element object.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
@@ -150,10 +150,10 @@ class ProcessManager extends PluginManager {
   /**
    * Traverses an element to find the closest button.
    *
-   * @param \Drupal\materialize\Utility\Element $element
+   * @param Element $element
    *   The element to iterate over.
    *
-   * @return \Drupal\materialize\Utility\Element|FALSE
+   * @return Element|FALSE
    *   The first button element or FALSE if no button could be found.
    */
   protected static function &findButton(Element $element) {
diff --git a/src/Plugin/Setting/Schemas.php b/src/Plugin/Setting/Schemas.php
index cc5baf2..b4a68c9 100644
--- a/src/Plugin/Setting/Schemas.php
+++ b/src/Plugin/Setting/Schemas.php
@@ -82,7 +82,7 @@ class Schemas extends SettingBase {
    *
    * @param array $form
    *   Nested array of form elements that comprise the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function updateTheme(array $form, FormStateInterface $form_state) {
diff --git a/src/Plugin/Setting/SettingInterface.php b/src/Plugin/Setting/SettingInterface.php
index 0de248b..b8d5495 100644
--- a/src/Plugin/Setting/SettingInterface.php
+++ b/src/Plugin/Setting/SettingInterface.php
@@ -50,10 +50,10 @@ interface SettingInterface extends PluginInspectionInterface, FormInterface {
    *
    * @param array $form
    *   Nested array of form elements that comprise the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\materialize\Utility\Element
+   * @return Element
    *   The group element object.
    *
    * @deprecated Will be removed in a future release. Use \Drupal\materialize\Plugin\Setting\SettingInterface::getGroupElement
@@ -63,12 +63,12 @@ interface SettingInterface extends PluginInspectionInterface, FormInterface {
   /**
    * Retrieves the group form element the setting belongs to.
    *
-   * @param \Drupal\materialize\Utility\Element $form
+   * @param Element $form
    *   The Element object that comprises the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\materialize\Utility\Element
+   * @return Element
    *   The group element object.
    */
   public function getGroupElement(Element $form, FormStateInterface $form_state);
@@ -86,10 +86,10 @@ interface SettingInterface extends PluginInspectionInterface, FormInterface {
    *
    * @param array $form
    *   Nested array of form elements that comprise the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\materialize\Utility\Element
+   * @return Element
    *   The setting element object.
    *
    * @deprecated Will be removed in a future release. Use \Drupal\materialize\Plugin\Setting\SettingInterface::getSettingElement
@@ -107,12 +107,12 @@ interface SettingInterface extends PluginInspectionInterface, FormInterface {
   /**
    * Retrieves the form element for the setting.
    *
-   * @param \Drupal\materialize\Utility\Element $form
+   * @param Element $form
    *   The Element object that comprises the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\materialize\Utility\Element
+   * @return Element
    *   The setting element object.
    */
   public function getSettingElement(Element $form, FormStateInterface $form_state);
diff --git a/src/Plugin/SettingManager.php b/src/Plugin/SettingManager.php
index a164afe..ff8a142 100644
--- a/src/Plugin/SettingManager.php
+++ b/src/Plugin/SettingManager.php
@@ -15,7 +15,7 @@ class SettingManager extends PluginManager {
   /**
    * Constructs a new \Drupal\materialize\Plugin\SettingManager object.
    *
-   * @param \Drupal\materialize\Theme $theme
+   * @param Theme $theme
    *   The theme to use for discovery.
    */
   public function __construct(Theme $theme) {
diff --git a/src/Theme.php b/src/Theme.php
index 67133fd..865258a 100644
--- a/src/Theme.php
+++ b/src/Theme.php
@@ -3,6 +3,7 @@
 namespace Drupal\materialize;
 
 // use Drupal\materialize\Plugin\ProviderManager;
+use Drupal\materialize\Plugin\Setting\SettingInterface;
 use Drupal\materialize\Plugin\SettingManager;
 use Drupal\materialize\Plugin\UpdateManager;
 use Drupal\materialize\Utility\Crypt;
@@ -112,7 +113,7 @@ class Theme {
   /**
    * The current theme Extension object.
    *
-   * @var \Drupal\Core\Extension\Extension
+   * @var Extension
    */
   protected $theme;
 
@@ -126,7 +127,7 @@ class Theme {
   /**
    * Theme handler object.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
@@ -140,9 +141,9 @@ class Theme {
   /**
    * Theme constructor.
    *
-   * @param \Drupal\Core\Extension\Extension $theme
+   * @param Extension $theme
    *   A theme \Drupal\Core\Extension\Extension object.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler object.
    */
   public function __construct(Extension $theme, ThemeHandlerInterface $theme_handler) {
@@ -369,7 +370,7 @@ class Theme {
    * @param mixed $default
    *   Optional. The default value to use if $name does not exist.
    *
-   * @return mixed|\Drupal\materialize\Utility\StorageItem
+   * @return mixed|StorageItem
    *   The cached value for $name.
    */
   public function getCache($name, array $context = [], $default = []) {
@@ -541,7 +542,7 @@ class Theme {
    * @param string $name
    *   Optional. The name of a specific setting plugin instance to return.
    *
-   * @return \Drupal\materialize\Plugin\Setting\SettingInterface|\Drupal\materialize\Plugin\Setting\SettingInterface[]|NULL
+   * @return SettingInterface|SettingInterface[]|NULL
    *   If $name was provided, it will either return a specific setting plugin
    *   instance or NULL if not set. If $name was omitted it will return an array
    *   of setting plugin instances, keyed by their name.
@@ -569,7 +570,7 @@ class Theme {
   /**
    * Retrieves the theme's setting plugin instances.
    *
-   * @return \Drupal\materialize\Plugin\Setting\SettingInterface[]
+   * @return SettingInterface[]
    *   An associative array of setting objects, keyed by their name.
    *
    * @deprecated Will be removed in a future release. Use \Drupal\materialize\Theme::getSettingPlugin instead.
@@ -582,7 +583,7 @@ class Theme {
   /**
    * Retrieves the theme's cache from the database.
    *
-   * @return \Drupal\materialize\Utility\Storage
+   * @return Storage
    *   The cache object.
    */
   public function getStorage() {
@@ -742,7 +743,7 @@ class Theme {
   /**
    * Retrieves the theme settings instance.
    *
-   * @return \Drupal\materialize\ThemeSettings
+   * @return ThemeSettings
    *   All settings.
    */
   public function settings() {
diff --git a/src/ThemeSettings.php b/src/ThemeSettings.php
index c2c7414..c4bc03e 100644
--- a/src/ThemeSettings.php
+++ b/src/ThemeSettings.php
@@ -27,7 +27,7 @@ class ThemeSettings extends Config {
   /**
    * The current theme object.
    *
-   * @var \Drupal\materialize\Theme
+   * @var Theme
    */
   protected $theme;
 
@@ -131,7 +131,7 @@ class ThemeSettings extends Config {
   /**
    * Retrieves a specific theme's stored config settings.
    *
-   * @param \Drupal\materialize\Theme $theme
+   * @param Theme $theme
    *   A theme object.
    * @param bool $active_theme
    *   Flag indicating whether or not $theme is the active theme.
@@ -171,7 +171,7 @@ class ThemeSettings extends Config {
       $logo_url = FALSE;
       foreach (['svg', 'png', 'jpg'] as $type) {
         if (file_exists($theme->getPath() . "/logo.$type")) {
-          $logo_url = file_create_url($theme->getPath() . "/logo.$type");
+          $logo_url = \Drupal::service('file_url_generator')->generateAbsoluteString($theme->getPath() . "/logo.$type");
           break;
         }
       }
diff --git a/src/Utility/ArrayObject.php b/src/Utility/ArrayObject.php
index 67395a3..94085cb 100644
--- a/src/Utility/ArrayObject.php
+++ b/src/Utility/ArrayObject.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\materialize\Utility;
 
+use Drupal\Core\Cache\CacheableDependencyInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
 use Drupal\Core\Render\AttachmentsInterface;
@@ -134,7 +135,7 @@ class ArrayObject implements \IteratorAggregate, \ArrayAccess, \Serializable, \C
   /**
    * Merges an object's cacheable metadata into the variables array.
    *
-   * @param \Drupal\Core\Cache\CacheableDependencyInterface|mixed $object
+   * @param CacheableDependencyInterface|mixed $object
    *   The object whose cacheability metadata to retrieve. If it implements
    *   CacheableDependencyInterface, its cacheability metadata will be used,
    *   otherwise, the passed in object must be assumed to be uncacheable, so
diff --git a/src/Utility/DrupalAttributes.php b/src/Utility/DrupalAttributes.php
index 9796f7d..c076c9b 100644
--- a/src/Utility/DrupalAttributes.php
+++ b/src/Utility/DrupalAttributes.php
@@ -109,7 +109,7 @@ class DrupalAttributes extends ArrayObject {
   /**
    * Stored attribute instances.
    *
-   * @var \Drupal\materialize\Utility\Attributes[]
+   * @var Attributes[]
    */
   protected $attributes = [];
 
@@ -168,7 +168,7 @@ class DrupalAttributes extends ArrayObject {
    * @param string $type
    *   (optional) The type of attributes to use for this method.
    *
-   * @return \Drupal\materialize\Utility\Attributes
+   * @return Attributes
    *   An attributes object for $type.
    */
   public function getAttributes($type = DrupalAttributes::ATTRIBUTES) {
diff --git a/src/Utility/Element.php b/src/Utility/Element.php
index 4ed9368..8285d06 100644
--- a/src/Utility/Element.php
+++ b/src/Utility/Element.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\materialize\Utility;
 
+use Drupal\Core\Render\Renderer;
 use Drupal\materialize\Materialize;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Component\Render\MarkupInterface;
@@ -20,7 +21,7 @@ class Element extends DrupalAttributes {
   /**
    * The current state of the form.
    *
-   * @var \Drupal\Core\Form\FormStateInterface
+   * @var FormStateInterface
    */
   protected $formState;
 
@@ -41,7 +42,7 @@ class Element extends DrupalAttributes {
    *
    * @param array|string $element
    *   A render array element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function __construct(&$element = [], FormStateInterface $form_state = NULL) {
@@ -253,7 +254,7 @@ class Element extends DrupalAttributes {
    *
    * @param array|string $element
    *   A render array element or a string.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   A current FormState instance, if any.
    *
    * @return \Drupal\materialize\Utility\Element
@@ -271,7 +272,7 @@ class Element extends DrupalAttributes {
    *
    * @param array|string|\Drupal\materialize\Utility\Element $element
    *   A render array element, string or Element instance.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   A current FormState instance, if any.
    *
    * @return \Drupal\materialize\Utility\Element
@@ -551,11 +552,11 @@ class Element extends DrupalAttributes {
   /**
    * Renders the final element HTML.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   The rendered HTML.
    */
   public function render() {
-    /** @var \Drupal\Core\Render\Renderer $renderer */
+    /** @var Renderer $renderer */
     $renderer = \Drupal::service('renderer');
     return $renderer->render($this->array);
   }
@@ -563,11 +564,11 @@ class Element extends DrupalAttributes {
   /**
    * Renders the final element HTML.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   The rendered HTML.
    */
   public function renderPlain() {
-    /** @var \Drupal\Core\Render\Renderer $renderer */
+    /** @var Renderer $renderer */
     $renderer = \Drupal::service('renderer');
     return $renderer->renderPlain($this->array);
   }
@@ -577,11 +578,11 @@ class Element extends DrupalAttributes {
    *
    * (Cannot be executed within another render context.)
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   The rendered HTML.
    */
   public function renderRoot() {
-    /** @var \Drupal\Core\Render\Renderer $renderer */
+    /** @var Renderer $renderer */
     $renderer = \Drupal::service('renderer');
     return $renderer->renderRoot($this->array);
   }
diff --git a/src/Utility/StorageItem.php b/src/Utility/StorageItem.php
index 30df49c..2572ec2 100644
--- a/src/Utility/StorageItem.php
+++ b/src/Utility/StorageItem.php
@@ -29,7 +29,7 @@ class StorageItem extends MemoryStorage implements \Iterator {
   /**
    * The \Drupal\materialize\Storage instance this item belongs to.
    *
-   * @var \Drupal\materialize\Utility\Storage
+   * @var Storage
    */
   protected $storage;
 
diff --git a/src/Utility/Variables.php b/src/Utility/Variables.php
index 2b414ee..426b32b 100644
--- a/src/Utility/Variables.php
+++ b/src/Utility/Variables.php
@@ -12,7 +12,7 @@ class Variables extends DrupalAttributes {
   /**
    * An element object.
    *
-   * @var \Drupal\materialize\Utility\Element|FALSE
+   * @var Element|FALSE
    */
   public $element = FALSE;
 
