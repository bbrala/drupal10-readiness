diff --git a/designs.module b/designs.module
index 40285a5..d55cbcd 100644
--- a/designs.module
+++ b/designs.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\designs\DesignInterface;
+use Drupal\Core\Render\RendererInterface;
 /**
  * @file
  * Provides the main code for the designs module.
@@ -33,7 +35,7 @@ function designs_library_info_build() {
 function designs_preprocess_design(&$variables, $hook) {
   $element = $variables['element'];
 
-  /** @var \Drupal\designs\DesignInterface $design */
+  /** @var DesignInterface $design */
   if (!($design = $element['#design'])) {
     return;
   }
@@ -55,7 +57,7 @@ function designs_preprocess_design(&$variables, $hook) {
     'libraries' => $plugin->getRenderAttached(),
   ];
 
-  /** @var \Drupal\Core\Render\RendererInterface $renderer */
+  /** @var RendererInterface $renderer */
   $renderer = \Drupal::service('renderer');
 
   // Get the settings to compare against.
@@ -97,7 +99,7 @@ function designs_preprocess_design(&$variables, $hook) {
 function designs_theme_suggestions_design(array $variables) {
   $suggestions = [];
   $element = $variables['element'];
-  /** @var \Drupal\designs\DesignInterface|string|null $design */
+  /** @var DesignInterface|string|null $design */
   $design = $element['#design'] ?? NULL;
   if ($design) {
     if (is_string($design)) {
diff --git a/modules/designs_entity/src/DesignsEntityDisplayHandler.php b/modules/designs_entity/src/DesignsEntityDisplayHandler.php
index 54a2182..ccb030f 100644
--- a/modules/designs_entity/src/DesignsEntityDisplayHandler.php
+++ b/modules/designs_entity/src/DesignsEntityDisplayHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\designs_entity;
 
+use Drupal\layout_builder\Entity\LayoutEntityDisplayInterface;
 use Drupal\Core\Config\Entity\ThirdPartySettingsInterface;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
@@ -20,14 +21,14 @@ class DesignsEntityDisplayHandler {
   /**
    * The design manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $manager;
 
   /**
    * DesignDisplayHandler constructor.
    *
-   * @param \Drupal\designs\DesignManagerInterface $manager
+   * @param DesignManagerInterface $manager
    *   The design manager.
    */
   public function __construct(DesignManagerInterface $manager) {
@@ -39,9 +40,9 @@ class DesignsEntityDisplayHandler {
    *
    * @param array $build
    *   The build render array.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
-   * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+   * @param EntityViewDisplayInterface $display
    *   The entity view display.
    */
   public function entityViewAlter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
@@ -87,17 +88,17 @@ class DesignsEntityDisplayHandler {
   /**
    * Implements hook_entity_prepare_form().
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    * @param string $operation
    *   The operation.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function entityPrepareForm(EntityInterface $entity, $operation, FormStateInterface $form_state) {
     $storage = $form_state->getStorage();
     if (!empty($storage['form_display']) && $storage['form_display'] instanceof ThirdPartySettingsInterface) {
-      /** @var \Drupal\layout_builder\Entity\LayoutEntityDisplayInterface $display */
+      /** @var LayoutEntityDisplayInterface $display */
       $display = $storage['form_display'];
       $configuration = $display->getThirdPartySettings('designs_entity');
       if (empty($configuration['design'])) {
@@ -121,7 +122,7 @@ class DesignsEntityDisplayHandler {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function formAlter(array &$form, FormStateInterface $form_state) {
@@ -136,7 +137,7 @@ class DesignsEntityDisplayHandler {
    *
    * @param array $element
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
diff --git a/modules/designs_entity/src/DesignsEntityFieldUi.php b/modules/designs_entity/src/DesignsEntityFieldUi.php
index 3dbfc59..eab8d75 100644
--- a/modules/designs_entity/src/DesignsEntityFieldUi.php
+++ b/modules/designs_entity/src/DesignsEntityFieldUi.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\designs_entity;
 
+use Drupal\designs\DesignSourceInterface;
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Utility\SortArray;
 use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -23,46 +26,46 @@ class DesignsEntityFieldUi {
   /**
    * The design manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $manager;
 
   /**
    * The design setting manager.
    *
-   * @var \Drupal\designs\DesignSettingManagerInterface
+   * @var DesignSettingManagerInterface
    */
   protected $settingManager;
 
   /**
    * The design content manager.
    *
-   * @var \Drupal\designs\DesignContentManagerInterface
+   * @var DesignContentManagerInterface
    */
   protected $contentManager;
 
   /**
    * The design.
    *
-   * @var \Drupal\designs\DesignInterface
+   * @var DesignInterface
    */
   protected $design;
 
   /**
    * The design source.
    *
-   * @var \Drupal\designs\DesignSourceInterface
+   * @var DesignSourceInterface
    */
   protected $source;
 
   /**
    * DesignFieldUIHandler constructor.
    *
-   * @param \Drupal\designs\DesignManagerInterface $manager
+   * @param DesignManagerInterface $manager
    *   The design plugin manager.
-   * @param \Drupal\designs\DesignSettingManagerInterface $settingManager
+   * @param DesignSettingManagerInterface $settingManager
    *   The design setting manager.
-   * @param \Drupal\designs\DesignContentManagerInterface $contentManager
+   * @param DesignContentManagerInterface $contentManager
    *   The design content manager.
    */
   public function __construct(
@@ -80,7 +83,7 @@ class DesignsEntityFieldUi {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function displayFormAlter(array &$form, FormStateInterface $form_state) {
@@ -92,7 +95,7 @@ class DesignsEntityFieldUi {
     // Get the callback object.
     $entity_display_form = $form_state->getBuildInfo()['callback_object'];
 
-    /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $entity */
+    /** @var EntityViewDisplayInterface $entity */
     $entity = $entity_display_form->getEntity();
     $config = $entity->getThirdPartySettings('designs_entity');
 
@@ -129,7 +132,7 @@ class DesignsEntityFieldUi {
     $form['design']['#open'] = TRUE;
 
     // Get the design from the design form.
-    /** @var \Drupal\designs\DesignInterface|null $design */
+    /** @var DesignInterface|null $design */
     $design = $form['design']['#design'] ?? NULL;
 
     // Get reference to the form fields.
@@ -188,7 +191,7 @@ class DesignsEntityFieldUi {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function validateForm(array $form, FormStateInterface $form_state) {
@@ -201,11 +204,11 @@ class DesignsEntityFieldUi {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function submitForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\designs\Form\PluginForm $design_form */
+    /** @var PluginForm $design_form */
     $design_form = $form['design']['#form_handler'];
     $design_form->submitForm($form['design'], $form_state);
 
@@ -248,7 +251,7 @@ class DesignsEntityFieldUi {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function multistepSubmit(array $form, FormStateInterface $form_state) {
@@ -257,7 +260,7 @@ class DesignsEntityFieldUi {
     switch ($op) {
       case 'remove_content':
         $entity_display_form = $form_state->getBuildInfo()['callback_object'];
-        /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $entity */
+        /** @var EntityViewDisplayInterface $entity */
         $entity = $entity_display_form->getEntity();
         $entity->removeComponent($trigger['#index']);
         $form_state->setRebuild();
@@ -270,7 +273,7 @@ class DesignsEntityFieldUi {
    *
    * @param array $form
    *   The built form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ -283,7 +286,7 @@ class DesignsEntityFieldUi {
   /**
    * Get the regions as used by the field_ui_table.
    *
-   * @param \Drupal\designs\DesignInterface $design
+   * @param DesignInterface $design
    *   The design.
    */
   protected function getRegions(DesignInterface $design) {
@@ -304,10 +307,10 @@ class DesignsEntityFieldUi {
   /**
    * Get the region labels.
    *
-   * @param \Drupal\designs\DesignInterface $design
+   * @param DesignInterface $design
    *   The design.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup[]
+   * @return TranslatableMarkup[]
    *   The region labels.
    */
   protected function getRegionLabels(DesignInterface $design) {
diff --git a/modules/designs_entity/src/Plugin/designs/source/EntitySource.php b/modules/designs_entity/src/Plugin/designs/source/EntitySource.php
index 7992a36..84d9169 100644
--- a/modules/designs_entity/src/Plugin/designs/source/EntitySource.php
+++ b/modules/designs_entity/src/Plugin/designs/source/EntitySource.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\designs_entity\Plugin\designs\source;
 
+use Drupal\Core\Entity\Display\EntityDisplayInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -26,21 +27,21 @@ class EntitySource extends DesignSourceBase implements ContainerFactoryPluginInt
   /**
    * The entity display.
    *
-   * @var \Drupal\Core\Entity\Display\EntityDisplayInterface
+   * @var EntityDisplayInterface
    */
   protected $owner;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
diff --git a/modules/designs_entity/tests/src/Functional/DisplayTest.php b/modules/designs_entity/tests/src/Functional/DisplayTest.php
index c3ecfa9..6889123 100644
--- a/modules/designs_entity/tests/src/Functional/DisplayTest.php
+++ b/modules/designs_entity/tests/src/Functional/DisplayTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\designs_entity\Functional;
 
+use Drupal\node\Entity\NodeType;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\node\Entity\Node;
@@ -43,7 +44,7 @@ class DisplayTest extends BrowserTestBase {
   /**
    * The random node type.
    *
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   protected $nodeType;
 
diff --git a/modules/designs_field/src/DesignsFieldWrapper.php b/modules/designs_field/src/DesignsFieldWrapper.php
index 45e3249..c88072a 100644
--- a/modules/designs_field/src/DesignsFieldWrapper.php
+++ b/modules/designs_field/src/DesignsFieldWrapper.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\designs_field;
 
+use Drupal\Core\Field\WidgetInterface;
+use Drupal\Core\Field\FormatterInterface;
+use Drupal\designs\DesignInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Entity\ContentEntityFormInterface;
@@ -28,32 +31,32 @@ class DesignsFieldWrapper implements TrustedCallbackInterface {
   /**
    * The design manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $designManager;
 
   /**
    * The design setting manager.
    *
-   * @var \Drupal\designs\DesignSettingManagerInterface
+   * @var DesignSettingManagerInterface
    */
   protected $settingManager;
 
   /**
    * The design content manager.
    *
-   * @var \Drupal\designs\DesignContentManagerInterface
+   * @var DesignContentManagerInterface
    */
   protected $contentManager;
 
   /**
    * DesignsFieldWrapper constructor.
    *
-   * @param \Drupal\designs\DesignManagerInterface $designManager
+   * @param DesignManagerInterface $designManager
    *   The design manager.
-   * @param \Drupal\designs\DesignSettingManagerInterface $settingManager
+   * @param DesignSettingManagerInterface $settingManager
    *   The design settings manager.
-   * @param \Drupal\designs\DesignContentManagerInterface $contentManager
+   * @param DesignContentManagerInterface $contentManager
    *   The design content manager.
    */
   public function __construct(
@@ -69,13 +72,13 @@ class DesignsFieldWrapper implements TrustedCallbackInterface {
   /**
    * Build the form for the field wrapper.
    *
-   * @param \Drupal\Core\Field\WidgetInterface|\Drupal\Core\Field\FormatterInterface $plugin
+   * @param WidgetInterface|FormatterInterface $plugin
    *   The field formatter/widget plugin.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ -117,7 +120,7 @@ class DesignsFieldWrapper implements TrustedCallbackInterface {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ -179,7 +182,7 @@ class DesignsFieldWrapper implements TrustedCallbackInterface {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function validateConfigurationForm(array $form, FormStateInterface $form_state) {
@@ -197,7 +200,7 @@ class DesignsFieldWrapper implements TrustedCallbackInterface {
   /**
    * Build the summary for the field wrapper extras.
    *
-   * @param \Drupal\Core\Field\WidgetInterface|\Drupal\Core\Field\FormatterInterface $plugin
+   * @param WidgetInterface|FormatterInterface $plugin
    *   The field formatter/widget plugin.
    * @param array $summary
    *   The list of summary items.
@@ -250,7 +253,7 @@ class DesignsFieldWrapper implements TrustedCallbackInterface {
    *
    * @param array $build
    *   The build render array.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    */
   public function entityViewAlter(array &$build, EntityInterface $entity) {
@@ -293,7 +296,7 @@ class DesignsFieldWrapper implements TrustedCallbackInterface {
    *
    * @param array $form
    *   The build render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function entityFormAlter(array &$form, FormStateInterface $form_state) {
@@ -380,7 +383,7 @@ class DesignsFieldWrapper implements TrustedCallbackInterface {
    */
   public static function preRenderWidget(array $element) {
     $settings = $element['#third_party_settings']['designs_field'];
-    /** @var \Drupal\designs\DesignInterface $design */
+    /** @var DesignInterface $design */
     $design = \Drupal::service('plugin.manager.design')->createSourcedInstance(
       $settings['field']['design'],
       $settings['field'],
@@ -424,7 +427,7 @@ class DesignsFieldWrapper implements TrustedCallbackInterface {
 
     $settings = $element['#third_party_settings']['designs_field'];
     foreach (Element::children($element) as $delta) {
-      /** @var \Drupal\designs\DesignInterface $design */
+      /** @var DesignInterface $design */
       $design = \Drupal::service('plugin.manager.design')
         ->createSourcedInstance(
           $settings['item']['design'],
@@ -461,7 +464,7 @@ class DesignsFieldWrapper implements TrustedCallbackInterface {
    */
   public static function preRenderFormatter(array $element) {
     $settings = $element['#third_party_settings']['designs_field'];
-    /** @var \Drupal\designs\DesignInterface $design */
+    /** @var DesignInterface $design */
     $design = \Drupal::service('plugin.manager.design')->createSourcedInstance(
       $settings['field']['design'],
       $settings['field'],
@@ -495,7 +498,7 @@ class DesignsFieldWrapper implements TrustedCallbackInterface {
 
     $settings = $element['#third_party_settings']['designs_field'];
     foreach (Element::children($element) as $delta) {
-      /** @var \Drupal\designs\DesignInterface $design */
+      /** @var DesignInterface $design */
       $design = \Drupal::service('plugin.manager.design')
         ->createSourcedInstance(
           $settings['item']['design'],
diff --git a/modules/designs_field/src/Plugin/designs/source/FieldItemWrapperSource.php b/modules/designs_field/src/Plugin/designs/source/FieldItemWrapperSource.php
index aadb205..badd7d0 100644
--- a/modules/designs_field/src/Plugin/designs/source/FieldItemWrapperSource.php
+++ b/modules/designs_field/src/Plugin/designs/source/FieldItemWrapperSource.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\designs_field\Plugin\designs\source;
 
+use Drupal\Core\TypedData\TypedDataInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Field\FieldTypePluginManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -29,21 +30,21 @@ class FieldItemWrapperSource extends DesignSourceBase implements ContainerFactor
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The field type manager.
    *
-   * @var \Drupal\Core\Field\FieldTypePluginManagerInterface
+   * @var FieldTypePluginManagerInterface
    */
   protected $fieldTypeManager;
 
   /**
    * The design properties.
    *
-   * @var \Drupal\designs\DesignPropertiesInterface
+   * @var DesignPropertiesInterface
    */
   protected $designProperties;
 
@@ -74,7 +75,7 @@ class FieldItemWrapperSource extends DesignSourceBase implements ContainerFactor
   /**
    * Get the field type.
    *
-   * @return \Drupal\Core\TypedData\TypedDataInterface
+   * @return TypedDataInterface
    *   The typed data definition.
    */
   protected function getType() {
diff --git a/modules/designs_field/src/Plugin/designs/source/FieldWrapperSource.php b/modules/designs_field/src/Plugin/designs/source/FieldWrapperSource.php
index 9ceb8ad..59a7384 100644
--- a/modules/designs_field/src/Plugin/designs/source/FieldWrapperSource.php
+++ b/modules/designs_field/src/Plugin/designs/source/FieldWrapperSource.php
@@ -29,7 +29,7 @@ class FieldWrapperSource extends DesignSourceBase implements ContainerFactoryPlu
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
diff --git a/modules/designs_field/tests/src/Functional/WrapperTest.php b/modules/designs_field/tests/src/Functional/WrapperTest.php
index 28771ed..09c0221 100644
--- a/modules/designs_field/tests/src/Functional/WrapperTest.php
+++ b/modules/designs_field/tests/src/Functional/WrapperTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\designs_field\Functional;
 
+use Drupal\node\Entity\NodeType;
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\Tests\BrowserTestBase;
@@ -42,7 +44,7 @@ class WrapperTest extends BrowserTestBase {
   /**
    * The random node type.
    *
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   protected $nodeType;
 
@@ -162,7 +164,7 @@ class WrapperTest extends BrowserTestBase {
 
     // Check the wrapper has been saved with the field formatter third
     // party settings.
-    /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display */
+    /** @var EntityViewDisplayInterface $display */
     $display = \Drupal::service('entity_display.repository')
       ->getViewDisplay($this->field['entity_type'], $this->field['bundle']);
 
diff --git a/modules/designs_field_formatter/src/Plugin/Field/FieldFormatter/DesignFormatter.php b/modules/designs_field_formatter/src/Plugin/Field/FieldFormatter/DesignFormatter.php
index ecebde7..5a50f81 100644
--- a/modules/designs_field_formatter/src/Plugin/Field/FieldFormatter/DesignFormatter.php
+++ b/modules/designs_field_formatter/src/Plugin/Field/FieldFormatter/DesignFormatter.php
@@ -27,21 +27,21 @@ class DesignFormatter extends FormatterBase {
   /**
    * The design manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $designManager;
 
   /**
    * The design setting manager.
    *
-   * @var \Drupal\designs\DesignSettingManagerInterface
+   * @var DesignSettingManagerInterface
    */
   protected $settingManager;
 
   /**
    * The design content manager.
    *
-   * @var \Drupal\designs\DesignContentManagerInterface
+   * @var DesignContentManagerInterface
    */
   protected $contentManager;
 
@@ -84,7 +84,7 @@ class DesignFormatter extends FormatterBase {
    *
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param array $complete_form
    *   The complete form.
@@ -116,7 +116,7 @@ class DesignFormatter extends FormatterBase {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form_state.
    */
   public function settingsValidate(array $form, FormStateInterface $form_state) {
@@ -128,7 +128,7 @@ class DesignFormatter extends FormatterBase {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form_state.
    */
   public function settingsSubmit(array $form, FormStateInterface $form_state) {
diff --git a/modules/designs_field_formatter/src/Plugin/designs/source/FieldFormatterSource.php b/modules/designs_field_formatter/src/Plugin/designs/source/FieldFormatterSource.php
index 540148d..3223ebb 100644
--- a/modules/designs_field_formatter/src/Plugin/designs/source/FieldFormatterSource.php
+++ b/modules/designs_field_formatter/src/Plugin/designs/source/FieldFormatterSource.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\designs_field_formatter\Plugin\designs\source;
 
+use Drupal\Core\Entity\Display\EntityDisplayInterface;
+use Drupal\Core\TypedData\TypedDataInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Field\FieldTypePluginManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -24,28 +26,28 @@ class FieldFormatterSource extends DesignSourceBase implements ContainerFactoryP
   /**
    * The entity display.
    *
-   * @var \Drupal\Core\Entity\Display\EntityDisplayInterface
+   * @var EntityDisplayInterface
    */
   protected $owner;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The field type manager.
    *
-   * @var \Drupal\Core\Field\FieldTypePluginManagerInterface
+   * @var FieldTypePluginManagerInterface
    */
   protected $fieldTypeManager;
 
   /**
    * The design properties.
    *
-   * @var \Drupal\designs\DesignPropertiesInterface
+   * @var DesignPropertiesInterface
    */
   protected $designProperties;
 
@@ -76,7 +78,7 @@ class FieldFormatterSource extends DesignSourceBase implements ContainerFactoryP
   /**
    * Get the field type.
    *
-   * @return \Drupal\Core\TypedData\TypedDataInterface
+   * @return TypedDataInterface
    *   The typed data definition.
    */
   protected function getType() {
diff --git a/modules/designs_field_formatter/tests/src/Functional/ManageDisplayTest.php b/modules/designs_field_formatter/tests/src/Functional/ManageDisplayTest.php
index 447a9b8..211c04d 100644
--- a/modules/designs_field_formatter/tests/src/Functional/ManageDisplayTest.php
+++ b/modules/designs_field_formatter/tests/src/Functional/ManageDisplayTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\designs_field_formatter\Functional;
 
+use Drupal\node\Entity\NodeType;
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\Tests\BrowserTestBase;
@@ -42,7 +44,7 @@ class ManageDisplayTest extends BrowserTestBase {
   /**
    * The random node type.
    *
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   protected $nodeType;
 
@@ -144,7 +146,7 @@ class ManageDisplayTest extends BrowserTestBase {
 
     // Check the wrapper has been saved with the field formatter third
     // party settings.
-    /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display */
+    /** @var EntityViewDisplayInterface $display */
     $display = \Drupal::service('entity_display.repository')
       ->getViewDisplay($this->field['entity_type'], $this->field['bundle']);
 
diff --git a/modules/designs_layout/src/Plugin/Derivative/DesignLayoutDeriver.php b/modules/designs_layout/src/Plugin/Derivative/DesignLayoutDeriver.php
index 3655853..80e99c1 100644
--- a/modules/designs_layout/src/Plugin/Derivative/DesignLayoutDeriver.php
+++ b/modules/designs_layout/src/Plugin/Derivative/DesignLayoutDeriver.php
@@ -19,14 +19,14 @@ class DesignLayoutDeriver extends DeriverBase implements ContainerDeriverInterfa
   /**
    * The design manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $designManager;
 
   /**
    * DesignLayoutDeriver constructor.
    *
-   * @param \Drupal\designs\DesignManagerInterface $designManager
+   * @param DesignManagerInterface $designManager
    *   The design manager.
    */
   public function __construct(DesignManagerInterface $designManager) {
@@ -48,7 +48,7 @@ class DesignLayoutDeriver extends DeriverBase implements ContainerDeriverInterfa
   public function getDerivativeDefinitions($base_plugin_definition) {
     $derivatives = [];
 
-    /** @var \Drupal\designs\DesignDefinition $definition */
+    /** @var DesignDefinition $definition */
     foreach ($this->designManager->getDefinitions() as $definition) {
       $layout_definition = $this->getDefinition($base_plugin_definition, $definition);
       $derivatives[$definition->getTemplateId()] = $layout_definition;
@@ -60,12 +60,12 @@ class DesignLayoutDeriver extends DeriverBase implements ContainerDeriverInterfa
   /**
    * Get the derivative plugin definition.
    *
-   * @param \Drupal\Core\Layout\LayoutDefinition $base_plugin_definition
+   * @param LayoutDefinition $base_plugin_definition
    *   The original plugin definition.
-   * @param \Drupal\designs\DesignDefinition $definition
+   * @param DesignDefinition $definition
    *   The design definition.
    *
-   * @return \Drupal\Core\Layout\LayoutDefinition
+   * @return LayoutDefinition
    *   The design derivative definition.
    */
   protected function getDefinition(LayoutDefinition $base_plugin_definition, DesignDefinition $definition) {
diff --git a/modules/designs_layout/src/Plugin/Layout/DesignLayout.php b/modules/designs_layout/src/Plugin/Layout/DesignLayout.php
index dc32a90..fe049aa 100644
--- a/modules/designs_layout/src/Plugin/Layout/DesignLayout.php
+++ b/modules/designs_layout/src/Plugin/Layout/DesignLayout.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\designs_layout\Plugin\Layout;
 
+use Drupal\designs\DesignInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Form\SubformState;
@@ -29,35 +30,35 @@ class DesignLayout extends LayoutDefault implements PluginFormInterface, Contain
   /**
    * The element info.
    *
-   * @var \Drupal\Core\Render\ElementInfoManagerInterface
+   * @var ElementInfoManagerInterface
    */
   protected $elementInfo;
 
   /**
    * The design manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $designManager;
 
   /**
    * Module Handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The design setting manager.
    *
-   * @var \Drupal\designs\DesignSettingManagerInterface
+   * @var DesignSettingManagerInterface
    */
   protected $settingManager;
 
   /**
    * The design content manager.
    *
-   * @var \Drupal\designs\DesignContentManagerInterface
+   * @var DesignContentManagerInterface
    */
   protected $contentManager;
 
@@ -68,17 +69,17 @@ class DesignLayout extends LayoutDefault implements PluginFormInterface, Contain
    *   A configuration array containing information about the plugin instance.
    * @param string $plugin_id
    *   The plugin_id for the plugin instance.
-   * @param \Drupal\Core\Layout\LayoutDefinition $plugin_definition
+   * @param LayoutDefinition $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Module handler.
-   * @param \Drupal\Core\Render\ElementInfoManagerInterface $element_info
+   * @param ElementInfoManagerInterface $element_info
    *   Element info object.
-   * @param \Drupal\designs\DesignManagerInterface $designManager
+   * @param DesignManagerInterface $designManager
    *   The design manager.
-   * @param \Drupal\designs\DesignSettingManagerInterface $settingManager
+   * @param DesignSettingManagerInterface $settingManager
    *   The design settings manager.
-   * @param \Drupal\designs\DesignContentManagerInterface $contentManager
+   * @param DesignContentManagerInterface $contentManager
    *   The design content manager.
    */
   public function __construct(
@@ -128,7 +129,7 @@ class DesignLayout extends LayoutDefault implements PluginFormInterface, Contain
   /**
    * Get the design used for the layout.
    *
-   * @return \Drupal\designs\DesignInterface|null
+   * @return DesignInterface|null
    *   The design identifier.
    */
   protected function getDesign() {
diff --git a/modules/designs_layout/src/Plugin/designs/source/LayoutSource.php b/modules/designs_layout/src/Plugin/designs/source/LayoutSource.php
index 796015a..3b26726 100644
--- a/modules/designs_layout/src/Plugin/designs/source/LayoutSource.php
+++ b/modules/designs_layout/src/Plugin/designs/source/LayoutSource.php
@@ -25,7 +25,7 @@ class LayoutSource extends DesignSourceBase implements ContainerFactoryPluginInt
   /**
    * The design manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $designManager;
 
@@ -38,7 +38,7 @@ class LayoutSource extends DesignSourceBase implements ContainerFactoryPluginInt
    *   The plugin identifier.
    * @param array $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\designs\DesignManagerInterface $designManager
+   * @param DesignManagerInterface $designManager
    *   The design manager.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, DesignManagerInterface $designManager) {
diff --git a/modules/designs_preview/src/Controller/DisplayController.php b/modules/designs_preview/src/Controller/DisplayController.php
index 0a0e15c..2e50c3a 100644
--- a/modules/designs_preview/src/Controller/DisplayController.php
+++ b/modules/designs_preview/src/Controller/DisplayController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\designs_preview\Controller;
 
+use Drupal\designs\DesignDefinition;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Extension\ThemeHandlerInterface;
 use Drupal\Core\Link;
@@ -17,23 +18,23 @@ class DisplayController extends ControllerBase {
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
   /**
    * The pattern plugins.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $designManager;
 
   /**
    * Constructs a new DisplayController instance.
    *
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
-   * @param \Drupal\designs\DesignManagerInterface $designManager
+   * @param DesignManagerInterface $designManager
    *   The design manager.
    */
   public function __construct(ThemeHandlerInterface $theme_handler, DesignManagerInterface $designManager) {
@@ -77,7 +78,7 @@ class DisplayController extends ControllerBase {
 
     $output = [];
 
-    /** @var \Drupal\designs\DesignDefinition $definition */
+    /** @var DesignDefinition $definition */
     foreach ($this->designManager->getSortedDefinitions() as $definition) {
       $category = (string) $definition->getCategory();
       if (!isset($output[$category])) {
diff --git a/modules/designs_preview/src/Plugin/Derivative/ThemeLocalTask.php b/modules/designs_preview/src/Plugin/Derivative/ThemeLocalTask.php
index 7803ef7..a87e3e3 100644
--- a/modules/designs_preview/src/Plugin/Derivative/ThemeLocalTask.php
+++ b/modules/designs_preview/src/Plugin/Derivative/ThemeLocalTask.php
@@ -15,14 +15,14 @@ class ThemeLocalTask extends DeriverBase implements ContainerDeriverInterface {
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
   /**
    * Constructs a new ThemeLocalTask.
    *
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
    */
   public function __construct(ThemeHandlerInterface $theme_handler) {
diff --git a/modules/designs_template/src/Template/DesignNode.php b/modules/designs_template/src/Template/DesignNode.php
index 431c5db..ff10d04 100644
--- a/modules/designs_template/src/Template/DesignNode.php
+++ b/modules/designs_template/src/Template/DesignNode.php
@@ -15,11 +15,11 @@ class DesignNode extends Node implements NodeOutputInterface {
   /**
    * DesignNode constructor.
    *
-   * @param \Twig\Node\Expression\AbstractExpression $design
+   * @param AbstractExpression $design
    *   The design name node.
-   * @param \Twig\Node\Expression\AbstractExpression|null $settings
+   * @param AbstractExpression|null $settings
    *   The design settings.
-   * @param \Twig\Node\Node|null $regions
+   * @param Node|null $regions
    *   The design regions.
    * @param int $lineno
    *   The template line number.
@@ -71,7 +71,7 @@ class DesignNode extends Node implements NodeOutputInterface {
   /**
    * Adds the values for the target.
    *
-   * @param \Twig\Compiler $compiler
+   * @param Compiler $compiler
    *   The twig compiler.
    * @param string $varname
    *   The internal variable name.
@@ -89,7 +89,7 @@ class DesignNode extends Node implements NodeOutputInterface {
   /**
    * Generate the output to convert settings and regions into design.
    *
-   * @param \Twig\Compiler $compiler
+   * @param Compiler $compiler
    *   The compiler.
    * @param string $template
    *   The template name.
@@ -131,7 +131,7 @@ class DesignNode extends Node implements NodeOutputInterface {
   /**
    * Generates the output for settings and regions.
    *
-   * @param \Twig\Compiler $compiler
+   * @param Compiler $compiler
    *   The compiler.
    * @param string $template
    *   The template name.
diff --git a/modules/designs_template/src/Template/DesignTokenParser.php b/modules/designs_template/src/Template/DesignTokenParser.php
index 31e6d85..222b312 100644
--- a/modules/designs_template/src/Template/DesignTokenParser.php
+++ b/modules/designs_template/src/Template/DesignTokenParser.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\designs_template\Template;
 
+use Twig\Node\Expression\AbstractExpression;
 use Drupal\Core\Render\RendererInterface;
 use Drupal\designs\DesignManagerInterface;
 use Twig\Error\SyntaxError;
@@ -20,23 +21,23 @@ final class DesignTokenParser extends AbstractTokenParser {
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The design manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $designManager;
 
   /**
    * DesignTokenParser constructor.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\designs\DesignManagerInterface $designManager
+   * @param DesignManagerInterface $designManager
    *   The design manager.
    */
   public function __construct(
@@ -120,7 +121,7 @@ final class DesignTokenParser extends AbstractTokenParser {
   /**
    * Check end of design.
    *
-   * @param \Twig\Token $token
+   * @param Token $token
    *   The current token.
    *
    * @return bool
@@ -133,7 +134,7 @@ final class DesignTokenParser extends AbstractTokenParser {
   /**
    * Get the settings used for the design.
    *
-   * @return \Twig\Node\Expression\AbstractExpression|null
+   * @return AbstractExpression|null
    *   The settings or nothing.
    */
   protected function parseSettings() {
diff --git a/modules/designs_template/src/Template/RegionNode.php b/modules/designs_template/src/Template/RegionNode.php
index d48f867..9256e09 100644
--- a/modules/designs_template/src/Template/RegionNode.php
+++ b/modules/designs_template/src/Template/RegionNode.php
@@ -17,7 +17,7 @@ class RegionNode extends BlockNode {
    *   The name of the region.
    * @param string $source
    *   The name of the source content.
-   * @param \Twig\Node\Node $body
+   * @param Node $body
    *   The body of the region.
    * @param int $lineno
    *   The line number.
diff --git a/modules/designs_template/src/Template/RegionReferenceExpression.php b/modules/designs_template/src/Template/RegionReferenceExpression.php
index 29912bb..16e853d 100644
--- a/modules/designs_template/src/Template/RegionReferenceExpression.php
+++ b/modules/designs_template/src/Template/RegionReferenceExpression.php
@@ -13,7 +13,7 @@ class RegionReferenceExpression extends AbstractExpression {
   /**
    * RegionReferenceExpression constructor.
    *
-   * @param \Twig\Node\Node $body
+   * @param Node $body
    *   The body of the region.
    */
   public function __construct(Node $body) {
diff --git a/modules/designs_template/src/Template/RegionTokenParser.php b/modules/designs_template/src/Template/RegionTokenParser.php
index 781c24d..3f68a43 100644
--- a/modules/designs_template/src/Template/RegionTokenParser.php
+++ b/modules/designs_template/src/Template/RegionTokenParser.php
@@ -71,7 +71,7 @@ final class RegionTokenParser extends AbstractTokenParser {
   /**
    * Check end of region.
    *
-   * @param \Twig\Token $token
+   * @param Token $token
    *   The current token.
    *
    * @return bool
diff --git a/modules/designs_template/src/Template/TwigExtension.php b/modules/designs_template/src/Template/TwigExtension.php
index 145e40e..dab77a4 100644
--- a/modules/designs_template/src/Template/TwigExtension.php
+++ b/modules/designs_template/src/Template/TwigExtension.php
@@ -15,23 +15,23 @@ class TwigExtension extends AbstractExtension {
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The design manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $designManager;
 
   /**
    * TwigExtension constructor.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\designs\DesignManagerInterface $designManager
+   * @param DesignManagerInterface $designManager
    *   The design manager.
    */
   public function __construct(
diff --git a/modules/designs_view/src/EventSubscriber/RouteSubscriber.php b/modules/designs_view/src/EventSubscriber/RouteSubscriber.php
index 9bebef1..e50688d 100644
--- a/modules/designs_view/src/EventSubscriber/RouteSubscriber.php
+++ b/modules/designs_view/src/EventSubscriber/RouteSubscriber.php
@@ -17,14 +17,14 @@ class RouteSubscriber implements EventSubscriberInterface {
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $routeMatch;
 
   /**
    * RouteSubscriber constructor.
    *
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $routeMatch
+   * @param CurrentRouteMatch $routeMatch
    *   The current route.
    */
   public function __construct(CurrentRouteMatch $routeMatch) {
@@ -42,7 +42,7 @@ class RouteSubscriber implements EventSubscriberInterface {
   /**
    * Allow the views ui to add additional forms.
    *
-   * @param \Symfony\Component\HttpKernel\Event\ControllerEvent $event
+   * @param ControllerEvent $event
    *   The controller event.
    */
   public function onController(ControllerEvent $event) {
diff --git a/modules/designs_view/src/Form/Ajax/DesignHandler.php b/modules/designs_view/src/Form/Ajax/DesignHandler.php
index 62883e2..aaf76e6 100644
--- a/modules/designs_view/src/Form/Ajax/DesignHandler.php
+++ b/modules/designs_view/src/Form/Ajax/DesignHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\designs_view\Form\Ajax;
 
+use Drupal\views\Plugin\views\display\DisplayPluginBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
 use Drupal\designs\Form\PluginForm;
@@ -56,7 +57,7 @@ class DesignHandler extends ViewsFormBase {
       $form['markup'] = ['#markup' => $this->t('Invalid display id @display', ['@display' => $display_id])];
       return $form;
     }
-    /** @var \Drupal\views\Plugin\views\display\DisplayPluginBase $display */
+    /** @var DisplayPluginBase $display */
     $display = &$executable->displayHandlers->get($display_id);
 
     $areas = [
@@ -192,7 +193,7 @@ class DesignHandler extends ViewsFormBase {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function multistepSubmit(array $form, FormStateInterface $form_state) {
diff --git a/modules/designs_view/src/Plugin/designs/source/ViewsPagerSource.php b/modules/designs_view/src/Plugin/designs/source/ViewsPagerSource.php
index 444ef2f..135c54d 100644
--- a/modules/designs_view/src/Plugin/designs/source/ViewsPagerSource.php
+++ b/modules/designs_view/src/Plugin/designs/source/ViewsPagerSource.php
@@ -33,7 +33,7 @@ class ViewsPagerSource extends DesignSourceBase implements ContainerFactoryPlugi
   /**
    * The pager manager.
    *
-   * @var \Drupal\Core\Pager\PagerManagerInterface
+   * @var PagerManagerInterface
    */
   protected $pagerManager;
 
@@ -46,7 +46,7 @@ class ViewsPagerSource extends DesignSourceBase implements ContainerFactoryPlugi
    *   The plugin identifier.
    * @param array $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Pager\PagerManagerInterface $pagerManager
+   * @param PagerManagerInterface $pagerManager
    *   The pager manager.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, PagerManagerInterface $pagerManager) {
diff --git a/modules/designs_view/src/Plugin/views/row/DesignsRow.php b/modules/designs_view/src/Plugin/views/row/DesignsRow.php
index 82ba131..cb59fb0 100644
--- a/modules/designs_view/src/Plugin/views/row/DesignsRow.php
+++ b/modules/designs_view/src/Plugin/views/row/DesignsRow.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\designs_view\Plugin\views\row;
 
+use Drupal\views\ViewExecutable;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -36,21 +37,21 @@ class DesignsRow extends RowPluginBase {
   /**
    * The design manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $designManager;
 
   /**
    * The design setting manager.
    *
-   * @var \Drupal\designs\DesignSettingManagerInterface
+   * @var DesignSettingManagerInterface
    */
   protected $settingManager;
 
   /**
    * The design content manager.
    *
-   * @var \Drupal\designs\DesignContentManagerInterface
+   * @var DesignContentManagerInterface
    */
   protected $contentManager;
 
@@ -101,7 +102,7 @@ class DesignsRow extends RowPluginBase {
       $form_state->setValue($parents, $input);
     }
 
-    /** @var \Drupal\views\ViewExecutable $view */
+    /** @var ViewExecutable $view */
     $view = $form_state->get('view')->getExecutable();
 
     $design_form = new PluginForm(
@@ -205,7 +206,7 @@ class DesignsRow extends RowPluginBase {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function multistepSubmit(array $form, FormStateInterface $form_state) {
diff --git a/modules/designs_view/src/Plugin/views/style/DesignsStyle.php b/modules/designs_view/src/Plugin/views/style/DesignsStyle.php
index 9fee853..9098f5b 100644
--- a/modules/designs_view/src/Plugin/views/style/DesignsStyle.php
+++ b/modules/designs_view/src/Plugin/views/style/DesignsStyle.php
@@ -58,21 +58,21 @@ class DesignsStyle extends StylePluginBase implements ContainerFactoryPluginInte
   /**
    * The design manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $designManager;
 
   /**
    * The design setting manager.
    *
-   * @var \Drupal\designs\DesignSettingManagerInterface
+   * @var DesignSettingManagerInterface
    */
   protected $settingManager;
 
   /**
    * The design content manager.
    *
-   * @var \Drupal\designs\DesignContentManagerInterface
+   * @var DesignContentManagerInterface
    */
   protected $contentManager;
 
@@ -177,7 +177,7 @@ class DesignsStyle extends StylePluginBase implements ContainerFactoryPluginInte
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function multistepSubmit(array $form, FormStateInterface $form_state) {
diff --git a/modules/designs_view/src/ViewsHandler.php b/modules/designs_view/src/ViewsHandler.php
index e27bef5..06a5bac 100644
--- a/modules/designs_view/src/ViewsHandler.php
+++ b/modules/designs_view/src/ViewsHandler.php
@@ -20,14 +20,14 @@ class ViewsHandler implements TrustedCallbackInterface {
   /**
    * The design manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $designManager;
 
   /**
    * ViewsHandler constructor.
    *
-   * @param \Drupal\designs\DesignManagerInterface $designManager
+   * @param DesignManagerInterface $designManager
    *   The design manager.
    */
   public function __construct(DesignManagerInterface $designManager) {
@@ -107,11 +107,11 @@ class ViewsHandler implements TrustedCallbackInterface {
   /**
    * Implements hook_views_post_render().
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The view.
    * @param array|string $output
    *   The output of the view.
-   * @param \Drupal\views\Plugin\views\cache\CachePluginBase $cache
+   * @param CachePluginBase $cache
    *   The views cache.
    */
   public function postRender(ViewExecutable $view, &$output, CachePluginBase $cache) {
diff --git a/modules/designs_view/src/ViewsUiHandler.php b/modules/designs_view/src/ViewsUiHandler.php
index a81b65f..2a4fff8 100644
--- a/modules/designs_view/src/ViewsUiHandler.php
+++ b/modules/designs_view/src/ViewsUiHandler.php
@@ -17,14 +17,14 @@ class ViewsUiHandler {
   /**
    * The design manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $designManager;
 
   /**
    * ViewsUiHandler constructor.
    *
-   * @param \Drupal\designs\DesignManagerInterface $designManager
+   * @param DesignManagerInterface $designManager
    *   The design manager.
    */
   public function __construct(DesignManagerInterface $designManager) {
@@ -36,7 +36,7 @@ class ViewsUiHandler {
    *
    * @param array $build
    *   The render array for the display content.
-   * @param \Drupal\views_ui\ViewUI $view
+   * @param ViewUI $view
    *   The view.
    * @param string $display_id
    *   The display identifier.
diff --git a/modules/designs_view/tests/src/Functional/AreaTest.php b/modules/designs_view/tests/src/Functional/AreaTest.php
index 6c90e33..a80bca9 100644
--- a/modules/designs_view/tests/src/Functional/AreaTest.php
+++ b/modules/designs_view/tests/src/Functional/AreaTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\designs_view\Functional;
 
+use Drupal\views\Entity\View;
 use Drupal\block\Entity\Block;
 use Drupal\views\Views;
 
@@ -22,7 +23,7 @@ class AreaTest extends UITestBase {
   /**
    * The block for testing the view.
    *
-   * @var \Drupal\block\Entity\Block
+   * @var Block
    */
   protected $block;
 
@@ -85,7 +86,7 @@ class AreaTest extends UITestBase {
     $options['title_text'] = $this->randomMachineName();
     $options['attributes'] = "id=\"{$options['custom_id']}\"";
 
-    /** @var \Drupal\views\Entity\View $view */
+    /** @var View $view */
     $view = $this->randomView();
     $view_name = $view['id'];
     $options['view_name'] = $view['id'];
diff --git a/src/Annotation/DesignContent.php b/src/Annotation/DesignContent.php
index 653a1c7..221bc29 100644
--- a/src/Annotation/DesignContent.php
+++ b/src/Annotation/DesignContent.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\designs\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -30,7 +31,7 @@ class DesignContent extends Plugin {
   /**
    * The human-readable name of the design content.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/DesignSetting.php b/src/Annotation/DesignSetting.php
index a7c6260..f0f9d7b 100644
--- a/src/Annotation/DesignSetting.php
+++ b/src/Annotation/DesignSetting.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\designs\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -31,7 +32,7 @@ class DesignSetting extends Plugin {
   /**
    * The human-readable name of the design setting.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -40,7 +41,7 @@ class DesignSetting extends Plugin {
   /**
    * An optional description for design settings form input.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/DesignSource.php b/src/Annotation/DesignSource.php
index 7517006..8dde09e 100644
--- a/src/Annotation/DesignSource.php
+++ b/src/Annotation/DesignSource.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\designs\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -30,7 +31,7 @@ class DesignSource extends Plugin {
   /**
    * The human-readable name of the design source.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/DesignContentInterface.php b/src/DesignContentInterface.php
index 265a375..b35ce57 100644
--- a/src/DesignContentInterface.php
+++ b/src/DesignContentInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\designs;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Component\Plugin\DerivativeInspectionInterface;
@@ -16,7 +17,7 @@ interface DesignContentInterface extends PluginInspectionInterface, DerivativeIn
   /**
    * Get the label of the setting.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The label.
    */
   public function label();
diff --git a/src/DesignContentManager.php b/src/DesignContentManager.php
index 7732951..6e8f3bb 100644
--- a/src/DesignContentManager.php
+++ b/src/DesignContentManager.php
@@ -24,9 +24,9 @@ class DesignContentManager extends DefaultPluginManager implements DesignContent
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/DesignContentManagerInterface.php b/src/DesignContentManagerInterface.php
index 1d0b523..8e99cbf 100644
--- a/src/DesignContentManagerInterface.php
+++ b/src/DesignContentManagerInterface.php
@@ -12,7 +12,7 @@ interface DesignContentManagerInterface extends PluginManagerInterface {
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\designs\DesignContentInterface
+   * @return DesignContentInterface
    *   The design content plugin.
    */
   public function createInstance($plugin_id, array $configuration = []);
diff --git a/src/DesignDefault.php b/src/DesignDefault.php
index d76fcfc..55521d2 100644
--- a/src/DesignDefault.php
+++ b/src/DesignDefault.php
@@ -25,56 +25,56 @@ class DesignDefault extends PluginBase implements DesignInterface, ContainerFact
   /**
    * The design definition.
    *
-   * @var \Drupal\designs\DesignDefinition
+   * @var DesignDefinition
    */
   protected $pluginDefinition;
 
   /**
    * The design manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $manager;
 
   /**
    * The design settings manager.
    *
-   * @var \Drupal\designs\DesignSettingManagerInterface
+   * @var DesignSettingManagerInterface
    */
   protected $settingManager;
 
   /**
    * The content manager.
    *
-   * @var \Drupal\designs\DesignContentManagerInterface
+   * @var DesignContentManagerInterface
    */
   protected $contentManager;
 
   /**
    * The design source plugin.
    *
-   * @var \Drupal\designs\DesignSourceInterface
+   * @var DesignSourceInterface
    */
   protected $sourcePlugin;
 
   /**
    * The design settings.
    *
-   * @var \Drupal\designs\DesignSettingInterface[]
+   * @var DesignSettingInterface[]
    */
   protected $settings = [];
 
   /**
    * The design custom content.
    *
-   * @var \Drupal\designs\DesignContentInterface[]
+   * @var DesignContentInterface[]
    */
   protected $content = [];
 
   /**
    * The design region.
    *
-   * @var \Drupal\designs\DesignRegion[]
+   * @var DesignRegion[]
    */
   protected $regions = [];
 
@@ -201,7 +201,7 @@ class DesignDefault extends PluginBase implements DesignInterface, ContainerFact
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\designs\DesignDefinition
+   * @return DesignDefinition
    *   The design definition.
    */
   public function getPluginDefinition() {
@@ -344,7 +344,7 @@ class DesignDefault extends PluginBase implements DesignInterface, ContainerFact
    * {@inheritdoc}
    */
   public function validateConfigurationForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\designs\Form\ConfigurationForm $config_form */
+    /** @var ConfigurationForm $config_form */
     $config_form = $form['#form_handler'];
     $config_form->validateForm($form, $form_state);
   }
@@ -353,7 +353,7 @@ class DesignDefault extends PluginBase implements DesignInterface, ContainerFact
    * {@inheritdoc}
    */
   public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\designs\Form\ConfigurationForm $config_form */
+    /** @var ConfigurationForm $config_form */
     $config_form = $form['#form_handler'];
     $result = $config_form->submitForm($form, $form_state);
     $this->setConfiguration($result);
diff --git a/src/DesignDefinition.php b/src/DesignDefinition.php
index d2b6c41..6a94ae9 100644
--- a/src/DesignDefinition.php
+++ b/src/DesignDefinition.php
@@ -185,7 +185,7 @@ class DesignDefinition extends PluginDefinition implements PluginDefinitionInter
   /**
    * Gets the human-readable name of the design definition.
    *
-   * @return string|\Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return string|TranslatableMarkup
    *   The human-readable name of the design definition.
    */
   public function getLabel() {
@@ -195,7 +195,7 @@ class DesignDefinition extends PluginDefinition implements PluginDefinitionInter
   /**
    * Sets the human-readable name of the design definition.
    *
-   * @param string|\Drupal\Core\StringTranslation\TranslatableMarkup $label
+   * @param string|TranslatableMarkup $label
    *   The human-readable name of the design definition.
    *
    * @return $this
@@ -208,7 +208,7 @@ class DesignDefinition extends PluginDefinition implements PluginDefinitionInter
   /**
    * Gets the description of the design definition.
    *
-   * @return string|\Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return string|TranslatableMarkup
    *   The description of the design definition.
    */
   public function getDescription() {
@@ -218,7 +218,7 @@ class DesignDefinition extends PluginDefinition implements PluginDefinitionInter
   /**
    * Sets the description of the design definition.
    *
-   * @param string|\Drupal\Core\StringTranslation\TranslatableMarkup $description
+   * @param string|TranslatableMarkup $description
    *   The description of the design definition.
    *
    * @return $this
@@ -231,7 +231,7 @@ class DesignDefinition extends PluginDefinition implements PluginDefinitionInter
   /**
    * Gets the human-readable category of the design definition.
    *
-   * @return string|\Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return string|TranslatableMarkup
    *   The human-readable category of the design definition.
    */
   public function getCategory() {
@@ -241,7 +241,7 @@ class DesignDefinition extends PluginDefinition implements PluginDefinitionInter
   /**
    * Sets the human-readable category of the design definition.
    *
-   * @param string|\Drupal\Core\StringTranslation\TranslatableMarkup $category
+   * @param string|TranslatableMarkup $category
    *   The human-readable category of the design definition.
    *
    * @return $this
@@ -310,7 +310,7 @@ class DesignDefinition extends PluginDefinition implements PluginDefinitionInter
   /**
    * Gets the human-readable setting labels.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup[]
+   * @return TranslatableMarkup[]
    *   An array of human-readable setting labels.
    */
   public function getSettingLabels() {
@@ -359,7 +359,7 @@ class DesignDefinition extends PluginDefinition implements PluginDefinitionInter
   /**
    * Gets the human-readable region labels.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup[]
+   * @return TranslatableMarkup[]
    *   An array of human-readable region labels.
    */
   public function getRegionLabels() {
diff --git a/src/DesignInterface.php b/src/DesignInterface.php
index 06952e6..ab5be55 100644
--- a/src/DesignInterface.php
+++ b/src/DesignInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\designs;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Component\Plugin\DerivativeInspectionInterface;
@@ -27,7 +28,7 @@ interface DesignInterface extends PluginInspectionInterface, DerivativeInspectio
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\designs\DesignDefinition
+   * @return DesignDefinition
    *   The design definition.
    */
   public function getPluginDefinition();
@@ -35,7 +36,7 @@ interface DesignInterface extends PluginInspectionInterface, DerivativeInspectio
   /**
    * Get the design source plugin.
    *
-   * @return \Drupal\designs\DesignSourceInterface
+   * @return DesignSourceInterface
    *   The design source.
    */
   public function getSourcePlugin();
@@ -43,7 +44,7 @@ interface DesignInterface extends PluginInspectionInterface, DerivativeInspectio
   /**
    * Set the design source plugin.
    *
-   * @param \Drupal\designs\DesignSourceInterface $source
+   * @param DesignSourceInterface $source
    *   The design source plugin.
    *
    * @return $this
@@ -54,7 +55,7 @@ interface DesignInterface extends PluginInspectionInterface, DerivativeInspectio
   /**
    * Get the settings for the design.
    *
-   * @return \Drupal\designs\DesignSettingInterface[]
+   * @return DesignSettingInterface[]
    *   The settings.
    */
   public function getSettings();
@@ -65,7 +66,7 @@ interface DesignInterface extends PluginInspectionInterface, DerivativeInspectio
    * @param string $setting_id
    *   The setting identifier.
    *
-   * @return \Drupal\designs\DesignSettingInterface|null
+   * @return DesignSettingInterface|null
    *   The design setting.
    */
   public function getSetting(string $setting_id): ?DesignSettingInterface;
@@ -73,7 +74,7 @@ interface DesignInterface extends PluginInspectionInterface, DerivativeInspectio
   /**
    * Get the extra content for the design.
    *
-   * @return \Drupal\designs\DesignContentInterface[]
+   * @return DesignContentInterface[]
    *   The content.
    */
   public function getContents();
@@ -84,7 +85,7 @@ interface DesignInterface extends PluginInspectionInterface, DerivativeInspectio
    * @param string $content_id
    *   The content identifier.
    *
-   * @return \Drupal\designs\DesignContentInterface|null
+   * @return DesignContentInterface|null
    *   The design custom content.
    */
   public function getContent(string $content_id): ?DesignContentInterface;
@@ -92,7 +93,7 @@ interface DesignInterface extends PluginInspectionInterface, DerivativeInspectio
   /**
    * Get the source labels from the source plugin and custom content.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup[]
+   * @return TranslatableMarkup[]
    *   The source labels.
    */
   public function getSources();
@@ -108,7 +109,7 @@ interface DesignInterface extends PluginInspectionInterface, DerivativeInspectio
   /**
    * Get the design regions.
    *
-   * @return \Drupal\designs\DesignRegion[]
+   * @return DesignRegion[]
    *   The regions.
    */
   public function getRegions();
diff --git a/src/DesignManager.php b/src/DesignManager.php
index b54c5fa..a577fae 100644
--- a/src/DesignManager.php
+++ b/src/DesignManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\designs;
 
+use Drupal\Component\Plugin\Discovery\DiscoveryInterface;
 use Drupal\Component\Annotation\Plugin\Discovery\AnnotationBridgeDecorator;
 use Drupal\Component\Assertion\Inspector;
 use Drupal\Component\Plugin\Definition\PluginDefinitionInterface;
@@ -74,7 +75,7 @@ class DesignManager extends PluginManagerBase implements PluginManagerInterface,
   /**
    * The module handler to invoke the alter hook.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
@@ -110,33 +111,33 @@ class DesignManager extends PluginManagerBase implements PluginManagerInterface,
   /**
    * The theme list.
    *
-   * @var \Drupal\Core\Extension\ThemeExtensionList
+   * @var ThemeExtensionList
    */
   protected $themeList;
 
   /**
    * The theme manager.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;
 
   /**
    * The source manager.
    *
-   * @var \Drupal\designs\DesignSourceManagerInterface
+   * @var DesignSourceManagerInterface
    */
   protected $sourceManager;
 
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
-   * @var \Drupal\Component\Plugin\Discovery\DiscoveryInterface
+   * @var DiscoveryInterface
    */
   protected $themeDiscovery;
 
@@ -153,17 +154,17 @@ class DesignManager extends PluginManagerBase implements PluginManagerInterface,
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Drupal\Core\Extension\ThemeExtensionList $theme_list
+   * @param ThemeExtensionList $theme_list
    *   The theme list.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $theme_manager
+   * @param ThemeManagerInterface $theme_manager
    *   The theme manager to select active theme.
-   * @param \Drupal\designs\DesignSourceManagerInterface $sourceManager
+   * @param DesignSourceManagerInterface $sourceManager
    *   The design source manager.
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param FileSystemInterface $fileSystem
    *   The file system.
    */
   public function __construct(string $appRoot, \Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, ThemeExtensionList $theme_list, ThemeManagerInterface $theme_manager, DesignSourceManagerInterface $sourceManager, FileSystemInterface $fileSystem) {
@@ -189,7 +190,7 @@ class DesignManager extends PluginManagerBase implements PluginManagerInterface,
    *
    * Plugin definitions are cached using the provided cache backend.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
    * @param string $cache_key
    *   Cache key prefix to use.
@@ -511,7 +512,7 @@ class DesignManager extends PluginManagerBase implements PluginManagerInterface,
    * @param array $directories
    *   The list of directories.
    *
-   * @return \Drupal\Component\Plugin\Discovery\DiscoveryInterface
+   * @return DiscoveryInterface
    *   The discovery.
    */
   protected function getDiscoveryByDirectories(array $directories) {
@@ -564,7 +565,7 @@ class DesignManager extends PluginManagerBase implements PluginManagerInterface,
    */
   public function getLibraryImplementations() {
     $libraries = [];
-    /** @var \Drupal\designs\DesignDefinition[] $definitions */
+    /** @var DesignDefinition[] $definitions */
     $definitions = $this->getDefinitions();
     foreach ($definitions as $definition) {
       $libraries += $definition->getLibraryInfo();
@@ -587,7 +588,7 @@ class DesignManager extends PluginManagerBase implements PluginManagerInterface,
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\designs\DesignDefinition[]
+   * @return DesignDefinition[]
    *   The design definitions.
    */
   public function getSortedDefinitions(array $definitions = NULL, $label_key = 'label') {
@@ -605,7 +606,7 @@ class DesignManager extends PluginManagerBase implements PluginManagerInterface,
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\designs\DesignDefinition[][]
+   * @return DesignDefinition[][]
    *   The grouped design definitions.
    */
   public function getGroupedDefinitions(array $definitions = NULL, $label_key = 'label') {
diff --git a/src/DesignManagerInterface.php b/src/DesignManagerInterface.php
index 4f3c8be..5fad84e 100644
--- a/src/DesignManagerInterface.php
+++ b/src/DesignManagerInterface.php
@@ -23,7 +23,7 @@ interface DesignManagerInterface extends CategorizingPluginManagerInterface {
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\designs\DesignInterface
+   * @return DesignInterface
    *   The design definition.
    */
   public function createInstance($plugin_id, array $configuration = []);
@@ -31,7 +31,7 @@ interface DesignManagerInterface extends CategorizingPluginManagerInterface {
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\designs\DesignDefinition|null
+   * @return DesignDefinition|null
    *   The design definition.
    */
   public function getDefinition($plugin_id, $exception_on_invalid = TRUE);
@@ -39,7 +39,7 @@ interface DesignManagerInterface extends CategorizingPluginManagerInterface {
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\designs\DesignDefinition[]
+   * @return DesignDefinition[]
    *   The design definitions.
    */
   public function getDefinitions();
@@ -47,7 +47,7 @@ interface DesignManagerInterface extends CategorizingPluginManagerInterface {
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\designs\DesignDefinition[]
+   * @return DesignDefinition[]
    *   The sorted design definitions.
    */
   public function getSortedDefinitions(array $definitions = NULL);
@@ -55,7 +55,7 @@ interface DesignManagerInterface extends CategorizingPluginManagerInterface {
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\designs\DesignDefinition[][]
+   * @return DesignDefinition[][]
    *   The grouped design definitions.
    */
   public function getGroupedDefinitions(array $definitions = NULL);
@@ -80,7 +80,7 @@ interface DesignManagerInterface extends CategorizingPluginManagerInterface {
    * @param array $source_configuration
    *   The source configuration.
    *
-   * @return \Drupal\designs\DesignInterface|null
+   * @return DesignInterface|null
    *   The design.
    */
   public function createSourcedInstance($design_id, array $design_configuration, $source_id, array $source_configuration);
diff --git a/src/DesignProperties.php b/src/DesignProperties.php
index 3d59d97..e565b9b 100644
--- a/src/DesignProperties.php
+++ b/src/DesignProperties.php
@@ -14,23 +14,23 @@ class DesignProperties implements DesignPropertiesInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * DesignProperties constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, RendererInterface $renderer) {
diff --git a/src/DesignSettingBase.php b/src/DesignSettingBase.php
index ad9bfa5..b83e9f5 100644
--- a/src/DesignSettingBase.php
+++ b/src/DesignSettingBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\designs;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
@@ -32,42 +33,42 @@ abstract class DesignSettingBase extends PluginBase implements DesignSettingInte
   /**
    * The source plugin.
    *
-   * @var \Drupal\designs\DesignSourceInterface
+   * @var DesignSourceInterface
    */
   protected $sourcePlugin;
 
   /**
    * The design manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $manager;
 
   /**
    * The design content manager.
    *
-   * @var \Drupal\designs\DesignContentManagerInterface
+   * @var DesignContentManagerInterface
    */
   protected $contentManager;
 
   /**
    * The design setting manager.
    *
-   * @var \Drupal\designs\DesignSettingManagerInterface
+   * @var DesignSettingManagerInterface
    */
   protected $settingManager;
 
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The content for the setting.
    *
-   * @var \Drupal\designs\DesignContentInterface|null
+   * @var DesignContentInterface|null
    */
   protected $content;
 
@@ -80,13 +81,13 @@ abstract class DesignSettingBase extends PluginBase implements DesignSettingInte
    *   The plugin identifier.
    * @param array $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\designs\DesignManagerInterface $manager
+   * @param DesignManagerInterface $manager
    *   The design manager.
-   * @param \Drupal\designs\DesignContentManagerInterface $contentManager
+   * @param DesignContentManagerInterface $contentManager
    *   The design content manager.
-   * @param \Drupal\designs\DesignSettingManagerInterface $settingManager
+   * @param DesignSettingManagerInterface $settingManager
    *   The design setting manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(
@@ -196,7 +197,7 @@ abstract class DesignSettingBase extends PluginBase implements DesignSettingInte
   /**
    * Get the description.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup|string
+   * @return TranslatableMarkup|string
    *   The description.
    */
   public function getDescription() {
diff --git a/src/DesignSettingInterface.php b/src/DesignSettingInterface.php
index 75879c6..515bdd4 100644
--- a/src/DesignSettingInterface.php
+++ b/src/DesignSettingInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\designs;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Component\Plugin\DerivativeInspectionInterface;
@@ -17,7 +18,7 @@ interface DesignSettingInterface extends PluginInspectionInterface, DerivativeIn
   /**
    * Get the label of the setting.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The label.
    */
   public function label();
@@ -25,7 +26,7 @@ interface DesignSettingInterface extends PluginInspectionInterface, DerivativeIn
   /**
    * Get the description of the setting.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The description.
    */
   public function getDescription();
@@ -86,7 +87,7 @@ interface DesignSettingInterface extends PluginInspectionInterface, DerivativeIn
   /**
    * The design content for the setting.
    *
-   * @return \Drupal\designs\DesignContentInterface|null
+   * @return DesignContentInterface|null
    *   The design content plugin.
    */
   public function getContent();
@@ -115,7 +116,7 @@ interface DesignSettingInterface extends PluginInspectionInterface, DerivativeIn
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ -128,7 +129,7 @@ interface DesignSettingInterface extends PluginInspectionInterface, DerivativeIn
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function validateForm(array $form, FormStateInterface $form_state);
@@ -138,7 +139,7 @@ interface DesignSettingInterface extends PluginInspectionInterface, DerivativeIn
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
diff --git a/src/DesignSettingManager.php b/src/DesignSettingManager.php
index d5c1871..617e80a 100644
--- a/src/DesignSettingManager.php
+++ b/src/DesignSettingManager.php
@@ -24,9 +24,9 @@ class DesignSettingManager extends DefaultPluginManager implements DesignSetting
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/DesignSettingManagerInterface.php b/src/DesignSettingManagerInterface.php
index 647e1fd..e9ef0d9 100644
--- a/src/DesignSettingManagerInterface.php
+++ b/src/DesignSettingManagerInterface.php
@@ -12,7 +12,7 @@ interface DesignSettingManagerInterface extends PluginManagerInterface {
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\designs\DesignSettingInterface
+   * @return DesignSettingInterface
    *   The design setting plugin.
    */
   public function createInstance($plugin_id, array $configuration = []);
diff --git a/src/DesignSourceInterface.php b/src/DesignSourceInterface.php
index 9610035..ca40aa6 100644
--- a/src/DesignSourceInterface.php
+++ b/src/DesignSourceInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\designs;
 
+use Drupal\Core\Plugin\Context\ContextDefinitionInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Component\Plugin\DerivativeInspectionInterface;
@@ -15,7 +17,7 @@ interface DesignSourceInterface extends PluginInspectionInterface, DerivativeIns
   /**
    * Get the contexts used by the source.
    *
-   * @return \Drupal\Core\Plugin\Context\ContextDefinitionInterface[]
+   * @return ContextDefinitionInterface[]
    *   The contexts.
    */
   public function getFormContexts();
@@ -34,7 +36,7 @@ interface DesignSourceInterface extends PluginInspectionInterface, DerivativeIns
   /**
    * The indexes from a source render array element.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup[]
+   * @return TranslatableMarkup[]
    *   An associative array, indexed by the source render element index. This
    *   may include render element hash indexes.
    */
diff --git a/src/DesignSourceManager.php b/src/DesignSourceManager.php
index b619833..88f01ed 100644
--- a/src/DesignSourceManager.php
+++ b/src/DesignSourceManager.php
@@ -24,9 +24,9 @@ class DesignSourceManager extends DefaultPluginManager implements DesignSourceMa
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/DesignSourceManagerInterface.php b/src/DesignSourceManagerInterface.php
index 8ab58fc..ec75aa5 100644
--- a/src/DesignSourceManagerInterface.php
+++ b/src/DesignSourceManagerInterface.php
@@ -12,7 +12,7 @@ interface DesignSourceManagerInterface extends PluginManagerInterface {
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\designs\DesignSourceInterface
+   * @return DesignSourceInterface
    *   The design source plugin.
    */
   public function createInstance($plugin_id, array $configuration = []);
diff --git a/src/Discovery/YamlDirectoryDiscoveryDecorator.php b/src/Discovery/YamlDirectoryDiscoveryDecorator.php
index ea514d2..02d0b5d 100644
--- a/src/Discovery/YamlDirectoryDiscoveryDecorator.php
+++ b/src/Discovery/YamlDirectoryDiscoveryDecorator.php
@@ -13,7 +13,7 @@ class YamlDirectoryDiscoveryDecorator extends YamlDirectoryDiscovery {
   /**
    * The Discovery object being decorated.
    *
-   * @var \Drupal\Component\Plugin\Discovery\DiscoveryInterface
+   * @var DiscoveryInterface
    */
   protected $decorated;
 
@@ -27,7 +27,7 @@ class YamlDirectoryDiscoveryDecorator extends YamlDirectoryDiscovery {
   /**
    * Constructs a YamlDiscoveryDecorator object.
    *
-   * @param \Drupal\Component\Plugin\Discovery\DiscoveryInterface $decorated
+   * @param DiscoveryInterface $decorated
    *   The discovery object that is being decorated.
    * @param string $name
    *   The file name suffix to use for discovery; for instance, 'test' will
diff --git a/src/Element/RenderDesign.php b/src/Element/RenderDesign.php
index a11f8bd..5db8876 100644
--- a/src/Element/RenderDesign.php
+++ b/src/Element/RenderDesign.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\designs\Element;
 
+use Drupal\designs\DesignManagerInterface;
 use Drupal\Core\Render\Element;
 use Drupal\Core\Render\Element\RenderElement;
 use Drupal\designs\DesignSourceInterface;
@@ -38,7 +39,7 @@ class RenderDesign extends RenderElement {
    *   The render element.
    */
   public static function preRenderDesign(array $element) {
-    /** @var \Drupal\designs\DesignManagerInterface $manager */
+    /** @var DesignManagerInterface $manager */
     $manager = \Drupal::service('plugin.manager.design');
 
     // Design without available template prints no markup.
diff --git a/src/Form/ConfigurationForm.php b/src/Form/ConfigurationForm.php
index 42287e6..050b556 100644
--- a/src/Form/ConfigurationForm.php
+++ b/src/Form/ConfigurationForm.php
@@ -14,7 +14,7 @@ class ConfigurationForm extends FormBase {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ -97,7 +97,7 @@ class ConfigurationForm extends FormBase {
    *   The form class.
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
diff --git a/src/Form/ContentForm.php b/src/Form/ContentForm.php
index eee5265..5cd2e0a 100644
--- a/src/Form/ContentForm.php
+++ b/src/Form/ContentForm.php
@@ -13,14 +13,14 @@ class ContentForm extends FormBase {
   /**
    * The design content.
    *
-   * @var \Drupal\designs\DesignContentInterface|null
+   * @var DesignContentInterface|null
    */
   protected $content = NULL;
 
   /**
    * Get the design content.
    *
-   * @return \Drupal\designs\DesignContentInterface|null
+   * @return DesignContentInterface|null
    *   The design content.
    */
   public function getContent(): ?DesignContentInterface {
@@ -30,7 +30,7 @@ class ContentForm extends FormBase {
   /**
    * Set the design content.
    *
-   * @param \Drupal\designs\DesignContentInterface|null $content
+   * @param DesignContentInterface|null $content
    *   The design content.
    *
    * @return $this
diff --git a/src/Form/ContentsForm.php b/src/Form/ContentsForm.php
index 2249c34..909d88c 100644
--- a/src/Form/ContentsForm.php
+++ b/src/Form/ContentsForm.php
@@ -49,7 +49,7 @@ class ContentsForm extends FormBase implements TrustedCallbackInterface {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ -136,7 +136,7 @@ class ContentsForm extends FormBase implements TrustedCallbackInterface {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function massageFormValues(array $form, FormStateInterface $form_state) {
@@ -164,7 +164,7 @@ class ContentsForm extends FormBase implements TrustedCallbackInterface {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function validateForm(array $form, FormStateInterface $form_state) {
@@ -180,7 +180,7 @@ class ContentsForm extends FormBase implements TrustedCallbackInterface {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form_state.
    *
    * @return array
@@ -221,7 +221,7 @@ class ContentsForm extends FormBase implements TrustedCallbackInterface {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function validateCreationForm(array $form, FormStateInterface $form_state) {
@@ -322,7 +322,7 @@ class ContentsForm extends FormBase implements TrustedCallbackInterface {
    *   The value for the element.
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return bool
diff --git a/src/Form/FormBase.php b/src/Form/FormBase.php
index 75c9ddf..869df04 100644
--- a/src/Form/FormBase.php
+++ b/src/Form/FormBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\designs\Form;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Form\FormStateInterface;
@@ -23,39 +24,39 @@ abstract class FormBase {
   /**
    * The design being configured.
    *
-   * @var \Drupal\designs\DesignInterface|null
+   * @var DesignInterface|null
    */
   protected $design = NULL;
 
   /**
    * The design manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $manager;
 
   /**
    * The design settings manager.
    *
-   * @var \Drupal\designs\DesignSettingManagerInterface
+   * @var DesignSettingManagerInterface
    */
   protected $settingManager;
 
   /**
    * The design content manager.
    *
-   * @var \Drupal\designs\DesignContentManagerInterface
+   * @var DesignContentManagerInterface
    */
   protected $contentManager;
 
   /**
    * FormBase constructor.
    *
-   * @param \Drupal\designs\DesignManagerInterface $manager
+   * @param DesignManagerInterface $manager
    *   The design manager.
-   * @param \Drupal\designs\DesignSettingManagerInterface $settingManager
+   * @param DesignSettingManagerInterface $settingManager
    *   The design setting manager.
-   * @param \Drupal\designs\DesignContentManagerInterface $contentManager
+   * @param DesignContentManagerInterface $contentManager
    *   The design content manager.
    */
   public function __construct(
@@ -71,7 +72,7 @@ abstract class FormBase {
   /**
    * Get the design for the form.
    *
-   * @return \Drupal\designs\DesignInterface|null
+   * @return DesignInterface|null
    *   The design.
    */
   public function getDesign() {
@@ -81,7 +82,7 @@ abstract class FormBase {
   /**
    * Set the design for the form.
    *
-   * @param \Drupal\designs\DesignInterface|null $design
+   * @param DesignInterface|null $design
    *   The design.
    *
    * @return $this
@@ -95,7 +96,7 @@ abstract class FormBase {
   /**
    * Get the title used for the form.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup|string
+   * @return TranslatableMarkup|string
    *   The title.
    */
   protected function getTitle() {
@@ -107,7 +108,7 @@ abstract class FormBase {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ -133,7 +134,7 @@ abstract class FormBase {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function validateForm(array $form, FormStateInterface $form_state) {
@@ -144,7 +145,7 @@ abstract class FormBase {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ -159,7 +160,7 @@ abstract class FormBase {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function massageFormValues(array $form, FormStateInterface $form_state) {
@@ -207,7 +208,7 @@ abstract class FormBase {
    *
    * @param array $parents
    *   The form parents array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return bool
@@ -259,7 +260,7 @@ abstract class FormBase {
    *   The plugin instance.
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
diff --git a/src/Form/FormTrait.php b/src/Form/FormTrait.php
index 969cd89..bb32063 100644
--- a/src/Form/FormTrait.php
+++ b/src/Form/FormTrait.php
@@ -27,7 +27,7 @@ trait FormTrait {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ -44,7 +44,7 @@ trait FormTrait {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
diff --git a/src/Form/PluginForm.php b/src/Form/PluginForm.php
index 40a6c5f..f59de7c 100644
--- a/src/Form/PluginForm.php
+++ b/src/Form/PluginForm.php
@@ -16,7 +16,7 @@ class PluginForm extends ConfigurationForm {
   /**
    * The design manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $manager;
 
@@ -51,11 +51,11 @@ class PluginForm extends ConfigurationForm {
   /**
    * PluginForm constructor.
    *
-   * @param \Drupal\designs\DesignManagerInterface $manager
+   * @param DesignManagerInterface $manager
    *   The design manager.
-   * @param \Drupal\designs\DesignSettingManagerInterface $settingManager
+   * @param DesignSettingManagerInterface $settingManager
    *   The design setting manager.
-   * @param \Drupal\designs\DesignContentManagerInterface $contentManager
+   * @param DesignContentManagerInterface $contentManager
    *   The design content manager.
    * @param string $plugin_id
    *   The plugin identifier.
@@ -106,7 +106,7 @@ class PluginForm extends ConfigurationForm {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
@@ -181,7 +181,7 @@ class PluginForm extends ConfigurationForm {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function validateForm(array $form, FormStateInterface $form_state) {
@@ -197,7 +197,7 @@ class PluginForm extends ConfigurationForm {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function submitForm(array $form, FormStateInterface $form_state) {
diff --git a/src/Form/RegionForm.php b/src/Form/RegionForm.php
index 02d5a28..5e27c5e 100644
--- a/src/Form/RegionForm.php
+++ b/src/Form/RegionForm.php
@@ -15,14 +15,14 @@ class RegionForm extends FormBase {
   /**
    * The design region.
    *
-   * @var \Drupal\designs\DesignRegion
+   * @var DesignRegion
    */
   protected $region;
 
   /**
    * Get the region.
    *
-   * @return \Drupal\designs\DesignRegion
+   * @return DesignRegion
    *   The region.
    */
   public function getRegion(): DesignRegion {
@@ -32,7 +32,7 @@ class RegionForm extends FormBase {
   /**
    * Set the region.
    *
-   * @param \Drupal\designs\DesignRegion $region
+   * @param DesignRegion $region
    *   The region.
    *
    * @return $this
diff --git a/src/Form/RegionsForm.php b/src/Form/RegionsForm.php
index 2e896d8..6c1ba84 100644
--- a/src/Form/RegionsForm.php
+++ b/src/Form/RegionsForm.php
@@ -36,7 +36,7 @@ class RegionsForm extends FormBase {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
diff --git a/src/Form/SettingForm.php b/src/Form/SettingForm.php
index 28ad525..959901f 100644
--- a/src/Form/SettingForm.php
+++ b/src/Form/SettingForm.php
@@ -13,14 +13,14 @@ class SettingForm extends ContentForm {
   /**
    * The design setting.
    *
-   * @var \Drupal\designs\DesignSettingInterface
+   * @var DesignSettingInterface
    */
   protected $setting;
 
   /**
    * Get the design setting.
    *
-   * @return \Drupal\designs\DesignSettingInterface
+   * @return DesignSettingInterface
    *   The design setting.
    */
   public function getSetting(): DesignSettingInterface {
@@ -30,7 +30,7 @@ class SettingForm extends ContentForm {
   /**
    * Set the design setting.
    *
-   * @param \Drupal\designs\DesignSettingInterface $setting
+   * @param DesignSettingInterface $setting
    *   The design setting.
    *
    * @return $this
diff --git a/src/Plugin/designs/content/BlockContent.php b/src/Plugin/designs/content/BlockContent.php
index 0ea4b74..d8dc978 100644
--- a/src/Plugin/designs/content/BlockContent.php
+++ b/src/Plugin/designs/content/BlockContent.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\designs\Plugin\designs\content;
 
+use Drupal\Core\Plugin\PluginFormInterface;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Block\BlockManagerInterface;
 use Drupal\Core\Block\BlockPluginInterface;
@@ -33,14 +34,14 @@ class BlockContent extends DesignContentBase implements ContainerFactoryPluginIn
   /**
    * The block manager.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;
 
   /**
    * The plugin form factory.
    *
-   * @var \Drupal\Core\Plugin\PluginFormFactoryInterface
+   * @var PluginFormFactoryInterface
    */
   protected $pluginFormFactory;
 
@@ -53,9 +54,9 @@ class BlockContent extends DesignContentBase implements ContainerFactoryPluginIn
    *   The plugin identifier.
    * @param array $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Block\BlockManagerInterface $blockManager
+   * @param BlockManagerInterface $blockManager
    *   The block manager.
-   * @param \Drupal\Core\Plugin\PluginFormFactoryInterface $pluginFormFactory
+   * @param PluginFormFactoryInterface $pluginFormFactory
    *   The plugin form factory.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, BlockManagerInterface $blockManager, PluginFormFactoryInterface $pluginFormFactory) {
@@ -223,10 +224,10 @@ class BlockContent extends DesignContentBase implements ContainerFactoryPluginIn
   /**
    * Retrieves the plugin form for a given block and operation.
    *
-   * @param \Drupal\Core\Block\BlockPluginInterface $block
+   * @param BlockPluginInterface $block
    *   The block plugin.
    *
-   * @return \Drupal\Core\Plugin\PluginFormInterface
+   * @return PluginFormInterface
    *   The plugin form for the block.
    */
   protected function getPluginForm(BlockPluginInterface $block) {
diff --git a/src/Plugin/designs/content/TokenContent.php b/src/Plugin/designs/content/TokenContent.php
index 3db7808..0118239 100644
--- a/src/Plugin/designs/content/TokenContent.php
+++ b/src/Plugin/designs/content/TokenContent.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\designs\Plugin\designs\content;
 
+use Drupal\Core\Plugin\Context\ContextDefinitionInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Render\Markup;
@@ -22,7 +23,7 @@ class TokenContent extends DesignContentBase implements ContainerFactoryPluginIn
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
@@ -35,7 +36,7 @@ class TokenContent extends DesignContentBase implements ContainerFactoryPluginIn
    *   The plugin identifier.
    * @param array $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, Token $token) {
@@ -69,7 +70,7 @@ class TokenContent extends DesignContentBase implements ContainerFactoryPluginIn
    */
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
     $token_types = [];
-    /** @var \Drupal\Core\Plugin\Context\ContextDefinitionInterface $context */
+    /** @var ContextDefinitionInterface $context */
     foreach ($form['#design_contexts'] as $type => $context) {
       if ("entity:{$type}" === $context->getDataType()) {
         $token_types[] = $type;
diff --git a/src/Plugin/designs/content/TwigContent.php b/src/Plugin/designs/content/TwigContent.php
index cc139fb..bb140fe 100644
--- a/src/Plugin/designs/content/TwigContent.php
+++ b/src/Plugin/designs/content/TwigContent.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\designs\Plugin\designs\content;
 
+use Drupal\Core\Plugin\Context\ContextDefinitionInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Render\Markup;
@@ -22,7 +23,7 @@ class TwigContent extends DesignContentBase implements ContainerFactoryPluginInt
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -35,7 +36,7 @@ class TwigContent extends DesignContentBase implements ContainerFactoryPluginInt
    *   The plugin identifier.
    * @param array $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, RendererInterface $renderer) {
@@ -69,7 +70,7 @@ class TwigContent extends DesignContentBase implements ContainerFactoryPluginInt
    */
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
     $contexts = [];
-    /** @var \Drupal\Core\Plugin\Context\ContextDefinitionInterface $context */
+    /** @var ContextDefinitionInterface $context */
     foreach ($form['#design_contexts'] as $id => $context) {
       $contexts[] = $this->t('@label: %id', [
         '@label' => $context->getLabel() ?: $id,
diff --git a/src/Plugin/designs/setting/SelectSetting.php b/src/Plugin/designs/setting/SelectSetting.php
index 957bad8..e8ee6ec 100644
--- a/src/Plugin/designs/setting/SelectSetting.php
+++ b/src/Plugin/designs/setting/SelectSetting.php
@@ -36,7 +36,7 @@ class SelectSetting extends DesignSettingBase implements ContainerFactoryPluginI
   /**
    * Get the options available for the select.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup[]
+   * @return TranslatableMarkup[]
    *   The labels.
    */
   protected function getOptions() {
diff --git a/tests/modules/designs_test/src/Controller/TestController.php b/tests/modules/designs_test/src/Controller/TestController.php
index 3e6051f..01e0782 100644
--- a/tests/modules/designs_test/src/Controller/TestController.php
+++ b/tests/modules/designs_test/src/Controller/TestController.php
@@ -16,14 +16,14 @@ class TestController extends ControllerBase implements ContainerInjectionInterfa
   /**
    * The design source manager.
    *
-   * @var \Drupal\designs\DesignSourceManagerInterface
+   * @var DesignSourceManagerInterface
    */
   protected $sourceManager;
 
   /**
    * TestController constructor.
    *
-   * @param \Drupal\designs\DesignSourceManagerInterface $sourceManager
+   * @param DesignSourceManagerInterface $sourceManager
    *   The source manager.
    */
   public function __construct(DesignSourceManagerInterface $sourceManager) {
diff --git a/tests/modules/designs_test/src/Form/TestForm.php b/tests/modules/designs_test/src/Form/TestForm.php
index 2c11a8b..6fe8bf6 100644
--- a/tests/modules/designs_test/src/Form/TestForm.php
+++ b/tests/modules/designs_test/src/Form/TestForm.php
@@ -19,21 +19,21 @@ class TestForm extends FormBase {
   /**
    * The design manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $designManager;
 
   /**
    * The design setting manager.
    *
-   * @var \Drupal\designs\DesignSettingManagerInterface
+   * @var DesignSettingManagerInterface
    */
   protected $settingManager;
 
   /**
    * The design content manager.
    *
-   * @var \Drupal\designs\DesignContentManagerInterface
+   * @var DesignContentManagerInterface
    */
   protected $contentManager;
 
@@ -114,7 +114,7 @@ class TestForm extends FormBase {
   public function validateForm(array &$form, FormStateInterface $form_state) {
     $element = NestedArray::getValue($form, $form['#test_array_parents']);
 
-    /** @var \Drupal\designs\Form\PluginForm $form */
+    /** @var PluginForm $form */
     $plugin_form = $element['#form_handler'];
     $plugin_form->validateForm($element, $form_state);
   }
@@ -125,7 +125,7 @@ class TestForm extends FormBase {
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $element = NestedArray::getValue($form, $form['#test_array_parents']);
 
-    /** @var \Drupal\designs\Form\PluginForm $form */
+    /** @var PluginForm $form */
     $plugin_form = $element['#form_handler'];
     $plugin_form->submitForm($element, $form_state);
 
diff --git a/tests/src/Functional/FormTest.php b/tests/src/Functional/FormTest.php
index 5dec178..9666922 100644
--- a/tests/src/Functional/FormTest.php
+++ b/tests/src/Functional/FormTest.php
@@ -32,7 +32,7 @@ class FormTest extends BrowserTestBase {
   /**
    * The design source manager.
    *
-   * @var \Drupal\designs\DesignSourceManagerInterface
+   * @var DesignSourceManagerInterface
    */
   protected $sourceManager;
 
diff --git a/tests/src/Kernel/DesignConfigSchemaTest.php b/tests/src/Kernel/DesignConfigSchemaTest.php
index eae0c50..980fe8d 100644
--- a/tests/src/Kernel/DesignConfigSchemaTest.php
+++ b/tests/src/Kernel/DesignConfigSchemaTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\designs\Kernel;
 
+use Drupal\Core\Config\TypedConfigManagerInterface;
+use Drupal\designs\DesignManagerInterface;
+use Drupal\designs\DesignSettingManagerInterface;
+use Drupal\designs\DesignContentManagerInterface;
 use Drupal\Tests\SchemaCheckTestTrait;
 use Drupal\KernelTests\KernelTestBase;
 
@@ -25,28 +29,28 @@ class DesignConfigSchemaTest extends KernelTestBase {
   /**
    * The typed config manager.
    *
-   * @var \Drupal\Core\Config\TypedConfigManagerInterface
+   * @var TypedConfigManagerInterface
    */
   protected $typedConfig;
 
   /**
    * The designs manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $designsManager;
 
   /**
    * The design settings manager.
    *
-   * @var \Drupal\designs\DesignSettingManagerInterface
+   * @var DesignSettingManagerInterface
    */
   protected $settingsManager;
 
   /**
    * The design content manager.
    *
-   * @var \Drupal\designs\DesignContentManagerInterface
+   * @var DesignContentManagerInterface
    */
   protected $contentManager;
 
diff --git a/tests/src/Unit/DesignManagerTest.php b/tests/src/Unit/DesignManagerTest.php
index da329df..2d11b70 100644
--- a/tests/src/Unit/DesignManagerTest.php
+++ b/tests/src/Unit/DesignManagerTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\designs\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\designs\DesignManagerInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ -27,45 +29,46 @@ use Prophecy\Argument;
  */
 class DesignManagerTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The theme extension list.
    *
-   * @var \Drupal\Core\Extension\ThemeExtensionList
+   * @var ThemeExtensionList
    */
   protected $themeList;
 
   /**
    * The theme manager.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;
 
   /**
    * Cache backend instance.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;
 
   /**
    * The design plugin manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $designPluginManager;
 
   /**
    * The design source manager.
    *
-   * @var \Drupal\designs\DesignSourceManagerInterface
+   * @var DesignSourceManagerInterface
    */
   protected $designSourceManager;
 
