diff --git a/src/Annotation/LauncherPlugin.php b/src/Annotation/LauncherPlugin.php
index 6af0ace..d970bdd 100644
--- a/src/Annotation/LauncherPlugin.php
+++ b/src/Annotation/LauncherPlugin.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ultimate_cron\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -25,7 +26,7 @@ class LauncherPlugin extends Plugin {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $title;
 
@@ -34,7 +35,7 @@ class LauncherPlugin extends Plugin {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $description;
 
diff --git a/src/Annotation/LoggerPlugin.php b/src/Annotation/LoggerPlugin.php
index 85e1649..d683531 100644
--- a/src/Annotation/LoggerPlugin.php
+++ b/src/Annotation/LoggerPlugin.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ultimate_cron\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -25,7 +26,7 @@ class LoggerPlugin extends Plugin {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $title;
 
@@ -34,7 +35,7 @@ class LoggerPlugin extends Plugin {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $description;
 
diff --git a/src/Annotation/SchedulerPlugin.php b/src/Annotation/SchedulerPlugin.php
index 5642953..b24e1eb 100644
--- a/src/Annotation/SchedulerPlugin.php
+++ b/src/Annotation/SchedulerPlugin.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ultimate_cron\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -25,7 +26,7 @@ class SchedulerPlugin extends Plugin {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $title;
 
@@ -34,7 +35,7 @@ class SchedulerPlugin extends Plugin {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $description;
 
diff --git a/src/Commands/UltimateCronCommands.php b/src/Commands/UltimateCronCommands.php
index 243c5c2..8f7dc7a 100644
--- a/src/Commands/UltimateCronCommands.php
+++ b/src/Commands/UltimateCronCommands.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\ultimate_cron\Commands;
 
+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\ultimate_cron\Logger\LogEntry;
 use Consolidation\OutputFormatters\StructuredData\RowsOfFields;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\ultimate_cron\CronPlugin;
@@ -18,14 +20,14 @@ class UltimateCronCommands extends DrushCommands {
   /**
    * Logger object.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
   /**
    * Constructs an UltimateCronCommands object.
    *
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger
+   * @param LoggerChannelFactoryInterface $logger
    *   Logger factory object.
    */
   public function __construct(LoggerChannelFactoryInterface $logger) {
@@ -54,7 +56,7 @@ class UltimateCronCommands extends DrushCommands {
       throw new \Exception(dt('No job specified?'));
     }
 
-    /** @var \Drupal\ultimate_cron\Entity\CronJob $job */
+    /** @var CronJob $job */
     $job = CronJob::load($name);
 
     if (!$job) {
@@ -79,7 +81,7 @@ class UltimateCronCommands extends DrushCommands {
     $lock_id = $job->isLocked();
     $log_entries = $job->getLogEntries(ULTIMATE_CRON_LOG_TYPE_ALL, $limit);
 
-    /** @var \Drupal\ultimate_cron\Logger\LogEntry $log_entry */
+    /** @var LogEntry $log_entry */
     foreach ($log_entries as $log_entry) {
       $progress = '';
       if ($log_entry->lid && $lock_id && $log_entry->lid === $lock_id) {
@@ -177,7 +179,7 @@ class UltimateCronCommands extends DrushCommands {
 
     $print_legend = FALSE;
 
-    /** @var \Drupal\ultimate_cron\Entity\CronJob $job */
+    /** @var CronJob $job */
     foreach (CronJob::loadMultiple() as $name => $job) {
       if ($modules && !in_array($job->getModule(), $modules)) {
         continue;
@@ -322,7 +324,7 @@ class UltimateCronCommands extends DrushCommands {
       if (!$options['all']) {
         throw new \Exception(dt('No job specified?'));
       }
-      /** @var \Drupal\ultimate_cron\Entity\CronJob $job */
+      /** @var CronJob $job */
       foreach (CronJob::loadMultiple() as $job) {
         $job->enable()->save();
       }
@@ -387,7 +389,7 @@ class UltimateCronCommands extends DrushCommands {
       if (!$options['all']) {
         throw new \Exception(dt('No job specified?'));
       }
-      /** @var \Drupal\ultimate_cron\Entity\CronJob $job */
+      /** @var CronJob $job */
       foreach (CronJob::loadMultiple() as $job) {
         if ($job->isLocked()) {
           $job->unlock();
@@ -396,7 +398,7 @@ class UltimateCronCommands extends DrushCommands {
       return;
     }
 
-    /** @var \Drupal\ultimate_cron\Entity\CronJob $job */
+    /** @var CronJob $job */
     $job = CronJob::load($name);
     if (!$job) {
       throw new \Exception(dt('@name not found', ['@name' => $name]));
diff --git a/src/Controller/JobController.php b/src/Controller/JobController.php
index 2ce189d..6ae3207 100644
--- a/src/Controller/JobController.php
+++ b/src/Controller/JobController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ultimate_cron\Controller;
 
+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Logger\RfcLogLevel;
 use Drupal\ultimate_cron\Entity\CronJob;
@@ -14,10 +15,10 @@ class JobController extends ControllerBase {
   /**
    * Runs a single cron job.
    *
-   * @param \Drupal\ultimate_cron\Entity\CronJob $ultimate_cron_job
+   * @param CronJob $ultimate_cron_job
    *   The cron job which will be run.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Redirects to the job listing after running a job.
    */
   public function runCronJob(CronJob $ultimate_cron_job) {
@@ -43,7 +44,7 @@ class JobController extends ControllerBase {
   /**
    * Displays a detailed cron job logs table.
    *
-   * @param \Drupal\ultimate_cron\Entity\CronJob $ultimate_cron_job
+   * @param CronJob $ultimate_cron_job
    *   The cron job which will be run.
    *
    * @return array
@@ -88,10 +89,10 @@ class JobController extends ControllerBase {
   /**
    * Unlocks a single cron job.
    *
-   * @param \Drupal\ultimate_cron\Entity\CronJob $ultimate_cron_job
+   * @param CronJob $ultimate_cron_job
    *   The cron job which will be unlocked.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Redirects to the job listing after running a job.
    */
   public function unlockCronJob(CronJob $ultimate_cron_job) {
diff --git a/src/CronJobDiscovery.php b/src/CronJobDiscovery.php
index 0f8a0d6..ced4d0f 100644
--- a/src/CronJobDiscovery.php
+++ b/src/CronJobDiscovery.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ultimate_cron;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Extension\ModuleExtensionList;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -14,35 +15,35 @@ use Drupal\ultimate_cron\Entity\CronJob;
 class CronJobDiscovery {
 
   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
-   * @var \Drupal\Core\Queue\QueueWorkerManagerInterface
+   * @var QueueWorkerManagerInterface
    */
   protected $queueManager;
 
   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The module extension list service.
    *
-   * @var \Drupal\Core\Extension\ModuleExtensionList
+   * @var ModuleExtensionList
    */
   protected $moduleExtensionList;
 
   /**
    * CronJobDiscovery constructor.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Queue\QueueWorkerManagerInterface $queue_manager
+   * @param QueueWorkerManagerInterface $queue_manager
    *   The queue manager.
-   * @param \Drupal\Core\Extension\ModuleExtensionList $module_extension_list
+   * @param ModuleExtensionList $module_extension_list
    *   The module extension list service.
    */
   public function __construct(ModuleHandlerInterface $module_handler, QueueWorkerManagerInterface $queue_manager, ConfigFactoryInterface $config_factory, ModuleExtensionList $module_extension_list) {
@@ -124,7 +125,7 @@ class CronJobDiscovery {
    * @param string $id
    *   The default cron job ID.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The default job title.
    */
   protected function getJobTitle($id) {
diff --git a/src/CronJobInterface.php b/src/CronJobInterface.php
index 7dc4dae..4849868 100644
--- a/src/CronJobInterface.php
+++ b/src/CronJobInterface.php
@@ -268,7 +268,7 @@ interface CronJobInterface extends ConfigEntityInterface {
    * @param string $init_message
    *   Initial message for the log.
    *
-   * @return \Drupal\ultimate_cron\Logger\LogEntry
+   * @return LogEntry
    *   The log object.
    */
   public function startLog($lock_id, $init_message = '', $log_type = ULTIMATE_CRON_LOG_TYPE_NORMAL);
@@ -348,7 +348,7 @@ interface CronJobInterface extends ConfigEntityInterface {
    * @param string $name
    *   (optional) The name of the plugin.
    *
-   * @return \Drupal\ultimate_cron\CronPlugin
+   * @return CronPlugin
    *   Plugin instance of the specified type.
    */
   public function getPlugin($plugin_type, $name = NULL);
diff --git a/src/CronJobListBuilder.php b/src/CronJobListBuilder.php
index e6e9c72..8d4f993 100644
--- a/src/CronJobListBuilder.php
+++ b/src/CronJobListBuilder.php
@@ -37,8 +37,8 @@ class CronJobListBuilder extends DraggableListBuilder {
    */
   public function buildRow(EntityInterface $entity) {
     /* @var \Drupal\ultimate_cron\CronJobInterface $entity */
-    $icon = drupal_get_path('module', 'ultimate_cron') . '/icons/hourglass.png';
-    $behind_icon = ['#prefix' => ' ', '#theme' => 'image', '#uri' => file_create_url($icon), '#title' => t('Job is behind schedule!')];
+    $icon = \Drupal::service('extension.list.module')->getPath('ultimate_cron') . '/icons/hourglass.png';
+    $behind_icon = ['#prefix' => ' ', '#theme' => 'image', '#uri' => \Drupal::service('file_url_generator')->generateAbsoluteString($icon), '#title' => t('Job is behind schedule!')];
 
     $log_entry = $entity->loadLatestLogEntry();
     $row['label'] = $entity->label();
diff --git a/src/CronPluginMultiple.php b/src/CronPluginMultiple.php
index ca8f9d5..c94a8f8 100644
--- a/src/CronPluginMultiple.php
+++ b/src/CronPluginMultiple.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\ultimate_cron;
 
-class CronPluginMultiple extends \Drupal\ultimate_cron\CronPlugin {
+class CronPluginMultiple extends CronPlugin {
   static public $multiple = TRUE;
 
   /**
diff --git a/src/Entity/CronJob.php b/src/Entity/CronJob.php
index 837e877..8f93231 100644
--- a/src/Entity/CronJob.php
+++ b/src/Entity/CronJob.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\ultimate_cron\Entity;
 
+use Drupal\ultimate_cron\CronPlugin;
+use Drupal\Core\DependencyInjection\ClassResolverInterface;
+use Drupal\Core\Extension\ModuleExtensionList;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Logger\RfcLogLevel;
@@ -117,21 +120,21 @@ class CronJob extends ConfigEntityBase implements CronJobInterface {
   protected $logger = array('id' => 'database');
 
   /**
-   * @var \Drupal\ultimate_cron\CronPlugin
+   * @var CronPlugin
    */
   protected $plugins = [];
 
   /**
    * The class resolver.
    *
-   * @var \Drupal\Core\DependencyInjection\ClassResolverInterface
+   * @var ClassResolverInterface
    */
   protected $classResolver;
 
   /**
    * The module extension list service.
    *
-   * @var \Drupal\Core\Extension\ModuleExtensionList
+   * @var ModuleExtensionList
    */
   protected $moduleExtensionList;
 
diff --git a/src/Form/CronJobForm.php b/src/Form/CronJobForm.php
index 9819bd1..68c393f 100644
--- a/src/Form/CronJobForm.php
+++ b/src/Form/CronJobForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ultimate_cron\Form;
 
+use Drupal\ultimate_cron\CronJobInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\ultimate_cron\CronPlugin;
@@ -15,7 +16,7 @@ class CronJobForm extends EntityForm {
   protected $selected_option;
 
   /**
-   * @var \Drupal\ultimate_cron\CronJobInterface
+   * @var CronJobInterface
    */
   protected $entity;
 
diff --git a/src/Form/GeneralSettingsForm.php b/src/Form/GeneralSettingsForm.php
index b1f24b1..1e9385f 100644
--- a/src/Form/GeneralSettingsForm.php
+++ b/src/Form/GeneralSettingsForm.php
@@ -1,6 +1,7 @@
 <?php
 
 namespace Drupal\ultimate_cron\Form;
+use Drupal\Core\CronInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Datetime\DateFormatter;
 use Drupal\Core\Form\ConfigFormBase;
@@ -16,32 +17,32 @@ class GeneralSettingsForm extends ConfigFormBase {
   /**
    * Stores the state storage service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * The cron service.
    *
-   * @var \Drupal\Core\CronInterface
+   * @var CronInterface
    */
   protected $cron;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;
 
   /**
    * Constructs a GeneralSettingsForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state key value store.
-   * @param \Drupal\Core\Datetime\DateFormatter $date_formatter
+   * @param DateFormatter $date_formatter
    *   The date formatter service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, StateInterface $state, DateFormatter $date_formatter) {
diff --git a/src/Form/SchedulerSettingsForm.php b/src/Form/SchedulerSettingsForm.php
index c9bdc71..e4e5053 100644
--- a/src/Form/SchedulerSettingsForm.php
+++ b/src/Form/SchedulerSettingsForm.php
@@ -69,7 +69,7 @@ class SchedulerSettingsForm extends ConfigFormBase {
       '#collapsed' => TRUE,
     );
     $form['crontab']['rules_help']['info'] = array(
-      '#markup' => file_get_contents(drupal_get_path('module', 'ultimate_cron') . '/help/rules.html'),
+      '#markup' => file_get_contents(\Drupal::service('extension.list.module')->getPath('ultimate_cron') . '/help/rules.html'),
     );
 
     // Settings for Simple scheduler.
diff --git a/src/Launcher/LauncherBase.php b/src/Launcher/LauncherBase.php
index f83f695..743570e 100644
--- a/src/Launcher/LauncherBase.php
+++ b/src/Launcher/LauncherBase.php
@@ -67,7 +67,7 @@ abstract class LauncherBase extends CronPlugin implements LauncherInterface {
    * {@inheritdoc}
    */
   public function formatRunning(CronJobInterface $job) {
-    $file = drupal_get_path('module', 'ultimate_cron') . '/icons/hourglass.png';
+    $file = \Drupal::service('extension.list.module')->getPath('ultimate_cron') . '/icons/hourglass.png';
     $status = ['#theme' => 'image', '#uri' => $file];
     $title = t('running');
     return array($status, $title);
@@ -77,7 +77,7 @@ abstract class LauncherBase extends CronPlugin implements LauncherInterface {
    * {@inheritdoc}
    */
   public function formatUnfinished(CronJobInterface $job) {
-    $file = drupal_get_path('module', 'ultimate_cron') . '/icons/lock_open.png';
+    $file = \Drupal::service('extension.list.module')->getPath('ultimate_cron') . '/icons/lock_open.png';
     $status = ['#theme' => 'image', '#uri' => $file];
     $title = t('unfinished but not locked?');
     return array($status, $title);
diff --git a/src/Launcher/LauncherInterface.php b/src/Launcher/LauncherInterface.php
index ab2b10e..6e153a2 100644
--- a/src/Launcher/LauncherInterface.php
+++ b/src/Launcher/LauncherInterface.php
@@ -24,7 +24,7 @@ interface LauncherInterface extends PluginInspectionInterface, ConfigurableInter
   /**
    * Lock job.
    *
-   * @param \Drupal\ultimate_cron\CronJobInterface $job
+   * @param CronJobInterface $job
    *   The job to lock.
    *
    * @return string|FALSE
@@ -48,7 +48,7 @@ interface LauncherInterface extends PluginInspectionInterface, ConfigurableInter
   /**
    * Check if a job is locked.
    *
-   * @param \Drupal\ultimate_cron\CronJobInterface $job
+   * @param CronJobInterface $job
    *   The job to check.
    *
    * @return string
@@ -59,7 +59,7 @@ interface LauncherInterface extends PluginInspectionInterface, ConfigurableInter
   /**
    * Launch job.
    *
-   * @param \Drupal\ultimate_cron\CronJobInterface $job
+   * @param CronJobInterface $job
    *   The job to launch.
    *
    * @return bool
@@ -73,7 +73,7 @@ interface LauncherInterface extends PluginInspectionInterface, ConfigurableInter
    * Each launcher should implement an optimized version of this method
    * if possible.
    *
-   * @param \Drupal\ultimate_cron\CronJobInterface[] $jobs
+   * @param CronJobInterface[] $jobs
    *   Array of UltimateCronJobs to check.
    *
    * @return array
@@ -84,7 +84,7 @@ interface LauncherInterface extends PluginInspectionInterface, ConfigurableInter
   /**
    * Default implementation of jobs launcher.
    *
-   * @param \Drupal\ultimate_cron\CronJobInterface[] $jobs
+   * @param CronJobInterface[] $jobs
    *   Array of UltimateCronJobs to launch.
    */
   public function launchJobs(array $jobs);
@@ -92,7 +92,7 @@ interface LauncherInterface extends PluginInspectionInterface, ConfigurableInter
   /**
    * Format running state.
    *
-   * @param \Drupal\ultimate_cron\CronJobInterface $job
+   * @param CronJobInterface $job
    *   The running job to format.
    */
   public function formatRunning(CronJobInterface $job);
@@ -100,7 +100,7 @@ interface LauncherInterface extends PluginInspectionInterface, ConfigurableInter
   /**
    * Format unfinished state.
    *
-   * @param \Drupal\ultimate_cron\CronJobInterface $job
+   * @param CronJobInterface $job
    *   The running job to format.
    */
   public function formatUnfinished(CronJobInterface $job);
@@ -108,7 +108,7 @@ interface LauncherInterface extends PluginInspectionInterface, ConfigurableInter
   /**
    * Default implementation of formatProgress().
    *
-   * @param \Drupal\ultimate_cron\CronJobInterface $job
+   * @param CronJobInterface $job
    *   Job to format progress for.
    * @param string $progress
    *   Progress value for the Job.
@@ -118,7 +118,7 @@ interface LauncherInterface extends PluginInspectionInterface, ConfigurableInter
   /**
    * Default implementation of initializeProgress().
    *
-   * @param \Drupal\ultimate_cron\CronJobInterface $job
+   * @param CronJobInterface $job
    *   Job to initialize progress for.
    */
   public function initializeProgress(CronJobInterface $job);
@@ -126,7 +126,7 @@ interface LauncherInterface extends PluginInspectionInterface, ConfigurableInter
   /**
    * Default implementation of finishProgress().
    *
-   * @param \Drupal\ultimate_cron\CronJobInterface $job
+   * @param CronJobInterface $job
    *   Job to finish progress for.
    */
   public function finishProgress(CronJobInterface $job);
@@ -134,7 +134,7 @@ interface LauncherInterface extends PluginInspectionInterface, ConfigurableInter
   /**
    * Default implementation of getProgress().
    *
-   * @param \Drupal\ultimate_cron\CronJobInterface $job
+   * @param CronJobInterface $job
    *   Job to get progress for.
    *
    * @return float
@@ -145,7 +145,7 @@ interface LauncherInterface extends PluginInspectionInterface, ConfigurableInter
   /**
    * Default implementation of getProgressMultiple().
    *
-   * @param \Drupal\ultimate_cron\CronJobInterface[] $jobs
+   * @param CronJobInterface[] $jobs
    *   Jobs to get progresses for, keyed by job name.
    *
    * @return array
@@ -156,7 +156,7 @@ interface LauncherInterface extends PluginInspectionInterface, ConfigurableInter
   /**
    * Default implementation of setProgress().
    *
-   * @param \Drupal\ultimate_cron\CronJobInterface $job
+   * @param CronJobInterface $job
    *   Job to set progress for.
    * @param float $progress
    *   Progress (0-1).
diff --git a/src/Launcher/LauncherManager.php b/src/Launcher/LauncherManager.php
index bea3cb4..43eacbf 100644
--- a/src/Launcher/LauncherManager.php
+++ b/src/Launcher/LauncherManager.php
@@ -17,9 +17,9 @@ class LauncherManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Logger/LogEntry.php b/src/Logger/LogEntry.php
index b7e6d46..e5c7059 100644
--- a/src/Logger/LogEntry.php
+++ b/src/Logger/LogEntry.php
@@ -47,7 +47,7 @@ class LogEntry {
    *
    * @param string $name
    *   Name of log.
-   * @param \Drupal\ultimate_cron\Logger\LoggerBase $logger
+   * @param LoggerBase $logger
    *   A logger object.
    */
   public function __construct($name, $logger, $log_type = ULTIMATE_CRON_LOG_TYPE_NORMAL) {
diff --git a/src/Logger/LoggerInterface.php b/src/Logger/LoggerInterface.php
index b567f0a..607ec27 100644
--- a/src/Logger/LoggerInterface.php
+++ b/src/Logger/LoggerInterface.php
@@ -68,7 +68,7 @@ interface LoggerInterface extends PluginInspectionInterface, ConfigurableInterfa
    * @param string $lock_id
    *   Specific lock id.
    *
-   * @return \Drupal\ultimate_cron\Logger\LogEntry
+   * @return LogEntry
    *   Log entry
    */
   public function load($name, $lock_id = NULL, array $log_types = [ULTIMATE_CRON_LOG_TYPE_NORMAL]);
@@ -91,7 +91,7 @@ interface LoggerInterface extends PluginInspectionInterface, ConfigurableInterfa
   /**
    * Saves a log entry.
    *
-   * @param \Drupal\ultimate_cron\Logger\LogEntry $log_entry
+   * @param LogEntry $log_entry
    *   The log entry to save.
    */
   public function save(LogEntry $log_entry);
diff --git a/src/Logger/LoggerManager.php b/src/Logger/LoggerManager.php
index 0ac89d9..566e90a 100644
--- a/src/Logger/LoggerManager.php
+++ b/src/Logger/LoggerManager.php
@@ -18,9 +18,9 @@ class LoggerManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Logger/WatchdogLogger.php b/src/Logger/WatchdogLogger.php
index 56d69ec..185ad3f 100644
--- a/src/Logger/WatchdogLogger.php
+++ b/src/Logger/WatchdogLogger.php
@@ -18,14 +18,14 @@ class WatchdogLogger implements PsrLoggerInterface {
   /**
    * Log entries for currently running cron jobs.
    *
-   * @var \Drupal\ultimate_cron\Logger\LogEntry[]
+   * @var LogEntry[]
    */
   protected $logEntries = [];
 
   /**
    * The message's placeholders parser.
    *
-   * @var \Drupal\Core\Logger\LogMessageParserInterface
+   * @var LogMessageParserInterface
    */
   protected $parser;
 
@@ -39,7 +39,7 @@ class WatchdogLogger implements PsrLoggerInterface {
   /**
    * Constructs a WatchdogLogger object.
    *
-   * @param \Drupal\Core\Logger\LogMessageParserInterface $parser
+   * @param LogMessageParserInterface $parser
    *   The parser to use when extracting message variables.
    */
   public function __construct(LogMessageParserInterface $parser) {
@@ -94,7 +94,7 @@ class WatchdogLogger implements PsrLoggerInterface {
    *
    * Effectively disables the shutdown function for the given log entry.
    *
-   * @param \Drupal\ultimate_cron\Logger\LogEntry $log_entry
+   * @param LogEntry $log_entry
    *   The log entry.
    */
   public function unCatchMessages(LogEntry $log_entry) {
diff --git a/src/Plugin/ultimate_cron/Logger/CacheLogger.php b/src/Plugin/ultimate_cron/Logger/CacheLogger.php
index a97070c..3c510f9 100644
--- a/src/Plugin/ultimate_cron/Logger/CacheLogger.php
+++ b/src/Plugin/ultimate_cron/Logger/CacheLogger.php
@@ -22,7 +22,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class CacheLogger extends LoggerBase implements ContainerFactoryPluginInterface {
 
   /**
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;
 
@@ -116,7 +116,7 @@ class CacheLogger extends LoggerBase implements ContainerFactoryPluginInterface
 
     $settings = $this->getConfiguration();
 
-    $expire = $settings['timeout'] != Cache::PERMANENT ? REQUEST_TIME + $settings['timeout'] : $settings['timeout'];
+    $expire = $settings['timeout'] != Cache::PERMANENT ? \Drupal::time()->getRequestTime() + $settings['timeout'] : $settings['timeout'];
 
     $this->cache->set('uc-name:' . $log_entry->name, $log_entry->lid, $expire);
     $this->cache->set('uc-lid:' . $log_entry->lid, $log_entry->getData(), $expire);
diff --git a/src/Plugin/ultimate_cron/Logger/DatabaseLogger.php b/src/Plugin/ultimate_cron/Logger/DatabaseLogger.php
index dbd5dfb..fb4978f 100644
--- a/src/Plugin/ultimate_cron/Logger/DatabaseLogger.php
+++ b/src/Plugin/ultimate_cron/Logger/DatabaseLogger.php
@@ -39,7 +39,7 @@ class DatabaseLogger extends LoggerBase implements PluginCleanupInterface, Conta
   const MAX_TEXT_LENGTH = 5000;
 
   /**
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
diff --git a/src/Plugin/ultimate_cron/Scheduler/Crontab.php b/src/Plugin/ultimate_cron/Scheduler/Crontab.php
index 1795ad5..7592b1b 100644
--- a/src/Plugin/ultimate_cron/Scheduler/Crontab.php
+++ b/src/Plugin/ultimate_cron/Scheduler/Crontab.php
@@ -41,7 +41,7 @@ class Crontab extends SchedulerBase {
   public function formatLabelVerbose(CronJob $job) {
     $parsed = '';
     $next_schedule = NULL;
-    $time = REQUEST_TIME;
+    $time = \Drupal::time()->getRequestTime();
     $skew = $this->getSkew($job);
     foreach ($this->configuration['rules'] as $rule) {
       $cron = CronRule::factory($rule, $time, $skew);
@@ -83,7 +83,7 @@ class Crontab extends SchedulerBase {
     );
 
     $form['rules_help']['info'] = array(
-      '#markup' => file_get_contents(drupal_get_path('module', 'ultimate_cron') . '/help/rules.html'),
+      '#markup' => file_get_contents(\Drupal::service('extension.list.module')->getPath('ultimate_cron') . '/help/rules.html'),
     );
 
     $form['catch_up'] = array(
@@ -179,7 +179,7 @@ class Crontab extends SchedulerBase {
       $time = $cron->getNextSchedule();
       $next_schedule = is_null($next_schedule) || $time < $next_schedule ? $time : $next_schedule;
     }
-    $behind = REQUEST_TIME - $next_schedule;
+    $behind = \Drupal::time()->getRequestTime() - $next_schedule;
 
     return $behind > $this->configuration['catch_up'] ? $behind : FALSE;
   }
diff --git a/src/Plugin/ultimate_cron/Scheduler/SchedulerBase.php b/src/Plugin/ultimate_cron/Scheduler/SchedulerBase.php
index 8411c6e..908013b 100644
--- a/src/Plugin/ultimate_cron/Scheduler/SchedulerBase.php
+++ b/src/Plugin/ultimate_cron/Scheduler/SchedulerBase.php
@@ -36,7 +36,7 @@ abstract class SchedulerBase extends CronPlugin implements SchedulerInterface {
   /**
    * Check if job is behind schedule.
    *
-   * @param \Drupal\ultimate_cron\Entity\CronJob $job
+   * @param CronJob $job
    *   The job to check schedule for.
    *
    * @return bool|int
diff --git a/src/Progress/Progress.php b/src/Progress/Progress.php
index 859a370..918aab7 100644
--- a/src/Progress/Progress.php
+++ b/src/Progress/Progress.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ultimate_cron\Progress;
 
+use Drupal\Core\KeyValueStore\KeyValueStoreInterface;
 use Drupal\Core\KeyValueStore\KeyValueFactory;
 use Drupal\Core\KeyValueStore\KeyValueFactoryInterface;
 
@@ -10,7 +11,7 @@ class Progress implements ProgressInterface {
   protected $interval = 1;
 
   /**
-   * @var \Drupal\Core\KeyValueStore\KeyValueStoreInterface
+   * @var KeyValueStoreInterface
    */
   protected $keyValue;
 
diff --git a/src/ProxyClass/UltimateCron.php b/src/ProxyClass/UltimateCron.php
index ec959a6..0605ed3 100644
--- a/src/ProxyClass/UltimateCron.php
+++ b/src/ProxyClass/UltimateCron.php
@@ -2,15 +2,18 @@
 
 namespace Drupal\ultimate_cron\ProxyClass {
 
+    use Drupal\Core\CronInterface;
+    use Drupal\Core\DependencyInjection\DependencySerializationTrait;
+    use Symfony\Component\DependencyInjection\ContainerInterface;
     /**
      * Provides a proxy class for \Drupal\ultimate_cron\UltimateCron.
      *
      * @see \Drupal\Component\ProxyBuilder
      */
-    class UltimateCron implements \Drupal\Core\CronInterface
+    class UltimateCron implements CronInterface
     {
 
-        use \Drupal\Core\DependencyInjection\DependencySerializationTrait;
+        use DependencySerializationTrait;
 
         /**
          * The id of the original proxied service.
@@ -29,19 +32,19 @@ namespace Drupal\ultimate_cron\ProxyClass {
         /**
          * The service container.
          *
-         * @var \Symfony\Component\DependencyInjection\ContainerInterface
+         * @var ContainerInterface
          */
         protected $container;
 
         /**
          * Constructs a ProxyClass Drupal proxy object.
          *
-         * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+         * @param ContainerInterface $container
          *   The container.
          * @param string $drupal_proxy_original_service_id
          *   The service ID of the original service.
          */
-        public function __construct(\Symfony\Component\DependencyInjection\ContainerInterface $container, $drupal_proxy_original_service_id)
+        public function __construct(ContainerInterface $container, $drupal_proxy_original_service_id)
         {
             $this->container = $container;
             $this->drupalProxyOriginalServiceId = $drupal_proxy_original_service_id;
diff --git a/src/QueueWorker.php b/src/QueueWorker.php
index d5a819e..1c56148 100644
--- a/src/QueueWorker.php
+++ b/src/QueueWorker.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\ultimate_cron;
 
+use Drupal\Core\Queue\QueueWorkerInterface;
+use Drupal\Core\Queue\QueueInterface;
 use Drupal\Core\Queue\QueueWorkerManager;
 use Drupal\Core\Queue\QueueFactory;
 use Drupal\Core\Config\ConfigFactory;
@@ -16,30 +18,30 @@ class QueueWorker {
   /**
    * Queue worker plugin manager
    *
-   * @var Drupal\Core\Queue\QueueWorkerManager
+   * @var QueueWorkerManager
    */
   protected $pluginManagerQueueWorker;
 
   /**
    * Queue Factory.
    *
-   * @var Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queue;
 
   /**
    * Config Factory.
    *
-   * @var Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;
 
   /**
    * Constructs a QueueWorker object.
    *
-   * @param \Drupal\Core\Queue\QueueWorkerManager $plugin_manager_queue_worker
-   * @param \Drupal\Core\Queue\QueueFactory $queue
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param QueueWorkerManager $plugin_manager_queue_worker
+   * @param QueueFactory $queue
+   * @param ConfigFactory $config_factory
    */
   public function __construct(QueueWorkerManager $plugin_manager_queue_worker, QueueFactory $queue, ConfigFactory $config_factory) {
     $this->pluginManagerQueueWorker = $plugin_manager_queue_worker;
@@ -64,11 +66,11 @@ class QueueWorker {
     // an existing queue.
     $queue_factory->get($queue_name)->createQueue();
 
-    /** @var \Drupal\Core\Queue\QueueWorkerInterface $queue_worker */
+    /** @var QueueWorkerInterface $queue_worker */
     $queue_worker = $queue_manager->createInstance($queue_name);
     $end = microtime(TRUE) + (isset($info['cron']['time']) ? $info['cron']['time'] : $config->get('queue.timeouts.time'));
 
-    /** @var \Drupal\Core\Queue\QueueInterface $queue */
+    /** @var QueueInterface $queue */
     $queue = $queue_factory->get($queue_name);
     $items = 0;
     while (microtime(TRUE) < $end) {
diff --git a/src/Scheduler/SchedulerInterface.php b/src/Scheduler/SchedulerInterface.php
index 6b878c9..daf5a6b 100644
--- a/src/Scheduler/SchedulerInterface.php
+++ b/src/Scheduler/SchedulerInterface.php
@@ -22,7 +22,7 @@ interface SchedulerInterface extends PluginInspectionInterface, ConfigurableInte
   /**
    * Label for schedule.
    *
-   * @param \Drupal\ultimate_cron\Entity\CronJob $job
+   * @param CronJob $job
    *   The job whose label should be formatted.
    */
   public function formatLabel(CronJob $job);
@@ -30,7 +30,7 @@ interface SchedulerInterface extends PluginInspectionInterface, ConfigurableInte
   /**
    * Label for schedule.
    *
-   * @param \Drupal\ultimate_cron\Entity\CronJob $job
+   * @param CronJob $job
    *   The job whose label should be formatted.
    */
   public function formatLabelVerbose(CronJob $job);
@@ -38,7 +38,7 @@ interface SchedulerInterface extends PluginInspectionInterface, ConfigurableInte
   /**
    * Check job schedule.
    *
-   * @param \Drupal\ultimate_cron\Entity\CronJob $job
+   * @param CronJob $job
    *   The job to check schedule for.
    *
    * @return bool
@@ -49,7 +49,7 @@ interface SchedulerInterface extends PluginInspectionInterface, ConfigurableInte
   /**
    * Check if job is behind schedule.
    *
-   * @param \Drupal\ultimate_cron\Entity\CronJob $job
+   * @param CronJob $job
    *   The job to check schedule for.
    *
    * @return bool|int
diff --git a/src/Scheduler/SchedulerManager.php b/src/Scheduler/SchedulerManager.php
index a115234..9bdd4e4 100644
--- a/src/Scheduler/SchedulerManager.php
+++ b/src/Scheduler/SchedulerManager.php
@@ -20,9 +20,9 @@ class SchedulerManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Signal/SignalCache.php b/src/Signal/SignalCache.php
index 6542f02..5f6c53f 100644
--- a/src/Signal/SignalCache.php
+++ b/src/Signal/SignalCache.php
@@ -9,12 +9,12 @@ use Drupal\ultimate_cron\Signal\SignalInterface;
 class SignalCache implements SignalInterface {
 
   /**
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   public $cacheBackend;
 
   /**
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   public $lockBackend;
 
diff --git a/src/TaggedSettings.php b/src/TaggedSettings.php
index 4cae649..db90283 100644
--- a/src/TaggedSettings.php
+++ b/src/TaggedSettings.php
@@ -15,6 +15,6 @@ class TaggedSettings extends Settings {
    * Only valid for jobs tagged with the proper tag.
    */
   public function isValid($job = NULL) {
-    return $job ? in_array($this->name, $job->hook['tags']) : \Drupal\ultimate_cron\parent::isValid();
+    return $job ? in_array($this->name, $job->hook['tags']) : parent::isValid();
   }
 }
diff --git a/src/UltimateCron.php b/src/UltimateCron.php
index c801062..433fff2 100644
--- a/src/UltimateCron.php
+++ b/src/UltimateCron.php
@@ -19,14 +19,14 @@ use Psr\Log\LoggerInterface;
 class UltimateCron extends Cron {
 
   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Sets the config factory for ultimate cron service.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function setConfigFactory(ConfigFactoryInterface $config_factory) {
diff --git a/src/UltimateCronDatabaseFactory.php b/src/UltimateCronDatabaseFactory.php
index 7dad5ff..f1740b7 100644
--- a/src/UltimateCronDatabaseFactory.php
+++ b/src/UltimateCronDatabaseFactory.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ultimate_cron;
 
+use Drupal\Core\Database\Connection;
 use Drupal\Core\Database\Database;
 
 /**
@@ -11,7 +12,7 @@ class UltimateCronDatabaseFactory {
   /**
    * Factory method that returns a Connection object with the correct target.
    *
-   * @return \Drupal\Core\Database\Connection
+   * @return Connection
    *   The connection object.
    */
   public static function getConnection() {
