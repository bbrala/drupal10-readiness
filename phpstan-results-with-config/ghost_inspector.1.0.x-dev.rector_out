modules/contrib/ghost_inspector/ghost_inspector.install
modules/contrib/ghost_inspector/ghost_inspector.module
modules/contrib/ghost_inspector/src/Controller/DefaultController.php
modules/contrib/ghost_inspector/src/Entity/GhostInspectorEntity.php
modules/contrib/ghost_inspector/src/Entity/GhostInspectorEntityInterface.php
modules/contrib/ghost_inspector/src/Form/GhostInspectorEntityDeleteForm.php
modules/contrib/ghost_inspector/src/Form/GhostInspectorEntityForm.php
modules/contrib/ghost_inspector/src/GhostInspectorEntityHtmlRouteProvider.php
modules/contrib/ghost_inspector/src/GhostInspectorEntityListBuilder.php
modules/contrib/ghost_inspector/src/GhostInspectorEntityViewBuilder.php
modules/contrib/ghost_inspector/src/GhostInspectorService.php

6 files with changes
====================

1) modules/contrib/ghost_inspector/src/GhostInspectorService.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * GuzzleHttp\Client definition.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/ghost_inspector/src/GhostInspectorEntityListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ghost_inspector;

+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use DateTime;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
@@ @@
   /**
    * The config factory that knows what is overwritten.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Constructs a new EntityListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, ConfigFactoryInterface $config_factory) {
@@ @@
    * {@inheritdoc}
    */
   public function getDefaultOperations(EntityInterface $entity) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+    /** @var ConfigEntityInterface $entity */
     $operations = parent::getDefaultOperations($entity);

     if (!$entity->get('status') && $entity->hasLinkTemplate('enable') && strpos($entity->get('name'), "API Call Failed") === FALSE) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/ghost_inspector/src/GhostInspectorEntityHtmlRouteProvider.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/ghost_inspector/src/Form/GhostInspectorEntityForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ghost_inspector\Form;

+use Drupal\ghost_inspector\Entity\GhostInspectorEntityInterface;
+use Drupal\Core\Entity\EntityStorageException;
+use GuzzleHttp\Exception\GuzzleException;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Extension\ThemeHandlerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The drupal state.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * Drupal\Core\Extension\ThemeHandler definition.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
   /**
    * Constructs a new class instance.
    *
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The drupal state.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $themeHandler
+   * @param ThemeHandlerInterface $themeHandler
    *   The theme handler.
    */
   public function __construct(StateInterface $state, ThemeHandlerInterface $themeHandler) {
@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\ghost_inspector\Entity\GhostInspectorEntityInterface $ghost_inspector */
+    /** @var GhostInspectorEntityInterface $ghost_inspector */
     $ghost_inspector = $this->entity;

     // Basics API setup.
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \GuzzleHttp\Exception\GuzzleException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityStorageException
+   * @throws GuzzleException
+   * @throws EntityMalformedException
    */
   public function save(array $form, FormStateInterface $form_state) {
     $ghost_inspector = $this->entity;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/ghost_inspector/src/Controller/DefaultController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ghost_inspector\Controller;

+use Symfony\Component\HttpFoundation\RedirectResponse;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Controller\ControllerBase;


@@ @@
    * @param string $ghost_inspector
    *   The ghost inspector name.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function enableEntity($ghost_inspector) {
     $entity = $this->entityTypeManager()->getStorage('ghost_inspector')->load($ghost_inspector);
@@ @@
    * @param string $ghost_inspector
    *   The ghost inspector name.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function disableEntity($ghost_inspector) {
     $entity = $this->entityTypeManager()->getStorage('ghost_inspector')->load($ghost_inspector);
@@ @@
    * @param string $ghost_inspector
    *   The ghost inspector name.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function syncEntity($ghost_inspector) {
     $entity = $this->entityTypeManager()->getStorage('ghost_inspector')->load($ghost_inspector);
@@ @@
    * @param string $ghost_inspector
    *   The ghost inspector name.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function executeSuiteEntity($ghost_inspector) {
     $entity = $this->entityTypeManager()->getStorage('ghost_inspector')->load($ghost_inspector);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/ghost_inspector/ghost_inspector.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Session\UserSession;
+use Drupal\Core\Render\Markup;
+use GuzzleHttp\Exception\GuzzleException;
 /**
  * @file
  * Ghost Inspector module functions.
@@ @@
 function ghost_inspector_cron() {
   // Retrieve the account switcher service. Ideally you should inject the account_switcher service into your class.
   $accountSwitcher = Drupal::service('account_switcher');
-  $accountSwitcher->switchTo(new \Drupal\Core\Session\UserSession(['uid' => 1]));
+  $accountSwitcher->switchTo(new UserSession(['uid' => 1]));

   // Pull all new suite test results.
   $ghost_inspector_entity = \Drupal::entityTypeManager()->getStorage('ghost_inspector')->loadMultiple();
@@ @@
         $video_markup .= '</video>';
         $video_markup .= '<a href="' . $variables['output'] . '" target="_blank">Alternative link to view video.</a>';

-        $variables['output'] = Drupal\Core\Render\Markup::create($video_markup);
+        $variables['output'] = Markup::create($video_markup);
         break;
     }
   }
@@ @@
  *
  * @return string
  *   Return json string.
- * @throws \GuzzleHttp\Exception\GuzzleException
+ * @throws GuzzleException
  */
 function getSuite(EntityInterface $entity): string
 {
@@ @@
   $saveComments = $paragraphsComments;
   //Get paragraphs comments ids from Drupal.
   foreach ( $paragraphsComments as $element ) {
-    $p = \Drupal\paragraphs\Entity\Paragraph::load( $element['target_id'] );
+    $p = Paragraph::load( $element['target_id'] );
     $oldCommments[] = $p->field_id->getValue()[0]['value'];
   }
   $resultNewComments = array_diff($newComments, $oldCommments);
@@ @@
   // Remove paragraph.
   if (count($paragraphsComments) > 0 ) {
     foreach ($paragraphsComments as $key => $element) {
-      $p = \Drupal\paragraphs\Entity\Paragraph::load($element['target_id']);
+      $p = Paragraph::load($element['target_id']);
       if (isset($p->field_id)) {
         $field_id = $p->field_id->getValue();
         if (in_array($field_id[0]['value'], $resultRemovedComments)) {
@@ @@
     ->execute();

   if (!empty($nids)) {
-    $nodes = \Drupal\node\Entity\Node::loadMultiple($nids);
+    $nodes = Node::loadMultiple($nids);
     foreach ($nodes as $node) {

       $date_execution_finished = new DateTime(getDatetime($node->field_date_execution_finished->getValue(), 'date'));
@@ @@
  *
  * @return array
  *   Return array.
- * @throws \GuzzleHttp\Exception\GuzzleException
+ * @throws GuzzleException
  */
 function setListResultsTestsInSuiteRun($suite_result_id, EntityInterface $entity): array
 {
@@ @@
   if (strpos($body, '[test-results-table]') !== false) {
     $element = views_embed_view('ghost_inspector_suite_dashboard', 'block_5', $field_id);
     $test_results_table = \Drupal::service('renderer')->renderRoot($element);
-    $body = str_replace("[test-results-table]", render($test_results_table), $body);
+    $body = str_replace("[test-results-table]", \Drupal::service('renderer')->render($test_results_table), $body);
   }

   return $body;
@@ @@
  *
  * @param EntityInterface $entity
  * @throws EntityStorageException
- * @throws \GuzzleHttp\Exception\GuzzleException
+ * @throws GuzzleException
  */
 function getListResultsOnSuite(EntityInterface $entity)
 {
@@ @@
     $nids = \Drupal::entityQuery('node')->condition('type', 'ghost_inspector')->execute();

     if (count($nids) > 0) {
-      $nodes = \Drupal\node\Entity\Node::loadMultiple($nids);
+      $nodes = Node::loadMultiple($nids);

       $suite_name_options = [];
       $year_options = [];
@@ @@
       ->execute();

     if (count($nids) > 0) {
-      $nodes = \Drupal\node\Entity\Node::loadMultiple($nids);
+      $nodes = Node::loadMultiple($nids);

       // Distinct List of nodes - Node will be the last run per suite.
       $last_results = [];
@@ @@
  *
  * @return string
  *   Return json string.
- * @throws \GuzzleHttp\Exception\GuzzleException
+ * @throws GuzzleException
  */
 function executeSuite(EntityInterface $entity): string
 {
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector


 [OK] 6 files have been changed by Rector                                       

