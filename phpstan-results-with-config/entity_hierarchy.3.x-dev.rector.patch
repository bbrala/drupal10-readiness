diff --git a/entity_hierarchy.module b/entity_hierarchy.module
index 711b789..929eb27 100644
--- a/entity_hierarchy.module
+++ b/entity_hierarchy.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\EntityTypeInterface;
 /**
  * @file
  * A module to make entities hierarchical.
@@ -36,7 +37,7 @@ function entity_hierarchy_help($route_name, RouteMatchInterface $route_match) {
  * @see \Drupal\entity_hierarchy\Form\HierarchyChildrenForm
  */
 function entity_hierarchy_entity_type_build(array &$entity_types) {
-  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
+  /** @var EntityTypeInterface[] $entity_types */
   // Adds the entity_hierarchy_reorder link template.
   foreach ($entity_types as $entity_type_id => $entity_type) {
 
@@ -103,7 +104,7 @@ function entity_hierarchy_form_alter(&$form, FormStateInterface $form_state, $fo
     }
   }
   if ($formObject instanceof ContentEntityForm) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $formObject->getEntity();
     $parentFields = \Drupal::service('entity_field.manager')->getFieldMapByFieldType('entity_reference_hierarchy');
     if (isset($parentFields[$entity->getEntityTypeId()])) {
diff --git a/entity_hierarchy.views.inc b/entity_hierarchy.views.inc
index f7d9c5c..7c04a20 100644
--- a/entity_hierarchy.views.inc
+++ b/entity_hierarchy.views.inc
@@ -1,5 +1,10 @@
 <?php
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\EntityFieldManager;
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\views\EntityViewsDataInterface;
+use Drupal\Core\Field\FieldDefinitionInterface;
 /**
  * @file
  * Views hooks for entity_hierarchy_views.
@@ -14,24 +19,24 @@ function entity_hierarchy_views_data() {
   // Adds the relationship from the entity-base table to any tree tables that
   // exist by way of entity reference hierarchy fields.
   $data = [];
-  /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager */
+  /** @var EntityTypeManagerInterface $entityTypeManager */
   $entityTypeManager = \Drupal::service('entity_type.manager');
-  /** @var \Drupal\Core\Entity\EntityFieldManager $fieldManager */
+  /** @var EntityFieldManager $fieldManager */
   $fieldManager = \Drupal::service('entity_field.manager');
   foreach ($fieldManager->getFieldMapByFieldType('entity_reference_hierarchy') as $entity_type_id => $fields) {
-    /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+    /** @var EntityTypeInterface $entity_type */
     $entity_type = $entityTypeManager->getDefinition($entity_type_id);
     if (!$entityTypeManager->hasHandler($entity_type_id, 'views_data')) {
       // If there is no existing views integration, we cannot do anything here.
       continue;
     }
-    /** @var \Drupal\views\EntityViewsDataInterface $views_handler */
+    /** @var EntityViewsDataInterface $views_handler */
     $views_handler = $entityTypeManager->getHandler($entity_type_id, 'views_data');
     foreach ($fields as $field_name => $field_info) {
       $table_name = \Drupal::service('entity_hierarchy.nested_set_storage_factory')
         ->getTableName($field_name, $entity_type_id, FALSE);
       $sample_bundle = reset($field_info['bundles']);
-      /** @var Drupal\Core\Field\FieldDefinitionInterface $sample_field */
+      /** @var FieldDefinitionInterface $sample_field */
       $sample_field = $fieldManager->getFieldDefinitions($entity_type_id, $sample_bundle)[$field_name];
       $data[$table_name]['table']['group'] = t('Entity hierarchy: @entity_type - @field_name', [
         '@entity_type' => $entity_type->getLabel(),
diff --git a/modules/entity_hierarchy_breadcrumb/src/HierarchyBasedBreadcrumbBuilder.php b/modules/entity_hierarchy_breadcrumb/src/HierarchyBasedBreadcrumbBuilder.php
index 689b53a..a6a1ff2 100644
--- a/modules/entity_hierarchy_breadcrumb/src/HierarchyBasedBreadcrumbBuilder.php
+++ b/modules/entity_hierarchy_breadcrumb/src/HierarchyBasedBreadcrumbBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_hierarchy_breadcrumb;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Breadcrumb\Breadcrumb;
 use Drupal\Core\Breadcrumb\BreadcrumbBuilderInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ -23,50 +24,50 @@ class HierarchyBasedBreadcrumbBuilder implements BreadcrumbBuilderInterface {
   /**
    * The nested set storage factory service.
    *
-   * @var \Drupal\entity_hierarchy\Storage\NestedSetStorageFactory
+   * @var NestedSetStorageFactory
    */
   protected $storageFactory;
 
   /**
    * The node key factory service.
    *
-   * @var \Drupal\entity_hierarchy\Storage\NestedSetNodeKeyFactory
+   * @var NestedSetNodeKeyFactory
    */
   protected $nodeKeyFactory;
 
   /**
    * The entity tree node mapper service.
    *
-   * @var \Drupal\entity_hierarchy\Storage\EntityTreeNodeMapperInterface
+   * @var EntityTreeNodeMapperInterface
    */
   protected $mapper;
 
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The admin context service.
    *
-   * @var \Drupal\Core\Routing\AdminContext
+   * @var AdminContext
    */
   protected $adminContext;
 
   /**
    * HierarchyBasedBreadcrumbBuilder constructor.
    *
-   * @param \Drupal\entity_hierarchy\Storage\NestedSetStorageFactory $storage_factory
+   * @param NestedSetStorageFactory $storage_factory
    *   The nested set storage factory service.
-   * @param \Drupal\entity_hierarchy\Storage\NestedSetNodeKeyFactory $node_key_factory
+   * @param NestedSetNodeKeyFactory $node_key_factory
    *   The node key factory service.
-   * @param \Drupal\entity_hierarchy\Storage\EntityTreeNodeMapperInterface $mapper
+   * @param EntityTreeNodeMapperInterface $mapper
    *   The entity tree node mapper service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager service.
-   * @param \Drupal\Core\Routing\AdminContext $admin_context
+   * @param AdminContext $admin_context
    *   The admin context service.
    */
   public function __construct(
@@ -104,7 +105,7 @@ class HierarchyBasedBreadcrumbBuilder implements BreadcrumbBuilderInterface {
   public function build(RouteMatchInterface $route_match) {
     $breadcrumb = new Breadcrumb();
     $breadcrumb->addCacheContexts(['route']);
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $route_entity */
+    /** @var ContentEntityInterface $route_entity */
     $route_entity = $this->getEntityFromRouteMatch($route_match);
 
     $entity_type = $route_entity->getEntityTypeId();
@@ -137,7 +138,7 @@ class HierarchyBasedBreadcrumbBuilder implements BreadcrumbBuilderInterface {
   /**
    * Return the entity type id from a route object.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route object.
    *
    * @return string|null
@@ -158,10 +159,10 @@ class HierarchyBasedBreadcrumbBuilder implements BreadcrumbBuilderInterface {
   /**
    * Returns an entity parameter from a route match object.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The entity, or null if it's not an entity route.
    */
   protected function getEntityFromRouteMatch(RouteMatchInterface $route_match) {
@@ -181,7 +182,7 @@ class HierarchyBasedBreadcrumbBuilder implements BreadcrumbBuilderInterface {
   /**
    * Gets the field name to use for the hierarchy.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    *
    * @return string|null
diff --git a/modules/entity_hierarchy_breadcrumb/tests/src/Functional/BreadcrumbFunctionalTest.php b/modules/entity_hierarchy_breadcrumb/tests/src/Functional/BreadcrumbFunctionalTest.php
index f1876c5..f736693 100644
--- a/modules/entity_hierarchy_breadcrumb/tests/src/Functional/BreadcrumbFunctionalTest.php
+++ b/modules/entity_hierarchy_breadcrumb/tests/src/Functional/BreadcrumbFunctionalTest.php
@@ -42,7 +42,7 @@ class BreadcrumbFunctionalTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->setupEntityHierarchyField(static::ENTITY_TYPE, static::ENTITY_TYPE, static::FIELD_NAME);
     $this->additionalSetup();
diff --git a/modules/entity_hierarchy_breadcrumb/tests/src/Kernel/BreadcrumbTest.php b/modules/entity_hierarchy_breadcrumb/tests/src/Kernel/BreadcrumbTest.php
index 3c8c24d..4b6d6bc 100644
--- a/modules/entity_hierarchy_breadcrumb/tests/src/Kernel/BreadcrumbTest.php
+++ b/modules/entity_hierarchy_breadcrumb/tests/src/Kernel/BreadcrumbTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\entity_hierarchy_breadcrumb\Kernel;
 
+use Drupal\Core\Breadcrumb\BreadcrumbBuilderInterface;
 use Drupal\Core\Routing\RouteMatch;
 use Drupal\entity_test\Entity\EntityTestBundle;
 use Drupal\Tests\entity_hierarchy\Kernel\EntityHierarchyKernelTestBase;
@@ -29,21 +30,21 @@ class BreadcrumbTest extends EntityHierarchyKernelTestBase {
   /**
    * A route to test with.
    *
-   * @var \Symfony\Component\Routing\Route
+   * @var Route
    */
   protected $testRoute;
 
   /**
    * The breadcrumb manager service.
    *
-   * @var \Drupal\Core\Breadcrumb\BreadcrumbBuilderInterface
+   * @var BreadcrumbBuilderInterface
    */
   protected $breadcrumbBuilder;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $user = $this->createUser([], ['view test entity']);
     $this->container->get('account_switcher')->switchTo($user);
diff --git a/modules/entity_hierarchy_microsite/entity_hierarchy_microsite.api.php b/modules/entity_hierarchy_microsite/entity_hierarchy_microsite.api.php
index 033003d..96cb66a 100644
--- a/modules/entity_hierarchy_microsite/entity_hierarchy_microsite.api.php
+++ b/modules/entity_hierarchy_microsite/entity_hierarchy_microsite.api.php
@@ -1,21 +1,24 @@
 <?php
 
+use Drupal\Core\Url;
+use Drupal\entity_hierarchy_microsite\Entity\MicrositeMenuItemOverrideInterface;
+use Drupal\entity_hierarchy_microsite\Plugin\Menu\MicrositeMenuItem;
+use Drupal\node\NodeInterface;
 /**
  * @file
  * Contains documentation for module APIs.
  */
-
 /**
  * Allows modules to alter the URL generated from a microsite menu override.
  *
- * @param \Drupal\Core\Url $url
+ * @param Url $url
  *   The default URL.
- * @param \Drupal\entity_hierarchy_microsite\Entity\MicrositeMenuItemOverrideInterface $override
+ * @param MicrositeMenuItemOverrideInterface $override
  *   The override entity.
- * @param \Drupal\entity_hierarchy_microsite\Plugin\Menu\MicrositeMenuItem $menu_link
+ * @param MicrositeMenuItem $menu_link
  *   The menu link plugin instance.
  */
-function hook_entity_hierarchy_microsite_menu_item_url_alter(\Drupal\Core\Url $url, \Drupal\entity_hierarchy_microsite\Entity\MicrositeMenuItemOverrideInterface $override, \Drupal\entity_hierarchy_microsite\Plugin\Menu\MicrositeMenuItem $menu_link) {
+function hook_entity_hierarchy_microsite_menu_item_url_alter(Url $url, MicrositeMenuItemOverrideInterface $override, MicrositeMenuItem $menu_link) {
   $attributes = $url->getOption('attributes');
   $attributes['class'] = [$override->some_field->value];
   $url->setOption('attributes', $attributes);
@@ -36,7 +39,7 @@ function hook_entity_hierarchy_microsite_links_alter($links) {
     }
     if (empty($link['options']['entity']) ||
       (!$node = $link['options']['entity']) ||
-      !$node instanceof \Drupal\node\NodeInterface ||
+      !$node instanceof NodeInterface ||
       $node->bundle() !== 'test') {
       continue;
     }
diff --git a/modules/entity_hierarchy_microsite/src/Cache/MicrositeCacheContext.php b/modules/entity_hierarchy_microsite/src/Cache/MicrositeCacheContext.php
index 78f1958..109acfa 100644
--- a/modules/entity_hierarchy_microsite/src/Cache/MicrositeCacheContext.php
+++ b/modules/entity_hierarchy_microsite/src/Cache/MicrositeCacheContext.php
@@ -19,32 +19,32 @@ class MicrositeCacheContext implements CacheContextInterface {
   /**
    * Lookup.
    *
-   * @var \Drupal\entity_hierarchy_microsite\ChildOfMicrositeLookupInterface
+   * @var ChildOfMicrositeLookupInterface
    */
   private $childOfMicrositeLookup;
 
   /**
    * Route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   private $routeMatch;
 
   /**
    * Parent candidate.
    *
-   * @var \Drupal\entity_hierarchy\Information\ParentCandidateInterface
+   * @var ParentCandidateInterface
    */
   private $parentCandidate;
 
   /**
    * Constructs a new MicrositeCacheContext.
    *
-   * @param \Drupal\entity_hierarchy_microsite\ChildOfMicrositeLookupInterface $childOfMicrositeLookup
+   * @param ChildOfMicrositeLookupInterface $childOfMicrositeLookup
    *   Lookup.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $routeMatch
+   * @param RouteMatchInterface $routeMatch
    *   Route match.
-   * @param \Drupal\entity_hierarchy\Information\ParentCandidateInterface $parentCandidate
+   * @param ParentCandidateInterface $parentCandidate
    *   Parent candidate.
    */
   public function __construct(ChildOfMicrositeLookupInterface $childOfMicrositeLookup, RouteMatchInterface $routeMatch, ParentCandidateInterface $parentCandidate) {
diff --git a/modules/entity_hierarchy_microsite/src/ChildOfMicrositeLookup.php b/modules/entity_hierarchy_microsite/src/ChildOfMicrositeLookup.php
index bb2f217..a67e1be 100644
--- a/modules/entity_hierarchy_microsite/src/ChildOfMicrositeLookup.php
+++ b/modules/entity_hierarchy_microsite/src/ChildOfMicrositeLookup.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_hierarchy_microsite;
 
+use PNX\NestedSet\NestedSetInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\entity_hierarchy\Storage\NestedSetNodeKeyFactory;
@@ -17,41 +18,41 @@ class ChildOfMicrositeLookup implements ChildOfMicrositeLookupInterface {
   /**
    * Entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Nested set storage.
    *
-   * @var \Drupal\entity_hierarchy\Storage\NestedSetStorageFactory
+   * @var NestedSetStorageFactory
    */
   protected $nestedSetStorageFactory;
 
   /**
    * Nested set node key factory.
    *
-   * @var \Drupal\entity_hierarchy\Storage\NestedSetNodeKeyFactory
+   * @var NestedSetNodeKeyFactory
    */
   protected $nodeKeyFactory;
 
   /**
    * Constructs a new ChildOfMicrositeLookup.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   Field manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
-   * @param \Drupal\entity_hierarchy\Storage\NestedSetStorageFactory $nestedSetStorageFactory
+   * @param NestedSetStorageFactory $nestedSetStorageFactory
    *   Storage factory.
-   * @param \Drupal\entity_hierarchy\Storage\NestedSetNodeKeyFactory $nodeKeyFactory
+   * @param NestedSetNodeKeyFactory $nodeKeyFactory
    *   Key factory.
    */
   public function __construct(EntityFieldManagerInterface $entityFieldManager, EntityTypeManagerInterface $entityTypeManager, NestedSetStorageFactory $nestedSetStorageFactory, NestedSetNodeKeyFactory $nodeKeyFactory) {
@@ -69,7 +70,7 @@ class ChildOfMicrositeLookup implements ChildOfMicrositeLookupInterface {
     if ($node->hasField($field_name) &&
     !$node->get($field_name)->isEmpty()) {
       $key = $this->nodeKeyFactory->fromEntity($node);
-      /** @var \PNX\NestedSet\NestedSetInterface $nestedSetStorage */
+      /** @var NestedSetInterface $nestedSetStorage */
       $nestedSetStorage = $this->nestedSetStorageFactory->get($field_name, 'node');
       $ids = array_map(function (Node $treeNode) {
         return $treeNode->getId();
diff --git a/modules/entity_hierarchy_microsite/src/ChildOfMicrositeLookupInterface.php b/modules/entity_hierarchy_microsite/src/ChildOfMicrositeLookupInterface.php
index 1d366ba..8931618 100644
--- a/modules/entity_hierarchy_microsite/src/ChildOfMicrositeLookupInterface.php
+++ b/modules/entity_hierarchy_microsite/src/ChildOfMicrositeLookupInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_hierarchy_microsite;
 
+use Drupal\entity_hierarchy_microsite\Entity\MicrositeInterface;
 use Drupal\node\NodeInterface;
 
 /**
@@ -12,12 +13,12 @@ interface ChildOfMicrositeLookupInterface {
   /**
    * Gets microsites the node belongs to.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   Node.
    * @param string $field_name
    *   Field name.
    *
-   * @return \Drupal\entity_hierarchy_microsite\Entity\MicrositeInterface[]
+   * @return MicrositeInterface[]
    *   Microsites.
    */
   public function findMicrositesForNodeAndField(NodeInterface $node, $field_name);
diff --git a/modules/entity_hierarchy_microsite/src/Controller/AddMenuOverride.php b/modules/entity_hierarchy_microsite/src/Controller/AddMenuOverride.php
index cff3739..f48458c 100644
--- a/modules/entity_hierarchy_microsite/src/Controller/AddMenuOverride.php
+++ b/modules/entity_hierarchy_microsite/src/Controller/AddMenuOverride.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_hierarchy_microsite\Controller;
 
+use Drupal\entity_hierarchy_microsite\Plugin\Menu\MicrositeMenuItem;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityFormBuilderInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -18,32 +19,32 @@ class AddMenuOverride implements ContainerInjectionInterface {
   /**
    * Form builder.
    *
-   * @var \Drupal\Core\Entity\EntityFormBuilderInterface
+   * @var EntityFormBuilderInterface
    */
   private $entityFormBuilder;
 
   /**
    * Menu link manager.
    *
-   * @var \Drupal\Core\Menu\MenuLinkManagerInterface
+   * @var MenuLinkManagerInterface
    */
   private $menuLinkManager;
 
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
    * Constructs a new AddMenuOverride.
    *
-   * @param \Drupal\Core\Entity\EntityFormBuilderInterface $entityFormBuilder
+   * @param EntityFormBuilderInterface $entityFormBuilder
    *   Entity form builder.
-   * @param \Drupal\Core\Menu\MenuLinkManagerInterface $menuLinkManager
+   * @param MenuLinkManagerInterface $menuLinkManager
    *   Menu link manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
    */
   public function __construct(EntityFormBuilderInterface $entityFormBuilder, MenuLinkManagerInterface $menuLinkManager, EntityTypeManagerInterface $entityTypeManager) {
@@ -83,7 +84,7 @@ class AddMenuOverride implements ContainerInjectionInterface {
     ])) {
       throw new NotFoundHttpException();
     }
-    /** @var \Drupal\entity_hierarchy_microsite\Plugin\Menu\MicrositeMenuItem $instance */
+    /** @var MicrositeMenuItem $instance */
     $instance = $this->menuLinkManager->createInstance($plugin_id);
     $override = $storage->create([
       'target' => $target,
@@ -111,7 +112,7 @@ class AddMenuOverride implements ContainerInjectionInterface {
       return '';
     }
 
-    /** @var \Drupal\entity_hierarchy_microsite\Plugin\Menu\MicrositeMenuItem $instance */
+    /** @var MicrositeMenuItem $instance */
     $instance = $this->menuLinkManager->createInstance($plugin_id);
     return new TranslatableMarkup('Add an override for @label', [
       '@label' => $instance->getTitle(),
diff --git a/modules/entity_hierarchy_microsite/src/Entity/MicrositeInterface.php b/modules/entity_hierarchy_microsite/src/Entity/MicrositeInterface.php
index f866efa..38d5c80 100644
--- a/modules/entity_hierarchy_microsite/src/Entity/MicrositeInterface.php
+++ b/modules/entity_hierarchy_microsite/src/Entity/MicrositeInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_hierarchy_microsite\Entity;
 
+use Drupal\node\NodeInterface;
+use Drupal\media\MediaInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 
 /**
@@ -12,7 +14,7 @@ interface MicrositeInterface extends ContentEntityInterface {
   /**
    * Gets the home page of the microsite.
    *
-   * @return \Drupal\node\NodeInterface|null
+   * @return NodeInterface|null
    *   Home page node, or null if none exists.
    */
   public function getHome();
@@ -20,7 +22,7 @@ interface MicrositeInterface extends ContentEntityInterface {
   /**
    * Gets the logo of the microsite.
    *
-   * @return \Drupal\media\MediaInterface|null
+   * @return MediaInterface|null
    *   Logo media, or null if none exists.
    */
   public function getLogo();
diff --git a/modules/entity_hierarchy_microsite/src/EntityHooks.php b/modules/entity_hierarchy_microsite/src/EntityHooks.php
index 0d1b948..3591011 100644
--- a/modules/entity_hierarchy_microsite/src/EntityHooks.php
+++ b/modules/entity_hierarchy_microsite/src/EntityHooks.php
@@ -27,50 +27,50 @@ class EntityHooks implements ContainerInjectionInterface {
   /**
    * Menu link tree.
    *
-   * @var \Drupal\Core\Menu\MenuLinkTreeInterface
+   * @var MenuLinkTreeInterface
    */
   protected $menuLinkTree;
 
   /**
    * Menu link manager.
    *
-   * @var \Drupal\Core\Menu\MenuLinkManagerInterface
+   * @var MenuLinkManagerInterface
    */
   protected $menuLinkManager;
 
   /**
    * Parent candidate.
    *
-   * @var \Drupal\entity_hierarchy\Information\ParentCandidateInterface
+   * @var ParentCandidateInterface
    */
   protected $parentCandidate;
 
   /**
    * Microsite lookup.
    *
-   * @var \Drupal\entity_hierarchy_microsite\ChildOfMicrositeLookupInterface
+   * @var ChildOfMicrositeLookupInterface
    */
   protected $childOfMicrositeLookup;
 
   /**
    * Discovery.
    *
-   * @var \Drupal\entity_hierarchy_microsite\MicrositeMenuLinkDiscoveryInterface
+   * @var MicrositeMenuLinkDiscoveryInterface
    */
   protected $menuLinkDiscovery;
 
   /**
    * Constructs a new EntityHooks.
    *
-   * @param \Drupal\Core\Menu\MenuLinkManagerInterface $menuLinkManager
+   * @param MenuLinkManagerInterface $menuLinkManager
    *   Menu link manager.
-   * @param \Drupal\entity_hierarchy\Information\ParentCandidateInterface $parentCandidate
+   * @param ParentCandidateInterface $parentCandidate
    *   Parent candidate.
-   * @param \Drupal\entity_hierarchy_microsite\ChildOfMicrositeLookupInterface $childOfMicrositeLookup
+   * @param ChildOfMicrositeLookupInterface $childOfMicrositeLookup
    *   Microsite lookup.
-   * @param \Drupal\entity_hierarchy_microsite\MicrositeMenuLinkDiscoveryInterface $menuLinkDiscovery
+   * @param MicrositeMenuLinkDiscoveryInterface $menuLinkDiscovery
    *   Discovery.
-   * @param \Drupal\Core\Menu\MenuLinkTreeInterface $menuLinkTree
+   * @param MenuLinkTreeInterface $menuLinkTree
    *   Menu link tree.
    */
   public function __construct(MenuLinkManagerInterface $menuLinkManager, ParentCandidateInterface $parentCandidate, ChildOfMicrositeLookupInterface $childOfMicrositeLookup, MicrositeMenuLinkDiscoveryInterface $menuLinkDiscovery, MenuLinkTreeInterface $menuLinkTree) {
@@ -97,7 +97,7 @@ class EntityHooks implements ContainerInjectionInterface {
   /**
    * React to node insert.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   Node.
    */
   public function onNodeInsert(NodeInterface $node) {
@@ -111,12 +111,12 @@ class EntityHooks implements ContainerInjectionInterface {
   /**
    * Gets the possible microsites for a particular field and node.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   Node.
    * @param string $field
    *   Field name.
    *
-   * @return \Drupal\entity_hierarchy_microsite\Entity\MicrositeInterface[]
+   * @return MicrositeInterface[]
    *   Microsites the node belongs to with the given field.
    */
   protected function getMicrositesForNodeAndField(NodeInterface $node, string $field) : array {
@@ -132,7 +132,7 @@ class EntityHooks implements ContainerInjectionInterface {
   /**
    * React to node update.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   Node update.
    */
   public function onNodeUpdate(NodeInterface $node) {
@@ -162,7 +162,7 @@ class EntityHooks implements ContainerInjectionInterface {
   /**
    * React to node delete.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   Node update.
    */
   public function onNodeDelete(NodeInterface $node) {
@@ -180,7 +180,7 @@ class EntityHooks implements ContainerInjectionInterface {
   /**
    * React to microsite being saved.
    *
-   * @param \Drupal\entity_hierarchy_microsite\Entity\MicrositeInterface $microsite
+   * @param MicrositeInterface $microsite
    *   Microsite.
    * @param bool $isUpdate
    *   TRUE if is an update.
@@ -192,7 +192,7 @@ class EntityHooks implements ContainerInjectionInterface {
   /**
    * Updates menu for the microsite.
    *
-   * @param \Drupal\entity_hierarchy_microsite\Entity\MicrositeInterface $microsite
+   * @param MicrositeInterface $microsite
    *   Microsite.
    */
   protected function updateMenuForMicrosite(MicrositeInterface $microsite) {
@@ -216,7 +216,7 @@ class EntityHooks implements ContainerInjectionInterface {
   /**
    * Post save handler for overrides.
    *
-   * @param \Drupal\entity_hierarchy_microsite\Entity\MicrositeMenuItemOverrideInterface $item
+   * @param MicrositeMenuItemOverrideInterface $item
    *   Item saved.
    * @param bool $update
    *   TRUE if is an update.
@@ -253,7 +253,7 @@ class EntityHooks implements ContainerInjectionInterface {
   /**
    * Post delete handler for microsite items.
    *
-   * @param \Drupal\entity_hierarchy_microsite\Entity\MicrositeMenuItemOverrideInterface[] $items
+   * @param MicrositeMenuItemOverrideInterface[] $items
    *   Deleted items.
    */
   public function onMenuOverridePostDelete(array $items) {
diff --git a/modules/entity_hierarchy_microsite/src/Form/MicrositeMenuItemForm.php b/modules/entity_hierarchy_microsite/src/Form/MicrositeMenuItemForm.php
index 68340ce..b7bf7bf 100644
--- a/modules/entity_hierarchy_microsite/src/Form/MicrositeMenuItemForm.php
+++ b/modules/entity_hierarchy_microsite/src/Form/MicrositeMenuItemForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_hierarchy_microsite\Form;
 
+use Drupal\entity_hierarchy_microsite\Entity\MicrositeMenuItemOverrideInterface;
+use Drupal\menu_link_content\MenuLinkContentInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ -20,36 +22,36 @@ class MicrositeMenuItemForm extends ContentEntityForm {
   /**
    * The content menu link.
    *
-   * @var \Drupal\entity_hierarchy_microsite\Entity\MicrositeMenuItemOverrideInterface
+   * @var MicrositeMenuItemOverrideInterface
    */
   protected $entity;
 
   /**
    * The parent form selector service.
    *
-   * @var \Drupal\Core\Menu\MenuParentFormSelectorInterface
+   * @var MenuParentFormSelectorInterface
    */
   protected $menuParentSelector;
 
   /**
    * The path validator.
    *
-   * @var \Drupal\Core\Path\PathValidatorInterface
+   * @var PathValidatorInterface
    */
   protected $pathValidator;
 
   /**
    * Constructs a MenuLinkContentForm object.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Drupal\Core\Menu\MenuParentFormSelectorInterface $menu_parent_selector
+   * @param MenuParentFormSelectorInterface $menu_parent_selector
    *   The menu parent form selector service.
-   * @param \Drupal\Core\Path\PathValidatorInterface $path_validator
+   * @param PathValidatorInterface $path_validator
    *   The path validator.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, MenuParentFormSelectorInterface $menu_parent_selector, PathValidatorInterface $path_validator, EntityTypeBundleInfoInterface $entity_type_bundle_info, TimeInterface $time) {
@@ -104,7 +106,7 @@ class MicrositeMenuItemForm extends ContentEntityForm {
    * {@inheritdoc}
    */
   public function buildEntity(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\menu_link_content\MenuLinkContentInterface $entity */
+    /** @var MenuLinkContentInterface $entity */
     $entity = parent::buildEntity($form, $form_state);
 
     list(, $parent) = explode(':', $form_state->getValue('menu_parent'), 2);
diff --git a/modules/entity_hierarchy_microsite/src/MicrositeMenuLinkDiscovery.php b/modules/entity_hierarchy_microsite/src/MicrositeMenuLinkDiscovery.php
index 8031429..11f11fb 100644
--- a/modules/entity_hierarchy_microsite/src/MicrositeMenuLinkDiscovery.php
+++ b/modules/entity_hierarchy_microsite/src/MicrositeMenuLinkDiscovery.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\entity_hierarchy_microsite;
 
+use PNX\NestedSet\NestedSetInterface;
+use PNX\NestedSet\Node;
+use Drupal\node\NodeInterface;
+use Drupal\entity_hierarchy_microsite\Entity\MicrositeMenuItemOverrideInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -21,68 +25,68 @@ class MicrositeMenuLinkDiscovery implements MicrositeMenuLinkDiscoveryInterface
   /**
    * Set storage.
    *
-   * @var \Drupal\entity_hierarchy\Storage\NestedSetStorageFactory
+   * @var NestedSetStorageFactory
    */
   protected $nestedSetStorageFactory;
 
   /**
    * Mapper.
    *
-   * @var \Drupal\entity_hierarchy\Storage\EntityTreeNodeMapperInterface
+   * @var EntityTreeNodeMapperInterface
    */
   protected $mapper;
 
   /**
    * Parent candidate.
    *
-   * @var \Drupal\entity_hierarchy\Information\ParentCandidateInterface
+   * @var ParentCandidateInterface
    */
   protected $candidate;
 
   /**
    * Field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   private $entityFieldManager;
 
   /**
    * Type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
    * Key factory.
    *
-   * @var \Drupal\entity_hierarchy\Storage\NestedSetNodeKeyFactory
+   * @var NestedSetNodeKeyFactory
    */
   private $keyFactory;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Constructs a new MicrositeMenuItemDeriver.
    *
-   * @param \Drupal\entity_hierarchy\Storage\NestedSetStorageFactory $nestedSetStorageFactory
+   * @param NestedSetStorageFactory $nestedSetStorageFactory
    *   Storage.
-   * @param \Drupal\entity_hierarchy\Storage\EntityTreeNodeMapperInterface $mapper
+   * @param EntityTreeNodeMapperInterface $mapper
    *   Mapper.
-   * @param \Drupal\entity_hierarchy\Information\ParentCandidateInterface $candidate
+   * @param ParentCandidateInterface $candidate
    *   Candidate.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   Field manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Type manager.
-   * @param \Drupal\entity_hierarchy\Storage\NestedSetNodeKeyFactory $keyFactory
+   * @param NestedSetNodeKeyFactory $keyFactory
    *   Key factory.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
    */
   public function __construct(NestedSetStorageFactory $nestedSetStorageFactory, EntityTreeNodeMapperInterface $mapper, ParentCandidateInterface $candidate, EntityFieldManagerInterface $entityFieldManager, EntityTypeManagerInterface $entityTypeManager, NestedSetNodeKeyFactory $keyFactory, ModuleHandlerInterface $moduleHandler) {
@@ -101,7 +105,7 @@ class MicrositeMenuLinkDiscovery implements MicrositeMenuLinkDiscoveryInterface
   public function getMenuLinkDefinitions(MicrositeInterface $microsite = NULL) {
     $definitions = [];
     $microsites = $microsite ? [$microsite] : $this->entityTypeManager->getStorage('entity_hierarchy_microsite')->loadMultiple();
-    /** @var \Drupal\entity_hierarchy_microsite\Entity\MicrositeInterface $microsite */
+    /** @var MicrositeInterface $microsite */
     foreach ($microsites as $microsite) {
       $home = $microsite->getHome();
       if (!$home) {
@@ -110,7 +114,7 @@ class MicrositeMenuLinkDiscovery implements MicrositeMenuLinkDiscoveryInterface
       $key = $this->keyFactory->fromEntity($home);
       $parentUuids = [];
       foreach ($this->candidate->getCandidateFields($home) as $field_name) {
-        /** @var \PNX\NestedSet\NestedSetInterface $tree */
+        /** @var NestedSetInterface $tree */
         $tree = $this->nestedSetStorageFactory->get($field_name, 'node');
         $homeNode = $tree->getNode($key);
         if (!$homeNode) {
@@ -136,12 +140,12 @@ class MicrositeMenuLinkDiscovery implements MicrositeMenuLinkDiscoveryInterface
           'provider' => 'entity_hierarchy_microsite',
           'discovered' => 0,
         ];
-        /** @var \PNX\NestedSet\Node $treeNode */
+        /** @var Node $treeNode */
         foreach ($nodes as $treeNode) {
           if (!$nodes->contains($treeNode)) {
             continue;
           }
-          /** @var \Drupal\node\NodeInterface $item */
+          /** @var NodeInterface $item */
           $item = $nodes->offsetGet($treeNode);
           $url = $item->toUrl();
           $revisionKey = sprintf('%s:%s', $treeNode->getId(), $treeNode->getRevisionId());
@@ -171,7 +175,7 @@ class MicrositeMenuLinkDiscovery implements MicrositeMenuLinkDiscoveryInterface
           }
         }
       }
-      /** @var \Drupal\entity_hierarchy_microsite\Entity\MicrositeMenuItemOverrideInterface $override */
+      /** @var MicrositeMenuItemOverrideInterface $override */
       if ($definitions) {
         foreach ($this->entityTypeManager->getStorage('eh_microsite_menu_override')
           ->loadByProperties([
diff --git a/modules/entity_hierarchy_microsite/src/MicrositeMenuLinkDiscoveryInterface.php b/modules/entity_hierarchy_microsite/src/MicrositeMenuLinkDiscoveryInterface.php
index 53070e9..1d85d10 100644
--- a/modules/entity_hierarchy_microsite/src/MicrositeMenuLinkDiscoveryInterface.php
+++ b/modules/entity_hierarchy_microsite/src/MicrositeMenuLinkDiscoveryInterface.php
@@ -12,7 +12,7 @@ interface MicrositeMenuLinkDiscoveryInterface {
   /**
    * Gets menu link definitions for the given site or all sites if none given.
    *
-   * @param \Drupal\entity_hierarchy_microsite\Entity\MicrositeInterface|null $microsite
+   * @param MicrositeInterface|null $microsite
    *   Microsite.
    *
    * @return array
diff --git a/modules/entity_hierarchy_microsite/src/Plugin/Block/MicrositeLogoBranding.php b/modules/entity_hierarchy_microsite/src/Plugin/Block/MicrositeLogoBranding.php
index d8b1626..dabf056 100644
--- a/modules/entity_hierarchy_microsite/src/Plugin/Block/MicrositeLogoBranding.php
+++ b/modules/entity_hierarchy_microsite/src/Plugin/Block/MicrositeLogoBranding.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_hierarchy_microsite\Plugin\Block;
 
+use Drupal\entity_hierarchy_microsite\Entity\MicrositeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Cache\CacheableMetadata;
@@ -31,7 +32,7 @@ class MicrositeLogoBranding extends BlockBase implements ContainerFactoryPluginI
   /**
    * Sets value of EntityTypeManager.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Value for EntityTypeManager.
    *
    * @return $this
@@ -44,7 +45,7 @@ class MicrositeLogoBranding extends BlockBase implements ContainerFactoryPluginI
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -72,7 +73,7 @@ class MicrositeLogoBranding extends BlockBase implements ContainerFactoryPluginI
       $cache->applyTo($build);
       return $build;
     }
-    /** @var \Drupal\entity_hierarchy_microsite\Entity\MicrositeInterface $microsite */
+    /** @var MicrositeInterface $microsite */
     $microsite = reset($microsites);
     $cache->addCacheableDependency($node);
     $cache->addCacheableDependency($microsite);
diff --git a/modules/entity_hierarchy_microsite/src/Plugin/Block/MicrositeMenu.php b/modules/entity_hierarchy_microsite/src/Plugin/Block/MicrositeMenu.php
index e7cf8a2..221b6b6 100644
--- a/modules/entity_hierarchy_microsite/src/Plugin/Block/MicrositeMenu.php
+++ b/modules/entity_hierarchy_microsite/src/Plugin/Block/MicrositeMenu.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_hierarchy_microsite\Plugin\Block;
 
+use Drupal\entity_hierarchy_microsite\Entity\MicrositeInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Menu\MenuTreeParameters;
@@ -54,7 +55,7 @@ class MicrositeMenu extends SystemMenuBlock implements ContainerFactoryPluginInt
       $cache->applyTo($build);
       return $build;
     }
-    /** @var \Drupal\entity_hierarchy_microsite\Entity\MicrositeInterface $microsite */
+    /** @var MicrositeInterface $microsite */
     $microsite = reset($microsites);
     $cache->addCacheableDependency($node);
     $cache->addCacheableDependency($microsite);
diff --git a/modules/entity_hierarchy_microsite/src/Plugin/Deriver/MicrositeMenuItemDeriver.php b/modules/entity_hierarchy_microsite/src/Plugin/Deriver/MicrositeMenuItemDeriver.php
index 040e5df..54db129 100644
--- a/modules/entity_hierarchy_microsite/src/Plugin/Deriver/MicrositeMenuItemDeriver.php
+++ b/modules/entity_hierarchy_microsite/src/Plugin/Deriver/MicrositeMenuItemDeriver.php
@@ -15,14 +15,14 @@ class MicrositeMenuItemDeriver extends DeriverBase implements ContainerDeriverIn
   /**
    * Link discovery.
    *
-   * @var \Drupal\entity_hierarchy_microsite\MicrositeMenuLinkDiscoveryInterface
+   * @var MicrositeMenuLinkDiscoveryInterface
    */
   private $micrositeMenuLinkDiscovery;
 
   /**
    * Constructs a new MicrositeMenuItemDeriver.
    *
-   * @param \Drupal\entity_hierarchy_microsite\MicrositeMenuLinkDiscoveryInterface $micrositeMenuLinkDiscovery
+   * @param MicrositeMenuLinkDiscoveryInterface $micrositeMenuLinkDiscovery
    *   Link discovery.
    */
   public function __construct(MicrositeMenuLinkDiscoveryInterface $micrositeMenuLinkDiscovery) {
diff --git a/modules/entity_hierarchy_microsite/src/Plugin/Menu/MicrositeMenuItem.php b/modules/entity_hierarchy_microsite/src/Plugin/Menu/MicrositeMenuItem.php
index 2ace2ec..73031d6 100644
--- a/modules/entity_hierarchy_microsite/src/Plugin/Menu/MicrositeMenuItem.php
+++ b/modules/entity_hierarchy_microsite/src/Plugin/Menu/MicrositeMenuItem.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_hierarchy_microsite\Plugin\Menu;
 
+use Drupal\entity_hierarchy_microsite\Entity\MicrositeMenuItemOverrideInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Menu\MenuLinkBase;
@@ -28,21 +30,21 @@ class MicrositeMenuItem extends MenuLinkBase implements ContainerFactoryPluginIn
   /**
    * The menu link content entity connected to this plugin instance.
    *
-   * @var \Drupal\entity_hierarchy_microsite\Entity\MicrositeMenuItemOverrideInterface
+   * @var MicrositeMenuItemOverrideInterface
    */
   protected $overrideEntity;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   private $moduleHandler;
 
@@ -55,9 +57,9 @@ class MicrositeMenuItem extends MenuLinkBase implements ContainerFactoryPluginIn
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Module handler.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler) {
@@ -125,10 +127,10 @@ class MicrositeMenuItem extends MenuLinkBase implements ContainerFactoryPluginIn
   /**
    * Loads the override entity associated with this menu link.
    *
-   * @return \Drupal\entity_hierarchy_microsite\Entity\MicrositeMenuItemOverrideInterface
+   * @return MicrositeMenuItemOverrideInterface
    *   The menu link override
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the entity ID and UUID are both invalid or missing.
    */
   protected function getOverrideEntity() {
diff --git a/modules/entity_hierarchy_microsite/src/Plugin/MicrositePluginTrait.php b/modules/entity_hierarchy_microsite/src/Plugin/MicrositePluginTrait.php
index 103889c..85635f9 100644
--- a/modules/entity_hierarchy_microsite/src/Plugin/MicrositePluginTrait.php
+++ b/modules/entity_hierarchy_microsite/src/Plugin/MicrositePluginTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_hierarchy_microsite\Plugin;
 
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\entity_hierarchy_microsite\ChildOfMicrositeLookupInterface;
@@ -15,21 +16,21 @@ trait MicrositePluginTrait {
   /**
    * Child of microsite lookup.
    *
-   * @var \Drupal\entity_hierarchy_microsite\ChildOfMicrositeLookupInterface
+   * @var ChildOfMicrositeLookupInterface
    */
   protected $childOfMicrositeLookup;
 
   /**
    * Entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * Sets value of NestedSetStorageFactory.
    *
-   * @param \Drupal\entity_hierarchy_microsite\ChildOfMicrositeLookupInterface $childOfMicrositeLookup
+   * @param ChildOfMicrositeLookupInterface $childOfMicrositeLookup
    *   Lookup.
    *
    * @return $this
@@ -42,7 +43,7 @@ trait MicrositePluginTrait {
   /**
    * Entity field manager.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   Entity field manager.
    *
    * @return $this
@@ -104,7 +105,7 @@ trait MicrositePluginTrait {
     if (isset($fields['node'])) {
       foreach ($fields['node'] as $field_name => $detail) {
         foreach ($detail['bundles'] as $bundle) {
-          /** @var \Drupal\Core\Field\FieldDefinitionInterface $field */
+          /** @var FieldDefinitionInterface $field */
           $field = $this->entityFieldManager->getFieldDefinitions('node', $bundle)[$field_name];
           $options[$field_name] = $field->getLabel();
         }
diff --git a/modules/entity_hierarchy_microsite/tests/src/Functional/MicrositeAdminTest.php b/modules/entity_hierarchy_microsite/tests/src/Functional/MicrositeAdminTest.php
index a74ed3c..ce13bd6 100644
--- a/modules/entity_hierarchy_microsite/tests/src/Functional/MicrositeAdminTest.php
+++ b/modules/entity_hierarchy_microsite/tests/src/Functional/MicrositeAdminTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\entity_hierarchy_microsite\Functional;
 
+use Drupal\entity_hierarchy_microsite\Entity\MicrositeMenuItemOverrideInterface;
 use Drupal\Core\Url;
 
 /**
@@ -106,7 +107,7 @@ class MicrositeAdminTest extends MicrositeFunctionalTestBase {
       'target' => $grandchild->uuid(),
     ]);
     $this->assertCount(1, $overrides);
-    /** @var \Drupal\entity_hierarchy_microsite\Entity\MicrositeMenuItemOverrideInterface $override */
+    /** @var MicrositeMenuItemOverrideInterface $override */
     $listOverride = reset($listOverrides);
     $this->assertFalse($listOverride->isEnabled());
     $this->assertTrue($listOverride->isExpanded());
diff --git a/modules/entity_hierarchy_microsite/tests/src/Functional/MicrositeFunctionalTestBase.php b/modules/entity_hierarchy_microsite/tests/src/Functional/MicrositeFunctionalTestBase.php
index 961f307..cc8f9b4 100644
--- a/modules/entity_hierarchy_microsite/tests/src/Functional/MicrositeFunctionalTestBase.php
+++ b/modules/entity_hierarchy_microsite/tests/src/Functional/MicrositeFunctionalTestBase.php
@@ -36,7 +36,7 @@ abstract class MicrositeFunctionalTestBase extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('local_actions_block');
     $this->drupalPlaceBlock('page_title_block', ['region' => 'content']);
diff --git a/modules/entity_hierarchy_microsite/tests/src/Functional/MicrositeLogoBrandingBlockTest.php b/modules/entity_hierarchy_microsite/tests/src/Functional/MicrositeLogoBrandingBlockTest.php
index 9dd0378..25feb88 100644
--- a/modules/entity_hierarchy_microsite/tests/src/Functional/MicrositeLogoBrandingBlockTest.php
+++ b/modules/entity_hierarchy_microsite/tests/src/Functional/MicrositeLogoBrandingBlockTest.php
@@ -14,7 +14,7 @@ class MicrositeLogoBrandingBlockTest extends MicrositeFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('entity_hierarchy_microsite_branding', [
       'field' => self::FIELD_NAME,
diff --git a/modules/entity_hierarchy_microsite/tests/src/Functional/MicrositeMenuBlockTest.php b/modules/entity_hierarchy_microsite/tests/src/Functional/MicrositeMenuBlockTest.php
index 8d8256b..f100d7c 100644
--- a/modules/entity_hierarchy_microsite/tests/src/Functional/MicrositeMenuBlockTest.php
+++ b/modules/entity_hierarchy_microsite/tests/src/Functional/MicrositeMenuBlockTest.php
@@ -14,7 +14,7 @@ class MicrositeMenuBlockTest extends MicrositeFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('entity_hierarchy_microsite_menu', [
       'field' => self::FIELD_NAME,
@@ -57,7 +57,7 @@ class MicrositeMenuBlockTest extends MicrositeFunctionalTestBase {
     foreach ($children as $child) {
       $this->assertNotEmpty($menu->find('named', ['link', $child->label()]));
       $assert->linkExists($child->label());
-      $xpath = $this->buildXPathQuery('//a[contains(@href, :href)]', [':href' => $child->toUrl()->toString()]);
+      $xpath = $this->assertSession()->buildXPathQuery('//a[contains(@href, :href)]', [':href' => $child->toUrl()->toString()]);
       $this->assertNotEmpty($menu->find('xpath', $xpath));
     }
   }
diff --git a/modules/entity_hierarchy_microsite/tests/src/Kernel/ChildOfMicrositeConditionTest.php b/modules/entity_hierarchy_microsite/tests/src/Kernel/ChildOfMicrositeConditionTest.php
index 35e2df1..7826a58 100644
--- a/modules/entity_hierarchy_microsite/tests/src/Kernel/ChildOfMicrositeConditionTest.php
+++ b/modules/entity_hierarchy_microsite/tests/src/Kernel/ChildOfMicrositeConditionTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\entity_hierarchy_microsite\Kernel;
 
+use Drupal\Core\Condition\ConditionInterface;
+use Drupal\Core\Plugin\ContextAwarePluginInterface;
 use Drupal\entity_hierarchy_microsite\Entity\Microsite;
 
 /**
@@ -30,7 +32,7 @@ class ChildOfMicrositeConditionTest extends EntityHierarchyMicrositeKernelTestBa
       'home' => $standalone,
     ]);
     $microsite2->save();
-    /** @var \Drupal\Core\Condition\ConditionInterface|\Drupal\Core\Plugin\ContextAwarePluginInterface $condition */
+    /** @var ConditionInterface|ContextAwarePluginInterface $condition */
     $condition = $this->container->get('plugin.manager.condition')->createInstance('entity_hierarchy_microsite_child');
     $this->assertTrue($condition->evaluate());
     $condition->setConfiguration([
diff --git a/modules/entity_hierarchy_microsite/tests/src/Kernel/EntityHierarchyMicrositeKernelTestBase.php b/modules/entity_hierarchy_microsite/tests/src/Kernel/EntityHierarchyMicrositeKernelTestBase.php
index 95f9b71..f1aeaff 100644
--- a/modules/entity_hierarchy_microsite/tests/src/Kernel/EntityHierarchyMicrositeKernelTestBase.php
+++ b/modules/entity_hierarchy_microsite/tests/src/Kernel/EntityHierarchyMicrositeKernelTestBase.php
@@ -31,7 +31,7 @@ abstract class EntityHierarchyMicrositeKernelTestBase extends EntityHierarchyKer
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('node');
     $this->installEntitySchema('file');
diff --git a/modules/entity_hierarchy_microsite/tests/src/Kernel/MicrositeMenuItemsTest.php b/modules/entity_hierarchy_microsite/tests/src/Kernel/MicrositeMenuItemsTest.php
index eae6597..a3bc994 100644
--- a/modules/entity_hierarchy_microsite/tests/src/Kernel/MicrositeMenuItemsTest.php
+++ b/modules/entity_hierarchy_microsite/tests/src/Kernel/MicrositeMenuItemsTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\entity_hierarchy_microsite\Kernel;
 
+use Drupal\Core\Menu\MenuLinkTreeInterface;
+use Drupal\node\NodeInterface;
 use Drupal\entity_hierarchy_microsite\Entity\Microsite;
 use Drupal\entity_hierarchy_microsite\Entity\MicrositeMenuItemOverride;
 
@@ -29,7 +31,7 @@ class MicrositeMenuItemsTest extends EntityHierarchyMicrositeKernelTestBase {
     $microsite->save();
     // hook_entity_hierarchy_microsite_links_alter() should be fired.
     $this->assertEquals('success', \Drupal::state()->get('entity_hierarchy_microsite_test_entity_hierarchy_microsite_links_alter', NULL));
-    /** @var \Drupal\Core\Menu\MenuLinkTreeInterface $tree */
+    /** @var MenuLinkTreeInterface $tree */
     $tree = \Drupal::service('menu.link_tree');
     $params = $tree->getCurrentRouteMenuTreeParameters('entity-hierarchy-microsite');
     $params->setMaxDepth(9);
@@ -54,7 +56,7 @@ class MicrositeMenuItemsTest extends EntityHierarchyMicrositeKernelTestBase {
         }
       }
     }
-    /** @var \Drupal\node\NodeInterface $last */
+    /** @var NodeInterface $last */
     $last = array_pop($second_children);
     array_push($first_children, $last);
     $last->{self::FIELD_NAME} = $first;
@@ -127,7 +129,7 @@ class MicrositeMenuItemsTest extends EntityHierarchyMicrositeKernelTestBase {
    * Tests microsite menus do not exceed the maximum depth.
    */
   public function testMicrositeMenuLinkMaxDepth() {
-    /** @var \Drupal\Core\Menu\MenuLinkTreeInterface $menu_link_tree */
+    /** @var MenuLinkTreeInterface $menu_link_tree */
     $menu_link_tree = \Drupal::service('menu.link_tree');
     $menu_max_depth = $menu_link_tree->maxDepth();
     $entity_max_depth = $menu_max_depth + 1;
diff --git a/modules/entity_hierarchy_microsite/tests/src/Traits/MediaTrait.php b/modules/entity_hierarchy_microsite/tests/src/Traits/MediaTrait.php
index 6928b05..d9669e9 100644
--- a/modules/entity_hierarchy_microsite/tests/src/Traits/MediaTrait.php
+++ b/modules/entity_hierarchy_microsite/tests/src/Traits/MediaTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\entity_hierarchy_microsite\Traits;
 
+use Drupal\file\FileInterface;
 use Drupal\file\Entity\File;
 use Drupal\media\Entity\Media;
 use Drupal\Tests\media\Traits\MediaTypeCreationTrait;
@@ -20,10 +21,10 @@ trait MediaTrait {
    *
    * @param array $values
    *   Optional key => values to assign to the media entity.
-   * @param \Drupal\file\Entity\File $file
+   * @param File $file
    *   Optional file entity to use.
    *
-   * @return \Drupal\media\Entity\Media
+   * @return Media
    *   A media entity.
    */
   protected function createImageMedia(array $values = [], File $file = NULL) {
@@ -52,7 +53,7 @@ trait MediaTrait {
    * @param int $status
    *   The file status.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   The file entity.
    */
   protected function createFile($uri, $status = 1) {
diff --git a/modules/entity_hierarchy_workbench_access/src/Plugin/Derivative/WorkbenchAccessControlDeriver.php b/modules/entity_hierarchy_workbench_access/src/Plugin/Derivative/WorkbenchAccessControlDeriver.php
index 37eec6f..d019d7f 100644
--- a/modules/entity_hierarchy_workbench_access/src/Plugin/Derivative/WorkbenchAccessControlDeriver.php
+++ b/modules/entity_hierarchy_workbench_access/src/Plugin/Derivative/WorkbenchAccessControlDeriver.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_hierarchy_workbench_access\Plugin\Derivative;
 
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -25,14 +26,14 @@ class WorkbenchAccessControlDeriver extends DeriverBase implements ContainerDeri
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
@@ -41,11 +42,11 @@ class WorkbenchAccessControlDeriver extends DeriverBase implements ContainerDeri
    *
    * @param string $base_plugin_id
    *   The base plugin ID.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The translation manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   Entity field manager.
    */
   public function __construct($base_plugin_id, EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation, EntityFieldManagerInterface $entityFieldManager) {
@@ -73,7 +74,7 @@ class WorkbenchAccessControlDeriver extends DeriverBase implements ContainerDeri
   public function getDerivativeDefinitions($base_plugin_definition) {
     $this->derivatives = [];
     foreach ($this->entityFieldManager->getFieldMapByFieldType('entity_reference_hierarchy') as $entity_type_id => $fields) {
-      /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+      /** @var EntityTypeInterface $entity_type */
       $entity_type = $this->entityTypeManager->getDefinition($entity_type_id);
       foreach ($fields as $field_name => $bundles) {
         $this->derivatives["{$entity_type_id}__{$field_name}"] = [
diff --git a/modules/entity_hierarchy_workbench_access/src/Plugin/Validation/Constraint/ValidEntityHierarchySectionValidator.php b/modules/entity_hierarchy_workbench_access/src/Plugin/Validation/Constraint/ValidEntityHierarchySectionValidator.php
index 217e07e..4baa4ce 100644
--- a/modules/entity_hierarchy_workbench_access/src/Plugin/Validation/Constraint/ValidEntityHierarchySectionValidator.php
+++ b/modules/entity_hierarchy_workbench_access/src/Plugin/Validation/Constraint/ValidEntityHierarchySectionValidator.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_hierarchy_workbench_access\Plugin\Validation\Constraint;
 
+use Drupal\Core\Field\FieldItemListInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Symfony\Component\Validator\ConstraintValidator;
 use Symfony\Component\Validator\ConstraintValidatorInterface;
@@ -22,14 +24,14 @@ class ValidEntityHierarchySectionValidator extends ConstraintValidator implement
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
@@ -43,20 +45,20 @@ class ValidEntityHierarchySectionValidator extends ConstraintValidator implement
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new ValidEntityHierarchySection.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Config factory.
-   * @param \Drupal\Core\Session\AccountInterface $currentUser
+   * @param AccountInterface $currentUser
    *   Current user.
    * @param \Drupal\workbench_access\WorkbenchAccessManagerInterface $workbenchManager
    *   Workbench manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
    */
   public function __construct(ConfigFactoryInterface $configFactory, AccountInterface $currentUser, WorkbenchAccessManagerInterface $workbenchManager, EntityTypeManagerInterface $entityTypeManager) {
@@ -82,11 +84,11 @@ class ValidEntityHierarchySectionValidator extends ConstraintValidator implement
    * {@inheritdoc}
    */
   public function validate($items, Constraint $constraint) {
-    /** @var \Drupal\Core\Field\FieldItemListInterface $items */
+    /** @var FieldItemListInterface $items */
     if ($this->currentUser->hasPermission('bypass workbench access')) {
       return;
     }
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $parent */
+    /** @var ContentEntityInterface $parent */
     $parent = $items->entity;
     if (!$parent) {
       if ($this->configFactory->get('workbench_access.settings')->get('deny_on_empty')) {
@@ -94,7 +96,7 @@ class ValidEntityHierarchySectionValidator extends ConstraintValidator implement
       }
       return;
     }
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $saved */
+    /** @var ContentEntityInterface $saved */
     if ($items->getEntity()->id() && $saved = $this->entityTypeManager->getStorage($parent->getEntityTypeId())->loadUnchanged($items->getEntity()->id())) {
       $field_name = $items->getFieldDefinition()->getFieldStorageDefinition()->getName();
       if ($saved->hasField($field_name) && !$saved->get($field_name)->isEmpty() && $saved->{$field_name}->entity && $saved->{$field_name}->entity->id() === $parent->id()) {
diff --git a/modules/entity_hierarchy_workbench_access/tests/src/Kernel/EntityHierarchyWorkbenchAccessTest.php b/modules/entity_hierarchy_workbench_access/tests/src/Kernel/EntityHierarchyWorkbenchAccessTest.php
index 14923a1..893edc8 100644
--- a/modules/entity_hierarchy_workbench_access/tests/src/Kernel/EntityHierarchyWorkbenchAccessTest.php
+++ b/modules/entity_hierarchy_workbench_access/tests/src/Kernel/EntityHierarchyWorkbenchAccessTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\entity_hierarchy_workbench_access\Kernel;
 
+use Drupal\node\NodeTypeInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\field\Entity\FieldConfig;
@@ -28,7 +30,7 @@ class EntityHierarchyWorkbenchAccessTest extends EntityHierarchyKernelTestBase {
   /**
    * Node type.
    *
-   * @var \Drupal\node\NodeTypeInterface
+   * @var NodeTypeInterface
    */
   protected $parentNodeType;
 
@@ -42,7 +44,7 @@ class EntityHierarchyWorkbenchAccessTest extends EntityHierarchyKernelTestBase {
   /**
    * Node type.
    *
-   * @var \Drupal\node\NodeTypeInterface
+   * @var NodeTypeInterface
    */
   protected $childNodeType;
 
@@ -67,7 +69,7 @@ class EntityHierarchyWorkbenchAccessTest extends EntityHierarchyKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     EntityKernelTestBase::setUp();
     $this->installEntitySchema(static::ENTITY_TYPE);
     $this->installEntitySchema('section_association');
@@ -235,11 +237,11 @@ class EntityHierarchyWorkbenchAccessTest extends EntityHierarchyKernelTestBase {
   /**
    * Checks access.
    *
-   * @param \Drupal\Core\Entity\EntityInterface[] $allowed
+   * @param EntityInterface[] $allowed
    *   Entities that should have access to.
-   * @param \Drupal\Core\Entity\EntityInterface[] $disallowed
+   * @param EntityInterface[] $disallowed
    *   Entities that should not have access to.
-   * @param \Drupal\Core\Session\AccountInterface $editor
+   * @param AccountInterface $editor
    *   Account to check access with.
    */
   protected function checkAccess(array $allowed, array $disallowed, AccountInterface $editor) {
diff --git a/src/Commands/EntityHierarchyCommands.php b/src/Commands/EntityHierarchyCommands.php
index ee3c18b..582d665 100644
--- a/src/Commands/EntityHierarchyCommands.php
+++ b/src/Commands/EntityHierarchyCommands.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_hierarchy\Commands;
 
+use Drupal\entity_hierarchy\Storage\TreeRebuilder;
 use Drush\Commands\DrushCommands;
 
 /**
@@ -12,14 +13,14 @@ class EntityHierarchyCommands extends DrushCommands {
   /**
    * TreeRebuilder instance.
    *
-   * @var \Drupal\entity_hierarchy\Storage\TreeRebuilder
+   * @var TreeRebuilder
    */
   protected $treeRebuilder;
 
   /**
    * EntityHierarchyCommands constructor.
    *
-   * @param \Drupal\entity_hierarchy\Storage\TreeRebuilder $treeRebuilder
+   * @param TreeRebuilder $treeRebuilder
    */
   public function __construct($treeRebuilder) {
     parent::__construct();
diff --git a/src/Form/HierarchyChildrenForm.php b/src/Form/HierarchyChildrenForm.php
index 0373101..849a79d 100644
--- a/src/Form/HierarchyChildrenForm.php
+++ b/src/Form/HierarchyChildrenForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\entity_hierarchy\Form;
 
+use Drupal\Core\Field\FieldDefinitionInterface;
+use PNX\NestedSet\NestedSetInterface;
+use Drupal\entity_hierarchy\Handler\EntityHierarchyHandlerInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityManagerInterface;
@@ -25,35 +28,35 @@ class HierarchyChildrenForm extends ContentEntityForm {
   /**
    * The hierarchy being displayed.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $entity;
 
   /**
    * Nested set storage factory.
    *
-   * @var \Drupal\entity_hierarchy\Storage\NestedSetStorageFactory
+   * @var NestedSetStorageFactory
    */
   protected $nestedSetStorageFactory;
 
   /**
    * Nested set node key factory.
    *
-   * @var \Drupal\entity_hierarchy\Storage\NestedSetNodeKeyFactory
+   * @var NestedSetNodeKeyFactory
    */
   protected $nodeKeyFactory;
 
   /**
    * Parent candidate.
    *
-   * @var \Drupal\entity_hierarchy\Information\ParentCandidateInterface
+   * @var ParentCandidateInterface
    */
   protected $parentCandidate;
 
   /**
    * Tree node mapper.
    *
-   * @var \Drupal\entity_hierarchy\Storage\EntityTreeNodeMapperInterface
+   * @var EntityTreeNodeMapperInterface
    */
   protected $entityTreeNodeMapper;
 
@@ -84,7 +87,7 @@ class HierarchyChildrenForm extends ContentEntityForm {
   public function form(array $form, FormStateInterface $form_state) {
     $cache = (new CacheableMetadata())->addCacheableDependency($this->entity);
 
-    /** @var \Drupal\Core\Field\FieldDefinitionInterface[] $fields */
+    /** @var FieldDefinitionInterface[] $fields */
     $fields = $this->parentCandidate->getCandidateFields($this->entity);
     if (!$fields) {
       throw new NotFoundHttpException();
@@ -119,7 +122,7 @@ class HierarchyChildrenForm extends ContentEntityForm {
       ];
     }
     /** @var \PNX\NestedSet\Node[] $children */
-    /** @var \PNX\NestedSet\NestedSetInterface $storage */
+    /** @var NestedSetInterface $storage */
     $storage = $this->nestedSetStorageFactory->get($fieldName, $this->entity->getEntityTypeId());
     $children = $storage->findChildren($this->nodeKeyFactory->fromEntity($this->entity));
     $childEntities = $this->entityTreeNodeMapper->loadAndAccessCheckEntitysForTreeNodes($this->entity->getEntityTypeId(), $children, $cache);
@@ -145,7 +148,7 @@ class HierarchyChildrenForm extends ContentEntityForm {
         // Doesn't exist or is access hidden.
         continue;
       }
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $childEntity */
+      /** @var ContentEntityInterface $childEntity */
       $childEntity = $childEntities->offsetGet($node);
       if (!$childEntity->isDefaultRevision()) {
         // We only update default revisions here.
@@ -192,7 +195,7 @@ class HierarchyChildrenForm extends ContentEntityForm {
    *
    * @param array $form
    *   Form array.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   Form state.
    */
   public function updateField(array $form, FormStateInterface $formState) {
@@ -217,7 +220,7 @@ class HierarchyChildrenForm extends ContentEntityForm {
     $entityType = $this->entity->getEntityType();
     if ($entityType->hasHandlerClass('entity_hierarchy') && ($childBundles = $this->parentCandidate->getCandidateBundles($this->entity)) && isset($childBundles[$fieldName])) {
       $handlerClass = $entityType->getHandlerClass('entity_hierarchy');
-      /** @var \Drupal\entity_hierarchy\Handler\EntityHierarchyHandlerInterface $handler */
+      /** @var EntityHierarchyHandlerInterface $handler */
       $handler = new $handlerClass();
 
       $links = [];
@@ -285,7 +288,7 @@ class HierarchyChildrenForm extends ContentEntityForm {
    *
    * @param string $fieldName
    *   Field name.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $childEntity
+   * @param ContentEntityInterface $childEntity
    *   Child entity being updated.
    * @param int $weight
    *   New weight.
diff --git a/src/Handler/EntityHierarchyHandlerInterface.php b/src/Handler/EntityHierarchyHandlerInterface.php
index 352ff77..0e7a2b1 100644
--- a/src/Handler/EntityHierarchyHandlerInterface.php
+++ b/src/Handler/EntityHierarchyHandlerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_hierarchy\Handler;
 
+use Drupal\Core\Url;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 
@@ -13,16 +14,16 @@ interface EntityHierarchyHandlerInterface {
   /**
    * Gets an add child URL.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entityType
+   * @param EntityTypeInterface $entityType
    *   Entity type.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $parent
+   * @param ContentEntityInterface $parent
    *   Parent entity.
    * @param string $bundle
    *   Child bundle.
    * @param string $fieldName
    *   Child field name.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   Url to add new child.
    */
   public function getAddChildUrl(EntityTypeInterface $entityType, ContentEntityInterface $parent, $bundle, $fieldName);
diff --git a/src/Information/AncestryLabelTrait.php b/src/Information/AncestryLabelTrait.php
index 98c2d59..d7818f7 100644
--- a/src/Information/AncestryLabelTrait.php
+++ b/src/Information/AncestryLabelTrait.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\entity_hierarchy\Information;
 
+use Drupal\entity_hierarchy\Storage\EntityTreeNodeMapperInterface;
+use Drupal\entity_hierarchy\Storage\NestedSetNodeKeyFactory;
+use PNX\NestedSet\NestedSetInterface;
+use Drupal\entity_hierarchy\Storage\NestedSetStorage;
 use Drupal\Core\Entity\ContentEntityInterface;
 
 /**
@@ -12,23 +16,23 @@ trait AncestryLabelTrait {
   /**
    * Tree node mapper.
    *
-   * @var \Drupal\entity_hierarchy\Storage\EntityTreeNodeMapperInterface
+   * @var EntityTreeNodeMapperInterface
    */
   protected $entityTreeNodeMapper;
 
   /**
    * Key factory.
    *
-   * @var \Drupal\entity_hierarchy\Storage\NestedSetNodeKeyFactory
+   * @var NestedSetNodeKeyFactory
    */
   protected $keyFactory;
 
   /**
    * Generate labels including ancestry.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity to generate label for.
-   * @param \PNX\NestedSet\NestedSetInterface|\Drupal\entity_hierarchy\Storage\NestedSetStorage $storage
+   * @param NestedSetInterface|NestedSetStorage $storage
    *   Tree storage.
    * @param string $entity_type_id
    *   Entity type ID.
diff --git a/src/Information/ChildEntityWarning.php b/src/Information/ChildEntityWarning.php
index 412c249..86da340 100644
--- a/src/Information/ChildEntityWarning.php
+++ b/src/Information/ChildEntityWarning.php
@@ -23,14 +23,14 @@ class ChildEntityWarning {
   /**
    * Cache metadata.
    *
-   * @var \Drupal\Core\Cache\RefinableCacheableDependencyInterface
+   * @var RefinableCacheableDependencyInterface
    */
   protected $cache;
 
   /**
    * Node if parent exists.
    *
-   * @var null|\PNX\NestedSet\Node
+   * @var null|Node
    */
   protected $parent;
 
@@ -39,9 +39,9 @@ class ChildEntityWarning {
    *
    * @param \SplObjectStorage $relatedEntities
    *   Related entities (children or parents).
-   * @param \Drupal\Core\Cache\RefinableCacheableDependencyInterface $cache
+   * @param RefinableCacheableDependencyInterface $cache
    *   Cache metadata.
-   * @param \PNX\NestedSet\Node|null $parent
+   * @param Node|null $parent
    *   (optional) Parent if exists.
    */
   public function __construct(\SplObjectStorage $relatedEntities, RefinableCacheableDependencyInterface $cache, Node $parent = NULL) {
@@ -73,7 +73,7 @@ class ChildEntityWarning {
   /**
    * Gets warning message for deleting a parent.
    *
-   * @return \Drupal\Core\StringTranslation\PluralTranslatableMarkup
+   * @return PluralTranslatableMarkup
    *   Warning message.
    */
   public function getWarning() {
diff --git a/src/Information/ChildEntityWarningBuilder.php b/src/Information/ChildEntityWarningBuilder.php
index 880be96..cf17900 100644
--- a/src/Information/ChildEntityWarningBuilder.php
+++ b/src/Information/ChildEntityWarningBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_hierarchy\Information;
 
+use PNX\NestedSet\NestedSetInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ -18,41 +19,41 @@ class ChildEntityWarningBuilder implements ContainerInjectionInterface {
   /**
    * Parent candidate info.
    *
-   * @var \Drupal\entity_hierarchy\Information\ParentCandidateInterface
+   * @var ParentCandidateInterface
    */
   protected $parentCandidate;
 
   /**
    * Tree node mapper.
    *
-   * @var \Drupal\entity_hierarchy\Storage\EntityTreeNodeMapperInterface
+   * @var EntityTreeNodeMapperInterface
    */
   protected $treeNodeMapper;
 
   /**
    * Storage factory.
    *
-   * @var \Drupal\entity_hierarchy\Storage\NestedSetStorageFactory
+   * @var NestedSetStorageFactory
    */
   protected $nestedSetStorageFactory;
 
   /**
    * Node key factory.
    *
-   * @var \Drupal\entity_hierarchy\Storage\NestedSetNodeKeyFactory
+   * @var NestedSetNodeKeyFactory
    */
   protected $nodeKeyFactory;
 
   /**
    * Constructs a new ChildEntityWarningBuilder object.
    *
-   * @param \Drupal\entity_hierarchy\Information\ParentCandidateInterface $parentCandidate
+   * @param ParentCandidateInterface $parentCandidate
    *   Parent candidate service.
-   * @param \Drupal\entity_hierarchy\Storage\EntityTreeNodeMapperInterface $treeNodeMapper
+   * @param EntityTreeNodeMapperInterface $treeNodeMapper
    *   Tree node mapper.
-   * @param \Drupal\entity_hierarchy\Storage\NestedSetStorageFactory $nestedSetStorageFactory
+   * @param NestedSetStorageFactory $nestedSetStorageFactory
    *   Storage factory.
-   * @param \Drupal\entity_hierarchy\Storage\NestedSetNodeKeyFactory $nodeKeyFactory
+   * @param NestedSetNodeKeyFactory $nodeKeyFactory
    *   Key factory.
    */
   public function __construct(ParentCandidateInterface $parentCandidate, EntityTreeNodeMapperInterface $treeNodeMapper, NestedSetStorageFactory $nestedSetStorageFactory, NestedSetNodeKeyFactory $nodeKeyFactory) {
@@ -77,10 +78,10 @@ class ChildEntityWarningBuilder implements ContainerInjectionInterface {
   /**
    * Gets warning about child entities before deleting a parent.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $parent
+   * @param ContentEntityInterface $parent
    *   Parent to be deleted.
    *
-   * @return \Drupal\entity_hierarchy\Information\ChildEntityWarning[]
+   * @return ChildEntityWarning[]
    *   Array of warning value objects.
    */
   public function buildChildEntityWarnings(ContentEntityInterface $parent) {
@@ -88,7 +89,7 @@ class ChildEntityWarningBuilder implements ContainerInjectionInterface {
     if ($fields = $this->parentCandidate->getCandidateFields($parent)) {
       $cache = new CacheableMetadata();
       foreach ($fields as $field_name) {
-        /** @var \PNX\NestedSet\NestedSetInterface $storage */
+        /** @var NestedSetInterface $storage */
         $storage = $this->nestedSetStorageFactory->get($field_name, $parent->getEntityTypeId());
         $nodeKey = $this->nodeKeyFactory->fromEntity($parent);
         $children = $storage->findChildren($nodeKey);
diff --git a/src/Information/ParentCandidate.php b/src/Information/ParentCandidate.php
index cb47aec..e8a5870 100644
--- a/src/Information/ParentCandidate.php
+++ b/src/Information/ParentCandidate.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_hierarchy\Information;
 
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ -14,23 +15,23 @@ class ParentCandidate implements ParentCandidateInterface {
   /**
    * Entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * Bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInfo;
 
   /**
    * Constructs a new ReorderChildrenAccess object.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   Entity field manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundleInfo
+   * @param EntityTypeBundleInfoInterface $bundleInfo
    *   Bundle Info.
    */
   public function __construct(EntityFieldManagerInterface $entityFieldManager, EntityTypeBundleInfoInterface $bundleInfo) {
@@ -51,7 +52,7 @@ class ParentCandidate implements ParentCandidateInterface {
       // that spans entity-types as you cannot have more than a single level.
       foreach ($fields[$entity_type] as $field_name => $detail) {
         foreach ($detail['bundles'] as $bundle) {
-          /** @var \Drupal\Core\Field\FieldDefinitionInterface $field */
+          /** @var FieldDefinitionInterface $field */
           $field = $this->entityFieldManager->getFieldDefinitions($entity_type, $bundle)[$field_name];
           $settings = $field->getSetting('handler_settings');
           if (!isset($settings['target_bundles']) || in_array($entity->bundle(), $settings['target_bundles'], TRUE)) {
@@ -75,7 +76,7 @@ class ParentCandidate implements ParentCandidateInterface {
     foreach ($this->getCandidateFields($entity) as $field_name) {
       $valid_bundles = [];
       foreach ($fields[$field_name]['bundles'] as $bundle) {
-        /** @var \Drupal\Core\Field\FieldDefinitionInterface $field */
+        /** @var FieldDefinitionInterface $field */
         $field = $this->entityFieldManager->getFieldDefinitions($entity->getEntityTypeId(), $bundle)[$field_name];
         $settings = $field->getSetting('handler_settings');
         if (!isset($settings['target_bundles']) || in_array($entity->bundle(), $settings['target_bundles'], TRUE)) {
diff --git a/src/Information/ParentCandidateInterface.php b/src/Information/ParentCandidateInterface.php
index ce481ac..dd5c862 100644
--- a/src/Information/ParentCandidateInterface.php
+++ b/src/Information/ParentCandidateInterface.php
@@ -12,7 +12,7 @@ interface ParentCandidateInterface {
   /**
    * Gets all fields that allow referencing this entity as a parent.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity to get parent candidate fields for.
    *
    * @return array
@@ -23,7 +23,7 @@ interface ParentCandidateInterface {
   /**
    * Gets all bundles that allow referencing this entity as a parent.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity to get parent candidate bundles for.
    *
    * @return array
diff --git a/src/Plugin/Derivative/DynamicLocalTasks.php b/src/Plugin/Derivative/DynamicLocalTasks.php
index bc8bd8a..8dc9632 100644
--- a/src/Plugin/Derivative/DynamicLocalTasks.php
+++ b/src/Plugin/Derivative/DynamicLocalTasks.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_hierarchy\Plugin\Derivative;
 
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -25,14 +26,14 @@ class DynamicLocalTasks extends DeriverBase implements ContainerDeriverInterface
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
@@ -41,11 +42,11 @@ class DynamicLocalTasks extends DeriverBase implements ContainerDeriverInterface
    *
    * @param string $base_plugin_id
    *   The base plugin ID.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The translation manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   Entity field manager.
    */
   public function __construct($base_plugin_id, EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation, EntityFieldManagerInterface $entityFieldManager) {
@@ -73,7 +74,7 @@ class DynamicLocalTasks extends DeriverBase implements ContainerDeriverInterface
   public function getDerivativeDefinitions($base_plugin_definition) {
     $this->derivatives = [];
     foreach ($this->entityFieldManager->getFieldMapByFieldType('entity_reference_hierarchy') as $entity_type_id => $fields) {
-      /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+      /** @var EntityTypeInterface $entity_type */
       $entity_type = $this->entityTypeManager->getDefinition($entity_type_id);
       if (!$entity_type->hasLinkTemplate('canonical') || isset($this->derivatives["$entity_type_id.entity_hierarchy_reorder"])) {
         continue;
diff --git a/src/Plugin/Derivative/EntityHierarchySelectionDeriver.php b/src/Plugin/Derivative/EntityHierarchySelectionDeriver.php
index 59d93f3..dec70e1 100644
--- a/src/Plugin/Derivative/EntityHierarchySelectionDeriver.php
+++ b/src/Plugin/Derivative/EntityHierarchySelectionDeriver.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_hierarchy\Plugin\Derivative;
 
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ -15,14 +16,14 @@ class EntityHierarchySelectionDeriver extends DeriverBase implements ContainerDe
   /**
    * Entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * Creates an EntityHierarchySelectionDeriverobject.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   Entity field manager.
    */
   public function __construct(EntityFieldManagerInterface $entityFieldManager) {
@@ -44,7 +45,7 @@ class EntityHierarchySelectionDeriver extends DeriverBase implements ContainerDe
   public function getDerivativeDefinitions($base_plugin_definition) {
     foreach ($this->entityFieldManager->getFieldMapByFieldType('entity_reference_hierarchy') as $entity_type_id => $info) {
       foreach ($info as $field_name => $bundles) {
-        /** @var \Drupal\Core\Field\FieldDefinitionInterface $sample_field */
+        /** @var FieldDefinitionInterface $sample_field */
         $fields = $this->entityFieldManager->getFieldDefinitions($entity_type_id, reset($bundles['bundles']));
         $sample_field_name = $field_name;
         if (isset($fields[$field_name])) {
diff --git a/src/Plugin/EntityReferenceSelection/EntityHierarchy.php b/src/Plugin/EntityReferenceSelection/EntityHierarchy.php
index acb3577..eb7c746 100644
--- a/src/Plugin/EntityReferenceSelection/EntityHierarchy.php
+++ b/src/Plugin/EntityReferenceSelection/EntityHierarchy.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_hierarchy\Plugin\EntityReferenceSelection;
 
+use PNX\NestedSet\NestedSetInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\EntityManagerInterface;
 use Drupal\Core\Entity\Plugin\EntityReferenceSelection\DefaultSelection;
@@ -31,7 +32,7 @@ class EntityHierarchy extends DefaultSelection {
   /**
    * Storage factory.
    *
-   * @var \Drupal\entity_hierarchy\Storage\NestedSetStorageFactory
+   * @var NestedSetStorageFactory
    */
   protected $nestedSetStorageFactory;
 
@@ -70,7 +71,7 @@ class EntityHierarchy extends DefaultSelection {
     // We assume target and definition are one and the same, as there is no
     // point in a hierarchy if you're referencing something else, you can't
     // go more than one level deep.
-    /** @var \PNX\NestedSet\NestedSetInterface $storage */
+    /** @var NestedSetInterface $storage */
     $storage = $this->nestedSetStorageFactory->get($this->pluginDefinition['field_name'], $target_type);
     foreach ($entities as $entity_id => $entity) {
       $bundle = $entity->bundle();
diff --git a/src/Plugin/Field/FieldType/EntityReferenceHierarchy.php b/src/Plugin/Field/FieldType/EntityReferenceHierarchy.php
index 00c5d7a..7c9faed 100644
--- a/src/Plugin/Field/FieldType/EntityReferenceHierarchy.php
+++ b/src/Plugin/Field/FieldType/EntityReferenceHierarchy.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\entity_hierarchy\Plugin\Field\FieldType;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\entity_hierarchy\Storage\NestedSetNodeKeyFactory;
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Core\TypedData\DataDefinition;
@@ -183,7 +186,7 @@ class EntityReferenceHierarchy extends EntityReferenceItem {
   /**
    * Returns the storage handler for the given entity-type.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   Storage handler.
    */
   protected function entityTypeStorage($entity_type_id) {
@@ -193,7 +196,7 @@ class EntityReferenceHierarchy extends EntityReferenceItem {
   /**
    * Returns the tree storage.
    *
-   * @return \Drupal\entity_hierarchy\Storage\NestedSetStorage
+   * @return NestedSetStorage
    *   Tree storage.
    */
   protected function getTreeStorage() {
@@ -204,7 +207,7 @@ class EntityReferenceHierarchy extends EntityReferenceItem {
   /**
    * Returns the node factory.
    *
-   * @return \Drupal\entity_hierarchy\Storage\NestedSetNodeKeyFactory
+   * @return NestedSetNodeKeyFactory
    *   The factory.
    */
   protected function getNodeKeyFactory() {
@@ -214,7 +217,7 @@ class EntityReferenceHierarchy extends EntityReferenceItem {
   /**
    * Gets the entity type definition.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface
+   * @return EntityTypeInterface
    *   Entity type.
    */
   protected function entityTypeDefinition() {
@@ -224,7 +227,7 @@ class EntityReferenceHierarchy extends EntityReferenceItem {
   /**
    * Loads other children of the given parent.
    *
-   * @param \PNX\NestedSet\Node[] $siblings
+   * @param Node[] $siblings
    *   Target siblings.
    *
    * @return \SplObjectStorage
@@ -263,11 +266,11 @@ class EntityReferenceHierarchy extends EntityReferenceItem {
   /**
    * Gets siblings.
    *
-   * @param \Drupal\entity_hierarchy\Storage\NestedSetStorage $storage
+   * @param NestedSetStorage $storage
    *   Storage.
-   * @param \PNX\NestedSet\Node $parentNode
+   * @param Node $parentNode
    *   Existing parent node.
-   * @param \PNX\NestedSet\Node|\PNX\NestedSet\NodeKey $childNode
+   * @param Node|NodeKey $childNode
    *   Child node.
    *
    * @return \SplObjectStorage|bool
@@ -321,7 +324,7 @@ class EntityReferenceHierarchy extends EntityReferenceItem {
    *   TRUE if the node is brand new, FALSE if it needs to be moved from
    *   elsewhere in the tree.
    *
-   * @return \Drupal\entity_hierarchy\Storage\InsertPosition|bool
+   * @return InsertPosition|bool
    *   Insert position, FALSE if the siblings no longer exist.
    */
   public function getInsertPosition(array $weightOrderedSiblings, $weight, $isNewNode) {
diff --git a/src/Plugin/Field/FieldType/EntityReferenceHierarchyFieldItemList.php b/src/Plugin/Field/FieldType/EntityReferenceHierarchyFieldItemList.php
index 8013706..f6c412b 100644
--- a/src/Plugin/Field/FieldType/EntityReferenceHierarchyFieldItemList.php
+++ b/src/Plugin/Field/FieldType/EntityReferenceHierarchyFieldItemList.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_hierarchy\Plugin\Field\FieldType;
 
+use Drupal\entity_hierarchy\Storage\NestedSetNodeKeyFactory;
+use PNX\NestedSet\NestedSetInterface;
 use Drupal\Core\Field\EntityReferenceFieldItemList;
 use Drupal\entity_hierarchy\Storage\TreeLockTrait;
 
@@ -36,7 +38,7 @@ class EntityReferenceHierarchyFieldItemList extends EntityReferenceFieldItemList
   /**
    * Returns the node factory.
    *
-   * @return \Drupal\entity_hierarchy\Storage\NestedSetNodeKeyFactory
+   * @return NestedSetNodeKeyFactory
    *   The factory.
    */
   protected function getNestedSetNodeFactory() {
@@ -46,7 +48,7 @@ class EntityReferenceHierarchyFieldItemList extends EntityReferenceFieldItemList
   /**
    * Returns the tree storage.
    *
-   * @return \PNX\NestedSet\NestedSetInterface
+   * @return NestedSetInterface
    *   Tree storage.
    */
   protected function getTreeStorage() {
diff --git a/src/Plugin/Validation/Constraint/ValidHierarchyReferenceConstraintValidator.php b/src/Plugin/Validation/Constraint/ValidHierarchyReferenceConstraintValidator.php
index cb40675..bb572e8 100644
--- a/src/Plugin/Validation/Constraint/ValidHierarchyReferenceConstraintValidator.php
+++ b/src/Plugin/Validation/Constraint/ValidHierarchyReferenceConstraintValidator.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_hierarchy\Plugin\Validation\Constraint;
 
+use PNX\NestedSet\Storage\DbalNestedSet;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\entity_hierarchy\Storage\NestedSetNodeKeyFactory;
@@ -19,32 +20,32 @@ class ValidHierarchyReferenceConstraintValidator extends ConstraintValidator imp
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Node storage factory.
    *
-   * @var \Drupal\entity_hierarchy\Storage\NestedSetStorageFactory
+   * @var NestedSetStorageFactory
    */
   protected $nestedSetStorageFactory;
 
   /**
    * Node key factory.
    *
-   * @var \Drupal\entity_hierarchy\Storage\NestedSetNodeKeyFactory
+   * @var NestedSetNodeKeyFactory
    */
   protected $keyFactory;
 
   /**
    * Constructs a ValidReferenceConstraintValidator object.
    *
-   * @param \Drupal\entity_hierarchy\Storage\NestedSetStorageFactory $nestedSetStorageFactory
+   * @param NestedSetStorageFactory $nestedSetStorageFactory
    *   Nested set factory.
-   * @param \Drupal\entity_hierarchy\Storage\NestedSetNodeKeyFactory $keyFactory
+   * @param NestedSetNodeKeyFactory $keyFactory
    *   Key factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(NestedSetStorageFactory $nestedSetStorageFactory, NestedSetNodeKeyFactory $keyFactory, EntityTypeManagerInterface $entity_type_manager) {
@@ -110,7 +111,7 @@ class ValidHierarchyReferenceConstraintValidator extends ConstraintValidator imp
     $this_entity = $value->getEntity();
     $thisNode = $this->keyFactory->fromEntity($this_entity);
     $target_type = $this_entity->getEntityTypeId();
-    /** @var \PNX\NestedSet\Storage\DbalNestedSet $storage */
+    /** @var DbalNestedSet $storage */
     $storage = $this->nestedSetStorageFactory->get($value->getFieldDefinition()->getFieldStorageDefinition()->getName(), $target_type);
     $children = array_map(function (Node $node) {
       return $node->getId();
diff --git a/src/Plugin/views/argument/EntityHierarchyArgumentPluginBase.php b/src/Plugin/views/argument/EntityHierarchyArgumentPluginBase.php
index 15d1f35..4fc3341 100644
--- a/src/Plugin/views/argument/EntityHierarchyArgumentPluginBase.php
+++ b/src/Plugin/views/argument/EntityHierarchyArgumentPluginBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_hierarchy\Plugin\views\argument;
 
+use Drupal\entity_hierarchy\Storage\NestedSetStorage;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -17,19 +19,19 @@ abstract class EntityHierarchyArgumentPluginBase extends ArgumentPluginBase {
   /**
    * Set storage.
    *
-   * @var \Drupal\entity_hierarchy\Storage\NestedSetStorageFactory
+   * @var NestedSetStorageFactory
    */
   protected $nestedSetStorageFactory;
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
   /**
    * Node key factory.
    *
-   * @var \Drupal\entity_hierarchy\Storage\NestedSetNodeKeyFactory
+   * @var NestedSetNodeKeyFactory
    */
   protected $nodeKeyFactory;
   /**
@@ -50,13 +52,13 @@ abstract class EntityHierarchyArgumentPluginBase extends ArgumentPluginBase {
    *   Plugin ID.
    * @param mixed $plugin_definition
    *   Definition.
-   * @param \Drupal\entity_hierarchy\Storage\NestedSetStorageFactory $nestedSetStorageFactory
+   * @param NestedSetStorageFactory $nestedSetStorageFactory
    *   Nested set storage.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
-   * @param \Drupal\entity_hierarchy\Storage\NestedSetNodeKeyFactory $nodeKeyFactory
+   * @param NestedSetNodeKeyFactory $nodeKeyFactory
    *   Node key factory.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   Database connection.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, NestedSetStorageFactory $nestedSetStorageFactory, EntityTypeManagerInterface $entityTypeManager, NestedSetNodeKeyFactory $nodeKeyFactory, Connection $database) {
@@ -103,7 +105,7 @@ abstract class EntityHierarchyArgumentPluginBase extends ArgumentPluginBase {
   /**
    * Returns the tree storage.
    *
-   * @return \Drupal\entity_hierarchy\Storage\NestedSetStorage
+   * @return NestedSetStorage
    *   Tree storage.
    */
   protected function getTreeStorage() {
@@ -125,7 +127,7 @@ abstract class EntityHierarchyArgumentPluginBase extends ArgumentPluginBase {
   /**
    * Loads the parent entity from the argument.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   Parent entity if exists.
    */
   protected function loadEntity() {
diff --git a/src/Plugin/views/field/HierarchyTreeSummary.php b/src/Plugin/views/field/HierarchyTreeSummary.php
index b2cbb50..68816e9 100644
--- a/src/Plugin/views/field/HierarchyTreeSummary.php
+++ b/src/Plugin/views/field/HierarchyTreeSummary.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_hierarchy\Plugin\views\field;
 
+use Drupal\entity_hierarchy\Storage\NestedSetStorage;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -30,15 +31,15 @@ class HierarchyTreeSummary extends FieldPluginBase {
    *   Plugin ID.
    * @param mixed $plugin_definition
    *   Definition.
-   * @param \Drupal\entity_hierarchy\Storage\NestedSetStorageFactory $nestedSetStorageFactory
+   * @param NestedSetStorageFactory $nestedSetStorageFactory
    *   Nested set storage.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
-   * @param \Drupal\entity_hierarchy\Storage\NestedSetNodeKeyFactory $nodeKeyFactory
+   * @param NestedSetNodeKeyFactory $nodeKeyFactory
    *   Node key factory.
-   * @param \Drupal\entity_hierarchy\Storage\EntityTreeNodeMapperInterface $tree_mapper
+   * @param EntityTreeNodeMapperInterface $tree_mapper
    *   Nested set node to entity mapper.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   Database connection.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, NestedSetStorageFactory $nestedSetStorageFactory, EntityTypeManagerInterface $entityTypeManager, NestedSetNodeKeyFactory $nodeKeyFactory, EntityTreeNodeMapperInterface $tree_mapper, Connection $database) {
@@ -126,7 +127,7 @@ class HierarchyTreeSummary extends FieldPluginBase {
   /**
    * Returns the tree storage.
    *
-   * @return \Drupal\entity_hierarchy\Storage\NestedSetStorage
+   * @return NestedSetStorage
    *   Tree storage.
    */
   protected function getTreeStorage() {
diff --git a/src/Plugin/views/relationship/HierarchyRoot.php b/src/Plugin/views/relationship/HierarchyRoot.php
index 2964dd3..29fdaf5 100644
--- a/src/Plugin/views/relationship/HierarchyRoot.php
+++ b/src/Plugin/views/relationship/HierarchyRoot.php
@@ -19,7 +19,7 @@ class HierarchyRoot extends RelationshipPluginBase {
   /**
    * Database.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
@@ -32,7 +32,7 @@ class HierarchyRoot extends RelationshipPluginBase {
    *   Plugin ID.
    * @param mixed $plugin_definition
    *   Definition.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   Database connection.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, Connection $database) {
diff --git a/src/Routing/EntityHierarchyRouteProvider.php b/src/Routing/EntityHierarchyRouteProvider.php
index c2174e1..0ed02bc 100644
--- a/src/Routing/EntityHierarchyRouteProvider.php
+++ b/src/Routing/EntityHierarchyRouteProvider.php
@@ -28,16 +28,16 @@ class EntityHierarchyRouteProvider implements EntityRouteProviderInterface, Enti
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * Constructs a new DefaultHtmlRouteProvider.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager) {
@@ -58,10 +58,10 @@ class EntityHierarchyRouteProvider implements EntityRouteProviderInterface, Enti
   /**
    * Provides routes for entities.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\RouteCollection|\Symfony\Component\Routing\Route[]
+   * @return RouteCollection|Route[]
    *   Returns a route collection or an array of routes keyed by name, like
    *   route_callbacks inside 'routing.yml' files.
    */
diff --git a/src/Routing/ReorderChildrenAccess.php b/src/Routing/ReorderChildrenAccess.php
index 5e5aa29..67e3ed8 100644
--- a/src/Routing/ReorderChildrenAccess.php
+++ b/src/Routing/ReorderChildrenAccess.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_hierarchy\Routing;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessCheckInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityInterface;
@@ -20,30 +21,30 @@ class ReorderChildrenAccess implements AccessCheckInterface {
   /**
    * Route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * Parent candidate service.
    *
-   * @var \Drupal\entity_hierarchy\Information\ParentCandidateInterface
+   * @var ParentCandidateInterface
    */
   protected $parentCandidate;
 
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new ReorderChildrenAccess object.
    *
-   * @param \Drupal\entity_hierarchy\Information\ParentCandidateInterface $parentCandidate
+   * @param ParentCandidateInterface $parentCandidate
    *   Parent candidate service.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $routeMatch
+   * @param RouteMatchInterface $routeMatch
    *   Route match.
    */
   public function __construct(ParentCandidateInterface $parentCandidate, RouteMatchInterface $routeMatch, EntityTypeManagerInterface $entityTypeManager) {
@@ -62,14 +63,14 @@ class ReorderChildrenAccess implements AccessCheckInterface {
   /**
    * Checks access.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   Route being access checked.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(Route $route, Request $request = NULL, AccountInterface $account = NULL) {
diff --git a/src/Storage/EntityTreeNodeMapper.php b/src/Storage/EntityTreeNodeMapper.php
index d98f0d7..296eb38 100644
--- a/src/Storage/EntityTreeNodeMapper.php
+++ b/src/Storage/EntityTreeNodeMapper.php
@@ -14,14 +14,14 @@ class EntityTreeNodeMapper implements EntityTreeNodeMapperInterface {
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new EntityTreeNodeMapper object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
diff --git a/src/Storage/EntityTreeNodeMapperInterface.php b/src/Storage/EntityTreeNodeMapperInterface.php
index d5349d1..55a6064 100644
--- a/src/Storage/EntityTreeNodeMapperInterface.php
+++ b/src/Storage/EntityTreeNodeMapperInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_hierarchy\Storage;
 
+use PNX\NestedSet\Node;
 use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
 
 /**
@@ -14,9 +15,9 @@ interface EntityTreeNodeMapperInterface {
    *
    * @param string $entity_type_id
    *   Entity Type ID.
-   * @param \PNX\NestedSet\Node[] $nodes
+   * @param Node[] $nodes
    *   Tree node to load entity for.
-   * @param \Drupal\Core\Cache\RefinableCacheableDependencyInterface $cache
+   * @param RefinableCacheableDependencyInterface $cache
    *   (optional) Cache metadata.
    *
    * @return \SplObjectStorage
@@ -29,9 +30,9 @@ interface EntityTreeNodeMapperInterface {
    *
    * @param string $entity_type_id
    *   Entity Type ID.
-   * @param \PNX\NestedSet\Node[] $nodes
+   * @param Node[] $nodes
    *   Tree node to load entity for.
-   * @param \Drupal\Core\Cache\RefinableCacheableDependencyInterface $cache
+   * @param RefinableCacheableDependencyInterface $cache
    *   (optional) Cache metadata.
    *
    * @return \SplObjectStorage
diff --git a/src/Storage/InsertPosition.php b/src/Storage/InsertPosition.php
index 684d06a..7e9e805 100644
--- a/src/Storage/InsertPosition.php
+++ b/src/Storage/InsertPosition.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_hierarchy\Storage;
 
+use PNX\NestedSet\NodeKey;
 use PNX\NestedSet\Node;
 
 /**
@@ -25,7 +26,7 @@ class InsertPosition {
   /**
    * Node to insert before or after.
    *
-   * @var \PNX\NestedSet\Node
+   * @var Node
    */
   protected $reference;
 
@@ -39,7 +40,7 @@ class InsertPosition {
   /**
    * Constructs a new InsertPosition object.
    *
-   * @param \PNX\NestedSet\Node $reference
+   * @param Node $reference
    *   Node to insert before or after.
    * @param bool $insert
    *   TRUE if inserting rather than moving.
@@ -55,12 +56,12 @@ class InsertPosition {
   /**
    * Perform the insert.
    *
-   * @param \Drupal\entity_hierarchy\Storage\NestedSetStorage $storage
+   * @param NestedSetStorage $storage
    *   Storage.
-   * @param \PNX\NestedSet\Node|\PNX\NestedSet\NodeKey $node
+   * @param Node|NodeKey $node
    *   Node to create or insert.
    *
-   * @return \PNX\NestedSet\Node
+   * @return Node
    *   Inserted node.
    */
   public function performInsert(NestedSetStorage $storage, $node) {
diff --git a/src/Storage/NestedSetNodeKeyFactory.php b/src/Storage/NestedSetNodeKeyFactory.php
index aa837d8..07030f6 100644
--- a/src/Storage/NestedSetNodeKeyFactory.php
+++ b/src/Storage/NestedSetNodeKeyFactory.php
@@ -13,10 +13,10 @@ class NestedSetNodeKeyFactory {
   /**
    * Creates a new node from an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity to convert into nested set node.
    *
-   * @return \PNX\NestedSet\NodeKey
+   * @return NodeKey
    *   New node.
    */
   public function fromEntity(ContentEntityInterface $entity) {
diff --git a/src/Storage/NestedSetStorage.php b/src/Storage/NestedSetStorage.php
index 7875ff9..8eefe60 100644
--- a/src/Storage/NestedSetStorage.php
+++ b/src/Storage/NestedSetStorage.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_hierarchy\Storage;
 
+use PNX\NestedSet\Node;
+use PNX\NestedSet\NodeKey;
 use Doctrine\DBAL\Connection;
 use PNX\NestedSet\Storage\DbalNestedSet;
 use PNX\NestedSet\Storage\DbalNestedSetSchema;
@@ -10,46 +12,46 @@ use Psr\Log\LoggerInterface;
 /**
  * Wraps the library nested set implementation with JIT table creation.
  *
- * @method \PNX\NestedSet\Node addRootNode(\PNX\NestedSet\NodeKey $nodeKey)
- * @method \PNX\NestedSet\Node addNodeBelow(\PNX\NestedSet\Node $target, \PNX\NestedSet\NodeKey $nodeKey)
- * @method \PNX\NestedSet\Node addNodeBefore(\PNX\NestedSet\Node $target, \PNX\NestedSet\NodeKey $nodeKey)
- * @method \PNX\NestedSet\Node addNodeAfter(\PNX\NestedSet\Node $target, \PNX\NestedSet\NodeKey $nodeKey)
- * @method \PNX\NestedSet\Node[] findDescendants(\PNX\NestedSet\NodeKey $nodeKey, int $depth = 0, int $start = 1)
- * @method \PNX\NestedSet\Node[] findChildren(\PNX\NestedSet\NodeKey $nodeKey)
- * @method \PNX\NestedSet\Node getNode(\PNX\NestedSet\NodeKey $nodeKey)
- * @method \PNX\NestedSet\Node[] findAncestors(\PNX\NestedSet\NodeKey $nodeKey)
- * @method \PNX\NestedSet\Node findRoot(\PNX\NestedSet\NodeKey $nodeKey)
- * @method \PNX\NestedSet\Node findParent(\PNX\NestedSet\NodeKey $nodeKey)
- * @method \PNX\NestedSet\Node[] getTree()
- * @method void deleteNode(\PNX\NestedSet\Node $node)
- * @method void deleteSubTree(\PNX\NestedSet\Node $node)
- * @method void moveSubTreeToRoot(\PNX\NestedSet\Node $node)
- * @method void moveSubTreeBelow(\PNX\NestedSet\Node $target, \PNX\NestedSet\Node $node)
- * @method void moveSubTreeBefore(\PNX\NestedSet\Node $target, \PNX\NestedSet\Node $node)
- * @method void moveSubTreeAfter(\PNX\NestedSet\Node $target, \PNX\NestedSet\Node $node)
- * @method void adoptChildren(\PNX\NestedSet\Node $oldParent, \PNX\NestedSet\Node $newParent)
- * @method \PNX\NestedSet\Node getNodeAtPosition(int $left)
+ * @method Node addRootNode(NodeKey $nodeKey)
+ * @method Node addNodeBelow(Node $target, NodeKey $nodeKey)
+ * @method Node addNodeBefore(Node $target, NodeKey $nodeKey)
+ * @method Node addNodeAfter(Node $target, NodeKey $nodeKey)
+ * @method Node[] findDescendants(NodeKey $nodeKey, int $depth = 0, int $start = 1)
+ * @method Node[] findChildren(NodeKey $nodeKey)
+ * @method Node getNode(NodeKey $nodeKey)
+ * @method Node[] findAncestors(NodeKey $nodeKey)
+ * @method Node findRoot(NodeKey $nodeKey)
+ * @method Node findParent(NodeKey $nodeKey)
+ * @method Node[] getTree()
+ * @method void deleteNode(Node $node)
+ * @method void deleteSubTree(Node $node)
+ * @method void moveSubTreeToRoot(Node $node)
+ * @method void moveSubTreeBelow(Node $target, Node $node)
+ * @method void moveSubTreeBefore(Node $target, Node $node)
+ * @method void moveSubTreeAfter(Node $target, Node $node)
+ * @method void adoptChildren(Node $oldParent, Node $newParent)
+ * @method Node getNodeAtPosition(int $left)
  */
 class NestedSetStorage {
 
   /**
    * Schema for storage.
    *
-   * @var \PNX\NestedSet\Storage\DbalNestedSetSchema
+   * @var DbalNestedSetSchema
    */
   protected $schema;
 
   /**
    * Proxy for storage.
    *
-   * @var \PNX\NestedSet\Storage\DbalNestedSet
+   * @var DbalNestedSet
    */
   protected $proxy;
 
   /**
    * Logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
@@ -63,11 +65,11 @@ class NestedSetStorage {
   /**
    * Constructs a new NestedSetStorage object.
    *
-   * @param \Doctrine\DBAL\Connection $connection
+   * @param Connection $connection
    *   Connection.
    * @param string $table_name
    *   Table name.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Logger.
    */
   public function __construct(Connection $connection, $table_name, LoggerInterface $logger) {
diff --git a/src/Storage/NestedSetStorageFactory.php b/src/Storage/NestedSetStorageFactory.php
index 1a61468..c9e4e21 100644
--- a/src/Storage/NestedSetStorageFactory.php
+++ b/src/Storage/NestedSetStorageFactory.php
@@ -35,7 +35,7 @@ class NestedSetStorageFactory {
   /**
    * Logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
@@ -46,7 +46,7 @@ class NestedSetStorageFactory {
    *   Dbal Connection.
    * @param \Drupal\Core\Database\Connection $drupalConnection
    *   Drupal connection.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Logger.
    */
   public function __construct(Connection $connection, DrupalConnection $drupalConnection, LoggerInterface $logger) {
@@ -63,7 +63,7 @@ class NestedSetStorageFactory {
    * @param string $entity_type_id
    *   Entity Type ID.
    *
-   * @return \Drupal\entity_hierarchy\Storage\NestedSetStorage
+   * @return NestedSetStorage
    *   Nested set for given field.
    */
   public function get($field_name, $entity_type_id) {
@@ -77,7 +77,7 @@ class NestedSetStorageFactory {
    * @param string $table_name
    *   Table name.
    *
-   * @return \Drupal\entity_hierarchy\Storage\NestedSetStorage
+   * @return NestedSetStorage
    *   Nested set for given field.
    *
    * @todo Remove this in favour of derivative argument plugins?
diff --git a/src/Storage/ParentEntityDeleteUpdater.php b/src/Storage/ParentEntityDeleteUpdater.php
index 7fa74fb..cd57c2a 100644
--- a/src/Storage/ParentEntityDeleteUpdater.php
+++ b/src/Storage/ParentEntityDeleteUpdater.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_hierarchy\Storage;
 
+use Pnx\NestedSet\NestedSetInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\entity_hierarchy\Information\ParentCandidateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -14,20 +15,20 @@ class ParentEntityDeleteUpdater extends ParentEntityReactionBase {
   /**
    * Tree node mapper.
    *
-   * @var \Drupal\entity_hierarchy\Storage\EntityTreeNodeMapperInterface
+   * @var EntityTreeNodeMapperInterface
    */
   protected $treeNodeMapper;
 
   /**
    * Constructs a new ParentEntityRevisionUpdater object.
    *
-   * @param \Drupal\entity_hierarchy\Storage\NestedSetStorageFactory $nestedSetStorageFactory
+   * @param NestedSetStorageFactory $nestedSetStorageFactory
    *   Nested set storage factory.
-   * @param \Drupal\entity_hierarchy\Storage\NestedSetNodeKeyFactory $nodeKeyFactory
+   * @param NestedSetNodeKeyFactory $nodeKeyFactory
    *   Node key factory.
-   * @param \Drupal\entity_hierarchy\Information\ParentCandidateInterface $parentCandidate
+   * @param ParentCandidateInterface $parentCandidate
    *   Parent candidate service.
-   * @param \Drupal\entity_hierarchy\Storage\EntityTreeNodeMapperInterface $treeNodeMapper
+   * @param EntityTreeNodeMapperInterface $treeNodeMapper
    *   Tree node mapper.
    */
   public function __construct(NestedSetStorageFactory $nestedSetStorageFactory, NestedSetNodeKeyFactory $nodeKeyFactory, ParentCandidateInterface $parentCandidate, EntityTreeNodeMapperInterface $treeNodeMapper) {
@@ -50,7 +51,7 @@ class ParentEntityDeleteUpdater extends ParentEntityReactionBase {
   /**
    * Moves children to their grandparent or root.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $parent
+   * @param ContentEntityInterface $parent
    *   Parent being deleted.
    */
   public function moveChildren(ContentEntityInterface $parent) {
@@ -64,7 +65,7 @@ class ParentEntityDeleteUpdater extends ParentEntityReactionBase {
     }
     $stubNode = $this->nodeKeyFactory->fromEntity($parent);
     foreach ($fields as $field_name) {
-      /** @var \Pnx\NestedSet\NestedSetInterface $storage */
+      /** @var NestedSetInterface $storage */
       $storage = $this->nestedSetStorageFactory->get($field_name, $parent->getEntityTypeId());
       if ($children = $storage->findChildren($stubNode)) {
         $parentNode = $storage->findParent($stubNode);
diff --git a/src/Storage/ParentEntityReactionBase.php b/src/Storage/ParentEntityReactionBase.php
index af176d9..245d984 100644
--- a/src/Storage/ParentEntityReactionBase.php
+++ b/src/Storage/ParentEntityReactionBase.php
@@ -16,32 +16,32 @@ abstract class ParentEntityReactionBase implements ContainerInjectionInterface {
   /**
    * Nested set storage.
    *
-   * @var \Drupal\entity_hierarchy\Storage\NestedSetStorageFactory
+   * @var NestedSetStorageFactory
    */
   protected $nestedSetStorageFactory;
 
   /**
    * Node key factory.
    *
-   * @var \Drupal\entity_hierarchy\Storage\NestedSetNodeKeyFactory
+   * @var NestedSetNodeKeyFactory
    */
   protected $nodeKeyFactory;
 
   /**
    * Parent candidate interface.
    *
-   * @var \Drupal\entity_hierarchy\Information\ParentCandidateInterface
+   * @var ParentCandidateInterface
    */
   protected $parentCandidate;
 
   /**
    * Constructs a new ParentEntityRevisionUpdater object.
    *
-   * @param \Drupal\entity_hierarchy\Storage\NestedSetStorageFactory $nestedSetStorageFactory
+   * @param NestedSetStorageFactory $nestedSetStorageFactory
    *   Nested set storage factory.
-   * @param \Drupal\entity_hierarchy\Storage\NestedSetNodeKeyFactory $nodeKeyFactory
+   * @param NestedSetNodeKeyFactory $nodeKeyFactory
    *   Node key factory.
-   * @param \Drupal\entity_hierarchy\Information\ParentCandidateInterface $parentCandidate
+   * @param ParentCandidateInterface $parentCandidate
    *   Parent candidate service.
    */
   public function __construct(NestedSetStorageFactory $nestedSetStorageFactory, NestedSetNodeKeyFactory $nodeKeyFactory, ParentCandidateInterface $parentCandidate) {
diff --git a/src/Storage/ParentEntityRevisionUpdater.php b/src/Storage/ParentEntityRevisionUpdater.php
index 385f41f..f322fe7 100644
--- a/src/Storage/ParentEntityRevisionUpdater.php
+++ b/src/Storage/ParentEntityRevisionUpdater.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_hierarchy\Storage;
 
+use Pnx\NestedSet\NestedSetInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 
 /**
@@ -12,9 +13,9 @@ class ParentEntityRevisionUpdater extends ParentEntityReactionBase {
   /**
    * Move children from old revision to new revision.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $oldRevision
+   * @param ContentEntityInterface $oldRevision
    *   Old revision.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $newRevision
+   * @param ContentEntityInterface $newRevision
    *   New revision.
    */
   public function moveChildren(ContentEntityInterface $oldRevision, ContentEntityInterface $newRevision) {
@@ -34,7 +35,7 @@ class ParentEntityRevisionUpdater extends ParentEntityReactionBase {
     $newNodeKey = $this->nodeKeyFactory->fromEntity($newRevision);
     foreach ($fields as $field_name) {
       $this->lockTree($field_name, $newRevision->getEntityTypeId());
-      /** @var \Pnx\NestedSet\NestedSetInterface $storage */
+      /** @var NestedSetInterface $storage */
       $storage = $this->nestedSetStorageFactory->get($field_name, $newRevision->getEntityTypeId());
       if (!$newParent = $storage->getNode($newNodeKey)) {
         $newParent = $storage->addRootNode($newNodeKey);
diff --git a/src/Storage/TreeLockTrait.php b/src/Storage/TreeLockTrait.php
index 1911b19..df626be 100644
--- a/src/Storage/TreeLockTrait.php
+++ b/src/Storage/TreeLockTrait.php
@@ -12,14 +12,14 @@ trait TreeLockTrait {
   /**
    * Lock backend.
    *
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected $lockBackend;
 
   /**
    * Gets lock backend.
    *
-   * @return \Drupal\Core\Lock\LockBackendInterface
+   * @return LockBackendInterface
    *   Lock backend.
    */
   protected function lockBackend() {
@@ -32,7 +32,7 @@ trait TreeLockTrait {
   /**
    * Sets lock backend.
    *
-   * @param \Drupal\Core\Lock\LockBackendInterface $lockBackend
+   * @param LockBackendInterface $lockBackend
    *   Lock backend.
    *
    * @return $this
diff --git a/src/Storage/TreeRebuilder.php b/src/Storage/TreeRebuilder.php
index 1480557..940f214 100644
--- a/src/Storage/TreeRebuilder.php
+++ b/src/Storage/TreeRebuilder.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_hierarchy\Storage;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Utility\Number;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -15,23 +17,23 @@ class TreeRebuilder {
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * Constructs a new TreeRebuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   Entity field manager
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, EntityFieldManagerInterface $entity_field_manager) {
@@ -130,8 +132,8 @@ class TreeRebuilder {
    * @param array $context
    *   Batch context.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   //@codingStandardsIgnoreStart
   public static function rebuildTree($field_name, $entity_type_id, $entity_id, &$context) {
diff --git a/tests/src/Functional/DeleteParentWarningTest.php b/tests/src/Functional/DeleteParentWarningTest.php
index b580e92..6be32c5 100644
--- a/tests/src/Functional/DeleteParentWarningTest.php
+++ b/tests/src/Functional/DeleteParentWarningTest.php
@@ -37,7 +37,7 @@ class DeleteParentWarningTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->setupEntityHierarchyField(static::ENTITY_TYPE, static::ENTITY_TYPE, static::FIELD_NAME);
     $this->additionalSetup();
diff --git a/tests/src/Functional/ForwardRevisionNodeValidationTest.php b/tests/src/Functional/ForwardRevisionNodeValidationTest.php
index 33c4730..a4a2481 100644
--- a/tests/src/Functional/ForwardRevisionNodeValidationTest.php
+++ b/tests/src/Functional/ForwardRevisionNodeValidationTest.php
@@ -44,7 +44,7 @@ class ForwardRevisionNodeValidationTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $content_type = $this->drupalCreateContentType([
       'type' => 'article',
diff --git a/tests/src/Functional/HideWeightFieldFunctionalTest.php b/tests/src/Functional/HideWeightFieldFunctionalTest.php
index e885b8b..993915f 100644
--- a/tests/src/Functional/HideWeightFieldFunctionalTest.php
+++ b/tests/src/Functional/HideWeightFieldFunctionalTest.php
@@ -39,7 +39,7 @@ class HideWeightFieldFunctionalTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->setupEntityHierarchyField(static::ENTITY_TYPE, static::ENTITY_TYPE, static::FIELD_NAME);
     $this->additionalSetup();
diff --git a/tests/src/Functional/ManageDisplayTest.php b/tests/src/Functional/ManageDisplayTest.php
index 7a15c9b..1dc8e18 100644
--- a/tests/src/Functional/ManageDisplayTest.php
+++ b/tests/src/Functional/ManageDisplayTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\entity_hierarchy\Functional;
 
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\block\Traits\BlockCreationTrait;
 use Drupal\Tests\BrowserTestBase;
@@ -42,7 +43,7 @@ class ManageDisplayTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->setupEntityHierarchyField(static::ENTITY_TYPE, static::ENTITY_TYPE, static::FIELD_NAME);
     $this->additionalSetup();
@@ -59,7 +60,7 @@ class ManageDisplayTest extends BrowserTestBase {
       'administer entity_test content',
     ]));
 
-    /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display */
+    /** @var EntityViewDisplayInterface $display */
     $display = \Drupal::service('entity_display.repository')->getViewDisplay('entity_test', 'entity_test');
     $display->setComponent('parents', [
       'type' => 'entity_reference_hierarchy_label',
diff --git a/tests/src/Functional/ReorderChildrenContentModerationFunctionalTest.php b/tests/src/Functional/ReorderChildrenContentModerationFunctionalTest.php
index 47fe1c5..82f2fe3 100644
--- a/tests/src/Functional/ReorderChildrenContentModerationFunctionalTest.php
+++ b/tests/src/Functional/ReorderChildrenContentModerationFunctionalTest.php
@@ -45,7 +45,7 @@ class ReorderChildrenContentModerationFunctionalTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->placeBlock('local_tasks_block');
     $this->placeBlock('page_title_block');
@@ -102,7 +102,7 @@ class ReorderChildrenContentModerationFunctionalTest extends BrowserTestBase {
     }, $children));
 
     $this->drupalGet($this->parent->toUrl('edit-form'));
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'name[0][value]' => 'Parent - draft',
       'revision' => TRUE,
       'moderation_state[0][state]' => 'draft',
@@ -125,7 +125,7 @@ class ReorderChildrenContentModerationFunctionalTest extends BrowserTestBase {
     // Publish the draft and confirm we see same children.
     $this->drupalGet($this->parent->toUrl('edit-form'));
     $this->assertEquals('Current state Draft', $this->cssSelect('#edit-moderation-state-0-current')[0]->getText());
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'name[0][value]' => 'Parent - published',
       'revision' => TRUE,
       'moderation_state[0][state]' => 'published',
diff --git a/tests/src/Functional/ReorderChildrenFunctionalTest.php b/tests/src/Functional/ReorderChildrenFunctionalTest.php
index 6d1bf1c..7936cb4 100644
--- a/tests/src/Functional/ReorderChildrenFunctionalTest.php
+++ b/tests/src/Functional/ReorderChildrenFunctionalTest.php
@@ -45,7 +45,7 @@ class ReorderChildrenFunctionalTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->setupEntityHierarchyField(static::ENTITY_TYPE, static::ENTITY_TYPE, static::FIELD_NAME);
     $this->additionalSetup();
diff --git a/tests/src/Functional/ReorderChildrenWithRevisionsFunctionalTest.php b/tests/src/Functional/ReorderChildrenWithRevisionsFunctionalTest.php
index 340f315..a720571 100644
--- a/tests/src/Functional/ReorderChildrenWithRevisionsFunctionalTest.php
+++ b/tests/src/Functional/ReorderChildrenWithRevisionsFunctionalTest.php
@@ -79,7 +79,7 @@ class ReorderChildrenWithRevisionsFunctionalTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->setupEntityHierarchyField(static::ENTITY_TYPE, static::ENTITY_TYPE, static::FIELD_NAME);
     $this->additionalSetup();
diff --git a/tests/src/Kernel/AutocompleteHandlerTest.php b/tests/src/Kernel/AutocompleteHandlerTest.php
index 0139bb3..8b45a74 100644
--- a/tests/src/Kernel/AutocompleteHandlerTest.php
+++ b/tests/src/Kernel/AutocompleteHandlerTest.php
@@ -25,7 +25,7 @@ class AutocompleteHandlerTest extends EntityHierarchyKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $user = $this->createUser([], ['view test entity']);
     $this->container->get('account_switcher')->switchTo($user);
diff --git a/tests/src/Kernel/EntityHierarchyKernelTestBase.php b/tests/src/Kernel/EntityHierarchyKernelTestBase.php
index 552ae68..4dbeb8d 100644
--- a/tests/src/Kernel/EntityHierarchyKernelTestBase.php
+++ b/tests/src/Kernel/EntityHierarchyKernelTestBase.php
@@ -30,7 +30,7 @@ abstract class EntityHierarchyKernelTestBase extends EntityKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema(static::ENTITY_TYPE);
     $this->setupEntityHierarchyField(static::ENTITY_TYPE, static::ENTITY_TYPE, static::FIELD_NAME);
diff --git a/tests/src/Kernel/EntityHierarchyValidationTest.php b/tests/src/Kernel/EntityHierarchyValidationTest.php
index ec0c5fc..5a6f592 100644
--- a/tests/src/Kernel/EntityHierarchyValidationTest.php
+++ b/tests/src/Kernel/EntityHierarchyValidationTest.php
@@ -13,6 +13,7 @@ class EntityHierarchyValidationTest extends EntityHierarchyKernelTestBase {
 
   /**
    * Tests validation.
+   * @doesNotPerformAssertions
    */
   public function testValidation() {
     // Create root user.
@@ -36,7 +37,7 @@ class EntityHierarchyValidationTest extends EntityHierarchyKernelTestBase {
   /**
    * Tests violations.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $referencedEntity
+   * @param EntityInterface $referencedEntity
    *   Referenced entity.
    */
   protected function doTestViolations(EntityInterface $referencedEntity) {
diff --git a/tests/src/Kernel/HierarchyNestedSetIntegrationTest.php b/tests/src/Kernel/HierarchyNestedSetIntegrationTest.php
index 5d1e9a1..1d4f2fb 100644
--- a/tests/src/Kernel/HierarchyNestedSetIntegrationTest.php
+++ b/tests/src/Kernel/HierarchyNestedSetIntegrationTest.php
@@ -300,9 +300,9 @@ class HierarchyNestedSetIntegrationTest extends EntityHierarchyKernelTestBase {
   /**
    * Test parent/child relationship.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $child
+   * @param EntityInterface $child
    *   Child node.
-   * @param \Drupal\Core\Entity\EntityInterface $parent
+   * @param EntityInterface $parent
    *   (optional) Parent to test relationship with, defaults to the one
    *   created in setup if not passed.
    * @param int $baseDepth
@@ -326,9 +326,9 @@ class HierarchyNestedSetIntegrationTest extends EntityHierarchyKernelTestBase {
   /**
    * Test parent/child relationship.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $child
+   * @param EntityInterface $child
    *   Child node.
-   * @param \Drupal\Core\Entity\EntityInterface $sibling
+   * @param EntityInterface $sibling
    *   Sibling node.
    */
   protected function assertParentWithTwoChildren(EntityInterface $child, EntityInterface $sibling) {
@@ -352,7 +352,7 @@ class HierarchyNestedSetIntegrationTest extends EntityHierarchyKernelTestBase {
   /**
    * Gets the revision ID for an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity revision ID if it exists, otherwise entity ID.
    *
    * @return int
@@ -369,10 +369,10 @@ class HierarchyNestedSetIntegrationTest extends EntityHierarchyKernelTestBase {
   /**
    * Gets children of a given node.
    *
-   * @param \PNX\NestedSet\Node $parent_node
+   * @param Node $parent_node
    *   Parent node.
    *
-   * @return \PNX\NestedSet\Node[]
+   * @return Node[]
    *   Children
    */
   protected function getChildren(Node $parent_node) {
@@ -382,14 +382,14 @@ class HierarchyNestedSetIntegrationTest extends EntityHierarchyKernelTestBase {
   /**
    * Asserts children in given order.
    *
-   * @param \PNX\NestedSet\Node $parent_node
+   * @param Node $parent_node
    *   Parent node.
-   * @param \Drupal\Core\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   Array of entities keyed by label.
    * @param string[] $order
    *   Array of titles in order.
    *
-   * @return \PNX\NestedSet\Node[]
+   * @return Node[]
    *   Children.
    */
   protected function assertChildOrder(Node $parent_node, array $entities, array $order) {
diff --git a/tests/src/Kernel/HierarchyNestedSetRevisionIntegrationTest.php b/tests/src/Kernel/HierarchyNestedSetRevisionIntegrationTest.php
index de60f83..7b79789 100644
--- a/tests/src/Kernel/HierarchyNestedSetRevisionIntegrationTest.php
+++ b/tests/src/Kernel/HierarchyNestedSetRevisionIntegrationTest.php
@@ -33,7 +33,7 @@ class HierarchyNestedSetRevisionIntegrationTest extends HierarchyNestedSetIntegr
    * @param array $values
    *   Entity values.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   Created entity.
    */
   protected function doCreateTestEntity(array $values) {
diff --git a/tests/src/Kernel/ViewsIntegrationTest.php b/tests/src/Kernel/ViewsIntegrationTest.php
index 53576db..812292b 100644
--- a/tests/src/Kernel/ViewsIntegrationTest.php
+++ b/tests/src/Kernel/ViewsIntegrationTest.php
@@ -49,7 +49,7 @@ class ViewsIntegrationTest extends EntityHierarchyKernelTestBase {
   /**
    * Gets the views argument from a given entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    *
    * @return int
diff --git a/tests/src/Kernel/ViewsRevisionableIntegrationTest.php b/tests/src/Kernel/ViewsRevisionableIntegrationTest.php
index 9cf65a9..a557a36 100644
--- a/tests/src/Kernel/ViewsRevisionableIntegrationTest.php
+++ b/tests/src/Kernel/ViewsRevisionableIntegrationTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\entity_hierarchy\Kernel;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\entity_test\Entity\EntityTestRev;
 
@@ -46,7 +47,7 @@ class ViewsRevisionableIntegrationTest extends ViewsIntegrationTest {
    * @param array $values
    *   Entity values.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   Created entity.
    */
   protected function doCreateTestEntity(array $values) {
diff --git a/tests/src/Traits/EntityHierarchyTestTrait.php b/tests/src/Traits/EntityHierarchyTestTrait.php
index 9ee3ebf..9dc704c 100644
--- a/tests/src/Traits/EntityHierarchyTestTrait.php
+++ b/tests/src/Traits/EntityHierarchyTestTrait.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\entity_hierarchy\Traits;
 
+use PNX\NestedSet\NodeKey;
+use PNX\NestedSet\Storage\DbalNestedSet;
+use Drupal\entity_hierarchy\Storage\NestedSetNodeKeyFactory;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\entity_test\Entity\EntityTest;
@@ -16,28 +20,28 @@ trait EntityHierarchyTestTrait {
   /**
    * Test parent.
    *
-   * @var \Drupal\entity_test\Entity\EntityTest
+   * @var EntityTest
    */
   protected $parent;
 
   /**
    * Node key for parent.
    *
-   * @var \PNX\NestedSet\NodeKey
+   * @var NodeKey
    */
   protected $parentStub;
 
   /**
    * Tree storage.
    *
-   * @var \PNX\NestedSet\Storage\DbalNestedSet
+   * @var DbalNestedSet
    */
   protected $treeStorage;
 
   /**
    * Node key factory.
    *
-   * @var \Drupal\entity_hierarchy\Storage\NestedSetNodeKeyFactory
+   * @var NestedSetNodeKeyFactory
    */
   protected $nodeFactory;
 
@@ -99,7 +103,7 @@ trait EntityHierarchyTestTrait {
    * @param string $prefix
    *   (Optional) Title prefix.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Child entities
    */
   protected function createChildEntities($parentId, $count = 5, string $prefix = '') {
@@ -121,7 +125,7 @@ trait EntityHierarchyTestTrait {
    * @param int $weight
    *   Entity weight amongst sibling, if parent is set.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   New entity.
    */
   protected function createTestEntity($parentId, $label = 'Child 1', $weight = 0) {
@@ -146,7 +150,7 @@ trait EntityHierarchyTestTrait {
    * @param array $values
    *   Entity values.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   Created entity.
    */
   protected function doCreateTestEntity(array $values) {
@@ -164,7 +168,7 @@ trait EntityHierarchyTestTrait {
    * @param int $weight
    *   Entity weight amongst sibling, if parent is set.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   New entity.
    */
   protected function doCreateChildTestEntity($parentId, $label, $weight) {
@@ -200,7 +204,7 @@ trait EntityHierarchyTestTrait {
    * @param string $form_mode
    *   Form mode.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   Form display.
    */
   protected function getEntityFormDisplay($entity_type, $bundle, $form_mode) {
diff --git a/tests/src/Unit/TreeRebuilderUnitTest.php b/tests/src/Unit/TreeRebuilderUnitTest.php
index 06bf567..b9c62ad 100644
--- a/tests/src/Unit/TreeRebuilderUnitTest.php
+++ b/tests/src/Unit/TreeRebuilderUnitTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\entity_hierarchy\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\EntityFieldManager;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\entity_hierarchy\Storage\TreeRebuilder;
@@ -14,6 +15,7 @@ use Drupal\Tests\UnitTestCase;
  */
 class TreeRebuilderUnitTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Tests tree sort.
    *
