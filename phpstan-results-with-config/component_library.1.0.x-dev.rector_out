modules/contrib/component_library/component_library.install
modules/contrib/component_library/component_library.module
modules/contrib/component_library/component_library.post_update.php
modules/contrib/component_library/modules/component_library_engine/component_library_engine.engine
modules/contrib/component_library/modules/gcomponent_library/gcomponent_library.module
modules/contrib/component_library/modules/gcomponent_library/src/BaseFields.php
modules/contrib/component_library/modules/gcomponent_library/src/CollectionListBuilder.php
modules/contrib/component_library/modules/gcomponent_library/src/Entity/LibraryCollection.php
modules/contrib/component_library/modules/gcomponent_library/src/Form/CollectionForm.php
modules/contrib/component_library/modules/gcomponent_library/src/Form/SettingsForm.php
modules/contrib/component_library/modules/gcomponent_library/src/Plugin/Field/FieldWidget/StyleOverridesWidget.php
modules/contrib/component_library/modules/gcomponent_library/src/Theming/PreprocessComponentLibraryComponent.php
modules/contrib/component_library/src/Annotation/ComponentOverride.php
modules/contrib/component_library/src/Asset.php
modules/contrib/component_library/src/CodeMirrorSettings.php
modules/contrib/component_library/src/ComponentLibraryAssetListBuilder.php
modules/contrib/component_library/src/ComponentLibraryPatternInterface.php
modules/contrib/component_library/src/ComponentLibraryPatternListBuilder.php
modules/contrib/component_library/src/ComponentLibraryServiceProvider.php
modules/contrib/component_library/src/ComponentLibraryTwigExtension.php
modules/contrib/component_library/src/ComponentLibraryVariantInterface.php
modules/contrib/component_library/src/ComponentLibraryVariantListBuilder.php
modules/contrib/component_library/src/ComponentOverrideListBuilder.php
modules/contrib/component_library/src/ComponentOverrideManager.php
modules/contrib/component_library/src/Controller/OverrideModeController.php
modules/contrib/component_library/src/Controller/TagsAutocompleteController.php
modules/contrib/component_library/src/Controller/VariantPreviewController.php
modules/contrib/component_library/src/Entity/ComponentLibraryAsset.php
modules/contrib/component_library/src/Entity/ComponentLibraryPattern.php
modules/contrib/component_library/src/Entity/ComponentLibraryVariant.php
modules/contrib/component_library/src/Entity/ComponentOverride.php
modules/contrib/component_library/src/Event/AddVariablesPlaceholderEvent.php
modules/contrib/component_library/src/Event/ConvertYamlPlaceholdersEvent.php
modules/contrib/component_library/src/Event/OverrideIgnoreTemplateEvent.php
modules/contrib/component_library/src/Event/PrepareOverrideEvent.php
modules/contrib/component_library/src/Event/ReplaceVariablesPlaceholderEvent.php
modules/contrib/component_library/src/EventSubscriber/EntityFieldYamlPlaceholders.php
modules/contrib/component_library/src/EventSubscriber/EntityYamlPlaceholders.php
modules/contrib/component_library/src/EventSubscriber/GenerateAssetFiles.php
modules/contrib/component_library/src/EventSubscriber/IgnoreTemplate.php
modules/contrib/component_library/src/EventSubscriber/PrepareOverrideBase.php
modules/contrib/component_library/src/EventSubscriber/PrepareOverrideContentEntity.php
modules/contrib/component_library/src/EventSubscriber/PrepareOverrideOverrideMode.php
modules/contrib/component_library/src/EventSubscriber/VariablesPlaceholderContentEntity.php
modules/contrib/component_library/src/EventSubscriber/VariablesPlaceholderCurrentUser.php
modules/contrib/component_library/src/EventSubscriber/VariablesPlaceholderEntityTypeManager.php
modules/contrib/component_library/src/EventSubscriber/VariablesPlaceholderView.php
modules/contrib/component_library/src/EventSubscriber/VariablesPlaceholderViewBuilder.php
modules/contrib/component_library/src/Form/ComponentLibraryAssetForm.php
modules/contrib/component_library/src/Form/ComponentLibraryPatternForm.php
modules/contrib/component_library/src/Form/ComponentLibraryVariantDeleteForm.php
modules/contrib/component_library/src/Form/ComponentLibraryVariantForm.php
modules/contrib/component_library/src/Form/ComponentOverrideDeleteForm.php
modules/contrib/component_library/src/Form/ComponentOverrideForm.php
modules/contrib/component_library/src/Form/ComponentOverrideFormTrait.php
modules/contrib/component_library/src/Form/ComponentOverrideSettingsForm.php
modules/contrib/component_library/src/Form/VariantDuplicateForm.php
modules/contrib/component_library/src/Menu/VariantLocalAction.php
modules/contrib/component_library/src/Menu/VariantLocalActionProvider.php
modules/contrib/component_library/src/OverrideMode.php
modules/contrib/component_library/src/Plugin/ComponentOverride/ComponentOverrideBase.php
modules/contrib/component_library/src/Plugin/ComponentOverride/ComponentOverrideInterface.php
modules/contrib/component_library/src/Plugin/ComponentOverride/ContentEntity.php
modules/contrib/component_library/src/Plugin/ComponentOverride/OverrideMode.php
modules/contrib/component_library/src/Plugin/Deriver/ComponentPatternDeriver.php
modules/contrib/component_library/src/Plugin/Deriver/ContentEntity.php
modules/contrib/component_library/src/Plugin/UiPatterns/Pattern/ComponentPattern.php
modules/contrib/component_library/src/Routing/NotAdminRouteSubscriber.php
modules/contrib/component_library/src/Twig/Loader.php
modules/contrib/component_library/src/VariationTemplateLoader.php
modules/contrib/component_library/tests/src/Functional/ComponentLibraryTest.php
modules/contrib/component_library/tests/src/FunctionalJavascript/ComponentOverrideTest.php
modules/contrib/component_library/tests/src/Kernel/ComponentOverrideRenderTest.php

28 files with changes
=====================

1) modules/contrib/component_library/tests/src/FunctionalJavascript/ComponentOverrideTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\component_library\FunctionalJavascript;

+use Drupal\Core\Entity\EntityStorageException;
+use Behat\Mink\Exception\DriverException;
+use Behat\Mink\Exception\UnsupportedDriverActionException;
 use Drupal\Core\Url;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;

@@ @@
   /**
    * Log in as admin.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   private function logInAsAdmin(): void {
     $permissions = [
@@ @@
    * @param string $text
    *   The text area value.
    *
-   * @throws \Behat\Mink\Exception\DriverException
-   * @throws \Behat\Mink\Exception\UnsupportedDriverActionException
+   * @throws DriverException
+   * @throws UnsupportedDriverActionException
    */
   private function fillCodeMirrorEditor(string $text): void {
     $this->getSession()->getDriver()->executeScript("document.querySelector('.js-form-item-template .CodeMirror').CodeMirror.setValue('$text');");
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/component_library/src/Twig/Loader.php:63

    ---------- begin diff ----------
@@ @@
    * @param string $name
    *   The full template path and filename.
    *
-   * @return \Drupal\component_library\Entity\ComponentOverride|null
+   * @return ComponentOverride|null
    *   The override.
    */
   public function getOverrideByName(string $name): ?ComponentOverride {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/component_library/src/Plugin/ComponentOverride/ComponentOverrideInterface.php:16

    ---------- begin diff ----------
@@ @@
    *   An associative array containing the initial structure of the plugin form.
    *   The form needs to provide an "override" form element which should allow
    *   the user to select a theme registry to override.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form. Calling code should pass on a subform
    *   state created through
    *   \Drupal\Core\Form\SubformState::createForSubform().
@@ @@
    *
    * @param $key
    *   The Component Override property or plugin data to retrieve.
-   * @param \Drupal\component_library\Entity\ComponentOverride $override
+   * @param ComponentOverride $override
    *   The component override.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return string
@@ @@
    * Gives plugins an opportunity to clear any relevant caches so that the
    * template changes are shown immediately.
    *
-   * @param \Drupal\component_library\Entity\ComponentOverride $override
+   * @param ComponentOverride $override
    *   The component override.
    */
   public function clearCaches(ComponentOverride $override): void;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/component_library/src/OverrideMode.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\component_library;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Serialization\Json;
 use Drupal\Component\Uuid\UuidInterface;
 use Drupal\component_library\Entity\ComponentOverride;
@@ @@
    * @return string|null
    *   The uuid used as a front-end selector or NULL.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function prepareOverrideDetails(string $template_file, array $variables): ?string {
     if (!$this->config->get('override_mode')) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/component_library/src/Form/VariantDuplicateForm.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\component_library\Form;

+use Drupal\component_library\ComponentLibraryVariantInterface;
 use Drupal\component_library\Entity\ComponentLibraryVariant;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
 /**
  * Duplicate form.
  *
- * @property \Drupal\component_library\ComponentLibraryVariantInterface $entity
+ * @property ComponentLibraryVariantInterface $entity
  */
 final class VariantDuplicateForm extends EntityForm {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/component_library/src/Form/ComponentOverrideFormTrait.php:19

    ---------- begin diff ----------
@@ @@
    *
    * @param string $key
    *   The value to retrieve.
-   * @param \Drupal\component_library\Entity\ComponentOverride $override
+   * @param ComponentOverride $override
    *   The override entity.
-   * @param \Drupal\Core\Form\FormStateInterface|null $form_state
+   * @param FormStateInterface|null $form_state
    *   The form state.
    *
    * @return string|null
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/component_library/src/Form/ComponentOverrideForm.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\component_library\Form;

+use Drupal\component_library\Plugin\ComponentOverride\ComponentOverrideInterface;
+use Drupal\Core\Extension\Extension;
+use Twig\Error\LoaderError;
 use Drupal\component_library\ComponentOverrideManager;
 use Drupal\component_library\Entity\ComponentOverride;
 use Drupal\component_library\Event\PrepareOverrideEvent;
@@ @@
       $form_state->setValue('plugin_container', []);
     }

-    /** @var \Drupal\component_library\Plugin\ComponentOverride\ComponentOverrideInterface $override_plugin */
+    /** @var ComponentOverrideInterface $override_plugin */
     $override_plugin = NULL;
     if ($plugin) {
       $override_plugin = $this->entity->getPlugin($this->prepareOverrideEvent);
@@ @@
   /**
    * Check for error messages.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|null
+   * @return AjaxResponse|null
    *   Renders the status messages.
    */
   private function checkForErrorMessages(): ?AjaxResponse {
@@ @@
       foreach ($core_libraries as $library_name => $library) {
         $available_libraries['core']['core/' . $library_name] = 'core/' . $library_name;
       }
-      /** @var \Drupal\Core\Extension\Extension $extension */
+      /** @var Extension $extension */
       foreach (\array_merge($modules, $profiles, $themes) as $extension_name => $extension) {
         $extension_info = (array) $extension;
         if ($extension->getType() == 'profile'|| !empty($extension_info['status'])) {
@@ @@
   /**
    * Get installed list.
    *
-   * @param \Drupal\Core\Extension\ExtensionList $extension_list
+   * @param ExtensionList $extension_list
    *   An extension list.
    *
    * @return array
@@ @@
    * @return string
    *   The file contents of the template.
    *
-   * @throws \Twig\Error\LoaderError
+   * @throws LoaderError
    */
   private function getTemplate(string $override, $strip_libraries): string {
     $registry = $this->overrideManager->getThemeRegistry();
@@ @@
   /**
    * Get plugin.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return string|null
@@ @@
   /**
    * Get override.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return string|null
@@ @@
    *
    * @param string $form_item
    *   The nested form item key to retrieve.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return string|null
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/component_library/src/Form/ComponentOverrideDeleteForm.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new ComponentOverrideDeleteForm.
    *
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
    */
   public function __construct(ThemeHandlerInterface $theme_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/component_library/src/Form/ComponentLibraryPatternForm.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\component_library\Form;

+use Drupal\component_library\ComponentLibraryPatternInterface;
 use Drupal\Component\Serialization\Exception\InvalidDataTypeException;
 use Drupal\Component\Serialization\Yaml;
 use Drupal\Component\Utility\Tags;
@@ @@
 /**
  * Component library pattern form.
  *
- * @property \Drupal\component_library\ComponentLibraryPatternInterface $entity
+ * @property ComponentLibraryPatternInterface $entity
  */
 final class ComponentLibraryPatternForm extends EntityForm {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/component_library/src/Form/ComponentLibraryAssetForm.php:193

    ---------- begin diff ----------
@@ @@
   /**
    * Get files.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
    *
    * @param array $files
    *   An array of file values.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   private function setFiles(array $files, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/component_library/src/EventSubscriber/PrepareOverrideOverrideMode.php:29

    ---------- begin diff ----------
@@ @@
    *
    * Used to fill out the override form from URL values.
    *
-   * @param \Drupal\component_library\Event\PrepareOverrideEvent $event
+   * @param PrepareOverrideEvent $event
    *   The prepare override event.
    *
    * @see override_mode.js
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/component_library/src/EventSubscriber/PrepareOverrideContentEntity.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\component_library\EventSubscriber;

+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\TempStore\TempStoreException;
 use Drupal\component_library\ComponentOverrideManager;
 use Drupal\component_library\Event\PrepareOverrideEvent;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * On prepare override.
    *
-   * @param \Drupal\component_library\Event\PrepareOverrideEvent $event
+   * @param PrepareOverrideEvent $event
    *   The prepare override event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\TempStore\TempStoreException
+   * @throws PluginNotFoundException
+   * @throws TempStoreException
    */
   public function onPrepareOverride(PrepareOverrideEvent $event): void {
     $plugin = $event->getPlugin();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/component_library/src/EventSubscriber/PrepareOverrideBase.php:26

    ---------- begin diff ----------
@@ @@
    * overridePrepared() once the event has been completed to prevent subsequent
    * executions.
    *
-   * @param \Drupal\component_library\Event\PrepareOverrideEvent $event
+   * @param PrepareOverrideEvent $event
    *   The prepare override event.
    */
   abstract protected function onPrepareOverride(PrepareOverrideEvent $event): void;
@@ @@
    * Ensure that onPrepareOverride is only computed once for each event since it
    * is dispatched multiple times.
    *
-   * @param \Drupal\component_library\Event\PrepareOverrideEvent $event
+   * @param PrepareOverrideEvent $event
    *   The event.
    */
   public function runOnce(PrepareOverrideEvent $event): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/component_library/src/EventSubscriber/IgnoreTemplate.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * Ignore obvious templates like the toolbar and regions.
    *
-   * @param \Drupal\component_library\Event\OverrideIgnoreTemplateEvent $event
+   * @param OverrideIgnoreTemplateEvent $event
    *   The event.
    */
   public function onIgnore(OverrideIgnoreTemplateEvent $event): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/component_library/src/EventSubscriber/GenerateAssetFiles.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * The config save event listener.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The config crud event.
    */
   public function onConfigSave(ConfigCrudEvent $event): void {
@@ @@
   /**
    * Generates library asset files on config import.
    *
-   * @param \Drupal\Core\Config\ConfigImporterEvent $event
+   * @param ConfigImporterEvent $event
    *   The config import event.
    */
   public function onConfigImport(ConfigImporterEvent $event): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/component_library/src/Event/PrepareOverrideEvent.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\component_library\Event;

+use Drupal\Core\TempStore\TempStoreException;
 use Drupal\Component\EventDispatcher\Event;
 use Drupal\component_library\Entity\ComponentOverride;
 use Drupal\Core\TempStore\PrivateTempStore;
@@ @@
   /**
    * The tempstore.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    *   The variables cache.
    */
   private PrivateTempStore $tempStore;
@@ @@
   private ?array $pluginData = NULL;

   /**
-   * @var \Drupal\component_library\Entity\ComponentOverride|null
+   * @var ComponentOverride|null
    *   The override.
    */
   private ?ComponentOverride $entity;
@@ @@
    * @param array $variables
    *   The preprocessed variables used to render the template.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
+   * @throws TempStoreException
    */
   public function setVariables(array $variables): void {
     $this->tempStore->set('variables', $variables);
@@ @@
   /**
    * Get entity.
    *
-   * @return \Drupal\component_library\Entity\ComponentOverride|null
+   * @return ComponentOverride|null
    *   The component override.
    */
   public function getEntity(): ?ComponentOverride {
@@ @@
   /**
    * Set entity.
    *
-   * @param \Drupal\component_library\Entity\ComponentOverride|null $entity
+   * @param ComponentOverride|null $entity
    *   The component override.
    */
   public function setEntity(?ComponentOverride $entity): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/component_library/src/Controller/VariantPreviewController.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The controller constructor.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore service.
    */
   public function __construct(PrivateTempStoreFactory $temp_store_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/component_library/src/ComponentOverrideListBuilder.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new FilterFormatListBuilder.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $route_match
+   * @param CurrentRouteMatch $route_match
    *   The current route match service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, CurrentRouteMatch $route_match) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/component_library/src/ComponentLibraryVariantListBuilder.php:45

    ---------- begin diff ----------
@@ @@
    */
   public function buildRow(EntityInterface $entity): array {
     $row = [];
-    /** @var \Drupal\component_library\ComponentLibraryVariantInterface $entity */
+    /** @var ComponentLibraryVariantInterface $entity */
     $row['label'] = $entity->toLink();
     $row['id'] = $entity->get('id');
     $row['status'] = $entity->get('status') === TRUE ? $this->t('Enabled') : $this->t('Disabled');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/component_library/src/ComponentLibraryTwigExtension.php:25

    ---------- begin diff ----------
@@ @@
    * Returns the render array for a component library variant.
    */
   public static function variant(string $name, array $arguments = []): array {
-    /** @var \Drupal\component_library\Entity\ComponentLibraryVariant $variant */
+    /** @var ComponentLibraryVariant $variant */
     $variant = \Drupal::entityTypeManager()->getStorage('component_library_variant')->load($name);
     if (!$variant instanceof ComponentLibraryVariant) {
       return [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/component_library/src/ComponentLibraryPatternListBuilder.php:28

    ---------- begin diff ----------
@@ @@
    */
   public function buildRow(EntityInterface $entity): array {
     $row = [];
-    /** @var \Drupal\component_library\ComponentLibraryPatternInterface $entity */
+    /** @var ComponentLibraryPatternInterface $entity */
     $row['label'] = $entity->label();
     $row['id'] = $entity->id();
     $row['tags'] = Tags::implode($entity->get('tags'));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/component_library/src/ComponentLibraryPatternInterface.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Gets pattern variations.
    *
-   * @return \Drupal\component_library\ComponentLibraryVariantInterface[]
+   * @return ComponentLibraryVariantInterface[]
    *   Array of pattern variations.
    */
   public function getVariants(): array;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


23) modules/contrib/component_library/src/Asset.php:29

    ---------- begin diff ----------
@@ @@
    *
    * Writes the asset files to the public files dir.
    *
-   * @param \Drupal\component_library\Entity\ComponentLibraryAsset $asset
+   * @param ComponentLibraryAsset $asset
    *   The asset that needs files generated.
    */
   public function generateLibraryFiles(ComponentLibraryAsset $asset) {
@@ @@
    *
    * Deletes existing asset files with or without aggregation enabled.
    *
-   * @param \Drupal\component_library\Entity\ComponentLibraryAsset $asset
+   * @param ComponentLibraryAsset $asset
    *   The component_library_asset to clean up files for.
    */
   public function clearFiles(ComponentLibraryAsset $asset): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


24) modules/contrib/component_library/modules/gcomponent_library/src/Form/CollectionForm.php:14

    ---------- begin diff ----------
@@ @@
 /**
  * Collection form.
  *
- * @property \Drupal\gcomponent_library\Entity\LibraryCollection $entity
+ * @property LibraryCollection $entity
  */
 final class CollectionForm extends EntityForm {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/component_library/modules/gcomponent_library/src/CollectionListBuilder.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gcomponent_library;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;

@@ @@
 final class CollectionListBuilder extends ConfigEntityListBuilder {

   /**
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup[]
+   * @return TranslatableMarkup[]
    */
   public function buildHeader(): array {
     $header = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/component_library/modules/gcomponent_library/src/BaseFields.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gcomponent_library;

+use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ @@
   /**
    * Return the base field info.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Drupal\Core\Field\FieldStorageDefinitionInterface[]
+   * @return FieldStorageDefinitionInterface[]
    *   The field storage definitions.
    */
   public function baseFieldInfo(EntityTypeInterface $entity_type): array {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


27) modules/contrib/component_library/modules/component_library_engine/component_library_engine.engine:0

    ---------- begin diff ----------
@@ @@
 <?php

 declare(strict_types=1);
+use Drupal\Component\Render\MarkupInterface;

 /**
  * @file
@@ @@
 /**
  * Includes .theme file from themes.
  *
- * @param \Drupal\Core\Extension\Extension $theme
+ * @param Extension $theme
  *   The theme extension object.
  */
 function component_library_engine_init(Extension $theme): bool {
@@ @@
  * @param array $variables
  *   A keyed array of variables that will appear in the output.
  *
- * @return string|\Drupal\Component\Render\MarkupInterface
+ * @return string|MarkupInterface
  *   The output generated by the template, plus any debug information.
  */
 function component_library_engine_render_template($template_file, array $variables) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


28) modules/contrib/component_library/component_library.module:0

    ---------- begin diff ----------
@@ @@
 <?php // phpcs:ignore Drupal.Commenting.FileComment.Missing

 declare(strict_types=1);
+use Drupal\component_library\ComponentOverrideManager;

 /**
  * @file
@@ @@
     if ($overrides) {
       $override_manager = Drupal::service('plugin.manager.component_override');
       foreach ($overrides as $override) {
-        /** @var \Drupal\component_library\ComponentOverrideManager $override_manager */
+        /** @var ComponentOverrideManager $override_manager */
         $override_manager->ensureThemeRegistry($override, $theme_registry);
       }
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/component_library/src/Plugin/UiPatterns/Pattern/Componen
         tPattern.php" file, due to:                                            
         "Analyze error: "Class Drupal\ui_patterns\Plugin\PatternBase not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/component_library/src/Plugin/Deriver/ComponentPatternDer
         iver.php" file, due to:                                                
         "Analyze error: "Class                                                 
         Drupal\ui_patterns\Plugin\Deriver\AbstractPatternsDeriver not found.". 
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

