modules/contrib/patreon/modules/patreon_extras/patreon_extras.module
modules/contrib/patreon/modules/patreon_extras/tests/src/Functional/LoadTest.php
modules/contrib/patreon/modules/patreon_user/patreon_user.install
modules/contrib/patreon/modules/patreon_user/patreon_user.module
modules/contrib/patreon/modules/patreon_user/src/Controller/PatreonUserController.php
modules/contrib/patreon/modules/patreon_user/src/PatreonUserService.php
modules/contrib/patreon/modules/patreon_user/src/PatreonUserUserException.php
modules/contrib/patreon/modules/patreon_user/src/Plugin/Block/PatreonBecomeBlock.php
modules/contrib/patreon/modules/patreon_user/src/Plugin/Block/PatreonUserBlock.php
modules/contrib/patreon/modules/patreon_user/tests/src/Functional/LoadTest.php
modules/contrib/patreon/patreon.module
modules/contrib/patreon/src/Controller/PatreonController.php
modules/contrib/patreon/src/Form/SettingsForm.php
modules/contrib/patreon/src/PatreonGeneralException.php
modules/contrib/patreon/src/PatreonMissingTokenException.php
modules/contrib/patreon/src/PatreonService.php
modules/contrib/patreon/src/PatreonServiceInterface.php
modules/contrib/patreon/src/PatreonUnauthorizedException.php
modules/contrib/patreon/tests/src/Functional/LoadTest.php

14 files with changes
=====================

1) modules/contrib/patreon/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\patreon\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer Patreon.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer patreon']);
     $this->drupalLogin($this->user);
@@ @@
    */
   public function testLoad() {
     $this->drupalGet(Url::fromRoute('<front>'));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/patreon/src/PatreonServiceInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\patreon;

+use Drupal\Core\Url;
+use Drupal\Core\Routing\TrustedRedirectResponse;
 use Drupal\user\UserInterface;

 /**
@@ @@
   /**
    * Helper to return the valid absolute Oauth Callback URL.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The absolute URL of the Oauth Callback route,
    */
   public function getCallback();
@@ @@
    * @param bool $redirect
    *   Whether to redirect the user directly to the API URL.
    *
-   * @return bool|\Drupal\Core\Routing\TrustedRedirectResponse|\Drupal\Core\Url|null
+   * @return bool|TrustedRedirectResponse|Url|null
    *   A redirect response or URL
    */
   public function authoriseAccount(string $client_id, array $scopes = [], string $return_url = '', bool $redirect = TRUE);
@@ @@
    * @return array
    *   An array of tokens.
    *
-   * @throws \Drupal\patreon\PatreonGeneralException
-   * @throws \Drupal\patreon\PatreonUnauthorizedException
+   * @throws PatreonGeneralException
+   * @throws PatreonUnauthorizedException
    */
   public function tokensFromCode(string $code);

@@ @@
    *
    * @param array $tokens
    *   An array of tokens returned by the API.
-   * @param \Drupal\user\UserInterface|null $account
+   * @param UserInterface|null $account
    *   The account of the user storing the tokens. Optional.
    */
   public function storeTokens(array $tokens, UserInterface $account = NULL);
@@ @@
   /**
    * Load the tokens stored by $this->storeTokens().
    *
-   * @param \Drupal\user\UserInterface|null $account
+   * @param UserInterface|null $account
    *   The account of the user requesting the tokens. Optional.
    *
    * @return array
@@ @@
    * @param string $state
    *   A coded state string returned by the API.
    *
-   * @return \Drupal\Core\Url|false
+   * @return Url|false
    *   The URl of FALSE if invalid/not provided.
    */
   public function decodeState(string $state);
@@ @@
    * @return string
    *   Returns the value of $this->refreshToken.
    *
-   * @throws \Drupal\patreon\PatreonMissingTokenException
+   * @throws PatreonMissingTokenException
    */
   public function getRefreshToken();

@@ @@
    * @return mixed
    *   Returns the tokens return from the API or an error.
    *
-   * @throws \Drupal\patreon\PatreonGeneralException
-   * @throws \Drupal\patreon\PatreonUnauthorizedException
+   * @throws PatreonGeneralException
+   * @throws PatreonUnauthorizedException
    */
   public function getRefreshedTokens($token, $redirect);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/patreon/src/PatreonService.php:50

    ---------- begin diff ----------
@@ @@
   /**
    * The Drupal path service.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected CurrentPathStack $path;

@@ @@
   /**
    * Drupal\Component\Serialization\SerializationInterface definition.
    *
-   * @var \Drupal\Component\Serialization\SerializationInterface
+   * @var SerializationInterface
    */
   protected SerializationInterface $serializationJson;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected ConfigFactoryInterface $configFactory;

@@ @@
   /**
    * Config for the service.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected Config $config;

@@ @@
   /**
    * Watchdog logger channel for captcha.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected LoggerInterface $logger;

@@ @@
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected MessengerInterface $messenger;

@@ @@
   /**
    * An entity Type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected EntityTypeManager $entityTypeManager;

@@ @@
   /**
    * The Request Stack Service.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected RequestStack $stack;

@@ @@
   /**
    * A state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected StateInterface $stateApi;

@@ @@
   /**
    * Constructs a ParagraphsTypeIconUuidLookup instance.
    *
-   * @param \Drupal\Core\Path\CurrentPathStack $path
+   * @param CurrentPathStack $path
    *   The Drupal Path service.
-   * @param \Drupal\Component\Serialization\SerializationInterface $serialization_json
+   * @param SerializationInterface $serialization_json
    *   A Drupal JSON serialization service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   A Drupal Config Factory.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger
+   * @param LoggerChannelFactoryInterface $logger
    *   A logger channel.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Entity\EntityTypeManager $entityTypeManager
+   * @param EntityTypeManager $entityTypeManager
    *   An Entity Type Manager.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $stack
+   * @param RequestStack $stack
    *   The request stack service.
-   * @param \Drupal\Core\State\StateInterface $stateApi
+   * @param StateInterface $stateApi
    *   A state service.
    */
   public function __construct(CurrentPathStack $path, SerializationInterface $serialization_json, ConfigFactoryInterface $configFactory, LoggerChannelFactoryInterface $logger, MessengerInterface $messenger, EntityTypeManager $entityTypeManager, RequestStack $stack, StateInterface $stateApi) {
@@ @@
    * @return string
    *   Returns the stored token.
    *
-   * @throws \Drupal\patreon\PatreonMissingTokenException
+   * @throws PatreonMissingTokenException
    */
   public function getToken() {
     if ($tokens = $this->getStoredTokens()) {
@@ @@
    * @param bool $log_in
    *   Whether to create an account for the user or not.
    *
-   * @return \Drupal\Core\Link
+   * @return Link
    *   A link object.
    */
   public function getSignupLink(int $minimum = 0, bool $log_in = FALSE): Link {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/patreon/src/Form/SettingsForm.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * The Patreon API service.
    *
-   * @var \Drupal\patreon\PatreonServiceInterface
+   * @var PatreonServiceInterface
    */
   protected PatreonServiceInterface $service;

@@ @@
   /**
    * SettingsForm constructor.
    *
-   * @param \Drupal\patreon\PatreonServiceInterface $service
+   * @param PatreonServiceInterface $service
    *   A Patreon API service.
    */
   public function __construct(PatreonServiceInterface $service) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/patreon/src/Controller/PatreonController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\patreon\Controller;

+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\State\StateInterface;
 use Drupal\patreon\PatreonServiceInterface;
@@ @@
   /**
    * The Patreon API Service.
    *
-   * @var \Drupal\patreon\PatreonServiceInterface
+   * @var PatreonServiceInterface
    */
   protected PatreonServiceInterface $service;

@@ @@
   /**
    * The Request Stack Service.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected RequestStack $stack;

@@ @@
   /**
    * Watchdog logger channel for captcha.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected LoggerInterface $logger;

@@ @@
   /**
    * A State API service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected StateInterface $state;

@@ @@
   /**
    * Creates the controller.
    *
-   * @param \Drupal\patreon\PatreonServiceInterface $service
+   * @param PatreonServiceInterface $service
    *   A Patreon API service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $stack
+   * @param RequestStack $stack
    *   The request stack service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger channel.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   A State service.
    */
   public function __construct(PatreonServiceInterface $service, RequestStack $stack, LoggerInterface $logger, StateInterface $state) {
@@ @@
   /**
    * Create function.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   Dependency Injection Container.
    *
    * @return \Drupal\patreon\Controller\PatreonController
@@ @@
   /**
    * Patreon oauth callback.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Redirects to the Patreon settings form.
    */
   public function oauth() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/patreon/modules/patreon_user/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\patreon_user\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
@@ @@
    */
   public function testLoad() {
     $this->drupalGet(Url::fromRoute('<front>'));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/patreon/modules/patreon_user/src/Plugin/Block/PatreonUserBlock.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\patreon_user\PatreonUserService definition.
    *
-   * @var \Drupal\patreon\PatreonServiceInterface
+   * @var PatreonServiceInterface
    */
   protected PatreonServiceInterface $patreonUserApi;

@@ @@
   /**
    * The module configuration.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    *   The configuration object.
    */
   protected Config $config;
@@ @@
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\patreon\PatreonServiceInterface $patreon_user_api
+   * @param PatreonServiceInterface $patreon_user_api
    *   The API User Service.
-   * @param \Drupal\Core\Config\Config $config
+   * @param Config $config
    *   The module config.
    * @param int $login
    *   The current login setting.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/patreon/modules/patreon_user/src/Plugin/Block/PatreonBecomeBlock.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The Patreon config.
    *
-   * @var \Drupal\patreon\PatreonServiceInterface
+   * @var PatreonServiceInterface
    */
   protected PatreonServiceInterface $service;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected ModuleHandlerInterface $moduleHandler;

@@ @@
    *   The plugin id.
    * @param mixed $plugin_definition
    *   The plkugin definition.
-   * @param \Drupal\patreon\PatreonServiceInterface $service
+   * @param PatreonServiceInterface $service
    *   The Patreon Service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   A module handler service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, PatreonServiceInterface $service, ModuleHandlerInterface $moduleHandler) {
@@ @@
   /**
    * Creates the Become Patron block.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   Container interface.
    * @param array $configuration
    *   Block configuration.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/patreon/modules/patreon_user/src/PatreonUserService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\patreon_user;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\EntityBase;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Serialization\SerializationInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManager;
@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected AccountInterface $currentUser;

@@ @@
   /**
    * An entity Type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected EntityTypeManager $entityTypeManager;

@@ @@
   /**
    * A module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected ModuleHandler $handler;

@@ @@
   /**
    * Constructs a ParagraphsTypeIconUuidLookup instance.
    *
-   * @param \Drupal\Core\Path\CurrentPathStack $path
+   * @param CurrentPathStack $path
    *   The Drupal Path service.
-   * @param \Drupal\Component\Serialization\SerializationInterface $serialization_json
+   * @param SerializationInterface $serialization_json
    *   A Drupal JSON serialization service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   A Drupal Config Factory.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger
+   * @param LoggerChannelFactoryInterface $logger
    *   A logger channel.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Entity\EntityTypeManager $entityTypeManager
+   * @param EntityTypeManager $entityTypeManager
    *   An Entity Type Manager.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $stack
+   * @param RequestStack $stack
    *   The request stack service.
-   * @param \Drupal\Core\State\StateInterface $stateApi
+   * @param StateInterface $stateApi
    *   A state service.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user account.
-   * @param \Drupal\Core\Extension\ModuleHandler $handler
+   * @param ModuleHandler $handler
    *   A Module Handler.
    */
   public function __construct(CurrentPathStack $path, SerializationInterface $serialization_json, ConfigFactoryInterface $configFactory, LoggerChannelFactoryInterface $logger, MessengerInterface $messenger, EntityTypeManager $entityTypeManager, RequestStack $stack, StateInterface $stateApi, AccountInterface $account, ModuleHandler $handler) {
@@ @@
    * @param array $patreon_user
    *   Results array from the user endpoint.
    *
-   * @return bool|\Drupal\Core\Entity\EntityInterface
+   * @return bool|EntityInterface
    *   A Drupal user object, or FALSE on error.
    *
-   * @throws \Drupal\patreon_user\PatreonUserUserException
+   * @throws PatreonUserUserException
    */
   public function getUser(array $patreon_user) {
     $return = FALSE;
@@ @@
    * @param int $patreon_id
    *   A valid patreon account id.
    *
-   * @return \Drupal\Core\Entity\EntityBase|\Drupal\Core\Entity\EntityInterface|bool
+   * @return EntityBase|EntityInterface|bool
    *   A loaded user or FALSE on error.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\patreon\PatreonGeneralException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws PatreonGeneralException
    */
   public function getUserFromId(int $patreon_id) {
     $return = FALSE;
@@ @@
    * @param array $data
    *   Results array from the user endpoint.
    *
-   * @return bool|\Drupal\Core\Entity\EntityInterface
+   * @return bool|EntityInterface
    *   A Drupal user object, or FALSE on error.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\patreon_user\PatreonUserUserException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws PatreonUserUserException
    */
   public function createUserFromReturn(array $data) {
     $return = FALSE;
@@ @@
           $return = $this->entityTypeManager->getStorage('user')->create([
             'mail' => $mail,
           ]);
-          $return->setPassword(user_password(20));
+          $return->setPassword(\Drupal::service('password_generator')->generate(20));
           $return->enforceIsNew();
           $return->activate();
         }
@@ @@
    * @return string
    *   A de-duped username if required. Defaults to provided.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getUniqueUserName(string $name, string $patreon_id): string {
     if ($this->entityTypeManager->getStorage('user')->loadByProperties([
    ----------- end diff -----------

Applied rules:
 * UserPasswordRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/patreon/modules/patreon_user/src/Controller/PatreonUserController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\patreon_user\Controller;

+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Language\LanguageManagerInterface;
@@ @@
   /**
    * The Patreon API Service.
    *
-   * @var \Drupal\patreon\PatreonServiceInterface
+   * @var PatreonServiceInterface
    */
   protected PatreonServiceInterface $service;

@@ @@
   /**
    * The Request Stack Service.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected RequestStack $stack;

@@ @@
   /**
    * Watchdog logger channel for captcha.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected LoggerInterface $logger;

@@ @@
   /**
    * Creates the controller.
    *
-   * @param \Drupal\patreon\PatreonServiceInterface $service
+   * @param PatreonServiceInterface $service
    *   A Patreon API service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $stack
+   * @param RequestStack $stack
    *   The request stack service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger channel.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   A Config Factory.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user account.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The Language Manager service.
    */
   public function __construct(PatreonServiceInterface $service, RequestStack $stack, LoggerInterface $logger, ConfigFactoryInterface $config_factory, AccountInterface $account, LanguageManagerInterface $language_manager) {
@@ @@
   /**
    * Create function.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   Dependency Injection Container.
    *
    * @return \Drupal\patreon_user\Controller\PatreonUserController
@@ @@
   /**
    * Logs user in from Patreon Oauth redirect return.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Redirects user to /user or 404s.
    */
   public function oauth() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/patreon/modules/patreon_user/patreon_user.module:96

    ---------- begin diff ----------
@@ @@
  *
  * @param array $form
  *   Drupal Form array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   Drupal Form State object.
  */
 function patreon_user_form_admin_settings_submit(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


12) modules/contrib/patreon/modules/patreon_user/patreon_user.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\patreon\PatreonServiceInterface;
 /**
  * @file
  * Install functions for the Patreon User module.
  */
-
 /**
  * Implements hook_install().
  */
 function patreon_user_install() {
-  /** @var \Drupal\patreon\PatreonServiceInterface $service */
+  /** @var PatreonServiceInterface $service */
   $service = \Drupal::service('patreon.api');
   $service->createRoles();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


13) modules/contrib/patreon/modules/patreon_extras/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\patreon_extras\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
@@ @@
    */
   public function testLoad() {
     $this->drupalGet(Url::fromRoute('<front>'));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/patreon/modules/patreon_extras/patreon_extras.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\patreon_user\PatreonUserService;
 /**
  * @file
  * Contains patreon_extras.module.
@@ @@
   $config = \Drupal::service('config.factory')
     ->getEditable('patreon_extras.settings');

-  /** @var \Drupal\patreon_user\PatreonUserService $service */
+  /** @var PatreonUserService $service */
   $service = \Drupal::service('patreon_user.api');
   $count = $amount = 0;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 14 files have been changed by Rector                                      

