modules/contrib/analytics/analytics.module
modules/contrib/analytics/analytics_amp/src/Plugin/AnalyticsService/AmpAnalytics.php
modules/contrib/analytics/analytics_amp/src/Plugin/AnalyticsService/AmpTrackingPixel.php
modules/contrib/analytics/analytics_google/src/Plugin/AnalyticsService/GoogleAnalyticsGa.php
modules/contrib/analytics/analytics_piwik/src/Plugin/AnalyticsService/Piwik.php
modules/contrib/analytics/src/AnalyticsServiceListBuilder.php
modules/contrib/analytics/src/AnalyticsServiceManager.php
modules/contrib/analytics/src/Annotation/AnalyticsService.php
modules/contrib/analytics/src/Controller/AnalyticsController.php
modules/contrib/analytics/src/Entity/AnalyticsService.php
modules/contrib/analytics/src/Entity/AnalyticsServiceInterface.php
modules/contrib/analytics/src/EventSubscriber/ConfigSubscriber.php
modules/contrib/analytics/src/EventSubscriber/ResponseSubscriber.php
modules/contrib/analytics/src/Form/AnalyticsServiceForm.php
modules/contrib/analytics/src/Form/AnalyticsSettingsForm.php
modules/contrib/analytics/src/Plugin/AnalyticsService/GoogleTagManager.php
modules/contrib/analytics/src/Plugin/ServiceDataTrait.php
modules/contrib/analytics/src/Plugin/ServicePluginBase.php
modules/contrib/analytics/src/Plugin/ServicePluginCollection.php
modules/contrib/analytics/src/Plugin/ServicePluginInterface.php
modules/contrib/analytics/src/Render/AnalyticsJsMarkup.php
modules/contrib/analytics/tests/src/Functional/DisableFlocTest.php

13 files with changes
=====================

1) modules/contrib/analytics/tests/src/Functional/DisableFlocTest.php:32

    ---------- begin diff ----------
@@ @@

     $account = $this->createUser(['administer analytics']);
     $this->drupalLogin($account);
-    $this->drupalPostForm('admin/config/services/analytics/settings', ['privacy[disable_floc]' => TRUE], 'Save configuration');
+    $this->drupalGet('admin/config/services/analytics/settings');
+    $this->submitForm(['privacy[disable_floc]' => TRUE], 'Save configuration');
     // Log out the user to test that the page cache was invalidated.
     $this->drupalLogout();
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/analytics/src/Plugin/ServicePluginCollection.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new SearchPluginCollection.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $manager
+   * @param PluginManagerInterface $manager
    *   The manager to be used for instantiating plugins.
    * @param string $instance_id
    *   The ID of the plugin instance.
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\analytics\Plugin\ServicePluginInterface
+   * @return ServicePluginInterface
    */
   public function &get($instance_id) {
     return parent::get($instance_id);
@@ @@
    */
   protected function initializePlugin($instance_id) {
     parent::initializePlugin($instance_id);
-    /** @var \Drupal\analytics\Plugin\ServicePluginBase $plugin_instance */
+    /** @var ServicePluginBase $plugin_instance */
     $plugin_instance = $this->pluginInstances[$instance_id];
     $plugin_instance->setServiceId($this->analyticsServiceId);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/analytics/src/Plugin/ServiceDataTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\analytics\Plugin;

+use Drupal\Core\Extension\ModuleHandlerInterface;
 trait ServiceDataTrait {

   /**
@@ @@
   /**
    * Wraps the module handler.
    *
-   * @return \Drupal\Core\Extension\ModuleHandlerInterface
+   * @return ModuleHandlerInterface
    *   The module handler.
    */
   abstract protected function moduleHandler();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/analytics/src/Form/AnalyticsServiceForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\analytics\Form;

+use Drupal\analytics\Entity\AnalyticsServiceInterface;
+use Drupal\Core\Form\SubformStateInterface;
 use Drupal\analytics\AnalyticsServiceManager;
 use Drupal\analytics\Entity\AnalyticsService;
 use Drupal\Core\Ajax\AjaxResponse;
@@ @@
   /**
    * The entity being used by this form.
    *
-   * @var \Drupal\analytics\Entity\AnalyticsServiceInterface
+   * @var AnalyticsServiceInterface
    */
   protected $entity;

@@ @@
   /**
    * The analyics service plugin manager.
    *
-   * @var \Drupal\analytics\AnalyticsServiceManager
+   * @var AnalyticsServiceManager
    */
   protected $analyticsServiceManager;

@@ @@
   /**
    * Constructs on AnalyticsServiceForm object.
    *
-   * @param \Drupal\analytics\AnalyticsServiceManager $analytics_service_manager
+   * @param AnalyticsServiceManager $analytics_service_manager
    *   The analytics service.
    */
   public function __construct(AnalyticsServiceManager $analytics_service_manager) {
@@ @@
    *
    * @param array $form
    *   Full form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Parent form state.
    *
-   * @return \Drupal\Core\Form\SubformStateInterface
+   * @return SubformStateInterface
    *   Sub-form state for the media source configuration form.
    */
   protected function getPluginSubFormState(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/analytics/src/EventSubscriber/ResponseSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\analytics\EventSubscriber;

+use Drupal\Core\Config\ImmutableConfig;
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * The analytics module configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * Constructs a new ResponseSubscriber.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The configuration factory.
    */
   public function __construct(ConfigFactoryInterface $config) {
@@ @@
   /**
    * Respond to the kernel response event.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The event.
    */
-  public function onKernelResponse(FilterResponseEvent $event) {
+  public function onKernelResponse(ResponseEvent $event) {
     if (!$event->isMasterRequest()) {
       return;
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/analytics/src/EventSubscriber/ConfigSubscriber.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The cache tags invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;

@@ @@
   /**
    * Constructs a new ConfigSubscriber.
    *
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The cache tags invalidator.
    */
   public function __construct(CacheTagsInvalidatorInterface $cache_tags_invalidator) {
@@ @@
   /**
    * Respond to the config save event.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The Event to process.
    */
   public function onConfigSave(ConfigCrudEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/analytics/src/Entity/AnalyticsServiceInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\analytics\Entity;

+use Drupal\analytics\Plugin\ServicePluginInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;

 /**
@@ @@
   /**
    * Returns the service plugin.
    *
-   * @return \Drupal\analytics\Plugin\ServicePluginInterface
+   * @return ServicePluginInterface
    *   The analytics service plugin used by this analytics service entity.
    */
   public function getService();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/analytics/src/Entity/AnalyticsService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\analytics\Entity;

+use Drupal\Component\Plugin\LazyPluginCollection;
+use Drupal\analytics\AnalyticsServiceManager;
 use Drupal\analytics\Plugin\ServicePluginCollection;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityWithPluginCollectionInterface;
@@ @@
   /**
    * The plugin collection that stores action plugins.
    *
-   * @var \Drupal\analytics\Plugin\ServicePluginCollection
+   * @var ServicePluginCollection
    */
   protected $pluginCollection;

@@ @@
   /**
    * Encapsulates the creation of the services's LazyPluginCollection.
    *
-   * @return \Drupal\Component\Plugin\LazyPluginCollection
+   * @return LazyPluginCollection
    *   The service's plugin collection.
    */
   protected function servicePluginCollection() {
@@ @@
   /**
    * Gets the analytics service plugin manager.
    *
-   * @return \Drupal\analytics\AnalyticsServiceManager
+   * @return AnalyticsServiceManager
    */
   protected function analyticsServicePluginManager() {
     return \Drupal::service('plugin.manager.analytics.service');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/analytics/src/Controller/AnalyticsController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\analytics\Controller;

+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\analytics\Entity\AnalyticsServiceInterface;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\ReplaceCommand;
@@ @@
   /**
    * Calls a method on a view and reloads the listing page.
    *
-   * @param \Drupal\analytics\Entity\AnalyticsServiceInterface $analytics_service
+   * @param AnalyticsServiceInterface $analytics_service
    *   The analytics service being acted on.
    * @param string $op
    *   The operation to perform, e.g., 'enable' or 'disable'.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return AjaxResponse|RedirectResponse
    *   Either returns a rebuilt listing page as an AJAX response, or redirects
    *   back to the listing page.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/analytics/src/Annotation/AnalyticsService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\analytics\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the service.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


11) modules/contrib/analytics/src/AnalyticsServiceManager.php:23

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/analytics/src/AnalyticsServiceListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\analytics;

+use Drupal\analytics\Entity\AnalyticsServiceInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\analytics\Entity\AnalyticsServiceInterface $entity */
+    /** @var AnalyticsServiceInterface $entity */
     $row['label'] = $entity->label();
     $row['service'] = $entity->getService()->getLabel();
     // @todo Do we need to actually show if overwritten? Do any other list builders do this?
-    /** @var \Drupal\analytics\Entity\AnalyticsServiceInterface $overridden_entity */
+    /** @var AnalyticsServiceInterface $overridden_entity */
     $overridden_entity = $this->storage->load($entity->id());
     $row['status'] = $overridden_entity->status() ? $this->t('Enabled') : $this->t('Disabled');
     if ($overridden_entity->status() != $entity->status()) {
@@ @@
    * {@inheritdoc}
    */
   public function getDefaultOperations(EntityInterface $entity) {
-    /** @var \Drupal\analytics\Entity\AnalyticsServiceInterface $entity */
+    /** @var AnalyticsServiceInterface $entity */
     $operations = parent::getDefaultOperations($entity);
     if (!$entity->get('status') && $entity->hasLinkTemplate('enable')) {
       $operations['enable'] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/analytics/analytics.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\analytics\Entity\AnalyticsServiceInterface;
 use Drupal\Core\Cache\CacheableMetadata;

 /**
@@ @@
     return;
   }

-  /** @var \Drupal\analytics\Entity\AnalyticsServiceInterface[] $services */
+  /** @var AnalyticsServiceInterface[] $services */
   $services = \Drupal::entityTypeManager()->getStorage('analytics_service')->loadMultiple();
   foreach ($services as $service) {
     if (!$service->status()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 13 files have been changed by Rector                                      

