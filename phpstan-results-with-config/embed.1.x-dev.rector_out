modules/contrib/embed/embed.api.php
modules/contrib/embed/embed.install
modules/contrib/embed/embed.module
modules/contrib/embed/embed.post_update.php
modules/contrib/embed/src/Access/EmbedButtonEditorAccessCheck.php
modules/contrib/embed/src/Ajax/EmbedInsertCommand.php
modules/contrib/embed/src/Annotation/EmbedType.php
modules/contrib/embed/src/Controller/EmbedController.php
modules/contrib/embed/src/DomHelperTrait.php
modules/contrib/embed/src/EmbedButtonInterface.php
modules/contrib/embed/src/EmbedButtonListBuilder.php
modules/contrib/embed/src/EmbedCKEditorPluginBase.php
modules/contrib/embed/src/EmbedType/EmbedTypeBase.php
modules/contrib/embed/src/EmbedType/EmbedTypeInterface.php
modules/contrib/embed/src/EmbedType/EmbedTypeManager.php
modules/contrib/embed/src/Entity/EmbedButton.php
modules/contrib/embed/src/Form/EmbedButtonForm.php
modules/contrib/embed/src/Form/EmbedSettingsForm.php
modules/contrib/embed/tests/embed_test/embed_test.module
modules/contrib/embed/tests/embed_test/src/Controller/EmbedTestController.php
modules/contrib/embed/tests/embed_test/src/Plugin/EmbedType/Aircraft.php
modules/contrib/embed/tests/embed_test/src/Plugin/EmbedType/Animal.php
modules/contrib/embed/tests/embed_test/src/Plugin/EmbedType/EmbedTestDefault.php
modules/contrib/embed/tests/embed_test/src/Plugin/Filter/EntityEmbedByID.php
modules/contrib/embed/tests/src/Functional/EmbedButtonEditorAccessCheckTest.php
modules/contrib/embed/tests/src/Functional/EmbedPreviewTest.php
modules/contrib/embed/tests/src/Functional/EmbedTestBase.php
modules/contrib/embed/tests/src/Functional/PreviewTest.php
modules/contrib/embed/tests/src/FunctionalJavascript/EmbedButtonAdminTest.php
modules/contrib/embed/tests/src/Kernel/IconTest.php
modules/contrib/embed/tests/src/Unit/DomHelperTraitTest.php

20 files with changes
=====================

1) modules/contrib/embed/tests/src/Unit/DomHelperTraitTest.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     $this->document = Html::load('<outer><test foo="bar" namespace:foo="bar"><test bar="foo"></test></test></outer>');
     $this->node = $this->document->getElementsByTagName('body')->item(0)->firstChild->firstChild;
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/embed/tests/src/Kernel/IconTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig('system');
     $this->installEntitySchema('embed_button');
@@ @@
    *
    * @param string $uri
    *   The exepcted URI to the icon file.
-   * @param \Drupal\embed\EmbedButtonInterface $button
+   * @param EmbedButtonInterface $button
    *   The embed button.
    * @param string $message
    *   The assertion message.
    */
   protected function assertIconUrl($uri, EmbedButtonInterface $button, string $message = '') {
-    $this->assertSame(file_url_transform_relative(file_create_url($uri)), $button->getIconUrl(), $message);
+    $this->assertSame(\Drupal::service('file_url_generator')->generateString($uri), $button->getIconUrl(), $message);
   }

 }
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/embed/tests/src/FunctionalJavascript/EmbedButtonAdminTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\embed\FunctionalJavascript;

+use Drupal\user\UserInterface;
 use Drupal\editor\Entity\Editor;
 use Drupal\filter\Entity\FilterFormat;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
@@ @@
   /**
    * The test administrative user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * The test administrative user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $webUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create Filtered HTML text format and enable entity_embed filter.
@@ @@
     $this->assertNotEmpty($assert_session->waitForText("Machine name: $button_id"));
     $page->selectFieldOption('type_id', 'embed_test_default');
     $assert_session->assertWaitOnAjaxRequest();
-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');
     // Ensure that the newly created button is listed.
     $this->drupalGet('admin/config/content/embed');
     $assert_session->pageTextContains($button_label);
@@ @@
     $edit = [
       'label' => $new_button_label,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     // Ensure that name and label has been changed.
     $this->drupalGet('admin/config/content/embed');
     $assert_session->pageTextContains($new_button_label);
@@ @@

     // Delete embed button.
     $this->drupalGet('admin/config/content/embed/button/manage/' . $button_id . '/delete');
-    $this->drupalPostForm(NULL, [], 'Delete');
+    $this->submitForm([], 'Delete');
     // Ensure that the deleted embed button no longer exists.
     $this->drupalGet('admin/config/content/embed/button/manage/' . $button_id);
     $assert_session->pageTextContains('The requested page could not be found.');
@@ @@
     $this->assertSame('fixed-wing', $aircraft_type->getValue());

     $edit['type_settings[aircraft_type]'] = 'invalid';
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $assert_session->pageTextContains('Cannot select invalid aircraft type.');

     $edit['type_settings[aircraft_type]'] = 'helicopters';
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $assert_session->pageTextContains('Helicopters are just rotorcraft.');

     $this->drupalGet('admin/config/content/embed/button/manage/' . $button_id);
-    $this->assertFieldByName('type_settings[aircraft_type]', 'rotorcraft');
+    $this->assertSession()->fieldValueEquals('type_settings[aircraft_type]', 'rotorcraft');
   }

   public function testCKEditorButtonConflict() {
@@ @@
     $edit = [
       'type_id' => 'embed_test_default',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/embed/tests/src/Functional/PreviewTest.php:21

    ---------- begin diff ----------
@@ @@
   public function testPreviewRoute() {
     // Ensure the default filter can be previewed by the anonymous user.
     $this->getRoute('plain_text');
-    $this->assertResponse(200);
-    $this->assertText(static::SUCCESS);
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(static::SUCCESS);

     // The anonymous user should not have permission to use embed_test format.
     $this->getRoute('embed_test');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Now login a user that can use the embed_test format.
     $this->drupalLogin($this->webUser);

     $this->getRoute('plain_text');
-    $this->assertResponse(200);
-    $this->assertText(static::SUCCESS);
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(static::SUCCESS);

     $this->getRoute('embed_test');
-    $this->assertResponse(200);
-    $this->assertText(static::SUCCESS);
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(static::SUCCESS);

     // Test preview route with an empty request.
     $this->getRoute('embed_test', '');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);

     // Test preview route with an invalid text format.
     $this->getRoute('invalid_format');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * AssertTextRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/embed/tests/src/Functional/EmbedTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\embed\Functional;

+use Drupal\user\UserInterface;
+use Drupal\file\FileInterface;
 use Drupal\editor\Entity\Editor;
 use Drupal\file\Entity\File;
 use Drupal\filter\Entity\FilterFormat;
@@ @@
   /**
    * The test administrative user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * The test administrative user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $webUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create Filtered HTML text format and enable entity_embed filter.
@@ @@
    *   (optional) File size in bytes to match. Defaults to NULL, which will not
    *   filter the returned list by size.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   The file entity.
    *
    * @see \Drupal\Tests\TestFileCreationTrait::getTestFiles()
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/embed/tests/src/Functional/EmbedButtonEditorAccessCheckTest.php:27

    ---------- begin diff ----------
@@ @@
     // The anonymous user should have access to the plain_text format, but it
     // hasn't been configured to use an editor yet.
     $this->getRoute('plain_text', 'embed_test_default');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
     $this->assertCacheContext('route');
-    $this->assertNoCacheTag('config:editor.editor.embed_test');
-    $this->assertNoCacheTag('config:embed.button.embed_test_default');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:editor.editor.embed_test');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:embed.button.embed_test_default');

     // The anonymous user should not have permission to use embed_test format.
     $this->getRoute('embed_test', 'embed_test_default');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->assertCacheContext('route');
-    $this->assertNoCacheTag('config:editor.editor.embed_test');
-    $this->assertNoCacheTag('config:embed.button.embed_test_default');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:editor.editor.embed_test');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:embed.button.embed_test_default');

     // Now login a user that can use the embed_test format.
     $this->drupalLogin($this->webUser);

     $this->getRoute('plain_text', 'embed_test_default');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
     $this->assertCacheContext('route');
-    $this->assertNoCacheTag('config:editor.editor.plain_text');
-    $this->assertNoCacheTag('config:embed.button.embed_test_default');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:editor.editor.plain_text');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:embed.button.embed_test_default');

     // Add an empty configuration for the plain_text editor configuration.
     $editor = Editor::create([
@@ @@
     ]);
     $editor->save();
     $this->getRoute('plain_text', 'embed_test_default');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->assertCacheContext('route');
-    $this->assertCacheTag('config:editor.editor.plain_text');
-    $this->assertCacheTag('config:embed.button.embed_test_default');
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'config:editor.editor.plain_text');
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'config:embed.button.embed_test_default');

     $this->getRoute('embed_test', 'embed_test_default');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertCacheContext('route');
-    $this->assertCacheTag('config:editor.editor.embed_test');
-    $this->assertCacheTag('config:embed.button.embed_test_default');
-    $this->assertText(static::SUCCESS);
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'config:editor.editor.embed_test');
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'config:embed.button.embed_test_default');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(static::SUCCESS);

     // Test route with an empty request.
     $this->getRoute('embed_test', 'embed_test_default', '');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
     $this->assertCacheContext('route');
-    $this->assertCacheTag('config:editor.editor.embed_test');
-    $this->assertCacheTag('config:embed.button.embed_test_default');
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'config:editor.editor.embed_test');
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'config:embed.button.embed_test_default');

     // Test route with an invalid text format.
     $this->getRoute('invalid_editor', 'embed_test_default');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
     $this->assertCacheContext('route');
-    $this->assertNoCacheTag('config:editor.editor.invalid_editor');
-    $this->assertNoCacheTag('config:embed.button.embed_test_default');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:editor.editor.invalid_editor');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:embed.button.embed_test_default');

     // Test route with an invalid embed button.
     $this->getRoute('embed_test', 'invalid_button');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
     $this->assertCacheContext('route');
-    $this->assertNoCacheTag('config:editor.editor.embed_test');
-    $this->assertNoCacheTag('config:embed.button.invalid_button');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:editor.editor.embed_test');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:embed.button.invalid_button');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertCacheTagRector
 * AssertNoCacheTagRector
 * AssertResponseRector
 * AssertTextRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/embed/tests/embed_test/src/Plugin/Filter/EntityEmbedByID.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, RendererInterface $renderer) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/embed/tests/embed_test/src/Controller/EmbedTestController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\embed_test\Controller;

+use Symfony\Component\HttpFoundation\Response;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Render\HtmlResponse;
 use Drupal\editor\EditorInterface;
@@ @@
   /**
    * Return CSRF token.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   CSRF token.
    */
   public function getCsrfToken() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/embed/src/Form/EmbedSettingsForm.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The stream wrapper manager.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;

@@ @@
   /**
    * Constructs a EmbedSettingsForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *   The stream wrapper manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, StreamWrapperManagerInterface $stream_wrapper_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/embed/src/Form/EmbedButtonForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\embed\Form;

+use Drupal\embed\EmbedButtonInterface;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\ReplaceCommand;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The embed type plugin manager.
    *
-   * @var \Drupal\embed\EmbedType\EmbedTypeManager
+   * @var EmbedTypeManager
    */
   protected $embedTypeManager;

@@ @@
   /**
    * Constructs a new EmbedButtonForm.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\embed\EmbedType\EmbedTypeManager $embed_type_manager
+   * @param EmbedTypeManager $embed_type_manager
    *   The embed type plugin manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EmbedTypeManager $embed_type_manager, ConfigFactoryInterface $config_factory) {
@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\embed\EmbedButtonInterface $button */
+    /** @var EmbedButtonInterface $button */
     $button = $this->entity;
     $form_state->setTemporaryValue('embed_button', $button);

@@ @@
   public function validateForm(array &$form, FormStateInterface $form_state) {
     parent::validateForm($form, $form_state);

-    /** @var \Drupal\embed\EmbedButtonInterface $button */
+    /** @var EmbedButtonInterface $button */
     $button = $this->entity;

     // Run embed type plugin validation.
@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\embed\EmbedButtonInterface $button */
+    /** @var EmbedButtonInterface $button */
     $button = $this->entity;

     // Run embed type plugin submission.
@@ @@
    *
    * @param array $form
    *   The build form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Ajax response with updated options for the embed type.
    */
   public function updateTypeSettings(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/embed/src/Entity/EmbedButton.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\embed\Entity;

+use Drupal\embed\EmbedType\EmbedTypeManager;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\File\FileSystemInterface;
@@ @@
       if (!is_file($uri) && !UrlHelper::isExternal($uri)) {
         static::convertEncodedDataToImage($this->icon);
       }
-      $uri = file_create_url($uri);
+      $uri = \Drupal::service('file_url_generator')->generateAbsoluteString($uri);
     }
     else {
       $uri = $this->getTypePlugin()->getDefaultIconUrl();
     }

-    return file_url_transform_relative($uri);
+    return \Drupal::service('file_url_generator')->transformRelative($uri);
   }

   /**
@@ @@
   /**
    * Gets the embed type plugin manager.
    *
-   * @return \Drupal\embed\EmbedType\EmbedTypeManager
+   * @return EmbedTypeManager
    *   The embed type plugin manager.
    */
   protected function embedTypeManager() {
@@ @@
   public static function convertEncodedDataToImage(array $data) {
     if (!is_file($data['uri'])) {
       $directory = dirname($data['uri']);
-      /** @var \Drupal\Core\File\FileSystemInterface $filesystem */
+      /** @var FileSystemInterface $filesystem */
       $fileSystem = \Drupal::service('file_system');
       $fileSystem->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);
       $fileSystem->saveData(base64_decode($data['data']), $data['uri'], FileSystemInterface::EXISTS_REPLACE);
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/embed/src/EmbedType/EmbedTypeManager.php:21

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/embed/src/EmbedCKEditorPluginBase.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The embed button query.
    *
-   * @var \Drupal\Core\Entity\Query\QueryInterface
+   * @var QueryInterface
    */
   protected $embedButtonQuery;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\Query\QueryInterface $embed_button_query
+   * @param QueryInterface $embed_button_query
    *   The entity query object for embed button.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, QueryInterface $embed_button_query) {
@@ @@
   /**
    * Build the information about the specific button.
    *
-   * @param \Drupal\embed\EmbedButtonInterface $embed_button
+   * @param EmbedButtonInterface $embed_button
    *   The embed button.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/embed/src/EmbedButtonListBuilder.php:27

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\embed\EmbedButtonInterface $entity */
+    /** @var EmbedButtonInterface $entity */
     $row = [];
     $row['label'] = $entity->label();
     $row['embed_type'] = $entity->getTypeLabel();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/embed/src/EmbedButtonInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\embed;

+use Drupal\embed\EmbedType\EmbedTypeInterface;
+use Drupal\file\FileInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;

 /**
@@ @@
   /**
    * Returns the plugin of the associated embed type.
    *
-   * @return \Drupal\embed\EmbedType\EmbedTypeInterface
+   * @return EmbedTypeInterface
    *   The plugin of the embed type.
    */
   public function getTypePlugin();
@@ @@
   /**
    * Returns the button's icon file.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   The file entity of the button icon.
    *
    * @deprecated in embed:8.x-1.2 and is removed from embed:2.0.0. Use
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/embed/src/Controller/EmbedController.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * Constructs an EmbedController instance.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    */
   public function __construct(RendererInterface $renderer) {
@@ @@
    *
    * Expects the HTML element as GET parameter.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
-   * @param \Drupal\filter\FilterFormatInterface $filter_format
+   * @param FilterFormatInterface $filter_format
    *   The filter format.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
+   * @throws NotFoundHttpException
    *   Throws an exception if 'value' parameter is not found in the request.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The preview of the embedded item specified by the data attributes.
    */
   public function preview(Request $request, FilterFormatInterface $filter_format) {
@@ @@
    *
    * Expects the HTML element as GET parameter.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
-   * @param \Drupal\editor\EditorInterface $editor
+   * @param EditorInterface $editor
    *   The editor.
-   * @param \Drupal\embed\EmbedButtonInterface $embed_button
+   * @param EmbedButtonInterface $embed_button
    *   The embed button.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
+   * @throws NotFoundHttpException
    *   Throws an exception if 'value' parameter is not found in the request.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The preview of the embedded item specified by the data attributes.
    */
   public function previewEditor(Request $request, EditorInterface $editor, EmbedButtonInterface $embed_button) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/embed/src/Annotation/EmbedType.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\embed\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the embed type.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


18) modules/contrib/embed/src/Access/EmbedButtonEditorAccessCheck.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\embed\Access;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
@@ @@
    *   _embed_button_editor_access: 'TRUE'
    * @endcode
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(RouteMatchInterface $route_match, AccountInterface $account) {
@@ @@
   /**
    * Checks if the embed button is enabled in an editor configuration.
    *
-   * @param \Drupal\embed\EmbedButtonInterface $embed_button
+   * @param EmbedButtonInterface $embed_button
    *   The embed button entity to check.
-   * @param \Drupal\editor\EditorInterface $editor
+   * @param EditorInterface $editor
    *   The editor entity to check.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   When the received Text Editor entity does not use CKEditor. This is
    *   currently only capable of detecting buttons used by CKEditor.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


19) modules/contrib/embed/embed.post_update.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\embed\EmbedButtonInterface;
 /**
  * @file
  * Post update functions for Embed.
  */
-
 /**
  * Convert embed button icons from managed files to encoded data.
  */
@@ @@
   $file_storage = \Drupal::entityTypeManager()->getStorage('file');
   $file_usage = \Drupal::service('file.usage');

-  /** @var \Drupal\embed\EmbedButtonInterface[] $buttons */
+  /** @var EmbedButtonInterface[] $buttons */
   $buttons = \Drupal::entityTypeManager()->getStorage('embed_button')->loadMultiple();

   foreach ($buttons as $button) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


20) modules/contrib/embed/embed.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\ckeditor\CKEditorPluginManager;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ @@
  * conflict with any existing CKEditor buttons.
  */
 function ckeditor_form_embed_button_add_form_validate(array &$form, FormStateInterface $form_state) {
-  /** @var \Drupal\ckeditor\CKEditorPluginManager $ckeditor_plugin_manager */
+  /** @var CKEditorPluginManager $ckeditor_plugin_manager */
   $ckeditor_plugin_manager = \Drupal::service('plugin.manager.ckeditor.plugin');

   // Get a list of all buttons that are provided by all plugins.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 20 files have been changed by Rector                                      

