diff --git a/src/EventSubscriber/ExceptionJsonSubscriber.php b/src/EventSubscriber/ExceptionJsonSubscriber.php
index eaaa27e..71f34cd 100644
--- a/src/EventSubscriber/ExceptionJsonSubscriber.php
+++ b/src/EventSubscriber/ExceptionJsonSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\api_toolkit\EventSubscriber;
 
+use Symfony\Component\Validator\ConstraintViolationInterface;
 use Drupal\api_toolkit\Exception\ApiValidationException;
 use Drupal\api_toolkit\Validation\ContextFactory;
 use Drupal\Core\Cache\CacheableDependencyInterface;
@@ -27,14 +28,14 @@ class ExceptionJsonSubscriber extends HttpExceptionSubscriberBase {
   /**
    * The context factory.
    *
-   * @var \Drupal\api_toolkit\Validation\ContextFactory
+   * @var ContextFactory
    */
   protected $context;
 
   /**
    * Constructs a new ExceptionJsonSubscriber.
    *
-   * @param \Drupal\api_toolkit\Validation\ContextFactory $context
+   * @param ContextFactory $context
    *   A context factory.
    */
   public function __construct(ContextFactory $context) {
@@ -104,7 +105,7 @@ class ExceptionJsonSubscriber extends HttpExceptionSubscriberBase {
     $headers = [];
     $data = [];
 
-    /** @var \Symfony\Component\Validator\ConstraintViolationInterface $violation */
+    /** @var ConstraintViolationInterface $violation */
     foreach ($violations as $violation) {
       if ($path = $violation->getPropertyPath()) {
         $data['errors'][] = [
diff --git a/src/EventSubscriber/MaintenanceModeSubscriber.php b/src/EventSubscriber/MaintenanceModeSubscriber.php
index cd778f6..b084066 100644
--- a/src/EventSubscriber/MaintenanceModeSubscriber.php
+++ b/src/EventSubscriber/MaintenanceModeSubscriber.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\api_toolkit\EventSubscriber;
 
+use Drupal\Core\Site\MaintenanceMode;
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\EventSubscriber\MainContentViewSubscriber;
@@ -22,23 +24,23 @@ class MaintenanceModeSubscriber implements EventSubscriberInterface {
   /**
    * The maintenance mode.
    *
-   * @var \Drupal\Core\Site\MaintenanceMode
+   * @var MaintenanceMode
    */
   protected $maintenanceMode;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;
 
   /**
    * Constructs a new MaintenanceModeSubscriber.
    *
-   * @param \Drupal\Core\Site\MaintenanceModeInterface $maintenance_mode
+   * @param MaintenanceModeInterface $maintenance_mode
    *   The maintenance mode.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(MaintenanceModeInterface $maintenance_mode, ConfigFactoryInterface $config_factory) {
@@ -49,7 +51,7 @@ class MaintenanceModeSubscriber implements EventSubscriberInterface {
   /**
    * Return an error response if site is in maintenance mode.
    *
-   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
+   * @param RequestEvent $event
    *   The event to process.
    */
   public function onKernelRequestMaintenance(RequestEvent $event) {
@@ -73,7 +75,7 @@ class MaintenanceModeSubscriber implements EventSubscriberInterface {
   /**
    * Gets the site maintenance message.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   The formatted site maintenance message.
    */
   protected function getSiteMaintenanceMessage() {
diff --git a/src/Exception/ApiValidationException.php b/src/Exception/ApiValidationException.php
index 70fa692..356792c 100644
--- a/src/Exception/ApiValidationException.php
+++ b/src/Exception/ApiValidationException.php
@@ -17,14 +17,14 @@ class ApiValidationException extends HttpException {
   /**
    * The violation list.
    *
-   * @var \Symfony\Component\Validator\ConstraintViolationListInterface|null
+   * @var ConstraintViolationListInterface|null
    */
   protected $violations;
 
   /**
    * Constructs a new ApiValidationException.
    *
-   * @param \Symfony\Component\Validator\ConstraintViolationListInterface|null $violations
+   * @param ConstraintViolationListInterface|null $violations
    *   A violation list.
    * @param int $status
    *   The HTTP status code that should be returned in the response.
diff --git a/src/Plugin/Validation/Constraint/EntityExistsValidator.php b/src/Plugin/Validation/Constraint/EntityExistsValidator.php
index 896d33b..de1cdf2 100755
--- a/src/Plugin/Validation/Constraint/EntityExistsValidator.php
+++ b/src/Plugin/Validation/Constraint/EntityExistsValidator.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\api_toolkit\Plugin\Validation\Constraint;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ -20,7 +21,7 @@ class EntityExistsValidator extends ConstraintValidator implements ContainerInje
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
diff --git a/src/Plugin/Validation/Constraint/LangcodeValidator.php b/src/Plugin/Validation/Constraint/LangcodeValidator.php
index 9ad2f5a..d6de6c7 100755
--- a/src/Plugin/Validation/Constraint/LangcodeValidator.php
+++ b/src/Plugin/Validation/Constraint/LangcodeValidator.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\api_toolkit\Plugin\Validation\Constraint;
 
+use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\Validator\Constraint;
@@ -16,7 +17,7 @@ class LangcodeValidator extends ConstraintValidator implements ContainerInjectio
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
diff --git a/src/Plugin/Validation/Constraint/MigrationSourceExistsValidator.php b/src/Plugin/Validation/Constraint/MigrationSourceExistsValidator.php
index c5773b8..4065ddf 100755
--- a/src/Plugin/Validation/Constraint/MigrationSourceExistsValidator.php
+++ b/src/Plugin/Validation/Constraint/MigrationSourceExistsValidator.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\api_toolkit\Plugin\Validation\Constraint;
 
+use Drupal\migrate\Plugin\MigrationPluginManagerInterface;
+use Drupal\migrate\Plugin\MigrationInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\migrate\MigrateException;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -17,7 +19,7 @@ class MigrationSourceExistsValidator extends ConstraintValidator implements Cont
   /**
    * The migration plugin manager.
    *
-   * @var \Drupal\migrate\Plugin\MigrationPluginManagerInterface
+   * @var MigrationPluginManagerInterface
    */
   protected $migrationManager;
 
@@ -43,7 +45,7 @@ class MigrationSourceExistsValidator extends ConstraintValidator implements Cont
       return;
     }
 
-    /** @var \Drupal\migrate\Plugin\MigrationInterface|false $migration */
+    /** @var MigrationInterface|false $migration */
     $migration = $this->migrationManager->createInstance($constraint->migration);
     if ($migration === FALSE) {
       $this->context->addViolation('The "%id" migration does not exist.', ['%id' => $constraint->migration]);
diff --git a/src/Response/ApiErrorJsonResponse.php b/src/Response/ApiErrorJsonResponse.php
index 925c72c..b4efd06 100755
--- a/src/Response/ApiErrorJsonResponse.php
+++ b/src/Response/ApiErrorJsonResponse.php
@@ -15,14 +15,14 @@ class ApiErrorJsonResponse extends JsonResponse {
   /**
    * The violation list.
    *
-   * @var \Symfony\Component\Validator\ConstraintViolationListInterface|null
+   * @var ConstraintViolationListInterface|null
    */
   protected $violations;
 
   /**
    * Constructs a new ApiErrorJsonResponse.
    *
-   * @param \Symfony\Component\Validator\ConstraintViolationListInterface $violations
+   * @param ConstraintViolationListInterface $violations
    *   A violation list.
    * @param int $status
    *   The HTTP status code that should be returned in the response.
diff --git a/src/Validation/ContextFactory.php b/src/Validation/ContextFactory.php
index 7a851da..5d1404c 100644
--- a/src/Validation/ContextFactory.php
+++ b/src/Validation/ContextFactory.php
@@ -15,14 +15,14 @@ class ContextFactory {
   /**
    * The Symfony validator.
    *
-   * @var \Symfony\Component\Validator\Validator\ValidatorInterface
+   * @var ValidatorInterface
    */
   protected $validator;
 
   /**
    * Constructs a new ContextFactory.
    *
-   * @param \Symfony\Component\Validator\Validator\ValidatorInterface $validator
+   * @param ValidatorInterface $validator
    *   A Symfony validator.
    */
   public function __construct(ValidatorInterface $validator) {
diff --git a/src/Validation/ValidatorFactory.php b/src/Validation/ValidatorFactory.php
index 3dd2061..61b8862 100644
--- a/src/Validation/ValidatorFactory.php
+++ b/src/Validation/ValidatorFactory.php
@@ -16,14 +16,14 @@ class ValidatorFactory {
   /**
    * The class resolver.
    *
-   * @var \Drupal\Core\DependencyInjection\ClassResolverInterface
+   * @var ClassResolverInterface
    */
   protected $classResolver;
 
   /**
    * Constructs a new ValidatorFactory.
    *
-   * @param \Drupal\Core\DependencyInjection\ClassResolverInterface $class_resolver
+   * @param ClassResolverInterface $class_resolver
    *   A class resolver.
    */
   public function __construct(ClassResolverInterface $class_resolver) {
