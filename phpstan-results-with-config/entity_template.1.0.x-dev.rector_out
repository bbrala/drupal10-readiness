modules/contrib/entity_template/contrib/ui/entity_template_ui.module
modules/contrib/entity_template/contrib/ui/src/Access/BlueprintStorageAccessCheck.php
modules/contrib/entity_template/contrib/ui/src/Controller/AutocompleteController.php
modules/contrib/entity_template/contrib/ui/src/Controller/BuilderController.php
modules/contrib/entity_template/contrib/ui/src/Controller/ChooseComponentController.php
modules/contrib/entity_template/contrib/ui/src/Controller/ChooseConditionController.php
modules/contrib/entity_template/contrib/ui/src/Controller/ChooseTemplateController.php
modules/contrib/entity_template/contrib/ui/src/Controller/TemplateBuilderDefaultBlueprintController.php
modules/contrib/entity_template/contrib/ui/src/Element/AvailablePlaceholders.php
modules/contrib/entity_template/contrib/ui/src/Entity/TemplateBlueprintListBuilder.php
modules/contrib/entity_template/contrib/ui/src/Entity/TemplateBuilderHtmlRouteProvider.php
modules/contrib/entity_template/contrib/ui/src/EntityTemplateUiServiceProvider.php
modules/contrib/entity_template/contrib/ui/src/Form/AddComponentForm.php
modules/contrib/entity_template/contrib/ui/src/Form/AddConditionForm.php
modules/contrib/entity_template/contrib/ui/src/Form/AddTemplateForm.php
modules/contrib/entity_template/contrib/ui/src/Form/ComponentFormBase.php
modules/contrib/entity_template/contrib/ui/src/Form/ConfigureConditionForm.php
modules/contrib/entity_template/contrib/ui/src/Form/ConfigureTemplateForm.php
modules/contrib/entity_template/contrib/ui/src/Form/CreateEntityFromTemplateForm.php
modules/contrib/entity_template/contrib/ui/src/Form/RemoveComponentForm.php
modules/contrib/entity_template/contrib/ui/src/Form/RemoveConditionForm.php
modules/contrib/entity_template/contrib/ui/src/Form/RemoveTemplateForm.php
modules/contrib/entity_template/contrib/ui/src/Form/SwapComponentForm.php
modules/contrib/entity_template/contrib/ui/src/Form/TemplateAjaxFormHelperTrait.php
modules/contrib/entity_template/contrib/ui/src/Form/TemplateBlueprintForm.php
modules/contrib/entity_template/contrib/ui/src/Form/TemplateBuilderForm.php
modules/contrib/entity_template/contrib/ui/src/Form/TemplateUIHelperTrait.php
modules/contrib/entity_template/contrib/ui/src/Plugin/EntityTemplate/Template/BaseTemplateUI.php
modules/contrib/entity_template/contrib/ui/src/Plugin/EntityTemplate/Template/BlueprintTemplateUI.php
modules/contrib/entity_template/contrib/ui/src/Plugin/EntityTemplate/Template/InlineTemplateUI.php
modules/contrib/entity_template/contrib/ui/src/Plugin/EntityTemplate/Template/TemplateUIFactory.php
modules/contrib/entity_template/contrib/ui/src/Plugin/EntityTemplate/Template/TemplateUIFactoryInterface.php
modules/contrib/entity_template/contrib/ui/src/Plugin/EntityTemplate/Template/TemplateUIInterface.php
modules/contrib/entity_template/contrib/ui/src/Plugin/TypedDataFormWidget/EntityInputWidget.php
modules/contrib/entity_template/contrib/ui/src/PluginForm/BlueprintTemplateAddForm.php
modules/contrib/entity_template/contrib/ui/src/PluginForm/ContextAwareComponentForm.php
modules/contrib/entity_template/contrib/ui/src/PluginForm/InlineTemplateAddForm.php
modules/contrib/entity_template/contrib/ui/src/PluginForm/InlineTemplateConfigureForm.php
modules/contrib/entity_template/contrib/ui/src/PluginForm/TemplateAddForm.php
modules/contrib/entity_template/contrib/ui/src/PluginForm/TemplateConfigureForm.php
modules/contrib/entity_template/contrib/ui/src/PluginForm/TemplateConfigureFormBase.php
modules/contrib/entity_template/contrib/ui/src/TypedDataFormWidgetManager.php
modules/contrib/entity_template/entity_template.module
modules/contrib/entity_template/src/Annotation/EntityTemplate.php
modules/contrib/entity_template/src/Annotation/EntityTemplateBlueprintProvider.php
modules/contrib/entity_template/src/Annotation/EntityTemplateBuilder.php
modules/contrib/entity_template/src/Annotation/EntityTemplateComponent.php
modules/contrib/entity_template/src/Blueprint.php
modules/contrib/entity_template/src/BlueprintEntityAdaptor.php
modules/contrib/entity_template/src/BlueprintEntityStorageAdaptor.php
modules/contrib/entity_template/src/BlueprintInterface.php
modules/contrib/entity_template/src/BlueprintLazyTemplatesCollection.php
modules/contrib/entity_template/src/BlueprintResult.php
modules/contrib/entity_template/src/BlueprintStorageInterface.php
modules/contrib/entity_template/src/BlueprintStorageTrait.php
modules/contrib/entity_template/src/BlueprintTempstoreParamConverter.php
modules/contrib/entity_template/src/BlueprintTempstoreRepository.php
modules/contrib/entity_template/src/ContainerFactoryTemplateInterface.php
modules/contrib/entity_template/src/ContextAwareInterface.php
modules/contrib/entity_template/src/Controller/EntityTemplateController.php
modules/contrib/entity_template/src/Entity/BlueprintEntityInterface.php
modules/contrib/entity_template/src/Entity/TemplateBlueprint.php
modules/contrib/entity_template/src/Entity/TemplateBuilder.php
modules/contrib/entity_template/src/EntityBuilderTempStoreRepository.php
modules/contrib/entity_template/src/EntityBuilderTempStoreRepositoryInterface.php
modules/contrib/entity_template/src/Exception/BuilderException.php
modules/contrib/entity_template/src/Exception/MultipleAvailableBlueprintException.php
modules/contrib/entity_template/src/Exception/NoAvailableBlueprintException.php
modules/contrib/entity_template/src/Exception/TemplateException.php
modules/contrib/entity_template/src/Form/BuilderParameterProvisionForm.php
modules/contrib/entity_template/src/MultipleTemplateResult.php
modules/contrib/entity_template/src/Plugin/DataType/BlueprintResult.php
modules/contrib/entity_template/src/Plugin/Derivative/ConfigTemplateBuilderDeriver.php
modules/contrib/entity_template/src/Plugin/Derivative/EntityFieldStorageDeriver.php
modules/contrib/entity_template/src/Plugin/EntityTemplate/BlueprintProvider/BlueprintProviderInterface.php
modules/contrib/entity_template/src/Plugin/EntityTemplate/BlueprintProvider/BuilderDefault.php
modules/contrib/entity_template/src/Plugin/EntityTemplate/BlueprintProvider/ConfigTemplateBlueprint.php
modules/contrib/entity_template/src/Plugin/EntityTemplate/Builder/BuilderBase.php
modules/contrib/entity_template/src/Plugin/EntityTemplate/Builder/BuilderInterface.php
modules/contrib/entity_template/src/Plugin/EntityTemplate/Builder/ConfigTemplateBuilder.php
modules/contrib/entity_template/src/Plugin/EntityTemplate/Builder/ConfigurableDefaultBlueprintInterface.php
modules/contrib/entity_template/src/Plugin/EntityTemplate/Builder/ConfigurableDefaultBlueprintTrait.php
modules/contrib/entity_template/src/Plugin/EntityTemplate/Component/ComponentBase.php
modules/contrib/entity_template/src/Plugin/EntityTemplate/Component/ComponentInterface.php
modules/contrib/entity_template/src/Plugin/EntityTemplate/Component/ContextAwareComponentBase.php
modules/contrib/entity_template/src/Plugin/EntityTemplate/Component/DataSelectComponentTrait.php
modules/contrib/entity_template/src/Plugin/EntityTemplate/Component/DateTimeFieldDataSelectComponent.php
modules/contrib/entity_template/src/Plugin/EntityTemplate/Component/FieldComponentBase.php
modules/contrib/entity_template/src/Plugin/EntityTemplate/Component/FieldDataSelectComponent.php
modules/contrib/entity_template/src/Plugin/EntityTemplate/Component/FieldWidgetInputComponent.php
modules/contrib/entity_template/src/Plugin/EntityTemplate/Component/InlineTemplate.php
modules/contrib/entity_template/src/Plugin/EntityTemplate/Component/StringFieldWidgetInputComponent.php
modules/contrib/entity_template/src/Plugin/EntityTemplate/Component/SwappableComponentInterface.php
modules/contrib/entity_template/src/Plugin/EntityTemplate/Component/TemplateContextAwareComponentInterface.php
modules/contrib/entity_template/src/Plugin/EntityTemplate/Component/TemplateContextAwareComponentTrait.php
modules/contrib/entity_template/src/Plugin/EntityTemplate/Template/BlueprintTemplate.php
modules/contrib/entity_template/src/Plugin/EntityTemplate/Template/BlueprintTemplateInterface.php
modules/contrib/entity_template/src/Plugin/EntityTemplate/Template/ConditionalTemplateInterface.php
modules/contrib/entity_template/src/Plugin/EntityTemplate/Template/SubTemplateInterface.php
modules/contrib/entity_template/src/Plugin/EntityTemplate/Template/SubTemplateTrait.php
modules/contrib/entity_template/src/Plugin/EntityTemplate/Template/Template.php
modules/contrib/entity_template/src/Plugin/EntityTemplate/Template/TemplateComponentTrait.php
modules/contrib/entity_template/src/Plugin/EntityTemplate/Template/TemplateInterface.php
modules/contrib/entity_template/src/SampleContextValueTrait.php
modules/contrib/entity_template/src/TemplateBlueprintProviderManager.php
modules/contrib/entity_template/src/TemplateBuilderManager.php
modules/contrib/entity_template/src/TemplateComponentManager.php
modules/contrib/entity_template/src/TemplateLazyComponentsCollection.php
modules/contrib/entity_template/src/TemplateManager.php
modules/contrib/entity_template/src/TemplateResult.php
modules/contrib/entity_template/src/TypeLabelTrait.php

93 files with changes
=====================

1) modules/contrib/entity_template/src/TypeLabelTrait.php:7

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;

 trait TypeLabelTrait {

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * Get the entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    */
   protected function entityTypeManager() {
     return $this->entityTypeManager;
@@ @@
   /**
    * Get the entity type bundle info.
    *
-   * @return \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @return EntityTypeBundleInfoInterface
    */
   protected function entityTypeBundleInfo() {
     return $this->entityTypeBundleInfo;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/entity_template/src/TemplateResult.php:7

    ---------- begin diff ----------
@@ @@
 class TemplateResult {

   /**
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;

   /**
-   * @var string[]|\Drupal\Component\Render\MarkupInterface[]
+   * @var string[]|MarkupInterface[]
    */
   protected $messages = [];

   /**
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    */
   public function getEntity(): ?EntityInterface {
     return $this->entity;
@@ @@
   }

   /**
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
    * @return static
    */
@@ @@
   /**
    * Get all messages.
    *
-   * @return \Drupal\Component\Render\MarkupInterface[]|string[]
+   * @return MarkupInterface[]|string[]
    */
   public function getMessages() {
     return $this->messages;
@@ @@
   /**
    * Add a message
    *
-   * @param string|\Drupal\Component\Render\MarkupInterface $message
+   * @param string|MarkupInterface $message
    *
    * @return static
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/entity_template/src/TemplateManager.php:11

    ---------- begin diff ----------
@@ @@
    * TemplateBuilderManager constructor.
    *
    * @param \Traversable $namespaces
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param CacheBackendInterface $cache_backend
+   * @param ModuleHandlerInterface $module_handler
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
     parent::__construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/entity_template/src/TemplateLazyComponentsCollection.php:15

    ---------- begin diff ----------
@@ @@
 class TemplateLazyComponentsCollection extends DefaultLazyPluginCollection {

   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @var TemplateInterface
    */
   protected $template;

@@ @@
   /**
    * TemplateLazyComponentsCollection constructor.
    *
-   * @param \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface $template
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $manager
+   * @param TemplateInterface $template
+   * @param PluginManagerInterface $manager
    * @param array $configurations
    */
   public function __construct(TemplateInterface $template, PluginManagerInterface $manager, array $configurations = []) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/entity_template/src/TemplateComponentManager.php:11

    ---------- begin diff ----------
@@ @@
    * TemplateBuilderManager constructor.
    *
    * @param \Traversable $namespaces
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param CacheBackendInterface $cache_backend
+   * @param ModuleHandlerInterface $module_handler
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
     parent::__construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/entity_template/src/TemplateBuilderManager.php:16

    ---------- begin diff ----------
@@ @@
    * TemplateBuilderManager constructor.
    *
    * @param \Traversable $namespaces
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param CacheBackendInterface $cache_backend
+   * @param ModuleHandlerInterface $module_handler
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
     parent::__construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/entity_template/src/TemplateBlueprintProviderManager.php:11

    ---------- begin diff ----------
@@ @@
    * TemplateBuilderManager constructor.
    *
    * @param \Traversable $namespaces
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param CacheBackendInterface $cache_backend
+   * @param ModuleHandlerInterface $module_handler
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
     parent::__construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/entity_template/src/SampleContextValueTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
+use Drupal\Core\Field\FieldTypePluginManagerInterface;
 use Drupal\ck_api\Data\Instance\Instance;
 use Drupal\ck_api\Data\TypedData\InstanceSchemaDataDefinition;
 use Drupal\ck_api\Plugin\DataType\InstanceAdaptorInterface;
@@ @@
   /**
    * Get the entity type manager
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    */
   protected function entityTypeManager() {
     if (!$this->entityTypeManager) {
@@ @@
   /**
    * Get the entity type bundle infor manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @return EntityTypeBundleInfoInterface
    */
   protected function entityTypeBundleInfo() {
     if (empty($this->entityTypeBundleInfo)) {
@@ @@
   /**
    * Get the field type manager.
    *
-   * @return \Drupal\Core\Field\FieldTypePluginManagerInterface
+   * @return FieldTypePluginManagerInterface
    */
   protected function fieldTypeManager() {
     if (!$this->fieldTypePluginManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/entity_template/src/Plugin/EntityTemplate/Template/TemplateInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template\Plugin\EntityTemplate\Template;

+use Drupal\entity_template\TemplateResult;
+use Drupal\Component\Plugin\LazyPluginCollection;
+use Drupal\entity_template\Plugin\EntityTemplate\Component\ComponentInterface;
+use Drupal\Component\Render\MarkupInterface;
+use Drupal\Core\Plugin\Context\ContextInterface;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Cache\CacheableMetadata;
@@ @@
   /**
    * Find out whether this template applies in a given blueprint.
    *
-   * @param \Drupal\Core\Cache\CacheableMetadata|null $cacheable_metadata
+   * @param CacheableMetadata|null $cacheable_metadata
    *   The cacheable metadata.
    *
    * @return boolean
@@ @@
   /**
    * Execute the template.
    *
-   * @return \Drupal\entity_template\TemplateResult
+   * @return TemplateResult
    */
   public function execute();

@@ @@
   /**
    * Get the components of the template.
    *
-   * @return \Drupal\Component\Plugin\LazyPluginCollection
+   * @return LazyPluginCollection
    */
   public function getComponents();

@@ @@
    *
    * @param $id
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\Component\ComponentInterface
+   * @return ComponentInterface
    */
   public function getComponent($id);

@@ @@
   /**
    * Get the return type label.
    *
-   * @return \Drupal\Component\Render\MarkupInterface|string
+   * @return MarkupInterface|string
    */
   public function getReturnTypeLabel();

@@ @@
    *
    * @param bool $sample
    *
-   * @return \Drupal\Core\Plugin\Context\ContextInterface[]
+   * @return ContextInterface[]
    */
   public function getTemplateContexts($sample = FALSE);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/entity_template/src/Plugin/EntityTemplate/Template/TemplateComponentTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template\Plugin\EntityTemplate\Template;

+use Drupal\entity_template\TemplateComponentManager;
+use Drupal\Component\Uuid\UuidInterface;
+use Drupal\Component\Plugin\LazyPluginCollection;
 use Drupal\entity_template\TemplateLazyComponentsCollection;

 trait TemplateComponentTrait {

   /**
-   * @var \Drupal\entity_template\TemplateComponentManager;
+   * @var TemplateComponentManager ;
    */
   protected $componentManager;

   /**
-   * @var \Drupal\entity_template\TemplateLazyComponentsCollection
+   * @var TemplateLazyComponentsCollection
    */
   protected $componentPluginCollection;

   /**
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuidGenerator;

@@ @@
   protected $configuration;

   /**
-   * @return \Drupal\Component\Uuid\UuidInterface
+   * @return UuidInterface
    */
   protected function uuidGenerator() {
     if (!$this->uuidGenerator) {
@@ @@
   }

   /**
-   * @return \Drupal\entity_template\TemplateComponentManager
+   * @return TemplateComponentManager
    */
   protected function componentManager() {
     if (!$this->componentManager) {
@@ @@
   /**
    * Get the template.
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @return TemplateInterface
    */
   protected function template() {
     return $this;
@@ @@
   /**
    * Get the components of the template.
    *
-   * @return \Drupal\Component\Plugin\LazyPluginCollection
+   * @return LazyPluginCollection
    */
   public function getComponents() {
     if (!$this->componentPluginCollection) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/entity_template/src/Plugin/EntityTemplate/Template/Template.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template\Plugin\EntityTemplate\Template;

+use Drupal\Component\Plugin\LazyPluginCollection;
+use Drupal\entity_template\BlueprintInterface;
+use Drupal\Core\Plugin\Context\ContextDefinitionInterface;
+use Drupal\entity_template\Plugin\EntityTemplate\Component\ComponentInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\Plugin\Context\ContextInterface as ComponentContextInterface;
 use Drupal\Component\Plugin\Exception\ContextException;
 use Drupal\Component\Plugin\Exception\PluginException;
@@ @@
   protected $extraContexts = [];

   /**
-   * @var \Drupal\Component\Plugin\LazyPluginCollection
+   * @var LazyPluginCollection
    */
   protected $componentPluginCollection;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfo
+   * @var EntityTypeBundleInfo
    */
   protected $entityTypeBundleInfo;

   /**
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   * @var ContextHandlerInterface
    */
   protected $contextHandler;

   /**
-   * @var \Drupal\entity_template\TemplateComponentManager
+   * @var TemplateComponentManager
    */
   protected $componentManager;

   /**
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuidGenerator;

@@ @@
   /**
    * Template constructor.
    *
-   * @param \Drupal\entity_template\BlueprintInterface $blueprint
+   * @param BlueprintInterface $blueprint
    * @param array $configuration
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Plugin\Context\ContextHandlerInterface $context_handler
-   * @param \Drupal\Core\Condition\ConditionManager $condition_manager
-   * @param \Drupal\entity_template\TemplateComponentManager $component_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param ContextHandlerInterface $context_handler
+   * @param ConditionManager $condition_manager
+   * @param TemplateComponentManager $component_manager
    */
   public function __construct(
     $configuration,
@@ @@
   }

   /**
- * Get all the context definition interfaces
- *
- * @return \Drupal\Core\Plugin\Context\ContextDefinitionInterface[]
- */
+   * Get all the context definition interfaces
+   *
+   * @return ContextDefinitionInterface[]
+   */
   public function getContextDefinitions() {
     return $this->getExtraContextDefinitions();
   }
@@ @@
   /**
    * Get extra context definitions.
    *
-   * @return \Drupal\Core\Plugin\Context\ContextDefinitionInterface[]
+   * @return ContextDefinitionInterface[]
    */
   protected function getExtraContextDefinitions() {
     return [];
@@ @@
    *
    * @param $name
    *
-   * @return \Drupal\Core\Plugin\Context\ContextDefinitionInterface
+   * @return ContextDefinitionInterface
    */
   public function getContextDefinition($name) {
     $definitions = $this->getContextDefinitions();
@@ @@
    *
    * @param $name
    *
-   * @return \Drupal\Core\Plugin\Context\ContextDefinitionInterface
+   * @return ContextDefinitionInterface
    */
   protected function getExtraContextDefinition($name) {
     $definitions = $this->getExtraContextDefinitions();
@@ @@
   /**
    * Execute the template.
    *
-   * @return \Drupal\entity_template\TemplateResult
+   * @return TemplateResult
    */
   public function execute() {
     $this->prepareContexts();
@@ @@
     try {
       $entity = $this->createEntity();

-      /** @var \Drupal\entity_template\Plugin\EntityTemplate\Component\ComponentInterface $plugin */
+      /** @var ComponentInterface $plugin */
       foreach ($this->getComponents() as $plugin) {
         if ($plugin instanceof ContextAwarePluginInterface) {
           $this->contextHandler->applyContextMapping($plugin, $this->getContexts());
@@ @@
   /**
    * Create the entity initially.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *
-   * @throws \Drupal\entity_template\Exception\TemplateException;
+   * @throws TemplateException ;
    */
   protected function createEntity() {
     $target_type_id = $this->getTargetEntityTypeId();
@@ @@
   /**
    * Get the target entity type id.
    *
-   * @throws \Drupal\entity_template\Exception\TemplateException
+   * @throws TemplateException
    */
   abstract protected function getTargetEntityTypeId();

@@ @@
    *
    * @return string
    *
-   * @throws \Drupal\entity_template\Exception\TemplateException
+   * @throws TemplateException
    */
   abstract protected function getTargetEntityBundle();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/entity_template/src/Plugin/EntityTemplate/Template/SubTemplateTrait.php:6

    ---------- begin diff ----------
@@ @@
   /**
    * Get the parent template.
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @return TemplateInterface
    */
   abstract public function getParentTemplate() : ?TemplateInterface;

@@ @@
   /**
    * Get the root template.
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @return TemplateInterface
    */
   public function getRootTemplate() {
     $parent = $this;
@@ @@
   /**
    * Get the template that provides the contexts.
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @return TemplateInterface
    */
   public function getContextProvidingTemplate() : TemplateInterface{
-    /** @var \Drupal\entity_template\Plugin\EntityTemplate\Template\SubTemplateInterface $template */
+    /** @var SubTemplateInterface $template */
     $template = $this;

     do {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


13) modules/contrib/entity_template/src/Plugin/EntityTemplate/Template/SubTemplateInterface.php:6

    ---------- begin diff ----------
@@ @@
   /**
    * Get the parent template.
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @return TemplateInterface
    */
   public function getParentTemplate() : ?TemplateInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/entity_template/src/Plugin/EntityTemplate/Template/ConditionalTemplateInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template\Plugin\EntityTemplate\Template;

-
+use Drupal\Component\Plugin\LazyPluginCollection;
+use Drupal\entity_template\Plugin\EntityTemplate\Component\ComponentInterface;
 interface ConditionalTemplateInterface extends TemplateInterface {

   /**
    * Get the components of the template.
    *
-   * @return \Drupal\Component\Plugin\LazyPluginCollection
+   * @return LazyPluginCollection
    */
   public function getConditions();

@@ @@
    *
    * @param $id
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\Component\ComponentInterface
+   * @return ComponentInterface
    */
   public function getCondition($id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/entity_template/src/Plugin/EntityTemplate/Template/BlueprintTemplateInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template\Plugin\EntityTemplate\Template;

+use Drupal\entity_template\BlueprintInterface;
 use Drupal\entity_template\BlueprintResult;

 interface BlueprintTemplateInterface extends ConditionalTemplateInterface {
@@ @@
   /**
    * Get the blueprint.
    *
-   * @return \Drupal\entity_template\BlueprintInterface
+   * @return BlueprintInterface
    */
   public function getBlueprint();

   /**
-   * @param \Drupal\entity_template\BlueprintResult $result
+   * @param BlueprintResult $result
    *
    * @return static
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/entity_template/src/Plugin/EntityTemplate/Template/BlueprintTemplate.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template\Plugin\EntityTemplate\Template;

+use Drupal\entity_template\BlueprintInterface;
+use Drupal\Component\Plugin\LazyPluginCollection;
+use Drupal\Core\Plugin\Context\ContextDefinitionInterface;
 use Drupal\Component\Plugin\Context\ContextInterface as ComponentContextInterface;
 use Drupal\Component\Plugin\Exception\ContextException;
 use Drupal\Component\Plugin\Exception\PluginException;
@@ @@
 class BlueprintTemplate extends Template implements BlueprintTemplateInterface {

   /**
-   * @var \Drupal\entity_template\BlueprintInterface
+   * @var BlueprintInterface
    */
   protected $blueprint;

   /**
-   * @var \Drupal\Component\Plugin\LazyPluginCollection
+   * @var LazyPluginCollection
    */
   protected $conditionPluginCollection;

   /**
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $conditionManager;

@@ @@
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfo $entity_type_bundle_info
-   * @param \Drupal\Core\Plugin\Context\ContextHandlerInterface $context_handler
-   * @param \Drupal\Core\Condition\ConditionManager $condition_manager
-   * @param \Drupal\entity_template\TemplateComponentManager $component_manager
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid_generator
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeBundleInfo $entity_type_bundle_info
+   * @param ContextHandlerInterface $context_handler
+   * @param ConditionManager $condition_manager
+   * @param TemplateComponentManager $component_manager
+   * @param UuidInterface $uuid_generator
    */
   public function __construct(
     array $configuration,
@@ @@
   /**
    * Get the blueprint.
    *
-   * @return \Drupal\entity_template\BlueprintInterface
+   * @return BlueprintInterface
    */
   public function getBlueprint() {
     return $this->blueprint;
@@ @@
   /**
    * Get all the context definition interfaces
    *
-   * @return \Drupal\Core\Plugin\Context\ContextDefinitionInterface[]
+   * @return ContextDefinitionInterface[]
    */
   public function getContextDefinitions() {
     return $this->getBlueprint()->getContextDefinitions() + parent::getContextDefinitions();
@@ @@
   }

   /**
-   * @param \Drupal\entity_template\BlueprintResult $result
+   * @param BlueprintResult $result
    *
    * @return static
    */
@@ @@
    *
    * @return string
    *
-   * @throws \Drupal\entity_template\Exception\TemplateException
+   * @throws TemplateException
    */
   protected function getTargetEntityBundle() {
     $return_type = $this->getBlueprint()->getBuilder()->getReturnType();
@@ @@
   /**
    * Get the conditions of the template.
    *
-   * @return \Drupal\Component\Plugin\LazyPluginCollection
+   * @return LazyPluginCollection
    */
   public function getConditions() {
     if (!$this->conditionPluginCollection) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/entity_template/src/Plugin/EntityTemplate/Component/TemplateContextAwareComponentTrait.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Set the template.
    *
-   * @param \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface $template
+   * @param TemplateInterface $template
    *
    * @return static
    */
@@ @@
   /**
    * Get the template that this component is aware of.
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @return TemplateInterface
    */
   public function getTemplate() : TemplateInterface {
     return $this->template;
@@ @@
   /**
    * Get the context providing template.
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @return TemplateInterface
    */
   public function getContextProvidingTemplate() : TemplateInterface {
     return $this->getTemplate()->getContextProvidingTemplate();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


18) modules/contrib/entity_template/src/Plugin/EntityTemplate/Component/TemplateContextAwareComponentInterface.php:8

    ---------- begin diff ----------
@@ @@
   /**
    * Set the template.
    *
-   * @param \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface $template
+   * @param TemplateInterface $template
    *
    * @return static
    */
@@ @@
   /**
    * Get the template.
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @return TemplateInterface
    */
   public function getTemplate() : TemplateInterface;

@@ @@
   /**
    * Get the context providing template.
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @return TemplateInterface
    */
   public function getContextProvidingTemplate() : TemplateInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


19) modules/contrib/entity_template/src/Plugin/EntityTemplate/Component/SwappableComponentInterface.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Swap configuration to another component.
    *
-   * @param \Drupal\entity_template\Plugin\EntityTemplate\Component\ComponentInterface $component
+   * @param ComponentInterface $component
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\Component\ComponentInterface
+   * @return ComponentInterface
    */
   public function swapConfigurationTo(ComponentInterface $component): ComponentInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


20) modules/contrib/entity_template/src/Plugin/EntityTemplate/Component/StringFieldWidgetInputComponent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template\Plugin\EntityTemplate\Component;

+use Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   use TemplateContextAwareComponentTrait;

   /**
-   * @var \Drupal\typed_data\PlaceholderResolverInterface
+   * @var PlaceholderResolverInterface
    */
   protected $placeholderResolver;

   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @var TemplateInterface
    */
   protected $template;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_manager
+   * @param FieldTypePluginManagerInterface $field_type_manager
    *   The field type manager.
-   * @param \Drupal\Core\Field\WidgetPluginManager $widget_manager
+   * @param WidgetPluginManager $widget_manager
    *   The widget manager.
-   * @param \Drupal\typed_data\PlaceholderResolverInterface $placeholder_resolver
+   * @param PlaceholderResolverInterface $placeholder_resolver
    *   The placeholder resolver service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/entity_template/src/Plugin/EntityTemplate/Component/InlineTemplate.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template\Plugin\EntityTemplate\Component;

+use Drupal\entity_template\TemplateLazyComponentsCollection;
+use Drupal\Core\Entity\FieldableEntityInterface;
+use Drupal\Component\Render\MarkupInterface;
+use Drupal\entity_template\Exception\TemplateException;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   }

   /**
-   * @var \Drupal\entity_template\TemplateComponentManager
+   * @var TemplateComponentManager
    */
   protected $componentManager;

   /**
-   * @var \Drupal\entity_template\TemplateLazyComponentsCollection
+   * @var TemplateLazyComponentsCollection
    */
   protected $componentPluginCollection;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

   /**
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   * @var ContextHandlerInterface
    */
   protected $contextHandler;

@@ @@
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
-   * @param \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_manager
-   * @param \Drupal\entity_template\TemplateComponentManager $component_manager
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
-   * @param \Drupal\Core\Plugin\Context\ContextHandlerInterface $context_handler
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
+   * @param FieldTypePluginManagerInterface $field_type_manager
+   * @param TemplateComponentManager $component_manager
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param ContextHandlerInterface $context_handler
    */
   public function __construct(
     array $configuration,
@@ @@
   /**
    * Apply this component to the entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
-   * @param \Drupal\entity_template\TemplateResult $result
+   * @param EntityInterface $entity
+   * @param TemplateResult $result
    */
   public function apply(EntityInterface $entity, TemplateResult $result) {
-    /** @var \Drupal\Core\Entity\FieldableEntityInterface $entity */
+    /** @var FieldableEntityInterface $entity */
     $template_result = $this->execute();
     if ($generated = $template_result->getEntity()) {
       if ($this->getFieldDefinition()->getFieldStorageDefinition()->getCardinality() === 1) {
@@ @@
   /**
    * Execute the template.
    *
-   * @return \Drupal\entity_template\TemplateResult
+   * @return TemplateResult
    */
   public function execute() {
     $template_result = new TemplateResult();
@@ @@
     try {
       $entity = $this->createEntity();

-      /** @var \Drupal\entity_template\Plugin\EntityTemplate\Component\ComponentInterface $plugin */
+      /** @var ComponentInterface $plugin */
       foreach ($this->getComponents() as $plugin) {
         if ($plugin instanceof ContextAwarePluginInterface) {
           $this->contextHandler->applyContextMapping($plugin, $this->getContextProvidingTemplate()->getContexts());
@@ @@
   /**
    * Get the return type label.
    *
-   * @return \Drupal\Component\Render\MarkupInterface|string
+   * @return MarkupInterface|string
    */
   public function getReturnTypeLabel() {
     return $this->getTypeLabel($this->getReturnType());
@@ @@
   /**
    * Get the parent template.
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @return TemplateInterface
    */
   public function getParentTemplate() : ?TemplateInterface {
     return $this->template;
@@ @@
   /**
    * Create the entity initially.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *
-   * @throws \Drupal\entity_template\Exception\TemplateException;
+   * @throws TemplateException ;
    */
   protected function createEntity() {
     $target_type_id = $this->getFieldDefinition()->getSetting('target_type');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/entity_template/src/Plugin/EntityTemplate/Component/FieldWidgetInputComponent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template\Plugin\EntityTemplate\Component;

+use Drupal\Core\Field\WidgetInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
 class FieldWidgetInputComponent extends FieldComponentBase implements SwappableComponentInterface {

   /**
-   * @var \Drupal\Core\Field\WidgetPluginManager
+   * @var WidgetPluginManager
    */
   protected $widgetManager;

@@ @@
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
-   * @param \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_manager
-   * @param \Drupal\Core\Field\WidgetPluginManager $widget_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
+   * @param FieldTypePluginManagerInterface $field_type_manager
+   * @param WidgetPluginManager $widget_manager
    */
   public function __construct(
     array $configuration,
@@ @@
   /**
    * Get the widget for this field definition.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *
-   * @return \Drupal\Core\Field\WidgetInterface
+   * @return WidgetInterface
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginException
+   * @throws PluginNotFoundException
    */
   protected function getWidget(FieldDefinitionInterface $field_definition) {
     if (($display = $field_definition->getDisplayOptions('form')) && isset($display['type'])) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/entity_template/src/Plugin/EntityTemplate/Component/FieldDataSelectComponent.php:0

    ---------- begin diff ----------
@@ @@
 <?php

 namespace Drupal\entity_template\Plugin\EntityTemplate\Component;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\typed_data\Exception\InvalidArgumentException;
+use Drupal\Core\TypedData\ListDataDefinitionInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
-   * @param \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_manager
-   * @param \Drupal\typed_data\DataFetcherInterface $data_fetcher
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
+   * @param FieldTypePluginManagerInterface $field_type_manager
+   * @param DataFetcherInterface $data_fetcher
    */
   public function __construct(
     array $configuration,
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\typed_data\Exception\InvalidArgumentException
+   * @throws PluginException
+   * @throws InvalidArgumentException
    */
   public function apply(EntityInterface $entity, TemplateResult $result) {
     $selector = $this->configuration['selector'];
@@ @@
   /**
    * Get the massaged value.
    *
-   * @param \Drupal\Core\TypedData\TypedDataInterface $data
+   * @param TypedDataInterface $data
    *   The selected and filtered data.
    *
    * @return mixed
@@ @@
   /**
    * Check whether the data definition is compatible with this field.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $definition
+   * @param DataDefinitionInterface $definition
    */
   protected function definitionIsCompatible(DataDefinitionInterface $definition) {
     if ($definition->getDataType() === 'list') {
-      /** @var \Drupal\Core\TypedData\ListDataDefinitionInterface $definition */
+      /** @var ListDataDefinitionInterface $definition */
       // Check the compatability of the item definition.
       $definition = $definition->getItemDefinition();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/entity_template/src/Plugin/EntityTemplate/Component/FieldComponentBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template\Plugin\EntityTemplate\Component;

+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\Core\Entity\FieldableEntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Field\FieldTypePluginManagerInterface;
@@ @@
 abstract class FieldComponentBase extends ComponentBase implements ContainerFactoryPluginInterface {

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

   /**
-   * @var \Drupal\Core\Field\FieldTypePluginManagerInterface
+   * @var FieldTypePluginManagerInterface
    */
   protected $fieldTypeManager;

@@ @@
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    */
   public function __construct(
     array $configuration,
@@ @@
   /**
    * Get the field definition.
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface
+   * @return FieldDefinitionInterface
    */
   public function getFieldDefinition() {
     return $this->entityFieldManager->getFieldDefinitions($this->getEntityTypeId(), $this->getBundle())[$this->getFieldName()];
@@ @@
   /**
    * Get a sample entity.
    *
-   * @return \Drupal\Core\Entity\FieldableEntityInterface
+   * @return FieldableEntityInterface
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getSampleEntity() {
     $entity_type = $this->entityTypeManager->getDefinition($this->getEntityTypeId());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/entity_template/src/Plugin/EntityTemplate/Component/DataSelectComponentTrait.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The data fetcher service.
    *
-   * @var \Drupal\typed_data\DataFetcherInterface
+   * @var DataFetcherInterface
    */
   protected $dataFetcher;

@@ @@
    * @param string $selector
    *   The selector string.
    *
-   * @return \Drupal\Core\TypedData\TypedDataInterface
+   * @return TypedDataInterface
    *   The selected and filtered data.
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    *   If data is missing.
    */
   protected function selectData(string $selector) : TypedDataInterface {
@@ @@
   /**
    * Get the data fetcher service.
    *
-   * @return \Drupal\typed_data\DataFetcherInterface
+   * @return DataFetcherInterface
    *   The data fetcher service.
    */
   protected function getDataFetcher() : DataFetcherInterface {
@@ @@
   /**
    * Get the context providing template.
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @return TemplateInterface
    *   The context providing template.
    */
   public abstract function getContextProvidingTemplate() : TemplateInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


26) modules/contrib/entity_template/src/Plugin/EntityTemplate/Component/ComponentInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template\Plugin\EntityTemplate\Component;

+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * Get the label of this plugin.
    *
-   * @return \Drupal\Component\Render\MarkupInterface|string
+   * @return MarkupInterface|string
    */
   public function label();

@@ @@
   /**
    * Get the description of this plugin.
    *
-   * @return \Drupal\Component\Render\MarkupInterface|string
+   * @return MarkupInterface|string
    */
   public function description();

@@ @@
   /**
    * Apply this component to the entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
-   * @param \Drupal\entity_template\TemplateResult $result
+   * @param EntityInterface $entity
+   * @param TemplateResult $result
    */
   public function apply(EntityInterface $entity, TemplateResult $result);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


27) modules/contrib/entity_template/src/Plugin/EntityTemplate/Builder/ConfigurableDefaultBlueprintTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template\Plugin\EntityTemplate\Builder;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\entity_template\BlueprintInterface;
+use Drupal\entity_template\BlueprintStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\entity_template\BlueprintEntityAdaptor;
@@ @@
   /**
    * Get the entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    */
   protected function entityTypeManager() : EntityTypeManagerInterface {
     return $this->entityTypeManager ?: \Drupal::entityTypeManager();
@@ @@
   /**
    * Get the default blueprint config.
    *
-   * @return \Drupal\entity_template\Entity\TemplateBlueprint
+   * @return TemplateBlueprint
    *   The default blueprint entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getDefaultBlueprintConfig() : TemplateBlueprint {
     $blueprint_storage = $this->entityTypeManager()->getStorage('entity_template_blueprint');
@@ @@
     $default_blueprint_id = $this->getPluginId().'.default';

     while (true) {
-      /** @var \Drupal\entity_template\Entity\TemplateBlueprint $default_blueprint */
+      /** @var TemplateBlueprint $default_blueprint */
       if ($default_blueprint = $blueprint_storage->load($default_blueprint_id)) {
         // If this blueprint already exists and isn't part of this builder, then
         // try a different name.
@@ @@
   /**
    * Get the default blueprint for this builder.
    *
-   * @return \Drupal\entity_template\BlueprintInterface
+   * @return BlueprintInterface
    *   The default blueprint.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getDefaultBlueprint() {
     return new BlueprintEntityAdaptor($this->getDefaultBlueprintConfig());
@@ @@
   /**
    * Get the default blueprint storage.
    *
-   * @param \Drupal\entity_template\Plugin\EntityTemplate\BlueprintProvider\BlueprintProviderInterface $provider
+   * @param BlueprintProviderInterface $provider
    *   The blueprint provider.
    *
-   * @return \Drupal\entity_template\BlueprintStorageInterface
+   * @return BlueprintStorageInterface
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getDefaultBlueprintStorage(BlueprintProviderInterface $provider) {
     return new BlueprintEntityStorageAdaptor($this->getDefaultBlueprintConfig(), $provider);
@@ @@
    * @return array
    *   The operations.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getAdminOperations() {
     $operations = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


28) modules/contrib/entity_template/src/Plugin/EntityTemplate/Builder/ConfigurableDefaultBlueprintInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template\Plugin\EntityTemplate\Builder;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\entity_template\Entity\TemplateBlueprint;

 /**
@@ @@
   /**
    * Get the default blueprint config.
    *
-   * @return \Drupal\entity_template\Entity\TemplateBlueprint
+   * @return TemplateBlueprint
    *   The default blueprint entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getDefaultBlueprintConfig() : TemplateBlueprint;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


29) modules/contrib/entity_template/src/Plugin/EntityTemplate/Builder/ConfigTemplateBuilder.php:0

    ---------- begin diff ----------
@@ @@
 <?php

 namespace Drupal\entity_template\Plugin\EntityTemplate\Builder;
+use Drupal\entity_template\Entity\TemplateBuilder;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * Get the template builder entity.
    *
-   * @return \Drupal\entity_template\Entity\TemplateBuilder
+   * @return TemplateBuilder
    */
   protected function getTemplateBuilder() {
     return $this->entityTypeManager->getStorage('entity_template_builder')
@@ @@
       $this->getTemplateBuilder()->get('default_blueprint') &&
       ($default_blueprint = $blueprint_storage->load($this->getTemplateBuilder()->get('default_blueprint')))
     ) {
-      /** @var \Drupal\entity_template\Entity\TemplateBlueprint $default_blueprint */
+      /** @var TemplateBlueprint $default_blueprint */
       $default_blueprint->set('is_default', TRUE);
       return $default_blueprint;
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


30) modules/contrib/entity_template/src/Plugin/EntityTemplate/Builder/BuilderInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template\Plugin\EntityTemplate\Builder;

+use Drupal\entity_template\BlueprintInterface;
+use Drupal\entity_template\BlueprintResult;
+use Drupal\entity_template\Exception\MultipleAvailableBlueprintException;
+use Drupal\entity_template\Exception\NoAvailableBlueprintException;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Plugin\ContextAwarePluginInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * Get the default blueprint for this builder.
    *
-   * @return \Drupal\entity_template\BlueprintInterface|null
+   * @return BlueprintInterface|null
    */
   public function getDefaultBlueprint();

@@ @@
   /**
    * Get the default blueprint storage.
    *
-   * @param \Drupal\entity_template\Plugin\EntityTemplate\BlueprintProvider\BlueprintProviderInterface $provider
+   * @param BlueprintProviderInterface $provider
    *
-   * @return \Drupal\entity_template\BlueprintStorageInterface|null
+   * @return BlueprintStorageInterface|null
    */
   public function getDefaultBlueprintStorage(BlueprintProviderInterface $provider);

@@ @@
   /**
    * Get the default blueprint edit template url.
    *
-   * @param \Drupal\entity_template\BlueprintStorageInterface $blueprint_storage
+   * @param BlueprintStorageInterface $blueprint_storage
    * @param string $key
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   public function getDefaultBlueprintEditTemplateUrl(BlueprintStorageInterface $blueprint_storage, string $key): Url;

@@ @@
    * Get the available blueprints for this builder.
    *
    * @param array $parameters
-   * @param \Drupal\Core\Session\AccountInterface|NULL $account
+   * @param AccountInterface|NULL $account
    *
-   * @return \Drupal\entity_template\BlueprintInterface[]
+   * @return BlueprintInterface[]
    */
   public function getAvailableBlueprints(array $parameters = [], AccountInterface $account = NULL);

@@ @@
    * Execute the builder.
    *
    * @param array $parameters
-   * @param \Drupal\Core\Session\AccountInterface|NULL $account
+   * @param AccountInterface|NULL $account
    * @param string $blueprint_key
    *
-   * @return \Drupal\entity_template\BlueprintResult
+   * @return BlueprintResult
    *
    * @throws \InvalidArgumentException
    *   If an invalid blueprint key is provided.
-   * @throws \Drupal\entity_template\Exception\MultipleAvailableBlueprintException
+   * @throws MultipleAvailableBlueprintException
    *   If the builder can't decide on a best blueprint to use.
-   * @throws \Drupal\entity_template\Exception\NoAvailableBlueprintException
+   * @throws NoAvailableBlueprintException
    *   If the builder hasn't got any available blueprints.
    */
   public function execute(array $parameters = [], AccountInterface $account = NULL, $blueprint_key = NULL);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


31) modules/contrib/entity_template/src/Plugin/EntityTemplate/Builder/BuilderBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template\Plugin\EntityTemplate\Builder;

+use Drupal\entity_template\Plugin\EntityTemplate\BlueprintProvider\BlueprintProviderInterface;
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Component\Plugin\Exception\ContextException;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ @@
 abstract class BuilderBase extends ContextAwarePluginBase implements BuilderInterface, ContainerFactoryPluginInterface {

   /**
-   * @var \Drupal\entity_template\TemplateBlueprintProviderManager
+   * @var TemplateBlueprintProviderManager
    */
   protected $blueprintProviderManager;

   /**
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    */
   public function __construct(
     array $configuration,
@@ @@

     $blueprints = [];
     foreach ($this->blueprintProviderManager->getDefinitions() as $provider_id => $definition) {
-      /** @var \Drupal\entity_template\Plugin\EntityTemplate\BlueprintProvider\BlueprintProviderInterface $provider */
+      /** @var BlueprintProviderInterface $provider */
       $provider = $this->blueprintProviderManager->createInstance($provider_id);

       foreach ($provider->getAvailableBlueprints($this, $parameters, $account) as $key => $available_blueprint) {
@@ @@
     if ($blueprint_key) {
       list($provider_id, $provider_key) = explode(':', $blueprint_key);

-      /** @var \Drupal\entity_template\Plugin\EntityTemplate\BlueprintProvider\BlueprintProviderInterface $provider */
+      /** @var BlueprintProviderInterface $provider */
       $provider = $this->blueprintProviderManager->createInstance($provider_id);
       $available = $provider->getAvailableBlueprints($this, $parameters, $account);

@@ @@
       }

       $best_key = key($available);
-      /** @var \Drupal\entity_template\BlueprintInterface $blueprint */
+      /** @var BlueprintInterface $blueprint */
       $blueprint = array_shift($available);
       if (!empty($available)) {
         if (reset($available)->getPriority() == $blueprint->getPriority()) {
@@ @@
   /**
    * Get the return type label.
    *
-   * @return string|\Drupal\Component\Render\MarkupInterface
+   * @return string|MarkupInterface
    */
   public function getReturnTypeLabel() {
     $return_type = $this->getReturnType();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/entity_template/src/Plugin/EntityTemplate/BlueprintProvider/ConfigTemplateBlueprint.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template\Plugin\EntityTemplate\BlueprintProvider;

+use Drupal\entity_template\Entity\TemplateBlueprint;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Plugin\PluginBase;
@@ @@
 class ConfigTemplateBlueprint extends PluginBase implements BlueprintProviderInterface, ContainerFactoryPluginInterface {

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *
    * @param $id
    *
-   * @return \Drupal\entity_template\BlueprintStorageInterface
+   * @return BlueprintStorageInterface
    */
   public function getBlueprintStorage($id) {
     return new BlueprintEntityStorageAdaptor(
@@ @@
   /**
    * Get the key of a given blueprint to identify it in the provider.
    *
-   * @param \Drupal\entity_template\BlueprintStorageInterface $blueprintStorage
+   * @param BlueprintStorageInterface $blueprintStorage
    *
    * @return string
    */
@@ @@
   }

   /**
-   * @param \Drupal\entity_template\BlueprintStorageInterface $blueprint_storage
+   * @param BlueprintStorageInterface $blueprint_storage
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   public function getBlueprintEditUrl(BlueprintStorageInterface $blueprint_storage) {
-    /** @var \Drupal\entity_template\Entity\TemplateBlueprint $blueprint_entity */
+    /** @var TemplateBlueprint $blueprint_entity */
     $blueprint_entity = $blueprint_storage->getEntity();

     return $blueprint_entity->toUrl();
@@ @@
   /**
    * Get the edit template url for the blueprint.
    *
-   * @param \Drupal\entity_template\BlueprintStorageInterface $blueprint_storage
+   * @param BlueprintStorageInterface $blueprint_storage
    * @param string $key
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   public function getBlueprintEditTemplateUrl(BlueprintStorageInterface $blueprint_storage, string $key): Url {
     return Url::fromRoute(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/entity_template/src/Plugin/EntityTemplate/BlueprintProvider/BuilderDefault.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template\Plugin\EntityTemplate\BlueprintProvider;

+use Drupal\entity_template\BlueprintInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Plugin\PluginBase;
 use Drupal\Core\Session\AccountInterface;
@@ @@
 class BuilderDefault extends PluginBase implements BlueprintProviderInterface, ContainerFactoryPluginInterface {

   /**
-   * @var \Drupal\entity_template\TemplateBuilderManager
+   * @var TemplateBuilderManager
    */
   protected $builderManager;

@@ @@
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\entity_template\TemplateBuilderManager $builder_manager
+   * @param TemplateBuilderManager $builder_manager
    */
   public function __construct(
     array $configuration,
@@ @@
   /**
    * Get all the available blueprints for a given builder
    *
-   * @param \Drupal\entity_template\Plugin\EntityTemplate\Builder\BuilderInterface $builder
+   * @param BuilderInterface $builder
    *
-   * @return \Drupal\entity_template\BlueprintInterface[]
+   * @return BlueprintInterface[]
    */
   public function getAllBlueprints(BuilderInterface $builder) {
     return ($default = $builder->getDefaultBlueprint()) ? [
@@ @@
   /**
    * Get the available blueprints for a given builder, limiting based on
    *
-   * @param \Drupal\entity_template\Plugin\EntityTemplate\Builder\BuilderInterface $builder
+   * @param BuilderInterface $builder
    * @param array $parameters
-   * @param \Drupal\Core\Session\AccountInterface|NULL $account
+   * @param AccountInterface|NULL $account
    *
-   * @return \Drupal\entity_template\BlueprintInterface[]
+   * @return BlueprintInterface[]
    */
   public function getAvailableBlueprints(BuilderInterface $builder, $parameters = [], AccountInterface $account = NULL) {
     return $this->getAllBlueprints($builder);
@@ @@
    * In this instance the id is the name of the builder.
    */
   public function getBlueprintStorage($id) {
-    /** @var \Drupal\entity_template\Plugin\EntityTemplate\Builder\BuilderInterface $builder */
+    /** @var BuilderInterface $builder */
     $builder = $this->builderManager->createInstance($id);
     return $builder->getDefaultBlueprintStorage($this);
   }
@@ @@
   /**
    * Get the key of a given blueprint to identify it in the provider.
    *
-   * @param \Drupal\entity_template\BlueprintStorageInterface $blueprintStorage
+   * @param BlueprintStorageInterface $blueprintStorage
    *
    * @return string
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/entity_template/src/Plugin/EntityTemplate/BlueprintProvider/BlueprintProviderInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template\Plugin\EntityTemplate\BlueprintProvider;

+use Drupal\entity_template\BlueprintInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * Get all the available blueprints for a given builder
    *
-   * @param \Drupal\entity_template\Plugin\EntityTemplate\Builder\BuilderInterface $builder
+   * @param BuilderInterface $builder
    *
-   * @return \Drupal\entity_template\BlueprintInterface[]
+   * @return BlueprintInterface[]
    */
   public function getAllBlueprints(BuilderInterface $builder);

@@ @@
   /**
    * Get the available blueprints for a given builder, limiting based on
    *
-   * @param \Drupal\entity_template\Plugin\EntityTemplate\Builder\BuilderInterface $builder
+   * @param BuilderInterface $builder
    * @param array $parameters
-   * @param \Drupal\Core\Session\AccountInterface|NULL $account
+   * @param AccountInterface|NULL $account
    *
-   * @return \Drupal\entity_template\BlueprintInterface[]
+   * @return BlueprintInterface[]
    */
   public function getAvailableBlueprints(BuilderInterface $builder, $parameters = [], AccountInterface $account = NULL);

@@ @@
    *
    * @param $id
    *
-   * @return \Drupal\entity_template\BlueprintStorageInterface
+   * @return BlueprintStorageInterface
    */
   public function getBlueprintStorage($id);

@@ @@
   /**
    * Get the key of a given blueprint to identify it in the provider.
    *
-   * @param \Drupal\entity_template\BlueprintStorageInterface $blueprintStorage
+   * @param BlueprintStorageInterface $blueprintStorage
    *
    * @return string
    */
@@ @@
   public function getBlueprintKey(BlueprintStorageInterface $blueprint_storage);

   /**
-   * @param \Drupal\entity_template\BlueprintStorageInterface $blueprint_storage
+   * @param BlueprintStorageInterface $blueprint_storage
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   public function getBlueprintEditUrl(BlueprintStorageInterface $blueprint_storage);

@@ @@
   /**
    * Get the edit template url for the blueprint.
    *
-   * @param \Drupal\entity_template\BlueprintStorageInterface $blueprint_storage
+   * @param BlueprintStorageInterface $blueprint_storage
    * @param string $key
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   public function getBlueprintEditTemplateUrl(BlueprintStorageInterface $blueprint_storage, string $key): Url;
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


35) modules/contrib/entity_template/src/Plugin/Derivative/EntityFieldStorageDeriver.php:24

    ---------- begin diff ----------
@@ @@
   protected $basePluginId;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

   /**
-   * @var \Drupal\Core\Field\FieldTypePluginManagerInterface
+   * @var FieldTypePluginManagerInterface
    */
   protected $fieldTypeManager;

@@ @@
    * EntityFieldStorageDeriver constructor.
    *
    * @param string $base_plugin_id
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    */
   public function __construct(
     $base_plugin_id,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/entity_template/src/Plugin/Derivative/ConfigTemplateBuilderDeriver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template\Plugin\Derivative;

+use Drupal\entity_template\Entity\TemplateBuilder;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\Context\ContextDefinition;
@@ @@
   protected $basePluginId;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    * ConfigTemplateBuilderDeriver constructor.
    *
    * @param $base_plugin_id
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    */
   public function __construct($base_plugin_id, EntityTypeManagerInterface $entity_type_manager) {
     $this->basePluginId = $base_plugin_id;
@@ @@
    * {@inheritdoc}
    */
   public function getDerivativeDefinitions($base_plugin_definition) {
-    /** @var \Drupal\entity_template\Entity\TemplateBuilder $builder */
+    /** @var TemplateBuilder $builder */
     foreach ($this->entityTypeManager->getStorage('entity_template_builder')->loadMultiple() as $builder) {
       $context_definitions = [];
       foreach ($builder->getParameters() as $parameter) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/entity_template/src/MultipleTemplateResult.php:6

    ---------- begin diff ----------
@@ @@
 class MultipleTemplateResult extends TemplateResult {

   /**
-   * @var \Drupal\Core\Entity\EntityInterface[]
+   * @var EntityInterface[]
    */
   protected $entities = [];

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function getEntity(): \Drupal\Core\Entity\EntityInterface {
+  public function getEntity(): EntityInterface {
     return reset($this->entities);
   }

@@ @@
    * Add an entity to the result.
    *
    * @param $key
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
    * @return static
    */
@@ @@
   /**
    * Get the entities
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    */
   public function getEntities() {
     return $this->entities;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/entity_template/src/Form/BuilderParameterProvisionForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template\Form;

+use Symfony\Component\HttpFoundation\Session\Session;
 use Drupal\Component\Uuid\UuidInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\TypedData\EntityDataDefinition;
@@ @@
   /**
    * The template builder manager.
    *
-   * @var \Drupal\entity_template\TemplateBuilderManager
+   * @var TemplateBuilderManager
    */
   protected $templateBuilderManager;

@@ @@
   /**
    * The entity builder tempstore.
    *
-   * @var \Drupal\entity_template\EntityBuilderTempStoreRepository
+   * @var EntityBuilderTempStoreRepository
    */
   protected $entityBuilderTempStore;

@@ @@
   /**
    * The session.
    *
-   * @var \Symfony\Component\HttpFoundation\Session\Session
+   * @var Session
    */
   protected $session;

@@ @@
   /**
    * The UUID service.
    *
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuidService;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new BuilderParameterProvisionForm.
    *
-   * @param \Drupal\entity_template\TemplateBuilderManager $template_builder_manager
+   * @param TemplateBuilderManager $template_builder_manager
    *   The template builder manager.
-   * @param \Drupal\entity_template\EntityBuilderTempStoreRepository $entity_builder_tempstore
+   * @param EntityBuilderTempStoreRepository $entity_builder_tempstore
    *   The entity builder tempstore.
-   * @param \Symfony\Component\HttpFoundation\Session\SessionInterface $session
+   * @param SessionInterface $session
    *   The session.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid_service
+   * @param UuidInterface $uuid_service
    *   The UUID service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(TemplateBuilderManager $template_builder_manager, EntityBuilderTempStoreRepository $entity_builder_tempstore, SessionInterface $session, UuidInterface $uuid_service, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


39) modules/contrib/entity_template/src/Exception/MultipleAvailableBlueprintException.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template\Exception;

+use Drupal\entity_template\BlueprintInterface;
 use Throwable;

 class MultipleAvailableBlueprintException extends BuilderException {

   /**
-   * @var \Drupal\entity_template\BlueprintInterface[]
+   * @var BlueprintInterface[]
    */
   protected $blueprints;

@@ @@
   /**
    * The blueprints available.
    *
-   * @return array|\Drupal\entity_template\BlueprintInterface[]
+   * @return array|BlueprintInterface[]
    */
   public function getBlueprints() {
     return $this->blueprints;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/entity_template/src/EntityBuilderTempStoreRepositoryInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template;

+use Drupal\Core\TempStore\PrivateTempStore;
 use Drupal\Core\TempStore\PrivateTempStoreFactory;

 /**
@@ @@
   /**
    * Get the tempstore.
    *
-   * @return \Drupal\Core\TempStore\PrivateTempStore
+   * @return PrivateTempStore
    *   The private tempstore.
    */
   public function getTempstore();
@@ @@
    * @param string $session_key
    *   The session key.
    *
-   * @return \Drupal\entity_template\BlueprintResult|null
+   * @return BlueprintResult|null
    *   The builder result.
    */
   public function getBuilderResult(string $session_key);
@@ @@
    *
    * @param string $session_key
    *   The session key.
-   * @param \Drupal\entity_template\BlueprintResult $result
+   * @param BlueprintResult $result
    *   The result.
    */
   public function setBuilderResult(string $session_key, BlueprintResult $result);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


41) modules/contrib/entity_template/src/EntityBuilderTempStoreRepository.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * The tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;

@@ @@
   /**
    * EntityBuilderTempStoreRepository.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
    */
   public function __construct(PrivateTempStoreFactory $temp_store_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


42) modules/contrib/entity_template/src/Entity/TemplateBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template\Entity;

+use Drupal\entity_template\BlueprintInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;

 /**
@@ @@
   protected $parameters = [];

   /**
-   * @var \Drupal\entity_template\BlueprintInterface
+   * @var BlueprintInterface
    */
   protected $default_blueprint;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


43) modules/contrib/entity_template/src/Entity/BlueprintEntityInterface.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Convert to an instance of BlueprintInterface.
    *
-   * @return \Drupal\entity_template\BlueprintInterface
+   * @return BlueprintInterface
    */
   public function toBlueprint() : BlueprintInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


44) modules/contrib/entity_template/src/Controller/EntityTemplateController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template\Controller;

+use Symfony\Component\HttpFoundation\Session\Session;
 use Drupal\Component\Uuid\UuidInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityFormBuilderInterface;
@@ @@
   /**
    * The builder manager.
    *
-   * @var \Drupal\entity_template\TemplateBuilderManager
+   * @var TemplateBuilderManager
    */
   protected $builderManager;

@@ @@
   /**
    * The session.
    *
-   * @var \Symfony\Component\HttpFoundation\Session\Session
+   * @var Session
    */
   protected $session;

@@ @@
   /**
    * The UUID service.
    *
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuidService;

@@ @@
   /**
    * The entity builder tempstore.
    *
-   * @var \Drupal\entity_template\EntityBuilderTempStoreRepository
+   * @var EntityBuilderTempStoreRepository
    */
   protected $entityBuilderTempStore;

@@ @@
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * TemplateSelectController constructor.
    *
-   * @param \Drupal\Core\Entity\EntityFormBuilderInterface $entity_form_builder
+   * @param EntityFormBuilderInterface $entity_form_builder
    *   The entity form builder service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\entity_template\TemplateBuilderManager $template_builder_manager
+   * @param TemplateBuilderManager $template_builder_manager
    *   The template builder manager.
-   * @param \Symfony\Component\HttpFoundation\Session\SessionInterface $session
+   * @param SessionInterface $session
    *   The session.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid_service
+   * @param UuidInterface $uuid_service
    *   The UUID service.
-   * @param \Drupal\entity_template\EntityBuilderTempStoreRepository $entity_builder_tempstore
+   * @param EntityBuilderTempStoreRepository $entity_builder_tempstore
    *   The entity builder tempstore.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
    */
   public function __construct(
@@ @@
    * @param string $session_key
    *   The session key.
    *
-   * @return array|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return array|RedirectResponse
    *   The built list of template blueprints.
    */
   public function selectTemplateBlueprint(string $builder_name, string $session_key = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


45) modules/contrib/entity_template/src/ContextAwareInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template;

+use Drupal\Core\Plugin\Context\ContextDefinitionInterface;
 use Drupal\Core\Plugin\Context\ContextInterface;

 interface ContextAwareInterface {

   /**
-   * @return \Drupal\Core\Plugin\Context\ContextInterface[]
+   * @return ContextInterface[]
    */
   public function getContexts($sample = FALSE);

@@ @@
    *
    * @param $name
    *
-   * @return \Drupal\Core\Plugin\Context\ContextInterface
+   * @return ContextInterface
    */
   public function getContext($name, $sample = FALSE);

@@ @@
    * Set the context
    *
    * @param $name
-   * @param \Drupal\Core\Plugin\Context\ContextInterface $context
+   * @param ContextInterface $context
    *
    * @return static
    */
@@ @@
   /**
    * Get all the context definition interfaces
    *
-   * @return \Drupal\Core\Plugin\Context\ContextDefinitionInterface[]
+   * @return ContextDefinitionInterface[]
    */
   public function getContextDefinitions();

@@ @@
    *
    * @param $name
    *
-   * @return \Drupal\Core\Plugin\Context\ContextDefinitionInterface
+   * @return ContextDefinitionInterface
    */
   public function getContextDefinition($name);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


46) modules/contrib/entity_template/src/ContainerFactoryTemplateInterface.php:8

    ---------- begin diff ----------
@@ @@
   /**
    * Instantiates a new instance of this class.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
-   * @param \Drupal\entity_template\BlueprintInterface $blueprint
+   * @param ContainerInterface $container
+   * @param BlueprintInterface $blueprint
    * @param array $configuration
    *
    * @return static
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


47) modules/contrib/entity_template/src/BlueprintTempstoreRepository.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template;

+use Drupal\Core\TempStore\TempStoreException;
+use Drupal\Core\TempStore\SharedTempStore;
 use Drupal\Core\TempStore\SharedTempStoreFactory;

 class BlueprintTempstoreRepository {
@@ @@
   /**
    * The shared tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @var SharedTempStoreFactory
    */
   protected $tempStoreFactory;

@@ @@
   /**
    * BlueprintTempstoreRepository constructor.
    *
-   * @param \Drupal\Core\TempStore\SharedTempStoreFactory $temp_store_factory
+   * @param SharedTempStoreFactory $temp_store_factory
    *   The shared tempstore factory.
    */
   public function __construct(SharedTempStoreFactory $temp_store_factory) {
@@ @@
   /**
    * Get the blueprint storaga from the tempstore if applicable.
    *
-   * @param \Drupal\entity_template\BlueprintStorageInterface $blueprint_storage
+   * @param BlueprintStorageInterface $blueprint_storage
    *
-   * @return \Drupal\entity_template\BlueprintStorageInterface
+   * @return BlueprintStorageInterface
    */
   public function get(BlueprintStorageInterface $blueprint_storage) {
     $key = $this->getKey($blueprint_storage);
@@ @@
   /**
    * Check whether the blueprint storage is in the tempstore.
    *
-   * @param \Drupal\entity_template\BlueprintStorageInterface $blueprint_storage
+   * @param BlueprintStorageInterface $blueprint_storage
    */
   public function has(BlueprintStorageInterface $blueprint_storage) {
     $key = $this->getKey($blueprint_storage);
@@ @@
   /**
    * Set the blueprint storage in the tempstore.
    *
-   * @param \Drupal\entity_template\BlueprintStorageInterface $blueprint_storage
+   * @param BlueprintStorageInterface $blueprint_storage
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
+   * @throws TempStoreException
    */
   public function set(BlueprintStorageInterface $blueprint_storage) {
     $key = $this->getKey($blueprint_storage);
@@ @@
   /**
    * Delete a blueprint storage from the tempstore.
    *
-   * @param \Drupal\entity_template\BlueprintStorageInterface $blueprint_storage
+   * @param BlueprintStorageInterface $blueprint_storage
    */
   public function delete(BlueprintStorageInterface $blueprint_storage) {
     $key = $this->getKey($blueprint_storage);
@@ @@
   /**
    * Get the key for the tempstore.
    *
-   * @param \Drupal\entity_template\BlueprintStorageInterface $blueprint_storage
+   * @param BlueprintStorageInterface $blueprint_storage
    *
    * @return string
    */
@@ @@
   /**
    * Get the right tempstore.
    *
-   * @param \Drupal\entity_template\BlueprintStorageInterface $blueprint_storage
+   * @param BlueprintStorageInterface $blueprint_storage
    *
-   * @return \Drupal\Core\TempStore\SharedTempStore
+   * @return SharedTempStore
    */
   protected function getTempstore(BlueprintStorageInterface $blueprint_storage) {
     $collection = 'entity_template.blueprint_storage.'.$blueprint_storage
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


48) modules/contrib/entity_template/src/BlueprintTempstoreParamConverter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template;

+use Drupal\entity_template\Plugin\EntityTemplate\BlueprintProvider\BlueprintProviderInterface;
 use Drupal\Core\ParamConverter\ParamConverterInterface;
 use Symfony\Component\Routing\Route;

@@ @@
 class BlueprintTempstoreParamConverter implements ParamConverterInterface {

   /**
-   * @var \Drupal\entity_template\BlueprintTempstoreRepository
+   * @var BlueprintTempstoreRepository
    */
   protected $blueprintTempstoreRepository;

   /**
-   * @var \Drupal\entity_template\TemplateBlueprintProviderManager
+   * @var TemplateBlueprintProviderManager
    */
   protected $blueprintProviderManager;

@@ @@
   /**
    * BlueprintTempstoreParamConverter constructor.
    *
-   * @param \Drupal\entity_template\BlueprintTempstoreRepository $blueprint_tempstore_repository
-   * @param \Drupal\entity_template\TemplateBlueprintProviderManager $blueprint_provider_manager
+   * @param BlueprintTempstoreRepository $blueprint_tempstore_repository
+   * @param TemplateBlueprintProviderManager $blueprint_provider_manager
    */
   public function __construct(
     BlueprintTempstoreRepository $blueprint_tempstore_repository,
@@ @@
    * @param array $defaults
    *   The route defaults array.
    *
-   * @return \Drupal\entity_template\BlueprintStorageInterface|null
+   * @return BlueprintStorageInterface|null
    *   The converted parameter value.
    */
   public function convert($value, $definition, $name, array $defaults) {
@@ @@
       return NULL;
     }

-    /** @var \Drupal\entity_template\Plugin\EntityTemplate\BlueprintProvider\BlueprintProviderInterface $provider */
+    /** @var BlueprintProviderInterface $provider */
     $provider = $this->blueprintProviderManager
       ->createInstance($defaults['template_blueprint_provider']);

@@ @@
    *   The parameter definition provided in the route options.
    * @param string $name
    *   The name of the parameter.
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to consider attaching to.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


49) modules/contrib/entity_template/src/BlueprintStorageTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template;

+use Drupal\entity_template\Plugin\EntityTemplate\BlueprintProvider\BlueprintProviderInterface;
+use Drupal\Component\Plugin\LazyPluginCollection;
+use Drupal\Component\Uuid\UuidInterface;
 use Drupal\Core\Url;

 trait BlueprintStorageTrait {

   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\BlueprintProvider\BlueprintProviderInterface
+   * @var BlueprintProviderInterface
    */
   protected $provider;

@@ @@
   /**
    * Get the blueprint provider for this blueprint storage.
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\BlueprintProvider\BlueprintProviderInterface
+   * @return BlueprintProviderInterface
    */
   public function getProvider() {
     return $this->provider;
@@ @@
   /**
    * Get the collection of templates.
    *
-   * @return \Drupal\Component\Plugin\LazyPluginCollection
+   * @return LazyPluginCollection
    */
   abstract public function getTemplates();

@@ @@
   /**
    * Get the uuid service.
    *
-   * @return \Drupal\Component\Uuid\UuidInterface
+   * @return UuidInterface
    */
   protected function uuidGenerator() {
     return \Drupal::service('uuid');
@@ @@
   /**
    * Get the edit url for this blueprint.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   public function getEditUrl() {
     return $this->getProvider()->getBlueprintEditUrl($this);
@@ @@
   /**
    * @param string $key
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   public function getEditTemplateUrl(string $key): Url {
     return $this->getProvider()->getBlueprintEditTemplateUrl($this, $key);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


50) modules/contrib/entity_template/src/BlueprintStorageInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template;

+use Drupal\entity_template\Plugin\EntityTemplate\BlueprintProvider\BlueprintProviderInterface;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Url;

@@ @@
   /**
    * Get the blueprint provider for this blueprint storage.
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\BlueprintProvider\BlueprintProviderInterface
+   * @return BlueprintProviderInterface
    */
   public function getProvider();

@@ @@
   /**
    * Get the edit url for this blueprint.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   public function getEditUrl();

@@ @@
    *
    * @param string $key
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   public function getEditTemplateUrl(string $key): Url;

@@ @@
    * Test the access for this blueprint storage.
    *
    * @param string $operation
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    * @param boolean $return_as_object
    *
-   * @return \Drupal\Core\Access\AccessResultInterface|bool
+   * @return AccessResultInterface|bool
    */
   public function access($operation, AccountInterface $account, $return_as_object = TRUE);
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


51) modules/contrib/entity_template/src/BlueprintResult.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template;

+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Core\Entity\EntityInterface;

 /**
@@ @@
   /**
    * The generated entites keyed by template.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]
+   * @var EntityInterface[]
    */
   protected $items = [];

@@ @@
   /**
    * Messages set by each template.
    *
-   * @var string[][]|\Drupal\Component\Render\MarkupInterface[][]
+   * @var string[][]|MarkupInterface[][]
    */
   protected $messages;

@@ @@
    * Add an item to the result.
    *
    * @param string $key
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    */
   public function addItem($key, EntityInterface $entity) {
     $this->items[$key] = $entity;
@@ @@
   /**
    * Get the generated items.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    */
   public function getItems() {
     return $this->items;
@@ @@
   /**
    * Set the items/
    *
-   * @param \Drupal\Core\Entity\EntityInterface[] $items
+   * @param EntityInterface[] $items
    *
    * @return static
    */
@@ @@
    *
    * @param $key
    *
-   * @return array|\Drupal\Component\Render\MarkupInterface[]|string[]
+   * @return array|MarkupInterface[]|string[]
    */
   public function getMessages($key) {
     return isset($this->messages[$key]) ? $this->messages[$key] : [];
@@ @@
   /**
    * Get all the messages.
    *
-   * @return \Drupal\Component\Render\MarkupInterface[][]|\string[][]
+   * @return MarkupInterface[][]|\string[][]
    */
   public function getAllMessages() {
     return $this->messages;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


52) modules/contrib/entity_template/src/BlueprintLazyTemplatesCollection.php:13

    ---------- begin diff ----------
@@ @@
 class BlueprintLazyTemplatesCollection extends DefaultLazyPluginCollection {

   /**
-   * @var \Drupal\entity_template\BlueprintInterface
+   * @var BlueprintInterface
    */
   protected $blueprint;

@@ @@
   /**
    * BlueprintLazyTemplatesCollection constructor.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $manager
-   * @param \Drupal\entity_template\BlueprintInterface $blueprint
+   * @param PluginManagerInterface $manager
+   * @param BlueprintInterface $blueprint
    * @param array $configurations
    */
   public function __construct(PluginManagerInterface $manager, BlueprintInterface $blueprint, array $configurations = []) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


53) modules/contrib/entity_template/src/BlueprintInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template;

+use Drupal\Core\Plugin\Context\ContextInterface;
+use Drupal\entity_template\Plugin\EntityTemplate\Builder\BuilderInterface;
+use Drupal\Core\Plugin\DefaultLazyPluginCollection;
+use Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface;
 interface BlueprintInterface extends ContextAwareInterface {

   /**
@@ @@
   public function label() : string;

   /**
-   * @param \Drupal\Core\Plugin\Context\ContextInterface[] $parameters
+   * @param ContextInterface[] $parameters
    *
-   * @return \Drupal\entity_template\BlueprintResult
+   * @return BlueprintResult
    */
   public function execute(array $parameters = []);

@@ @@
   /**
    * Get the builder this blueprint is for.
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\Builder\BuilderInterface
+   * @return BuilderInterface
    */
   public function getBuilder();

@@ @@
   /**
    * Get the templates that form part of this blueprint.
    *
-   * @return \Drupal\Core\Plugin\DefaultLazyPluginCollection
+   * @return DefaultLazyPluginCollection
    */
   public function getTemplates();

@@ @@
    *
    * @param $id
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @return TemplateInterface
    */
   public function getTemplate($id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


54) modules/contrib/entity_template/src/BlueprintEntityStorageAdaptor.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * BlueprintEntityStorageAdaptor constructor.
    *
-   * @param \Drupal\entity_template\Entity\BlueprintEntityInterface $entity
-   * @param \Drupal\entity_template\Plugin\EntityTemplate\BlueprintProvider\BlueprintProviderInterface $provider
+   * @param BlueprintEntityInterface $entity
+   * @param BlueprintProviderInterface $provider
    */
   public function __construct(
     BlueprintEntityInterface $entity,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


55) modules/contrib/entity_template/src/BlueprintEntityAdaptor.php:6

    ---------- begin diff ----------
@@ @@
 class BlueprintEntityAdaptor extends Blueprint {

   /**
-   * @var \Drupal\entity_template\Entity\BlueprintEntityInterface
+   * @var BlueprintEntityInterface
    */
   protected $entity;

@@ @@
   /**
    * BlueprintTemplateBlueprintEntityAdaptor constructor.
    *
-   * @param \Drupal\entity_template\Entity\BlueprintEntityInterface $entity
+   * @param BlueprintEntityInterface $entity
    */
   public function __construct(BlueprintEntityInterface $entity) {
     $this->entity = $entity;
@@ @@
   /**
    * Get the entity.
    *
-   * @return \Drupal\entity_template\Entity\BlueprintEntityInterface
+   * @return BlueprintEntityInterface
    */
   public function getEntity() {
     return $this->entity;
@@ @@
   /**
    * Get the template builder manager.
    *
-   * @return \Drupal\entity_template\TemplateBuilderManager
+   * @return TemplateBuilderManager
    */
   protected function builderManager() {
     return \Drupal::service('plugin.manager.entity_template.builder');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


56) modules/contrib/entity_template/src/Blueprint.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Plugin\DefaultLazyPluginCollection;
+use Drupal\Core\Plugin\Context\ContextDefinitionInterface;
+use Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Plugin\Context\Context;
 use Drupal\Core\Plugin\Context\ContextInterface;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The Builder.
    *
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Builder\BuilderInterface
+   * @var BuilderInterface
    */
   protected $builder;

@@ @@
   protected $priority = 0;

   /**
-   * @var \Drupal\Core\Plugin\DefaultLazyPluginCollection
+   * @var DefaultLazyPluginCollection
    */
   protected $templatesCollection;

@@ @@
   /**
    * Contexts by
    *
-   * @var \Drupal\Core\Plugin\Context\ContextInterface[]
+   * @var ContextInterface[]
    */
   protected $contexts = [];

@@ @@
   /**
    * Context definitions.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextDefinitionInterface[]
+   * @var ContextDefinitionInterface[]
    */
   protected $contextDefinitions = [];

@@ @@
   /**
    * Blueprint constructor.
    *
-   * @param \Drupal\entity_template\Plugin\EntityTemplate\Builder\BuilderInterface $builder
+   * @param BuilderInterface $builder
    * @param array $templates
    */
   public function __construct(BuilderInterface $builder, array $templates = []) {
@@ @@
   /**
    * Get extra context definitions.
    *
-   * @return \Drupal\Core\Plugin\Context\ContextDefinitionInterface[]
+   * @return ContextDefinitionInterface[]
    */
   protected function getExtraContextDefinitions() {
     $current_user_context = new EntityContextDefinition('user', new TranslatableMarkup('Current User'));
@@ @@
   /**
    * Get the builder this blueprint satisfies.
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\Builder\BuilderInterface
+   * @return BuilderInterface
    */
   public function getBuilder() {
     return $this->builder;
@@ @@
    *
    * @param array $parameters
    *
-   * @return \Drupal\entity_template\BlueprintResult
+   * @return BlueprintResult
    */
   public function execute(array $parameters = []) {
     // Set up contexts ready for execution.
@@ @@

     $result = new BlueprintResult();
     foreach ($this->getTemplates() as $key => $template) {
-      /** @var \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface $template */
+      /** @var TemplateInterface $template */
       $template->setBlueprintResult($result);

       if (!$template->applies()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


57) modules/contrib/entity_template/contrib/ui/src/TypedDataFormWidgetManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template_ui;

+use Drupal\typed_data\Widget\FormWidgetInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\TypedData\DataDefinitionInterface;
 use Drupal\typed_data\Widget\FormWidgetManager;

@@ @@
   /**
    * Get the widget for the given data definition.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $typed_data
+   * @param DataDefinitionInterface $typed_data
    *
-   * @return \Drupal\typed_data\Widget\FormWidgetInterface
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @return FormWidgetInterface
+   * @throws PluginException
    */
   public function getFormWidget(DataDefinitionInterface $data_definition) {
     foreach ($this->getDefinitions() as $id => $definition) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


58) modules/contrib/entity_template/contrib/ui/src/PluginForm/TemplateConfigureFormBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template_ui\PluginForm;

+use Drupal\Core\Plugin\PluginFormInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Form\SubformState;
@@ @@
   use TemplateUIHelperTrait;

   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @var TemplateInterface
    */
   protected $plugin;

   /**
-   * @var \Drupal\entity_template\TemplateComponentManager
+   * @var TemplateComponentManager
    */
   protected $componentManager;

   /**
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   * @var ContextHandlerInterface
    */
   protected $contextHandler;

   /**
-   * @var \Drupal\Core\Plugin\PluginFormFactoryInterface
+   * @var PluginFormFactoryInterface
    */
   protected $pluginFormFactory;

   /**
-   * @var \Drupal\entity_template_ui\Plugin\EntityTemplate\Template\TemplateUIFactoryInterface
+   * @var TemplateUIFactoryInterface
    */
   protected $templateUiFactory;

@@ @@
    * class, but not the container itself. Every call to this method must return
    * a new instance of this class; that is, it may not implement a singleton.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The service container this instance should use.
    */
   public static function create(ContainerInterface $container) {
@@ @@
   /**
    * TemplateConfigureFormBase constructor.
    *
-   * @param \Drupal\entity_template\TemplateComponentManager $component_manager
-   * @param \Drupal\Core\Plugin\PluginFormFactoryInterface $plugin_form_factory
-   * @param \Drupal\Core\Plugin\Context\ContextHandlerInterface $context_handler
-   * @param \Drupal\entity_template_ui\Plugin\EntityTemplate\Template\TemplateUIFactoryInterface $template_ui_factory
+   * @param TemplateComponentManager $component_manager
+   * @param PluginFormFactoryInterface $plugin_form_factory
+   * @param ContextHandlerInterface $context_handler
+   * @param TemplateUIFactoryInterface $template_ui_factory
    */
   public function __construct(
     TemplateComponentManager $component_manager,
@@ @@
     $form['components']['tabs'] = [
       '#type' => 'vertical_tabs',
     ];
-    /** @var \Drupal\entity_template\Plugin\EntityTemplate\Component\ComponentInterface $component */
+    /** @var ComponentInterface $component */
     foreach ($this->plugin->getComponents() as $k => $component) {
       $group = implode('][', array_merge($form['#parents'], ['components', 'tabs']));

@@ @@
   public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
     $configuration = $this->plugin->getConfiguration();

-    /** @var \Drupal\entity_template\Plugin\EntityTemplate\Component\ComponentInterface $component */
+    /** @var ComponentInterface $component */
     foreach ($this->plugin->getComponents() as $k => $component) {
       $sub_form_state = SubformState::createForSubform(
         $form['components'][$k],
@@ @@
   /**
    * Get the componetn form
    *
-   * @param \Drupal\entity_template\Plugin\EntityTemplate\Component\ComponentInterface $component
+   * @param ComponentInterface $component
    *
-   * @return \Drupal\Core\Plugin\PluginFormInterface
+   * @return PluginFormInterface
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   protected function getComponentForm(ComponentInterface $component) {
     if ($component instanceof  PluginWithFormsInterface) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


59) modules/contrib/entity_template/contrib/ui/src/PluginForm/TemplateConfigureForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template_ui\PluginForm;

+use Drupal\entity_template\Plugin\EntityTemplate\Template\ConditionalTemplateInterface;
+use Drupal\Core\Condition\ConditionInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Form\SubformState;
@@ @@
 class TemplateConfigureForm extends TemplateConfigureFormBase {

   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\ConditionalTemplateInterface
+   * @var ConditionalTemplateInterface
    */
   protected $plugin;

@@ @@
       '#empty' => $this->t('This template will always apply in this blueprint.'),
     ];
     foreach ($this->plugin->getConditions() as $k => $condition) {
-      /** @var \Drupal\Core\Condition\ConditionInterface $condition */
+      /** @var ConditionInterface $condition */
       $form['conditions']['table'][$k] = [
         'summary' => [
           '#markup' => $condition->summary(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


60) modules/contrib/entity_template/contrib/ui/src/PluginForm/TemplateAddForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template_ui\PluginForm;

+use Drupal\entity_template\Plugin\EntityTemplate\Template\BlueprintTemplateInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfo;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
 abstract class TemplateAddForm extends PluginFormBase implements ContainerInjectionInterface {

   /**
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfo
+   * @var EntityTypeBundleInfo
    */
   protected $entityTypeBundleInfo;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\BlueprintTemplateInterface
+   * @var BlueprintTemplateInterface
    */
   protected $plugin;

@@ @@
   /**
    * TemplateAddForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfo $entity_type_bundle_info
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeBundleInfo $entity_type_bundle_info
    */
   public function __construct(
     EntityTypeManagerInterface $entity_type_manager,
@@ @@
    *
    * @param array $form
    *   An associative array containing the initial structure of the plugin form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form. Calling code should pass on a subform
    *   state created through
    *   \Drupal\Core\Form\SubformState::createForSubform().
@@ @@
    * @param array $form
    *   An associative array containing the structure of the plugin form as built
    *   by static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form. Calling code should pass on a subform
    *   state created through
    *   \Drupal\Core\Form\SubformState::createForSubform().
@@ @@
    * Validate the combined entity type and bundle element.
    *
    * @param array $element
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public static function combinedEntityTypeIdBundleElementValidate(
     array $element,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


61) modules/contrib/entity_template/contrib/ui/src/PluginForm/InlineTemplateConfigureForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template_ui\PluginForm;

+use Drupal\entity_template\Plugin\EntityTemplate\Template\SubTemplateInterface;
 class InlineTemplateConfigureForm extends TemplateConfigureFormBase {

   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\SubTemplateInterface
+   * @var SubTemplateInterface
    */
   protected $plugin;
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


62) modules/contrib/entity_template/contrib/ui/src/PluginForm/InlineTemplateAddForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template_ui\PluginForm;

+use Drupal\entity_template\Plugin\EntityTemplate\Component\InlineTemplate;
 class InlineTemplateAddForm extends TemplateAddForm {

   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Component\InlineTemplate
+   * @var InlineTemplate
    */
   protected $plugin;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


63) modules/contrib/entity_template/contrib/ui/src/Plugin/TypedDataFormWidget/EntityInputWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template_ui\Plugin\TypedDataFormWidget;

+use Drupal\Core\Entity\Plugin\DataType\EntityAdapter;
+use Symfony\Component\Validator\ConstraintViolationInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\TypedData\EntityDataDefinition;
 use Drupal\Core\Form\SubformStateInterface;
@@ @@
 class EntityInputWidget extends FormWidgetBase {

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\Core\TypedData\TypedDataManagerInterface $typed_data_manager
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param TypedDataManagerInterface $typed_data_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    */
   public function __construct(
     array $configuration,
@@ @@
    * {@inheritdoc}
    */
   public function form(TypedDataInterface $data, SubformStateInterface $form_state) {
-    /** @var \Drupal\Core\Entity\Plugin\DataType\EntityAdapter $data */
+    /** @var EntityAdapter $data */
     $form = SubformState::getNewSubForm();
     $target_type = $data->getDataDefinition()->getEntityTypeId();

@@ @@
    * {@inheritdoc}
    */
   public function extractFormValues(TypedDataInterface $data, SubformStateInterface $form_state) {
-    /** @var \Drupal\Core\Entity\Plugin\DataType\EntityAdapter $data */
+    /** @var EntityAdapter $data */
     // Ensure empty values correctly end up as NULL value.
     $value = $form_state->getValue('value');
     if ($value === '') {
@@ @@
    */
   public function flagViolations(TypedDataInterface $data, ConstraintViolationListInterface $violations, SubformStateInterface $formState) {
     foreach ($violations as $violation) {
-      /** @var \Symfony\Component\Validator\ConstraintViolationInterface $violation */
+      /** @var ConstraintViolationInterface $violation */
       $formState->setErrorByName('target_id', $violation->getMessage());
     }
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


64) modules/contrib/entity_template/contrib/ui/src/Plugin/EntityTemplate/Template/TemplateUIFactoryInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template_ui\Plugin\EntityTemplate\Template;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface;

 interface TemplateUIFactoryInterface {
@@ @@
   /**
    * Get the template UI for the template.
    *
-   * @param \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface $template
+   * @param TemplateInterface $template
    *
-   * @return \Drupal\entity_template_ui\Plugin\EntityTemplate\Template\TemplateUIInterface
+   * @return TemplateUIInterface
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function ui(TemplateInterface $template): TemplateUIInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


65) modules/contrib/entity_template/contrib/ui/src/Plugin/EntityTemplate/Template/TemplateUIFactory.php:8

    ---------- begin diff ----------
@@ @@
 class TemplateUIFactory implements TemplateUIFactoryInterface {

   /**
-   * @var \Drupal\Core\DependencyInjection\ClassResolverInterface
+   * @var ClassResolverInterface
    */
   protected $classResolver;

@@ @@
   /**
    * TemplateUIFactory constructor.
    *
-   * @param \Drupal\Core\DependencyInjection\ClassResolverInterface $class_resolver
+   * @param ClassResolverInterface $class_resolver
    */
   public function __construct(ClassResolverInterface $class_resolver) {
     $this->classResolver = $class_resolver;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


66) modules/contrib/entity_template/contrib/ui/src/Plugin/EntityTemplate/Template/InlineTemplateUI.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template_ui\Plugin\EntityTemplate\Template;

+use Drupal\entity_template\Plugin\EntityTemplate\Template\SubTemplateInterface;
+use Drupal\entity_template\Plugin\EntityTemplate\Template\BlueprintTemplateInterface;
 use Drupal\Core\Url;

 class InlineTemplateUI extends BaseTemplateUI {

   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\SubTemplateInterface
+   * @var SubTemplateInterface
    */
   protected $template;

@@ @@
    */
   public function addComponentUrl(): ?Url {
     // @todo: Don't assume that the root template is a blueprint template.
-    /** @var \Drupal\entity_template\Plugin\EntityTemplate\Template\BlueprintTemplateInterface $root_template */
+    /** @var BlueprintTemplateInterface $root_template */
     $root_template = $this->template->getRootTemplate();

     return Url::fromRoute(
@@ @@
    */
   public function swapComponentUrl(string $key, string $other_id): ?Url {
     // @todo: Don't assume that the root template is a blueprint template.
-    /** @var \Drupal\entity_template\Plugin\EntityTemplate\Template\BlueprintTemplateInterface $root_template */
+    /** @var BlueprintTemplateInterface $root_template */
     $root_template = $this->template->getRootTemplate();

     return Url::fromRoute(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


67) modules/contrib/entity_template/contrib/ui/src/Plugin/EntityTemplate/Template/BlueprintTemplateUI.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template_ui\Plugin\EntityTemplate\Template;

+use Drupal\entity_template\Plugin\EntityTemplate\Template\BlueprintTemplateInterface;
 use Drupal\Core\Url;

 class BlueprintTemplateUI extends BaseTemplateUI {

   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\BlueprintTemplateInterface
+   * @var BlueprintTemplateInterface
    */
   protected $template;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


68) modules/contrib/entity_template/contrib/ui/src/Plugin/EntityTemplate/Template/BaseTemplateUI.php:7

    ---------- begin diff ----------
@@ @@
 abstract class BaseTemplateUI implements TemplateUIInterface {

   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @var TemplateInterface
    */
   protected $template;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


69) modules/contrib/entity_template/contrib/ui/src/Form/TemplateUIHelperTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template_ui\Form;

+use Drupal\entity_template_ui\Plugin\EntityTemplate\Template\TemplateUIFactoryInterface;
+use Drupal\entity_template_ui\Plugin\EntityTemplate\Template\TemplateUIInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface;

 trait TemplateUIHelperTrait {

   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @var TemplateInterface
    */
   protected $template;

   /**
-   * @var \Drupal\entity_template_ui\Plugin\EntityTemplate\Template\TemplateUIFactoryInterface
+   * @var TemplateUIFactoryInterface
    */
   protected $templateUiFactory;

@@ @@
   /**
    * Get the template UI factory;
    *
-   * @return \Drupal\entity_template_ui\Plugin\EntityTemplate\Template\TemplateUIFactoryInterface
+   * @return TemplateUIFactoryInterface
    */
   protected function templateUiFactory() {
     if (!$this->templateUiFactory) {
@@ @@
   /**
    * Get the template.
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @return TemplateInterface
    */
   public function getTemplate(): TemplateInterface {
     return $this->template;
@@ @@
   /**
    * Get the template ui
    *
-   * @param \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface|NULL $template
+   * @param TemplateInterface|NULL $template
    *
-   * @return \Drupal\entity_template_ui\Plugin\EntityTemplate\Template\TemplateUIInterface
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @return TemplateUIInterface
+   * @throws InvalidPluginDefinitionException
    */
   public function getTemplateUi(TemplateInterface $template = NULL) {
     $template = $template ?: $this->getTemplate();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


70) modules/contrib/entity_template/contrib/ui/src/Form/TemplateBuilderForm.php:17

    ---------- begin diff ----------
@@ @@
 class TemplateBuilderForm extends EntityForm {

   /**
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfo
+   * @var EntityTypeBundleInfo
    */
   protected $entityBundleInfo;

   /**
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;

   /**
-   * @var \Drupal\entity_template\TemplateBuilderManager
+   * @var TemplateBuilderManager
    */
   protected $builderManager;

   /**
-   * @var \Drupal\entity_template\Entity\TemplateBuilder
+   * @var TemplateBuilder
    */
   protected $entity;

@@ @@
   /**
    * TemplateBuilderForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfo $entity_type_bundle_info
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeBundleInfo $entity_type_bundle_info
    */
   public function __construct(
     EntityTypeManagerInterface $entity_type_manager,
@@ @@

   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return array
    */
@@ @@
    * Validate the information entered for the new context.
    *
    * @param $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function formValidateAddParameter($form, FormStateInterface $form_state) {
     $values = $form_state->getValue(['parameters', '_add_new']);
@@ @@
    * Submit to add a required context.
    *
    * @param $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function formSubmitAddParameter($form, FormStateInterface $form_state) {
     $values = $form_state->getValue(['parameters', '_add_new']);
@@ @@
    * Submit to remove a parameter.
    *
    * @param $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function formSubmitRemoveParameter($form, FormStateInterface $form_state) {
     $button = $form_state->getTriggeringElement();
@@ @@
    * Ajax callback to reload the parameters.
    *
    * @param $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return array
    */
@@ @@

   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return int
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


71) modules/contrib/entity_template/contrib/ui/src/Form/TemplateBlueprintForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template_ui\Form;

+use Drupal\entity_template\BlueprintStorageInterface;
+use Drupal\entity_template\Plugin\EntityTemplate\BlueprintProvider\BlueprintProviderInterface;
+use Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface;
+use Drupal\Core\Condition\ConditionInterface;
+use Drupal\Core\TempStore\TempStoreException;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
 class TemplateBlueprintForm extends EntityForm {

   /**
-   * @var \Drupal\entity_template\TemplateBlueprintProviderManager
+   * @var TemplateBlueprintProviderManager
    */
   protected $blueprintProviderManager;

   /**
-   * @var \Drupal\entity_template\TemplateManager
+   * @var TemplateManager
    */
   protected $templateManager;

   /**
-   * @var \Drupal\entity_template\BlueprintTempstoreRepository
+   * @var BlueprintTempstoreRepository
    */
   protected $tempstoreRepository;

   /**
-   * @var \Drupal\entity_template\BlueprintStorageInterface
+   * @var BlueprintStorageInterface
    */
   protected $blueprintStorage;

   /**
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;

   /**
-   * @var \Drupal\entity_template\TemplateBuilderManager
+   * @var TemplateBuilderManager
    */
   protected $templateBuilderManager;

   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *
-   * @return \Drupal\Core\Entity\EntityForm
+   * @return EntityForm
    */
   public static function create(ContainerInterface $container) {
     return new static(
@@ @@
   /**
    * TemplateBlueprintForm constructor.
    *
-   * @param \Drupal\entity_template\TemplateManager $template_manager
+   * @param TemplateManager $template_manager
    */
   public function __construct(
     TemplateBlueprintProviderManager $blueprint_provider_manager,
@@ @@
     // whether this is a default blueprint or so that we can correctly set the
     // provider.
     $provider_id = $entity->get('is_default') ? 'builder' : 'blueprint_config';
-    /** @var \Drupal\entity_template\Plugin\EntityTemplate\BlueprintProvider\BlueprintProviderInterface $provider */
+    /** @var BlueprintProviderInterface $provider */
     $provider = $this->blueprintProviderManager->createInstance($provider_id);
     $blueprint_storage = new BlueprintEntityStorageAdaptor($entity, $provider);

@@ @@

   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return array
    */
@@ @@
       ]
     ];

-    /** @var \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface $template */
+    /** @var TemplateInterface $template */
     foreach ($this->blueprintStorage->getTemplates() as $uuid => $template) {
       $config = $template->getConfiguration();

-      /** @var \Drupal\Core\Condition\ConditionInterface[] $conditions */
+      /** @var ConditionInterface[] $conditions */
       if ($conditions = $template->getConditions()) {
         $applies_when = [
           '#theme' => 'item_list',
@@ @@
    * Submit callback for selecting a builder.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
+   * @throws TempStoreException
    */
   public function submitFormSelectBuilder(array &$form, FormStateInterface $form_state) {
     $this->blueprintStorage->getEntity()->set('builder', $form_state->getValue('builder'));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


72) modules/contrib/entity_template/contrib/ui/src/Form/TemplateAjaxFormHelperTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template_ui\Form;

+use Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface;
+use Drupal\entity_template\BlueprintStorageInterface;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\RedirectCommand;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
 trait TemplateAjaxFormHelperTrait {

   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @var TemplateInterface
    */
   protected $template;

   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @var TemplateInterface
    */
   protected $rootTemplate;

   /**
-   * @var \Drupal\entity_template\BlueprintStorageInterface
+   * @var BlueprintStorageInterface
    */
   protected $blueprintStorage;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


73) modules/contrib/entity_template/contrib/ui/src/Form/SwapComponentForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template_ui\Form;

+use Drupal\entity_template\Plugin\EntityTemplate\Component\SwappableComponentInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\entity_template\BlueprintStorageInterface;
 use Drupal\entity_template\Plugin\EntityTemplate\Component\TemplateContextAwareComponentInterface;
@@ @@
     $this->initializeTemplate($blueprint_storage, $template_key, $sub_template);

     if (!$this->plugin) {
-      /** @var \Drupal\entity_template\Plugin\EntityTemplate\Component\SwappableComponentInterface $original_plugin */
+      /** @var SwappableComponentInterface $original_plugin */
       $original_plugin = $this->template->getComponent($component_id);
       $new_plugin = $this->componentManager->createInstance(
         $other_plugin,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


74) modules/contrib/entity_template/contrib/ui/src/Form/RemoveTemplateForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template_ui\Form;

+use Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ @@
 class RemoveTemplateForm extends ConfirmFormBase {

   /**
-   * @var \Drupal\entity_template\BlueprintStorageInterface
+   * @var BlueprintStorageInterface
    */
   protected $blueprintStorage;

   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @var TemplateInterface
    */
   protected $template;

   /**
-   * @var \Drupal\entity_template\BlueprintTempstoreRepository
+   * @var BlueprintTempstoreRepository
    */
   protected $blueprintTempstoreRepository;

@@ @@
   /**
    * RemoveTemplateForm constructor.
    *
-   * @param \Drupal\entity_template\BlueprintTempstoreRepository $blueprint_tempstore_tepository
+   * @param BlueprintTempstoreRepository $blueprint_tempstore_tepository
    */
   public function __construct(BlueprintTempstoreRepository $blueprint_tempstore_tepository)
   {
@@ @@
   /**
    * Returns the question to ask the user.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The form question. The page title will be set to this value.
    */
   public function getQuestion() {
@@ @@
   /**
    * Returns the route to go to if the user cancels the action.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   A URL object.
    */
   public function getCancelUrl() {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


75) modules/contrib/entity_template/contrib/ui/src/Form/RemoveConditionForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template_ui\Form;

+use Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface;
+use Drupal\Core\Condition\ConditionInterface;
 use Drupal\Core\Ajax\AjaxFormHelperTrait;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   use TemplateAjaxFormHelperTrait;

   /**
-   * @var \Drupal\entity_template\BlueprintStorageInterface
+   * @var BlueprintStorageInterface
    */
   protected $blueprintStorage;

   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @var TemplateInterface
    */
   protected $template;

   /**
-   * @var \Drupal\Core\Condition\ConditionInterface
+   * @var ConditionInterface
    */
   protected $condition;

   /**
-   * @var \Drupal\entity_template\BlueprintTempstoreRepository
+   * @var BlueprintTempstoreRepository
    */
   protected $blueprintTempstoreRepository;

@@ @@
   /**
    * RemoveConditionForm constructor.
    *
-   * @param \Drupal\entity_template\BlueprintTempstoreRepository $blueprint_tempstore_repository
+   * @param BlueprintTempstoreRepository $blueprint_tempstore_repository
    */
   public function __construct(BlueprintTempstoreRepository $blueprint_tempstore_repository) {
     $this->blueprintTempstoreRepository = $blueprint_tempstore_repository;
@@ @@
   /**
    * Returns the question to ask the user.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The form question. The page title will be set to this value.
    */
   public function getQuestion() {
@@ @@
   /**
    * Returns the route to go to if the user cancels the action.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   A URL object.
    */
   public function getCancelUrl() {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


76) modules/contrib/entity_template/contrib/ui/src/Form/RemoveComponentForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template_ui\Form;

+use Drupal\entity_template\Plugin\EntityTemplate\Component\ComponentInterface;
 use Drupal\Core\Ajax\AjaxFormHelperTrait;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   use TemplateAjaxFormHelperTrait;

   /**
-   * @var \Drupal\entity_template\BlueprintStorageInterface
+   * @var BlueprintStorageInterface
    */
   protected $blueprintStorage;

   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @var TemplateInterface
    */
   protected $template;

   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @var TemplateInterface
    */
   protected $rootTemplate;

   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Component\ComponentInterface
+   * @var ComponentInterface
    */
   protected $component;

   /**
-   * @var \Drupal\entity_template\BlueprintTempstoreRepository
+   * @var BlueprintTempstoreRepository
    */
   protected $blueprintTempstoreRepository;

@@ @@
   /**
    * RemoveComponentForm constructor.
    *
-   * @param \Drupal\entity_template\BlueprintTempstoreRepository $blueprint_tempstore_repository
+   * @param BlueprintTempstoreRepository $blueprint_tempstore_repository
    */
   public function __construct(BlueprintTempstoreRepository $blueprint_tempstore_repository) {
     $this->blueprintTempstoreRepository = $blueprint_tempstore_repository;
@@ @@
   /**
    * Returns the question to ask the user.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The form question. The page title will be set to this value.
    */
   public function getQuestion() {
@@ @@
   /**
    * Returns the route to go to if the user cancels the action.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   A URL object.
    */
   public function getCancelUrl() {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


77) modules/contrib/entity_template/contrib/ui/src/Form/CreateEntityFromTemplateForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template_ui\Form;

+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Core\Plugin\Context\ContextDefinition;
+use Drupal\typed_data\Widget\FormWidgetInterface;
+use Symfony\Component\Validator\ConstraintViolationInterface;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\entity_template\Plugin\EntityTemplate\Builder\BuilderBase;
+use Drupal\Core\TypedData\TypedDataInterface;
+use Drupal\entity_template\BlueprintResult;
 use Drupal\charts_highcharts\Settings\Highcharts\Pane;
 use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
@@ @@
 class CreateEntityFromTemplateForm extends FormBase {

   /**
-   * @var \Drupal\entity_template\TemplateBuilderManager
+   * @var TemplateBuilderManager
    */
   protected $templateBuilderManager;

   /**
-   * @var \Drupal\typed_data\Widget\FormWidgetManagerInterface
+   * @var FormWidgetManagerInterface
    */
   protected $formWidgetManager;

   /**
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    * The message to display upon successful submission. Return NULL to not show
    * any messages.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    */
   protected function getSuccessfulMessage() {
     return $this->t('Builder was successfully executed.');
@@ @@
   /**
    * CreateEntityFromTemplateForm constructor.
    *
-   * @param \Drupal\entity_template\TemplateBuilderManager $template_builder_manager
-   * @param \Drupal\typed_data\Widget\FormWidgetManagerInterface $form_widget_manager
-   * @param \Drupal\Core\TypedData\TypedDataManagerInterface $typed_data_manager
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param TemplateBuilderManager $template_builder_manager
+   * @param FormWidgetManagerInterface $form_widget_manager
+   * @param TypedDataManagerInterface $typed_data_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    */
   public function __construct(
     TemplateBuilderManager $template_builder_manager,
@@ @@
    * Form constructor.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    * @param string $entity_type_id
    * @param string $builder_id
    *
    * @return array
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    * @throws \Exception
    */
   public function buildForm(array $form, FormStateInterface $form_state, $entity_type_id = NULL, $builder_id = NULL) {
@@ @@
    * Build the select parameters form.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return array
    */
@@ @@
    * Builds the parameters form step.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return array
    * @throws \Exception
@@ @@
           $provided_params[$id] = $param;
         }
         else {
-          /** @var \Drupal\Core\Plugin\Context\ContextDefinition $context_definition */
+          /** @var ContextDefinition $context_definition */
           $data_definition = $context_definition->getDataDefinition();
           $typed_data = $this->typedDataManager->createInstance(
             $context_definition->getDataType(),
@@ @@
             ]
           );

-          /** @var \Drupal\typed_data\Widget\FormWidgetInterface $widget */
+          /** @var FormWidgetInterface $widget */
           $widget = $this->formWidgetManager->getFormWidget($data_definition);
           $form['params'][$id] = [
             '#widget' => $widget,
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return array
    */
@@ @@
    * Build the entities form.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return array
    */
@@ @@
   /**
    * Build the actions.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return array
    */
@@ @@
    * Validate the entities form.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function validateEntitiesForm(array $form, FormStateInterface $form_state) {
     $entity = clone $form_state->get('current_entity');
@@ @@

     // Flag entity level violations.
     foreach ($violations->getEntityViolations() as $violation) {
-      /** @var \Symfony\Component\Validator\ConstraintViolationInterface $violation */
+      /** @var ConstraintViolationInterface $violation */
       $form_state->setErrorByName(str_replace('.', '][', $violation->getPropertyPath()), $violation->getMessage());
     }

@@ @@
    * Submit the entities form.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitEntitiesForm(array $form, FormStateInterface $form_state) {
     $entity = $form_state->get('current_entity');
@@ @@
    * Submit the entities form and go to the next entity.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitEntitiesFormNextEntity(array $form, FormStateInterface $form_state) {
     $current_entity = $form_state->get('current_entity');
@@ @@
    * Validate callback for selecting a builder.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function validateFormSelectBuilder(array &$form, FormStateInterface $form_state) {
     if (!$form_state->getValue('builder')) {
@@ @@
    * Submit callback for selecting a builder.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitFormSelectBuilder(array &$form, FormStateInterface $form_state) {
     $builder = $form_state->get(['builders', $form_state->getValue('builder')]);
@@ @@
    * Submit callback for selecting a blueprint.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitFormSelectBlueprint(array &$form, FormStateInterface $form_state) {
     $form_state->set('blueprint_key', $form_state->getValue('blueprint_key'));
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityStorageException
+   * @throws EntityMalformedException
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\entity_template\Plugin\EntityTemplate\Builder\BuilderBase $builder */
+    /** @var BuilderBase $builder */
     $builder = $form_state->get('builder');

     try {
@@ @@
       if (!empty($form['params'])) {
         $parameters = $form_state->get('params') ?: [];
         foreach (Element::children($form['params']) as $id) {
-          /** @var \Drupal\typed_data\Widget\FormWidgetInterface $widget */
+          /** @var FormWidgetInterface $widget */
           $widget = $form['params'][$id]['#widget'];
-          /** @var \Drupal\Core\TypedData\TypedDataInterface $typed_data */
+          /** @var TypedDataInterface $typed_data */
           $typed_data = $form['params'][$id]['#typed_data'];

           $widget->extractFormValues(
@@ @@
         $form_state->set('params', $parameters);
       }

-      /** @var \Drupal\entity_template\BlueprintResult $result */
+      /** @var BlueprintResult $result */
       $params = $form_state->get('params') ?: [];
       foreach ($builder->getContextDefinitions() as $id => $definition) {
         // Upcast the entity ids that might be in params.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


78) modules/contrib/entity_template/contrib/ui/src/Form/ConfigureTemplateForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template_ui\Form;

+use Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\PluginFormFactoryInterface;
@@ @@
 class ConfigureTemplateForm extends FormBase {

   /**
-   * @var \Drupal\entity_template\TemplateManager
+   * @var TemplateManager
    */
   protected $templateManager;

   /**
-   * @var \Drupal\entity_template\BlueprintStorageInterface
+   * @var BlueprintStorageInterface
    */
   protected $blueprintStorage;

   /**
-   * @var \Drupal\Core\Plugin\PluginFormFactoryInterface
+   * @var PluginFormFactoryInterface
    */
   protected $pluginFormFactory;

   /**
-   * @var \Drupal\entity_template\BlueprintTempstoreRepository
+   * @var BlueprintTempstoreRepository
    */
   protected $blueprintTempstore;

   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @var TemplateInterface
    */
   protected $plugin;

@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


79) modules/contrib/entity_template/contrib/ui/src/Form/ConfigureConditionForm.php:76

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


80) modules/contrib/entity_template/contrib/ui/src/Form/ComponentFormBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template_ui\Form;

+use Drupal\entity_template\Plugin\EntityTemplate\Component\ComponentInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Ajax\AjaxFormHelperTrait;
 use Drupal\Core\Form\FormBase;
@@ @@
   use TemplateAjaxFormHelperTrait;

   /**
-   * @var \Drupal\entity_template\TemplateComponentManager
+   * @var TemplateComponentManager
    */
   protected $componentManager;

   /**
-   * @var \Drupal\entity_template\BlueprintStorageInterface
+   * @var BlueprintStorageInterface
    */
   protected $blueprintStorage;

@@ @@
   protected $templateId;

   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @var TemplateInterface
    */
   protected $template;

   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @var TemplateInterface
    */
   protected $rootTemplate;

   /**
-   * @var \Drupal\Core\Plugin\PluginFormFactoryInterface
+   * @var PluginFormFactoryInterface
    */
   protected $pluginFormFactory;

   /**
-   * @var \Drupal\entity_template\BlueprintTempstoreRepository
+   * @var BlueprintTempstoreRepository
    */
   protected $blueprintTempstore;

   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Component\ComponentInterface
+   * @var ComponentInterface
    */
   protected $plugin;

@@ @@
   /**
    * Initialize important values like template, rootTemplate and blueprintStorage
    *
-   * @param \Drupal\entity_template\BlueprintStorageInterface $storage
+   * @param BlueprintStorageInterface $storage
    * @param string $template_key
    */
   protected function initializeTemplate(BlueprintStorageInterface $storage, string $template_key, string $sub_template = '') {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state, string $op = 'add') {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


81) modules/contrib/entity_template/contrib/ui/src/Form/AddTemplateForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template_ui\Form;

+use Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Ajax\AjaxFormHelperTrait;
 use Drupal\Core\Ajax\AjaxResponse;
@@ @@
   use AjaxFormHelperTrait;

   /**
-   * @var \Drupal\entity_template\TemplateManager
+   * @var TemplateManager
    */
   protected $templateManager;

   /**
-   * @var \Drupal\entity_template\BlueprintStorageInterface
+   * @var BlueprintStorageInterface
    */
   protected $blueprintStorage;

   /**
-   * @var \Drupal\Core\Plugin\PluginFormFactoryInterface
+   * @var PluginFormFactoryInterface
    */
   protected $pluginFormFactory;

   /**
-   * @var \Drupal\entity_template\BlueprintTempstoreRepository
+   * @var BlueprintTempstoreRepository
    */
   protected $blueprintTempstore;

   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @var TemplateInterface
    */
   protected $plugin;

@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


82) modules/contrib/entity_template/contrib/ui/src/Form/AddConditionForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template_ui\Form;

+use Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface;
+use Drupal\Core\Condition\ConditionInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Ajax\AjaxFormHelperTrait;
@@ @@
   use TemplateAjaxFormHelperTrait;

   /**
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $conditionManager;

   /**
-   * @var \Drupal\entity_template\BlueprintStorageInterface
+   * @var BlueprintStorageInterface
    */
   protected $blueprintStorage;

@@ @@
   protected $templateId;

   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @var TemplateInterface
    */
   protected $template;

   /**
-   * @var \Drupal\Core\Plugin\PluginFormFactoryInterface
+   * @var PluginFormFactoryInterface
    */
   protected $pluginFormFactory;

   /**
-   * @var \Drupal\entity_template\BlueprintTempstoreRepository
+   * @var BlueprintTempstoreRepository
    */
   protected $blueprintTempstore;

   /**
-   * @var \Drupal\Core\Condition\ConditionInterface
+   * @var ConditionInterface
    */
   protected $plugin;

@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
   /**
    * Get the plugin form for a given set of operations.
    *
-   * @param \Drupal\Component\Plugin\PluginInspectionInterface $plugin
+   * @param PluginInspectionInterface $plugin
    * @param array $operations
    *
-   * @return \Drupal\Core\Plugin\PluginFormInterface|NULL
+   * @return PluginFormInterface|NULL
    */
   protected function getPluginForm(PluginInspectionInterface $plugin, array $operations = ['configure']) {
     foreach ($operations as $operation) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


83) modules/contrib/entity_template/contrib/ui/src/Form/AddComponentForm.php:57

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state, string $op = "add") {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


84) modules/contrib/entity_template/contrib/ui/src/Entity/TemplateBlueprintListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template_ui\Entity;

+use Drupal\entity_template\Entity\TemplateBuilder;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;

@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\entity_template\Entity\TemplateBuilder $entity */
+    /** @var TemplateBuilder $entity */
     $row = [];
     $row['label']['data'] = [
       '#markup' => $entity->label(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


85) modules/contrib/entity_template/contrib/ui/src/Element/AvailablePlaceholders.php:127

    ---------- begin diff ----------
@@ @@
   /**
    * Get the placeholders associated with a given data definition.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $data_definition
+   * @param DataDefinitionInterface $data_definition
    *   The data definition to get placeholders for.
    * @param string $path
    *   The path so far to the data definition.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


86) modules/contrib/entity_template/contrib/ui/src/Controller/TemplateBuilderDefaultBlueprintController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template_ui\Controller;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityFormBuilderInterface;
@@ @@
 class TemplateBuilderDefaultBlueprintController extends ControllerBase {

   /**
-   * @var \Drupal\entity_template\TemplateBuilderManager
+   * @var TemplateBuilderManager
    */
   protected $builderManager;

@@ @@
   /**
    * TemplateBuilderDefaultBlueprintController constructor.
    *
-   * @param \Drupal\entity_template\TemplateBuilderManager $builder_manager
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Entity\EntityFormBuilderInterface $entity_form_builder
+   * @param TemplateBuilderManager $builder_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param EntityFormBuilderInterface $entity_form_builder
    */
   public function __construct(
     TemplateBuilderManager $builder_manager,
@@ @@
    * @return array
    *   The page content.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function editDefaultBlueprint(string $builder) {
     try {
@@ @@
    * @param string $builder
    *   The builder plugin id.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The page title.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function editDefaultBlueprintTitle(string $builder) {
     $definition = $this->builderManager->getDefinition($builder);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


87) modules/contrib/entity_template/contrib/ui/src/Controller/ChooseTemplateController.php:10

    ---------- begin diff ----------
@@ @@
 class ChooseTemplateController extends ControllerBase {

   /**
-   * @var \Drupal\entity_template\TemplateManager
+   * @var TemplateManager
    */
   protected $templateManager;

@@ @@
   /**
    * ChooseTemplateController constructor.
    *
-   * @param \Drupal\entity_template\TemplateManager $template_manager
+   * @param TemplateManager $template_manager
    */
   public function __construct(TemplateManager $template_manager) {
     $this->templateManager = $template_manager;
@@ @@
   }

   /**
-   * @param \Drupal\entity_template\BlueprintStorageInterface $blueprint_storage
+   * @param BlueprintStorageInterface $blueprint_storage
    */
   public function build(BlueprintStorageInterface $blueprint_storage) {
     $definitions = $this->templateManager->getDefinitions();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


88) modules/contrib/entity_template/contrib/ui/src/Controller/ChooseConditionController.php:15

    ---------- begin diff ----------
@@ @@
   use AjaxHelperTrait;

   /**
-   * @var \Drupal\entity_template\TemplateManager
+   * @var TemplateManager
    */
   protected $templateManager;

   /**
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $conditionManager;

   /**
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   * @var ContextHandlerInterface
    */
   protected $contextHandler;

@@ @@
   /**
    * ChooseTemplateController constructor.
    *
-   * @param \Drupal\entity_template\TemplateManager $template_manager
+   * @param TemplateManager $template_manager
    */
   public function __construct(TemplateManager $template_manager, ConditionManager $condition_manager, ContextHandlerInterface $context_handler) {
     $this->templateManager = $template_manager;
@@ @@
   }

   /**
-   * @param \Drupal\entity_template\BlueprintStorageInterface $blueprint_storage
+   * @param BlueprintStorageInterface $blueprint_storage
    */
   public function build(BlueprintStorageInterface $blueprint_storage, $template_key) {
     $template = $blueprint_storage->getTemplate($template_key);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


89) modules/contrib/entity_template/contrib/ui/src/Controller/ChooseComponentController.php:16

    ---------- begin diff ----------
@@ @@
   use AjaxHelperTrait;

   /**
-   * @var \Drupal\entity_template\TemplateManager
+   * @var TemplateManager
    */
   protected $templateManager;

   /**
-   * @var \Drupal\entity_template\TemplateComponentManager
+   * @var TemplateComponentManager
    */
   protected $componentManager;

   /**
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   * @var ContextHandlerInterface
    */
   protected $contextHandler;

@@ @@
   /**
    * ChooseTemplateController constructor.
    *
-   * @param \Drupal\entity_template\TemplateManager $template_manager
+   * @param TemplateManager $template_manager
    */
   public function __construct(TemplateManager $template_manager, TemplateComponentManager $component_manager, ContextHandlerInterface $context_handler) {
     $this->templateManager = $template_manager;
@@ @@
   }

   /**
-   * @param \Drupal\entity_template\BlueprintStorageInterface $blueprint_storage
+   * @param BlueprintStorageInterface $blueprint_storage
    */
   public function build(BlueprintStorageInterface $blueprint_storage, $template_id, $sub_template = NULL) {
     $template = $blueprint_storage->getTemplate($template_id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


90) modules/contrib/entity_template/contrib/ui/src/Controller/BuilderController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template_ui\Controller;

+use Drupal\entity_template\Entity\TemplateBuilder;
 use Drupal\Component\Utility\SortArray;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
 class BuilderController extends ControllerBase {

   /**
-   * @var \Drupal\entity_template\TemplateBuilderManager
+   * @var TemplateBuilderManager
    */
   protected $builderManager;

@@ @@
     ];

     foreach ($this->builderManager->getDefinitions() as $id => $definition) {
-      /** @var \Drupal\entity_template\Plugin\EntityTemplate\Builder\BuilderInterface $plugin */
+      /** @var BuilderInterface $plugin */
       $plugin = $this->builderManager->createInstance($id);

       $row = [
@@ @@
   /**
    * Build parameters
    *
-   * @param \Drupal\entity_template\Plugin\EntityTemplate\Builder\BuilderInterface $builder
+   * @param BuilderInterface $builder
    *
    * @return array
    */
   protected function buildParameters(BuilderInterface $builder) {
-    /** @var \Drupal\entity_template\Entity\TemplateBuilder $entity */
+    /** @var TemplateBuilder $entity */
     $build = [
       '#theme' => 'item_list',
       '#list_type' => 'ul',
@@ @@
   /**
    * Build the operations for a given row.
    *
-   * @param \Drupal\entity_template\Plugin\EntityTemplate\Builder\BuilderInterface $builder
+   * @param BuilderInterface $builder
    *
    * @return array
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


91) modules/contrib/entity_template/contrib/ui/src/Controller/AutocompleteController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template_ui\Controller;

+use Drupal\entity_template\Plugin\EntityTemplate\Template\SubTemplateInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\entity_template\BlueprintStorageInterface;
 use Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface;
@@ @@
   /**
    * The data fetcher.
    *
-   * @var \Drupal\typed_data\DataFetcherInterface
+   * @var DataFetcherInterface
    */
   protected $dataFetcher;

@@ @@
   /**
    * AutocompleteController constructor.
    *
-   * @param \Drupal\typed_data\DataFetcherInterface $data_fetcher
+   * @param DataFetcherInterface $data_fetcher
    */
   public function __construct(DataFetcherInterface $data_fetcher) {
     $this->dataFetcher = $data_fetcher;
@@ @@
   /**
    * Autocomplete for data selection.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *
    * @todo: Work out how to filter by permitted data types.
    */
@@ @@
     if ($sub_template) {
       $path = explode(':', $sub_template);
       while ($bit = array_shift($path)) {
-        /** @var \Drupal\entity_template\Plugin\EntityTemplate\Template\SubTemplateInterface $template */
+        /** @var SubTemplateInterface $template */
         $template = $template->getComponent($bit);

         if (!$template || !($template instanceof TemplateInterface)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


92) modules/contrib/entity_template/contrib/ui/src/Access/BlueprintStorageAccessCheck.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_template_ui\Access;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\entity_template\BlueprintStorageInterface;
@@ @@
 class BlueprintStorageAccessCheck implements AccessInterface {

   /**
-   * @param \Drupal\entity_template\BlueprintStorageInterface $blueprint_storage
-   * @param \Drupal\Core\Session\AccountInterface $account
-   * @param \Symfony\Component\Routing\Route $route
+   * @param BlueprintStorageInterface $blueprint_storage
+   * @param AccountInterface $account
+   * @param Route $route
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    */
   public function access(
     BlueprintStorageInterface $blueprint_storage,
@@ @@
   ) {
     $operation = $route->getRequirement('_blueprint_storage_access');

-    /** @var \Drupal\Core\Access\AccessResultInterface $access */
+    /** @var AccessResultInterface $access */
     $access = $blueprint_storage->access($operation, $account, TRUE);

     return $access;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


93) modules/contrib/entity_template/contrib/ui/entity_template_ui.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Config\Entity\ConfigEntityType;
+use Drupal\entity_template_ui\Entity\TemplateBuilderHtmlRouteProvider;
+use Drupal\entity_template_ui\Form\TemplateBuilderForm;
+use Drupal\entity_template_ui\Entity\TemplateBlueprintListBuilder;
+use Drupal\Core\Entity\Routing\DefaultHtmlRouteProvider;
+use Drupal\entity_template_ui\Form\TemplateBlueprintForm;
 use Drupal\entity_template\Plugin\EntityTemplate\Component\InlineTemplate;
 use Drupal\entity_template_ui\Plugin\EntityTemplate\Template\BlueprintTemplateUI;
 use Drupal\entity_template_ui\Plugin\EntityTemplate\Template\InlineTemplateUI;
@@ @@
  * Implements hook_entity_type_build().
  */
 function entity_template_ui_entity_type_build(array &$entity_types) {
-  /** @var \Drupal\Core\Config\Entity\ConfigEntityType $entity_type */
+  /** @var ConfigEntityType $entity_type */
   $entity_type = $entity_types['entity_template_builder'];
   $entity_type->setHandlerClass("route_provider", [
-    "html" => \Drupal\entity_template_ui\Entity\TemplateBuilderHtmlRouteProvider::class,
+    "html" => TemplateBuilderHtmlRouteProvider::class,
   ]);
   //$entity_type->setLinkTemplate("collection", "/admin/content/entity_template/builder");
   $entity_type->setLinkTemplate("canonical", "/admin/content/entity_template/builder/manage/{entity_template_builder}");
@@ @@
     "/admin/content/entity_template/builder/manage/{entity_template_builder}/edit_default_blueprint"
   );
   $entity_type->setLinkTemplate("add-form", "/admin/content/entity_template/builder/add");
-  $entity_type->setFormClass("default", \Drupal\entity_template_ui\Form\TemplateBuilderForm::class);
+  $entity_type->setFormClass("default", TemplateBuilderForm::class);

-  /** @var \Drupal\Core\Config\Entity\ConfigEntityType $entity_type */
+  /** @var ConfigEntityType $entity_type */
   $entity_type = $entity_types['entity_template_blueprint'];
-  $entity_type->setListBuilderClass(\Drupal\entity_template_ui\Entity\TemplateBlueprintListBuilder::class);
+  $entity_type->setListBuilderClass(TemplateBlueprintListBuilder::class);
   $entity_type->setHandlerClass("route_provider", [
-    "html" => \Drupal\Core\Entity\Routing\DefaultHtmlRouteProvider::class,
+    "html" => DefaultHtmlRouteProvider::class,
   ]);
   $entity_type->setLinkTemplate("collection", "/admin/content/entity_template/blueprint");
   $entity_type->setLinkTemplate("canonical", "/admin/content/entity_template/blueprint/manage/{entity_template_blueprint}");
   $entity_type->setLinkTemplate("edit-form", "/admin/content/entity_template/blueprint/manage/{entity_template_blueprint}/edit");
   $entity_type->setLinkTemplate("add-form", "/admin/content/entity_template/blueprint/add");
-  $entity_type->setFormClass("default", \Drupal\entity_template_ui\Form\TemplateBlueprintForm::class);
+  $entity_type->setFormClass("default", TemplateBlueprintForm::class);
 }

 /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 93 files have been changed by Rector                                      

