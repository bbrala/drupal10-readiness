modules/contrib/select2/modules/select2_facets/src/Controller/FacetApiAutocompleteController.php
modules/contrib/select2/modules/select2_facets/src/Plugin/facets/widget/Select2Widget.php
modules/contrib/select2/modules/select2_facets/tests/src/FunctionalJavascript/FacetsTest.php
modules/contrib/select2/modules/select2_publish/select2_publish.module
modules/contrib/select2/modules/select2_publish/src/Element/StatusProperties.php
modules/contrib/select2/modules/select2_publish/tests/src/FunctionalJavascript/PublishTest.php
modules/contrib/select2/select2.install
modules/contrib/select2/select2.module
modules/contrib/select2/src/Controller/EntityAutocompleteController.php
modules/contrib/select2/src/Element/Select2.php
modules/contrib/select2/src/EntityAutocompleteMatcher.php
modules/contrib/select2/src/Plugin/Field/FieldWidget/Select2EntityReferenceWidget.php
modules/contrib/select2/src/Plugin/Field/FieldWidget/Select2Widget.php
modules/contrib/select2/src/Plugin/better_exposed_filters/filter/Select2.php
modules/contrib/select2/src/Select2Trait.php
modules/contrib/select2/tests/modules/select2_form_test/select2_form_test.module
modules/contrib/select2/tests/modules/select2_form_test/src/Form/Select2AjaxForm.php
modules/contrib/select2/tests/modules/select2_form_test/src/Form/Select2AutocompleteForm.php
modules/contrib/select2/tests/modules/select2_form_test/src/Form/Select2OptgroupForm.php
modules/contrib/select2/tests/src/FunctionalJavascript/FieldWidget/Select2EntityReferenceWidgetTest.php
modules/contrib/select2/tests/src/FunctionalJavascript/FieldWidget/Select2WidgetTest.php
modules/contrib/select2/tests/src/FunctionalJavascript/Form/ElementTest.php
modules/contrib/select2/tests/src/FunctionalJavascript/Form/ViewsExposedFilterTest.php
modules/contrib/select2/tests/src/FunctionalJavascript/Select2JavascriptTestBase.php
modules/contrib/select2/tests/src/Kernel/Element/Select2Test.php
modules/contrib/select2/tests/src/Kernel/Select2KernelTestBase.php
modules/contrib/select2/tests/src/Kernel/Select2ValidOptionsTest.php
modules/contrib/select2/tests/src/Traits/Select2TestTrait.php
modules/contrib/select2/tests/src/Unit/Element/Select2Test.php

11 files with changes
=====================

1) modules/contrib/select2/tests/src/Traits/Select2TestTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\select2\Traits;

+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;

@@ @@
    * @param array $widget_settings
    *   A list of widget settings that will be added to the widget defaults.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function createField(string $name, string $entity_type, string $bundle, string $field_type, array $storage_settings = [], array $field_settings = [], string $widget_type = 'string', array $widget_settings = []): void {
     $field_storage = FieldStorageConfig::create([
@@ @@
     ];
     FieldConfig::create($field)->save();

-    /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository */
+    /** @var EntityDisplayRepositoryInterface $entity_display_repository */
     $entity_display_repository = \Drupal::service('entity_display.repository');
     $entity_display_repository->getFormDisplay($entity_type, $bundle, 'default')
       ->setComponent($name, [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/select2/tests/src/FunctionalJavascript/Select2JavascriptTestBase.php:74

    ---------- begin diff ----------
@@ @@
   /**
    * Drag element in document with defined offset position.
    *
-   * @param \Behat\Mink\Element\NodeElement $element
+   * @param NodeElement $element
    *   Element that will be dragged.
    * @param int $offsetX
    *   Vertical offset for element drag in pixels.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/select2/tests/src/FunctionalJavascript/FieldWidget/Select2EntityReferenceWidgetTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\select2\FunctionalJavascript\FieldWidget;

+use Drupal\Core\Field\FieldConfigInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Url;
 use Drupal\entity_test\Entity\EntityTestBundle;
@@ @@
     $this->assertNotEmpty($entity);
     $this->assertSame('test2', $entity->bundle());

-    /** @var \Drupal\Core\Field\FieldConfigInterface $field */
+    /** @var FieldConfigInterface $field */
     $field = FieldConfig::loadByName('node', 'test', 'select2');
     $field->setSetting('handler_settings', [
       'target_bundles' => ['test1' => 'test1', 'test2' => 'test2'],
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/select2/src/Select2Trait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\select2;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface;
 use Drupal\Component\Utility\Html;

 /**
@@ @@
    * @return array
    *   Key => entity ID, Value => entity label.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected static function getValidReferenceableEntities(array $ids, array $handler_settings) {
     $options = [];
-    /** @var \Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface $selection_handler */
+    /** @var SelectionInterface $selection_handler */
     $selection_handler = \Drupal::service('plugin.manager.entity_reference_selection')->getInstance($handler_settings);
     $valid_ids = $selection_handler->validateReferenceableEntities($ids);
     $entities = \Drupal::entityTypeManager()->getStorage($handler_settings['target_type'])->loadMultiple($valid_ids);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/select2/src/Plugin/Field/FieldWidget/Select2EntityReferenceWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\select2\Plugin\Field\FieldWidget;

+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface;
 use Drupal\Core\Entity\EntityReferenceSelection\SelectionWithAutocreateInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Set the entity type manager service.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
    */
   protected function setEntityTypeManager(EntityTypeManagerInterface $entityTypeManager): void {
@@ @@
    * @return array
    *   Selection settings.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   protected function getSelectionSettings(): array {
     $label_field = $this->entityTypeManager->getDefinition($this->getFieldSetting('target_type'))->getKey('label') ?: '_none';
@@ @@
       'target_type' => $element['#target_type'],
       'handler' => $element['#selection_handler'],
     ];
-    /** @var \Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface $handler */
+    /** @var SelectionInterface $handler */
     $handler = \Drupal::service('plugin.manager.entity_reference_selection')->getInstance($handler_settings);

     $options = empty($element['#options']) ? [] : static::getValidReferenceableEntities(array_keys(OptGroup::flattenOptions($element['#options'])), $handler_settings);
@@ @@
   /**
    * Returns the name of the bundle which will be used for autocreated entities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *
    * @uses \Drupal\Core\Field\Plugin\Field\FieldWidget\EntityReferenceAutocompleteWidget::getAutocreateBundle().
    *   This is copied from core.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/select2/src/EntityAutocompleteMatcher.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\select2;

+use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
+use Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
   /**
    * The entity reference selection handler plugin manager.
    *
-   * @var \Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManagerInterface
+   * @var SelectionPluginManagerInterface
    */
   protected $selectionManager;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructs a EntityAutocompleteMatcher object.
    *
-   * @param \Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManagerInterface $selection_manager
+   * @param SelectionPluginManagerInterface $selection_manager
    *   The entity reference selection handler plugin manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
    */
   public function __construct(SelectionPluginManagerInterface $selection_manager, ModuleHandlerInterface $module_handler) {
@@ @@
    *   An array of matched entity labels, in the format required by the AJAX
    *   autocomplete API (e.g. array('value' => $value, 'label' => $label)).
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException
+   * @throws AccessDeniedHttpException
    *   Thrown when the current user doesn't have access to the specified entity.
    *
    * @see \Drupal\system\Controller\EntityAutocompleteController
@@ @@
       'target_type' => $target_type,
       'handler' => $selection_handler,
     ];
-    /** @var \Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface $handler */
+    /** @var SelectionInterface $handler */
     $handler = $this->selectionManager->getInstance($options);

     if ($string) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/select2/src/Element/Select2.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\select2\Element;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Access\AccessManagerInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Entity\Element\EntityAutocomplete;
 use Drupal\Core\Form\FormState;
@@ @@
    *
    * @param array $element
    *   The render element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    * @param array $complete_form
    *   The form array.
@@ @@
    *
    * @param array $element
    *   The render element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array
    *   Key => entity ID, Value => entity label.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected static function getValidSelectedOptions(array $element, FormStateInterface $form_state): array {
     $handler_settings = $element['#selection_settings'] + [
@@ @@
       }
     }

-    /** @var \Drupal\Core\Access\AccessManagerInterface $access_manager */
+    /** @var AccessManagerInterface $access_manager */
     $access_manager = \Drupal::service('access_manager');
     $access = $access_manager->checkNamedRoute($element['#autocomplete_route_name'], $element['#autocomplete_route_parameters'], \Drupal::currentUser(), TRUE);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/select2/src/Controller/EntityAutocompleteController.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The autocomplete matcher for entity references.
    *
-   * @var \Drupal\select2\EntityAutocompleteMatcher
+   * @var EntityAutocompleteMatcher
    */
   protected $matcher;

@@ @@
   /**
    * Set the entity autocomplete matcher.
    *
-   * @param \Drupal\select2\EntityAutocompleteMatcher $matcher
+   * @param EntityAutocompleteMatcher $matcher
    *   The autocomplete matcher for entity references.
    */
   protected function setMatcher(EntityAutocompleteMatcher $matcher): void {
@@ @@
   /**
    * Autocomplete the label of an entity.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object that contains the typed tags.
    * @param string $target_type
    *   The ID of the target entity type.
@@ @@
    *   The hashed key of the key/value entry that holds the selection handler
    *   settings.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The matched entity labels as a JSON response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException
+   * @throws AccessDeniedHttpException
    *   Thrown if the selection settings key is not found in the key/value store
    *   or if it does not match the stored data.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/select2/modules/select2_publish/src/Element/StatusProperties.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\select2_publish\Element;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityPublishedInterface;
 use Drupal\Core\Security\TrustedCallbackInterface;

@@ @@
    * @return array
    *   The select2 render element.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public static function preRender(array $element): array {
     if ($element['#target_type']) {
@@ @@
       }

       $entity_storage = $entity_manager->getStorage($element['#target_type']);
-      /** @var \Drupal\Core\Entity\EntityPublishedInterface $entity */
+      /** @var EntityPublishedInterface $entity */
       foreach ($entity_storage->loadMultiple(array_keys($element['#options'])) as $id => $entity) {
         $element['#options_attributes'][$id]['data-published'] = $entity->isPublished() ? 'true' : 'false';
       }
@@ @@

       $default_status = 'true';
       if ($element['#autocreate']) {
-        /** @var \Drupal\Core\Entity\EntityPublishedInterface $entity */
+        /** @var EntityPublishedInterface $entity */
         $entity = $entity_storage->create([$entity_definition->getKey('bundle') => $element['#autocreate']['bundle']]);
         $default_status = $entity->isPublished() ? 'true' : 'false';
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/select2/modules/select2_publish/select2_publish.module:28

    ---------- begin diff ----------
@@ @@
   }

   $entities = $entity_manager->getStorage($options['target_type'])->loadMultiple(array_keys($matches));
-  /** @var \Drupal\Core\Entity\EntityPublishedInterface $entity */
+  /** @var EntityPublishedInterface $entity */
   foreach ($entities as $id => $entity) {
     $matches[$id]['published'] = $entity->isPublished();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


11) modules/contrib/select2/modules/select2_facets/src/Controller/FacetApiAutocompleteController.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The current path stack.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPathStack;

@@ @@
   /**
    * The current router.
    *
-   * @var \Drupal\Core\Routing\AccessAwareRouterInterface
+   * @var AccessAwareRouterInterface
    */
   protected $router;

@@ @@
   /**
    * The processor manager.
    *
-   * @var \Drupal\Core\PathProcessor\InboundPathProcessorInterface
+   * @var InboundPathProcessorInterface
    */
   protected $pathProcessor;

@@ @@
   /**
    * Set the request stack.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack object.
    */
   protected function setRequestStack(RequestStack $requestStack): void {
@@ @@
   /**
    * Set the current path stack.
    *
-   * @param \Drupal\Core\Path\CurrentPathStack $currentPathStack
+   * @param CurrentPathStack $currentPathStack
    *   Current path stack object.
    */
   protected function setCurrentPathStack(CurrentPathStack $currentPathStack): void {
@@ @@
   /**
    * Set the router.
    *
-   * @param \Drupal\Core\Routing\AccessAwareRouterInterface $router
+   * @param AccessAwareRouterInterface $router
    *   The router object.
    */
   protected function setRouter(AccessAwareRouterInterface $router): void {
@@ @@
   /**
    * Set the path processor service.
    *
-   * @param \Drupal\Core\PathProcessor\InboundPathProcessorInterface $pathProcessor
+   * @param InboundPathProcessorInterface $pathProcessor
    *   The path processor service object.
    */
   protected function setPathProcessor(InboundPathProcessorInterface $pathProcessor): void {
@@ @@
   /**
    * Autocomplete the label of an entity.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object that contains the typed tags.
    * @param string $facetsource_id
    *   The ID of the facet source.
@@ @@
    *   The hashed key of the key/value entry that holds the selection handler
    *   settings.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The matched entity labels as a JSON response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException
+   * @throws AccessDeniedHttpException
    *   Thrown if the selection settings key is not found in the key/value store
    *   or if it does not match the stored data.
    * @throws \Drupal\facets\Exception\InvalidProcessorException
@@ @@
    * @param string $path
    *   A path with facet arguments.
    *
-   * @return \Symfony\Component\HttpFoundation\Request
+   * @return Request
    *   A new request object.
    */
   protected function createRequestFromPath(string $path): Request {
@@ @@
   /**
    * Resets the request stack and adds one request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The one and only request.
    */
   protected function overwriteRequestStack(Request $request): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [ERROR] Could not process                                                      
         "modules/contrib/select2/src/Plugin/better_exposed_filters/filter/Select2
         .php" file, due to:                                                    
         "Analyze error: "Class                                                 
         Drupal\better_exposed_filters\Plugin\better_exposed_filters\filter\Filter
         WidgetBase not found.". Include your files in                          
         "$rectorConfig->autoloadPaths([...]);" or                              
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/select2/modules/select2_facets/src/Plugin/facets/widget/
         Select2Widget.php" file, due to:                                       
         "Analyze error: "Class Drupal\facets\Widget\WidgetPluginBase not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

