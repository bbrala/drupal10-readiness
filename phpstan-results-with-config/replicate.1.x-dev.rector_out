modules/contrib/replicate/replicate.api.php
modules/contrib/replicate/replicate.drush.inc
modules/contrib/replicate/replicate.module
modules/contrib/replicate/src/EventSubscriber/ReplicatePathFieldSubscriber.php
modules/contrib/replicate/src/Events/AfterSaveEvent.php
modules/contrib/replicate/src/Events/ReplicateAlterEvent.php
modules/contrib/replicate/src/Events/ReplicateEntityEvent.php
modules/contrib/replicate/src/Events/ReplicateEntityFieldEvent.php
modules/contrib/replicate/src/Events/ReplicateEventBase.php
modules/contrib/replicate/src/Events/ReplicatorEvents.php
modules/contrib/replicate/src/Replicator.php
modules/contrib/replicate/tests/src/Unit/ReplicatorTest.php

6 files with changes
====================

1) modules/contrib/replicate/tests/src/Unit/ReplicatorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\replicate\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
@@ @@
  */
 class ReplicatorTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Tests the cloneEntity method.
    *
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/replicate/src/Replicator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\replicate;

+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\TypedData\Exception\ReadOnlyException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Creates a new Replicator instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EventDispatcherInterface $event_dispatcher) {
@@ @@
    * @param int $entity_id
    *   The entity ID.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The cloned entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Thrown if the entity type doesn't exist.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown if the storage handler couldn't be loaded.
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   In case of failures, an exception is thrown.
    */
   public function replicateByEntityId($entity_type_id, $entity_id) {
@@ @@
   /**
    * Replicate a entity and save it.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The cloned entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Thrown if the entity type doesn't exist.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown if the storage handler couldn't be loaded.
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   In case of failures, an exception is thrown.
    */
   public function replicateEntity(EntityInterface $entity) {
@@ @@
    * @param int $entity_id
    *   The entity ID.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The cloned entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Thrown if the entity type doesn't exist.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown if the storage handler couldn't be loaded.
    */
   public function cloneByEntityId($entity_type_id, $entity_id) {
@@ @@
   /**
    * Clone a entity without saving.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The cloned entity.
    */
   public function cloneEntity(EntityInterface $entity) {
@@ @@
    * We can not create and return the target field here, because it needs to
    * know its parent entity, which can not be changed after creation.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $field
+   * @param FieldItemListInterface $field
    *   The field to clone.
-   * @param \Drupal\Core\Field\FieldItemListInterface $target_field
+   * @param FieldItemListInterface $target_field
    *   The field to clone into.
    *
    * @throws \InvalidArgumentException
    *   If the value input is inappropriate.
-   * @throws \Drupal\Core\TypedData\Exception\ReadOnlyException
+   * @throws ReadOnlyException
    *   If the data is read-only.
    */
   public function cloneEntityField(FieldItemListInterface $field, FieldItemListInterface $target_field) {
@@ @@
    *
    * A public API method so modules can e.g. clone a field partially.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $target_field
+   * @param FieldItemListInterface $target_field
    *   The cloned field.
    */
   public function postCloneEntityField(FieldItemListInterface $target_field) {
@@ @@
   /**
    * Fires events for each field of a fieldable entity.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $clone
+   * @param FieldableEntityInterface $clone
    *   The cloned fieldable entity.
    */
   protected function dispatchEventCloneEntityFields(FieldableEntityInterface $clone) {
@@ @@
   /**
    * Fires events for a single field of a fieldable entity.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $clone
+   * @param FieldableEntityInterface $clone
    *   The cloned fieldable entity.
    * @param $field_name
    *   The field name.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    */
   private function dispatchEventCloneEntityField(FieldableEntityInterface $clone, $field_name, FieldDefinitionInterface $field_definition) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/replicate/src/Events/ReplicateEventBase.php:7

    ---------- begin diff ----------
@@ @@
 abstract class ReplicateEventBase extends Event {

   /**
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;

@@ @@
   }

   /**
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    */
   public function getEntity() {
     return $this->entity;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/replicate/src/Events/ReplicateEntityFieldEvent.php:9

    ---------- begin diff ----------
@@ @@
   /**
    * The field item list.
    *
-   * @var \Drupal\Core\Field\FieldItemListInterface
+   * @var FieldItemListInterface
    */
   protected $fieldItemList;

@@ @@
   /**
    * Creates a new ReplicateEntityFieldEvent instance.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $field_item_list
+   * @param FieldItemListInterface $field_item_list
    *   The field item list.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    */
   public function __construct(FieldItemListInterface $field_item_list, EntityInterface $entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/replicate/src/Events/ReplicateAlterEvent.php:6

    ---------- begin diff ----------
@@ @@
 class ReplicateAlterEvent extends ReplicateEventBase {

   /**
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $original;

@@ @@
   }

   /**
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    */
   public function getOriginal() {
     return $this->original;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/replicate/replicate.drush.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\replicate\Replicator;
 /**
  * @file
  * Replicate entities via drush framework.
@@ @@
  */
 function drush_replicate_drush_entity_by_ids($entity_type = NULL, $ids = NULL) {
   $original_ids = explode(',', $ids);
-  /** @var \Drupal\replicate\Replicator $replicator */
+  /** @var Replicator $replicator */
   $replicator = \Drupal::service('replicate.replicator');

   foreach ($original_ids as $original_id) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 6 files have been changed by Rector                                       

