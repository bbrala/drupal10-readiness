modules/contrib/ts_dx/src/Commands/DxCommands.php
modules/contrib/ts_dx/src/Controller/ToolbarRedirectController.php
modules/contrib/ts_dx/src/Generators/PluginManagerGenerator.php
modules/contrib/ts_dx/src/Services/Context/ContextTools.php
modules/contrib/ts_dx/src/Services/MiscTools.php
modules/contrib/ts_dx/src/Services/Theme/Base/AbstractTwigExtension.php
modules/contrib/ts_dx/src/Services/Theme/ThemeTools.php
modules/contrib/ts_dx/src/Services/Theme/TwigExtension.php
modules/contrib/ts_dx/src/Services/Tree/MenuTools.php

7 files with changes
====================

1) modules/contrib/ts_dx/src/Services/Tree/MenuTools.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The menu link tree service.
    *
-   * @var \Drupal\Core\Menu\MenuLinkTreeInterface
+   * @var MenuLinkTreeInterface
    */
   protected $menuLinkTree;

@@ @@
   /**
    * Constructs a MenuTools object.
    *
-   * @param \Drupal\Core\Menu\MenuLinkTreeInterface $menu_link_tree
+   * @param MenuLinkTreeInterface $menu_link_tree
    *   The menu link tree service.
    */
   public function __construct(MenuLinkTreeInterface $menu_link_tree) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/ts_dx/src/Services/Theme/TwigExtension.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * Theme Manager.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;

@@ @@
   /**
    * TwigExtension constructor.
    *
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $themeManager
+   * @param ThemeManagerInterface $themeManager
    *   Le theme manager.
    */
   public function __construct(ThemeManagerInterface $themeManager) {
@@ @@
    */
   public function getCurrentModulePath($path, $theme = NULL) {
     if ($theme) {
-      $asset_dir = base_path() . drupal_get_path('theme', $theme);
+      $asset_dir = base_path() . \Drupal::service('extension.list.theme')->getPath($theme);
     }
     else {
       $asset_dir = $this->themeManager->getActiveTheme()->getPath();
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/ts_dx/src/Services/Theme/Base/AbstractTwigExtension.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ts_dx\Services\Theme\Base;

+use Twig\TwigFunction;
+use Twig\TwigFilter;
 /**
  * Class AbstractTwigExtension.
  *
@@ @@
   /**
    * Retourne la liste des fonctions nons préfixées.
    *
-   * @return \Twig\TwigFunction[]
+   * @return TwigFunction[]
    *   La liste de fonctions.
    */
   abstract protected function getAllFunctions(): array;
@@ @@
   /**
    * REtourne la liste dse filtres nons préfixés.
    *
-   * @return \Twig\TwigFilter[]
+   * @return TwigFilter[]
    *   La lsite des filtres.
    */
   abstract protected function getAllFilters(): array;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/ts_dx/src/Services/MiscTools.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ts_dx\Services;

+use Drupal\Core\Field\EntityReferenceFieldItemList;
 use Drupal\Core\Field\EntityReferenceFieldItemListInterface;

 /**
@@ @@
   /**
    * Return the list of attributes of entity reference item list.
    *
-   * @param \Drupal\Core\Field\EntityReferenceFieldItemList $field
+   * @param EntityReferenceFieldItemList $field
    *   The field.
    * @param string $attribute
    *   The attributes.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/ts_dx/src/Services/Context/ContextTools.php:65

    ---------- begin diff ----------
@@ @@
   /**
    * Return the entity of the current page.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The current context entity.
    */
   public function getCurrentContextEntity() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/ts_dx/src/Controller/ToolbarRedirectController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ts_dx\Controller;

+use Symfony\Component\HttpFoundation\Request;
+use Symfony\Component\HttpFoundation\RedirectResponse;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Current Request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $currentRequest;

@@ @@
   /**
    * ToolbarRedirectController constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entityType manager.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The requestStack.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, RequestStack $requestStack) {
@@ @@
   /**
    * Redirect to node edit form selected by the query params.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The redirect response.
    */
   public function nodeEditFormRedirect() {
@@ @@
   /**
    * Redirect to term edit form selected by the query params.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The redirect response.
    */
   public function termEditFormRedirect() {
@@ @@
    * @param string $entity_type
    *   Le type d'entité.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The redirect response.
    */
   public function entityEditFormRedirect($entity_type) {
@@ @@
    * @param string $entity_type
    *   LE type d'entité.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Les entités.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getEntities(string $entity_type) {
     // Permet de définir une propriété à un champ complexe avec séparateur ':'.
@@ @@
    * @param array $queryElements
    *   La query.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Les entités.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getEntitiesByEntityQuery(string $entity_type, array $queryElements) {
     $query = $this->entityTypeManager->getStorage($entity_type)->getQuery();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/ts_dx/src/Commands/DxCommands.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ts_dx\Commands;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drush\Commands\DrushCommands;
@@ @@
   /**
    * EntityType Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * DxCommands constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity Type Manager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
@@ @@
    * @param array $entitiesIds
    *   THe entity ids.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function deleteAllEntities(string $entityTypeId, array $entitiesIds): void {
     $entityType = $this->getStorage($entityTypeId);
@@ @@
    * @param string $entityTypeId
    *   The entity type id.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   The entity storage.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getStorage($entityTypeId) {
     if (!array_key_exists($entityTypeId, $this->storages)) {
@@ @@
    * @param string $entityTypeId
    *   The entity type id.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface
+   * @return EntityTypeInterface
    *   The entity type.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getDefinition($entityTypeId) {
     if (!array_key_exists($entityTypeId, $this->definitions)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [ERROR] Could not process                                                      
         "modules/contrib/ts_dx/src/Generators/PluginManagerGenerator.php" file,
         due to:                                                                
         "Analyze error: "Class DrupalCodeGenerator\Command\BaseGenerator not   
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

