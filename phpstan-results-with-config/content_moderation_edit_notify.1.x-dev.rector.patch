diff --git a/content_moderation_edit_notify.module b/content_moderation_edit_notify.module
index 44fe4a1..e47328d 100755
--- a/content_moderation_edit_notify.module
+++ b/content_moderation_edit_notify.module
@@ -35,7 +35,7 @@ function content_moderation_edit_notify_help($route_name, RouteMatchInterface $r
 function content_moderation_edit_notify_form_node_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
   // Alter only node edit forms.
   if (strpos($form_id, '_edit_form') !== FALSE) {
-    /** @var \Drupal\Core\Entity\EntityForm $form_object */
+    /** @var EntityForm $form_object */
     $form_object = $form_state->getFormObject();
     if ($form_object instanceof EntityForm) {
       // Get and load our node to work with.
diff --git a/content_moderation_edit_notify.tokens.inc b/content_moderation_edit_notify.tokens.inc
index ff4a579..1bb32a3 100755
--- a/content_moderation_edit_notify.tokens.inc
+++ b/content_moderation_edit_notify.tokens.inc
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\node\NodeInterface;
 /**
  * @file
  * Token integration for the Content moderation edit notify module.
@@ -48,7 +49,7 @@ function content_moderation_edit_notify_tokens($type, $tokens, array $data, arra
   $replacements = [];
 
   if ($type == 'node' && !empty($data['node'])) {
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = $data['node'];
     $node_storage = \Drupal::service('entity_type.manager')->getStorage('node');
     $latest_revision = $node_storage->loadRevision($node_storage->getLatestRevisionId($node->id()));
diff --git a/src/Controller/ContentModerationNotifyController.php b/src/Controller/ContentModerationNotifyController.php
index e769c7d..2806fee 100755
--- a/src/Controller/ContentModerationNotifyController.php
+++ b/src/Controller/ContentModerationNotifyController.php
@@ -20,32 +20,32 @@ class ContentModerationNotifyController extends ControllerBase {
   /**
    * The moderation information service.
    *
-   * @var \Drupal\content_moderation\ModerationInformationInterface
+   * @var ModerationInformationInterface
    */
   protected $moderationInfo;
 
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * Constructs a ContentModerationNotify object.
    *
-   * @param \Drupal\content_moderation\ModerationInformationInterface $moderation_information
+   * @param ModerationInformationInterface $moderation_information
    *   The moderation information service.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   final public function __construct(ModerationInformationInterface $moderation_information, Token $token, RendererInterface $renderer) {
@@ -68,14 +68,14 @@ class ContentModerationNotifyController extends ControllerBase {
   /**
    * Check if a new revision exist for a current node.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request of the page.
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The node that need to be checked.
    * @param int $vid
    *   Current vid to check for.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    */
   public function checkNewRevision(Request $request, NodeInterface $node, $vid) {
@@ -84,7 +84,7 @@ class ContentModerationNotifyController extends ControllerBase {
     // Get last revision for this node.
     $node_storage = $this->entityTypeManager()->getStorage('node');
     $latest_revision_vid = $node_storage->getLatestRevisionId($node->id());
-    /** @var \Drupal\node\NodeInterface $latest_revision */
+    /** @var NodeInterface $latest_revision */
     $latest_revision = $node_storage->loadRevision($latest_revision_vid);
 
     // Check if revision translation is affected. If not, no message necessary.
diff --git a/src/Hook/NodeFormAlter.php b/src/Hook/NodeFormAlter.php
index 260b8d0..2b1b154 100644
--- a/src/Hook/NodeFormAlter.php
+++ b/src/Hook/NodeFormAlter.php
@@ -16,21 +16,21 @@ class NodeFormAlter {
   /**
    * The moderation information service.
    *
-   * @var \Drupal\content_moderation\ModerationInformationInterface
+   * @var ModerationInformationInterface
    */
   protected $moderationInfo;
 
   /**
    * The current user service.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
@@ -44,13 +44,13 @@ class NodeFormAlter {
   /**
    * Constructs a new instance.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\content_moderation\ModerationInformationInterface $moderation_info
+   * @param ModerationInformationInterface $moderation_info
    *   The moderation information service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(ConfigFactoryInterface $config_factory, LoggerInterface $logger, ModerationInformationInterface $moderation_info, AccountInterface $current_user) {
@@ -66,7 +66,7 @@ class NodeFormAlter {
    *
    * @param array $form
    *   Nested array of form elements that comprise the form.
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The node related by this form.
    */
   public function alter(array &$form, NodeInterface $node) {
diff --git a/tests/src/Functional/ContentModerationNotifyConfigTest.php b/tests/src/Functional/ContentModerationNotifyConfigTest.php
index 5e2b4e9..5af2674 100755
--- a/tests/src/Functional/ContentModerationNotifyConfigTest.php
+++ b/tests/src/Functional/ContentModerationNotifyConfigTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\content_moderation_edit_notify\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\filter\Entity\FilterFormat;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -32,14 +33,14 @@ class ContentModerationNotifyConfigTest extends BrowserTestBase {
   /**
    * An user with admin permissions.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Set up the filter formats used by this test.
@@ -97,7 +98,7 @@ class ContentModerationNotifyConfigTest extends BrowserTestBase {
     // Test form submission.
     $txt_unpublished = 'Test unpublished \nTest unpublished';
     $txt_published = 'Test published \nTest published';
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'interval' => '20',
       'edit-message-unpublished-value' => $txt_unpublished,
       'edit-message-published-value' => $txt_published,
