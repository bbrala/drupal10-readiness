diff --git a/composer.json b/composer.json
index 750d129..44efe5f 100644
--- a/composer.json
+++ b/composer.json
@@ -17,7 +17,7 @@
   "license": "GPL-2.0-or-later",
   "minimum-stability": "dev",
   "require": {
-    "drupal/core": "^8.9 || ^9",
-    "drupal/group": "^1.3"
+    "drupal/group": "^1.3",
+    "drupal/core": "^8.9 || ^9 || ^10"
   }
 }
diff --git a/src/Access/InheritedGroupPermissionCalculator.php b/src/Access/InheritedGroupPermissionCalculator.php
index 764a2a8..1d88476 100644
--- a/src/Access/InheritedGroupPermissionCalculator.php
+++ b/src/Access/InheritedGroupPermissionCalculator.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\subgroup\Access;
 
+use Drupal\group\Entity\GroupTypeInterface;
+use Drupal\subgroup\Entity\SubgroupHandlerInterface;
+use Drupal\subgroup\Entity\RoleInheritanceStorageInterface;
+use Drupal\subgroup\Entity\RoleInheritanceInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\group\Access\CalculatedGroupPermissionsItem;
@@ -26,23 +30,23 @@ class InheritedGroupPermissionCalculator extends GroupPermissionCalculatorBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The membership loader service.
    *
-   * @var \Drupal\group\GroupMembershipLoaderInterface
+   * @var GroupMembershipLoaderInterface
    */
   protected $membershipLoader;
 
   /**
    * Constructs a InheritedGroupPermissionCalculator object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\group\GroupMembershipLoaderInterface $membership_loader
+   * @param GroupMembershipLoaderInterface $membership_loader
    *   The group membership loader service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, GroupMembershipLoaderInterface $membership_loader) {
@@ -60,16 +64,16 @@ class InheritedGroupPermissionCalculator extends GroupPermissionCalculatorBase {
     // added to or removed from a group.
     $calculated_permissions->addCacheTags(['group_content_list:plugin:group_membership:entity:' . $account->id()]);
 
-    /** @var \Drupal\group\Entity\GroupTypeInterface[] $group_types */
+    /** @var GroupTypeInterface[] $group_types */
     $group_types = $this->entityTypeManager->getStorage('group_type')->loadMultiple();
 
-    /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $group_handler */
+    /** @var SubgroupHandlerInterface $group_handler */
     $group_handler = $this->entityTypeManager->getHandler('group', 'subgroup');
 
-    /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $group_type_handler */
+    /** @var SubgroupHandlerInterface $group_type_handler */
     $group_type_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
 
-    /** @var \Drupal\subgroup\Entity\RoleInheritanceStorageInterface $inheritance_storage */
+    /** @var RoleInheritanceStorageInterface $inheritance_storage */
     $inheritance_storage = $this->entityTypeManager->getStorage('subgroup_role_inheritance');
 
     // Performance boost: Keep track of which tree a group type belongs to.
@@ -130,7 +134,7 @@ class InheritedGroupPermissionCalculator extends GroupPermissionCalculatorBase {
       //   group and are of the target role's group type.
       $group_permission_sets = $group_ids = [];
 
-      /** @var \Drupal\subgroup\Entity\RoleInheritanceInterface $inheritance */
+      /** @var RoleInheritanceInterface $inheritance */
       foreach ($inheritances as $inheritance) {
         // Inheritance entities cannot be updated, so no need to add them as
         // dependencies because adding or removing them already triggers the
diff --git a/src/Entity/GroupSubgroupHandler.php b/src/Entity/GroupSubgroupHandler.php
index 4dbc81d..2c32569 100644
--- a/src/Entity/GroupSubgroupHandler.php
+++ b/src/Entity/GroupSubgroupHandler.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\subgroup\Entity;
 
+use Drupal\Component\Datetime\TimeInterface;
+use Drupal\group\Entity\GroupInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\subgroup\InvalidParentException;
@@ -16,14 +18,14 @@ class GroupSubgroupHandler extends SubgroupHandlerBase {
   /**
    * The GroupType subgroup handler.
    *
-   * @var \Drupal\subgroup\Entity\SubgroupHandlerInterface
+   * @var SubgroupHandlerInterface
    */
   protected $groupTypeHandler;
 
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
@@ -42,7 +44,7 @@ class GroupSubgroupHandler extends SubgroupHandlerBase {
    * {@inheritdoc}
    */
   protected function writeLeafData(EntityInterface $entity, $depth, $left, $right, $tree) {
-    /** @var \Drupal\group\Entity\GroupInterface $entity */
+    /** @var GroupInterface $entity */
     $entity
       ->set(SUBGROUP_DEPTH_FIELD, $depth)
       ->set(SUBGROUP_LEFT_FIELD, $left)
@@ -55,7 +57,7 @@ class GroupSubgroupHandler extends SubgroupHandlerBase {
    * {@inheritdoc}
    */
   protected function clearLeafData(EntityInterface $entity, $save) {
-    /** @var \Drupal\group\Entity\GroupInterface $entity */
+    /** @var GroupInterface $entity */
     $entity
       ->set(SUBGROUP_DEPTH_FIELD, NULL)
       ->set(SUBGROUP_LEFT_FIELD, NULL)
@@ -71,7 +73,7 @@ class GroupSubgroupHandler extends SubgroupHandlerBase {
    * {@inheritdoc}
    */
   protected function doInitTree(EntityInterface $entity) {
-    /** @var \Drupal\group\Entity\GroupInterface $entity */
+    /** @var GroupInterface $entity */
     $group_type = $entity->getGroupType();
 
     if (!$this->groupTypeHandler->isLeaf($group_type)) {
@@ -92,7 +94,7 @@ class GroupSubgroupHandler extends SubgroupHandlerBase {
     // leafs as you should only be able to create subgroups, not add existing
     // groups as subgroups. 60 seconds seems plenty for a request that created
     // the group to get to this point of adding it as a subgroup.
-    /** @var \Drupal\group\Entity\GroupInterface $child */
+    /** @var GroupInterface $child */
     $leaf_lifetime = $this->time->getCurrentTime() - $child->getCreatedTime();
     assert($leaf_lifetime <= 60);
 
diff --git a/src/Entity/GroupTypeSubgroupHandler.php b/src/Entity/GroupTypeSubgroupHandler.php
index eedae22..b0ad665 100644
--- a/src/Entity/GroupTypeSubgroupHandler.php
+++ b/src/Entity/GroupTypeSubgroupHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\subgroup\Entity;
 
+use Drupal\Core\Entity\ContentEntityStorageInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\group\Entity\GroupTypeInterface;
@@ -16,7 +17,7 @@ class GroupTypeSubgroupHandler extends SubgroupHandlerBase {
   /**
    * The Group storage.
    *
-   * @var \Drupal\Core\Entity\ContentEntityStorageInterface
+   * @var ContentEntityStorageInterface
    */
   protected $groupStorage;
 
@@ -33,7 +34,7 @@ class GroupTypeSubgroupHandler extends SubgroupHandlerBase {
   /**
    * Checks whether there are groups of a given group type.
    *
-   * @param \Drupal\group\Entity\GroupTypeInterface $group_type
+   * @param GroupTypeInterface $group_type
    *   The group type to run the check for.
    *
    * @return bool
@@ -52,7 +53,7 @@ class GroupTypeSubgroupHandler extends SubgroupHandlerBase {
    * {@inheritdoc}
    */
   protected function writeLeafData(EntityInterface $entity, $depth, $left, $right, $tree) {
-    /** @var \Drupal\group\Entity\GroupTypeInterface $entity */
+    /** @var GroupTypeInterface $entity */
     $entity
       ->setThirdPartySetting('subgroup', SUBGROUP_DEPTH_SETTING, $depth)
       ->setThirdPartySetting('subgroup', SUBGROUP_LEFT_SETTING, $left)
@@ -65,7 +66,7 @@ class GroupTypeSubgroupHandler extends SubgroupHandlerBase {
    * {@inheritdoc}
    */
   protected function clearLeafData(EntityInterface $entity, $save) {
-    /** @var \Drupal\group\Entity\GroupTypeInterface $entity */
+    /** @var GroupTypeInterface $entity */
     $entity
       ->unsetThirdPartySetting('subgroup', SUBGROUP_DEPTH_SETTING)
       ->unsetThirdPartySetting('subgroup', SUBGROUP_LEFT_SETTING)
@@ -81,7 +82,7 @@ class GroupTypeSubgroupHandler extends SubgroupHandlerBase {
    * {@inheritdoc}
    */
   protected function doAddLeaf(EntityInterface $parent, EntityInterface $child) {
-    /** @var \Drupal\group\Entity\GroupTypeInterface $child */
+    /** @var GroupTypeInterface $child */
     if ($this->groupTypeHasGroups($child)) {
       throw new InvalidLeafException('Cannot use a group type that already has groups as a leaf.');
     }
@@ -93,7 +94,7 @@ class GroupTypeSubgroupHandler extends SubgroupHandlerBase {
    * {@inheritdoc}
    */
   protected function doRemoveLeaf(EntityInterface $entity, $save) {
-    /** @var \Drupal\group\Entity\GroupTypeInterface $entity */
+    /** @var GroupTypeInterface $entity */
     if (!$this->isRoot($entity) && $this->groupTypeHasGroups($entity)) {
       throw new InvalidLeafException('Cannot remove leaf status from a group type that still has groups.');
     }
@@ -192,7 +193,7 @@ class GroupTypeSubgroupHandler extends SubgroupHandlerBase {
    * @param string[] $entity_ids
    *   Group type IDs to load and sort by left property.
    *
-   * @return \Drupal\group\Entity\GroupTypeInterface[]
+   * @return GroupTypeInterface[]
    *   A list of sorted group types.
    *
    * @todo Remove this along with ::getAncestors(), ::getChildren() and
diff --git a/src/Entity/RoleInheritance.php b/src/Entity/RoleInheritance.php
index aae8fe8..5854aa0 100644
--- a/src/Entity/RoleInheritance.php
+++ b/src/Entity/RoleInheritance.php
@@ -126,7 +126,7 @@ class RoleInheritance extends ConfigEntityBase implements RoleInheritanceInterfa
    * {@inheritdoc}
    */
   public function preSave(EntityStorageInterface $storage) {
-    /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $handler */
+    /** @var SubgroupHandlerInterface $handler */
     $handler = $this->entityTypeManager()->getHandler('group_type', 'subgroup');
     $this->tree = $handler->wrapLeaf($this->getSource()->getGroupType())->getTree();
     parent::preSave($storage);
diff --git a/src/Entity/RoleInheritanceInterface.php b/src/Entity/RoleInheritanceInterface.php
index f815d09..ba2e17d 100644
--- a/src/Entity/RoleInheritanceInterface.php
+++ b/src/Entity/RoleInheritanceInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\subgroup\Entity;
 
+use Drupal\group\Entity\GroupRoleInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 
 /**
@@ -12,7 +13,7 @@ interface RoleInheritanceInterface extends ConfigEntityInterface {
   /**
    * Returns the source group role.
    *
-   * @return \Drupal\group\Entity\GroupRoleInterface
+   * @return GroupRoleInterface
    *   The source group role.
    */
   public function getSource();
@@ -28,7 +29,7 @@ interface RoleInheritanceInterface extends ConfigEntityInterface {
   /**
    * Returns the target group role.
    *
-   * @return \Drupal\group\Entity\GroupRoleInterface
+   * @return GroupRoleInterface
    *   The target group role.
    */
   public function getTarget();
diff --git a/src/Entity/RoleInheritanceStorage.php b/src/Entity/RoleInheritanceStorage.php
index 39995c0..a1d0350 100644
--- a/src/Entity/RoleInheritanceStorage.php
+++ b/src/Entity/RoleInheritanceStorage.php
@@ -19,7 +19,7 @@ class RoleInheritanceStorage extends ConfigEntityStorage implements RoleInherita
   /**
    * The subgroup handler for group types.
    *
-   * @var \Drupal\subgroup\Entity\SubgroupHandlerInterface
+   * @var SubgroupHandlerInterface
    */
   protected $subgroupHandler;
 
@@ -41,7 +41,7 @@ class RoleInheritanceStorage extends ConfigEntityStorage implements RoleInherita
       throw new EntityStorageException('Role inheritance entities may not be updated after creation.');
     }
 
-    /** @var \Drupal\subgroup\Entity\RoleInheritanceInterface $entity */
+    /** @var RoleInheritanceInterface $entity */
     if (empty($entity->getSourceId())) {
       throw new EntityMalformedException('Source property is required for a RoleInheritance entity.');
     }
@@ -91,7 +91,7 @@ class RoleInheritanceStorage extends ConfigEntityStorage implements RoleInherita
     $to_delete = [];
     $group_type_id = $group_type->id();
     foreach ($this->loadByProperties(['tree' => $original_tree]) as $role_inheritance) {
-      /** @var \Drupal\subgroup\Entity\RoleInheritanceInterface $role_inheritance */
+      /** @var RoleInheritanceInterface $role_inheritance */
       $source_group_type_id = $role_inheritance->getSource()->getGroupTypeId();
       $target_group_type_id = $role_inheritance->getTarget()->getGroupTypeId();
 
diff --git a/src/Entity/RoleInheritanceStorageInterface.php b/src/Entity/RoleInheritanceStorageInterface.php
index b918499..1eb9572 100644
--- a/src/Entity/RoleInheritanceStorageInterface.php
+++ b/src/Entity/RoleInheritanceStorageInterface.php
@@ -13,7 +13,7 @@ interface RoleInheritanceStorageInterface extends ConfigEntityStorageInterface {
   /**
    * Deletes all role inheritance entities for a given group type.
    *
-   * @param \Drupal\group\Entity\GroupTypeInterface $group_type
+   * @param GroupTypeInterface $group_type
    *   The group type to delete the entities for.
    * @param string $tree
    *   The ID of the tree the group type belonged to. This must be provided
diff --git a/src/Entity/SubgroupHandlerBase.php b/src/Entity/SubgroupHandlerBase.php
index 87fcbe2..d403a95 100644
--- a/src/Entity/SubgroupHandlerBase.php
+++ b/src/Entity/SubgroupHandlerBase.php
@@ -20,14 +20,14 @@ abstract class SubgroupHandlerBase extends EntityHandlerBase implements Subgroup
   /**
    * The entity storage handler.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;
 
   /**
    * Information about the entity type.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface
+   * @var EntityTypeInterface
    */
   protected $entityType;
 
@@ -41,9 +41,9 @@ abstract class SubgroupHandlerBase extends EntityHandlerBase implements Subgroup
   /**
    * Constructs a new SubgroupHandlerBase object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage handler.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage) {
@@ -65,7 +65,7 @@ abstract class SubgroupHandlerBase extends EntityHandlerBase implements Subgroup
   /**
    * Checks whether an entity is of the entity type this handler represents.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to check the class for.
    *
    * @throws \InvalidArgumentException
@@ -141,7 +141,7 @@ abstract class SubgroupHandlerBase extends EntityHandlerBase implements Subgroup
   /**
    * Writes the provided leaf data onto the entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to write the data onto.
    * @param int $depth
    *   The depth.
@@ -157,7 +157,7 @@ abstract class SubgroupHandlerBase extends EntityHandlerBase implements Subgroup
   /**
    * Clears the leaf data from the entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to clear the data from.
    * @param bool $save
    *   Whether the entity should be saved.
@@ -186,7 +186,7 @@ abstract class SubgroupHandlerBase extends EntityHandlerBase implements Subgroup
    * This is called after a few sanity checks and can be easily overwritten by
    * the extending classes.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to use as the root.
    */
   protected function doInitTree(EntityInterface $entity) {
@@ -219,9 +219,9 @@ abstract class SubgroupHandlerBase extends EntityHandlerBase implements Subgroup
    * This is called after a few sanity checks and can be easily overwritten by
    * the extending classes.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $parent
+   * @param EntityInterface $parent
    *   The entity to use as the parent.
-   * @param \Drupal\Core\Entity\EntityInterface $child
+   * @param EntityInterface $child
    *   The entity to use as the new leaf.
    */
   protected function doAddLeaf(EntityInterface $parent, EntityInterface $child) {
@@ -301,7 +301,7 @@ abstract class SubgroupHandlerBase extends EntityHandlerBase implements Subgroup
    * This is called after a few sanity checks and can be easily overwritten by
    * the extending classes.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to remove from the tree.
    * @param bool $save
    *   Whether the entity should be saved.
diff --git a/src/Entity/SubgroupHandlerInterface.php b/src/Entity/SubgroupHandlerInterface.php
index ec4299f..c6ab8fa 100644
--- a/src/Entity/SubgroupHandlerInterface.php
+++ b/src/Entity/SubgroupHandlerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\subgroup\Entity;
 
+use Drupal\subgroup\LeafInterface;
 use Drupal\Core\Entity\EntityHandlerInterface;
 use Drupal\Core\Entity\EntityInterface;
 
@@ -15,10 +16,10 @@ interface SubgroupHandlerInterface extends EntityHandlerInterface {
   /**
    * Wraps an entity in a LeafInterface.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to wrap.
    *
-   * @return \Drupal\subgroup\LeafInterface
+   * @return LeafInterface
    *   The wrapped entity.
    */
   public function wrapLeaf(EntityInterface $entity);
@@ -26,7 +27,7 @@ interface SubgroupHandlerInterface extends EntityHandlerInterface {
   /**
    * Checks whether an entity is part of a tree.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to check.
    *
    * @return bool
@@ -37,7 +38,7 @@ interface SubgroupHandlerInterface extends EntityHandlerInterface {
   /**
    * Checks whether an entity is the root of a tree.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to check.
    *
    * @return bool
@@ -48,9 +49,9 @@ interface SubgroupHandlerInterface extends EntityHandlerInterface {
   /**
    * Checks whether one entity is an ancestor or descendant of another.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $a
+   * @param EntityInterface $a
    *   The first entity to check.
-   * @param \Drupal\Core\Entity\EntityInterface $b
+   * @param EntityInterface $b
    *   The second entity to check.
    *
    * @return bool
@@ -61,7 +62,7 @@ interface SubgroupHandlerInterface extends EntityHandlerInterface {
   /**
    * Initializes a tree with the provided entity as the root.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to use as the root.
    */
   public function initTree(EntityInterface $entity);
@@ -69,9 +70,9 @@ interface SubgroupHandlerInterface extends EntityHandlerInterface {
   /**
    * Adds a leaf to a tree.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $parent
+   * @param EntityInterface $parent
    *   The entity to use as the parent.
-   * @param \Drupal\Core\Entity\EntityInterface $child
+   * @param EntityInterface $child
    *   The entity to use as the new leaf.
    */
   public function addLeaf(EntityInterface $parent, EntityInterface $child);
@@ -79,7 +80,7 @@ interface SubgroupHandlerInterface extends EntityHandlerInterface {
   /**
    * Removes a leaf from a tree.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to remove from the tree.
    * @param bool $save
    *   (optional) Whether the entity should be saved. Defaults to TRUE. Set this
@@ -91,10 +92,10 @@ interface SubgroupHandlerInterface extends EntityHandlerInterface {
   /**
    * Gets the parent of an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to retrieve the parent for.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The entity that represents the leaf's parent in the tree.
    */
   public function getParent(EntityInterface $entity);
@@ -102,10 +103,10 @@ interface SubgroupHandlerInterface extends EntityHandlerInterface {
   /**
    * Gets the ancestors of an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to retrieve the ancestors for.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The entities that represent the leaf's ancestors in the tree.
    */
   public function getAncestors(EntityInterface $entity);
@@ -113,10 +114,10 @@ interface SubgroupHandlerInterface extends EntityHandlerInterface {
   /**
    * Gets the children of an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to retrieve the children for.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The entities that represent the leaf's children in the tree.
    */
   public function getChildren(EntityInterface $entity);
@@ -124,10 +125,10 @@ interface SubgroupHandlerInterface extends EntityHandlerInterface {
   /**
    * Gets the descendants of an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to retrieve the descendants for.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The entities that represent the leaf's descendants in the tree.
    */
   public function getDescendants(EntityInterface $entity);
@@ -139,7 +140,7 @@ interface SubgroupHandlerInterface extends EntityHandlerInterface {
    * little useful information that can be derived from simply knowing the
    * number of descendants.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to count the descendants of.
    *
    * @return int
@@ -159,10 +160,10 @@ interface SubgroupHandlerInterface extends EntityHandlerInterface {
    * safety checks throughout the codebase that forbid the removal or other
    * manipulation of leaves that have descendants.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to retrieve the children for.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The entities that represent the leaf's children in the tree.
    */
   public function hasDescendants(EntityInterface $entity);
@@ -170,7 +171,7 @@ interface SubgroupHandlerInterface extends EntityHandlerInterface {
   /**
    * Gets the tree cache tags for an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to get the tree cache tags for.
    *
    * @return string[]
diff --git a/src/Event/GroupLeafEvent.php b/src/Event/GroupLeafEvent.php
index 9ba7506..7cea16b 100644
--- a/src/Event/GroupLeafEvent.php
+++ b/src/Event/GroupLeafEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\subgroup\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\group\Entity\GroupInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Defines the event for group leaf status changes.
@@ -15,14 +15,14 @@ class GroupLeafEvent extends Event {
   /**
    * The group that was manipulated.
    *
-   * @var \Drupal\group\Entity\GroupInterface
+   * @var GroupInterface
    */
   protected $group;
 
   /**
    * Constructs a new GroupLeafEvent object.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   The group that was manipulated. Must have the original property set and
    *   pointing to the group before it was manipulated.
    */
@@ -36,7 +36,7 @@ class GroupLeafEvent extends Event {
   /**
    * Gets the group that was manipulated.
    *
-   * @return \Drupal\group\Entity\GroupInterface
+   * @return GroupInterface
    *   The group that was manipulated.
    */
   public function getGroup() {
diff --git a/src/Event/GroupTypeLeafEvent.php b/src/Event/GroupTypeLeafEvent.php
index a832a06..056987c 100644
--- a/src/Event/GroupTypeLeafEvent.php
+++ b/src/Event/GroupTypeLeafEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\subgroup\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\group\Entity\GroupTypeInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Defines the event for group type leaf status changes.
@@ -15,14 +15,14 @@ class GroupTypeLeafEvent extends Event {
   /**
    * The group type that was manipulated.
    *
-   * @var \Drupal\group\Entity\GroupTypeInterface
+   * @var GroupTypeInterface
    */
   protected $groupType;
 
   /**
    * Constructs a new GroupTypeLeafEvent object.
    *
-   * @param \Drupal\group\Entity\GroupTypeInterface $group_type
+   * @param GroupTypeInterface $group_type
    *   The group type that was manipulated. Must have the original property set
    *   and pointing to the group type before it was manipulated.
    */
@@ -36,7 +36,7 @@ class GroupTypeLeafEvent extends Event {
   /**
    * Gets the group type that was manipulated.
    *
-   * @return \Drupal\group\Entity\GroupTypeInterface
+   * @return GroupTypeInterface
    *   The group type that was manipulated.
    */
   public function getGroupType() {
diff --git a/src/EventSubscriber/GroupTypeLeafSubscriber.php b/src/EventSubscriber/GroupTypeLeafSubscriber.php
index 2b95628..18dde44 100644
--- a/src/EventSubscriber/GroupTypeLeafSubscriber.php
+++ b/src/EventSubscriber/GroupTypeLeafSubscriber.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\subgroup\EventSubscriber;
 
+use Drupal\subgroup\Entity\SubgroupHandlerInterface;
+use Drupal\group\Entity\GroupTypeInterface;
+use Drupal\group\Entity\Storage\GroupContentTypeStorageInterface;
+use Drupal\subgroup\Entity\RoleInheritanceStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\group\Plugin\GroupContentEnablerManagerInterface;
 use Drupal\subgroup\Event\GroupTypeLeafEvent;
@@ -17,39 +21,39 @@ class GroupTypeLeafSubscriber implements EventSubscriberInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The subgroup handler for group types.
    *
-   * @var \Drupal\subgroup\Entity\SubgroupHandlerInterface
+   * @var SubgroupHandlerInterface
    */
   protected $subgroupHandler;
 
   /**
    * The group content enabler plugin manager.
    *
-   * @var \Drupal\group\Plugin\GroupContentEnablerManagerInterface
+   * @var GroupContentEnablerManagerInterface
    */
   protected $pluginManager;
 
   /**
    * The subgroup field manager.
    *
-   * @var \Drupal\subgroup\SubgroupFieldManagerInterface
+   * @var SubgroupFieldManagerInterface
    */
   protected $fieldManager;
 
   /**
    * Constructs a new GroupTypeLeafSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\group\Plugin\GroupContentEnablerManagerInterface $plugin_manager
+   * @param GroupContentEnablerManagerInterface $plugin_manager
    *   The group content enabler plugin manager.
-   * @param \Drupal\subgroup\SubgroupFieldManagerInterface $field_manager
+   * @param SubgroupFieldManagerInterface $field_manager
    *   The subgroup field manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, GroupContentEnablerManagerInterface $plugin_manager, SubgroupFieldManagerInterface $field_manager) {
@@ -72,7 +76,7 @@ class GroupTypeLeafSubscriber implements EventSubscriberInterface {
   /**
    * Handles the add leaf event.
    *
-   * @param \Drupal\subgroup\Event\GroupTypeLeafEvent $event
+   * @param GroupTypeLeafEvent $event
    *   The add leaf event.
    */
   public function onAddLeaf(GroupTypeLeafEvent $event) {
@@ -82,10 +86,10 @@ class GroupTypeLeafSubscriber implements EventSubscriberInterface {
     $this->pluginManager->clearCachedDefinitions();
 
     if (!$this->subgroupHandler->isRoot($group_type)) {
-      /** @var \Drupal\group\Entity\GroupTypeInterface $parent */
+      /** @var GroupTypeInterface $parent */
       $parent = $this->subgroupHandler->getParent($group_type);
 
-      /** @var \Drupal\group\Entity\Storage\GroupContentTypeStorageInterface $storage */
+      /** @var GroupContentTypeStorageInterface $storage */
       $storage = $this->entityTypeManager->getStorage('group_content_type');
       $storage->save($storage->createFromPlugin($parent, 'subgroup:' . $group_type->id()));
     }
@@ -94,7 +98,7 @@ class GroupTypeLeafSubscriber implements EventSubscriberInterface {
   /**
    * Handles the import leaf event.
    *
-   * @param \Drupal\subgroup\Event\GroupTypeLeafEvent $event
+   * @param GroupTypeLeafEvent $event
    *   The import leaf event.
    */
   public function onImportLeaf(GroupTypeLeafEvent $event) {
@@ -104,20 +108,20 @@ class GroupTypeLeafSubscriber implements EventSubscriberInterface {
   /**
    * Handles the remove leaf event.
    *
-   * @param \Drupal\subgroup\Event\GroupTypeLeafEvent $event
+   * @param GroupTypeLeafEvent $event
    *   The remove leaf event.
    */
   public function onRemoveLeaf(GroupTypeLeafEvent $event) {
     $group_type = $event->getGroupType();
 
-    /** @var \Drupal\group\Entity\GroupTypeInterface $original */
+    /** @var GroupTypeInterface $original */
     $original = $group_type->original;
 
-    /** @var \Drupal\subgroup\Entity\RoleInheritanceStorageInterface $role_inheritance_storage */
+    /** @var RoleInheritanceStorageInterface $role_inheritance_storage */
     $role_inheritance_storage = $this->entityTypeManager->getStorage('subgroup_role_inheritance');
     $role_inheritance_storage->deleteForGroupType($group_type, $this->subgroupHandler->wrapLeaf($original)->getTree());
 
-    /** @var \Drupal\group\Entity\Storage\GroupContentTypeStorageInterface $storage */
+    /** @var GroupContentTypeStorageInterface $storage */
     $storage = $this->entityTypeManager->getStorage('group_content_type');
     $storage->delete($storage->loadByContentPluginId('subgroup:' . $group_type->id()));
 
diff --git a/src/EventSubscriber/TreeCacheTagInvalidator.php b/src/EventSubscriber/TreeCacheTagInvalidator.php
index 0102a1c..0cc16c4 100644
--- a/src/EventSubscriber/TreeCacheTagInvalidator.php
+++ b/src/EventSubscriber/TreeCacheTagInvalidator.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\subgroup\EventSubscriber;
 
+use Drupal\subgroup\Entity\SubgroupHandlerInterface;
+use Drupal\group\Entity\GroupInterface;
+use Drupal\group\Entity\GroupTypeInterface;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\subgroup\Event\GroupLeafEvent;
@@ -17,30 +20,30 @@ class TreeCacheTagInvalidator implements EventSubscriberInterface {
   /**
    * The cache tags invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;
 
   /**
    * The subgroup handler for groups.
    *
-   * @var \Drupal\subgroup\Entity\SubgroupHandlerInterface
+   * @var SubgroupHandlerInterface
    */
   protected $groupSubgroupHandler;
 
   /**
    * The subgroup handler for group types.
    *
-   * @var \Drupal\subgroup\Entity\SubgroupHandlerInterface
+   * @var SubgroupHandlerInterface
    */
   protected $groupTypeSubgroupHandler;
 
   /**
    * Constructs a TreeCacheTagInvalidator object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The cache tags invalidator.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, CacheTagsInvalidatorInterface $cache_tags_invalidator) {
@@ -63,7 +66,7 @@ class TreeCacheTagInvalidator implements EventSubscriberInterface {
   /**
    * Invalidates the group tree cache tag when adding a leaf.
    *
-   * @param \Drupal\subgroup\Event\GroupLeafEvent $event
+   * @param GroupLeafEvent $event
    *   The add group leaf event.
    */
   public function onAddGroupLeaf(GroupLeafEvent $event) {
@@ -74,13 +77,13 @@ class TreeCacheTagInvalidator implements EventSubscriberInterface {
   /**
    * Invalidates the group tree cache tag when removing a leaf.
    *
-   * @param \Drupal\subgroup\Event\GroupLeafEvent $event
+   * @param GroupLeafEvent $event
    *   The remove group leaf event.
    */
   public function onRemoveGroupLeaf(GroupLeafEvent $event) {
     $group = $event->getGroup();
 
-    /** @var \Drupal\group\Entity\GroupInterface $original */
+    /** @var GroupInterface $original */
     $original = $group->original;
     $this->cacheTagsInvalidator->invalidateTags($this->groupSubgroupHandler->getTreeCacheTags($original));
 
@@ -89,7 +92,7 @@ class TreeCacheTagInvalidator implements EventSubscriberInterface {
   /**
    * Invalidates the group type tree cache tag when adding a leaf.
    *
-   * @param \Drupal\subgroup\Event\GroupTypeLeafEvent $event
+   * @param GroupTypeLeafEvent $event
    *   The add group type leaf event.
    */
   public function onAddGroupTypeLeaf(GroupTypeLeafEvent $event) {
@@ -100,13 +103,13 @@ class TreeCacheTagInvalidator implements EventSubscriberInterface {
   /**
    * Invalidates the group type tree cache tag when removing a leaf.
    *
-   * @param \Drupal\subgroup\Event\GroupTypeLeafEvent $event
+   * @param GroupTypeLeafEvent $event
    *   The remove group type leaf event.
    */
   public function onRemoveGroupTypeLeaf(GroupTypeLeafEvent $event) {
     $group_type = $event->getGroupType();
 
-    /** @var \Drupal\group\Entity\GroupTypeInterface $original */
+    /** @var GroupTypeInterface $original */
     $original = $group_type->original;
     $this->cacheTagsInvalidator->invalidateTags($this->groupTypeSubgroupHandler->getTreeCacheTags($original));
   }
diff --git a/src/Form/SubgroupSettingsForm.php b/src/Form/SubgroupSettingsForm.php
index 24d6bb0..6876062 100644
--- a/src/Form/SubgroupSettingsForm.php
+++ b/src/Form/SubgroupSettingsForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\subgroup\Form;
 
+use Drupal\subgroup\Entity\SubgroupHandlerInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBase;
@@ -26,14 +28,14 @@ class SubgroupSettingsForm extends FormBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new SubgroupSettingsForm.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -157,7 +159,7 @@ class SubgroupSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function validateCreateTree(array &$form, FormStateInterface $form_state) {
@@ -193,7 +195,7 @@ class SubgroupSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitCreateTree(array &$form, FormStateInterface $form_state) {
@@ -205,7 +207,7 @@ class SubgroupSettingsForm extends FormBase {
     $parent = $storage->load($form_state->getValue($parents_parent));
     $child = $storage->load($form_state->getValue($parents_child));
 
-    /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $subgroup_handler */
+    /** @var SubgroupHandlerInterface $subgroup_handler */
     $subgroup_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
     $subgroup_handler->initTree($parent);
     $subgroup_handler->addLeaf($parent, $child);
@@ -214,7 +216,7 @@ class SubgroupSettingsForm extends FormBase {
   /**
    * Builds the tree overview form.
    *
-   * @param \Drupal\group\Entity\GroupTypeInterface $group_type
+   * @param GroupTypeInterface $group_type
    *   The root group type.
    *
    * @return array
@@ -238,7 +240,7 @@ class SubgroupSettingsForm extends FormBase {
     ];
     $form['table'][$root_id]['ancestry']['#markup'] = $this->t('<strong>@group_type</strong>', ['@group_type' => $root_label]);
 
-    /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $subgroup_handler */
+    /** @var SubgroupHandlerInterface $subgroup_handler */
     $subgroup_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
 
     $current_parents = $parent_options = [$root_id => $root_label];
@@ -300,7 +302,7 @@ class SubgroupSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function validateRemoveLeaf(array &$form, FormStateInterface $form_state) {
@@ -323,14 +325,14 @@ class SubgroupSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitRemoveLeaf(array &$form, FormStateInterface $form_state) {
     $parents = array_slice($form_state->getTriggeringElement()['#parents'], 0, -1);
     $group_type = $this->entityTypeManager->getStorage('group_type')->load(end($parents));
 
-    /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $subgroup_handler */
+    /** @var SubgroupHandlerInterface $subgroup_handler */
     $subgroup_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
     $subgroup_handler->removeLeaf($group_type);
   }
@@ -338,7 +340,7 @@ class SubgroupSettingsForm extends FormBase {
   /**
    * Builds the add leaf form.
    *
-   * @param \Drupal\Core\StringTranslation\TranslatableMarkup[] $parent_options
+   * @param TranslatableMarkup[] $parent_options
    *   A list of options for the parent selector.
    *
    * @return array
@@ -392,7 +394,7 @@ class SubgroupSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function validateAddLeaf(array &$form, FormStateInterface $form_state) {
@@ -421,7 +423,7 @@ class SubgroupSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitAddLeaf(array &$form, FormStateInterface $form_state) {
@@ -433,7 +435,7 @@ class SubgroupSettingsForm extends FormBase {
     $parent = $storage->load($form_state->getValue($parents_parent));
     $child = $storage->load($form_state->getValue($parents_child));
 
-    /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $subgroup_handler */
+    /** @var SubgroupHandlerInterface $subgroup_handler */
     $subgroup_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
     $subgroup_handler->addLeaf($parent, $child);
   }
@@ -441,7 +443,7 @@ class SubgroupSettingsForm extends FormBase {
   /**
    * Builds the inheritance overview form.
    *
-   * @param \Drupal\group\Entity\GroupTypeInterface $group_type
+   * @param GroupTypeInterface $group_type
    *   The root group type.
    *
    * @return array
@@ -487,7 +489,7 @@ class SubgroupSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitRemoveInheritance(array &$form, FormStateInterface $form_state) {
@@ -499,7 +501,7 @@ class SubgroupSettingsForm extends FormBase {
   /**
    * Builds the add inheritance form.
    *
-   * @param \Drupal\group\Entity\GroupTypeInterface $group_type
+   * @param GroupTypeInterface $group_type
    *   The root group type.
    *
    * @return array
@@ -512,7 +514,7 @@ class SubgroupSettingsForm extends FormBase {
       '#process' => ['::processSubform'],
     ];
 
-    /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $subgroup_handler */
+    /** @var SubgroupHandlerInterface $subgroup_handler */
     $subgroup_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
     $group_type_ids = array_merge([$group_type->id()], array_keys($subgroup_handler->getDescendants($group_type)));
 
@@ -548,7 +550,7 @@ class SubgroupSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function validateCreateInheritance(array &$form, FormStateInterface $form_state) {
@@ -581,7 +583,7 @@ class SubgroupSettingsForm extends FormBase {
     $source_group_role = $storage->load($source);
     $target_group_role = $storage->load($target);
 
-    /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $subgroup_handler */
+    /** @var SubgroupHandlerInterface $subgroup_handler */
     $subgroup_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
     if (!$subgroup_handler->areVerticallyRelated($source_group_role->getGroupType(), $target_group_role->getGroupType())) {
       $form_state->setErrorByName(implode('][', $parents), $this->t('Source and target are not ancestors or descendants of one another.'));
@@ -593,7 +595,7 @@ class SubgroupSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitCreateInheritance(array &$form, FormStateInterface $form_state) {
diff --git a/src/GroupLeaf.php b/src/GroupLeaf.php
index 369dff3..b776aa6 100644
--- a/src/GroupLeaf.php
+++ b/src/GroupLeaf.php
@@ -14,14 +14,14 @@ class GroupLeaf implements LeafInterface {
   /**
    * The group entity to wrap.
    *
-   * @var \Drupal\group\Entity\GroupInterface
+   * @var GroupInterface
    */
   protected $group;
 
   /**
    * Constructs a new GroupLeaf.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   The group entity to wrap the leaf around.
    */
   public function __construct(GroupInterface $group) {
diff --git a/src/GroupTypeLeaf.php b/src/GroupTypeLeaf.php
index 5125e6f..fe4ceb1 100644
--- a/src/GroupTypeLeaf.php
+++ b/src/GroupTypeLeaf.php
@@ -14,14 +14,14 @@ class GroupTypeLeaf implements LeafInterface {
   /**
    * The group entity to wrap.
    *
-   * @var \Drupal\group\Entity\GroupTypeInterface
+   * @var GroupTypeInterface
    */
   protected $groupType;
 
   /**
    * Constructs a new GroupLeaf.
    *
-   * @param \Drupal\group\Entity\GroupTypeInterface $group_type
+   * @param GroupTypeInterface $group_type
    *   The group entity to wrap the leaf around.
    */
   public function __construct(GroupTypeInterface $group_type) {
diff --git a/src/Plugin/GroupContentEnabler/Subgroup.php b/src/Plugin/GroupContentEnabler/Subgroup.php
index df7f99e..5174540 100644
--- a/src/Plugin/GroupContentEnabler/Subgroup.php
+++ b/src/Plugin/GroupContentEnabler/Subgroup.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\subgroup\Plugin\GroupContentEnabler;
 
+use Drupal\group\Plugin\GroupContentEnablerManagerInterface;
 use Drupal\group\Entity\GroupInterface;
 use Drupal\group\Plugin\GroupContentEnablerBase;
 use Drupal\Core\Url;
@@ -38,7 +39,7 @@ class Subgroup extends GroupContentEnablerBase {
     $group_type_id = $this->getEntityBundle();
     $group_type = \Drupal::entityTypeManager()->getStorage('group_type')->load($group_type_id);
 
-    /** @var \Drupal\group\Plugin\GroupContentEnablerManagerInterface $manager */
+    /** @var GroupContentEnablerManagerInterface $manager */
     $manager = \Drupal::service('plugin.manager.group_content_enabler');
     $create_permission = $manager->getPermissionProvider($plugin_id)->getEntityCreatePermission();
 
diff --git a/src/Plugin/GroupContentEnabler/SubgroupDeriver.php b/src/Plugin/GroupContentEnabler/SubgroupDeriver.php
index 8d8703b..d6dd791 100644
--- a/src/Plugin/GroupContentEnabler/SubgroupDeriver.php
+++ b/src/Plugin/GroupContentEnabler/SubgroupDeriver.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\subgroup\Plugin\GroupContentEnabler;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ -16,14 +17,14 @@ class SubgroupDeriver extends DeriverBase implements ContainerDeriverInterface {
   /**
    * The group type storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $storage;
 
   /**
    * The group type subgroup handler.
    *
-   * @var \Drupal\subgroup\Entity\SubgroupHandlerInterface
+   * @var SubgroupHandlerInterface
    */
   protected $subgroupHandler;
 
@@ -32,7 +33,7 @@ class SubgroupDeriver extends DeriverBase implements ContainerDeriverInterface {
    *
    * @param \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
    *   The group type storage.
-   * @param \Drupal\subgroup\Entity\SubgroupHandlerInterface $subgroup_handler
+   * @param SubgroupHandlerInterface $subgroup_handler
    *   The group type subgroup handler.
    */
   public function __construct(ConfigEntityStorageInterface $storage, SubgroupHandlerInterface $subgroup_handler) {
@@ -44,7 +45,7 @@ class SubgroupDeriver extends DeriverBase implements ContainerDeriverInterface {
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container, $base_plugin_id) {
-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
+    /** @var EntityTypeManagerInterface $entity_type_manager */
     $entity_type_manager = $container->get('entity_type.manager');
     return new static(
       $entity_type_manager->getStorage('group_type'),
diff --git a/src/SubgroupFieldManager.php b/src/SubgroupFieldManager.php
index 73814a1..a735b42 100644
--- a/src/SubgroupFieldManager.php
+++ b/src/SubgroupFieldManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\subgroup;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Core\StringTranslation\TranslationInterface;
@@ -16,7 +17,7 @@ class SubgroupFieldManager implements SubgroupFieldManagerInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -25,16 +26,16 @@ class SubgroupFieldManager implements SubgroupFieldManagerInterface {
    *
    * Keys are field names, values are field labels.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup[]
+   * @var TranslatableMarkup[]
    */
   protected $fields;
 
   /**
    * Constructs a new SubgroupFieldManager object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation) {
diff --git a/subgroup.info.yml b/subgroup.info.yml
index e9281e7..85c0b78 100644
--- a/subgroup.info.yml
+++ b/subgroup.info.yml
@@ -2,7 +2,7 @@ name: 'Subgroup'
 description: 'Allows you to structure groups into a hierarchical tree with permissions inheriting up or down'
 package: 'Group'
 type: 'module'
-core_version_requirement: ^8.8 || ^9
+core_version_requirement: ^8.8 || ^9 || ^10
 configure: 'subgroup.settings'
 dependencies:
   - 'group:group'
diff --git a/subgroup.module b/subgroup.module
index a5d06f5..adf3cbe 100644
--- a/subgroup.module
+++ b/subgroup.module
@@ -1,5 +1,9 @@
 <?php
 
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\subgroup\Entity\SubgroupHandlerInterface;
+use Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher;
+use Drupal\group\Entity\GroupContentInterface;
 /**
  * @file
  * Hook implementations for the Subgroup module.
@@ -64,7 +68,7 @@ const SUBGROUP_TREE_SETTING = 'tree';
  * Implements hook_entity_type_alter().
  */
 function subgroup_entity_type_alter(array &$entity_types) {
-  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
+  /** @var EntityTypeInterface[] $entity_types */
   $entity_types['group']->setHandlerClass('subgroup', GroupSubgroupHandler::class);
   $entity_types['group']->set('subgroup_wrapper', GroupLeaf::class);
   $entity_types['group_type']->setHandlerClass('subgroup', GroupTypeSubgroupHandler::class);
@@ -75,10 +79,10 @@ function subgroup_entity_type_alter(array &$entity_types) {
  * Implements hook_ENTITY_TYPE_update().
  */
 function subgroup_group_update(GroupInterface $group) {
-  /** @var \Drupal\group\Entity\GroupInterface $original */
+  /** @var GroupInterface $original */
   $original = $group->original;
 
-  /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $subgroup_handler */
+  /** @var SubgroupHandlerInterface $subgroup_handler */
   $subgroup_handler = \Drupal::entityTypeManager()->getHandler('group', 'subgroup');
   $original_is_leaf = $subgroup_handler->isLeaf($original);
   $current_is_leaf = $subgroup_handler->isLeaf($group);
@@ -86,14 +90,14 @@ function subgroup_group_update(GroupInterface $group) {
   // Find out whether the group was added to or removed from a tree and dispatch
   // the appropriate event.
   if ($current_is_leaf !== $original_is_leaf) {
-    /** @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher $event_dispatcher */
+    /** @var ContainerAwareEventDispatcher $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $event = new GroupLeafEvent($group);
     if ($current_is_leaf) {
-      $event_dispatcher->dispatch(LeafEvents::GROUP_LEAF_ADD, $event);
+      $event_dispatcher->dispatch($event, LeafEvents::GROUP_LEAF_ADD);
     }
     else {
-      $event_dispatcher->dispatch(LeafEvents::GROUP_LEAF_REMOVE, $event);
+      $event_dispatcher->dispatch($event, LeafEvents::GROUP_LEAF_REMOVE);
     }
   }
 }
@@ -102,17 +106,17 @@ function subgroup_group_update(GroupInterface $group) {
  * Implements hook_ENTITY_TYPE_insert().
  */
 function subgroup_group_type_insert(GroupTypeInterface $group_type) {
-  /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $subgroup_handler */
+  /** @var SubgroupHandlerInterface $subgroup_handler */
   $subgroup_handler = \Drupal::entityTypeManager()->getHandler('group_type', 'subgroup');
 
   // If the newly added group type was created during a config import and has
   // Subgroup metadata, we need to fire the import event so we can, for example,
   // clear the plugin definitions cache.
   if ($subgroup_handler->isLeaf($group_type) && $group_type->isSyncing()) {
-    /** @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher $event_dispatcher */
+    /** @var ContainerAwareEventDispatcher $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $event = new GroupTypeLeafEvent($group_type);
-    $event_dispatcher->dispatch(LeafEvents::GROUP_TYPE_LEAF_IMPORT, $event);
+    $event_dispatcher->dispatch($event, LeafEvents::GROUP_TYPE_LEAF_IMPORT);
   }
 }
 
@@ -120,10 +124,10 @@ function subgroup_group_type_insert(GroupTypeInterface $group_type) {
  * Implements hook_ENTITY_TYPE_update().
  */
 function subgroup_group_type_update(GroupTypeInterface $group_type) {
-  /** @var \Drupal\group\Entity\GroupTypeInterface $original */
+  /** @var GroupTypeInterface $original */
   $original = $group_type->original;
 
-  /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $subgroup_handler */
+  /** @var SubgroupHandlerInterface $subgroup_handler */
   $subgroup_handler = \Drupal::entityTypeManager()->getHandler('group_type', 'subgroup');
   $original_is_leaf = $subgroup_handler->isLeaf($original);
   $current_is_leaf = $subgroup_handler->isLeaf($group_type);
@@ -131,17 +135,17 @@ function subgroup_group_type_update(GroupTypeInterface $group_type) {
   // Find out whether the group type was added to or removed from a tree and
   // dispatch the appropriate event.
   if ($current_is_leaf !== $original_is_leaf) {
-    /** @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher $event_dispatcher */
+    /** @var ContainerAwareEventDispatcher $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $event = new GroupTypeLeafEvent($group_type);
     if ($group_type->isSyncing()) {
-      $event_dispatcher->dispatch(LeafEvents::GROUP_TYPE_LEAF_IMPORT, $event);
+      $event_dispatcher->dispatch($event, LeafEvents::GROUP_TYPE_LEAF_IMPORT);
     }
     elseif ($current_is_leaf) {
-      $event_dispatcher->dispatch(LeafEvents::GROUP_TYPE_LEAF_ADD, $event);
+      $event_dispatcher->dispatch($event, LeafEvents::GROUP_TYPE_LEAF_ADD);
     }
     else {
-      $event_dispatcher->dispatch(LeafEvents::GROUP_TYPE_LEAF_REMOVE, $event);
+      $event_dispatcher->dispatch($event, LeafEvents::GROUP_TYPE_LEAF_REMOVE);
     }
   }
 }
@@ -150,10 +154,10 @@ function subgroup_group_type_update(GroupTypeInterface $group_type) {
  * Implements hook_ENTITY_TYPE_create_access().
  */
 function subgroup_group_create_access(AccountInterface $account, array $context, $entity_bundle) {
-  /** @var \Drupal\group\Entity\GroupInterface $entity */
+  /** @var GroupInterface $entity */
   $group_type = \Drupal::entityTypeManager()->getStorage('group_type')->load($entity_bundle);
 
-  /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $group_type_handler */
+  /** @var SubgroupHandlerInterface $group_type_handler */
   $group_type_handler = \Drupal::entityTypeManager()->getHandler('group_type', 'subgroup');
 
   if ($group_type_handler->isLeaf($group_type) && !$group_type_handler->isRoot($group_type)) {
@@ -170,7 +174,7 @@ function subgroup_group_create_access(AccountInterface $account, array $context,
 function subgroup_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
   $entity_type_id = $entity->getEntityTypeId();
   if ($operation === 'delete' && in_array($entity_type_id, ['group', 'group_type'], TRUE)) {
-    /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $handler */
+    /** @var SubgroupHandlerInterface $handler */
     $handler = \Drupal::entityTypeManager()->getHandler($entity_type_id, 'subgroup');
     if ($handler->isLeaf($entity) && $handler->hasDescendants($entity)) {
       $access = AccessResult::forbidden('Cannot delete a leaf that still has descendants.');
@@ -190,7 +194,7 @@ function subgroup_entity_access(EntityInterface $entity, $operation, AccountInte
 function subgroup_entity_predelete(EntityInterface $entity) {
   $entity_type_id = $entity->getEntityTypeId();
   if (in_array($entity_type_id, ['group', 'group_type'], TRUE)) {
-    /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $handler */
+    /** @var SubgroupHandlerInterface $handler */
     $handler = \Drupal::entityTypeManager()->getHandler($entity_type_id, 'subgroup');
     if ($handler->isLeaf($entity) && $handler->hasDescendants($entity)) {
       throw new EntityStorageException('Cannot delete a leaf that still has descendants.');
@@ -204,7 +208,7 @@ function subgroup_entity_predelete(EntityInterface $entity) {
 function subgroup_entity_delete(EntityInterface $entity) {
   $entity_type_id = $entity->getEntityTypeId();
   if (in_array($entity_type_id, ['group', 'group_type'], TRUE)) {
-    /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $handler */
+    /** @var SubgroupHandlerInterface $handler */
     $handler = \Drupal::entityTypeManager()->getHandler($entity_type_id, 'subgroup');
     if ($handler->isLeaf($entity)) {
       $handler->removeLeaf($entity, FALSE);
@@ -216,7 +220,7 @@ function subgroup_entity_delete(EntityInterface $entity) {
  * Implements hook_ENTITY_TYPE_access().
  */
 function subgroup_group_content_access(EntityInterface $entity, $operation, AccountInterface $account) {
-  /** @var \Drupal\group\Entity\GroupContentInterface $entity */
+  /** @var GroupContentInterface $entity */
   if ($operation === 'delete' && $entity->getContentPlugin()->getBaseId() === 'subgroup') {
     return AccessResult::forbidden('Cannot delete a subgroup group content entity directly.')->setCacheMaxAge(Cache::PERMANENT);
   }
@@ -227,12 +231,12 @@ function subgroup_group_content_access(EntityInterface $entity, $operation, Acco
  * Implements hook_ENTITY_TYPE_insert().
  */
 function subgroup_group_content_insert(EntityInterface $entity) {
-  /** @var \Drupal\group\Entity\GroupContentInterface $entity */
+  /** @var GroupContentInterface $entity */
   if ($entity->getContentPlugin()->getBaseId() === 'subgroup') {
     $parent = $entity->getGroup();
     $child = $entity->getEntity();
 
-    /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $handler */
+    /** @var SubgroupHandlerInterface $handler */
     $handler = \Drupal::entityTypeManager()->getHandler('group', 'subgroup');
     if (!$handler->isLeaf($parent)) {
       $handler->initTree($parent);
@@ -245,7 +249,7 @@ function subgroup_group_content_insert(EntityInterface $entity) {
  * Implements hook_ENTITY_TYPE_predelete().
  */
 function subgroup_group_content_predelete(EntityInterface $entity) {
-  /** @var \Drupal\group\Entity\GroupContentInterface $entity */
+  /** @var GroupContentInterface $entity */
   if ($entity->getContentPlugin()->getBaseId() === 'subgroup') {
     if ($entity->getEntity()) {
       throw new EntityStorageException('Cannot delete a subgroup group content entity if its group still exists.');
diff --git a/tests/modules/subgroup_test_events/src/EventSubscriber/LeafEventsSubscriber.php b/tests/modules/subgroup_test_events/src/EventSubscriber/LeafEventsSubscriber.php
index 7ea3e0b..0764b33 100644
--- a/tests/modules/subgroup_test_events/src/EventSubscriber/LeafEventsSubscriber.php
+++ b/tests/modules/subgroup_test_events/src/EventSubscriber/LeafEventsSubscriber.php
@@ -26,7 +26,7 @@ class LeafEventsSubscriber implements EventSubscriberInterface {
   /**
    * Handles the group add leaf event.
    *
-   * @param \Drupal\subgroup\Event\GroupLeafEvent $event
+   * @param GroupLeafEvent $event
    *   The add group leaf event.
    */
   public function onAddGroupLeaf(GroupLeafEvent $event) {
@@ -36,7 +36,7 @@ class LeafEventsSubscriber implements EventSubscriberInterface {
   /**
    * Handles the group remove leaf event.
    *
-   * @param \Drupal\subgroup\Event\GroupLeafEvent $event
+   * @param GroupLeafEvent $event
    *   The remove group leaf event.
    */
   public function onRemoveGroupLeaf(GroupLeafEvent $event) {
@@ -46,7 +46,7 @@ class LeafEventsSubscriber implements EventSubscriberInterface {
   /**
    * Handles the group type add leaf event.
    *
-   * @param \Drupal\subgroup\Event\GroupTypeLeafEvent $event
+   * @param GroupTypeLeafEvent $event
    *   The add group type leaf event.
    */
   public function onAddGroupTypeLeaf(GroupTypeLeafEvent $event) {
@@ -56,7 +56,7 @@ class LeafEventsSubscriber implements EventSubscriberInterface {
   /**
    * Handles the group type remove leaf event.
    *
-   * @param \Drupal\subgroup\Event\GroupTypeLeafEvent $event
+   * @param GroupTypeLeafEvent $event
    *   The remove group type leaf event.
    */
   public function onRemoveGroupTypeLeaf(GroupTypeLeafEvent $event) {
diff --git a/tests/src/Kernel/GroupContentDeleteTest.php b/tests/src/Kernel/GroupContentDeleteTest.php
index b81d021..a2b63c1 100644
--- a/tests/src/Kernel/GroupContentDeleteTest.php
+++ b/tests/src/Kernel/GroupContentDeleteTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\subgroup\Kernel;
 
+use Drupal\subgroup\Entity\SubgroupHandlerInterface;
+use Drupal\group\Entity\Storage\GroupContentStorageInterface;
 use Drupal\Core\Access\AccessResultForbidden;
 use Drupal\Core\Entity\EntityStorageException;
 
@@ -15,21 +17,21 @@ class GroupContentDeleteTest extends SubgroupKernelTestBase {
   /**
    * The subgroup handler to use in testing.
    *
-   * @var \Drupal\subgroup\Entity\SubgroupHandlerInterface
+   * @var SubgroupHandlerInterface
    */
   protected $subgroupHandler;
 
   /**
    * The group content storage to use in testing.
    *
-   * @var \Drupal\group\Entity\Storage\GroupContentStorageInterface
+   * @var GroupContentStorageInterface
    */
   protected $storage;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->subgroupHandler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
     $this->storage = $this->entityTypeManager->getStorage('group_content');
@@ -63,7 +65,7 @@ class GroupContentDeleteTest extends SubgroupKernelTestBase {
     $group_content = $this->storage->createForEntityInGroup($group_child, $group_parent, 'subgroup:' . $group_type_child->id(), []);
     $this->storage->save($group_content);
 
-    /** @var \Drupal\Core\Access\AccessResultForbidden $access */
+    /** @var AccessResultForbidden $access */
     $access = $group_content->access('delete', NULL, TRUE);
     $this->assertInstanceOf(AccessResultForbidden::class, $access, 'Group content delete access check returned an AccessResultForbidden.');
     $this->assertEquals('Cannot delete a subgroup group content entity directly.', $access->getReason());
diff --git a/tests/src/Kernel/GroupContentInsertTest.php b/tests/src/Kernel/GroupContentInsertTest.php
index 48cb5b8..34f7924 100644
--- a/tests/src/Kernel/GroupContentInsertTest.php
+++ b/tests/src/Kernel/GroupContentInsertTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\subgroup\Kernel;
 
+use Drupal\subgroup\Entity\SubgroupHandlerInterface;
+use Drupal\group\Entity\Storage\GroupContentStorageInterface;
 /**
  * Tests that adding subgroup group content triggers leaf creation.
  *
@@ -12,28 +14,28 @@ class GroupContentInsertTest extends SubgroupKernelTestBase {
   /**
    * The group subgroup handler to use in testing.
    *
-   * @var \Drupal\subgroup\Entity\SubgroupHandlerInterface
+   * @var SubgroupHandlerInterface
    */
   protected $groupSubgroupHandler;
 
   /**
    * The group type subgroup handler to use in testing.
    *
-   * @var \Drupal\subgroup\Entity\SubgroupHandlerInterface
+   * @var SubgroupHandlerInterface
    */
   protected $groupTypeSubgroupHandler;
 
   /**
    * The group content storage to use in testing.
    *
-   * @var \Drupal\group\Entity\Storage\GroupContentStorageInterface
+   * @var GroupContentStorageInterface
    */
   protected $storage;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->groupSubgroupHandler = $this->entityTypeManager->getHandler('group', 'subgroup');
     $this->groupTypeSubgroupHandler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
diff --git a/tests/src/Kernel/GroupCreateTest.php b/tests/src/Kernel/GroupCreateTest.php
index 73926da..921f18d 100644
--- a/tests/src/Kernel/GroupCreateTest.php
+++ b/tests/src/Kernel/GroupCreateTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\subgroup\Kernel;
 
+use Drupal\Core\Entity\EntityAccessControlHandlerInterface;
+use Drupal\subgroup\Entity\GroupTypeSubgroupHandler;
 use Drupal\Core\Access\AccessResultForbidden;
 
 /**
@@ -14,14 +16,14 @@ class GroupCreateTest extends SubgroupKernelTestBase {
   /**
    * The access control handler to use in testing.
    *
-   * @var \Drupal\Core\Entity\EntityAccessControlHandlerInterface
+   * @var EntityAccessControlHandlerInterface
    */
   protected $accessControlHandler;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->accessControlHandler = $this->entityTypeManager->getAccessControlHandler('group');
@@ -33,7 +35,7 @@ class GroupCreateTest extends SubgroupKernelTestBase {
     // Grant create access for the current user.
     $this->setCurrentUser($this->createUser([], ['create foo group', 'create bar group']));
 
-    /** @var \Drupal\subgroup\Entity\GroupTypeSubgroupHandler $group_type_handler */
+    /** @var GroupTypeSubgroupHandler $group_type_handler */
     $group_type_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
     $group_type_handler->initTree($foo);
     $group_type_handler->addLeaf($foo, $bar);
@@ -61,7 +63,7 @@ class GroupCreateTest extends SubgroupKernelTestBase {
   public function testLeafCreateAccess() {
     $access = $this->accessControlHandler->createAccess('bar', NULL, [], TRUE);
     $this->assertInstanceOf(AccessResultForbidden::class, $access, 'Group create access check returned an AccessResultForbidden.');
-    /** @var \Drupal\Core\Access\AccessResultForbidden $access */
+    /** @var AccessResultForbidden $access */
     $this->assertEquals('Cannot create a group globally if its group type is a non-root leaf of a tree.', $access->getReason());
   }
 
diff --git a/tests/src/Kernel/GroupDeleteTest.php b/tests/src/Kernel/GroupDeleteTest.php
index 6e7f51e..c484186 100644
--- a/tests/src/Kernel/GroupDeleteTest.php
+++ b/tests/src/Kernel/GroupDeleteTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\subgroup\Kernel;
 
+use Drupal\subgroup\Entity\SubgroupHandlerInterface;
+use Drupal\subgroup\Entity\GroupTypeSubgroupHandler;
 use Drupal\Core\Access\AccessResultForbidden;
 use Drupal\Core\Entity\EntityStorageException;
 
@@ -15,14 +17,14 @@ class GroupDeleteTest extends SubgroupKernelTestBase {
   /**
    * The subgroup handler to use in testing.
    *
-   * @var \Drupal\subgroup\Entity\SubgroupHandlerInterface
+   * @var SubgroupHandlerInterface
    */
   protected $subgroupHandler;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->subgroupHandler = $this->entityTypeManager->getHandler('group', 'subgroup');
@@ -35,7 +37,7 @@ class GroupDeleteTest extends SubgroupKernelTestBase {
     $foo->getMemberRole()->grantPermission('delete group')->save();
     $bar->getMemberRole()->grantPermission('delete group')->save();
 
-    /** @var \Drupal\subgroup\Entity\GroupTypeSubgroupHandler $group_type_handler */
+    /** @var GroupTypeSubgroupHandler $group_type_handler */
     $group_type_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
     $group_type_handler->initTree($foo);
     $group_type_handler->addLeaf($foo, $bar);
@@ -79,7 +81,7 @@ class GroupDeleteTest extends SubgroupKernelTestBase {
     // Reload the parent from cache so that it knows it's a leaf.
     $access = $this->groupStorage->load($parent->id())->access('delete', NULL, TRUE);
     $this->assertInstanceOf(AccessResultForbidden::class, $access, 'Group delete access check returned an AccessResultForbidden.');
-    /** @var \Drupal\Core\Access\AccessResultForbidden $access */
+    /** @var AccessResultForbidden $access */
     $this->assertEquals('Cannot delete a leaf that still has descendants.', $access->getReason());
   }
 
diff --git a/tests/src/Kernel/GroupLeafTest.php b/tests/src/Kernel/GroupLeafTest.php
index dc28bee..dd1baff 100644
--- a/tests/src/Kernel/GroupLeafTest.php
+++ b/tests/src/Kernel/GroupLeafTest.php
@@ -16,14 +16,14 @@ class GroupLeafTest extends SubgroupKernelTestBase {
   /**
    * The group leaf to run tests on.
    *
-   * @var \Drupal\subgroup\GroupLeaf
+   * @var GroupLeaf
    */
   protected $groupLeaf;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $group_type = $this->createGroupType();
diff --git a/tests/src/Kernel/GroupSubgroupHandlerTest.php b/tests/src/Kernel/GroupSubgroupHandlerTest.php
index 9a42236..6ef6d60 100644
--- a/tests/src/Kernel/GroupSubgroupHandlerTest.php
+++ b/tests/src/Kernel/GroupSubgroupHandlerTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\subgroup\Kernel;
 
+use Drupal\subgroup\Entity\SubgroupHandlerInterface;
+use Drupal\group\Entity\GroupTypeInterface;
+use Drupal\group\Entity\GroupInterface;
 use Drupal\subgroup\InvalidLeafException;
 use Drupal\subgroup\InvalidParentException;
 use Drupal\subgroup\InvalidRootException;
@@ -17,77 +20,77 @@ class GroupSubgroupHandlerTest extends SubgroupKernelTestBase {
   /**
    * The subgroup handler to run tests on.
    *
-   * @var \Drupal\subgroup\Entity\SubgroupHandlerInterface
+   * @var SubgroupHandlerInterface
    */
   protected $subgroupHandler;
 
   /**
    * The root group type to run tests on.
    *
-   * @var \Drupal\group\Entity\GroupTypeInterface
+   * @var GroupTypeInterface
    */
   protected $groupTypeRoot;
 
   /**
    * The child group type to run tests on.
    *
-   * @var \Drupal\group\Entity\GroupTypeInterface
+   * @var GroupTypeInterface
    */
   protected $groupTypeChild;
 
   /**
    * The grandchild group type to run tests on.
    *
-   * @var \Drupal\group\Entity\GroupTypeInterface
+   * @var GroupTypeInterface
    */
   protected $groupTypeGrandchild;
 
   /**
    * The root group to run tests on.
    *
-   * @var \Drupal\group\Entity\GroupInterface
+   * @var GroupInterface
    */
   protected $groupRoot;
 
   /**
    * The left child group to run tests on.
    *
-   * @var \Drupal\group\Entity\GroupInterface
+   * @var GroupInterface
    */
   protected $groupChildLeft;
 
   /**
    * The middle child group to run tests on.
    *
-   * @var \Drupal\group\Entity\GroupInterface
+   * @var GroupInterface
    */
   protected $groupChildMiddle;
 
   /**
    * The right child group to run tests on.
    *
-   * @var \Drupal\group\Entity\GroupInterface
+   * @var GroupInterface
    */
   protected $groupChildRight;
 
   /**
    * The left grandchild group to run tests on.
    *
-   * @var \Drupal\group\Entity\GroupInterface
+   * @var GroupInterface
    */
   protected $groupGrandchildLeft;
 
   /**
    * The right grandchild group to run tests on.
    *
-   * @var \Drupal\group\Entity\GroupInterface
+   * @var GroupInterface
    */
   protected $groupGrandchildRight;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->subgroupHandler = $this->entityTypeManager->getHandler('group', 'subgroup');
 
diff --git a/tests/src/Kernel/GroupTypeDeleteTest.php b/tests/src/Kernel/GroupTypeDeleteTest.php
index b9e02ab..892bf96 100644
--- a/tests/src/Kernel/GroupTypeDeleteTest.php
+++ b/tests/src/Kernel/GroupTypeDeleteTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\subgroup\Kernel;
 
+use Drupal\subgroup\Entity\SubgroupHandlerInterface;
 use Drupal\Core\Access\AccessResultForbidden;
 use Drupal\Core\Entity\EntityStorageException;
 
@@ -15,14 +16,14 @@ class GroupTypeDeleteTest extends SubgroupKernelTestBase {
   /**
    * The subgroup handler to use in testing.
    *
-   * @var \Drupal\subgroup\Entity\SubgroupHandlerInterface
+   * @var SubgroupHandlerInterface
    */
   protected $subgroupHandler;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->subgroupHandler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
@@ -57,7 +58,7 @@ class GroupTypeDeleteTest extends SubgroupKernelTestBase {
     $this->subgroupHandler->initTree($parent);
     $this->subgroupHandler->addLeaf($parent, $child);
 
-    /** @var \Drupal\Core\Access\AccessResultForbidden $access */
+    /** @var AccessResultForbidden $access */
     $access = $parent->access('delete', NULL, TRUE);
     $this->assertInstanceOf(AccessResultForbidden::class, $access, 'Group type delete access check returned an AccessResultForbidden.');
     $this->assertEquals('Cannot delete a leaf that still has descendants.', $access->getReason());
diff --git a/tests/src/Kernel/GroupTypeLeafImportTest.php b/tests/src/Kernel/GroupTypeLeafImportTest.php
index 8285368..1563ce4 100644
--- a/tests/src/Kernel/GroupTypeLeafImportTest.php
+++ b/tests/src/Kernel/GroupTypeLeafImportTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\subgroup\Kernel;
 
+use Drupal\group\Plugin\GroupContentEnablerManagerInterface;
 use Drupal\Core\Site\Settings;
 
 /**
@@ -14,14 +15,14 @@ class GroupTypeLeafImportTest extends SubgroupKernelTestBase {
   /**
    * The content enabler plugin manager.
    *
-   * @var \Drupal\group\Plugin\GroupContentEnablerManagerInterface
+   * @var GroupContentEnablerManagerInterface
    */
   protected $pluginManager;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // The system.site key is required for import validation.
diff --git a/tests/src/Kernel/GroupTypeLeafTest.php b/tests/src/Kernel/GroupTypeLeafTest.php
index cd1d12a..55cd3e7 100644
--- a/tests/src/Kernel/GroupTypeLeafTest.php
+++ b/tests/src/Kernel/GroupTypeLeafTest.php
@@ -16,14 +16,14 @@ class GroupTypeLeafTest extends SubgroupKernelTestBase {
   /**
    * The group type leaf to run tests on.
    *
-   * @var \Drupal\subgroup\GroupTypeLeaf
+   * @var GroupTypeLeaf
    */
   protected $groupTypeLeaf;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $group_type = $this->createGroupType([
       'third_party_settings' => [
diff --git a/tests/src/Kernel/GroupTypeSubgroupHandlerTest.php b/tests/src/Kernel/GroupTypeSubgroupHandlerTest.php
index 457efb3..0dc96ac 100644
--- a/tests/src/Kernel/GroupTypeSubgroupHandlerTest.php
+++ b/tests/src/Kernel/GroupTypeSubgroupHandlerTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\subgroup\Kernel;
 
+use Drupal\subgroup\Entity\SubgroupHandlerInterface;
+use Drupal\group\Entity\GroupTypeInterface;
+use Drupal\group\Plugin\GroupContentEnablerManagerInterface;
+use Drupal\group\Entity\Storage\GroupContentTypeStorageInterface;
 use Drupal\subgroup\InvalidLeafException;
 
 /**
@@ -15,56 +19,56 @@ class GroupTypeSubgroupHandlerTest extends SubgroupKernelTestBase {
   /**
    * The subgroup handler to run tests on.
    *
-   * @var \Drupal\subgroup\Entity\SubgroupHandlerInterface
+   * @var SubgroupHandlerInterface
    */
   protected $subgroupHandler;
 
   /**
    * The root group type to run tests on.
    *
-   * @var \Drupal\group\Entity\GroupTypeInterface
+   * @var GroupTypeInterface
    */
   protected $groupTypeRoot;
 
   /**
    * The left child group type to run tests on.
    *
-   * @var \Drupal\group\Entity\GroupTypeInterface
+   * @var GroupTypeInterface
    */
   protected $groupTypeChildLeft;
 
   /**
    * The middle child group type to run tests on.
    *
-   * @var \Drupal\group\Entity\GroupTypeInterface
+   * @var GroupTypeInterface
    */
   protected $groupTypeChildMiddle;
 
   /**
    * The right child group type to run tests on.
    *
-   * @var \Drupal\group\Entity\GroupTypeInterface
+   * @var GroupTypeInterface
    */
   protected $groupTypeChildRight;
 
   /**
    * The left grandchild group type to run tests on.
    *
-   * @var \Drupal\group\Entity\GroupTypeInterface
+   * @var GroupTypeInterface
    */
   protected $groupTypeGrandchildLeft;
 
   /**
    * The right grandchild group type to run tests on.
    *
-   * @var \Drupal\group\Entity\GroupTypeInterface
+   * @var GroupTypeInterface
    */
   protected $groupTypeGrandchildRight;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->subgroupHandler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
 
@@ -191,10 +195,10 @@ class GroupTypeSubgroupHandlerTest extends SubgroupKernelTestBase {
    * @covers ::addLeaf
    */
   public function testAddLeafInstallsPlugin() {
-    /** @var \Drupal\group\Plugin\GroupContentEnablerManagerInterface $plugin_manager */
+    /** @var GroupContentEnablerManagerInterface $plugin_manager */
     $plugin_manager = $this->container->get('plugin.manager.group_content_enabler');
 
-    /** @var \Drupal\group\Entity\Storage\GroupContentTypeStorageInterface $storage */
+    /** @var GroupContentTypeStorageInterface $storage */
     $storage = $this->entityTypeManager->getStorage('group_content_type');
 
     $this->assertNull($plugin_manager->getDefinition('subgroup:grandchild_middle', FALSE), 'No plugin exists yet before adding the group type as a leaf.');
@@ -306,10 +310,10 @@ class GroupTypeSubgroupHandlerTest extends SubgroupKernelTestBase {
     $this->subgroupHandler->addLeaf($this->groupTypeChildMiddle, $group_type);
     $this->subgroupHandler->removeLeaf($group_type);
 
-    /** @var \Drupal\group\Plugin\GroupContentEnablerManagerInterface $plugin_manager */
+    /** @var GroupContentEnablerManagerInterface $plugin_manager */
     $plugin_manager = $this->container->get('plugin.manager.group_content_enabler');
 
-    /** @var \Drupal\group\Entity\Storage\GroupContentTypeStorageInterface $storage */
+    /** @var GroupContentTypeStorageInterface $storage */
     $storage = $this->entityTypeManager->getStorage('group_content_type');
 
     $this->assertNull($plugin_manager->getDefinition('subgroup:grandchild_middle', FALSE), 'No plugin exists any more after removing the group type as a leaf.');
diff --git a/tests/src/Kernel/GroupViewTest.php b/tests/src/Kernel/GroupViewTest.php
index 6446c2d..d0870d4 100644
--- a/tests/src/Kernel/GroupViewTest.php
+++ b/tests/src/Kernel/GroupViewTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\subgroup\Kernel;
 
+use Drupal\subgroup\Entity\GroupTypeSubgroupHandler;
 use Drupal\views\Tests\ViewResultAssertionTrait;
 use Drupal\views\Views;
 
@@ -22,7 +23,7 @@ class GroupViewTest extends SubgroupKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installConfig('subgroup_test_views');
@@ -35,7 +36,7 @@ class GroupViewTest extends SubgroupKernelTestBase {
     $foo->getMemberRole()->grantPermission('view group')->save();
     $bar->getMemberRole()->grantPermission('view group')->save();
 
-    /** @var \Drupal\subgroup\Entity\GroupTypeSubgroupHandler $group_type_handler */
+    /** @var GroupTypeSubgroupHandler $group_type_handler */
     $group_type_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
     $group_type_handler->initTree($foo);
     $group_type_handler->addLeaf($foo, $bar);
diff --git a/tests/src/Kernel/InheritedGroupPermissionCalculatorTest.php b/tests/src/Kernel/InheritedGroupPermissionCalculatorTest.php
index ebf3387..ef6fa38 100644
--- a/tests/src/Kernel/InheritedGroupPermissionCalculatorTest.php
+++ b/tests/src/Kernel/InheritedGroupPermissionCalculatorTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\subgroup\Kernel;
 
+use Drupal\Core\Session\AccountInterface;
+use Drupal\subgroup\Entity\GroupTypeSubgroupHandler;
+use Drupal\subgroup\Entity\GroupSubgroupHandler;
 /**
  * Tests that Subgroup properly hands out group permissions.
  *
@@ -12,14 +15,14 @@ class InheritedGroupPermissionCalculatorTest extends SubgroupKernelTestBase {
   /**
    * The account to use in testing.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Set up some group types to form a tree.
@@ -31,7 +34,7 @@ class InheritedGroupPermissionCalculatorTest extends SubgroupKernelTestBase {
     $gt2->getMemberRole()->grantPermission('view group')->save();
     $gt3->getMemberRole()->grantPermission('view group')->save();
 
-    /** @var \Drupal\subgroup\Entity\GroupTypeSubgroupHandler $group_type_handler */
+    /** @var GroupTypeSubgroupHandler $group_type_handler */
     $group_type_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
     $group_type_handler->initTree($gt1);
     $group_type_handler->addLeaf($gt1, $gt2);
@@ -240,7 +243,7 @@ class InheritedGroupPermissionCalculatorTest extends SubgroupKernelTestBase {
     $group_gt2 = $this->createGroup(['type' => 'gt2']);
     $group_gt1->addMember($this->account);
 
-    /** @var \Drupal\subgroup\Entity\GroupSubgroupHandler $group_handler */
+    /** @var GroupSubgroupHandler $group_handler */
     $group_handler = $this->entityTypeManager->getHandler('group', 'subgroup');
     $group_handler->initTree($group_gt1);
 
diff --git a/tests/src/Kernel/LeafEventsTest.php b/tests/src/Kernel/LeafEventsTest.php
index f543c7b..d953cea 100644
--- a/tests/src/Kernel/LeafEventsTest.php
+++ b/tests/src/Kernel/LeafEventsTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\subgroup\Kernel;
 
+use Drupal\subgroup\Entity\SubgroupHandlerInterface;
 use Drupal\subgroup\Event\LeafEvents;
 
 /**
@@ -22,13 +23,13 @@ class LeafEventsTest extends SubgroupKernelTestBase {
   public function testGroupUpdateEvents() {
     $group_type = $this->createGroupType();
 
-    /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $subgroup_handler */
+    /** @var SubgroupHandlerInterface $subgroup_handler */
     $subgroup_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
     $subgroup_handler->initTree($group_type);
 
     $group = $this->createGroup(['type' => $group_type->id()]);
 
-    /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $subgroup_handler */
+    /** @var SubgroupHandlerInterface $subgroup_handler */
     $subgroup_handler = $this->entityTypeManager->getHandler('group', 'subgroup');
 
     $GLOBALS['group_leaf_events'] = [];
@@ -60,7 +61,7 @@ class LeafEventsTest extends SubgroupKernelTestBase {
   public function testGroupTypeUpdateEvents() {
     $group_type = $this->createGroupType();
 
-    /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $subgroup_handler */
+    /** @var SubgroupHandlerInterface $subgroup_handler */
     $subgroup_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
 
     $GLOBALS['group_type_leaf_events'] = [];
diff --git a/tests/src/Kernel/RoleInheritanceAccessControlHandlerTest.php b/tests/src/Kernel/RoleInheritanceAccessControlHandlerTest.php
index 216f1df..f4b6ba9 100644
--- a/tests/src/Kernel/RoleInheritanceAccessControlHandlerTest.php
+++ b/tests/src/Kernel/RoleInheritanceAccessControlHandlerTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\subgroup\Kernel;
 
+use Drupal\Core\Entity\EntityAccessControlHandlerInterface;
+use Drupal\subgroup\Entity\RoleInheritanceInterface;
+use Drupal\subgroup\Entity\GroupTypeSubgroupHandler;
 use Drupal\Core\Access\AccessResultForbidden;
 
 /**
@@ -15,21 +18,21 @@ class RoleInheritanceAccessControlHandlerTest extends SubgroupKernelTestBase {
   /**
    * The access control handler to use in testing.
    *
-   * @var \Drupal\Core\Entity\EntityAccessControlHandlerInterface
+   * @var EntityAccessControlHandlerInterface
    */
   protected $accessControlHandler;
 
   /**
    * The role inheritance entity to run tests on.
    *
-   * @var \Drupal\subgroup\Entity\RoleInheritanceInterface
+   * @var RoleInheritanceInterface
    */
   protected $roleInheritance;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->accessControlHandler = $this->entityTypeManager->getAccessControlHandler('subgroup_role_inheritance');
@@ -38,7 +41,7 @@ class RoleInheritanceAccessControlHandlerTest extends SubgroupKernelTestBase {
     $foo = $this->createGroupType(['id' => 'foo']);
     $bar = $this->createGroupType(['id' => 'bar']);
 
-    /** @var \Drupal\subgroup\Entity\GroupTypeSubgroupHandler $group_type_handler */
+    /** @var GroupTypeSubgroupHandler $group_type_handler */
     $group_type_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
     $group_type_handler->initTree($foo);
     $group_type_handler->addLeaf($foo, $bar);
@@ -68,7 +71,7 @@ class RoleInheritanceAccessControlHandlerTest extends SubgroupKernelTestBase {
    * @covers ::access
    */
   public function testUpdateAccess() {
-    /** @var \Drupal\Core\Access\AccessResultForbidden $access */
+    /** @var AccessResultForbidden $access */
     $access = $this->accessControlHandler->access($this->roleInheritance, 'update', NULL, TRUE);
     $this->assertInstanceOf(AccessResultForbidden::class, $access, 'Group create access check returned an AccessResultForbidden.');
     $this->assertEquals('Role inheritance entities may not be updated after creation.', $access->getReason());
diff --git a/tests/src/Kernel/RoleInheritanceStorageTest.php b/tests/src/Kernel/RoleInheritanceStorageTest.php
index b37a37d..281c373 100644
--- a/tests/src/Kernel/RoleInheritanceStorageTest.php
+++ b/tests/src/Kernel/RoleInheritanceStorageTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\subgroup\Kernel;
 
+use Drupal\subgroup\Entity\RoleInheritanceStorageInterface;
+use Drupal\group\Entity\GroupTypeInterface;
+use Drupal\subgroup\Entity\GroupTypeSubgroupHandler;
 use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Entity\EntityStorageException;
 use Drupal\subgroup\Entity\RoleInheritanceInterface;
@@ -18,35 +21,35 @@ class RoleInheritanceStorageTest extends SubgroupKernelTestBase {
   /**
    * The role inheritance storage to run tests on.
    *
-   * @var \Drupal\subgroup\Entity\RoleInheritanceStorageInterface
+   * @var RoleInheritanceStorageInterface
    */
   protected $storage;
 
   /**
    * The root group type to run tests on.
    *
-   * @var \Drupal\group\Entity\GroupTypeInterface
+   * @var GroupTypeInterface
    */
   protected $groupTypeRoot;
 
   /**
    * The leaf group type to run tests on.
    *
-   * @var \Drupal\group\Entity\GroupTypeInterface
+   * @var GroupTypeInterface
    */
   protected $groupTypeLeaf;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Set up two group types to form a tree.
     $this->groupTypeRoot = $this->createGroupType(['id' => 'foo']);
     $this->groupTypeLeaf = $this->createGroupType(['id' => 'bar']);
 
-    /** @var \Drupal\subgroup\Entity\GroupTypeSubgroupHandler $group_type_handler */
+    /** @var GroupTypeSubgroupHandler $group_type_handler */
     $group_type_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
     $group_type_handler->initTree($this->groupTypeRoot);
     $group_type_handler->addLeaf($this->groupTypeRoot, $this->groupTypeLeaf);
@@ -178,7 +181,7 @@ class RoleInheritanceStorageTest extends SubgroupKernelTestBase {
   public function testDifferentTreeException() {
     $baz = $this->createGroupType(['id' => 'baz']);
 
-    /** @var \Drupal\subgroup\Entity\GroupTypeSubgroupHandler $group_type_handler */
+    /** @var GroupTypeSubgroupHandler $group_type_handler */
     $group_type_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
     $group_type_handler->initTree($baz);
 
@@ -223,7 +226,7 @@ class RoleInheritanceStorageTest extends SubgroupKernelTestBase {
   public function testNotVerticallyRelatedException() {
     $baz = $this->createGroupType(['id' => 'baz']);
 
-    /** @var \Drupal\subgroup\Entity\GroupTypeSubgroupHandler $group_type_handler */
+    /** @var GroupTypeSubgroupHandler $group_type_handler */
     $group_type_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
     $group_type_handler->addLeaf($this->groupTypeRoot, $baz);
 
@@ -252,7 +255,7 @@ class RoleInheritanceStorageTest extends SubgroupKernelTestBase {
     $this->assertCount(1, $this->storage->loadMultiple());
     $this->assertInstanceOf(RoleInheritanceInterface::class, $this->storage->load('test'));
 
-    /** @var \Drupal\subgroup\Entity\GroupTypeSubgroupHandler $group_type_handler */
+    /** @var GroupTypeSubgroupHandler $group_type_handler */
     $group_type_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
     $group_type_handler->removeLeaf($this->groupTypeLeaf);
 
diff --git a/tests/src/Kernel/RoleInheritanceTest.php b/tests/src/Kernel/RoleInheritanceTest.php
index f12ab25..f9e5036 100644
--- a/tests/src/Kernel/RoleInheritanceTest.php
+++ b/tests/src/Kernel/RoleInheritanceTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\subgroup\Kernel;
 
+use Drupal\subgroup\Entity\RoleInheritanceInterface;
+use Drupal\subgroup\Entity\GroupTypeSubgroupHandler;
 use Drupal\Core\Cache\Cache;
 
 /**
@@ -15,21 +17,21 @@ class RoleInheritanceTest extends SubgroupKernelTestBase {
   /**
    * The role inheritance entity to run tests on.
    *
-   * @var \Drupal\subgroup\Entity\RoleInheritanceInterface
+   * @var RoleInheritanceInterface
    */
   protected $roleInheritance;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Set up two group types to form a tree.
     $foo = $this->createGroupType(['id' => 'foo']);
     $bar = $this->createGroupType(['id' => 'bar']);
 
-    /** @var \Drupal\subgroup\Entity\GroupTypeSubgroupHandler $group_type_handler */
+    /** @var GroupTypeSubgroupHandler $group_type_handler */
     $group_type_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
     $group_type_handler->initTree($foo);
     $group_type_handler->addLeaf($foo, $bar);
diff --git a/tests/src/Kernel/SubgroupAccessControlHandlerTest.php b/tests/src/Kernel/SubgroupAccessControlHandlerTest.php
index 6aa2484..06607a4 100644
--- a/tests/src/Kernel/SubgroupAccessControlHandlerTest.php
+++ b/tests/src/Kernel/SubgroupAccessControlHandlerTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\subgroup\Kernel;
 
+use Drupal\subgroup\Entity\GroupTypeSubgroupHandler;
+use Drupal\group\Plugin\GroupContentEnablerManagerInterface;
 use Drupal\group\Plugin\GroupContentAccessControlHandler;
 
 /**
@@ -19,12 +21,12 @@ class SubgroupAccessControlHandlerTest extends SubgroupKernelTestBase {
     $group_type_1 = $this->createGroupType(['creator_membership' => FALSE]);
     $group_type_2 = $this->createGroupType(['creator_membership' => FALSE]);
 
-    /** @var \Drupal\subgroup\Entity\GroupTypeSubgroupHandler $group_type_handler */
+    /** @var GroupTypeSubgroupHandler $group_type_handler */
     $group_type_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
     $group_type_handler->initTree($group_type_1);
     $group_type_handler->addLeaf($group_type_1, $group_type_2);
 
-    /** @var \Drupal\group\Plugin\GroupContentEnablerManagerInterface $plugin_manager */
+    /** @var GroupContentEnablerManagerInterface $plugin_manager */
     $plugin_manager = $this->container->get('plugin.manager.group_content_enabler');
     $plugin_id = 'subgroup:' . $group_type_2->id();
 
diff --git a/tests/src/Kernel/SubgroupFieldManagerTest.php b/tests/src/Kernel/SubgroupFieldManagerTest.php
index 1f44e63..4b8f057 100644
--- a/tests/src/Kernel/SubgroupFieldManagerTest.php
+++ b/tests/src/Kernel/SubgroupFieldManagerTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\subgroup\Kernel;
 
+use Drupal\subgroup\SubgroupFieldManagerInterface;
+use Drupal\group\Entity\GroupTypeInterface;
 /**
  * Tests the Subgroup field manager.
  *
@@ -13,14 +15,14 @@ class SubgroupFieldManagerTest extends SubgroupKernelTestBase {
   /**
    * The subgroup field manager to test.
    *
-   * @var \Drupal\subgroup\SubgroupFieldManagerInterface
+   * @var SubgroupFieldManagerInterface
    */
   protected $fieldManager;
 
   /**
    * The group type to run tests on.
    *
-   * @var \Drupal\group\Entity\GroupTypeInterface
+   * @var GroupTypeInterface
    */
   protected $groupType;
 
@@ -34,7 +36,7 @@ class SubgroupFieldManagerTest extends SubgroupKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->fieldManager = $this->container->get('subgroup.field_manager');
     $this->groupType = $this->createGroupType();
diff --git a/tests/src/Kernel/SubgroupKernelTestBase.php b/tests/src/Kernel/SubgroupKernelTestBase.php
index 16b15d8..c45b272 100644
--- a/tests/src/Kernel/SubgroupKernelTestBase.php
+++ b/tests/src/Kernel/SubgroupKernelTestBase.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\Tests\subgroup\Kernel;
 
+use Drupal\Core\Entity\ContentEntityStorageInterface;
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\group\Entity\Group;
+use Drupal\group\Entity\GroupType;
 use Drupal\group\Entity\GroupInterface;
 use Drupal\group\Entity\GroupTypeInterface;
 use Drupal\KernelTests\Core\Entity\EntityKernelTestBase;
@@ -19,21 +24,21 @@ abstract class SubgroupKernelTestBase extends EntityKernelTestBase {
   /**
    * The group storage to use in testing.
    *
-   * @var \Drupal\Core\Entity\ContentEntityStorageInterface
+   * @var ContentEntityStorageInterface
    */
   protected $groupStorage;
 
   /**
    * The group type storage to use in testing.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $groupTypeStorage;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installEntitySchema('group');
@@ -51,7 +56,7 @@ abstract class SubgroupKernelTestBase extends EntityKernelTestBase {
   /**
    * Gets the current user so you can run some checks against them.
    *
-   * @return \Drupal\Core\Session\AccountInterface
+   * @return AccountInterface
    *   The current user.
    */
   protected function getCurrentUser() {
@@ -64,7 +69,7 @@ abstract class SubgroupKernelTestBase extends EntityKernelTestBase {
    * @param array $values
    *   (optional) The values used to create the entity.
    *
-   * @return \Drupal\group\Entity\Group
+   * @return Group
    *   The created group entity.
    */
   protected function createGroup(array $values = []) {
@@ -83,7 +88,7 @@ abstract class SubgroupKernelTestBase extends EntityKernelTestBase {
    * @param array $values
    *   (optional) The values used to create the entity.
    *
-   * @return \Drupal\group\Entity\GroupType
+   * @return GroupType
    *   The created group type entity.
    */
   protected function createGroupType(array $values = []) {
@@ -98,7 +103,7 @@ abstract class SubgroupKernelTestBase extends EntityKernelTestBase {
   /**
    * Writes the provided leaf data onto the group.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   The group to write the data onto.
    * @param int $depth
    *   The depth.
@@ -121,7 +126,7 @@ abstract class SubgroupKernelTestBase extends EntityKernelTestBase {
   /**
    * Writes the provided leaf data onto the group type.
    *
-   * @param \Drupal\group\Entity\GroupTypeInterface $group_type
+   * @param GroupTypeInterface $group_type
    *   The group type to write the data onto.
    * @param int $depth
    *   The depth.
@@ -144,7 +149,7 @@ abstract class SubgroupKernelTestBase extends EntityKernelTestBase {
   /**
    * Clears the leaf data from the group.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   The group to clear the data from.
    */
   protected function clearGroupLeafData(GroupInterface $group) {
@@ -159,7 +164,7 @@ abstract class SubgroupKernelTestBase extends EntityKernelTestBase {
   /**
    * Clears the leaf data from the group type.
    *
-   * @param \Drupal\group\Entity\GroupTypeInterface $group_type
+   * @param GroupTypeInterface $group_type
    *   The group type to clear the data from.
    */
   protected function clearGroupTypeLeafData(GroupTypeInterface $group_type) {
@@ -174,7 +179,7 @@ abstract class SubgroupKernelTestBase extends EntityKernelTestBase {
   /**
    * Toggles the tree leaf status of the group type.
    *
-   * @param \Drupal\group\Entity\GroupTypeInterface $group_type
+   * @param GroupTypeInterface $group_type
    *   The group type to toggle the status for.
    * @param bool $is_tree
    *   Whether the group type acts as a tree leaf or not.
diff --git a/tests/src/Kernel/SubgroupPermissionProviderTest.php b/tests/src/Kernel/SubgroupPermissionProviderTest.php
index d2d162d..a930b72 100644
--- a/tests/src/Kernel/SubgroupPermissionProviderTest.php
+++ b/tests/src/Kernel/SubgroupPermissionProviderTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\subgroup\Kernel;
 
+use Drupal\subgroup\Entity\GroupTypeSubgroupHandler;
+use Drupal\group\Plugin\GroupContentEnablerManagerInterface;
 use Drupal\group\Plugin\GroupContentPermissionProvider;
 
 /**
@@ -19,12 +21,12 @@ class SubgroupPermissionProviderTest extends SubgroupKernelTestBase {
     $group_type_1 = $this->createGroupType();
     $group_type_2 = $this->createGroupType();
 
-    /** @var \Drupal\subgroup\Entity\GroupTypeSubgroupHandler $group_type_handler */
+    /** @var GroupTypeSubgroupHandler $group_type_handler */
     $group_type_handler = $this->entityTypeManager->getHandler('group_type', 'subgroup');
     $group_type_handler->initTree($group_type_1);
     $group_type_handler->addLeaf($group_type_1, $group_type_2);
 
-    /** @var \Drupal\group\Plugin\GroupContentEnablerManagerInterface $plugin_manager */
+    /** @var GroupContentEnablerManagerInterface $plugin_manager */
     $plugin_manager = $this->container->get('plugin.manager.group_content_enabler');
     $plugin_id = 'subgroup:' . $group_type_2->id();
 
diff --git a/tests/src/Unit/GroupTypeLeafSubscriberTest.php b/tests/src/Unit/GroupTypeLeafSubscriberTest.php
index f31974f..6459599 100644
--- a/tests/src/Unit/GroupTypeLeafSubscriberTest.php
+++ b/tests/src/Unit/GroupTypeLeafSubscriberTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\subgroup\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ProphecyInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\group\Entity\GroupContentTypeInterface;
 use Drupal\group\Entity\GroupTypeInterface;
@@ -24,45 +26,46 @@ use Drupal\Tests\UnitTestCase;
  */
 class GroupTypeLeafSubscriberTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The event subscriber to test.
    *
-   * @var \Drupal\subgroup\EventSubscriber\GroupTypeLeafSubscriber
+   * @var GroupTypeLeafSubscriber
    */
   protected $eventSubscriber;
 
   /**
    * The entity type manager to run tests on.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var EntityTypeManagerInterface|ProphecyInterface
    */
   protected $entityTypeManager;
 
   /**
    * The subgroup handler for group types to run tests on.
    *
-   * @var \Drupal\subgroup\Entity\SubgroupHandlerInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var SubgroupHandlerInterface|ProphecyInterface
    */
   protected $subgroupHandler;
 
   /**
    * The group content enabler plugin manager to run tests on.
    *
-   * @var \Drupal\group\Plugin\GroupContentEnablerManagerInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var GroupContentEnablerManagerInterface|ProphecyInterface
    */
   protected $pluginManager;
 
   /**
    * The subgroup field manager to run tests on.
    *
-   * @var \Drupal\subgroup\SubgroupFieldManagerInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var SubgroupFieldManagerInterface|ProphecyInterface
    */
   protected $fieldManager;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->subgroupHandler = $this->prophesize(SubgroupHandlerInterface::class);
diff --git a/tests/src/Unit/SubgroupHandlerBaseTest.php b/tests/src/Unit/SubgroupHandlerBaseTest.php
index bdb768b..e47ee83 100644
--- a/tests/src/Unit/SubgroupHandlerBaseTest.php
+++ b/tests/src/Unit/SubgroupHandlerBaseTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\subgroup\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ProphecyInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -21,31 +23,32 @@ use Drupal\Tests\UnitTestCase;
  */
 class SubgroupHandlerBaseTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The base subgroup handler.
    *
-   * @var \Drupal\subgroup\Entity\SubgroupHandlerBase
+   * @var SubgroupHandlerBase
    */
   protected $subgroupHandler;
 
   /**
    * The entity to run tests on.
    *
-   * @var \Drupal\Core\Entity\EntityInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var EntityInterface|ProphecyInterface
    */
   protected $entity;
 
   /**
    * The entity type to run tests on.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var EntityTypeInterface|ProphecyInterface
    */
   protected $entityType;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->entity = $this->prophesize(EntityInterface::class);
diff --git a/tests/src/Unit/TreeCacheTagInvalidatorTest.php b/tests/src/Unit/TreeCacheTagInvalidatorTest.php
index ea87aa7..1bd0647 100644
--- a/tests/src/Unit/TreeCacheTagInvalidatorTest.php
+++ b/tests/src/Unit/TreeCacheTagInvalidatorTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\subgroup\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ProphecyInterface;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\group\Entity\GroupInterface;
@@ -21,45 +23,46 @@ use Drupal\Tests\UnitTestCase;
  */
 class TreeCacheTagInvalidatorTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The event subscriber to test.
    *
-   * @var \Drupal\subgroup\EventSubscriber\TreeCacheTagInvalidator
+   * @var TreeCacheTagInvalidator
    */
   protected $eventSubscriber;
 
   /**
    * The entity type manager to use in testing.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var EntityTypeManagerInterface|ProphecyInterface
    */
   protected $entityTypeManager;
 
   /**
    * The group subgroup handler to use in testing.
    *
-   * @var \Drupal\subgroup\Entity\SubgroupHandlerInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var SubgroupHandlerInterface|ProphecyInterface
    */
   protected $groupSubgroupHandler;
 
   /**
    * The group type subgroup handler to use in testing.
    *
-   * @var \Drupal\subgroup\Entity\SubgroupHandlerInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var SubgroupHandlerInterface|ProphecyInterface
    */
   protected $groupTypeSubgroupHandler;
 
   /**
    * The cache tags invalidator to use in testing.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var CacheTagsInvalidatorInterface|ProphecyInterface
    */
   protected $cacheTagsInvalidator;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->groupSubgroupHandler = $this->prophesize(SubgroupHandlerInterface::class);
