modules/contrib/file_download/file_download.module
modules/contrib/file_download/modules/file_download_counter/file_download_counter.install
modules/contrib/file_download/modules/file_download_counter/file_download_counter.module
modules/contrib/file_download/modules/file_download_counter/file_download_counter.tokens.inc
modules/contrib/file_download/modules/file_download_counter/file_download_counter.views.inc
modules/contrib/file_download/modules/file_download_counter/src/FileDownloadSettingsForm.php
modules/contrib/file_download/modules/file_download_counter/src/Plugin/Block/FileDownloadPopularBlock.php
modules/contrib/file_download/modules/file_download_counter/src/Plugin/views/field/FileDownloadCounterTimestamp.php
modules/contrib/file_download/modules/file_download_counter/src/Plugin/views/field/FileDownloadNumeric.php
modules/contrib/file_download/src/Controller/FileDownloadDownloadController.php
modules/contrib/file_download/src/Plugin/Field/FieldFormatter/FileDownloadFieldFormatter.php
modules/contrib/file_download/src/Plugin/Field/FieldFormatter/FileDownloadUriFieldFormatter.php

4 files with changes
====================

1) modules/contrib/file_download/src/Controller/FileDownloadDownloadController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\file_download\Controller;

+use Symfony\Component\HttpFoundation\Response;
+use Symfony\Component\HttpKernel\Exception\ServiceUnavailableHttpException;
 use Drupal\system\FileDownloadController;
 use Symfony\Component\HttpFoundation\BinaryFileResponse;
 use Symfony\Component\HttpFoundation\Request;
@@ @@
   /**
    * Generates a download.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    * @param string $scheme
    *   The file scheme, defaults to 'private'.
@@ @@
    * @param \Drupal\file\Entity $fid
    *   The file id.
    *
-   * @return \Symfony\Component\HttpFoundation\BinaryFileResponse|\Symfony\Component\HttpFoundation\Response
+   * @return BinaryFileResponse|Response
    *   The transferred file as response or some error response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException
+   * @throws AccessDeniedHttpException
    *   Thrown when the user does not have access to the file.
-   * @throws \Symfony\Component\HttpKernel\Exception\ServiceUnavailableHttpException
+   * @throws ServiceUnavailableHttpException
    *   Thrown when the file is still being generated.
    */
   public function deliver(Request $request, $scheme, $fid) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/file_download/modules/file_download_counter/src/FileDownloadSettingsForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructs a \Drupal\user\StatisticsSettingsForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/file_download/modules/file_download_counter/file_download_counter.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Component\Utility\Xss;
+use Drupal\Component\Utility\Html;
+use Drupal\core\Database\Database;
 /**
  * @file
  * Logs and displays content file_download_counter for a site.
@@ @@
 function file_download_counter_help($route_name, RouteMatchInterface $route_match) {
   switch ($route_name) {
     case 'help.page.file_download_counter':
-      $output = file_get_contents(drupal_get_path('module', 'file_download_counter') . '/README.md');
-      return \Drupal::moduleHandler()->moduleExists('markdown') ? \Drupal\Component\Utility\Xss::filterAdmin(\Drupal::moduleHandler()->invoke('markdown', 'filter', ['process', 0, -1, $output])) : '<h3>file_download README</h3><pre>' . \Drupal\Component\Utility\Html::escape($output) . '</pre>';
+      $output = file_get_contents(\Drupal::service('extension.list.module')->getPath('file_download_counter') . '/README.md');
+      return \Drupal::moduleHandler()->moduleExists('markdown') ? Xss::filterAdmin(\Drupal::moduleHandler()->invoke('markdown', 'filter', ['process', 0, -1, $output])) : '<h3>file_download README</h3><pre>' . Html::escape($output) . '</pre>';
   }
 }

@@ @@

   if ($fid > 0) {
     // Retrieve an array with both totalcount and daycount.
-     return \Drupal\core\Database\Database::getConnection('replica')->query('SELECT totalcount, daycount, timestamp FROM {file_download_counter} WHERE fid = :fid', [':fid' => $fid], [])->fetchAssoc();
+     return Database::getConnection('replica')->query('SELECT totalcount, daycount, timestamp FROM {file_download_counter} WHERE fid = :fid', [':fid' => $fid], [])->fetchAssoc();
   }
 }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


4) modules/contrib/file_download/file_download.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\node\NodeInterface;
 /**
  * @file
  * @file
@@ @@
 function file_download_help($route_name, RouteMatchInterface $arg) {
   switch ($route_name) {
     case 'help.page.file_download':
-      $output = file_get_contents(drupal_get_path('module', 'file_download') . '/README.md');
+      $output = file_get_contents(\Drupal::service('extension.list.module')->getPath('file_download') . '/README.md');

       return \Drupal::moduleHandler()->moduleExists('markdown') ? Xss::filterAdmin(\Drupal::moduleHandler()->invoke('markdown', 'filter', ['process', 0, -1, $output])) : '<h3>file_download README</h3><pre>' . Html::escape($output) . '</pre>';
   }
@@ @@
   // To ensure different file URLs are generated for different sites in a.
   // Multisite setup, including HTTP and HTTPS versions of the same site.
   // Fix in https://www.drupal.org/node/2646744.
-  $url = file_create_url($file_entity->getFileUri());
+  $url = \Drupal::service('file_url_generator')->generateAbsoluteString($file_entity->getFileUri());
   $variables['#cache']['contexts'][] = 'url.site';

   $mime_type = $file->getMimeType();
@@ @@
   $replacements = [];

   if ($type == 'file' && !empty($data['file'])) {
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $file = $data['file'];

     foreach ($tokens as $name => $original) {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileCreateUrlRector
 * ArgumentRemoverRector


 [OK] 4 files have been changed by Rector                                       

