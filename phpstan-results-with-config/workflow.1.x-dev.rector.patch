diff --git a/modules/workflow_access/src/Form/WorkflowAccessRoleForm.php b/modules/workflow_access/src/Form/WorkflowAccessRoleForm.php
index 3b2a0e9..c469a77 100644
--- a/modules/workflow_access/src/Form/WorkflowAccessRoleForm.php
+++ b/modules/workflow_access/src/Form/WorkflowAccessRoleForm.php
@@ -60,7 +60,7 @@ class WorkflowAccessRoleForm extends WorkflowConfigTransitionFormBase {
 
     $workflow = $this->workflow;
     if ($workflow) {
-      /** @var \Drupal\workflow\Entity\WorkflowState $state */
+      /** @var WorkflowState $state */
       $state = $entity;
       $sid = $state->id();
 
diff --git a/modules/workflow_access/workflow_access.module b/modules/workflow_access/workflow_access.module
index 8ea6dd4..e6ec8d7 100644
--- a/modules/workflow_access/workflow_access.module
+++ b/modules/workflow_access/workflow_access.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\user\RoleInterface;
+use Drupal\workflow\Entity\WorkflowTransitionInterface;
 /**
  * @file
  * Provides node access permissions based on workflow states.
@@ -82,19 +84,19 @@ function workflow_access_workflow_operations($op, EntityInterface $entity = NULL
 function workflow_access_user_role_insert(EntityInterface $entity) {
   // Attend user to Rebuild data, because the weight of a role
   // is the key for workflow_Access.
-  /** @var \Drupal\user\RoleInterface $entity */
+  /** @var RoleInterface $entity */
   node_access_needs_rebuild(TRUE);
 }
 
 /**
  * Implements hook_access_ENTITY_TYPE_update().
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  */
 function workflow_access_user_role_update(EntityInterface $entity) {
   // Attend user to Rebuild data, because the weight of a role
   // is the key for workflow_Access.
-  /** @var \Drupal\user\RoleInterface $entity */
+  /** @var RoleInterface $entity */
   if ($entity->getWeight() != $entity->original->getWeight()) {
     // Role's weight has changed.
     node_access_needs_rebuild(TRUE);
@@ -133,7 +135,7 @@ function workflow_access_get_role_gid($rid) {
   //
   // Return a weight, avoiding negative values by starting with 100.
   // For 'Author', no role exists.
-  /** @var \Drupal\user\RoleInterface $role */
+  /** @var RoleInterface $role */
   $role = Role::load($rid);
   $weight = $role ? 100 + $role->getWeight() : 100 - 20;
 
@@ -184,7 +186,7 @@ function workflow_access_node_access_records(NodeInterface $node) {
         // Create a dummy transition, just to set $workflow_transitions.
         $old_sid = $new_sid = $translation->{$field_name}->value;
         if ($old_sid) {
-          /** @var \Drupal\workflow\Entity\WorkflowTransitionInterface $transition */
+          /** @var WorkflowTransitionInterface $transition */
           $transition = WorkflowTransition::create([$old_sid, 'field_name' => $field_name]);
           $transition->setTargetEntity($translation);
           $transition->setValues($new_sid, $translation->getOwnerId(), \Drupal::time()->getRequestTime(), '');
diff --git a/modules/workflow_cleanup/src/Form/WorkflowCleanupSettingsForm.php b/modules/workflow_cleanup/src/Form/WorkflowCleanupSettingsForm.php
index f66b566..379dd74 100644
--- a/modules/workflow_cleanup/src/Form/WorkflowCleanupSettingsForm.php
+++ b/modules/workflow_cleanup/src/Form/WorkflowCleanupSettingsForm.php
@@ -31,7 +31,7 @@ class WorkflowCleanupSettingsForm extends FormBase {
     $orphans = $inactive = [];
 
     /** @var \Drupal\workflow\Entity\WorkflowState[] $states */
-    /** @var \Drupal\workflow\Entity\WorkflowState $state */
+    /** @var WorkflowState $state */
     $states = WorkflowState::loadMultiple();
 
     foreach ($states as $state) {
@@ -108,14 +108,14 @@ class WorkflowCleanupSettingsForm extends FormBase {
           continue;
         }
 
-        /** @var \Drupal\workflow\Entity\WorkflowState $state */
+        /** @var WorkflowState $state */
         $state = $states[$sid];
         $state_name = $state->label();
 
         // Delete any transitions this state is involved in.
         $count = 0;
         foreach (WorkflowConfigTransition::loadMultiple() as $config_transition) {
-          /** @var \Drupal\workflow\Entity\WorkflowConfigTransition $config_transition */
+          /** @var WorkflowConfigTransition $config_transition */
           if ($config_transition->getFromSid() == $sid || $config_transition->getToSid() == $sid) {
             $config_transition->delete();
             $count++;
diff --git a/src/Access/WorkflowHistoryAccess.php b/src/Access/WorkflowHistoryAccess.php
index d781d47..4deb32a 100644
--- a/src/Access/WorkflowHistoryAccess.php
+++ b/src/Access/WorkflowHistoryAccess.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\workflow\Access;
 
+use Drupal\Core\Access\AccessResultAllowed;
+use Drupal\Core\Access\AccessResultForbidden;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ -17,14 +19,14 @@ class WorkflowHistoryAccess implements AccessInterface {
   /**
    * Check if the user has permissions to view this workflow.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Current user account.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $routeMatch
+   * @param RouteMatchInterface $routeMatch
    *   Current routeMatch.
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   Current route.
    *
-   * @return \Drupal\Core\Access\AccessResultAllowed|\Drupal\Core\Access\AccessResultForbidden
+   * @return AccessResultAllowed|AccessResultForbidden
    *   If the user can access to this workflow.
    */
   public function access(AccountInterface $account, RouteMatchInterface $routeMatch, Route $route) {
diff --git a/src/Controller/WorkflowTransitionListController.php b/src/Controller/WorkflowTransitionListController.php
index 407d528..8fbdc1e 100644
--- a/src/Controller/WorkflowTransitionListController.php
+++ b/src/Controller/WorkflowTransitionListController.php
@@ -20,32 +20,32 @@ class WorkflowTransitionListController extends EntityListController implements C
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;
 
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * Constructs an object.
    *
-   * @param \Drupal\Core\Datetime\DateFormatter $date_formatter
+   * @param DateFormatter $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    */
   public function __construct(DateFormatter $date_formatter, ModuleHandlerInterface $module_handler, RendererInterface $renderer) {
@@ -69,7 +69,7 @@ class WorkflowTransitionListController extends EntityListController implements C
   /**
    * Shows a list of an entity's state transitions, but only if WorkflowHistoryAccess::access() allows it.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $node
+   * @param EntityInterface $node
    *   A node object.
    *
    * @return array
diff --git a/src/Element/WorkflowTransitionElement.php b/src/Element/WorkflowTransitionElement.php
index ebe2b5c..0a6ad85 100644
--- a/src/Element/WorkflowTransitionElement.php
+++ b/src/Element/WorkflowTransitionElement.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\workflow\Element;
 
+use Drupal\workflow\Entity\WorkflowTransitionInterface;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\user\UserInterface;
+use Drupal\Core\Field\Entity\BaseFieldOverride;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -29,7 +33,7 @@ class WorkflowTransitionElement extends FormElement {
    * This function is referenced in the Annotation for this class.
    *
    * @param array $element
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    * @param array $complete_form
    *
    * @return array
@@ -49,7 +53,7 @@ class WorkflowTransitionElement extends FormElement {
    *
    * @param array $element
    *   Reference to the form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    * @param array $complete_form
    *
    * @return array
@@ -65,9 +69,9 @@ class WorkflowTransitionElement extends FormElement {
      * Input.
      */
     // A Transition object must have been set explicitly.
-    /** @var \Drupal\workflow\Entity\WorkflowTransitionInterface $transition */
+    /** @var WorkflowTransitionInterface $transition */
     $transition = $element['#default_value'];
-    /** @var \Drupal\Core\Session\AccountInterface $user */
+    /** @var AccountInterface $user */
     $user = \Drupal::currentUser();
 
     /*
@@ -402,18 +406,18 @@ class WorkflowTransitionElement extends FormElement {
    * - parameter 1 is returned as result, to be able to create a new Transition object.
    * - parameter 3 is not $form_state (from Form), but an $item array (from Widget).
    *
-   * @param \Drupal\Core\Entity\EntityInterface $transition
+   * @param EntityInterface $transition
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    * @param array $item
    *
-   * @return \Drupal\workflow\Entity\WorkflowTransitionInterface
+   * @return WorkflowTransitionInterface
    *   A new Transition object.
    */
   public static function copyFormValuesToTransition(EntityInterface $transition, array $form, FormStateInterface $form_state, array $item) {
     /** @var \Drupal\workflow\Entity\WorkflowTransitionInterface $transition */
     // @todo #2287057: verify if submit() really is only used for UI. If not, $user must be passed.
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     $user = workflow_current_user();
 
     /*
@@ -498,7 +502,7 @@ class WorkflowTransitionElement extends FormElement {
       $transition_entity = $transition->getTargetEntity();
       $field_name = $transition->getFieldName();
       $from_sid = $transition->getFromSid();
-      /** @var \Drupal\workflow\Entity\WorkflowTransitionInterface $transition */
+      /** @var WorkflowTransitionInterface $transition */
       $transition = WorkflowScheduledTransition::create([$from_sid, 'field_name' => $field_name]);
       $transition->setTargetEntity($transition_entity);
       $transition->setValues($to_sid, $user->id(), $timestamp, $comment);
@@ -517,7 +521,7 @@ class WorkflowTransitionElement extends FormElement {
     // but only with a hack on a widget.
     // @todo Attached fields are not supported in ScheduledTransitions.
     $fields = WorkflowManager::getAttachedFields('workflow_transition', $transition->bundle());
-    /** @var \Drupal\Core\Field\Entity\BaseFieldOverride $field */
+    /** @var BaseFieldOverride $field */
     foreach ($fields as $field_name => $field) {
       $user_input = isset($form_state->getUserInput()[$field_name]) ? $form_state->getUserInput()[$field_name] : [];
       if (isset($item[$field_name])) {
diff --git a/src/Entity/Workflow.php b/src/Entity/Workflow.php
index dfdc062..c64f03e 100644
--- a/src/Entity/Workflow.php
+++ b/src/Entity/Workflow.php
@@ -86,7 +86,7 @@ class Workflow extends ConfigEntityBase implements WorkflowInterface {
   /**
    * The workflow-specific creation state.
    *
-   * @var \Drupal\workflow\Entity\WorkflowState
+   * @var WorkflowState
    */
   private $creation_state = NULL;
   /**
@@ -98,13 +98,13 @@ class Workflow extends ConfigEntityBase implements WorkflowInterface {
   /**
    * Attached States.
    *
-   * @var \Drupal\workflow\Entity\WorkflowState[]
+   * @var WorkflowState[]
    */
   public $states = [];
   /**
    * Attached Transitions.
    *
-   * @var \Drupal\workflow\Entity\WorkflowConfigTransitionInterface[]
+   * @var WorkflowConfigTransitionInterface[]
    */
   public $transitions = [];
   /**
@@ -244,7 +244,7 @@ class Workflow extends ConfigEntityBase implements WorkflowInterface {
    */
   public function createState($sid, $save = TRUE) {
     $wid = $this->id();
-    /** @var \Drupal\workflow\Entity\WorkflowState $state */
+    /** @var WorkflowState $state */
     $state = WorkflowState::load($sid);
     if (!$state || $wid != $state->getWorkflowId()) {
       $values = ['id' => $sid, 'wid' => $wid];
@@ -322,7 +322,7 @@ class Workflow extends ConfigEntityBase implements WorkflowInterface {
    */
   public function getNextSid(EntityInterface $entity, $field_name, AccountInterface $user, $force = FALSE) {
     $current_sid = WorkflowManager::getCurrentStateId($entity, $field_name);
-    /** @var \Drupal\workflow\Entity\WorkflowState $current_state */
+    /** @var WorkflowState $current_state */
     $current_state = WorkflowState::load($current_sid);
     $options = $current_state->getOptions($entity, $field_name, $user, $force);
     // Loop over every option. To find the next one.
@@ -444,7 +444,7 @@ class Workflow extends ConfigEntityBase implements WorkflowInterface {
       $this->sortTransitions();
     }
 
-    /** @var \Drupal\workflow\Entity\WorkflowConfigTransition $config_transition */
+    /** @var WorkflowConfigTransition $config_transition */
     foreach ($this->transitions as &$config_transition) {
       if (!isset($states[$config_transition->getFromSid()])) {
         // Not a valid transition for this workflow. @todo Delete them.
diff --git a/src/Entity/WorkflowConfigTransition.php b/src/Entity/WorkflowConfigTransition.php
index 405b3b2..b375e8d 100644
--- a/src/Entity/WorkflowConfigTransition.php
+++ b/src/Entity/WorkflowConfigTransition.php
@@ -158,7 +158,7 @@ class WorkflowConfigTransition extends ConfigEntityBase implements WorkflowConfi
     // Sort the entities using the entity class's sort() method.
     // See \Drupal\Core\Config\Entity\ConfigEntityBase::sort().
     /** @var \Drupal\workflow\Entity\WorkflowTransitionInterface $a */
-    /** @var \Drupal\workflow\Entity\WorkflowTransitionInterface $b */
+    /** @var WorkflowTransitionInterface $b */
     if (!$a->getFromSid() || !$b->getFromSid()) {
       return 0;
     }
diff --git a/src/Entity/WorkflowConfigTransitionInterface.php b/src/Entity/WorkflowConfigTransitionInterface.php
index 84e4085..a152adf 100644
--- a/src/Entity/WorkflowConfigTransitionInterface.php
+++ b/src/Entity/WorkflowConfigTransitionInterface.php
@@ -21,7 +21,7 @@ interface WorkflowConfigTransitionInterface {
    * - in permissions;
    * - by permission hooks, implemented by other modules.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user to act upon.
    *   May have the custom WORKFLOW_ROLE_AUTHOR_RID role.
    * @param bool $force
diff --git a/src/Entity/WorkflowInterface.php b/src/Entity/WorkflowInterface.php
index 6eee84b..59f9c8a 100644
--- a/src/Entity/WorkflowInterface.php
+++ b/src/Entity/WorkflowInterface.php
@@ -51,7 +51,7 @@ interface WorkflowInterface {
    *   with Transitions, and they rely on State IDs which are generated
    *   magically when saving the State. But you may need a temporary state.
    *
-   * @return \Drupal\workflow\Entity\WorkflowState
+   * @return WorkflowState
    *   The new state.
    */
   public function createState($sid, $save = TRUE);
@@ -72,10 +72,10 @@ interface WorkflowInterface {
    * Uses WorkflowState::getOptions(), because this does an access check.
    * The first State ID is user-dependent!
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity at hand. May be NULL (E.g., on a Field settings page).
    * @param string $field_name
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    * @param bool $force
    *
    * @return string
@@ -86,10 +86,10 @@ interface WorkflowInterface {
   /**
    * Returns the next state for the current state.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity at hand.
    * @param string $field_name
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    * @param bool $force
    *
    * @return string
@@ -109,7 +109,7 @@ interface WorkflowInterface {
    *   - 'CREATION' = only Active states, including Creation.
    * @param bool $reset
    *
-   * @return \Drupal\workflow\Entity\WorkflowState[]
+   * @return WorkflowState[]
    *   An array of WorkflowState objects.
    */
   public function getStates($all = FALSE, $reset = FALSE);
@@ -120,7 +120,7 @@ interface WorkflowInterface {
    * @param string $sid
    *   A state ID.
    *
-   * @return \Drupal\workflow\Entity\WorkflowState
+   * @return WorkflowState
    *   A WorkflowState object.
    */
   public function getState($sid);
@@ -132,7 +132,7 @@ interface WorkflowInterface {
    * @param string $to_sid
    * @param array $values
    *
-   * @return \Drupal\workflow\Entity\WorkflowConfigTransitionInterface
+   * @return WorkflowConfigTransitionInterface
    */
   public function createTransition($from_sid, $to_sid, array $values = []);
 
@@ -152,7 +152,7 @@ interface WorkflowInterface {
    *   $conditions['from_sid'] : if provided, a 'from' State ID.
    *   $conditions['to_sid'] : if provided, a 'to' state ID.
    *
-   * @return \Drupal\workflow\Entity\WorkflowConfigTransition[]
+   * @return WorkflowConfigTransition[]
    */
   public function getTransitions(array $ids = NULL, array $conditions = []);
 
@@ -164,7 +164,7 @@ interface WorkflowInterface {
    * @param string $from_sid
    * @param string $to_sid
    *
-   * @return \Drupal\workflow\Entity\WorkflowConfigTransition[]
+   * @return WorkflowConfigTransition[]
    */
   public function getTransitionsByStateId($from_sid, $to_sid);
 
diff --git a/src/Entity/WorkflowManager.php b/src/Entity/WorkflowManager.php
index 9c933ee..96d560b 100644
--- a/src/Entity/WorkflowManager.php
+++ b/src/Entity/WorkflowManager.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\workflow\Entity;
 
+use Drupal\Core\Config\Config;
+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\Core\Entity\EntityFormBuilder;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ -24,52 +27,52 @@ class WorkflowManager implements WorkflowManagerInterface {
   /**
    * The entity_field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The entity_type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The user settings config object.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $userConfig;
 
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * Construct the WorkflowManager object as a service.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity_field manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type manager service.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    *
    * @see workflow.services.yml
@@ -149,7 +152,7 @@ class WorkflowManager implements WorkflowManagerInterface {
 
     foreach (workflow_get_workflow_field_names($entity) as $field_name) {
       // Transition is created in widget or WorkflowTransitionForm.
-      /** @var \Drupal\workflow\Entity\WorkflowTransitionInterface $transition */
+      /** @var WorkflowTransitionInterface $transition */
       $transition = $entity->{$field_name}->__get('workflow_transition');
       if (!$transition) {
         // We come from creating/editing an entity via entity_form, with core widget or hidden Workflow widget.
@@ -166,7 +169,7 @@ class WorkflowManager implements WorkflowManagerInterface {
         $old_sid = WorkflowManager::getPreviousStateId($entity, $field_name);
         $new_sid = $entity->{$field_name}->value;
         if ((!$new_sid) && $wid = $entity->{$field_name}->getSetting('workflow_type')) {
-          /** @var \Drupal\workflow\Entity\Workflow $workflow */
+          /** @var Workflow $workflow */
           $workflow = Workflow::load($wid);
           $new_sid = $workflow->getFirstSid($entity, $field_name, $user);
         }
@@ -260,7 +263,7 @@ class WorkflowManager implements WorkflowManagerInterface {
    * - workflow_node_current_state()
    * - workflow_node_previous_state()
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param string $field_name
    *
    * @return string
@@ -270,12 +273,12 @@ class WorkflowManager implements WorkflowManagerInterface {
     $sid = '';
 
     /** @var \Drupal\Core\Config\Entity\ConfigEntityBase $entity */
-    /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_config */
+    /** @var FieldDefinitionInterface $field_config */
     $field_config = $entity->get($field_name)->getFieldDefinition();
     $field_storage = $field_config->getFieldStorageDefinition();
     $wid = $field_storage->getSetting('workflow_type');
     if ($wid) {
-      /** @var \Drupal\workflow\Entity\Workflow $workflow */
+      /** @var Workflow $workflow */
       $workflow = Workflow::load($wid);
       if (!$workflow) {
         \Drupal::messenger()->addError(t('Workflow %wid cannot be loaded. Contact your system administrator.', ['%wid' => $wid]));
@@ -358,7 +361,7 @@ class WorkflowManager implements WorkflowManagerInterface {
     $transition->setTargetEntity($entity);
 
     // Create the WorkflowTransitionForm.
-    /** @var \Drupal\Core\Entity\EntityFormBuilder $entity_form_builder */
+    /** @var EntityFormBuilder $entity_form_builder */
     $entity_form_builder = \Drupal::getContainer()->get('entity.form_builder');
     $form = $entity_form_builder->getForm($transition, 'add', $form_state_additions);
     return $form;
diff --git a/src/Entity/WorkflowManagerInterface.php b/src/Entity/WorkflowManagerInterface.php
index 9441f51..c76869f 100644
--- a/src/Entity/WorkflowManagerInterface.php
+++ b/src/Entity/WorkflowManagerInterface.php
@@ -34,27 +34,26 @@ interface WorkflowManagerInterface {
    *
    * This is referenced in from WorkflowDefaultWidget::massageFormValues().
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    */
   public static function executeTransitionsOfEntity(EntityInterface $entity);
 
   /********************************************************************
    * Hook-implementing functions.
    */
-
   /**
    * Implements hook_WORKFLOW_insert().
    *
    * Make sure some roles are allowed to participate in a Workflow by default.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $workflow
+   * @param EntityInterface $workflow
    */
   public static function participateUserRoles(EntityInterface $workflow);
 
   /**
    * Implements hook_user_delete().
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    */
   public static function deleteUser(AccountInterface $account);
 
@@ -71,7 +70,7 @@ interface WorkflowManagerInterface {
    * "This action cannot be undone.
    *
    * @param $edit
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    * @param string $method
    */
   public static function cancelUser($edit, AccountInterface $account, $method);
@@ -101,7 +100,7 @@ interface WorkflowManagerInterface {
   /**
    * Gets the TransitionWidget in a form (for e.g., Workflow History Tab)
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param string $field_name
    * @param array $form_state_additions
    *
@@ -126,7 +125,7 @@ interface WorkflowManagerInterface {
    * There is no need to use a page cache.
    * The performance is OK, and the cache gives problems when using Rules.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to check.
    * @param string $field_name
    *   The name of the field of the entity to check.
@@ -142,7 +141,7 @@ interface WorkflowManagerInterface {
   /**
    * Gets the previous state ID of a given entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param string $field_name
    *
    * @return string
@@ -153,8 +152,8 @@ interface WorkflowManagerInterface {
   /**
    * Determine if User is owner/author of the entity.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param AccountInterface $account
+   * @param EntityInterface $entity
    *
    * @return bool
    */
diff --git a/src/Entity/WorkflowScheduledTransition.php b/src/Entity/WorkflowScheduledTransition.php
index 5ad218c..7ded372 100644
--- a/src/Entity/WorkflowScheduledTransition.php
+++ b/src/Entity/WorkflowScheduledTransition.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\workflow\Entity;
 
+use Drupal\Core\Entity\Query\QueryInterface;
 use Drupal\Core\Entity\EntityConstraintViolationList;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
@@ -177,8 +178,7 @@ class WorkflowScheduledTransition extends WorkflowTransition {
    */
   public static function loadBetween($start = 0, $end = 0, $from_sid = '', $to_sid = '') {
     $transition_type = 'workflow_scheduled_transition'; // @todo Get this from annotation.
-
-    /** @var \Drupal\Core\Entity\Query\QueryInterface $query */
+    /** @var QueryInterface $query */
     $query = \Drupal::entityQuery($transition_type)
       ->sort('timestamp', 'ASC')
       ->addTag($transition_type);
diff --git a/src/Entity/WorkflowState.php b/src/Entity/WorkflowState.php
index cba55f2..2153cb1 100644
--- a/src/Entity/WorkflowState.php
+++ b/src/Entity/WorkflowState.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\workflow\Entity;
 
+use Drupal\Core\Config\Entity\ConfigEntityTypeInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -144,7 +145,7 @@ class WorkflowState extends ConfigEntityBase {
     parent::calculateDependencies();
     // We cannot use $this->getWorkflow()->getConfigDependencyName() because
     // calling $this->getWorkflow() here causes an infinite loop.
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityTypeInterface $workflow_type */
+    /** @var ConfigEntityTypeInterface $workflow_type */
     $workflow_type = \Drupal::entityTypeManager()->getDefinition('workflow_type');
     $this->addDependency('config', $workflow_type->getConfigPrefix() . '.' . $this->getWorkflowId());
     return $this;
@@ -291,7 +292,7 @@ class WorkflowState extends ConfigEntityBase {
     // Delete the transitions this state is involved in.
     $workflow = Workflow::load($this->getWorkflowId());
     /** @var \Drupal\workflow\Entity\WorkflowInterface $workflow */
-    /** @var \Drupal\workflow\Entity\WorkflowTransitionInterface $transition */
+    /** @var WorkflowTransitionInterface $transition */
     foreach ($workflow->getTransitionsByStateId($current_sid, '') as $transition) {
       $transition->delete();
     }
@@ -346,9 +347,9 @@ class WorkflowState extends ConfigEntityBase {
    *
    * If not, a formatter must be shown, since there are no valid options.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param string $field_name
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    * @param bool $force
    *
    * @return bool
@@ -374,19 +375,19 @@ class WorkflowState extends ConfigEntityBase {
   /**
    * Returns the allowed transitions for the current state.
    *
-   * @param \Drupal\Core\Entity\EntityInterface|null $entity
+   * @param EntityInterface|null $entity
    *   The entity at hand. May be NULL (E.g., on a Field settings page).
    * @param string $field_name
-   * @param \Drupal\Core\Session\AccountInterface|null $account
+   * @param AccountInterface|null $account
    * @param bool|false $force
    *
-   * @return \Drupal\workflow\Entity\WorkflowConfigTransition[]
+   * @return WorkflowConfigTransition[]
    *   An array of id=>transition pairs with allowed transitions for State.
    */
   public function getTransitions(EntityInterface $entity = NULL, $field_name = '', AccountInterface $account = NULL, $force = FALSE) {
     $transitions = [];
 
-    /** @var \Drupal\workflow\Entity\Workflow $workflow */
+    /** @var Workflow $workflow */
     if (!$workflow = $this->getWorkflow()) {
       // No workflow, no options ;-)
       return $transitions;
@@ -416,7 +417,7 @@ class WorkflowState extends ConfigEntityBase {
     /*
      * Get the object and its permissions.
      */
-    /** @var \Drupal\workflow\Entity\WorkflowConfigTransition[] $transitions */
+    /** @var WorkflowConfigTransition[] $transitions */
     $transitions = $workflow->getTransitionsByStateId($this->id(), '');
 
     /*
@@ -451,7 +452,7 @@ class WorkflowState extends ConfigEntityBase {
    * @param object $entity
    *   The entity at hand. May be NULL (E.g., on a Field settings page).
    * @param string $field_name
-   * @param \Drupal\Core\Session\AccountInterface|null $account
+   * @param AccountInterface|null $account
    * @param bool $force
    *
    * @return array
diff --git a/src/Entity/WorkflowStorage.php b/src/Entity/WorkflowStorage.php
index af292df..93c2620 100644
--- a/src/Entity/WorkflowStorage.php
+++ b/src/Entity/WorkflowStorage.php
@@ -19,24 +19,24 @@ class WorkflowStorage extends ConfigEntityStorage {
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $stateService;
 
   /**
    * Constructs a WorkflowStorage object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid_service
+   * @param UuidInterface $uuid_service
    *   The UUID service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface $memory_cache
+   * @param MemoryCacheInterface $memory_cache
    *   The memory cache backend.
-   * @param \Drupal\Core\State\StateInterface $state_service
+   * @param StateInterface $state_service
    *   The state service.
    */
   public function __construct(EntityTypeInterface $entity_type, ConfigFactoryInterface $config_factory, UuidInterface $uuid_service, LanguageManagerInterface $language_manager, MemoryCacheInterface $memory_cache, StateInterface $state_service) {
diff --git a/src/Entity/WorkflowTransition.php b/src/Entity/WorkflowTransition.php
index 83b877d..3f5e2b7 100644
--- a/src/Entity/WorkflowTransition.php
+++ b/src/Entity/WorkflowTransition.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\workflow\Entity;
 
+use Drupal\Core\Entity\Query\QueryInterface;
+use Drupal\Core\Field\Entity\BaseFieldOverride;
+use Drupal\comment\CommentInterface;
+use Drupal\Core\Entity\RevisionableContentEntityBase;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -78,19 +82,17 @@ class WorkflowTransition extends ContentEntityBase implements WorkflowTransition
   /*
    * Transition data: are provided via baseFieldDefinitions().
    */
-
   /*
    * Cache data.
    */
-
   /**
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    *
    * @usage Use WorkflowTransition->getTargetEntity() to fetch this.
    */
   protected $entity = NULL;
   /**
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    *
    * @usage Use WorkflowTransition->getOwner() to fetch this.
    */
@@ -219,7 +221,7 @@ class WorkflowTransition extends ContentEntityBase implements WorkflowTransition
    */
   public function save() {
     // Set Target Entity, to be used by Rules.
-    /** @var \Drupal\workflow\Entity\WorkflowTransitionInterface $reference */
+    /** @var WorkflowTransitionInterface $reference */
     $reference = $this->get('entity_id')->first();
     if ($reference) {
       $reference->set('entity', $this->getTargetEntity());
@@ -240,7 +242,7 @@ class WorkflowTransition extends ContentEntityBase implements WorkflowTransition
 
     // Remove any scheduled state transitions.
     foreach (WorkflowScheduledTransition::loadMultipleByProperties($entity_type, [$entity_id], [], $field_name) as $scheduled_transition) {
-      /** @var \Drupal\workflow\Entity\WorkflowTransitionInterface $scheduled_transition */
+      /** @var WorkflowTransitionInterface $scheduled_transition */
       $scheduled_transition->delete();
     }
 
@@ -282,7 +284,7 @@ class WorkflowTransition extends ContentEntityBase implements WorkflowTransition
    */
   public static function loadMultipleByProperties($entity_type, array $entity_ids, array $revision_ids = [], $field_name = '', $langcode = '', $limit = NULL, $sort = 'ASC', $transition_type = 'workflow_transition') {
 
-    /** @var \Drupal\Core\Entity\Query\QueryInterface $query */
+    /** @var QueryInterface $query */
     $query = \Drupal::entityQuery($transition_type)
       ->condition('entity_type', $entity_type)
       ->sort('timestamp', $sort)
@@ -360,7 +362,7 @@ class WorkflowTransition extends ContentEntityBase implements WorkflowTransition
       return FALSE;
     }
     $fields = WorkflowManager::getAttachedFields('workflow_transition', $this->bundle());
-    /** @var \Drupal\Core\Field\Entity\BaseFieldOverride $field */
+    /** @var BaseFieldOverride $field */
     foreach ($fields as $field_name => $field) {
       if (!$this->{$field_name}->isEmpty()) {
         return FALSE;
@@ -398,7 +400,7 @@ class WorkflowTransition extends ContentEntityBase implements WorkflowTransition
     /*
      * Get the object and its permissions.
      */
-    /** @var \Drupal\workflow\Entity\WorkflowTransitionInterface[] $config_transitions */
+    /** @var WorkflowTransitionInterface[] $config_transitions */
     $config_transitions = $this->getWorkflow()->getTransitionsByStateId($this->getFromSid(), $this->getToSid());
 
     /*
@@ -436,10 +438,10 @@ class WorkflowTransition extends ContentEntityBase implements WorkflowTransition
   public function execute($force = FALSE) {
     // Load the entity, if not already loaded.
     // This also sets the (empty) $revision_id in Scheduled Transitions.
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $this->getTargetEntity();
     // Load explicit User object (not via $transition) for adding Role later.
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     $user = $this->getOwner();
     $from_sid = $this->getFromSid();
     $to_sid = $this->getToSid();
@@ -663,12 +665,12 @@ class WorkflowTransition extends ContentEntityBase implements WorkflowTransition
 
     // If Transition is added via CommentForm, use the Commented Entity.
     if ($entity->getEntityTypeId() == 'comment') {
-      /** @var \Drupal\comment\CommentInterface $entity */
+      /** @var CommentInterface $entity */
       $entity = $entity->getCommentedEntity();
     }
 
     $this->entity = $entity;
-    /** @var \Drupal\Core\Entity\RevisionableContentEntityBase $entity */
+    /** @var RevisionableContentEntityBase $entity */
     $this->entity_type = $entity->getEntityTypeId();
     $this->entity_id = $entity->id();
     $this->revision_id = $entity->getRevisionId();
@@ -870,7 +872,7 @@ class WorkflowTransition extends ContentEntityBase implements WorkflowTransition
    * {@inheritdoc}
    */
   public function getOwner() {
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     $user = $this->get('uid')->entity;
     if (!$user || $user->isAnonymous()) {
       $user = User::getAnonymousUser();
@@ -1093,7 +1095,7 @@ class WorkflowTransition extends ContentEntityBase implements WorkflowTransition
     // Prepare an array of arguments for error messages.
     $entity = $this->getTargetEntity();
     $t_args = [
-      /** @var \Drupal\user\UserInterface $user */
+      /** @var UserInterface $user */
       '%user' => ($user = $this->getOwner()) ? $user->getDisplayName() : '',
       '%sid1' => ($from_sid || !$this->getFromState()) ? $from_sid : $this->getFromState()->label(),
       '%sid2' => ($to_sid || !$this->getToState()) ? $to_sid : $this->getToState()->label(),
diff --git a/src/Entity/WorkflowTransitionInterface.php b/src/Entity/WorkflowTransitionInterface.php
index 20d92af..12870b9 100644
--- a/src/Entity/WorkflowTransitionInterface.php
+++ b/src/Entity/WorkflowTransitionInterface.php
@@ -131,7 +131,7 @@ interface WorkflowTransitionInterface extends WorkflowConfigTransitionInterface,
    *
    * Also sets all dependent fields, that will be saved in tables {workflow_transition_*}.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The Entity ID or the Entity object, to add to the Transition.
    *
    * @return object
@@ -142,7 +142,7 @@ interface WorkflowTransitionInterface extends WorkflowConfigTransitionInterface,
   /**
    * Returns the entity to which the workflow is attached.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The entity to which the workflow is attached.
    */
   public function getTargetEntity();
diff --git a/src/Form/WorkflowConfigTransitionFormBase.php b/src/Form/WorkflowConfigTransitionFormBase.php
index 0055cba..8b9cce6 100644
--- a/src/Form/WorkflowConfigTransitionFormBase.php
+++ b/src/Form/WorkflowConfigTransitionFormBase.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\workflow\Form;
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\workflow\Entity\Workflow;
+use Drupal\workflow\Entity\WorkflowState;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -32,21 +35,21 @@ abstract class WorkflowConfigTransitionFormBase extends ConfigFormBase {
   /**
    * The entities being listed.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]
+   * @var EntityInterface[]
    */
   protected $entities = [];
 
   /**
    * The workflow object.
    *
-   * @var \Drupal\workflow\Entity\Workflow
+   * @var Workflow
    */
   protected $workflow;
 
   /**
    * The messenger / logger service.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
@@ -99,7 +102,7 @@ abstract class WorkflowConfigTransitionFormBase extends ConfigFormBase {
 
     if ($states) {
       /** @var \Drupal\workflow\Entity\WorkflowState $from_state */
-      /** @var \Drupal\workflow\Entity\WorkflowState $to_state */
+      /** @var WorkflowState $to_state */
       switch ($entity_type) {
         case 'workflow_state':
           foreach ($states as $from_state) {
diff --git a/src/Form/WorkflowConfigTransitionLabelForm.php b/src/Form/WorkflowConfigTransitionLabelForm.php
index 56bc342..dbd9144 100644
--- a/src/Form/WorkflowConfigTransitionLabelForm.php
+++ b/src/Form/WorkflowConfigTransitionLabelForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\workflow\Form;
 
+use Drupal\workflow\Entity\WorkflowConfigTransition;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -44,7 +45,7 @@ class WorkflowConfigTransitionLabelForm extends WorkflowConfigTransitionFormBase
 
     $workflow = $this->workflow;
     if ($workflow) {
-      /** @var \Drupal\workflow\Entity\WorkflowConfigTransition $entity */
+      /** @var WorkflowConfigTransition $entity */
       $config_transition = $entity;
 
       static $previous_from_sid = -1;
diff --git a/src/Form/WorkflowConfigTransitionRoleForm.php b/src/Form/WorkflowConfigTransitionRoleForm.php
index ca2ed7d..b7a3d35 100644
--- a/src/Form/WorkflowConfigTransitionRoleForm.php
+++ b/src/Form/WorkflowConfigTransitionRoleForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\workflow\Form;
 
+use Drupal\workflow\Entity\WorkflowState;
+use Drupal\workflow\Entity\WorkflowConfigTransition;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -33,7 +35,7 @@ class WorkflowConfigTransitionRoleForm extends WorkflowConfigTransitionFormBase
     if ($states) {
       $header['label_new'] = $this->t('From \ To');
 
-      /** @var \Drupal\workflow\Entity\WorkflowState $state */
+      /** @var WorkflowState $state */
       foreach ($states as $state) {
         // Don't allow transition TO (creation).
         if (!$state->isCreationState()) {
@@ -66,11 +68,11 @@ class WorkflowConfigTransitionRoleForm extends WorkflowConfigTransitionFormBase
     $workflow = $this->workflow;
     if ($workflow) {
       // Each $entity is a from-state.
-      /** @var \Drupal\workflow\Entity\WorkflowState $entity */
+      /** @var WorkflowState $entity */
       $from_state = $entity;
       $from_sid = $from_state->id();
 
-      /** @var \Drupal\workflow\Entity\WorkflowState[] $states */
+      /** @var WorkflowState[] $states */
       $states = $workflow->getStates($all = 'CREATION');
       if ($states) {
         // Only get the roles with proper permission + Author role.
@@ -80,14 +82,14 @@ class WorkflowConfigTransitionRoleForm extends WorkflowConfigTransitionFormBase
         // array_combine(array_keys($roles), array_keys($roles));
         $allow_all_roles = [];
 
-        /** @var \Drupal\workflow\Entity\WorkflowState $state */
+        /** @var WorkflowState $state */
         foreach ($states as $state) {
           $row['to'] = [
             '#type' => 'value',
             '#markup' => $this->t('@label', ['@label' => $from_state->label()]),
           ];
 
-          /** @var \Drupal\workflow\Entity\WorkflowState $to_state */
+          /** @var WorkflowState $to_state */
           foreach ($states as $to_state) {
             // Don't allow transition TO (creation).
             if ($to_state->isCreationState()) {
@@ -164,7 +166,7 @@ class WorkflowConfigTransitionRoleForm extends WorkflowConfigTransitionFormBase
 
     foreach ($form_state->getValue($this->entitiesKey) as $from_sid => $to_data) {
       foreach ($to_data as $transition_data) {
-        /** @var \Drupal\workflow\Entity\WorkflowConfigTransition $config_transition */
+        /** @var WorkflowConfigTransition $config_transition */
         if (isset($transition_data['workflow_config_transition'])) {
           $config_transition = $transition_data['workflow_config_transition'];
           $config_transition->roles = $transition_data['roles'];
diff --git a/src/Form/WorkflowTransitionForm.php b/src/Form/WorkflowTransitionForm.php
index c095348..9b35925 100644
--- a/src/Form/WorkflowTransitionForm.php
+++ b/src/Form/WorkflowTransitionForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\workflow\Form;
 
+use Drupal\workflow\Entity\WorkflowTransitionInterface;
+use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Entity\EntityInterface;
@@ -25,8 +27,7 @@ class WorkflowTransitionForm extends ContentEntityForm {
     // when multiple fields or entities are shown on 1 page.
     // Test this f.i. by checking the'scheduled' box. It will not unfold.
     // $form_id = parent::getFormId();
-
-    /** @var \Drupal\workflow\Entity\WorkflowTransitionInterface $transition */
+    /** @var WorkflowTransitionInterface $transition */
     $transition = $this->entity;
     $field_name = $transition->getFieldName();
 
@@ -68,7 +69,7 @@ class WorkflowTransitionForm extends ContentEntityForm {
     // This might cause baseFieldDefinitions to appear twice.
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\workflow\Entity\WorkflowTransitionInterface $transition */
+    /** @var WorkflowTransitionInterface $transition */
     $transition = $this->entity;
 
     // Do not pass the element, but the form.
@@ -87,7 +88,7 @@ class WorkflowTransitionForm extends ContentEntityForm {
    * Caveat: !! It is not declared in the EntityFormInterface !!
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return array
    */
@@ -134,7 +135,7 @@ class WorkflowTransitionForm extends ContentEntityForm {
    * {@inheritdoc}
    */
   public function buildEntity(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Entity\FieldableEntityInterface $entity */
+    /** @var FieldableEntityInterface $entity */
     $entity = clone $this->entity;
     // Update the entity.
     $entity = $this->copyFormValuesToEntity($entity, $form, $form_state);
@@ -163,7 +164,7 @@ class WorkflowTransitionForm extends ContentEntityForm {
    */
   public function save(array $form, FormStateInterface $form_state) {
     // Execute transition and update the attached entity.
-    /** @var \Drupal\workflow\Entity\WorkflowTransitionInterface $transition */
+    /** @var WorkflowTransitionInterface $transition */
     $transition = $this->getEntity();
     return $transition->executeAndUpdateEntity();
   }
diff --git a/src/Form/WorkflowTransitionRevertForm.php b/src/Form/WorkflowTransitionRevertForm.php
index 1c65654..d7c1091 100644
--- a/src/Form/WorkflowTransitionRevertForm.php
+++ b/src/Form/WorkflowTransitionRevertForm.php
@@ -27,7 +27,7 @@ class WorkflowTransitionRevertForm extends EntityConfirmFormBase {
    * {@inheritdoc}
    */
   public function getQuestion() {
-    /** @var \Drupal\workflow\Entity\WorkflowTransitionInterface $transition */
+    /** @var WorkflowTransitionInterface $transition */
     $transition = $this->entity;
     $state = $transition->getFromState();
 
@@ -52,7 +52,7 @@ class WorkflowTransitionRevertForm extends EntityConfirmFormBase {
    * {@inheritdoc}
    */
   public function getCancelUrl() {
-    /** @var \Drupal\workflow\Entity\WorkflowTransitionInterface $transition */
+    /** @var WorkflowTransitionInterface $transition */
     $transition = $this->entity;
     return $this->getUrl($transition);
   }
@@ -106,10 +106,10 @@ class WorkflowTransitionRevertForm extends EntityConfirmFormBase {
   /**
    * Prepares a transition to be reverted.
    *
-   * @param \Drupal\workflow\Entity\WorkflowTransitionInterface $transition
+   * @param WorkflowTransitionInterface $transition
    *   The transition to be reverted.
    *
-   * @return \Drupal\workflow\Entity\WorkflowTransitionInterface
+   * @return WorkflowTransitionInterface
    *   The prepared transition ready to be stored.
    */
   protected function prepareRevertedTransition(WorkflowTransitionInterface $transition) {
@@ -132,10 +132,10 @@ class WorkflowTransitionRevertForm extends EntityConfirmFormBase {
   /**
    * Returns the URL for a Transition.
    *
-   * @param \Drupal\workflow\Entity\WorkflowTransitionInterface $transition
+   * @param WorkflowTransitionInterface $transition
    *   Transition object.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The Transition's URL.
    */
   private function getUrl(WorkflowTransitionInterface $transition) {
diff --git a/src/Form/WorkflowTypeForm.php b/src/Form/WorkflowTypeForm.php
index 0152e7b..a08e568 100644
--- a/src/Form/WorkflowTypeForm.php
+++ b/src/Form/WorkflowTypeForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\workflow\Form;
 
+use Drupal\workflow\Entity\Workflow;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -14,7 +15,7 @@ class WorkflowTypeForm extends EntityForm {
    * {@inheritdoc}
    */
   public function form(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\workflow\Entity\Workflow $workflow */
+    /** @var Workflow $workflow */
     $workflow = $this->entity;
 
     $form['label'] = [
@@ -214,7 +215,7 @@ class WorkflowTypeForm extends EntityForm {
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\workflow\Entity\Workflow $entity */
+    /** @var Workflow $entity */
     $entity = $this->entity;
 
     // Prevent leading and trailing spaces.
@@ -256,7 +257,7 @@ class WorkflowTypeForm extends EntityForm {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
diff --git a/src/Plugin/Action/WorkflowStateActionBase.php b/src/Plugin/Action/WorkflowStateActionBase.php
index b29ab18..8b54eba 100644
--- a/src/Plugin/Action/WorkflowStateActionBase.php
+++ b/src/Plugin/Action/WorkflowStateActionBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\workflow\Plugin\Action;
 
+use Drupal\workflow\Entity\WorkflowTransitionInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Action\ConfigurableActionBase;
 use Drupal\Core\Entity\EntityInterface;
@@ -56,9 +57,9 @@ abstract class WorkflowStateActionBase extends ConfigurableActionBase implements
   }
 
   /**
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
-   * @return \Drupal\workflow\Entity\WorkflowTransitionInterface
+   * @return WorkflowTransitionInterface
    */
   protected function getTransitionForExecution(EntityInterface $entity) {
     $user = workflow_current_user();
@@ -135,7 +136,7 @@ abstract class WorkflowStateActionBase extends ConfigurableActionBase implements
     }
 
     // Get the common Workflow, or create a dummy Workflow.
-    /** @var \Drupal\workflow\Entity\Workflow $workflow */
+    /** @var Workflow $workflow */
     $workflow = $wid ? Workflow::load($wid) : Workflow::create(['id' => 'dummy_action', 'label' => 'dummy_action']);
     $current_state = $workflow->getCreationState();
 
diff --git a/src/Plugin/Block/WorkflowTransitionBlock.php b/src/Plugin/Block/WorkflowTransitionBlock.php
index f4da0a1..098e546 100644
--- a/src/Plugin/Block/WorkflowTransitionBlock.php
+++ b/src/Plugin/Block/WorkflowTransitionBlock.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\workflow\Plugin\Block;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Session\AccountInterface;
@@ -25,7 +26,7 @@ class WorkflowTransitionBlock extends BlockBase {
    * {@inheritdoc}
    */
   protected function blockAccess(AccountInterface $account) {
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     if (!$entity = workflow_url_get_entity()) {
       return AccessResult::forbidden();
     }
@@ -53,7 +54,7 @@ class WorkflowTransitionBlock extends BlockBase {
     $form = [];
 
     // Get the entity for this form.
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     if (!$entity = workflow_url_get_entity()) {
       return $form;
     }
diff --git a/src/Plugin/Derivative/WorkflowLocalTask.php b/src/Plugin/Derivative/WorkflowLocalTask.php
index c253bce..74956f8 100644
--- a/src/Plugin/Derivative/WorkflowLocalTask.php
+++ b/src/Plugin/Derivative/WorkflowLocalTask.php
@@ -21,16 +21,16 @@ class WorkflowLocalTask extends DeriverBase implements ContainerDeriverInterface
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Creates an WorkflowLocalTask object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The translation manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation) {
diff --git a/src/Plugin/Field/FieldFormatter/WorkflowDefaultFormatter.php b/src/Plugin/Field/FieldFormatter/WorkflowDefaultFormatter.php
index 1ace0a3..046344d 100644
--- a/src/Plugin/Field/FieldFormatter/WorkflowDefaultFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/WorkflowDefaultFormatter.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\workflow\Plugin\Field\FieldFormatter;
 
+use Drupal\workflow\Entity\WorkflowStorage;
+use Drupal\Core\Entity\EntityViewBuilderInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemListInterface;
@@ -32,28 +34,28 @@ class WorkflowDefaultFormatter extends FormatterBase implements ContainerFactory
   /**
    * The workflow storage.
    *
-   * @var \Drupal\workflow\Entity\WorkflowStorage
+   * @var WorkflowStorage
    */
   protected $storage;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The render controller.
    *
-   * @var \Drupal\Core\Entity\EntityViewBuilderInterface
+   * @var EntityViewBuilderInterface
    */
   protected $viewBuilder;
 
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -64,7 +66,7 @@ class WorkflowDefaultFormatter extends FormatterBase implements ContainerFactory
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ -74,9 +76,9 @@ class WorkflowDefaultFormatter extends FormatterBase implements ContainerFactory
    *   The view mode.
    * @param array $third_party_settings
    *   Third party settings.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type manager.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, AccountInterface $current_user, EntityTypeManagerInterface $entity_type_manager) {
@@ -124,7 +126,7 @@ class WorkflowDefaultFormatter extends FormatterBase implements ContainerFactory
     // First compose the current value with the normal formatter from list.module.
     $elements = workflow_state_formatter($entity, $field_name, $current_sid);
 
-    /** @var \Drupal\workflow\Entity\WorkflowState $current_state */
+    /** @var WorkflowState $current_state */
     $current_state = WorkflowState::load($current_sid);
     // The state must not be deleted, or corrupted.
     if (!$current_state) {
diff --git a/src/Plugin/Field/FieldFormatter/WorkflowStateHistoryFormatter.php b/src/Plugin/Field/FieldFormatter/WorkflowStateHistoryFormatter.php
index b45876c..0e3da2b 100644
--- a/src/Plugin/Field/FieldFormatter/WorkflowStateHistoryFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/WorkflowStateHistoryFormatter.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\workflow\Plugin\Field\FieldFormatter;
 
+use Drupal\workflow\Entity\WorkflowStorage;
+use Drupal\Core\Entity\EntityViewBuilderInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemListInterface;
@@ -32,28 +34,28 @@ class WorkflowStateHistoryFormatter extends FormatterBase implements ContainerFa
   /**
    * The workflow storage.
    *
-   * @var \Drupal\workflow\Entity\WorkflowStorage
+   * @var WorkflowStorage
    */
   protected $storage;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The render controller.
    *
-   * @var \Drupal\Core\Entity\EntityViewBuilderInterface
+   * @var EntityViewBuilderInterface
    */
   protected $viewBuilder;
 
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -64,7 +66,7 @@ class WorkflowStateHistoryFormatter extends FormatterBase implements ContainerFa
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ -74,9 +76,9 @@ class WorkflowStateHistoryFormatter extends FormatterBase implements ContainerFa
    *   The view mode.
    * @param array $third_party_settings
    *   Third party settings.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type manager.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, AccountInterface $current_user, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Plugin/Field/FieldType/WorkflowItem.php b/src/Plugin/Field/FieldType/WorkflowItem.php
index a1845ec..8e9f329 100644
--- a/src/Plugin/Field/FieldType/WorkflowItem.php
+++ b/src/Plugin/Field/FieldType/WorkflowItem.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\workflow\Plugin\Field\FieldType;
 
+use Drupal\comment\CommentInterface;
+use Symfony\Component\Validator\ConstraintViolation;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Form\OptGroup;
@@ -117,7 +120,7 @@ class WorkflowItem extends ListItemBase {
 
     // For Workflow on CommentForm, get the CommentedEntity.
     if ($entity->getEntityTypeId() == 'comment') {
-      /** @var \Drupal\comment\CommentInterface $entity */
+      /** @var CommentInterface $entity */
       $entity = $entity->getCommentedEntity();
     }
 
@@ -178,7 +181,7 @@ class WorkflowItem extends ListItemBase {
 
     // Validate via annotation WorkflowFieldConstraint. Show a message for each error.
     $violation_list = $this->validate();
-    /** @var \Symfony\Component\Validator\ConstraintViolation $violation */
+    /** @var ConstraintViolation $violation */
     foreach ($violation_list->getIterator() as $violation) {
       switch ($violation->getPropertyPath()) {
         case 'fieldnameOnComment':
@@ -197,7 +200,7 @@ class WorkflowItem extends ListItemBase {
     // @todo D8: CommentForm & constraints on storageSettingsForm.
     // Set the required workflow_type on 'comment' fields.
     // N.B. the following must BELOW the (count($workflows) == 1) snippet.
-    /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface $field_storage */
+    /** @var FieldStorageDefinitionInterface $field_storage */
     $field_storage = $this->getFieldDefinition()->getFieldStorageDefinition();
     if (!$this->getSetting('workflow_type') && $field_storage->getTargetEntityTypeId() == 'comment') {
       $field_name = $field_storage->get('field_name');
@@ -266,7 +269,7 @@ class WorkflowItem extends ListItemBase {
    *
    * This string format is suitable for edition in a textarea.
    *
-   * @param \Drupal\Core\Entity\EntityInterface[] $states
+   * @param EntityInterface[] $states
    *   An array of WorkflowStates, where array keys are values and array values are
    *   labels.
    *
@@ -281,7 +284,7 @@ class WorkflowItem extends ListItemBase {
     $wid = $this->getSetting('workflow_type');
 
     $previous_wid = -1;
-    /** @var \Drupal\workflow\Entity\WorkflowState $state */
+    /** @var WorkflowState $state */
     foreach ($states as $key => $state) {
       // Only show enabled states.
       if ($state->isActive()) {
@@ -338,7 +341,7 @@ class WorkflowItem extends ListItemBase {
     if ($workflow = Workflow::load($wid)) {
       // There is no entity, E.g., on the Rules action "Set a data value".
       $user = workflow_current_user($account); // @todo #2287057: OK?
-      /** @var \Drupal\workflow\Entity\WorkflowState $state */
+      /** @var WorkflowState $state */
       $state = WorkflowState::create(['wid' => $wid, 'id' => '']);
       $allowed_options = $state->getOptions(NULL, '', $user, FALSE);
     }
@@ -375,7 +378,7 @@ class WorkflowItem extends ListItemBase {
     $field_name = $definition->getName();
     $user = workflow_current_user($account); // @todo #2287057: OK?
     // Get the allowed new states for the entity's current state.
-    /** @var \Drupal\workflow\Entity\WorkflowState $state */
+    /** @var WorkflowState $state */
     $sid = workflow_node_current_state($entity, $field_name);
     $state = WorkflowState::load($sid);
     $allowed_options = ($state) ? $state->getOptions($entity, $field_name, $user, FALSE) : [];
diff --git a/src/Plugin/Field/FieldWidget/WorkflowDefaultWidget.php b/src/Plugin/Field/FieldWidget/WorkflowDefaultWidget.php
index d835ec6..fb3e52e 100644
--- a/src/Plugin/Field/FieldWidget/WorkflowDefaultWidget.php
+++ b/src/Plugin/Field/FieldWidget/WorkflowDefaultWidget.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\workflow\Plugin\Field\FieldWidget;
 
+use Drupal\workflow\Plugin\Field\FieldType\WorkflowItem;
+use Drupal\field\Entity\FieldConfig;
+use Drupal\field\Entity\FieldStorageConfig;
+use Drupal\workflow\Entity\WorkflowTransitionInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\WidgetBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -37,7 +42,7 @@ class WorkflowDefaultWidget extends WidgetBase {
   public function formElement(FieldItemListInterface $items, $delta, array $element, array &$form, FormStateInterface $form_state) {
 
     $wid = $this->getFieldSetting('workflow_type');
-    /** @var \Drupal\workflow\Entity\Workflow $workflow */
+    /** @var Workflow $workflow */
     if (!$workflow = Workflow::load($wid)) {
       // @todo Add error message.
       return $element;
@@ -49,11 +54,11 @@ class WorkflowDefaultWidget extends WidgetBase {
       return [];
     }
 
-    /** @var \Drupal\workflow\Plugin\Field\FieldType\WorkflowItem $item */
+    /** @var WorkflowItem $item */
     $item = $items[$delta];
-    /** @var \Drupal\field\Entity\FieldConfig $field_config */
+    /** @var FieldConfig $field_config */
     $field_config = $item->getFieldDefinition();
-    /** @var \Drupal\field\Entity\FieldStorageConfig $field_storage */
+    /** @var FieldStorageConfig $field_storage */
     $field_storage = $field_config->getFieldStorageDefinition();
 
     $entity = $item->getEntity();
@@ -61,7 +66,7 @@ class WorkflowDefaultWidget extends WidgetBase {
 
     // Create a transition, to pass to the form. No need to use setValues().
     $from_sid = workflow_node_current_state($entity, $field_name);
-    /** @var \Drupal\workflow\Entity\WorkflowTransitionInterface $transition */
+    /** @var WorkflowTransitionInterface $transition */
     $transition = WorkflowTransition::create([$from_sid, 'field_name' => $field_name]);
     $transition->setTargetEntity($entity);
 
@@ -123,11 +128,10 @@ class WorkflowDefaultWidget extends WidgetBase {
     // back to the regular 'value' string format.
     foreach ($values as &$item) {
       if (!empty($item)) { // } && $item['value'] instanceof DrupalDateTime) {
-
         // The following can NOT be retrieved from the WorkflowTransition.
-        /** @var \Drupal\Core\Entity\EntityInterface $entity */
+        /** @var EntityInterface $entity */
         $entity = $form_state->getFormObject()->getEntity();
-        /** @var \Drupal\workflow\Entity\WorkflowTransitionInterface $transition */
+        /** @var WorkflowTransitionInterface $transition */
         $transition = $item['workflow_transition'];
         // N.B. Use a proprietary version of copyFormValuesToEntity,
         // where $entity/$transition is passed by reference.
diff --git a/src/Plugin/Validation/Constraint/WorkflowFieldConstraintValidator.php b/src/Plugin/Validation/Constraint/WorkflowFieldConstraintValidator.php
index 089f9da..4a4b828 100644
--- a/src/Plugin/Validation/Constraint/WorkflowFieldConstraintValidator.php
+++ b/src/Plugin/Validation/Constraint/WorkflowFieldConstraintValidator.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\workflow\Plugin\Validation\Constraint;
 
+use Symfony\Component\Validator\Context\ExecutionContextInterface;
+use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\user\UserStorageInterface;
@@ -19,21 +21,21 @@ class WorkflowFieldConstraintValidator extends ConstraintValidator implements Co
   /**
    * Validator 2.5 and upwards compatible execution context.
    *
-   * @var \Symfony\Component\Validator\Context\ExecutionContextInterface
+   * @var ExecutionContextInterface
    */
   protected $context;
 
   /**
    * User storage handler.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userStorage;
 
   /**
    * Constructs a new Validator.
    *
-   * @param \Drupal\user\UserStorageInterface $user_storage
+   * @param UserStorageInterface $user_storage
    *   The user storage handler.
    */
   public function __construct(UserStorageInterface $user_storage) {
@@ -52,7 +54,7 @@ class WorkflowFieldConstraintValidator extends ConstraintValidator implements Co
    */
   public function validate($entity, Constraint $constraint) {
     // Workflow field name on CommentForm has special requirements.
-    /** @var \Drupal\field\Entity\FieldStorageConfig $field_storage */
+    /** @var FieldStorageConfig $field_storage */
     $field_storage = $entity->getFieldDefinition()->getFieldStorageDefinition();
     if (!$this->isValidFieldname($field_storage)) {
       $this->context->buildViolation($constraint->messageFieldname)
@@ -62,7 +64,7 @@ class WorkflowFieldConstraintValidator extends ConstraintValidator implements Co
   }
 
   /**
-   * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $field_storage
+   * @param FieldStorageDefinitionInterface $field_storage
    *
    * @return bool
    */
diff --git a/src/Routing/RouteSubscriber.php b/src/Routing/RouteSubscriber.php
index 5904ab2..377b72a 100644
--- a/src/Routing/RouteSubscriber.php
+++ b/src/Routing/RouteSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\workflow\Routing;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\RouteSubscriberBase;
 use Drupal\Core\Routing\RoutingEvents;
@@ -18,14 +19,14 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new RouteSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager) {
@@ -69,7 +70,7 @@ class RouteSubscriber extends RouteSubscriberBase {
    * @param string $path
    *   The Path of the route.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getEntityLoadRoute($entityTypeId, $path) {
@@ -115,7 +116,7 @@ class RouteSubscriber extends RouteSubscriberBase {
    * @return array
    *   Return all workflow fields.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function listWorkflowFields() {
     $fieldType = 'workflow';
diff --git a/src/WorkflowAccessControlHandler.php b/src/WorkflowAccessControlHandler.php
index 1b1e285..571638a 100644
--- a/src/WorkflowAccessControlHandler.php
+++ b/src/WorkflowAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\workflow;
 
+use Drupal\workflow\Entity\WorkflowTransitionInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityHandlerInterface;
@@ -74,7 +75,7 @@ class WorkflowAccessControlHandler extends EntityAccessControlHandler implements
         break;
 
       case 'workflow_transition':
-        /** @var \Drupal\workflow\Entity\WorkflowTransitionInterface $transition */
+        /** @var WorkflowTransitionInterface $transition */
         $transition = $entity;
 
         $is_owner = WorkflowManager::isOwner($account, $transition);
@@ -163,7 +164,7 @@ class WorkflowAccessControlHandler extends EntityAccessControlHandler implements
    */
   public function createAccess($entity_bundle = NULL, AccountInterface $account = NULL, array $context = [], $return_as_object = FALSE) {
     workflow_debug(__FILE__, __FUNCTION__, __LINE__); // @todo D8: test this snippet.
-    /** @var \Drupal\Core\Access\AccessResult $result */
+    /** @var AccessResult $result */
     $result = parent::createAccess($entity_bundle, $account, $context, TRUE);
     $result = $result->cachePerPermissions();
     return $return_as_object ? $result : $result->isAllowed();
diff --git a/src/WorkflowListBuilder.php b/src/WorkflowListBuilder.php
index 098726f..cfd9dca 100644
--- a/src/WorkflowListBuilder.php
+++ b/src/WorkflowListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\workflow;
 
+use Drupal\workflow\Entity\Workflow;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 
@@ -32,7 +33,7 @@ class WorkflowListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\workflow\Entity\Workflow $entity */
+    /** @var Workflow $entity */
     $row['id'] = $entity->id();
     $row['label'] = $entity->label();
     $row['status'] = ''; // @todo $entity->getStatus();
@@ -46,7 +47,7 @@ class WorkflowListBuilder extends ConfigEntityListBuilder {
   public function getDefaultOperations(EntityInterface $entity) {
     $operations = parent::getDefaultOperations($entity);
 
-    /** @var \Drupal\workflow\Entity\Workflow $workflow */
+    /** @var Workflow $workflow */
     $workflow = $entity;
 
     // Do not delete a Workflow if it contains content.
diff --git a/src/WorkflowPermissions.php b/src/WorkflowPermissions.php
index cf915c0..e642823 100644
--- a/src/WorkflowPermissions.php
+++ b/src/WorkflowPermissions.php
@@ -31,7 +31,7 @@ class WorkflowPermissions {
   /**
    * Returns a list of workflow permissions for a given workflow type.
    *
-   * @param \Drupal\workflow\Entity\Workflow $type
+   * @param Workflow $type
    *   The workflow type.
    *
    * @return array
diff --git a/src/WorkflowStateListBuilder.php b/src/WorkflowStateListBuilder.php
index fec683c..28c291d 100644
--- a/src/WorkflowStateListBuilder.php
+++ b/src/WorkflowStateListBuilder.php
@@ -27,7 +27,7 @@ class WorkflowStateListBuilder extends DraggableListBuilder {
     }
 
     $wid = $workflow->id();
-    /** @var \Drupal\workflow\Entity\WorkflowState[] $entities */
+    /** @var WorkflowState[] $entities */
     $entities = parent::load();
     foreach ($entities as $key => $entity) {
       if ($entity->getWorkflowId() != $wid) {
@@ -81,7 +81,7 @@ class WorkflowStateListBuilder extends DraggableListBuilder {
     }
 
     $wid = $url_wid = $workflow->id();
-    /** @var \Drupal\workflow\Entity\WorkflowState $entity */
+    /** @var WorkflowState $entity */
     $state = $entity;
     $sid = $state->id();
     $label = $state->label();
@@ -235,7 +235,7 @@ class WorkflowStateListBuilder extends DraggableListBuilder {
   public function getDefaultOperations(EntityInterface $entity) {
     $operations = parent::getDefaultOperations($entity);
 
-    /** @var \Drupal\workflow\Entity\WorkflowState $state */
+    /** @var WorkflowState $state */
     $state = $entity;
 
     /*
@@ -259,7 +259,7 @@ class WorkflowStateListBuilder extends DraggableListBuilder {
   public function validateForm(array &$form, FormStateInterface $form_state) {
     // @todo D8: enable WorkflowState machine_name as interactive element.
     foreach ($form_state->getValue($this->entitiesKey) as $sid => $value) {
-      /** @var \Drupal\workflow\Entity\WorkflowState $state */
+      /** @var WorkflowState $state */
       $state = isset($this->entities[$sid]) ? $this->entities[$sid] : NULL;
 
       // State is de-activated (reassigning current content).
@@ -298,7 +298,7 @@ class WorkflowStateListBuilder extends DraggableListBuilder {
         continue;
       }
 
-      /** @var \Drupal\workflow\Entity\WorkflowState $state */
+      /** @var WorkflowState $state */
       $state = $this->entities[$sid];
 
       if ($state && $state->isActive() && !$value['status'] && $sid) {
@@ -378,7 +378,7 @@ class WorkflowStateListBuilder extends DraggableListBuilder {
    * Button 'Add State' callback.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return array
    */
@@ -393,7 +393,7 @@ class WorkflowStateListBuilder extends DraggableListBuilder {
    *
    * @param string $name
    * @param array $element
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return bool
    */
diff --git a/src/WorkflowTransitionListBuilder.php b/src/WorkflowTransitionListBuilder.php
index 6d19677..543519f 100644
--- a/src/WorkflowTransitionListBuilder.php
+++ b/src/WorkflowTransitionListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\workflow;
 
+use Drupal\workflow\Entity\WorkflowTransitionInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
@@ -20,7 +21,7 @@ class WorkflowTransitionListBuilder extends EntityListBuilder {
   /**
    * A variable to pass the entity of a transition to the ListBuilder.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   public $workflow_entity;
 
@@ -47,7 +48,7 @@ class WorkflowTransitionListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   public function load() {
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $this->workflow_entity; // N.B. This is a custom variable.
     $entity_type = $entity->getEntityTypeId();
     $entity_id = $entity->id();
@@ -90,7 +91,7 @@ class WorkflowTransitionListBuilder extends EntityListBuilder {
    */
   public function buildRow(EntityInterface $transition) {
     // Show the history table.
-    /** @var \Drupal\workflow\Entity\WorkflowTransitionInterface $transition */
+    /** @var WorkflowTransitionInterface $transition */
     $current_themed = FALSE;
     $entity = $transition->getTargetEntity();
     $field_name = $transition->getFieldName();
@@ -238,7 +239,7 @@ class WorkflowTransitionListBuilder extends EntityListBuilder {
   /**
    * Determines if the column 'Field name' must be shown.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
    * @return bool
    */
diff --git a/src/WorkflowTypeAttributeTrait.php b/src/WorkflowTypeAttributeTrait.php
index 2d531c6..d72c092 100644
--- a/src/WorkflowTypeAttributeTrait.php
+++ b/src/WorkflowTypeAttributeTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\workflow;
 
+use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\workflow\Entity\Workflow;
 
 /**
@@ -27,12 +28,12 @@ trait WorkflowTypeAttributeTrait {
    * It must explicitly be defined, and not be public, to avoid errors
    * when exporting with json_encode().
    *
-   * @var \Drupal\workflow\Entity\Workflow
+   * @var Workflow
    */
   protected $workflow = NULL;
 
   /**
-   * @param \Drupal\workflow\Entity\Workflow $workflow
+   * @param Workflow $workflow
    */
   public function setWorkflow(Workflow $workflow = NULL) {
     $this->wid = '';
@@ -46,7 +47,7 @@ trait WorkflowTypeAttributeTrait {
   /**
    * Returns the Workflow object of this object.
    *
-   * @return \Drupal\workflow\Entity\Workflow
+   * @return Workflow
    *   Workflow object.
    */
   public function getWorkflow() {
@@ -82,7 +83,7 @@ trait WorkflowTypeAttributeTrait {
    *   Workflow Id.
    */
   public function getWorkflowId() {
-    /** @var \Drupal\Core\Entity\ContentEntityBase $this */
+    /** @var ContentEntityBase $this */
     if (!empty($this->wid)) {
       return $this->wid;
     }
diff --git a/workflow.api.php b/workflow.api.php
index 29d28e1..f334c9b 100644
--- a/workflow.api.php
+++ b/workflow.api.php
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\workflow\Entity\Workflow;
+use Drupal\Core\Field\Entity\BaseFieldOverride;
 /**
  * @file
  * Hooks provided by the workflow module.
@@ -24,7 +26,7 @@ use Drupal\workflow\Entity\WorkflowTransitionInterface;
  *   'operations': Allow modules to insert their own workflow operations.
  *   'workflow':  Allow modules to insert workflow operations.
  *   'state':  Allow modules to insert state operations.
- * @param \Drupal\Core\Entity\EntityInterface|null $entity
+ * @param EntityInterface|null $entity
  *   The current workflow/state/transition object.
  *
  * @return array
@@ -44,7 +46,7 @@ function hook_workflow_operations($op, EntityInterface $entity = NULL) {
 
     case 'workflow':
       // This example adds an operation to the 'operations column' of the Workflow List.
-      /** @var \Drupal\workflow\Entity\Workflow $workflow */
+      /** @var Workflow $workflow */
       $workflow = $entity;
 
       $alt = t('Control content access for @wf', ['@wf' => $workflow->label()]);
@@ -58,16 +60,15 @@ function hook_workflow_operations($op, EntityInterface $entity = NULL) {
       return $operations;
 
     case 'state':
-      /** @var \Drupal\workflow\Entity\WorkflowState $state */
+      /** @var WorkflowState $state */
       $state = $entity;
       break;
 
     case 'workflow_transition':
       // As of D8, below hook_workflow_operations is removed, in favour of core hooks.
       // @see EntityListBuilder::getOperations, workflow_operations, workflow.api.php.
-
       // Your module may add operations to the Entity list.
-      /** @var \Drupal\workflow\Entity\WorkflowTransitionInterface $transition */
+      /** @var WorkflowTransitionInterface $transition */
       $transition = $entity;
       break;
 
@@ -86,9 +87,9 @@ function hook_workflow_operations($op, EntityInterface $entity = NULL) {
  * @param string $op
  *   The current workflow operation.
  *   E.g., 'transition pre', 'transition post'.
- * @param \Drupal\workflow\Entity\WorkflowTransitionInterface $transition
+ * @param WorkflowTransitionInterface $transition
  *   The transition, that contains all of the above.
- * @param \Drupal\user\UserInterface $user
+ * @param UserInterface $user
  *
  * @return bool|void
  *   The return value, depending on $op.
@@ -187,8 +188,7 @@ function hook_workflow_history_alter(array &$variables) {
  */
 function hook_workflow_comment_alter(&$comment, array &$context) {
   // workflow_debug(__FILE__, __FUNCTION__, __LINE__, '', '');
-
-  /** @var \Drupal\workflow\Entity\WorkflowTransitionInterface $transition */
+  /** @var WorkflowTransitionInterface $transition */
   $transition = $context['transition'];
   //$comment = $transition->getOwner()->getUsername() . ' says: ' . $comment;
 }
@@ -227,7 +227,7 @@ function hook_workflow_permitted_state_transitions_alter(array &$transitions, ar
 
   // Implement here own permission logic.
   foreach ($transitions as $key => $transition) {
-    /** @var \Drupal\workflow\Entity\WorkflowTransitionInterface $transition*/
+    /** @var WorkflowTransitionInterface $transition*/
     if (!$transition->isAllowed($user, $force)) {
       // unset($transitions[$key]);
     }
@@ -289,7 +289,7 @@ function hook_field_widget_workflow_default_form_alter(&$element, FormStateInter
     return;
   }
   // This object contains all you need. You may find it in one of two locations.
-  /** @var \Drupal\workflow\Entity\WorkflowTransitionInterface $transition */
+  /** @var WorkflowTransitionInterface $transition */
   if (!isset($element['#default_value'])) {
     return;
   }
@@ -330,7 +330,7 @@ function hook_form_workflow_transition_form_alter(&$form, FormStateInterface $fo
   $workflow_element = &$form;
 
   // This object contains all you need. You may find it in one of two locations.
-  /** @var \Drupal\workflow\Entity\WorkflowTransitionInterface $transition */
+  /** @var WorkflowTransitionInterface $transition */
   $transition = $form['workflow_transition']['#value'];
 
   // An example of customizing/overriding the workflow widget.
@@ -347,7 +347,7 @@ function hook_form_workflow_transition_form_alter(&$form, FormStateInterface $fo
   }
 
   // Get the Entity.
-  /** @var \Drupal\Core\Entity\EntityInterface $entity */
+  /** @var EntityInterface $entity */
   $entity = NULL;
   //$entity = $form['workflow_entity']['#value'];
   $entity_type = 'node'; // $form['workflow_entity_type']['#value'];
@@ -398,7 +398,7 @@ function hook_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  * @see #2899025 'Attached field type 'file' not working on WorkflowTransition'.
  */
 function hook_copy_form_values_to_transition_field_alter(EntityInterface $entity, $context) {
-  /** @var \Drupal\Core\Field\Entity\BaseFieldOverride $field */
+  /** @var BaseFieldOverride $field */
   $field = $context['field'];
   $field_name = $context['field_name'];
   $user_input = $context['user_input'];
diff --git a/workflow.entity.inc b/workflow.entity.inc
index 44465e4..ae3a00e 100644
--- a/workflow.entity.inc
+++ b/workflow.entity.inc
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\workflow\Entity\WorkflowTransitionInterface;
 /**
  * @file
  * Implements entity hooks.
@@ -33,7 +34,7 @@ function workflow_entity_operation(EntityInterface $entity) {
     return $operations;
   }
 
-  /** @var \Drupal\workflow\Entity\WorkflowTransitionInterface $transition */
+  /** @var WorkflowTransitionInterface $transition */
   $transition = $entity;
 
   if (!$transition->isRevertable()) {
diff --git a/workflow.field.inc b/workflow.field.inc
index 1e44784..c1fa507 100644
--- a/workflow.field.inc
+++ b/workflow.field.inc
@@ -81,7 +81,7 @@ function workflow_field_widget_info_alter(&$info) {
 /**
  * Creates a form element to show the current value of a Workflow state.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity this field is on.
  * @param string $field_name
  *   The field_name.
@@ -101,7 +101,7 @@ function workflow_state_formatter(EntityInterface $entity, $field_name, $current
   // If user creates a node, and only 1 option is available, the formatter
   // is shown with key, not value, because creation state does not count.
   // In this case, hide the formatter.
-  /** @var \Drupal\workflow\Entity\WorkflowState $state */
+  /** @var WorkflowState $state */
   $state = WorkflowState::load($current_sid);
   if ($state && $state->isCreationState()) {
     return $element;
@@ -133,7 +133,7 @@ function workflow_state_formatter(EntityInterface $entity, $field_name, $current
  * Saving the field data again does not remove the settings.
  * So, we copy code from options_allowed_values().
  *
- * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
+ * @param FieldStorageDefinitionInterface $definition
  *
  * @return mixed
  */
diff --git a/workflow.form.inc b/workflow.form.inc
index 632e348..2a266f4 100644
--- a/workflow.form.inc
+++ b/workflow.form.inc
@@ -137,7 +137,7 @@ function _workflow_transition_form_get_first_workflow_element(&$form) {
 function _workflow_transition_form_get_action_buttons(array $form, array $workflow_element, array $default_submit_action) {
   $actions = [];
   $current_sid = $workflow_element['to_sid']['#default_value'];
-  /** @var \Drupal\workflow\Entity\WorkflowTransitionInterface $transition */
+  /** @var WorkflowTransitionInterface $transition */
   $transition = $workflow_element['workflow_transition']['#value'];
   $field_name = $transition->getFieldName();
 
@@ -215,7 +215,7 @@ function _workflow_transition_form_get_action_buttons(array $form, array $workfl
 /**
  * Get the Workflow parameter from the button, pressed by the user.
  *
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state.
  *
  * @return array
@@ -239,7 +239,7 @@ function _workflow_transition_form_get_triggering_button(FormStateInterface $for
  * Validate form data for 'time' element.
  *
  * @param $element
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  * @param $form
  */
 function _workflow_transition_form_element_validate_time($element, FormStateInterface &$form_state, $form) {
diff --git a/workflow.module b/workflow.module
index c949619..2c40575 100644
--- a/workflow.module
+++ b/workflow.module
@@ -1,5 +1,9 @@
 <?php
 
+use Drupal\Core\Entity\ContentEntityBase;
+use Drupal\user\UserInterface;
+use Drupal\Core\Field\BaseFieldDefinition;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 /**
  * @file
  * Support workflows made up of arbitrary states.
@@ -119,7 +123,6 @@ function workflow_hook_info() {
 /**********************************************************************
  * CRUD hooks.
  */
-
 /**
  * Implements hook_user_cancel().
  *
@@ -128,13 +131,12 @@ function workflow_hook_info() {
  * be accessible to Anonymous.
  *
  * @param $edit
- * @param \Drupal\Core\Session\AccountInterface $account
+ * @param AccountInterface $account
  *   An account object.
  * @param string $method
  *
  * @see hook_user_cancel()
  */
-
 function workflow_user_cancel($edit, AccountInterface $account, $method) {
   WorkflowManager::cancelUser($edit, $account, $method);
 }
@@ -142,7 +144,7 @@ function workflow_user_cancel($edit, AccountInterface $account, $method) {
 /**
  * Implements hook_user_delete().
  *
- * @param \Drupal\Core\Session\AccountInterface $account
+ * @param AccountInterface $account
  *   An account object.
  *
  * @todo Hook hook_user_delete does not exist. hook_ENTITY_TYPE_delete?
@@ -157,7 +159,7 @@ function workflow_user_delete($account) {
  * Is called when adding a new Workflow type.
  * The technical name for the Workflow entity is 'workflow_type'.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   An Entity.
  */
 function workflow_workflow_type_insert(EntityInterface $entity) {
@@ -167,7 +169,7 @@ function workflow_workflow_type_insert(EntityInterface $entity) {
 /**
  * Implements hook_entity_insert().
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   An Entity.
  */
 function workflow_entity_insert(EntityInterface $entity) {
@@ -179,7 +181,7 @@ function workflow_entity_insert(EntityInterface $entity) {
 /**
  * Implements hook_entity_presave().
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   An EntityInterface object.
  */
 function workflow_entity_presave(EntityInterface $entity) {
@@ -195,7 +197,7 @@ function workflow_entity_presave(EntityInterface $entity) {
  *  - update: use hook_presave() to revert executions,
  *  - so, do not use hook_update().
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   An Entity.
  */
 function _workflow_execute_transitions(EntityInterface $entity) {
@@ -213,7 +215,7 @@ function _workflow_execute_transitions(EntityInterface $entity) {
  *
  * Delete the corresponding workflow table records.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   An Entity.
  */
 function workflow_entity_delete(EntityInterface $entity) {
@@ -222,10 +224,10 @@ function workflow_entity_delete(EntityInterface $entity) {
     || get_class($entity) == 'Drupal\field\Entity\FieldStorageConfig') {
     // A Workflow Field is removed from an entity.
     $field_config = $entity;
-    /** @var \Drupal\Core\Entity\ContentEntityBase $field_config */
+    /** @var ContentEntityBase $field_config */
     $entity_type = $field_config->get('entity_type');
     $field_name = $field_config->get('field_name');
-    /** @var \Drupal\workflow\Entity\WorkflowTransitionInterface $transition */
+    /** @var WorkflowTransitionInterface $transition */
     foreach (WorkflowScheduledTransition::loadMultipleByProperties($entity_type, [], [], $field_name) as $transition) {
       $transition->delete();
     }
@@ -239,7 +241,7 @@ function workflow_entity_delete(EntityInterface $entity) {
       $entity_id = $entity->id();
       $entity_type = $field_storage->getTargetEntityTypeId();
       $field_name = $field_storage->getName();
-      /** @var \Drupal\workflow\Entity\WorkflowTransitionInterface $transition */
+      /** @var WorkflowTransitionInterface $transition */
       foreach (WorkflowScheduledTransition::loadMultipleByProperties($entity_type, [$entity_id], [], $field_name) as $transition) {
         $transition->delete();
       }
@@ -274,9 +276,8 @@ function workflow_theme() {
 /**
  * Business related functions, the API.
  */
-
 /**
- * @param \Drupal\workflow\Entity\WorkflowTransitionInterface $transition
+ * @param WorkflowTransitionInterface $transition
  *   A WorkflowTransition.
  * @param bool $force
  *   Indicator if the transition must be forces.
@@ -361,13 +362,13 @@ function workflow_get_workflow_state_names($wid = '', $grouped = FALSE) {
   // Since this function is only used in UI, it is save to use the global $user.
   $user = workflow_current_user();
 
-  /** @var \Drupal\workflow\Entity\Workflow[] $workflows */
+  /** @var Workflow[] $workflows */
   $workflows = Workflow::loadMultiple($wid ? [$wid] : NULL);
   // Do not group if only 1 Workflow is configured or selected.
   $grouped = count($workflows) == 1 ? FALSE : $grouped;
 
   foreach ($workflows as $wid => $workflow) {
-    /** @var \Drupal\workflow\Entity\WorkflowState $state */
+    /** @var WorkflowState $state */
     $state = WorkflowState::create(['wid' => $wid]);
     $workflow_options = $state->getOptions(NULL, '', $user, FALSE);
     if (!$grouped) {
@@ -399,7 +400,7 @@ function workflow_get_workflow_names($required = TRUE) {
     $options[''] = t('- Select a value -');
   }
   foreach (Workflow::loadMultiple() as $wid => $workflow) {
-    /** @var \Drupal\workflow\Entity\Workflow $workflow */
+    /** @var Workflow $workflow */
     if ($workflow->isValid()) {
       $options[$wid] = $workflow->label();
     }
@@ -411,7 +412,7 @@ function workflow_get_workflow_names($required = TRUE) {
 /**
  * Gets an Options list of field names.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   An entity.
  * @param string $entity_type
  *   An entity_type.
@@ -461,7 +462,7 @@ function workflow_get_sid_name($sid) {
  * Determines the Workflow field_name of an entity.
  * If an entity has multiple workflows, only returns the first one.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity at hand.
  * @param string $field_name
  *   The field name. If given, will be passed as return value.
@@ -486,14 +487,13 @@ function workflow_get_field_name(EntityInterface $entity, $field_name = '') {
 /**
  * Functions to get the state of an entity.
  */
-
 /**
  * Wrapper function to get a UserInterface object.
  *
- * @param \Drupal\Core\Session\AccountInterface|null $account
+ * @param AccountInterface|null $account
  *   An Account.
  *
- * @return \Drupal\user\UserInterface
+ * @return UserInterface
  *   A User to check permissions, since we can't add Roles to AccountInterface.
  */
 function workflow_current_user(AccountInterface $account = NULL) {
@@ -506,7 +506,7 @@ function workflow_current_user(AccountInterface $account = NULL) {
 /**
  * Gets the current state ID of a given entity.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   An entity.
  * @param string $field_name
  *   A Field name.
@@ -521,7 +521,7 @@ function workflow_node_current_state(EntityInterface $entity, $field_name = '')
 /**
  * Gets the previous state ID of a given entity.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   An entity.
  * @param string $field_name
  *   A field_name.
@@ -544,7 +544,7 @@ function workflow_node_previous_state(EntityInterface $entity, $field_name = '')
  * @param string $entity_type
  *   An entity type. This is passed when also the Field API must be checked.
  *
- * @return \Drupal\workflow\Entity\Workflow
+ * @return Workflow
  *   A Workflow object, or NULL if no workflow is retrieved.
  */
 function workflow_get_workflows_by_type($entity_bundle, $entity_type) {
@@ -583,7 +583,7 @@ function workflow_get_workflow_fields_by_entity_type() {
 /**
  * Gets the workflow field names, if not known already.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   Object to work with. May be empty, e.g., on menu build.
  * @param string $entity_type
  *   Entity type of object. Optional, but required if $entity provided.
@@ -592,7 +592,7 @@ function workflow_get_workflow_fields_by_entity_type() {
  * @param string $field_name
  *   Field name. Optional.
  *
- * @return Drupal\field\Entity\FieldStorageConfig[]
+ * @return FieldStorageConfig[]
  *   An array of FieldStorageConfig objects.
  */
 function _workflow_info_fields($entity = NULL, $entity_type = '', $entity_bundle = '', $field_name = '') {
@@ -626,7 +626,7 @@ function _workflow_info_fields($entity = NULL, $entity_type = '', $entity_bundle
               // Re-fetch the field definitions, with extra data.
               $field_definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions($e_type, $entity_bundle);
               // @todo Loop over bundles?
-              /** @var \Drupal\Core\Field\BaseFieldDefinition $field_config */
+              /** @var BaseFieldDefinition $field_config */
               $field_config = $field_definitions[$f_name];
               if ($field_config) {
                 $field_info[$field_config->getUniqueStorageIdentifier()] = $field_config;
@@ -648,12 +648,12 @@ function _workflow_info_fields($entity = NULL, $entity_type = '', $entity_bundle
  *
  * This is a hack. It should be solved by using $route_match.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   An optional entity.
- * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+ * @param RouteMatchInterface $route_match
  *   A route.
  *
- * @return \Drupal\Core\Entity\EntityInterface
+ * @return EntityInterface
  *   Entity from the route.
  */
 function workflow_url_get_entity(EntityInterface $entity = NULL, RouteMatchInterface $route_match = NULL) {
@@ -735,11 +735,11 @@ function workflow_url_get_parameter($parameter) {
 /**
  * Helper function to determine Workflow from Workflow UI URL.
  *
- * @return \Drupal\workflow\Entity\Workflow
+ * @return Workflow
  *   Workflow Object.
  */
 function workflow_url_get_workflow() {
-  /** @var \Drupal\workflow\Entity\Workflow[] $workflows */
+  /** @var Workflow[] $workflows */
   static $workflows = [];
 
   $wid = workflow_url_get_parameter('workflow_type');
@@ -760,7 +760,7 @@ function workflow_url_get_workflow() {
  *
  * Used in file workflow.routing.yml.
  *
- * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+ * @return TranslatableMarkup
  *   the page title.
  */
 function workflow_url_get_title() {
diff --git a/workflow.theme.inc b/workflow.theme.inc
index 1f28e39..467b599 100644
--- a/workflow.theme.inc
+++ b/workflow.theme.inc
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\workflow\Entity\WorkflowTransitionInterface;
 /**
  * @file
  * Preprocessors for workflow elements.
@@ -19,7 +20,7 @@ use Drupal\Core\Template\Attribute;
  *     the details element. Properties used: #children.
  */
 function template_preprocess_workflow_transition(array &$variables) {
-  /** @var \Drupal\workflow\Entity\WorkflowTransitionInterface $workflowTransition */
+  /** @var WorkflowTransitionInterface $workflowTransition */
   $workflowTransition = $variables['elements']['#workflow_transition'];
 
   $variables['from_state'] = $workflowTransition->getFromState();
