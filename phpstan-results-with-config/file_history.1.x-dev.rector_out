modules/contrib/file_history/file_history.module
modules/contrib/file_history/src/Controller/FileHistoryController.php
modules/contrib/file_history/src/Element/FileHistory.php
modules/contrib/file_history/src/Form/ExempleForm.php

2 files with changes
====================

1) modules/contrib/file_history/src/Element/FileHistory.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\file_history\Element;

+use Drupal\Core\Render\RendererInterface;
+use Drupal\file\FileInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Symfony\Component\HttpFoundation\File\UploadedFile;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\ReplaceCommand;
@@ @@
    *
    * @param mixed $form
    *   The build form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The ajax response of the ajax upload.
    */
   public static function uploadAjaxCallback(&$form, FormStateInterface &$form_state, Request $request) {
-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = \Drupal::service('renderer');

     $form_parents = explode('/', $request->query->get('element_parents'));
@@ @@
    * @param string $uri
    *   Uri of file.
    *
-   * @return \Drupal\file\FileInterface|null
+   * @return FileInterface|null
    *   returns a file given the uri.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public static function getFileFromUri($uri) {
     $files = \Drupal::entityTypeManager()->getStorage('file')->loadByProperties(['uri' => $uri]);
@@ @@
   /**
    * Generate Download URL.
    *
-   * @param \Drupal\file\Entity\File $file
+   * @param File $file
    *   File object.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   Url object
    */
   public static function makeDownloadLink(File $file) {
@@ @@
     $scheme = \Drupal::service('stream_wrapper_manager')->getScheme($path);

     if ($scheme == 'public') {
-      $filepath = file_create_url($path);
+      $filepath = \Drupal::service('file_url_generator')->generateAbsoluteString($path);
       return Url::fromUri($filepath);
     }
     else {
@@ @@
    *   Element.
    * @param mixed $input
    *   Input.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   FormState.
    *
    * @return bool
@@ @@

     $all_files = \Drupal::request()->files->get('files', []);
     $upload_name = $element['#name'];
-    /** @var \Symfony\Component\HttpFoundation\File\UploadedFile $uploaded_file */
+    /** @var UploadedFile $uploaded_file */
     $uploaded_file = $all_files[$upload_name];

     if (is_array($uploaded_file) && isset($uploaded_file[0])) {
@@ @@
         $file_data_for_validation = [
           'file_original_name' => $uploaded_file->getClientOriginalName(),
           'file_original_extension' => $uploaded_file->getClientOriginalExtension(),
-          'file_size' => $uploaded_file->getClientSize(),
+          'file_size' => $uploaded_file->getSize(),
           'file_path' => $uploaded_file->getRealPath(),
         ];

@@ @@
       // If validation pass, we save file.
       $destination = isset($element['#upload_location']) ? $element['#upload_location'] : NULL;

-      \Drupal::service('file_system')->prepareDirectory($destination, \Drupal\Core\File\FileSystemInterface::CREATE_DIRECTORY);
+      \Drupal::service('file_system')->prepareDirectory($destination, FileSystemInterface::CREATE_DIRECTORY);

       if (!$files = file_save_upload($upload_name, $element['#upload_validators'], $destination)) {
         \Drupal::logger('file')->notice('The file upload failed. %upload', ['%upload' => $upload_name]);
@@ @@
       }
       else {
         // Set file as permanent.
-        /** @var \Drupal\file\Entity\File $file */
+        /** @var File $file */
         foreach ($files as $file) {
           if ($file != NULL && $file->isTemporary()) {
             $file->setPermanent();
@@ @@
    *
    * @param mixed $element
    *   Element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameMethodRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/file_history/src/Controller/FileHistoryController.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * File system.
    *
-   * @var \Drupal\Core\File\FileSystem
+   * @var FileSystem
    */
   private $fileSystemService;

@@ @@
    */
   public static function create(ContainerInterface $container) {

-    /** @var \Drupal\Core\File\FileSystem $file_system_service */
+    /** @var FileSystem $file_system_service */
     $file_system_service = $container->get('file_system');

     return new static($file_system_service);
@@ @@
   /**
    * Download non public files.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   File object.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   File content
    */
   public function downloadFile(FileInterface $file) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 2 files have been changed by Rector                                       

