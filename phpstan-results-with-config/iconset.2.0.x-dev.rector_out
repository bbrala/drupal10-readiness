modules/contrib/iconset/iconset.install
modules/contrib/iconset/iconset.module
modules/contrib/iconset/modules/iconset_embed/iconset_embed.module
modules/contrib/iconset/modules/iconset_embed/src/Form/EditorIconSelector.php
modules/contrib/iconset/modules/iconset_embed/src/Plugin/CKEditorPlugin/Iconset.php
modules/contrib/iconset/modules/iconset_embed/src/Plugin/Filter/IconsetFilter.php
modules/contrib/iconset/modules/iconset_menu/iconset_menu.install
modules/contrib/iconset/modules/iconset_menu/iconset_menu.module
modules/contrib/iconset/modules/iconset_menu/src/Form/IconsetMenuSettings.php
modules/contrib/iconset/modules/iconset_menu/src/IconsetMenuFormatter.php
modules/contrib/iconset/modules/iconset_menu/src/Plugin/Derivative/IconsetMenuSettingsTask.php
modules/contrib/iconset/modules/iconset_menu/src/Routing/RouteSubscriber.php
modules/contrib/iconset/src/Annotation/IconsetIconHandler.php
modules/contrib/iconset/src/Asset/AssetInterface.php
modules/contrib/iconset/src/Asset/FileAssetInterface.php
modules/contrib/iconset/src/Asset/FontAsset.php
modules/contrib/iconset/src/Asset/FontAssetInterface.php
modules/contrib/iconset/src/Asset/ImageAsset.php
modules/contrib/iconset/src/Asset/SvgSpriteAsset.php
modules/contrib/iconset/src/Controller/IconsetDataController.php
modules/contrib/iconset/src/Element/IconsetIcon.php
modules/contrib/iconset/src/Element/IconsetSelector.php
modules/contrib/iconset/src/Exception/IconNotFoundException.php
modules/contrib/iconset/src/Form/IconsetSettingsForm.php
modules/contrib/iconset/src/IconBuilderInterface.php
modules/contrib/iconset/src/IconsetDefault.php
modules/contrib/iconset/src/IconsetInterface.php
modules/contrib/iconset/src/IconsetManager.php
modules/contrib/iconset/src/IconsetManagerInterface.php
modules/contrib/iconset/src/ParamConverter/IconsetParamConverter.php
modules/contrib/iconset/src/Plugin/Field/FieldFormatter/IconLinkFormatter.php
modules/contrib/iconset/src/Plugin/Field/FieldFormatter/IconsetFormatter.php
modules/contrib/iconset/src/Plugin/Field/FieldType/IconsetFieldItem.php
modules/contrib/iconset/src/Plugin/Field/FieldWidget/IconLinkWidget.php
modules/contrib/iconset/src/Plugin/Field/FieldWidget/IconsetWidget.php
modules/contrib/iconset/src/Plugin/IconHandlerFileBase.php
modules/contrib/iconset/src/Plugin/IconHandlerFileInterface.php
modules/contrib/iconset/src/Plugin/IconHandlerInterface.php
modules/contrib/iconset/src/Plugin/IconHandlerPluginManager.php
modules/contrib/iconset/src/Plugin/Iconset/ImgIconHandler.php
modules/contrib/iconset/src/Plugin/Iconset/SvgFontHandler.php
modules/contrib/iconset/src/Plugin/Iconset/SvgIconHandler.php
modules/contrib/iconset/src/Twig/IconsetTwigExtension.php
modules/contrib/iconset/src/Xml/XmlMismatchedTagException.php

30 files with changes
=====================

1) modules/contrib/iconset/src/Twig/IconsetTwigExtension.php:33

    ---------- begin diff ----------
@@ @@
    *   Iconset ID for the set the requested icon is from.
    * @param string $icon_id
    *   Machine name identifier for the icon to render.
-   * @param array|\Drupal\Core\Template\Attribute $attributes
+   * @param array|Attribute $attributes
    *   An optional array or Attribute object of link attributes.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/iconset/src/Plugin/Iconset/SvgFontHandler.php:54

    ---------- begin diff ----------
@@ @@
    *   The unique icon handler plugin ID.
    * @param mixed $plugin_definition
    *   The plugin definition from the plugin discovery.
-   * @param \Drupal\Core\File\FileSystemInterface $filesystem
+   * @param FileSystemInterface $filesystem
    *   Filesystem utilities and helper methods.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, FileSystemInterface $filesystem) {
@@ @@
    *   The asset string to identify the asset being searched. The asset is
    *   defined relative to the iconset it is being used for.
    *
-   * @return \Drupal\iconset\Asset\FontAsset[]|null
+   * @return FontAsset[]|null
    *   An array of icon data for SVG icon file or SVG icon sprites. The icon
    *   data must have an ID for every icon, label and viewBox values.
    */
@@ @@
    * @param \XMLReader $xml
    *   XMLReader instance pointed at the <em>defs</em> element definition.
    *
-   * @return \Drupal\iconset\Asset\FontAsset|null
+   * @return FontAsset|null
    *   Returned a FontAsset if icon glyphs could be found and read. If no icons
    *   found, NULL will be returned instead.
    *
-   * @throws \Drupal\iconset\Xml\XmlMismatchedTagException
+   * @throws XmlMismatchedTagException
    */
   protected function parseSvgFont(\XMLReader $xml) {
     $font = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/iconset/src/Plugin/Iconset/ImgIconHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\iconset\Plugin\Iconset;

+use Drupal\Core\ImageToolkit\ImageToolkitInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\File\FileSystemInterface;
@@ @@
   /**
    * Image toolkit instance for image manipulation.
    *
-   * @var \Drupal\Core\ImageToolkit\ImageToolkitInterface
+   * @var ImageToolkitInterface
    */
   protected $imageToolkit;

@@ @@
    *   The plugin ID.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\File\FileSystemInterface $filesystem
+   * @param FileSystemInterface $filesystem
    *   Filesystem service.
-   * @param \Drupal\Core\ImageToolkit\ImageToolkitManager $image_toolkit_manager
+   * @param ImageToolkitManager $image_toolkit_manager
    *   The image toolkit manager to getting an image toolkit instance.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, FileSystemInterface $filesystem, ImageToolkitManager $image_toolkit_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/iconset/src/Plugin/IconHandlerPluginManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   The handler for traversing namespaces when discovering
    *   Toolshed icon plugin availability.
-   * @param Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The caching backend to use in storing configurations and definitions
    *   of icon plugins.
-   * @param Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Module handler for determining active modules for discover and applying
    *   Drupal alter hooks.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/iconset/src/Plugin/IconHandlerInterface.php:22

    ---------- begin diff ----------
@@ @@
    * @param string|array $asset_info
    *   Information from the iconset definition about the asset to generate with
    *   this icon handler plugin.
-   * @param \Drupal\iconset\IconsetInterface $iconset
+   * @param IconsetInterface $iconset
    *   The iconset plugin that this asset is being generated for.
    *
-   * @return \Drupal\iconset\Asset\AssetInterface|\Drupal\iconset\Asset\AssetInterface[]|null
+   * @return AssetInterface|AssetInterface[]|null
    *   If asset can be used and has icons (successful icon discovery), then an
    *   asset instance will be returned. NULL will be returned if asset has no
    *   icons or if icon plugin is not able to load and discover icons.
@@ @@
   /**
    * Fetch the data to be consumed by a JS icon handler on the clientside.
    *
-   * @param \Drupal\iconset\Asset\AssetInterface $asset
+   * @param AssetInterface $asset
    *   An asset containing icons to format JSON data from.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/iconset/src/Plugin/IconHandlerFileInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\iconset\Plugin;

+use Drupal\iconset\Asset\AssetInterface;
 use Drupal\iconset\IconsetInterface;

 /**
@@ @@
    * @param string|array $asset_info
    *   Information from the iconset definition about the asset to generate with
    *   this icon handler plugin.
-   * @param Drupal\iconset\IconsetInterface $iconset
+   * @param IconsetInterface $iconset
    *   The iconset the assets are being created for.
    *
-   * @return \Drupal\iconset\Asset\AssetInterface|\Drupal\iconset\Asset\AssetInterface[]|null
+   * @return AssetInterface|AssetInterface[]|null
    *   If asset can be used and has icons (successful icon discovery), then an
    *   asset instance will be returned. NULL will be returned if asset has no
    *   icons or if icon plugin is not able to load and discover icons.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/iconset/src/Plugin/IconHandlerFileBase.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Filesystem utilities and helper methods.
    *
-   * @var Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $filesystem;

@@ @@
    *   The unique icon handler plugin ID.
    * @param mixed $plugin_definition
    *   The plugin definition from the plugin discovery.
-   * @param \Drupal\Core\File\FileSystemInterface $filesystem
+   * @param FileSystemInterface $filesystem
    *   Filesystem utilities and helper methods.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, FileSystemInterface $filesystem) {
@@ @@
     }
     else {
       $pluginDef = $iconset->getPluginDefinition();
-      $filepath = drupal_get_path($pluginDef['type'], $pluginDef['provider']) . '/' . $uri;
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Unsupported extension type encountered, using extension.path.resolver instead of extension.list
+      $filepath = \Drupal::service('extension.path.resolver')->getPath($pluginDef['type'], $pluginDef['provider']) . '/' . $uri;
     }

     if (!file_exists($filepath)) {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/iconset/src/Plugin/Field/FieldWidget/IconLinkWidget.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The iconset plugin manager.
    *
-   * @var \Drupal\iconset\IconsetManagerInterface
+   * @var IconsetManagerInterface
    */
   protected $iconsetManager;

@@ @@
    *   The plugin_id for the widget.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the widget is associated.
    * @param array $settings
    *   The widget settings.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\iconset\IconsetManagerInterface $iconset_manager
+   * @param IconsetManagerInterface $iconset_manager
    *   The iconset plugin manager.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, IconsetManagerInterface $iconset_manager) {
@@ @@
    *
    * @param array $element
    *   The checkboxes form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state, values and build information.
    * @param array $complete_form
    *   Reference to the entire form being validated.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/iconset/src/Plugin/Field/FieldType/IconsetFieldItem.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\iconset\Plugin\Field\FieldType;

+use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\TypedData\DataDefinition;
 use Drupal\Core\Field\FieldItemBase;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
@@ @@
   /**
    * Plugin manager for iconset discovery and definitions.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $iconsetManager;

@@ @@
   /**
    * Get the Iconset plugin manager.
    *
-   * @return \Drupal\Component\Plugin\PluginManagerInterface
+   * @return PluginManagerInterface
    *   Plugin manager for iconset discovery and definitions.
    */
   protected function getIconsetManager() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/iconset/src/Plugin/Field/FieldFormatter/IconsetFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\iconset\Plugin\Field\FieldFormatter;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    * @param array $settings
    *   The formatter settings.
-   * @param \Drupal\Core\StringTranslation\TranslatableMarkup|string $label
+   * @param TranslatableMarkup|string $label
    *   The field label.
    * @param string $view_mode
    *   The view mode machine name.
    * @param array $third_party_settings
    *   Third party settings for the field formatter.
-   * @param \Drupal\iconset\IconsetManagerInterface $iconset_manager
+   * @param IconsetManagerInterface $iconset_manager
    *   The iconset manager.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, IconsetManagerInterface $iconset_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/iconset/src/Plugin/Field/FieldFormatter/IconLinkFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\iconset\Plugin\Field\FieldFormatter;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
    * set dependencies conditionally or with method calls instead of with
    * constructor arguments.
    *
-   * @param \Drupal\iconset\IconsetManagerInterface $iconset_manager
+   * @param IconsetManagerInterface $iconset_manager
    *   The iconset manager.
    */
   public function setIconsetManager(IconsetManagerInterface $iconset_manager) {
@@ @@
   /**
    * Get the icon rendering style options available to the link formatter.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup[]
+   * @return TranslatableMarkup[]
    *   An array of options for rendering style of the link title and icon.
    */
   public function getDisplayStyles() {
@@ @@
    *
    * @throws \Drupal\Core\Plugin\PluginException
    *   Missing iconset, or other problem retrieving the iconset requested.
-   * @throws \Drupal\iconset\Exception\IconNotFoundException
+   * @throws IconNotFoundException
    *   If requested icon is not available or part of the specified iconset.
    */
   protected function buildIconOnly(array $element, array $icon, array $options = []) {
@@ @@
    *
    * @throws \Drupal\Core\Plugin\PluginException
    *   Missing iconset, or other problem retrieving the iconset requested.
-   * @throws \Drupal\iconset\Exception\IconNotFoundException
+   * @throws IconNotFoundException
    *   If requested icon is not available or part of the specified iconset.
    */
   protected function buildIconAndText(array $element, array $icon, array $options = []) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/iconset/src/ParamConverter/IconsetParamConverter.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The iconset plugin manager.
    *
-   * @var \Drupal\iconset\IconsetManagerInterface
+   * @var IconsetManagerInterface
    */
   protected $iconsetManager;

@@ @@
   /**
    * Create a new instance of the IconsetParamConverter class.
    *
-   * @param \Drupal\iconset\IconsetManagerInterface $iconset_manager
+   * @param IconsetManagerInterface $iconset_manager
    *   The iconset plugin manager.
    */
   public function __construct(IconsetManagerInterface $iconset_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/iconset/src/IconsetManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\iconset;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Plugin\PluginManagerInterface;

 /**
@@ @@
    *   for internal module or theme usage. This flag helps to limit the list
    *   of icons available on administrative forms.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup[]|string[]
+   * @return TranslatableMarkup[]|string[]
    *   An array keyed by the iconset identifier, and has a value which is the
    *   plugin label.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/iconset/src/IconsetManager.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The theme handler service for Drupal.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
   /**
    * Dependency injection class resolver.
    *
-   * @var \Drupal\Core\DependencyInjection\ClassResolverInterface
+   * @var ClassResolverInterface
    */
   protected $classResolver;

@@ @@
   /**
    * Create new instance of the Iconset plugin manager.
    *
-   * @param Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The service class that manages the modules and invokes module hooks.
-   * @param Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The service class that manages themes.
-   * @param Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The caching backend to use for caching plugin definitions.
-   * @param \Drupal\Core\DependencyInjection\ClassResolverInterface $class_resolver
+   * @param ClassResolverInterface $class_resolver
    *   Dependency injection class resolver.
    */
   public function __construct(ModuleHandlerInterface $module_handler, ThemeHandlerInterface $theme_handler, CacheBackendInterface $cache_backend, ClassResolverInterface $class_resolver) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/iconset/src/IconsetInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\iconset;

+use Drupal\iconset\Exception\IconNotFoundException;
 use Drupal\Component\Plugin\DerivativeInspectionInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;

@@ @@
   /**
    * Set the builder object which builds icons into renderables for this set.
    *
-   * @param \Drupal\iconset\IconBuilderInterface $builder
+   * @param IconBuilderInterface $builder
    *   Builder object to use to build renderable icons for this set.
    */
   public function setBuilder(IconBuilderInterface $builder);
@@ @@
    *   Information about the icon includes the ID, label, viewbox and other
    *   icon handler specific data.
    *
-   * @throws \Drupal\iconset\Exception\IconNotFoundException
+   * @throws IconNotFoundException
    *   Exception for when $icon_id does not exist in this iconset.
    */
   public function getIcon($icon_id);
@@ @@
    * @return array
    *   Returns a renderable array of the icon requested.
    *
-   * @throws \Drupal\iconset\Exception\IconNotFoundException
+   * @throws IconNotFoundException
    *   Exception for when $icon_id does not exist in this iconset.
    */
   public function build($icon_id, array $options = []);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/iconset/src/IconsetDefault.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\iconset;

+use Drupal\iconset\Plugin\IconHandlerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ @@
   /**
    * Array of iconset asset instances.
    *
-   * @var \Drupal\iconset\Asset\AssetInterface[]
+   * @var AssetInterface[]
    */
   protected $assets;

@@ @@
   /**
    * The cache backend to store discovered icons from.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * An array of icon handlers being used, keyed by the resource name.
    *
-   * @var \Drupal\iconset\Plugin\IconHandlerInterface
+   * @var IconHandlerInterface
    */
   protected $handler;

@@ @@
   /**
    * Icon builder to use in generating renderable array for an icon in this set.
    *
-   * @var \Drupal\iconset\IconBuilderInterface
+   * @var IconBuilderInterface
    */
   protected $builder;

@@ @@
    *   The ID of this plugin, or the iconset name.
    * @param mixed $plugin_definition
    *   The iconset definition, which contains the handler type and resources.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $icon_handler_manager
+   * @param PluginManagerInterface $icon_handler_manager
    *   Plugin manager responsible for managing icon handlers.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache backend to use when caching iconset data.
    *
    * @throws \Drupal\Component\Plugin\PluginNotFoundException
@@ @@
    *   The ID of the icon to find. Method will return the asset which manages
    *   the icon matching this ID.
    *
-   * @return \Drupal\iconset\Asset\AssetInterface
+   * @return AssetInterface
    *   The asset from this iconset which owns the icon requested in $icon_id.
    *
-   * @throws \Drupal\iconset\Exception\IconNotFoundException
+   * @throws IconNotFoundException
    *   Is thrown when the icon cannot be found, or method is unable to determine
    *   which asset manages this icon.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/iconset/src/IconBuilderInterface.php:22

    ---------- begin diff ----------
@@ @@
    *
    * @param string $icon_id
    *   ID of the icon in this icon set to render.
-   * @param \Drupal\iconset\Asset\AssetInterface $iconset
+   * @param AssetInterface $iconset
    *   The icon asset resource that has the requested icon.
    * @param array $options
    *   Optional icon rendering parameters which can include the preferred width
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


18) modules/contrib/iconset/src/Form/IconsetSettingsForm.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal cache fetch / create service.
    *
-   * @var Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $iconsetCache;

@@ @@
   /**
    * Create a new instance of a configuration form for managing JS breakpoints.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $iconset_cache
+   * @param CacheBackendInterface $iconset_cache
    *   The cache backend for iconset plugin data.
    */
   public function __construct(ConfigFactoryInterface $config_factory, CacheBackendInterface $iconset_cache) {
@@ @@
    *
    * @param array $form
    *   The form elements and structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state, values and build information.
    */
   public function clearIconCacheSubmit(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/iconset/src/Element/IconsetSelector.php:88

    ---------- begin diff ----------
@@ @@
    *
    * @param array $element
    *   The form element to process.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
@@ @@
    *
    * @param array $element
    *   Definition of the icon selector form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form build and state.
    * @param array $form
    *   The complete form structure.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/iconset/src/Controller/IconsetDataController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\iconset\Controller;

+use Symfony\Component\HttpFoundation\JsonResponse;
 use Drupal\Core\Cache\CacheableMetaData;
 use Drupal\Core\Cache\CacheableJsonResponse;
 use Drupal\iconset\IconsetInterface;
@@ @@
   /**
    * Fetch the JSON data for the provided iconset plugin.
    *
-   * @param Drupal\iconset\IconsetInterface $iconset
+   * @param IconsetInterface $iconset
    *   A loaded iconset plugin.
    *
-   * @return Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   An HTTP response with the iconset data in JSON format.
    */
   public static function fetchJsonData(IconsetInterface $iconset) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


21) modules/contrib/iconset/src/Annotation/IconsetIconHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\iconset\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human friendly name of the Sassifrass compiler plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * Help or description or help text to help understand what this plugin is.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


22) modules/contrib/iconset/modules/iconset_menu/src/Routing/RouteSubscriber.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new RouteSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/iconset/modules/iconset_menu/src/Plugin/Derivative/IconsetMenuSettingsTask.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;

@@ @@
    *
    * @param string $base_plugin_id
    *   The plugin ID of the deriver definition.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
    */
   public function __construct($base_plugin_id, RouteProviderInterface $route_provider) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/iconset/modules/iconset_menu/src/IconsetMenuFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\iconset_menu;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The menu entity storage handler.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $menuStorage;

@@ @@
   /**
    * The plugin manager for managing iconsets.
    *
-   * @var \Drupal\iconset\IconsetManagerInterface
+   * @var IconsetManagerInterface
    */
   protected $iconsetManager;

@@ @@
   /**
    * The elements renderer object.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * Create a new instance of the IconsetMenuFormatter.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\iconset\IconsetManagerInterface $iconset_manager
+   * @param IconsetManagerInterface $iconset_manager
    *   The plugin manager responsible for fetching and discovering icons.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The elements renderer object.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, IconsetManagerInterface $iconset_manager, RendererInterface $renderer) {
@@ @@
   /**
    * Fetch the iconset menu rendering settings.
    *
-   * @param \Drupal\system\Entity\Menu|string $menu
+   * @param Menu|string $menu
    *   Either the menu entity or the menu entity ID.
    *
    * @return array
@@ @@
   /**
    * Apply the menu formatter style selected for the menu.
    *
-   * @param \Drupal\system\Entity\Menu|string $menu
+   * @param Menu|string $menu
    *   Either the menu entity or the menu entity ID.
    * @param array $items
    *   The individual menu items to alter with icon formatting styles.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


25) modules/contrib/iconset/modules/iconset_menu/src/Form/IconsetMenuSettings.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\iconset_menu\Form;

+use Drupal\system\MenuInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Utility for formatting menu with icon styles applied.
    *
-   * @var \Drupal\iconset_menu\IconsetMenuFormatter
+   * @var IconsetMenuFormatter
    */
   protected $menuFormatter;

@@ @@
   /**
    * The iconset manager.
    *
-   * @var \Drupal\iconset\IconsetManagerInterface
+   * @var IconsetManagerInterface
    */
   protected $iconsetManager;

@@ @@
   /**
    * Create a new instance of the IconsetMenuSettings form class.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\iconset_menu\IconsetMenuFormatter $iconset_menu_formatter
+   * @param IconsetMenuFormatter $iconset_menu_formatter
    *   Utility for formatting menu with icon styles applied.
-   * @param \Drupal\iconset\IconsetManagerInterface $iconset_manager
+   * @param IconsetManagerInterface $iconset_manager
    *   The iconset manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, IconsetMenuFormatter $iconset_menu_formatter, IconsetManagerInterface $iconset_manager) {
@@ @@
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     if ($menuName = $form_state->getTemporaryValue('menu_name')) {
-      /** @var \Drupal\system\MenuInterface */
+      /** @var MenuInterface */
       $menu = $this->entityTypeManager
         ->getStorage('menu')
         ->load($menuName);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/iconset/modules/iconset_menu/iconset_menu.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Field\FieldItemListInterface;
+use Drupal\menu_link_content\MenuLinkContentInterface;
 /**
  * @file
  * Drupal hooks and global functions for iconset_menu module.
@@ @@
  * Implements hook_field_widget_form_alter().
  */
 function iconset_menu_field_widget_form_alter(array &$element, FormStateInterface &$form_state, array $context) {
-  /** @var \Drupal\Core\Field\FieldItemListInterface */
+  /** @var FieldItemListInterface */
   $items = $context['items'];
   $entity = $items->getEntity();
   $field_name = $items->getName();

   if ($entity->getEntityTypeId() === 'menu_link_content' && $field_name === 'link') {
-    /** @var \Drupal\menu_link_content\MenuLinkContentInterface $entity */
+    /** @var MenuLinkContentInterface $entity */
     $settings = \Drupal::service('iconset.menu_formatter')
       ->getMenuSettings($entity->getMenuName());

@@ @@
  */
 function iconset_menu_preprocess_menu(array &$variables) {
   if (!empty($variables['menu_name'])) {
-    /** @var \Drupal\iconset_menu\IconsetMenuFormatter */
+    /** @var IconsetMenuFormatter */
     $menu_formatter = \Drupal::service('iconset.menu_formatter');
     $menu_formatter->format($variables['menu_name'], $variables['items'], $variables['attributes']);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


27) modules/contrib/iconset/modules/iconset_menu/iconset_menu.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\Sql\SqlEntityStorageInterface;
+use Drupal\menu_link_content\MenuLinkContentInterface;
 /**
  * @file
  * Install, database schema, requirements and update hooks for iconset_menu.
  */
-
 /**
  * Move existing menu_link_content icons into the link field options.
  */
@@ @@
   $icon_field_def = $entity_update_manager->getFieldStorageDefinition('iconset_icon', 'menu_link_content');

   if ($menu_link_type && $icon_field_def) {
-    /** @var \Drupal\Core\Entity\Sql\SqlEntityStorageInterface */
+    /** @var SqlEntityStorageInterface */
     $link_storage = \Drupal::entityTypeManager()
       ->getStorage($menu_link_type->id());

@@ @@
       ->fetchAllAssoc('id');

     if ($values) {
-      /** @var \Drupal\menu_link_content\MenuLinkContentInterface[] */
+      /** @var MenuLinkContentInterface[] */
       $menu_links = $link_storage->loadMultiple(array_keys($values));

       // Load and move the menu item storage definitions.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


28) modules/contrib/iconset/modules/iconset_embed/src/Plugin/Filter/IconsetFilter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\iconset_embed\Plugin\Filter;

+use Drupal\iconset\IconsetManager;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The iconset plugin manager.
    *
-   * @var \Drupal\iconset\IconsetManager
+   * @var IconsetManager
    */
   protected $iconsetManager;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\iconset\IconsetManagerInterface $iconset_manager
+   * @param IconsetManagerInterface $iconset_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, IconsetManagerInterface $iconset_manager, RendererInterface $renderer) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/iconset/modules/iconset_embed/src/Form/EditorIconSelector.php:93

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   Reference to the form element structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form submission state, values and build information.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   A response with the AJAX actions commands to update the WYSIWYG editor.
    */
   public static function ajaxSubmitForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/iconset/modules/iconset_embed/iconset_embed.module:25

    ---------- begin diff ----------
@@ @@
  *
  * @param array $form
  *   The form elements and structure of the filter format form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   THe form build, state and values.
  */
 function _iconset_embed_filter_format_edit_form_validate(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 30 files have been changed by Rector                                      

