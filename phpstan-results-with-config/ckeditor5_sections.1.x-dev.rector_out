modules/contrib/ckeditor5_sections/ckeditor5_sections.module
modules/contrib/ckeditor5_sections/modules/ckeditor5_sections_token/ckeditor5_sections_token.module
modules/contrib/ckeditor5_sections/modules/ckeditor5_sections_token/src/Plugin/MentionProvider/TokenMentionProvider.php
modules/contrib/ckeditor5_sections/src/Annotation/MentionProvider.php
modules/contrib/ckeditor5_sections/src/Annotation/SectionValidation.php
modules/contrib/ckeditor5_sections/src/Ckeditor5SectionsServiceProvider.php
modules/contrib/ckeditor5_sections/src/ConflictResolution/MergeSectionsDocuments.php
modules/contrib/ckeditor5_sections/src/Controller/ContentPreviewController.php
modules/contrib/ckeditor5_sections/src/Controller/MediaDialogController.php
modules/contrib/ckeditor5_sections/src/Controller/MediaPreviewController.php
modules/contrib/ckeditor5_sections/src/Controller/MentionProviderController.php
modules/contrib/ckeditor5_sections/src/DocumentConverter.php
modules/contrib/ckeditor5_sections/src/DocumentConverterInterface.php
modules/contrib/ckeditor5_sections/src/DocumentMerge.php
modules/contrib/ckeditor5_sections/src/DocumentMergeInterface.php
modules/contrib/ckeditor5_sections/src/DocumentSection.php
modules/contrib/ckeditor5_sections/src/DocumentSectionInterface.php
modules/contrib/ckeditor5_sections/src/DocumentSectionsExtractor.php
modules/contrib/ckeditor5_sections/src/Exceptions/SectionValidationException.php
modules/contrib/ckeditor5_sections/src/Field/SectionsDataField.php
modules/contrib/ckeditor5_sections/src/Field/SectionsHTMLField.php
modules/contrib/ckeditor5_sections/src/Field/SectionsItemList.php
modules/contrib/ckeditor5_sections/src/Field/SectionsProcessedDataField.php
modules/contrib/ckeditor5_sections/src/Field/SectionsProcessedHTMLField.php
modules/contrib/ckeditor5_sections/src/Form/SectionsMediaLibraryUploadForm.php
modules/contrib/ckeditor5_sections/src/MentionProvider/BaseMentionProvider.php
modules/contrib/ckeditor5_sections/src/MentionProvider/MentionProviderInterface.php
modules/contrib/ckeditor5_sections/src/MentionProvider/MentionProviderItem.php
modules/contrib/ckeditor5_sections/src/MentionProviderPermissions.php
modules/contrib/ckeditor5_sections/src/MentionProviderPluginManager.php
modules/contrib/ckeditor5_sections/src/Normalizer/DocumentSectionNormalizer.php
modules/contrib/ckeditor5_sections/src/Plugin/DataType/Deriver/DocumentSectionDeriver.php
modules/contrib/ckeditor5_sections/src/Plugin/DataType/DocumentSectionAdapter.php
modules/contrib/ckeditor5_sections/src/Plugin/Deriver/SectionDeriverBase.php
modules/contrib/ckeditor5_sections/src/Plugin/Deriver/SectionPropertyDeriver.php
modules/contrib/ckeditor5_sections/src/Plugin/Deriver/SectionTypeDeriver.php
modules/contrib/ckeditor5_sections/src/Plugin/Editor/CKEditor5Sections.php
modules/contrib/ckeditor5_sections/src/Plugin/EntityUsage/Track/CKEditor5SectionsBase.php
modules/contrib/ckeditor5_sections/src/Plugin/EntityUsage/Track/CKEditor5SectionsButtons.php
modules/contrib/ckeditor5_sections/src/Plugin/EntityUsage/Track/CKEditor5SectionsHtmlLink.php
modules/contrib/ckeditor5_sections/src/Plugin/EntityUsage/Track/CKEditor5SectionsMedia.php
modules/contrib/ckeditor5_sections/src/Plugin/EntityUsage/Track/CKEditor5SectionsMentionsBase.php
modules/contrib/ckeditor5_sections/src/Plugin/Field/FieldFormatter/SectionsHtmlFormatter.php
modules/contrib/ckeditor5_sections/src/Plugin/Field/FieldType/SectionsItem.php
modules/contrib/ckeditor5_sections/src/Plugin/Field/FieldWidget/SectionsEditorWidget.php
modules/contrib/ckeditor5_sections/src/Plugin/Field/FieldWidget/SectionsJsonWidget.php
modules/contrib/ckeditor5_sections/src/Plugin/Filter/CKEditor5SectionsMediaFilter.php
modules/contrib/ckeditor5_sections/src/Plugin/Filter/MentionFilter.php
modules/contrib/ckeditor5_sections/src/Plugin/GraphQL/Fields/SectionProperty.php
modules/contrib/ckeditor5_sections/src/Plugin/GraphQL/Fields/SectionTypeField.php
modules/contrib/ckeditor5_sections/src/Plugin/GraphQL/Interfaces/Section.php
modules/contrib/ckeditor5_sections/src/Plugin/GraphQL/Types/SectionType.php
modules/contrib/ckeditor5_sections/src/Plugin/SectionValidation/SectionMediaValidation.php
modules/contrib/ckeditor5_sections/src/Plugin/Validation/Constraint/SectionConflictConstraint.php
modules/contrib/ckeditor5_sections/src/Plugin/Validation/Constraint/SectionConflictConstraintValidator.php
modules/contrib/ckeditor5_sections/src/Plugin/Validation/Constraint/SectionTypeConstraint.php
modules/contrib/ckeditor5_sections/src/Plugin/Validation/Constraint/SectionTypeValidator.php
modules/contrib/ckeditor5_sections/src/Plugin/Validation/Constraint/SectionValidationConstraint.php
modules/contrib/ckeditor5_sections/src/Plugin/Validation/Constraint/SectionValidationValidator.php
modules/contrib/ckeditor5_sections/src/Plugin/views/field/CKEditor5SectionsMediaLibrarySelectForm.php
modules/contrib/ckeditor5_sections/src/Routing/RouteSubscriber.php
modules/contrib/ckeditor5_sections/src/SectionValidation/SectionValidationBase.php
modules/contrib/ckeditor5_sections/src/SectionValidation/SectionValidationBaseInterface.php
modules/contrib/ckeditor5_sections/src/SectionValidation/SectionValidationInterface.php
modules/contrib/ckeditor5_sections/src/SectionValidationPluginManager.php
modules/contrib/ckeditor5_sections/src/SectionsCollector.php
modules/contrib/ckeditor5_sections/src/SectionsCollectorInterface.php
modules/contrib/ckeditor5_sections/src/SectionsMediaLibraryOpener.php
modules/contrib/ckeditor5_sections/src/Tree.php
modules/contrib/ckeditor5_sections/src/TreeInterface.php
modules/contrib/ckeditor5_sections/src/TreeNode.php
modules/contrib/ckeditor5_sections/src/TreeNodeInterface.php
modules/contrib/ckeditor5_sections/src/TwigProcessor.php
modules/contrib/ckeditor5_sections/src/TypedData/DocumentSectionDataDefinition.php
modules/contrib/ckeditor5_sections/tests/ckeditor5_sections_test/src/Plugin/Filter/JsonTest.php
modules/contrib/ckeditor5_sections/tests/ckeditor5_sections_test/src/Plugin/SectionValidation/ExampleButtonValidation.php
modules/contrib/ckeditor5_sections/tests/ckeditor5_sections_test/tests/Kernel/DocumentSectionTypedDataBasicValidationTest.php
modules/contrib/ckeditor5_sections/tests/ckeditor5_sections_test/tests/Kernel/DocumentSectionTypedDataCustomValidationTest.php
modules/contrib/ckeditor5_sections/tests/src/Kernel/DocumentConverterTest.php
modules/contrib/ckeditor5_sections/tests/src/Kernel/SectionsCollectorTest.php
modules/contrib/ckeditor5_sections/tests/src/Kernel/SectionsFieldTest.php
modules/contrib/ckeditor5_sections/tests/src/Unit/DocumentMerge/DocumentMergeTest.php
modules/contrib/ckeditor5_sections/tests/src/Unit/DocumentSectionTest.php
modules/contrib/ckeditor5_sections/tests/src/Unit/SectionsCollectorTest.php

34 files with changes
=====================

1) modules/contrib/ckeditor5_sections/tests/src/Kernel/SectionsFieldTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\ckeditor5_sections\Kernel;

+use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\ckeditor5_sections\DocumentSection;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\field\Entity\FieldConfig;
@@ @@
     $data = $this->entity->body->sections;
     $this->assertInstanceOf(DocumentSection::class, $data);
     $expected = $this->document;
-    /** @var \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository */
+    /** @var EntityRepositoryInterface $entityRepository */
     $entityRepository = $this->container->get('entity.repository');
     $expected['sections'][0]['content']['entity'] = $entityRepository->loadEntityByUuid('entity_test', $this->embeddedEntity->uuid());
     $expected['sections'][1]['headline'] = 'This is the headline';
@@ @@
     $data = $this->entity->body->sections_processed;
     $this->assertInstanceOf(DocumentSection::class, $data);
     $expected = $this->document;
-    /** @var \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository */
+    /** @var EntityRepositoryInterface $entityRepository */
     $entityRepository = $this->container->get('entity.repository');
     $expected['sections'][0]['content']['entity'] = $entityRepository->loadEntityByUuid('entity_test', $this->embeddedEntity->uuid());
     $expected['sections'][1]['headline'] = 'This is THE HEADLINE';
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/ckeditor5_sections/tests/src/Kernel/SectionsCollectorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\ckeditor5_sections\Kernel;

+use Drupal\ckeditor5_sections\SectionsCollector;
 use Drupal\KernelTests\KernelTestBase;

 /**
@@ @@
   /**
    * The service under test.
    *
-   * @var \Drupal\ckeditor5_sections\SectionsCollector
+   * @var SectionsCollector
    */
   protected $sectionsCollector;

@@ @@
     \Drupal::getContainer()->set('string_translation', $string_translation);

     // Get the dummy templates and run them through the method.
-    $path = drupal_get_path('module', 'ckeditor5_sections_test') . '/templates';
+    $path = \Drupal::service('extension.list.module')->getPath('ckeditor5_sections_test') . '/templates';
     $sections = $this->sectionsCollector->getSections($path);

     // Check to ensure the expected strings are where we want them.
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/ckeditor5_sections/tests/src/Kernel/DocumentConverterTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\ckeditor5_sections\Kernel;

+use Symfony\Component\Serializer\Normalizer\NormalizerInterface;
+use Drupal\ckeditor5_sections\DocumentSection;
+use Drupal\ckeditor5_sections\DocumentConverter;
 use Drupal\ckeditor5_sections\Normalizer\DocumentSectionNormalizer;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\media\Entity\Media;
@@ @@
   ];

   /**
-   * @var \Symfony\Component\Serializer\Normalizer\NormalizerInterface
+   * @var NormalizerInterface
    */
   protected $normalizer;

@@ @@
    * @dataProvider extractSectionDataProvider
    */
   public function testExtractSectionData($document, $result) {
-    /** @var \Symfony\Component\Serializer\Normalizer\NormalizerInterface $normalizer */
+    /** @var NormalizerInterface $normalizer */
     $normalizer = new DocumentSectionNormalizer();;
     $documentParser = $this->getDocumentConverter();
-    /** @var \Drupal\ckeditor5_sections\DocumentSection $data */
+    /** @var DocumentSection $data */
     $data = $documentParser->extractSectionData($document);
     $this->assertEquals($result, $normalizer->normalize($data, 'json'));
   }
@@ @@
    * @dataProvider extractSectionDataProvider
    */
   public function testNormalization($document, $result) {
-    /** @var \Symfony\Component\Serializer\Normalizer\NormalizerInterface $normalizer */
+    /** @var NormalizerInterface $normalizer */
     $normalizer = new DocumentSectionNormalizer();
     $documentParser = $this->getDocumentConverter();
-    /** @var \Drupal\ckeditor5_sections\DocumentSection $data */
+    /** @var DocumentSection $data */
     $data = $documentParser->extractSectionData($document);
     $this->assertEquals($data, $normalizer->denormalize($normalizer->normalize($data)));
   }
@@ @@
    * @dataProvider extractSectionDataProvider
    */
   public function testBuildDocument($document, $data) {
-    /** @var \Drupal\ckeditor5_sections\DocumentConverter $documentParser */
+    /** @var DocumentConverter $documentParser */
     $documentParser = $this->getDocumentConverter();
     $normalizer = new DocumentSectionNormalizer();
     $doc = $normalizer->denormalize($data);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/ckeditor5_sections/tests/ckeditor5_sections_test/tests/Kernel/DocumentSectionTypedDataCustomValidationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\ckeditor5_sections_test\Unit;

+use Drupal\Core\TypedData\TypedDataManagerInterface;
 use Drupal\ckeditor5_sections_test\Plugin\SectionValidation\ExampleButtonValidation;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\KernelTests\KernelTestBase;
@@ @@
   /**
    * TypedDataManager.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;

@@ @@
   public function testNamedValidationConstraints() {
     $definition = $this->typedDataManager->createDataDefinition('section:test_teaser');
     $link = $definition->getPropertyDefinitions()['link'];
-    $this->assertEqual(2, count($link->getConstraints()));
+    $this->assertEquals(2, count($link->getConstraints()));
     $this->assertEquals($link->getConstraint('SectionType'), [
       'type' => 'button',
     ]);
@@ @@
     $linkInvalid = json_decode(file_get_contents(__DIR__ . '/assets/validation/teaser_link_invalid.json'), TRUE);
     $section = $this->typedDataManager->create($definition, $linkInvalid);
     $errors = $section->validate();
-    $this->assertEqual(1, $errors->count());
-    $this->assertEqual($errors->get(0)->getCode(), ExampleButtonValidation::MUST_FILL_OUT_BOTH_OR_NONE);
+    $this->assertEquals(1, $errors->count());
+    $this->assertEquals($errors->get(0)->getCode(), ExampleButtonValidation::MUST_FILL_OUT_BOTH_OR_NONE);
   }

   /**
@@ @@
     $linkValid = json_decode(file_get_contents(__DIR__ . '/assets/validation/teaser_link.json'), TRUE);
     $section = $this->typedDataManager->create($definition, $linkValid);
     $errors = $section->validate();
-    $this->assertEqual(0, $errors->count());
+    $this->assertEquals(0, $errors->count());
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/ckeditor5_sections/tests/ckeditor5_sections_test/tests/Kernel/DocumentSectionTypedDataBasicValidationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\ckeditor5_sections_test\Unit;

+use Drupal\Core\TypedData\TypedDataManagerInterface;
 use Drupal\ckeditor5_sections\Plugin\Validation\Constraint\SectionTypeConstraint;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Validation\Plugin\Validation\Constraint\CountConstraint;
@@ @@
   /**
    * TypedDataManager.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;

@@ @@
     // Assert that if we manipulate the type that we get a validation error.
     $teaserSection->set('__type', 'invalid-type');
     $errors = $teaserSection->validate();
-    $this->assertEqual($errors->count(), 1);
-    $this->assertEqual($errors->get(0)->getCode(), SectionTypeConstraint::INVALID_SECTION_TYPE);
+    $this->assertEquals($errors->count(), 1);
+    $this->assertEquals($errors->get(0)->getCode(), SectionTypeConstraint::INVALID_SECTION_TYPE);

     // @todo: validate ck-contains?
   }
@@ @@
     $teaserSection = $this->typedDataManager->create($teaserSectionTypeDataDefinition, $teaserJson);

     $contraints = $teaserSectionTypeDataDefinition->getPropertyDefinitions()['headline']->getConstraints();
-    $this->assertEqual(3, count($contraints));
+    $this->assertEquals(3, count($contraints));

     // Note: using array_key_exists as constraint value can be NULL.
     $this->assertArrayHasKey('Length', $contraints);
-    $this->assertEqual($contraints['Length']['min'], 2);
-    $this->assertEqual($contraints['Length']['max'], 255);
+    $this->assertEquals($contraints['Length']['min'], 2);
+    $this->assertEquals($contraints['Length']['max'], 255);
     $this->assertArrayHasKey('NotBlank', $contraints);
     $this->assertArrayHasKey('PrimitiveType', $contraints);

@@ @@
     // ck-min: 2 - too short.
     $teaserSection->set('headline', 'A');
     $errors = $teaserSection->validate();
-    $this->assertEqual($errors->count(), 1);
-    $this->assertEqual($errors->get(0)->getCode(), LengthConstraint::TOO_SHORT_ERROR);
+    $this->assertEquals($errors->count(), 1);
+    $this->assertEquals($errors->get(0)->getCode(), LengthConstraint::TOO_SHORT_ERROR);

     // ck-max: 255.
     $teaserSection->set('headline', str_repeat('A', 256));
     $errors = $teaserSection->validate();
-    $this->assertEqual($errors->count(), 1);
-    $this->assertEqual($errors->get(0)->getCode(), LengthConstraint::TOO_LONG_ERROR);
+    $this->assertEquals($errors->count(), 1);
+    $this->assertEquals($errors->get(0)->getCode(), LengthConstraint::TOO_LONG_ERROR);

     // ck-min: 2 - blank!
     $teaserSection->set('headline', '');
     $errors = $teaserSection->validate();
-    $this->assertEqual($errors->count(), 1);
-    $this->assertEqual($errors->get(0)->getCode(), NotBlank::IS_BLANK_ERROR);
+    $this->assertEquals($errors->count(), 1);
+    $this->assertEquals($errors->get(0)->getCode(), NotBlank::IS_BLANK_ERROR);
   }

   /**
@@ @@
   public function testContainerRangeValidation() {
     $pageDefinition = $this->typedDataManager->createDataDefinition('section:test_page');
     $contraints = $pageDefinition->getPropertyDefinitions()['sections']->getConstraints();
-    $this->assertEqual(1, count($contraints));
+    $this->assertEquals(1, count($contraints));
     $this->assertTrue(isset($contraints['Count']));
-    $this->assertEqual($contraints['Count']['min'], 1);
-    $this->assertEqual($contraints['Count']['max'], 5);
+    $this->assertEquals($contraints['Count']['min'], 1);
+    $this->assertEquals($contraints['Count']['max'], 5);

     // ck-min: 1 - no sections, too few.
     $tooFew = json_decode(file_get_contents(__DIR__ . '/assets/validation/page_too_few.json'), TRUE);
     $section = $this->typedDataManager->create($pageDefinition, $tooFew);
     $errors = $section->validate();
-    $this->assertEqual($errors->count(), 1);
-    $this->assertEqual($errors->get(0)->getCode(), CountConstraint::TOO_FEW_ERROR);
+    $this->assertEquals($errors->count(), 1);
+    $this->assertEquals($errors->get(0)->getCode(), CountConstraint::TOO_FEW_ERROR);

     // ck-max: 5 - 6 sections, trigger too many error.
     $tooMany = json_decode(file_get_contents(__DIR__ . '/assets/validation/page_too_many.json'), TRUE);
     $section = $this->typedDataManager->create($pageDefinition, $tooMany);
     $errors = $section->validate();
-    $this->assertEqual($errors->count(), 1);
-    $this->assertEqual($errors->get(0)->getCode(), CountConstraint::TOO_MANY_ERROR);
+    $this->assertEquals($errors->count(), 1);
+    $this->assertEquals($errors->get(0)->getCode(), CountConstraint::TOO_MANY_ERROR);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/ckeditor5_sections/src/TypedData/DocumentSectionDataDefinition.php:115

    ---------- begin diff ----------
@@ @@
   /**
    * Apply core constraints (ck-min/ck-max).
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $data
+   * @param DataDefinitionInterface $data
    * @param $field
    */
   protected function applyCoreConstraints(DataDefinitionInterface $data, $field) {
@@ @@
   /**
    * Apply core validation and name validation rules/constraints.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $data
+   * @param DataDefinitionInterface $data
    * @param $field_name
    * @param $field
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/ckeditor5_sections/src/TwigProcessor.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ckeditor5_sections;

+use Twig\Error\LoaderError;
+use Twig\Error\RuntimeError;
+use Twig\Error\SyntaxError;
 use Drupal\Core\Template\TwigEnvironment;

 /**
@@ @@
 class TwigProcessor {

   /**
-   * @var \Drupal\Core\Template\TwigEnvironment
+   * @var TwigEnvironment
    */
   protected $twigEnvironment;

@@ @@
   /**
    * TwigProcessor constructor.
    *
-   * @param \Drupal\Core\Template\TwigEnvironment $twig_environment
+   * @param TwigEnvironment $twig_environment
    */
   public function __construct(TwigEnvironment $twig_environment) {
     $this->twigEnvironment = $twig_environment;
@@ @@
    *
    * @return string
    *
-   * @throws \Twig\Error\LoaderError
-   * @throws \Twig\Error\RuntimeError
-   * @throws \Twig\Error\SyntaxError
+   * @throws LoaderError
+   * @throws RuntimeError
+   * @throws SyntaxError
    */
   public function processTwigTemplate($file_path) {
     $template = $this->twigEnvironment->load($file_path);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/ckeditor5_sections/src/SectionsCollector.php:13

    ---------- begin diff ----------
@@ @@
 class SectionsCollector implements SectionsCollectorInterface, EventSubscriberInterface {

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\ckeditor5_sections\TwigProcessor
+   * @var TwigProcessor
    */
   protected $twigProcessor;

@@ @@
   /**
    * SectionsCollector constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
-   * @param \Drupal\ckeditor5_sections\TwigProcessor $twigProcessor
+   * @param EntityTypeManagerInterface $entityTypeManager
+   * @param TwigProcessor $twigProcessor
    */
   public function __construct(
     EntityTypeManagerInterface $entityTypeManager,
@@ @@
   ) {
     $this->entityTypeManager = $entityTypeManager;
     $this->twigProcessor = $twigProcessor;
-    $this->directory = $directory ?: drupal_get_path('module', 'ckeditor5_sections') . '/sections';
+    $this->directory = $directory ?: \Drupal::service('extension.list.module')->getPath('ckeditor5_sections') . '/sections';
   }

   /**
@@ @@
    */
   public function getStyleSheets($directory = NULL) {
     if (!$directory) {
-      $directory = drupal_get_path('module', 'ckeditor5_sections') . '/sections';
+      $directory = \Drupal::service('extension.list.module')->getPath('ckeditor5_sections') . '/sections';
     }
     $files = \Drupal::service('file_system')->scanDirectory($directory, '/.*.css/');
     $styleSheets = [];
@@ @@
    * @return array
    */
   public function getSectionDefinitions($directory = NULL) {
-    /** @var \Drupal\ckeditor5_sections\DocumentConverter $document_converter */
+    /** @var DocumentConverter $document_converter */
     $document_converter = \Drupal::getContainer()->get('ckeditor5_sections.document_converter');

     $templates = $this->getSections();
@@ @@
    */
   protected function collectSectionsFromDirectory($directory) {
     if ($directory === '') {
-      $directory = drupal_get_path('module', 'ckeditor5_sections') . '/sections';
+      $directory = \Drupal::service('extension.list.module')->getPath('ckeditor5_sections') . '/sections';
     }
     $files = \Drupal::service('file_system')->scanDirectory($directory, '/.*.yml/');
     $sections = [];
@@ @@
   /**
    * Fires after the configuration import.
    *
-   * @param \Drupal\Core\Config\ConfigImporterEvent $event
+   * @param ConfigImporterEvent $event
    */
   public function afterConfigImport(ConfigImporterEvent $event) {
     foreach ($event->getChangelist() as $list) {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/ckeditor5_sections/src/SectionValidationPluginManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/ckeditor5_sections/src/SectionValidation/SectionValidationInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ckeditor5_sections\SectionValidation;

+use Drupal\ckeditor5_sections\Exceptions\SectionValidationException;
 use Drupal\Core\TypedData\TypedData;

 /**
@@ @@
   /**
    * Validates (typed) data of a document section.
    *
-   * @param \Drupal\Core\TypedData\TypedData $data
+   * @param TypedData $data
    *   Data to validate.
    *
-   * @throws \Drupal\ckeditor5_sections\Exceptions\SectionValidationException
+   * @throws SectionValidationException
    *   Throws SectionValidationException on error.
    */
   public function validate(TypedData $data);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/ckeditor5_sections/src/Plugin/Validation/Constraint/SectionValidationValidator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ckeditor5_sections\Plugin\Validation\Constraint;

+use Drupal\ckeditor5_sections\SectionValidation\SectionValidationInterface;
 use Drupal\ckeditor5_sections\Exceptions\SectionValidationException;
 use Drupal\ckeditor5_sections\SectionValidationPluginManager;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ @@
   /**
    * Section validation plugin manager.
    *
-   * @var \Drupal\ckeditor5_sections\SectionValidationPluginManager
+   * @var SectionValidationPluginManager
    */
   protected $sectionValidationPluginManager;

@@ @@
       throw new UnexpectedTypeException($data, 'ComplexData');
     }

-    /** @var \Drupal\ckeditor5_sections\SectionValidation\SectionValidationInterface $validationPlugin */
+    /** @var SectionValidationInterface $validationPlugin */
     $validationPlugin = $this->sectionValidationPluginManager->createInstance($constraint->name, [
       'attributes' => $constraint->attributes,
     ]);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/ckeditor5_sections/src/Plugin/Filter/MentionFilter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ckeditor5_sections\Plugin\Filter;

+use Drupal\ckeditor5_sections\MentionProvider\MentionProviderInterface;
 use Drupal\ckeditor5_sections\MentionProviderPluginManager;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Utility\Token;
@@ @@
   /**
    * Token.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;

@@ @@
     // Use all mention providers.
     $mentionProviders = $this->mentionProviderPluginManager->getDefinitions();
     foreach ($mentionProviders as $id => $info) {
-      /** @var \Drupal\ckeditor5_sections\MentionProvider\MentionProviderInterface $mentionProvider */
+      /** @var MentionProviderInterface $mentionProvider */
       $mentionProvider = $this->mentionProviderPluginManager->createInstance($id);

       $processed = $mentionProvider->process($result->getProcessedText(), $langcode);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/ckeditor5_sections/src/Plugin/Filter/CKEditor5SectionsMediaFilter.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * Renderer service object.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/ckeditor5_sections/src/Plugin/Field/FieldType/SectionsItem.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ckeditor5_sections\Plugin\Field\FieldType;

+use Drupal\ckeditor5_sections\SectionsCollectorInterface;
 use Drupal\ckeditor5_sections\Field\SectionsDataField;
 use Drupal\ckeditor5_sections\Field\SectionsHTMLField;
 use Drupal\ckeditor5_sections\Field\SectionsProcessedDataField;
@@ @@
       '#default_value' => $this->getSetting('template'),
       '#required' => TRUE,
     ];
-    /** @var \Drupal\ckeditor5_sections\SectionsCollectorInterface $sectionsCollector */
+    /** @var SectionsCollectorInterface $sectionsCollector */
     $sectionsCollector = \Drupal::service('ckeditor5_sections.sections_collector');
     foreach ($sectionsCollector->getSections() as $id => $section) {
       $element['template']['#options'][$id] = $section['label'];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/ckeditor5_sections/src/Plugin/Editor/CKEditor5Sections.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ckeditor5_sections\Plugin\Editor;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\ckeditor\CKEditorPluginManager;
+use Drupal\Core\Asset\LibraryDiscoveryInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\ckeditor5_sections\SectionsCollectorInterface;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Utility\NestedArray;
@@ @@
   /**
    * The module handler to invoke hooks on.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

   /**
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $linkitProfileStorage;

   /**
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

   /**
-   * @var \Drupal\ckeditor5_sections\SectionsCollectorInterface
+   * @var SectionsCollectorInterface
    */
   protected $sectionsCollector;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\ckeditor\CKEditorPluginManager $ckeditor_plugin_manager
+   * @param CKEditorPluginManager $ckeditor_plugin_manager
    *   The CKEditor plugin manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke hooks on.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param CacheBackendInterface $cacheBackend
+   * @param EntityTypeManagerInterface $entityTypeManager
    *
-   * @param \Drupal\Core\Asset\LibraryDiscoveryInterface $libraryDiscovery
+   * @param LibraryDiscoveryInterface $libraryDiscovery
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function __construct(
     array $configuration,
@@ @@
     $settings = $editor->getSettings();
     $sections = $this->sectionsCollector->getSections();

-    /** @var \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler */
+    /** @var ModuleHandlerInterface $moduleHandler */
     $moduleHandler = \Drupal::service('module_handler');
     $moduleHandler->alter('ckeditor5_sections_attributes', $templateAttributes);

@@ @@
    * @param array $element
    *   An associative array containing the properties and children of the
    *   generic form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form for the form this element belongs to.
    *
    * @see \Drupal\Core\Render\Element\FormElement::processPattern()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/ckeditor5_sections/src/Plugin/Deriver/SectionDeriverBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ckeditor5_sections\Plugin\Deriver;

+use Drupal\ckeditor5_sections\DocumentConverter;
+use Drupal\Core\TypedData\DataDefinitionInterface;
 use Drupal\ckeditor5_sections\DocumentConverterInterface;
 use Drupal\ckeditor5_sections\TypedData\DocumentSectionDataDefinition;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
@@ @@
 class SectionDeriverBase extends DeriverBase implements ContainerDeriverInterface {

   /**
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;

   /**
-   * @var \Drupal\ckeditor5_sections\DocumentConverter
+   * @var DocumentConverter
    */
   protected $documentConverter;

   /**
-   * @param \Drupal\Core\TypedData\TypedDataManagerInterface $typedDataManager
-   * @param \Drupal\ckeditor5_sections\DocumentConverterInterface $documentConverter
+   * @param TypedDataManagerInterface $typedDataManager
+   * @param DocumentConverterInterface $documentConverter
    */
   public function __construct(
     TypedDataManagerInterface $typedDataManager,
@@ @@
   /**
    * Returns all available sections as typed data definitions.
    *
-   * @return \Drupal\Core\TypedData\DataDefinitionInterface[]
+   * @return DataDefinitionInterface[]
    *   Array keys are data type IDs.
    */
   protected function getSectionTypeDefinitions() {
@@ @@
   /**
    * Returns nested sections as typed data definitions.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $definition
+   * @param DataDefinitionInterface $definition
    *
-   * @return \Drupal\Core\TypedData\DataDefinitionInterface[]
+   * @return DataDefinitionInterface[]
    *   Array keys are data type IDs.
    */
   protected function getNestedSectionTypeDefinitions($definition) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/ckeditor5_sections/src/Plugin/DataType/Deriver/DocumentSectionDeriver.php:27

    ---------- begin diff ----------
@@ @@
    * Returns an array with all the available document section types from the
    * system.
    *
-   * @return \Drupal\ckeditor5_sections\DocumentSection[]
+   * @return DocumentSection[]
    */
   protected function getSectionTypes() {
     $section_types = \Drupal::getContainer()->get('ckeditor5_sections.document_converter')->getSectionTypeDefinitions();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/ckeditor5_sections/src/MentionProviderPluginManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/ckeditor5_sections/src/MentionProviderPermissions.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ckeditor5_sections;

+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\ckeditor5_sections\MentionProvider\MentionProviderInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * Mention Provider plugin manager.
    *
-   * @var \Drupal\ckeditor5_sections\MentionProviderPluginManager
+   * @var MentionProviderPluginManager
    */
   protected $mentionProviderPluginManager;

@@ @@
   /**
    * MentionProviderController constructor.
    *
-   * @param \Drupal\ckeditor5_sections\MentionProviderPluginManager $mentionProviderPluginManager
+   * @param MentionProviderPluginManager $mentionProviderPluginManager
    *   MentionProviderPluginManager.
    */
   public function __construct(MentionProviderPluginManager $mentionProviderPluginManager) {
@@ @@
    * @return array
    *   Permissions array.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
    */
   public function permissions() {
@@ @@
     $permissions = [];

     foreach ($this->mentionProviderPluginManager->getDefinitions() as $plugin_id => $definition) {
-      /** @var \Drupal\ckeditor5_sections\MentionProvider\MentionProviderInterface $mentionProvider */
+      /** @var MentionProviderInterface $mentionProvider */
       $mentionProvider = $this->mentionProviderPluginManager->createInstance($plugin_id);
       $permissions += [
         'access ckeditor5 sections mention provider ' . $plugin_id => [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


20) modules/contrib/ckeditor5_sections/src/MentionProvider/MentionProviderInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ckeditor5_sections\MentionProvider;

+use Drupal\Core\Url;
+use Drupal\filter\FilterProcessResult;
 use Drupal\Component\Plugin\DerivativeInspectionInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;

@@ @@
   /**
    * Provide URL to controller responding to the mention entered in the editor.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   URL to the query endpoint.
    */
   public function getQueryUrl();
@@ @@
    * @param string $queryText
    *   Query text to match.
    *
-   * @return \Drupal\ckeditor5_sections\MentionProvider\MentionProviderItem[]
+   * @return MentionProviderItem[]
    *   Array of mention items.
    */
   public function query($queryText);
@@ @@
    * @param string $langcode
    *   Langcode to process.
    *
-   * @return \Drupal\filter\FilterProcessResult
+   * @return FilterProcessResult
    *   Processed filter result.
    */
   public function process($text, $langcode);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


21) modules/contrib/ckeditor5_sections/src/Form/SectionsMediaLibraryUploadForm.php:23

    ---------- begin diff ----------
@@ @@
    *
    * @param array $element
    *   The upload element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
   /**
    * Returns the return type for the widget.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/ckeditor5_sections/src/Field/SectionsProcessedHTMLField.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ckeditor5_sections\Field;

+use Drupal\ckeditor5_sections\DocumentConverter;
 use Drupal\Core\TypedData\TypedData;

 /**
@@ @@
     $item = $this->getParent();
     $data = $item->sections_processed;

-    /** @var \Drupal\ckeditor5_sections\DocumentConverter $documentConverter */
+    /** @var DocumentConverter $documentConverter */
     $documentConverter = \Drupal::service('ckeditor5_sections.document_converter');

     if (!$data) {
@@ @@

   public function setValue($value, $notify = TRUE) {
     if ($value) {
-      /** @var \Drupal\ckeditor5_sections\DocumentConverter $documentConverter */
+      /** @var DocumentConverter $documentConverter */
       $documentConverter = \Drupal::service('ckeditor5_sections.document_converter');
       $doc = $documentConverter->extractSectionData($value);
       $this->parent->setValue(json_encode($doc->getValue()));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/ckeditor5_sections/src/Field/SectionsProcessedDataField.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ckeditor5_sections\Field;

+use Drupal\Core\Render\Renderer;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\ckeditor5_sections\DocumentSection;
 use Drupal\Core\Entity\Plugin\DataType\EntityAdapter;
 use Drupal\Core\Render\RenderContext;
@@ @@
     $filterFormat = $item->getFieldDefinition()->getSetting('filter_format');

     if ($filterFormat) {
-      /** @var \Drupal\Core\Render\Renderer $renderer */
+      /** @var Renderer $renderer */
       $renderer = \Drupal::service('renderer');

       $build = [
@@ @@
   /**
    * Returns the parent entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    */
   protected function getParentEntity() {
     $parent = $this;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/ckeditor5_sections/src/Field/SectionsHTMLField.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ckeditor5_sections\Field;

+use Drupal\ckeditor5_sections\DocumentConverter;
 use Drupal\Core\TypedData\TypedData;

 /**
@@ @@

     $data = $item->sections;

-    /** @var \Drupal\ckeditor5_sections\DocumentConverter $documentConverter */
+    /** @var DocumentConverter $documentConverter */
     $documentConverter = \Drupal::service('ckeditor5_sections.document_converter');

     if (!$data) {
@@ @@

   public function setValue($value, $notify = TRUE) {
     if ($value) {
-      /** @var \Drupal\ckeditor5_sections\DocumentConverter $documentConverter */
+      /** @var DocumentConverter $documentConverter */
       $documentConverter = \Drupal::service('ckeditor5_sections.document_converter');
       $doc = $documentConverter->extractSectionData($value);
       $this->parent->setValue(json_encode($doc->getValue()));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/ckeditor5_sections/src/DocumentConverterInterface.php:72

    ---------- begin diff ----------
@@ @@
    * @param string $document
    *   The document to be parsed for the data.
    *
-   * @return \Drupal\ckeditor5_sections\DocumentSection
+   * @return DocumentSection
    *   The root section object.
    */
   public function extractSectionData($document);
@@ @@
   /**
    * Rebuild a document from a DocumentSection object.
    *
-   * @param \Drupal\ckeditor5_sections\DocumentSection $section
+   * @param DocumentSection $section
    *   The input section.
    *
    * @return \DOMDocument
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


26) modules/contrib/ckeditor5_sections/src/DocumentConverter.php:18

    ---------- begin diff ----------
@@ @@
 class DocumentConverter implements DocumentConverterInterface {

   /**
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;

   /**
-   * @var \Drupal\ckeditor5_sections\SectionsCollectorInterface
+   * @var SectionsCollectorInterface
    */
   protected $sectionsCollector;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   protected $typeNodeMap;

   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * DocumentConverter constructor.
    *
-   * @param \Drupal\Core\TypedData\TypedDataManagerInterface $typedDataManager
+   * @param TypedDataManagerInterface $typedDataManager
    *   A typed data manager to register new data types.
-   * @param \Drupal\ckeditor5_sections\SectionsCollectorInterface $sectionsCollector
+   * @param SectionsCollectorInterface $sectionsCollector
    *   The sections collector to retrieve all defined templates.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler to invoke alter hooks on type definitions.
    * @param string $templateDirectory
    *   The template directory to use.
@@ @@
     $this->typedDataManager = $typedDataManager;
     $this->entityTypeManager = $entityTypeManager;
     $this->moduleHandler = $moduleHandler;
-    $this->templateDirectory = $templateDirectory ?: drupal_get_path('module', 'ckeditor5_sections') . '/sections';
+    $this->templateDirectory = $templateDirectory ?: \Drupal::service('extension.list.module')->getPath('ckeditor5_sections') . '/sections';
   }

   /**
@@ @@
   /**
    * Rebuild a document from its data representation.
    *
-   * @param \Drupal\ckeditor5_sections\DocumentSection $section
+   * @param DocumentSection $section
    *   The data representation of a document.
    *
    * @return \DOMDocument
@@ @@
   /**
    * Process one node in a template.
    *
-   * @param \Drupal\ckeditor5_sections\DocumentSection $section
+   * @param DocumentSection $section
    *   The current section object to write data to.
    * @param \DOMElement $el
    *   The current template DOM node.
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


27) modules/contrib/ckeditor5_sections/src/Controller/MentionProviderController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ckeditor5_sections\Controller;

+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\ckeditor5_sections\MentionProvider\MentionProviderInterface;
 use Drupal\ckeditor5_sections\MentionProviderPluginManager;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Access\AccessResult;
@@ @@
   /**
    * Mention Provider plugin manager.
    *
-   * @var \Drupal\ckeditor5_sections\MentionProviderPluginManager
+   * @var MentionProviderPluginManager
    */
   protected $mentionProviderPluginManager;

@@ @@
   /**
    * MentionProviderController constructor.
    *
-   * @param \Drupal\ckeditor5_sections\MentionProviderPluginManager $mentionProviderPluginManager
+   * @param MentionProviderPluginManager $mentionProviderPluginManager
    *   MentionProviderPluginManager.
    */
   public function __construct(MentionProviderPluginManager $mentionProviderPluginManager) {
@@ @@
   /**
    * Access callback for query access.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
    * @param string $mention_provider_id
    *   Mention provider id in route.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $account, $mention_provider_id) {
@@ @@
    *
    * @param string $mention_provider_id
    *   Mention provider plugin id.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Request object.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   JSON Response of matched mention items.
    */
   public function query($mention_provider_id, Request $request) {
     try {
-      /** @var \Drupal\ckeditor5_sections\MentionProvider\MentionProviderInterface $plugin */
+      /** @var MentionProviderInterface $plugin */
       $plugin = $this->mentionProviderPluginManager->createInstance($mention_provider_id);
     }
     catch (PluginException $exception) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/ckeditor5_sections/src/Controller/MediaPreviewController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ckeditor5_sections\Controller;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Render\RendererInterface;
@@ @@
 class MediaPreviewController extends ControllerBase {

   /**
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

   /**
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * MediaPreviewController constructor.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param RendererInterface $renderer
+   * @param EntityRepositoryInterface $entityRepository
    */
   public function __construct(RendererInterface $renderer, EntityRepositoryInterface $entityRepository) {
     $this->entityRepository = $entityRepository;
@@ @@
    * @param string $display
    *   The display to use.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function preview($uuid, $display) {
     $media = $this->entityRepository->loadEntityByUuid('media', $uuid);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/ckeditor5_sections/src/Controller/MediaDialogController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ckeditor5_sections\Controller;

+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Controller\ControllerBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\HttpFoundation\RequestStack;
@@ @@
   /**
    * The currently active request object.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * MediaDialogController constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   Request stack.
    */
   public function __construct(RequestStack $requestStack) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/ckeditor5_sections/src/Controller/ContentPreviewController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ckeditor5_sections\Controller;

+use Drupal\Core\Entity\EntityStorageException;
 use Symfony\Component\HttpFoundation\Response;

 /**
@@ @@
    * @param string $display
    *   The display to use.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   Response.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function preview($uuid, $display) {
     $node = $this->entityRepository->loadEntityByUuid("node", $uuid);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/ckeditor5_sections/src/Annotation/SectionValidation.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ckeditor5_sections\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The title of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


32) modules/contrib/ckeditor5_sections/src/Annotation/MentionProvider.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ckeditor5_sections\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the mention provider.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    * @ingroup plugin_translatable
    */
   public $title;
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


33) modules/contrib/ckeditor5_sections/modules/ckeditor5_sections_token/src/Plugin/MentionProvider/TokenMentionProvider.php:47

    ---------- begin diff ----------
@@ @@
   protected $treeBuilder;

   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/ckeditor5_sections/ckeditor5_sections.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\ckeditor5_sections\SectionsCollector;
+use Drupal\Core\Extension\ModuleHandler;
+use Drupal\ckeditor5_sections\MentionProviderPluginManager;
+use Drupal\ckeditor5_sections\MentionProvider\MentionProviderInterface;
+use Drupal\Core\Entity\EntityRepositoryInterface;
 /**
  * @file
  * Contains hook implementations for the ckeditor5_sections module.
@@ @@
  */
 function ckeditor5_sections_library_info_alter(&$libraries, $extension) {
   if ($extension === 'ckeditor5_sections') {
-    /** @var \Drupal\ckeditor5_sections\SectionsCollector $collector */
+    /** @var SectionsCollector $collector */
     $collector = \Drupal::service('ckeditor5_sections.sections_collector');
     $stylesheets = $collector->getStyleSheets();
     foreach ($stylesheets as $stylesheet) {
       $fileSystem = new Filesystem();
-      $relative = $fileSystem->makePathRelative(dirname($stylesheet), drupal_get_path('module', 'ckeditor5_sections')) . basename($stylesheet);
+      $relative = $fileSystem->makePathRelative(dirname($stylesheet), \Drupal::service('extension.list.module')->getPath('ckeditor5_sections')) . basename($stylesheet);
       $libraries['sections']['css']['base'][$relative] = [];
     }
     // Add CKEditor5 inspector if enabled in e.g. development.settings.yml.
     if (\Drupal::getContainer()->hasParameter('ckeditor5_sections.enable_inspector') && \Drupal::getContainer()->getParameter('ckeditor5_sections.enable_inspector')) {
-      /** @var \Drupal\Core\Extension\ModuleHandler $module_handler */
+      /** @var ModuleHandler $module_handler */
       $module_handler = \Drupal::service('module_handler');
       $module_path = $module_handler->getModule('ckeditor5_sections')->getPath();
       $path_to_inspector_js = 'editor/node_modules/@ckeditor/ckeditor5-inspector/build/inspector.js';
@@ @@
  * Implements hook_ckeditor5_sections_editor_settings_alter().
  */
 function ckeditor5_sections_ckeditor5_sections_editor_settings_alter(array &$settings) {
-  /** @var \Drupal\ckeditor5_sections\MentionProviderPluginManager $mention_provider */
+  /** @var MentionProviderPluginManager $mention_provider */
   $mention_provider = \Drupal::service('plugin.manager.ckeditor5_sections.mention_provider');
   $definitions = $mention_provider->getDefinitions();

   $feeds = [];
   foreach ($definitions as $id => $definition) {
-    /** @var \Drupal\ckeditor5_sections\MentionProvider\MentionProviderInterface $plugin */
+    /** @var MentionProviderInterface $plugin */
     $plugin = $mention_provider->createInstance($id);
     $feeds[] = $plugin->getMentionFeedDefinition();
   }
@@ @@
   $uuid = $section->get('data-media-uuid');
   if ($type && $uuid) {
     $entityType = explode(':', $type)[0];
-    /** @var \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository */
+    /** @var EntityRepositoryInterface $entityRepository */
     $entityRepository = \Drupal::service('entity.repository');
     $section->set('entity', $entityRepository->loadEntityByUuid($entityType, $uuid));
   }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/ckeditor5_sections/src/Plugin/GraphQL/Types/SectionType.
         php" file, due to:                                                     
         "Analyze error: "Class Drupal\graphql\Plugin\GraphQL\Types\TypePluginBase
         not found.". Include your files in                                     
         "$rectorConfig->autoloadPaths([...]);" or                              
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/ckeditor5_sections/src/Plugin/GraphQL/Interfaces/Section
         .php" file, due to:                                                    
         "Analyze error: "Class                                                 
         Drupal\graphql\Plugin\GraphQL\Interfaces\InterfacePluginBase not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/ckeditor5_sections/src/Plugin/GraphQL/Fields/SectionType
         Field.php" file, due to:                                               
         "Analyze error: "Class                                                 
         Drupal\graphql\Plugin\GraphQL\Fields\FieldPluginBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/ckeditor5_sections/src/Plugin/GraphQL/Fields/SectionProp
         erty.php" file, due to:                                                
         "Analyze error: "Class                                                 
         Drupal\graphql\Plugin\GraphQL\Fields\FieldPluginBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/ckeditor5_sections/src/Plugin/EntityUsage/Track/CKEditor
         5SectionsMentionsBase.php" file, due to:                               
         "Analyze error: "Class Drupal\entity_usage\EntityUsageTrackBase not    
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/ckeditor5_sections/src/Plugin/EntityUsage/Track/CKEditor
         5SectionsMedia.php" file, due to:                                      
         "Analyze error: "Class Drupal\entity_usage\EntityUsageTrackBase not    
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/ckeditor5_sections/src/Plugin/EntityUsage/Track/CKEditor
         5SectionsHtmlLink.php" file, due to:                                   
         "Analyze error: "Class Drupal\entity_usage\EntityUsageTrackBase not    
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/ckeditor5_sections/src/Plugin/EntityUsage/Track/CKEditor
         5SectionsButtons.php" file, due to:                                    
         "Analyze error: "Class Drupal\entity_usage\EntityUsageTrackBase not    
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/ckeditor5_sections/src/Plugin/EntityUsage/Track/CKEditor
         5SectionsBase.php" file, due to:                                       
         "Analyze error: "Class Drupal\entity_usage\EntityUsageTrackBase not    
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/ckeditor5_sections/src/ConflictResolution/MergeSectionsD
         ocuments.php" file, due to:                                            
         "Analyze error: "Class                                                 
         Drupal\Core\Conflict\ConflictResolution\MergeStrategyBase not found.". 
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

