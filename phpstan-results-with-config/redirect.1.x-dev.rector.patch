diff --git a/modules/redirect_404/redirect_404.module b/modules/redirect_404/redirect_404.module
index 6f98139..76e276a 100644
--- a/modules/redirect_404/redirect_404.module
+++ b/modules/redirect_404/redirect_404.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\redirect_404\SqlRedirectNotFoundStorage;
 /**
  * @file
  * Module file for redirect_404.
@@ -15,7 +16,7 @@ use Drupal\redirect\Entity\Redirect;
  * Adds clean up job to drop the irrelevant rows from the redirect_404 table.
  */
 function redirect_404_cron() {
-  /** @var \Drupal\redirect_404\SqlRedirectNotFoundStorage $redirect_storage */
+  /** @var SqlRedirectNotFoundStorage $redirect_storage */
   $redirect_storage = \Drupal::service('redirect.not_found_storage');
   $redirect_storage->purgeOldRequests();
 
diff --git a/modules/redirect_404/src/Controller/Fix404IgnoreController.php b/modules/redirect_404/src/Controller/Fix404IgnoreController.php
index 4684e08..c31f53e 100644
--- a/modules/redirect_404/src/Controller/Fix404IgnoreController.php
+++ b/modules/redirect_404/src/Controller/Fix404IgnoreController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\redirect_404\Controller;
 
+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Url;
@@ -17,23 +18,23 @@ class Fix404IgnoreController extends ControllerBase {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configuration;
 
   /**
    * The redirect storage.
    *
-   * @var \Drupal\redirect_404\RedirectNotFoundStorageInterface
+   * @var RedirectNotFoundStorageInterface
    */
   protected $redirectStorage;
 
   /**
    * Constructs a Fix404Ignore object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\redirect_404\RedirectNotFoundStorageInterface $redirect_storage
+   * @param RedirectNotFoundStorageInterface $redirect_storage
    *   A redirect storage.
    */
   public function __construct(ConfigFactoryInterface $config_factory, RedirectNotFoundStorageInterface $redirect_storage) {
@@ -54,10 +55,10 @@ class Fix404IgnoreController extends ControllerBase {
   /**
    * Adds path into the ignored list.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The HttpRequest object representing the current request.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    */
   public function ignorePath(Request $request) {
     $ignored_paths = $this->config('redirect_404.settings')->get('pages');
diff --git a/modules/redirect_404/src/EventSubscriber/Redirect404Subscriber.php b/modules/redirect_404/src/EventSubscriber/Redirect404Subscriber.php
index 39d954b..72e9a57 100644
--- a/modules/redirect_404/src/EventSubscriber/Redirect404Subscriber.php
+++ b/modules/redirect_404/src/EventSubscriber/Redirect404Subscriber.php
@@ -21,59 +21,59 @@ class Redirect404Subscriber implements EventSubscriberInterface {
   /**
    * The current path.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPath;
 
   /**
    * The path matcher.
    *
-   * @var \Drupal\Core\Path\PathMatcherInterface
+   * @var PathMatcherInterface
    */
   protected $pathMatcher;
 
   /**
    * The request stack (get the URL argument(s) and combined it with the path).
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The redirect storage.
    *
-   * @var \Drupal\redirect_404\RedirectNotFoundStorageInterface
+   * @var RedirectNotFoundStorageInterface
    */
   protected $redirectStorage;
 
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;
 
   /**
    * Constructs a new Redirect404Subscriber.
    *
-   * @param \Drupal\Core\Path\CurrentPathStack $current_path
+   * @param CurrentPathStack $current_path
    *   The current path.
-   * @param \Drupal\Core\Path\PathMatcherInterface $path_matcher
+   * @param PathMatcherInterface $path_matcher
    *   The path matcher service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\redirect_404\RedirectNotFoundStorageInterface $redirect_storage
+   * @param RedirectNotFoundStorageInterface $redirect_storage
    *   A redirect storage.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The configuration factory.
    */
   public function __construct(CurrentPathStack $current_path, PathMatcherInterface $path_matcher, RequestStack $request_stack, LanguageManagerInterface $language_manager, RedirectNotFoundStorageInterface $redirect_storage, ConfigFactoryInterface $config) {
diff --git a/modules/redirect_404/src/Form/RedirectFix404Form.php b/modules/redirect_404/src/Form/RedirectFix404Form.php
index 7e01d1a..53cc10b 100644
--- a/modules/redirect_404/src/Form/RedirectFix404Form.php
+++ b/modules/redirect_404/src/Form/RedirectFix404Form.php
@@ -22,41 +22,41 @@ class RedirectFix404Form extends FormBase {
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The redirect storage.
    *
-   * @var \Drupal\redirect_404\SqlRedirectNotFoundStorage
+   * @var SqlRedirectNotFoundStorage
    */
   protected $redirectStorage;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a RedirectFix404Form.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\redirect_404\SqlRedirectNotFoundStorage $redirect_storage
+   * @param SqlRedirectNotFoundStorage $redirect_storage
    *   The redirect storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date Formatter service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
    */
   public function __construct(LanguageManagerInterface $language_manager, SqlRedirectNotFoundStorage $redirect_storage, DateFormatterInterface $date_formatter, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/modules/redirect_404/src/Plugin/views/field/Language.php b/modules/redirect_404/src/Plugin/views/field/Language.php
index 4fc03d3..8640c5a 100644
--- a/modules/redirect_404/src/Plugin/views/field/Language.php
+++ b/modules/redirect_404/src/Plugin/views/field/Language.php
@@ -19,7 +19,7 @@ class Language extends LanguageField {
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
@@ -32,7 +32,7 @@ class Language extends LanguageField {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, LanguageManagerInterface $language_manager) {
diff --git a/modules/redirect_404/src/Plugin/views/field/Redirect404Operations.php b/modules/redirect_404/src/Plugin/views/field/Redirect404Operations.php
index b1c0e6d..b64812c 100644
--- a/modules/redirect_404/src/Plugin/views/field/Redirect404Operations.php
+++ b/modules/redirect_404/src/Plugin/views/field/Redirect404Operations.php
@@ -22,14 +22,14 @@ class Redirect404Operations extends FieldPluginBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -42,11 +42,11 @@ class Redirect404Operations extends FieldPluginBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, RendererInterface $renderer, AccountInterface $current_user) {
diff --git a/modules/redirect_404/src/Render/Redirect404LogSuppressor.php b/modules/redirect_404/src/Render/Redirect404LogSuppressor.php
index cd74cab..c117dbd 100644
--- a/modules/redirect_404/src/Render/Redirect404LogSuppressor.php
+++ b/modules/redirect_404/src/Render/Redirect404LogSuppressor.php
@@ -18,23 +18,23 @@ class Redirect404LogSuppressor implements LoggerChannelFactoryInterface {
   /**
    * The logger channel factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerChannelFactory;
 
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Constructs a Redirect404LogSuppressor object.
    *
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_channel_factory
+   * @param LoggerChannelFactoryInterface $logger_channel_factory
    *   The logger channel factory.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function __construct(LoggerChannelFactoryInterface $logger_channel_factory, ConfigFactoryInterface $config_factory) {
diff --git a/modules/redirect_404/src/SqlRedirectNotFoundStorage.php b/modules/redirect_404/src/SqlRedirectNotFoundStorage.php
index b1dd268..8f3bca5 100644
--- a/modules/redirect_404/src/SqlRedirectNotFoundStorage.php
+++ b/modules/redirect_404/src/SqlRedirectNotFoundStorage.php
@@ -23,23 +23,23 @@ class SqlRedirectNotFoundStorage implements RedirectNotFoundStorageInterface {
   /**
    * Active database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Constructs a new SqlRedirectNotFoundStorage.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   A Database connection to use for reading and writing database data.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function __construct(Connection $database, ConfigFactoryInterface $config_factory) {
diff --git a/modules/redirect_404/tests/src/Functional/Redirect404LogSuppressorTest.php b/modules/redirect_404/tests/src/Functional/Redirect404LogSuppressorTest.php
index 6cb317d..a41f8a4 100644
--- a/modules/redirect_404/tests/src/Functional/Redirect404LogSuppressorTest.php
+++ b/modules/redirect_404/tests/src/Functional/Redirect404LogSuppressorTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\redirect_404\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Database\Database;
 
 /**
@@ -21,14 +22,14 @@ class Redirect404LogSuppressorTest extends Redirect404TestBase {
   /**
    * A user with some relevant administrative permissions.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
   /**
    * A user without any permissions.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $webUser;
 
diff --git a/modules/redirect_404/tests/src/Functional/Redirect404TestBase.php b/modules/redirect_404/tests/src/Functional/Redirect404TestBase.php
index 6f875c1..7e19283 100644
--- a/modules/redirect_404/tests/src/Functional/Redirect404TestBase.php
+++ b/modules/redirect_404/tests/src/Functional/Redirect404TestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\redirect_404\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Tests\BrowserTestBase;
 
@@ -43,7 +44,7 @@ abstract class Redirect404TestBase extends BrowserTestBase {
   /**
    * A user with administrative permissions.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
diff --git a/modules/redirect_404/tests/src/Unit/SqlRedirectNotFoundStorageTest.php b/modules/redirect_404/tests/src/Unit/SqlRedirectNotFoundStorageTest.php
index 6cd6bea..8bab3b1 100644
--- a/modules/redirect_404/tests/src/Unit/SqlRedirectNotFoundStorageTest.php
+++ b/modules/redirect_404/tests/src/Unit/SqlRedirectNotFoundStorageTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\redirect_404\Unit;
 
+use PHPUnit\Framework\MockObject\MockObject;
+use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\redirect_404\SqlRedirectNotFoundStorage;
@@ -17,14 +19,14 @@ class SqlRedirectNotFoundStorageTest extends UnitTestCase {
   /**
    * Mock database connection.
    *
-   * @var \Drupal\Core\Database\Connection|\PHPUnit_Framework_MockObject_MockObject
+   * @var Connection|MockObject
    */
   protected $database;
 
   /**
    * Mock config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var ConfigFactoryInterface|MockObject
    */
   protected $configFactory;
 
@@ -33,9 +35,7 @@ class SqlRedirectNotFoundStorageTest extends UnitTestCase {
    */
   protected function setUp(): void {
     parent::setUp();
-    $this->database = $this->getMockBuilder(Connection::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->database = $this->createMock(Connection::class);
   }
 
   /**
diff --git a/modules/redirect_domain/src/EventSubscriber/DomainRedirectRequestSubscriber.php b/modules/redirect_domain/src/EventSubscriber/DomainRedirectRequestSubscriber.php
index 0668692..c7ea7be 100644
--- a/modules/redirect_domain/src/EventSubscriber/DomainRedirectRequestSubscriber.php
+++ b/modules/redirect_domain/src/EventSubscriber/DomainRedirectRequestSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\redirect_domain\EventSubscriber;
 
+use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Path\PathMatcherInterface;
 use Drupal\Core\Routing\TrustedRedirectResponse;
@@ -17,39 +18,39 @@ use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 class DomainRedirectRequestSubscriber implements EventSubscriberInterface {
 
   /**
-   * @var \Drupal\redirect\RedirectChecker
+   * @var RedirectChecker
    */
   protected $redirectChecker;
 
   /**
    * Domain redirect configuration.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $domainConfig;
 
   /**
    * The path matcher.
    *
-   * @var \Drupal\Core\Path\PathMatcherInterface
+   * @var PathMatcherInterface
    */
   protected $pathMatcher;
 
   /**
    * Redirect configuration.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected  $redirectConfig;
 
   /**
    * Constructs a \Drupal\redirect\EventSubscriber\RedirectRequestSubscriber object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\redirect\RedirectChecker $redirect_checker
+   * @param RedirectChecker $redirect_checker
    *   The redirect checker service.
-   * @param \Drupal\Core\Path\PathMatcherInterface $path_matcher
+   * @param PathMatcherInterface $path_matcher
    *   The path matcher.
    */
   public function __construct(ConfigFactoryInterface $config_factory, RedirectChecker $redirect_checker, PathMatcherInterface $path_matcher) {
@@ -62,7 +63,7 @@ class DomainRedirectRequestSubscriber implements EventSubscriberInterface {
   /**
    * Handles the domain redirect if any found.
    *
-   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
+   * @param RequestEvent $event
    *   The event to process.
    */
   public function onKernelRequestCheckDomainRedirect(RequestEvent $event) {
@@ -111,9 +112,9 @@ class DomainRedirectRequestSubscriber implements EventSubscriberInterface {
   /**
    * Prior to set the response it check if we can redirect.
    *
-   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
+   * @param RequestEvent $event
    *   The event object.
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   The Url where we want to redirect.
    */
   protected function setResponse(RequestEvent $event, Url $url) {
diff --git a/modules/redirect_domain/src/Form/RedirectDomainForm.php b/modules/redirect_domain/src/Form/RedirectDomainForm.php
index 46f1a69..8b925ed 100644
--- a/modules/redirect_domain/src/Form/RedirectDomainForm.php
+++ b/modules/redirect_domain/src/Form/RedirectDomainForm.php
@@ -107,7 +107,7 @@ class RedirectDomainForm extends ConfigFormBase {
    *
    * @param array $form
    *   The form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
diff --git a/modules/redirect_domain/tests/src/Unit/DomainRedirectRequestSubscriberTest.php b/modules/redirect_domain/tests/src/Unit/DomainRedirectRequestSubscriberTest.php
index 8a02559..2888451 100644
--- a/modules/redirect_domain/tests/src/Unit/DomainRedirectRequestSubscriberTest.php
+++ b/modules/redirect_domain/tests/src/Unit/DomainRedirectRequestSubscriberTest.php
@@ -78,9 +78,7 @@ class DomainRedirectRequestSubscriberTest extends UnitTestCase {
     ];
 
     // Create a mock redirect checker.
-    $checker = $this->getMockBuilder(RedirectChecker::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $checker = $this->createMock(RedirectChecker::class);
     $checker->expects($this->any())
       ->method('canRedirect')
       ->will($this->returnValue(TRUE));
@@ -134,8 +132,7 @@ class DomainRedirectRequestSubscriberTest extends UnitTestCase {
   protected function getGetResponseEventStub($path_info, $query_string) {
     $request = Request::create($path_info . '?' . $query_string, 'GET', [], [], [], ['SCRIPT_NAME' => 'index.php']);
 
-    $http_kernel = $this->getMockBuilder(HttpKernelInterface::class)
-      ->getMock();
+    $http_kernel = $this->createMock(HttpKernelInterface::class);
     return new RequestEvent($http_kernel, $request, HttpKernelInterface::MASTER_REQUEST);
   }
 
diff --git a/redirect.api.php b/redirect.api.php
index 6f442bc..6e7d6e5 100644
--- a/redirect.api.php
+++ b/redirect.api.php
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\redirect\Entity\Redirect;
 /**
  * @file
  * Hooks provided by the Redirect module.
@@ -49,26 +50,24 @@ use Drupal\Core\Routing\TrustedRedirectResponse;
  *   - hook_redirect_validate() (all)
  * @}
  */
-
 /**
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Act on a redirect response when it is triggered.
  *
  * This hook is invoked before the response is sent to the user. The redirect
  * entity itself is sent as well for inspection.
  *
- * @param Drupal\Core\Routing\TrustedRedirectResponse $response
+ * @param TrustedRedirectResponse $response
  *   The generated redirect response object before it is delivered.
- * @param \Drupal\redirect\Entity\Redirect $redirect
+ * @param Redirect $redirect
  *   The redirect entity used to generate the response object.
  *
  * @ingroup redirect_api_hooks
  */
-function hook_redirect_response_alter(TrustedRedirectResponse $response, \Drupal\redirect\Entity\Redirect $redirect) {
+function hook_redirect_response_alter(TrustedRedirectResponse $response, Redirect $redirect) {
   // Set a drupal message.
   if (!$redirect->getRedirectUrl()->isExternal()) {
     \Drupal::messenger()->addWarning(t('You are not being directed off-site.'));
diff --git a/redirect.generate.inc b/redirect.generate.inc
index 50bf69b..2a4505b 100644
--- a/redirect.generate.inc
+++ b/redirect.generate.inc
@@ -52,7 +52,7 @@ function redirect_generate_redirects_batch_info($count, $delete = FALSE) {
   return [
     'operations' => $operations,
     'finished' => 'redirect_generate_batch_finished',
-    'file' => drupal_get_path('module', 'redirect') . '/redirect.generate.inc',
+    'file' => \Drupal::service('extension.list.module')->getPath('redirect') . '/redirect.generate.inc',
   ];
 }
 
diff --git a/redirect.install b/redirect.install
index 536d678..47aae80 100644
--- a/redirect.install
+++ b/redirect.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\KeyValueStore\KeyValueStoreInterface;
 /**
  * @file
  * Update hooks for the Redirect module.
@@ -67,7 +68,7 @@ function redirect_update_8101() {
     ->changeField('redirect', 'hash', 'hash', $schema['redirect']['fields']['hash']);
 
   // Update the last installed field definition and field schema.
-  /** @var \Drupal\Core\KeyValueStore\KeyValueStoreInterface $key_value_store */
+  /** @var KeyValueStoreInterface $key_value_store */
   \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();
   $key_value_store_definition = \Drupal::keyValue('entity.definitions.installed');
   $storage_definitions = $key_value_store_definition->get('redirect.field_storage_definitions');
@@ -144,7 +145,7 @@ function redirect_update_8103() {
 
   // Only create if the redirect view doesn't exist and views is enabled.
   if (!View::load('redirect') && \Drupal::moduleHandler()->moduleExists('views')) {
-    $config_path = drupal_get_path('module', 'redirect') . '/config/install/views.view.redirect.yml';
+    $config_path = \Drupal::service('extension.list.module')->getPath('redirect') . '/config/install/views.view.redirect.yml';
     $data = Yaml::parse(file_get_contents($config_path));
     \Drupal::configFactory()->getEditable('views.view.redirect')->setData($data)->save(TRUE);
     $message = 'The new redirect view has been created.';
diff --git a/redirect.module b/redirect.module
index 18e61cf..699ba54 100644
--- a/redirect.module
+++ b/redirect.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\redirect\RedirectRepository;
+use Drupal\node\NodeInterface;
+use Drupal\Core\Entity\EntityListBuilder;
 /**
  * @file
  * The redirect module.
@@ -93,7 +96,7 @@ function redirect_path_alias_update(PathAliasInterface $path_alias) {
     return;
   }
 
-  /** @var \Drupal\path_alias\PathAliasInterface $original_path_alias */
+  /** @var PathAliasInterface $original_path_alias */
   $original_path_alias = $path_alias->original;
 
   // Delete all redirects having the same source as this alias.
@@ -153,7 +156,7 @@ function redirect_page_build(&$page) {
 /**
  * Gets the redirect repository service.
  *
- * @return \Drupal\redirect\RedirectRepository
+ * @return RedirectRepository
  *   The repository service.
  */
 function redirect_repository() {
@@ -297,7 +300,7 @@ function redirect_entity_extra_field_info() {
  * Implements hook_form_node_form_alter().
  */
 function redirect_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\node\NodeInterface $node */
+  /** @var NodeInterface $node */
   $node = $form_state->getFormObject()->getEntity();
   if (!$node->isNew() && \Drupal::currentUser()->hasPermission('administer redirects')) {
 
@@ -309,9 +312,9 @@ function redirect_form_node_form_alter(&$form, FormStateInterface $form_state, $
 
     // Assemble the rows for the table.
     $rows = [];
-    /** @var \Drupal\Core\Entity\EntityListBuilder $list_builder */
+    /** @var EntityListBuilder $list_builder */
     $list_builder = \Drupal::service('entity_type.manager')->getListBuilder('redirect');
-    /** @var \Drupal\redirect\Entity\Redirect[] $redirects */
+    /** @var Redirect[] $redirects */
     foreach ($redirects as $redirect) {
       $row = [];
       $path = $redirect->getSourcePathWithQuery();
diff --git a/src/Entity/Redirect.php b/src/Entity/Redirect.php
index e2b6baf..51537f3 100644
--- a/src/Entity/Redirect.php
+++ b/src/Entity/Redirect.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\redirect\Entity;
 
+use Drupal\Core\Url;
 use Drupal\Component\Utility\Crypt;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Entity\ContentEntityBase;
@@ -219,7 +220,7 @@ class Redirect extends ContentEntityBase {
   /**
    * Gets the redirect URL.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The redirect URL.
    */
   public function getRedirectUrl() {
diff --git a/src/EventSubscriber/RedirectRequestSubscriber.php b/src/EventSubscriber/RedirectRequestSubscriber.php
index b01869d..31ffcc8 100644
--- a/src/EventSubscriber/RedirectRequestSubscriber.php
+++ b/src/EventSubscriber/RedirectRequestSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\redirect\EventSubscriber;
 
+use Drupal\Core\Config\Config;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -25,67 +26,67 @@ use Symfony\Component\Routing\RequestContext;
  */
 class RedirectRequestSubscriber implements EventSubscriberInterface {
 
-  /** @var  \Drupal\redirect\RedirectRepository */
+  /** @var RedirectRepository */
   protected $redirectRepository;
 
   /**
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;
 
   /**
-   * @var \Drupal\path_alias\AliasManagerInterface
+   * @var AliasManagerInterface
    */
   protected $aliasManager;
 
   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\redirect\RedirectChecker
+   * @var RedirectChecker
    */
   protected $checker;
 
   /**
-   * @var \Symfony\Component\Routing\RequestContext
+   * @var RequestContext
    */
   protected $context;
 
   /**
    * A path processor manager for resolving the system path.
    *
-   * @var \Drupal\Core\PathProcessor\InboundPathProcessorInterface
+   * @var InboundPathProcessorInterface
    */
   protected $pathProcessor;
 
   /**
    * Constructs a \Drupal\redirect\EventSubscriber\RedirectRequestSubscriber object.
    *
-   * @param \Drupal\redirect\RedirectRepository $redirect_repository
+   * @param RedirectRepository $redirect_repository
    *   The redirect entity repository.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The config.
-   * @param \Drupal\path_alias\AliasManagerInterface $alias_manager
+   * @param AliasManagerInterface $alias_manager
    *   The alias manager service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\redirect\RedirectChecker $checker
+   * @param RedirectChecker $checker
    *   The redirect checker service.
    * @param \Symfony\Component\Routing\RequestContext
    *   Request context.
@@ -105,7 +106,7 @@ class RedirectRequestSubscriber implements EventSubscriberInterface {
   /**
    * Handles the redirect if any found.
    *
-   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
+   * @param RequestEvent $event
    *   The event to process.
    */
   public function onKernelRequestCheckRedirect(RequestEvent $event) {
@@ -176,9 +177,9 @@ class RedirectRequestSubscriber implements EventSubscriberInterface {
   /**
    * Prior to set the response it check if we can redirect.
    *
-   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
+   * @param RequestEvent $event
    *   The event object.
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   The Url where we want to redirect.
    */
   protected function setResponse(RequestEvent $event, Url $url) {
diff --git a/src/EventSubscriber/RedirectSettingsCacheTag.php b/src/EventSubscriber/RedirectSettingsCacheTag.php
index 7dfb063..32af2c4 100644
--- a/src/EventSubscriber/RedirectSettingsCacheTag.php
+++ b/src/EventSubscriber/RedirectSettingsCacheTag.php
@@ -15,14 +15,14 @@ class RedirectSettingsCacheTag implements EventSubscriberInterface {
   /**
    * The cache tags invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;
 
   /**
    * Constructs a RedirectSettingsCacheTag object.
    *
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The cache tags invalidator.
    */
   public function __construct(CacheTagsInvalidatorInterface $cache_tags_invalidator) {
@@ -32,7 +32,7 @@ class RedirectSettingsCacheTag implements EventSubscriberInterface {
   /**
    * Invalidate the 'rendered' cache tag whenever the settings are modified.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The Event to process.
    */
   public function onSave(ConfigCrudEvent $event) {
diff --git a/src/EventSubscriber/RouteNormalizerRequestSubscriber.php b/src/EventSubscriber/RouteNormalizerRequestSubscriber.php
index 00b27ef..561d502 100644
--- a/src/EventSubscriber/RouteNormalizerRequestSubscriber.php
+++ b/src/EventSubscriber/RouteNormalizerRequestSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\redirect\EventSubscriber;
 
+use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Path\PathMatcherInterface;
 use Drupal\Core\Routing\RequestHelper;
@@ -10,7 +11,6 @@ use Drupal\Core\Routing\UrlGeneratorInterface;
 use Drupal\redirect\RedirectChecker;
 use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 
 /**
@@ -25,41 +25,41 @@ class RouteNormalizerRequestSubscriber implements EventSubscriberInterface {
   /**
    * Module specific configuration.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;
 
   /**
    * The URL generator service.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;
 
   /**
    * The path matcher service.
    *
-   * @var \Drupal\Core\Path\PathMatcherInterface
+   * @var PathMatcherInterface
    */
   protected $pathMatcher;
 
   /**
    * The redirect checker service.
    *
-   * @var \Drupal\redirect\RedirectChecker
+   * @var RedirectChecker
    */
   protected $redirectChecker;
 
   /**
    * Constructs a RouteNormalizerRequestSubscriber object.
    *
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   The URL generator service.
-   * @param \Drupal\Core\Path\PathMatcherInterface $path_matcher
+   * @param PathMatcherInterface $path_matcher
    *   The path matcher service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The config.
-   * @param \Drupal\redirect\RedirectChecker $redirect_checker
+   * @param RedirectChecker $redirect_checker
    *   The redirect checker service.
    *   The value of the route_normalizer_enabled container parameter.
    */
@@ -81,7 +81,7 @@ class RouteNormalizerRequestSubscriber implements EventSubscriberInterface {
    *   page.
    * - Requested path has an alias: redirect to alias.
    *
-   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
+   * @param RequestEvent $event
    *   The Event to process.
    */
   public function onKernelRequestRedirect(RequestEvent $event) {
diff --git a/src/Form/RedirectDeleteMultipleForm.php b/src/Form/RedirectDeleteMultipleForm.php
index e1d048b..3bed1f5 100644
--- a/src/Form/RedirectDeleteMultipleForm.php
+++ b/src/Form/RedirectDeleteMultipleForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\redirect\Form;
 
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -27,34 +28,34 @@ class RedirectDeleteMultipleForm extends ConfirmFormBase {
   /**
    * The private tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $privateTempStoreFactory;
 
   /**
    * The redirect storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $redirectStorage;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * Constructs a RedirectDeleteMultiple form object.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The String translation.
    */
   public function __construct(PrivateTempStoreFactory $temp_store_factory, EntityTypeManagerInterface $entity_type_manager, AccountInterface $account, TranslationInterface $string_translation) {
diff --git a/src/Form/RedirectForm.php b/src/Form/RedirectForm.php
index 23fd3ad..67c9333 100644
--- a/src/Form/RedirectForm.php
+++ b/src/Form/RedirectForm.php
@@ -17,7 +17,7 @@ class RedirectForm extends ContentEntityForm {
    * {@inheritdoc}
    */
   protected function prepareEntity() {
-    /** @var \Drupal\redirect\Entity\Redirect $redirect */
+    /** @var Redirect $redirect */
     $redirect = $this->entity;
 
     if ($redirect->isNew()) {
@@ -63,7 +63,7 @@ class RedirectForm extends ContentEntityForm {
    */
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
-    /** @var \Drupal\redirect\Entity\Redirect $redirect */
+    /** @var Redirect $redirect */
     $redirect = $this->entity;
 
     // Only add the configured languages and a single key for all languages.
diff --git a/src/Plugin/Action/DeleteRedirect.php b/src/Plugin/Action/DeleteRedirect.php
index 305a465..dd39aa7 100644
--- a/src/Plugin/Action/DeleteRedirect.php
+++ b/src/Plugin/Action/DeleteRedirect.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\redirect\Plugin\Action;
 
+use Drupal\Core\TempStore\SharedTempStore;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -23,14 +24,14 @@ class DeleteRedirect extends ActionBase implements ContainerFactoryPluginInterfa
   /**
    * The tempstore object.
    *
-   * @var \Drupal\Core\TempStore\SharedTempStore
+   * @var SharedTempStore
    */
   protected $privateTempStore;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
@@ -43,7 +44,7 @@ class DeleteRedirect extends ActionBase implements ContainerFactoryPluginInterfa
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
    * @param AccountInterface $current_user
    *   Current user.
diff --git a/src/Plugin/Field/FieldWidget/RedirectSourceWidget.php b/src/Plugin/Field/FieldWidget/RedirectSourceWidget.php
index a07f218..909448e 100644
--- a/src/Plugin/Field/FieldWidget/RedirectSourceWidget.php
+++ b/src/Plugin/Field/FieldWidget/RedirectSourceWidget.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\redirect\Plugin\Field\FieldWidget;
 
+use Drupal\redirect\RedirectRepository;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Field\FieldItemListInterface;
@@ -80,7 +81,7 @@ class RedirectSourceWidget extends WidgetBase {
         $parsed_url = UrlHelper::parse($source_path);
         $path = isset($parsed_url['path']) ? $parsed_url['path'] : NULL;
         if (!empty($path)) {
-          /** @var \Drupal\redirect\RedirectRepository $repository */
+          /** @var RedirectRepository $repository */
           $repository = \Drupal::service('redirect.repository');
           $redirects = $repository->findBySourcePath($path);
           if (!empty($redirects)) {
diff --git a/src/Plugin/Validation/Constraint/SourceLinkTypeConstraint.php b/src/Plugin/Validation/Constraint/SourceLinkTypeConstraint.php
index 96a4595..6796bba 100644
--- a/src/Plugin/Validation/Constraint/SourceLinkTypeConstraint.php
+++ b/src/Plugin/Validation/Constraint/SourceLinkTypeConstraint.php
@@ -25,7 +25,7 @@ class SourceLinkTypeConstraint extends Constraint implements ConstraintValidator
   public $message = 'The URL %url is not valid.';
 
   /**
-   * @var \Symfony\Component\Validator\Context\ExecutionContextInterface
+   * @var ExecutionContextInterface
    */
   protected $context;
 
diff --git a/src/RedirectChecker.php b/src/RedirectChecker.php
index d1aa829..1654269 100644
--- a/src/RedirectChecker.php
+++ b/src/RedirectChecker.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\redirect;
 
+use Drupal\Core\Config\Config;
 use Drupal\Core\Access\AccessManager;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -16,27 +17,27 @@ use Symfony\Component\HttpFoundation\Request;
 class RedirectChecker {
 
   /**
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;
 
   /**
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
-   * @var \Drupal\Core\Access\AccessManager
+   * @var AccessManager
    */
   protected $accessManager;
 
   /**
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
 
   /**
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;
 
diff --git a/src/RedirectRepository.php b/src/RedirectRepository.php
index 8ba2ad3..a3bcb1b 100644
--- a/src/RedirectRepository.php
+++ b/src/RedirectRepository.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\redirect;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -12,17 +13,17 @@ use Drupal\redirect\Exception\RedirectLoopException;
 class RedirectRepository {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $manager;
 
   /**
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
@@ -36,9 +37,9 @@ class RedirectRepository {
   /**
    * Constructs a \Drupal\redirect\EventSubscriber\RedirectRequestSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $manager
+   * @param EntityTypeManagerInterface $manager
    *   The entity type manager.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(EntityTypeManagerInterface $manager, Connection $connection, ConfigFactoryInterface $config_factory) {
@@ -57,10 +58,10 @@ class RedirectRepository {
    * @param $language
    *   The language for which is the redirect.
    *
-   * @return \Drupal\redirect\Entity\Redirect
+   * @return Redirect
    *   The matched redirect entity.
    *
-   * @throws \Drupal\redirect\Exception\RedirectLoopException
+   * @throws RedirectLoopException
    */
   public function findMatchingRedirect($source_path, array $query = [], $language = Language::LANGCODE_NOT_SPECIFIED) {
     $source_path = ltrim($source_path, '/');
@@ -128,7 +129,7 @@ class RedirectRepository {
    * @param string $source_path
    *   The redirect source path (without the query).
    *
-   * @return \Drupal\redirect\Entity\Redirect[]
+   * @return Redirect[]
    *   Array of redirect entities.
    */
   public function findBySourcePath($source_path) {
@@ -145,7 +146,7 @@ class RedirectRepository {
    * @param string[] $destination_uri
    *   List of destination URIs, for example ['internal:/node/123'].
    *
-   * @return \Drupal\redirect\Entity\Redirect[]
+   * @return Redirect[]
    *   Array of redirect entities.
    */
   public function findByDestinationUri(array $destination_uri) {
@@ -163,7 +164,7 @@ class RedirectRepository {
    * @param int $redirect_id
    *   The redirect id.
    *
-   * @return \Drupal\redirect\Entity\Redirect
+   * @return Redirect
    */
   public function load($redirect_id) {
     return $this->manager->getStorage('redirect')->load($redirect_id);
@@ -175,7 +176,7 @@ class RedirectRepository {
    * @param array $redirect_ids
    *   Redirect ids to load.
    *
-   * @return \Drupal\redirect\Entity\Redirect[]
+   * @return Redirect[]
    *   List of redirect entities.
    */
   public function loadMultiple(array $redirect_ids = NULL) {
diff --git a/tests/src/Functional/AssertRedirectTrait.php b/tests/src/Functional/AssertRedirectTrait.php
index a16908c..4729a6c 100644
--- a/tests/src/Functional/AssertRedirectTrait.php
+++ b/tests/src/Functional/AssertRedirectTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\redirect\Functional;
 
+use Psr\Http\Message\ResponseInterface;
 use Drupal\Core\Url;
 use GuzzleHttp\Exception\ClientException;
 
@@ -23,12 +24,12 @@ trait AssertRedirectTrait {
    * @param string $method
    *   The HTTP METHOD to use.
    *
-   * @return \Psr\Http\Message\ResponseInterface
+   * @return ResponseInterface
    *   The HTTP response.
    */
   public function assertRedirect($path, $expected_ending_url, $expected_ending_status = 301, $method = 'GET') {
     $client = $this->getHttpClient();
-    /** @var \Psr\Http\Message\ResponseInterface $response */
+    /** @var ResponseInterface $response */
     $url = $this->getAbsoluteUrl($path);
     try {
       $response = $client->request($method, $url, ['allow_redirects' => false]);
diff --git a/tests/src/Functional/GlobalRedirectTest.php b/tests/src/Functional/GlobalRedirectTest.php
index 178959e..0451fb7 100644
--- a/tests/src/Functional/GlobalRedirectTest.php
+++ b/tests/src/Functional/GlobalRedirectTest.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\Tests\redirect\Functional;
 
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Config\Config;
+use Drupal\Core\Entity\ContentEntityInterface;
+use Behat\Mink\Driver\BrowserKitDriver;
+use Behat\Mink\Exception\ExpectationException;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Language\Language;
 use Drupal\language\Entity\ConfigurableLanguage;
@@ -36,32 +41,32 @@ class GlobalRedirectTest extends BrowserTestBase {
   ];
 
   /**
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $normalUser;
 
   /**
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminUser;
 
   /**
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;
 
   /**
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $forumTerm;
 
   /**
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $term;
 
   /**
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $node;
 
@@ -76,7 +81,7 @@ class GlobalRedirectTest extends BrowserTestBase {
   protected function initMink() {
     $session = parent::initMink();
 
-    /** @var \Behat\Mink\Driver\BrowserKitDriver $driver */
+    /** @var BrowserKitDriver $driver */
     $driver = $session->getDriver();
     // Since we are testing low-level redirect stuff, the HTTP client should
     // NOT automatically follow redirects sent by the server.
@@ -187,7 +192,7 @@ class GlobalRedirectTest extends BrowserTestBase {
     // Test a POST request. It should stay on the same path and not try to
     // redirect. Because Mink does not provide methods to do plain POSTs, we
     // need to use the underlying Guzzle HTTP client directly.
-    /** @var \Behat\Mink\Driver\BrowserKitDriver $driver */
+    /** @var BrowserKitDriver $driver */
     $driver = $this->getSession()->getDriver();
     $response = $driver->getClient()
       ->getClient()
@@ -290,7 +295,7 @@ class GlobalRedirectTest extends BrowserTestBase {
    * @param int $status_code
    *   The status we expect to get with the first request.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function assertRedirect($path, $expected_destination, $status_code = 301) {
     // Always just use getAbsolutePath() so that generating the link does not
@@ -314,7 +319,7 @@ class GlobalRedirectTest extends BrowserTestBase {
    * @param int $status_code
    *   (optional) The expected HTTP status code. Defaults to 200.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   protected function assertNoRedirect($path, $status_code = 200) {
     $url = $this->getAbsoluteUrl($path);
diff --git a/tests/src/Functional/RedirectNodeFormTest.php b/tests/src/Functional/RedirectNodeFormTest.php
index 7044452..60bd3ad 100644
--- a/tests/src/Functional/RedirectNodeFormTest.php
+++ b/tests/src/Functional/RedirectNodeFormTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\redirect\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -14,14 +15,14 @@ class RedirectNodeFormTest extends BrowserTestBase {
   /**
    * A normal logged in user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $webUser;
 
   /**
    * A user with permission to bypass content access checks, and add redirects.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
diff --git a/tests/src/Functional/RedirectUITest.php b/tests/src/Functional/RedirectUITest.php
index e1800e3..d134540 100644
--- a/tests/src/Functional/RedirectUITest.php
+++ b/tests/src/Functional/RedirectUITest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\redirect\Functional;
 
+use Drupal\Core\Session\AccountInterface;
+use Drupal\redirect\RedirectRepository;
+use Drupal\Core\Entity\Sql\SqlContentEntityStorage;
+use Drupal\redirect\Entity\Redirect;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Language\Language;
 use Drupal\Core\Logger\RfcLogLevel;
@@ -20,18 +24,18 @@ class RedirectUITest extends BrowserTestBase {
   use AssertRedirectTrait;
 
   /**
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminUser;
 
   /**
-   * @var \Drupal\redirect\RedirectRepository
+   * @var RedirectRepository
    */
   protected $repository;
 
   /**
-   * @var \Drupal\Core\Entity\Sql\SqlContentEntityStorage
-   */
+    * @var SqlContentEntityStorage
+    */
    protected $storage;
 
   /**
@@ -161,14 +165,14 @@ class RedirectUITest extends BrowserTestBase {
     // Redirect loop redirection only works when page caching is disabled.
     \Drupal::service('module_installer')->uninstall(['page_cache']);
 
-    /** @var \Drupal\redirect\Entity\Redirect $redirect1 */
+    /** @var Redirect $redirect1 */
     $redirect1 = $this->storage->create();
     $redirect1->setSource('node');
     $redirect1->setRedirect('admin');
     $redirect1->setStatusCode(301);
     $redirect1->save();
 
-    /** @var \Drupal\redirect\Entity\Redirect $redirect2 */
+    /** @var Redirect $redirect2 */
     $redirect2 = $this->storage->create();
     $redirect2->setSource('admin');
     $redirect2->setRedirect('node');
@@ -235,7 +239,7 @@ class RedirectUITest extends BrowserTestBase {
    * @todo Not sure this belongs in a UI test, but a full web test is needed.
    */
   public function testCacheTags() {
-    /** @var \Drupal\redirect\Entity\Redirect $redirect1 */
+    /** @var Redirect $redirect1 */
     $redirect1 = $this->storage->create();
     $redirect1->setSource('test-redirect');
     $redirect1->setRedirect('node');
diff --git a/tests/src/FunctionalJavascript/RedirectJavascriptTest.php b/tests/src/FunctionalJavascript/RedirectJavascriptTest.php
index 83ee44d..dacc3c5 100644
--- a/tests/src/FunctionalJavascript/RedirectJavascriptTest.php
+++ b/tests/src/FunctionalJavascript/RedirectJavascriptTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\redirect\FunctionalJavascript;
 
+use Drupal\Core\Session\AccountInterface;
+use Drupal\redirect\RedirectRepository;
+use Drupal\Core\Entity\Sql\SqlContentEntityStorage;
 use Drupal\Core\Url;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 
@@ -13,17 +16,17 @@ use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 class RedirectJavascriptTest extends WebDriverTestBase {
 
   /**
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminUser;
 
   /**
-   * @var \Drupal\redirect\RedirectRepository
+   * @var RedirectRepository
    */
   protected $repository;
 
   /**
-   * @var \Drupal\Core\Entity\Sql\SqlContentEntityStorage
+   * @var SqlContentEntityStorage
    */
   protected $storage;
 
diff --git a/tests/src/Kernel/RedirectAPITest.php b/tests/src/Kernel/RedirectAPITest.php
index bf235ee..2b9f022 100644
--- a/tests/src/Kernel/RedirectAPITest.php
+++ b/tests/src/Kernel/RedirectAPITest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\redirect\Kernel;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\redirect\RedirectRepository;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\redirect\Entity\Redirect;
 use Drupal\Core\Language\Language;
@@ -18,7 +20,7 @@ class RedirectAPITest extends KernelTestBase {
   /**
    * The redirect storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;
 
@@ -50,7 +52,7 @@ class RedirectAPITest extends KernelTestBase {
    */
   public function testRedirectEntity() {
     // Create a redirect and test if hash has been generated correctly.
-    /** @var \Drupal\redirect\Entity\Redirect $redirect */
+    /** @var Redirect $redirect */
     $redirect = $this->storage->create();
     $redirect->setSource('some-url', ['key' => 'val']);
     $redirect->setRedirect('node');
@@ -78,7 +80,7 @@ class RedirectAPITest extends KernelTestBase {
       $redirect->setSource($this->randomMachineName());
       $redirect->save();
     }
-    /** @var \Drupal\redirect\RedirectRepository $repository */
+    /** @var RedirectRepository $repository */
     $repository = \Drupal::service('redirect.repository');
     $redirect = $repository->findMatchingRedirect('another-url', ['key1' => 'val1'], 'de');
     if (!empty($redirect)) {
@@ -113,7 +115,7 @@ class RedirectAPITest extends KernelTestBase {
 
     // Add another redirect to the same path, with a query. This should always
     // be found before the source without a query set.
-    /** @var \Drupal\redirect\Entity\Redirect $new_redirect */
+    /** @var Redirect $new_redirect */
     $new_redirect = $this->storage->create();
     $new_redirect->setSource('a-different-url', ['foo' => 'bar']);
     $new_redirect->setRedirect('node');
@@ -140,7 +142,7 @@ class RedirectAPITest extends KernelTestBase {
     }
 
     // Hashes should be case-insensitive since the source paths are.
-    /** @var \Drupal\redirect\Entity\Redirect $redirect */
+    /** @var Redirect $redirect */
     $redirect = $this->storage->create();
     $redirect->setSource('Case-Sensitive-Path');
     $redirect->setRedirect('node');
@@ -203,23 +205,23 @@ class RedirectAPITest extends KernelTestBase {
    */
   public function testLoopDetection() {
     // Add a chained redirect that isn't a loop.
-    /** @var \Drupal\redirect\Entity\Redirect $one */
+    /** @var Redirect $one */
     $one = $this->storage->create();
     $one->setSource('my-path');
     $one->setRedirect('node');
     $one->save();
-    /** @var \Drupal\redirect\Entity\Redirect $two */
+    /** @var Redirect $two */
     $two = $this->storage->create();
     $two->setSource('second-path');
     $two->setRedirect('my-path');
     $two->save();
-    /** @var \Drupal\redirect\Entity\Redirect $three */
+    /** @var Redirect $three */
     $three = $this->storage->create();
     $three->setSource('third-path');
     $three->setRedirect('second-path');
     $three->save();
 
-    /** @var \Drupal\redirect\RedirectRepository $repository */
+    /** @var RedirectRepository $repository */
     $repository = \Drupal::service('redirect.repository');
     $found = $repository->findMatchingRedirect('third-path');
     if (!empty($found)) {
@@ -245,19 +247,19 @@ class RedirectAPITest extends KernelTestBase {
    */
   public function testLoopDetectionReset() {
     // Add a chained redirect that isn't a loop.
-    /** @var \Drupal\redirect\Entity\Redirect $source */
+    /** @var Redirect $source */
     $source = $this->storage->create();
     $source->setSource('source-redirect');
     $source->setRedirect('target');
     $source->save();
 
-    /** @var \Drupal\redirect\Entity\Redirect $target */
+    /** @var Redirect $target */
     $target = $this->storage->create();
     $target->setSource('target');
     $target->setRedirect('second-target');
     $target->save();
 
-    /** @var \Drupal\redirect\RedirectRepository $repository */
+    /** @var RedirectRepository $repository */
     $repository = \Drupal::service('redirect.repository');
     $found = $repository->findMatchingRedirect('target');
     $this->assertEquals($target->id(), $found->id());
@@ -268,6 +270,7 @@ class RedirectAPITest extends KernelTestBase {
 
   /**
    * Test redirect_parse_url().
+   * @doesNotPerformAssertions
    */
   public function testParseURL() {
     //$test_cases = array(
@@ -287,7 +290,7 @@ class RedirectAPITest extends KernelTestBase {
    */
   public function testMultilanguageCases() {
     // Add a redirect for english.
-    /** @var \Drupal\redirect\Entity\Redirect $en_redirect */
+    /** @var Redirect $en_redirect */
     $en_redirect = $this->storage->create();
     $en_redirect->setSource('langpath');
     $en_redirect->setRedirect('/about');
@@ -295,7 +298,7 @@ class RedirectAPITest extends KernelTestBase {
     $en_redirect->save();
 
     // Add a redirect for germany.
-    /** @var \Drupal\redirect\Entity\Redirect $en_redirect */
+    /** @var Redirect $en_redirect */
     $en_redirect = $this->storage->create();
     $en_redirect->setSource('langpath');
     $en_redirect->setRedirect('node');
@@ -303,7 +306,7 @@ class RedirectAPITest extends KernelTestBase {
     $en_redirect->save();
 
     // Check redirect for english.
-    /** @var \Drupal\redirect\RedirectRepository $repository */
+    /** @var RedirectRepository $repository */
     $repository = \Drupal::service('redirect.repository');
 
     $found = $repository->findBySourcePath('langpath');
@@ -317,7 +320,7 @@ class RedirectAPITest extends KernelTestBase {
 
     // Check redirect for germany.
     \Drupal::configFactory()->getEditable('system.site')->set('default_langcode', 'de')->save();
-    /** @var \Drupal\redirect\RedirectRepository $repository */
+    /** @var RedirectRepository $repository */
     $repository = \Drupal::service('redirect.repository');
     $found = $repository->findBySourcePath('langpath');
     if (!empty($found)) {
diff --git a/tests/src/Unit/RedirectCheckerTest.php b/tests/src/Unit/RedirectCheckerTest.php
index 2bf7913..f0cd542 100644
--- a/tests/src/Unit/RedirectCheckerTest.php
+++ b/tests/src/Unit/RedirectCheckerTest.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\Tests\redirect\Unit;
 
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\redirect\RedirectChecker;
 use Drupal\Tests\UnitTestCase;
-use PHPUnit_Framework_MockObject_MockObject;
 use Symfony\Cmf\Component\Routing\RouteObjectInterface;
 use Symfony\Component\HttpFoundation\ParameterBag;
 use Symfony\Component\Routing\Route;
@@ -23,19 +23,14 @@ class RedirectCheckerTest extends UnitTestCase {
 
     $config = ['redirect.settings' => ['ignore_admin_path' => FALSE, 'access_check' => TRUE]];
 
-    $state = $this->getMockBuilder('Drupal\Core\State\StateInterface')
-      ->getMock();
+    $state = $this->createMock('Drupal\Core\State\StateInterface');
     $state->expects($this->any())
       ->method('get')
       ->with('system.maintenance_mode')
       ->will($this->returnValue(FALSE));
-    $access = $this->getMockBuilder('Drupal\Core\Access\AccessManager')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $account = $this->getMockBuilder('Drupal\Core\Session\AccountInterface')
-      ->getMock();
-    $route_provider = $this->getMockBuilder('Drupal\Core\Routing\RouteProviderInterface')
-      ->getMock();
+    $access = $this->createMock('Drupal\Core\Access\AccessManager');
+    $account = $this->createMock('Drupal\Core\Session\AccountInterface');
+    $route_provider = $this->createMock('Drupal\Core\Routing\RouteProviderInterface');
 
     $route = new Route('/example');
     $route_provider->expects($this->any())
@@ -77,8 +72,7 @@ class RedirectCheckerTest extends UnitTestCase {
     $this->assertFalse($checker->canRedirect($request), 'Cannot redirect');
 
     // Maintenance mode is on.
-    $state = $this->getMockBuilder('Drupal\Core\State\StateInterface')
-      ->getMock();
+    $state = $this->createMock('Drupal\Core\State\StateInterface');
     $state->expects($this->any())
       ->method('get')
       ->with('system.maintenance_mode')
@@ -90,8 +84,7 @@ class RedirectCheckerTest extends UnitTestCase {
     $this->assertFalse($checker->canRedirect($request), 'Cannot redirect if maintenance mode is on');
 
     // Maintenance mode is on, but user has access to view site in maintenance mode.
-    $accountWithMaintenanceModeAccess = $this->getMockBuilder('Drupal\Core\Session\AccountInterface')
-      ->getMock();
+    $accountWithMaintenanceModeAccess = $this->createMock('Drupal\Core\Session\AccountInterface');
     $accountWithMaintenanceModeAccess->expects($this->any())
       ->method('hasPermission')
       ->with('access site in maintenance mode')
@@ -103,8 +96,7 @@ class RedirectCheckerTest extends UnitTestCase {
     $this->assertTrue($checker->canRedirect($request), 'Redirect should have worked, user has maintenance mode access.');
 
     // We are at a admin path.
-    $state = $this->getMockBuilder('Drupal\Core\State\StateInterface')
-      ->getMock();
+    $state = $this->createMock('Drupal\Core\State\StateInterface');
     $state->expects($this->any())
       ->method('get')
       ->with('system.maintenance_mode')
@@ -145,13 +137,11 @@ class RedirectCheckerTest extends UnitTestCase {
    * @param array $query
    *   Query paramter to be passed into request->query.
    *
-   * @return PHPUnit_Framework_MockObject_MockObject
+   * @return MockObject
    *   Mocked request object.
    */
   protected function getRequestStub($script_name, $method, array $attributes = [], array $query = []) {
-    $request = $this->getMockBuilder('Symfony\Component\HttpFoundation\Request')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $request = $this->createMock('Symfony\Component\HttpFoundation\Request');
     $request->expects($this->any())
       ->method('getScriptName')
       ->will($this->returnValue($script_name));
diff --git a/tests/src/Unit/RedirectRequestSubscriberTest.php b/tests/src/Unit/RedirectRequestSubscriberTest.php
index 41f68a8..22825b3 100644
--- a/tests/src/Unit/RedirectRequestSubscriberTest.php
+++ b/tests/src/Unit/RedirectRequestSubscriberTest.php
@@ -2,13 +2,14 @@
 
 namespace Drupal\Tests\redirect\Unit;
 
+use PHPUnit\Framework\MockObject\MockObject;
+use Drupal\language\ConfigurableLanguageManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Language\Language;
 use Drupal\path_alias\AliasManagerInterface;
 use Drupal\redirect\EventSubscriber\RedirectRequestSubscriber;
 use Drupal\Tests\UnitTestCase;
-use PHPUnit_Framework_MockObject_MockObject;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
@@ -35,9 +36,7 @@ class RedirectRequestSubscriberTest extends UnitTestCase {
     // by the redirect entity and values from the accessed url.
     $final_query = $redirect_query + $request_query;
 
-    $url = $this->getMockBuilder('Drupal\Core\Url')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $url = $this->createMock('Drupal\Core\Url');
 
     $url->expects($this->once())
       ->method('setAbsolute')
@@ -73,9 +72,7 @@ class RedirectRequestSubscriberTest extends UnitTestCase {
    */
   public function testRedirectLogicWithoutQueryRetaining($request_uri, $request_query, $redirect_uri) {
 
-    $url = $this->getMockBuilder('Drupal\Core\Url')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $url = $this->createMock('Drupal\Core\Url');
 
     $url->expects($this->once())
       ->method('setAbsolute')
@@ -125,7 +122,7 @@ class RedirectRequestSubscriberTest extends UnitTestCase {
    * @param bool $retain_query
    *   Flag if to retain the query through the redirect.
    *
-   * @return \Symfony\Component\HttpKernel\Event\RequestEvent
+   * @return RequestEvent
    *   THe response event.
    */
   protected function callOnKernelRequestCheckRedirect($redirect, $request_uri, $request_query, $retain_query) {
@@ -133,18 +130,14 @@ class RedirectRequestSubscriberTest extends UnitTestCase {
     $event = $this->getGetResponseEventStub($request_uri, http_build_query($request_query));
     $request = $event->getRequest();
 
-    $checker = $this->getMockBuilder('Drupal\redirect\RedirectChecker')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $checker = $this->createMock('Drupal\redirect\RedirectChecker');
     $checker->expects($this->any())
       ->method('canRedirect')
       ->will($this->returnValue(TRUE));
 
     $context = $this->createMock('Symfony\Component\Routing\RequestContext');
 
-    $inbound_path_processor = $this->getMockBuilder('Drupal\Core\PathProcessor\InboundPathProcessorInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $inbound_path_processor = $this->createMock('Drupal\Core\PathProcessor\InboundPathProcessorInterface');
     $inbound_path_processor->expects($this->any())
       ->method('processInbound')
       ->with($request->getPathInfo(), $request)
@@ -189,13 +182,11 @@ class RedirectRequestSubscriberTest extends UnitTestCase {
    * @param $redirect
    *   The redirect object to be returned.
    *
-   * @return PHPUnit_Framework_MockObject_MockObject
+   * @return MockObject
    *   The redirect repository.
    */
   protected function getRedirectRepositoryStub($method, $redirect) {
-    $repository = $this->getMockBuilder('Drupal\redirect\RedirectRepository')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $repository = $this->createMock('Drupal\redirect\RedirectRepository');
 
     if ($method === 'findMatchingRedirect') {
       $repository->expects($this->any())
@@ -223,13 +214,11 @@ class RedirectRequestSubscriberTest extends UnitTestCase {
    * @param int $status_code
    *   The redirect status code.
    *
-   * @return PHPUnit_Framework_MockObject_MockObject
+   * @return MockObject
    *   The mocked redirect object.
    */
   protected function getRedirectStub($url, $status_code = 301) {
-    $redirect = $this->getMockBuilder('Drupal\redirect\Entity\Redirect')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $redirect = $this->createMock('Drupal\redirect\Entity\Redirect');
     $redirect->expects($this->once())
       ->method('getRedirectUrl')
       ->will($this->returnValue($url));
@@ -252,15 +241,12 @@ class RedirectRequestSubscriberTest extends UnitTestCase {
    * @param array $headers
    *   Headers to be set into the response.
    *
-   * @return \Symfony\Component\HttpKernel\Event\TerminateEvent
+   * @return TerminateEvent
    *   The post response event object.
    */
   protected function getPostResponseEvent($headers = []) {
-    $http_kernel = $this->getMockBuilder('\Symfony\Component\HttpKernel\HttpKernelInterface')
-      ->getMock();
-    $request = $this->getMockBuilder('Symfony\Component\HttpFoundation\Request')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $http_kernel = $this->createMock('\Symfony\Component\HttpKernel\HttpKernelInterface');
+    $request = $this->createMock('Symfony\Component\HttpFoundation\Request');
 
     $response = new Response('', 301, $headers);
 
@@ -278,19 +264,17 @@ class RedirectRequestSubscriberTest extends UnitTestCase {
   protected function getGetResponseEventStub($path_info, $query_string) {
     $request = Request::create($path_info . '?' . $query_string, 'GET', [], [], [], ['SCRIPT_NAME' => 'index.php']);
 
-    $http_kernel = $this->getMockBuilder('\Symfony\Component\HttpKernel\HttpKernelInterface')
-      ->getMock();
+    $http_kernel = $this->createMock('\Symfony\Component\HttpKernel\HttpKernelInterface');
     return new RequestEvent($http_kernel, $request, HttpKernelInterface::MASTER_REQUEST);
   }
 
   /**
    * Gets the language manager mock object.
    *
-   * @return \Drupal\language\ConfigurableLanguageManagerInterface|PHPUnit_Framework_MockObject_MockObject
+   * @return ConfigurableLanguageManagerInterface|MockObject
    */
   protected function getLanguageManagerStub() {
-    $language_manager = $this->getMockBuilder('Drupal\language\ConfigurableLanguageManagerInterface')
-      ->getMock();
+    $language_manager = $this->createMock('Drupal\language\ConfigurableLanguageManagerInterface');
     $language_manager->expects($this->any())
       ->method('getCurrentLanguage')
       ->will($this->returnValue(new Language(['id' => 'en'])));
diff --git a/tests/src/Unit/RouteNormalizerRequestSubscriberTest.php b/tests/src/Unit/RouteNormalizerRequestSubscriberTest.php
index 3a64f1b..f3e4e6b 100644
--- a/tests/src/Unit/RouteNormalizerRequestSubscriberTest.php
+++ b/tests/src/Unit/RouteNormalizerRequestSubscriberTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\redirect\Unit;
 
+use Drupal\Core\Routing\UrlGeneratorInterface;
+use PHPUnit\Framework\MockObject\MockObject;
+use Drupal\Core\Path\PathMatcherInterface;
+use Drupal\redirect\RedirectChecker;
 use Drupal\Tests\UnitTestCase;
 use Drupal\redirect\EventSubscriber\RouteNormalizerRequestSubscriber;
 use Symfony\Component\HttpKernel\Event\RequestEvent;
@@ -113,7 +117,7 @@ class RouteNormalizerRequestSubscriberTest extends UnitTestCase {
    * @param bool $call_expected
    *   If true, canRedirect() and other methods should be called once.
    *
-   * @return \Drupal\redirect\EventSubscriber\RouteNormalizerRequestSubscriber
+   * @return RouteNormalizerRequestSubscriber
    */
   protected function getSubscriber($request_uri, $enabled = TRUE, $call_expected = TRUE) {
     return new RouteNormalizerRequestSubscriber(
@@ -137,11 +141,10 @@ class RouteNormalizerRequestSubscriberTest extends UnitTestCase {
    * @param bool $call_expected
    *   If true, we expect generateFromRoute() to be called once.
    *
-   * @return \Drupal\Core\Routing\UrlGeneratorInterface|\PHPUnit\Framework\MockObject\MockObject
+   * @return UrlGeneratorInterface|MockObject
    */
   protected function getUrlGeneratorStub($request_uri, $call_expected = TRUE) {
-    $url_generator = $this->getMockBuilder('\Drupal\Core\Routing\UrlGeneratorInterface')
-      ->getMock();
+    $url_generator = $this->createMock('\Drupal\Core\Routing\UrlGeneratorInterface');
 
     $options = ['absolute' => TRUE];
 
@@ -160,11 +163,10 @@ class RouteNormalizerRequestSubscriberTest extends UnitTestCase {
    * @param bool $call_expected
    *   If true, we expect isFrontPage() to be called once.
    *
-   * @return \Drupal\Core\Path\PathMatcherInterface|\PHPUnit\Framework\MockObject\MockObject
+   * @return PathMatcherInterface|MockObject
    */
   protected function getPathMatcherStub($call_expected = TRUE) {
-    $path_matcher = $this->getMockBuilder('\Drupal\Core\Path\PathMatcherInterface')
-      ->getMock();
+    $path_matcher = $this->createMock('\Drupal\Core\Path\PathMatcherInterface');
 
     $expectation = $call_expected ? $this->once() : $this->never();
 
@@ -181,12 +183,10 @@ class RouteNormalizerRequestSubscriberTest extends UnitTestCase {
    * @param bool $call_expected
    *   If true, we expect canRedirect() to be called once.
    *
-   * @return \Drupal\redirect\RedirectChecker|\PHPUnit\Framework\MockObject\MockObject
+   * @return RedirectChecker|MockObject
    */
   protected function getRedirectCheckerStub($call_expected = TRUE) {
-    $redirect_checker = $this->getMockBuilder('\Drupal\redirect\RedirectChecker')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $redirect_checker = $this->createMock('\Drupal\redirect\RedirectChecker');
 
     $expectation = $call_expected ? $this->once() : $this->never();
 
@@ -209,7 +209,7 @@ class RouteNormalizerRequestSubscriberTest extends UnitTestCase {
    * @param bool $set_request_attribute
    *   If true, the request attribute '_disable_route_normalizer' will be set.
    *
-   * @return \Symfony\Component\HttpKernel\Event\RequestEvent
+   * @return RequestEvent
    */
   protected function getGetResponseEventStub($path_info, $query_string, $request_type = HttpKernelInterface::MASTER_REQUEST, $set_request_attribute = FALSE) {
     $request = Request::create($path_info . '?' . $query_string, 'GET', [], [], [], ['SCRIPT_NAME' => 'index.php', 'SCRIPT_FILENAME' => 'index.php']);
@@ -218,8 +218,7 @@ class RouteNormalizerRequestSubscriberTest extends UnitTestCase {
       $request->attributes->add(['_disable_route_normalizer' => TRUE]);
     }
 
-    $http_kernel = $this->getMockBuilder('\Symfony\Component\HttpKernel\HttpKernelInterface')
-      ->getMock();
+    $http_kernel = $this->createMock('\Symfony\Component\HttpKernel\HttpKernelInterface');
     return new RequestEvent($http_kernel, $request, $request_type);
   }
 
