modules/contrib/digital_signage_framework/digital_signage_framework.install
modules/contrib/digital_signage_framework/digital_signage_framework.module
modules/contrib/digital_signage_framework/modules/computed_content/digital_signage_computed_content.module
modules/contrib/digital_signage_framework/modules/computed_content/src/ComputedContentAccessControlHandler.php
modules/contrib/digital_signage_framework/modules/computed_content/src/ComputedContentInterface.php
modules/contrib/digital_signage_framework/modules/computed_content/src/ComputedContentListBuilder.php
modules/contrib/digital_signage_framework/modules/computed_content/src/ComputedContentTypeListBuilder.php
modules/contrib/digital_signage_framework/modules/computed_content/src/Entity/ComputedContent.php
modules/contrib/digital_signage_framework/modules/computed_content/src/Entity/ComputedContentType.php
modules/contrib/digital_signage_framework/modules/computed_content/src/Form/ComputedContentForm.php
modules/contrib/digital_signage_framework/modules/computed_content/src/Form/ComputedContentType.php
modules/contrib/digital_signage_framework/modules/computed_content/src/Plugin/views/display/DigitalSignage.php
modules/contrib/digital_signage_framework/modules/computed_content/src/RenderInterface.php
modules/contrib/digital_signage_framework/modules/computed_content/src/RenderView.php
modules/contrib/digital_signage_framework/modules/custom_platform/src/Form/Settings.php
modules/contrib/digital_signage_framework/modules/custom_platform/src/Plugin/DigitalSignagePlatform/Custom.php
modules/contrib/digital_signage_framework/modules/example/src/Form/Settings.php
modules/contrib/digital_signage_framework/modules/example/src/Plugin/DigitalSignagePlatform/Example.php
modules/contrib/digital_signage_framework/src/Annotation/DigitalSignagePlatform.php
modules/contrib/digital_signage_framework/src/Annotation/DigitalSignageScheduleGenerator.php
modules/contrib/digital_signage_framework/src/Commands/DeviceCommands.php
modules/contrib/digital_signage_framework/src/Commands/FrameworkCommands.php
modules/contrib/digital_signage_framework/src/Commands/ScheduleCommands.php
modules/contrib/digital_signage_framework/src/ContentEvent.php
modules/contrib/digital_signage_framework/src/ContentSettingInterface.php
modules/contrib/digital_signage_framework/src/Controller/Api.php
modules/contrib/digital_signage_framework/src/Controller/BlockApi.php
modules/contrib/digital_signage_framework/src/DefaultDuration.php
modules/contrib/digital_signage_framework/src/DefaultWeight.php
modules/contrib/digital_signage_framework/src/DeviceAccessControlHandler.php
modules/contrib/digital_signage_framework/src/DeviceInterface.php
modules/contrib/digital_signage_framework/src/DeviceListBuilder.php
modules/contrib/digital_signage_framework/src/DeviceTypeListBuilder.php
modules/contrib/digital_signage_framework/src/DigitalSignageFrameworkEvents.php
modules/contrib/digital_signage_framework/src/DurationInterface.php
modules/contrib/digital_signage_framework/src/Emergency.php
modules/contrib/digital_signage_framework/src/Entity/ContentSetting.php
modules/contrib/digital_signage_framework/src/Entity/Device.php
modules/contrib/digital_signage_framework/src/Entity/DeviceType.php
modules/contrib/digital_signage_framework/src/Entity/Schedule.php
modules/contrib/digital_signage_framework/src/EntityFieldUpdate.php
modules/contrib/digital_signage_framework/src/EntityTypes.php
modules/contrib/digital_signage_framework/src/EntityUpdate.php
modules/contrib/digital_signage_framework/src/Event/Libraries.php
modules/contrib/digital_signage_framework/src/Event/Overlays.php
modules/contrib/digital_signage_framework/src/Event/Rendered.php
modules/contrib/digital_signage_framework/src/Event/Underlays.php
modules/contrib/digital_signage_framework/src/EventSubscriber/Blocks.php
modules/contrib/digital_signage_framework/src/Form/ActionBase.php
modules/contrib/digital_signage_framework/src/Form/ContentSettingSettingsForm.php
modules/contrib/digital_signage_framework/src/Form/Device.php
modules/contrib/digital_signage_framework/src/Form/DeviceType.php
modules/contrib/digital_signage_framework/src/Form/EmergencyMode.php
modules/contrib/digital_signage_framework/src/Form/Font.php
modules/contrib/digital_signage_framework/src/Form/Fonts.php
modules/contrib/digital_signage_framework/src/Form/FrameworkSettings.php
modules/contrib/digital_signage_framework/src/Form/ScheduleConfig.php
modules/contrib/digital_signage_framework/src/Form/SchedulePush.php
modules/contrib/digital_signage_framework/src/Form/ScheduleSettings.php
modules/contrib/digital_signage_framework/src/Form/SyncDevices.php
modules/contrib/digital_signage_framework/src/PlatformInterface.php
modules/contrib/digital_signage_framework/src/PlatformPluginBase.php
modules/contrib/digital_signage_framework/src/PlatformPluginManager.php
modules/contrib/digital_signage_framework/src/Plugin/Action/Base.php
modules/contrib/digital_signage_framework/src/Plugin/Action/EmergencyMode.php
modules/contrib/digital_signage_framework/src/Plugin/Action/ScheduleConfig.php
modules/contrib/digital_signage_framework/src/Plugin/Action/SchedulePush.php
modules/contrib/digital_signage_framework/src/Plugin/DigitalSignageScheduleGenerator/Base.php
modules/contrib/digital_signage_framework/src/Plugin/Field/FieldFormatter/Preview.php
modules/contrib/digital_signage_framework/src/Query.php
modules/contrib/digital_signage_framework/src/Renderer.php
modules/contrib/digital_signage_framework/src/ScheduleGeneratorInterface.php
modules/contrib/digital_signage_framework/src/ScheduleGeneratorPluginBase.php
modules/contrib/digital_signage_framework/src/ScheduleGeneratorPluginManager.php
modules/contrib/digital_signage_framework/src/ScheduleInterface.php
modules/contrib/digital_signage_framework/src/ScheduleListBuilder.php
modules/contrib/digital_signage_framework/src/ScheduleManager.php
modules/contrib/digital_signage_framework/src/SequenceItem.php
modules/contrib/digital_signage_framework/src/WeightInterface.php

50 files with changes
=====================

1) modules/contrib/digital_signage_framework/src/SequenceItem.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digital_signage_framework;

+use Drupal\media\MediaTypeInterface;
 use Drupal;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
@@ @@
   /**
    * Returns a sequence item by the given entity and duration.
    *
-   * @param \Drupal\digital_signage_framework\ContentSettingInterface $contentSetting
+   * @param ContentSettingInterface $contentSetting
    * @param int $duration
    *
    * @return \Drupal\digital_signage_framework\SequenceItem
@@ @@
   }

   /**
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
+   * @param DeviceInterface $device
    *
    * @return array
    */
@@ @@
         $query
           ->condition($orQuery)
           ->condition('predecessor', $this->id);
-        /** @var \Drupal\digital_signage_framework\ContentSettingInterface $item */
+        /** @var ContentSettingInterface $item */
         foreach ($entityTypeManager->getStorage('digital_signage_content_setting')->loadMultiple($query->execute()) as $item) {
           $this->successors[] = self::create($item, $this->duration);
         }
@@ @@
   protected function determineType(): void {
     $this->type = 'html';
     if ($this->entityType === 'media') {
-      /** @var \Drupal\media\MediaTypeInterface $mediaType */
+      /** @var MediaTypeInterface $mediaType */
       $mediaType = MediaType::load($this->entityBundle);
       if (($fieldDefinition = $mediaType->getSource()->getSourceFieldDefinition($mediaType)) &&
           $fieldDefinition->getSetting('handler')) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/digital_signage_framework/src/ScheduleManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digital_signage_framework;

+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
@@ @@
 class ScheduleManager {

   /**
-   * @var \Drupal\digital_signage_framework\ScheduleGeneratorPluginManager
+   * @var ScheduleGeneratorPluginManager
    */
   protected $generatorPluginManager;

   /**
-   * @var \Drupal\digital_signage_framework\PlatformPluginManager
+   * @var PlatformPluginManager
    */
   protected $platformPluginManager;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
    * @param int|null $deviceId
    * @param bool $all
    *
-   * @return \Drupal\digital_signage_framework\DeviceInterface[]
+   * @return DeviceInterface[]
    */
   protected function getDevices($deviceId = NULL, $all = FALSE): array {
     try {
@@ @@
   }

   /**
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
-   * @param \Drupal\digital_signage_framework\ScheduleGeneratorInterface $plugin
+   * @param DeviceInterface $device
+   * @param ScheduleGeneratorInterface $plugin
    * @param bool $store
    * @param bool $force
    * @param string|null $entityType
    * @param int|null $entityId
    *
-   * @return \Drupal\digital_signage_framework\ScheduleInterface
+   * @return ScheduleInterface
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   protected function createSchedule(DeviceInterface $device, ScheduleGeneratorInterface $plugin, bool $store, bool $force, $entityType = NULL, $entityId = NULL) {
     // Collect the content entities for this schedule
@@ @@

     $contentSettings = [];
     $hashMap = [];
-    /** @var \Drupal\digital_signage_framework\ContentSettingInterface $item */
+    /** @var ContentSettingInterface $item */
     foreach ($this->entityTypeManager->getStorage('digital_signage_content_setting')->loadMultiple($query->execute()) as $item) {
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       if (($entity = $this->entityTypeManager->getStorage($item->getReverseEntityType())->load($item->getReverseEntityId())) &&
         (!$entity->hasField('status') || $entity->get('status')->value)) {
         $contentSettings[] = $item;
@@ @@
     // See if we already have a schedule with that.
     $scheduleHash = md5(json_encode($hashMap));
     try {
-      /** @var \Drupal\digital_signage_framework\ScheduleInterface[] $schedules */
+      /** @var ScheduleInterface[] $schedules */
       $schedules = $this->entityTypeManager
         ->getStorage('digital_signage_schedule')
         ->loadByProperties([
@@ @@
       foreach ($plugin->generate($device, $contentSettings) as $sequenceItem) {
         $this->addItemAndSuccessors($items, $sequenceItem, $device);
       }
-      /** @var \Drupal\digital_signage_framework\ScheduleInterface $schedule */
+      /** @var ScheduleInterface $schedule */
       $schedule = Schedule::create([
         'hash' => $scheduleHash,
         'items' => [$items],
@@ @@

   /**
    * @param array $items
-   * @param \Drupal\digital_signage_framework\SequenceItem $sequenceItem
+   * @param SequenceItem $sequenceItem
    * @param DeviceInterface $device
    * @param int $level
    */
@@ @@
    */
   public function pushSchedules($deviceId = NULL, $force = FALSE, $debug = FALSE, $reload_assets = FALSE, $reload_content = FALSE, $entityType = NULL, $entityId = NULL) {
     try {
-      /** @var \Drupal\digital_signage_framework\ScheduleGeneratorInterface $plugin */
+      /** @var ScheduleGeneratorInterface $plugin */
       $plugin = $this->generatorPluginManager->createInstance('default');
       foreach ($this->getDevices($deviceId, $force) as $device) {
           $schedule = $this->createSchedule($device, $plugin, TRUE, $force, $entityType, $entityId);
@@ @@
   }

   /**
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
+   * @param DeviceInterface $device
    *
-   * @return \Drupal\digital_signage_framework\ScheduleInterface|null
+   * @return ScheduleInterface|null
    */
   public function getSchedule(DeviceInterface $device) {
     try {
-      /** @var \Drupal\digital_signage_framework\ScheduleGeneratorInterface $plugin */
+      /** @var ScheduleGeneratorInterface $plugin */
       $plugin = $this->generatorPluginManager->createInstance('default');
       return $this->createSchedule($device, $plugin, FALSE, TRUE);
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/digital_signage_framework/src/ScheduleListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digital_signage_framework;

+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Datetime\DateFormatterInterface;
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;

@@ @@
   /**
    * Constructs a new DigitalSignageScheduleListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
@@ @@

   /**
    * {@inheritdoc}
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function buildRow(EntityInterface $entity): array {
     /* @var $entity \Drupal\digital_signage_framework\ScheduleInterface */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/digital_signage_framework/src/ScheduleGeneratorPluginManager.php:18

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/digital_signage_framework/src/ScheduleGeneratorPluginBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digital_signage_framework;

+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManager;
@@ @@
 abstract class ScheduleGeneratorPluginBase extends PluginBase implements ScheduleGeneratorInterface, ContainerFactoryPluginInterface  {

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

   /**
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $settings;

@@ @@
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param EntityTypeManager $entity_type_manager
+   * @param ConfigFactoryInterface $config_factory
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManager $entity_type_manager, ConfigFactoryInterface $config_factory) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
@@ @@
   }

   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/digital_signage_framework/src/ScheduleGeneratorInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digital_signage_framework;

+use Drupal\digital_signage_framework\Entity\ContentSetting;
 /**
  * Interface for digital_signage_schedule_generator plugins.
  */
@@ @@
   /**
    * Generates the actual schedule.
    *
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
-   * @param \Drupal\digital_signage_framework\Entity\ContentSetting[] $contentSettings
+   * @param DeviceInterface $device
+   * @param ContentSetting[] $contentSettings
    *
-   * @return \Drupal\digital_signage_framework\SequenceItem[]
+   * @return SequenceItem[]
    */
   public function generate(DeviceInterface $device, array $contentSettings): array;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/digital_signage_framework/src/Renderer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digital_signage_framework;

+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Render\MarkupInterface;
@@ @@
 class Renderer {

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

   /**
-   * @var \Drupal\Core\Render\HtmlResponseAttachmentsProcessor
+   * @var HtmlResponseAttachmentsProcessor
    */
   protected $attachmentProcessor;

@@ @@
   /**
    * Renderer constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Render\RendererInterface $renderer
-   * @param \Drupal\Core\Render\HtmlResponseAttachmentsProcessor $attachment_processor
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param RendererInterface $renderer
+   * @param HtmlResponseAttachmentsProcessor $attachment_processor
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, RendererInterface $renderer, HtmlResponseAttachmentsProcessor $attachment_processor) {
     $this->entityTypeManager = $entity_type_manager;
@@ @@
   /**
    * @param string $entityType
    * @param string $entityId
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
+   * @param DeviceInterface $device
    *
    * @return array
    */
   public function buildEntityView($entityType, $entityId, $device): array {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     try {
       $entity = $this->entityTypeManager->getStorage($entityType)
         ->load($entityId);
@@ @@
   /**
    * @param array $output
    *
-   * @return \Drupal\Core\Render\AttachmentsInterface
+   * @return AttachmentsInterface
    */
   public function buildHtmlResponse($output): AttachmentsInterface {
     $response = new HtmlResponse();
@@ @@
   /**
    * @param array $elements
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    */
   public function renderPlain(&$elements): MarkupInterface {
     return $this->renderer->renderPlain($elements);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/digital_signage_framework/src/Query.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digital_signage_framework;

+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
 class Query {

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\digital_signage_framework\Emergency
+   * @var Emergency
    */
   protected $emergency;

@@ @@
   /**
    * Renderer constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\digital_signage_framework\Emergency $emergency
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param Emergency $emergency
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, Emergency $emergency) {
     $this->entityTypeManager = $entity_type_manager;
@@ @@
   }

   /**
-   * @param \Drupal\digital_signage_framework\DeviceInterface[] $devices
+   * @param DeviceInterface[] $devices
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface[]
+   * @return ContentEntityInterface[]
    */
   public function allEntitiesForSelect(array $devices): array {
     $entities = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/digital_signage_framework/src/Plugin/Field/FieldFormatter/Preview.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digital_signage_framework\Plugin\Field\FieldFormatter;

+use Drupal\digital_signage_framework\DeviceInterface;
 use Drupal;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemListInterface;
@@ @@
     if (!Drupal::currentUser()->hasPermission('digital signage framework access preview')) {
       return [];
     }
-    /** @var \Drupal\digital_signage_framework\DeviceInterface $device */
+    /** @var DeviceInterface $device */
     $device = $items->getEntity();
     $build = [
       '#prefix' => '<div class="digital-signage-device-preview-buttons">',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/digital_signage_framework/src/Plugin/DigitalSignageScheduleGenerator/Base.php:25

    ---------- begin diff ----------
@@ @@
   public function generate($device, $contentSettings): array {
     $sequenceItems = [];
     $criticalSequenceItems = [];
-    /** @var \Drupal\digital_signage_framework\Entity\ContentSetting[] $nonCriticalEntities */
+    /** @var ContentSetting[] $nonCriticalEntities */
     $nonCriticalEntities = [];
     $nonChosenEntities = [];

@@ @@

     $weightMap = $this->getWeightMap($nonCriticalEntities, $weight);

-    /** @var \Drupal\digital_signage_framework\Entity\ContentSetting $contentEntityTmp */
+    /** @var ContentSetting $contentEntityTmp */
     $contentEntityTmp = NULL;
     for ($i = 0; $i < $weightSum; $i++) {
       $contentEntity = $this->getNonCriticalEntity($weightMap, $weightSum);
@@ @@
   /**
    * Sort by priority function for entities.
    *
-   * @param \Drupal\digital_signage_framework\Entity\ContentSetting $contentSetting
-   * @param \Drupal\digital_signage_framework\Entity\ContentSetting $otherContentSetting
+   * @param ContentSetting $contentSetting
+   * @param ContentSetting $otherContentSetting
    *
    * @return int
    */
@@ @@
    * @param $weightMap
    * @param $weightSum
    *
-   * @return \Drupal\digital_signage_framework\Entity\ContentSetting
+   * @return ContentSetting
    */
   private function getNonCriticalEntity($weightMap, $weightSum): ContentSetting {
     /** @noinspection RandomApiMigrationInspection */
@@ @@
   /**
    * Returns a weighted array for entities.
    *
-   * @param \Drupal\digital_signage_framework\Entity\ContentSetting[] $nonCriticalEntities
-   * @param \Drupal\digital_signage_framework\WeightInterface $weight
+   * @param ContentSetting[] $nonCriticalEntities
+   * @param WeightInterface $weight
    *
    * @return array
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/digital_signage_framework/src/Plugin/Action/Base.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/digital_signage_framework/src/PlatformPluginManager.php:17

    ---------- begin diff ----------
@@ @@
 class PlatformPluginManager extends DefaultPluginManager {

   /**
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, LoggerInterface $logger) {
     $this->logger = $logger;
@@ @@
   }

   /**
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
+   * @param DeviceInterface $device
    * @param bool $debug
    * @param bool $reload_assets
    * @param bool $reload_content
    */
   public function pushSchedule($device, $debug = FALSE, $reload_assets = FALSE, $reload_content = FALSE) {
-    /** @var \Drupal\digital_signage_framework\PlatformInterface $plugin */
+    /** @var PlatformInterface $plugin */
     $plugin = $this->createInstance($device->bundle());
     $plugin->pushSchedule($device, $debug, $reload_assets, $reload_content);
   }

   /**
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
+   * @param DeviceInterface $device
    * @param bool $debug
    * @param bool $reload_schedule
    * @param bool $reload_assets
@@ @@
    * @param bool $reload_content
    */
   public function pushConfiguration(DeviceInterface $device, bool $debug, bool $reload_schedule, bool $reload_assets, bool $reload_content) {
-    /** @var \Drupal\digital_signage_framework\PlatformInterface $plugin */
+    /** @var PlatformInterface $plugin */
     $plugin = $this->createInstance($device->bundle());
     $plugin->pushConfiguration($device, $debug, $reload_schedule, $reload_assets, $reload_content);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/digital_signage_framework/src/PlatformPluginBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digital_signage_framework;

+use Drupal\Core\TempStore\SharedTempStore;
+use Drupal\digital_signage_framework\Entity\Device;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   protected const PREFIX_PLATFORM_LAST_SYNC = 'digital_signage_platform.last_sync.device.';

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;

   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

   /**
-   * @var \Drupal\digital_signage_framework\Renderer
+   * @var Renderer
    */
   protected $renderer;

   /**
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

   /**
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

   /**
-   * @var \Drupal\Core\State\State
+   * @var State
    */
   protected $state;

   /**
-   * @var \Drupal\Core\Http\ClientFactory
+   * @var ClientFactory
    */
   protected $clientFactory;

   /**
-   * @var \Drupal\Core\TempStore\SharedTempStore
+   * @var SharedTempStore
    */
   protected $sharedTempStore;

@@ @@
    * {@inheritdoc}
    */
   final public function syncDevices() {
-    /** @var \Drupal\digital_signage_framework\Entity\Device[] $existingDevices */
+    /** @var Device[] $existingDevices */
     $existingDevices = $this->entityTypeManager->getStorage('digital_signage_device')->loadByProperties([
       'bundle' => $this->getPluginId(),
     ]);
@@ @@
    * Compares all field values and if at least one got changed, saves the
    * updated entity.
    *
-   * @param \Drupal\digital_signage_framework\Entity\Device $existingDevice
-   * @param \Drupal\digital_signage_framework\Entity\Device $platformDevice
+   * @param Device $existingDevice
+   * @param Device $platformDevice
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   private function update($existingDevice, $platformDevice) {
     $field_names = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/digital_signage_framework/src/PlatformInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digital_signage_framework;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\digital_signage_framework\Entity\Device;
 use Drupal\digital_signage_framework\DeviceInterface;

 /**
@@ @@
   /**
    * Syncs devices of this platform.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function syncDevices();

@@ @@
   /**
    * Receive a list of all devices from the platform.
    *
-   * @return \Drupal\digital_signage_framework\Entity\Device[]
+   * @return Device[]
    */
   public function getPlatformDevices(): array;

   /**
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
+   * @param DeviceInterface $device
    * @param bool $debug
    * @param bool $reload_assets
    * @param bool $reload_content
@@ @@
   public function pushSchedule(DeviceInterface $device, bool $debug, bool $reload_assets, bool $reload_content);

   /**
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
+   * @param DeviceInterface $device
    * @param bool $debug
    * @param bool $reload_schedule
    * @param bool $reload_assets
@@ @@
   public function pushConfiguration(DeviceInterface $device, bool $debug, bool $reload_schedule, bool $reload_assets, bool $reload_content);

   /**
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
+   * @param DeviceInterface $device
    * @param string $entity_type
    * @param int $entity_id
    */
@@ @@
   public function setEmergencyMode(DeviceInterface $device, string $entity_type, int $entity_id);

   /**
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
+   * @param DeviceInterface $device
    */
   public function disableEmergencyMode(DeviceInterface $device);

   /**
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
+   * @param DeviceInterface $device
    */
   public function debugDevice(DeviceInterface $device);

   /**
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
+   * @param DeviceInterface $device
    *
    * @return array
    */
@@ @@
   public function showDebugLog(DeviceInterface $device);

   /**
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
+   * @param DeviceInterface $device
    *
    * @return array
    */
@@ @@
   public function showErrorLog(DeviceInterface $device);

   /**
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
+   * @param DeviceInterface $device
    *
    * @return array
    */
@@ @@
   public function showSlideReport(DeviceInterface $device);

   /**
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
+   * @param DeviceInterface $device
    * @param bool $refresh
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


15) modules/contrib/digital_signage_framework/src/Form/SyncDevices.php:13

    ---------- begin diff ----------
@@ @@
 class SyncDevices extends ConfirmFormBase {

   /**
-   * @var \Drupal\digital_signage_framework\PlatformPluginManager
+   * @var PlatformPluginManager
    */
   protected $pluginManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/digital_signage_framework/src/Form/EmergencyMode.php:14

    ---------- begin diff ----------
@@ @@
 class EmergencyMode extends ActionBase {

   /**
-   * @var \Drupal\digital_signage_framework\Emergency
+   * @var Emergency
    */
   protected $emergency;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/digital_signage_framework/src/Form/Device.php:19

    ---------- begin diff ----------
@@ @@
     $link = $entity->toLink($this->t('View'))->toRenderable();

     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];

     if ($result == SAVED_NEW) {
       $this->messenger()->addStatus($this->t('New device %label has been created.', $message_arguments));
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/digital_signage_framework/src/Form/ActionBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digital_signage_framework\Form;

+use Drupal\digital_signage_framework\DeviceInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The temp store factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\digital_signage_framework\ScheduleManager
+   * @var ScheduleManager
    */
   protected $scheduleManager;

   /**
-   * @var \Drupal\digital_signage_framework\DeviceInterface[]
+   * @var DeviceInterface[]
    */
   protected $devices;

   /**
-   * @var \Drupal\digital_signage_framework\Query
+   * @var Query
    */
   protected $queryService;

@@ @@
   /**
    * Constructs a new EmergencyMode confirm form.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\digital_signage_framework\ScheduleManager $schedule_manager
-   * @param \Drupal\digital_signage_framework\Query $query_service
+   * @param PrivateTempStoreFactory $temp_store_factory
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param ScheduleManager $schedule_manager
+   * @param Query $query_service
    */
   public function __construct(PrivateTempStoreFactory $temp_store_factory, EntityTypeManagerInterface $entity_type_manager, ScheduleManager $schedule_manager, Query $query_service) {
     $this->tempStoreFactory = $temp_store_factory;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/digital_signage_framework/src/EventSubscriber/Blocks.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digital_signage_framework\EventSubscriber;

+use Drupal\block\BlockViewBuilder;
+use Drupal\Core\Theme\ActiveTheme;
+use Drupal\block\Entity\Block;
 use Drupal\block\BlockRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ThemeHandlerInterface;
@@ @@
   use StringTranslationTrait;

   /**
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The block repository.
    *
-   * @var \Drupal\block\BlockRepositoryInterface
+   * @var BlockRepositoryInterface
    */
   protected $blockRepository;

   /**
-   * @var \Drupal\block\BlockViewBuilder
+   * @var BlockViewBuilder
    */
   protected $blockViewBuilder;

   /**
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;

   /**
-   * @var \Drupal\Core\Theme\ActiveTheme
+   * @var ActiveTheme
    */
   protected $currentTheme;

   /**
-   * @var \Drupal\Core\Theme\ActiveTheme
+   * @var ActiveTheme
    */
   protected $defaultTheme;

@@ @@
   /**
    * Blocks constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
-   * @param \Drupal\Core\Render\RendererInterface $renderer
-   * @param \Drupal\block\BlockRepositoryInterface $blockRepository
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $themeManager
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $themeHandler
-   * @param \Drupal\Core\Theme\ThemeInitializationInterface $themeInitialization
+   * @param EntityTypeManagerInterface $entityTypeManager
+   * @param RendererInterface $renderer
+   * @param BlockRepositoryInterface $blockRepository
+   * @param ThemeManagerInterface $themeManager
+   * @param ThemeHandlerInterface $themeHandler
+   * @param ThemeInitializationInterface $themeInitialization
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, RendererInterface $renderer, BlockRepositoryInterface $blockRepository, ThemeManagerInterface $themeManager, ThemeHandlerInterface $themeHandler, ThemeInitializationInterface $themeInitialization) {
     $this->renderer = $renderer;
@@ @@
     $cacheable_metadata_list = [];
     foreach ($this->blockRepository->getVisibleBlocksPerRegion($cacheable_metadata_list) as $theme_region => $blocks) {
       if (!empty($blocks) && $theme_region === $region) {
-        /** @var \Drupal\block\Entity\Block $block */
+        /** @var Block $block */
         foreach ($blocks as $block) {
           $build = $this->blockViewBuilder->view($block);
           $content[] = [
@@ @@
   }

   /**
-   * @param \Drupal\digital_signage_framework\Event\Underlays $event
+   * @param Underlays $event
    */
   public function onUnderlays(Underlays $event): void {
     foreach ($this->renderBlocks('digital_signage_underlays') as $renderBlock) {
@@ @@
   }

   /**
-   * @param \Drupal\digital_signage_framework\Event\Overlays $event
+   * @param Overlays $event
    */
   public function onOverlays(Overlays $event): void {
     foreach ($this->renderBlocks('digital_signage_overlays') as $renderBlock) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


20) modules/contrib/digital_signage_framework/src/Event/Underlays.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digital_signage_framework\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\digital_signage_framework\DeviceInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Class Underlays
@@ @@
  *
  * @package Drupal\digital_signage_framework\Event
  */
-class Underlays extends \Symfony\Contracts\EventDispatcher\Event {
+class Underlays extends Event {

   /**
    * @var array
@@ @@
   protected $libraries = [];

   /**
-   * @var \Drupal\digital_signage_framework\DeviceInterface
+   * @var DeviceInterface
    */
   protected $device;

@@ @@
   /**
    * Rendered constructor.
    *
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
+   * @param DeviceInterface $device
    */
   public function __construct(DeviceInterface $device) {
     $this->device = $device;
@@ @@
   }

   /**
-   * @return \Drupal\digital_signage_framework\DeviceInterface
+   * @return DeviceInterface
    */
   public function getDevice(): DeviceInterface {
     return $this->device;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/digital_signage_framework/src/Event/Rendered.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digital_signage_framework\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\digital_signage_framework\DeviceInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\HttpFoundation\Response;

 /**
@@ @@
  *
  * @package Drupal\digital_signage_framework\Event
  */
-class Rendered extends \Symfony\Contracts\EventDispatcher\Event {
+class Rendered extends Event {

   /**
-   * @var \Symfony\Component\HttpFoundation\Response
+   * @var Response
    */
   protected $response;

   /**
-   * @var \Drupal\digital_signage_framework\DeviceInterface
+   * @var DeviceInterface
    */
   protected $device;

@@ @@
   /**
    * Rendered constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\Response $response
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
+   * @param Response $response
+   * @param DeviceInterface $device
    */
   public function __construct(Response $response, DeviceInterface $device) {
     $this->response = $response;
@@ @@
   }

   /**
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    */
   public function getResponse(): Response {
     return $this->response;
@@ @@
   }

   /**
-   * @return \Drupal\digital_signage_framework\DeviceInterface
+   * @return DeviceInterface
    */
   public function getDevice(): DeviceInterface {
     return $this->device;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/digital_signage_framework/src/Event/Overlays.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digital_signage_framework\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\digital_signage_framework\DeviceInterface;

@@ @@
  *
  * @package Drupal\digital_signage_framework\Event
  */
-class Overlays extends \Symfony\Contracts\EventDispatcher\Event {
+class Overlays extends Event {

   /**
    * @var array
@@ @@
   protected $libraries = [];

   /**
-   * @var \Drupal\digital_signage_framework\DeviceInterface
+   * @var DeviceInterface
    */
   protected $device;

@@ @@
   /**
    * Rendered constructor.
    *
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
+   * @param DeviceInterface $device
    */
   public function __construct(DeviceInterface $device) {
     $this->device = $device;
@@ @@
   }

   /**
-   * @return \Drupal\digital_signage_framework\DeviceInterface
+   * @return DeviceInterface
    */
   public function getDevice(): DeviceInterface {
     return $this->device;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/digital_signage_framework/src/Event/Libraries.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digital_signage_framework\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\digital_signage_framework\DeviceInterface;

 /**
@@ @@
  *
  * @package Drupal\digital_signage_framework\Event
  */
-class Libraries extends \Symfony\Contracts\EventDispatcher\Event {
+class Libraries extends Event {

   /**
    * @var array
@@ @@
   protected $settings = [];

   /**
-   * @var \Drupal\digital_signage_framework\DeviceInterface
+   * @var DeviceInterface
    */
   protected $device;

@@ @@
   /**
    * Libraries constructor.
    *
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
+   * @param DeviceInterface $device
    */
   public function __construct(DeviceInterface $device) {
     $this->device = $device;
@@ @@
   }

   /**
-   * @return \Drupal\digital_signage_framework\DeviceInterface
+   * @return DeviceInterface
    */
   public function getDevice(): DeviceInterface {
     return $this->device;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/digital_signage_framework/src/EntityUpdate.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digital_signage_framework;

+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\Entity\EntityViewMode;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
 class EntityUpdate {

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity definition update manager.
    *
-   * @var \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface
+   * @var EntityDefinitionUpdateManagerInterface
    */
   protected $updateManager;

   /**
-   * @var \Drupal\digital_signage_framework\EntityFieldUpdate
+   * @var EntityFieldUpdate
    */
   protected $entityFieldUpdate;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

   /**
-   * @var \Drupal\digital_signage_framework\EntityTypes
+   * @var EntityTypes
    */
   protected $entityTypesService;

@@ @@
   /**
    * Constructs an Entity update service.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
+   * @param EntityTypeManager $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface $update_manager
+   * @param EntityDefinitionUpdateManagerInterface $update_manager
    *   The entity definition update manager.
-   * @param \Drupal\digital_signage_framework\EntityFieldUpdate $entity_field_update
+   * @param EntityFieldUpdate $entity_field_update
    *   The entity field update manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity bundle manager.
-   * @param \Drupal\digital_signage_framework\EntityTypes $entity_types_service
+   * @param EntityTypes $entity_types_service
    *   The entity type service.
    * @param ModuleHandlerInterface $module_handler
    *   The Drupal container module handler.
@@ @@
   public function addExtraFields(): array {
     $extra = [];
     $bundles = $this->entityTypeBundleInfo->getAllBundleInfo();
-    /** @var \Drupal\Core\Entity\EntityTypeInterface $definition */
+    /** @var EntityTypeInterface $definition */
     foreach ($this->entityTypeManager->getDefinitions() as $definition) {
       if (($definition instanceof ContentEntityTypeInterface) &&
         isset($bundles[$definition->id()]) &&
@@ @@
   }

   /**
-   * @return \Drupal\Core\Field\BaseFieldDefinition
+   * @return BaseFieldDefinition
    */
   public function fieldDefinition(): BaseFieldDefinition {
     return BaseFieldDefinition::create('entity_reference')
@@ @@
   /**
    * Method description.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function updateExistingEntityTypes() {
     $field_definition = $this->fieldDefinition();
-    /** @var \Drupal\Core\Entity\EntityTypeInterface $definition */
+    /** @var EntityTypeInterface $definition */
     foreach ($this->entityTypeManager->getDefinitions() as $definition) {
       if ($definition instanceof ContentEntityTypeInterface) {
         if ($definition->id() === 'digital_signage_content_setting') {
@@ @@
    * @param $machine_name
    *
    * @return bool
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function existsDisplayMode($entity_type_id, $machine_name): bool {
     return (bool) $this->entityTypeManager
@@ @@
   }

   /**
-   * @param \Drupal\Core\Entity\ContentEntityTypeInterface $entity_type
+   * @param ContentEntityTypeInterface $entity_type
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function ensureDisplayModes(ContentEntityTypeInterface $entity_type) {
     foreach (['landscape', 'portrait'] as $type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


25) modules/contrib/digital_signage_framework/src/EntityTypes.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digital_signage_framework;

+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;

 class EntityTypes {
@@ @@


   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Renderer constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
     $this->entityTypeManager = $entity_type_manager;
@@ @@
   }

   /**
-   * @return \Drupal\Core\Entity\EntityTypeInterface[]
+   * @return EntityTypeInterface[]
    */
   public function all(): array {
     return $this->entityTypeManager->getDefinitions();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


26) modules/contrib/digital_signage_framework/src/EntityFieldUpdate.php:11

    ---------- begin diff ----------
@@ @@
 class EntityFieldUpdate {

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity definition update manager.
    *
-   * @var \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface
+   * @var EntityDefinitionUpdateManagerInterface
    */
   protected $updateManager;

@@ @@
   /**
    * Constructs an Entity update service.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
+   * @param EntityTypeManager $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface $update_manager
+   * @param EntityDefinitionUpdateManagerInterface $update_manager
    *   The entity definition update manager.
    */
   public function __construct(EntityTypeManager $entity_type_manager, EntityDefinitionUpdateManagerInterface $update_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


27) modules/contrib/digital_signage_framework/src/Entity/Schedule.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digital_signage_framework\Entity;

+use Drupal\digital_signage_framework\PlatformPluginManager;
 use Drupal;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
       ->setRequired(TRUE);

     // TODO: Is there a way to inject this service as a dependency?
-    /** @var \Drupal\digital_signage_framework\PlatformPluginManager $platformManager */
+    /** @var PlatformPluginManager $platformManager */
     $platformManager = Drupal::service('plugin.manager.digital_signage_platform');
     foreach ($platformManager->getAllPlugins() as $plugin) {
       $plugin->scheduleBaseFields($fields);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/digital_signage_framework/src/Entity/Device.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digital_signage_framework\Entity;

+use Drupal\taxonomy\TermInterface;
 use Drupal;
 use Drupal\Core\Asset\AssetResolverInterface;
 use Drupal\Core\Asset\AttachedAssets;
@@ @@
         if ($js_asset['type'] === 'file' && $name !== 'core/misc/drupalSettingsLoader.js') {
           $scriptIndex++;
           $scripts[] = [
-            'uri' => file_create_url($js_asset['data']),
+            'uri' => \Drupal::service('file_url_generator')->generateAbsoluteString($js_asset['data']),
             'uid' => 'ajs-' . $scriptIndex . '.js',
           ];
         }
@@ @@
    */
   public function getSegmentIds(): array {
     $ids = [];
-    /** @var \Drupal\taxonomy\TermInterface $entity */
+    /** @var TermInterface $entity */
     foreach ($this->get('segments')->referencedEntities() as $entity) {
       $ids[] = $entity->id();
     }
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/digital_signage_framework/src/Entity/ContentSetting.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digital_signage_framework\Entity;

+use Drupal\digital_signage_framework\DeviceInterface;
+use Drupal\taxonomy\TermInterface;
 use Drupal;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
 class ContentSetting extends ContentEntityBase implements ContentSettingInterface {

   /**
-   * @param \Drupal\Core\Entity\ContentEntityBase $entity
+   * @param ContentEntityBase $entity
    *
    * @return string
    */
@@ @@
    */
   public function getDeviceIds(): array {
     $ids = [];
-    /** @var \Drupal\digital_signage_framework\DeviceInterface $entity */
+    /** @var DeviceInterface $entity */
     foreach ($this->get('devices')->referencedEntities() as $entity) {
       $ids[] = $entity->id();
     }
@@ @@
    */
   public function getSegmentIds(): array {
     $ids = [];
-    /** @var \Drupal\taxonomy\TermInterface $entity */
+    /** @var TermInterface $entity */
     foreach ($this->get('segments')->referencedEntities() as $entity) {
       $ids[] = $entity->id();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/digital_signage_framework/src/Emergency.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digital_signage_framework;

+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\digital_signage_framework\SequenceItem;
@@ @@
 class Emergency {

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Renderer constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
     $this->entityTypeManager = $entity_type_manager;
@@ @@
   }

   /**
-   * @return \Drupal\Core\Entity\ContentEntityInterface[]
+   * @return ContentEntityInterface[]
    */
   protected function queryAll(): array {
     $entities = [];
@@ @@
         ->getQuery()
         ->condition('status', 1)
         ->condition('emergencymode', 1);
-      /** @var \Drupal\digital_signage_framework\ContentSettingInterface $item */
+      /** @var ContentSettingInterface $item */
       foreach ($this->entityTypeManager->getStorage('digital_signage_content_setting')
                  ->loadMultiple($query->execute()) as $item) {
-        /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+        /** @var ContentEntityInterface $entity */
         if (($entity = $this->entityTypeManager->getStorage($item->getReverseEntityType())
             ->load($item->getReverseEntityId())) &&
           (!$entity->hasField('status') || $entity->get('status')->value)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


31) modules/contrib/digital_signage_framework/src/DeviceListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digital_signage_framework;

+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Datetime\DateFormatterInterface;
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;

@@ @@
   /**
    * Constructs a new DigitalSignageDeviceListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
@@ @@

   /**
    * {@inheritdoc}
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function buildRow(EntityInterface $entity): array {
     /* @var $entity \Drupal\digital_signage_framework\DeviceInterface */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/digital_signage_framework/src/DeviceInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digital_signage_framework;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityChangedInterface;

@@ @@
   /**
    * Get the corresponding plugin for the device.
    *
-   * @return \Drupal\digital_signage_framework\PlatformInterface
+   * @return PlatformInterface
    */
   public function getPlugin(): PlatformInterface;

@@ @@
    *
    * @return bool
    *   TRUE if a new segment got added to the device entity.
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function addSegment($segment): bool;

@@ @@
    * @param bool $stored
    *   Whether to receive the stored schedule or a temporary one.
    *
-   * @return \Drupal\digital_signage_framework\ScheduleInterface|null
+   * @return ScheduleInterface|null
    */
   public function getSchedule($stored = TRUE);

@@ @@
   /**
    * Sets the active schedule for this device.
    *
-   * @param \Drupal\digital_signage_framework\ScheduleInterface $schedule
+   * @param ScheduleInterface $schedule
    *
    * @return \Drupal\digital_signage_framework\DeviceInterface
    *   The called device entity.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


33) modules/contrib/digital_signage_framework/src/DefaultWeight.php:6

    ---------- begin diff ----------
@@ @@
 class DefaultWeight implements WeightInterface {

   /**
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $settings;

@@ @@
   /**
    * DefaultDuration constructor.
    *
-   * @param \Drupal\Core\Config\ImmutableConfig $settings
+   * @param ImmutableConfig $settings
    */
   public function __construct(ImmutableConfig $settings) {
     $this->settings = $settings;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


34) modules/contrib/digital_signage_framework/src/DefaultDuration.php:6

    ---------- begin diff ----------
@@ @@
 class DefaultDuration implements DurationInterface {

   /**
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $settings;

@@ @@
   /**
    * DefaultDuration constructor.
    *
-   * @param \Drupal\Core\Config\ImmutableConfig $settings
+   * @param ImmutableConfig $settings
    */
   public function __construct(ImmutableConfig $settings) {
     $this->settings = $settings;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


35) modules/contrib/digital_signage_framework/src/Controller/BlockApi.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digital_signage_framework\Controller;

+use Drupal\block\BlockViewBuilder;
 use Drupal\block\Entity\Block;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
 class BlockApi implements ContainerInjectionInterface {

   /**
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

   /**
-   * @var \Drupal\block\BlockViewBuilder
+   * @var BlockViewBuilder
    */
   protected $blockViewBuilder;

@@ @@
   }

   /**
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    */
   public function request($id): Response {
     $block = Block::load($id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


36) modules/contrib/digital_signage_framework/src/Controller/Api.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digital_signage_framework\Controller;

+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\digital_signage_framework\ScheduleInterface;
+use Drupal\digital_signage_framework\PlatformInterface;
+use Drupal\file\FileInterface;
+use Drupal\image\ImageStyleInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Component\Utility\Crypt;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
@@ @@
   use StringTranslationTrait;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

   /**
-   * @var \Drupal\Core\Asset\LibraryDiscoveryInterface
+   * @var LibraryDiscoveryInterface
    */
   protected $libraryDiscovery;

   /**
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

   /**
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

   /**
-   * @var \Drupal\digital_signage_framework\DeviceInterface
+   * @var DeviceInterface
    */
   protected $device;

   /**
-   * @var \Drupal\digital_signage_framework\ScheduleInterface
+   * @var ScheduleInterface
    */
   protected $schedule;

   /**
-   * @var \Drupal\digital_signage_framework\PlatformInterface
+   * @var PlatformInterface
    */
   protected $platform;

   /**
-   * @var \Drupal\digital_signage_framework\Renderer
+   * @var Renderer
    */
   protected $dsRenderer;

   /**
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

   /**
-   * @var \Drupal\Core\Http\ClientFactory
+   * @var ClientFactory
    */
   protected $clientFactory;

   /**
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

   /**
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

   /**
-   * @var \Drupal\digital_signage_framework\Emergency
+   * @var Emergency
    */
   protected $emergency;

   /**
-   * @var \Drupal\Core\Asset\AssetResolverInterface
+   * @var AssetResolverInterface
    */
   protected $assetResolver;

   /**
-   * @var \Drupal\Core\Asset\AssetCollectionRendererInterface
+   * @var AssetCollectionRendererInterface
    */
   protected $jsAssetCollectionRenderer;

   /**
-   * @var \Drupal\Core\Asset\AssetCollectionRendererInterface
+   * @var AssetCollectionRendererInterface
    */
   protected $cssAssetCollectionRenderer;

   /**
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Api constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
-   * @param \Drupal\Core\Asset\LibraryDiscoveryInterface $library_discovery
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
-   * @param \Drupal\digital_signage_framework\Renderer $ds_renderer
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
-   * @param \Drupal\Core\Http\ClientFactory $client_factory
-   * @param \Drupal\Core\Render\RendererInterface $renderer
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
-   * @param \Drupal\digital_signage_framework\Emergency $emergency
-   * @param \Drupal\Core\Asset\AssetResolverInterface $asset_resolver
-   * @param \Drupal\Core\Asset\AssetCollectionRendererInterface $js_asset_collection_renderer
-   * @param \Drupal\Core\Asset\AssetCollectionRendererInterface $css_asset_collection_renderer
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param ConfigFactoryInterface $config_factory
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param ModuleHandlerInterface $module_handler
+   * @param LibraryDiscoveryInterface $library_discovery
+   * @param RequestStack $request_stack
+   * @param Renderer $ds_renderer
+   * @param EventDispatcherInterface $event_dispatcher
+   * @param ClientFactory $client_factory
+   * @param RendererInterface $renderer
+   * @param AccountProxyInterface $current_user
+   * @param Emergency $emergency
+   * @param AssetResolverInterface $asset_resolver
+   * @param AssetCollectionRendererInterface $js_asset_collection_renderer
+   * @param AssetCollectionRendererInterface $css_asset_collection_renderer
+   * @param LanguageManagerInterface $language_manager
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler, LibraryDiscoveryInterface $library_discovery, RequestStack $request_stack, Renderer $ds_renderer, EventDispatcherInterface $event_dispatcher, ClientFactory $client_factory, RendererInterface $renderer, AccountProxyInterface $current_user, Emergency $emergency, AssetResolverInterface $asset_resolver, AssetCollectionRendererInterface $js_asset_collection_renderer, AssetCollectionRendererInterface $css_asset_collection_renderer, LanguageManagerInterface $language_manager) {
     $this->config = $config_factory->get('digital_signage_framework.settings');
@@ @@
   }

   /**
-   * @param \Drupal\digital_signage_framework\DeviceInterface $device
+   * @param DeviceInterface $device
    *
    * @return string
    */
@@ @@
   }

   /**
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    */
   public function access(): AccessResult {
     if (empty($this->device)) {
@@ @@
   }

   /**
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    */
   public function request(): Response {
     switch ($this->request->query->get('mode')) {
@@ @@
   }

   /**
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   public function screenshot(): AjaxResponse {
     if ($screenshot = $this->device->getPlugin()->getScreenshot($this->device, (bool) $this->request->query->get('refresh'))) {
@@ @@
   }

   /**
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   public function log(): AjaxResponse {
     if ($this->request->query->get('type', 'debug') === 'error') {
@@ @@
   }

   /**
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    */
   private function getSchedule(): JsonResponse {
     $underlays = new Underlays($this->device);
@@ @@
   }

   /**
-   * @return \Drupal\Core\Render\AttachmentsInterface
+   * @return AttachmentsInterface
    */
   private function load(): AttachmentsInterface {
     $output = [
@@ @@
    */
   private function getFileUri(): string {
     /** @var \Drupal\media\MediaInterface $media */
-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     if (($media = Media::load($this->request->query->get('entityId'))) && $file = File::load($media->getSource()
         ->getSourceFieldValue($media))) {
       $file_uri = $file->getFileUri();
       try {
-        /** @var \Drupal\image\ImageStyleInterface $image_style */
+        /** @var ImageStyleInterface $image_style */
         if (($media->bundle() === 'image') && $image_style = $this->entityTypeManager->getStorage('image_style')
             ->load('digital_signage_' . $this->device->getOrientation())) {
           $derivative_uri = $image_style->buildUri($file_uri);
@@ @@
         }
       }
     }
-    $cssFiles[] = drupal_get_path('module', 'digital_signage_framework') . '/css/digital-signage.css';
-    $cssFiles[] = drupal_get_path('module', 'digital_signage_framework') . '/css/overlays.css';
+    $cssFiles[] = \Drupal::service('extension.list.module')->getPath('digital_signage_framework') . '/css/digital-signage.css';
+    $cssFiles[] = \Drupal::service('extension.list.module')->getPath('digital_signage_framework') . '/css/overlays.css';
     foreach (explode(PHP_EOL, str_replace("\r", '', $this->config->get('css'))) as $file) {
       $cssFiles[] = $file;
     }
@@ @@
   }

   /**
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    */
   private function loadCSS(): Response {
     $css = $this->prepareCSS();
@@ @@
   }

   /**
-   * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
+   * @return BinaryFileResponse
    */
   private function loadContent(): BinaryFileResponse {
     $content_path = Url::fromUserInput('/', [
@@ @@
   }

   /**
-   * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
+   * @return BinaryFileResponse
    */
   private function loadBinary(): BinaryFileResponse {
     $file_uri = $this->getFileUri();
@@ @@
   /**
    * @param array|string $output
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   private function popupContent($output): AjaxResponse {
     $underlays = new Underlays($this->device);
@@ @@
   }

   /**
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   private function preview(): AjaxResponse {
     return $this->popupContent($this->buildEntityView());
@@ @@
   }

   /**
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   private function previewBinary(): AjaxResponse {
-    $file_uri = file_create_url($this->getFileUri());
+    $file_uri = \Drupal::service('file_url_generator')->generateAbsoluteString($this->getFileUri());
     switch ($this->request->query->get('type')) {
       case 'image':
         $output = '<img src="' . $file_uri . '" alt="" />';
@@ @@
   }

   /**
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   private function diagram(): AjaxResponse {
     $items = $this->schedule->getItems();
@@ @@
    */
   private function getEntityLabel(string $type, int $id): string {
     try {
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       $entity = $this->entityTypeManager->getStorage($type)->load($id);
       if (($entity !== NULL) && $label = $entity->label()) {
         return $label;
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


37) modules/contrib/digital_signage_framework/src/ContentEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digital_signage_framework;

+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManager;
@@ @@
 class ContentEvent {

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Constructs an Entity update service.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
+   * @param EntityTypeManager $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(EntityTypeManager $entity_type_manager, MessengerInterface $messenger) {
@@ @@
   }

   /**
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
-   * @return \Drupal\digital_signage_framework\ContentSettingInterface|false|null
+   * @return ContentSettingInterface|false|null
    */
   private function loadSettings(EntityInterface $entity) {
     if (!($entity instanceof ContentEntityInterface)) {
@@ @@
       // Might be missing in some circumstances.
       return FALSE;
     }
-    /** @var \Drupal\digital_signage_framework\ContentSettingInterface $settings */
+    /** @var ContentSettingInterface $settings */
     $settings = ContentSetting::load($settingsTarget[0]['target_id']);
     return $settings;
   }

   /**
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function presave(EntityInterface $entity) {
     $settings = $this->loadSettings($entity);
@@ @@
   }

   /**
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function update(EntityInterface $entity) {
     $settings = $this->loadSettings($entity);
@@ @@

     // Retrieve and update all devices.
     foreach ($query->execute() as $id) {
-      /** @var \Drupal\digital_signage_framework\DeviceInterface $device */
+      /** @var DeviceInterface $device */
       $device = Device::load($id);
       $device->scheduleUpdate();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


38) modules/contrib/digital_signage_framework/src/Commands/ScheduleCommands.php:10

    ---------- begin diff ----------
@@ @@
 class ScheduleCommands extends DrushCommands {

   /**
-   * @var \Drupal\digital_signage_framework\ScheduleManager
+   * @var ScheduleManager
    */
   protected $scheduleManager;

@@ @@
   /**
    * DigitalSignageScheduleCommands constructor.
    *
-   * @param \Drupal\digital_signage_framework\ScheduleManager $schedule_manager
+   * @param ScheduleManager $schedule_manager
    */
   public function __construct(ScheduleManager $schedule_manager) {
     $this->scheduleManager = $schedule_manager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


39) modules/contrib/digital_signage_framework/src/Commands/DeviceCommands.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digital_signage_framework\Commands;

+use Drupal\digital_signage_framework\DeviceInterface;
 use Consolidation\OutputFormatters\StructuredData\RowsOfFields;
 use Drupal\digital_signage_framework\Emergency;
 use Drupal\digital_signage_framework\Entity\Device;
@@ @@
 class DeviceCommands extends DrushCommands {

   /**
-   * @var \Drupal\digital_signage_framework\PlatformPluginManager
+   * @var PlatformPluginManager
    */
   protected $pluginManager;

   /**
-   * @var \Drupal\digital_signage_framework\Emergency
+   * @var Emergency
    */
   protected $emergency;

@@ @@
    *   slides: No of slides
    * @default-fields id,label,platform,extid,status,slides
    * @aliases dsdl
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields|void
+   * @return RowsOfFields|void
    */
   public function listDevices(array $options = ['all' => FALSE, 'platform' => NULL, 'format' => 'table']) {
     $devices = [];
-    /** @var \Drupal\digital_signage_framework\DeviceInterface $device */
+    /** @var DeviceInterface $device */
     foreach (Device::loadMultiple() as $device) {
       if ($options['all'] || $device->isEnabled()) {
         if ($options['platform'] === NULL || $device->bundle() === $options['platform']) {
@@ @@
    *   message: Message
    * @default-fields time,message
    * @aliases dsdld
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields|void
+   * @return RowsOfFields|void
    */
   public function showDebugLogs($deviceId, array $options = ['record' => NULL, 'format' => 'table']) {
     if ($device = $this->loadDevice($deviceId)) {
@@ @@
    *   message: Message
    * @default-fields time,message
    * @aliases dsdle
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields|void
+   * @return RowsOfFields|void
    */
   public function showErrorLogs($deviceId, array $options = ['record' => NULL, 'format' => 'table']) {
     if ($device = $this->loadDevice($deviceId)) {
@@ @@
    *   message: Slide ID
    * @default-fields time,message
    * @aliases dsdrs
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields|void
+   * @return RowsOfFields|void
    */
   public function showSlideChangeReport($deviceId, array $options = ['format' => 'table']) {
     if ($device = $this->loadDevice($deviceId)) {
@@ @@
    * @param int $deviceId
    * @param string|null $bundle
    *
-   * @return \Drupal\digital_signage_framework\DeviceInterface
-   *
+   * @return DeviceInterface
    */
   protected function loadDevice($deviceId, $bundle = NULL) {
-    /** @var \Drupal\digital_signage_framework\DeviceInterface $device */
+    /** @var DeviceInterface $device */
     $device = Device::load($deviceId);
     if (empty($device)) {
       throw new InvalidArgumentException('Incorrect device ID');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/digital_signage_framework/src/Annotation/DigitalSignageScheduleGenerator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digital_signage_framework\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


41) modules/contrib/digital_signage_framework/src/Annotation/DigitalSignagePlatform.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digital_signage_framework\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


42) modules/contrib/digital_signage_framework/modules/example/src/Plugin/DigitalSignagePlatform/Example.php:52

    ---------- begin diff ----------
@@ @@
           'height' => $device['orientation']['height'],
         ];
       }
-      /** @var \Drupal\digital_signage_framework\DeviceInterface $deviceEntity */
+      /** @var DeviceInterface $deviceEntity */
       $deviceEntity = Device::create($values);
       $deviceEntities[] = $deviceEntity;
       if (!empty($device['segments'])) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


43) modules/contrib/digital_signage_framework/modules/custom_platform/src/Plugin/DigitalSignagePlatform/Custom.php:52

    ---------- begin diff ----------
@@ @@
           'height' => $device['orientation']['height'],
         ];
       }
-      /** @var \Drupal\digital_signage_framework\DeviceInterface $deviceEntity */
+      /** @var DeviceInterface $deviceEntity */
       $deviceEntity = Device::create($values);
       $deviceEntities[] = $deviceEntity;
       if (!empty($device['segments'])) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


44) modules/contrib/digital_signage_framework/modules/computed_content/src/RenderInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Render the entity.
    *
-   * @param \Drupal\digital_signage_computed_content\ComputedContentInterface $entity
+   * @param ComputedContentInterface $entity
    *   The entity which should be rendered.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


45) modules/contrib/digital_signage_framework/modules/computed_content/src/Plugin/views/display/DigitalSignage.php:28

    ---------- begin diff ----------
@@ @@
 class DigitalSignage extends DisplayPluginBase {

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
@@ @@
   }

   /**
-   * @return \Drupal\digital_signage_computed_content\ComputedContentInterface
+   * @return ComputedContentInterface
    */
   protected function getComputedContentEntity(): ComputedContentInterface {
     try {
@@ @@
     catch (PluginNotFoundException $e) {
       // TODO: Log this exception.
     }
-    /** @var \Drupal\digital_signage_computed_content\ComputedContentInterface $content */
+    /** @var ComputedContentInterface $content */
     if (empty($entities)) {
       $settings = ContentSetting::create(['status' => 1]);
       $this->saveEntity($settings);
@@ @@
   }

   /**
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
    * @return bool
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


46) modules/contrib/digital_signage_framework/modules/computed_content/src/Form/ComputedContentForm.php:19

    ---------- begin diff ----------
@@ @@
     $link = $entity->toLink($this->t('View'))->toRenderable();

     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];

     if ($result === SAVED_NEW) {
       $this->messenger()->addStatus($this->t('New computed content %label has been created.', $message_arguments));
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


47) modules/contrib/digital_signage_framework/modules/computed_content/src/ComputedContentListBuilder.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;

@@ @@
   /**
    * Constructs a new ComputedContentListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


48) modules/contrib/digital_signage_framework/modules/computed_content/digital_signage_computed_content.module:0

    ---------- begin diff ----------
@@ @@
-<?php /** @noinspection PhpUnused */
+<?php use Drupal\digital_signage_computed_content\RenderInterface;
+use Drupal\node\NodeInterface;
+/** @noinspection PhpUnused */

 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
  * Implements hook_ENTITY_TYPE_view().
  *
  * @param array $build
- * @param \Drupal\Core\Entity\EntityInterface $entity
- * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+ * @param EntityInterface $entity
+ * @param EntityViewDisplayInterface $display
  */
 function digital_signage_computed_content_digsig_computed_content_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
   if ($entity instanceof ComputedContentInterface && $display->getComponent('computed_content')) {
-    /** @var \Drupal\digital_signage_computed_content\RenderInterface $service */
+    /** @var RenderInterface $service */
     $service = Drupal::service('digital_signage_computed_content.render.' . $entity->bundle());
     $build['computed_content'] = $service->getMarkup($entity);
   }
@@ @@
     $variables['content'][$key] = $variables['elements'][$key];
   }

-  /** @var \Drupal\node\NodeInterface $node */
+  /** @var NodeInterface $node */
   $entity = $variables['elements']['#digsig_computed_content'];
   $variables['attributes']['class'][] = 'computed-content';
   $variables['attributes']['class'][] = $entity->bundle();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


49) modules/contrib/digital_signage_framework/digital_signage_framework.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\digital_signage_framework\EntityUpdate;
+use Drupal\digital_signage_framework\ContentSettingInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\Core\Url;
 use Drupal\digital_signage_framework\Entity\Schedule;
@@ @@
 /**
  * Implements hook_entity_base_field_info().
  *
- * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+ * @param EntityTypeInterface $entity_type
  *
  * @return array|void
  */
 function digital_signage_framework_entity_base_field_info(EntityTypeInterface $entity_type) {
   if (!in_array($entity_type->id(), Drupal::service('digital_signage_content_setting.entity_types')->allDisabledIds(), TRUE)) {
-    /** @var \Drupal\digital_signage_framework\EntityUpdate $service */
+    /** @var EntityUpdate $service */
     $service = Drupal::service('digital_signage_content_setting.entity_update');
     if ($entity_type instanceof ContentEntityTypeInterface) {
       $service->ensureDisplayModes($entity_type);
@@ @@
  * Implements hook_entity_extra_field_info().
  */
 function digital_signage_framework_entity_extra_field_info() {
-  /** @var \Drupal\digital_signage_framework\EntityUpdate $service */
+  /** @var EntityUpdate $service */
   $service = Drupal::service('digital_signage_content_setting.entity_update');
   return $service->addExtraFields();
 }
@@ @@
     $labelClass = '';
   }
   if ($labelField) {
-    /** @var \Drupal\digital_signage_framework\ContentSettingInterface $settings */
+    /** @var ContentSettingInterface $settings */
     $settings = ContentSetting::load($entity->get('digital_signage')->getValue()[0]['target_id']);
     $build[$labelField] = [
       '#markup' => $settings->getLabel(),
@@ @@
 /**
  * Implements hook_entity_presave().
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  */
 function digital_signage_framework_entity_presave(EntityInterface $entity) {
   Drupal::service('digital_signage_content_setting.events')->presave($entity);
@@ @@
 /**
  * Implements hook_entity_insert().
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  */
 function digital_signage_framework_entity_insert(EntityInterface $entity) {
   Drupal::service('digital_signage_content_setting.events')->update($entity);
@@ @@
 /**
  * Implements hook_entity_update().
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  */
 function digital_signage_framework_entity_update(EntityInterface $entity) {
   Drupal::service('digital_signage_content_setting.events')->update($entity);
@@ @@
 /**
  * Implements hook_entity_delete().
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  */
 function digital_signage_framework_entity_delete(EntityInterface $entity) {
   Drupal::service('digital_signage_content_setting.events')->update($entity);
@@ @@
  * Implements hook_form_alter().
  *
  * @param array $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function digital_signage_framework_form_alter(array &$form, FormStateInterface $form_state) {
   if (isset($form['digital_signage'], $form['advanced'])) {
     $form['digital_signage']['widget'][0]['#group'] = 'advanced';
     $form['digital_signage']['widget'][0]['#open'] = FALSE;
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $form_state->getBuildInfo()['callback_object']->getEntity();
     $form['digital_signage']['widget'][0]['#weight'] = -1;
   }
@@ @@
  * Implements hook_inline_entity_form_entity_form_alter().
  *
  * @param array $entity_form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function digital_signage_framework_inline_entity_form_entity_form_alter(&$entity_form, FormStateInterface $form_state) {
   if ($entity_form['#entity_type'] === 'digital_signage_content_setting') {
@@ @@
  *
  * @param $modules
  *
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws PluginNotFoundException
  */
 function digital_signage_framework_modules_installed($modules) {
   foreach ($modules as $module) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


50) modules/contrib/digital_signage_framework/digital_signage_framework.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\digital_signage_framework\Entity\ContentSetting;
 use Drupal\digital_signage_framework\Entity\Device;
@@ @@
 /**
  * Update fields for digital_signage_content_setting entities.
  *
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws PluginNotFoundException
  */
 function digital_signage_framework_update_8001() {
   if ($dscs_entity_type = Drupal::entityTypeManager()->getDefinition('digital_signage_content_setting')) {
@@ @@
 /**
  * Add field for dynamic content to digital_signage_content_setting entities.
  *
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws PluginNotFoundException
  */
 function digital_signage_framework_update_8002() {
   if ($dscs_entity_type = Drupal::entityTypeManager()->getDefinition('digital_signage_content_setting')) {
@@ @@
 /**
  * Add fields for label to digital_signage_content_setting entities.
  *
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws PluginNotFoundException
  */
 function digital_signage_framework_update_8003() {
   if ($dscs_entity_type = Drupal::entityTypeManager()->getDefinition('digital_signage_content_setting')) {
@@ @@
  * Add field for emergency mode to digital_signage_content_setting entities.
  * Add new emergency_entity field to digital_signage_device.
  *
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws PluginNotFoundException
  */
 function digital_signage_framework_update_8004() {
   if ($dscs_entity_type = Drupal::entityTypeManager()->getDefinition('digital_signage_content_setting')) {
@@ @@
       ->execute();
   }

-  $config_path = drupal_get_path('module', 'digital_signage_framework') . '/config/optional';
+  $config_path = \Drupal::service('extension.list.module')->getPath('digital_signage_framework') . '/config/optional';
   $source = new FileStorage($config_path);
   $config_storage = Drupal::service('config.storage');
   $config_storage->write('views.view.emergency_entities', $source->read('views.view.emergency_entities'));
@@ @@
  */
 function digital_signage_framework_update_8008() {
   $definition_update_manager = Drupal::entityDefinitionUpdateManager();
-  /** @var \Drupal\Core\Entity\EntityTypeInterface $definition */
+  /** @var EntityTypeInterface $definition */
   foreach (Drupal::entityTypeManager()->getDefinitions() as $definition) {
     if ($definition instanceof ContentEntityTypeInterface) {
       if ($definition->id() === 'digital_signage_content_setting') {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [OK] 50 files have been changed by Rector                                      

