diff --git a/modules/static_build/src/Annotation/StaticBuilder.php b/modules/static_build/src/Annotation/StaticBuilder.php
index 6fe6bd6..7592358 100644
--- a/modules/static_build/src/Annotation/StaticBuilder.php
+++ b/modules/static_build/src/Annotation/StaticBuilder.php
@@ -25,7 +25,7 @@ class StaticBuilder extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -34,7 +34,7 @@ class StaticBuilder extends Plugin {
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/modules/static_build/src/Commands/StaticBuildCommands.php b/modules/static_build/src/Commands/StaticBuildCommands.php
index 3c0773f..ebc3103 100644
--- a/modules/static_build/src/Commands/StaticBuildCommands.php
+++ b/modules/static_build/src/Commands/StaticBuildCommands.php
@@ -19,23 +19,23 @@ class StaticBuildCommands extends DrushCommands {
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Static builder.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;
 
   /**
    * StaticBuildCommands constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   Static Builder plugin manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, StaticBuilderPluginManagerInterface $staticBuilderPluginManager) {
diff --git a/modules/static_build/src/Config/ConfigOverrider.php b/modules/static_build/src/Config/ConfigOverrider.php
index 4b5c57f..e44843c 100644
--- a/modules/static_build/src/Config/ConfigOverrider.php
+++ b/modules/static_build/src/Config/ConfigOverrider.php
@@ -16,23 +16,23 @@ class ConfigOverrider implements ConfigFactoryOverrideInterface {
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Static Suite utils.
    *
-   * @var \Drupal\static_suite\Utility\StaticSuiteUtilsInterface
+   * @var StaticSuiteUtilsInterface
    */
   protected $staticSuiteUtils;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Config factory.
-   * @param \Drupal\static_suite\Utility\StaticSuiteUtilsInterface $static_suite_utils
+   * @param StaticSuiteUtilsInterface $static_suite_utils
    *   Static Suite utils.
    */
   public function __construct(ConfigFactoryInterface $configFactory, StaticSuiteUtilsInterface $static_suite_utils) {
diff --git a/modules/static_build/src/Controller/BuilderController.php b/modules/static_build/src/Controller/BuilderController.php
index e87901f..930daab 100644
--- a/modules/static_build/src/Controller/BuilderController.php
+++ b/modules/static_build/src/Controller/BuilderController.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\static_build\Controller;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\static_suite\StaticSuiteUserException;
+use Drupal\static_suite\StaticSuiteException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ -26,43 +29,43 @@ class BuilderController extends ControllerBase {
   /**
    * Request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected Request $request;
 
   /**
    * Symfony Event Dispatcher Interface.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected EventDispatcherInterface $eventDispatcher;
 
   /**
    * The static builder plugin manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected StaticBuilderPluginManagerInterface $staticBuilderPluginManager;
 
   /**
    * Locale exporter manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Locale\LocaleExporterPluginManagerInterface
+   * @var LocaleExporterPluginManagerInterface
    */
   protected LocaleExporterPluginManagerInterface $localeExporterManager;
 
   /**
    * BuilderController constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   Request stack.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   Language Manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher service.
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   The static builder plugin manager.
-   * @param \Drupal\static_export\Exporter\Type\Locale\LocaleExporterPluginManagerInterface $localeExporterManager
+   * @param LocaleExporterPluginManagerInterface $localeExporterManager
    *   Locale exporter manager.
    */
   public function __construct(
@@ -100,7 +103,7 @@ class BuilderController extends ControllerBase {
    * @param string $runMode
    *   Build mode: live or preview.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Redirect to previous page.
    */
   public function runBuild(string $builderId, string $runMode): RedirectResponse {
@@ -145,8 +148,8 @@ class BuilderController extends ControllerBase {
    * @return bool
    *   Returns true if a new build has been executed, false otherwise.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws PluginException
+   * @throws StaticSuiteUserException
    */
   protected function executeBuild(ExporterPluginInterface $exporter, string $builderId, string $runMode): bool {
 
@@ -174,12 +177,12 @@ class BuilderController extends ControllerBase {
   /**
    * Exports locale data to be able to run a new build.
    *
-   * @return \Drupal\static_export\Exporter\Type\Locale\LocaleExporterPluginInterface
+   * @return LocaleExporterPluginInterface
    *   The exporter.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
-   * @throws \Drupal\static_suite\StaticSuiteUserException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws StaticSuiteException
+   * @throws StaticSuiteUserException
+   * @throws PluginException
    */
   protected function exportLocale(): LocaleExporterPluginInterface {
     $localeExporter = $this->localeExporterManager->getDefaultInstance();
diff --git a/modules/static_build/src/Controller/LogViewerController.php b/modules/static_build/src/Controller/LogViewerController.php
index e3b1833..de70616 100644
--- a/modules/static_build/src/Controller/LogViewerController.php
+++ b/modules/static_build/src/Controller/LogViewerController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_build\Controller;
 
+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface;
@@ -21,16 +22,16 @@ class LogViewerController extends ControllerBase {
   /**
    * The static builder plugin manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;
 
   /**
    * FileViewer controller constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   The static builder manager.
    */
   public function __construct(
@@ -61,7 +62,7 @@ class LogViewerController extends ControllerBase {
    * @param string $uniqueId
    *   Release's unique id.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse|\Symfony\Component\HttpFoundation\Response
+   * @return RedirectResponse|Response
    *   The response.
    */
   public function viewBuildLog(string $builderId, string $runMode, string $uniqueId) {
diff --git a/modules/static_build/src/Controller/ReleaseController.php b/modules/static_build/src/Controller/ReleaseController.php
index 06f64a9..3d14622 100644
--- a/modules/static_build/src/Controller/ReleaseController.php
+++ b/modules/static_build/src/Controller/ReleaseController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\static_build\Controller;
 
+use Symfony\Component\HttpFoundation\Request;
+use Symfony\Component\EventDispatcher\EventDispatcher;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Routing\LocalRedirectResponse;
@@ -32,70 +34,70 @@ class ReleaseController extends ControllerBase {
   /**
    * Request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|null
+   * @var Request|null
    */
   protected $request;
 
   /**
    * Event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcher
+   * @var EventDispatcher
    */
   protected $eventDispatcher;
 
   /**
    * The static builder plugin manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;
 
   /**
    * The static builder helper.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderHelperInterface
+   * @var StaticBuilderHelperInterface
    */
   protected $staticBuilderHelper;
 
   /**
    * The static builder plugin.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginInterface
+   * @var StaticBuilderPluginInterface
    */
   protected $builder;
 
   /**
    * The task batch handler.
    *
-   * @var \Drupal\static_suite\Release\Task\Batch\TaskBatchHandlerInterface
+   * @var TaskBatchHandlerInterface
    */
   protected TaskBatchHandlerInterface $taskBatchHandler;
 
   /**
    * The directory download helper.
    *
-   * @var \Drupal\static_suite\Utility\DirectoryDownloadHelperInterface
+   * @var DirectoryDownloadHelperInterface
    */
   protected DirectoryDownloadHelperInterface $directoryDownloadHelper;
 
   /**
    * Static Builder Releases Controller constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   Request stack.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   The static builder plugin manager.
-   * @param \Drupal\static_build\Plugin\StaticBuilderHelperInterface $staticBuilderHelper
+   * @param StaticBuilderHelperInterface $staticBuilderHelper
    *   The static builder helper.
-   * @param \Drupal\static_suite\Release\Task\Batch\TaskBatchHandlerInterface $taskBatchHandler
+   * @param TaskBatchHandlerInterface $taskBatchHandler
    *   The task batch handler.
-   * @param \Drupal\static_suite\Utility\DirectoryDownloadHelperInterface $directoryDownloadHelper
+   * @param DirectoryDownloadHelperInterface $directoryDownloadHelper
    *   The directory download helper.
    */
   public function __construct(
@@ -365,7 +367,7 @@ class ReleaseController extends ControllerBase {
    * @param string $uniqueId
    *   Release's unique id.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   JSON response.
    */
   public function getReleaseRunningData(string $builderId, string $runMode, string $uniqueId): JsonResponse {
@@ -385,7 +387,7 @@ class ReleaseController extends ControllerBase {
    * @param string $runMode
    *   A run mode. Usually live or preview.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   JSON response.
    */
   public function getAllReleasesRunningData(string $builderId, string $runMode): JsonResponse {
@@ -405,7 +407,7 @@ class ReleaseController extends ControllerBase {
    * @param string $runMode
    *   A run mode. Usually live or preview.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse|\Drupal\Core\Routing\LocalRedirectResponse
+   * @return JsonResponse|LocalRedirectResponse
    *   JSON response or a redirect.
    */
   public function getAllReleasesRunningDataBatch(string $builderId, string $runMode): JsonResponse | LocalRedirectResponse {
@@ -447,7 +449,7 @@ class ReleaseController extends ControllerBase {
    *   Release's unique id. Optional. If none provided, it will use the one
    *   from current release.
    *
-   * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
+   * @return BinaryFileResponse
    *   The transferred file as response.
    */
   public function download(string $builderId, string $runMode, string $uniqueId = NULL): BinaryFileResponse {
diff --git a/modules/static_build/src/EventSubscriber/EventSubscriber.php b/modules/static_build/src/EventSubscriber/EventSubscriber.php
index 0e34563..6f95260 100644
--- a/modules/static_build/src/EventSubscriber/EventSubscriber.php
+++ b/modules/static_build/src/EventSubscriber/EventSubscriber.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\static_build\EventSubscriber;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\static_suite\StaticSuiteException;
+use Drupal\static_suite\StaticSuiteUserException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EditorialContentEntityBase;
 use Drupal\Core\StreamWrapper\StreamWrapperInterface;
@@ -28,49 +31,49 @@ class EventSubscriber implements EventSubscriberInterface {
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected ConfigFactoryInterface $configFactory;
 
   /**
    * The stream wrapper manager.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected StreamWrapperManagerInterface $streamWrapperManager;
 
   /**
    * The shared tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @var SharedTempStoreFactory
    */
   protected SharedTempStoreFactory $tempStoreFactory;
 
   /**
    * Static Builder Manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected StaticBuilderPluginManagerInterface $staticBuilderPluginManager;
 
   /**
    * Entity Utils.
    *
-   * @var \Drupal\static_suite\Entity\EntityUtils
+   * @var EntityUtils
    */
   protected EntityUtils $entityUtils;
 
   /**
    * Static Suite utils.
    *
-   * @var \Drupal\static_suite\Utility\StaticSuiteUtilsInterface
+   * @var StaticSuiteUtilsInterface
    */
   protected StaticSuiteUtilsInterface $staticSuiteUtils;
 
   /**
    * Symfony Event Dispatcher Interface.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected EventDispatcherInterface $eventDispatcher;
 
@@ -84,19 +87,19 @@ class EventSubscriber implements EventSubscriberInterface {
   /**
    * Constructs the subscriber.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $streamWrapperManager
+   * @param StreamWrapperManagerInterface $streamWrapperManager
    *   The stream wrapper manager.
-   * @param \Drupal\Core\TempStore\SharedTempStoreFactory $tempStoreFactory
+   * @param SharedTempStoreFactory $tempStoreFactory
    *   The shared tempstore factory.
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   Static Builder Manager.
-   * @param \Drupal\static_suite\Entity\EntityUtils $entityUtils
+   * @param EntityUtils $entityUtils
    *   Utils for working with entities.
-   * @param \Drupal\static_suite\Utility\StaticSuiteUtilsInterface $static_suite_utils
+   * @param StaticSuiteUtilsInterface $static_suite_utils
    *   Static Suite utils.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, StreamWrapperManagerInterface $streamWrapperManager, SharedTempStoreFactory $tempStoreFactory, StaticBuilderPluginManagerInterface $staticBuilderPluginManager, EntityUtils $entityUtils, StaticSuiteUtilsInterface $static_suite_utils, EventDispatcherInterface $event_dispatcher) {
@@ -121,14 +124,14 @@ class EventSubscriber implements EventSubscriberInterface {
   /**
    * Request a live build.
    *
-   * @param \Drupal\static_export\Event\StaticExportEvent $event
+   * @param StaticExportEvent $event
    *   The Static Export event.
    *
-   * @return \Drupal\static_export\Event\StaticExportEvent
+   * @return StaticExportEvent
    *   The processed event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws PluginException
+   * @throws StaticSuiteException
    */
   public function requestLiveBuild(StaticExportEvent $event): StaticExportEvent {
     return $this->requestBuild($event, StaticBuilderPluginInterface::RUN_MODE_LIVE);
@@ -137,14 +140,14 @@ class EventSubscriber implements EventSubscriberInterface {
   /**
    * Request a preview build.
    *
-   * @param \Drupal\static_export\Event\StaticExportEvent $event
+   * @param StaticExportEvent $event
    *   The Static Export event.
    *
-   * @return \Drupal\static_export\Event\StaticExportEvent
+   * @return StaticExportEvent
    *   The processed event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws PluginException
+   * @throws StaticSuiteException
    */
   public function requestPreviewBuild(StaticExportEvent $event): StaticExportEvent {
     return $this->requestBuild($event, StaticBuilderPluginInterface::RUN_MODE_PREVIEW);
@@ -153,17 +156,17 @@ class EventSubscriber implements EventSubscriberInterface {
   /**
    * Request a live build.
    *
-   * @param \Drupal\static_export\Event\StaticExportEvent $event
+   * @param StaticExportEvent $event
    *   The Static Export event.
    * @param string $runMode
    *   Build run mode, live or preview.
    *
-   * @return \Drupal\static_export\Event\StaticExportEvent
+   * @return StaticExportEvent
    *   The processed event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteException
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws PluginException
+   * @throws StaticSuiteException
+   * @throws StaticSuiteUserException
    */
   protected function requestBuild(StaticExportEvent $event, string $runMode): StaticExportEvent {
     $exporter = $event->getExporter();
diff --git a/modules/static_build/src/Form/LocalBuilderSettingsFormBase.php b/modules/static_build/src/Form/LocalBuilderSettingsFormBase.php
index df66c37..4f4e38a 100644
--- a/modules/static_build/src/Form/LocalBuilderSettingsFormBase.php
+++ b/modules/static_build/src/Form/LocalBuilderSettingsFormBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_build\Form;
 
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -18,16 +19,16 @@ abstract class LocalBuilderSettingsFormBase extends ConfigFormBase {
   /**
    * The static builder plugin manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected StaticBuilderPluginManagerInterface $staticBuilderPluginManager;
 
   /**
    * Constructs a BuilderSettingsFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $static_builder_manager
+   * @param StaticBuilderPluginManagerInterface $static_builder_manager
    *   The static builder plugin manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, StaticBuilderPluginManagerInterface $static_builder_manager) {
@@ -70,7 +71,7 @@ abstract class LocalBuilderSettingsFormBase extends ConfigFormBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
     $builderId = $this->getBuilderId();
diff --git a/modules/static_build/src/Form/SettingsForm.php b/modules/static_build/src/Form/SettingsForm.php
index 18d8621..19b0226 100644
--- a/modules/static_build/src/Form/SettingsForm.php
+++ b/modules/static_build/src/Form/SettingsForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\static_build\Form;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\ConfigFormBase;
@@ -21,43 +24,43 @@ class SettingsForm extends ConfigFormBase {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The settings URL resolver.
    *
-   * @var \Drupal\static_suite\Utility\SettingsUrlResolverInterface
+   * @var SettingsUrlResolverInterface
    */
   protected SettingsUrlResolverInterface $settingsUrlResolver;
 
   /**
    * The static builder plugin manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;
 
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Messenger.
-   * @param \Drupal\static_suite\Utility\SettingsUrlResolverInterface $settingsUrlResolver
+   * @param SettingsUrlResolverInterface $settingsUrlResolver
    *   The settings URL resolver.
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $static_builder_manager
+   * @param StaticBuilderPluginManagerInterface $static_builder_manager
    *   The static builder plugin manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, MessengerInterface $messenger, SettingsUrlResolverInterface $settingsUrlResolver, StaticBuilderPluginManagerInterface $static_builder_manager) {
@@ -169,10 +172,10 @@ class SettingsForm extends ConfigFormBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginException
+   * @throws PluginNotFoundException
    *   Thrown if the entity type doesn't exist.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown if the storage handler couldn't be loaded.
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
diff --git a/modules/static_build/src/Plugin/Derivative/BuilderMenuItems.php b/modules/static_build/src/Plugin/Derivative/BuilderMenuItems.php
index ddbbcae..3f892e4 100644
--- a/modules/static_build/src/Plugin/Derivative/BuilderMenuItems.php
+++ b/modules/static_build/src/Plugin/Derivative/BuilderMenuItems.php
@@ -18,14 +18,14 @@ class BuilderMenuItems extends DeriverBase implements ContainerDeriverInterface
   /**
    * The static builder manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected StaticBuilderPluginManagerInterface $staticBuilderPluginManager;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   The static builder manager.
    */
   public function __construct(
diff --git a/modules/static_build/src/Plugin/Derivative/ReleaseListMenuItems.php b/modules/static_build/src/Plugin/Derivative/ReleaseListMenuItems.php
index 704e16a..7fe4112 100644
--- a/modules/static_build/src/Plugin/Derivative/ReleaseListMenuItems.php
+++ b/modules/static_build/src/Plugin/Derivative/ReleaseListMenuItems.php
@@ -18,14 +18,14 @@ class ReleaseListMenuItems extends DeriverBase implements ContainerDeriverInterf
   /**
    * The static builder manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   The static builder manager.
    */
   public function __construct(
diff --git a/modules/static_build/src/Plugin/Derivative/ReleaseListTasks.php b/modules/static_build/src/Plugin/Derivative/ReleaseListTasks.php
index 9bab431..0e06aa6 100644
--- a/modules/static_build/src/Plugin/Derivative/ReleaseListTasks.php
+++ b/modules/static_build/src/Plugin/Derivative/ReleaseListTasks.php
@@ -18,14 +18,14 @@ class ReleaseListTasks extends DeriverBase implements ContainerDeriverInterface
   /**
    * The static builder manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   The static builder manager.
    */
   public function __construct(
diff --git a/modules/static_build/src/Plugin/LocalStaticBuilderPluginBase.php b/modules/static_build/src/Plugin/LocalStaticBuilderPluginBase.php
index 6fbf193..2aac66f 100644
--- a/modules/static_build/src/Plugin/LocalStaticBuilderPluginBase.php
+++ b/modules/static_build/src/Plugin/LocalStaticBuilderPluginBase.php
@@ -12,7 +12,7 @@ abstract class LocalStaticBuilderPluginBase extends StaticBuilderPluginBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function preBuild(): void {
     $this->deleteTempDirs();
@@ -115,7 +115,7 @@ abstract class LocalStaticBuilderPluginBase extends StaticBuilderPluginBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function postBuild(): void {
     $config = $this->configFactory->get('static_builder_' . $this->pluginId . '.settings');
@@ -139,7 +139,7 @@ abstract class LocalStaticBuilderPluginBase extends StaticBuilderPluginBase {
   /**
    * Deletes cache_dir and out_dir.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function deleteTempDirs(): void {
     $config = $this->configFactory->get('static_builder_' . $this->pluginId . '.settings');
diff --git a/modules/static_build/src/Plugin/ReleaseBasedAsyncTaskPluginInterface.php b/modules/static_build/src/Plugin/ReleaseBasedAsyncTaskPluginInterface.php
index 790691f..074d636 100644
--- a/modules/static_build/src/Plugin/ReleaseBasedAsyncTaskPluginInterface.php
+++ b/modules/static_build/src/Plugin/ReleaseBasedAsyncTaskPluginInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_build\Plugin;
 
+use Drupal\static_suite\StaticSuiteException;
 use Drupal\static_suite\Plugin\AsyncTaskPluginInterface;
 use Drupal\static_suite\Release\ReleaseManagerInterface;
 
@@ -21,10 +22,10 @@ interface ReleaseBasedAsyncTaskPluginInterface extends AsyncTaskPluginInterface
    *   without initializing it, when the releases directory is not required to
    *   be present.
    *
-   * @return \Drupal\static_suite\Release\ReleaseManagerInterface
+   * @return ReleaseManagerInterface
    *   The current release manager.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    *
    * @todo Move this interface to static_suite core.
    */
diff --git a/modules/static_build/src/Plugin/ReleaseBasedConfigurableDrushAsyncTaskPluginBase.php b/modules/static_build/src/Plugin/ReleaseBasedConfigurableDrushAsyncTaskPluginBase.php
index cfad35f..ffdd019 100644
--- a/modules/static_build/src/Plugin/ReleaseBasedConfigurableDrushAsyncTaskPluginBase.php
+++ b/modules/static_build/src/Plugin/ReleaseBasedConfigurableDrushAsyncTaskPluginBase.php
@@ -16,7 +16,7 @@ abstract class ReleaseBasedConfigurableDrushAsyncTaskPluginBase extends Configur
   /**
    * Release Manager.
    *
-   * @var \Drupal\static_suite\Release\ReleaseManagerInterface
+   * @var ReleaseManagerInterface
    */
   protected $releaseManager;
 
@@ -29,9 +29,9 @@ abstract class ReleaseBasedConfigurableDrushAsyncTaskPluginBase extends Configur
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\static_suite\Cli\CliCommandFactoryInterface $cliCommandFactory
+   * @param CliCommandFactoryInterface $cliCommandFactory
    *   The CLI command factory.
-   * @param \Drupal\static_suite\Release\ReleaseManagerInterface $releaseManager
+   * @param ReleaseManagerInterface $releaseManager
    *   The release manager.
    */
   public function __construct(
diff --git a/modules/static_build/src/Plugin/StaticBuilderHelper.php b/modules/static_build/src/Plugin/StaticBuilderHelper.php
index d56bd94..97ccfda 100644
--- a/modules/static_build/src/Plugin/StaticBuilderHelper.php
+++ b/modules/static_build/src/Plugin/StaticBuilderHelper.php
@@ -13,14 +13,14 @@ class StaticBuilderHelper implements StaticBuilderHelperInterface {
   /**
    * The static builder manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;
 
   /**
    * StaticBuilderHelper constructor.
    *
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   The static builder manager.
    */
   public function __construct(StaticBuilderPluginManagerInterface $staticBuilderPluginManager) {
diff --git a/modules/static_build/src/Plugin/StaticBuilderPluginBase.php b/modules/static_build/src/Plugin/StaticBuilderPluginBase.php
index 5c85380..c61413f 100644
--- a/modules/static_build/src/Plugin/StaticBuilderPluginBase.php
+++ b/modules/static_build/src/Plugin/StaticBuilderPluginBase.php
@@ -47,56 +47,56 @@ abstract class StaticBuilderPluginBase extends ReleaseBasedConfigurableDrushAsyn
   /**
    * Drupal config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected ConfigFactoryInterface $configFactory;
 
   /**
    * Event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected EventDispatcherInterface $eventDispatcher;
 
   /**
    * Drupal file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected FileSystemInterface $fileSystem;
 
   /**
    * Exporter service.
    *
-   * @var \Drupal\static_export\Exporter\ExporterReporterInterface
+   * @var ExporterReporterInterface
    */
   protected ExporterReporterInterface $exporterReporter;
 
   /**
    * Static Suite utils.
    *
-   * @var \Drupal\static_suite\Utility\StaticSuiteUtilsInterface
+   * @var StaticSuiteUtilsInterface
    */
   protected StaticSuiteUtilsInterface $staticSuiteUtils;
 
   /**
    * Unique ID helper.
    *
-   * @var \Drupal\static_suite\Utility\UniqueIdHelperInterface
+   * @var UniqueIdHelperInterface
    */
   protected UniqueIdHelperInterface $uniqueIdHelper;
 
   /**
    * Release being built.
    *
-   * @var \Drupal\static_suite\Release\ReleaseInterface
+   * @var ReleaseInterface
    */
   protected ReleaseInterface $release;
 
   /**
    * Release task.
    *
-   * @var \Drupal\static_suite\Release\Task\TaskInterface
+   * @var TaskInterface
    */
   protected TaskInterface $releaseTask;
 
@@ -119,28 +119,28 @@ abstract class StaticBuilderPluginBase extends ReleaseBasedConfigurableDrushAsyn
   /**
    * The lock helper from Static Suite.
    *
-   * @var \Drupal\static_suite\Lock\LockHelperInterface
+   * @var LockHelperInterface
    */
   protected LockHelperInterface $lockHelper;
 
   /**
    * The lock system.
    *
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected LockBackendInterface $lock;
 
   /**
    * The stream wrapper manager.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected StreamWrapperManagerInterface $streamWrapperManager;
 
   /**
    * The stream wrapper used by this builder.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperInterface
+   * @var StreamWrapperInterface
    */
   protected StreamWrapperInterface $streamWrapper;
 
@@ -167,28 +167,28 @@ abstract class StaticBuilderPluginBase extends ReleaseBasedConfigurableDrushAsyn
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Drupal config service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher service.
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param FileSystemInterface $fileSystem
    *   Drupal file system service.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $streamWrapperManager
+   * @param StreamWrapperManagerInterface $streamWrapperManager
    *   The stream wrapper manager.
-   * @param \Drupal\static_suite\Cli\CliCommandFactoryInterface $cliCommandFactory
+   * @param CliCommandFactoryInterface $cliCommandFactory
    *   The CLI command factory.
-   * @param \Drupal\static_suite\Lock\LockHelperInterface $lockHelper
+   * @param LockHelperInterface $lockHelper
    *   The lock helper from Static Suite.
-   * @param \Drupal\static_suite\Release\ReleaseManagerInterface $releaseManager
+   * @param ReleaseManagerInterface $releaseManager
    *   The release manager.
-   * @param \Drupal\static_export\Exporter\ExporterReporterInterface $exporterReporter
+   * @param ExporterReporterInterface $exporterReporter
    *   The exporter reporter service.
-   * @param \Drupal\static_suite\Utility\StaticSuiteUtilsInterface $static_suite_utils
+   * @param StaticSuiteUtilsInterface $static_suite_utils
    *   Static Suite utils.
-   * @param \Drupal\static_suite\Utility\UniqueIdHelperInterface $unique_id_helper
+   * @param UniqueIdHelperInterface $unique_id_helper
    *   Unique ID helper.
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   public function __construct(
     array $configuration,
@@ -237,7 +237,7 @@ abstract class StaticBuilderPluginBase extends ReleaseBasedConfigurableDrushAsyn
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   public static function create(ContainerInterface $container,
     array $configuration,
@@ -270,7 +270,7 @@ abstract class StaticBuilderPluginBase extends ReleaseBasedConfigurableDrushAsyn
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function init(): void {
     if ($this->isLocal() && $this->streamWrapper::getType() !== StreamWrapperInterface::LOCAL_NORMAL) {
@@ -318,7 +318,7 @@ abstract class StaticBuilderPluginBase extends ReleaseBasedConfigurableDrushAsyn
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function run(): void {
     $this->dispatchEvent(StaticBuildEvents::CHAINED_STEP_START);
@@ -588,7 +588,7 @@ abstract class StaticBuilderPluginBase extends ReleaseBasedConfigurableDrushAsyn
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    *
    * @todo Move this method to a "BuildDirManager" or similar
    */
@@ -745,7 +745,7 @@ abstract class StaticBuilderPluginBase extends ReleaseBasedConfigurableDrushAsyn
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function createLogDir(): bool {
     if (!is_dir($this->configuration['log-dir'])) {
@@ -868,7 +868,7 @@ abstract class StaticBuilderPluginBase extends ReleaseBasedConfigurableDrushAsyn
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   public function setConfiguration(array $configuration) {
     $config = $this->configFactory->get('static_build.settings');
@@ -949,7 +949,7 @@ abstract class StaticBuilderPluginBase extends ReleaseBasedConfigurableDrushAsyn
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    *
    * @todo Move this method to a BuildDirManager or similar.
    */
@@ -977,7 +977,7 @@ abstract class StaticBuilderPluginBase extends ReleaseBasedConfigurableDrushAsyn
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    *
    * @todo Move this method to a BuildDirManager or similar.
    */
@@ -1040,7 +1040,7 @@ abstract class StaticBuilderPluginBase extends ReleaseBasedConfigurableDrushAsyn
    * @param array $data
    *   Data for the event.
    *
-   * @return \Drupal\static_suite\Event\DataEvent
+   * @return DataEvent
    *   The event.
    */
   public function dispatchEvent(string $eventName, array $data = []): DataEvent {
diff --git a/modules/static_build/src/Plugin/StaticBuilderPluginInterface.php b/modules/static_build/src/Plugin/StaticBuilderPluginInterface.php
index 645137a..0954867 100644
--- a/modules/static_build/src/Plugin/StaticBuilderPluginInterface.php
+++ b/modules/static_build/src/Plugin/StaticBuilderPluginInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_build\Plugin;
 
+use Drupal\static_suite\StaticSuiteException;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
@@ -45,7 +46,7 @@ interface StaticBuilderPluginInterface extends ReleaseBasedAsyncTaskPluginInterf
    *
    * This method should be over ridden by plugins to reflect each use case.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function build(): void;
 
diff --git a/modules/static_build/src/Plugin/StaticBuilderPluginManager.php b/modules/static_build/src/Plugin/StaticBuilderPluginManager.php
index fc8d515..57331e0 100644
--- a/modules/static_build/src/Plugin/StaticBuilderPluginManager.php
+++ b/modules/static_build/src/Plugin/StaticBuilderPluginManager.php
@@ -24,9 +24,9 @@ class StaticBuilderPluginManager extends CacheablePluginManager implements Stati
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ -41,10 +41,10 @@ class StaticBuilderPluginManager extends CacheablePluginManager implements Stati
    *
    * Wraps original createInstance() to add typing.
    *
-   * @return \Drupal\static_build\Plugin\StaticBuilderPluginInterface
+   * @return StaticBuilderPluginInterface
    *   A newly created static builder object instance.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
    */
   public function createInstance($plugin_id, array $configuration = []): StaticBuilderPluginInterface {
@@ -61,7 +61,7 @@ class StaticBuilderPluginManager extends CacheablePluginManager implements Stati
    *
    * Wraps parent method to add typing.
    *
-   * @return \Drupal\static_build\Plugin\StaticBuilderPluginInterface
+   * @return StaticBuilderPluginInterface
    *   A newly created static builder object instance, or a previously
    *   instantiated one if available.
    */
diff --git a/modules/static_build/src/Plugin/StaticBuilderPluginManagerInterface.php b/modules/static_build/src/Plugin/StaticBuilderPluginManagerInterface.php
index 2488160..0d5d18d 100644
--- a/modules/static_build/src/Plugin/StaticBuilderPluginManagerInterface.php
+++ b/modules/static_build/src/Plugin/StaticBuilderPluginManagerInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\static_build\Plugin;
 
+use Drupal\static_suite\StaticSuiteUserException;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Discovery\CachedDiscoveryInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
@@ -16,10 +18,10 @@ interface StaticBuilderPluginManagerInterface extends PluginManagerInterface, Ca
    *
    * Wraps parent method to add typing.
    *
-   * @return \Drupal\static_build\Plugin\StaticBuilderPluginInterface
+   * @return StaticBuilderPluginInterface
    *   A newly created exporter object instance.
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   public function createInstance($plugin_id, array $configuration = []): StaticBuilderPluginInterface;
 
@@ -28,13 +30,13 @@ interface StaticBuilderPluginManagerInterface extends PluginManagerInterface, Ca
    *
    * Wraps parent method to add typing.
    *
-   * @return \Drupal\static_build\Plugin\StaticBuilderPluginInterface
+   * @return StaticBuilderPluginInterface
    *   A newly created exporter object instance, or a previously
    *   instantiated one if available.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   public function getInstance(array $options): StaticBuilderPluginInterface;
 
@@ -62,7 +64,7 @@ interface StaticBuilderPluginManagerInterface extends PluginManagerInterface, Ca
    * a similar method inside ReleaseManagerInterface::validateDirStructure()
    * that checks the same for everything managed by ReleaseManagerInterface.
    *
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginInterface $staticBuilderPlugin
+   * @param StaticBuilderPluginInterface $staticBuilderPlugin
    *   Static builder plugin.
    *
    * @return array
diff --git a/modules/static_build/src/Routing/RouteSubscriber.php b/modules/static_build/src/Routing/RouteSubscriber.php
index a522363..05d352e 100644
--- a/modules/static_build/src/Routing/RouteSubscriber.php
+++ b/modules/static_build/src/Routing/RouteSubscriber.php
@@ -17,14 +17,14 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * Static Builder Manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;
 
   /**
    * Constructs the subscriber.
    *
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   Static Builder Manager.
    */
   public function __construct(StaticBuilderPluginManagerInterface $staticBuilderPluginManager) {
@@ -42,7 +42,7 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * Create routes for the list of releases.
    *
-   * @param \Symfony\Component\Routing\RouteCollection $collection
+   * @param RouteCollection $collection
    *   The route collection for adding routes.
    */
   protected function createReleaseListRoutes(RouteCollection $collection) {
@@ -89,7 +89,7 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * Create routes for the settings form of builders.
    *
-   * @param \Symfony\Component\Routing\RouteCollection $collection
+   * @param RouteCollection $collection
    *   The route collection for adding routes.
    */
   protected function createSettingFormRoutes(RouteCollection $collection) {
diff --git a/modules/static_build/static_build.install b/modules/static_build/static_build.install
index 865f18e..8e54ade 100644
--- a/modules/static_build/static_build.install
+++ b/modules/static_build/static_build.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Config\ImmutableConfig;
 /**
  * @file
  * Static Build install file.
@@ -15,7 +16,7 @@ function static_build_requirements($phase) {
   $requirements = [];
 
   if ($phase === 'runtime') {
-    /** @var \Drupal\Core\Config\ImmutableConfig $config */
+    /** @var ImmutableConfig $config */
     $config = Drupal::service('config.factory')->get('static_build.settings');
     $staticBuilderPluginManager = Drupal::service('plugin.manager.static_builder');
     if ($config->get('base_dir')) {
diff --git a/modules/static_build/static_build.module b/modules/static_build/static_build.module
index 3483882..6717a06 100644
--- a/modules/static_build/static_build.module
+++ b/modules/static_build/static_build.module
@@ -1,5 +1,9 @@
 <?php
 
+use Drupal\Core\Session\AccountProxyInterface;
+use Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface;
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\static_suite\Utility\UniqueIdHelperInterface;
 /**
  * @file
  * Static Build module.
@@ -75,14 +79,14 @@ function static_build_toolbar(): array {
     ];
   }
 
-  /** @var \Drupal\Core\Session\AccountProxyInterface $currentUser */
+  /** @var AccountProxyInterface $currentUser */
   $currentUser = Drupal::service('current_user');
 
-  /** @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager */
+  /** @var StaticBuilderPluginManagerInterface $staticBuilderPluginManager */
   $staticBuilderPluginManager = \Drupal::service('plugin.manager.static_builder');
   $builderDefinitions = $staticBuilderPluginManager->getDefinitions();
 
-  /** @var \Drupal\Core\Config\ConfigFactoryInterface $configFactory */
+  /** @var ConfigFactoryInterface $configFactory */
   $configFactory = \Drupal::service('config.factory');
   $config = $configFactory->get('static_build.settings');
 
@@ -158,11 +162,11 @@ function static_build_file_download($uri) {
     return NULL;
   }
 
-  /** @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager */
+  /** @var StaticBuilderPluginManagerInterface $staticBuilderPluginManager */
   $staticBuilderPluginManager = \Drupal::service('plugin.manager.static_builder');
   $localBuilderDefinitions = $staticBuilderPluginManager->getLocalDefinitions();
 
-  /** @var \Drupal\static_suite\Utility\UniqueIdHelperInterface $uniqueIdHelper */
+  /** @var UniqueIdHelperInterface $uniqueIdHelper */
   $uniqueIdHelper = \Drupal::service('static_suite.unique_id_helper');
 
   // Split target parts to validate filename.
diff --git a/modules/static_deploy/src/Annotation/StaticDeployer.php b/modules/static_deploy/src/Annotation/StaticDeployer.php
index a7f788d..a024082 100644
--- a/modules/static_deploy/src/Annotation/StaticDeployer.php
+++ b/modules/static_deploy/src/Annotation/StaticDeployer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_deploy\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -24,7 +25,7 @@ class StaticDeployer extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -33,7 +34,7 @@ class StaticDeployer extends Plugin {
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/modules/static_deploy/src/Commands/StaticDeployCommands.php b/modules/static_deploy/src/Commands/StaticDeployCommands.php
index 3fbe935..6095c3d 100644
--- a/modules/static_deploy/src/Commands/StaticDeployCommands.php
+++ b/modules/static_deploy/src/Commands/StaticDeployCommands.php
@@ -17,23 +17,23 @@ class StaticDeployCommands extends DrushCommands {
   /**
    * Drupal config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Static deployer manager.
    *
-   * @var \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface
+   * @var StaticDeployerPluginManagerInterface
    */
   protected $staticDeployerPluginManager;
 
   /**
    * StaticDeployCommands constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Drupal config factory.
-   * @param \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface $static_deployer_manager
+   * @param StaticDeployerPluginManagerInterface $static_deployer_manager
    *   Static deployer manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, StaticDeployerPluginManagerInterface $static_deployer_manager) {
diff --git a/modules/static_deploy/src/Controller/DeployerController.php b/modules/static_deploy/src/Controller/DeployerController.php
index eadc91f..0dafe52 100644
--- a/modules/static_deploy/src/Controller/DeployerController.php
+++ b/modules/static_deploy/src/Controller/DeployerController.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\static_deploy\Controller;
 
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\static_suite\StaticSuiteException;
+use Drupal\static_suite\StaticSuiteUserException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface;
@@ -18,25 +22,25 @@ class DeployerController extends ControllerBase {
   /**
    * Request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * Static deployer manager.
    *
-   * @var \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface
+   * @var StaticDeployerPluginManagerInterface
    */
   protected $staticDeployerPluginManager;
 
   /**
    * BuilderController constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   Request stack.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   Language Manager.
-   * @param \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface $staticDeployerPluginManager
+   * @param StaticDeployerPluginManagerInterface $staticDeployerPluginManager
    *   The static deployer manager.
    */
   public function __construct(
@@ -68,7 +72,7 @@ class DeployerController extends ControllerBase {
    * @param string $builderId
    *   Static Builder Id.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Redirect to previous page.
    */
   public function runDeploy(string $deployerId, string $builderId): RedirectResponse {
@@ -99,9 +103,9 @@ class DeployerController extends ControllerBase {
    * @param string $builderId
    *   Static Builder Id.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteException
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws PluginException
+   * @throws StaticSuiteException
+   * @throws StaticSuiteUserException
    */
   protected function executeDeploy(string $deployerId, string $builderId): void {
     $plugin = $this->staticDeployerPluginManager->getInstance([
diff --git a/modules/static_deploy/src/Controller/LogViewerController.php b/modules/static_deploy/src/Controller/LogViewerController.php
index 0ea73ee..f769c06 100644
--- a/modules/static_deploy/src/Controller/LogViewerController.php
+++ b/modules/static_deploy/src/Controller/LogViewerController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_deploy\Controller;
 
+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Language\LanguageManagerInterface;
@@ -23,18 +24,18 @@ class LogViewerController extends ControllerBase {
   /**
    * The static builder plugin manager.
    *
-   * @var \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface
+   * @var StaticDeployerPluginManagerInterface
    */
   protected $staticDeployerPluginManager;
 
   /**
    * FileViewer controller constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
-   * @param \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface $staticDeployerPluginManager
+   * @param StaticDeployerPluginManagerInterface $staticDeployerPluginManager
    *   The static deployer manager.
    */
   public function __construct(
@@ -68,7 +69,7 @@ class LogViewerController extends ControllerBase {
    * @param string $uniqueId
    *   Release's unique id.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse|\Symfony\Component\HttpFoundation\Response
+   * @return RedirectResponse|Response
    *   The response.
    */
   public function viewDeployLog(string $builderId, string $deployerId, string $uniqueId) {
diff --git a/modules/static_deploy/src/Controller/ReleaseController.php b/modules/static_deploy/src/Controller/ReleaseController.php
index 487dbb0..fd0ebf7 100644
--- a/modules/static_deploy/src/Controller/ReleaseController.php
+++ b/modules/static_deploy/src/Controller/ReleaseController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_deploy\Controller;
 
+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Language\LanguageManagerInterface;
@@ -26,61 +27,61 @@ class ReleaseController extends ControllerBase {
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|null
+   * @var Request|null
    */
   protected $request;
 
   /**
    * Drupal Language Manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The static builder plugin manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;
 
   /**
    * The static deployer plugin manager.
    *
-   * @var \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface
+   * @var StaticDeployerPluginManagerInterface
    */
   protected $staticDeployerPluginManager;
 
   /**
    * The static deployer helper.
    *
-   * @var \Drupal\static_deploy\Plugin\StaticDeployerHelperInterface
+   * @var StaticDeployerHelperInterface
    */
   protected $staticDeployerHelper;
 
   /**
    * The task batch handler.
    *
-   * @var \Drupal\static_suite\Release\Task\Batch\TaskBatchHandlerInterface
+   * @var TaskBatchHandlerInterface
    */
   protected TaskBatchHandlerInterface $taskBatchHandler;
 
   /**
    * StaticBuilderReleasesController constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   Drupal language manager.
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   The static builder plugin manager.
-   * @param \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface $staticDeployerPluginManager
+   * @param StaticDeployerPluginManagerInterface $staticDeployerPluginManager
    *   The static deployer plugin manager.
-   * @param \Drupal\static_deploy\Plugin\StaticDeployerHelperInterface $staticDeployerHelper
+   * @param StaticDeployerHelperInterface $staticDeployerHelper
    *   The static deployer helper.
-   * @param \Drupal\static_suite\Release\Task\Batch\TaskBatchHandlerInterface $taskBatchHandler
+   * @param TaskBatchHandlerInterface $taskBatchHandler
    *   The task batch handler.
    */
   public function __construct(
@@ -283,7 +284,7 @@ class ReleaseController extends ControllerBase {
    * @param string $uniqueId
    *   Release's unique ID.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   JSON response.
    */
   public function getReleaseRunningData(string $deployerId, string $builderId, string $uniqueId): JsonResponse {
@@ -303,7 +304,7 @@ class ReleaseController extends ControllerBase {
    * @param string $builderId
    *   Static Builder ID.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   JSON response.
    */
   public function getAllReleasesRunningData(string $deployerId, string $builderId): JsonResponse {
@@ -323,7 +324,7 @@ class ReleaseController extends ControllerBase {
    * @param string $builderId
    *   Static Builder ID.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse|\Drupal\Core\Routing\LocalRedirectResponse
+   * @return JsonResponse|LocalRedirectResponse
    *   JSON response or a redirect.
    */
   public function getAllReleasesRunningDataBatch(string $deployerId, string $builderId): JsonResponse | LocalRedirectResponse {
diff --git a/modules/static_deploy/src/EventSubscriber/BuildReleaseListEventSuscriber.php b/modules/static_deploy/src/EventSubscriber/BuildReleaseListEventSuscriber.php
index 45b7290..71ca2fe 100644
--- a/modules/static_deploy/src/EventSubscriber/BuildReleaseListEventSuscriber.php
+++ b/modules/static_deploy/src/EventSubscriber/BuildReleaseListEventSuscriber.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\static_deploy\EventSubscriber;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\static_suite\StaticSuiteException;
+use Drupal\static_suite\StaticSuiteUserException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Core\Url;
@@ -21,32 +24,32 @@ class BuildReleaseListEventSuscriber implements EventSubscriberInterface {
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected ConfigFactoryInterface $configFactory;
 
   /**
    * The static builder manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected StaticBuilderPluginManagerInterface $staticBuilderPluginManager;
 
   /**
    * Static Deployer Manager.
    *
-   * @var \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface
+   * @var StaticDeployerPluginManagerInterface
    */
   protected StaticDeployerPluginManagerInterface $staticDeployerPluginManager;
 
   /**
    * Constructs the subscriber.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   The static builder plugin manager.
-   * @param \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface $staticDeployerPluginManager
+   * @param StaticDeployerPluginManagerInterface $staticDeployerPluginManager
    *   Static Deployer Manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, StaticBuilderPluginManagerInterface $staticBuilderPluginManager, StaticDeployerPluginManagerInterface $staticDeployerPluginManager) {
@@ -66,15 +69,15 @@ class BuildReleaseListEventSuscriber implements EventSubscriberInterface {
   /**
    * Reacts to a ReleaseListEvents::TABLE_BUILT event.
    *
-   * @param \Drupal\static_suite\Event\DataEvent $event
+   * @param DataEvent $event
    *   The ReleaseListEvents::ROW_BUILT data event.
    *
-   * @return \Drupal\static_suite\Event\DataEvent
+   * @return DataEvent
    *   The processed event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteException
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws PluginException
+   * @throws StaticSuiteException
+   * @throws StaticSuiteUserException
    */
   public function alterBuildReleaseListTable(DataEvent $event): DataEvent {
     $data = $event->getData();
diff --git a/modules/static_deploy/src/EventSubscriber/EventSubscriber.php b/modules/static_deploy/src/EventSubscriber/EventSubscriber.php
index 00157ee..d6bbbec 100644
--- a/modules/static_deploy/src/EventSubscriber/EventSubscriber.php
+++ b/modules/static_deploy/src/EventSubscriber/EventSubscriber.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\static_deploy\EventSubscriber;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\static_suite\StaticSuiteException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\static_build\Event\StaticBuildEvents;
 use Drupal\static_deploy\Event\StaticDeployEvents;
@@ -19,41 +21,41 @@ class EventSubscriber implements EventSubscriberInterface {
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected ConfigFactoryInterface $configFactory;
 
   /**
    * Static Deployer Manager.
    *
-   * @var \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface
+   * @var StaticDeployerPluginManagerInterface
    */
   protected StaticDeployerPluginManagerInterface $staticDeployerPluginManager;
 
   /**
    * Entity Utils.
    *
-   * @var \Drupal\static_suite\Entity\EntityUtils
+   * @var EntityUtils
    */
   protected EntityUtils $entityUtils;
 
   /**
    * Symfony Event Dispatcher Interface.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected EventDispatcherInterface $eventDispatcher;
 
   /**
    * Constructs the subscriber.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface $staticDeployerPluginManager
+   * @param StaticDeployerPluginManagerInterface $staticDeployerPluginManager
    *   Static Deployer Manager.
-   * @param \Drupal\static_suite\Entity\EntityUtils $entityUtils
+   * @param EntityUtils $entityUtils
    *   Utils for working with entities.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, StaticDeployerPluginManagerInterface $staticDeployerPluginManager, EntityUtils $entityUtils, EventDispatcherInterface $event_dispatcher) {
@@ -74,14 +76,14 @@ class EventSubscriber implements EventSubscriberInterface {
   /**
    * Reacts to a StaticBuildEvents::ENDS event.
    *
-   * @param \Drupal\static_suite\Event\DataEvent $event
+   * @param DataEvent $event
    *   The Static Build event.
    *
-   * @return \Drupal\static_suite\Event\DataEvent
+   * @return DataEvent
    *   The processed event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws PluginException
+   * @throws StaticSuiteException
    */
   public function requestDeploy(DataEvent $event): DataEvent {
     // Check if received event is requesting a deployment.
diff --git a/modules/static_deploy/src/Form/SettingsForm.php b/modules/static_deploy/src/Form/SettingsForm.php
index 55a2fed..f46fccd 100644
--- a/modules/static_deploy/src/Form/SettingsForm.php
+++ b/modules/static_deploy/src/Form/SettingsForm.php
@@ -20,43 +20,43 @@ class SettingsForm extends ConfigFormBase {
   /**
    * Language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The settings URL resolver.
    *
-   * @var \Drupal\static_suite\Utility\SettingsUrlResolverInterface
+   * @var SettingsUrlResolverInterface
    */
   protected SettingsUrlResolverInterface $settingsUrlResolver;
 
   /**
    * The static deployer plugin manager.
    *
-   * @var \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface
+   * @var StaticDeployerPluginManagerInterface
    */
   protected $staticDeployerPluginManager;
 
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   Language manager.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Messenger.
-   * @param \Drupal\static_suite\Utility\SettingsUrlResolverInterface $settingsUrlResolver
+   * @param SettingsUrlResolverInterface $settingsUrlResolver
    *   The settings URL resolver.
-   * @param \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface $static_deployer_manager
+   * @param StaticDeployerPluginManagerInterface $static_deployer_manager
    *   The static deployer plugin manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, LanguageManagerInterface $language_manager, MessengerInterface $messenger, SettingsUrlResolverInterface $settingsUrlResolver, StaticDeployerPluginManagerInterface $static_deployer_manager) {
diff --git a/modules/static_deploy/src/Plugin/Derivative/ReleaseListMenu.php b/modules/static_deploy/src/Plugin/Derivative/ReleaseListMenu.php
index 0df46ef..ceac952 100644
--- a/modules/static_deploy/src/Plugin/Derivative/ReleaseListMenu.php
+++ b/modules/static_deploy/src/Plugin/Derivative/ReleaseListMenu.php
@@ -19,23 +19,23 @@ class ReleaseListMenu extends DeriverBase implements ContainerDeriverInterface {
   /**
    * The static builder manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;
 
   /**
    * The static deployer manager.
    *
-   * @var \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface
+   * @var StaticDeployerPluginManagerInterface
    */
   protected $staticDeployerPluginManager;
 
   /**
    * FileViewer controller constructor.
    *
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   The static builder manager.
-   * @param \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface $staticDeployerPluginManager
+   * @param StaticDeployerPluginManagerInterface $staticDeployerPluginManager
    *   The static deployer manager.
    */
   public function __construct(
diff --git a/modules/static_deploy/src/Plugin/Derivative/ReleaseListTasks.php b/modules/static_deploy/src/Plugin/Derivative/ReleaseListTasks.php
index 55f48a9..539a004 100644
--- a/modules/static_deploy/src/Plugin/Derivative/ReleaseListTasks.php
+++ b/modules/static_deploy/src/Plugin/Derivative/ReleaseListTasks.php
@@ -19,23 +19,23 @@ class ReleaseListTasks extends DeriverBase implements ContainerDeriverInterface
   /**
    * The static builder manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;
 
   /**
    * The static deployer manager.
    *
-   * @var \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface
+   * @var StaticDeployerPluginManagerInterface
    */
   protected $staticDeployerPluginManager;
 
   /**
    * FileViewer controller constructor.
    *
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   The static builder manager.
-   * @param \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface $staticDeployerPluginManager
+   * @param StaticDeployerPluginManagerInterface $staticDeployerPluginManager
    *   The static deployer manager.
    */
   public function __construct(
diff --git a/modules/static_deploy/src/Plugin/StaticDeployerPluginBase.php b/modules/static_deploy/src/Plugin/StaticDeployerPluginBase.php
index 969c7b1..eff8634 100644
--- a/modules/static_deploy/src/Plugin/StaticDeployerPluginBase.php
+++ b/modules/static_deploy/src/Plugin/StaticDeployerPluginBase.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\static_deploy\Plugin;
 
+use Drupal\Core\Lock\LockBackendInterface;
+use Drupal\static_suite\Release\ReleaseInterface;
+use Drupal\static_suite\Release\Task\Task;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\File\FileSystemInterface;
@@ -33,42 +37,42 @@ abstract class StaticDeployerPluginBase extends ReleaseBasedConfigurableDrushAsy
   /**
    * Drupal config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * Drupal file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * The lock helper from Static Suite.
    *
-   * @var \Drupal\static_suite\Lock\LockHelperInterface
+   * @var LockHelperInterface
    */
   protected $lockHelper;
 
   /**
    * The lock system.
    *
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected $lock;
 
   /**
    * Static Suite utils.
    *
-   * @var \Drupal\static_suite\Utility\StaticSuiteUtilsInterface
+   * @var StaticSuiteUtilsInterface
    */
   protected $staticSuiteUtils;
 
@@ -89,28 +93,28 @@ abstract class StaticDeployerPluginBase extends ReleaseBasedConfigurableDrushAsy
   /**
    * Current release.
    *
-   * @var \Drupal\static_suite\Release\ReleaseInterface
+   * @var ReleaseInterface
    */
   protected $currentRelease;
 
   /**
    * Current release task.
    *
-   * @var \Drupal\static_suite\Release\Task\Task
+   * @var Task
    */
   protected $releaseTask;
 
   /**
    * The static builder manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;
 
   /**
    * The static builder that this deployer is using.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginInterface
+   * @var StaticBuilderPluginInterface
    */
   protected $staticBuilder;
 
@@ -123,25 +127,25 @@ abstract class StaticDeployerPluginBase extends ReleaseBasedConfigurableDrushAsy
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Drupal config service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher service.
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param FileSystemInterface $fileSystem
    *   Drupal file system service.
-   * @param \Drupal\static_suite\Cli\CliCommandFactoryInterface $cliCommandFactory
+   * @param CliCommandFactoryInterface $cliCommandFactory
    *   The CLI command factory.
-   * @param \Drupal\static_suite\Lock\LockHelperInterface $lockHelper
+   * @param LockHelperInterface $lockHelper
    *   The lock helper from Static Suite.
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   The static builder plugin manager.
-   * @param \Drupal\static_suite\Release\ReleaseManager $releaseManager
+   * @param ReleaseManager $releaseManager
    *   The release manager service.
-   * @param \Drupal\static_suite\Utility\StaticSuiteUtilsInterface $staticSuiteUtils
+   * @param StaticSuiteUtilsInterface $staticSuiteUtils
    *   Static Suite utils.
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws StaticSuiteUserException
+   * @throws PluginException
    */
   public function __construct(
     array $configuration,
@@ -170,8 +174,8 @@ abstract class StaticDeployerPluginBase extends ReleaseBasedConfigurableDrushAsy
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws StaticSuiteUserException
+   * @throws PluginException
    */
   public static function create(ContainerInterface $container,
     array $configuration,
@@ -237,7 +241,7 @@ abstract class StaticDeployerPluginBase extends ReleaseBasedConfigurableDrushAsy
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function run(): void {
     $deployLockName = $this->configuration['run-mode-dir'] . '--deploy';
@@ -406,8 +410,8 @@ abstract class StaticDeployerPluginBase extends ReleaseBasedConfigurableDrushAsy
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws PluginException
+   * @throws StaticSuiteUserException
    */
   public function setConfiguration(array $configuration) {
     // Check that builder-id option is present.
@@ -479,7 +483,7 @@ abstract class StaticDeployerPluginBase extends ReleaseBasedConfigurableDrushAsy
    * @param array $data
    *   Data for the event.
    *
-   * @return \Drupal\static_suite\Event\DataEvent
+   * @return DataEvent
    *   The event.
    */
   protected function dispatchEvent(string $eventName, array $data = []): DataEvent {
diff --git a/modules/static_deploy/src/Plugin/StaticDeployerPluginInterface.php b/modules/static_deploy/src/Plugin/StaticDeployerPluginInterface.php
index aaf5f3b..20f8315 100644
--- a/modules/static_deploy/src/Plugin/StaticDeployerPluginInterface.php
+++ b/modules/static_deploy/src/Plugin/StaticDeployerPluginInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_deploy\Plugin;
 
+use Drupal\static_suite\StaticSuiteException;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
@@ -21,7 +22,7 @@ interface StaticDeployerPluginInterface extends ReleaseBasedAsyncTaskPluginInter
    *
    * This method should be over ridden by plugins to reflect each use case.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function deploy(): void;
 
@@ -30,7 +31,7 @@ interface StaticDeployerPluginInterface extends ReleaseBasedAsyncTaskPluginInter
    *
    * This method should be over ridden by plugins to reflect each use case.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function rollback(): void;
 
diff --git a/modules/static_deploy/src/Plugin/StaticDeployerPluginManager.php b/modules/static_deploy/src/Plugin/StaticDeployerPluginManager.php
index dd9c3b7..c2e418b 100644
--- a/modules/static_deploy/src/Plugin/StaticDeployerPluginManager.php
+++ b/modules/static_deploy/src/Plugin/StaticDeployerPluginManager.php
@@ -20,9 +20,9 @@ class StaticDeployerPluginManager extends CacheablePluginManager implements Stat
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ -37,10 +37,10 @@ class StaticDeployerPluginManager extends CacheablePluginManager implements Stat
    *
    * Wraps original createInstance() to add typing.
    *
-   * @return \Drupal\static_deploy\Plugin\StaticDeployerPluginInterface
+   * @return StaticDeployerPluginInterface
    *   A newly created static deployer object instance.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
    */
   public function createInstance($plugin_id, array $configuration = []): StaticDeployerPluginInterface {
@@ -57,7 +57,7 @@ class StaticDeployerPluginManager extends CacheablePluginManager implements Stat
    *
    * Wraps parent method to add typing.
    *
-   * @return \Drupal\static_deploy\Plugin\StaticDeployerPluginInterface
+   * @return StaticDeployerPluginInterface
    *   A newly created static builder object instance, or a previously
    *   instantiated one if available.
    */
diff --git a/modules/static_deploy/src/Plugin/StaticDeployerPluginManagerInterface.php b/modules/static_deploy/src/Plugin/StaticDeployerPluginManagerInterface.php
index 9532a62..0b00fe4 100644
--- a/modules/static_deploy/src/Plugin/StaticDeployerPluginManagerInterface.php
+++ b/modules/static_deploy/src/Plugin/StaticDeployerPluginManagerInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\static_deploy\Plugin;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\static_suite\StaticSuiteUserException;
 use Drupal\Component\Plugin\Discovery\CachedDiscoveryInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
@@ -16,7 +18,7 @@ interface StaticDeployerPluginManagerInterface extends PluginManagerInterface, C
    *
    * Wraps parent method to add typing.
    *
-   * @return \Drupal\static_deploy\Plugin\StaticDeployerPluginInterface
+   * @return StaticDeployerPluginInterface
    *   A newly created exporter object instance.
    */
   public function createInstance($plugin_id, array $configuration = []): StaticDeployerPluginInterface;
@@ -26,13 +28,13 @@ interface StaticDeployerPluginManagerInterface extends PluginManagerInterface, C
    *
    * Wraps parent method to add typing.
    *
-   * @return \Drupal\static_deploy\Plugin\StaticDeployerPluginInterface
+   * @return StaticDeployerPluginInterface
    *   A newly created exporter object instance, or a previously
    *   instantiated one if available.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   public function getInstance(array $options): StaticDeployerPluginInterface;
 
diff --git a/modules/static_deploy/src/Routing/RouteSubscriber.php b/modules/static_deploy/src/Routing/RouteSubscriber.php
index f7b4bdc..1b5299b 100644
--- a/modules/static_deploy/src/Routing/RouteSubscriber.php
+++ b/modules/static_deploy/src/Routing/RouteSubscriber.php
@@ -16,23 +16,23 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * Static Builder Manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;
 
   /**
    * Static Deployer Manager.
    *
-   * @var \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface
+   * @var StaticDeployerPluginManagerInterface
    */
   protected $staticDeployerPluginManager;
 
   /**
    * Constructs the subscriber.
    *
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   Static Builder Manager.
-   * @param \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface $staticDeployerPluginManager
+   * @param StaticDeployerPluginManagerInterface $staticDeployerPluginManager
    *   Static Deployer Manager.
    */
   public function __construct(StaticBuilderPluginManagerInterface $staticBuilderPluginManager, StaticDeployerPluginManagerInterface $staticDeployerPluginManager) {
diff --git a/modules/static_deploy/static_deploy.module b/modules/static_deploy/static_deploy.module
index 3b2bd70..e30e961 100644
--- a/modules/static_deploy/static_deploy.module
+++ b/modules/static_deploy/static_deploy.module
@@ -1,5 +1,9 @@
 <?php
 
+use Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface;
+use Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface;
+use Drupal\Core\Session\AccountProxyInterface;
+use Drupal\Core\Config\ConfigFactoryInterface;
 /**
  * @file
  * Static Deploy module file.
@@ -56,17 +60,17 @@ function static_deploy_toolbar(): array {
 
   $runMode = StaticBuilderPluginInterface::RUN_MODE_LIVE;
 
-  /** @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager */
+  /** @var StaticBuilderPluginManagerInterface $staticBuilderPluginManager */
   $staticBuilderPluginManager = Drupal::service('plugin.manager.static_builder');
-  /** @var \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface $staticDeployerPluginManager */
+  /** @var StaticDeployerPluginManagerInterface $staticDeployerPluginManager */
   $staticDeployerPluginManager = Drupal::service('plugin.manager.static_deployer');
-  /** @var \Drupal\Core\Session\AccountProxyInterface $currentUser */
+  /** @var AccountProxyInterface $currentUser */
   $currentUser = Drupal::service('current_user');
 
   $localBuilderDefinitions = $staticBuilderPluginManager->getLocalDefinitions();
   $deployerDefinitions = $staticDeployerPluginManager->getDefinitions();
 
-  /** @var \Drupal\Core\Config\ConfigFactoryInterface $configFactory */
+  /** @var ConfigFactoryInterface $configFactory */
   $configFactory = \Drupal::service('config.factory');
   $config = $configFactory->get('static_deploy.settings');
   $toolbarEnabled = $config->get('toolbar');
@@ -120,4 +124,4 @@ function static_deploy_toolbar(): array {
   }
 
   return $emptyItem;
-}
\ No newline at end of file
+}
diff --git a/modules/static_export/modules/static_export_data_resolver_graphql/src/Config/ConfigOverrider.php b/modules/static_export/modules/static_export_data_resolver_graphql/src/Config/ConfigOverrider.php
index f2a2f27..f78617b 100644
--- a/modules/static_export/modules/static_export_data_resolver_graphql/src/Config/ConfigOverrider.php
+++ b/modules/static_export/modules/static_export_data_resolver_graphql/src/Config/ConfigOverrider.php
@@ -16,21 +16,21 @@ class ConfigOverrider implements ConfigFactoryOverrideInterface {
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Static Suite utils.
    *
-   * @var \Drupal\static_suite\Utility\StaticSuiteUtilsInterface
+   * @var StaticSuiteUtilsInterface
    */
   protected $staticSuiteUtils;
 
   /**
    * {@inheritdoc}
    *
-   * @param \Drupal\static_suite\Utility\StaticSuiteUtilsInterface $static_suite_utils
+   * @param StaticSuiteUtilsInterface $static_suite_utils
    *   Static Suite utils.
    */
   public function __construct(ConfigFactoryInterface $configFactory, StaticSuiteUtilsInterface $static_suite_utils) {
diff --git a/modules/static_export/modules/static_export_data_resolver_graphql/src/EventSubscriber/ExportableEntityListEventSubscriber.php b/modules/static_export/modules/static_export_data_resolver_graphql/src/EventSubscriber/ExportableEntityListEventSubscriber.php
index cfcb10e..e9df39e 100644
--- a/modules/static_export/modules/static_export_data_resolver_graphql/src/EventSubscriber/ExportableEntityListEventSubscriber.php
+++ b/modules/static_export/modules/static_export_data_resolver_graphql/src/EventSubscriber/ExportableEntityListEventSubscriber.php
@@ -19,14 +19,14 @@ class ExportableEntityListEventSubscriber implements EventSubscriberInterface {
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected ConfigFactoryInterface $configFactory;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
@@ -44,10 +44,10 @@ class ExportableEntityListEventSubscriber implements EventSubscriberInterface {
   /**
    * Reacts to a ExportableEntityListEvents::ROW_BUILT event.
    *
-   * @param \Drupal\static_suite\Event\DataEvent $event
+   * @param DataEvent $event
    *   The Exportable Entity List event.
    *
-   * @return \Drupal\static_suite\Event\DataEvent
+   * @return DataEvent
    *   The processed event.
    */
   public function onRowBuilt(DataEvent $event): DataEvent {
diff --git a/modules/static_export/modules/static_export_data_resolver_graphql/src/GraphqlQueryHandler.php b/modules/static_export/modules/static_export_data_resolver_graphql/src/GraphqlQueryHandler.php
index 9e4eaa3..260eff8 100644
--- a/modules/static_export/modules/static_export_data_resolver_graphql/src/GraphqlQueryHandler.php
+++ b/modules/static_export/modules/static_export_data_resolver_graphql/src/GraphqlQueryHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_export_data_resolver_graphql;
 
+use Drupal\static_export\Entity\ExportableEntity;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
@@ -23,28 +24,28 @@ class GraphqlQueryHandler implements GraphqlQueryHandlerInterface {
   /**
    * The current user service.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected AccountProxyInterface $currentUser;
 
   /**
    * The account switcher.
    *
-   * @var \Drupal\Core\Session\AccountSwitcherInterface
+   * @var AccountSwitcherInterface
    */
   protected AccountSwitcherInterface $accountSwitcher;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected ConfigFactoryInterface $configFactory;
 
   /**
    * Language Manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected LanguageManagerInterface $languageManager;
 
@@ -58,33 +59,33 @@ class GraphqlQueryHandler implements GraphqlQueryHandlerInterface {
   /**
    * Entity Utils.
    *
-   * @var \Drupal\static_suite\Entity\EntityUtils
+   * @var EntityUtils
    */
   protected EntityUtils $entityUtils;
 
   /**
    * Metadata Include Generator.
    *
-   * @var \Drupal\static_export_data_resolver_graphql\MetadataIncludeGeneratorInterface
+   * @var MetadataIncludeGeneratorInterface
    */
   protected MetadataIncludeGeneratorInterface $metadataIncludeGenerator;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user service.
-   * @param \Drupal\Core\Session\AccountSwitcherInterface $accountSwitcher
+   * @param AccountSwitcherInterface $accountSwitcher
    *   The account switcher.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   Language Manager.
    * @param \Drupal\graphql\GraphQL\Execution\QueryProcessor $queryProcessor
    *   GraphQL query processor.
-   * @param \Drupal\static_suite\Entity\EntityUtils $entityUtils
+   * @param EntityUtils $entityUtils
    *   Entity utils service.
-   * @param \Drupal\static_export_data_resolver_graphql\MetadataIncludeGeneratorInterface $metadataIncludeGenerator
+   * @param MetadataIncludeGeneratorInterface $metadataIncludeGenerator
    *   Metadata Include Generator.
    */
   public function __construct(AccountProxyInterface $currentUser, AccountSwitcherInterface $accountSwitcher, ConfigFactoryInterface $configFactory, LanguageManagerInterface $languageManager, QueryProcessor $queryProcessor, EntityUtils $entityUtils, MetadataIncludeGeneratorInterface $metadataIncludeGenerator) {
@@ -156,8 +157,8 @@ class GraphqlQueryHandler implements GraphqlQueryHandlerInterface {
   public function getQueryFileContents(EntityInterface $entity, string $variant = NULL): ?string {
     $query = NULL;
     /**
-    * @var \Drupal\static_export\Entity\ExportableEntity $exportableEntity
-    */
+     * @var ExportableEntity $exportableEntity
+     */
     $exportableEntity = $this->entityUtils->loadEntity('exportable_entity', $entity->getEntityTypeId() . '.' . $entity->bundle());
     if ($exportableEntity && $exportableEntity->status()) {
       // @todo add event to alter the gql file path.
diff --git a/modules/static_export/modules/static_export_data_resolver_graphql/src/GraphqlQueryHandlerInterface.php b/modules/static_export/modules/static_export_data_resolver_graphql/src/GraphqlQueryHandlerInterface.php
index 325519d..fee33e5 100644
--- a/modules/static_export/modules/static_export_data_resolver_graphql/src/GraphqlQueryHandlerInterface.php
+++ b/modules/static_export/modules/static_export_data_resolver_graphql/src/GraphqlQueryHandlerInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\static_export_data_resolver_graphql;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\static_suite\StaticSuiteUserException;
 use Drupal\Core\Entity\EntityInterface;
 
 /**
@@ -23,15 +25,15 @@ interface GraphqlQueryHandlerInterface {
    * @return array
    *   The query result.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws PluginException
+   * @throws StaticSuiteUserException
    */
   public function query(string $graphqlQuery, array $variables = []): array;
 
   /**
    * Get the contents of a GraphQL query file for an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which the GraphQL file contents are obtained.
    * @param string|null $variant
    *   Variant key, optional.
@@ -39,15 +41,15 @@ interface GraphqlQueryHandlerInterface {
    * @return string|null
    *   The contents of a GraphQL query file.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws PluginException
+   * @throws StaticSuiteUserException
    */
   public function getQueryFileContents(EntityInterface $entity, string $variant = NULL): ?string;
 
   /**
    * Get an array of possible variables to be used in a GraphQL query.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which the GraphQL query variables are obtained.
    * @param string|null $langcode
    *   Optional language.
