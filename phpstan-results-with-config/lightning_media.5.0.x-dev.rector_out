modules/contrib/lightning_media/lightning_media.install
modules/contrib/lightning_media/lightning_media.module
modules/contrib/lightning_media/lightning_media.post_update.php
modules/contrib/lightning_media/modules/lightning_media_audio/lightning_media_audio.install
modules/contrib/lightning_media/modules/lightning_media_audio/lightning_media_audio.module
modules/contrib/lightning_media/modules/lightning_media_audio/src/Plugin/media/Source/AudioFile.php
modules/contrib/lightning_media/modules/lightning_media_audio/src/Update/Update350.php
modules/contrib/lightning_media/modules/lightning_media_audio/tests/src/Kernel/LibraryInclusionTranslationTest.php
modules/contrib/lightning_media/modules/lightning_media_audio/tests/src/Kernel/Update/Update350Test.php
modules/contrib/lightning_media/modules/lightning_media_audio/tests/src/Kernel/Update/Update8001Test.php
modules/contrib/lightning_media/modules/lightning_media_bulk_upload/lightning_media_bulk_upload.install
modules/contrib/lightning_media/modules/lightning_media_bulk_upload/src/Form/BulkUploadForm.php
modules/contrib/lightning_media/modules/lightning_media_bulk_upload/tests/src/FunctionalJavascript/BulkUploadTest.php
modules/contrib/lightning_media/modules/lightning_media_document/lightning_media_document.install
modules/contrib/lightning_media/modules/lightning_media_document/lightning_media_document.module
modules/contrib/lightning_media/modules/lightning_media_document/src/Plugin/media/Source/File.php
modules/contrib/lightning_media/modules/lightning_media_document/src/Update/Update400.php
modules/contrib/lightning_media/modules/lightning_media_document/tests/src/Kernel/Update400Test.php
modules/contrib/lightning_media/modules/lightning_media_document/tests/src/Kernel/Update80018002Test.php
modules/contrib/lightning_media/modules/lightning_media_image/lightning_media_image.install
modules/contrib/lightning_media/modules/lightning_media_image/lightning_media_image.module
modules/contrib/lightning_media/modules/lightning_media_image/src/Plugin/Field/FieldWidget/ImageCropWidget.php
modules/contrib/lightning_media/modules/lightning_media_image/src/Plugin/media/Source/Image.php
modules/contrib/lightning_media/modules/lightning_media_image/tests/files/test.php
modules/contrib/lightning_media/modules/lightning_media_image/tests/src/Functional/ImageBrowserUploadValidationTest.php
modules/contrib/lightning_media/modules/lightning_media_image/tests/src/Functional/InstallTest.php
modules/contrib/lightning_media/modules/lightning_media_image/tests/src/FunctionalJavascript/ImageBrowserCardinalityTest.php
modules/contrib/lightning_media/modules/lightning_media_image/tests/src/Kernel/LibraryInclusionTranslationTest.php
modules/contrib/lightning_media/modules/lightning_media_image/tests/src/Kernel/Update800180068007Test.php
modules/contrib/lightning_media/modules/lightning_media_instagram/lightning_media_instagram.install
modules/contrib/lightning_media/modules/lightning_media_instagram/lightning_media_instagram.module
modules/contrib/lightning_media/modules/lightning_media_instagram/src/Plugin/Validation/Constraint/InstagramEmbedCodeConstraint.php
modules/contrib/lightning_media/modules/lightning_media_instagram/src/Plugin/Validation/Constraint/InstagramEmbedCodeConstraintValidator.php
modules/contrib/lightning_media/modules/lightning_media_instagram/src/Plugin/media/Source/Instagram.php
modules/contrib/lightning_media/modules/lightning_media_instagram/tests/src/Functional/LibraryInclusionTranslationTest.php
modules/contrib/lightning_media/modules/lightning_media_slideshow/src/ProxyClass/UninstallValidator.php
modules/contrib/lightning_media/modules/lightning_media_slideshow/src/UninstallValidator.php
modules/contrib/lightning_media/modules/lightning_media_slideshow/tests/src/FunctionalJavascript/SlideshowTest.php
modules/contrib/lightning_media/modules/lightning_media_twitter/lightning_media_twitter.install
modules/contrib/lightning_media/modules/lightning_media_twitter/lightning_media_twitter.module
modules/contrib/lightning_media/modules/lightning_media_twitter/src/Plugin/Validation/Constraint/TweetEmbedCodeConstraint.php
modules/contrib/lightning_media/modules/lightning_media_twitter/src/Plugin/Validation/Constraint/TweetEmbedCodeConstraintValidator.php
modules/contrib/lightning_media/modules/lightning_media_twitter/src/Plugin/media/Source/Twitter.php
modules/contrib/lightning_media/modules/lightning_media_twitter/tests/src/Kernel/LibraryInclusionTranslationTest.php
modules/contrib/lightning_media/modules/lightning_media_video/lightning_media_video.install
modules/contrib/lightning_media/modules/lightning_media_video/lightning_media_video.module
modules/contrib/lightning_media/modules/lightning_media_video/src/Plugin/media/Source/Video.php
modules/contrib/lightning_media/modules/lightning_media_video/src/Plugin/media/Source/VideoFile.php
modules/contrib/lightning_media/modules/lightning_media_video/src/Update/Update240.php
modules/contrib/lightning_media/modules/lightning_media_video/src/Update/Update350.php
modules/contrib/lightning_media/modules/lightning_media_video/tests/src/Kernel/LibraryInclusionTranslationTest.php
modules/contrib/lightning_media/modules/lightning_media_video/tests/src/Kernel/Update350Test.php
modules/contrib/lightning_media/modules/lightning_media_video/tests/src/Kernel/Update8003Test.php
modules/contrib/lightning_media/modules/lightning_media_video/tests/src/Kernel/Update8004Test.php
modules/contrib/lightning_media/src/Element/AjaxUpload.php
modules/contrib/lightning_media/src/Element/InteractiveUpload.php
modules/contrib/lightning_media/src/Element/Upload.php
modules/contrib/lightning_media/src/Exception/IndeterminateBundleException.php
modules/contrib/lightning_media/src/FileInputExtensionMatchTrait.php
modules/contrib/lightning_media/src/Form/AddByUrlForm.php
modules/contrib/lightning_media/src/Form/EntityEmbedDialog.php
modules/contrib/lightning_media/src/Form/MediaForm.php
modules/contrib/lightning_media/src/Form/SettingsForm.php
modules/contrib/lightning_media/src/ImageWidgetHelper.php
modules/contrib/lightning_media/src/InputMatchInterface.php
modules/contrib/lightning_media/src/LibrariesDirectoryFileFinder.php
modules/contrib/lightning_media/src/LightningMediaServiceProvider.php
modules/contrib/lightning_media/src/MediaHelper.php
modules/contrib/lightning_media/src/Plugin/EntityBrowser/Widget/EmbedCode.php
modules/contrib/lightning_media/src/Plugin/EntityBrowser/Widget/EntityFormProxy.php
modules/contrib/lightning_media/src/Plugin/EntityBrowser/Widget/FileUpload.php
modules/contrib/lightning_media/src/Plugin/entity_embed/EntityEmbedDisplay/MediaImage.php
modules/contrib/lightning_media/src/Routing/RouteSubscriber.php
modules/contrib/lightning_media/src/Update/Update200.php
modules/contrib/lightning_media/src/Update/Update240.php
modules/contrib/lightning_media/src/Update/Update310.php
modules/contrib/lightning_media/src/Update/Update360.php
modules/contrib/lightning_media/src/Update/Update400.php
modules/contrib/lightning_media/src/ValidationConstraintMatchTrait.php
modules/contrib/lightning_media/tests/files/test.php
modules/contrib/lightning_media/tests/src/Functional/AddEditFormTest.php
modules/contrib/lightning_media/tests/src/Functional/EmbeddedMediaLabelTest.php
modules/contrib/lightning_media/tests/src/Functional/MediaListTest.php
modules/contrib/lightning_media/tests/src/Functional/PathautoPatternTest.php
modules/contrib/lightning_media/tests/src/Functional/RolesTest.php
modules/contrib/lightning_media/tests/src/Functional/StandardInstallTest.php
modules/contrib/lightning_media/tests/src/Functional/Update360Test.php
modules/contrib/lightning_media/tests/src/Functional/Update400Test.php
modules/contrib/lightning_media/tests/src/Functional/UpdatePathTest.php
modules/contrib/lightning_media/tests/src/FunctionalJavascript/ImageBrowserTest.php
modules/contrib/lightning_media/tests/src/FunctionalJavascript/ImageMediaTest.php
modules/contrib/lightning_media/tests/src/FunctionalJavascript/MediaImageFieldTest.php
modules/contrib/lightning_media/tests/src/FunctionalJavascript/WebDriverWebAssert.php
modules/contrib/lightning_media/tests/src/Kernel/EntityBrowserIntegrationTest.php
modules/contrib/lightning_media/tests/src/Kernel/MediaHelperTest.php
modules/contrib/lightning_media/tests/src/Kernel/MediaTypeTest.php
modules/contrib/lightning_media/tests/src/Kernel/Update/Update8022Test.php
modules/contrib/lightning_media/tests/src/Traits/EntityBrowserTrait.php
modules/contrib/lightning_media/tests/src/Traits/EntityEmbedTrait.php

58 files with changes
=====================

1) modules/contrib/lightning_media/tests/src/Traits/EntityEmbedTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\lightning_media\Traits;

+use Behat\Mink\Element\NodeElement;
 use Behat\Mink\Element\DocumentElement;

 /**
@@ @@
   /**
    * Waits for the entity embed form to appear.
    *
-   * @return \Behat\Mink\Element\NodeElement
+   * @return NodeElement
    *   The entity embed form.
    */
   private function waitForEmbedForm() {
@@ @@
   /**
    * Waits for an image-based entity embed form to appear.
    *
-   * @return \Behat\Mink\Element\NodeElement
+   * @return NodeElement
    *   The entity embed form.
    */
   private function waitForImageEmbedForm() {
@@ @@
   /**
    * Waits for a non-image based entity embed form to appear.
    *
-   * @return \Behat\Mink\Element\NodeElement
+   * @return NodeElement
    *   The entity embed form.
    */
   private function waitForStandardEmbedForm() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/lightning_media/tests/src/Traits/EntityBrowserTrait.php:54

    ---------- begin diff ----------
@@ @@
   /**
    * Waits for the current entity browser to have at least one selectable item.
    *
-   * @return \Behat\Mink\Element\NodeElement[]
+   * @return NodeElement[]
    *   The selectable items.
    */
   private function waitForItems() {
@@ @@
   /**
    * Selects an item in the current entity browser.
    *
-   * @param \Behat\Mink\Element\NodeElement $item
+   * @param NodeElement $item
    *   The item element.
    */
   private function selectItem(NodeElement $item) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/lightning_media/tests/src/Kernel/MediaTypeTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\lightning_media\Kernel;

+use Drupal\media\MediaInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\lightning_core\ConfigHelper as Config;
 use Drupal\Tests\media\Traits\MediaTypeCreationTrait;
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     Config::forModule('lightning_media')
@@ @@
   public function testCloneMediaInLibraryField() {
     $type = $this->createMediaType('file')->id();

-    /** @var \Drupal\media\MediaInterface $media */
+    /** @var MediaInterface $media */
     $media = $this->container
       ->get('entity_type.manager')
       ->getStorage('media')
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/lightning_media/tests/src/Kernel/MediaHelperTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\lightning_media\Kernel;

+use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\file\Entity\File;
 use Drupal\KernelTests\KernelTestBase;
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('file');

@@ @@
       'bundle' => $media_type->id(),
     ]);

-    /** @var \Drupal\field\Entity\FieldConfig $source_field */
+    /** @var FieldConfig $source_field */
     $source_field = $media->getSource()->getSourceFieldDefinition($media_type);
     $source_field->setSetting('file_directory', 'wambooli')->save();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/lightning_media/tests/src/Kernel/EntityBrowserIntegrationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\lightning_media\Kernel;

+use Drupal\entity_browser\EntityBrowserInterface;
 use Drupal\entity_browser\Entity\EntityBrowser;
 use Drupal\KernelTests\KernelTestBase;

@@ @@
    * Tests that our libraries are not attached to custom entity browsers.
    */
   public function testLibraryAttachment(): void {
-    /** @var \Drupal\entity_browser\EntityBrowserInterface $browser */
+    /** @var EntityBrowserInterface $browser */
     $browser = EntityBrowser::load('test_files');
     $this->assertInstanceOf(EntityBrowser::class, $browser);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/lightning_media/tests/src/FunctionalJavascript/MediaImageFieldTest.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // The media.settings:standalone_url setting was added in Drupal 8.7. To
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/lightning_media/tests/src/FunctionalJavascript/ImageBrowserTest.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalCreateContentType(['type' => 'page']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/lightning_media/tests/src/Functional/UpdatePathTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\lightning_media\Functional;

+use Drupal\views\ViewEntityInterface;
 use Drupal\FunctionalTests\Update\UpdatePathTestBase;
 use Drupal\views\Entity\View;
 use Drush\TestTraits\DrushTestTrait;
@@ @@

   /**
    * Tests Lightning Media's database update path.
+   * @doesNotPerformAssertions
    */
   public function testUpdatePath() {
-    /** @var \Drupal\views\ViewEntityInterface $view */
+    /** @var ViewEntityInterface $view */
     $view = View::load('media');
     $display = &$view->getDisplay('default');
     $display['display_options']['fields']['media_bulk_form']['plugin_id'] = 'bulk_form';
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


9) modules/contrib/lightning_media/tests/src/Functional/Update400Test.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\lightning_media\Functional;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\editor\EditorInterface;
 use Drupal\editor\Entity\Editor;
 use Drupal\entity_browser\Element\EntityBrowserElement;
 use Drupal\field\Entity\FieldConfig;
@@ @@
  */
 class Update400Test extends BrowserTestBase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ @@

     // Revert the rich_text editor to its pre-update state, using the
     // media_browser embed button instead of the media library.
-    /** @var \Drupal\editor\EditorInterface $editor */
+    /** @var EditorInterface $editor */
     $editor = Editor::load('rich_text');
     $settings = $editor->getSettings();
     $settings['toolbar']['rows'][0][3]['items'][3] = 'media_browser';
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


10) modules/contrib/lightning_media/tests/src/Functional/Update360Test.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\lightning_media\Functional;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\entity_browser\EntityBrowserInterface;
+use Drupal\entity_browser\DisplayInterface;
 use Drupal\embed\Entity\EmbedButton;
 use Drupal\entity_browser\Entity\EntityBrowser;
 use Drupal\FunctionalTests\Update\UpdatePathTestBase;
@@ @@
  */
 class Update360Test extends UpdatePathTestBase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create a content type so we can test that content roles are correctly
@@ @@
     \Drupal::classResolver(Update360::class)
       ->cloneMediaBrowser($io->reveal());

-    /** @var \Drupal\entity_browser\EntityBrowserInterface $browser */
+    /** @var EntityBrowserInterface $browser */
     $browser = EntityBrowser::load('ckeditor_media_browser');
     $this->assertInstanceOf(EntityBrowser::class, $browser);
     $this->assertSame('Media browser (CKEditor)', $browser->label());
@@ @@
     $settings = EmbedButton::load('media_browser')->getTypeSettings();
     $this->assertSame('ckeditor_media_browser', $settings['entity_browser']);

-    /** @var \Drupal\entity_browser\DisplayInterface $browser_display */
+    /** @var DisplayInterface $browser_display */
     $browser_display = EntityBrowser::load('media_browser')->getDisplay();
     $this->assertSame('modal', $browser_display->getPluginId());
     $settings = $browser_display->getConfiguration();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/lightning_media/tests/src/Functional/StandardInstallTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\lightning_media\Functional;

+use Drupal\media\MediaTypeInterface;
 use Drupal\media\Entity\MediaType;
 use Drupal\Tests\BrowserTestBase;

@@ @@
       'lightning_media_video',
     ]);
     foreach ($source_fields as $media_type => $source_field) {
-      /** @var \Drupal\media\MediaTypeInterface $media_type */
+      /** @var MediaTypeInterface $media_type */
       $media_type = MediaType::load($media_type);
       $this->assertInstanceOf(MediaType::class, $media_type);
       $this->assertSame($source_field, $media_type->getSource()->getSourceFieldDefinition($media_type)->getName());
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


12) modules/contrib/lightning_media/tests/src/Functional/RolesTest.php:41

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->mediaType = $this->createMediaType('test')->id();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/lightning_media/tests/src/Functional/PathautoPatternTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\lightning_media\Functional;

+use Drupal\media\MediaInterface;
 use Drupal\media\Entity\Media;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\media\Traits\MediaTypeCreationTrait;
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->config('media.settings')->set('standalone_url', TRUE)->save();
     drupal_flush_all_caches();
@@ @@
       'instagram' => 'https://www.instagram.com/p/BmIh_AFDBzX',
     ];
     foreach ($media as $type => $source_value) {
-      /** @var \Drupal\media\MediaInterface $media */
+      /** @var MediaInterface $media */
       $media_item = Media::create([
         'bundle' => $type,
         'name' => $this->randomString(),
@@ @@
    * Tests a new media type.
    */
   public function testNewMediaTypePattern() {
-    /** @var \Drupal\media\MediaInterface $media */
+    /** @var MediaInterface $media */
     $media = Media::create([
       'bundle' => $this->createMediaType('test')->id(),
       'name' => 'Foo Bar',
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/lightning_media/tests/src/Functional/MediaListTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\lightning_media\Functional;

+use Drupal\media\MediaInterface;
 use Drupal\media\Entity\Media;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('local_tasks_block');
   }
@@ @@
     ]);
     $this->drupalLogin($account);

-    /** @var \Drupal\media\MediaInterface $media */
+    /** @var MediaInterface $media */
     Media::create(['bundle' => 'tweet'])
       ->setName("I'm a tweet")
       ->set('embed_code', 'https://twitter.com/50NerdsofGrey/status/757319527151636480')
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/lightning_media/src/ValidationConstraintMatchTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lightning_media;

+use Drupal\Core\TypedData\TypedDataManagerInterface;
 use Drupal\Core\TypedData\Plugin\DataType\StringData;
 use Drupal\media\MediaTypeInterface;

@@ @@
   /**
    * Returns the typed data manager.
    *
-   * @return \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @return TypedDataManagerInterface
    *   The typed data manager.
    */
   private function typedDataManager() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


16) modules/contrib/lightning_media/src/Update/Update400.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
   /**
    * Update400 constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Optionally changes entity browser field widgets to media library widgets.
    *
-   * @param \Symfony\Component\Console\Style\StyleInterface $io
+   * @param StyleInterface $io
    *   The I/O style.
    *
    * @update
@@ @@
   public function convertMediaReferenceFieldsToMediaLibrary(StyleInterface $io) {
     $storage = $this->entityTypeManager->getStorage('entity_form_display');

-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $display */
+    /** @var EntityFormDisplayInterface $display */
     foreach ($storage->loadMultiple() as $display) {
       $changed = FALSE;

@@ @@
   /**
    * Optionally converts WYSIWYG editors to use the media library.
    *
-   * @param \Symfony\Component\Console\Style\StyleInterface $io
+   * @param StyleInterface $io
    *   The I/O style.
    *
    * @update
@@ @@
   public function convertEditorsToMediaLibrary(StyleInterface $io) {
     $storage = $this->entityTypeManager->getStorage('editor');

-    /** @var \Drupal\editor\EditorInterface[] $editors */
+    /** @var EditorInterface[] $editors */
     $editors = $storage->loadByProperties(['editor' => 'ckeditor']);
     foreach ($editors as $editor) {
       // Check if the editor has the media_browser embed button enabled at all.
@@ @@
   /**
    * Determines the array path to an editor's media_browser embed button.
    *
-   * @param \Drupal\editor\EditorInterface $editor
+   * @param EditorInterface $editor
    *   The editor. It is assumed that it uses CKEditor.
    *
    * @return array
@@ @@
   /**
    * Enables the media_embed filter on a single input format.
    *
-   * @param \Drupal\filter\FilterFormatInterface $format
+   * @param FilterFormatInterface $format
    *   The input format.
    */
   private function setUpFilterFormat(FilterFormatInterface $format) {
@@ @@
   /**
    * Generates a question before migrating a field in an entity form display.
    *
-   * @param \Drupal\Core\Entity\Display\EntityFormDisplayInterface $display
+   * @param EntityFormDisplayInterface $display
    *   The entity form display being processed.
    * @param string $name
    *   The component name.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


17) modules/contrib/lightning_media/src/Update/Update360.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lightning_media\Update;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\embed\EmbedButtonInterface;
+use Drupal\entity_browser\EntityBrowserInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * The entity browser entity storage handler.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   private $entityBrowserStorage;

@@ @@
   /**
    * The embed button entity storage handler.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   private $embedButtonStorage;

@@ @@
   /**
    * The content role manager service.
    *
-   * @var \Drupal\lightning_roles\ContentRoleManager
+   * @var ContentRoleManager
    */
   private $contentRoleManager;

@@ @@
   /**
    * Update360 constructor.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_browser_storage
+   * @param EntityStorageInterface $entity_browser_storage
    *   The entity browser entity storage handler.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $embed_button_storage
+   * @param EntityStorageInterface $embed_button_storage
    *   The embed button entity storage handler.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   (optional) The string translation service.
-   * @param \Drupal\lightning_roles\ContentRoleManager $content_role_manager
+   * @param ContentRoleManager $content_role_manager
    *   (optional) The content role manager service.
    */
   public function __construct(EntityStorageInterface $entity_browser_storage, EntityStorageInterface $embed_button_storage, TranslationInterface $translation = NULL, ContentRoleManager $content_role_manager = NULL) {
@@ @@
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container) {
-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
+    /** @var EntityTypeManagerInterface $entity_type_manager */
     $entity_type_manager = $container->get('entity_type.manager');

     $arguments = [
@@ @@
    * @update
    */
   public function cloneMediaBrowser(StyleInterface $io) {
-    /** @var \Drupal\embed\EmbedButtonInterface $button */
+    /** @var EmbedButtonInterface $button */
     $button = $this->embedButtonStorage->load('media_browser');
-    /** @var \Drupal\entity_browser\EntityBrowserInterface $browser */
+    /** @var EntityBrowserInterface $browser */
     $browser = $this->entityBrowserStorage->load('media_browser');

     // If either the embed button or the media browser doesn't exist, there's
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


18) modules/contrib/lightning_media/src/Update/Update310.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The module installer.
    *
-   * @var \Drupal\Core\Extension\ModuleInstallerInterface
+   * @var ModuleInstallerInterface
    */
   protected $moduleInstaller;

@@ @@
   /**
    * Update310 constructor.
    *
-   * @param \Drupal\Core\Extension\ModuleInstallerInterface $module_installer
+   * @param ModuleInstallerInterface $module_installer
    *   The module installer service.
    */
   public function __construct(ModuleInstallerInterface $module_installer) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


19) modules/contrib/lightning_media/src/Update/Update240.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lightning_media\Update;

+use Drupal\field\Entity\FieldConfig;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Extension\ModuleInstallerInterface;
@@ @@
   /**
    * The field config storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   private $fieldConfigStorage;

@@ @@
   /**
    * The module installer.
    *
-   * @var \Drupal\Core\Extension\ModuleInstallerInterface
+   * @var ModuleInstallerInterface
    */
   protected $moduleInstaller;

@@ @@
   /**
    * Update240 constructor.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $field_config_storage
+   * @param EntityStorageInterface $field_config_storage
    *   The field config storage.
-   * @param \Drupal\Core\Extension\ModuleInstallerInterface $module_installer
+   * @param ModuleInstallerInterface $module_installer
    *   The module installer service.
    */
   public function __construct(EntityStorageInterface $field_config_storage, ModuleInstallerInterface $module_installer) {
@@ @@
    * media types to "Show in media library"?
    */
   public function renameSaveToMyMediaLibrary() {
-    /** @var \Drupal\field\Entity\FieldConfig[] $field_configs */
+    /** @var FieldConfig[] $field_configs */
     $field_configs = $this->fieldConfigStorage->loadByProperties([
       'field_name' => 'field_media_in_library',
       'entity_type' => 'media',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


20) modules/contrib/lightning_media/src/Update/Update200.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Update200 constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   (optional) The string translation service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, TranslationInterface $translation = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


21) modules/contrib/lightning_media/src/Plugin/entity_embed/EntityEmbedDisplay/MediaImage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lightning_media\Plugin\entity_embed\EntityEmbedDisplay;

+use Drupal\media\MediaInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\entity_embed\Plugin\entity_embed\EntityEmbedDisplay\ImageFieldFormatter;
@@ @@
   /**
    * Returns the image field item to use for the embedded entity.
    *
-   * @return \Drupal\image\Plugin\Field\FieldType\ImageItem
+   * @return ImageItem
    *   The image field item.
    */
   protected function getItem() {
-    /** @var \Drupal\media\MediaInterface $entity */
+    /** @var MediaInterface $entity */
     $entity = $this->getEntityFromContext();

     $item = MediaHelper::getSourceField($entity)->first();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/lightning_media/src/Plugin/EntityBrowser/Widget/FileUpload.php:128

    ---------- begin diff ----------
@@ @@
   /**
    * Validates the file entity associated with a media item.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media item.
    *
    * @return array[]
@@ @@
       ->getSourceFieldDefinition($media->bundle->entity)
       ->getName();

-    /** @var \Drupal\file\Plugin\Field\FieldType\FileItem $item */
+    /** @var FileItem $item */
     $item = $media->get($field)->first();

     $validators = [
@@ @@
    * {@inheritdoc}
    */
   public function submit(array &$element, array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\media\MediaInterface $entity */
+    /** @var MediaInterface $entity */
     $entity = $element['entity']['#entity'];

     $file = MediaHelper::useFile(
@@ @@
    *
    * @param array $element
    *   The upload element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/lightning_media/src/Plugin/EntityBrowser/Widget/EntityFormProxy.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lightning_media\Plugin\EntityBrowser\Widget;

+use Drupal\media\MediaInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\PrependCommand;
@@ @@
   /**
    * Returns a media entity created from the current input, if possible.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
-   * @return \Drupal\media\MediaInterface
+   * @return MediaInterface
    *   A media entity created from the current input value, if there is one, or
    *   NULL if no media entity can be created.
    */
@@ @@
   /**
    * Returns all media types that can apply to the current input.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
-   * @return \Drupal\media\MediaTypeInterface[]
+   * @return MediaTypeInterface[]
    *   The media types that can apply to the current input, if any.
    */
   protected function getCurrentTypes(FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    */
   public static function update(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The AJAX response.
    */
   public static function ajax(array &$form, FormStateInterface $form_state) {
@@ @@
   /**
    * Returns the current input value, if any.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return mixed
@@ @@
   /**
    * Returns the media types which can be used by this widget.
    *
-   * @return \Drupal\media\MediaTypeInterface[]
+   * @return MediaTypeInterface[]
    *   The media types which can be used by this widget.
    */
   protected function getAllowedTypes() {
@@ @@
   /**
    * Tests if a media type can be used by this widget.
    *
-   * @param \Drupal\media\MediaTypeInterface $media_type
+   * @param MediaTypeInterface $media_type
    *   The media type.
    *
    * @return bool
@@ @@
    *
    * @param mixed $value
    *   The source field value.
-   * @param \Drupal\media\MediaTypeInterface $type
+   * @param MediaTypeInterface $type
    *   The media type.
    *
-   * @return \Drupal\media\MediaInterface
+   * @return MediaInterface
    *   The unsaved media entity.
    */
   protected function createMedia($value, MediaTypeInterface $type) {
@@ @@
    * @param mixed $value
    *   The input value.
    *
-   * @return \Drupal\media\MediaTypeInterface[]
+   * @return MediaTypeInterface[]
    *   The media types which can use the given value in their source field.
    */
   protected function getTypesByValue($value) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/lightning_media/src/MediaHelper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lightning_media;

+use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\file\Entity\File;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * MediaHelper constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
       ->getStorage('media_type');
     $media_types = $storage->loadMultiple($bundles ?: NULL, $check_access);

-    /** @var \Drupal\media\MediaTypeInterface $media_type */
+    /** @var MediaTypeInterface $media_type */
     foreach ($media_types as $media_type) {
       $field = $media_type->getSource()->getSourceFieldDefinition($media_type);

@@ @@
    *   (optional) A set of media bundle IDs which might match the input. If
    *   omitted, all available bundles are checked.
    *
-   * @return \Drupal\media\MediaTypeInterface
+   * @return MediaTypeInterface
    *   A media bundle that can accept the input value.
    *
-   * @throws \Drupal\lightning_media\Exception\IndeterminateBundleException
+   * @throws IndeterminateBundleException
    *   If the input value cannot be matched to exactly one media type.
    */
   public function getBundleFromInput($value, $check_access = TRUE, array $bundles = []) {
@@ @@
    *   (optional) A set of media bundle IDs which might match the input. If
    *   omitted, all available bundles are checked.
    *
-   * @return \Drupal\media\MediaTypeInterface[]
+   * @return MediaTypeInterface[]
    *   The media bundles that can accept the input value.
    */
   public function getBundlesFromInput($value, $check_access = TRUE, array $bundles = []) {
@@ @@
    *   (optional) A set of media bundle IDs which might match the input value.
    *   If omitted, all bundles to which the user has create access are checked.
    *
-   * @return \Drupal\media\MediaInterface
+   * @return MediaInterface
    *   The unsaved media entity.
    */
   public function createFromInput($value, array $bundles = []) {
-    /** @var \Drupal\media\MediaInterface $entity */
+    /** @var MediaInterface $entity */
     $entity = $this->entityTypeManager
       ->getStorage('media')
       ->create([
@@ @@
   /**
    * Attaches a file entity to a media entity.
    *
-   * @param \Drupal\media\MediaInterface $entity
+   * @param MediaInterface $entity
    *   The media entity.
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file entity.
    * @param int $replace
    *   (optional) What to do if the file already exists. Can be any of the
@@ @@
    *   constants accepted by file_move(). Defaults to
    *   \Drupal\Core\File\FileSystemInterface::EXISTS_RENAME.
    *
-   * @return \Drupal\file\FileInterface|false
+   * @return FileInterface|false
    *   The final file entity (unsaved), or FALSE if an error occurred.
    */
   public static function useFile(MediaInterface $entity, FileInterface $file, $replace = FileSystemInterface::EXISTS_RENAME) {
@@ @@
     // might have been replaced by another one that has the same ID, but a
     // different URI. So reload the file entity to ensure we're using the most
     // up-to-date URI.
-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     $file = File::load($file->id());

     if ($destination == $file->getFileUri()) {
@@ @@
       }
       else {
         // @phpstan-ignore-next-line
-        $file = file_move($file, $destination, $replace);
+        $file = \Drupal::service('file.repository')->move($file, $destination, $replace);
       }

       if ($file) {
@@ @@
   /**
    * Prepares the destination directory for a file attached to a media entity.
    *
-   * @param \Drupal\media\MediaInterface $entity
+   * @param MediaInterface $entity
    *   The media entity.
    *
    * @return string
@@ @@
    *   The destination directory URI.
    */
   public static function prepareFileDestination(MediaInterface $entity) {
-    /** @var \Drupal\file\Plugin\Field\FieldType\FileItem $item */
+    /** @var FileItem $item */
     $item = static::getSourceField($entity)->first();

     $destination = $item->getUploadLocation();
@@ @@
   /**
    * Indicates if the media entity's type plugin supports dynamic previews.
    *
-   * @param \Drupal\media\MediaInterface $entity
+   * @param MediaInterface $entity
    *   The media entity.
    *
    * @return bool
@@ @@
   /**
    * Returns the media entity's source field item list.
    *
-   * @param \Drupal\media\MediaInterface $entity
+   * @param MediaInterface $entity
    *   The media entity.
    *
-   * @return \Drupal\Core\Field\FieldItemListInterface|null
+   * @return FieldItemListInterface|null
    *   The media entity's source field item list, or NULL if the media type
    *   plugin does not define a source field.
    */
    ----------- end diff -----------

Applied rules:
 * FileMoveRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


25) modules/contrib/lightning_media/src/LibrariesDirectoryFileFinder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lightning_media;

+use Drupal\Core\Extension\ExtensionList;
 use Drupal\Core\Extension\ProfileExtensionList;

 /**
@@ @@
   /**
    * The profile extension list.
    *
-   * @var \Drupal\Core\Extension\ExtensionList
+   * @var ExtensionList
    */
   protected $profileExtensionList;

@@ @@
    *   The app root.
    * @param string $site_path
    *   The site path.
-   * @param \Drupal\Core\Extension\ProfileExtensionList $profile_extension_list
+   * @param ProfileExtensionList $profile_extension_list
    *   The profile extension list.
    * @param string $install_profile
    *   The install profile.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


26) modules/contrib/lightning_media/src/InputMatchInterface.php:13

    ---------- begin diff ----------
@@ @@
    *
    * @param mixed $value
    *   The input value.
-   * @param \Drupal\media\MediaTypeInterface $bundle
+   * @param MediaTypeInterface $bundle
    *   The media bundle that is using this plugin.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


27) modules/contrib/lightning_media/src/ImageWidgetHelper.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Returns normalized Lightning Media-specific settings for the widget.
    *
-   * @param \Drupal\image\Plugin\Field\FieldWidget\ImageWidget $widget
+   * @param ImageWidget $widget
    *   The widget plugin.
    *
    * @return array
@@ @@
   /**
    * Returns the form for an image widget's Lightning Media-specific settings.
    *
-   * @param \Drupal\image\Plugin\Field\FieldWidget\ImageWidget $widget
+   * @param ImageWidget $widget
    *   The widget plugin.
    *
    * @return array
@@ @@
   /**
    * Summarizes an image widget's Lightning Media-specific settings.
    *
-   * @param \Drupal\image\Plugin\Field\FieldWidget\ImageWidget $widget
+   * @param ImageWidget $widget
    *   The widget plugin.
    * @param array $summary
    *   (optional) An existing summary to augment.
@@ @@
    *
    * @param array $element
    *   The widget form element.
-   * @param \Drupal\image\Plugin\Field\FieldWidget\ImageWidget $widget
+   * @param ImageWidget $widget
    *   The widget plugin.
    */
   public static function alter(array &$element, ImageWidget $widget) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


28) modules/contrib/lightning_media/src/Form/SettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lightning_media\Form;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/lightning_media/src/Form/MediaForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lightning_media\Form;

+use Drupal\media\MediaInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Security\TrustedCallbackInterface;
@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\media\MediaInterface $entity */
+    /** @var MediaInterface $entity */
     $entity = $this->getEntity();

     $field = Helper::getSourceField($entity);
@@ @@
    *
    * @param array $form
    *   The complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/lightning_media/src/FileInputExtensionMatchTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lightning_media;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\file\FileInterface;
 use Drupal\media\MediaTypeInterface;

@@ @@
   /**
    * Returns the entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager.
    */
   private function entityTypeManager() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


31) modules/contrib/lightning_media/src/Exception/IndeterminateBundleException.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The media types which matched the input value.
    *
-   * @var \Drupal\media\MediaTypeInterface[]
+   * @var MediaTypeInterface[]
    */
   private $types = [];

@@ @@
    *   (optional) The error code.
    * @param \Exception $previous
    *   (optional) The previous exception, if any.
-   * @param \Drupal\media\MediaTypeInterface[] $types
+   * @param MediaTypeInterface[] $types
    *   (optional) The media types which matched the input value.
    */
   public function __construct($value, $code = 0, \Exception $previous = NULL, array $types = []) {
@@ @@
       $value instanceof EntityInterface ? $value->label() : var_export($value, TRUE)
     );

-    /** @var \Drupal\media\MediaTypeInterface $media_type */
+    /** @var MediaTypeInterface $media_type */
     foreach ($types as $media_type) {
       $key = $media_type->id();
       $this->types[$key] = $media_type;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/lightning_media/src/Element/Upload.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lightning_media\Element;

+use Drupal\Core\File\FileSystemInterface;
+use Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher;
 use Drupal\Core\File\Event\FileUploadSanitizeNameEvent;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\Element\File as FileElement;
@@ @@
    *
    * @param array $element
    *   The element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    */
   public static function validate(array &$element, FormStateInterface $form_state) {
@@ @@
    * {@inheritdoc}
    */
   public static function valueCallback(&$element, $input, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\File\FileSystemInterface $file_system */
+    /** @var FileSystemInterface $file_system */
     $file_system = \Drupal::service('file_system');

     $id = implode('_', $element['#parents']);
@@ @@
       $destination = $file_system->realPath($element['#upload_location']);

       $event = new FileUploadSanitizeNameEvent($upload->getClientOriginalName(), '');
-      /** @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher $event_dispatcher */
+      /** @var ContainerAwareEventDispatcher $event_dispatcher */
       // phpcs:ignore
       $event_dispatcher = \Drupal::service('event_dispatcher');
       $event_dispatcher->dispatch($event);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/lightning_media/src/Element/InteractiveUpload.php:36

    ---------- begin diff ----------
@@ @@
    *
    * @param array $element
    *   The unprocessed element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   The complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   The complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    */
   public static function upload(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    */
   public static function remove(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/lightning_media/modules/lightning_media_video/tests/src/Kernel/Update350Test.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\lightning_media_video\Kernel;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\KernelTests\KernelTestBase;
@@ @@
  */
 class Update350Test extends KernelTestBase {

+  use ProphecyTrait;
   use MediaTypeCreationTrait;

   /**
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


35) modules/contrib/lightning_media/modules/lightning_media_video/tests/src/Kernel/LibraryInclusionTranslationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\lightning_media_video\Kernel;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\file\Entity\File;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\language\Entity\ConfigurableLanguage;
@@ @@
  */
 class LibraryInclusionTranslationTest extends KernelTestBase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('user');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/lightning_media/modules/lightning_media_video/src/Update/Update350.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The media type entity storage handler.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   private $mediaTypeStorage;

@@ @@
   /**
    * The field config entity storage handler.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   private $fieldStorage;

@@ @@
   /**
    * Update350 constructor.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $media_type_storage
+   * @param EntityStorageInterface $media_type_storage
    *   The media type entity storage handler.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $field_storage
+   * @param EntityStorageInterface $field_storage
    *   The field config entity storage handler.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   (optional) The string translation service.
    */
   public function __construct(EntityStorageInterface $media_type_storage, EntityStorageInterface $field_storage, TranslationInterface $translation = NULL) {
@@ @@
   /**
    * Makes field_media_in_library non-translatable in the video media type.
    *
-   * @param \Symfony\Component\Console\Style\StyleInterface $io
+   * @param StyleInterface $io
    *   The I/O handler.
    *
    * @update
    */
   public function removeVideoLibraryFieldTranslatability(StyleInterface $io) {
-    /** @var \Drupal\field\Entity\FieldConfig $field */
+    /** @var FieldConfig $field */
     $field = $this->fieldStorage->load('media.video.field_media_in_library');
     if ($field) {
       $this->processField($io, $field);
@@ @@
   /**
    * Makes field_media_in_library non-translatable in the video_file media type.
    *
-   * @param \Symfony\Component\Console\Style\StyleInterface $io
+   * @param StyleInterface $io
    *   The I/O handler.
    *
    * @update
    */
   public function removeVideoFileLibraryFieldTranslatability(StyleInterface $io) {
-    /** @var \Drupal\field\Entity\FieldConfig $field */
+    /** @var FieldConfig $field */
     $field = $this->fieldStorage->load('media.video_file.field_media_in_library');
     if ($field) {
       $this->processField($io, $field);
@@ @@
   /**
    * Removes translatability from a field after confirming the action.
    *
-   * @param \Symfony\Component\Console\Style\StyleInterface $io
+   * @param StyleInterface $io
    *   The I/O handler.
-   * @param \Drupal\field\Entity\FieldConfig $field
+   * @param FieldConfig $field
    *   The field from which to remove translatability.
    */
   private function processField(StyleInterface $io, FieldConfig $field) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


37) modules/contrib/lightning_media/modules/lightning_media_twitter/tests/src/Kernel/LibraryInclusionTranslationTest.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('user');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/lightning_media/modules/lightning_media_twitter/lightning_media_twitter.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Extension\ModuleExtensionList;
 /**
  * @file
  * Support for tweets as media entities in Lightning.
@@ @@
  * Implements hook_theme_registry_alter().
  */
 function lightning_media_twitter_theme_registry_alter(array &$theme_registry) {
-  /** @var \Drupal\Core\Extension\ModuleExtensionList $module_list */
+  /** @var ModuleExtensionList $module_list */
   $module_list = Drupal::service('extension.list.module');

   $hook = &$theme_registry['media_entity_twitter_tweet'];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


39) modules/contrib/lightning_media/modules/lightning_media_slideshow/tests/src/FunctionalJavascript/SlideshowTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\lightning_media_slideshow\FunctionalJavascript;

+use Drupal\media\MediaInterface;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\media\Entity\Media;
 use Drupal\Tests\lightning_media\FunctionalJavascript\WebDriverWebAssert;
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->createMediaType('test', [
@@ @@
    *   The type of media to create.
    */
   private function createMedia($media_type) {
-    /** @var \Drupal\media\MediaInterface $media */
+    /** @var MediaInterface $media */
     $media = Media::create(['bundle' => $media_type]);

     $source_field = $media->getSource()
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/lightning_media/modules/lightning_media_slideshow/src/UninstallValidator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lightning_media_slideshow;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleUninstallValidatorInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * The block content entity storage handler.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $blockContentStorage;

@@ @@
   /**
    * Constructs a new validator.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


41) modules/contrib/lightning_media/modules/lightning_media_slideshow/src/ProxyClass/UninstallValidator.php:6

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lightning_media_slideshow\ProxyClass {

+    use Drupal\Core\Extension\ModuleUninstallValidatorInterface;
+    use Drupal\Core\DependencyInjection\DependencySerializationTrait;
+    use Symfony\Component\DependencyInjection\ContainerInterface;
+    use Drupal\Core\StringTranslation\TranslationInterface;
     /**
      * Provides a proxy class for \Drupal\lightning_media_slideshow\UninstallValidator.
      *
      * @see \Drupal\Component\ProxyBuilder
      */
-    class UninstallValidator implements \Drupal\Core\Extension\ModuleUninstallValidatorInterface
+    class UninstallValidator implements ModuleUninstallValidatorInterface
     {

-        use \Drupal\Core\DependencyInjection\DependencySerializationTrait;
+        use DependencySerializationTrait;

         /**
          * The id of the original proxied service.
@@ @@
         /**
          * The service container.
          *
-         * @var \Symfony\Component\DependencyInjection\ContainerInterface
+         * @var ContainerInterface
          */
         protected $container;

@@ @@
         /**
          * Constructs a ProxyClass Drupal proxy object.
          *
-         * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+         * @param ContainerInterface $container
          *   The container.
          * @param string $drupal_proxy_original_service_id
          *   The service ID of the original service.
          */
-        public function __construct(\Symfony\Component\DependencyInjection\ContainerInterface $container, $drupal_proxy_original_service_id)
+        public function __construct(ContainerInterface $container, $drupal_proxy_original_service_id)
         {
             $this->container = $container;
             $this->drupalProxyOriginalServiceId = $drupal_proxy_original_service_id;
@@ @@
         /**
          * {@inheritdoc}
          */
-        public function setStringTranslation(\Drupal\Core\StringTranslation\TranslationInterface $translation)
+        public function setStringTranslation(TranslationInterface $translation)
         {
             return $this->lazyLoadItself()->setStringTranslation($translation);
         }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


42) modules/contrib/lightning_media/modules/lightning_media_image/tests/src/Kernel/Update800180068007Test.php:35

    ---------- begin diff ----------
@@ @@

   /**
    * Tests the update function.
+   * @doesNotPerformAssertions
    */
   public function testUpdate() {
     FieldStorageConfig::create([
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


43) modules/contrib/lightning_media/modules/lightning_media_image/tests/src/Kernel/LibraryInclusionTranslationTest.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('user');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


44) modules/contrib/lightning_media/modules/lightning_media_image/tests/src/FunctionalJavascript/ImageBrowserCardinalityTest.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->createContentType(['type' => 'page']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


45) modules/contrib/lightning_media/modules/lightning_media_image/tests/src/Functional/InstallTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\lightning_media_image\Functional;

+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
         'mode' => ['default', 'media_browser'],
       ]);

-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     foreach ($form_displays as $form_display) {
       $component = $form_display->getComponent('field_media_image');
       $this->assertIsArray($component);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


46) modules/contrib/lightning_media/modules/lightning_media_image/tests/src/Functional/ImageBrowserUploadValidationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\lightning_media_image\Functional;

+use Drupal\field\FieldStorageConfigInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\entity_browser\Element\EntityBrowserElement;
 use Drupal\field\Entity\FieldConfig;
@@ @@

     $node_type = $this->createContentType();

-    /** @var \Drupal\field\FieldStorageConfigInterface $field_storage */
+    /** @var FieldStorageConfigInterface $field_storage */
     $field_storage = FieldStorageConfig::create([
       'field_name' => 'field_lightweight_image',
       'entity_type' => 'node',
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


47) modules/contrib/lightning_media/modules/lightning_media_image/lightning_media_image.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\crop\CropTypeInterface;
 /**
  * @file
  * Support for image media assets in Lightning.
@@ @@
   }
   else {
     // Create a dedicated image style to display images using this crop type.
-    /** @var \Drupal\crop\CropTypeInterface $crop_type */
+    /** @var CropTypeInterface $crop_type */
     $image_style = ImageStyle::create([
       'name' => 'crop_' . $crop_type->id(),
       'label' => t('Cropped: @crop_type', [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


48) modules/contrib/lightning_media/modules/lightning_media_image/lightning_media_image.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 /**
  * @file
  * Contains install and update routines for Lightning Media Image.
@@ @@
         'bundle' => 'image',
       ]);

-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     foreach ($form_displays as $form_display) {
       $component = $form_display->getComponent('field_media_image');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


49) modules/contrib/lightning_media/modules/lightning_media_document/tests/src/Kernel/Update400Test.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\lightning_media_document\Kernel;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\KernelTests\KernelTestBase;
@@ @@
  */
 class Update400Test extends KernelTestBase {

+  use ProphecyTrait;
   use MediaTypeCreationTrait;

   /**
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


50) modules/contrib/lightning_media/modules/lightning_media_document/src/Update/Update400.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lightning_media_document\Update;

+use Drupal\Core\Field\FieldConfigInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * The field config entity storage handler.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   private $fieldStorage;

@@ @@
   /**
    * The media type entity storage handler.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   private $mediaTypeStorage;

@@ @@
   /**
    * Update400 constructor.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $field_storage
+   * @param EntityStorageInterface $field_storage
    *   The field config entity storage handler.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $media_type_storage
+   * @param EntityStorageInterface $media_type_storage
    *   The media type entity storage handler.
    */
   public function __construct(EntityStorageInterface $field_storage, EntityStorageInterface $media_type_storage) {
@@ @@
   /**
    * Makes the Document media type's source field required.
    *
-   * @param \Symfony\Component\Console\Style\StyleInterface $io
+   * @param StyleInterface $io
    *   The I/O style.
    *
    * @update
    */
   public function requireDocumentMediaSourceField(StyleInterface $io) {
-    /** @var \Drupal\Core\Field\FieldConfigInterface $field */
+    /** @var FieldConfigInterface $field */
     $field = $this->fieldStorage->load('media.document.field_document');

     if ($field && $field->isRequired() == FALSE) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


51) modules/contrib/lightning_media/modules/lightning_media_bulk_upload/tests/src/FunctionalJavascript/BulkUploadTest.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('local_actions_block');
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


52) modules/contrib/lightning_media/modules/lightning_media_bulk_upload/src/Form/BulkUploadForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lightning_media_bulk_upload\Form;

+use Drupal\file\FileInterface;
+use Drupal\media\MediaInterface;
 use Drupal\Component\Utility\Environment;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBase;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The media helper service.
    *
-   * @var \Drupal\lightning_media\MediaHelper
+   * @var MediaHelper
    */
   protected $helper;

@@ @@
   /**
    * BulkUploadForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\lightning_media\MediaHelper $helper
+   * @param MediaHelper $helper
    *   The media helper service.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translator
+   * @param TranslationInterface $translator
    *   The string translation service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, MediaHelper $helper, TranslationInterface $translator) {
@@ @@

     foreach ($uploads as $upload) {
       // Create a file entity for the temporary file.
-      /** @var \Drupal\file\FileInterface $file */
+      /** @var FileInterface $file */
       $file = $this->entityTypeManager->getStorage('file')->create([
         'uri' => $upload['path'],
         'uid' => $this->currentUser()->id(),
@@ @@
     }

     if ($bulk_create) {
-      /** @var \Drupal\media\MediaInterface $entity */
+      /** @var MediaInterface $entity */
       $redirect = array_shift($bulk_create)->toUrl('edit-form', [
         'query' => [
           'bulk_create' => $bulk_create,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


53) modules/contrib/lightning_media/modules/lightning_media_audio/tests/src/Kernel/Update/Update350Test.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\lightning_media_audio\Kernel\Update;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\KernelTests\KernelTestBase;
@@ @@
  */
 class Update350Test extends KernelTestBase {

+  use ProphecyTrait;
   use MediaTypeCreationTrait;

   /**
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


54) modules/contrib/lightning_media/modules/lightning_media_audio/tests/src/Kernel/LibraryInclusionTranslationTest.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('user');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


55) modules/contrib/lightning_media/modules/lightning_media_audio/src/Update/Update350.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lightning_media_audio\Update;

+use Drupal\field\Entity\FieldConfig;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * The media type entity storage handler.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   private $mediaTypeStorage;

@@ @@
   /**
    * The field config entity storage handler.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   private $fieldStorage;

@@ @@
   /**
    * Update350 constructor.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $media_type_storage
+   * @param EntityStorageInterface $media_type_storage
    *   The media type entity storage handler.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $field_storage
+   * @param EntityStorageInterface $field_storage
    *   The field config entity storage handler.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   (optional) The string translation service.
    */
   public function __construct(EntityStorageInterface $media_type_storage, EntityStorageInterface $field_storage, TranslationInterface $translation = NULL) {
@@ @@
   /**
    * Makes field_media_in_library non-translatable.
    *
-   * @param \Symfony\Component\Console\Style\StyleInterface $io
+   * @param StyleInterface $io
    *   The I/O handler.
    *
    * @update
    */
   public function removeAudioFileLibraryFieldTranslatability(StyleInterface $io) {
-    /** @var \Drupal\field\Entity\FieldConfig $field */
+    /** @var FieldConfig $field */
     $field = $this->fieldStorage->load('media.audio_file.field_media_in_library');
     if (empty($field)) {
       return;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


56) modules/contrib/lightning_media/lightning_media.post_update.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\system\ActionConfigEntityInterface;
 /**
  * @file
  * Contains post-update functions for Lightning Media.
  */
-
 /**
  * Change plugin IDs of actions.
  */
@@ @@
   ];

   $actions = Drupal::entityTypeManager()->getStorage('action')->loadMultiple();
-  /** @var \Drupal\system\ActionConfigEntityInterface $action */
+  /** @var ActionConfigEntityInterface $action */
   foreach ($actions as $action) {
     $plugin_id = $action->get('plugin');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


57) modules/contrib/lightning_media/lightning_media.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\file\Plugin\Field\FieldType\FileItem;
+use Drupal\embed\EmbedButtonInterface;
 /**
  * @file
  * Core media asset support for Lightning.
@@ @@
   $extra_fields = [];

   if (\Drupal::moduleHandler()->moduleExists('media')) {
-    /** @var \Drupal\media\MediaTypeInterface $media_type */
+    /** @var MediaTypeInterface $media_type */
     foreach (MediaType::loadMultiple() as $id => $media_type) {
       $plugin_definition = $media_type->getSource()->getPluginDefinition();

@@ @@
 /**
  * Validates a file using media entity source field criteria.
  *
- * @param \Drupal\file\FileInterface $file
+ * @param FileInterface $file
  *   The file to validate.
  * @param string[] $bundles
  *   (optional) A set of media bundle IDs which might match the input. If
@@ @@
     return [];
   }

-  /** @var \Drupal\file\Plugin\Field\FieldType\FileItem $item */
+  /** @var FileItem $item */
   $item = MediaHelper::getSourceField($entity)->first();

   $validators = [
@@ @@
 function lightning_media_form_entity_embed_dialog_alter(array &$form, FormStateInterface $form_state) {
   list ($editor, $embed_button) = $form_state->getBuildInfo()['args'];

-  /** @var \Drupal\embed\EmbedButtonInterface $embed_button */
+  /** @var EmbedButtonInterface $embed_button */
   if ($embed_button->id() == 'media_browser') {
     $element = &$form['attributes']['data-entity-embed-settings']['view_mode'];
     if (isset($element['#options']['embedded'])) {
@@ @@
  *   Template variables.
  */
 function lightning_media_preprocess_views_view_grid(array &$variables) {
-  /** @var \Drupal\views\ViewExecutable $view */
+  /** @var ViewExecutable $view */
   $view = $variables['view'];

   if ($view->display_handler->getPluginId() == 'entity_browser') {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


58) modules/contrib/lightning_media/lightning_media.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\editor\EditorInterface;
+use Drupal\entity_browser\EntityBrowserInterface;
+use Drupal\entity_browser\WidgetInterface;
+use Drupal\views\ViewEntityInterface;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 /**
  * @file
  * Contains install and update routines for Lightning Media.
@@ @@
  * Changes the media_library CKEditor button to media_browser.
  */
 function lightning_media_update_8009() {
-  /** @var \Drupal\editor\EditorInterface $editor */
+  /** @var EditorInterface $editor */
   $editor = Editor::load('rich_text');
   if ($editor) {
     $settings = $editor->getSettings();
@@ @@
  * Adds the library filter to the media view's Entity Browser display.
  */
 function lightning_media_update_8012() {
-  /** @var \Drupal\entity_browser\EntityBrowserInterface $browser */
+  /** @var EntityBrowserInterface $browser */
   $browser = EntityBrowser::load('media_browser');
   if (empty($browser)) {
     return;
   }

-  /** @var \Drupal\entity_browser\WidgetInterface $widget */
+  /** @var WidgetInterface $widget */
   foreach ($browser->getWidgets() as $widget) {
     if ($widget->getPluginId() == 'view') {
       $configuration = $widget->getConfiguration();

       if ($configuration['settings']['view'] == 'media') {
-        /** @var \Drupal\views\ViewEntityInterface $view */
+        /** @var ViewEntityInterface $view */
         $view = View::load('media');
         // Reference the display options directly, for readability.
         $display = &$view->getDisplay($configuration['settings']['view_display'])['display_options'];
@@ @@
 function lightning_media_update_8017() {
   \Drupal::service('plugin.manager.field.widget')->clearCachedDefinitions();

-  /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+  /** @var EntityFormDisplayInterface $form_display */
   foreach (EntityFormDisplay::loadMultiple() as $form_display) {
     foreach ($form_display->getComponents() as $key => $component) {
       if ($component['type'] == 'image_immutable') {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 58 files have been changed by Rector                                      

