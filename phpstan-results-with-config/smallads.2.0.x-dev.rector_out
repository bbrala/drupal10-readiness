modules/contrib/smallads/csvimport-deprecated/smallads_import.module
modules/contrib/smallads/csvimport-deprecated/src/ImportSmallads.php
modules/contrib/smallads/modules/smallads_geo/smallads_geo.install
modules/contrib/smallads/modules/smallads_geo/smallads_geo.module
modules/contrib/smallads/modules/smallads_geo/src/Plugin/Field/FieldType/OwnerCoordinatesItemList.php
modules/contrib/smallads/modules/smallads_group/smallads_group.module
modules/contrib/smallads/modules/smallads_group/src/Plugin/GroupContentEnabler/GroupSmallads.php
modules/contrib/smallads/modules/smallads_group/src/Plugin/GroupContentEnabler/SmalladDeriver.php
modules/contrib/smallads/modules/smallads_group/src/RouteSubscriber.php
modules/contrib/smallads/modules/smallads_group/src/SmalladGroupAccessControlHandler.php
modules/contrib/smallads/modules/smallads_index/smallads_index.install
modules/contrib/smallads/modules/smallads_index/smallads_index.module
modules/contrib/smallads/modules/smallads_index/src/Form.php
modules/contrib/smallads/modules/smallads_index/src/Plugin/Derivative/SmalladIndexSearchTasks.php
modules/contrib/smallads/modules/smallads_index/src/Plugin/Search/SmalladIndexSearch.php
modules/contrib/smallads/modules/smallads_index/src/RouteSubscriber.php
modules/contrib/smallads/modules/smallads_mcapi/smallads_mcapi.module
modules/contrib/smallads/modules/smallads_mcapi/src/FirstWallet.php
modules/contrib/smallads/smallads.install
modules/contrib/smallads/smallads.module
modules/contrib/smallads/smallads.tokens.inc
modules/contrib/smallads/src/Controller/Smallad.php
modules/contrib/smallads/src/Entity/Smallad.php
modules/contrib/smallads/src/Entity/SmalladInterface.php
modules/contrib/smallads/src/Entity/SmalladType.php
modules/contrib/smallads/src/EventSubscriber/MigrationSubscriber.php
modules/contrib/smallads/src/EventSubscriber/RouteSubscriber.php
modules/contrib/smallads/src/Form/Config.php
modules/contrib/smallads/src/Form/PreAddForm.php
modules/contrib/smallads/src/Form/SmalladDeleteConfirm.php
modules/contrib/smallads/src/Form/SmalladEdit.php
modules/contrib/smallads/src/Form/SmalladTypeForm.php
modules/contrib/smallads/src/Plugin/Action/DeleteSmallad.php
modules/contrib/smallads/src/Plugin/Action/UnpublishSmallad.php
modules/contrib/smallads/src/Plugin/Block/AddAdBlock.php
modules/contrib/smallads/src/Plugin/Block/NestedCategoriesBlock.php
modules/contrib/smallads/src/Plugin/Condition/AdContext.php
modules/contrib/smallads/src/Plugin/Derivative/SmalladActions.php
modules/contrib/smallads/src/Plugin/Derivative/SmalladMenuLink.php
modules/contrib/smallads/src/Plugin/Derivative/SmalladTasks.php
modules/contrib/smallads/src/Plugin/DevelGenerate/SmalladDevelGenerate.php
modules/contrib/smallads/src/Plugin/Field/FieldFormatter/TimeBeforeAfterFormatter.php
modules/contrib/smallads/src/Plugin/Field/FieldType/ScopeItem.php
modules/contrib/smallads/src/Plugin/QueueWorker/ExpiredMail.php
modules/contrib/smallads/src/Plugin/Search/SmalladSearch.php
modules/contrib/smallads/src/Plugin/migrate/D7SmalladDeriver.php
modules/contrib/smallads/src/Plugin/migrate/destination/EntitySmallad.php
modules/contrib/smallads/src/Plugin/migrate/source/d7/Smallad.php
modules/contrib/smallads/src/Plugin/views/argument/SinceTime.php
modules/contrib/smallads/src/Plugin/views/argument_default/AdTypeFromContext.php
modules/contrib/smallads/src/SmalladAccessControlHandler.php
modules/contrib/smallads/src/SmalladListBuilder.php
modules/contrib/smallads/src/SmalladStorage.php
modules/contrib/smallads/src/SmalladTypeAccessControlHandler.php
modules/contrib/smallads/src/SmalladTypeListBuilder.php
modules/contrib/smallads/src/SmalladViewBuilder.php
modules/contrib/smallads/src/SmalladViewsData.php

17 files with changes
=====================

1) modules/contrib/smallads/src/SmalladListBuilder.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

@@ @@
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;

@@ @@
   /**
    * Constructs a new SmalladListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatter $date_formatter
+   * @param DateFormatter $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatter $date_formatter, RedirectDestinationInterface $redirect_destination) {
@@ @@
     $row['scope'] = $scopeMap[$entity->scope->value];
     $row['type'] = $entity->type->entity->label();
     $row['title'] = $entity->title->value;
-    $row['changed'] = $this->dateFormatter->formatInterval(REQUEST_TIME - $entity->changed->value);
+    $row['changed'] = $this->dateFormatter->formatInterval(\Drupal::time()->getRequestTime() - $entity->changed->value);

     return $row + parent::buildRow($entity);
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/smallads/src/Plugin/Search/SmalladSearch.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * A database connection object.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The Renderer service to format the username and node.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The search index.
    *
-   * @var \Drupal\search\SearchIndexInterface
+   * @var SearchIndexInterface
    */
   protected $searchIndex;

@@ @@
    * This method can assume that $this->isSearchExecutable() has already been
    * checked and returned TRUE.
    *
-   * @return \Drupal\Core\Database\StatementInterface|null
+   * @return StatementInterface|null
    *   Results from search query execute() method, or NULL if the search
    *   failed.
    */
@@ @@
   /**
    * Prepares search results for rendering.
    *
-   * @param \Drupal\Core\Database\StatementInterface $found
+   * @param StatementInterface $found
    *   Results found from a successful search query execute() method.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/smallads/src/Plugin/Field/FieldFormatter/TimeBeforeAfterFormatter.php:27

    ---------- begin diff ----------
@@ @@
     // @todo include the library
     $elements = array();
     foreach ($items as $delta => &$item) {
-      if (REQUEST_TIME > $item->value) {
+      if (\Drupal::time()->getRequestTime() > $item->value) {
         $item->value = FALSE;
         $class = 'expired';
       }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/smallads/src/Plugin/Derivative/SmalladMenuLink.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\smallads\Plugin\Derivative;

+use Drupal\Core\Entity\EntityType;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   public function getDerivativeDefinitions($base_plugin_definition) {
     foreach ($this->smallAdTypeStorage->loadMultiple() as $id => $type) {
       // $type seems to be untranslated for some reason
-      /** @var \Drupal\Core\Entity\EntityType $type */
+      /** @var EntityType $type */
       $this->derivatives[$id.".add_form.link"] = [
         'title' => t('Add @type', ['@type' => strtolower($type->label())]),
         'route_name' => 'entity.smallad.add_form',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/smallads/src/Plugin/Block/AddAdBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\smallads\Plugin\Block;

+use Drupal\Core\Form\FormBuilderInterface;
 use Drupal\smallads\Entity\SmalladType;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Block\BlockBase;
@@ @@
   /**
    * The form builder service.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/smallads/src/Form/SmalladTypeForm.php:72

    ---------- begin diff ----------
@@ @@
     $smallad_type = $this->entity;
     $smallad_type->save();

-    $form_state->setRedirectUrl($smallad_type->urlInfo('collection'));
+    $form_state->setRedirectUrl($smallad_type->toUrl('collection'));
     // If the plural has changed we need to rebuild the menu.
     \Drupal::service('router.builder')->rebuild();
   }
    ----------- end diff -----------

Applied rules:
 * EntityInterfaceUrlInfoRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/smallads/src/Form/SmalladEdit.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\smallads\Form;

+use Symfony\Component\HttpFoundation\ParameterBag;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
 class SmalladEdit extends ContentEntityForm {

   /**
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

   /**
-   * @var \Symfony\Component\HttpFoundation\ParameterBag
+   * @var ParameterBag
    */
   protected $params;

@@ @@
   public function validateForm(array &$form, FormStateInterface $form_state) {
     $this->entity = parent::validateForm($form, $form_state);
     // Warn the user about the expiry date.
-    if ($this->entity->expires->value - REQUEST_TIME > 0) {// Expires in the future.
+    if ($this->entity->expires->value - \Drupal::time()->getRequestTime() > 0) {// Expires in the future.
       if ($this->entity->scope->value == SmalladInterface::SCOPE_PRIVATE) {
         $message = $this->t('If the expiry date is after now, the scope must not be private');
         $form_state->setErrorByName('scope', $message);
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/smallads/src/Form/Config.php:21

    ---------- begin diff ----------
@@ @@
    * @param ConfigFactoryInterface $config_factory
    * @param RouteBuilderInterface $router_builder
    */
-  function __construct(\Drupal\Core\Config\ConfigFactoryInterface $config_factory, RouteBuilderInterface $router_builder) {
+  function __construct(ConfigFactoryInterface $config_factory, RouteBuilderInterface $router_builder) {
     parent::__construct($config_factory);
     $this->routeBuilder = $router_builder;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/smallads/src/EventSubscriber/RouteSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\smallads\EventSubscriber;

+use Drupal\smallads\Entity\SmalladType;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\RouteSubscriberBase;
 use Symfony\Component\Routing\Route;
 use Symfony\Component\Routing\RouteCollection;
@@ @@
 class RouteSubscriber extends RouteSubscriberBase {

   /**
-   * @var Drupal\smallads\Entity\SmalladType[]
+   * @var SmalladType[]
    */
   private $smalladTypes;

-  function __construct(\Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager) {
+  function __construct(EntityTypeManagerInterface $entity_type_manager) {
     $this->smalladTypes = $entity_type_manager->getStorage('smallad_type')->loadMultiple();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/smallads/smallads.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityInterface;
 /**
  * @file
  *
@@ @@
   // Find out how to filter by relative dates.
   $smids = \Drupal::entityTypeManager()->getStorage('smallad')->getQuery()
     // Actually the date is stored as dd-mm-yyyy.
-    ->condition('expires', gmdate('Y-m-d', REQUEST_TIME), '<')
+    ->condition('expires', gmdate('Y-m-d', \Drupal::time()->getRequestTime()), '<')
     ->condition('scope', 0, '>')
     ->execute();
   $queue = \Drupal::queue('smallads_expired_mail');
@@ @@
  * Implements hook_ENTITY_TYPE_delete().
  * Delete all the user's smallads.
  */
-function smallads_user_delete(Drupal\Core\Entity\EntityInterface $entity) {
+function smallads_user_delete(EntityInterface $entity) {
   $ads = \Drupal::entityTypeManager()
     ->getStorage('smallad')
     ->loadByProperties(['uid' => $entity->id()]);
@@ @@
   if (isset($form['override']['controls']['group']['#options']['small-ad'])) {
     $form['options']['name']['#caption'] = t('N.B. It may be necessary to disable your ad-blocker to see the smallad fields.');
   }
-}
+}
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector


11) modules/contrib/smallads/smallads.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\user\Entity\Role;
+use Drupal\Core\Field\BaseFieldDefinition;
+use Drupal\views\Entity\View;
 /**
  * @file
  * Hooks for installing the smallads module.
@@ @@


 function smallads_update_8001(){
-  foreach (\Drupal\user\Entity\Role::loadMultiple() as $role) {
+  foreach (Role::loadMultiple() as $role) {
     if ($role->hasPermission('post ad')) {
       $role->revokePermission('post ad')->grantpermission('post smallad')->save();
     }
@@ @@
  * Standardise the language field.
  */
 function smallads_update_8002() {
-  $definition = Drupal\Core\Field\BaseFieldDefinition::create('language')
+  $definition = BaseFieldDefinition::create('language')
     ->setLabel(t('Language'))
     ->setDisplayOptions('view', [
       'region' => 'hidden',
@@ @@
  * Remove the views 'scope' filter.
  */
 function smallads_update_9001() {
-  foreach (\Drupal\views\Entity\View::loadMultiple() as $view) {
+  foreach (View::loadMultiple() as $view) {
     $save = 0;
-    /** @var \Drupal\views\Entity\View $view */
+    /** @var View $view */
     $displays = $view->get('display');
     foreach ($displays as $display_id => $display) {
       $display = &$view->getDisplay($display_id);
@@ @@
   $v['display']['my_ads']['id'] = 'my_ads';
   $config->setData($v);
   $config->save();
-}
+}
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


12) modules/contrib/smallads/modules/smallads_index/src/RouteSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\smallads_index;

+use Drupal\smallads\Entity\SmalladType;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\RouteSubscriberBase;
 use Symfony\Component\Routing\Route;
 use Symfony\Component\Routing\RouteCollection;
@@ @@
 class RouteSubscriber extends RouteSubscriberBase {

   /**
-   * @var Drupal\smallads\Entity\SmalladType[]
+   * @var SmalladType[]
    */
   private $smalladTypes;

-  function __construct(\Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager) {
+  function __construct(EntityTypeManagerInterface $entity_type_manager) {
     $this->smalladTypes = $entity_type_manager->getStorage('smallad_type')->loadMultiple();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/smallads/modules/smallads_index/src/Plugin/Search/SmalladIndexSearch.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * A database connection object.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * An entityType manager object.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * A module manager object.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * A config object for 'search.settings'.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $searchSettings;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The Drupal account to use for checking for access to advanced search.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;

@@ @@
   /**
    * The Renderer service to format the username and node.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
    * This method can assume that $this->isSearchExecutable() has already been
    * checked and returned TRUE.
    *
-   * @return \Drupal\Core\Database\StatementInterface|null
+   * @return StatementInterface|null
    *   Results from search query execute() method, or NULL if the search
    *   failed.
    */
@@ @@
   /**
    * Prepares search results for rendering.
    *
-   * @param \Drupal\Core\Database\StatementInterface $found
+   * @param StatementInterface $found
    *   Results found from a successful search query execute() method.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/smallads/modules/smallads_index/src/Form.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\smallads_index;

+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Core\Link;
+use Drupal\Core\Render\Markup;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
 class Form extends FormBase {

   /**
-   * @var Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   private $request;

@@ @@
     return $form;
   }

-  function submitForm(array &$form, \Drupal\Core\Form\FormStateInterface $form_state) {
+  function submitForm(array &$form, FormStateInterface $form_state) {
     //save the search settings
     $prefs = [
       'radius' => $form_state->getValue('radius'),
@@ @@
           'icon_anchor' => ['x' => 24, 'y' => 32],//not supported yet in leaflet module Beta1
           'popup_anchor' => ['x' => 16, 'y' => 0],
         ],
-        'popup' => \Drupal\Core\Link::fromTextAndUrl($result->title, $dest)->toString() . '<br>'.$result->body,
+        'popup' => Link::fromTextAndUrl($result->title, $dest)->toString() . '<br>'.$result->body,
         'leaflet_id' => $result->id
       ];
     }
@@ @@
         $snippet = $this->t(
             '@snippet<strong>Keywords</strong>: @words<br />on %site',
             [
-              '@snippet' => $body ? \Drupal\Core\Render\Markup::create($body.'<br >') : '',
+              '@snippet' => $body ? Markup::create($body.'<br >') : '',
               '@words' => $result->keywords,
-              '%site' => \Drupal\Core\Link::fromTextAndUrl($result->name, Url::fromUri($result->url))->toString()
+              '%site' => Link::fromTextAndUrl($result->name, Url::fromUri($result->url))->toString()
             ]
         );
         $hits[] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/smallads/modules/smallads_index/smallads_index.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Psr\Http\Message\ResponseInterface;
+use Drupal\Core\Form\FormStateInterface;
+use function GuzzleHttp\json_encode;
 use Drupal\smallads\Entity\Smallad;
 use Drupal\smallads\Entity\SmalladInterface;
 use \GuzzleHttp\Psr7\Response;
@@ @@
     'keywords' => taxonomy_implode_tags($smallad->categories->referencedEntities()),
     'created' => $smallad->getCreatedTime(),
     'expires' => $smallad->expires->value,
-    'image' => ($smallad->image && $smallad->image->entity) ? substr(file_url_transform_relative(file_create_url($smallad->image->entity->getFileUri())), 1) : '',
+    'image' => ($smallad->image && $smallad->image->entity) ? substr(\Drupal::service('file_url_generator')->generateString($smallad->image->entity->getFileUri()), 1) : '',
     'scope' => $smallad->scope->value,
     'location' => $smallad->coordinates->value,
     'directexchange' => (int)$smallad->directexchange->value,
@@ @@
  * @param string $url
  * @param string $body
  *
- * @return Psr\Http\Message\ResponseInterface
+ * @return ResponseInterface
  */
 function smallads_index_http_request($method, $url, $body = '') : Response {
   if ($key = \Drupal::config('smallads_index.settings')->get('apikey')) {
-    $options['body'] = GuzzleHttp\json_encode($body);
+    $options['body'] = json_encode($body);
     $options['headers'] = [
       'Content-Type' => 'application/json',
       'apikey' => $key
@@ @@
     catch(\Exception $e)  {
       $message = 'No response from '.SMALLAD_INDEX_URL;
       trigger_error($message, E_USER_ERROR);
-      $response = new \GuzzleHttp\Psr7\Response(404, [], NULL, NULL, $message);
+      $response = new Response(404, [], NULL, NULL, $message);
     }
   }
   else {
     \Drupal::moduleHandler()->loadInstall('smallads_index', 'install');
     \Drupal::messenger()->addStatus(strtoupper($method) ." to /$url cannot run without APIkey");
-    $response = new \GuzzleHttp\Psr7\Response(403, [], NULL, NULL, 'No apikey given');
+    $response = new Response(403, [], NULL, NULL, 'No apikey given');
   }
   return $response;
 }
@@ @@
 /**
  * Implements hook_form_FORM_ID_alter().
  */
-function smallads_index_form_smallads_config_form_alter(&$form, Drupal\Core\Form\FormStateInterface $form_state) {
+function smallads_index_form_smallads_config_form_alter(&$form, FormStateInterface $form_state) {
   $form['solsearch'] = [
     '#title' => 'SolSearch',
     '#description' => t('Web service for global offers & wants.'),
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector


16) modules/contrib/smallads/modules/smallads_group/src/SmalladGroupAccessControlHandler.php:25

    ---------- begin diff ----------
@@ @@
   protected $groupContext;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a NodeAccessControlHandler object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    * @param \Drupal\group\Context\GroupRouteContext $group_context
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
+   * @param EntityTypeManager $entity_type_manager
    */
   public function __construct(EntityTypeInterface $entity_type, GroupRouteContext $group_context, EntityTypeManager $entity_type_manager) {
     parent::__construct($entity_type);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/smallads/csvimport-deprecated/src/ImportSmallads.php:6

    ---------- begin diff ----------
@@ @@
  */
 namespace Drupal\smallads_import;

+use Drupal\Core\Form\FormBase;
+use Drupal\Core\Url;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Language\Language;
 use GuzzleHttp;

-class ImportSmallads extends \Drupal\Core\Form\FormBase {
+class ImportSmallads extends FormBase {

   private $database;

@@ @@
       '#value' => 'import',
       '#weight' => 4
     );
-    $form['#redirect'] = \Drupal\Core\Url::fromRoute('entity.smallad.collection');
+    $form['#redirect'] = Url::fromRoute('entity.smallad.collection');
     return $form;
   }

@@ @@
     foreach ($incoming_terms as $key => $term) {
       $incoming_terms[$key] = trim($term);
     }
-    $all_terms = db_query("SELECT LOWER(name) FROM {taxonomy_term_data}")->fetchCol();
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    $all_terms = \Drupal::database()->query("SELECT LOWER(name) FROM {taxonomy_term_data}")->fetchCol();
     $new_terms = array_diff(array_unique($incoming_terms), $all_terms);

     if (count($new_terms)) {
@@ @@
     $rows = $this->loadCsv($form_state);

     //get the terms so we can lookup the ids
-    $all_terms = db_query("
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    $all_terms = \Drupal::database()->query("
       SELECT d.tid, d.vid, d.name, LOWER(d.name) as term_name, v.name, v.machine_name
       FROM {taxonomy_term_data} d
       LEFT JOIN {taxonomy_vocabulary} v ON d.vid = v.vid
@@ @@
       }
       node_save($node);
       if (array_key_exists('created', $row)) {
-        db_query(
-          "UPDATE {node} SET changed = :changed where nid = $node->nid",
-          array('changed' => is_numeric($row['created']) ? $row['created'] : strtotime($row['created']))
-        );
+        // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+        // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+        \Drupal::database()->query("UPDATE {node} SET changed = :changed where nid = $node->nid", array('changed' => is_numeric($row['created']) ? $row['created'] : strtotime($row['created'])));
       }
       $imported++;
     }
    ----------- end diff -----------

Applied rules:
 * DBQueryRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [ERROR] Could not process                                                      
         "modules/contrib/smallads/src/Plugin/DevelGenerate/SmalladDevelGenerate.p
         hp" file, due to:                                                      
         "Analyze error: "Class Drupal\devel_generate\DevelGenerateBase not     
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/smallads/modules/smallads_group/src/Plugin/GroupContentE
         nabler/GroupSmallads.php" file, due to:                                
         "Analyze error: "Class Drupal\group\Plugin\GroupContentEnablerBase not 
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

