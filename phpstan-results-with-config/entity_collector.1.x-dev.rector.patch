diff --git a/entity_collection.page.inc b/entity_collection.page.inc
index f90dc01..922462f 100644
--- a/entity_collection.page.inc
+++ b/entity_collection.page.inc
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\entity_collector\Entity\EntityCollectionInterface;
+use Drupal\entity_collector\Entity\EntityCollectionTypeInterface;
 /**
  * @file
  * Contains entity_collection.page.inc.
@@ -21,9 +23,9 @@ use Drupal\Core\Render\Element;
  */
 function template_preprocess_entity_collection(array &$variables) {
 
-  /** @var \Drupal\entity_collector\Entity\EntityCollectionInterface $entityCollection */
+  /** @var EntityCollectionInterface $entityCollection */
   $entityCollection = $variables['elements']['#entity_collection'];
-  /** @var \Drupal\entity_collector\Entity\EntityCollectionTypeInterface $entityCollectionType */
+  /** @var EntityCollectionTypeInterface $entityCollectionType */
   $entityCollectionType = Drupal::service('entity_type.manager')
     ->getStorage('entity_collection_type')
     ->load($entityCollection->bundle());
@@ -40,4 +42,4 @@ function template_preprocess_entity_collection(array &$variables) {
   foreach (Element::children($variables['elements']) as $key) {
     $variables['content'][$key] = $variables['elements'][$key];
   }
-}
\ No newline at end of file
+}
diff --git a/entity_collector.module b/entity_collector.module
index 2e436ab..f5ceb74 100644
--- a/entity_collector.module
+++ b/entity_collector.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\entity_collector\Entity\EntityCollectionInterface;
+use Drupal\entity_collector\Entity\EntityCollectionTypeInterface;
 /**
  * Implements hook_theme().
  */
@@ -40,7 +42,7 @@ function entity_collector_theme() {
  */
 function entity_collector_theme_suggestions_entity_collection(array $variables) {
   $suggestions = [];
-  /** @var \Drupal\entity_collector\Entity\EntityCollectionInterface $entity */
+  /** @var EntityCollectionInterface $entity */
   $entity = $variables['elements']['#entity_collection'];
   $sanitized_view_mode = str_replace('.', '_', $variables['elements']['#view_mode']);
 
@@ -60,9 +62,9 @@ function entity_collector_preprocess_field(&$variables) {
     return;
   }
 
-  /** @var \Drupal\entity_collector\Entity\EntityCollectionInterface $entityCollection */
+  /** @var EntityCollectionInterface $entityCollection */
   $entityCollection = $variables['element']['#object'];
-  /** @var \Drupal\entity_collector\Entity\EntityCollectionTypeInterface $entityCollectionType */
+  /** @var EntityCollectionTypeInterface $entityCollectionType */
   $entityCollectionType = \Drupal::service('entity_type.manager')
     ->getStorage('entity_collection_type')
     ->load($entityCollection->bundle());
@@ -103,7 +105,7 @@ function _entity_collector_prerender_item($variables) {
 
   $variables['#attributes']['class'][] = 'js-entity-collection-item';
 
-  /** @var \Drupal\entity_collector\Entity\EntityCollectionInterface $entity */
+  /** @var EntityCollectionInterface $entity */
   $entity = NULL;
 
   if (isset($variables['#object'])) {
diff --git a/src/ContextProvider/EntityCollectionRouteContext.php b/src/ContextProvider/EntityCollectionRouteContext.php
index 2ec97c5..fd15187 100644
--- a/src/ContextProvider/EntityCollectionRouteContext.php
+++ b/src/ContextProvider/EntityCollectionRouteContext.php
@@ -21,23 +21,23 @@ class EntityCollectionRouteContext implements ContextProviderInterface {
   /**
    * The route match object.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new EntityCollectionRouteContext.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $routeMatch
+   * @param RouteMatchInterface $routeMatch
    *   The route match object.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(RouteMatchInterface $routeMatch, EntityTypeManagerInterface $entityTypeManager) {
diff --git a/src/Controller/EntityCollectionActionController.php b/src/Controller/EntityCollectionActionController.php
index 9693d29..c507215 100644
--- a/src/Controller/EntityCollectionActionController.php
+++ b/src/Controller/EntityCollectionActionController.php
@@ -20,7 +20,7 @@ class EntityCollectionActionController extends EntityCollectionControllerBase im
    * @param int $entityCollectionId
    * @param int $entityId
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse|\Drupal\Core\Ajax\AjaxResponse
+   * @return RedirectResponse|AjaxResponse
    *   The response.
    * @throws \Exception
    */
@@ -56,7 +56,7 @@ class EntityCollectionActionController extends EntityCollectionControllerBase im
    * @param int $entityCollectionId
    * @param int $entityId
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse|\Drupal\Core\Ajax\AjaxResponse
+   * @return RedirectResponse|AjaxResponse
    *   The response.
    * @throws \Exception
    */
diff --git a/src/Controller/EntityCollectionAjaxListController.php b/src/Controller/EntityCollectionAjaxListController.php
index 3135677..6e3620e 100644
--- a/src/Controller/EntityCollectionAjaxListController.php
+++ b/src/Controller/EntityCollectionAjaxListController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_collector\Controller;
 
+use Drupal\Core\Render\Renderer;
+use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\InvokeCommand;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ -22,32 +24,32 @@ class EntityCollectionAjaxListController extends EntityCollectionControllerBase
   /**
    * Plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   private $pluginManager;
 
   /**
    * Render.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   private $renderer;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
    * EntityCollectorApiController constructor.
    *
-   * @param \Drupal\entity_collector\Service\EntityCollectionManagerInterface $entityCollectionManager
+   * @param EntityCollectionManagerInterface $entityCollectionManager
    *   The entity collection manager.
-   * @param \Drupal\Core\Session\AccountInterface|\Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountInterface|AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
    */
   public function __construct(EntityCollectionManagerInterface $entityCollectionManager, AccountProxyInterface $currentUser, RequestStack $requestStack, PluginManagerInterface $pluginManager, EntityTypeManagerInterface $entityTypeManager, RendererInterface $renderer) {
@@ -78,7 +80,7 @@ class EntityCollectionAjaxListController extends EntityCollectionControllerBase
    * @param string $entityCollectionTypeId
    * @param int $entityCollectionId
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse|\Drupal\Core\Ajax\AjaxResponse
+   * @return RedirectResponse|AjaxResponse
    *   The response.
    * @throws \Exception
    */
@@ -122,10 +124,10 @@ class EntityCollectionAjaxListController extends EntityCollectionControllerBase
   /**
    * Show the correct fields for the entities.
    *
-   * @param \Drupal\Core\Ajax\AjaxResponse $response
-   * @param \Drupal\entity_collector\Entity\EntityCollectionInterface $entityCollection
+   * @param AjaxResponse $response
+   * @param EntityCollectionInterface $entityCollection
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   private function showCorrectFieldsForEntities(AjaxResponse $response, EntityCollectionInterface $entityCollection) {
     $fieldDefinition = $this->entityCollectionManager->getSourceFieldDefinition($entityCollection);
@@ -156,7 +158,7 @@ class EntityCollectionAjaxListController extends EntityCollectionControllerBase
    * @param string $entityCollectionTypeId
    *   The entity collection type.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The http response.
    * @throws \Exception
    */
@@ -179,7 +181,7 @@ class EntityCollectionAjaxListController extends EntityCollectionControllerBase
    *
    * @param string $entityCollectionTypeId
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The http response.
    * @throws \Exception
    */
diff --git a/src/Controller/EntityCollectionBlockController.php b/src/Controller/EntityCollectionBlockController.php
index ea96936..64fb62f 100644
--- a/src/Controller/EntityCollectionBlockController.php
+++ b/src/Controller/EntityCollectionBlockController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_collector\Controller;
 
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\block\Entity\Block;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\ReplaceCommand;
@@ -18,46 +20,46 @@ class EntityCollectionBlockController implements ContainerInjectionInterface {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $currentUser;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   private $requestStack;
 
   /**
    * Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
    * Renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   private $renderer;
 
   /**
    * Entity Collection Manager.
    *
-   * @var \Drupal\entity_collector\Service\EntityCollectionManagerInterface
+   * @var EntityCollectionManagerInterface
    */
   private $entityCollectionManager;
 
   /**
    * EntityCollectorApiController constructor.
    *
-   * @param \Drupal\entity_collector\Service\EntityCollectionManagerInterface $entityCollectionManager
+   * @param EntityCollectionManagerInterface $entityCollectionManager
    *   The entity collection manager.
-   * @param \Drupal\Core\Session\AccountInterface|\Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountInterface|AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
    */
   public function __construct(AccountProxyInterface $currentUser, RequestStack $requestStack, EntityTypeManagerInterface $entityTypeManager, RendererInterface $renderer, EntityCollectionManagerInterface $entityCollectionManager) {
@@ -86,8 +88,8 @@ class EntityCollectionBlockController implements ContainerInjectionInterface {
    *
    * @param string $blockElementId
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @return AjaxResponse
+   * @throws InvalidPluginDefinitionException
    * @throws \Exception
    */
   public function refresh($blockId) {
@@ -96,7 +98,7 @@ class EntityCollectionBlockController implements ContainerInjectionInterface {
     $this->entityCollectionManager->acquireLock($lockName);
 
     try {
-      /** @var \Drupal\block\Entity\Block $entityCollectionBlock */
+      /** @var Block $entityCollectionBlock */
       $entityCollectionBlock = $this->getEntityCollectionBlock($blockId);
       $build = $this->getEntityCollectionBlockBuild($entityCollectionBlock);
       $render = $this->renderer->renderRoot($build);
@@ -141,11 +143,11 @@ class EntityCollectionBlockController implements ContainerInjectionInterface {
    *
    * @param $blockId
    *
-   * @return \Drupal\block\Entity\Block
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @return Block
+   * @throws InvalidPluginDefinitionException
    */
   private function getEntityCollectionBlock($blockId) {
-    /** @var \Drupal\block\Entity\Block $block */
+    /** @var Block $block */
     $block = $this->entityTypeManager->getStorage('block')
       ->load($blockId);
 
@@ -155,7 +157,7 @@ class EntityCollectionBlockController implements ContainerInjectionInterface {
   /**
    * Get the Entity Collection Block render array.
    *
-   * @param \Drupal\block\Entity\Block $entityCollectionBlock
+   * @param Block $entityCollectionBlock
    *
    * @return array
    */
diff --git a/src/Controller/EntityCollectionController.php b/src/Controller/EntityCollectionController.php
index 35f383e..21cb629 100644
--- a/src/Controller/EntityCollectionController.php
+++ b/src/Controller/EntityCollectionController.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\entity_collector\Controller;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\entity_collector\EntityCollectionStorageInterface;
 use Drupal\Core\Link;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\ControllerBase;
@@ -23,7 +26,7 @@ class EntityCollectionController extends ControllerBase implements ContainerInje
    *
    * @return array
    *   An array suitable for drupal_render().
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function revisionShow($entity_collection_revision) {
     $entityCollection = $this->entityTypeManager()
@@ -43,10 +46,10 @@ class EntityCollectionController extends ControllerBase implements ContainerInje
    *
    * @return string
    *   The page title.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function revisionPageTitle($entity_collection_revision) {
-    /** @var \Drupal\entity_collector\Entity\EntityCollectionInterface $entityCollection */
+    /** @var EntityCollectionInterface $entityCollection */
     $entityCollection = $this->entityTypeManager()
       ->getStorage('entity_collection')
       ->loadRevision($entity_collection_revision);
@@ -59,12 +62,12 @@ class EntityCollectionController extends ControllerBase implements ContainerInje
   /**
    * Generates an overview table of older revisions of a Entity collection .
    *
-   * @param \Drupal\entity_collector\Entity\EntityCollectionInterface $entityCollection
+   * @param EntityCollectionInterface $entityCollection
    *
    * @return array
    *   An array as expected by drupal_render().
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws InvalidPluginDefinitionException
+   * @throws EntityMalformedException
    */
   public function revisionOverview(EntityCollectionInterface $entity_collection) {
     $account = $this->currentUser();
@@ -72,7 +75,7 @@ class EntityCollectionController extends ControllerBase implements ContainerInje
     $langname = $entity_collection->language()->getName();
     $languages = $entity_collection->getTranslationLanguages();
     $hasTranslations = (count($languages) > 1);
-    /** @var \Drupal\entity_collector\EntityCollectionStorageInterface $entityCollectionStorage */
+    /** @var EntityCollectionStorageInterface $entityCollectionStorage */
     $entityCollectionStorage = $this->entityTypeManager()
       ->getStorage('entity_collection');
 
@@ -92,7 +95,7 @@ class EntityCollectionController extends ControllerBase implements ContainerInje
     $latestRevision = TRUE;
 
     foreach (array_reverse($vids) as $vid) {
-      /** @var \Drupal\entity_collector\Entity\EntityCollectionInterface $revision */
+      /** @var EntityCollectionInterface $revision */
       $revision = $entityCollectionStorage->loadRevision($vid);
       // Only show revisions that are affected by the language that is being
       // displayed.
diff --git a/src/Controller/EntityCollectionControllerBase.php b/src/Controller/EntityCollectionControllerBase.php
index 0e13af9..c0758dd 100644
--- a/src/Controller/EntityCollectionControllerBase.php
+++ b/src/Controller/EntityCollectionControllerBase.php
@@ -19,32 +19,32 @@ class EntityCollectionControllerBase implements ContainerInjectionInterface {
   /**
    * The entity collection manager.
    *
-   * @var \Drupal\entity_collector\Service\EntityCollectionManagerInterface
+   * @var EntityCollectionManagerInterface
    */
   protected $entityCollectionManager;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * EntityCollectorApiController constructor.
    *
-   * @param \Drupal\entity_collector\Service\EntityCollectionManagerInterface $entityCollectionManager
+   * @param EntityCollectionManagerInterface $entityCollectionManager
    *   The entity collection manager.
-   * @param \Drupal\Core\Session\AccountInterface|\Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountInterface|AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
    */
   public function __construct(EntityCollectionManagerInterface $entityCollectionManager, AccountProxyInterface $currentUser, RequestStack $requestStack) {
@@ -67,7 +67,7 @@ class EntityCollectionControllerBase implements ContainerInjectionInterface {
   /**
    * Check for view access.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    * @param $entityCollectionId
    *
    * @return mixed
@@ -80,7 +80,7 @@ class EntityCollectionControllerBase implements ContainerInjectionInterface {
   /**
    * Check for update access.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    * @param $entityCollectionId
    *
    * @return mixed
@@ -93,7 +93,7 @@ class EntityCollectionControllerBase implements ContainerInjectionInterface {
   /**
    * Check for delete access.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    * @param $entityCollectionId
    *
    * @return mixed
diff --git a/src/Element/EntityCollectionLink.php b/src/Element/EntityCollectionLink.php
index d30edf4..f4143f3 100644
--- a/src/Element/EntityCollectionLink.php
+++ b/src/Element/EntityCollectionLink.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_collector\Element;
 
+use Drupal\entity_collector\Entity\EntityCollectionInterface;
+use Drupal\entity_collector\Entity\EntityCollectionTypeInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Render\Element\Link;
 use Drupal\Core\Render\Element\RenderElement;
@@ -36,9 +38,9 @@ class EntityCollectionLink extends Link {
       return [];
     }
 
-    /** @var \Drupal\entity_collector\Entity\EntityCollectionInterface $entityCollection */
+    /** @var EntityCollectionInterface $entityCollection */
     $entityCollection = $element['#entityCollection'];
-    /** @var \Drupal\entity_collector\Entity\EntityCollectionTypeInterface $entityCollectionType */
+    /** @var EntityCollectionTypeInterface $entityCollectionType */
     $entityCollectionType = \Drupal::service('entity_collection.manager')->getEntityCollectionBundleType($entityCollection);
 
     $element['#title'] = $entityCollection->label();
diff --git a/src/Entity/EntityCollectionInterface.php b/src/Entity/EntityCollectionInterface.php
index f393737..b49b104 100644
--- a/src/Entity/EntityCollectionInterface.php
+++ b/src/Entity/EntityCollectionInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_collector\Entity;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\RevisionLogInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
@@ -97,7 +98,7 @@ interface EntityCollectionInterface extends ContentEntityInterface, RevisionLogI
   /**
    * Gets the Entity collection revision author.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity for the revision author.
    */
   public function getRevisionUser();
diff --git a/src/EntityCollectionAccessControlHandler.php b/src/EntityCollectionAccessControlHandler.php
index 0d2407a..aafb5e9 100644
--- a/src/EntityCollectionAccessControlHandler.php
+++ b/src/EntityCollectionAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_collector;
 
+use Drupal\entity_collector\Entity\EntityCollectionInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -18,7 +19,7 @@ class EntityCollectionAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   public function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\entity_collector\Entity\EntityCollectionInterface $entity */
+    /** @var EntityCollectionInterface $entity */
     $is_participant = in_array($account->id(), $entity->getParticipantsIds());
     $is_owner = $account->id() == $entity->getOwnerId();
 
@@ -48,7 +49,7 @@ class EntityCollectionAccessControlHandler extends EntityAccessControlHandler {
   /**
    * Check if the user is allowed to view the entity collection.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    * @param $entity
    * @param $is_owner
    * @param $is_participant
@@ -65,7 +66,7 @@ class EntityCollectionAccessControlHandler extends EntityAccessControlHandler {
   /**
    * Check if the user is allowed to update the entity collection.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    * @param $entity
    * @param $is_owner
    * @param $is_participant
@@ -80,7 +81,7 @@ class EntityCollectionAccessControlHandler extends EntityAccessControlHandler {
   /**
    * Check if the user is allowed to delete. the entity collection.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    * @param $entity
    * @param $is_owner
    *
diff --git a/src/EntityCollectionHtmlRouteProvider.php b/src/EntityCollectionHtmlRouteProvider.php
index 6345c0f..3890959 100644
--- a/src/EntityCollectionHtmlRouteProvider.php
+++ b/src/EntityCollectionHtmlRouteProvider.php
@@ -48,10 +48,10 @@ class EntityCollectionHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ -73,10 +73,10 @@ class EntityCollectionHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ -98,10 +98,10 @@ class EntityCollectionHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ -123,10 +123,10 @@ class EntityCollectionHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ -148,10 +148,10 @@ class EntityCollectionHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/EntityCollectionSourceFieldManager.php b/src/EntityCollectionSourceFieldManager.php
index b1501f0..dfd53be 100644
--- a/src/EntityCollectionSourceFieldManager.php
+++ b/src/EntityCollectionSourceFieldManager.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\entity_collector;
 
+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\Core\Field\FieldConfigInterface;
+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\field\FieldStorageConfigInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -19,23 +23,23 @@ class EntityCollectionSourceFieldManager {
   /**
    * Contains the entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * Contains the entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new class instance.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   Entity field manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity field manager service.
    */
   public function __construct(EntityFieldManagerInterface $entity_field_manager, EntityTypeManagerInterface $entityTypeManager) {
@@ -57,11 +61,11 @@ class EntityCollectionSourceFieldManager {
    * Add the entity reference field to the Config entity with the reference to
    * the entity based on the source of the entity collection type.
    *
-   * @param \Drupal\entity_collector\Entity\EntityCollectionTypeInterface $entityCollectionType
+   * @param EntityCollectionTypeInterface $entityCollectionType
    *    Contains the entity collection type entity.
    *
-   * @return \Drupal\Core\Field\FieldConfigInterface|\Drupal\Core\Field\FieldDefinitionInterface|null
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @return FieldConfigInterface|FieldDefinitionInterface|null
+   * @throws EntityStorageException
    */
   public function addEntitiesField(EntityCollectionTypeInterface $entityCollectionType) {
     $source = $entityCollectionType->getSource();
@@ -71,7 +75,7 @@ class EntityCollectionSourceFieldManager {
     }
 
     $sourceField = $this->createSourceField($entityCollectionType, $source);
-    /** @var \Drupal\field\FieldStorageConfigInterface $storage */
+    /** @var FieldStorageConfigInterface $storage */
     $storage = $sourceField->getFieldStorageDefinition();
     if ($storage->isNew()) {
       $storage->setSetting('target_type', $source);
@@ -122,11 +126,11 @@ class EntityCollectionSourceFieldManager {
    * @param string $source
    *   Contains the source of the collection to reference to.
    *
-   * @return \Drupal\field\FieldStorageConfigInterface
+   * @return FieldStorageConfigInterface
    *   The unsaved field storage definition.
    */
   private function createSourceFieldStorage($source) {
-    /** @var \Drupal\field\FieldStorageConfigInterface $fieldStorageConfig */
+    /** @var FieldStorageConfigInterface $fieldStorageConfig */
     $fieldStorageConfig = $this->entityTypeManager
       ->getStorage('field_storage_config')
       ->create([
@@ -143,7 +147,7 @@ class EntityCollectionSourceFieldManager {
    * @param string $source
    *   Contains the source of the collection to reference to.
    *
-   * @return \Drupal\Core\Field\FieldStorageDefinitionInterface|null
+   * @return FieldStorageDefinitionInterface|null
    *   The field storage definition or NULL if it doesn't exists.
    */
   private function getSourceFieldStorage($source) {
@@ -158,12 +162,12 @@ class EntityCollectionSourceFieldManager {
   /**
    * Returns the source field definition.
    *
-   * @param \Drupal\entity_collector\Entity\EntityCollectionTypeInterface $entityCollectionType
+   * @param EntityCollectionTypeInterface $entityCollectionType
    *   Entity Collection Type.
    * @param string $source
    *   Contains the source of the collection to reference to.
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface|null
+   * @return FieldDefinitionInterface|null
    *   The field definition or NULL if it doesn't exists.
    */
   public function getSourceFieldDefinition(EntityCollectionTypeInterface $entityCollectionType, $source) {
@@ -178,17 +182,17 @@ class EntityCollectionSourceFieldManager {
   /**
    * Create the source field for the entity collection type.
    *
-   * @param \Drupal\entity_collector\Entity\EntityCollectionTypeInterface $entityCollectionType
+   * @param EntityCollectionTypeInterface $entityCollectionType
    *   Entity Collection Type.
    * @param string $source
    *   Contains the source of the collection to reference to.
    *
-   * @return \Drupal\Core\Field\FieldConfigInterface|null
+   * @return FieldConfigInterface|null
    *   The field definition or NULL if it doesn't exists.
    */
   private function createSourceField(EntityCollectionTypeInterface $entityCollectionType, $source) {
     $storage = $this->getSourceFieldStorage($source) ?: $this->createSourceFieldStorage($source);
-    /** @var \Drupal\Core\Field\FieldConfigInterface $fieldDefinition */
+    /** @var FieldConfigInterface $fieldDefinition */
     $fieldDefinition = $this->entityTypeManager
       ->getStorage('field_config')
       ->create([
diff --git a/src/EntityCollectionStorageInterface.php b/src/EntityCollectionStorageInterface.php
index f6afbe6..2bee842 100644
--- a/src/EntityCollectionStorageInterface.php
+++ b/src/EntityCollectionStorageInterface.php
@@ -20,7 +20,7 @@ interface EntityCollectionStorageInterface extends ContentEntityStorageInterface
   /**
    * Gets a list of Entity collection revision IDs for a specific Entity collection.
    *
-   * @param \Drupal\entity_collector\Entity\EntityCollectionInterface $entity
+   * @param EntityCollectionInterface $entity
    *   The Entity collection entity.
    *
    * @return int[]
@@ -31,7 +31,7 @@ interface EntityCollectionStorageInterface extends ContentEntityStorageInterface
   /**
    * Gets a list of revision IDs having a given user as Entity collection author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ -42,7 +42,7 @@ interface EntityCollectionStorageInterface extends ContentEntityStorageInterface
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\entity_collector\Entity\EntityCollectionInterface $entity
+   * @param EntityCollectionInterface $entity
    *   The Entity collection entity.
    *
    * @return int
@@ -53,7 +53,7 @@ interface EntityCollectionStorageInterface extends ContentEntityStorageInterface
   /**
    * Unsets the language for all Entity collection with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
diff --git a/src/Form/EntityCollectionForm.php b/src/Form/EntityCollectionForm.php
index b85c7ea..1f9d57e 100644
--- a/src/Form/EntityCollectionForm.php
+++ b/src/Form/EntityCollectionForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_collector\Form;
 
+use Drupal\entity_collector\Entity\EntityCollectionInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Entity\EntityManagerInterface;
@@ -21,20 +22,20 @@ class EntityCollectionForm extends ContentEntityForm {
   /**
    * Entity Collectin Manager.
    *
-   * @var \Drupal\entity_collector\Service\EntityCollectionManagerInterface
+   * @var EntityCollectionManagerInterface
    */
   protected $entityCollectionManager;
 
   /**
    * Constructs a ContentEntityForm object.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Drupal\entity_collector\Service\EntityCollectionManagerInterface $entityCollectionManager
+   * @param EntityCollectionManagerInterface $entityCollectionManager
    *   The entity collection manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityCollectionManagerInterface $entityCollectionManager, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, TimeInterface $time = NULL) {
@@ -77,7 +78,7 @@ class EntityCollectionForm extends ContentEntityForm {
    * {@inheritdoc}
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\entity_collector\Entity\EntityCollectionInterface $entityCollection */
+    /** @var EntityCollectionInterface $entityCollection */
     $entityCollection = $this->getEntity();
 
     $owner = $form_state->getValue('owner');
@@ -119,7 +120,7 @@ class EntityCollectionForm extends ContentEntityForm {
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\entity_collector\Entity\EntityCollectionInterface $entityCollection */
+    /** @var EntityCollectionInterface $entityCollection */
     $entityCollection = $this->entity;
 
 
diff --git a/src/Form/EntityCollectionRevisionDeleteForm.php b/src/Form/EntityCollectionRevisionDeleteForm.php
index 691cb68..7b4fc7e 100644
--- a/src/Form/EntityCollectionRevisionDeleteForm.php
+++ b/src/Form/EntityCollectionRevisionDeleteForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_collector\Form;
 
+use Drupal\entity_collector\Entity\EntityCollectionInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ -20,30 +21,30 @@ class EntityCollectionRevisionDeleteForm extends ConfirmFormBase {
   /**
    * The Entity collection revision.
    *
-   * @var \Drupal\entity_collector\Entity\EntityCollectionInterface
+   * @var EntityCollectionInterface
    */
   protected $revision;
 
   /**
    * The Entity collection storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $EntityCollectionStorage;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * Constructs a new EntityCollectionRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection) {
diff --git a/src/Form/EntityCollectionRevisionRevertForm.php b/src/Form/EntityCollectionRevisionRevertForm.php
index a183d10..40f43bf 100644
--- a/src/Form/EntityCollectionRevisionRevertForm.php
+++ b/src/Form/EntityCollectionRevisionRevertForm.php
@@ -21,30 +21,30 @@ class EntityCollectionRevisionRevertForm extends ConfirmFormBase {
   /**
    * The Entity collection revision.
    *
-   * @var \Drupal\entity_collector\Entity\EntityCollectionInterface
+   * @var EntityCollectionInterface
    */
   protected $revision;
 
   /**
    * The Entity collection storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $EntityCollectionStorage;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * Constructs a new EntityCollectionRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Entity collection storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter) {
@@ -130,12 +130,12 @@ class EntityCollectionRevisionRevertForm extends ConfirmFormBase {
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\entity_collector\Entity\EntityCollectionInterface $revision
+   * @param EntityCollectionInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\entity_collector\Entity\EntityCollectionInterface
+   * @return EntityCollectionInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(EntityCollectionInterface $revision, FormStateInterface $form_state) {
diff --git a/src/Form/EntityCollectionRevisionRevertTranslationForm.php b/src/Form/EntityCollectionRevisionRevertTranslationForm.php
index b559acc..35d780c 100644
--- a/src/Form/EntityCollectionRevisionRevertTranslationForm.php
+++ b/src/Form/EntityCollectionRevisionRevertTranslationForm.php
@@ -27,18 +27,18 @@ class EntityCollectionRevisionRevertTranslationForm extends EntityCollectionRevi
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Constructs a new EntityCollectionRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Entity collection storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager) {
@@ -93,7 +93,7 @@ class EntityCollectionRevisionRevertTranslationForm extends EntityCollectionRevi
   protected function prepareRevertedRevision(EntityCollectionInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');
 
-    /** @var \Drupal\entity_collector\Entity\EntityCollectionInterface $default_revision */
+    /** @var EntityCollectionInterface $default_revision */
     $latest_revision = $this->EntityCollectionStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);
 
diff --git a/src/Form/EntityCollectionSettingsForm.php b/src/Form/EntityCollectionSettingsForm.php
index 36e21d2..47f12d5 100644
--- a/src/Form/EntityCollectionSettingsForm.php
+++ b/src/Form/EntityCollectionSettingsForm.php
@@ -27,7 +27,7 @@ class EntityCollectionSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -39,7 +39,7 @@ class EntityCollectionSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/Form/EntityCollectionTypeForm.php b/src/Form/EntityCollectionTypeForm.php
index e78530a..77b6120 100644
--- a/src/Form/EntityCollectionTypeForm.php
+++ b/src/Form/EntityCollectionTypeForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_collector\Form;
 
+use Drupal\entity_collector\Entity\EntityCollectionTypeInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\entity_collector\EntityCollectionSourceFieldManager;
@@ -31,7 +32,7 @@ class EntityCollectionTypeForm extends EntityForm {
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\entity_collector\Entity\EntityCollectionTypeInterface $entityCollectionType */
+    /** @var EntityCollectionTypeInterface $entityCollectionType */
     $entityCollectionType = $this->entity;
     $form['label'] = [
       '#type' => 'textfield',
@@ -82,7 +83,7 @@ class EntityCollectionTypeForm extends EntityForm {
    */
   public function save(array $form, FormStateInterface $form_state) {
     parent::save($form, $form_state);
-    /** @var \Drupal\entity_collector\Entity\EntityCollectionTypeInterface $entityCollectionType */
+    /** @var EntityCollectionTypeInterface $entityCollectionType */
     $entityCollectionType = $this->entity;
     $status = $entityCollectionType->save();
 
diff --git a/src/Plugin/Block/EntityCollectionBlock.php b/src/Plugin/Block/EntityCollectionBlock.php
index 183ed9e..6959f2f 100644
--- a/src/Plugin/Block/EntityCollectionBlock.php
+++ b/src/Plugin/Block/EntityCollectionBlock.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_collector\Plugin\Block;
 
+use Drupal\Core\Entity\EntityViewModeInterface;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -27,14 +28,14 @@ class EntityCollectionBlock extends BlockBase implements ContainerFactoryPluginI
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity collection manager.
    *
-   * @var \Drupal\entity_collector\Service\EntityCollectionManagerInterface
+   * @var EntityCollectionManagerInterface
    */
   protected $entityCollectionManager;
 
@@ -48,7 +49,7 @@ class EntityCollectionBlock extends BlockBase implements ContainerFactoryPluginI
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   private $currentUser;
 
@@ -152,7 +153,7 @@ class EntityCollectionBlock extends BlockBase implements ContainerFactoryPluginI
     }
 
     foreach ($viewModes as $viewMode) {
-      /** @var \Drupal\Core\Entity\EntityViewModeInterface $mode */
+      /** @var EntityViewModeInterface $mode */
       $mode = EntityViewMode::load($viewMode);
       $label = $mode->label();
       $key = substr($mode->id(), strpos($mode->id(), ".") + 1);
@@ -177,7 +178,7 @@ class EntityCollectionBlock extends BlockBase implements ContainerFactoryPluginI
    */
   public function build() {
     $config = $this->getConfiguration();
-    /** @var \Drupal\entity_collector\Entity\EntityCollectionTypeInterface $entityCollectionType */
+    /** @var EntityCollectionTypeInterface $entityCollectionType */
     $entityCollectionType = $this->entityTypeManager->getStorage('entity_collection_type')
       ->load($config['entity_collection_type']);
     $entityCollection = $this->entityCollectionManager->getActiveCollection($entityCollectionType);
diff --git a/src/Plugin/Block/EntityCollectionSelectionBlock.php b/src/Plugin/Block/EntityCollectionSelectionBlock.php
index 34789de..821f05e 100644
--- a/src/Plugin/Block/EntityCollectionSelectionBlock.php
+++ b/src/Plugin/Block/EntityCollectionSelectionBlock.php
@@ -28,35 +28,35 @@ class EntityCollectionSelectionBlock extends BlockBase implements ContainerFacto
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Entity Display Repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;
 
   /**
    * Entity Form Builder.
    *
-   * @var \Drupal\Core\Entity\EntityFormBuilderInterface
+   * @var EntityFormBuilderInterface
    */
   protected $entityFormBuilder;
 
   /**
    * The entity collection manager.
    *
-   * @var \Drupal\entity_collector\Service\EntityCollectionManagerInterface
+   * @var EntityCollectionManagerInterface
    */
   private $entityCollectionManager;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   private $currentUser;
 
diff --git a/src/Service/EntityCollectionManager.php b/src/Service/EntityCollectionManager.php
index feaaa41..e917ba4 100644
--- a/src/Service/EntityCollectionManager.php
+++ b/src/Service/EntityCollectionManager.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\entity_collector\Service;
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Core\Field\EntityReferenceFieldItemListInterface;
 use Drupal\Core\Cache\CacheTagsInvalidator;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Field\FieldItemListInterface;
@@ -32,28 +35,28 @@ class EntityCollectionManager implements EntityCollectionManagerInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * Entity Collection Source Field Manager.
    *
-   * @var \Drupal\entity_collector\EntityCollectionSourceFieldManager
+   * @var EntityCollectionSourceFieldManager
    */
   protected $collectionSourceFieldManager;
 
   /**
    * Lock Backend.
    *
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected $lock;
 
@@ -62,7 +65,7 @@ class EntityCollectionManager implements EntityCollectionManagerInterface {
    *
    * @param \Drupal\user\PrivateTempStoreFactory $tempStoreFactory
    *   The user temp store.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(PrivateTempStoreFactory $tempStoreFactory, EntityTypeManagerInterface $entityTypeManager, AccountInterface $currentUser, EntityCollectionSourceFieldManager $collectionSourceFieldManager, LockBackendInterface $lock) {
@@ -188,14 +191,14 @@ class EntityCollectionManager implements EntityCollectionManagerInterface {
   /**
    * Get entity collections owned by the user.
    *
-   * @param \Drupal\entity_collector\Entity\EntityCollectionTypeInterface $entityCollectionType
+   * @param EntityCollectionTypeInterface $entityCollectionType
    *   The entity collection type.
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The user.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]|\Drupal\entity_collector\Entity\EntityCollectionInterface[]
+   * @return EntityInterface[]|EntityCollectionInterface[]
    *   The collection owned by the user.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   protected function getOwnedCollectionList(EntityCollectionTypeInterface $entityCollectionType, AccountInterface $user) {
     return $this->entityTypeManager->getStorage('entity_collection')
@@ -208,13 +211,13 @@ class EntityCollectionManager implements EntityCollectionManagerInterface {
   /**
    * Get the participating collections list.
    *
-   * @param \Drupal\entity_collector\Entity\EntityCollectionTypeInterface $entityCollectionType
+   * @param EntityCollectionTypeInterface $entityCollectionType
    *   The entity collection type.
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]|\Drupal\entity_collector\Entity\EntityCollectionInterface[]
+   * @return EntityInterface[]|EntityCollectionInterface[]
    *   The collections the user participates in.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   protected function getParticipatingCollectionList(EntityCollectionTypeInterface $entityCollectionType, AccountInterface $user) {
     return $this->entityTypeManager->getStorage('entity_collection')
@@ -297,7 +300,7 @@ class EntityCollectionManager implements EntityCollectionManagerInterface {
   /**
    * Get the index in the entity reference field, matching the given value.
    *
-   * @param \Drupal\Core\Field\EntityReferenceFieldItemListInterface $field
+   * @param EntityReferenceFieldItemListInterface $field
    * @param int $value
    *
    * @return int|null|string
@@ -355,7 +358,7 @@ class EntityCollectionManager implements EntityCollectionManagerInterface {
       return;
     }
 
-    /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $field */
+    /** @var EntityReferenceFieldItemListInterface $field */
     $field = $entityCollection->get('participants');
     $index = $this->getIndexInReferenceField($field, $user->id());
     if ($index !== NULL) {
diff --git a/src/Service/EntityCollectionManagerInterface.php b/src/Service/EntityCollectionManagerInterface.php
index 329f8ab..bafba51 100644
--- a/src/Service/EntityCollectionManagerInterface.php
+++ b/src/Service/EntityCollectionManagerInterface.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\entity_collector\Service;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Field\FieldItemListInterface;
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\entity_collector\Entity\EntityCollectionInterface;
 use Drupal\entity_collector\Entity\EntityCollectionTypeInterface;
@@ -16,30 +20,30 @@ interface EntityCollectionManagerInterface {
   /**
    * Set the active collection.
    *
-   * @param \Drupal\entity_collector\Entity\EntityCollectionTypeInterface $entityCollectionType
+   * @param EntityCollectionTypeInterface $entityCollectionType
    *   The entity collection type.
-   * @param \Drupal\entity_collector\Entity\EntityCollectionInterface $collection
+   * @param EntityCollectionInterface $collection
    *   The entity collection.
-   * @param \Drupal\Core\Session\AccountInterface|NULL $user
+   * @param AccountInterface|NULL $user
    *   The user entity.
    */
   public function setActiveCollection(EntityCollectionTypeInterface $entityCollectionType, EntityCollectionInterface $collection);
 
   /**
-   * Get the active collection for the user.
-   *
-   * @param \Drupal\entity_collector\Entity\EntityCollectionTypeInterface $entityCollectionType
-   *   The entity collection type.
-   *
-   * @return \Drupal\entity_collector\Entity\EntityCollectionInterface;
-   *   The entity collection.
-   */
+  * Get the active collection for the user.
+  *
+   * @param EntityCollectionTypeInterface $entityCollectionType
+  *   The entity collection type.
+  *
+   * @return EntityCollectionInterface ;
+    The entity collection.
+  */
   public function getActiveCollection(EntityCollectionTypeInterface $entityCollectionType);
 
   /**
    * Get the active collection id for the user.
    *
-   * @param \Drupal\entity_collector\Entity\EntityCollectionTypeInterface $entityCollectionType
+   * @param EntityCollectionTypeInterface $entityCollectionType
    *   The entity collection type.
    *
    * @return mixed;
@@ -50,12 +54,12 @@ interface EntityCollectionManagerInterface {
   /**
    * Get the collection list for the user.
    *
-   * @param \Drupal\entity_collector\Entity\EntityCollectionTypeInterface $entityCollectionType
+   * @param EntityCollectionTypeInterface $entityCollectionType
    *   The entity collection type.
-   * @param \Drupal\Core\Session\AccountInterface|NULL $user
+   * @param AccountInterface|NULL $user
    *   The user entity.
    *
-   * @return \Drupal\entity_collector\Entity\EntityCollectionInterface[]
+   * @return EntityCollectionInterface[]
    *   A list of entity collections.
    */
   public function getCollections(EntityCollectionTypeInterface $entityCollectionType, AccountInterface $user = NULL);
@@ -63,9 +67,9 @@ interface EntityCollectionManagerInterface {
   /**
    * Is the collection valid for the user?
    *
-   * @param \Drupal\entity_collector\Entity\EntityCollectionInterface $collection
+   * @param EntityCollectionInterface $collection
    *   The collection.
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The user entity.
    *
    * @return bool
@@ -76,10 +80,10 @@ interface EntityCollectionManagerInterface {
   /**
    * Get the entity collection type.
    *
-   * @param \Drupal\entity_collector\Entity\EntityCollectionInterface $entityCollection
+   * @param EntityCollectionInterface $entityCollection
    *
-   * @return \Drupal\entity_collector\Entity\EntityCollectionTypeInterface|null
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @return EntityCollectionTypeInterface|null
+   * @throws InvalidPluginDefinitionException
    */
   public function getEntityCollectionBundleType(EntityCollectionInterface $entityCollection);
 
@@ -128,17 +132,17 @@ interface EntityCollectionManagerInterface {
   /**
    * Add the item to a collection.
    *
-   * @param \Drupal\entity_collector\Entity\EntityCollectionInterface $entityCollection
+   * @param EntityCollectionInterface $entityCollection
    * @param $entity_id
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function addItemToCollection(EntityCollectionInterface $entityCollection, $entity_id);
 
   /**
    * Remove the item from a collection.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $field
+   * @param FieldItemListInterface $field
    * @param $value
    *
    * @return int|null|string
@@ -148,7 +152,7 @@ interface EntityCollectionManagerInterface {
   /**
    * Check if a entity exists within a collection.
    *
-   * @param \Drupal\entity_collector\Entity\EntityCollectionInterface $entityCollection
+   * @param EntityCollectionInterface $entityCollection
    * @param $entity_id
    *
    * @return bool
@@ -160,7 +164,7 @@ interface EntityCollectionManagerInterface {
    *
    * @param EntityCollectionInterface $entityCollection
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface|null
+   * @return FieldDefinitionInterface|null
    */
   public function getSourceFieldDefinition($entityCollection);
 
@@ -187,7 +191,7 @@ interface EntityCollectionManagerInterface {
    *
    * @param int $entityCollectionId
    *
-   * @return \Drupal\entity_collector\Entity\EntityCollectionInterface
+   * @return EntityCollectionInterface
    */
   public function getEntityCollection($entityCollectionId);
 
@@ -196,7 +200,7 @@ interface EntityCollectionManagerInterface {
    *
    * @param int $entityCollectionTypeId
    *
-   * @return \Drupal\entity_collector\Entity\EntityCollectionTypeInterface
+   * @return EntityCollectionTypeInterface
    */
   public function getEntityCollectionType($entityCollectionTypeId);
 
