modules/contrib/gutenberg/gutenberg.api.php
modules/contrib/gutenberg/gutenberg.install
modules/contrib/gutenberg/gutenberg.module
modules/contrib/gutenberg/gutenberg.post_update.php
modules/contrib/gutenberg/modules/editorskit/build/admin.asset.php
modules/contrib/gutenberg/modules/editorskit/build/editor.asset.php
modules/contrib/gutenberg/modules/editorskit/build/index.asset.php
modules/contrib/gutenberg/modules/editorskit/build/settings.asset.php
modules/contrib/gutenberg/modules/editorskit/build/style.asset.php
modules/contrib/gutenberg/modules/gutenberg_cloud/gutenberg_cloud.module
modules/contrib/gutenberg/modules/gutenberg_cloud/src/CloudBlock.php
modules/contrib/gutenberg/modules/gutenberg_cloud/src/CloudBlockBase.php
modules/contrib/gutenberg/modules/gutenberg_cloud/src/CloudBlockInterface.php
modules/contrib/gutenberg/modules/gutenberg_cloud/src/CloudBlockManager.php
modules/contrib/gutenberg/modules/gutenberg_cloud/src/Form/BlockManagerForm.php
modules/contrib/gutenberg/scripts/gutenberg-dependencies.php
modules/contrib/gutenberg/src/Annotation/GutenbergPlugin.php
modules/contrib/gutenberg/src/AssertMediaTrait.php
modules/contrib/gutenberg/src/BlocksRendererHelper.php
modules/contrib/gutenberg/src/Controller/BlocksController.php
modules/contrib/gutenberg/src/Controller/MediaController.php
modules/contrib/gutenberg/src/Controller/OEmbedProxyUrlController.php
modules/contrib/gutenberg/src/Controller/ReusableBlocksController.php
modules/contrib/gutenberg/src/Controller/SearchController.php
modules/contrib/gutenberg/src/Controller/UtilsController.php
modules/contrib/gutenberg/src/DataProvider/BaseDataProvider.php
modules/contrib/gutenberg/src/DataProvider/DataProviderInterface.php
modules/contrib/gutenberg/src/DataProvider/EntityDataProviderManager.php
modules/contrib/gutenberg/src/DataProvider/EntityDataProviderManagerInterface.php
modules/contrib/gutenberg/src/DataProvider/FileEntityDataProvider.php
modules/contrib/gutenberg/src/DataProvider/MediaEntityDataProvider.php
modules/contrib/gutenberg/src/FileExtensionGuesser.php
modules/contrib/gutenberg/src/FileExtensionGuesserInterface.php
modules/contrib/gutenberg/src/GutenbergMediaLibraryUiBuilder.php
modules/contrib/gutenberg/src/GutenbergPluginBase.php
modules/contrib/gutenberg/src/GutenbergPluginConfigurableInterface.php
modules/contrib/gutenberg/src/GutenbergPluginInterface.php
modules/contrib/gutenberg/src/GutenbergPluginManager.php
modules/contrib/gutenberg/src/MediaEntityRenderer.php
modules/contrib/gutenberg/src/MediaEntityRendererInterface.php
modules/contrib/gutenberg/src/MediaLibraryGutenbergOpener.php
modules/contrib/gutenberg/src/MediaSelectionProcessor/DefaultMediaSelectionProcessor.php
modules/contrib/gutenberg/src/MediaSelectionProcessor/MediaSelectionProcessorInterface.php
modules/contrib/gutenberg/src/MediaSelectionProcessor/MediaSelectionProcessorManager.php
modules/contrib/gutenberg/src/MediaSelectionProcessor/MediaSelectionProcessorManagerInterface.php
modules/contrib/gutenberg/src/MediaTypeGuesser.php
modules/contrib/gutenberg/src/MediaTypeGuesserInterface.php
modules/contrib/gutenberg/src/MediaUploader.php
modules/contrib/gutenberg/src/MediaUploaderInterface.php
modules/contrib/gutenberg/src/Persistence/MediaTypePersistenceManager.php
modules/contrib/gutenberg/src/Persistence/MediaTypePersistenceManagerInterface.php
modules/contrib/gutenberg/src/Plugin/Action/ReusableBlockDelete.php
modules/contrib/gutenberg/src/Plugin/Editor/Gutenberg.php
modules/contrib/gutenberg/src/Plugin/Filter/BlockFilter.php
modules/contrib/gutenberg/src/Plugin/Filter/CommentDelimiterFilter.php
modules/contrib/gutenberg/src/Plugin/Filter/FieldMappingFilter.php
modules/contrib/gutenberg/src/Plugin/Filter/MappingFieldsFilter.php
modules/contrib/gutenberg/src/Plugin/Filter/MediaEntityBlockFilter.php
modules/contrib/gutenberg/src/Plugin/Filter/OEmbedFilter.php
modules/contrib/gutenberg/src/Plugin/Filter/ReusableBlockFilter.php
modules/contrib/gutenberg/src/Plugin/GutenbergPlugin/DrupalImage.php
modules/contrib/gutenberg/src/ReusableBlockViewsData.php
modules/contrib/gutenberg/src/ScanDir.php
modules/contrib/gutenberg/src/Service/FileEntityNotFoundException.php
modules/contrib/gutenberg/src/Service/FileEntityNotSavedException.php
modules/contrib/gutenberg/src/Service/MediaEntityNotFoundException.php
modules/contrib/gutenberg/src/Service/MediaEntityNotMatchedException.php
modules/contrib/gutenberg/src/Service/MediaEntityNotSavedException.php
modules/contrib/gutenberg/src/Service/MediaService.php
modules/contrib/gutenberg/src/Service/MediaTypeNotFoundException.php
modules/contrib/gutenberg/vendor/gutenberg/a11y/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/annotations/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/api-fetch/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/autop/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/blob/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/block-directory/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/block-editor/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/block-library/blocks/archives.php
modules/contrib/gutenberg/vendor/gutenberg/block-library/blocks/block.php
modules/contrib/gutenberg/vendor/gutenberg/block-library/blocks/calendar.php
modules/contrib/gutenberg/vendor/gutenberg/block-library/blocks/categories.php
modules/contrib/gutenberg/vendor/gutenberg/block-library/blocks/latest-comments.php
modules/contrib/gutenberg/vendor/gutenberg/block-library/blocks/latest-posts.php
modules/contrib/gutenberg/vendor/gutenberg/block-library/blocks/legacy-widget.php
modules/contrib/gutenberg/vendor/gutenberg/block-library/blocks/navigation-menu.php
modules/contrib/gutenberg/vendor/gutenberg/block-library/blocks/rss.php
modules/contrib/gutenberg/vendor/gutenberg/block-library/blocks/search.php
modules/contrib/gutenberg/vendor/gutenberg/block-library/blocks/shortcode.php
modules/contrib/gutenberg/vendor/gutenberg/block-library/blocks/site-title.php
modules/contrib/gutenberg/vendor/gutenberg/block-library/blocks/social-link.php
modules/contrib/gutenberg/vendor/gutenberg/block-library/blocks/tag-cloud.php
modules/contrib/gutenberg/vendor/gutenberg/block-library/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/block-serialization-default-parser/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/block-serialization-spec-parser/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/blocks/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/components/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/compose/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/core-data/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/data-controls/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/data/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/date/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/deprecated/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/dom-ready/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/dom/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/edit-post/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/edit-widgets/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/editor/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/element/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/escape-html/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/format-library/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/hooks/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/html-entities/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/i18n/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/is-shallow-equal/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/keycodes/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/list-reusable-blocks/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/media-utils/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/notices/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/nux/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/plugins/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/priority-queue/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/redux-routine/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/rich-text/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/server-side-render/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/shortcode/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/token-list/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/url/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/viewport/index.asset.php
modules/contrib/gutenberg/vendor/gutenberg/wordcount/index.asset.php

36 files with changes
=====================

1) modules/contrib/gutenberg/src/Service/MediaService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gutenberg\Service;

+use Drupal\media_library\MediaLibraryUiBuilder;
+use Drupal\media\Entity\Media;
+use Drupal\file\Entity\File;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ @@
   /**
    * The media type guesser.
    *
-   * @var \Drupal\gutenberg\MediaTypeGuesserInterface
+   * @var MediaTypeGuesserInterface
    */
   protected $mediaTypeGuesser;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The media type persistence manager.
    *
-   * @var \Drupal\gutenberg\Persistence\MediaTypePersistenceManager
+   * @var MediaTypePersistenceManager
    */
   protected $mediaTypePersisterManager;

@@ @@
   /**
    * The entity data provider manager.
    *
-   * @var \Drupal\gutenberg\DataProvider\EntityDataProviderManager
+   * @var EntityDataProviderManager
    */
   protected $entityDataProviderManager;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The media uploader.
    *
-   * @var \Drupal\gutenberg\MediaUploaderInterface
+   * @var MediaUploaderInterface
    */
   protected $mediaUploader;

@@ @@
   /**
    * Drupal\Core\Render\RendererInterface instance.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The media entity renderer.
    *
-   * @var \Drupal\gutenberg\MediaEntityRendererInterface
+   * @var MediaEntityRendererInterface
    */
   protected $mediaEntityRenderer;

@@ @@
   /**
    * The media library UI builder.
    *
-   * @var \Drupal\media_library\MediaLibraryUiBuilder|null
+   * @var MediaLibraryUiBuilder|null
    */
   protected $builder;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
   /**
    * MediaController constructor.
    *
-   * @param \Drupal\gutenberg\MediaTypeGuesserInterface $media_type_guesser
+   * @param MediaTypeGuesserInterface $media_type_guesser
    *   The media type guesser.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\gutenberg\Persistence\MediaTypePersistenceManager $media_type_persistence_manager
+   * @param MediaTypePersistenceManager $media_type_persistence_manager
    *   The media type persistence manager.
-   * @param \Drupal\gutenberg\DataProvider\EntityDataProviderManager $entity_data_provider_manager
+   * @param EntityDataProviderManager $entity_data_provider_manager
    *   The entity data provider manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\gutenberg\MediaUploaderInterface $media_uploader
+   * @param MediaUploaderInterface $media_uploader
    *   The media uploader.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\gutenberg\MediaEntityRendererInterface $media_entity_renderer
+   * @param MediaEntityRendererInterface $media_entity_renderer
    *   The media entity renderer.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
    */
   public function __construct(
@@ @@
    * @return string
    *   The rendered element.
    *
-   * @throws \Drupal\gutenberg\Service\MediaTypeNotFoundException
+   * @throws MediaTypeNotFoundException
    */
   public function renderDialog(array $media_types) {
     $media_types = array_filter($media_types)
@@ @@
   /**
    * Render media entities.
    *
-   * @param \Drupal\media\MediaInterface $media_entity
+   * @param MediaInterface $media_entity
    *   Media entity instance.
    *
    * @return array
@@ @@
     $rendered_view_modes = [];

     try {
-      /** @var \Drupal\media\Entity\Media $media_entity */
+      /** @var Media $media_entity */
       $view_modes = $this->entityDisplayRepository->getViewModeOptionsByBundle('media', $media_entity->bundle());

       foreach ($view_modes as $view_mode => $view_mode_name) {
@@ @@
   /**
    * Save uploaded file, create file and media entity if possible.
    *
-   * @param \Symfony\Component\HttpFoundation\File\UploadedFile $uploaded_file
+   * @param UploadedFile $uploaded_file
    *   Uploaded file instance.
-   * @param \Drupal\editor\Entity\Editor $editor
+   * @param Editor $editor
    *   Editor entity instance.
    *
    * @return mixed
    *   The media entity data.
    *
-   * @throws \Drupal\gutenberg\Service\FileEntityNotSavedException
-   * @throws \Drupal\gutenberg\Service\MediaEntityNotSavedException
-   * @throws \Drupal\gutenberg\Service\MediaEntityNotMatchedException
+   * @throws FileEntityNotSavedException
+   * @throws MediaEntityNotSavedException
+   * @throws MediaEntityNotMatchedException
    */
   public function processMediaEntityUpload(UploadedFile $uploaded_file, Editor $editor) {
-    /** @var \Drupal\file\Entity\File $file_entity */
+    /** @var File $file_entity */
     if (!$file_entity = $this->mediaUploader->upload($uploaded_file, $editor)) {
       throw new FileEntityNotSavedException();
     }
@@ @@
   /**
    * Load file entity data.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   File entity instance.
    *
    * @return mixed
@@ @@
   /**
    * Load media entity data.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   Media entity instance.
    *
    * @return mixed
    *   The file entity data for the specified media.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function loadMediaData(MediaInterface $media) {
     $file_entity_id = $media->getSource()->getSourceFieldValue($media);
@@ @@
   /**
    * Search for file entities.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Current request.
    * @param string $type
    *   Mime type of searched files.
@@ @@
    * @return array
    *   The found file entities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function search(Request $request, string $type = '', string $search = '') {
     $query = $this->entityTypeManager->getStorage('file')->getQuery();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/gutenberg/src/Plugin/Filter/MediaEntityBlockFilter.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The media entity renderer.
    *
-   * @var \Drupal\gutenberg\MediaEntityRendererInterface
+   * @var MediaEntityRendererInterface
    */
   protected $mediaEntityRenderer;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/gutenberg/src/Plugin/Filter/MappingFieldsFilter.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Render\RendererInterface instance.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/gutenberg/src/Plugin/Filter/FieldMappingFilter.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Render\RendererInterface instance.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/gutenberg/src/Plugin/Filter/BlockFilter.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\gutenberg\BlocksRendererHelper instance.
    *
-   * @var \Drupal\gutenberg\BlocksRendererHelper
+   * @var BlocksRendererHelper
    */
   protected $blocksRenderer;

@@ @@
   /**
    * Drupal\Core\Render\RendererInterface instance.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/gutenberg/src/Plugin/Editor/Gutenberg.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler to invoke hooks on.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The Gutenberg plugin manager.
    *
-   * @var \Drupal\gutenberg\GutenbergPluginManager
+   * @var GutenbergPluginManager
    */
   protected $gutenbergPluginManager;

@@ @@
   /**
    * Drupal\Core\Render\RendererInterface instance.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\gutenberg\GutenbergPluginManager $gutenberg_plugin_manager
+   * @param GutenbergPluginManager $gutenberg_plugin_manager
    *   The Gutenberg plugin manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke hooks on.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, GutenbergPluginManager $gutenberg_plugin_manager, ModuleHandlerInterface $module_handler, LanguageManagerInterface $language_manager, RendererInterface $renderer) {
@@ @@
   /**
    * Get javascript settings.
    *
-   * @param \Drupal\editor\Entity\Editor $editor
+   * @param Editor $editor
    *   A configured text editor object.
    */
   public function getJsSettings(Editor $editor) {
@@ @@
   /**
    * Builds the "toolbar" configuration part of the CKEditor JS settings.
    *
-   * @param \Drupal\editor\Entity\Editor $editor
+   * @param Editor $editor
    *   A configured text editor object.
    *
    * @return array
@@ @@
   /**
    * Builds the "contentsCss" configuration part of the CKEditor JS settings.
    *
-   * @param \Drupal\editor\Entity\Editor $editor
+   * @param Editor $editor
    *   A configured text editor object.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/gutenberg/src/Plugin/Action/ReusableBlockDelete.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gutenberg\Plugin\Action;

+use Drupal\block_content\BlockContentInterface;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Session\AccountInterface;

@@ @@
    * {@inheritdoc}
    */
   public function execute($entity = NULL) {
-    /** @var \Drupal\block_content\BlockContentInterface $entity */
+    /** @var BlockContentInterface $entity */
     $entity->delete();
   }

@@ @@
    * {@inheritdoc}
    */
   public function access($object, AccountInterface $account = NULL, $return_as_object = FALSE) {
-    /** @var \Drupal\block_content\BlockContentInterface $object */
+    /** @var BlockContentInterface $object */
     return $object->access('delete', $account, $return_as_object);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/gutenberg/src/Persistence/MediaTypePersistenceManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gutenberg\Persistence;

+use Drupal\media\Entity\Media;
 use Drupal\file\Entity\File;

 /**
@@ @@
    *
    * @param string $media_type
    *   Media type machine name.
-   * @param \Drupal\file\Entity\File $file_entity
+   * @param File $file_entity
    *   File entity instance.
    *
-   * @return \Drupal\media\Entity\Media|null
+   * @return Media|null
    *   Created media type or null if failed.
    *
    * @throws \Exception
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/gutenberg/src/Persistence/MediaTypePersistenceManager.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;

@@ @@
   /**
    * MediaTypePersistenceManager constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/gutenberg/src/MediaUploaderInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gutenberg;

+use Drupal\file\Entity\File;
 use Drupal\editor\Entity\Editor;
 use Symfony\Component\HttpFoundation\File\UploadedFile;

@@ @@
   /**
    * Upload media to the filesystem.
    *
-   * @param \Symfony\Component\HttpFoundation\File\UploadedFile $uploaded_file
+   * @param UploadedFile $uploaded_file
    *   Uploaded file instance.
-   * @param \Drupal\editor\Entity\Editor $editor
+   * @param Editor $editor
    *   Editor entity.
    *
-   * @return \Drupal\file\Entity\File|null
+   * @return File|null
    *   File entity or null on failure.
    */
   public function upload(UploadedFile $uploaded_file, Editor $editor);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/gutenberg/src/MediaUploader.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * MediaUploader constructor.
    *
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
    */
   public function __construct(FileSystemInterface $file_system) {
@@ @@
     // @todo: find better solution for saving file itself.
     $data = file_get_contents($uploaded_file->getPathname());
     $file_name = $this->getRandomFileName($uploaded_file->getClientOriginalExtension() ?: '');
-    $file = file_save_data($data, "{$directory}/{$file_name}", FileSystemInterface::EXISTS_RENAME);
+    $file = \Drupal::service('file.repository')->writeData($data, "{$directory}/{$file_name}", FileSystemInterface::EXISTS_RENAME);
     $file->setTemporary();
     $file->setFilename($uploaded_file->getClientOriginalName());
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/gutenberg/src/MediaTypeGuesser.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gutenberg;

+use Drupal\media\Entity\MediaType;
 use Drupal\Core\Entity\EntityTypeManagerInterface;

 /**
@@ @@
   /**
    * Entity type manager instance.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The file extension guesser.
    *
-   * @var \Drupal\gutenberg\FileExtensionGuesserInterface
+   * @var FileExtensionGuesserInterface
    */
   protected $fileExtensionGuesser;

@@ @@
   /**
    * MediaTypeGuesser constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\gutenberg\FileExtensionGuesserInterface $file_extension_guesser
+   * @param FileExtensionGuesserInterface $file_extension_guesser
    *   The file extension guesser.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, FileExtensionGuesserInterface $file_extension_guesser) {
@@ @@
     $media_type_entities = $this->entityTypeManager->getStorage('media_type')->loadMultiple();
     $media_types = [];

-    /** @var \Drupal\media\Entity\MediaType $media_type_entity */
+    /** @var MediaType $media_type_entity */
     foreach ($media_type_entities as $media_type_entity) {
       $field_config = $media_type_entity->getSource()->getSourceFieldDefinition($media_type_entity);
       $media_type_file_extensions = explode(' ', $field_config->getSetting('file_extensions'));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/gutenberg/src/MediaSelectionProcessor/MediaSelectionProcessorManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gutenberg\MediaSelectionProcessor;

+use Drupal\media\MediaInterface;
 /**
  * Provides contract for media selection processor manager.
  *
@@ @@
   /**
    * Register media selection processor.
    *
-   * @param \Drupal\gutenberg\MediaSelectionProcessor\MediaSelectionProcessorInterface $processor
+   * @param MediaSelectionProcessorInterface $processor
    *   Media selection processor instance.
    * @param \Drupal\gutenberg\MediaSelectionProcessor\string $processor_name
    *   Processor name.
@@ @@
    * @param string $data
    *   Serialized data to process.
    *
-   * @return \Drupal\media\MediaInterface[]
+   * @return MediaInterface[]
    *   List of media entities.
    */
   public function processData(string $data);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/gutenberg/src/MediaSelectionProcessor/MediaSelectionProcessorInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gutenberg\MediaSelectionProcessor;

+use Drupal\media\MediaInterface;
 /**
  * Interface MediaSelectionProcessorInterface.
  *
@@ @@
    * @param array $data
    *   Array of data to process.
    *
-   * @return \Drupal\media\MediaInterface[]
+   * @return MediaInterface[]
    *   The list of media entities.
    */
   public function process(array $data);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


15) modules/contrib/gutenberg/src/MediaSelectionProcessor/DefaultMediaSelectionProcessor.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Entity type manager instance.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * DefaultMediaSelectionProcessor constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/gutenberg/src/MediaEntityRendererInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gutenberg;

+use Drupal\media\Entity\Media;
 /**
  * Renders media entities.
  *
@@ @@
   /**
    * Render media entities.
    *
-   * @param \Drupal\media\Entity\Media|string $media_entity
+   * @param Media|string $media_entity
    *   Media entity ID or loaded media entity instance.
    * @param string $view_mode
    *   (optional) View mode of media entity, 'full' is default.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


17) modules/contrib/gutenberg/src/MediaEntityRenderer.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Render\RendererInterface instance.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * Entity type manager instance.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * MediaEntityRenderer constructor.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(RendererInterface $renderer, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


18) modules/contrib/gutenberg/src/GutenbergPluginManager.php:18

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ @@
    *
    * @param array &$form
    *   A reference to an associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
-   * @param \Drupal\editor\Entity\Editor $editor
+   * @param Editor $editor
    *   A configured text editor object.
    */
   public function injectPluginSettingsForm(array &$form, FormStateInterface $form_state, Editor $editor) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/gutenberg/src/GutenbergPluginInterface.php:15

    ---------- begin diff ----------
@@ @@
    * These libraries will be attached to the text_format element on which the
    * editor is being loaded.
    *
-   * @param \Drupal\editor\Entity\Editor $editor
+   * @param Editor $editor
    *   A configured text editor object.
    *
    * @return array
@@ @@
    * $plugin_specific_settings = $settings['plugins'][$plugin_id];
    * @endcode
    *
-   * @param \Drupal\editor\Entity\Editor $editor
+   * @param Editor $editor
    *   A configured text editor object.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


20) modules/contrib/gutenberg/src/GutenbergPluginConfigurableInterface.php:23

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An empty form array to be populated with a configuration form, if any.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The state of the entire filter administration form.
-   * @param \Drupal\editor\Entity\Editor $editor
+   * @param Editor $editor
    *   A configured text editor object.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


21) modules/contrib/gutenberg/src/DataProvider/MediaEntityDataProvider.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gutenberg\DataProvider;

+use Drupal\file\FileInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\gutenberg\AssertMediaTrait;

@@ @@
   public function getData(ContentEntityInterface $entity, array $data = []) {
     $this->assertIsFileEntity($entity);

-    /** @var \Drupal\file\FileInterface $entity */
+    /** @var FileInterface $entity */
     $uri = $entity->getFileUri();
-    $source_url = file_url_transform_relative(file_create_url($uri));
+    $source_url = \Drupal::service('file_url_generator')->generateString($uri);
     $file_data = $this->getFileData($entity->id());

     $result = [
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/gutenberg/src/DataProvider/FileEntityDataProvider.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gutenberg\DataProvider;

+use Drupal\file\FileInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\gutenberg\AssertMediaTrait;

@@ @@
   public function getData(ContentEntityInterface $entity, array $data = []) {
     $this->assertIsFileEntity($entity);

-    /** @var \Drupal\file\FileInterface $entity */
+    /** @var FileInterface $entity */
     $uri = $entity->getFileUri();
-    $source_url = file_url_transform_relative(file_create_url($uri));
+    $source_url = \Drupal::service('file_url_generator')->generateString($uri);
     $image = $this->imageFactory->get($uri);
     $file_data = $this->getFileData($entity->id());
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/gutenberg/src/DataProvider/EntityDataProviderManagerInterface.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Register entity type data provider.
    *
-   * @param \Drupal\gutenberg\DataProvider\DataProviderInterface $data_provider
+   * @param DataProviderInterface $data_provider
    *   Data provider to register.
    * @param string $entity_type
    *   Entity type machine name.
@@ @@
    *
    * @param string $entity_type
    *   Entity type machine name.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity instance.
    * @param array $data
    *   (optional) Additional data to process.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


24) modules/contrib/gutenberg/src/DataProvider/DataProviderInterface.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Returns array data.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity instance to process.
    * @param array $data
    *   Array of additional data to process.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


25) modules/contrib/gutenberg/src/DataProvider/BaseDataProvider.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gutenberg\DataProvider;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\image\Entity\ImageStyle;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Image\ImageFactory;
@@ @@
   /**
    * Entity type manager instance.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Image factory instance.
    *
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   protected $imageFactory;

@@ @@
   /**
    * BaseDataProvider constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Image\ImageFactory $image_factory
+   * @param ImageFactory $image_factory
    *   The image factory.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, Connection $connection, ImageFactory $image_factory) {
@@ @@
    * @return array
    *   The sizes of the image styles.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getSizes(string $source_url, string $uri) {
     $styles = $this->entityTypeManager->getStorage('image_style')->loadMultiple();
@@ @@
     ];

     foreach ($styles as $style) {
-      /** @var \Drupal\image\Entity\ImageStyle $style */
+      /** @var ImageStyle $style */
       $sizes[$style->getName()] = [
-        'source_url' => file_url_transform_relative($style->buildUrl($uri)),
+        'source_url' => \Drupal::service('file_url_generator')->transformRelative($style->buildUrl($uri)),
       ];
     }
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


26) modules/contrib/gutenberg/src/Controller/SearchController.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Search content.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    */
   public function search(Request $request) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/gutenberg/src/Controller/ReusableBlocksController.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Returns JSON representing the loaded blocks.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    * @param string $block_id
    *   The reusable block id.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    */
   public function load(Request $request, $block_id = NULL) {
@@ @@
   /**
    * Saves reusable block.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    * @param string $block_id
    *   The reusable block id.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    */
   public function save(Request $request, $block_id = NULL) {
@@ @@
   /**
    * Delete reusable block.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    * @param string $block_id
    *   The reusable block id.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    */
   public function delete(Request $request, $block_id = NULL) {
@@ @@
   /**
    * Controller routes access callback.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Current user.
    * @param string $block_id
    *   Block id from route parameter.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   Allowed access result if all conditions are met.
    */
   public function access(AccountInterface $account, $block_id) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/gutenberg/src/Controller/OEmbedProxyUrlController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gutenberg\Controller;

+use GuzzleHttp\Exception\GuzzleException;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Controller\ControllerBase;
 use GuzzleHttp\Exception\RequestException;
@@ @@
   /**
    * HTTP request.
    *
-   * @return bool|\Symfony\Component\HttpFoundation\JsonResponse
+   * @return bool|JsonResponse
    *   The JSON response.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function request() {
     if (empty($_GET['url']) || !UrlHelper::isValid($_GET['url'], TRUE)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


29) modules/contrib/gutenberg/src/Controller/MediaController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gutenberg\Controller;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\file\Entity\File;
 use Drupal\gutenberg\MediaSelectionProcessor\MediaSelectionProcessorManagerInterface;
@@ @@
   /**
    * The media service.
    *
-   * @var \Drupal\gutenberg\Service\MediaService
+   * @var MediaService
    */
   protected $mediaService;

@@ @@
   /**
    * The media selection processor manager.
    *
-   * @var \Drupal\gutenberg\MediaSelectionProcessor\MediaSelectionProcessorManagerInterface
+   * @var MediaSelectionProcessorManagerInterface
    */
   protected $mediaSelectionProcessorManager;

@@ @@
   /**
    * MediaController constructor.
    *
-   * @param \Drupal\gutenberg\Service\MediaService $media_service
+   * @param MediaService $media_service
    *   The media service.
-   * @param \Drupal\gutenberg\MediaSelectionProcessor\MediaSelectionProcessorManagerInterface $media_selection_processor_manager
+   * @param MediaSelectionProcessorManagerInterface $media_selection_processor_manager
    *   The media selection processor manager.
    */
   public function __construct(MediaService $media_service, MediaSelectionProcessorManagerInterface $media_selection_processor_manager) {
@@ @@
   /**
    * Render Drupal's media library dialog.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Current request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    *
    * @throws \Exception
@@ @@
   /**
    * Load media data.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Current request.
    * @param string $media
    *   Media data (numeric or stringified JSON for media data processing).
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function loadMedia(Request $request, string $media) {
     $media_entities = $this->mediaSelectionProcessorManager->processData($media);
@@ @@
    * @param string $media
    *   Media data (numeric or stringified JSON for media data processing).
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    */
   public function render(string $media) {
@@ @@
   /**
    * Upload files, save as file and media entity if possible.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Current request.
-   * @param \Drupal\editor\Entity\Editor|null $editor
+   * @param Editor|null $editor
    *   Editor entity instance.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    *
    * @throws \Exception
@@ @@
   /**
    * Get data of the media entity required for Gutenberg editor.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Current request.
-   * @param \Drupal\file\Entity\File|null $file
+   * @param File|null $file
    *   Loaded found file entity instance.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    *
    * @throws \Exception
@@ @@
   /**
    * Searches for files.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    * @param string $type
    *   The MIME type search string.
@@ @@
    * @param string $search
    *   The filename search string.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    */
   public function search(Request $request, string $type = '', string $search = '') {
@@ @@
   /**
    * Updates file data.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Current request.
    * @param string|int $fid
    *   File id.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    *
    * @throws \Exception
@@ @@
   /**
    * Get data for autocomplete.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Current request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    */
   public function autocomplete(Request $request) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/gutenberg/src/Controller/BlocksController.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Block\BlockManagerInterface instance.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;

@@ @@
   /**
    * Drupal\Core\Config\ConfigFactoryInterface instance.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Drupal\gutenberg\BlocksRendererHelper instance.
    *
-   * @var \Drupal\gutenberg\BlocksRendererHelper
+   * @var BlocksRendererHelper
    */
   protected $blocksRenderer;

@@ @@
   /**
    * BlocksController constructor.
    *
-   * @param \Drupal\Core\Block\BlockManagerInterface $block_manager
+   * @param BlockManagerInterface $block_manager
    *   Block manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory service.
-   * @param \Drupal\gutenberg\BlocksRendererHelper $blocks_renderer
+   * @param BlocksRendererHelper $blocks_renderer
    *   Blocks renderer helper service.
    */
   public function __construct(
@@ @@
   /**
    * Returns JSON representing the loaded blocks.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    * @param string $content_type
    *   The content type to fetch settings from.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    */
   public function loadByType(Request $request, $content_type) {
@@ @@
    * @param string $plugin_id
    *   Plugin ID.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    */
   public function loadById($plugin_id) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/gutenberg/src/BlocksRendererHelper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gutenberg;

+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Block\BlockManagerInterface;
 use Drupal\Core\Block\BlockPluginInterface;
@@ @@
   /**
    * Drupal\Core\Render\RendererInterface instance.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * Drupal\Core\Block\BlockManagerInterface instance.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;

@@ @@
   /**
    * Drupal\Core\Session\AccountProxyInterface instance.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * BlocksRendererHelper constructor.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   Renderer service.
-   * @param \Drupal\Core\Block\BlockManagerInterface $block_manager
+   * @param BlockManagerInterface $block_manager
    *   Block manager service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   Current user service.
    */
   public function __construct(
@@ @@
   /**
    * Return render array for given block plugin.
    *
-   * @param \Drupal\Core\Block\BlockPluginInterface $plugin_block
+   * @param BlockPluginInterface $plugin_block
    *   Block Plugin instance.
    *
-   * @return array|\Drupal\Component\Render\MarkupInterface
+   * @return array|MarkupInterface
    *   Array containing render array, or empty.
    */
   public function getRenderFromBlockPlugin(BlockPluginInterface $plugin_block) {
@@ @@
   /**
    * Check if the access for current user is forbidden.
    *
-   * @param \Drupal\Core\Block\BlockPluginInterface $plugin_block
+   * @param BlockPluginInterface $plugin_block
    *   Block Plugin instance.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


32) modules/contrib/gutenberg/src/AssertMediaTrait.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Assert if provided entity is type of FileInterface.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity instance to check.
    *
    * @throws \Exception
@@ @@
   /**
    * Assert if provided entity is type of MediaInterface.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity instance to check.
    *
    * @throws \Exception
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


33) modules/contrib/gutenberg/src/Annotation/GutenbergPlugin.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gutenberg\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the Gutenberg plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


34) modules/contrib/gutenberg/modules/gutenberg_cloud/src/Form/BlockManagerForm.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Cloud Block Manager service.
    *
-   * @var \Drupal\gutenberg_cloud\CloudBlockManager
+   * @var CloudBlockManager
    */
   protected $blockManager;

@@ @@
   /**
    * Library Discovery service.
    *
-   * @var \Drupal\Core\Asset\LibraryDiscoveryInterface
+   * @var LibraryDiscoveryInterface
    */
   protected $libraryDiscovery;

@@ @@
   /**
    * BlockManagerForm constructor.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Messanger service.
-   * @param \Drupal\gutenberg_cloud\CloudBlockManager $block_manager
+   * @param CloudBlockManager $block_manager
    *   Cloud Block Manager service.
-   * @param \Drupal\Core\Asset\LibraryDiscoveryInterface $library_discovery
+   * @param LibraryDiscoveryInterface $library_discovery
    *   Library Discovery service.
    */
   public function __construct(MessengerInterface $messenger, CloudBlockManager $block_manager, LibraryDiscoveryInterface $library_discovery) {
@@ @@
    *
    * @param array $form
    *   Form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Modal dialog.
    */
   public function viewDetails(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   Form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   Form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   Form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   Form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    * @param string $type
    *   Action to perform.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/gutenberg/modules/gutenberg_cloud/src/CloudBlockManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gutenberg_cloud;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use GuzzleHttp\ClientInterface;

@@ @@
   /**
    * The http client service.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;

@@ @@
   /**
    * CloudBlockManager constructor.
    *
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   Http client service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   Config factory service.
    */
   public function __construct(ClientInterface $http_client, ConfigFactoryInterface $config) {
@@ @@
   /**
    * Getter for Gutenberg Cloud Blocks config.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig
+   * @return ImmutableConfig
    *   Config.
    */
   public function getConfig() {
@@ @@
    * @param \Drupal\gutenberg_cloud\string $name
    *   Block name.
    *
-   * @return \Drupal\gutenberg_cloud\CloudBlock|null
+   * @return CloudBlock|null
    *   Instance of Cloud Block or null.
    */
   public function loadRemote(string $name) {
@@ @@
   /**
    * Check if the block is enabled locally.
    *
-   * @param \Drupal\gutenberg_cloud\CloudBlock $block
+   * @param CloudBlock $block
    *   CloudBlock instance.
    *
    * @return bool
@@ @@
   /**
    * Compare remote and local version of block.
    *
-   * @param \Drupal\gutenberg_cloud\CloudBlock $block
+   * @param CloudBlock $block
    *   CloudBlock instance.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


36) modules/contrib/gutenberg/gutenberg.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\Core\Entity\ContentEntityForm;
+use Drupal\Core\Config\Config;
 /**
  * @file
  * Provides integration with the Gutenberg editor.
@@ @@
  *
  * @param array $form
  *   The form definition array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current state of the form.
  */
 function _gutenberg_node_type_form_submit(array $form, FormStateInterface $form_state) {
@@ @@

   $form['#attached']['drupalSettings']['gutenberg']['metaboxes'][] = 'edit-metabox-fields';

-  /** @var \Drupal\Core\Extension\ModuleHandlerInterface $module_handler */
+  /** @var ModuleHandlerInterface $module_handler */
   $module_handler = \Drupal::service('module_handler');
   $form['#attached']['drupalSettings']['gutenberg']['media-enabled'] = $module_handler->moduleExists('media');
   if ($form['#attached']['drupalSettings']['gutenberg']['media-library-enabled'] = $module_handler->moduleExists('media_library')) {
@@ @@

   if (!isset($settings)) {
     $theme_name = \Drupal::config('system.theme')->get('default');
-    $theme_path = drupal_get_path('theme', $theme_name);
+    $theme_path = \Drupal::service('extension.list.theme')->getPath($theme_name);

     $file_path = DRUPAL_ROOT . '/' . $theme_path . '/' . $theme_name . '.gutenberg.yml';
     if (file_exists($file_path)) {
@@ @@
  *
  * @param array $element
  *   Render Element.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   Form state object.
  * @param array $complete_form
  *   Complete form array.
@@ @@
   if (!empty($element['format']) && isset($element['format']['format']['#options']['gutenberg'])) {
     // By default let's assume that gutenberg format is not allowed.
     $gutenberg_allowed = FALSE;
-    /** @var \Drupal\Core\Entity\ContentEntityForm $form */
+    /** @var ContentEntityForm $form */
     $form = $form_state->getFormObject();
     // Check whether the form that contains the element is an EntityForm.
     if ($form instanceof EntityFormInterface) {
@@ @@
       if ($entity instanceof NodeInterface) {
         // Get the node type to get the Gutenberg experience setting.
         $node_type = $entity->bundle();
-        /** @var \Drupal\Core\Config\Config $config */
+        /** @var Config $config */
         $config = \Drupal::service('config.factory')
           ->getEditable('gutenberg.settings');
         $gutenberg_enabled = $config->get($node_type . '_enable_full');
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [OK] 36 files have been changed by Rector                                      

