diff --git a/backup_db.module b/backup_db.module
index 5a0a221..d51b356 100755
--- a/backup_db.module
+++ b/backup_db.module
@@ -1,5 +1,9 @@
 <?php
 
+use Drupal\Core\Database\StatementInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 /**
  * @file
  * backup_db.module
@@ -15,7 +19,7 @@ use Drupal\Core\Database\Database;
  * @param array $file
  *   The file.
  *
- * @return \Drupal\Core\Database\StatementInterface|int|string|null
+ * @return StatementInterface|int|string|null
  *
  * @throws \Exception
  */
@@ -55,9 +59,9 @@ function backup_db_history_load($id) {
  * @return bool
  *   Return the status.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
+ * @throws EntityStorageException
  */
 function backup_db_history_delete($id) {
   $status = FALSE;
diff --git a/src/Adapter/BackupDatabaseLocalAdapter.php b/src/Adapter/BackupDatabaseLocalAdapter.php
index 4270556..c84d857 100755
--- a/src/Adapter/BackupDatabaseLocalAdapter.php
+++ b/src/Adapter/BackupDatabaseLocalAdapter.php
@@ -14,14 +14,14 @@ class BackupDatabaseLocalAdapter implements BackupDatabaseAdapterInterface {
   /**
    * The backup client.
    *
-   * @var \Drupal\backup_db\BackupDatabaseClientInterface
+   * @var BackupDatabaseClientInterface
    */
   private $client;
 
   /**
    * The constructor.
    *
-   * @param \Drupal\backup_db\BackupDatabaseClientInterface $client
+   * @param BackupDatabaseClientInterface $client
    *   The backup client.
    */
   public function __construct(BackupDatabaseClientInterface $client) {
diff --git a/src/Adapter/BackupDatabaseRemoteAdapter.php b/src/Adapter/BackupDatabaseRemoteAdapter.php
index 0e04f9c..17f37bf 100755
--- a/src/Adapter/BackupDatabaseRemoteAdapter.php
+++ b/src/Adapter/BackupDatabaseRemoteAdapter.php
@@ -15,14 +15,14 @@ class BackupDatabaseRemoteAdapter implements BackupDatabaseAdapterInterface {
   /**
    * The backup client.
    *
-   * @var \Drupal\backup_db\BackupDatabaseClientInterface
+   * @var BackupDatabaseClientInterface
    */
   private $client;
 
   /**
    * The constructor.
    *
-   * @param \Drupal\backup_db\BackupDatabaseClientInterface $client
+   * @param BackupDatabaseClientInterface $client
    *   The backup client.
    */
   public function __construct(BackupDatabaseClientInterface $client) {
diff --git a/src/BackupDatabaseClient.php b/src/BackupDatabaseClient.php
index 2d9c554..6d7077e 100755
--- a/src/BackupDatabaseClient.php
+++ b/src/BackupDatabaseClient.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\backup_db;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Ifsnop\Mysqldump as IMysqldump;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -14,32 +15,32 @@ class BackupDatabaseClient implements BackupDatabaseClientInterface {
   /**
    * The backup file handler.
    *
-   * @var \Drupal\backup_db\BackupDatabaseFileHandler
+   * @var BackupDatabaseFileHandler
    */
   protected $handler;
 
   /**
    * The connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * The config.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;
 
   /**
    * The constructor.
    *
-   * @param \Drupal\backup_db\BackupDatabaseFileHandler $handler
+   * @param BackupDatabaseFileHandler $handler
    *   The backup file handler.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The connection.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The config.
    */
   public function __construct(BackupDatabaseFileHandler $handler, Connection $connection, ConfigFactoryInterface $config) {
@@ -127,7 +128,7 @@ class BackupDatabaseClient implements BackupDatabaseClientInterface {
   /**
    * Set or update the current database connection.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The connection.
    */
   public function setConnection(Connection $connection) {
@@ -137,7 +138,7 @@ class BackupDatabaseClient implements BackupDatabaseClientInterface {
   /**
    * Return the file handler.
    *
-   * @return \Drupal\backup_db\BackupDatabaseFileHandler
+   * @return BackupDatabaseFileHandler
    *   Returns the file handler.
    */
   public function getFileHandler() {
@@ -150,7 +151,7 @@ class BackupDatabaseClient implements BackupDatabaseClientInterface {
    * @param string $name
    *   The settings name.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig
+   * @return ImmutableConfig
    *   Returns the config.
    */
   public function getSettings($name = 'backup_db.settings') {
diff --git a/src/BackupDatabaseFileHandler.php b/src/BackupDatabaseFileHandler.php
index 5d186df..40767ea 100755
--- a/src/BackupDatabaseFileHandler.php
+++ b/src/BackupDatabaseFileHandler.php
@@ -13,14 +13,14 @@ class BackupDatabaseFileHandler {
   /**
    * The backup file.
    *
-   * @var \Drupal\backup_db\BackupDatabaseFile
+   * @var BackupDatabaseFile
    */
   protected $file;
 
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystem
+   * @var FileSystem
    */
   protected $filesystem;
 
@@ -34,9 +34,9 @@ class BackupDatabaseFileHandler {
   /**
    * The constructor.
    *
-   * @param \Drupal\backup_db\BackupDatabaseFile $file
+   * @param BackupDatabaseFile $file
    *   The database export file to act on.
-   * @param \Drupal\Core\File\FileSystem $filesystem
+   * @param FileSystem $filesystem
    *   Provides helpers to operate on files and stream wrappers.
    */
   public function __construct(BackupDatabaseFile $file, FileSystem $filesystem) {
diff --git a/src/Controller/BackupDatabaseController.php b/src/Controller/BackupDatabaseController.php
index 3acdbd8..1078a6c 100755
--- a/src/Controller/BackupDatabaseController.php
+++ b/src/Controller/BackupDatabaseController.php
@@ -32,7 +32,7 @@ class BackupDatabaseController extends ControllerBase {
     $rows = [];
     foreach ($results as $result) {
       $url = backup_db_link($result->uri);
-      $location = Link::fromTextAndUrl($result->uri, Url::fromUri('base:/' . file_create_url($url)));
+      $location = Link::fromTextAndUrl($result->uri, Url::fromUri('base:/' . \Drupal::service('file_url_generator')->generateAbsoluteString($url)));
       $created = \Drupal::service('date.formatter')
         ->format($result->created, 'html_date');
 
diff --git a/tests/src/Unit/BackupDatabaseAdapterTest.php b/tests/src/Unit/BackupDatabaseAdapterTest.php
index 5de8883..51f61a1 100755
--- a/tests/src/Unit/BackupDatabaseAdapterTest.php
+++ b/tests/src/Unit/BackupDatabaseAdapterTest.php
@@ -7,6 +7,7 @@
 
 namespace Drupal\Tests\backup_db\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Tests\UnitTestCase;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\backup_db\Adapter\BackupDatabaseLocalAdapter;
@@ -20,10 +21,11 @@ use Drupal\backup_db\Adapter\BackupDatabaseRemoteAdapter;
  */
 class BackupDatabaseAdapterTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $container = new ContainerBuilder();
diff --git a/tests/src/Unit/BackupDatabaseClientTest.php b/tests/src/Unit/BackupDatabaseClientTest.php
index 8505a21..332b9f1 100755
--- a/tests/src/Unit/BackupDatabaseClientTest.php
+++ b/tests/src/Unit/BackupDatabaseClientTest.php
@@ -7,6 +7,7 @@
 
 namespace Drupal\Tests\backup_db\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Prophecy\Argument;
 use Drupal\Tests\UnitTestCase;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
@@ -19,10 +20,11 @@ use Drupal\Core\DependencyInjection\ContainerBuilder;
  */
 class BackupDatabaseClientTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $handler = $this->prophesize('Drupal\backup_db\BackupDatabaseFileHandler');
