modules/contrib/bootstrap_paragraphs/bootstrap_paragraphs.install
modules/contrib/bootstrap_paragraphs/bootstrap_paragraphs.module
modules/contrib/bootstrap_paragraphs/modules/bp_callout/bp_callout.module
modules/contrib/bootstrap_paragraphs/modules/bp_card/bp_card.module
modules/contrib/bootstrap_paragraphs/modules/bp_contact/bp_contact.module
modules/contrib/bootstrap_paragraphs/modules/bp_quicklinks/bp_quicklinks.module
modules/contrib/bootstrap_paragraphs/modules/bp_statistics/bp_statistics.module
modules/contrib/bootstrap_paragraphs/modules/bp_webform/bp_webform.module

1 file with changes
===================

1) modules/contrib/bootstrap_paragraphs/bootstrap_paragraphs.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Config\StorageInterface;
 /**
  * @file
  * Install, uninstall and update hooks for Bootstrap Paragraphs module.
@@ @@
  *   Base path.
  */
 function bootstrap_paragraphs_read_in_new_config($config_name, $bp_path) {
-  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
+  /** @var StorageInterface $active_storage */
   $active_storage = \Drupal::service('config.storage');
   $active_storage->write($config_name, Yaml::parse(file_get_contents($bp_path . '/config/install/' . $config_name . '.yml')));
 }
@@ @@
  *   config file, $sets would be ['content' => 'content'].
  */
 function bootstrap_paragraphs_update_configuration_from_yml($ymlFileName, array $sets) {
-  $bp_path = drupal_get_path('module', 'bootstrap_paragraphs');
+  $bp_path = \Drupal::service('extension.list.module')->getPath('bootstrap_paragraphs');
   $yml = Yaml::parse(file_get_contents($bp_path . '/config/optional/' . $ymlFileName . '.yml'));
   $config = \Drupal::configFactory()->getEditable($ymlFileName);
   foreach ($sets as $key => $value) {
@@ @@
  *     . in string for array).
  */
 function bootstrap_paragraphs_update_entity_from_yml($ymlFileName, $entityType, $id, array $setComponents) {
-  $bp_path = drupal_get_path('module', 'bootstrap_paragraphs');
+  $bp_path = \Drupal::service('extension.list.module')->getPath('bootstrap_paragraphs');
   $yml = Yaml::parse(file_get_contents($bp_path . '/config/optional/' . $ymlFileName . '.yml'));

   $entity = \Drupal::entityTypeManager()
@@ @@
  */
 function bootstrap_paragraphs_update_8201() {
   // Sets variable for the path.
-  $bp_path = drupal_get_path('module', 'bootstrap_paragraphs');
+  $bp_path = \Drupal::service('extension.list.module')->getPath('bootstrap_paragraphs');

   // Create Paragraphs bundle.
   bootstrap_paragraphs_read_in_new_config('paragraphs.paragraphs_type.bp_column_wrapper', $bp_path);
@@ @@
  */
 function bootstrap_paragraphs_update_8202() {
   // Sets variable for the path.
-  $bp_path = drupal_get_path('module', 'bootstrap_paragraphs');
+  $bp_path = \Drupal::service('extension.list.module')->getPath('bootstrap_paragraphs');

   // Create field storage.
   $bp_accordion_expand_storage_yml = Yaml::parse(file_get_contents($bp_path . '/config/optional/field.storage.paragraph.bp_accordion_expand.yml'));
@@ @@
  */
 function bootstrap_paragraphs_update_8204() {
   // Sets variable for the path.
-  $bp_path = drupal_get_path('module', 'bootstrap_paragraphs');
+  $bp_path = \Drupal::service('extension.list.module')->getPath('bootstrap_paragraphs');

   // Creates field storage.
   $bp_header_storage_yml = Yaml::parse(file_get_contents($bp_path . '/config/optional/field.storage.paragraph.bp_header.yml'));
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [OK] 1 file has been changed by Rector                                         

