modules/contrib/group_subscription/group_subscription.install
modules/contrib/group_subscription/group_subscription.module
modules/contrib/group_subscription/src/Access/UserSettingsAccess.php
modules/contrib/group_subscription/src/Form/GroupSubscriptionAdminForm.php
modules/contrib/group_subscription/src/Form/GroupSubscriptionBlockForm.php
modules/contrib/group_subscription/src/Form/UserSettings.php
modules/contrib/group_subscription/src/Plugin/Block/GroupSubscriptionBlock.php
modules/contrib/group_subscription/src/Plugin/GroupSubscriptionGroupNode.php
modules/contrib/group_subscription/src/Plugin/Menu/MySubsLink.php
modules/contrib/group_subscription/src/Plugin/QueueWorker/AnnouncementBuilderBase.php
modules/contrib/group_subscription/src/Plugin/QueueWorker/CronAnnouncementBuilder.php
modules/contrib/group_subscription/src/Plugin/QueueWorker/CronDailyEmail.php
modules/contrib/group_subscription/src/Plugin/QueueWorker/CronImmediateAnnouncement.php
modules/contrib/group_subscription/src/Plugin/QueueWorker/CronImmediateEmail.php
modules/contrib/group_subscription/src/Plugin/QueueWorker/CronSubscriptionBuilder.php
modules/contrib/group_subscription/src/Plugin/QueueWorker/DailyEmailBase.php
modules/contrib/group_subscription/src/Plugin/QueueWorker/ImmediateAnnouncementBase.php
modules/contrib/group_subscription/src/Plugin/QueueWorker/ImmediateEmailBase.php
modules/contrib/group_subscription/src/Plugin/QueueWorker/SubscriptionBuilderBase.php

11 files with changes
=====================

1) modules/contrib/group_subscription/src/Plugin/QueueWorker/SubscriptionBuilderBase.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * State API object.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The node storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $nodeStorage;

@@ @@
   /**
    * The comment storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $commentStorage;

@@ @@
   /**
    * The group storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $groupStorage;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/group_subscription/src/Plugin/QueueWorker/ImmediateEmailBase.php:32

    ---------- begin diff ----------
@@ @@
 abstract class ImmediateEmailBase extends QueueWorkerBase implements ContainerFactoryPluginInterface {

   /**
-  * The mail manager.
-  *
-  * @var Drupal\Core\Mail\MailManager
-  */
+   * The mail manager.
+   *
+   * @var MailManager
+   */
   protected $mail;

   /**
    * The user storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $userStorage;

@@ @@
   /**
    * The node storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $nodeStorage;

@@ @@
   /**
    * The comment storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $commentStorage;

@@ @@
   /**
    * The group storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $groupStorage;

@@ @@
   /**
    * The theme manager.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/group_subscription/src/Plugin/QueueWorker/ImmediateAnnouncementBase.php:20

    ---------- begin diff ----------
@@ @@
 abstract class ImmediateAnnouncementBase extends QueueWorkerBase implements ContainerFactoryPluginInterface {

   /**
-  * The mail manager.
-  *
-  * @var Drupal\Core\Mail\MailManager
-  */
+   * The mail manager.
+   *
+   * @var MailManager
+   */
   protected $mail;

   /**
    * The user storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $userStorage;

@@ @@
   /**
    * The node storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $nodeStorage;

@@ @@
   /**
    * The theme manager.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/group_subscription/src/Plugin/QueueWorker/DailyEmailBase.php:33

    ---------- begin diff ----------
@@ @@
 abstract class DailyEmailBase extends QueueWorkerBase implements ContainerFactoryPluginInterface {

   /**
-  * The mail manager.
-  *
-  * @var Drupal\Core\Mail\MailManager
-  */
+   * The mail manager.
+   *
+   * @var MailManager
+   */
   protected $mail;

   /**
    * The user storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $userStorage;

@@ @@
   /**
    * The node storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $nodeStorage;

@@ @@
   /**
    * The comment storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $commentStorage;

@@ @@
   /**
    * The group storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $groupStorage;

@@ @@
   /**
    * The theme manager.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/group_subscription/src/Plugin/QueueWorker/AnnouncementBuilderBase.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The node storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $nodeStorage;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/group_subscription/src/Plugin/Menu/MySubsLink.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/group_subscription/src/Form/UserSettings.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_subscription\Form;

+use Drupal\user\Entity\User;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Messenger\MessengerInterface;
@@ @@
   /**
    * Drupal\Core\Messenger\MessengerInterface definition.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@

     $userprofile = \Drupal::routeMatch()->getParameter('user');

-    $account = \Drupal\user\Entity\User::load($userprofile);
+    $account = User::load($userprofile);
     if (!is_object($account)) {
       return;
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/group_subscription/src/Form/GroupSubscriptionBlockForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_subscription\Form;

+use Drupal\group\Entity\GroupInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The group entity.
    *
-   * @var \Drupal\group\Entity\GroupInterface
+   * @var GroupInterface
    */
   protected $group;

@@ @@
   /**
    * Constructs a new GroupSubscriptionBlockForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity Type Manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/group_subscription/src/Form/GroupSubscriptionAdminForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_subscription\Form;

+use Drupal\node\Entity\NodeType;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Messenger\MessengerInterface;
@@ @@
   /**
    * Drupal\Core\Messenger\MessengerInterface definition.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
     ];

     // Grab node types so we can specify one for site-wide announements.
-    $node_types = \Drupal\node\Entity\NodeType::loadMultiple();
+    $node_types = NodeType::loadMultiple();
     $type_options = [];
     foreach ($node_types as $node_type) {
       // TODO: Add check to omit types used for group content.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/group_subscription/src/Access/UserSettingsAccess.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_subscription\Access;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * Checks access for the UserSettings form.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(RouteMatchInterface $route_match, AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/group_subscription/group_subscription.module:788

    ---------- begin diff ----------
@@ @@
  * Add item to content queue to feed subscriptions.
  * This should never be called when an entity has been edited.
  *
- * @param \Drupal\group\Entity\GroupContentInterface $entity
+ * @param GroupContentInterface $entity
  *
- * @param Drupal\Core\Entity\EntityInterface $comment
+ * @param EntityInterface $comment
  */
 function group_subscription_queue_content(GroupContentInterface $entity, EntityInterface $comment = NULL) {
   // Grab the subscription builder queue.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 11 files have been changed by Rector                                      

