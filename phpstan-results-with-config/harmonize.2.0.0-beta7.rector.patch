diff --git a/harmonize.module b/harmonize.module
index e231712..a68b58d 100644
--- a/harmonize.module
+++ b/harmonize.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\EntityInterface;
 /**
  * @file
  * Module file for the Harmonize module.
@@ -22,7 +23,7 @@ function harmonize_help(string $route_name): string {
 /**
  * Implements hook_entity_presave().
  */
-function harmonize_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
+function harmonize_entity_presave(EntityInterface $entity) {
   switch ($entity->getEntityTypeId()) {
     case 'node':
       Cache::invalidateTags([HarmonizerTypes::ENTITY . '.' . $entity->getEntityTypeId() . '.' . $entity->bundle() . '.' . $entity->id()]);
diff --git a/modules/harmonize_example/themes/custom/YOUR_THEME/harmony/node/entity.node.page.harmony.php b/modules/harmonize_example/themes/custom/YOUR_THEME/harmony/node/entity.node.page.harmony.php
index 08373e5..8d30184 100644
--- a/modules/harmonize_example/themes/custom/YOUR_THEME/harmony/node/entity.node.page.harmony.php
+++ b/modules/harmonize_example/themes/custom/YOUR_THEME/harmony/node/entity.node.page.harmony.php
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\harmonize\Service\Harmonics;
 /**
  * @file
  * Override & customize data harmonizations for a given Drupal object or entity.
@@ -16,7 +17,7 @@
  *    The data consigned by core Harmonize behaviour or Refiners..
  * @var array $harmony
  *    The data that will be returned to the Twig template.
- * @var \Drupal\harmonize\Service\Harmonics $harmonics
+ * @var Harmonics $harmonics
  *    The Harmonics service which contains helper functions.
  *
  * Re-arrange and assign data to the $harmony variable here, and that's all you
diff --git a/modules/harmonize_rest/src/Plugin/rest/resource/Entity/SingleEntityResource.php b/modules/harmonize_rest/src/Plugin/rest/resource/Entity/SingleEntityResource.php
index f55f90a..b5ba9dd 100644
--- a/modules/harmonize_rest/src/Plugin/rest/resource/Entity/SingleEntityResource.php
+++ b/modules/harmonize_rest/src/Plugin/rest/resource/Entity/SingleEntityResource.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\teardrop_rest\Plugin\rest\resource\Entity;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\harmonize_rest\Plugin\rest\resource\HarmonizeRestResourceBase;
 use Symfony\Component\HttpFoundation\JsonResponse;
 use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
@@ -31,11 +33,11 @@ class SingleEntityResource extends HarmonizeRestResourceBase {
    * @param int $entity_id
    *   ID of the entity being requested.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   Result of the API call.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function get($entity_type_id, $entity_id) : JsonResponse {
     // You must to implement the logic of your REST Resource here.
diff --git a/modules/harmonize_rest/src/Plugin/rest/resource/HarmonizeRestResourceBase.php b/modules/harmonize_rest/src/Plugin/rest/resource/HarmonizeRestResourceBase.php
index dab1576..f0f731d 100644
--- a/modules/harmonize_rest/src/Plugin/rest/resource/HarmonizeRestResourceBase.php
+++ b/modules/harmonize_rest/src/Plugin/rest/resource/HarmonizeRestResourceBase.php
@@ -19,21 +19,21 @@ class HarmonizeRestResourceBase extends ResourceBase {
   /**
    * An instance of the main Harmonize service.
    *
-   * @var \Drupal\harmonize\Service\Harmonize
+   * @var Harmonize
    */
   protected $harmonizeService;
 
   /**
    * A EntityTypeManager instance.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * A current user instance.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
@@ -48,13 +48,13 @@ class HarmonizeRestResourceBase extends ResourceBase {
    *   The plugin implementation definition.
    * @param array $serializer_formats
    *   The available serialization formats.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\harmonize\Service\Harmonize $harmonize_service
+   * @param Harmonize $harmonize_service
    *   A HarmonizerManager instance.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   A EntityTypeManager instance.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   A current user instance.
    */
   public function __construct(
diff --git a/src/Event/EntityFieldHarmonizationEvent.php b/src/Event/EntityFieldHarmonizationEvent.php
index 993fc22..1d74834 100644
--- a/src/Event/EntityFieldHarmonizationEvent.php
+++ b/src/Event/EntityFieldHarmonizationEvent.php
@@ -2,10 +2,11 @@
 
 namespace Drupal\harmonize\Event;
 
+use Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer\EntityFieldHarmonizer;
 /**
  * Harmonization Event for Entity Fields.
  *
- * @property \Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer\EntityFieldHarmonizer $harmonizer
+ * @property EntityFieldHarmonizer $harmonizer
  *
  * @package Drupal\harmonize\Event
  */
diff --git a/src/Event/EntityHarmonizationEvent.php b/src/Event/EntityHarmonizationEvent.php
index 56c6ebc..8473e33 100644
--- a/src/Event/EntityHarmonizationEvent.php
+++ b/src/Event/EntityHarmonizationEvent.php
@@ -2,10 +2,11 @@
 
 namespace Drupal\harmonize\Event;
 
+use Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityHarmonizer;
 /**
  * Harmonization Event for Entities.
  *
- * @property \Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityHarmonizer $harmonizer
+ * @property EntityHarmonizer $harmonizer
  *
  * @package Drupal\harmonize\Event
  */
diff --git a/src/Event/FormHarmonizationEvent.php b/src/Event/FormHarmonizationEvent.php
index ca9706a..7fdfbe3 100644
--- a/src/Event/FormHarmonizationEvent.php
+++ b/src/Event/FormHarmonizationEvent.php
@@ -2,10 +2,11 @@
 
 namespace Drupal\harmonize\Event;
 
+use Drupal\harmonize\Harmonizer\FormHarmonizer\FormHarmonizer;
 /**
  * Harmonization Event for Forms.
  *
- * @property \Drupal\harmonize\Harmonizer\FormHarmonizer\FormHarmonizer $harmonizer
+ * @property FormHarmonizer $harmonizer
  *
  * @package Drupal\harmonize\Event
  */
diff --git a/src/Event/HarmonizationEvent.php b/src/Event/HarmonizationEvent.php
index f305fc0..da0faa4 100644
--- a/src/Event/HarmonizationEvent.php
+++ b/src/Event/HarmonizationEvent.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\harmonize\Event;
 
+use Drupal\harmonize\Harmonizer\Harmonizer;
 use Drupal\harmonize\Harmonizer\HarmonizerInterface;
 use Drupal\Component\EventDispatcher\Event;
 
@@ -14,14 +15,14 @@ class HarmonizationEvent extends Event {
   /**
    * The harmonizer that fired the event.
    *
-   * @var \Drupal\harmonize\Harmonizer\Harmonizer
+   * @var Harmonizer
    */
   public $harmonizer;
 
   /**
    * Constructs the object.
    *
-   * @param \Drupal\harmonize\Harmonizer\HarmonizerInterface $harmonizer
+   * @param HarmonizerInterface $harmonizer
    *   Harmonizer attached to the event that was triggered.
    */
   public function __construct(HarmonizerInterface $harmonizer) {
diff --git a/src/Event/HarmonizationEventFactory.php b/src/Event/HarmonizationEventFactory.php
index 8905179..bc18660 100644
--- a/src/Event/HarmonizationEventFactory.php
+++ b/src/Event/HarmonizationEventFactory.php
@@ -16,7 +16,7 @@ class HarmonizationEventFactory {
   /**
    * Builds and returns the appropriate event class.
    *
-   * @param \Drupal\harmonize\Harmonizer\Harmonizer $harmonizer
+   * @param Harmonizer $harmonizer
    *   Harmonizer that launched this event.
    *
    * @return array
diff --git a/src/Event/MenuHarmonizationEvent.php b/src/Event/MenuHarmonizationEvent.php
index c17e0ba..8ca5fdc 100644
--- a/src/Event/MenuHarmonizationEvent.php
+++ b/src/Event/MenuHarmonizationEvent.php
@@ -2,10 +2,11 @@
 
 namespace Drupal\harmonize\Event;
 
+use Drupal\harmonize\Harmonizer\MenuHarmonizer\MenuHarmonizer;
 /**
  * Harmonization Event for Menus.
  *
- * @property \Drupal\harmonize\Harmonizer\MenuHarmonizer\MenuHarmonizer $harmonizer
+ * @property MenuHarmonizer $harmonizer
  *
  * @package Drupal\harmonize\Event
  */
diff --git a/src/EventSubscriber/HarmonyEventSubscriber.php b/src/EventSubscriber/HarmonyEventSubscriber.php
index 9c76623..3dc9a35 100644
--- a/src/EventSubscriber/HarmonyEventSubscriber.php
+++ b/src/EventSubscriber/HarmonyEventSubscriber.php
@@ -44,21 +44,21 @@ class HarmonyEventSubscriber implements EventSubscriberInterface {
   /**
    * The Harmonics service injected through DI.
    *
-   * @var \Drupal\harmonize\Service\Harmonics
+   * @var Harmonics
    */
   private $harmonics;
 
   /**
    * HarmonyEventSubscriber constructor.
    *
-   * @param \Drupal\harmonize\Service\Harmonics $harmonics
+   * @param Harmonics $harmonics
    *   The Harmonics service injected through DI.
-   * @param \Drupal\Core\Theme\ThemeManager $themeManager
+   * @param ThemeManager $themeManager
    *   Theme Manager injected through DI.
    */
   public function __construct(Harmonics $harmonics, ThemeManager $themeManager) {
     $this->harmonics = $harmonics;
-    $this->directory = drupal_get_path('theme', $themeManager->getActiveTheme()->getName()) . self::ROOT;
+    $this->directory = \Drupal::service('extension.list.theme')->getPath($themeManager->getActiveTheme()->getName()) . self::ROOT;
     if (file_exists($this->directory . '/functions.php')) {
       /* @noinspection PhpIncludeInspection */
       include_once $this->directory . '/functions.php';
@@ -77,7 +77,7 @@ class HarmonyEventSubscriber implements EventSubscriberInterface {
   /**
    * React to a Harmonizer event.
    *
-   * @param \Drupal\harmonize\Event\HarmonizationEvent $event
+   * @param HarmonizationEvent $event
    *   Event that occurred, containing the harmonizer that fired the event.
    */
   public function onHarmonize(HarmonizationEvent $event) : void {
diff --git a/src/EventSubscriber/RefineryEventSubscriber.php b/src/EventSubscriber/RefineryEventSubscriber.php
index 919a79c..19acc78 100644
--- a/src/EventSubscriber/RefineryEventSubscriber.php
+++ b/src/EventSubscriber/RefineryEventSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\harmonize\EventSubscriber;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\harmonize\Constants\HarmonizerFlags;
 use Drupal\harmonize\Event\HarmonizationEvent;
 use Drupal\harmonize\Constants\HarmonizationEvents;
@@ -21,14 +22,14 @@ class RefineryEventSubscriber implements EventSubscriberInterface {
   /**
    * Use DI to inject the Refinery Plugin Manager.
    *
-   * @var \Drupal\harmonize\PluginManager\Refinery\Refinery
+   * @var Refinery
    */
   private $refinery;
 
   /**
    * RefineryEventSubscriber constructor.
    *
-   * @param \Drupal\harmonize\PluginManager\Refinery\Refinery $refinery
+   * @param Refinery $refinery
    *   Refinery Plugin Manager injected through DI.
    */
   public function __construct(Refinery $refinery) {
@@ -47,10 +48,10 @@ class RefineryEventSubscriber implements EventSubscriberInterface {
   /**
    * React to a Harmonizer event.
    *
-   * @param \Drupal\harmonize\Event\HarmonizationEvent $event
+   * @param HarmonizationEvent $event
    *   Event that occurred, containing the harmonizer that fired the event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function onHarmonize(HarmonizationEvent $event) : void {
     /* @see \Drupal\harmonize\Harmonizer\Harmonizer::getSignatureParts() */
@@ -99,13 +100,12 @@ class RefineryEventSubscriber implements EventSubscriberInterface {
   }
 
   /* @noinspection PhpUnusedPrivateMethodInspection */
-
   /**
    * Sort refiners according to their weight.
    *
-   * @param \Drupal\harmonize\PluginManager\Refinery\RefinerInterface $a
+   * @param RefinerInterface $a
    *   First refiner plugin.
-   * @param \Drupal\harmonize\PluginManager\Refinery\RefinerInterface $b
+   * @param RefinerInterface $b
    *   Second refiner plugin.
    *
    * @return int
diff --git a/src/Form/HarmonizeDataConfigForm.php b/src/Form/HarmonizeDataConfigForm.php
index 2896584..6bb135f 100644
--- a/src/Form/HarmonizeDataConfigForm.php
+++ b/src/Form/HarmonizeDataConfigForm.php
@@ -21,16 +21,16 @@ class HarmonizeDataConfigForm extends ConfigFormBase {
   /**
    * Helpers service injected through DI.
    *
-   * @var \Drupal\harmonize\Service\Helpers
+   * @var Helpers
    */
   private $helpers;
 
   /**
    * HarmonizeConfigForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Drupal's Configuration Factory injected through DI.
-   * @param \Drupal\harmonize\Service\Helpers $helpers
+   * @param Helpers $helpers
    *   Harmonizer Helpers service injected through DI.
    */
   public function __construct(ConfigFactoryInterface $config_factory, Helpers $helpers) {
diff --git a/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/AddressEntityFieldHarmonizer.php b/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/AddressEntityFieldHarmonizer.php
index ac991d0..76a2e25 100644
--- a/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/AddressEntityFieldHarmonizer.php
+++ b/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/AddressEntityFieldHarmonizer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer;
 
+use Drupal\harmonize\Service\Harmonize;
 /**
  * Handles exceptions for 'address' type fields.
  *
@@ -10,7 +11,7 @@ namespace Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer;
  *
  * @link https://www.drupal.org/project/address
  *
- * @property \Drupal\harmonize\Service\Harmonize $harmonizeService
+ * @property Harmonize $harmonizeService
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer
  */
diff --git a/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/BooleanEntityFieldHarmonizer.php b/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/BooleanEntityFieldHarmonizer.php
index fe8d8c6..702d9e3 100644
--- a/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/BooleanEntityFieldHarmonizer.php
+++ b/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/BooleanEntityFieldHarmonizer.php
@@ -2,10 +2,11 @@
 
 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer;
 
+use Drupal\harmonize\Service\Harmonize;
 /**
  * Handles exceptions for 'boolean' type fields.
  *
- * @property \Drupal\harmonize\Service\Harmonize $harmonizeService
+ * @property Harmonize $harmonizeService
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer
  */
diff --git a/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/ColorEntityFieldHarmonizer.php b/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/ColorEntityFieldHarmonizer.php
index 1849fff..0141226 100644
--- a/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/ColorEntityFieldHarmonizer.php
+++ b/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/ColorEntityFieldHarmonizer.php
@@ -2,10 +2,11 @@
 
 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer;
 
+use Drupal\harmonize\Service\Harmonize;
 /**
  * Handles harmonization exceptions for 'color_field_type' type fields.
  *
- * @property \Drupal\harmonize\Service\Harmonize $harmonizeService
+ * @property Harmonize $harmonizeService
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer
  */
diff --git a/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/DateRangeEntityFieldHarmonizer.php b/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/DateRangeEntityFieldHarmonizer.php
index 783b0e0..fcdd96d 100644
--- a/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/DateRangeEntityFieldHarmonizer.php
+++ b/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/DateRangeEntityFieldHarmonizer.php
@@ -2,10 +2,11 @@
 
 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer;
 
+use Drupal\harmonize\Service\Harmonize;
 /**
  * Handles exceptions for 'datetime' type fields.
  *
- * @property \Drupal\harmonize\Service\Harmonize $harmonizeService
+ * @property Harmonize $harmonizeService
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer
  */
diff --git a/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/DateTimeEntityFieldHarmonizer.php b/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/DateTimeEntityFieldHarmonizer.php
index be55d11..1763ec4 100644
--- a/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/DateTimeEntityFieldHarmonizer.php
+++ b/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/DateTimeEntityFieldHarmonizer.php
@@ -2,10 +2,11 @@
 
 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer;
 
+use Drupal\harmonize\Service\Harmonize;
 /**
  * Handles exceptions for 'datetime' type fields.
  *
- * @property \Drupal\harmonize\Service\Harmonize $harmonizeService
+ * @property Harmonize $harmonizeService
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer
  */
diff --git a/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/EntityFieldHarmonizer.php b/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/EntityFieldHarmonizer.php
index f91c334..1fb4919 100644
--- a/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/EntityFieldHarmonizer.php
+++ b/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/EntityFieldHarmonizer.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer;
 
+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\harmonize\Harmonizer\Harmonizer;
 use Drupal\harmonize\Service\Harmonize;
@@ -11,7 +13,7 @@ use Drupal\harmonize\Service\Harmonize;
  *
  * This object is used to return clean field data.
  *
- * @property \Drupal\harmonize\Service\Harmonize $harmonizeService
+ * @property Harmonize $harmonizeService
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer
  */
@@ -22,7 +24,7 @@ class EntityFieldHarmonizer extends Harmonizer implements EntityFieldHarmonizerI
    *
    * Contains all of the field's data for the given entity.
    *
-   * @var \Drupal\Core\Field\FieldItemListInterface
+   * @var FieldItemListInterface
    */
   protected $fieldData;
 
@@ -52,14 +54,14 @@ class EntityFieldHarmonizer extends Harmonizer implements EntityFieldHarmonizerI
   /**
    * Contains the field definition declaration.
    *
-   * @var \Drupal\Core\Field\FieldDefinitionInterface
+   * @var FieldDefinitionInterface
    */
   protected $fieldDefinition;
 
   /**
    * Contains the Drupal storage of the field.
    *
-   * @var \Drupal\Core\Field\FieldStorageDefinitionInterface
+   * @var FieldStorageDefinitionInterface
    */
   protected $fieldStorage;
 
@@ -73,9 +75,9 @@ class EntityFieldHarmonizer extends Harmonizer implements EntityFieldHarmonizerI
   /**
    * EntityFieldHarmonizer constructor.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $fieldData
+   * @param FieldItemListInterface $fieldData
    *   The field data of the field being harmonized.
-   * @param \Drupal\harmonize\Service\Harmonize $harmonizeService
+   * @param Harmonize $harmonizeService
    *   Harmonize module's main service containing Drupal services.
    * @param string $type
    *   The type of harmonizer defined by a string key.
@@ -107,7 +109,7 @@ class EntityFieldHarmonizer extends Harmonizer implements EntityFieldHarmonizerI
   /**
    * Get the field data for this harmonizer.
    *
-   * @return \Drupal\Core\Field\FieldItemListInterface
+   * @return FieldItemListInterface
    *   Raw field data returned.
    */
   public function getFieldData() : FieldItemListInterface {
diff --git a/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/EntityReferenceEntityFieldHarmonizer.php b/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/EntityReferenceEntityFieldHarmonizer.php
index 4302582..224049e 100644
--- a/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/EntityReferenceEntityFieldHarmonizer.php
+++ b/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/EntityReferenceEntityFieldHarmonizer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer;
 
+use Drupal\harmonize\Service\Harmonize;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\harmonize\Constants\HarmonizeConfig;
 use Drupal\harmonize\Constants\HarmonizerFlags;
@@ -11,7 +12,7 @@ use Symfony\Component\Yaml\Yaml;
 /**
  * Handles exceptions for 'entity_reference' type fields.
  *
- * @property \Drupal\harmonize\Service\Harmonize $harmonizeService
+ * @property Harmonize $harmonizeService
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer
  */
diff --git a/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/EntityReferenceRevisionsEntityFieldHarmonizer.php b/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/EntityReferenceRevisionsEntityFieldHarmonizer.php
index 80b7922..af2ac6b 100644
--- a/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/EntityReferenceRevisionsEntityFieldHarmonizer.php
+++ b/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/EntityReferenceRevisionsEntityFieldHarmonizer.php
@@ -2,13 +2,14 @@
 
 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer;
 
+use Drupal\harmonize\Service\Harmonize;
 /**
  * Handles exceptions for 'entity_reference_revisions' type fields.
  *
  * @noinspection
  *   LongInheritanceChainInspection
  *
- * @property \Drupal\harmonize\Service\Harmonize $harmonizeService
+ * @property Harmonize $harmonizeService
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer
  */
diff --git a/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/FileEntityFieldHarmonizer.php b/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/FileEntityFieldHarmonizer.php
index b031197..69884a5 100644
--- a/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/FileEntityFieldHarmonizer.php
+++ b/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/FileEntityFieldHarmonizer.php
@@ -2,13 +2,14 @@
 
 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer;
 
+use Drupal\harmonize\Service\Harmonize;
 use Drupal\harmonize\Constants\HarmonizerFlags;
 use Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityHarmonizerFactory;
 
 /**
  * Handles exceptions for 'file' type fields.
  *
- * @property \Drupal\harmonize\Service\Harmonize $harmonizeService
+ * @property Harmonize $harmonizeService
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer
  */
diff --git a/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/GeofieldEntityFieldHarmonizer.php b/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/GeofieldEntityFieldHarmonizer.php
index c8ae470..d2dfa22 100644
--- a/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/GeofieldEntityFieldHarmonizer.php
+++ b/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/GeofieldEntityFieldHarmonizer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer;
 
+use Drupal\harmonize\Service\Harmonize;
 /**
  * Handles exceptions for 'geofield' type fields.
  *
@@ -10,7 +11,7 @@ namespace Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer;
  *
  * @link https://www.drupal.org/project/geofield
  *
- * @property \Drupal\harmonize\Service\Harmonize $harmonizeService
+ * @property Harmonize $harmonizeService
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer
  */
diff --git a/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/ImageEntityFieldHarmonizer.php b/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/ImageEntityFieldHarmonizer.php
index 31504c9..0eb1952 100644
--- a/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/ImageEntityFieldHarmonizer.php
+++ b/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/ImageEntityFieldHarmonizer.php
@@ -2,10 +2,11 @@
 
 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer;
 
+use Drupal\harmonize\Service\Harmonize;
 /**
  * Handles exceptions for 'image' type fields.
  *
- * @property \Drupal\harmonize\Service\Harmonize $harmonizeService
+ * @property Harmonize $harmonizeService
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer
  */
diff --git a/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/LinkEntityFieldHarmonizer.php b/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/LinkEntityFieldHarmonizer.php
index 4390f0e..dcbec97 100644
--- a/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/LinkEntityFieldHarmonizer.php
+++ b/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/LinkEntityFieldHarmonizer.php
@@ -2,12 +2,13 @@
 
 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer;
 
+use Drupal\harmonize\Service\Harmonize;
 use Drupal\Core\Url;
 
 /**
  * Handles harmonization exceptions for 'link' type fields.
  *
- * @property \Drupal\harmonize\Service\Harmonize $harmonizeService
+ * @property Harmonize $harmonizeService
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer
  */
diff --git a/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/OfficeHoursEntityFieldHarmonizer.php b/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/OfficeHoursEntityFieldHarmonizer.php
index 1a9c574..3763d4a 100644
--- a/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/OfficeHoursEntityFieldHarmonizer.php
+++ b/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/OfficeHoursEntityFieldHarmonizer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer;
 
+use Drupal\harmonize\Service\Harmonize;
 /**
  * Handles exceptions for 'office_hours' type fields.
  *
@@ -10,7 +11,7 @@ namespace Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer;
  *
  * @link https://www.drupal.org/project/office_hours
  *
- * @property \Drupal\harmonize\Service\Harmonize $harmonizeService
+ * @property Harmonize $harmonizeService
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer
  */
diff --git a/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/PhysicalMeasurementEntityFieldHarmonizer.php b/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/PhysicalMeasurementEntityFieldHarmonizer.php
index 3643611..3bc0b89 100644
--- a/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/PhysicalMeasurementEntityFieldHarmonizer.php
+++ b/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/PhysicalMeasurementEntityFieldHarmonizer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer;
 
+use Drupal\harmonize\Service\Harmonize;
 /**
  * Handles exceptions for 'physical_measurement' type fields.
  *
@@ -10,7 +11,7 @@ namespace Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer;
  *
  * @link https://www.drupal.org/project/physical
  *
- * @property \Drupal\harmonize\Service\Harmonize $harmonizeService
+ * @property Harmonize $harmonizeService
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer
  */
diff --git a/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/TextWithSummaryEntityFieldHarmonizer.php b/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/TextWithSummaryEntityFieldHarmonizer.php
index 6aade58..264177a 100644
--- a/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/TextWithSummaryEntityFieldHarmonizer.php
+++ b/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/TextWithSummaryEntityFieldHarmonizer.php
@@ -2,10 +2,11 @@
 
 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer;
 
+use Drupal\harmonize\Service\Harmonize;
 /**
  * Handles exceptions for 'text_with_summary' type fields.
  *
- * @property \Drupal\harmonize\Service\Harmonize $harmonizeService
+ * @property Harmonize $harmonizeService
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer
  */
diff --git a/src/Harmonizer/EntityHarmonizer/EntityHarmonizer.php b/src/Harmonizer/EntityHarmonizer/EntityHarmonizer.php
index a14e10f..7f9b346 100644
--- a/src/Harmonizer/EntityHarmonizer/EntityHarmonizer.php
+++ b/src/Harmonizer/EntityHarmonizer/EntityHarmonizer.php
@@ -26,7 +26,7 @@ class EntityHarmonizer extends Harmonizer implements EntityHarmonizerInterface {
   /**
    * Entity attached to the Harmonizer.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;
 
@@ -58,9 +58,9 @@ class EntityHarmonizer extends Harmonizer implements EntityHarmonizerInterface {
   /**
    * Entity Harmonizer base constructor.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity being harmonized.
-   * @param \Drupal\harmonize\Service\Harmonize $harmonizeService
+   * @param Harmonize $harmonizeService
    *   Harmonize module's main service containing Drupal services.
    * @param string $type
    *   The type of harmonizer defined by a string key.
@@ -104,7 +104,7 @@ class EntityHarmonizer extends Harmonizer implements EntityHarmonizerInterface {
   /**
    * Get Entity for this Harmonizer.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   Return Entity.
    */
   public function getEntity() : EntityInterface {
@@ -189,7 +189,7 @@ class EntityHarmonizer extends Harmonizer implements EntityHarmonizerInterface {
   /**
    * Harmonize the given Field and return the appropriate data.
    *
-   * @param \Drupal\field\FieldConfigInterface $field_config
+   * @param FieldConfigInterface $field_config
    *   Field Definition of the field being harmonized.
    *
    * @return mixed
diff --git a/src/Harmonizer/EntityHarmonizer/FileEntityHarmonizer.php b/src/Harmonizer/EntityHarmonizer/FileEntityHarmonizer.php
index eb6f918..14b6c3f 100644
--- a/src/Harmonizer/EntityHarmonizer/FileEntityHarmonizer.php
+++ b/src/Harmonizer/EntityHarmonizer/FileEntityHarmonizer.php
@@ -2,10 +2,11 @@
 
 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer;
 
+use Drupal\file\Entity\File;
 /**
  * Handles harmonizer exceptions for File entities.
  *
- * @property \Drupal\file\Entity\File $entity
+ * @property File $entity
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer
  */
@@ -20,7 +21,7 @@ final class FileEntityHarmonizer extends EntityHarmonizer {
       'uri'      => $this->entity->getFileUri(),
       'filename' => $this->entity->getFilename(),
       'filesize' => $this->formatFilesize($this->entity->getSize()),
-      'href'     => file_create_url($this->entity->getFileUri()),
+      'href'     => \Drupal::service('file_url_generator')->generateAbsoluteString($this->entity->getFileUri()),
     ];
   }
 
diff --git a/src/Harmonizer/EntityHarmonizer/ImageStyleEntityHarmonizer.php b/src/Harmonizer/EntityHarmonizer/ImageStyleEntityHarmonizer.php
index 90782b5..97c09da 100644
--- a/src/Harmonizer/EntityHarmonizer/ImageStyleEntityHarmonizer.php
+++ b/src/Harmonizer/EntityHarmonizer/ImageStyleEntityHarmonizer.php
@@ -2,10 +2,11 @@
 
 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer;
 
+use Drupal\image\Entity\ImageStyle;
 /**
  * Handles harmonization exceptions for Node entities.
  *
- * @property \Drupal\image\Entity\ImageStyle $entity
+ * @property ImageStyle $entity
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer
  */
diff --git a/src/Harmonizer/EntityHarmonizer/MediaEntityHarmonizer.php b/src/Harmonizer/EntityHarmonizer/MediaEntityHarmonizer.php
index 1b86fb8..5eec38a 100644
--- a/src/Harmonizer/EntityHarmonizer/MediaEntityHarmonizer.php
+++ b/src/Harmonizer/EntityHarmonizer/MediaEntityHarmonizer.php
@@ -2,10 +2,11 @@
 
 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer;
 
+use Drupal\media\MediaInterface;
 /**
  * Handles harmonization exceptions for Media entities.
  *
- * @property \Drupal\media\MediaInterface $entity
+ * @property MediaInterface $entity
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer
  */
diff --git a/src/Harmonizer/EntityHarmonizer/MenuLinkContentEntityHarmonizer.php b/src/Harmonizer/EntityHarmonizer/MenuLinkContentEntityHarmonizer.php
index 5cf1ea5..d048413 100644
--- a/src/Harmonizer/EntityHarmonizer/MenuLinkContentEntityHarmonizer.php
+++ b/src/Harmonizer/EntityHarmonizer/MenuLinkContentEntityHarmonizer.php
@@ -2,10 +2,11 @@
 
 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer;
 
+use Drupal\menu_link_content\Entity\MenuLinkContent;
 /**
  * Handles harmonization exceptions for MenuLinkContent entities.
  *
- * @property \Drupal\menu_link_content\Entity\MenuLinkContent $entity
+ * @property MenuLinkContent $entity
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer
  */
diff --git a/src/Harmonizer/EntityHarmonizer/NodeEntityHarmonizer.php b/src/Harmonizer/EntityHarmonizer/NodeEntityHarmonizer.php
index 7710bd1..3374ab5 100644
--- a/src/Harmonizer/EntityHarmonizer/NodeEntityHarmonizer.php
+++ b/src/Harmonizer/EntityHarmonizer/NodeEntityHarmonizer.php
@@ -2,13 +2,14 @@
 
 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer;
 
+use Drupal\node\Entity\Node;
 use Drupal;
 use Drupal\Core\Entity\EntityMalformedException;
 
 /**
  * Handles harmonization exceptions for Node entities.
  *
- * @property \Drupal\node\Entity\Node $entity
+ * @property Node $entity
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer
  */
diff --git a/src/Harmonizer/EntityHarmonizer/TaxonomyTermEntityHarmonizer.php b/src/Harmonizer/EntityHarmonizer/TaxonomyTermEntityHarmonizer.php
index 5e6f556..2cdd427 100644
--- a/src/Harmonizer/EntityHarmonizer/TaxonomyTermEntityHarmonizer.php
+++ b/src/Harmonizer/EntityHarmonizer/TaxonomyTermEntityHarmonizer.php
@@ -9,7 +9,7 @@ use Drupal\taxonomy\Entity\Term;
 /**
  * Handles harmonization exceptions for TaxonomyTerm entities.
  *
- * @property \Drupal\taxonomy\Entity\Term $entity
+ * @property Term $entity
  *
  * @package Drupal\harmonize\Harmonizer\TaxonomyTermEntityHarmonizer
  */
diff --git a/src/Harmonizer/FormHarmonizer/FormHarmonizer.php b/src/Harmonizer/FormHarmonizer/FormHarmonizer.php
index 3fd9fb5..c449ebc 100644
--- a/src/Harmonizer/FormHarmonizer/FormHarmonizer.php
+++ b/src/Harmonizer/FormHarmonizer/FormHarmonizer.php
@@ -25,7 +25,7 @@ class FormHarmonizer extends Harmonizer {
    *
    * @param array $form
    *   The render array of the form object being harmonized.
-   * @param \Drupal\harmonize\Service\Harmonize $harmonizeService
+   * @param Harmonize $harmonizeService
    *   Harmonize module's main service containing Drupal services.
    * @param string $type
    *   The type of harmonizer defined by a string key.
diff --git a/src/Harmonizer/Harmonizer.php b/src/Harmonizer/Harmonizer.php
index 59bec57..c746ad2 100644
--- a/src/Harmonizer/Harmonizer.php
+++ b/src/Harmonizer/Harmonizer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\harmonize\Harmonizer;
 
+use Drupal\harmonize\Service\Helpers;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\harmonize\Constants\HarmonizationEvents;
@@ -55,7 +56,7 @@ abstract class Harmonizer implements HarmonizerInterface {
   /**
    * Manager service for harmonizer functionality.
    *
-   * @var \Drupal\harmonize\Service\Helpers
+   * @var Helpers
    */
   protected $harmonizeService;
 
@@ -87,7 +88,7 @@ abstract class Harmonizer implements HarmonizerInterface {
    *
    * @param mixed $object
    *   The object being harmonized.
-   * @param \Drupal\harmonize\Service\Harmonize $harmonizeService
+   * @param Harmonize $harmonizeService
    *   Harmonize module's main service containing Drupal services.
    * @param string $type
    *   The type of harmonizer defined by a string key.
diff --git a/src/Harmonizer/HarmonizerFactory.php b/src/Harmonizer/HarmonizerFactory.php
index f536ded..f133a9e 100644
--- a/src/Harmonizer/HarmonizerFactory.php
+++ b/src/Harmonizer/HarmonizerFactory.php
@@ -34,7 +34,7 @@ abstract class HarmonizerFactory {
    *   Drupal object that is currently being processed.
    * @param array $flags
    *   Flags that affect the actions taken when harmonization the object.
-   * @param \Drupal\harmonize\Service\Harmonize $harmonizeService
+   * @param Harmonize $harmonizeService
    *   Harmonize module's main service service containing many Drupal services.
    *
    * @return mixed
@@ -123,12 +123,12 @@ abstract class HarmonizerFactory {
    *   Optimal class for harmonization determined by the factory.
    * @param mixed $object
    *   Object being harmonized.
-   * @param \Drupal\harmonize\Service\Harmonize $harmonizeService
+   * @param Harmonize $harmonizeService
    *   Harmonize module's main service injected.
    * @param string $type
    *   The type of harmonizer being created.
    *
-   * @return \Drupal\harmonize\Harmonizer\HarmonizerInterface
+   * @return HarmonizerInterface
    *   Return the harmonizer that was retrieved/created.
    */
   final public static function obtainHarmonizer(string $signature, string $class, $object, Harmonize $harmonizeService, string $type) : HarmonizerInterface {
@@ -149,7 +149,7 @@ abstract class HarmonizerFactory {
    * @param string $signature
    *   Signature to search for in the registry.
    *
-   * @return \Drupal\harmonize\Harmonizer\HarmonizerInterface|null
+   * @return HarmonizerInterface|null
    *   Returns a harmonizer if it's found. Otherwise return null.
    */
   final public static function requestHarmonizer(string $signature) : ?HarmonizerInterface {
@@ -168,7 +168,7 @@ abstract class HarmonizerFactory {
    *
    * @param string $signature
    *   Signature key to use as an identity to save this harmonizer under.
-   * @param \Drupal\harmonize\Harmonizer\HarmonizerInterface $harmonizer
+   * @param HarmonizerInterface $harmonizer
    *   Harmonizer class to save in the factory's registry.
    */
   final public static function registerHarmonizer(string $signature, HarmonizerInterface $harmonizer): void {
diff --git a/src/Harmonizer/HarmonizerInterface.php b/src/Harmonizer/HarmonizerInterface.php
index 0cbf92e..3aa1f3b 100644
--- a/src/Harmonizer/HarmonizerInterface.php
+++ b/src/Harmonizer/HarmonizerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\harmonize\Harmonizer;
 
+use Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityHarmonizer;
 /**
  * Provides an interface for Harmonizers.
  *
@@ -164,7 +165,7 @@ interface HarmonizerInterface {
   /**
    * Get the parent harmonizer for this harmonizer.
    *
-   * @return \Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityHarmonizer
+   * @return EntityHarmonizer
    *   Return the parent harmonizer class linked to this harmonizer, if any.
    */
   public function getParentHarmonizer() : ?Harmonizer;
@@ -172,7 +173,7 @@ interface HarmonizerInterface {
   /**
    * Set Parent Harmonizer of this Harmonizer.
    *
-   * @param \Drupal\harmonize\Harmonizer\Harmonizer $parentHarmonizer
+   * @param Harmonizer $parentHarmonizer
    *   The parent harmonizer class.
    */
   public function setParentHarmonizer(Harmonizer $parentHarmonizer);
diff --git a/src/Harmonizer/MasterHarmonizerFactory.php b/src/Harmonizer/MasterHarmonizerFactory.php
index d0878e8..dc6e0d3 100644
--- a/src/Harmonizer/MasterHarmonizerFactory.php
+++ b/src/Harmonizer/MasterHarmonizerFactory.php
@@ -33,7 +33,7 @@ final class MasterHarmonizerFactory {
    *   Drupal Object that is currently being processed.
    * @param array $flags
    *   Flags that affect the actions taken when harmonizing the object.
-   * @param \Drupal\harmonize\Service\Harmonize $harmonizeService
+   * @param Harmonize $harmonizeService
    *   Harmonize module's main service service containing many Drupal services.
    *
    * @return mixed|null
diff --git a/src/Harmonizer/MenuHarmonizer/MenuHarmonizer.php b/src/Harmonizer/MenuHarmonizer/MenuHarmonizer.php
index e6160ff..bde4886 100644
--- a/src/Harmonizer/MenuHarmonizer/MenuHarmonizer.php
+++ b/src/Harmonizer/MenuHarmonizer/MenuHarmonizer.php
@@ -33,7 +33,7 @@ class MenuHarmonizer extends Harmonizer {
    *
    * @param array $variables
    *   The render array of the menu object being harmonized.
-   * @param \Drupal\harmonize\Service\Harmonize $harmonizeService
+   * @param Harmonize $harmonizeService
    *   Harmonize module's main service containing Drupal services.
    * @param string $type
    *   The type of harmonizer defined by a string key.
diff --git a/src/Harmonizer/RegionHarmonizer/RegionHarmonizer.php b/src/Harmonizer/RegionHarmonizer/RegionHarmonizer.php
index 28d96fd..d49b77a 100644
--- a/src/Harmonizer/RegionHarmonizer/RegionHarmonizer.php
+++ b/src/Harmonizer/RegionHarmonizer/RegionHarmonizer.php
@@ -25,7 +25,7 @@ class RegionHarmonizer extends Harmonizer {
    *
    * @param array $variables
    *   The render array of the menu object being harmonized.
-   * @param \Drupal\harmonize\Service\Harmonize $harmonizeService
+   * @param Harmonize $harmonizeService
    *   Harmonize module's main service containing Drupal services.
    * @param string $type
    *   The type of harmonizer defined by a string key.
diff --git a/src/Plugin/preprocessors/HarmonizePreprocessorBase.php b/src/Plugin/preprocessors/HarmonizePreprocessorBase.php
index f640eb0..9e232b6 100644
--- a/src/Plugin/preprocessors/HarmonizePreprocessorBase.php
+++ b/src/Plugin/preprocessors/HarmonizePreprocessorBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\harmonize\Plugin\preprocessors;
 
+use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\harmonize\Service\Harmonize;
 use Drupal\preprocessors\PluginManager\PreprocessorsPluginManager\PreprocessorPluginBase;
 use Drupal\preprocessors\PluginManager\PreprocessorsPluginManager\PreprocessorInterface;
@@ -17,7 +18,7 @@ abstract class HarmonizePreprocessorBase extends PreprocessorPluginBase {
   /**
    * The Harmonize Service injected through DI.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $harmonizeService;
 
diff --git a/src/Plugin/views/pager/QueryParams.php b/src/Plugin/views/pager/QueryParams.php
index fd33213..dc98914 100644
--- a/src/Plugin/views/pager/QueryParams.php
+++ b/src/Plugin/views/pager/QueryParams.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\harmonize\Plugin\views\pager;
 
+use Symfony\Component\HttpFoundation\Request;
 use Drupal\views\Plugin\views\pager\Some;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\HttpFoundation\RequestStack;
@@ -27,7 +28,7 @@ class QueryParams extends Some {
   /**
    * Current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $currentRequest;
 
diff --git a/src/Plugin/views/style/HarmonizeStyle.php b/src/Plugin/views/style/HarmonizeStyle.php
index 790d02f..21af50d 100644
--- a/src/Plugin/views/style/HarmonizeStyle.php
+++ b/src/Plugin/views/style/HarmonizeStyle.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\harmonize\Plugin\views\style;
 
+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Cache\CacheableDependencyInterface;
 use Drupal\harmonize\Service\Harmonize;
 use Drupal\views\Plugin\views\style\StylePluginBase;
@@ -36,14 +37,14 @@ class HarmonizeStyle extends StylePluginBase implements CacheableDependencyInter
   /**
    * Harmonizer manager service.
    *
-   * @var \Drupal\harmonize\Service\Harmonize
+   * @var Harmonize
    */
   protected $harmonizeService;
 
   /**
    * Current page request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|null
+   * @var Request|null
    */
   protected $currentRequest;
 
@@ -70,9 +71,9 @@ class HarmonizeStyle extends StylePluginBase implements CacheableDependencyInter
    *   The plugin_id for the plugin instance.
    * @param mixed $pluginDefinition
    *   The plugin implementation definition.
-   * @param \Drupal\harmonize\Service\Harmonize $harmonizeService
+   * @param Harmonize $harmonizeService
    *   Harmonizer manager service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   Request stack service.
    */
   public function __construct(array $configuration, $pluginId, $pluginDefinition, Harmonize $harmonizeService, RequestStack $requestStack) {
diff --git a/src/PluginManager/Refinery/RefinerBase.php b/src/PluginManager/Refinery/RefinerBase.php
index 6e12064..8e19e29 100644
--- a/src/PluginManager/Refinery/RefinerBase.php
+++ b/src/PluginManager/Refinery/RefinerBase.php
@@ -48,21 +48,21 @@ abstract class RefinerBase extends PluginBase implements RefinerInterface, Conta
   /**
    * Harmonize module's main service injected through DI.
    *
-   * @var \Drupal\harmonize\Service\Harmonize
+   * @var Harmonize
    */
   protected $harmonize;
 
   /**
    * Harmonize module's main service injected through DI.
    *
-   * @var \Drupal\harmonize\Service\Harmonize
+   * @var Harmonize
    */
   protected $harmonics;
 
   /**
    * Dependency injection create method override.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The Dependency Injection container.
    * @param array $configuration
    *   The plugin configuration.
@@ -92,9 +92,9 @@ abstract class RefinerBase extends PluginBase implements RefinerInterface, Conta
    *   The plugin ID.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\harmonize\Service\Harmonize $harmonize
+   * @param Harmonize $harmonize
    *   The harmonizer manager, injected through DI.
-   * @param \Drupal\harmonize\Service\Harmonics $harmonics
+   * @param Harmonics $harmonics
    *   The harmonics service, injected through DI.
    */
   public function __construct(
diff --git a/src/PluginManager/Refinery/Refinery.php b/src/PluginManager/Refinery/Refinery.php
index f596c67..ea5adfb 100644
--- a/src/PluginManager/Refinery/Refinery.php
+++ b/src/PluginManager/Refinery/Refinery.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\harmonize\PluginManager\Refinery;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Discovery\DiscoveryInterface;
 use Drupal\Core\Extension\ThemeHandlerInterface;
 use Drupal\Core\Plugin\DefaultPluginManager;
@@ -23,14 +24,14 @@ final class Refinery extends DefaultPluginManager {
   /**
    * Drupal's Theme Handler injected through DI.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
   /**
    * Drupal's Theme Manager injected through DI.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;
 
@@ -49,13 +50,13 @@ final class Refinery extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler to allow for theme plugin discovery.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $theme_manager
+   * @param ThemeManagerInterface $theme_manager
    *   The theme manager injected through DI.
    */
   public function __construct(
@@ -110,7 +111,7 @@ final class Refinery extends DefaultPluginManager {
    * @return array
    *   All refiner instances for the current theme.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function getRefinersForActiveTheme(string $target): array {
     // If there are no plugin definitions, not much for us to do.
diff --git a/src/PluginManager/Refinery/RefineryDiscovery.php b/src/PluginManager/Refinery/RefineryDiscovery.php
index 896fa64..2056132 100644
--- a/src/PluginManager/Refinery/RefineryDiscovery.php
+++ b/src/PluginManager/Refinery/RefineryDiscovery.php
@@ -116,7 +116,7 @@ final class RefineryDiscovery extends AnnotatedClassDiscovery {
    *
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function getRefinerDefinition($plugin_id, $target, $exception_on_invalid = TRUE) : ?array {
     $definitions = $this->getDefinitions();
@@ -136,7 +136,7 @@ final class RefineryDiscovery extends AnnotatedClassDiscovery {
    *
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   protected function doGetRefinerDefinition(array $definitions, $target, $plugin_id, $exception_on_invalid) : ?array {
     // Avoid using a ternary that would create a copy of the array.
diff --git a/src/PluginManager/Refinery/RefineryFactory.php b/src/PluginManager/Refinery/RefineryFactory.php
index 776e6bf..590263d 100644
--- a/src/PluginManager/Refinery/RefineryFactory.php
+++ b/src/PluginManager/Refinery/RefineryFactory.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\harmonize\PluginManager\Refinery;
 
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Plugin\Factory\ContainerFactory;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 
@@ -11,7 +13,7 @@ use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
  * This adds further functionality by determining which plugins are
  * created given a Plugin Type.
  *
- * @property \Drupal\harmonize\PluginManager\Refinery\RefineryDiscovery $discovery
+ * @property RefineryDiscovery $discovery
  *
  * @package Drupal\harmonize\PluginManager\Refinery
  */
@@ -30,8 +32,8 @@ final class RefineryFactory extends ContainerFactory {
    * @return object
    *   A fully configured plugin instance.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginNotFoundException
+   * @throws PluginException
    */
   public function createRefinerInstance($plugin_id, $target, array $configuration = []) {
     $plugin_definition = $this->discovery->getRefinerDefinition($plugin_id, $target);
diff --git a/src/Service/Harmonics.php b/src/Service/Harmonics.php
index 357d935..0a0e547 100644
--- a/src/Service/Harmonics.php
+++ b/src/Service/Harmonics.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\harmonize\Service;
 
+use Drupal\image\ImageStyleStorageInterface;
+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\image\Entity\ImageStyle;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ -21,75 +24,75 @@ class Harmonics {
   /**
    * The Cache service.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;
 
   /**
    * Use DI to inject Drupal's configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   public $configFactory;
 
   /**
    * The Date Formatter object.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;
 
   /**
    * The Entity Type Manager object.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The Harmonize service.
    *
-   * @var \Drupal\harmonize\Service\Harmonize
+   * @var Harmonize
    */
   protected $harmonize;
 
   /**
    * The Image Style storage.
    *
-   * @var \Drupal\image\ImageStyleStorageInterface
+   * @var ImageStyleStorageInterface
    */
   protected $imageStyleStorage;
 
   /**
    * Groomer Manager injected through DI.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The Drupal Logger Channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $loggerChannel;
 
   /**
    * Service that contains all functionality for the harmonizer module.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface          $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   The Cache service injected through DI.
-   * @param \Drupal\Core\Config\ConfigFactory                 $configFactory
+   * @param ConfigFactory $configFactory
    *   Configuration Factory service injected through DI.
-   * @param \Drupal\Core\Datetime\DateFormatter               $dateFormatter
+   * @param DateFormatter $dateFormatter
    *   The Date Formatter object.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface    $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity Type manager injected through DI.
-   * @param \Drupal\harmonize\Service\Harmonize               $harmonize
+   * @param Harmonize $harmonize
    *   The groomer manager, injected through DI.
-   * @param \Drupal\Core\Language\LanguageManagerInterface    $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   Language manager injected through DI.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerChannelFactory
+   * @param LoggerChannelFactoryInterface $loggerChannelFactory
    *   Logger Channel factory injected through DI.
    */
   public function __construct(
@@ -135,7 +138,7 @@ class Harmonics {
 
     // Get image style if we must.
     if ($style) {
-      /** @var \Drupal\image\Entity\ImageStyle $imageStyle */
+      /** @var ImageStyle $imageStyle */
       $imageStyle = $this->imageStyleStorage->load($style);
 
       if ($imageStyle === NULL) {
diff --git a/src/Service/Harmonize.php b/src/Service/Harmonize.php
index 8aa8f1a..188111c 100644
--- a/src/Service/Harmonize.php
+++ b/src/Service/Harmonize.php
@@ -26,63 +26,63 @@ final class Harmonize {
    *
    * Provides helper functions specific to Harmonizer functionality.
    *
-   * @var \Drupal\harmonize\Service\Helpers
+   * @var Helpers
    */
   public $helpers;
 
   /**
    * Drupal's Theme Manager injected through DI.
    *
-   * @var \Drupal\Core\Theme\ThemeManager
+   * @var ThemeManager
    */
   public $themeManager;
 
   /**
    * Drupal's module handler injected through DI.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   public $moduleHandler;
 
   /**
    * Drupal's event dispatcher injected through DI.
    *
-   * @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher
+   * @var ContainerAwareEventDispatcher
    */
   public $eventDispatcher;
 
   /**
    * Use DI to inject Drupal's configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   public $configFactory;
 
   /**
    * Drupal's Admin Context router service injected through DI.
    *
-   * @var \Drupal\Core\Routing\AdminContext
+   * @var AdminContext
    */
   public $adminContext;
 
   /**
    * Drupal's Current Route Match service injected through DI.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   public $currentRouteMatch;
 
   /**
    * Harmonizer cache factory service injected through DI.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   public $cacheBackend;
 
   /**
    * Harmonizer Language Manager service injected through DI.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   public $languageManager;
 
@@ -98,23 +98,23 @@ final class Harmonize {
    *
    * This service manages the creation and loading of all harmonizers.
    *
-   * @param \Drupal\harmonize\Service\Helpers $harmonizerHelpers
+   * @param Helpers $harmonizerHelpers
    *   Harmonizer Helpers service injected through DI.
-   * @param \Drupal\Core\Theme\ThemeManager $themeManager
+   * @param ThemeManager $themeManager
    *   Theme Manager service injected through DI.
-   * @param \Drupal\Core\Extension\ModuleHandler $moduleHandler
+   * @param ModuleHandler $moduleHandler
    *   Module Handler service injected through DI.
-   * @param \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher $eventDispatcher
+   * @param ContainerAwareEventDispatcher $eventDispatcher
    *   Event Dispatcher service injected through DI.
-   * @param \Drupal\Core\Config\ConfigFactory $configFactory
+   * @param ConfigFactory $configFactory
    *   Configuration Factory service injected through DI.
-   * @param \Drupal\Core\Routing\AdminContext $adminContext
+   * @param AdminContext $adminContext
    *   Admin Context service injected through DI.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $currentRouteMatch
+   * @param CurrentRouteMatch $currentRouteMatch
    *   Current Route Match service injected through DI.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   Harmonizer cache factory service injected through DI.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   Language Manager service injected through DI.
    */
   public function __construct(
@@ -233,7 +233,7 @@ final class Harmonize {
       // We want to check if a Harmony declaration file exists in the
       // site's main theme. If one does, we want to read it and see if a
       // declaration exists for this particular context to set styles.
-      $themeDirectory = drupal_get_path('theme', $themeName);
+      $themeDirectory = \Drupal::service('extension.list.theme')->getPath($themeName);
       $harmonyDeclarationPath = $themeDirectory . '/' . $themeName . '.harmony.yml';
 
       // If no declaration file exists, stop.
diff --git a/src/Service/Helpers.php b/src/Service/Helpers.php
index 66ca195..ef9c9f2 100644
--- a/src/Service/Helpers.php
+++ b/src/Service/Helpers.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\harmonize\Service;
 
+use Drupal\Core\GeneratedUrl;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfo;
@@ -21,23 +22,23 @@ final class Helpers {
   /**
    * EntityTypeBundleInfo service from Drupal injected through DI.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfo
+   * @var EntityTypeBundleInfo
    */
   private $entityTypeBundleInfo;
 
   /**
    * Entity Field Manager Service from Drupal injected through DI.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   private $entityFieldManager;
 
   /**
    * Helpers constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfo $entityTypeBundleInfo
+   * @param EntityTypeBundleInfo $entityTypeBundleInfo
    *   Drupal's EntityTypeBundleInfo service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   Drupal's EntityManager service.
    */
   public function __construct(EntityTypeBundleInfo $entityTypeBundleInfo, EntityFieldManagerInterface $entityFieldManager) {
@@ -119,12 +120,12 @@ final class Helpers {
   /**
    * Ensure an entity is translated to the current running language.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity to fetch translation from.
    * @param string $lang
    *   The language to ensure the content is translated to.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   Return translated entity in current language if found.
    */
   public function ensureTranslated(ContentEntityInterface $entity, string $lang = NULL) : ?ContentEntityInterface
@@ -197,10 +198,10 @@ final class Helpers {
   /**
    * Get the link to a given node.
    *
-   * @param \Drupal\node\Entity\Node $node
+   * @param Node $node
    *   Drupal node object to get URL from.
    *
-   * @return \Drupal\Core\GeneratedUrl|string
+   * @return GeneratedUrl|string
    *   Generated Node URL.
    */
   public function getNodeHref(Node $node) {
