modules/contrib/sharpspring_webforms/sharpspring_webforms.api.php
modules/contrib/sharpspring_webforms/sharpspring_webforms.module
modules/contrib/sharpspring_webforms/src/Access/WebformSharpspringAccess.php
modules/contrib/sharpspring_webforms/src/Form/WebformSharpspringConfigurationForm.php
modules/contrib/sharpspring_webforms/src/Plugin/WebformHandler/SharpSpringWebformHandler.php
modules/contrib/sharpspring_webforms/tests/modules/sharpspring_webforms_test/src/Controller/WebformController.php
modules/contrib/sharpspring_webforms/tests/modules/sharpspring_webforms_test/src/Controller/WebformHandlerController.php
modules/contrib/sharpspring_webforms/tests/src/Functional/SharpspringWebformTest.php
modules/contrib/sharpspring_webforms/tests/src/Functional/SharpspringWebformsHandlerTest.php
modules/contrib/sharpspring_webforms/tests/src/Functional/SharpspringWebformsTranslationTest.php

9 files with changes
====================

1) modules/contrib/sharpspring_webforms/tests/src/Functional/SharpspringWebformsTranslationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\sharpspring_webforms\Functional;

+use Drupal\user\Entity\User;
+use Drupal\Core\Language\LanguageManagerInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Url;
 use Drupal\language\Entity\ConfigurableLanguage;
@@ @@
   /**
    * User with configure webform sharpsrping settings permission.
    *
-   * @var \Drupal\user\Entity\User|false
+   * @var User|false
    */
   protected $adminUser;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The webform storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $webformStorage;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/sharpspring_webforms/tests/src/Functional/SharpspringWebformsHandlerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\sharpspring_webforms\Functional;

+use Drupal\Core\Language\LanguageManagerInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\State\StateInterface;
+use Drupal\webform\WebformInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The webform storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $webformStorage;

@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
     ], 'Save');
     $this->assertSession()->pageTextContains('The webform handler was successfully added.');

-    /** @var \Drupal\webform\WebformInterface $webform */
+    /** @var WebformInterface $webform */
     $webform = $this->webformStorage->loadUnchanged($this->webformId);
     $handler = $webform->getHandler('test_sharpspring_handler');
     $configuration = $handler->getConfiguration();
@@ @@
    * Test that submission still works when the executed call fails.
    */
   public function testExceptionInHandler() {
-    /** @var \Drupal\webform\WebformInterface $webform */
+    /** @var WebformInterface $webform */
     $webform = $this->webformStorage->loadUnchanged($this->webformId);
     $handler = $webform->getHandler('sharpspring_remote_post');
     $configuration = $handler->getConfiguration();
@@ @@
    * Test that the handler is translatable.
    */
   public function testTranslatedHandler() {
-    /** @var \Drupal\webform\WebformInterface $webform */
+    /** @var WebformInterface $webform */
     $webform = $this->webformStorage->loadUnchanged($this->webformId);
     $this->drupalGet('admin/structure/webform/manage/' . $this->webformId . '/translate/fr/add');
     $this->submitForm([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/sharpspring_webforms/tests/src/Functional/SharpspringWebformTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\sharpspring_webforms\Functional;

+use Drupal\user\Entity\User;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Entity\EntityViewBuilderInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   /**
    * User with configure webform sharpsrping settings permission.
    *
-   * @var \Drupal\user\Entity\User|false
+   * @var User|false
    */
   protected $adminUser;

@@ @@
   /**
    * A regular user.
    *
-   * @var \Drupal\user\Entity\User|false
+   * @var User|false
    */
   protected $webUser;

@@ @@
   /**
    * The webform storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $webformStorage;

@@ @@
   /**
    * The webform view builder.
    *
-   * @var \Drupal\Core\Entity\EntityViewBuilderInterface
+   * @var EntityViewBuilderInterface
    */
   protected $webformViewBuilder;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/sharpspring_webforms/tests/modules/sharpspring_webforms_test/src/Controller/WebformHandlerController.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Handle the test sharpspring call that is executed in the handler tests.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    */
   public function handleCall(Request $request): Response {
@@ @@
   /**
    * Handle the translated test call that is executed in the handler tests.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    */
   public function handleTranslatedCall(Request $request): Response {
@@ @@
   /**
    * Handle the test sharpspring call that is executed in the handler tests.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    */
   public function handleExceptionCall(Request $request): Response {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/sharpspring_webforms/tests/modules/sharpspring_webforms_test/src/Controller/WebformController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sharpspring_webforms_test\Controller;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\webform\WebformInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The webform storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $webformStorage;

@@ @@
    *   A renderable array containing all webforms.
    */
   public function listAll(): array {
-    /** @var \Drupal\webform\WebformInterface[] $webforms */
+    /** @var WebformInterface[] $webforms */
     $webforms = $this->webformStorage->loadMultiple();

     $build = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/sharpspring_webforms/src/Plugin/WebformHandler/SharpSpringWebformHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sharpspring_webforms\Plugin\WebformHandler;

+use GuzzleHttp\ClientInterface;
+use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\webform\Plugin\WebformHandlerBase;
 use Drupal\webform\WebformSubmissionInterface;
@@ @@
   /**
    * The request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|null
+   * @var Request|null
    */
   protected $currentRequest;

@@ @@
   /**
    * The HTTP Client.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Do the actual post to SharpSpring.
    *
-   * @param \Drupal\webform\WebformSubmissionInterface $webform_submission
+   * @param WebformSubmissionInterface $webform_submission
    *   The webform submission.
    */
   protected function remotePost(WebformSubmissionInterface $webform_submission): void {
@@ @@
   /**
    * Helper method that builds the data that should be sent to SharpSpring.
    *
-   * @param \Drupal\webform\WebformSubmissionInterface $webform_submission
+   * @param WebformSubmissionInterface $webform_submission
    *   The webform submission entity.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/sharpspring_webforms/src/Form/WebformSharpspringConfigurationForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sharpspring_webforms\Form;

+use Drupal\webform\WebformInterface;
 use Drupal\Core\Entity\BundleEntityFormBase;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\webform\WebformInterface $webform */
+    /** @var WebformInterface $webform */
     $webform = $this->getEntity();

     $form['sharpspring_configuration'] = [
@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\webform\WebformInterface $webform */
+    /** @var WebformInterface $webform */
     $webform = $this->getEntity();
     if ((bool) $form_state->getValue('sharpspring_status') === TRUE) {
       $webform->setThirdPartySetting(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/sharpspring_webforms/src/Access/WebformSharpspringAccess.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sharpspring_webforms\Access;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\webform\WebformInterface;
@@ @@
   /**
    * Check that webform SharpSpring config can be updated by a user.
    *
-   * @param \Drupal\webform\WebformInterface $webform
+   * @param WebformInterface $webform
    *   A webform.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function checkWebformSharpspringAccess(WebformInterface $webform, AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/sharpspring_webforms/sharpspring_webforms.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityTypeInterface;
 /**
  * @file
  * Adds SharpSpring tracking to admin selected webforms.
@@ @@
         '@sharpspring' => 'https://drupal.org/project/sharpspring',
       ]) . '</p>';
       $output .= '<p>' . t('You can read more in the <a href="@readme">readme</a> file or our <a href="@project">project page on Drupal.org</a>.', [
-        '@readme' => $GLOBALS['base_url'] . '/' . drupal_get_path('module', 'sharpspring_webforms') . '/README.md',
+        '@readme' => $GLOBALS['base_url'] . '/' . \Drupal::service('extension.list.module')->getPath('sharpspring_webforms') . '/README.md',
         '@project' => 'https://drupal.org/project/sharpspring_webforms',
       ]) . '</p>';
       break;
@@ @@
  */
 function sharpspring_webforms_entity_type_alter(array &$entity_types) {
   if (isset($entity_types['webform'])) {
-    /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
+    /** @var EntityTypeInterface[] $entity_types */
     $entity_types['webform']->setFormClass('sharpspring', WebformSharpspringConfigurationForm::class);
   }
 }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [OK] 9 files have been changed by Rector                                       

