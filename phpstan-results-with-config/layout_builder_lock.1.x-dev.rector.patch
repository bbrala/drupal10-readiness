diff --git a/layout_builder_lock.info.yml b/layout_builder_lock.info.yml
index 93077e0..2550c72 100644
--- a/layout_builder_lock.info.yml
+++ b/layout_builder_lock.info.yml
@@ -1,8 +1,7 @@
 name: 'Layout Builder Lock'
 description: 'Allows to lock sections so a user can not add, update or remove blocks or add new sections before and after.'
 type: module
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.1 || ^10
 package: 'Layout Builder'
 dependencies:
   - drupal:layout_builder
diff --git a/layout_builder_lock.module b/layout_builder_lock.module
index 44eed3c..7cc77e8 100644
--- a/layout_builder_lock.module
+++ b/layout_builder_lock.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\layout_builder\SectionStorageInterface;
 /**
  * @file
  * Layout Builder Lock module.
@@ -26,7 +27,7 @@ function layout_builder_lock_element_info_alter(array &$info) {
  * Alters the configure layout builder section form.
  *
  * @param $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function layout_builder_lock_form_layout_builder_configure_section_alter(&$form, FormStateInterface $form_state) {
 
@@ -54,7 +55,7 @@ function layout_builder_lock_form_layout_builder_configure_section_alter(&$form,
 
   if ($formObject = $form_state->getFormObject()) {
 
-    /** @var Drupal\layout_builder\SectionStorageInterface $sectionStorage */
+    /** @var SectionStorageInterface $sectionStorage */
     try {
       $sectionStorage = $formObject->getSectionStorage();
       $default_lock_value = array_filter($sectionStorage
@@ -122,7 +123,7 @@ function layout_builder_lock_form_layout_builder_configure_section_alter(&$form,
  * Submit handler for the configure section form.
  *
  * @param $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *
  * @see layout_builder_lock_form_layout_builder_configure_section_alter().
  */
diff --git a/src/Access/LayoutBuilderLockAccessCheck.php b/src/Access/LayoutBuilderLockAccessCheck.php
index 4183df9..853ab7e 100644
--- a/src/Access/LayoutBuilderLockAccessCheck.php
+++ b/src/Access/LayoutBuilderLockAccessCheck.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\layout_builder_lock\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResultAllowed;
 use Drupal\Core\Access\AccessResultForbidden;
 use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
@@ -24,14 +25,14 @@ class LayoutBuilderLockAccessCheck implements AccessInterface {
   /**
    * The route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * Construct a new Layout Builder Lock Access Check.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    */
   public function __construct(RouteMatchInterface $route_match) {
@@ -41,14 +42,14 @@ class LayoutBuilderLockAccessCheck implements AccessInterface {
   /**
    * Checks routing access to the layout using lock settings.
    *
-   * @param \Drupal\layout_builder\SectionStorageInterface $section_storage
+   * @param SectionStorageInterface $section_storage
    *   The section storage.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check against.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(SectionStorageInterface $section_storage, AccountInterface $account, Route $route) {
diff --git a/src/LayoutBuilderLock.php b/src/LayoutBuilderLock.php
index 013d412..31399bb 100644
--- a/src/LayoutBuilderLock.php
+++ b/src/LayoutBuilderLock.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\layout_builder_lock;
 
+use Drupal\layout_builder\SectionStorageInterface;
 use Drupal\Core\Render\Element;
 use Drupal\Core\Security\TrustedCallbackInterface;
 use Drupal\layout_builder\OverridesSectionStorageInterface;
@@ -61,7 +62,7 @@ class LayoutBuilderLock implements TrustedCallbackInterface {
 
     // Determine if this section is overridden.
     $overridden = FALSE;
-    /** @var \Drupal\layout_builder\SectionStorageInterface $section_storage */
+    /** @var SectionStorageInterface $section_storage */
     $section_storage = $element['#section_storage'];
     if ($section_storage instanceof OverridesSectionStorageInterface && $section_storage->isOverridden()) {
       $overridden = TRUE;
diff --git a/tests/src/Functional/LayoutBuilderLockTest.php b/tests/src/Functional/LayoutBuilderLockTest.php
index ad1df75..e186eb6 100644
--- a/tests/src/Functional/LayoutBuilderLockTest.php
+++ b/tests/src/Functional/LayoutBuilderLockTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\layout_builder_lock\Functional;
 
+use Drupal\user\UserInterface;
+use Behat\Mink\Exception\ExpectationException;
+use Behat\Mink\Exception\ElementNotFoundException;
 use Drupal\block_content\Entity\BlockContentType;
 use Drupal\Core\Entity\EntityStorageException;
 use Drupal\layout_builder\Entity\LayoutBuilderEntityViewDisplay;
@@ -62,28 +65,28 @@ class LayoutBuilderLockTest extends BrowserTestBase {
   /**
    * A user with all permissions.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
   /**
    * A user with all permissions except bypass.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUserNoBypass;
 
   /**
    * A user with default permissions.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $editor;
 
   /**
    * A user which can override lock settings overrides.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $editorOverride;
 
@@ -129,7 +132,7 @@ class LayoutBuilderLockTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Enable Layout Builder for landing page.
@@ -165,7 +168,7 @@ class LayoutBuilderLockTest extends BrowserTestBase {
   /**
    * Tests locking features on sections.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function testLock() {
     $assert_session = $this->assertSession();
@@ -198,7 +201,7 @@ class LayoutBuilderLockTest extends BrowserTestBase {
     $edit['layout_builder_lock[' . LayoutBuilderLock::LOCKED_SECTION_BLOCK_MOVE . ']'] = TRUE;
     $edit['layout_builder_lock[' . LayoutBuilderLock::LOCKED_SECTION_AFTER . ']'] = TRUE;
     $edit['layout_builder_lock[' . LayoutBuilderLock::LOCKED_SECTION_CONFIGURE . ']'] = TRUE;
-    $this->drupalPostForm(NULL, $edit, 'Update');
+    $this->submitForm($edit, 'Update');
     $page->pressButton('Save layout');
 
     // Create second node.
@@ -241,7 +244,7 @@ class LayoutBuilderLockTest extends BrowserTestBase {
     $assert_session->responseContains('Lock settings');
     $edit = [];
     $edit['layout_builder_lock[' . LayoutBuilderLock::LOCKED_SECTION_AFTER . ']'] = FALSE;
-    $this->drupalPostForm(NULL, $edit, 'Update');
+    $this->submitForm($edit, 'Update');
     $page->pressButton('Save layout');
 
     $this->drupalLogin($this->editor);
@@ -253,7 +256,7 @@ class LayoutBuilderLockTest extends BrowserTestBase {
     $this->drupalGet('layout_builder/configure/section/defaults/node.landing_page.default/1/layout_onecol');
     $assert_session->statusCodeEquals(200);
     $assert_session->responseContains('Locks can be configured when the section has been added.');
-    $this->drupalPostForm(NULL, [], 'Add section');
+    $this->submitForm([], 'Add section');
     $assert_session->statusCodeEquals(200);
 
     // Test the 'bypass lock settings on layout overrides', in combination
@@ -272,12 +275,12 @@ class LayoutBuilderLockTest extends BrowserTestBase {
     $this->drupalGet('/layout_builder/configure/section/defaults/node.landing_page.default/0');
     $edit = [];
     $edit['layout_builder_lock[' . LayoutBuilderLock::LOCKED_BLOCK_ADD . ']'] = FALSE;
-    $this->drupalPostForm(NULL, $edit, 'Update');
+    $this->submitForm($edit, 'Update');
     $this->drupalGet('/layout_builder/add/block/defaults/node.landing_page.default/0/content/inline_block:basic');
     $edit = [];
     $edit['settings[label]'] = 'Default custom block title';
     $edit['settings[block_form][body][0][value]'] = 'Default custom block content';
-    $this->drupalPostForm(NULL, $edit, 'Add block');
+    $this->submitForm($edit, 'Add block');
 
     // Get the block uuid from the custom block.
     $id = $assert_session->elementExists('css', '.layout-builder__region > div:nth-child(4)');
@@ -303,7 +306,7 @@ class LayoutBuilderLockTest extends BrowserTestBase {
     $edit = [];
     $edit['settings[label]'] = 'Editor block title';
     $edit['settings[block_form][body][0][value]'] = 'Editor block content';
-    $this->drupalPostForm(NULL, $edit, 'Add block');
+    $this->submitForm($edit, 'Add block');
     $id = $assert_session->elementExists('css', '.layout-builder__region > div:nth-child(5)');
     $this->custom_editor_block_uuid = $id->getAttribute('data-layout-block-uuid');
     $page->pressButton('Save layout');
@@ -315,7 +318,7 @@ class LayoutBuilderLockTest extends BrowserTestBase {
   /**
    * Tests with at least 3 sections.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function testMultipleSections() {
     $assert_session = $this->assertSession();
@@ -333,15 +336,15 @@ class LayoutBuilderLockTest extends BrowserTestBase {
 
     // Add a new section above default
     $this->drupalGet('layout_builder/configure/section/defaults/node.landing_page.default/0/layout_onecol');
-    $this->drupalPostForm(NULL, ['layout_settings[label]' => 'section above default'], 'Add section');
+    $this->submitForm(['layout_settings[label]' => 'section above default'], 'Add section');
     $this->drupalGet('layout_builder/configure/section/defaults/node.landing_page.default/0');
-    $this->drupalPostForm(NULL, ['layout_builder_lock[' . LayoutBuilderLock::LOCKED_SECTION_CONFIGURE . ']' => TRUE], 'Update');
+    $this->submitForm(['layout_builder_lock[' . LayoutBuilderLock::LOCKED_SECTION_CONFIGURE . ']' => TRUE], 'Update');
 
     // Add a new section between previous created and default
     $this->drupalGet('layout_builder/configure/section/defaults/node.landing_page.default/1/layout_onecol');
-    $this->drupalPostForm(NULL, ['layout_settings[label]' => 'new section in between'], 'Add section');
+    $this->submitForm(['layout_settings[label]' => 'new section in between'], 'Add section');
     $this->drupalGet('layout_builder/configure/section/defaults/node.landing_page.default/1');
-    $this->drupalPostForm(NULL, ['layout_builder_lock[' . LayoutBuilderLock::LOCKED_SECTION_BEFORE . ']' => TRUE], 'Update');
+    $this->submitForm(['layout_builder_lock[' . LayoutBuilderLock::LOCKED_SECTION_BEFORE . ']' => TRUE], 'Update');
 
     $page->pressButton('Save layout');
 
@@ -382,23 +385,23 @@ class LayoutBuilderLockTest extends BrowserTestBase {
 
     // Add a section without config so it has a section delta > 1.
     $this->drupalGet('layout_builder/configure/section/defaults/node.landing_page.default/2/layout_onecol');
-    $this->drupalPostForm(NULL, ['layout_settings[label]' => 'section without any lock config'], 'Add section');
+    $this->submitForm(['layout_settings[label]' => 'section without any lock config'], 'Add section');
 
     // Add extra sections that have section configuration locked
     $this->drupalGet('layout_builder/configure/section/defaults/node.landing_page.default/3/layout_onecol');
-    $this->drupalPostForm(NULL, ['layout_settings[label]' => 'section with locked section configuration  1'], 'Add section');
+    $this->submitForm(['layout_settings[label]' => 'section with locked section configuration  1'], 'Add section');
     $this->drupalGet('layout_builder/configure/section/defaults/node.landing_page.default/3');
-    $this->drupalPostForm(NULL, ['layout_builder_lock[' . LayoutBuilderLock::LOCKED_SECTION_CONFIGURE . ']' => TRUE, 'layout_settings[label]' => 'section with locked section configuration  1'], 'Update');
+    $this->submitForm(['layout_builder_lock[' . LayoutBuilderLock::LOCKED_SECTION_CONFIGURE . ']' => TRUE, 'layout_settings[label]' => 'section with locked section configuration  1'], 'Update');
 
     $this->drupalGet('layout_builder/configure/section/defaults/node.landing_page.default/5/layout_onecol');
-    $this->drupalPostForm(NULL, ['layout_settings[label]' => 'section with locked section configuration  2'], 'Add section');
+    $this->submitForm(['layout_settings[label]' => 'section with locked section configuration  2'], 'Add section');
     $this->drupalGet('layout_builder/configure/section/defaults/node.landing_page.default/5');
-    $this->drupalPostForm(NULL, ['layout_builder_lock[' . LayoutBuilderLock::LOCKED_SECTION_CONFIGURE . ']' => TRUE, 'layout_settings[label]' => 'section with locked section configuration  2'], 'Update');
+    $this->submitForm(['layout_builder_lock[' . LayoutBuilderLock::LOCKED_SECTION_CONFIGURE . ']' => TRUE, 'layout_settings[label]' => 'section with locked section configuration  2'], 'Update');
 
     $this->drupalGet('layout_builder/configure/section/defaults/node.landing_page.default/6/layout_onecol');
-    $this->drupalPostForm(NULL, ['layout_settings[label]' => 'section with locked section configuration  3'], 'Add section');
+    $this->submitForm(['layout_settings[label]' => 'section with locked section configuration  3'], 'Add section');
     $this->drupalGet('layout_builder/configure/section/defaults/node.landing_page.default/6');
-    $this->drupalPostForm(NULL, ['layout_builder_lock[' . LayoutBuilderLock::LOCKED_SECTION_CONFIGURE . ']' => TRUE, 'layout_settings[label]' => 'section with locked section configuration 3'], 'Update');
+    $this->submitForm(['layout_builder_lock[' . LayoutBuilderLock::LOCKED_SECTION_CONFIGURE . ']' => TRUE, 'layout_settings[label]' => 'section with locked section configuration 3'], 'Update');
 
     $page->pressButton('Save layout');
 
@@ -420,14 +423,14 @@ class LayoutBuilderLockTest extends BrowserTestBase {
   /**
    * Checks links and access.
    *
-   * @param \Drupal\Tests\WebAssert $assert_session
-   * @param \Drupal\node\NodeInterface $node
+   * @param WebAssert $assert_session
+   * @param NodeInterface $node
    * @param bool $locked
    * @param int $code
    * @param null $allow_section_after
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ElementNotFoundException
+   * @throws ExpectationException
    */
   protected function checkLinksAndAccess(WebAssert $assert_session, NodeInterface $node, $locked = FALSE, $code = 200, $allow_section_after = NULL) {
     if ($code == 200) {
@@ -458,12 +461,12 @@ class LayoutBuilderLockTest extends BrowserTestBase {
   /**
    * Checks access to routes related to layout builder.
    *
-   * @param \Drupal\Tests\WebAssert $assert_session
-   * @param \Drupal\node\NodeInterface $node
+   * @param WebAssert $assert_session
+   * @param NodeInterface $node
    * @param int $code
    * @param null $section_after
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   protected function checkRouteAccess(WebAssert $assert_session, NodeInterface $node, $code = 200, $section_after = NULL) {
 
@@ -493,10 +496,10 @@ class LayoutBuilderLockTest extends BrowserTestBase {
   /**
    * Check contextual links.
    *
-   * @param \Drupal\Tests\WebAssert $assert_session
+   * @param WebAssert $assert_session
    * @param bool $locked
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
+   * @throws ElementNotFoundException
    */
   protected function checkContextualLinks(WebAssert $assert_session, $locked = FALSE) {
     // Parse contextual links - target body field.
