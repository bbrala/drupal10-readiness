modules/contrib/migrate_html_to_paragraphs/migrate_html_to_paragraphs.install
modules/contrib/migrate_html_to_paragraphs/migrate_html_to_paragraphs.module
modules/contrib/migrate_html_to_paragraphs/src/Annotation/MigrateHtmlParserPlugin.php
modules/contrib/migrate_html_to_paragraphs/src/Annotation/MigrateHtmlProcessPlugin.php
modules/contrib/migrate_html_to_paragraphs/src/Plugin/MigrateHtmlParserInterface.php
modules/contrib/migrate_html_to_paragraphs/src/Plugin/MigrateHtmlPluginManager.php
modules/contrib/migrate_html_to_paragraphs/src/Plugin/MigrateHtmlPluginManagerInterface.php
modules/contrib/migrate_html_to_paragraphs/src/Plugin/MigrateHtmlProcessInterface.php
modules/contrib/migrate_html_to_paragraphs/src/Plugin/QueueWorker/CronParagraphDelete.php
modules/contrib/migrate_html_to_paragraphs/src/Plugin/QueueWorker/ParagraphDeleteBase.php
modules/contrib/migrate_html_to_paragraphs/src/Plugin/migrate/html/parser/HtmlTagParser.php
modules/contrib/migrate_html_to_paragraphs/src/Plugin/migrate/html/parser/IframeParser.php
modules/contrib/migrate_html_to_paragraphs/src/Plugin/migrate/html/parser/ImgParser.php
modules/contrib/migrate_html_to_paragraphs/src/Plugin/migrate/html/process/HtmlTagImgProcess.php
modules/contrib/migrate_html_to_paragraphs/src/Plugin/migrate/html/process/HtmlTagProcess.php
modules/contrib/migrate_html_to_paragraphs/src/Plugin/migrate/html/process/IframeProcess.php
modules/contrib/migrate_html_to_paragraphs/src/Plugin/migrate/html/process/ImgProcess.php
modules/contrib/migrate_html_to_paragraphs/src/Plugin/migrate/html/process/TextProcess.php
modules/contrib/migrate_html_to_paragraphs/src/Plugin/migrate/process/HtmlToParagraphs.php

10 files with changes
=====================

1) modules/contrib/migrate_html_to_paragraphs/src/Plugin/migrate/process/HtmlToParagraphs.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\migrate_html_to_paragraphs\Plugin\migrate\process;

+use Drupal\migrate_html_to_paragraphs\Plugin\MigrateHtmlPluginManager;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\migrate\MigrateException;
 use Drupal\migrate\ProcessPluginBase;
@@ @@
   /**
    * The parser plugin manager.
    *
-   * @var \Drupal\migrate_html_to_paragraphs\Plugin\MigrateHtmlPluginManager
+   * @var MigrateHtmlPluginManager
    */
   protected $parserPluginManager;

@@ @@
   /**
    * The process plugin manager.
    *
-   * @var \Drupal\migrate_html_to_paragraphs\Plugin\MigrateHtmlPluginManager
+   * @var MigrateHtmlPluginManager
    */
   protected $processPluginManager;

@@ @@
    *   The plugin ID.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\migrate_html_to_paragraphs\Plugin\MigrateHtmlPluginManagerInterface $parser_plugin_manager
+   * @param MigrateHtmlPluginManagerInterface $parser_plugin_manager
    *   The migration html parser plugin manager.
-   * @param \Drupal\migrate_html_to_paragraphs\Plugin\MigrateHtmlPluginManagerInterface $process_plugin_manager
+   * @param MigrateHtmlPluginManagerInterface $process_plugin_manager
    *   The migration html process plugin manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, MigrateHtmlPluginManagerInterface $parser_plugin_manager, MigrateHtmlPluginManagerInterface $process_plugin_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/migrate_html_to_paragraphs/src/Plugin/migrate/html/process/HtmlTagImgProcess.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * File entity retrieved after processing the file.
    *
-   * @var \Drupal\file\FileInterface
+   * @var FileInterface
    */
   protected $file;

@@ @@
   /**
    * Return the file entity.
    *
-   * @return \Drupal\file\FileInterface|false
+   * @return FileInterface|false
    *   File entity.
    */
   public function getFile() {
@@ @@
   /**
    * Set the file entity.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   File entity.
    */
   protected function setFile(FileInterface $file) {
@@ @@
    * @param string $target_folder
    *   The target directory URI where the file should be copied to.
    *
-   * @return \Drupal\file\FileInterface|false
+   * @return FileInterface|false
    *   The file entity object or false if the file could not be copied.
    */
   protected function copyFile($source, $target_folder) {
@@ @@
       $file = File::Create([
         'uri' => $source,
       ]);
-      $file = file_copy($file, $target_path, FileSystemInterface::EXISTS_REPLACE);
+      $file = \Drupal::service('file.repository')->copy($file, $target_path, FileSystemInterface::EXISTS_REPLACE);
     }
     else {
       // Make sure that the target folder exists and is writable.
@@ @@
    *     filename is unique.
    *   - FILE_EXISTS_ERROR: Do nothing and return FALSE.
    *
-   * @return \Drupal\file\FileInterface|false
+   * @return FileInterface|false
    *   The file entity object or false if the file could not be created.
    */
   protected function createFile($data, $target_file_path, $replace = FileSystemInterface::EXISTS_RENAME) {
@@ @@
     $file = FALSE;

     if (!empty($data)) {
-      $file = file_save_data($data, $target_file_path, $replace);
+      $file = \Drupal::service('file.repository')->writeData($data, $target_file_path, $replace);

       if ($file) {
         return $file;
@@ @@
    *     filename is unique.
    *   - FILE_EXISTS_ERROR: Do nothing and return FALSE.
    *
-   * @return \Drupal\file\FileInterface|false
+   * @return FileInterface|false
    *   The file entity object or false if the file could not be created.
    */
   protected function createFileByUri($source, $target_folder, $replace = FileSystemInterface::EXISTS_RENAME) {
@@ @@
    * @param string $source
    *   The source path of the file to copy.
    *
-   * @return \Drupal\file\FileInterface|false
+   * @return FileInterface|false
    *   The migrated file entity object or false if not yet migrated.
    */
   protected function loadFileFromMigrateMapping($source) {
@@ @@
    *
    * @param string $source
    *   The source path.
-   * @param \Drupal\file\FileInterface|bool $file
+   * @param FileInterface|bool $file
    *   The file entity object or FALSE.
    */
   protected function saveMigrateMapping($source, $file) {
    ----------- end diff -----------

Applied rules:
 * FileCopyRector
 * FileSaveDataRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/migrate_html_to_paragraphs/src/Plugin/QueueWorker/ParagraphDeleteBase.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The Paragraph storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $paragraphStorage;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $paragraph_storage
+   * @param EntityStorageInterface $paragraph_storage
    *   The Paragraph storage.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityStorageInterface $paragraph_storage) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/migrate_html_to_paragraphs/src/Plugin/MigrateHtmlProcessInterface.php:28

    ---------- begin diff ----------
@@ @@
    *
    * @param mixed $value
    *   The value to be transformed.
-   * @param \Drupal\migrate\MigrateExecutableInterface $migrate_executable
+   * @param MigrateExecutableInterface $migrate_executable
    *   The migration in which this process is being executed.
-   * @param \Drupal\migrate\Row $row
+   * @param Row $row
    *   The row from the source to process. Normally, just transforming the value
    *   is adequate but very rarely you might need to change two columns at the
    *   same time or something like that.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/migrate_html_to_paragraphs/src/Plugin/MigrateHtmlPluginManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\migrate_html_to_paragraphs\Plugin;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\PluginManagerInterface;

 /**
@@ @@
    * @return object
    *   A fully configured plugin instance.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
    */
   public function createInstance($plugin_id, array $configuration = []);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/migrate_html_to_paragraphs/src/Plugin/MigrateHtmlPluginManager.php:30

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    * @param string $annotation
    *   (optional) The annotation class name. Defaults to
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/migrate_html_to_paragraphs/src/Plugin/MigrateHtmlParserInterface.php:28

    ---------- begin diff ----------
@@ @@
    *
    * @param mixed $value
    *   The value to be transformed.
-   * @param \Drupal\migrate\MigrateExecutableInterface $migrate_executable
+   * @param MigrateExecutableInterface $migrate_executable
    *   The migration in which this process is being executed.
-   * @param \Drupal\migrate\Row $row
+   * @param Row $row
    *   The row from the source to process. Normally, just transforming the value
    *   is adequate but very rarely you might need to change two columns at the
    *   same time or something like that.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/migrate_html_to_paragraphs/src/Annotation/MigrateHtmlProcessPlugin.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\migrate_html_to_paragraphs\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable title of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


9) modules/contrib/migrate_html_to_paragraphs/src/Annotation/MigrateHtmlParserPlugin.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\migrate_html_to_paragraphs\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable title of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


10) modules/contrib/migrate_html_to_paragraphs/migrate_html_to_paragraphs.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Queue\QueueFactory;
+use Drupal\Core\Queue\QueueInterface;
 /**
  * @file
  * Migrate HTML to Paragraphs module file.
@@ @@
  *   Array with Paragraph Ids.
  */
 function migrate_html_to_paragraphs_delete_orphaned_paragraphs(array $pids) {
-  /** @var \Drupal\Core\Queue\QueueFactory $queue_factory */
+  /** @var QueueFactory $queue_factory */
   $queue_factory = \Drupal::service('queue');
-  /** @var \Drupal\Core\Queue\QueueInterface $queue */
+  /** @var QueueInterface $queue */
   $queue = $queue_factory->get('migrate_html_to_paragraphs_delete_orphaned_paragraphs');

   // Only add new items if the queue is empty, otherwise we risk the queue
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 10 files have been changed by Rector                                      

