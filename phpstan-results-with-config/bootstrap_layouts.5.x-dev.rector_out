modules/contrib/bootstrap_layouts/bootstrap_layouts.api.php
modules/contrib/bootstrap_layouts/bootstrap_layouts.install
modules/contrib/bootstrap_layouts/bootstrap_layouts.module
modules/contrib/bootstrap_layouts/src/Annotation/BootstrapLayoutsHandler.php
modules/contrib/bootstrap_layouts/src/Annotation/BootstrapLayoutsUpdate.php
modules/contrib/bootstrap_layouts/src/BootstrapLayout.php
modules/contrib/bootstrap_layouts/src/BootstrapLayoutsManager.php
modules/contrib/bootstrap_layouts/src/BootstrapLayoutsPluginManager.php
modules/contrib/bootstrap_layouts/src/BootstrapLayoutsUninstallValidator.php
modules/contrib/bootstrap_layouts/src/BootstrapLayoutsUpdateManager.php
modules/contrib/bootstrap_layouts/src/Plugin/BootstrapLayouts/BootstrapLayoutsHandlerBase.php
modules/contrib/bootstrap_layouts/src/Plugin/BootstrapLayouts/BootstrapLayoutsHandlerInterface.php
modules/contrib/bootstrap_layouts/src/Plugin/BootstrapLayouts/BootstrapLayoutsUpdateBase.php
modules/contrib/bootstrap_layouts/src/Plugin/BootstrapLayouts/BootstrapLayoutsUpdateInterface.php
modules/contrib/bootstrap_layouts/src/Plugin/BootstrapLayouts/Ds.php
modules/contrib/bootstrap_layouts/src/Plugin/BootstrapLayouts/PageManager.php
modules/contrib/bootstrap_layouts/src/Plugin/BootstrapLayouts/Updates/BootstrapLayoutsUpdate8401.php
modules/contrib/bootstrap_layouts/src/Plugin/BootstrapLayouts/Updates/BootstrapLayoutsUpdate8402.php
modules/contrib/bootstrap_layouts/src/Plugin/Layout/BootstrapLayoutsBase.php
modules/contrib/bootstrap_layouts/src/ProxyClass/BootstrapLayoutsUninstallValidator.php

14 files with changes
=====================

1) modules/contrib/bootstrap_layouts/src/ProxyClass/BootstrapLayoutsUninstallValidator.php:6

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bootstrap_layouts\ProxyClass {

+    use Drupal\Core\Extension\ModuleUninstallValidatorInterface;
+    use Drupal\Core\DependencyInjection\DependencySerializationTrait;
+    use Symfony\Component\DependencyInjection\ContainerInterface;
+    use Drupal\Core\StringTranslation\TranslationInterface;
     /**
      * Provides a proxy class for \Drupal\bootstrap_layouts\BootstrapLayoutsUninstallValidator.
      *
      * @see \Drupal\Component\ProxyBuilder
      */
-    class BootstrapLayoutsUninstallValidator implements \Drupal\Core\Extension\ModuleUninstallValidatorInterface
+    class BootstrapLayoutsUninstallValidator implements ModuleUninstallValidatorInterface
     {

-        use \Drupal\Core\DependencyInjection\DependencySerializationTrait;
+        use DependencySerializationTrait;

         /**
          * The id of the original proxied service.
@@ @@
         /**
          * The service container.
          *
-         * @var \Symfony\Component\DependencyInjection\ContainerInterface
+         * @var ContainerInterface
          */
         protected $container;

@@ @@
         /**
          * Constructs a ProxyClass Drupal proxy object.
          *
-         * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+         * @param ContainerInterface $container
          *   The container.
          * @param string $drupal_proxy_original_service_id
          *   The service ID of the original service.
          */
-        public function __construct(\Symfony\Component\DependencyInjection\ContainerInterface $container, $drupal_proxy_original_service_id)
+        public function __construct(ContainerInterface $container, $drupal_proxy_original_service_id)
         {
             $this->container = $container;
             $this->drupalProxyOriginalServiceId = $drupal_proxy_original_service_id;
@@ @@
         /**
          * {@inheritdoc}
          */
-        public function setStringTranslation(\Drupal\Core\StringTranslation\TranslationInterface $translation)
+        public function setStringTranslation(TranslationInterface $translation)
         {
             return $this->lazyLoadItself()->setStringTranslation($translation);
         }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


2) modules/contrib/bootstrap_layouts/src/Plugin/Layout/BootstrapLayoutsBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bootstrap_layouts\Plugin\Layout;

+use Drupal\bootstrap_layouts\BootstrapLayoutsManager;
 use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Component\Utility\Xss;
@@ @@

     $configuration = $this->getConfiguration();

-    /** @var \Drupal\bootstrap_layouts\BootstrapLayoutsManager $manager */
+    /** @var BootstrapLayoutsManager $manager */
     $manager = \Drupal::getContainer()->get('plugin.manager.bootstrap_layouts');
     $classes = $manager->getClassOptions();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/bootstrap_layouts/src/Plugin/BootstrapLayouts/PageManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bootstrap_layouts\Plugin\BootstrapLayouts;

+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\bootstrap_layouts\BootstrapLayout;

 /**
@@ @@
     if ($entity_ids) {
       $properties['id'] = $entity_ids;
     }
-    /** @var \Drupal\Core\Entity\EntityTypeManager $entity_type_manager */
+    /** @var EntityTypeManager $entity_type_manager */
     $entity_type_manager = $this->container->get('entity_type.manager');
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface[] $config_entities */
+    /** @var ConfigEntityInterface[] $config_entities */
     $config_entities = $entity_type_manager->getStorage('page_variant')->loadByProperties($properties);
     foreach ($config_entities as $entity_id => $config_entity) {
       if (($info = $config_entity->get('variant_settings')) && isset($info['layout']) && isset($info['blocks'])) {
@@ @@
    * {@inheritdoc}
    */
   public function saveInstances(array $layouts = []) {
-    /** @var \Drupal\Core\Entity\EntityTypeManager $entity_type_manager */
+    /** @var EntityTypeManager $entity_type_manager */
     $entity_type_manager = $this->container->get('entity_type.manager');

-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface[] $config_entities */
+    /** @var ConfigEntityInterface[] $config_entities */
     $config_entities = $entity_type_manager->getStorage('page_variant')
       ->loadByProperties(['variant' => 'panels_variant', 'id' => array_keys($layouts)]);

-    /** @var \Drupal\bootstrap_layouts\BootstrapLayout[] $layouts */
+    /** @var BootstrapLayout[] $layouts */
     foreach ($layouts as $entity_id => $layout) {
       $config_entity = $config_entities[$entity_id];
       $info = $config_entity->get('variant_settings');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/bootstrap_layouts/src/Plugin/BootstrapLayouts/Ds.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bootstrap_layouts\Plugin\BootstrapLayouts;

+use Drupal\Core\Entity\Display\EntityDisplayInterface;
 use Drupal\bootstrap_layouts\BootstrapLayout;
 use Drupal\Core\Entity\Entity\EntityViewDisplay;

@@ @@
    */
   public function loadInstances(array $entity_ids = NULL) {
     $layouts = [];
-    /** @var \Drupal\Core\Entity\Display\EntityDisplayInterface $display */
+    /** @var EntityDisplayInterface $display */
     foreach (EntityViewDisplay::loadMultiple($entity_ids) as $entity_id => $display) {
       if (($info = $display->getThirdPartySettings('ds')) && isset($info['layout']['id'])) {
         $id = $info['layout']['id'];
@@ @@
    */
   public function saveInstances(array $layouts = []) {
     $displays = EntityViewDisplay::loadMultiple(array_keys($layouts));
-    /** @var \Drupal\bootstrap_layouts\BootstrapLayout[] $layouts */
+    /** @var BootstrapLayout[] $layouts */
     foreach ($layouts as $entity_id => $layout) {
-      /** @var \Drupal\Core\Entity\Display\EntityDisplayInterface $display */
+      /** @var EntityDisplayInterface $display */
       $display = $displays[$entity_id];
       $info = $display->getThirdPartySettings('ds');
       $info['layout']['id'] = $layout->getId();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/bootstrap_layouts/src/Plugin/BootstrapLayouts/BootstrapLayoutsUpdateInterface.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * Provide an update.
    *
-   * @param \Drupal\bootstrap_layouts\BootstrapLayoutsManager $manager
+   * @param BootstrapLayoutsManager $manager
    *   The BootstrapLayoutsManager instance.
    * @param array $data
    *   Any static YAML data found for the update.
@@ @@
    * @param bool $display_messages
    *   Flag determining whether a message will be displayed indicating whether
    *   the layout was processed successfully or not.
-
    */
   public function update(BootstrapLayoutsManager $manager, array $data = [], $display_messages = TRUE);

@@ @@
    * "Bootstrap Layouts" based layouts. If implementing this update, you should
    * check the $layout->getId() before performing any tasks.
    *
-   * @param \Drupal\bootstrap_layouts\BootstrapLayout $layout
+   * @param BootstrapLayout $layout
    *   The existing BootstrapLayout instance that is being processed.
    * @param array $data
    *   Any static YAML data found for the update.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/bootstrap_layouts/src/Plugin/BootstrapLayouts/BootstrapLayoutsUpdateBase.php:29

    ---------- begin diff ----------
@@ @@
     $this->setContainer($container);

     // Retrieve the path to provider.
-    $this->path = drupal_get_path('module', $this->pluginDefinition['provider']) ?: drupal_get_path('theme', $this->pluginDefinition['provider']);
+    $this->path = \Drupal::service('extension.list.module')->getPath($this->pluginDefinition['provider']) ?: \Drupal::service('extension.list.theme')->getPath($this->pluginDefinition['provider']);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/bootstrap_layouts/src/Plugin/BootstrapLayouts/BootstrapLayoutsHandlerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bootstrap_layouts\Plugin\BootstrapLayouts;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\bootstrap_layouts\BootstrapLayout;
 use Drupal\Component\Plugin\DerivativeInspectionInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
@@ @@
    * @param string|int $id
    *   The identifier to load.
    *
-   * @return \Drupal\bootstrap_layouts\BootstrapLayout
+   * @return BootstrapLayout
    *   The BootstrapLayout instance.
    */
   public function loadInstance($id);
@@ @@
    *   Optional. An array of identifiers to load. If no identifiers are
    *   specified, then all available instances will be loaded.
    *
-   * @return \Drupal\bootstrap_layouts\BootstrapLayout[]
+   * @return BootstrapLayout[]
    *   An associative array of BootstrapLayout instances, keyed by identifier.
    */
   public function loadInstances(array $ids = NULL);
@@ @@
    *
    * @param string|int $id
    *   The identifier to save.
-   * @param \Drupal\bootstrap_layouts\BootstrapLayout $layout
+   * @param BootstrapLayout $layout
    *   The layout instance info array.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   In case of failures an exception is thrown.
    */
   public function saveInstance($id, BootstrapLayout $layout);
@@ @@
   /**
    * Saves layout instances.
    *
-   * @param \Drupal\bootstrap_layouts\BootstrapLayout[] $layouts
+   * @param BootstrapLayout[] $layouts
    *   An associative array of BootstrapLayout instances, keyed by identifier.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   In case of failures an exception is thrown.
    */
   public function saveInstances(array $layouts = []);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/bootstrap_layouts/src/BootstrapLayoutsUpdateManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bootstrap_layouts;

+use Drupal\bootstrap_layouts\Plugin\BootstrapLayouts\BootstrapLayoutsUpdateInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Extension\ThemeHandlerInterface;
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme manager used to invoke the alter hook with.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $theme_manager
+   * @param ThemeManagerInterface $theme_manager
    *   The theme manager used to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, ThemeHandlerInterface $theme_handler, ThemeManagerInterface $theme_manager) {
@@ @@
    * @param int $schema
    *   The update schema version to retrieve.
    *
-   * @return \Drupal\bootstrap_layouts\Plugin\BootstrapLayouts\BootstrapLayoutsUpdateInterface[]
+   * @return BootstrapLayoutsUpdateInterface[]
    *   An array of update plugins, keyed by their plugin id.
    */
   public function getUpdates($schema) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/bootstrap_layouts/src/BootstrapLayoutsUninstallValidator.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The BootstrapLayouts manager.
    *
-   * @var \Drupal\bootstrap_layouts\BootstrapLayoutsManager
+   * @var BootstrapLayoutsManager
    */
   protected $manager;

@@ @@
   /**
    * Constructs a new ContentUninstallValidator.
    *
-   * @param \Drupal\bootstrap_layouts\BootstrapLayoutsManager $manager
+   * @param BootstrapLayoutsManager $manager
    *   The BootstrapLayouts manager.
    */
   public function __construct(BootstrapLayoutsManager $manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/bootstrap_layouts/src/BootstrapLayoutsPluginManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bootstrap_layouts;

+use Composer\Autoload\ClassLoader;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
   use StringTranslationTrait;

   /**
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

   /**
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;

@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme manager used to invoke the alter hook with.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $theme_manager
+   * @param ThemeManagerInterface $theme_manager
    *   The theme manager used to invoke the alter hook with.
    * @param string|null $plugin_interface
    *   (optional) The interface each plugin should implement.
@@ @@
    *   Defaults to 'Drupal\Component\Annotation\Plugin'.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, ThemeHandlerInterface $theme_handler, ThemeManagerInterface $theme_manager, $plugin_interface = NULL, $plugin_definition_annotation_name = 'Drupal\Component\Annotation\Plugin') {
-    /** @var \Composer\Autoload\ClassLoader $class_loader */
+    /** @var ClassLoader $class_loader */
     $class_loader = \Drupal::service('class_loader');

     /** @var \ArrayObject $namespaces */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/bootstrap_layouts/src/BootstrapLayoutsManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bootstrap_layouts;

+use Drupal\bootstrap_layouts\Plugin\BootstrapLayouts\BootstrapLayoutsHandlerInterface;
 use Drupal\bootstrap_layouts\Plugin\Layout\BootstrapLayoutsBase;
 use Drupal\Component\Serialization\Yaml;
 use Drupal\Component\Utility\NestedArray;
@@ @@
 class BootstrapLayoutsManager extends BootstrapLayoutsPluginManager {

   /**
-   * @var \Drupal\Core\Layout\LayoutPluginManager
+   * @var LayoutPluginManager
    */
   protected $layoutManager;

   /**
-   * @var \Drupal\bootstrap_layouts\BootstrapLayoutsUpdateManager
+   * @var BootstrapLayoutsUpdateManager
    */
   protected $updateManager;

@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme manager used to invoke the alter hook with.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $theme_manager
+   * @param ThemeManagerInterface $theme_manager
    *   The theme manager used to invoke the alter hook with.
-   * @param \Drupal\Core\Layout\LayoutPluginManager $layout_manager
+   * @param LayoutPluginManager $layout_manager
    *   The Layout Manager.
-   * @param \Drupal\bootstrap_layouts\BootstrapLayoutsUpdateManager $update_manager
+   * @param BootstrapLayoutsUpdateManager $update_manager
    *   The Bootstrap Layouts update manager.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, ThemeHandlerInterface $theme_handler, ThemeManagerInterface $theme_manager, LayoutPluginManager $layout_manager, BootstrapLayoutsUpdateManager $update_manager) {
@@ @@
   /**
    * Retrieves all available handler instances.
    *
-   * @return \Drupal\bootstrap_layouts\Plugin\BootstrapLayouts\BootstrapLayoutsHandlerInterface[]
+   * @return BootstrapLayoutsHandlerInterface[]
    */
   public function getHandlers() {
     $instances = [];
@@ @@
                 }
               }
               else {
+                // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+                // This needs to be replaced, but Rector was not yet able to replace this because the type of message was set with a variable. If you need to continue to use a variable, you might consider using a switch statement.
+                // @noRector
                 drupal_set_message($message, $type);
                 if ($error) {
-                  drupal_set_message($error, 'error');
+                  \Drupal::messenger()->addError($error);
                 }
               }
             }
    ----------- end diff -----------

Applied rules:
 * DrupalSetMessageRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/bootstrap_layouts/src/BootstrapLayout.php:140

    ---------- begin diff ----------
@@ @@
   public function isBootstrapLayout() {
     static $bootstrap_manager;
     if (!isset($bootstrap_manager)) {
-      /** @var \Drupal\bootstrap_layouts\BootstrapLayoutsManager $bootstrap_manager */
+      /** @var BootstrapLayoutsManager $bootstrap_manager */
       $bootstrap_manager = \Drupal::service('plugin.manager.bootstrap_layouts');
     }
     return $bootstrap_manager->isBootstrapLayout($this->data['id']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


13) modules/contrib/bootstrap_layouts/bootstrap_layouts.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Layout\LayoutDefinition;
+use Drupal\Core\Utility\Token;
+use Drupal\Core\Entity\EntityInterface;
 /**
  * @file
  * Contains bootstrap_layouts.module.
@@ @@
   // Find all Bootstrap Layouts.
   $layouts = \Drupal::service('plugin.manager.core.layout')->getDefinitions();
   $layout_theme_hooks = [];
-  /** @var \Drupal\Core\Layout\LayoutDefinition $info */
+  /** @var LayoutDefinition $info */
   foreach ($layouts as $info) {
     if ($info->getClass() === 'Drupal\bootstrap_layouts\Plugin\Layout\BootstrapLayoutsBase') {
       $layout_theme_hooks[] = $info->getThemeHook();
@@ @@
 function _bootstrap_layouts_parse_attributes($string = NULL, array $tokens = []) {
   static $token;
   if (!isset($token)) {
-    /** @var \Drupal\Core\Utility\Token $token */
+    /** @var Token $token */
     $token = \Drupal::service('token');
   }
   $attributes = [];
@@ @@
  *   Variables array, passed by reference.
  */
 function _bootstrap_layouts_preprocess_layout(array &$variables) {
-  /** @var \Drupal\Core\Layout\LayoutDefinition $layout_definition */
+  /** @var LayoutDefinition $layout_definition */
   $layout_definition = $variables['layout'];

   // Utilize the BootstrapLayout utility class to normalize DX readability here.
@@ @@
   $layout = new BootstrapLayout($layout_definition->id(), [], $variables['settings']);

   // Determine the entity, entity type and bundle.
-  /** @var \Drupal\Core\Entity\EntityInterface $entity */
+  /** @var EntityInterface $entity */
   $entity = isset($variables['content']['#entity']) ? $variables['content']['#entity'] : FALSE;
   $entity_type = isset($variables['content']['#entity_type']) ? $variables['content']['#entity_type'] : FALSE;
   $bundle = isset($variables['content']['#bundle']) ? $variables['content']['#bundle'] : FALSE;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


14) modules/contrib/bootstrap_layouts/bootstrap_layouts.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Extension\ModuleInstallerInterface;
+use Drupal\bootstrap_layouts\BootstrapLayoutsManager;
 /**
  * @file
  * Install, uninstall and update hooks for the Bootstrap Layouts module.
@@ @@
 function _bootstrap_layouts_ensure_dependency() {
   $module_handler = \Drupal::moduleHandler();

-  /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
+  /** @var ModuleInstallerInterface $module_installer */
   $module_installer = \Drupal::service('module_installer');

   // Uninstall "layout_plugin".
@@ @@
   // Ensure dependencies.
   _bootstrap_layouts_ensure_dependency();

-  /** @var \Drupal\bootstrap_layouts\BootstrapLayoutsManager $bootstrap_layouts_manager */
+  /** @var BootstrapLayoutsManager $bootstrap_layouts_manager */
   if ($manager = \Drupal::service('plugin.manager.bootstrap_layouts')) {
     $manager->update($schema);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 14 files have been changed by Rector                                      

