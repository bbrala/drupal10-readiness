diff --git a/src/CacheMetadataExtractor.php b/src/CacheMetadataExtractor.php
index ed5d4a4..c203c4e 100644
--- a/src/CacheMetadataExtractor.php
+++ b/src/CacheMetadataExtractor.php
@@ -14,7 +14,7 @@ class CacheMetadataExtractor {
   /**
    * Extracts cache metadata from object or render array.
    *
-   * @param \Drupal\Core\Cache\CacheableDependencyInterface|array $input
+   * @param CacheableDependencyInterface|array $input
    *   The cacheable object or render array.
    *
    * @return array
diff --git a/src/Command/DebugCommand.php b/src/Command/DebugCommand.php
index 1206bfe..043c6e6 100644
--- a/src/Command/DebugCommand.php
+++ b/src/Command/DebugCommand.php
@@ -24,7 +24,7 @@ final class DebugCommand extends Command {
   /**
    * Twig environment.
    *
-   * @var \Twig\Environment
+   * @var Environment
    */
   private $twig;
 
@@ -193,7 +193,7 @@ final class DebugCommand extends Command {
   /**
    * Returns files system loaders.
    *
-   * @return \Twig\Loader\FilesystemLoader[]
+   * @return FilesystemLoader[]
    *   File system loaders.
    */
   private function getFilesystemLoaders(): array {
diff --git a/src/Command/LintCommand.php b/src/Command/LintCommand.php
index 9e3e45a..000cf14 100644
--- a/src/Command/LintCommand.php
+++ b/src/Command/LintCommand.php
@@ -77,14 +77,14 @@ EOF
         ;
     }
 
-    protected function execute(InputInterface $input, OutputInterface $output)
+    protected function execute(InputInterface $input, OutputInterface $output): int
     {
         $io = new SymfonyStyle($input, $output);
         $filenames = $input->getArgument('filename');
         $showDeprecations = $input->getOption('show-deprecations');
 
         if (['-'] === $filenames) {
-            return $this->display($input, $output, $io, [$this->validate(file_get_contents('php://stdin'), uniqid('sf_', true))]);
+            return (int) $this->display($input, $output, $io, [$this->validate(file_get_contents('php://stdin'), uniqid('sf_', true))]);
         }
 
         if (!$filenames) {
@@ -125,7 +125,7 @@ EOF
             }
         }
 
-        return $this->display($input, $output, $io, $filesInfo);
+        return (int) $this->display($input, $output, $io, $filesInfo);
     }
 
     private function getFilesInfo(array $filenames): array
diff --git a/src/TwigTweakExtension.php b/src/TwigTweakExtension.php
index 00671bb..ade0336 100644
--- a/src/TwigTweakExtension.php
+++ b/src/TwigTweakExtension.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\twig_tweak;
 
+use Drupal\Core\Entity\Plugin\DataType\EntityAdapter;
+use Drupal\Core\Cache\CacheableDependencyInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Component\Uuid\Uuid;
@@ -35,14 +37,14 @@ class TwigTweakExtension extends AbstractExtension {
   /**
    * The module handler to invoke alter hooks.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The theme manager to invoke alter hooks.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;
 
@@ -340,7 +342,7 @@ class TwigTweakExtension extends AbstractExtension {
    * @param bool $check_access
    *   (optional) Indicates that access check is required.
    *
-   * @return \Drupal\Core\Url|null
+   * @return Url|null
    *   A new Url object or null if the URL is not accessible.
    *
    * @see \Drupal\Core\Url::fromUserInput()
@@ -371,7 +373,7 @@ class TwigTweakExtension extends AbstractExtension {
    * @param bool $check_access
    *   (optional) Indicates that access check is required.
    *
-   * @return \Drupal\Core\Link|null
+   * @return Link|null
    *   A new Link object or null of the URL is not accessible.
    *
    * @see \Drupal\Core\Link::fromTextAndUrl()
@@ -422,7 +424,7 @@ class TwigTweakExtension extends AbstractExtension {
   /**
    * Emits a breakpoint to the debug client.
    *
-   * @param \Twig\Environment $environment
+   * @param Environment $environment
    *   The Twig environment instance.
    * @param array $context
    *   Variables from the current Twig template.
@@ -552,7 +554,7 @@ class TwigTweakExtension extends AbstractExtension {
     $build = [];
     if ($object instanceof FieldItemListInterface || $object instanceof FieldItemInterface) {
       $build = $object->view($view_mode);
-      /** @var \Drupal\Core\Entity\Plugin\DataType\EntityAdapter $parent */
+      /** @var EntityAdapter $parent */
       if ($parent = $object->getParent()) {
         CacheableMetadata::createFromRenderArray($build)
           ->addCacheableDependency($parent->getEntity())
@@ -659,13 +661,13 @@ class TwigTweakExtension extends AbstractExtension {
   /**
    * Returns the translation for the given entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to get the translation from.
    * @param string $langcode
    *   (optional) For which language the translation should be looked for,
    *   defaults to the current language context.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The appropriate translation for the given language context.
    */
   public static function entityTranslation(EntityInterface $entity, string $langcode = NULL): EntityInterface {
@@ -675,7 +677,7 @@ class TwigTweakExtension extends AbstractExtension {
   /**
    * Extracts cache metadata from object or render array.
    *
-   * @param \Drupal\Core\Cache\CacheableDependencyInterface|array $input
+   * @param CacheableDependencyInterface|array $input
    *   The cacheable object or render array.
    *
    * @return array
diff --git a/src/UriExtractor.php b/src/UriExtractor.php
index c439783..929f5a0 100644
--- a/src/UriExtractor.php
+++ b/src/UriExtractor.php
@@ -18,7 +18,7 @@ class UriExtractor {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -58,7 +58,7 @@ class UriExtractor {
   /**
    * Extracts file URI from content entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity object that contains information about the file.
    *
    * @return string|null
@@ -71,7 +71,7 @@ class UriExtractor {
       if ($source instanceof OEmbedInterface) {
         return $value;
       }
-      /** @var \Drupal\file\FileInterface $file */
+      /** @var FileInterface $file */
       $file = $this->entityTypeManager->getStorage('file')->load($value);
       if ($file) {
         return $file->getFileUri();
diff --git a/src/UrlExtractor.php b/src/UrlExtractor.php
index da70990..e8c0c32 100644
--- a/src/UrlExtractor.php
+++ b/src/UrlExtractor.php
@@ -21,14 +21,14 @@ class UrlExtractor {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The file URL generator.
    *
-   * @var \Drupal\Core\File\FileUrlGeneratorInterface
+   * @var FileUrlGeneratorInterface
    */
   protected $fileUrlGenerator;
 
@@ -81,7 +81,7 @@ class UrlExtractor {
   /**
    * Extracts file URL from content entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity object that contains information about the file.
    * @param bool $relative
    *   (optional) Whether the URL should be root-relative, defaults to true.
@@ -100,7 +100,7 @@ class UrlExtractor {
         return $value;
       }
       else {
-        /** @var \Drupal\file\FileInterface $file */
+        /** @var FileInterface $file */
         $file = $this->entityTypeManager->getStorage('file')->load($value);
         if ($file) {
           return $file->createFileUrl($relative);
diff --git a/src/View/BlockViewBuilder.php b/src/View/BlockViewBuilder.php
index 440d83d..552c004 100644
--- a/src/View/BlockViewBuilder.php
+++ b/src/View/BlockViewBuilder.php
@@ -23,49 +23,49 @@ class BlockViewBuilder {
   /**
    * The plugin.manager.block service.
    *
-   * @var \Drupal\Core\Cache\CacheableDependencyInterface
+   * @var CacheableDependencyInterface
    */
   protected $pluginManagerBlock;
 
   /**
    * The context repository service.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;
 
   /**
    * The plugin context handler.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   * @var ContextHandlerInterface
    */
   protected $contextHandler;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * The title resolver.
    *
-   * @var \Drupal\Core\Controller\TitleResolverInterface
+   * @var TitleResolverInterface
    */
   protected $titleResolver;
 
@@ -107,7 +107,7 @@ class BlockViewBuilder {
 
     $configuration += ['label_display' => BlockPluginInterface::BLOCK_LABEL_VISIBLE];
 
-    /** @var \Drupal\Core\Block\BlockPluginInterface $block_plugin */
+    /** @var BlockPluginInterface $block_plugin */
     $block_plugin = $this->pluginManagerBlock->createInstance($id, $configuration);
 
     // Inject runtime contexts.
diff --git a/src/View/EntityFormViewBuilder.php b/src/View/EntityFormViewBuilder.php
index a8f485e..8002af5 100644
--- a/src/View/EntityFormViewBuilder.php
+++ b/src/View/EntityFormViewBuilder.php
@@ -15,7 +15,7 @@ class EntityFormViewBuilder {
   /**
    * The entity form builder service.
    *
-   * @var \Drupal\Core\Entity\EntityFormBuilderInterface
+   * @var EntityFormBuilderInterface
    */
   protected $entityFormBuilder;
 
@@ -29,7 +29,7 @@ class EntityFormViewBuilder {
   /**
    * Gets the built and processed entity form for the given entity type.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    * @param string $form_mode
    *   (optional) The mode identifying the form variation to be returned.
diff --git a/src/View/EntityViewBuilder.php b/src/View/EntityViewBuilder.php
index ba447ba..6079026 100644
--- a/src/View/EntityViewBuilder.php
+++ b/src/View/EntityViewBuilder.php
@@ -15,7 +15,7 @@ class EntityViewBuilder {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
diff --git a/src/View/FieldViewBuilder.php b/src/View/FieldViewBuilder.php
index 57cc259..408818d 100644
--- a/src/View/FieldViewBuilder.php
+++ b/src/View/FieldViewBuilder.php
@@ -15,7 +15,7 @@ class FieldViewBuilder {
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
@@ -29,7 +29,7 @@ class FieldViewBuilder {
   /**
    * Returns the render array for a single entity field.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    * @param string $field_name
    *   The field name.
diff --git a/src/View/ImageViewBuilder.php b/src/View/ImageViewBuilder.php
index de1d6da..ef30eb9 100644
--- a/src/View/ImageViewBuilder.php
+++ b/src/View/ImageViewBuilder.php
@@ -14,7 +14,7 @@ class ImageViewBuilder {
   /**
    * Builds an image.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file object.
    * @param string $style
    *   (optional) Image style.
diff --git a/src/View/MenuViewBuilder.php b/src/View/MenuViewBuilder.php
index 1f91ee2..5dd0ccd 100644
--- a/src/View/MenuViewBuilder.php
+++ b/src/View/MenuViewBuilder.php
@@ -12,7 +12,7 @@ class MenuViewBuilder {
   /**
    * The menu link tree service.
    *
-   * @var \Drupal\Core\Menu\MenuLinkTreeInterface
+   * @var MenuLinkTreeInterface
    */
   protected $menuLinkTree;
 
diff --git a/src/View/RegionViewBuilder.php b/src/View/RegionViewBuilder.php
index 4533012..5387bc9 100644
--- a/src/View/RegionViewBuilder.php
+++ b/src/View/RegionViewBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\twig_tweak\View;
 
+use Drupal\block\BlockInterface;
 use Drupal\Core\Block\TitleBlockPluginInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -18,28 +19,28 @@ class RegionViewBuilder {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The title resolver.
    *
-   * @var \Drupal\Core\Controller\TitleResolverInterface
+   * @var TitleResolverInterface
    */
   protected $titleResolver;
 
@@ -86,7 +87,7 @@ class RegionViewBuilder {
       ->addCacheTags($entity_type->getListCacheTags())
       ->addCacheContexts($entity_type->getListCacheContexts());
 
-    /** @var \Drupal\block\BlockInterface[] $blocks */
+    /** @var BlockInterface[] $blocks */
     foreach ($blocks as $id => $block) {
       $access = $block->access('view', NULL, TRUE);
       $cache_metadata = $cache_metadata->addCacheableDependency($access);
diff --git a/tests/src/Functional/TwigTweakTest.php b/tests/src/Functional/TwigTweakTest.php
index 122ae99..2c066ca 100644
--- a/tests/src/Functional/TwigTweakTest.php
+++ b/tests/src/Functional/TwigTweakTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\twig_tweak\Functional;
 
+use Drupal\user\RoleInterface;
 use Drupal\Core\Link;
 use Drupal\Core\Render\Markup;
 use Drupal\Core\Url;
@@ -183,7 +184,7 @@ final class TwigTweakTest extends BrowserTestBase {
 
     // Grant require permissions and test the forms again.
     $permissions = ['create page content', 'edit any page content'];
-    /** @var \Drupal\user\RoleInterface $role */
+    /** @var RoleInterface $role */
     $role = Role::load(Role::ANONYMOUS_ID);
     $this->grantPermissions($role, $permissions);
     $this->drupalGet($this->getUrl());
@@ -299,7 +300,7 @@ final class TwigTweakTest extends BrowserTestBase {
     $xpath = '//div[@class="tt-contextual-links" and not(div[@data-contextual-id])]';
     $this->assertXpath($xpath);
 
-    /** @var \Drupal\user\RoleInterface $role */
+    /** @var RoleInterface $role */
     $role = Role::load(Role::ANONYMOUS_ID);
     $this->grantPermissions($role, ['access contextual links']);
     $this->drupalGet($this->getUrl());
diff --git a/tests/src/Kernel/AbstractExtractorTestCase.php b/tests/src/Kernel/AbstractExtractorTestCase.php
index 9f763e3..f507820 100644
--- a/tests/src/Kernel/AbstractExtractorTestCase.php
+++ b/tests/src/Kernel/AbstractExtractorTestCase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\twig_tweak\Kernel;
 
+use Drupal\node\NodeInterface;
 use Drupal\file\Entity\File;
 use Drupal\file\FileInterface;
 use Drupal\KernelTests\KernelTestBase;
@@ -19,7 +20,7 @@ abstract class AbstractExtractorTestCase extends KernelTestBase {
   /**
    * A node to test.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;
 
diff --git a/tests/src/Kernel/ImageViewBuilderTest.php b/tests/src/Kernel/ImageViewBuilderTest.php
index 32c0877..a929933 100644
--- a/tests/src/Kernel/ImageViewBuilderTest.php
+++ b/tests/src/Kernel/ImageViewBuilderTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\twig_tweak\Kernel;
 
+use Drupal\file\FileInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\file\Entity\File;
@@ -56,11 +57,11 @@ final class ImageViewBuilderTest extends AbstractTestCase {
 
     $view_builder = $this->container->get('twig_tweak.image_view_builder');
 
-    /** @var \Drupal\file\FileInterface $public_image */
+    /** @var FileInterface $public_image */
     $public_image = File::create(['uri' => 'public://ocean.jpg']);
     $public_image->save();
 
-    /** @var \Drupal\file\FileInterface $private_image */
+    /** @var FileInterface $private_image */
     $private_image = File::create(['uri' => 'private://sea.jpg']);
     $private_image->save();
 
diff --git a/twig_tweak.api.php b/twig_tweak.api.php
index 31d0bfa..d0144ab 100644
--- a/twig_tweak.api.php
+++ b/twig_tweak.api.php
@@ -1,5 +1,6 @@
 <?php
 
+use Twig\TwigFilter;
 /**
  * @file
  * Hooks specific to the Twig Tweak module.
@@ -14,11 +15,10 @@ use Twig\TwigTest;
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Alters Twig Tweak functions.
  *
- * @param \Twig\TwigFunction[] $functions
+ * @param TwigFunction[] $functions
  *   Twig functions to alter.
  */
 function hook_twig_tweak_functions_alter(array &$functions): void {
@@ -41,7 +41,7 @@ function hook_twig_tweak_functions_alter(array &$functions): void {
 /**
  * Alters Twig Tweak filters.
  *
- * @param \Twig\TwigFilter[] $filters
+ * @param TwigFilter[] $filters
  *   Twig filters to alter.
  */
 function hook_twig_tweak_filters_alter(array &$filters): void {
@@ -53,7 +53,7 @@ function hook_twig_tweak_filters_alter(array &$filters): void {
 /**
  * Alters Twig Tweak tests.
  *
- * @param \Twig\TwigTest[] $tests
+ * @param TwigTest[] $tests
  *   Twig tests to alter.
  */
 function hook_twig_tweak_tests_alter(array &$tests): void {
