modules/contrib/danse/danse.install
modules/contrib/danse/danse.module
modules/contrib/danse/modules/config/src/ConfigSubscriber.php
modules/contrib/danse/modules/config/src/Payload.php
modules/contrib/danse/modules/config/src/Plugin/Danse/Config.php
modules/contrib/danse/modules/content/danse_content.install
modules/contrib/danse/modules/content/danse_content.module
modules/contrib/danse/modules/content/src/Payload.php
modules/contrib/danse/modules/content/src/Plugin/Danse/Content.php
modules/contrib/danse/modules/content/src/Plugin/Danse/ContentSettingsTrait.php
modules/contrib/danse/modules/form/danse_form.module
modules/contrib/danse/modules/form/src/Payload.php
modules/contrib/danse/modules/form/src/Plugin/Danse/Form.php
modules/contrib/danse/modules/log/src/Event/LogEvent.php
modules/contrib/danse/modules/log/src/EventSubscriber/DefaultLog.php
modules/contrib/danse/modules/log/src/LogEvents.php
modules/contrib/danse/modules/log/src/Logger.php
modules/contrib/danse/modules/log/src/Payload.php
modules/contrib/danse/modules/log/src/Plugin/Danse/Log.php
modules/contrib/danse/modules/user/danse_user.module
modules/contrib/danse/modules/user/src/Payload.php
modules/contrib/danse/modules/user/src/Plugin/Danse/User.php
modules/contrib/danse/modules/webhook/src/Payload.php
modules/contrib/danse/modules/webhook/src/Plugin/Danse/Webhook.php
modules/contrib/danse/modules/webhook/src/Plugin/rest/resource/Webhook.php
modules/contrib/danse/src/Annotation/Danse.php
modules/contrib/danse/src/Annotation/DanseRecipientSelection.php
modules/contrib/danse/src/Commands/DanseCommands.php
modules/contrib/danse/src/Cron.php
modules/contrib/danse/src/Entity/Event.php
modules/contrib/danse/src/Entity/EventAccess.php
modules/contrib/danse/src/Entity/EventInterface.php
modules/contrib/danse/src/Entity/EventView.php
modules/contrib/danse/src/Entity/EventViewsData.php
modules/contrib/danse/src/Entity/Notification.php
modules/contrib/danse/src/Entity/NotificationAction.php
modules/contrib/danse/src/Entity/NotificationActionInterface.php
modules/contrib/danse/src/Entity/NotificationInterface.php
modules/contrib/danse/src/Form/Prune.php
modules/contrib/danse/src/Form/Settings.php
modules/contrib/danse/src/Form/Subscriptions.php
modules/contrib/danse/src/PayloadBase.php
modules/contrib/danse/src/PayloadInterface.php
modules/contrib/danse/src/Plugin/DanseRecipientSelection/Roles.php
modules/contrib/danse/src/Plugin/DanseRecipientSelection/RolesDeriver.php
modules/contrib/danse/src/Plugin/PushFrameworkSource/DanseNotification.php
modules/contrib/danse/src/Plugin/views/field/EventLabel.php
modules/contrib/danse/src/PluginBase.php
modules/contrib/danse/src/PluginInterface.php
modules/contrib/danse/src/PluginManager.php
modules/contrib/danse/src/Query.php
modules/contrib/danse/src/RecipientSelectionBase.php
modules/contrib/danse/src/RecipientSelectionInterface.php
modules/contrib/danse/src/RecipientSelectionManager.php
modules/contrib/danse/src/Service.php

39 files with changes
=====================

1) modules/contrib/danse/src/Service.php:15

    ---------- begin diff ----------
@@ @@
   use StringTranslationTrait;

   /**
-   * @var \Drupal\danse\PluginManager
+   * @var PluginManager
    */
   protected $pluginManager;

   /**
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;

   /**
-   * @var \Drupal\danse\Query
+   * @var Query
    */
   protected $query;

   /**
-   * @param \Drupal\danse\PluginManager $plugin_manager
-   * @param \Drupal\user\UserDataInterface $user_data
-   * @param \Drupal\danse\Query $query
+   * @param PluginManager $plugin_manager
+   * @param UserDataInterface $user_data
+   * @param Query $query
    */
   public function __construct(PluginManager $plugin_manager, UserDataInterface $user_data, Query $query) {
     $this->pluginManager = $plugin_manager;
@@ @@
   }

   /**
-   * @return \Drupal\danse\PluginInterface[]
+   * @return PluginInterface[]
    */
   public function getPluginInstances(): array {
     $instances = [];
@@ @@

   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function buildForm(array &$form, FormStateInterface $form_state): void {
     $submitHandler = [];
@@ @@

   /**
    * @param array $form
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    * @param bool $collapsed
    */
   public function buildUserSubscriptionForm(array &$form, AccountInterface $account, $collapsed = TRUE): void {
@@ @@
    * Submit callback.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitUserSubscriptionForm(array &$form, FormStateInterface $form_state): void {
     $this->saveUserSubscriptionForm($form_state, $form_state->getFormObject()->getEntity());
@@ @@
   /**
    * Save user settings.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param FormStateInterface $form_state
+   * @param AccountInterface $account
    */
   public function saveUserSubscriptionForm(FormStateInterface $form_state, AccountInterface $account) {
     foreach ($form_state->getValue('danse') as $key => $value) {
@@ @@
   }

   /**
-   * @param \Drupal\danse\PayloadInterface $payload
+   * @param PayloadInterface $payload
    */
   public function markSeen(PayloadInterface $payload): void {
     foreach ($this->query->findNotificationsForCurrentUser($payload) as $notification) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/danse/src/RecipientSelectionManager.php:18

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/danse/src/RecipientSelectionInterface.php:15

    ---------- begin diff ----------
@@ @@
   public function label(): string;

   /**
-   * @param \Drupal\danse\PayloadInterface $payload
+   * @param PayloadInterface $payload
    *
    * @return int[]
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/danse/src/RecipientSelectionBase.php:16

    ---------- begin diff ----------
@@ @@
   use DependencySerializationTrait;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param ConfigFactoryInterface $config_factory
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/danse/src/Query.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\danse;

+use Drupal\danse\Entity\NotificationInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Database\Connection;
@@ @@
 class Query {

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

   /**
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   private $currentUser;

   /**
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   private $database;

@@ @@
   }

   /**
-   * @param \Drupal\danse\Entity\EventInterface $event
+   * @param EventInterface $event
    *
-   * @return \Drupal\danse\Entity\NotificationInterface[]
+   * @return NotificationInterface[]
    */
   public function findEventNotificationsForCurrentUser(EventInterface $event): array {
-    /** @var \Drupal\danse\Entity\NotificationInterface[] $notifications */
+    /** @var NotificationInterface[] $notifications */
     $notifications = [];
     try {
-      /** @var \Drupal\danse\Entity\NotificationInterface[] $notifications */
+      /** @var NotificationInterface[] $notifications */
       $notifications = $this->entityTypeManager->getStorage('danse_notification')->loadByProperties([
         'event' => $event->id(),
         'uid' => $this->currentUser->id(),
@@ @@
   }

   /**
-   * @param \Drupal\danse\PayloadInterface $payload
+   * @param PayloadInterface $payload
    *
-   * @return \Drupal\danse\Entity\NotificationInterface[]
+   * @return NotificationInterface[]
    */
   public function findNotificationsForCurrentUser($payload): array {
     $reference = $payload->getEventReference();
@@ @@
       ->condition('e.reference', $reference)
       ->execute()
       ->fetchCol();
-    /** @var \Drupal\danse\Entity\NotificationInterface[] $notifications */
+    /** @var NotificationInterface[] $notifications */
     $notifications = [];
     if (!empty($ids)) {
       try {
-        /** @var \Drupal\danse\Entity\NotificationInterface[] $notifications */
+        /** @var NotificationInterface[] $notifications */
         $notifications = $this->entityTypeManager->getStorage('danse_notification')
           ->loadMultiple($ids);
       }
@@ @@
   }

   /**
-   * @param \Drupal\danse\Entity\EventInterface $event
+   * @param EventInterface $event
    * @param int $uid
    *
-   * @return \Drupal\danse\Entity\NotificationInterface[]
+   * @return NotificationInterface[]
    */
   public function findSimilarEventNotifications(EventInterface $event, $uid): array {
     $query = $this->database->select('danse_notification', 'n');
@@ @@
       ->condition('e.reference', $event->getPayload()->getEventReference())
       ->execute()
       ->fetchCol();
-    /** @var \Drupal\danse\Entity\NotificationInterface[] $notifications */
+    /** @var NotificationInterface[] $notifications */
     $notifications = [];
     if (!empty($ids)) {
       try {
-        /** @var \Drupal\danse\Entity\NotificationInterface[] $notifications */
+        /** @var NotificationInterface[] $notifications */
         $notifications = $this->entityTypeManager->getStorage('danse_notification')
           ->loadMultiple($ids);
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/danse/src/PluginManager.php:18

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/danse/src/PluginInterface.php:12

    ---------- begin diff ----------
@@ @@
 interface PluginInterface extends PluginInspectionInterface {

   /**
-   * @param \Drupal\danse\PayloadInterface $payload
+   * @param PayloadInterface $payload
    *
    * @return bool
    */
@@ @@

   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return mixed
    *   Optionally return the submit handler definition.
@@ @@
   public function buildForm(&$form, FormStateInterface $form_state);

   /**
-   * @param \Drupal\danse\Entity\EventInterface $event
+   * @param EventInterface $event
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   public function getRedirectUrl(EventInterface $event): Url;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/danse/src/PluginBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\danse;

+use Drupal\danse\Entity\NotificationInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
@@ @@
   use DependencySerializationTrait;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInfo;

   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

   /**
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;

   /**
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

   /**
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

   /**
-   * @var \Drupal\danse\RecipientSelectionInterface[]
+   * @var RecipientSelectionInterface[]
    */
   protected $recipientSelectionPlugins;

   /**
-   * @var \Drupal\danse\Query
+   * @var Query
    */
   protected $query;

@@ @@
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
-   * @param \Drupal\user\UserDataInterface $user_data
-   * @param \Drupal\danse\RecipientSelectionManager $recipient_selection_manager
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
-   * @param \Drupal\danse\Query $query
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeBundleInfoInterface $bundle_info
+   * @param ConfigFactoryInterface $config_factory
+   * @param UserDataInterface $user_data
+   * @param RecipientSelectionManager $recipient_selection_manager
+   * @param AccountProxyInterface $current_user
+   * @param RouteMatchInterface $route_match
+   * @param Query $query
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $bundle_info, ConfigFactoryInterface $config_factory, UserDataInterface $user_data, RecipientSelectionManager $recipient_selection_manager, AccountProxyInterface $current_user, RouteMatchInterface $route_match, Query $query) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
@@ @@
    * {@inheritdoc}
    */
   final public function createNotifications(): void {
-    /** @var \Drupal\danse\Entity\EventInterface $event */
+    /** @var EventInterface $event */
     foreach ($this->getUnprocessedEvents() as $event) {
-      /** @var \Drupal\danse\PayloadInterface $payload */
+      /** @var PayloadInterface $payload */
       $payload = $event->getPayload();
       $subscribers = $this->getSubscribers($event);
       $recipients = [];
@@ @@
   /**
    * @param string $topic
    * @param string $label
-   * @param \Drupal\danse\PayloadInterface $payload
+   * @param PayloadInterface $payload
    * @param bool $push
    * @param bool $force
    * @param bool $silent
    *
-   * @return \Drupal\danse\Entity\EventInterface|null
+   * @return EventInterface|null
    */
   protected function createEvent($topic, $label, PayloadInterface $payload, $push = TRUE, $force = FALSE, $silent = FALSE): ?EventInterface {
     if (!$this->assertPayload($payload)) {
@@ @@

   /**
    *
-   * @param \Drupal\danse\Entity\EventInterface $event
+   * @param EventInterface $event
    *
    * @return int[]
    */
@@ @@
   }

   /**
-   * @param \Drupal\danse\Entity\EventInterface $event
+   * @param EventInterface $event
    * @param string $trigger
    * @param int $uid
    *
-   * @return \Drupal\danse\Entity\NotificationInterface[]
+   * @return NotificationInterface[]
    */
   protected function createNotification(EventInterface $event, $trigger, $uid): array {
     if (!$event->getPayload()->hasAccess($uid)) {
@@ @@
       // There is an existing notification which is undelivered, so we do not create a new one.
       return $existingNotifications;
     }
-    /** @var \Drupal\danse\Entity\NotificationInterface $notification */
+    /** @var NotificationInterface $notification */
     $notification = Notification::create([
       'event' => $event,
       'trigger' => $trigger,
@@ @@
   }

   /**
-   * @return \Drupal\danse\Entity\EventInterface[]
+   * @return EventInterface[]
    */
   protected function getUnprocessedEvents(): array {
     try {
-      /** @var \Drupal\danse\Entity\EventInterface[] $events */
+      /** @var EventInterface[] $events */
       $events = $this->entityTypeManager->getStorage('danse_event')
         ->loadByProperties([
           'plugin' => $this->getPluginId(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/danse/src/Plugin/views/field/EventLabel.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\danse\Plugin\views\field;

+use Drupal\Core\Field\Plugin\Field\FieldType\StringItem;
+use Drupal\danse\Entity\Event;
 use Drupal\views\Plugin\views\field\EntityField;

 /**
@@ @@
    * {@inheritdoc}
    */
   public function render_item($count, $item) {
-    /** @var \Drupal\Core\Field\Plugin\Field\FieldType\StringItem $raw */
+    /** @var StringItem $raw */
     $raw = $item['raw'];
-    /** @var \Drupal\danse\Entity\Event $entity */
+    /** @var Event $entity */
     $event = $raw->getEntity();
     $item['rendered']['#context']['value'] = $event->getPayload()->label();
     return parent::render_item($count, $item);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/danse/src/PayloadInterface.php:20

    ---------- begin diff ----------
@@ @@
   public function getEventReference(): string;

   /**
-   * @param \Drupal\danse\Entity\EventInterface $event
+   * @param EventInterface $event
    *
    * @return string
    */
@@ @@
   public static function createFromArray(array $payload): PayloadInterface;

   /**
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    */
   public function getEntity(): ContentEntityInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/danse/src/Form/Subscriptions.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\danse\Form;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
 class Subscriptions extends FormBase {

   /**
-   * @var \Drupal\danse\Service
+   * @var Service
    */
   protected $danse;

@@ @@
   /**
    * Subscriptions constructor.
    *
-   * @param \Drupal\danse\Service $danse
+   * @param Service $danse
    */
   public function __construct(Service $danse) {
     $this->danse = $danse;
@@ @@
   /**
    * Checks access for the DANSE subscription form.
    *
-   * @param \Drupal\user\UserInterface|null $user
+   * @param UserInterface|null $user
    *   (optional) The owner of the shortcut set.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function checkAccess(UserInterface $user = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/danse/src/Form/Settings.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\danse\Form;

+use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
 final class Settings extends ConfigFormBase {

   /**
-   * @var \Drupal\danse\Service
+   * @var Service
    */
   protected $danse;

   /**
-   * @var \Drupal\danse\RecipientSelectionManager
+   * @var RecipientSelectionManager
    */
   protected $recipientSelectionManager;

@@ @@
   /**
    * Settings constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
-   * @param \Drupal\danse\Service $danse
-   * @param \Drupal\danse\RecipientSelectionManager $recipient_selection_manager
+   * @param ConfigFactoryInterface $config_factory
+   * @param Service $danse
+   * @param RecipientSelectionManager $recipient_selection_manager
    */
   public function __construct(ConfigFactoryInterface $config_factory, Service $danse, RecipientSelectionManager $recipient_selection_manager) {
     parent::__construct($config_factory);
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state): void {
-    /** @var \Drupal\Core\Config\Config $config */
+    /** @var Config $config */
     if ($config = $this->config('danse.settings')) {
       $config->set('subscriptions_as_tab', $form_state->getValue('subscriptions_as_tab'));
       foreach ($this->danse->getPluginInstances() as $id => $plugin) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/danse/src/Entity/NotificationInterface.php:14

    ---------- begin diff ----------
@@ @@
   public function uid(): int;

   /**
-   * @return \Drupal\danse\Entity\EventInterface
+   * @return EventInterface
    */
   public function event(): EventInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/danse/src/Entity/NotificationAction.php:31

    ---------- begin diff ----------
@@ @@
 class NotificationAction extends ContentEntityBase implements NotificationActionInterface {

   /**
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    * @param array $values
    */
   public static function preCreate(EntityStorageInterface $storage, array &$values) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/danse/src/Entity/EventView.php:21

    ---------- begin diff ----------
@@ @@
 final class EventView extends EntityViewBuilder {

   /**
-   * @var \Drupal\Core\DrupalKernel
+   * @var DrupalKernel
    */
   protected $kernel;

   /**
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

   /**
-   * @var \Drupal\danse\Query
+   * @var Query
    */
   protected $query;

   /**
-   * @var \Drupal\danse\PluginManager
+   * @var PluginManager
    */
   protected $pluginManager;

@@ @@
   /**
    * EventView constructor.
    *
-   * @param \Drupal\Core\DrupalKernel $kernel
-   * @param \Symfony\Component\HttpFoundation\Request $request
-   * @param \Drupal\danse\Query $query
-   * @param \Drupal\danse\PluginManager $plugin_manager
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
-   * @param \Drupal\Core\Theme\Registry $theme_registry
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param DrupalKernel $kernel
+   * @param Request $request
+   * @param Query $query
+   * @param PluginManager $plugin_manager
+   * @param EntityTypeInterface $entity_type
+   * @param EntityRepositoryInterface $entity_repository
+   * @param LanguageManagerInterface $language_manager
+   * @param Registry $theme_registry
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    */
   public function __construct(DrupalKernel $kernel, Request $request, Query $query, PluginManager $plugin_manager, EntityTypeInterface $entity_type, EntityRepositoryInterface $entity_repository, LanguageManagerInterface $language_manager, Registry $theme_registry = NULL, EntityDisplayRepositoryInterface $entity_display_repository = NULL) {
     parent::__construct($entity_type, $entity_repository, $language_manager, $theme_registry, $entity_display_repository);
@@ @@
     if ($session === NULL) {
       return [];
     }
-    /** @var \Drupal\danse\Entity\EventInterface $event */
+    /** @var EventInterface $event */
     $event = $build['#danse_event'];
     $plugin = $this->pluginManager->createInstance($event->getPluginId());
     foreach ($this->query->findEventNotificationsForCurrentUser($event) as $notification) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/danse/src/Entity/EventInterface.php:15

    ---------- begin diff ----------
@@ @@
   public function getPluginId(): string;

   /**
-   * @return \Drupal\danse\PayloadInterface
+   * @return PayloadInterface
    */
   public function getPayload(): PayloadInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


17) modules/contrib/danse/src/Entity/EventAccess.php:19

    ---------- begin diff ----------
@@ @@
 final class EventAccess extends EntityAccessControlHandler implements EntityHandlerInterface {

   /**
-   * @var \Drupal\danse\Query
+   * @var Query
    */
   protected $query;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/danse/src/Cron.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\danse;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   use StringTranslationTrait;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

   /**
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   private $database;

   /**
-   * @var \Drupal\danse\Service
+   * @var Service
    */
   protected $danse;

   /**
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * Cron constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Database\Connection $database
-   * @param \Drupal\danse\Service $danse
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param Connection $database
+   * @param Service $danse
+   * @param ConfigFactory $config_factory
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, Connection $database, Service $danse, ConfigFactory $config_factory) {
     $this->entityTypeManager = $entity_type_manager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


19) modules/contrib/danse/src/Commands/DanseCommands.php:10

    ---------- begin diff ----------
@@ @@
 class DanseCommands extends DrushCommands {

   /**
-   * @var \Drupal\danse\Service
+   * @var Service
    */
   protected $danse;

@@ @@
   /**
    * DanseCommands constructor.
    *
-   * @param \Drupal\danse\Service $danse
+   * @param Service $danse
    */
   public function __construct(Service $danse) {
     parent::__construct();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/danse/src/Annotation/DanseRecipientSelection.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\danse\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


21) modules/contrib/danse/src/Annotation/Danse.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\danse\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


22) modules/contrib/danse/modules/webhook/src/Plugin/rest/resource/Webhook.php:56

    ---------- begin diff ----------
@@ @@
    * @param mixed $record
    *   Data to write into the database.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The HTTP response object.
    */
   public function post($record): Response {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/danse/modules/webhook/src/Plugin/Danse/Webhook.php:51

    ---------- begin diff ----------
@@ @@
   /**
    * @param string $agent
    * @param string $label
-   * @param \Drupal\danse_webhook\Payload $payload
+   * @param Payload $payload
    *
-   * @return \Drupal\danse\Entity\EventInterface
+   * @return EventInterface
    */
   public function createWebhookEvent($agent, $label, Payload $payload): EventInterface {
     return $this->createEvent($agent, $label, $payload);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/danse/modules/webhook/src/Payload.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\danse_webhook;

+use Drupal\node\NodeInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal;
@@ @@
    * {@inheritdoc}
    */
   public function getEntity(): ContentEntityInterface {
-    /** @var \Drupal\node\NodeInterface $entity */
+    /** @var NodeInterface $entity */
     $entity = Node::create([
       'title' => $this->label,
       'body' => $this->message,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/danse/modules/user/src/Payload.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\danse_user;

+use Drupal\user\UserInterface;
 use Drupal;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
 final class Payload extends PayloadBase {

   /**
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;

@@ @@
   /**
    * Content constructor.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    */
   public function __construct(AccountInterface $account) {
     $this->account = $account;
@@ @@
    * {@inheritdoc}
    */
   public static function createFromArray(array $payload): PayloadInterface {
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     $user = User::load($payload['account']);
     return new static($user);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/danse/modules/user/danse_user.module:6

    ---------- begin diff ----------
@@ @@
 use Drupal\user\UserInterface;

 /**
- * @return \Drupal\danse_user\Plugin\Danse\User;
+ * @return User ;
  */
 function _danse_user_plugin() {
   try {
-    /** @var \Drupal\danse_user\Plugin\Danse\User $plugin */
+    /** @var User $plugin */
     return Drupal::service('danse.plugin.manager')->createInstance('user');
   }
   catch (PluginException $e) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


27) modules/contrib/danse/modules/log/src/Plugin/Danse/Log.php:51

    ---------- begin diff ----------
@@ @@
   /**
    * @param string $topic
    * @param string $message
-   * @param \Drupal\danse_log\Payload $payload
+   * @param Payload $payload
    *
-   * @return \Drupal\danse\Entity\EventInterface
+   * @return EventInterface
    */
   public function createLogEvent($topic, $message, Payload $payload): EventInterface {
     return $this->createEvent(mb_substr($topic, 0, 32), $message, $payload, TRUE, TRUE, FALSE);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/danse/modules/log/src/Logger.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\danse_log;

+use Drupal\danse_log\Plugin\Danse\Log;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Logger\LoggerChannel;
 use Drupal\Core\Logger\LogMessageParserInterface;
@@ @@
   /**
    * The message's placeholders parser.
    *
-   * @var \Drupal\Core\Logger\LogMessageParserInterface
+   * @var LogMessageParserInterface
    */
   protected $parser;

   /**
-   * @var \Drupal\danse\PluginManager
+   * @var PluginManager
    */
   protected $pluginManager;

   /**
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

   /**
-   * @param \Drupal\Core\Logger\LogMessageParserInterface $parser
-   * @param \Drupal\danse\PluginManager $plugin_manager
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param LogMessageParserInterface $parser
+   * @param PluginManager $plugin_manager
+   * @param EventDispatcherInterface $event_dispatcher
    */
   public function __construct(LogMessageParserInterface $parser, PluginManager $plugin_manager, EventDispatcherInterface $event_dispatcher) {
     parent::__construct('danse');
@@ @@
    */
   public function log($level, $message, array $context = []): void {
     try {
-      /** @var \Drupal\danse_log\Plugin\Danse\Log $plugin */
+      /** @var Log $plugin */
       $plugin = $this->pluginManager->createInstance('log');
     }
     catch (PluginException $e) {
@@ @@
     $payload = new Payload($level, $message, $context);

     $event = new LogEvent($payload);
-    $this->eventDispatcher->dispatch(LogEvents::LOG, $event);
+    $this->eventDispatcher->dispatch($event, LogEvents::LOG);
     if ($event->isRelevant()) {
       try {
         $plugin->createLogEvent($context['channel'], $message, $payload);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/danse/modules/log/src/EventSubscriber/DefaultLog.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * New log item event handler.
    *
-   * @param \Drupal\danse_log\Event\LogEvent $event
+   * @param LogEvent $event
    */
   public function onNewLog(LogEvent $event): void {
     if ($event->getPayload()->getLevel() <= RfcLogLevel::ERROR) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


30) modules/contrib/danse/modules/log/src/Event/LogEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\danse_log\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\danse_log\Payload;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Class LogEvent
@@ @@
   protected $status = FALSE;

   /**
-   * @var \Drupal\danse_log\Payload
+   * @var Payload
    */
   protected $payload;

@@ @@
   /**
    * LogEvent constructor.
    *
-   * @param \Drupal\danse_log\Payload $payload
+   * @param Payload $payload
    */
   public function __construct(Payload $payload) {
     $this->payload = $payload;
@@ @@
   }

   /**
-   * @return \Drupal\danse_log\Payload
+   * @return Payload
    */
   public function getPayload(): Payload {
     return $this->payload;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/danse/modules/form/src/Payload.php:21

    ---------- begin diff ----------
@@ @@
   protected $form;

   /**
-   * @var \Drupal\Core\Form\FormStateInterface
+   * @var FormStateInterface
    */
   protected $form_state;

@@ @@
    * Content constructor.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function __construct(array $form, FormStateInterface $form_state) {
     $this->form = $form;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/danse/modules/form/danse_form.module:4

    ---------- begin diff ----------
@@ @@
 use Drupal\danse_form\Plugin\Danse\Form;

 /**
- * @return \Drupal\danse_form\Plugin\Danse\Form;
+ * @return Form ;
  */
 function _danse_form_plugin() {
   try {
-    /** @var \Drupal\danse_form\Plugin\Danse\Form $plugin */
+    /** @var Form $plugin */
     return Drupal::service('danse.plugin.manager')->createInstance('form');
   }
   catch (PluginException $e) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


33) modules/contrib/danse/modules/content/src/Plugin/Danse/ContentSettingsTrait.php:2

    ---------- begin diff ----------
@@ @@

 namespace Drupal\danse_content\Plugin\Danse;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\StringTranslation\StringTranslationTrait;

 trait ContentSettingsTrait {
@@ @@

   /**
    * @param array $roles
-   * @param \Drupal\Core\Config\ImmutableConfig $config
+   * @param ImmutableConfig $config
    * @param string $topic
    * @param bool $forEdit
    *
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


34) modules/contrib/danse/modules/content/src/Plugin/Danse/Content.php:98

    ---------- begin diff ----------
@@ @@
     if (!empty($info['callback_object']) && $info['callback_object'] instanceof ContentEntityFormInterface) {
       /** @var ContentEntityFormInterface $callback */
       $callback = $info['callback_object'];
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       $entity = $callback->getEntity();
       if ($callback instanceof ContentEntityDeleteForm) {
         $topics = [self::TOPIC_DELETE, self::TOPIC_UNPUBLISH];
@@ @@
    * {@inheritdoc}
    */
   public function getRedirectUrl(EventInterface $event): Url {
-    /** @var \Drupal\danse_content\Payload $payload */
+    /** @var Payload $payload */
     $payload = $event->getPayload();
     try {
       return $payload->getEntity()->toUrl();
@@ @@
   }

   /**
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *
    * @return bool
    */
@@ @@

   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
-   * @param \Drupal\Core\Entity\ContentEntityTypeInterface $definition
+   * @param FormStateInterface $form_state
+   * @param ContentEntityTypeInterface $definition
    *
    * @return array
    */
@@ @@
    * Submit callback.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitContentTypeSettingsForm(array &$form, FormStateInterface $form_state): void {
     $config_id = $form_state->getValue(['danse_config_id']);
@@ @@
    * Submit callback.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitContentForm(array &$form, FormStateInterface $form_state): void {
     $info = $form_state->getBuildInfo();
     /** @var ContentEntityFormInterface $callback */
     $callback = $info['callback_object'];
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $callback->getEntity();
     $topic = $form_state->getValue('danse_topic');
     $orgStatus = (bool) $form_state->getValue('danse_was_published');
@@ @@
   }

   /**
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    * @param bool $push
    * @param bool $force
    * @param bool $silent
@@ @@
   }

   /**
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    * @param bool $push
    * @param bool $force
    * @param bool $silent
@@ @@
   }

   /**
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    * @param bool $push
    * @param bool $force
    * @param bool $silent
@@ @@
   }

   /**
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    * @param bool $push
    * @param bool $force
    * @param bool $silent
@@ @@
   }

   /**
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    * @param bool $push
    * @param bool $force
    * @param bool $silent
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/danse/modules/content/src/Payload.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\danse_content;

+use Drupal\user\UserInterface;
 use Drupal;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
@@ @@
 final class Payload extends PayloadBase {

   /**
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $entity;

@@ @@
   /**
    * Content constructor.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    */
   public function __construct(ContentEntityInterface $entity) {
     $this->entity = $entity;
@@ @@
    * {@inheritdoc}
    */
   public function hasAccess($uid): bool {
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     $user = User::load($uid);
     return $this->getEntity()->access('view', $user);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/danse/modules/content/danse_content.module:8

    ---------- begin diff ----------
@@ @@
  * Implements hook_entity_view().
  *
  * @param array $build
- * @param \Drupal\Core\Entity\EntityInterface $entity
- * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+ * @param EntityInterface $entity
+ * @param EntityViewDisplayInterface $display
  * @param string $view_mode
  */
 function danse_content_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


37) modules/contrib/danse/modules/config/src/Payload.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\danse_config;

+use Drupal\node\NodeInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\node\Entity\Node;
 use Drupal\danse\Entity\EventInterface;
@@ @@
    * {@inheritdoc}
    */
   public function getEntity(): ContentEntityInterface {
-    /** @var \Drupal\node\NodeInterface $entity */
+    /** @var NodeInterface $entity */
     $entity = Node::create([
       'title' => 'not yet implemented',
     ]);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/danse/modules/config/src/ConfigSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\danse_config;

+use Drupal\danse_config\Plugin\Danse\Config;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\language\Config\LanguageConfigOverride;
 use Drupal\Core\Config\ConfigCrudEvent;
 use Drupal\Core\Config\ConfigEvents;
 use Drupal\Core\Config\ConfigImporterEvent;
@@ @@
 class ConfigSubscriber implements EventSubscriberInterface {

   /**
-   * @var \Drupal\danse_config\Plugin\Danse\Config
+   * @var Config
    */
   protected $plugin;

@@ @@
   /**
    * Constructs a new Settings object.
    *
-   * @param \Drupal\danse\PluginManager $plugin_manager
+   * @param PluginManager $plugin_manager
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function __construct(PluginManager $plugin_manager) {
     $this->plugin = $plugin_manager->createInstance('config');
@@ @@
   /**
    * Saves changed config to a configurable directory.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   Public function onConfigSave event.
    */
   public function onConfigSave(ConfigCrudEvent $event): void {
@@ @@
   /**
    * Saves changed config translation to a configurable directory.
    *
-   * @param \Drupal\language\Config\LanguageConfigOverrideCrudEvent $event
+   * @param LanguageConfigOverrideCrudEvent $event
    *   Public function onConfigTranslationSave event.
    */
   public function onConfigTranslationSave(LanguageConfigOverrideCrudEvent $event): void {
     if ($this->active && $this->enabled()) {
       // TODO: Move this to the plugin.
-      /** @var \Drupal\language\Config\LanguageConfigOverride $object */
+      /** @var LanguageConfigOverride $object */
       $object = $event->getLanguageConfigOverride();
       #$this->plugin->createEvent('language', 'Config translation changed', new ConfigPayload($object));

@@ @@
   /**
    * Turn off this subscriber on importing configuration.
    *
-   * @param \Drupal\Core\Config\ConfigImporterEvent $event
+   * @param ConfigImporterEvent $event
    *   Public function onConfigImportValidate event.
    */
   public function onConfigImportValidate(ConfigImporterEvent $event): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


39) modules/contrib/danse/danse.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\danse\Service;
 use Drupal\Core\Form\FormStateInterface;

 /**
- * @return \Drupal\danse\Service
+ * @return Service
  */
 function _danse_service() {
   return Drupal::service('danse.service');
@@ @@
  * Implements hook_form_alter().
  *
  * @param array $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function danse_form_alter(array &$form, FormStateInterface $form_state) {
   _danse_service()->buildForm($form, $form_state);
@@ @@
  * Implements hook_form_FORM_ID_alter().
  *
  * @param array $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function danse_form_user_form_alter(array &$form, FormStateInterface $form_state) {
   if (!Drupal::configFactory()->get('danse.settings')->get('subscriptions_as_tab')) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/danse/src/Plugin/PushFrameworkSource/DanseNotification.p
         hp" file, due to:                                                      
         "Analyze error: "Class Drupal\push_framework\SourceBase not found.".   
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [WARNING] 1 nodes were removed                                                 

