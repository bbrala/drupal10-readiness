diff --git a/name.install b/name.install
index 47cb0a8..e569044 100644
--- a/name.install
+++ b/name.install
@@ -78,14 +78,14 @@ function name_update_8202() {
 function name_update_8203() {
   $config_factory = \Drupal::configFactory();
 
-  $config_path = drupal_get_path('module', 'name') . '/config/install/name.generate.components.yml';
+  $config_path = \Drupal::service('extension.list.module')->getPath('name') . '/config/install/name.generate.components.yml';
   $data = Yaml::parse(file_get_contents($config_path));
   $config = $config_factory->getEditable('name.generate.components');
   $config->set('components', $data['components']);
   $config->set('gender', $data['gender']);
   $config->save(TRUE);
 
-  $config_path = drupal_get_path('module', 'name') . '/config/install/name.generate.preferred.yml';
+  $config_path = \Drupal::service('extension.list.module')->getPath('name') . '/config/install/name.generate.preferred.yml';
   $data = Yaml::parse(file_get_contents($config_path));
   $config = $config_factory->getEditable('name.generate.preferred');
   $config->set('preferred', $data['preferred']);
@@ -105,7 +105,7 @@ function name_update_8203() {
     $old_config->delete();
   }
   else {
-    $config_path = drupal_get_path('module', 'name') . '/config/install/name.generate.examples.yml';
+    $config_path = \Drupal::service('extension.list.module')->getPath('name') . '/config/install/name.generate.examples.yml';
     $data = Yaml::parse(file_get_contents($config_path));
     $config = $config_factory->getEditable('name.generate.examples');
     $config->set('examples', $data['examples']);
diff --git a/name.module b/name.module
index fe23d89..0bc2d74 100644
--- a/name.module
+++ b/name.module
@@ -193,11 +193,11 @@ function name_user_load(array $users) {
 /**
  * Helper function to an additional component for an item.
  *
- * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+ * @param EntityTypeManagerInterface $entityTypeManager
  *   The entity type manager to generate the view.
- * @param \Drupal\Core\Render\RendererInterface $renderer
+ * @param RendererInterface $renderer
  *   The renderer to render the value.
- * @param \Drupal\Core\Field\FieldItemListInterface $items
+ * @param FieldItemListInterface $items
  *   The items to render.
  * @param string $key_value
  *   The key value.
@@ -482,7 +482,7 @@ function name_element_render_component(array $components, $component_key, array
         '#required' => $show_component_required_marker,
         '#title_display' => 'before',
       ];
-      $element['#title'] = render($label);
+      $element['#title'] = \Drupal::service('renderer')->render($label);
       break;
 
     case 'placeholder':
@@ -527,7 +527,7 @@ function name_element_render_component(array $components, $component_key, array
  *
  * @param array $element
  *   The form element that needs the for attribute set.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current state of the form.
  *
  * @return array
diff --git a/name.post_update.php b/name.post_update.php
index a646ce2..19cbe6d 100644
--- a/name.post_update.php
+++ b/name.post_update.php
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 /**
  * @file
  * Post update functions for Name.
@@ -9,7 +10,7 @@
  * Adds the default list format.
  */
 function name_post_update_create_name_list_format() {
-  /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $name_list_format_storage */
+  /** @var ConfigEntityStorageInterface $name_list_format_storage */
   $name_list_format_storage = \Drupal::entityTypeManager()->getStorage('name_list_format');
 
   $default_list = $name_list_format_storage->load('default');
diff --git a/src/Controller/NameAutocompleteController.php b/src/Controller/NameAutocompleteController.php
index 4d7c088..a2b1b3d 100644
--- a/src/Controller/NameAutocompleteController.php
+++ b/src/Controller/NameAutocompleteController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\name\Controller;
 
+use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 use Drupal\Core\Entity\EntityFieldManager;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Symfony\Component\HttpFoundation\JsonResponse;
@@ -19,32 +20,32 @@ class NameAutocompleteController implements ContainerInjectionInterface {
   /**
    * The name autocomplete helper class to find matching name values.
    *
-   * @var \Drupal\name\NameAutocomplete
+   * @var NameAutocomplete
    */
   protected $nameAutocomplete;
 
   /**
    * Entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;
 
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs an NameAutocompleteController object.
    *
-   * @param \Drupal\name\NameAutocomplete $name_autocomplete
+   * @param NameAutocomplete $name_autocomplete
    *   The name autocomplete helper class to find matching name values.
-   * @param \Drupal\Core\Entity\EntityFieldManager $entityFieldManager
+   * @param EntityFieldManager $entityFieldManager
    *   The entity field manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity field manager.
    */
   public function __construct(NameAutocomplete $name_autocomplete, EntityFieldManager $entityFieldManager, EntityTypeManagerInterface $entityTypeManager) {
@@ -67,7 +68,7 @@ class NameAutocompleteController implements ContainerInjectionInterface {
   /**
    * Returns response for the name autocompletion.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request object containing the search string.
    * @param string $field_name
    *   The field name.
@@ -78,10 +79,10 @@ class NameAutocompleteController implements ContainerInjectionInterface {
    * @param string $component
    *   The name component.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
-   * @throws \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException
+   * @throws NotFoundHttpException
+   * @throws AccessDeniedHttpException
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response containing the autocomplete suggestions.
    *
    * @see \Drupal\name\NameAutocomplete::getMatches()
diff --git a/src/Form/NameFormatForm.php b/src/Form/NameFormatForm.php
index 459bcc3..a4a2bb3 100644
--- a/src/Form/NameFormatForm.php
+++ b/src/Form/NameFormatForm.php
@@ -16,7 +16,7 @@ class NameFormatForm extends EntityForm {
   /**
    * The name format parser for token help.
    *
-   * @var \Drupal\name\NameFormatParser
+   * @var NameFormatParser
    */
   protected $parser;
 
@@ -32,7 +32,7 @@ class NameFormatForm extends EntityForm {
   /**
    * Constructs a new NameListFormatForm object.
    *
-   * @param \Drupal\name\NameFormatParser $parser
+   * @param NameFormatParser $parser
    *   The name format parser.
    */
   public function __construct(NameFormatParser $parser) {
diff --git a/src/Form/NameListFormatForm.php b/src/Form/NameListFormatForm.php
index 9829064..a749d2a 100644
--- a/src/Form/NameListFormatForm.php
+++ b/src/Form/NameListFormatForm.php
@@ -25,7 +25,7 @@ class NameListFormatForm extends EntityForm {
   /**
    * Constructs a new NameListFormatForm object.
    *
-   * @param \Drupal\name\NameFormatterInterface $formatter
+   * @param NameFormatterInterface $formatter
    *   The name formatter.
    */
   public function __construct(NameFormatterInterface $formatter) {
diff --git a/src/NameAutocomplete.php b/src/NameAutocomplete.php
index fad67b8..f871537 100644
--- a/src/NameAutocomplete.php
+++ b/src/NameAutocomplete.php
@@ -43,7 +43,7 @@ class NameAutocomplete {
   /**
    * Get matches for the autocompletion of name components.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field
+   * @param FieldDefinitionInterface $field
    *   The field definition.
    * @param string $target
    *   The name field component.
diff --git a/src/NameFormatListBuilder.php b/src/NameFormatListBuilder.php
index 2bb6e2c..602c2b7 100644
--- a/src/NameFormatListBuilder.php
+++ b/src/NameFormatListBuilder.php
@@ -18,14 +18,14 @@ class NameFormatListBuilder extends ConfigEntityListBuilder {
   /**
    * The name format parser.
    *
-   * @var \Drupal\name\NameFormatParser
+   * @var NameFormatParser
    */
   protected $parser;
 
   /**
    * The name generator.
    *
-   * @var \Drupal\name\NameGeneratorInterface
+   * @var NameGeneratorInterface
    */
   protected $generator;
 
@@ -51,13 +51,13 @@ class NameFormatListBuilder extends ConfigEntityListBuilder {
   /**
    * Constructs a new EntityListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\name\NameFormatParser $parser
+   * @param NameFormatParser $parser
    *   The name format parser.
-   * @param \Drupal\name\NameGeneratorInterface $generator
+   * @param NameGeneratorInterface $generator
    *   The name generator.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, NameFormatParser $parser, NameGeneratorInterface $generator) {
@@ -96,10 +96,10 @@ class NameFormatListBuilder extends ConfigEntityListBuilder {
   /**
    * Provides some example based on names with various components set.
    *
-   * @param \Drupal\name\Entity\NameFormat $entity
+   * @param NameFormat $entity
    *   The name format entity.
    *
-   * @return \Drupal\Component\Render\FormattableMarkup
+   * @return FormattableMarkup
    *   The example names with formatting applied.
    */
   protected function examples(NameFormat $entity) {
diff --git a/src/NameFormatParser.php b/src/NameFormatParser.php
index 1117da9..41ec2e4 100644
--- a/src/NameFormatParser.php
+++ b/src/NameFormatParser.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\name;
 
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Component\Render\HtmlEscapedText;
 use Drupal\Component\Utility\Html;
@@ -65,7 +66,7 @@ class NameFormatParser {
    *   - markup (string): key of the markup type.
    *   - boundary (string): regexp for word boundary.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   A renderable object representing the name.
    */
   public function parse(array $name_components, $format = '', array $settings = []) {
diff --git a/src/NameFormatter.php b/src/NameFormatter.php
index a0d94f7..584b29a 100644
--- a/src/NameFormatter.php
+++ b/src/NameFormatter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\name;
 
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
@@ -26,35 +27,35 @@ class NameFormatter implements NameFormatterInterface {
   /**
    * The name format parser.
    *
-   * @var \Drupal\name\NameFormatParser
+   * @var NameFormatParser
    */
   protected $parser;
 
   /**
    * The name format storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $nameFormatStorage;
 
   /**
    * The name list format storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $listFormatStorage;
 
   /**
    * Language manager for retrieving the default language code if needed.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The factory for configuration objects.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -79,15 +80,15 @@ class NameFormatter implements NameFormatterInterface {
   /**
    * Constructs a name formatter object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity manager.
-   * @param \Drupal\name\NameFormatParser $parser
+   * @param NameFormatParser $parser
    *   The name format parser.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   The string translation.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, NameFormatParser $parser, LanguageManagerInterface $language_manager, TranslationInterface $translation, ConfigFactoryInterface $config_factory) {
diff --git a/src/NameFormatterInterface.php b/src/NameFormatterInterface.php
index 68d5d5d..6a57013 100644
--- a/src/NameFormatterInterface.php
+++ b/src/NameFormatterInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\name;
 
+use Drupal\Component\Render\MarkupInterface;
 /**
  * Provides an interface defining a name formatter.
  */
@@ -31,7 +32,7 @@ interface NameFormatterInterface {
    *   (optional) Language code to translate to. NULL (default) means to use
    *   the user interface language for the page.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   A renderable object representing the name.
    */
   public function format(array $components, $type = 'default', $langcode = NULL);
@@ -53,7 +54,7 @@ interface NameFormatterInterface {
    *   (optional) Language code to translate to. NULL (default) means to use
    *   the user interface language for the page.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   The processed name in a MarkupInterface object.
    */
   public function formatList(array $items, $type = 'default', $list_type = 'default', $langcode = NULL);
diff --git a/src/NameGenerator.php b/src/NameGenerator.php
index 3724787..03c0c88 100644
--- a/src/NameGenerator.php
+++ b/src/NameGenerator.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\name;
 
+use Drupal\Core\Config\ConfigException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
@@ -18,28 +19,28 @@ class NameGenerator implements NameGeneratorInterface {
   /**
    * The name formatter.
    *
-   * @var \Drupal\name\NameFormatter
+   * @var NameFormatter
    */
   protected $formatter;
 
   /**
    * The name format parser.
    *
-   * @var \Drupal\name\NameFormatParser
+   * @var NameFormatParser
    */
   protected $parser;
 
   /**
    * The factory for configuration objects.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Language manager for retrieving the default language code if needed.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
@@ -53,15 +54,15 @@ class NameGenerator implements NameGeneratorInterface {
   /**
    * Constructs a name formatter object.
    *
-   * @param \Drupal\name\NameFormatter $formatter
+   * @param NameFormatter $formatter
    *   The name formatter.
-   * @param \Drupal\name\NameFormatParser $parser
+   * @param NameFormatParser $parser
    *   The name format parser.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   The string translation.
    */
   public function __construct(NameFormatter $formatter, NameFormatParser $parser, ConfigFactoryInterface $config_factory, LanguageManagerInterface $language_manager, TranslationInterface $translation) {
@@ -179,13 +180,13 @@ class NameGenerator implements NameGeneratorInterface {
    *   The configuration to load.
    * @param string $key
    *   The configuration key to retrieve.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface|null $field_definition
+   * @param FieldDefinitionInterface|null $field_definition
    *   The field definition to find field specific configuration.
    *
    * @return array
    *   The array of settings.
    *
-   * @throws \Drupal\Core\Config\ConfigException
+   * @throws ConfigException
    *   An error if the global configuration is empty or missing.
    */
   protected function loadConfiguration($config, $key, FieldDefinitionInterface $field_definition = NULL) {
@@ -203,7 +204,7 @@ class NameGenerator implements NameGeneratorInterface {
   /**
    * Helper function to filter the name components by the field definition.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition if in context.
    * @param array $example_names
    *   Array of names to filter.
diff --git a/src/NameGeneratorInterface.php b/src/NameGeneratorInterface.php
index 50e9348..cac9713 100644
--- a/src/NameGeneratorInterface.php
+++ b/src/NameGeneratorInterface.php
@@ -14,7 +14,7 @@ interface NameGeneratorInterface {
    *
    * @param int $limit
    *   The number to generate.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition if in context.
    *
    * @return array
@@ -27,7 +27,7 @@ interface NameGeneratorInterface {
    *
    * @param int $limit
    *   The number to load.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition if in context.
    *
    * @return array
diff --git a/src/NameListFormatListBuilder.php b/src/NameListFormatListBuilder.php
index c70d68d..c823c4d 100644
--- a/src/NameListFormatListBuilder.php
+++ b/src/NameListFormatListBuilder.php
@@ -18,21 +18,21 @@ class NameListFormatListBuilder extends ConfigEntityListBuilder {
   /**
    * The name formatter.
    *
-   * @var \Drupal\name\NameFormatterInterface
+   * @var NameFormatterInterface
    */
   protected $formatter;
 
   /**
    * The name format parser.
    *
-   * @var \Drupal\name\NameFormatParser
+   * @var NameFormatParser
    */
   protected $parser;
 
   /**
    * The name generator.
    *
-   * @var \Drupal\name\NameGeneratorInterface
+   * @var NameGeneratorInterface
    */
   protected $generator;
 
@@ -52,15 +52,15 @@ class NameListFormatListBuilder extends ConfigEntityListBuilder {
   /**
    * Constructs a new EntityListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\name\NameFormatterInterface $formatter
+   * @param NameFormatterInterface $formatter
    *   The name formatter.
-   * @param \Drupal\name\NameFormatParser $parser
+   * @param NameFormatParser $parser
    *   The name format parser.
-   * @param \Drupal\name\NameGeneratorInterface $generator
+   * @param NameGeneratorInterface $generator
    *   The name generator service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, NameFormatterInterface $formatter, NameFormatParser $parser, NameGeneratorInterface $generator) {
@@ -134,10 +134,10 @@ class NameListFormatListBuilder extends ConfigEntityListBuilder {
   /**
    * Provides some example based on names with various components set.
    *
-   * @param \Drupal\name\Entity\NameListFormat $entity
+   * @param NameListFormat $entity
    *   The name format entity.
    *
-   * @return \Drupal\Component\Render\FormattableMarkup
+   * @return FormattableMarkup
    *   The example names with formatting applied.
    */
   protected function examples(NameListFormat $entity) {
diff --git a/src/NameOptionsProvider.php b/src/NameOptionsProvider.php
index c5f089b..853a18a 100644
--- a/src/NameOptionsProvider.php
+++ b/src/NameOptionsProvider.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\name;
 
+use Drupal\taxonomy\TermStorageInterface;
+use Drupal\taxonomy\VocabularyStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ -21,37 +23,37 @@ class NameOptionsProvider {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The term storage manager.
    *
-   * @var \Drupal\taxonomy\TermStorageInterface
+   * @var TermStorageInterface
    */
   protected $termStorage;
 
   /**
    * The vocab storage manager.
    *
-   * @var \Drupal\taxonomy\VocabularyStorageInterface
+   * @var VocabularyStorageInterface
    */
   protected $vocabularyStorage;
 
   /**
    * Constructs a new NameOptionsProvider object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/Field/FieldFormatter/NameFormatter.php b/src/Plugin/Field/FieldFormatter/NameFormatter.php
index a2fe779..8cc3a77 100644
--- a/src/Plugin/Field/FieldFormatter/NameFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/NameFormatter.php
@@ -41,21 +41,21 @@ class NameFormatter extends FormatterBase implements ContainerFactoryPluginInter
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The field renderer for any additional components.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -71,14 +71,14 @@ class NameFormatter extends FormatterBase implements ContainerFactoryPluginInter
    *
    * Directly called to format the examples without the fallback.
    *
-   * @var \Drupal\name\NameFormatParser
+   * @var NameFormatParser
    */
   protected $parser;
 
   /**
    * The name generator.
    *
-   * @var \Drupal\name\NameGeneratorInterface
+   * @var NameGeneratorInterface
    */
   protected $generator;
 
@@ -89,7 +89,7 @@ class NameFormatter extends FormatterBase implements ContainerFactoryPluginInter
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ -99,17 +99,17 @@ class NameFormatter extends FormatterBase implements ContainerFactoryPluginInter
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\Core\Entity\EntityFieldManager $entityFieldManager
+   * @param EntityFieldManager $entityFieldManager
    *   The entity field manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The rendering service.
    * @param \Drupal\name\NameFormatter $formatter
    *   The name formatter.
-   * @param \Drupal\name\NameFormatParser $parser
+   * @param NameFormatParser $parser
    *   The name format parser.
-   * @param \Drupal\name\NameGeneratorInterface $generator
+   * @param NameGeneratorInterface $generator
    *   The name format parser.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, EntityFieldManager $entityFieldManager, EntityTypeManagerInterface $entityTypeManager, RendererInterface $renderer, NameFormatterService $formatter, NameFormatParser $parser, NameGeneratorInterface $generator) {
@@ -349,10 +349,10 @@ class NameFormatter extends FormatterBase implements ContainerFactoryPluginInter
   /**
    * Gets the URL object.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   The name formatters FieldItemList.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   Returns a Url object.
    */
   protected function getLinkableTargetUrl(FieldItemListInterface $items) {
@@ -397,7 +397,7 @@ class NameFormatter extends FormatterBase implements ContainerFactoryPluginInter
   /**
    * Gets any additional linked components.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   The name formatters FieldItemList.
    *
    * @return array
diff --git a/src/Plugin/Field/FieldWidget/NameWidget.php b/src/Plugin/Field/FieldWidget/NameWidget.php
index 138de59..df3f9ee 100644
--- a/src/Plugin/Field/FieldWidget/NameWidget.php
+++ b/src/Plugin/Field/FieldWidget/NameWidget.php
@@ -33,7 +33,7 @@ class NameWidget extends WidgetBase implements ContainerFactoryPluginInterface {
   /**
    * Name options provider service.
    *
-   * @var \Drupal\name\NameOptionsProvider
+   * @var NameOptionsProvider
    */
   protected $optionsProvider;
 
@@ -44,13 +44,13 @@ class NameWidget extends WidgetBase implements ContainerFactoryPluginInterface {
    *   The plugin_id for the widget.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the widget is associated.
    * @param array $settings
    *   The widget settings.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\name\NameOptionsProvider $options_provider
+   * @param NameOptionsProvider $options_provider
    *   Name options provider service.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, NameOptionsProvider $options_provider) {
diff --git a/src/Plugin/views/filter/Fulltext.php b/src/Plugin/views/filter/Fulltext.php
index f927838..076d901 100644
--- a/src/Plugin/views/filter/Fulltext.php
+++ b/src/Plugin/views/filter/Fulltext.php
@@ -20,7 +20,7 @@ class Fulltext extends FilterPluginBase {
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
@@ -33,7 +33,7 @@ class Fulltext extends FilterPluginBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, Connection $connection) {
diff --git a/src/Render/NameListFormattableMarkup.php b/src/Render/NameListFormattableMarkup.php
index 3ff7e21..be52a08 100644
--- a/src/Render/NameListFormattableMarkup.php
+++ b/src/Render/NameListFormattableMarkup.php
@@ -52,7 +52,7 @@ class NameListFormattableMarkup implements MarkupInterface {
   /**
    * Escapes values if needed.
    *
-   * @param array|string|\Drupal\Component\Render\MarkupInterface $value
+   * @param array|string|MarkupInterface $value
    *   A placeholder replacement value. Will recursively escape array values
    *   using the specified separator.
    *
diff --git a/src/Traits/NameAdditionalPreferredTrait.php b/src/Traits/NameAdditionalPreferredTrait.php
index 07374c1..e4adeb6 100644
--- a/src/Traits/NameAdditionalPreferredTrait.php
+++ b/src/Traits/NameAdditionalPreferredTrait.php
@@ -29,7 +29,7 @@ trait NameAdditionalPreferredTrait {
    *
    * @param array $form
    *   The form where the settings form is being included in.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the (entire) configuration form.
    *
    * @return array
diff --git a/src/Traits/NameFieldSettingsTrait.php b/src/Traits/NameFieldSettingsTrait.php
index a1ba00f..61184a8 100644
--- a/src/Traits/NameFieldSettingsTrait.php
+++ b/src/Traits/NameFieldSettingsTrait.php
@@ -126,7 +126,7 @@ trait NameFieldSettingsTrait {
    *   The settings.
    * @param array $form
    *   The form where the settings form is being included in.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the (entire) configuration form.
    * @param bool $has_data
    *   A flag to indicate if the field has data.
@@ -336,7 +336,7 @@ trait NameFieldSettingsTrait {
    *
    * @param array $element
    *   Element being validated.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function validateMinimumComponents(array $element, FormStateInterface $form_state) {
@@ -368,7 +368,7 @@ trait NameFieldSettingsTrait {
    *
    * @param array $element
    *   Element being validated.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function validateTitleOptions($element, FormStateInterface $form_state) {
@@ -382,7 +382,7 @@ trait NameFieldSettingsTrait {
    *
    * @param array $element
    *   Element being validated.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function validateGenerationalOptions($element, FormStateInterface $form_state) {
diff --git a/src/Traits/NameFormDisplaySettingsTrait.php b/src/Traits/NameFormDisplaySettingsTrait.php
index 5fcc99a..ea30284 100644
--- a/src/Traits/NameFormDisplaySettingsTrait.php
+++ b/src/Traits/NameFormDisplaySettingsTrait.php
@@ -67,7 +67,7 @@ trait NameFormDisplaySettingsTrait {
    *   The settings.
    * @param array $form
    *   The form where the settings form is being included in.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the (entire) configuration form.
    * @param bool $has_data
    *   A flag to indicate if the field has data.
diff --git a/src/Traits/NameFormSettingsHelperTrait.php b/src/Traits/NameFormSettingsHelperTrait.php
index 3f0aac9..7fa4681 100644
--- a/src/Traits/NameFormSettingsHelperTrait.php
+++ b/src/Traits/NameFormSettingsHelperTrait.php
@@ -173,7 +173,7 @@ trait NameFormSettingsHelperTrait {
    *
    * @param array $element
    *   Element being validated.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param mixed $values
    *   Values to check.
diff --git a/tests/src/Functional/NameAdminTest.php b/tests/src/Functional/NameAdminTest.php
index 8aa55c1..878c2b2 100644
--- a/tests/src/Functional/NameAdminTest.php
+++ b/tests/src/Functional/NameAdminTest.php
@@ -100,21 +100,29 @@ class NameAdminTest extends NameTestBase {
       'name_settings[sep3]' => '',
     ];
     foreach ($default_values as $name => $value) {
-      $this->assertField($name, $value);
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Change assertion to buttonExists() if checking for a button.
+      $this->assertSession()->fieldExists($name, $value);
     }
     // ID example.
-    $this->assertFieldById('edit-name-settings-sep1', ' ', t('Sep 1 default value.'));
+    $this->assertSession()->fieldValueEquals('edit-name-settings-sep1', ' ');
 
     $test_values = [
       'name_settings[sep1]' => '~',
       'name_settings[sep2]' => '^',
       'name_settings[sep3]' => '-',
     ];
-    $this->drupalPostForm('admin/config/regional/name/settings', $test_values, t('Save configuration'));
-    $this->assertText(t('The configuration options have been saved.'));
+    $this->drupalGet('admin/config/regional/name/settings');
+    $this->submitForm($test_values, t('Save configuration'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('The configuration options have been saved.'));
 
     foreach ($test_values as $name => $value) {
-      $this->assertField($name, $value);
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Change assertion to buttonExists() if checking for a button.
+      $this->assertSession()->fieldExists($name, $value);
     }
 
     // Delete all existing formats.
@@ -126,32 +134,55 @@ class NameAdminTest extends NameTestBase {
     });
 
     $this->drupalGet('admin/config/regional/name/add');
-    $this->assertRaw('Format string help', 'Testing the help fieldgroup');
+    $this->assertSession()->responseContains('Format string help');
     $values = ['label' => '', 'id' => '', 'pattern' => ''];
-    $this->drupalPostForm('admin/config/regional/name/add', $values, t('Save format'));
+    $this->drupalGet('admin/config/regional/name/add');
+    $this->submitForm($values, t('Save format'));
     foreach ([t('Name'), t('Machine-readable name'), t('Format')] as $title) {
-      $this->assertText(t('@field field is required', ['@field' => $title]));
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains(t('@field field is required', ['@field' => $title]));
     }
     $values = [
       'label' => 'given',
       'id' => '1234567890abcdefghijklmnopqrstuvwxyz_',
       'pattern' => 'a',
     ];
-    $this->drupalPostForm('admin/config/regional/name/add', $values, t('Save format'));
-    $this->assertNoText(t('@field field is required', ['@field' => t('Format')]));
-    $this->assertNoText(t('@field field is required', ['@field' => t('Machine-readable name')]));
+    $this->drupalGet('admin/config/regional/name/add');
+    $this->submitForm($values, t('Save format'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(t('@field field is required', ['@field' => t('Format')]));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(t('@field field is required', ['@field' => t('Machine-readable name')]));
 
     $values = ['label' => 'given', 'id' => '%&*(', 'pattern' => 'a'];
-    $this->drupalPostForm('admin/config/regional/name/add', $values, t('Save format'));
-    $this->assertText(t('The machine-readable name must contain only lowercase letters, numbers, and underscores.'));
+    $this->drupalGet('admin/config/regional/name/add');
+    $this->submitForm($values, t('Save format'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('The machine-readable name must contain only lowercase letters, numbers, and underscores.'));
 
     $values = ['label' => 'default', 'id' => 'default', 'pattern' => 'a'];
-    $this->drupalPostForm('admin/config/regional/name/add', $values, t('Save format'));
-    $this->assertText(t('The machine-readable name is already in use. It must be unique.'));
+    $this->drupalGet('admin/config/regional/name/add');
+    $this->submitForm($values, t('Save format'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('The machine-readable name is already in use. It must be unique.'));
 
     $values = ['label' => 'Test', 'id' => 'test', 'pattern' => '\a\bc'];
-    $this->drupalPostForm('admin/config/regional/name/add', $values, t('Save format'));
-    $this->assertText(t('Name format Test added.'));
+    $this->drupalGet('admin/config/regional/name/add');
+    $this->submitForm($values, t('Save format'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Name format Test added.'));
 
     $row = [
       'title' => 'Test',
@@ -164,8 +195,12 @@ class NameAdminTest extends NameTestBase {
     $this->assertRow($row, $row_template, 3);
 
     $values = ['label' => 'new name', 'pattern' => 'f+g'];
-    $this->drupalPostForm('admin/config/regional/name/manage/test', $values, t('Save format'));
-    $this->assertText(t('Name format new name has been updated.'));
+    $this->drupalGet('admin/config/regional/name/manage/test');
+    $this->submitForm($values, t('Save format'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Name format new name has been updated.'));
 
     $row = [
       'label' => $values['label'],
@@ -175,16 +210,22 @@ class NameAdminTest extends NameTestBase {
     $this->assertRow($row, $row_template, 3);
 
     $this->drupalGet('admin/config/regional/name/manage/60');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
 
     $this->drupalGet('admin/config/regional/name/manage/60/delete');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
 
     $this->drupalGet('admin/config/regional/name/manage/test/delete');
-    $this->assertText(t('Are you sure you want to delete the custom format @title?', ['@title' => $values['label']]));
-
-    $this->drupalPostForm(NULL, [], t('Delete'));
-    $this->assertText(t('The name format @title has been deleted.', ['@title' => $values['label']]));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Are you sure you want to delete the custom format @title?', ['@title' => $values['label']]));
+
+    $this->submitForm([], t('Delete'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('The name format @title has been deleted.', ['@title' => $values['label']]));
   }
 
   /**
@@ -236,13 +277,17 @@ class NameAdminTest extends NameTestBase {
       // Integers 1 through 20.
       // 'el_al_first' => '',
     ];
-    $this->drupalPostForm('admin/config/regional/name/list/add', $values, t('Save list format'));
+    $this->drupalGet('admin/config/regional/name/list/add');
+    $this->submitForm($values, t('Save list format'));
     $labels = [
       t('Name'),
       t('Machine-readable name'),
     ];
     foreach ($labels as $title) {
-      $this->assertText(t('@field field is required', ['@field' => $title]));
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains(t('@field field is required', ['@field' => $title]));
     }
     $values = [
       'label' => 'comma',
@@ -253,17 +298,32 @@ class NameAdminTest extends NameTestBase {
       'el_al_min' => '14',
       'el_al_first' => '5',
     ];
-    $this->drupalPostForm('admin/config/regional/name/list/add', $values, t('Save list format'));
-    $this->assertNoText(t('@field field is required', ['@field' => t('Last delimiter type')]));
-    $this->assertNoText(t('@field field is required', ['@field' => t('Machine-readable name')]));
+    $this->drupalGet('admin/config/regional/name/list/add');
+    $this->submitForm($values, t('Save list format'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(t('@field field is required', ['@field' => t('Last delimiter type')]));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(t('@field field is required', ['@field' => t('Machine-readable name')]));
 
     $values['id'] = '%&*(';
-    $this->drupalPostForm('admin/config/regional/name/list/add', $values, t('Save list format'));
-    $this->assertText(t('The machine-readable name must contain only lowercase letters, numbers, and underscores.'));
+    $this->drupalGet('admin/config/regional/name/list/add');
+    $this->submitForm($values, t('Save list format'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('The machine-readable name must contain only lowercase letters, numbers, and underscores.'));
 
     $values = ['label' => 'default', 'id' => 'default', 'delimiter' => 'a'];
-    $this->drupalPostForm('admin/config/regional/name/list/add', $values, t('Save list format'));
-    $this->assertText(t('The machine-readable name is already in use. It must be unique.'));
+    $this->drupalGet('admin/config/regional/name/list/add');
+    $this->submitForm($values, t('Save list format'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('The machine-readable name is already in use. It must be unique.'));
 
     $values = [
       'label' => 'Test label',
@@ -274,8 +334,12 @@ class NameAdminTest extends NameTestBase {
       'el_al_min' => '3',
       'el_al_first' => '1',
     ];
-    $this->drupalPostForm('admin/config/regional/name/list/add', $values, t('Save list format'));
-    $this->assertText(t('Name list format Test label added.'));
+    $this->drupalGet('admin/config/regional/name/list/add');
+    $this->submitForm($values, t('Save list format'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Name list format Test label added.'));
 
     $row = [
       'title' => 'Test label',
@@ -293,16 +357,22 @@ class NameAdminTest extends NameTestBase {
     $this->assertRowContains(['settings' => $summary_text], $row_template, 3);
 
     $this->drupalGet('admin/config/regional/name/list/manage/60');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
 
     $this->drupalGet('admin/config/regional/name/list/manage/60/delete');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
 
     $this->drupalGet('admin/config/regional/name/list/manage/test/delete');
-    $this->assertText(t('Are you sure you want to delete the custom list format @title?', ['@title' => $values['label']]));
-
-    $this->drupalPostForm(NULL, [], t('Delete'));
-    $this->assertText(t('The name list format @title has been deleted.', ['@title' => $values['label']]));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Are you sure you want to delete the custom list format @title?', ['@title' => $values['label']]));
+
+    $this->submitForm([], t('Delete'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('The name list format @title has been deleted.', ['@title' => $values['label']]));
   }
 
   /**
@@ -326,9 +396,7 @@ class NameAdminTest extends NameTestBase {
           $results = isset($elements[0]) ? $elements[0]->getHtml() : '';
           $message = "Testing {$cell_code} on row {$id} using '{$xpath}' and expecting '" . Html::escape($value) . "', got '" . Html::escape($results) . "'.";
           if ($results == $value || strpos($results, $value . '?destination=') === 0) {
-            $this->pass($message);
-          }
-          else {
+          } else {
             $this->fail($message);
           }
         }
diff --git a/tests/src/Functional/NameFieldTest.php b/tests/src/Functional/NameFieldTest.php
index 7e073fe..9acd670 100644
--- a/tests/src/Functional/NameFieldTest.php
+++ b/tests/src/Functional/NameFieldTest.php
@@ -28,7 +28,7 @@ class NameFieldTest extends NameTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Create content-type: page.
@@ -50,10 +50,12 @@ class NameFieldTest extends NameTestBase {
       'field_name' => 'name_test',
       'new_storage_type' => 'name',
     ];
+    $this->drupalGet('admin/structure/types/manage/page/fields/add-field');
 
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/add-field', $new_name_field, t('Save and continue'));
+    $this->submitForm($new_name_field, t('Save and continue'));
     $storage_settings = [];
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test/storage', $storage_settings, t('Save field settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test/storage');
+    $this->submitForm($storage_settings, t('Save field settings'));
     $this->resetAll();
 
     // Required test.
@@ -64,8 +66,9 @@ class NameFieldTest extends NameTestBase {
     foreach ($this->nameGetFieldStorageSettingsCheckboxes() as $key => $value) {
       $field_settings[$key] = FALSE;
     }
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test');
 
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test', $field_settings, t('Save settings'));
+    $this->submitForm($field_settings, t('Save settings'));
 
     $n = _name_translations();
     $required_messages = [
@@ -92,7 +95,10 @@ class NameFieldTest extends NameTestBase {
       ]),
     ];
     foreach ($required_messages as $message) {
-      $this->assertText($message);
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains($message);
     }
     $field_settings = [
       'settings[components][title]' => FALSE,
@@ -120,7 +126,8 @@ class NameFieldTest extends NameTestBase {
       'settings[generational_options]' => "-- --\nJr.\nSr.\nI\nII\nIII\nIV\nV\nVI\nVII\nVIII\nIX\nX\n[vocabulary:123]",
     ];
     $this->resetAll();
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test', $field_settings, t('Save settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test');
+    $this->submitForm($field_settings, t('Save settings'));
 
     $required_messages = [
       t('@field must be higher than or equal to 1.', ['@field' => $n['title']]),
@@ -141,7 +148,10 @@ class NameFieldTest extends NameTestBase {
       ]),
     ];
     foreach ($required_messages as $message) {
-      $this->assertText($message);
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains($message);
     }
 
     // Make sure option lengths do not exceed the title lengths.
@@ -152,7 +162,8 @@ class NameFieldTest extends NameTestBase {
       'settings[generational_options]' => "AAAA\n-- --\nJr.\nSr.\nI\nII\nIII\nIV\nV\nVI\nVII\nVIII\nIX\nX\nBBBB",
     ];
     $this->resetAll();
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test', $field_settings, t('Save settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test');
+    $this->submitForm($field_settings, t('Save settings'));
     $required_messages = [
       t('The following options exceed the maximum allowed @field length: Aaaaa., Bbbbbbbb, Ccccc.', [
         '@field' => t('@title options', ['@title' => $n['title']]),
@@ -163,7 +174,10 @@ class NameFieldTest extends NameTestBase {
     ];
 
     foreach ($required_messages as $message) {
-      $this->assertText($message);
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains($message);
     }
 
     // Make sure option have at least one valid option.
@@ -172,13 +186,17 @@ class NameFieldTest extends NameTestBase {
       'settings[generational_options]' => " \n-- --\n ",
     ];
     $this->resetAll();
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test', $field_settings, t('Save settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test');
+    $this->submitForm($field_settings, t('Save settings'));
     $required_messages = [
       t('@field are required.', ['@field' => t('@title options', ['@title' => $n['title']])]),
       t('@field are required.', ['@field' => t('@generational options', ['@generational' => $n['generational']])]),
     ];
     foreach ($required_messages as $message) {
-      $this->assertText($message);
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains($message);
     }
 
     // Make sure option have at least one valid only have one default value.
@@ -187,7 +205,8 @@ class NameFieldTest extends NameTestBase {
       'settings[generational_options]' => "-- --\nJr.\nSr.\nI\nII\nIII\nIV\nV\nVI\n--",
     ];
     $this->resetAll();
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test', $field_settings, t('Save settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test');
+    $this->submitForm($field_settings, t('Save settings'));
     $required_messages = [
       t('@field can only have one blank value assigned to it.', [
         '@field' => t('@title options', [
@@ -201,14 +220,21 @@ class NameFieldTest extends NameTestBase {
       ]),
     ];
     foreach ($required_messages as $message) {
-      $this->assertText($message);
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains($message);
     }
 
     // Save the field again with the default values.
     $this->resetAll();
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test', $this->nameGetFieldStorageSettings(), t('Save settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test');
+    $this->submitForm($this->nameGetFieldStorageSettings(), t('Save settings'));
 
-    $this->assertText(t('Saved Test name configuration.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Saved Test name configuration.'));
 
     // First, check that field validation is working.
     $field_settings = [
@@ -238,7 +264,8 @@ class NameFieldTest extends NameTestBase {
 
     ];
     $this->resetAll();
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test', $field_settings, t('Save settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test');
+    $this->submitForm($field_settings, t('Save settings'));
 
     $required_messages = [
       t('Maximum length for @field must be higher than or equal to 1.', ['@field' => $n['title']]),
@@ -261,7 +288,10 @@ class NameFieldTest extends NameTestBase {
       ]),
     ];
     foreach ($required_messages as $message) {
-      $this->assertText($message);
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains($message);
     }
 
     $field_settings = [
@@ -285,7 +315,7 @@ class NameFieldTest extends NameTestBase {
     $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test');
 
     foreach ($field_settings as $name => $value) {
-      $this->assertFieldByName($name, $value);
+      $this->assertSession()->fieldValueEquals($name, $value);
     }
 
     // Check help text display.
@@ -293,32 +323,32 @@ class NameFieldTest extends NameTestBase {
     $edit = [
       'description' => 'This is a description.',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save settings'));
+    $this->submitForm($edit, t('Save settings'));
     $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test/storage');
     $edit = [
       'cardinality' => 'number',
       'cardinality_number' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save field settings'));
+    $this->submitForm($edit, t('Save field settings'));
     $this->drupalGet('node/add/page');
-    $this->assertUniqueText('This is a description.', 'Field description is shown once when field cardinality is 1.');
+    $this->assertSession()->pageTextContainsOnce('This is a description.', 'Field description is shown once when field cardinality is 1.');
 
     $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test/storage');
     $edit = [
       'cardinality' => 'number',
       'cardinality_number' => 3,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save field settings'));
+    $this->submitForm($edit, t('Save field settings'));
     $this->drupalGet('node/add/page');
-    $this->assertUniqueText('This is a description.', 'Field description is shown once when field cardinality is 3.');
+    $this->assertSession()->pageTextContainsOnce('This is a description.', 'Field description is shown once when field cardinality is 3.');
 
     $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test/storage');
     $edit = [
       'cardinality' => '-1',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save field settings'));
+    $this->submitForm($edit, t('Save field settings'));
     $this->drupalGet('node/add/page');
-    $this->assertUniqueText('This is a description.', 'Field description is shown once when field cardinality is unlimited.');
+    $this->assertSession()->pageTextContainsOnce('This is a description.', 'Field description is shown once when field cardinality is unlimited.');
   }
 
   /**
diff --git a/tests/src/Functional/NameNodeTokenReplaceTest.php b/tests/src/Functional/NameNodeTokenReplaceTest.php
index 99b4b3c..6fff8c5 100644
--- a/tests/src/Functional/NameNodeTokenReplaceTest.php
+++ b/tests/src/Functional/NameNodeTokenReplaceTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\name\Functional;
 
+use Drupal\name\NameFormatterInterface;
+use Drupal\Core\Utility\Token;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Render\BubbleableMetadata;
 use Drupal\node\Entity\Node;
@@ -26,21 +28,21 @@ class NameNodeTokenReplaceTest extends NameTestBase {
   /**
    * The name formatter.
    *
-   * @var \Drupal\name\NameFormatterInterface
+   * @var NameFormatterInterface
    */
   protected $formatter;
 
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $tokenService;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->interfaceLanguage = \Drupal::languageManager()->getCurrentLanguage();
diff --git a/tests/src/Functional/NameOptionsProviderTest.php b/tests/src/Functional/NameOptionsProviderTest.php
index aa30413..b9ff1f4 100644
--- a/tests/src/Functional/NameOptionsProviderTest.php
+++ b/tests/src/Functional/NameOptionsProviderTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\name\Functional;
 
+use Drupal\Core\Entity\EntityTypeListener;
+use Drupal\name\NameOptionsProvider;
 use Drupal\taxonomy\Entity\Term;
 use Drupal\taxonomy\Entity\Vocabulary;
 
@@ -29,21 +31,21 @@ class NameOptionsProviderTest extends NameTestBase {
   /**
    * The entity listener.
    *
-   * @var \Drupal\Core\Entity\EntityTypeListener
+   * @var EntityTypeListener
    */
   protected $entityListener;
 
   /**
    * The name options provider.
    *
-   * @var \Drupal\name\NameOptionsProvider
+   * @var NameOptionsProvider
    */
   protected $optionsProvider;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->entityListener = \Drupal::service('entity_type.listener');
diff --git a/tests/src/Functional/NameTestBase.php b/tests/src/Functional/NameTestBase.php
index a687533..0f6e1ab 100644
--- a/tests/src/Functional/NameTestBase.php
+++ b/tests/src/Functional/NameTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\name\Functional;
 
+use Drupal\user\Entity\User;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -29,21 +30,21 @@ abstract class NameTestBase extends BrowserTestBase {
   /**
    * Web user to run the tests for.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $webUser;
 
   /**
    * Admin user to run the tests for.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $adminUser;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->webUser = $this->drupalCreateUser([]);
     $this->adminUser = $this->drupalCreateUser([
@@ -96,7 +97,7 @@ abstract class NameTestBase extends BrowserTestBase {
   protected function assertNameFormats($name_components, $type, $object, array $names, array $options = []) {
     foreach ($names as $format => $expected) {
       $value = \Drupal::service('name.format_parser')->parse($name_components, $format);
-      $this->assertIdentical($value, $expected, t("Name value for '@name' was '@actual', expected value '@expected'. Components were: %components", [
+      $this->assertSame($value, $expected, t("Name value for '@name' was '@actual', expected value '@expected'. Components were: %components", [
         '@name' => $format,
         '@actual' => $value,
         '@expected' => $expected,
diff --git a/tests/src/Functional/NameTestTrait.php b/tests/src/Functional/NameTestTrait.php
index 4d8698f..7c0a1e1 100644
--- a/tests/src/Functional/NameTestTrait.php
+++ b/tests/src/Functional/NameTestTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\name\Functional;
 
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 
@@ -28,7 +29,7 @@ trait NameTestTrait {
    *   - widget: ['type' => 'options_buttons']
    *   - settings (array)
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface
+   * @return FieldDefinitionInterface
    *   The field definition.
    */
   public function createNameField($field_name, $entity_type, $bundle, array $storage_extras = [], array $field_extras = []) {
diff --git a/tests/src/Functional/NameWidgetTest.php b/tests/src/Functional/NameWidgetTest.php
index 873429e..95f7632 100644
--- a/tests/src/Functional/NameWidgetTest.php
+++ b/tests/src/Functional/NameWidgetTest.php
@@ -29,7 +29,7 @@ class NameWidgetTest extends NameTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Create content-type: page.
@@ -51,10 +51,12 @@ class NameWidgetTest extends NameTestBase {
       'field_name' => 'name_test',
       'new_storage_type' => 'name',
     ];
+    $this->drupalGet('admin/structure/types/manage/page/fields/add-field');
 
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/add-field', $new_name_field, t('Save and continue'));
+    $this->submitForm($new_name_field, t('Save and continue'));
     $storage_settings = [];
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test/storage', $storage_settings, t('Save field settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test/storage');
+    $this->submitForm($storage_settings, t('Save field settings'));
     $this->resetAll();
 
     // Set up a field of each label display and test it shows.
@@ -120,8 +122,9 @@ class NameWidgetTest extends NameTestBase {
 
       'settings[component_layout]' => 'default',
     ];
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test');
 
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test', $field_settings, t('Save settings'));
+    $this->submitForm($field_settings, t('Save settings'));
 
     $this->drupalGet('node/add/page');
 
@@ -142,19 +145,22 @@ class NameWidgetTest extends NameTestBase {
     // Test the language layouts.
     $this->verbose('Testing asian');
     $field_settings['settings[component_layout]'] = 'asian';
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test', $field_settings, t('Save settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test');
+    $this->submitForm($field_settings, t('Save settings'));
     $this->drupalGet('node/add/page');
     $this->assertFieldSettings($field_settings);
 
     $this->verbose('Testing eastern');
     $field_settings['settings[component_layout]'] = 'eastern';
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test', $field_settings, t('Save settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test');
+    $this->submitForm($field_settings, t('Save settings'));
     $this->drupalGet('node/add/page');
     $this->assertFieldSettings($field_settings);
 
     $this->verbose('Testing german');
     $field_settings['settings[component_layout]'] = 'german';
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test', $field_settings, t('Save settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test');
+    $this->submitForm($field_settings, t('Save settings'));
     $this->drupalGet('node/add/page');
     $this->assertFieldSettings($field_settings);
 
@@ -165,7 +171,8 @@ class NameWidgetTest extends NameTestBase {
       // 'settings[credentials_inline]' => TRUE,
       // 'settings[component_layout]' => 'default',
     ] + $field_settings;
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test', $field_settings, t('Save settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test');
+    $this->submitForm($field_settings, t('Save settings'));
     $this->drupalGet('node/add/page');
     foreach (_name_component_keys() as $component) {
       $this->assertComponentSettings($component, $field_settings);
@@ -231,7 +238,7 @@ class NameWidgetTest extends NameTestBase {
    */
   protected function assertComponentSettings($key, array $settings) {
     $xpath = '//div[contains(@class,:value)]';
-    $elements = $this->xpath($this->buildXPathQuery($xpath, [':value' => "name-{$key}-wrapper"]));
+    $elements = $this->xpath($this->assertSession()->buildXPathQuery($xpath, [':value' => "name-{$key}-wrapper"]));
     $this->assertNotEmpty($elements, "Component $key field found.");
     $object = reset($elements);
 
@@ -362,7 +369,7 @@ class NameWidgetTest extends NameTestBase {
    */
   protected function constructFieldXpathByTypeAndAttribute($type, $attribute, $value) {
     $xpath = '//' . $type . '[@' . $attribute . '=:value]';
-    return $this->buildXPathQuery($xpath, [':value' => $value]);
+    return $this->assertSession()->buildXPathQuery($xpath, [':value' => $value]);
   }
 
 }
diff --git a/tests/src/Kernel/NameAutocompleteTest.php b/tests/src/Kernel/NameAutocompleteTest.php
index 8a3dd41..9292b10 100644
--- a/tests/src/Kernel/NameAutocompleteTest.php
+++ b/tests/src/Kernel/NameAutocompleteTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\name\Kernel;
 
+use Drupal\Core\Entity\EntityTypeListener;
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\name\Controller\NameAutocompleteController;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\name\Functional\NameTestTrait;
@@ -32,21 +34,21 @@ class NameAutocompleteTest extends KernelTestBase {
   /**
    * The entity listener.
    *
-   * @var \Drupal\Core\Entity\EntityTypeListener
+   * @var EntityTypeListener
    */
   protected $entityListener;
 
   /**
    * The field definition.
    *
-   * @var \Drupal\Core\Field\FieldDefinitionInterface
+   * @var FieldDefinitionInterface
    */
   protected $field;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(self::$modules);
 
diff --git a/tests/src/Kernel/NameUserTest.php b/tests/src/Kernel/NameUserTest.php
index 46951a1..5cbce03 100644
--- a/tests/src/Kernel/NameUserTest.php
+++ b/tests/src/Kernel/NameUserTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\name\Kernel;
 
+use Drupal\Core\Entity\EntityTypeListener;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\KernelTests\KernelTestBase;
@@ -27,14 +28,14 @@ class NameUserTest extends KernelTestBase {
   /**
    * The entity listener.
    *
-   * @var \Drupal\Core\Entity\EntityTypeListener
+   * @var EntityTypeListener
    */
   protected $entityListener;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(self::$modules);
     $this->installSchema('system', ['sequences']);
@@ -58,7 +59,7 @@ class NameUserTest extends KernelTestBase {
       'entity_type' => 'user',
       'bundle' => 'user',
     ])->save();
-    $this->assertIdentical('', \Drupal::config('name.settings')->get('user_preferred'));
+    $this->assertSame('', \Drupal::config('name.settings')->get('user_preferred'));
 
     FieldStorageConfig::create([
       'field_name' => 'field_name_test',
diff --git a/tests/src/Unit/NameFormatParserTest.php b/tests/src/Unit/NameFormatParserTest.php
index 679ce6e..d7a150c 100644
--- a/tests/src/Unit/NameFormatParserTest.php
+++ b/tests/src/Unit/NameFormatParserTest.php
@@ -16,14 +16,14 @@ class NameFormatParserTest extends UnitTestCase {
   /**
    * The name format parser.
    *
-   * @var \Drupal\name\NameFormatParser
+   * @var NameFormatParser
    */
   protected $parser;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $test_settings = [
       'name.settings' => [
